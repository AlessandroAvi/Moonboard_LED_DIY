
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002381c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009988  080239c0  080239c0  000339c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d348  0802d348  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802d348  0802d348  0003d348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d350  0802d350  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d350  0802d350  0003d350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d354  0802d354  0003d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802d358  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000548c  20000074  0802d3cc  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  0802d3cc  00045500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015874  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e5d  00000000  00000000  00055918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b8  00000000  00000000  00058778  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00059830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001901c  00000000  00000000  0005a7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011069  00000000  00000000  000737cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090611  00000000  00000000  00084835  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c98  00000000  00000000  00114ec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080239a4 	.word	0x080239a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080239a4 	.word	0x080239a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LED_findPos>:
// *******************************************************************
// 					MANIPULATION OF THE LED MATRIX
// *******************************************************************


uint8_t LED_findPos(char letter, uint8_t number){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

	if (number==1){
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <LED_findPos+0x1a>
		return 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e06d      	b.n	8000f9e <LED_findPos+0xf6>
	}

	switch(letter){
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3b41      	subs	r3, #65	; 0x41
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d865      	bhi.n	8000f96 <LED_findPos+0xee>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <LED_findPos+0x28>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000efd 	.word	0x08000efd
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f0f 	.word	0x08000f0f
 8000edc:	08000f25 	.word	0x08000f25
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f37 	.word	0x08000f37
 8000ee8:	08000f51 	.word	0x08000f51
 8000eec:	08000f59 	.word	0x08000f59
 8000ef0:	08000f69 	.word	0x08000f69
 8000ef4:	08000f7f 	.word	0x08000f7f
 8000ef8:	08000f8f 	.word	0x08000f8f
	case('A'):
		position = number-1;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
		break;
 8000f02:	e04b      	b.n	8000f9c <LED_findPos+0xf4>
	case('B'):
		position = 36-number;
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f0c:	e046      	b.n	8000f9c <LED_findPos+0xf4>
	case('C'):
		if(number < 17){
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d803      	bhi.n	8000f1c <LED_findPos+0x74>
			position = 34+number-1;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	3321      	adds	r3, #33	; 0x21
 8000f18:	73fb      	strb	r3, [r7, #15]
		} else {
			position = 34+number;
		}
		break;
 8000f1a:	e03f      	b.n	8000f9c <LED_findPos+0xf4>
			position = 34+number;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	3322      	adds	r3, #34	; 0x22
 8000f20:	73fb      	strb	r3, [r7, #15]
		break;
 8000f22:	e03b      	b.n	8000f9c <LED_findPos+0xf4>
	case('D'):
		position = 71-number;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	f1c3 0347 	rsb	r3, r3, #71	; 0x47
 8000f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2c:	e036      	b.n	8000f9c <LED_findPos+0xf4>
	case('E'):
		position = 69+number;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3345      	adds	r3, #69	; 0x45
 8000f32:	73fb      	strb	r3, [r7, #15]
		break;
 8000f34:	e032      	b.n	8000f9c <LED_findPos+0xf4>
	case('F'):
		if(number>11){
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b0b      	cmp	r3, #11
 8000f3a:	d904      	bls.n	8000f46 <LED_findPos+0x9e>
			position = 106-number;
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 8000f42:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 107-number;
		}
		break;
 8000f44:	e02a      	b.n	8000f9c <LED_findPos+0xf4>
			position = 107-number;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8000f4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f4e:	e025      	b.n	8000f9c <LED_findPos+0xf4>
	case('G'):
		position = 104+number;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	3368      	adds	r3, #104	; 0x68
 8000f54:	73fb      	strb	r3, [r7, #15]
		break;
 8000f56:	e021      	b.n	8000f9c <LED_findPos+0xf4>
	case('H'):
		position = 142-number;
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f5e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f62:	338e      	adds	r3, #142	; 0x8e
 8000f64:	73fb      	strb	r3, [r7, #15]
		break;
 8000f66:	e019      	b.n	8000f9c <LED_findPos+0xf4>
	case('I'):
		if(number>5){
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d903      	bls.n	8000f76 <LED_findPos+0xce>
			position = 140+number;
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	3b74      	subs	r3, #116	; 0x74
 8000f72:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 139+number;
		}
		break;
 8000f74:	e012      	b.n	8000f9c <LED_findPos+0xf4>
			position = 139+number;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	3b75      	subs	r3, #117	; 0x75
 8000f7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f7c:	e00e      	b.n	8000f9c <LED_findPos+0xf4>
	case('J'):
		position = 177-number;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f88:	33b1      	adds	r3, #177	; 0xb1
 8000f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f8c:	e006      	b.n	8000f9c <LED_findPos+0xf4>
	case('K'):
		position = 174+number;
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	3b52      	subs	r3, #82	; 0x52
 8000f92:	73fb      	strb	r3, [r7, #15]
		break;
 8000f94:	e002      	b.n	8000f9c <LED_findPos+0xf4>
	default:
		position=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
		break;
 8000f9a:	bf00      	nop
	}


	return position;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <convert_digit>:


uint8_t convert_digit(char dig1, char dig2){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]

	uint8_t res=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

	if(dig1 == '1'){
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b31      	cmp	r3, #49	; 0x31
 8000fc4:	d101      	bne.n	8000fca <convert_digit+0x1e>
		res = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	if(dig2 == '1'){
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b31      	cmp	r3, #49	; 0x31
 8000fce:	d103      	bne.n	8000fd8 <convert_digit+0x2c>
		res += 1;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e039      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '2'){
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b32      	cmp	r3, #50	; 0x32
 8000fdc:	d103      	bne.n	8000fe6 <convert_digit+0x3a>
		res += 2;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e032      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '3'){
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b33      	cmp	r3, #51	; 0x33
 8000fea:	d103      	bne.n	8000ff4 <convert_digit+0x48>
		res += 3;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e02b      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '4'){
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b34      	cmp	r3, #52	; 0x34
 8000ff8:	d103      	bne.n	8001002 <convert_digit+0x56>
		res += 4;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e024      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '5'){
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b35      	cmp	r3, #53	; 0x35
 8001006:	d103      	bne.n	8001010 <convert_digit+0x64>
		res += 5;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3305      	adds	r3, #5
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e01d      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '6'){
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	2b36      	cmp	r3, #54	; 0x36
 8001014:	d103      	bne.n	800101e <convert_digit+0x72>
		res += 6;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3306      	adds	r3, #6
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e016      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '7'){
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b37      	cmp	r3, #55	; 0x37
 8001022:	d103      	bne.n	800102c <convert_digit+0x80>
		res += 7;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3307      	adds	r3, #7
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e00f      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '8'){
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b38      	cmp	r3, #56	; 0x38
 8001030:	d103      	bne.n	800103a <convert_digit+0x8e>
		res += 8;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3308      	adds	r3, #8
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e008      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '9'){
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b39      	cmp	r3, #57	; 0x39
 800103e:	d103      	bne.n	8001048 <convert_digit+0x9c>
		res += 9;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3309      	adds	r3, #9
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '0'){
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b30      	cmp	r3, #48	; 0x30
		res += 0;
	}

	return res;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <problem_genArray>:

void problem_genArray(Problem *p){
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	466b      	mov	r3, sp
 8001066:	461d      	mov	r5, r3

	uint16_t LedPos = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	857b      	strh	r3, [r7, #42]	; 0x2a
	char     lettArr[p->moveSize];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	1e43      	subs	r3, r0, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	f04f 0400 	mov.w	r4, #0
 8001084:	00d4      	lsls	r4, r2, #3
 8001086:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800108a:	00cb      	lsls	r3, r1, #3
 800108c:	4603      	mov	r3, r0
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	f04f 0400 	mov.w	r4, #0
 800109c:	00d4      	lsls	r4, r2, #3
 800109e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010a2:	00cb      	lsls	r3, r1, #3
 80010a4:	4603      	mov	r3, r0
 80010a6:	3307      	adds	r3, #7
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	ebad 0d03 	sub.w	sp, sp, r3
 80010b0:	466b      	mov	r3, sp
 80010b2:	3300      	adds	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
	uint8_t  numArr[p->moveSize];
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	1e43      	subs	r3, r0, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	00d4      	lsls	r4, r2, #3
 80010d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010d4:	00cb      	lsls	r3, r1, #3
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	00d4      	lsls	r4, r2, #3
 80010e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010ec:	00cb      	lsls	r3, r1, #3
 80010ee:	4603      	mov	r3, r0
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	ebad 0d03 	sub.w	sp, sp, r3
 80010fa:	466b      	mov	r3, sp
 80010fc:	3300      	adds	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
	uint8_t  typeArr[p->moveSize];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	1e43      	subs	r3, r0, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	00d4      	lsls	r4, r2, #3
 800111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800111e:	00cb      	lsls	r3, r1, #3
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f04f 0400 	mov.w	r4, #0
 8001130:	00d4      	lsls	r4, r2, #3
 8001132:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001136:	00cb      	lsls	r3, r1, #3
 8001138:	4603      	mov	r3, r0
 800113a:	3307      	adds	r3, #7
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	ebad 0d03 	sub.w	sp, sp, r3
 8001144:	466b      	mov	r3, sp
 8001146:	3300      	adds	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]

	uint8_t number_iter=0;
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]


	LED_setAllBlack();	// put to 0 all the colors for each LED
 800114e:	f000 f8d3 	bl	80012f8 <LED_setAllBlack>

	for(int j=0; j<p->moveSize; j++){
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e048      	b.n	80011ea <problem_genArray+0x18e>
		lettArr[j] = p->moveLetters[j*2];	// extract letter of hold
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	f893 10a4 	ldrb.w	r1, [r3, #164]	; 0xa4
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	4413      	add	r3, r2
 800116a:	460a      	mov	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
		typeArr[j] = p->startFinish[j*2];	// extract type of hold
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	f893 11ac 	ldrb.w	r1, [r3, #428]	; 0x1ac
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]

		if(p->moveNumbers[number_iter+1] != ','){
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	2b2c      	cmp	r3, #44	; 0x2c
 8001190:	d016      	beq.n	80011c0 <problem_genArray+0x164>
			numArr[j] = convert_digit(p->moveNumbers[number_iter], p->moveNumbers[number_iter+1]);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	7918      	ldrb	r0, [r3, #4]
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff ff01 	bl	8000fac <convert_digit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	4413      	add	r3, r2
 80011b4:	460a      	mov	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
			number_iter += 3;
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	3303      	adds	r3, #3
 80011bc:	77fb      	strb	r3, [r7, #31]
 80011be:	e011      	b.n	80011e4 <problem_genArray+0x188>
		} else {
			numArr[j] = convert_digit('0', p->moveNumbers[number_iter]);
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	f7ff feee 	bl	8000fac <convert_digit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
			number_iter += 2;
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	3302      	adds	r3, #2
 80011e2:	77fb      	strb	r3, [r7, #31]
	for(int j=0; j<p->moveSize; j++){
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	3301      	adds	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbb1      	blt.n	8001158 <problem_genArray+0xfc>
		}
	}


	// for each move define the color of the corresponding LED
	for(int i=0; i<p->moveSize; i++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	e072      	b.n	80012e0 <problem_genArray+0x284>

		// transform letter and number in the led position
		LedPos = LED_findPos(lettArr[i], numArr[i]);
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	4413      	add	r3, r2
 8001200:	7818      	ldrb	r0, [r3, #0]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fe4c 	bl	8000ea8 <LED_findPos>
 8001210:	4603      	mov	r3, r0
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

		// light the led depending if it's start, top or else
		if(typeArr[i]=='s'){			// START, color green
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b73      	cmp	r3, #115	; 0x73
 800121e:	d112      	bne.n	8001246 <problem_genArray+0x1ea>
			LED_Data[LedPos][1] = 0;
 8001220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <problem_genArray+0x298>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	2200      	movs	r2, #0
 800122a:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 250;
 800122c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <problem_genArray+0x298>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	22fa      	movs	r2, #250	; 0xfa
 8001236:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <problem_genArray+0x298>)
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	70da      	strb	r2, [r3, #3]
 8001244:	e049      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='e'){		// TOP, color red
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b65      	cmp	r3, #101	; 0x65
 8001250:	d112      	bne.n	8001278 <problem_genArray+0x21c>
			LED_Data[LedPos][1] = 250;
 8001252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <problem_genArray+0x298>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	22fa      	movs	r2, #250	; 0xfa
 800125c:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 800125e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <problem_genArray+0x298>)
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	2200      	movs	r2, #0
 8001268:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 800126a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <problem_genArray+0x298>)
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	70da      	strb	r2, [r3, #3]
 8001276:	e030      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='d'){		// DEFAULT, color blue
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d112      	bne.n	80012aa <problem_genArray+0x24e>
			LED_Data[LedPos][1] = 0;
 8001284:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <problem_genArray+0x298>)
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <problem_genArray+0x298>)
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	2200      	movs	r2, #0
 800129a:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 250;
 800129c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <problem_genArray+0x298>)
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	22fa      	movs	r2, #250	; 0xfa
 80012a6:	70da      	strb	r2, [r3, #3]
 80012a8:	e017      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='c'){		// easter egg, color pink
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b63      	cmp	r3, #99	; 0x63
 80012b4:	d111      	bne.n	80012da <problem_genArray+0x27e>
			LED_Data[LedPos][1] = 250;
 80012b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <problem_genArray+0x298>)
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	22fa      	movs	r2, #250	; 0xfa
 80012c0:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 192;
 80012c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <problem_genArray+0x298>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	22c0      	movs	r2, #192	; 0xc0
 80012cc:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 203;
 80012ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <problem_genArray+0x298>)
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	22cb      	movs	r2, #203	; 0xcb
 80012d8:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<p->moveSize; i++){
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	db87      	blt.n	80011fa <problem_genArray+0x19e>
 80012ea:	46ad      	mov	sp, r5
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	3730      	adds	r7, #48	; 0x30
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	200000b8 	.word	0x200000b8

080012f8 <LED_setAllBlack>:



void LED_setAllBlack(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e014      	b.n	800132e <LED_setAllBlack+0x36>
		LED_Data[i][1]=0;
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <LED_setAllBlack+0x48>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	2200      	movs	r2, #0
 800130e:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=0;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LED_setAllBlack+0x48>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=0;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <LED_setAllBlack+0x48>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2bc5      	cmp	r3, #197	; 0xc5
 8001332:	dde7      	ble.n	8001304 <LED_setAllBlack+0xc>
	}
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200000b8 	.word	0x200000b8

08001344 <LED_randSetRand>:
	LED_Data[LedPos][2] = 250;
	LED_Data[LedPos][3] = 250;
}


void LED_randSetRand(){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0

	LED_setAllBlack();
 800134a:	f7ff ffd5 	bl	80012f8 <LED_setAllBlack>

	int n1, n2;

	for(int i=0; i<MAX_LED; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e02a      	b.n	80013aa <LED_randSetRand+0x66>
		n1 = rand();
 8001354:	f020 fe6e 	bl	8022034 <rand>
 8001358:	60b8      	str	r0, [r7, #8]
		n2 = rand();
 800135a:	f020 fe6b 	bl	8022034 <rand>
 800135e:	6078      	str	r0, [r7, #4]

		if(n1 > n2){
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dd1d      	ble.n	80013a4 <LED_randSetRand+0x60>
			LED_Data[i][1]=rand();
 8001368:	f020 fe64 	bl	8022034 <rand>
 800136c:	4603      	mov	r3, r0
 800136e:	b2d9      	uxtb	r1, r3
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <LED_randSetRand+0x74>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	460a      	mov	r2, r1
 800137a:	705a      	strb	r2, [r3, #1]
			LED_Data[i][2]=rand();
 800137c:	f020 fe5a 	bl	8022034 <rand>
 8001380:	4603      	mov	r3, r0
 8001382:	b2d9      	uxtb	r1, r3
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <LED_randSetRand+0x74>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	709a      	strb	r2, [r3, #2]
			LED_Data[i][3]=rand();
 8001390:	f020 fe50 	bl	8022034 <rand>
 8001394:	4603      	mov	r3, r0
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <LED_randSetRand+0x74>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2bc5      	cmp	r3, #197	; 0xc5
 80013ae:	ddd1      	ble.n	8001354 <LED_randSetRand+0x10>
		}
	}
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000b8 	.word	0x200000b8

080013bc <WS2811_Send>:
// *******************************************************************
// 						GENERATION OF PWM
// *******************************************************************


void WS2811_Send(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0

	uint16_t indx_low = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	83fb      	strh	r3, [r7, #30]
	uint16_t indx_high = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	83bb      	strh	r3, [r7, #28]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e012      	b.n	80013f6 <WS2811_Send+0x3a>
		pwmData_low[indx_low] = 0;
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <WS2811_Send+0x160>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80013da:	8bbb      	ldrh	r3, [r7, #28]
 80013dc:	4a50      	ldr	r2, [pc, #320]	; (8001520 <WS2811_Send+0x164>)
 80013de:	2100      	movs	r1, #0
 80013e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80013e4:	8bfb      	ldrh	r3, [r7, #30]
 80013e6:	3301      	adds	r3, #1
 80013e8:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80013ea:	8bbb      	ldrh	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b27      	cmp	r3, #39	; 0x27
 80013fa:	dde9      	ble.n	80013d0 <WS2811_Send+0x14>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e05a      	b.n	80014b8 <WS2811_Send+0xfc>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 8001402:	4a48      	ldr	r2, [pc, #288]	; (8001524 <WS2811_Send+0x168>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	4945      	ldr	r1, [pc, #276]	; (8001524 <WS2811_Send+0x168>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	431a      	orrs	r2, r3
 800141c:	4941      	ldr	r1, [pc, #260]	; (8001524 <WS2811_Send+0x168>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	4313      	orrs	r3, r2
 8001428:	607b      	str	r3, [r7, #4]

		if(i <= 94){	// LOW PWM DATA
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b5e      	cmp	r3, #94	; 0x5e
 800142e:	dc20      	bgt.n	8001472 <WS2811_Send+0xb6>

			for(int i=23; i>=0; i--){
 8001430:	2317      	movs	r3, #23
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	e019      	b.n	800146a <WS2811_Send+0xae>
				if(color & (1<<i)){
 8001436:	2201      	movs	r2, #1
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <WS2811_Send+0x98>
					pwmData_low[indx_low]=43;
 8001448:	8bfb      	ldrh	r3, [r7, #30]
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <WS2811_Send+0x160>)
 800144c:	212b      	movs	r1, #43	; 0x2b
 800144e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001452:	e004      	b.n	800145e <WS2811_Send+0xa2>
				}else{
					pwmData_low[indx_low]=18;
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <WS2811_Send+0x160>)
 8001458:	2112      	movs	r1, #18
 800145a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_low++;
 800145e:	8bfb      	ldrh	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	83fb      	strh	r3, [r7, #30]
			for(int i=23; i>=0; i--){
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	3b01      	subs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dae2      	bge.n	8001436 <WS2811_Send+0x7a>
 8001470:	e01f      	b.n	80014b2 <WS2811_Send+0xf6>
			}

		} else {		// HIGH PWM DATA

			for(int i=23; i>=0; i--){
 8001472:	2317      	movs	r3, #23
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e019      	b.n	80014ac <WS2811_Send+0xf0>
				if(color & (1<<i)){
 8001478:	2201      	movs	r2, #1
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <WS2811_Send+0xda>
					pwmData_high[indx_high]=43;
 800148a:	8bbb      	ldrh	r3, [r7, #28]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <WS2811_Send+0x164>)
 800148e:	212b      	movs	r1, #43	; 0x2b
 8001490:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001494:	e004      	b.n	80014a0 <WS2811_Send+0xe4>
				}else{
					pwmData_high[indx_high]=18;
 8001496:	8bbb      	ldrh	r3, [r7, #28]
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <WS2811_Send+0x164>)
 800149a:	2112      	movs	r1, #18
 800149c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_high++;
 80014a0:	8bbb      	ldrh	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	83bb      	strh	r3, [r7, #28]
			for(int i=23; i>=0; i--){
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dae2      	bge.n	8001478 <WS2811_Send+0xbc>
	for(int i=0; i<MAX_LED; i++){
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2bc5      	cmp	r3, #197	; 0xc5
 80014bc:	dda1      	ble.n	8001402 <WS2811_Send+0x46>


	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e012      	b.n	80014ea <WS2811_Send+0x12e>
		pwmData_low[indx_low] = 0;
 80014c4:	8bfb      	ldrh	r3, [r7, #30]
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <WS2811_Send+0x160>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80014ce:	8bbb      	ldrh	r3, [r7, #28]
 80014d0:	4a13      	ldr	r2, [pc, #76]	; (8001520 <WS2811_Send+0x164>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80014d8:	8bfb      	ldrh	r3, [r7, #30]
 80014da:	3301      	adds	r3, #1
 80014dc:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80014de:	8bbb      	ldrh	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b27      	cmp	r3, #39	; 0x27
 80014ee:	dde9      	ble.n	80014c4 <WS2811_Send+0x108>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData_low, indx_low);
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <WS2811_Send+0x160>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <WS2811_Send+0x16c>)
 80014f8:	f01e fd8e 	bl	8020018 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData_high, indx_high);
 80014fc:	8bbb      	ldrh	r3, [r7, #28]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <WS2811_Send+0x164>)
 8001500:	2100      	movs	r1, #0
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <WS2811_Send+0x170>)
 8001504:	f01e fd88 	bl	8020018 <HAL_TIM_PWM_Start_DMA>


	//while(!datasentflag){};
	datasentflag=0;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <WS2811_Send+0x174>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

	HAL_Delay(250);
 800150e:	20fa      	movs	r0, #250	; 0xfa
 8001510:	f01c fcc2 	bl	801de98 <HAL_Delay>

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20002bf0 	.word	0x20002bf0
 8001520:	20000404 	.word	0x20000404
 8001524:	200000b8 	.word	0x200000b8
 8001528:	20005438 	.word	0x20005438
 800152c:	20005398 	.word	0x20005398
 8001530:	20000090 	.word	0x20000090

08001534 <MessageHandler>:



// BLUETOOTH

void MessageHandler(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

	msgLen = sprintf(msgDebug, buffer);
 8001538:	496e      	ldr	r1, [pc, #440]	; (80016f4 <MessageHandler+0x1c0>)
 800153a:	486f      	ldr	r0, [pc, #444]	; (80016f8 <MessageHandler+0x1c4>)
 800153c:	f020 fdae 	bl	802209c <siprintf>
 8001540:	4602      	mov	r2, r0
 8001542:	4b6e      	ldr	r3, [pc, #440]	; (80016fc <MessageHandler+0x1c8>)
 8001544:	601a      	str	r2, [r3, #0]


	if(name_flag == 0){					// receive NAME
 8001546:	4b6e      	ldr	r3, [pc, #440]	; (8001700 <MessageHandler+0x1cc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d112      	bne.n	8001574 <MessageHandler+0x40>

		msgLen=sprintf(name, buffer);
 800154e:	4969      	ldr	r1, [pc, #420]	; (80016f4 <MessageHandler+0x1c0>)
 8001550:	486c      	ldr	r0, [pc, #432]	; (8001704 <MessageHandler+0x1d0>)
 8001552:	f020 fda3 	bl	802209c <siprintf>
 8001556:	4602      	mov	r2, r0
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <MessageHandler+0x1c8>)
 800155a:	601a      	str	r2, [r3, #0]
		name_flag=1;
 800155c:	4b68      	ldr	r3, [pc, #416]	; (8001700 <MessageHandler+0x1cc>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
		strcpy(problem_Struc->name,buffer);
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <MessageHandler+0x1d4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800156a:	4962      	ldr	r1, [pc, #392]	; (80016f4 <MessageHandler+0x1c0>)
 800156c:	4618      	mov	r0, r3
 800156e:	f020 fdb5 	bl	80220dc <strcpy>
 8001572:	e098      	b.n	80016a6 <MessageHandler+0x172>

	}else if(grade_flag==0 && name_flag==1){	// receive GRADE
 8001574:	4b65      	ldr	r3, [pc, #404]	; (800170c <MessageHandler+0x1d8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <MessageHandler+0x76>
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <MessageHandler+0x1cc>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d112      	bne.n	80015aa <MessageHandler+0x76>

		msgLen=sprintf(grade, buffer);
 8001584:	495b      	ldr	r1, [pc, #364]	; (80016f4 <MessageHandler+0x1c0>)
 8001586:	4862      	ldr	r0, [pc, #392]	; (8001710 <MessageHandler+0x1dc>)
 8001588:	f020 fd88 	bl	802209c <siprintf>
 800158c:	4602      	mov	r2, r0
 800158e:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <MessageHandler+0x1c8>)
 8001590:	601a      	str	r2, [r3, #0]
		grade_flag=1;
 8001592:	4b5e      	ldr	r3, [pc, #376]	; (800170c <MessageHandler+0x1d8>)
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]
		strcpy(problem_Struc->grade,buffer);
 8001598:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <MessageHandler+0x1d4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015a0:	4954      	ldr	r1, [pc, #336]	; (80016f4 <MessageHandler+0x1c0>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f020 fd9a 	bl	80220dc <strcpy>
 80015a8:	e07d      	b.n	80016a6 <MessageHandler+0x172>

	}else if(nMove_flag==0 && grade_flag==1){	// receive N MOVES
 80015aa:	4b5a      	ldr	r3, [pc, #360]	; (8001714 <MessageHandler+0x1e0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12b      	bne.n	800160a <MessageHandler+0xd6>
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <MessageHandler+0x1d8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d127      	bne.n	800160a <MessageHandler+0xd6>

			msgLen=sprintf(nMoves, buffer);
 80015ba:	494e      	ldr	r1, [pc, #312]	; (80016f4 <MessageHandler+0x1c0>)
 80015bc:	4856      	ldr	r0, [pc, #344]	; (8001718 <MessageHandler+0x1e4>)
 80015be:	f020 fd6d 	bl	802209c <siprintf>
 80015c2:	4602      	mov	r2, r0
 80015c4:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <MessageHandler+0x1c8>)
 80015c6:	601a      	str	r2, [r3, #0]
			nMove_flag=1;
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <MessageHandler+0x1e0>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	701a      	strb	r2, [r3, #0]
			if(msgLen==2){
 80015ce:	4b4b      	ldr	r3, [pc, #300]	; (80016fc <MessageHandler+0x1c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d10d      	bne.n	80015f2 <MessageHandler+0xbe>
				problem_Struc->moveSize = convert_digit(nMoves[0], nMoves[1]);
 80015d6:	4b50      	ldr	r3, [pc, #320]	; (8001718 <MessageHandler+0x1e4>)
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <MessageHandler+0x1e4>)
 80015dc:	785b      	ldrb	r3, [r3, #1]
 80015de:	4619      	mov	r1, r3
 80015e0:	4610      	mov	r0, r2
 80015e2:	f7ff fce3 	bl	8000fac <convert_digit>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <MessageHandler+0x1d4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	601a      	str	r2, [r3, #0]
			if(msgLen==2){
 80015f0:	e059      	b.n	80016a6 <MessageHandler+0x172>
			}else{
				problem_Struc->moveSize = convert_digit('0', nMoves[0]);
 80015f2:	4b49      	ldr	r3, [pc, #292]	; (8001718 <MessageHandler+0x1e4>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	2030      	movs	r0, #48	; 0x30
 80015fa:	f7ff fcd7 	bl	8000fac <convert_digit>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <MessageHandler+0x1d4>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	601a      	str	r2, [r3, #0]
			if(msgLen==2){
 8001608:	e04d      	b.n	80016a6 <MessageHandler+0x172>
			}

	}else if(let_move_flag==0 && nMove_flag==1){	// receive LETTER MOVES
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <MessageHandler+0x1e8>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d115      	bne.n	800163e <MessageHandler+0x10a>
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <MessageHandler+0x1e0>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d111      	bne.n	800163e <MessageHandler+0x10a>

		msgLen=sprintf(letter_move, buffer);
 800161a:	4936      	ldr	r1, [pc, #216]	; (80016f4 <MessageHandler+0x1c0>)
 800161c:	4840      	ldr	r0, [pc, #256]	; (8001720 <MessageHandler+0x1ec>)
 800161e:	f020 fd3d 	bl	802209c <siprintf>
 8001622:	4602      	mov	r2, r0
 8001624:	4b35      	ldr	r3, [pc, #212]	; (80016fc <MessageHandler+0x1c8>)
 8001626:	601a      	str	r2, [r3, #0]
		let_move_flag=1;
 8001628:	4b3c      	ldr	r3, [pc, #240]	; (800171c <MessageHandler+0x1e8>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
		strcpy(problem_Struc->moveLetters,buffer);
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <MessageHandler+0x1d4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	33a4      	adds	r3, #164	; 0xa4
 8001634:	492f      	ldr	r1, [pc, #188]	; (80016f4 <MessageHandler+0x1c0>)
 8001636:	4618      	mov	r0, r3
 8001638:	f020 fd50 	bl	80220dc <strcpy>
 800163c:	e033      	b.n	80016a6 <MessageHandler+0x172>

	}else if(num_move_flag==0 && let_move_flag==1){		// receive NUMBER MOVES
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <MessageHandler+0x1f0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d115      	bne.n	8001672 <MessageHandler+0x13e>
 8001646:	4b35      	ldr	r3, [pc, #212]	; (800171c <MessageHandler+0x1e8>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d111      	bne.n	8001672 <MessageHandler+0x13e>

		msgLen=sprintf(number_move, buffer);
 800164e:	4929      	ldr	r1, [pc, #164]	; (80016f4 <MessageHandler+0x1c0>)
 8001650:	4835      	ldr	r0, [pc, #212]	; (8001728 <MessageHandler+0x1f4>)
 8001652:	f020 fd23 	bl	802209c <siprintf>
 8001656:	4602      	mov	r2, r0
 8001658:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MessageHandler+0x1c8>)
 800165a:	601a      	str	r2, [r3, #0]
		num_move_flag=1;
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <MessageHandler+0x1f0>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
		strcpy(problem_Struc->moveNumbers,buffer);
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <MessageHandler+0x1d4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3304      	adds	r3, #4
 8001668:	4922      	ldr	r1, [pc, #136]	; (80016f4 <MessageHandler+0x1c0>)
 800166a:	4618      	mov	r0, r3
 800166c:	f020 fd36 	bl	80220dc <strcpy>
 8001670:	e019      	b.n	80016a6 <MessageHandler+0x172>

	}else if(isTop_flag==0 && num_move_flag==1){		// receive START FINISH
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <MessageHandler+0x1f8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d115      	bne.n	80016a6 <MessageHandler+0x172>
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <MessageHandler+0x1f0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d111      	bne.n	80016a6 <MessageHandler+0x172>

		msgLen=sprintf(isTop, buffer);
 8001682:	491c      	ldr	r1, [pc, #112]	; (80016f4 <MessageHandler+0x1c0>)
 8001684:	482a      	ldr	r0, [pc, #168]	; (8001730 <MessageHandler+0x1fc>)
 8001686:	f020 fd09 	bl	802209c <siprintf>
 800168a:	4602      	mov	r2, r0
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MessageHandler+0x1c8>)
 800168e:	601a      	str	r2, [r3, #0]
		isTop_flag=1;
 8001690:	4b26      	ldr	r3, [pc, #152]	; (800172c <MessageHandler+0x1f8>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
		strcpy(problem_Struc->startFinish,buffer);
 8001696:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <MessageHandler+0x1d4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800169e:	4915      	ldr	r1, [pc, #84]	; (80016f4 <MessageHandler+0x1c0>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f020 fd1b 	bl	80220dc <strcpy>

	}

	if(name_flag==1 && grade_flag==1 && nMove_flag==1 && let_move_flag==1 && num_move_flag==1 && isTop_flag==1){
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MessageHandler+0x1cc>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d115      	bne.n	80016da <MessageHandler+0x1a6>
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <MessageHandler+0x1d8>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <MessageHandler+0x1a6>
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MessageHandler+0x1e0>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10d      	bne.n	80016da <MessageHandler+0x1a6>
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MessageHandler+0x1e8>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d109      	bne.n	80016da <MessageHandler+0x1a6>
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MessageHandler+0x1f0>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d105      	bne.n	80016da <MessageHandler+0x1a6>
 80016ce:	4b17      	ldr	r3, [pc, #92]	; (800172c <MessageHandler+0x1f8>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <MessageHandler+0x1a6>
		BluetoothReceived();
 80016d6:	f000 f831 	bl	800173c <BluetoothReceived>
	}

	//HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);

	memset(buffer, 0, sizeof(buffer));
 80016da:	2232      	movs	r2, #50	; 0x32
 80016dc:	2100      	movs	r1, #0
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MessageHandler+0x1c0>)
 80016e0:	f020 fc9f 	bl	8022022 <memset>
	buffer_index = 0;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MessageHandler+0x200>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
	timer_count=0;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MessageHandler+0x204>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20002b84 	.word	0x20002b84
 80016f8:	20002afc 	.word	0x20002afc
 80016fc:	20000098 	.word	0x20000098
 8001700:	2000009c 	.word	0x2000009c
 8001704:	200052b0 	.word	0x200052b0
 8001708:	20002bec 	.word	0x20002bec
 800170c:	2000009e 	.word	0x2000009e
 8001710:	20002b7c 	.word	0x20002b7c
 8001714:	2000009d 	.word	0x2000009d
 8001718:	20002af8 	.word	0x20002af8
 800171c:	200000a2 	.word	0x200000a2
 8001720:	20002bb8 	.word	0x20002bb8
 8001724:	200000a1 	.word	0x200000a1
 8001728:	20002ac4 	.word	0x20002ac4
 800172c:	200000a0 	.word	0x200000a0
 8001730:	200003d0 	.word	0x200003d0
 8001734:	20000094 	.word	0x20000094
 8001738:	20000095 	.word	0x20000095

0800173c <BluetoothReceived>:



void BluetoothReceived(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	name_flag=0;
 8001740:	4b79      	ldr	r3, [pc, #484]	; (8001928 <BluetoothReceived+0x1ec>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
	grade_flag=0;
 8001746:	4b79      	ldr	r3, [pc, #484]	; (800192c <BluetoothReceived+0x1f0>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
	move_flag=0;
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <BluetoothReceived+0x1f4>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	isTop_flag=0;
 8001752:	4b78      	ldr	r3, [pc, #480]	; (8001934 <BluetoothReceived+0x1f8>)
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]

	msgLen = sprintf(msgDebug, "\n\r");
 8001758:	4b77      	ldr	r3, [pc, #476]	; (8001938 <BluetoothReceived+0x1fc>)
 800175a:	4a78      	ldr	r2, [pc, #480]	; (800193c <BluetoothReceived+0x200>)
 800175c:	8811      	ldrh	r1, [r2, #0]
 800175e:	7892      	ldrb	r2, [r2, #2]
 8001760:	8019      	strh	r1, [r3, #0]
 8001762:	709a      	strb	r2, [r3, #2]
 8001764:	2202      	movs	r2, #2
 8001766:	4b76      	ldr	r3, [pc, #472]	; (8001940 <BluetoothReceived+0x204>)
 8001768:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 800176a:	4b75      	ldr	r3, [pc, #468]	; (8001940 <BluetoothReceived+0x204>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29a      	uxth	r2, r3
 8001770:	230a      	movs	r3, #10
 8001772:	4971      	ldr	r1, [pc, #452]	; (8001938 <BluetoothReceived+0x1fc>)
 8001774:	4873      	ldr	r0, [pc, #460]	; (8001944 <BluetoothReceived+0x208>)
 8001776:	f01f fcda 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, name);
 800177a:	4973      	ldr	r1, [pc, #460]	; (8001948 <BluetoothReceived+0x20c>)
 800177c:	486e      	ldr	r0, [pc, #440]	; (8001938 <BluetoothReceived+0x1fc>)
 800177e:	f020 fc8d 	bl	802209c <siprintf>
 8001782:	4602      	mov	r2, r0
 8001784:	4b6e      	ldr	r3, [pc, #440]	; (8001940 <BluetoothReceived+0x204>)
 8001786:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8001788:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <BluetoothReceived+0x204>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	b29a      	uxth	r2, r3
 800178e:	230a      	movs	r3, #10
 8001790:	4969      	ldr	r1, [pc, #420]	; (8001938 <BluetoothReceived+0x1fc>)
 8001792:	486c      	ldr	r0, [pc, #432]	; (8001944 <BluetoothReceived+0x208>)
 8001794:	f01f fccb 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, "\n\r");
 8001798:	4b67      	ldr	r3, [pc, #412]	; (8001938 <BluetoothReceived+0x1fc>)
 800179a:	4a68      	ldr	r2, [pc, #416]	; (800193c <BluetoothReceived+0x200>)
 800179c:	8811      	ldrh	r1, [r2, #0]
 800179e:	7892      	ldrb	r2, [r2, #2]
 80017a0:	8019      	strh	r1, [r3, #0]
 80017a2:	709a      	strb	r2, [r3, #2]
 80017a4:	2202      	movs	r2, #2
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <BluetoothReceived+0x204>)
 80017a8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80017aa:	4b65      	ldr	r3, [pc, #404]	; (8001940 <BluetoothReceived+0x204>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	230a      	movs	r3, #10
 80017b2:	4961      	ldr	r1, [pc, #388]	; (8001938 <BluetoothReceived+0x1fc>)
 80017b4:	4863      	ldr	r0, [pc, #396]	; (8001944 <BluetoothReceived+0x208>)
 80017b6:	f01f fcba 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, grade);
 80017ba:	4964      	ldr	r1, [pc, #400]	; (800194c <BluetoothReceived+0x210>)
 80017bc:	485e      	ldr	r0, [pc, #376]	; (8001938 <BluetoothReceived+0x1fc>)
 80017be:	f020 fc6d 	bl	802209c <siprintf>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <BluetoothReceived+0x204>)
 80017c6:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80017c8:	4b5d      	ldr	r3, [pc, #372]	; (8001940 <BluetoothReceived+0x204>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	230a      	movs	r3, #10
 80017d0:	4959      	ldr	r1, [pc, #356]	; (8001938 <BluetoothReceived+0x1fc>)
 80017d2:	485c      	ldr	r0, [pc, #368]	; (8001944 <BluetoothReceived+0x208>)
 80017d4:	f01f fcab 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, "\n\r");
 80017d8:	4b57      	ldr	r3, [pc, #348]	; (8001938 <BluetoothReceived+0x1fc>)
 80017da:	4a58      	ldr	r2, [pc, #352]	; (800193c <BluetoothReceived+0x200>)
 80017dc:	8811      	ldrh	r1, [r2, #0]
 80017de:	7892      	ldrb	r2, [r2, #2]
 80017e0:	8019      	strh	r1, [r3, #0]
 80017e2:	709a      	strb	r2, [r3, #2]
 80017e4:	2202      	movs	r2, #2
 80017e6:	4b56      	ldr	r3, [pc, #344]	; (8001940 <BluetoothReceived+0x204>)
 80017e8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <BluetoothReceived+0x204>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	230a      	movs	r3, #10
 80017f2:	4951      	ldr	r1, [pc, #324]	; (8001938 <BluetoothReceived+0x1fc>)
 80017f4:	4853      	ldr	r0, [pc, #332]	; (8001944 <BluetoothReceived+0x208>)
 80017f6:	f01f fc9a 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, letter_move);
 80017fa:	4955      	ldr	r1, [pc, #340]	; (8001950 <BluetoothReceived+0x214>)
 80017fc:	484e      	ldr	r0, [pc, #312]	; (8001938 <BluetoothReceived+0x1fc>)
 80017fe:	f020 fc4d 	bl	802209c <siprintf>
 8001802:	4602      	mov	r2, r0
 8001804:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <BluetoothReceived+0x204>)
 8001806:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8001808:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <BluetoothReceived+0x204>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	b29a      	uxth	r2, r3
 800180e:	230a      	movs	r3, #10
 8001810:	4949      	ldr	r1, [pc, #292]	; (8001938 <BluetoothReceived+0x1fc>)
 8001812:	484c      	ldr	r0, [pc, #304]	; (8001944 <BluetoothReceived+0x208>)
 8001814:	f01f fc8b 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, "\n\r");
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <BluetoothReceived+0x1fc>)
 800181a:	4a48      	ldr	r2, [pc, #288]	; (800193c <BluetoothReceived+0x200>)
 800181c:	8811      	ldrh	r1, [r2, #0]
 800181e:	7892      	ldrb	r2, [r2, #2]
 8001820:	8019      	strh	r1, [r3, #0]
 8001822:	709a      	strb	r2, [r3, #2]
 8001824:	2202      	movs	r2, #2
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <BluetoothReceived+0x204>)
 8001828:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 800182a:	4b45      	ldr	r3, [pc, #276]	; (8001940 <BluetoothReceived+0x204>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	230a      	movs	r3, #10
 8001832:	4941      	ldr	r1, [pc, #260]	; (8001938 <BluetoothReceived+0x1fc>)
 8001834:	4843      	ldr	r0, [pc, #268]	; (8001944 <BluetoothReceived+0x208>)
 8001836:	f01f fc7a 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, number_move);
 800183a:	4946      	ldr	r1, [pc, #280]	; (8001954 <BluetoothReceived+0x218>)
 800183c:	483e      	ldr	r0, [pc, #248]	; (8001938 <BluetoothReceived+0x1fc>)
 800183e:	f020 fc2d 	bl	802209c <siprintf>
 8001842:	4602      	mov	r2, r0
 8001844:	4b3e      	ldr	r3, [pc, #248]	; (8001940 <BluetoothReceived+0x204>)
 8001846:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8001848:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <BluetoothReceived+0x204>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29a      	uxth	r2, r3
 800184e:	230a      	movs	r3, #10
 8001850:	4939      	ldr	r1, [pc, #228]	; (8001938 <BluetoothReceived+0x1fc>)
 8001852:	483c      	ldr	r0, [pc, #240]	; (8001944 <BluetoothReceived+0x208>)
 8001854:	f01f fc6b 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, "\n\r");
 8001858:	4b37      	ldr	r3, [pc, #220]	; (8001938 <BluetoothReceived+0x1fc>)
 800185a:	4a38      	ldr	r2, [pc, #224]	; (800193c <BluetoothReceived+0x200>)
 800185c:	8811      	ldrh	r1, [r2, #0]
 800185e:	7892      	ldrb	r2, [r2, #2]
 8001860:	8019      	strh	r1, [r3, #0]
 8001862:	709a      	strb	r2, [r3, #2]
 8001864:	2202      	movs	r2, #2
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <BluetoothReceived+0x204>)
 8001868:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 800186a:	4b35      	ldr	r3, [pc, #212]	; (8001940 <BluetoothReceived+0x204>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	230a      	movs	r3, #10
 8001872:	4931      	ldr	r1, [pc, #196]	; (8001938 <BluetoothReceived+0x1fc>)
 8001874:	4833      	ldr	r0, [pc, #204]	; (8001944 <BluetoothReceived+0x208>)
 8001876:	f01f fc5a 	bl	802112e <HAL_UART_Transmit>

	msgLen = sprintf(msgDebug, isTop);
 800187a:	4937      	ldr	r1, [pc, #220]	; (8001958 <BluetoothReceived+0x21c>)
 800187c:	482e      	ldr	r0, [pc, #184]	; (8001938 <BluetoothReceived+0x1fc>)
 800187e:	f020 fc0d 	bl	802209c <siprintf>
 8001882:	4602      	mov	r2, r0
 8001884:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <BluetoothReceived+0x204>)
 8001886:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 8001888:	4b2d      	ldr	r3, [pc, #180]	; (8001940 <BluetoothReceived+0x204>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	b29a      	uxth	r2, r3
 800188e:	230a      	movs	r3, #10
 8001890:	4929      	ldr	r1, [pc, #164]	; (8001938 <BluetoothReceived+0x1fc>)
 8001892:	482c      	ldr	r0, [pc, #176]	; (8001944 <BluetoothReceived+0x208>)
 8001894:	f01f fc4b 	bl	802112e <HAL_UART_Transmit>

	problem_genArray(problem_Struc);
 8001898:	4b30      	ldr	r3, [pc, #192]	; (800195c <BluetoothReceived+0x220>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fbdd 	bl	800105c <problem_genArray>

	msgLen = sprintf(msgDebug, "\n\rFINITO2");
 80018a2:	4a25      	ldr	r2, [pc, #148]	; (8001938 <BluetoothReceived+0x1fc>)
 80018a4:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <BluetoothReceived+0x224>)
 80018a6:	cb03      	ldmia	r3!, {r0, r1}
 80018a8:	6010      	str	r0, [r2, #0]
 80018aa:	6051      	str	r1, [r2, #4]
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	8113      	strh	r3, [r2, #8]
 80018b0:	2209      	movs	r2, #9
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <BluetoothReceived+0x204>)
 80018b4:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80018b6:	4b22      	ldr	r3, [pc, #136]	; (8001940 <BluetoothReceived+0x204>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	230a      	movs	r3, #10
 80018be:	491e      	ldr	r1, [pc, #120]	; (8001938 <BluetoothReceived+0x1fc>)
 80018c0:	4820      	ldr	r0, [pc, #128]	; (8001944 <BluetoothReceived+0x208>)
 80018c2:	f01f fc34 	bl	802112e <HAL_UART_Transmit>

	WS2811_Send();
 80018c6:	f7ff fd79 	bl	80013bc <WS2811_Send>

	msgLen = sprintf(msgDebug, "\n\rFINITO3");
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <BluetoothReceived+0x1fc>)
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <BluetoothReceived+0x228>)
 80018ce:	cb03      	ldmia	r3!, {r0, r1}
 80018d0:	6010      	str	r0, [r2, #0]
 80018d2:	6051      	str	r1, [r2, #4]
 80018d4:	881b      	ldrh	r3, [r3, #0]
 80018d6:	8113      	strh	r3, [r2, #8]
 80018d8:	2209      	movs	r2, #9
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <BluetoothReceived+0x204>)
 80018dc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 80018de:	4b18      	ldr	r3, [pc, #96]	; (8001940 <BluetoothReceived+0x204>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	230a      	movs	r3, #10
 80018e6:	4914      	ldr	r1, [pc, #80]	; (8001938 <BluetoothReceived+0x1fc>)
 80018e8:	4816      	ldr	r0, [pc, #88]	; (8001944 <BluetoothReceived+0x208>)
 80018ea:	f01f fc20 	bl	802112e <HAL_UART_Transmit>

	// Display on led boulder info
	lcd16x2_i2c_clear();	// clear the LCD display
 80018ee:	f01b fa2b 	bl	801cd48 <lcd16x2_i2c_clear>
	lcd16x2_i2c_clear();
 80018f2:	f01b fa29 	bl	801cd48 <lcd16x2_i2c_clear>
	lcd16x2_i2c_printf("Name:");
 80018f6:	481c      	ldr	r0, [pc, #112]	; (8001968 <BluetoothReceived+0x22c>)
 80018f8:	f01b fa30 	bl	801cd5c <lcd16x2_i2c_printf>
	lcd16x2_i2c_printf(problem_Struc->name);
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <BluetoothReceived+0x220>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001904:	4618      	mov	r0, r3
 8001906:	f01b fa29 	bl	801cd5c <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 800190a:	f01b fa15 	bl	801cd38 <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("Grad:");
 800190e:	4817      	ldr	r0, [pc, #92]	; (800196c <BluetoothReceived+0x230>)
 8001910:	f01b fa24 	bl	801cd5c <lcd16x2_i2c_printf>
	lcd16x2_i2c_printf(problem_Struc->grade);
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <BluetoothReceived+0x220>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800191c:	4618      	mov	r0, r3
 800191e:	f01b fa1d 	bl	801cd5c <lcd16x2_i2c_printf>

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000009c 	.word	0x2000009c
 800192c:	2000009e 	.word	0x2000009e
 8001930:	2000009f 	.word	0x2000009f
 8001934:	200000a0 	.word	0x200000a0
 8001938:	20002afc 	.word	0x20002afc
 800193c:	080239c0 	.word	0x080239c0
 8001940:	20000098 	.word	0x20000098
 8001944:	200054b8 	.word	0x200054b8
 8001948:	200052b0 	.word	0x200052b0
 800194c:	20002b7c 	.word	0x20002b7c
 8001950:	20002bb8 	.word	0x20002bb8
 8001954:	20002ac4 	.word	0x20002ac4
 8001958:	200003d0 	.word	0x200003d0
 800195c:	20002bec 	.word	0x20002bec
 8001960:	080239c4 	.word	0x080239c4
 8001964:	080239d0 	.word	0x080239d0
 8001968:	080239dc 	.word	0x080239dc
 800196c:	080239e4 	.word	0x080239e4

08001970 <passProlemPtr>:

void passProlemPtr(Problem * ptr){
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

	problem_Struc = ptr;
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <passProlemPtr+0x1c>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6013      	str	r3, [r2, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20002bec 	.word	0x20002bec

08001990 <problem_fetch>:
            break;
        default : break;
    }
}
*/
void problem_fetch(Problem* p, int id){
 8001990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	switch(id){
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	f240 3227 	movw	r2, #807	; 0x327
 80019a0:	4293      	cmp	r3, r2
 80019a2:	f21a 8725 	bhi.w	801c7f0 <problem_fetch+0x1ae60>
 80019a6:	a101      	add	r1, pc, #4	; (adr r1, 80019ac <problem_fetch+0x1c>)
 80019a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019ac:	0800264d 	.word	0x0800264d
 80019b0:	080026ad 	.word	0x080026ad
 80019b4:	08002713 	.word	0x08002713
 80019b8:	08002789 	.word	0x08002789
 80019bc:	08002809 	.word	0x08002809
 80019c0:	08002877 	.word	0x08002877
 80019c4:	080028f1 	.word	0x080028f1
 80019c8:	080029dd 	.word	0x080029dd
 80019cc:	08002a3f 	.word	0x08002a3f
 80019d0:	08002ab1 	.word	0x08002ab1
 80019d4:	08002b2b 	.word	0x08002b2b
 80019d8:	08002b9b 	.word	0x08002b9b
 80019dc:	08002c15 	.word	0x08002c15
 80019e0:	08002d01 	.word	0x08002d01
 80019e4:	08002d73 	.word	0x08002d73
 80019e8:	08002def 	.word	0x08002def
 80019ec:	08002e61 	.word	0x08002e61
 80019f0:	08002ec3 	.word	0x08002ec3
 80019f4:	08002f31 	.word	0x08002f31
 80019f8:	08002f9b 	.word	0x08002f9b
 80019fc:	08003081 	.word	0x08003081
 8001a00:	080030eb 	.word	0x080030eb
 8001a04:	08003163 	.word	0x08003163
 8001a08:	080031d7 	.word	0x080031d7
 8001a0c:	0800324d 	.word	0x0800324d
 8001a10:	080032bd 	.word	0x080032bd
 8001a14:	08003399 	.word	0x08003399
 8001a18:	08003401 	.word	0x08003401
 8001a1c:	08003477 	.word	0x08003477
 8001a20:	080034ef 	.word	0x080034ef
 8001a24:	0800355b 	.word	0x0800355b
 8001a28:	080035c9 	.word	0x080035c9
 8001a2c:	080036a5 	.word	0x080036a5
 8001a30:	08003727 	.word	0x08003727
 8001a34:	08003799 	.word	0x08003799
 8001a38:	08003805 	.word	0x08003805
 8001a3c:	08003875 	.word	0x08003875
 8001a40:	080038f9 	.word	0x080038f9
 8001a44:	080039e1 	.word	0x080039e1
 8001a48:	08003a5d 	.word	0x08003a5d
 8001a4c:	08003ad1 	.word	0x08003ad1
 8001a50:	08003b53 	.word	0x08003b53
 8001a54:	08003bc7 	.word	0x08003bc7
 8001a58:	08003c39 	.word	0x08003c39
 8001a5c:	08003d1d 	.word	0x08003d1d
 8001a60:	08003d89 	.word	0x08003d89
 8001a64:	08003e07 	.word	0x08003e07
 8001a68:	08003e81 	.word	0x08003e81
 8001a6c:	08003eff 	.word	0x08003eff
 8001a70:	08003f79 	.word	0x08003f79
 8001a74:	08004055 	.word	0x08004055
 8001a78:	080040bf 	.word	0x080040bf
 8001a7c:	0800412d 	.word	0x0800412d
 8001a80:	08004195 	.word	0x08004195
 8001a84:	08004205 	.word	0x08004205
 8001a88:	08004279 	.word	0x08004279
 8001a8c:	080042e1 	.word	0x080042e1
 8001a90:	080043cd 	.word	0x080043cd
 8001a94:	08004441 	.word	0x08004441
 8001a98:	080044b5 	.word	0x080044b5
 8001a9c:	08004537 	.word	0x08004537
 8001aa0:	080045ab 	.word	0x080045ab
 8001aa4:	08004615 	.word	0x08004615
 8001aa8:	080046f5 	.word	0x080046f5
 8001aac:	08004763 	.word	0x08004763
 8001ab0:	080047d5 	.word	0x080047d5
 8001ab4:	08004835 	.word	0x08004835
 8001ab8:	080048af 	.word	0x080048af
 8001abc:	08004929 	.word	0x08004929
 8001ac0:	08004a05 	.word	0x08004a05
 8001ac4:	08004a7d 	.word	0x08004a7d
 8001ac8:	08004ae5 	.word	0x08004ae5
 8001acc:	08004b5f 	.word	0x08004b5f
 8001ad0:	08004bc5 	.word	0x08004bc5
 8001ad4:	08004c29 	.word	0x08004c29
 8001ad8:	08004ca5 	.word	0x08004ca5
 8001adc:	08004d89 	.word	0x08004d89
 8001ae0:	08004df7 	.word	0x08004df7
 8001ae4:	08004e77 	.word	0x08004e77
 8001ae8:	08004ee3 	.word	0x08004ee3
 8001aec:	08004f5b 	.word	0x08004f5b
 8001af0:	08004fd1 	.word	0x08004fd1
 8001af4:	080050c1 	.word	0x080050c1
 8001af8:	08005131 	.word	0x08005131
 8001afc:	080051a5 	.word	0x080051a5
 8001b00:	0800521b 	.word	0x0800521b
 8001b04:	08005291 	.word	0x08005291
 8001b08:	080052ff 	.word	0x080052ff
 8001b0c:	080053f1 	.word	0x080053f1
 8001b10:	08005463 	.word	0x08005463
 8001b14:	080054dd 	.word	0x080054dd
 8001b18:	08005551 	.word	0x08005551
 8001b1c:	080055b7 	.word	0x080055b7
 8001b20:	08005631 	.word	0x08005631
 8001b24:	08005711 	.word	0x08005711
 8001b28:	0800578f 	.word	0x0800578f
 8001b2c:	08005805 	.word	0x08005805
 8001b30:	08005877 	.word	0x08005877
 8001b34:	080058e3 	.word	0x080058e3
 8001b38:	0800596d 	.word	0x0800596d
 8001b3c:	08005a41 	.word	0x08005a41
 8001b40:	08005ab3 	.word	0x08005ab3
 8001b44:	08005b25 	.word	0x08005b25
 8001b48:	08005b89 	.word	0x08005b89
 8001b4c:	08005bf1 	.word	0x08005bf1
 8001b50:	08005c5f 	.word	0x08005c5f
 8001b54:	08005cc9 	.word	0x08005cc9
 8001b58:	08005dbd 	.word	0x08005dbd
 8001b5c:	08005e39 	.word	0x08005e39
 8001b60:	08005eab 	.word	0x08005eab
 8001b64:	08005f21 	.word	0x08005f21
 8001b68:	08005f97 	.word	0x08005f97
 8001b6c:	08006019 	.word	0x08006019
 8001b70:	080060f9 	.word	0x080060f9
 8001b74:	08006169 	.word	0x08006169
 8001b78:	080061d9 	.word	0x080061d9
 8001b7c:	0800624b 	.word	0x0800624b
 8001b80:	080062cd 	.word	0x080062cd
 8001b84:	08006349 	.word	0x08006349
 8001b88:	08006439 	.word	0x08006439
 8001b8c:	080064a7 	.word	0x080064a7
 8001b90:	0800651d 	.word	0x0800651d
 8001b94:	080065a1 	.word	0x080065a1
 8001b98:	0800661b 	.word	0x0800661b
 8001b9c:	0800668f 	.word	0x0800668f
 8001ba0:	08006775 	.word	0x08006775
 8001ba4:	080067db 	.word	0x080067db
 8001ba8:	08006849 	.word	0x08006849
 8001bac:	080068b5 	.word	0x080068b5
 8001bb0:	08006921 	.word	0x08006921
 8001bb4:	0800698b 	.word	0x0800698b
 8001bb8:	08006a01 	.word	0x08006a01
 8001bbc:	08006afd 	.word	0x08006afd
 8001bc0:	08006b71 	.word	0x08006b71
 8001bc4:	08006bd7 	.word	0x08006bd7
 8001bc8:	08006c49 	.word	0x08006c49
 8001bcc:	08006cbf 	.word	0x08006cbf
 8001bd0:	08006d2f 	.word	0x08006d2f
 8001bd4:	08006d9d 	.word	0x08006d9d
 8001bd8:	08006e8d 	.word	0x08006e8d
 8001bdc:	08006ef3 	.word	0x08006ef3
 8001be0:	08006f5d 	.word	0x08006f5d
 8001be4:	08006fd1 	.word	0x08006fd1
 8001be8:	08007037 	.word	0x08007037
 8001bec:	080070b1 	.word	0x080070b1
 8001bf0:	0800712f 	.word	0x0800712f
 8001bf4:	08007225 	.word	0x08007225
 8001bf8:	08007291 	.word	0x08007291
 8001bfc:	0800730b 	.word	0x0800730b
 8001c00:	08007377 	.word	0x08007377
 8001c04:	080073eb 	.word	0x080073eb
 8001c08:	0800745f 	.word	0x0800745f
 8001c0c:	08007551 	.word	0x08007551
 8001c10:	080075bf 	.word	0x080075bf
 8001c14:	0800763b 	.word	0x0800763b
 8001c18:	080076b1 	.word	0x080076b1
 8001c1c:	0800771d 	.word	0x0800771d
 8001c20:	08007793 	.word	0x08007793
 8001c24:	0800787d 	.word	0x0800787d
 8001c28:	08007903 	.word	0x08007903
 8001c2c:	08007975 	.word	0x08007975
 8001c30:	080079df 	.word	0x080079df
 8001c34:	08007a4f 	.word	0x08007a4f
 8001c38:	08007ab9 	.word	0x08007ab9
 8001c3c:	08007ba5 	.word	0x08007ba5
 8001c40:	08007c17 	.word	0x08007c17
 8001c44:	08007c77 	.word	0x08007c77
 8001c48:	08007ce5 	.word	0x08007ce5
 8001c4c:	08007d57 	.word	0x08007d57
 8001c50:	08007dd7 	.word	0x08007dd7
 8001c54:	08007eb9 	.word	0x08007eb9
 8001c58:	08007f2d 	.word	0x08007f2d
 8001c5c:	08007fbb 	.word	0x08007fbb
 8001c60:	08008025 	.word	0x08008025
 8001c64:	08008093 	.word	0x08008093
 8001c68:	080080fd 	.word	0x080080fd
 8001c6c:	080081e9 	.word	0x080081e9
 8001c70:	0800825f 	.word	0x0800825f
 8001c74:	080082df 	.word	0x080082df
 8001c78:	0800834f 	.word	0x0800834f
 8001c7c:	080083c1 	.word	0x080083c1
 8001c80:	0800843b 	.word	0x0800843b
 8001c84:	08008515 	.word	0x08008515
 8001c88:	08008581 	.word	0x08008581
 8001c8c:	080085ed 	.word	0x080085ed
 8001c90:	08008657 	.word	0x08008657
 8001c94:	080086c3 	.word	0x080086c3
 8001c98:	0800872b 	.word	0x0800872b
 8001c9c:	080087a7 	.word	0x080087a7
 8001ca0:	08008899 	.word	0x08008899
 8001ca4:	08008911 	.word	0x08008911
 8001ca8:	08008985 	.word	0x08008985
 8001cac:	080089ef 	.word	0x080089ef
 8001cb0:	08008a4f 	.word	0x08008a4f
 8001cb4:	08008ab3 	.word	0x08008ab3
 8001cb8:	08008b2d 	.word	0x08008b2d
 8001cbc:	08008c1d 	.word	0x08008c1d
 8001cc0:	08008c85 	.word	0x08008c85
 8001cc4:	08008cfd 	.word	0x08008cfd
 8001cc8:	08008d79 	.word	0x08008d79
 8001ccc:	08008de9 	.word	0x08008de9
 8001cd0:	08008e49 	.word	0x08008e49
 8001cd4:	08008ead 	.word	0x08008ead
 8001cd8:	08008f8d 	.word	0x08008f8d
 8001cdc:	08008ff9 	.word	0x08008ff9
 8001ce0:	08009079 	.word	0x08009079
 8001ce4:	080090e7 	.word	0x080090e7
 8001ce8:	08009157 	.word	0x08009157
 8001cec:	080091c3 	.word	0x080091c3
 8001cf0:	080092a5 	.word	0x080092a5
 8001cf4:	08009319 	.word	0x08009319
 8001cf8:	08009385 	.word	0x08009385
 8001cfc:	080093f9 	.word	0x080093f9
 8001d00:	08009475 	.word	0x08009475
 8001d04:	080094dd 	.word	0x080094dd
 8001d08:	080095c9 	.word	0x080095c9
 8001d0c:	08009653 	.word	0x08009653
 8001d10:	080096e1 	.word	0x080096e1
 8001d14:	0800976b 	.word	0x0800976b
 8001d18:	080097e3 	.word	0x080097e3
 8001d1c:	0800984f 	.word	0x0800984f
 8001d20:	08009925 	.word	0x08009925
 8001d24:	08009995 	.word	0x08009995
 8001d28:	08009a15 	.word	0x08009a15
 8001d2c:	08009a83 	.word	0x08009a83
 8001d30:	08009afb 	.word	0x08009afb
 8001d34:	08009b75 	.word	0x08009b75
 8001d38:	08009c4d 	.word	0x08009c4d
 8001d3c:	08009cc3 	.word	0x08009cc3
 8001d40:	08009d35 	.word	0x08009d35
 8001d44:	08009d9f 	.word	0x08009d9f
 8001d48:	08009e0d 	.word	0x08009e0d
 8001d4c:	08009e8d 	.word	0x08009e8d
 8001d50:	08009f69 	.word	0x08009f69
 8001d54:	08009feb 	.word	0x08009feb
 8001d58:	0800a063 	.word	0x0800a063
 8001d5c:	0800a0d9 	.word	0x0800a0d9
 8001d60:	0800a16b 	.word	0x0800a16b
 8001d64:	0800a1d3 	.word	0x0800a1d3
 8001d68:	0800a2b5 	.word	0x0800a2b5
 8001d6c:	0800a329 	.word	0x0800a329
 8001d70:	0800a39f 	.word	0x0800a39f
 8001d74:	0800a41f 	.word	0x0800a41f
 8001d78:	0800a499 	.word	0x0800a499
 8001d7c:	0800a50f 	.word	0x0800a50f
 8001d80:	0800a5f5 	.word	0x0800a5f5
 8001d84:	0800a671 	.word	0x0800a671
 8001d88:	0800a6ef 	.word	0x0800a6ef
 8001d8c:	0800a765 	.word	0x0800a765
 8001d90:	0800a7cd 	.word	0x0800a7cd
 8001d94:	0800a835 	.word	0x0800a835
 8001d98:	0800a915 	.word	0x0800a915
 8001d9c:	0800a98d 	.word	0x0800a98d
 8001da0:	0800a9fb 	.word	0x0800a9fb
 8001da4:	0800aa75 	.word	0x0800aa75
 8001da8:	0800aadd 	.word	0x0800aadd
 8001dac:	0800ab49 	.word	0x0800ab49
 8001db0:	0800abb3 	.word	0x0800abb3
 8001db4:	0800aca1 	.word	0x0800aca1
 8001db8:	0800ad13 	.word	0x0800ad13
 8001dbc:	0800ad87 	.word	0x0800ad87
 8001dc0:	0800adf7 	.word	0x0800adf7
 8001dc4:	0800ae69 	.word	0x0800ae69
 8001dc8:	0800aeed 	.word	0x0800aeed
 8001dcc:	0800afdd 	.word	0x0800afdd
 8001dd0:	0800b05d 	.word	0x0800b05d
 8001dd4:	0800b0c7 	.word	0x0800b0c7
 8001dd8:	0800b12f 	.word	0x0800b12f
 8001ddc:	0800b19d 	.word	0x0800b19d
 8001de0:	0800b209 	.word	0x0800b209
 8001de4:	0800b287 	.word	0x0800b287
 8001de8:	0800b36d 	.word	0x0800b36d
 8001dec:	0800b3db 	.word	0x0800b3db
 8001df0:	0800b455 	.word	0x0800b455
 8001df4:	0800b4c5 	.word	0x0800b4c5
 8001df8:	0800b537 	.word	0x0800b537
 8001dfc:	0800b5ab 	.word	0x0800b5ab
 8001e00:	0800b685 	.word	0x0800b685
 8001e04:	0800b6fb 	.word	0x0800b6fb
 8001e08:	0800b775 	.word	0x0800b775
 8001e0c:	0800b7e9 	.word	0x0800b7e9
 8001e10:	0800b851 	.word	0x0800b851
 8001e14:	0800b8bb 	.word	0x0800b8bb
 8001e18:	0800b9a9 	.word	0x0800b9a9
 8001e1c:	0800ba31 	.word	0x0800ba31
 8001e20:	0800baa9 	.word	0x0800baa9
 8001e24:	0800bb27 	.word	0x0800bb27
 8001e28:	0800bb9b 	.word	0x0800bb9b
 8001e2c:	0800bc13 	.word	0x0800bc13
 8001e30:	0800bce5 	.word	0x0800bce5
 8001e34:	0800bd5b 	.word	0x0800bd5b
 8001e38:	0800bdd1 	.word	0x0800bdd1
 8001e3c:	0800be3b 	.word	0x0800be3b
 8001e40:	0800bea1 	.word	0x0800bea1
 8001e44:	0800bef9 	.word	0x0800bef9
 8001e48:	0800bf73 	.word	0x0800bf73
 8001e4c:	0800c069 	.word	0x0800c069
 8001e50:	0800c0db 	.word	0x0800c0db
 8001e54:	0800c15b 	.word	0x0800c15b
 8001e58:	0800c1cb 	.word	0x0800c1cb
 8001e5c:	0800c231 	.word	0x0800c231
 8001e60:	0800c2a1 	.word	0x0800c2a1
 8001e64:	0800c315 	.word	0x0800c315
 8001e68:	0800c3f9 	.word	0x0800c3f9
 8001e6c:	0800c461 	.word	0x0800c461
 8001e70:	0800c4d1 	.word	0x0800c4d1
 8001e74:	0800c53f 	.word	0x0800c53f
 8001e78:	0800c5af 	.word	0x0800c5af
 8001e7c:	0800c61b 	.word	0x0800c61b
 8001e80:	0800c68d 	.word	0x0800c68d
 8001e84:	0800c771 	.word	0x0800c771
 8001e88:	0800c7d7 	.word	0x0800c7d7
 8001e8c:	0800c83d 	.word	0x0800c83d
 8001e90:	0800c8af 	.word	0x0800c8af
 8001e94:	0800c923 	.word	0x0800c923
 8001e98:	0800c989 	.word	0x0800c989
 8001e9c:	0800c9f3 	.word	0x0800c9f3
 8001ea0:	0800cad9 	.word	0x0800cad9
 8001ea4:	0800cb4f 	.word	0x0800cb4f
 8001ea8:	0800cbbf 	.word	0x0800cbbf
 8001eac:	0800cc2f 	.word	0x0800cc2f
 8001eb0:	0800cc9f 	.word	0x0800cc9f
 8001eb4:	0800cd0f 	.word	0x0800cd0f
 8001eb8:	0800cde9 	.word	0x0800cde9
 8001ebc:	0800ce5d 	.word	0x0800ce5d
 8001ec0:	0800cec7 	.word	0x0800cec7
 8001ec4:	0800cf33 	.word	0x0800cf33
 8001ec8:	0800cf9f 	.word	0x0800cf9f
 8001ecc:	0800d011 	.word	0x0800d011
 8001ed0:	0800d07f 	.word	0x0800d07f
 8001ed4:	0800d169 	.word	0x0800d169
 8001ed8:	0800d1df 	.word	0x0800d1df
 8001edc:	0800d243 	.word	0x0800d243
 8001ee0:	0800d2ab 	.word	0x0800d2ab
 8001ee4:	0800d32b 	.word	0x0800d32b
 8001ee8:	0800d3a1 	.word	0x0800d3a1
 8001eec:	0800d485 	.word	0x0800d485
 8001ef0:	0800d4f5 	.word	0x0800d4f5
 8001ef4:	0800d573 	.word	0x0800d573
 8001ef8:	0800d5df 	.word	0x0800d5df
 8001efc:	0800d655 	.word	0x0800d655
 8001f00:	0800d6bf 	.word	0x0800d6bf
 8001f04:	0800d7a9 	.word	0x0800d7a9
 8001f08:	0800d823 	.word	0x0800d823
 8001f0c:	0800d895 	.word	0x0800d895
 8001f10:	0800d907 	.word	0x0800d907
 8001f14:	0800d979 	.word	0x0800d979
 8001f18:	0800d9e7 	.word	0x0800d9e7
 8001f1c:	0800dac1 	.word	0x0800dac1
 8001f20:	0800db39 	.word	0x0800db39
 8001f24:	0800dbab 	.word	0x0800dbab
 8001f28:	0800dc0f 	.word	0x0800dc0f
 8001f2c:	0800dc9b 	.word	0x0800dc9b
 8001f30:	0800dd05 	.word	0x0800dd05
 8001f34:	0800dded 	.word	0x0800dded
 8001f38:	0800de51 	.word	0x0800de51
 8001f3c:	0800debf 	.word	0x0800debf
 8001f40:	0800df2d 	.word	0x0800df2d
 8001f44:	0800df95 	.word	0x0800df95
 8001f48:	0800e001 	.word	0x0800e001
 8001f4c:	0800e07b 	.word	0x0800e07b
 8001f50:	0800e15d 	.word	0x0800e15d
 8001f54:	0800e1db 	.word	0x0800e1db
 8001f58:	0800e24f 	.word	0x0800e24f
 8001f5c:	0800e2b5 	.word	0x0800e2b5
 8001f60:	0800e327 	.word	0x0800e327
 8001f64:	0800e3a1 	.word	0x0800e3a1
 8001f68:	0800e47d 	.word	0x0800e47d
 8001f6c:	0800e4e1 	.word	0x0800e4e1
 8001f70:	0800e547 	.word	0x0800e547
 8001f74:	0800e5bb 	.word	0x0800e5bb
 8001f78:	0800e62f 	.word	0x0800e62f
 8001f7c:	0800e6ab 	.word	0x0800e6ab
 8001f80:	0800e78d 	.word	0x0800e78d
 8001f84:	0800e80f 	.word	0x0800e80f
 8001f88:	0800e873 	.word	0x0800e873
 8001f8c:	0800e8db 	.word	0x0800e8db
 8001f90:	0800e947 	.word	0x0800e947
 8001f94:	0800e9b7 	.word	0x0800e9b7
 8001f98:	0800ea1b 	.word	0x0800ea1b
 8001f9c:	0800eb19 	.word	0x0800eb19
 8001fa0:	0800eb89 	.word	0x0800eb89
 8001fa4:	0800ebf9 	.word	0x0800ebf9
 8001fa8:	0800ec93 	.word	0x0800ec93
 8001fac:	0800ed01 	.word	0x0800ed01
 8001fb0:	0800ed69 	.word	0x0800ed69
 8001fb4:	0800ee35 	.word	0x0800ee35
 8001fb8:	0800eea5 	.word	0x0800eea5
 8001fbc:	0800ef0b 	.word	0x0800ef0b
 8001fc0:	0800ef75 	.word	0x0800ef75
 8001fc4:	0800efd5 	.word	0x0800efd5
 8001fc8:	0800f045 	.word	0x0800f045
 8001fcc:	0800f0ad 	.word	0x0800f0ad
 8001fd0:	0800f191 	.word	0x0800f191
 8001fd4:	0800f201 	.word	0x0800f201
 8001fd8:	0800f27b 	.word	0x0800f27b
 8001fdc:	0800f2ef 	.word	0x0800f2ef
 8001fe0:	0800f363 	.word	0x0800f363
 8001fe4:	0800f3d5 	.word	0x0800f3d5
 8001fe8:	0800f4b1 	.word	0x0800f4b1
 8001fec:	0800f533 	.word	0x0800f533
 8001ff0:	0800f5a9 	.word	0x0800f5a9
 8001ff4:	0800f61b 	.word	0x0800f61b
 8001ff8:	0800f68f 	.word	0x0800f68f
 8001ffc:	0800f6fb 	.word	0x0800f6fb
 8002000:	0800f7d5 	.word	0x0800f7d5
 8002004:	0800f84d 	.word	0x0800f84d
 8002008:	0800f8b9 	.word	0x0800f8b9
 800200c:	0800f923 	.word	0x0800f923
 8002010:	0800f98f 	.word	0x0800f98f
 8002014:	0800f9fb 	.word	0x0800f9fb
 8002018:	0800fae1 	.word	0x0800fae1
 800201c:	0800fb51 	.word	0x0800fb51
 8002020:	0800fbc7 	.word	0x0800fbc7
 8002024:	0800fc41 	.word	0x0800fc41
 8002028:	0800fcbf 	.word	0x0800fcbf
 800202c:	0800fd33 	.word	0x0800fd33
 8002030:	0800fe19 	.word	0x0800fe19
 8002034:	0800fe7f 	.word	0x0800fe7f
 8002038:	0800feef 	.word	0x0800feef
 800203c:	0800ff67 	.word	0x0800ff67
 8002040:	0800ffd1 	.word	0x0800ffd1
 8002044:	08010049 	.word	0x08010049
 8002048:	0801012d 	.word	0x0801012d
 800204c:	08010197 	.word	0x08010197
 8002050:	0801020b 	.word	0x0801020b
 8002054:	08010277 	.word	0x08010277
 8002058:	080102e5 	.word	0x080102e5
 800205c:	0801035b 	.word	0x0801035b
 8002060:	080103c5 	.word	0x080103c5
 8002064:	080104ad 	.word	0x080104ad
 8002068:	08010519 	.word	0x08010519
 800206c:	0801058d 	.word	0x0801058d
 8002070:	080105f7 	.word	0x080105f7
 8002074:	08010663 	.word	0x08010663
 8002078:	080106d5 	.word	0x080106d5
 800207c:	0801074f 	.word	0x0801074f
 8002080:	08010835 	.word	0x08010835
 8002084:	080108ad 	.word	0x080108ad
 8002088:	08010929 	.word	0x08010929
 800208c:	0801099d 	.word	0x0801099d
 8002090:	08010a19 	.word	0x08010a19
 8002094:	08010a7f 	.word	0x08010a7f
 8002098:	08010b55 	.word	0x08010b55
 800209c:	08010bc9 	.word	0x08010bc9
 80020a0:	08010c3f 	.word	0x08010c3f
 80020a4:	08010cb5 	.word	0x08010cb5
 80020a8:	08010d21 	.word	0x08010d21
 80020ac:	08010d91 	.word	0x08010d91
 80020b0:	08010e71 	.word	0x08010e71
 80020b4:	08010ee5 	.word	0x08010ee5
 80020b8:	08010f53 	.word	0x08010f53
 80020bc:	08010fc5 	.word	0x08010fc5
 80020c0:	08011035 	.word	0x08011035
 80020c4:	080110a9 	.word	0x080110a9
 80020c8:	0801118d 	.word	0x0801118d
 80020cc:	08011203 	.word	0x08011203
 80020d0:	0801128b 	.word	0x0801128b
 80020d4:	08011301 	.word	0x08011301
 80020d8:	08011371 	.word	0x08011371
 80020dc:	080113d7 	.word	0x080113d7
 80020e0:	080114bd 	.word	0x080114bd
 80020e4:	08011533 	.word	0x08011533
 80020e8:	080115b9 	.word	0x080115b9
 80020ec:	08011633 	.word	0x08011633
 80020f0:	080116c1 	.word	0x080116c1
 80020f4:	08011737 	.word	0x08011737
 80020f8:	08011815 	.word	0x08011815
 80020fc:	08011885 	.word	0x08011885
 8002100:	080118f5 	.word	0x080118f5
 8002104:	08011979 	.word	0x08011979
 8002108:	080119eb 	.word	0x080119eb
 800210c:	08011a5f 	.word	0x08011a5f
 8002110:	08011b3d 	.word	0x08011b3d
 8002114:	08011bb9 	.word	0x08011bb9
 8002118:	08011c35 	.word	0x08011c35
 800211c:	08011ca7 	.word	0x08011ca7
 8002120:	08011d21 	.word	0x08011d21
 8002124:	08011d93 	.word	0x08011d93
 8002128:	08011e65 	.word	0x08011e65
 800212c:	08011ed9 	.word	0x08011ed9
 8002130:	08011f49 	.word	0x08011f49
 8002134:	08011fcb 	.word	0x08011fcb
 8002138:	0801203b 	.word	0x0801203b
 800213c:	080120a9 	.word	0x080120a9
 8002140:	0801218d 	.word	0x0801218d
 8002144:	080121ed 	.word	0x080121ed
 8002148:	08012255 	.word	0x08012255
 800214c:	080122d1 	.word	0x080122d1
 8002150:	08012357 	.word	0x08012357
 8002154:	080123d7 	.word	0x080123d7
 8002158:	080124bd 	.word	0x080124bd
 800215c:	0801253b 	.word	0x0801253b
 8002160:	080125ab 	.word	0x080125ab
 8002164:	08012617 	.word	0x08012617
 8002168:	08012687 	.word	0x08012687
 800216c:	080126f5 	.word	0x080126f5
 8002170:	080127d9 	.word	0x080127d9
 8002174:	08012857 	.word	0x08012857
 8002178:	080128e3 	.word	0x080128e3
 800217c:	08012963 	.word	0x08012963
 8002180:	080129d5 	.word	0x080129d5
 8002184:	08012a49 	.word	0x08012a49
 8002188:	08012b29 	.word	0x08012b29
 800218c:	08012b97 	.word	0x08012b97
 8002190:	08012c0f 	.word	0x08012c0f
 8002194:	08012c99 	.word	0x08012c99
 8002198:	08012d13 	.word	0x08012d13
 800219c:	08012d89 	.word	0x08012d89
 80021a0:	08012e5d 	.word	0x08012e5d
 80021a4:	08012ed3 	.word	0x08012ed3
 80021a8:	08012f3d 	.word	0x08012f3d
 80021ac:	08012fab 	.word	0x08012fab
 80021b0:	08013019 	.word	0x08013019
 80021b4:	0801308f 	.word	0x0801308f
 80021b8:	08013169 	.word	0x08013169
 80021bc:	080131e1 	.word	0x080131e1
 80021c0:	08013241 	.word	0x08013241
 80021c4:	080132ad 	.word	0x080132ad
 80021c8:	0801331d 	.word	0x0801331d
 80021cc:	08013399 	.word	0x08013399
 80021d0:	08013481 	.word	0x08013481
 80021d4:	080134fb 	.word	0x080134fb
 80021d8:	0801356f 	.word	0x0801356f
 80021dc:	080135e7 	.word	0x080135e7
 80021e0:	08013657 	.word	0x08013657
 80021e4:	080136bb 	.word	0x080136bb
 80021e8:	0801372d 	.word	0x0801372d
 80021ec:	08013819 	.word	0x08013819
 80021f0:	0801389d 	.word	0x0801389d
 80021f4:	0801390f 	.word	0x0801390f
 80021f8:	080139a5 	.word	0x080139a5
 80021fc:	08013a3d 	.word	0x08013a3d
 8002200:	08013aa7 	.word	0x08013aa7
 8002204:	08013b8d 	.word	0x08013b8d
 8002208:	08013c0f 	.word	0x08013c0f
 800220c:	08013c87 	.word	0x08013c87
 8002210:	08013cfd 	.word	0x08013cfd
 8002214:	08013d63 	.word	0x08013d63
 8002218:	08013dd3 	.word	0x08013dd3
 800221c:	08013ec1 	.word	0x08013ec1
 8002220:	08013f2f 	.word	0x08013f2f
 8002224:	08013fa1 	.word	0x08013fa1
 8002228:	08014019 	.word	0x08014019
 800222c:	08014091 	.word	0x08014091
 8002230:	080140fd 	.word	0x080140fd
 8002234:	080141e1 	.word	0x080141e1
 8002238:	0801425b 	.word	0x0801425b
 800223c:	080142db 	.word	0x080142db
 8002240:	08014349 	.word	0x08014349
 8002244:	080143b9 	.word	0x080143b9
 8002248:	08014429 	.word	0x08014429
 800224c:	08014511 	.word	0x08014511
 8002250:	08014597 	.word	0x08014597
 8002254:	0801460b 	.word	0x0801460b
 8002258:	08014691 	.word	0x08014691
 800225c:	080146ff 	.word	0x080146ff
 8002260:	08014775 	.word	0x08014775
 8002264:	08014865 	.word	0x08014865
 8002268:	080148dd 	.word	0x080148dd
 800226c:	0801494b 	.word	0x0801494b
 8002270:	080149c7 	.word	0x080149c7
 8002274:	08014a37 	.word	0x08014a37
 8002278:	08014aad 	.word	0x08014aad
 800227c:	08014b8d 	.word	0x08014b8d
 8002280:	08014bfb 	.word	0x08014bfb
 8002284:	08014c67 	.word	0x08014c67
 8002288:	08014cfb 	.word	0x08014cfb
 800228c:	08014d6f 	.word	0x08014d6f
 8002290:	08014de9 	.word	0x08014de9
 8002294:	08014ec9 	.word	0x08014ec9
 8002298:	08014f35 	.word	0x08014f35
 800229c:	08014fa3 	.word	0x08014fa3
 80022a0:	08015015 	.word	0x08015015
 80022a4:	08015083 	.word	0x08015083
 80022a8:	080150fd 	.word	0x080150fd
 80022ac:	080151d1 	.word	0x080151d1
 80022b0:	0801523f 	.word	0x0801523f
 80022b4:	080152b5 	.word	0x080152b5
 80022b8:	0801531f 	.word	0x0801531f
 80022bc:	080153a3 	.word	0x080153a3
 80022c0:	0801541b 	.word	0x0801541b
 80022c4:	08015501 	.word	0x08015501
 80022c8:	0801556b 	.word	0x0801556b
 80022cc:	080155d1 	.word	0x080155d1
 80022d0:	0801563b 	.word	0x0801563b
 80022d4:	080156af 	.word	0x080156af
 80022d8:	08015735 	.word	0x08015735
 80022dc:	08015799 	.word	0x08015799
 80022e0:	08015885 	.word	0x08015885
 80022e4:	080158f3 	.word	0x080158f3
 80022e8:	08015957 	.word	0x08015957
 80022ec:	080159d1 	.word	0x080159d1
 80022f0:	08015a45 	.word	0x08015a45
 80022f4:	08015aa7 	.word	0x08015aa7
 80022f8:	08015b99 	.word	0x08015b99
 80022fc:	08015c1d 	.word	0x08015c1d
 8002300:	08015c8b 	.word	0x08015c8b
 8002304:	08015cfb 	.word	0x08015cfb
 8002308:	08015d6b 	.word	0x08015d6b
 800230c:	08015ddb 	.word	0x08015ddb
 8002310:	08015ec5 	.word	0x08015ec5
 8002314:	08015f4b 	.word	0x08015f4b
 8002318:	08015fb7 	.word	0x08015fb7
 800231c:	08016039 	.word	0x08016039
 8002320:	080160a1 	.word	0x080160a1
 8002324:	08016117 	.word	0x08016117
 8002328:	080161e9 	.word	0x080161e9
 800232c:	08016261 	.word	0x08016261
 8002330:	080162d5 	.word	0x080162d5
 8002334:	08016335 	.word	0x08016335
 8002338:	080163ab 	.word	0x080163ab
 800233c:	0801641b 	.word	0x0801641b
 8002340:	08016489 	.word	0x08016489
 8002344:	0801657d 	.word	0x0801657d
 8002348:	080165e9 	.word	0x080165e9
 800234c:	08016657 	.word	0x08016657
 8002350:	080166d1 	.word	0x080166d1
 8002354:	08016739 	.word	0x08016739
 8002358:	080167a9 	.word	0x080167a9
 800235c:	08016815 	.word	0x08016815
 8002360:	08016901 	.word	0x08016901
 8002364:	08016975 	.word	0x08016975
 8002368:	080169dd 	.word	0x080169dd
 800236c:	08016a51 	.word	0x08016a51
 8002370:	08016acb 	.word	0x08016acb
 8002374:	08016b47 	.word	0x08016b47
 8002378:	08016c09 	.word	0x08016c09
 800237c:	08016c7b 	.word	0x08016c7b
 8002380:	08016cfb 	.word	0x08016cfb
 8002384:	08016d67 	.word	0x08016d67
 8002388:	08016dd7 	.word	0x08016dd7
 800238c:	08016e47 	.word	0x08016e47
 8002390:	08016f21 	.word	0x08016f21
 8002394:	08016f89 	.word	0x08016f89
 8002398:	08017005 	.word	0x08017005
 800239c:	08017075 	.word	0x08017075
 80023a0:	080170ed 	.word	0x080170ed
 80023a4:	0801714f 	.word	0x0801714f
 80023a8:	080171c1 	.word	0x080171c1
 80023ac:	080172a9 	.word	0x080172a9
 80023b0:	08017317 	.word	0x08017317
 80023b4:	08017383 	.word	0x08017383
 80023b8:	080173f3 	.word	0x080173f3
 80023bc:	0801745f 	.word	0x0801745f
 80023c0:	080174cd 	.word	0x080174cd
 80023c4:	08017531 	.word	0x08017531
 80023c8:	08017609 	.word	0x08017609
 80023cc:	08017679 	.word	0x08017679
 80023d0:	080176e3 	.word	0x080176e3
 80023d4:	08017745 	.word	0x08017745
 80023d8:	080177af 	.word	0x080177af
 80023dc:	08017821 	.word	0x08017821
 80023e0:	08017929 	.word	0x08017929
 80023e4:	080179a5 	.word	0x080179a5
 80023e8:	08017a1d 	.word	0x08017a1d
 80023ec:	08017a93 	.word	0x08017a93
 80023f0:	08017b03 	.word	0x08017b03
 80023f4:	08017b6d 	.word	0x08017b6d
 80023f8:	08017c41 	.word	0x08017c41
 80023fc:	08017cb9 	.word	0x08017cb9
 8002400:	08017d3b 	.word	0x08017d3b
 8002404:	08017daf 	.word	0x08017daf
 8002408:	08017e1f 	.word	0x08017e1f
 800240c:	08017e9b 	.word	0x08017e9b
 8002410:	08017f79 	.word	0x08017f79
 8002414:	08017fe9 	.word	0x08017fe9
 8002418:	08018059 	.word	0x08018059
 800241c:	080180cb 	.word	0x080180cb
 8002420:	08018145 	.word	0x08018145
 8002424:	080181b3 	.word	0x080181b3
 8002428:	08018225 	.word	0x08018225
 800242c:	08018309 	.word	0x08018309
 8002430:	08018375 	.word	0x08018375
 8002434:	080183e9 	.word	0x080183e9
 8002438:	08018463 	.word	0x08018463
 800243c:	080184db 	.word	0x080184db
 8002440:	0801854d 	.word	0x0801854d
 8002444:	08018629 	.word	0x08018629
 8002448:	08018699 	.word	0x08018699
 800244c:	08018715 	.word	0x08018715
 8002450:	08018791 	.word	0x08018791
 8002454:	080187ed 	.word	0x080187ed
 8002458:	08018861 	.word	0x08018861
 800245c:	08018945 	.word	0x08018945
 8002460:	080189b3 	.word	0x080189b3
 8002464:	08018a1b 	.word	0x08018a1b
 8002468:	08018a85 	.word	0x08018a85
 800246c:	08018aed 	.word	0x08018aed
 8002470:	08018b55 	.word	0x08018b55
 8002474:	08018bbf 	.word	0x08018bbf
 8002478:	08018ca9 	.word	0x08018ca9
 800247c:	08018d23 	.word	0x08018d23
 8002480:	08018d9d 	.word	0x08018d9d
 8002484:	08018e13 	.word	0x08018e13
 8002488:	08018e83 	.word	0x08018e83
 800248c:	08018eed 	.word	0x08018eed
 8002490:	08018fd5 	.word	0x08018fd5
 8002494:	08019047 	.word	0x08019047
 8002498:	080190b9 	.word	0x080190b9
 800249c:	08019125 	.word	0x08019125
 80024a0:	08019191 	.word	0x08019191
 80024a4:	080191f5 	.word	0x080191f5
 80024a8:	08019269 	.word	0x08019269
 80024ac:	08019351 	.word	0x08019351
 80024b0:	080193c7 	.word	0x080193c7
 80024b4:	08019437 	.word	0x08019437
 80024b8:	0801949b 	.word	0x0801949b
 80024bc:	0801950b 	.word	0x0801950b
 80024c0:	0801957b 	.word	0x0801957b
 80024c4:	080195e1 	.word	0x080195e1
 80024c8:	080196c1 	.word	0x080196c1
 80024cc:	08019725 	.word	0x08019725
 80024d0:	0801978d 	.word	0x0801978d
 80024d4:	080197fd 	.word	0x080197fd
 80024d8:	08019873 	.word	0x08019873
 80024dc:	080198e3 	.word	0x080198e3
 80024e0:	08019955 	.word	0x08019955
 80024e4:	08019a49 	.word	0x08019a49
 80024e8:	08019ac1 	.word	0x08019ac1
 80024ec:	08019b37 	.word	0x08019b37
 80024f0:	08019bb1 	.word	0x08019bb1
 80024f4:	08019c1f 	.word	0x08019c1f
 80024f8:	08019c95 	.word	0x08019c95
 80024fc:	08019d75 	.word	0x08019d75
 8002500:	08019ddf 	.word	0x08019ddf
 8002504:	08019e55 	.word	0x08019e55
 8002508:	08019ec5 	.word	0x08019ec5
 800250c:	08019f35 	.word	0x08019f35
 8002510:	08019fa1 	.word	0x08019fa1
 8002514:	0801a089 	.word	0x0801a089
 8002518:	0801a0f5 	.word	0x0801a0f5
 800251c:	0801a15f 	.word	0x0801a15f
 8002520:	0801a1cb 	.word	0x0801a1cb
 8002524:	0801a239 	.word	0x0801a239
 8002528:	0801a2b3 	.word	0x0801a2b3
 800252c:	0801a321 	.word	0x0801a321
 8002530:	0801a411 	.word	0x0801a411
 8002534:	0801a47f 	.word	0x0801a47f
 8002538:	0801a4f5 	.word	0x0801a4f5
 800253c:	0801a57d 	.word	0x0801a57d
 8002540:	0801a5f1 	.word	0x0801a5f1
 8002544:	0801a653 	.word	0x0801a653
 8002548:	0801a731 	.word	0x0801a731
 800254c:	0801a7a7 	.word	0x0801a7a7
 8002550:	0801a811 	.word	0x0801a811
 8002554:	0801a883 	.word	0x0801a883
 8002558:	0801a8f9 	.word	0x0801a8f9
 800255c:	0801a95f 	.word	0x0801a95f
 8002560:	0801a9cf 	.word	0x0801a9cf
 8002564:	0801aac1 	.word	0x0801aac1
 8002568:	0801ab25 	.word	0x0801ab25
 800256c:	0801ab97 	.word	0x0801ab97
 8002570:	0801ac0d 	.word	0x0801ac0d
 8002574:	0801ac73 	.word	0x0801ac73
 8002578:	0801ace5 	.word	0x0801ace5
 800257c:	0801ad4b 	.word	0x0801ad4b
 8002580:	0801ae41 	.word	0x0801ae41
 8002584:	0801aeb1 	.word	0x0801aeb1
 8002588:	0801af27 	.word	0x0801af27
 800258c:	0801af9f 	.word	0x0801af9f
 8002590:	0801b00f 	.word	0x0801b00f
 8002594:	0801b087 	.word	0x0801b087
 8002598:	0801b165 	.word	0x0801b165
 800259c:	0801b1d1 	.word	0x0801b1d1
 80025a0:	0801b235 	.word	0x0801b235
 80025a4:	0801b29b 	.word	0x0801b29b
 80025a8:	0801b315 	.word	0x0801b315
 80025ac:	0801b385 	.word	0x0801b385
 80025b0:	0801b3e7 	.word	0x0801b3e7
 80025b4:	0801b4cd 	.word	0x0801b4cd
 80025b8:	0801b543 	.word	0x0801b543
 80025bc:	0801b5b3 	.word	0x0801b5b3
 80025c0:	0801b615 	.word	0x0801b615
 80025c4:	0801b689 	.word	0x0801b689
 80025c8:	0801b6ff 	.word	0x0801b6ff
 80025cc:	0801b771 	.word	0x0801b771
 80025d0:	0801b851 	.word	0x0801b851
 80025d4:	0801b8c1 	.word	0x0801b8c1
 80025d8:	0801b92d 	.word	0x0801b92d
 80025dc:	0801b993 	.word	0x0801b993
 80025e0:	0801ba15 	.word	0x0801ba15
 80025e4:	0801ba85 	.word	0x0801ba85
 80025e8:	0801baeb 	.word	0x0801baeb
 80025ec:	0801bbdd 	.word	0x0801bbdd
 80025f0:	0801bc4b 	.word	0x0801bc4b
 80025f4:	0801bca7 	.word	0x0801bca7
 80025f8:	0801bd1f 	.word	0x0801bd1f
 80025fc:	0801bd8f 	.word	0x0801bd8f
 8002600:	0801bdff 	.word	0x0801bdff
 8002604:	0801bee1 	.word	0x0801bee1
 8002608:	0801bf5d 	.word	0x0801bf5d
 800260c:	0801bff3 	.word	0x0801bff3
 8002610:	0801c073 	.word	0x0801c073
 8002614:	0801c0d5 	.word	0x0801c0d5
 8002618:	0801c149 	.word	0x0801c149
 800261c:	0801c229 	.word	0x0801c229
 8002620:	0801c293 	.word	0x0801c293
 8002624:	0801c2ff 	.word	0x0801c2ff
 8002628:	0801c365 	.word	0x0801c365
 800262c:	0801c3df 	.word	0x0801c3df
 8002630:	0801c449 	.word	0x0801c449
 8002634:	0801c531 	.word	0x0801c531
 8002638:	0801c5a9 	.word	0x0801c5a9
 800263c:	0801c611 	.word	0x0801c611
 8002640:	0801c689 	.word	0x0801c689
 8002644:	0801c6fd 	.word	0x0801c6fd
 8002648:	0801c771 	.word	0x0801c771
		case 0 :
			strcpy(p->name,"CAZZONE");
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002652:	49c3      	ldr	r1, [pc, #780]	; (8002960 <problem_fetch+0xfd0>)
 8002654:	461a      	mov	r2, r3
 8002656:	460b      	mov	r3, r1
 8002658:	cb03      	ldmia	r3!, {r0, r1}
 800265a:	6010      	str	r0, [r2, #0]
 800265c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"8=D");
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002664:	4abf      	ldr	r2, [pc, #764]	; (8002964 <problem_fetch+0xfd4>)
 8002666:	6810      	ldr	r0, [r2, #0]
 8002668:	6018      	str	r0, [r3, #0]
			p->moveSize = 50;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2232      	movs	r2, #50	; 0x32
 800266e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,B,B,B,C,C,E,E,E,E,E,E,E,E,E,E,E,E,E,F,F,F,F,G,G,G,G,H,H,H,H,H,H,H,H,H,H,H,H,H,I,I,J,J,J,J,K,K");
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	33a4      	adds	r3, #164	; 0xa4
 8002674:	4abc      	ldr	r2, [pc, #752]	; (8002968 <problem_fetch+0xfd8>)
 8002676:	4618      	mov	r0, r3
 8002678:	4611      	mov	r1, r2
 800267a:	2364      	movs	r3, #100	; 0x64
 800267c:	461a      	mov	r2, r3
 800267e:	f01f fcc5 	bl	802200c <memcpy>
			strcpy(p->moveNumbers,"16,15,18,17,14,13,18,13,18,17,14,13,12,11,10,9,8,7,6,5,4,16,15,5,3,16,15,5,3,18,17,14,13,12,11,10,9,8,7,6,5,4,18,13,18,17,14,13,16,15");
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	4ab9      	ldr	r2, [pc, #740]	; (800296c <problem_fetch+0xfdc>)
 8002688:	4618      	mov	r0, r3
 800268a:	4611      	mov	r1, r2
 800268c:	2386      	movs	r3, #134	; 0x86
 800268e:	461a      	mov	r2, r3
 8002690:	f01f fcbc 	bl	802200c <memcpy>
			strcpy(p->startFinish,"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c");
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800269a:	4ab5      	ldr	r2, [pc, #724]	; (8002970 <problem_fetch+0xfe0>)
 800269c:	4618      	mov	r0, r3
 800269e:	4611      	mov	r1, r2
 80026a0:	2364      	movs	r3, #100	; 0x64
 80026a2:	461a      	mov	r2, r3
 80026a4:	f01f fcb2 	bl	802200c <memcpy>
			break;
 80026a8:	f01a b8a2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 1 :
			strcpy(p->name,"JUMPBUG");
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80026b2:	49b0      	ldr	r1, [pc, #704]	; (8002974 <problem_fetch+0xfe4>)
 80026b4:	461a      	mov	r2, r3
 80026b6:	460b      	mov	r3, r1
 80026b8:	cb03      	ldmia	r3!, {r0, r1}
 80026ba:	6010      	str	r0, [r2, #0]
 80026bc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80026c4:	4aac      	ldr	r2, [pc, #688]	; (8002978 <problem_fetch+0xfe8>)
 80026c6:	8811      	ldrh	r1, [r2, #0]
 80026c8:	7892      	ldrb	r2, [r2, #2]
 80026ca:	8019      	strh	r1, [r3, #0]
 80026cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2206      	movs	r2, #6
 80026d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,F,C,D");
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	33a4      	adds	r3, #164	; 0xa4
 80026d8:	4aa8      	ldr	r2, [pc, #672]	; (800297c <problem_fetch+0xfec>)
 80026da:	461c      	mov	r4, r3
 80026dc:	4613      	mov	r3, r2
 80026de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80026e0:	6020      	str	r0, [r4, #0]
 80026e2:	6061      	str	r1, [r4, #4]
 80026e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,13,18");
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	4aa5      	ldr	r2, [pc, #660]	; (8002980 <problem_fetch+0xff0>)
 80026ec:	461c      	mov	r4, r3
 80026ee:	4615      	mov	r5, r2
 80026f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f2:	6020      	str	r0, [r4, #0]
 80026f4:	6061      	str	r1, [r4, #4]
 80026f6:	60a2      	str	r2, [r4, #8]
 80026f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002700:	4aa0      	ldr	r2, [pc, #640]	; (8002984 <problem_fetch+0xff4>)
 8002702:	461c      	mov	r4, r3
 8002704:	4613      	mov	r3, r2
 8002706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002708:	6020      	str	r0, [r4, #0]
 800270a:	6061      	str	r1, [r4, #4]
 800270c:	60a2      	str	r2, [r4, #8]
			break;
 800270e:	f01a b86f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 2 :
			strcpy(p->name,"JINJA TEMPLATE 2");
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002718:	4a9b      	ldr	r2, [pc, #620]	; (8002988 <problem_fetch+0xff8>)
 800271a:	461d      	mov	r5, r3
 800271c:	4614      	mov	r4, r2
 800271e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002720:	6028      	str	r0, [r5, #0]
 8002722:	6069      	str	r1, [r5, #4]
 8002724:	60aa      	str	r2, [r5, #8]
 8002726:	60eb      	str	r3, [r5, #12]
 8002728:	7823      	ldrb	r3, [r4, #0]
 800272a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002732:	4a96      	ldr	r2, [pc, #600]	; (800298c <problem_fetch+0xffc>)
 8002734:	6810      	ldr	r0, [r2, #0]
 8002736:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2207      	movs	r2, #7
 800273c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,I,J,G,I,G");
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	33a4      	adds	r3, #164	; 0xa4
 8002742:	4a93      	ldr	r2, [pc, #588]	; (8002990 <problem_fetch+0x1000>)
 8002744:	461c      	mov	r4, r3
 8002746:	4613      	mov	r3, r2
 8002748:	cb07      	ldmia	r3!, {r0, r1, r2}
 800274a:	6020      	str	r0, [r4, #0]
 800274c:	6061      	str	r1, [r4, #4]
 800274e:	60a2      	str	r2, [r4, #8]
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,9,13,14,18,4");
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4a8e      	ldr	r2, [pc, #568]	; (8002994 <problem_fetch+0x1004>)
 800275a:	461d      	mov	r5, r3
 800275c:	4614      	mov	r4, r2
 800275e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002760:	6028      	str	r0, [r5, #0]
 8002762:	6069      	str	r1, [r5, #4]
 8002764:	60aa      	str	r2, [r5, #8]
 8002766:	60eb      	str	r3, [r5, #12]
 8002768:	7823      	ldrb	r3, [r4, #0]
 800276a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,s");
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002772:	4a89      	ldr	r2, [pc, #548]	; (8002998 <problem_fetch+0x1008>)
 8002774:	461c      	mov	r4, r3
 8002776:	4613      	mov	r3, r2
 8002778:	cb07      	ldmia	r3!, {r0, r1, r2}
 800277a:	6020      	str	r0, [r4, #0]
 800277c:	6061      	str	r1, [r4, #4]
 800277e:	60a2      	str	r2, [r4, #8]
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	81a3      	strh	r3, [r4, #12]
			break;
 8002784:	f01a b834 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 3 :
			strcpy(p->name,"BATTLE OF THE PUDGE SHORT");
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800278e:	4a83      	ldr	r2, [pc, #524]	; (800299c <problem_fetch+0x100c>)
 8002790:	461d      	mov	r5, r3
 8002792:	4614      	mov	r4, r2
 8002794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002796:	6028      	str	r0, [r5, #0]
 8002798:	6069      	str	r1, [r5, #4]
 800279a:	60aa      	str	r2, [r5, #8]
 800279c:	60eb      	str	r3, [r5, #12]
 800279e:	cc03      	ldmia	r4!, {r0, r1}
 80027a0:	6128      	str	r0, [r5, #16]
 80027a2:	6169      	str	r1, [r5, #20]
 80027a4:	8823      	ldrh	r3, [r4, #0]
 80027a6:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <problem_fetch+0xfe8>)
 80027b0:	8811      	ldrh	r1, [r2, #0]
 80027b2:	7892      	ldrb	r2, [r2, #2]
 80027b4:	8019      	strh	r1, [r3, #0]
 80027b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2207      	movs	r2, #7
 80027bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,I,D,D,D");
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	33a4      	adds	r3, #164	; 0xa4
 80027c2:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <problem_fetch+0x1010>)
 80027c4:	461c      	mov	r4, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	6061      	str	r1, [r4, #4]
 80027ce:	60a2      	str	r2, [r4, #8]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,11,15,18");
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4a72      	ldr	r2, [pc, #456]	; (80029a4 <problem_fetch+0x1014>)
 80027da:	461d      	mov	r5, r3
 80027dc:	4614      	mov	r4, r2
 80027de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e0:	6028      	str	r0, [r5, #0]
 80027e2:	6069      	str	r1, [r5, #4]
 80027e4:	60aa      	str	r2, [r5, #8]
 80027e6:	60eb      	str	r3, [r5, #12]
 80027e8:	8823      	ldrh	r3, [r4, #0]
 80027ea:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80027f2:	4a6d      	ldr	r2, [pc, #436]	; (80029a8 <problem_fetch+0x1018>)
 80027f4:	461c      	mov	r4, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027fa:	6020      	str	r0, [r4, #0]
 80027fc:	6061      	str	r1, [r4, #4]
 80027fe:	60a2      	str	r2, [r4, #8]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	81a3      	strh	r3, [r4, #12]
			break;
 8002804:	f019 bff4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 4 :
			strcpy(p->name,"BLACK PSYCHO");
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800280e:	4a67      	ldr	r2, [pc, #412]	; (80029ac <problem_fetch+0x101c>)
 8002810:	461c      	mov	r4, r3
 8002812:	4613      	mov	r3, r2
 8002814:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002816:	6020      	str	r0, [r4, #0]
 8002818:	6061      	str	r1, [r4, #4]
 800281a:	60a2      	str	r2, [r4, #8]
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002826:	4a62      	ldr	r2, [pc, #392]	; (80029b0 <problem_fetch+0x1020>)
 8002828:	6810      	ldr	r0, [r2, #0]
 800282a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2206      	movs	r2, #6
 8002830:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,D,G,D");
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	33a4      	adds	r3, #164	; 0xa4
 8002836:	4a5f      	ldr	r2, [pc, #380]	; (80029b4 <problem_fetch+0x1024>)
 8002838:	461c      	mov	r4, r3
 800283a:	4613      	mov	r3, r2
 800283c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800283e:	6020      	str	r0, [r4, #0]
 8002840:	6061      	str	r1, [r4, #4]
 8002842:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3304      	adds	r3, #4
 8002848:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <problem_fetch+0x1028>)
 800284a:	461c      	mov	r4, r3
 800284c:	4613      	mov	r3, r2
 800284e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002850:	6020      	str	r0, [r4, #0]
 8002852:	6061      	str	r1, [r4, #4]
 8002854:	60a2      	str	r2, [r4, #8]
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	789b      	ldrb	r3, [r3, #2]
 800285a:	81a2      	strh	r2, [r4, #12]
 800285c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002864:	4a47      	ldr	r2, [pc, #284]	; (8002984 <problem_fetch+0xff4>)
 8002866:	461c      	mov	r4, r3
 8002868:	4613      	mov	r3, r2
 800286a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800286c:	6020      	str	r0, [r4, #0]
 800286e:	6061      	str	r1, [r4, #4]
 8002870:	60a2      	str	r2, [r4, #8]
			break;
 8002872:	f019 bfbd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 5 :
			strcpy(p->name,"TRIAL ‘N’ ERROR");
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800287c:	4a4f      	ldr	r2, [pc, #316]	; (80029bc <problem_fetch+0x102c>)
 800287e:	461d      	mov	r5, r3
 8002880:	4614      	mov	r4, r2
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	6028      	str	r0, [r5, #0]
 8002886:	6069      	str	r1, [r5, #4]
 8002888:	60aa      	str	r2, [r5, #8]
 800288a:	60eb      	str	r3, [r5, #12]
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C");
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002896:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <problem_fetch+0x1030>)
 8002898:	8811      	ldrh	r1, [r2, #0]
 800289a:	7892      	ldrb	r2, [r2, #2]
 800289c:	8019      	strh	r1, [r3, #0]
 800289e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2207      	movs	r2, #7
 80028a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,G,E,J,D");
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	33a4      	adds	r3, #164	; 0xa4
 80028aa:	4a46      	ldr	r2, [pc, #280]	; (80029c4 <problem_fetch+0x1034>)
 80028ac:	461c      	mov	r4, r3
 80028ae:	4613      	mov	r3, r2
 80028b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028b2:	6020      	str	r0, [r4, #0]
 80028b4:	6061      	str	r1, [r4, #4]
 80028b6:	60a2      	str	r2, [r4, #8]
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,9,10,14,16,18");
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	4a41      	ldr	r2, [pc, #260]	; (80029c8 <problem_fetch+0x1038>)
 80028c2:	461d      	mov	r5, r3
 80028c4:	4614      	mov	r4, r2
 80028c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028c8:	6028      	str	r0, [r5, #0]
 80028ca:	6069      	str	r1, [r5, #4]
 80028cc:	60aa      	str	r2, [r5, #8]
 80028ce:	60eb      	str	r3, [r5, #12]
 80028d0:	8823      	ldrh	r3, [r4, #0]
 80028d2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80028da:	4a33      	ldr	r2, [pc, #204]	; (80029a8 <problem_fetch+0x1018>)
 80028dc:	461c      	mov	r4, r3
 80028de:	4613      	mov	r3, r2
 80028e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80028e2:	6020      	str	r0, [r4, #0]
 80028e4:	6061      	str	r1, [r4, #4]
 80028e6:	60a2      	str	r2, [r4, #8]
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	81a3      	strh	r3, [r4, #12]
			break;
 80028ec:	f019 bf80 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 6 :
			strcpy(p->name,"1985-54");
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80028f6:	4935      	ldr	r1, [pc, #212]	; (80029cc <problem_fetch+0x103c>)
 80028f8:	461a      	mov	r2, r3
 80028fa:	460b      	mov	r3, r1
 80028fc:	cb03      	ldmia	r3!, {r0, r1}
 80028fe:	6010      	str	r0, [r2, #0]
 8002900:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002908:	4a20      	ldr	r2, [pc, #128]	; (800298c <problem_fetch+0xffc>)
 800290a:	6810      	ldr	r0, [r2, #0]
 800290c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2208      	movs	r2, #8
 8002912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,I,H,J,G,H,D");
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	33a4      	adds	r3, #164	; 0xa4
 8002918:	4a2d      	ldr	r2, [pc, #180]	; (80029d0 <problem_fetch+0x1040>)
 800291a:	461c      	mov	r4, r3
 800291c:	4615      	mov	r5, r2
 800291e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002920:	6020      	str	r0, [r4, #0]
 8002922:	6061      	str	r1, [r4, #4]
 8002924:	60a2      	str	r2, [r4, #8]
 8002926:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,10,13,15,16,18");
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <problem_fetch+0x1044>)
 800292e:	461d      	mov	r5, r3
 8002930:	4614      	mov	r4, r2
 8002932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002934:	6028      	str	r0, [r5, #0]
 8002936:	6069      	str	r1, [r5, #4]
 8002938:	60aa      	str	r2, [r5, #8]
 800293a:	60eb      	str	r3, [r5, #12]
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	6128      	str	r0, [r5, #16]
 8002940:	88a3      	ldrh	r3, [r4, #4]
 8002942:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800294a:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <problem_fetch+0x1048>)
 800294c:	461c      	mov	r4, r3
 800294e:	4615      	mov	r5, r2
 8002950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002952:	6020      	str	r0, [r4, #0]
 8002954:	6061      	str	r1, [r4, #4]
 8002956:	60a2      	str	r2, [r4, #8]
 8002958:	60e3      	str	r3, [r4, #12]
			break;
 800295a:	f019 bf49 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800295e:	bf00      	nop
 8002960:	080239ec 	.word	0x080239ec
 8002964:	080239f4 	.word	0x080239f4
 8002968:	080239f8 	.word	0x080239f8
 800296c:	08023a5c 	.word	0x08023a5c
 8002970:	08023ae4 	.word	0x08023ae4
 8002974:	08023b48 	.word	0x08023b48
 8002978:	08023b50 	.word	0x08023b50
 800297c:	08023b54 	.word	0x08023b54
 8002980:	08023b60 	.word	0x08023b60
 8002984:	08023b70 	.word	0x08023b70
 8002988:	08023b7c 	.word	0x08023b7c
 800298c:	08023b90 	.word	0x08023b90
 8002990:	08023b94 	.word	0x08023b94
 8002994:	08023ba4 	.word	0x08023ba4
 8002998:	08023bb8 	.word	0x08023bb8
 800299c:	08023bc8 	.word	0x08023bc8
 80029a0:	08023be4 	.word	0x08023be4
 80029a4:	08023bf4 	.word	0x08023bf4
 80029a8:	08023c08 	.word	0x08023c08
 80029ac:	08023c18 	.word	0x08023c18
 80029b0:	08023c28 	.word	0x08023c28
 80029b4:	08023c2c 	.word	0x08023c2c
 80029b8:	08023c38 	.word	0x08023c38
 80029bc:	08023c48 	.word	0x08023c48
 80029c0:	08023c5c 	.word	0x08023c5c
 80029c4:	08023c60 	.word	0x08023c60
 80029c8:	08023c70 	.word	0x08023c70
 80029cc:	08023c84 	.word	0x08023c84
 80029d0:	08023c8c 	.word	0x08023c8c
 80029d4:	08023c9c 	.word	0x08023c9c
 80029d8:	08023cb4 	.word	0x08023cb4
		case 7 :
			strcpy(p->name,"PANTHER");
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80029e2:	49ab      	ldr	r1, [pc, #684]	; (8002c90 <problem_fetch+0x1300>)
 80029e4:	461a      	mov	r2, r3
 80029e6:	460b      	mov	r3, r1
 80029e8:	cb03      	ldmia	r3!, {r0, r1}
 80029ea:	6010      	str	r0, [r2, #0]
 80029ec:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80029f4:	4aa7      	ldr	r2, [pc, #668]	; (8002c94 <problem_fetch+0x1304>)
 80029f6:	6810      	ldr	r0, [r2, #0]
 80029f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	33a4      	adds	r3, #164	; 0xa4
 8002a04:	49a4      	ldr	r1, [pc, #656]	; (8002c98 <problem_fetch+0x1308>)
 8002a06:	461a      	mov	r2, r3
 8002a08:	460b      	mov	r3, r1
 8002a0a:	cb03      	ldmia	r3!, {r0, r1}
 8002a0c:	6010      	str	r0, [r2, #0]
 8002a0e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	49a1      	ldr	r1, [pc, #644]	; (8002c9c <problem_fetch+0x130c>)
 8002a16:	461a      	mov	r2, r3
 8002a18:	460b      	mov	r3, r1
 8002a1a:	cb03      	ldmia	r3!, {r0, r1}
 8002a1c:	6010      	str	r0, [r2, #0]
 8002a1e:	6051      	str	r1, [r2, #4]
 8002a20:	8819      	ldrh	r1, [r3, #0]
 8002a22:	789b      	ldrb	r3, [r3, #2]
 8002a24:	8111      	strh	r1, [r2, #8]
 8002a26:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002a2e:	499c      	ldr	r1, [pc, #624]	; (8002ca0 <problem_fetch+0x1310>)
 8002a30:	461a      	mov	r2, r3
 8002a32:	460b      	mov	r3, r1
 8002a34:	cb03      	ldmia	r3!, {r0, r1}
 8002a36:	6010      	str	r0, [r2, #0]
 8002a38:	6051      	str	r1, [r2, #4]
			break;
 8002a3a:	f019 bed9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 8 :
			strcpy(p->name,"CHOSS 7");
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002a44:	4997      	ldr	r1, [pc, #604]	; (8002ca4 <problem_fetch+0x1314>)
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	cb03      	ldmia	r3!, {r0, r1}
 8002a4c:	6010      	str	r0, [r2, #0]
 8002a4e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a56:	4a94      	ldr	r2, [pc, #592]	; (8002ca8 <problem_fetch+0x1318>)
 8002a58:	8811      	ldrh	r1, [r2, #0]
 8002a5a:	7892      	ldrb	r2, [r2, #2]
 8002a5c:	8019      	strh	r1, [r3, #0]
 8002a5e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2207      	movs	r2, #7
 8002a64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,E,A,D");
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	33a4      	adds	r3, #164	; 0xa4
 8002a6a:	4a90      	ldr	r2, [pc, #576]	; (8002cac <problem_fetch+0x131c>)
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a72:	6020      	str	r0, [r4, #0]
 8002a74:	6061      	str	r1, [r4, #4]
 8002a76:	60a2      	str	r2, [r4, #8]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,8,12,14,18");
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4a8b      	ldr	r2, [pc, #556]	; (8002cb0 <problem_fetch+0x1320>)
 8002a82:	461d      	mov	r5, r3
 8002a84:	4614      	mov	r4, r2
 8002a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a88:	6028      	str	r0, [r5, #0]
 8002a8a:	6069      	str	r1, [r5, #4]
 8002a8c:	60aa      	str	r2, [r5, #8]
 8002a8e:	60eb      	str	r3, [r5, #12]
 8002a90:	7823      	ldrb	r3, [r4, #0]
 8002a92:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002a9a:	4a86      	ldr	r2, [pc, #536]	; (8002cb4 <problem_fetch+0x1324>)
 8002a9c:	461c      	mov	r4, r3
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002aa2:	6020      	str	r0, [r4, #0]
 8002aa4:	6061      	str	r1, [r4, #4]
 8002aa6:	60a2      	str	r2, [r4, #8]
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	81a3      	strh	r3, [r4, #12]
			break;
 8002aac:	f019 bea0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 9 :
			strcpy(p->name,"ASHES");
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ab6:	4a80      	ldr	r2, [pc, #512]	; (8002cb8 <problem_fetch+0x1328>)
 8002ab8:	6810      	ldr	r0, [r2, #0]
 8002aba:	6018      	str	r0, [r3, #0]
 8002abc:	8892      	ldrh	r2, [r2, #4]
 8002abe:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ac6:	4a7d      	ldr	r2, [pc, #500]	; (8002cbc <problem_fetch+0x132c>)
 8002ac8:	6810      	ldr	r0, [r2, #0]
 8002aca:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2209      	movs	r2, #9
 8002ad0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,C,B,E,E,I,J,D");
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	33a4      	adds	r3, #164	; 0xa4
 8002ad6:	4a7a      	ldr	r2, [pc, #488]	; (8002cc0 <problem_fetch+0x1330>)
 8002ad8:	461d      	mov	r5, r3
 8002ada:	4614      	mov	r4, r2
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	6028      	str	r0, [r5, #0]
 8002ae0:	6069      	str	r1, [r5, #4]
 8002ae2:	60aa      	str	r2, [r5, #8]
 8002ae4:	60eb      	str	r3, [r5, #12]
 8002ae6:	8823      	ldrh	r3, [r4, #0]
 8002ae8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,14,16,18,13,7");
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <problem_fetch+0x1334>)
 8002af0:	461c      	mov	r4, r3
 8002af2:	4615      	mov	r5, r2
 8002af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002af6:	6020      	str	r0, [r4, #0]
 8002af8:	6061      	str	r1, [r4, #4]
 8002afa:	60a2      	str	r2, [r4, #8]
 8002afc:	60e3      	str	r3, [r4, #12]
 8002afe:	6828      	ldr	r0, [r5, #0]
 8002b00:	6120      	str	r0, [r4, #16]
 8002b02:	88ab      	ldrh	r3, [r5, #4]
 8002b04:	79aa      	ldrb	r2, [r5, #6]
 8002b06:	82a3      	strh	r3, [r4, #20]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,d");
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002b12:	4a6d      	ldr	r2, [pc, #436]	; (8002cc8 <problem_fetch+0x1338>)
 8002b14:	461d      	mov	r5, r3
 8002b16:	4614      	mov	r4, r2
 8002b18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b1a:	6028      	str	r0, [r5, #0]
 8002b1c:	6069      	str	r1, [r5, #4]
 8002b1e:	60aa      	str	r2, [r5, #8]
 8002b20:	60eb      	str	r3, [r5, #12]
 8002b22:	8823      	ldrh	r3, [r4, #0]
 8002b24:	822b      	strh	r3, [r5, #16]
			break;
 8002b26:	f019 be63 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 10 :
			strcpy(p->name,"BURNED");
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b30:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <problem_fetch+0x133c>)
 8002b32:	6810      	ldr	r0, [r2, #0]
 8002b34:	6018      	str	r0, [r3, #0]
 8002b36:	8891      	ldrh	r1, [r2, #4]
 8002b38:	7992      	ldrb	r2, [r2, #6]
 8002b3a:	8099      	strh	r1, [r3, #4]
 8002b3c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b44:	4a58      	ldr	r2, [pc, #352]	; (8002ca8 <problem_fetch+0x1318>)
 8002b46:	8811      	ldrh	r1, [r2, #0]
 8002b48:	7892      	ldrb	r2, [r2, #2]
 8002b4a:	8019      	strh	r1, [r3, #0]
 8002b4c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2208      	movs	r2, #8
 8002b52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,J,J,G,E,I");
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	33a4      	adds	r3, #164	; 0xa4
 8002b58:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <problem_fetch+0x1340>)
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	4615      	mov	r5, r2
 8002b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b60:	6020      	str	r0, [r4, #0]
 8002b62:	6061      	str	r1, [r4, #4]
 8002b64:	60a2      	str	r2, [r4, #8]
 8002b66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,5,12,14,16,18");
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4a59      	ldr	r2, [pc, #356]	; (8002cd4 <problem_fetch+0x1344>)
 8002b6e:	461d      	mov	r5, r3
 8002b70:	4614      	mov	r4, r2
 8002b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b74:	6028      	str	r0, [r5, #0]
 8002b76:	6069      	str	r1, [r5, #4]
 8002b78:	60aa      	str	r2, [r5, #8]
 8002b7a:	60eb      	str	r3, [r5, #12]
 8002b7c:	6820      	ldr	r0, [r4, #0]
 8002b7e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002b86:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <problem_fetch+0x1348>)
 8002b88:	461c      	mov	r4, r3
 8002b8a:	4615      	mov	r5, r2
 8002b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8e:	6020      	str	r0, [r4, #0]
 8002b90:	6061      	str	r1, [r4, #4]
 8002b92:	60a2      	str	r2, [r4, #8]
 8002b94:	60e3      	str	r3, [r4, #12]
			break;
 8002b96:	f019 be2b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 11 :
			strcpy(p->name,"DER SCHWÄCHLING");
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ba0:	4a4e      	ldr	r2, [pc, #312]	; (8002cdc <problem_fetch+0x134c>)
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba8:	6028      	str	r0, [r5, #0]
 8002baa:	6069      	str	r1, [r5, #4]
 8002bac:	60aa      	str	r2, [r5, #8]
 8002bae:	60eb      	str	r3, [r5, #12]
 8002bb0:	7823      	ldrb	r3, [r4, #0]
 8002bb2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002bba:	4a49      	ldr	r2, [pc, #292]	; (8002ce0 <problem_fetch+0x1350>)
 8002bbc:	8811      	ldrh	r1, [r2, #0]
 8002bbe:	7892      	ldrb	r2, [r2, #2]
 8002bc0:	8019      	strh	r1, [r3, #0]
 8002bc2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,I,J,G,G,D");
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	33a4      	adds	r3, #164	; 0xa4
 8002bce:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <problem_fetch+0x1354>)
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	4615      	mov	r5, r2
 8002bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd6:	6020      	str	r0, [r4, #0]
 8002bd8:	6061      	str	r1, [r4, #4]
 8002bda:	60a2      	str	r2, [r4, #8]
 8002bdc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,17,18");
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	4a41      	ldr	r2, [pc, #260]	; (8002ce8 <problem_fetch+0x1358>)
 8002be4:	461d      	mov	r5, r3
 8002be6:	4614      	mov	r4, r2
 8002be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bea:	6028      	str	r0, [r5, #0]
 8002bec:	6069      	str	r1, [r5, #4]
 8002bee:	60aa      	str	r2, [r5, #8]
 8002bf0:	60eb      	str	r3, [r5, #12]
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	6128      	str	r0, [r5, #16]
 8002bf6:	7923      	ldrb	r3, [r4, #4]
 8002bf8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002c00:	4a35      	ldr	r2, [pc, #212]	; (8002cd8 <problem_fetch+0x1348>)
 8002c02:	461c      	mov	r4, r3
 8002c04:	4615      	mov	r5, r2
 8002c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c08:	6020      	str	r0, [r4, #0]
 8002c0a:	6061      	str	r1, [r4, #4]
 8002c0c:	60a2      	str	r2, [r4, #8]
 8002c0e:	60e3      	str	r3, [r4, #12]
			break;
 8002c10:	f019 bdee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 12 :
			strcpy(p->name,"CAMPUSING WITH A BACKPACK");
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <problem_fetch+0x135c>)
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	4614      	mov	r4, r2
 8002c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c22:	6028      	str	r0, [r5, #0]
 8002c24:	6069      	str	r1, [r5, #4]
 8002c26:	60aa      	str	r2, [r5, #8]
 8002c28:	60eb      	str	r3, [r5, #12]
 8002c2a:	cc03      	ldmia	r4!, {r0, r1}
 8002c2c:	6128      	str	r0, [r5, #16]
 8002c2e:	6169      	str	r1, [r5, #20]
 8002c30:	8823      	ldrh	r3, [r4, #0]
 8002c32:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c3a:	4a2d      	ldr	r2, [pc, #180]	; (8002cf0 <problem_fetch+0x1360>)
 8002c3c:	6810      	ldr	r0, [r2, #0]
 8002c3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2207      	movs	r2, #7
 8002c44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,H,C,D,D");
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	33a4      	adds	r3, #164	; 0xa4
 8002c4a:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <problem_fetch+0x1364>)
 8002c4c:	461c      	mov	r4, r3
 8002c4e:	4613      	mov	r3, r2
 8002c50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c52:	6020      	str	r0, [r4, #0]
 8002c54:	6061      	str	r1, [r4, #4]
 8002c56:	60a2      	str	r2, [r4, #8]
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,15,18");
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4a25      	ldr	r2, [pc, #148]	; (8002cf8 <problem_fetch+0x1368>)
 8002c62:	461d      	mov	r5, r3
 8002c64:	4614      	mov	r4, r2
 8002c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c68:	6028      	str	r0, [r5, #0]
 8002c6a:	6069      	str	r1, [r5, #4]
 8002c6c:	60aa      	str	r2, [r5, #8]
 8002c6e:	60eb      	str	r3, [r5, #12]
 8002c70:	8823      	ldrh	r3, [r4, #0]
 8002c72:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002c7a:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <problem_fetch+0x136c>)
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	4613      	mov	r3, r2
 8002c80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c82:	6020      	str	r0, [r4, #0]
 8002c84:	6061      	str	r1, [r4, #4]
 8002c86:	60a2      	str	r2, [r4, #8]
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	81a3      	strh	r3, [r4, #12]
			break;
 8002c8c:	f019 bdb0 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8002c90:	08023cc4 	.word	0x08023cc4
 8002c94:	08023ccc 	.word	0x08023ccc
 8002c98:	08023cd0 	.word	0x08023cd0
 8002c9c:	08023cd8 	.word	0x08023cd8
 8002ca0:	08023ce4 	.word	0x08023ce4
 8002ca4:	08023cec 	.word	0x08023cec
 8002ca8:	08023b50 	.word	0x08023b50
 8002cac:	08023cf4 	.word	0x08023cf4
 8002cb0:	08023d04 	.word	0x08023d04
 8002cb4:	08023d18 	.word	0x08023d18
 8002cb8:	08023d28 	.word	0x08023d28
 8002cbc:	08023d30 	.word	0x08023d30
 8002cc0:	08023d34 	.word	0x08023d34
 8002cc4:	08023d48 	.word	0x08023d48
 8002cc8:	08023d60 	.word	0x08023d60
 8002ccc:	08023d74 	.word	0x08023d74
 8002cd0:	08023d7c 	.word	0x08023d7c
 8002cd4:	08023d8c 	.word	0x08023d8c
 8002cd8:	08023da0 	.word	0x08023da0
 8002cdc:	08023db0 	.word	0x08023db0
 8002ce0:	08023c5c 	.word	0x08023c5c
 8002ce4:	08023dc4 	.word	0x08023dc4
 8002ce8:	08023dd4 	.word	0x08023dd4
 8002cec:	08023dec 	.word	0x08023dec
 8002cf0:	08023b90 	.word	0x08023b90
 8002cf4:	08023e08 	.word	0x08023e08
 8002cf8:	08023e18 	.word	0x08023e18
 8002cfc:	08023c08 	.word	0x08023c08
		case 13 :
			strcpy(p->name,"DEAD FISH");
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002d06:	49bf      	ldr	r1, [pc, #764]	; (8003004 <problem_fetch+0x1674>)
 8002d08:	461a      	mov	r2, r3
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	cb03      	ldmia	r3!, {r0, r1}
 8002d0e:	6010      	str	r0, [r2, #0]
 8002d10:	6051      	str	r1, [r2, #4]
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d1c:	4aba      	ldr	r2, [pc, #744]	; (8003008 <problem_fetch+0x1678>)
 8002d1e:	6810      	ldr	r0, [r2, #0]
 8002d20:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2207      	movs	r2, #7
 8002d26:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,F,I,E,D");
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	33a4      	adds	r3, #164	; 0xa4
 8002d2c:	4ab7      	ldr	r2, [pc, #732]	; (800300c <problem_fetch+0x167c>)
 8002d2e:	461c      	mov	r4, r3
 8002d30:	4613      	mov	r3, r2
 8002d32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d34:	6020      	str	r0, [r4, #0]
 8002d36:	6061      	str	r1, [r4, #4]
 8002d38:	60a2      	str	r2, [r4, #8]
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,14,16,18");
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	4ab3      	ldr	r2, [pc, #716]	; (8003010 <problem_fetch+0x1680>)
 8002d44:	461d      	mov	r5, r3
 8002d46:	4614      	mov	r4, r2
 8002d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4a:	6028      	str	r0, [r5, #0]
 8002d4c:	6069      	str	r1, [r5, #4]
 8002d4e:	60aa      	str	r2, [r5, #8]
 8002d50:	60eb      	str	r3, [r5, #12]
 8002d52:	8823      	ldrh	r3, [r4, #0]
 8002d54:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002d5c:	4aad      	ldr	r2, [pc, #692]	; (8003014 <problem_fetch+0x1684>)
 8002d5e:	461c      	mov	r4, r3
 8002d60:	4613      	mov	r3, r2
 8002d62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d64:	6020      	str	r0, [r4, #0]
 8002d66:	6061      	str	r1, [r4, #4]
 8002d68:	60a2      	str	r2, [r4, #8]
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	81a3      	strh	r3, [r4, #12]
			break;
 8002d6e:	f019 bd3f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 14 :
			strcpy(p->name,"SUSHI ROLL");
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002d78:	49a7      	ldr	r1, [pc, #668]	; (8003018 <problem_fetch+0x1688>)
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	cb03      	ldmia	r3!, {r0, r1}
 8002d80:	6010      	str	r0, [r2, #0]
 8002d82:	6051      	str	r1, [r2, #4]
 8002d84:	8819      	ldrh	r1, [r3, #0]
 8002d86:	789b      	ldrb	r3, [r3, #2]
 8002d88:	8111      	strh	r1, [r2, #8]
 8002d8a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d92:	4aa2      	ldr	r2, [pc, #648]	; (800301c <problem_fetch+0x168c>)
 8002d94:	6810      	ldr	r0, [r2, #0]
 8002d96:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2207      	movs	r2, #7
 8002d9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A,D");
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	33a4      	adds	r3, #164	; 0xa4
 8002da2:	4a9f      	ldr	r2, [pc, #636]	; (8003020 <problem_fetch+0x1690>)
 8002da4:	461c      	mov	r4, r3
 8002da6:	4613      	mov	r3, r2
 8002da8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002daa:	6020      	str	r0, [r4, #0]
 8002dac:	6061      	str	r1, [r4, #4]
 8002dae:	60a2      	str	r2, [r4, #8]
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,18,18,15");
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	4a9a      	ldr	r2, [pc, #616]	; (8003024 <problem_fetch+0x1694>)
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc0:	6028      	str	r0, [r5, #0]
 8002dc2:	6069      	str	r1, [r5, #4]
 8002dc4:	60aa      	str	r2, [r5, #8]
 8002dc6:	60eb      	str	r3, [r5, #12]
 8002dc8:	8823      	ldrh	r3, [r4, #0]
 8002dca:	78a2      	ldrb	r2, [r4, #2]
 8002dcc:	822b      	strh	r3, [r5, #16]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,e,e,d");
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002dd8:	4a93      	ldr	r2, [pc, #588]	; (8003028 <problem_fetch+0x1698>)
 8002dda:	461c      	mov	r4, r3
 8002ddc:	4613      	mov	r3, r2
 8002dde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002de0:	6020      	str	r0, [r4, #0]
 8002de2:	6061      	str	r1, [r4, #4]
 8002de4:	60a2      	str	r2, [r4, #8]
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	81a3      	strh	r3, [r4, #12]
			break;
 8002dea:	f019 bd01 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 15 :
			strcpy(p->name,"INTERNAL ROTATION");
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002df4:	4a8d      	ldr	r2, [pc, #564]	; (800302c <problem_fetch+0x169c>)
 8002df6:	461d      	mov	r5, r3
 8002df8:	4614      	mov	r4, r2
 8002dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfc:	6028      	str	r0, [r5, #0]
 8002dfe:	6069      	str	r1, [r5, #4]
 8002e00:	60aa      	str	r2, [r5, #8]
 8002e02:	60eb      	str	r3, [r5, #12]
 8002e04:	8823      	ldrh	r3, [r4, #0]
 8002e06:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e0e:	4a88      	ldr	r2, [pc, #544]	; (8003030 <problem_fetch+0x16a0>)
 8002e10:	6810      	ldr	r0, [r2, #0]
 8002e12:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2208      	movs	r2, #8
 8002e18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,H,D,G,D,C");
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	33a4      	adds	r3, #164	; 0xa4
 8002e1e:	4a85      	ldr	r2, [pc, #532]	; (8003034 <problem_fetch+0x16a4>)
 8002e20:	461c      	mov	r4, r3
 8002e22:	4615      	mov	r5, r2
 8002e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e26:	6020      	str	r0, [r4, #0]
 8002e28:	6061      	str	r1, [r4, #4]
 8002e2a:	60a2      	str	r2, [r4, #8]
 8002e2c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,9,12,5,15,15,18,5");
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4a81      	ldr	r2, [pc, #516]	; (8003038 <problem_fetch+0x16a8>)
 8002e34:	461d      	mov	r5, r3
 8002e36:	4614      	mov	r4, r2
 8002e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3a:	6028      	str	r0, [r5, #0]
 8002e3c:	6069      	str	r1, [r5, #4]
 8002e3e:	60aa      	str	r2, [r5, #8]
 8002e40:	60eb      	str	r3, [r5, #12]
 8002e42:	6820      	ldr	r0, [r4, #0]
 8002e44:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,d,e,s");
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002e4c:	4a7b      	ldr	r2, [pc, #492]	; (800303c <problem_fetch+0x16ac>)
 8002e4e:	461c      	mov	r4, r3
 8002e50:	4615      	mov	r5, r2
 8002e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e54:	6020      	str	r0, [r4, #0]
 8002e56:	6061      	str	r1, [r4, #4]
 8002e58:	60a2      	str	r2, [r4, #8]
 8002e5a:	60e3      	str	r3, [r4, #12]
			break;
 8002e5c:	f019 bcc8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 16 :
			strcpy(p->name,"SIM");
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e66:	4a76      	ldr	r2, [pc, #472]	; (8003040 <problem_fetch+0x16b0>)
 8002e68:	6810      	ldr	r0, [r2, #0]
 8002e6a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e72:	4a6f      	ldr	r2, [pc, #444]	; (8003030 <problem_fetch+0x16a0>)
 8002e74:	6810      	ldr	r0, [r2, #0]
 8002e76:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,D,E,A");
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	33a4      	adds	r3, #164	; 0xa4
 8002e82:	4a70      	ldr	r2, [pc, #448]	; (8003044 <problem_fetch+0x16b4>)
 8002e84:	461c      	mov	r4, r3
 8002e86:	4613      	mov	r3, r2
 8002e88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e8a:	6020      	str	r0, [r4, #0]
 8002e8c:	6061      	str	r1, [r4, #4]
 8002e8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	4a6c      	ldr	r2, [pc, #432]	; (8003048 <problem_fetch+0x16b8>)
 8002e96:	461c      	mov	r4, r3
 8002e98:	4613      	mov	r3, r2
 8002e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e9c:	6020      	str	r0, [r4, #0]
 8002e9e:	6061      	str	r1, [r4, #4]
 8002ea0:	60a2      	str	r2, [r4, #8]
 8002ea2:	881a      	ldrh	r2, [r3, #0]
 8002ea4:	789b      	ldrb	r3, [r3, #2]
 8002ea6:	81a2      	strh	r2, [r4, #12]
 8002ea8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002eb0:	4a66      	ldr	r2, [pc, #408]	; (800304c <problem_fetch+0x16bc>)
 8002eb2:	461c      	mov	r4, r3
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002eb8:	6020      	str	r0, [r4, #0]
 8002eba:	6061      	str	r1, [r4, #4]
 8002ebc:	60a2      	str	r2, [r4, #8]
			break;
 8002ebe:	f019 bc97 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 17 :
			strcpy(p->name,"TURBO CALLA");
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ec8:	4a61      	ldr	r2, [pc, #388]	; (8003050 <problem_fetch+0x16c0>)
 8002eca:	461c      	mov	r4, r3
 8002ecc:	4613      	mov	r3, r2
 8002ece:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ed0:	6020      	str	r0, [r4, #0]
 8002ed2:	6061      	str	r1, [r4, #4]
 8002ed4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002edc:	4a5d      	ldr	r2, [pc, #372]	; (8003054 <problem_fetch+0x16c4>)
 8002ede:	8811      	ldrh	r1, [r2, #0]
 8002ee0:	7892      	ldrb	r2, [r2, #2]
 8002ee2:	8019      	strh	r1, [r3, #0]
 8002ee4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2206      	movs	r2, #6
 8002eea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,C,D,A");
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	33a4      	adds	r3, #164	; 0xa4
 8002ef0:	4a59      	ldr	r2, [pc, #356]	; (8003058 <problem_fetch+0x16c8>)
 8002ef2:	461c      	mov	r4, r3
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ef8:	6020      	str	r0, [r4, #0]
 8002efa:	6061      	str	r1, [r4, #4]
 8002efc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,13,15,18");
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	4a56      	ldr	r2, [pc, #344]	; (800305c <problem_fetch+0x16cc>)
 8002f04:	461c      	mov	r4, r3
 8002f06:	4613      	mov	r3, r2
 8002f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f0a:	6020      	str	r0, [r4, #0]
 8002f0c:	6061      	str	r1, [r4, #4]
 8002f0e:	60a2      	str	r2, [r4, #8]
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	789b      	ldrb	r3, [r3, #2]
 8002f14:	81a2      	strh	r2, [r4, #12]
 8002f16:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002f1e:	4a50      	ldr	r2, [pc, #320]	; (8003060 <problem_fetch+0x16d0>)
 8002f20:	461c      	mov	r4, r3
 8002f22:	4613      	mov	r3, r2
 8002f24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f26:	6020      	str	r0, [r4, #0]
 8002f28:	6061      	str	r1, [r4, #4]
 8002f2a:	60a2      	str	r2, [r4, #8]
			break;
 8002f2c:	f019 bc60 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 18 :
			strcpy(p->name,"BARRET");
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f36:	4a4b      	ldr	r2, [pc, #300]	; (8003064 <problem_fetch+0x16d4>)
 8002f38:	6810      	ldr	r0, [r2, #0]
 8002f3a:	6018      	str	r0, [r3, #0]
 8002f3c:	8891      	ldrh	r1, [r2, #4]
 8002f3e:	7992      	ldrb	r2, [r2, #6]
 8002f40:	8099      	strh	r1, [r3, #4]
 8002f42:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <problem_fetch+0x1678>)
 8002f4c:	6810      	ldr	r0, [r2, #0]
 8002f4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2206      	movs	r2, #6
 8002f54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,D,A,B,A,D");
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	33a4      	adds	r3, #164	; 0xa4
 8002f5a:	4a43      	ldr	r2, [pc, #268]	; (8003068 <problem_fetch+0x16d8>)
 8002f5c:	461c      	mov	r4, r3
 8002f5e:	4613      	mov	r3, r2
 8002f60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f62:	6020      	str	r0, [r4, #0]
 8002f64:	6061      	str	r1, [r4, #4]
 8002f66:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,9,12,14,18");
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4a3f      	ldr	r2, [pc, #252]	; (800306c <problem_fetch+0x16dc>)
 8002f6e:	461c      	mov	r4, r3
 8002f70:	4613      	mov	r3, r2
 8002f72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f74:	6020      	str	r0, [r4, #0]
 8002f76:	6061      	str	r1, [r4, #4]
 8002f78:	60a2      	str	r2, [r4, #8]
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	789b      	ldrb	r3, [r3, #2]
 8002f7e:	81a2      	strh	r2, [r4, #12]
 8002f80:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002f88:	4a35      	ldr	r2, [pc, #212]	; (8003060 <problem_fetch+0x16d0>)
 8002f8a:	461c      	mov	r4, r3
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f90:	6020      	str	r0, [r4, #0]
 8002f92:	6061      	str	r1, [r4, #4]
 8002f94:	60a2      	str	r2, [r4, #8]
			break;
 8002f96:	f019 bc2b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 19 :
			strcpy(p->name,"BLACK LAMP");
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002fa0:	4933      	ldr	r1, [pc, #204]	; (8003070 <problem_fetch+0x16e0>)
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	cb03      	ldmia	r3!, {r0, r1}
 8002fa8:	6010      	str	r0, [r2, #0]
 8002faa:	6051      	str	r1, [r2, #4]
 8002fac:	8819      	ldrh	r1, [r3, #0]
 8002fae:	789b      	ldrb	r3, [r3, #2]
 8002fb0:	8111      	strh	r1, [r2, #8]
 8002fb2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002fba:	4a13      	ldr	r2, [pc, #76]	; (8003008 <problem_fetch+0x1678>)
 8002fbc:	6810      	ldr	r0, [r2, #0]
 8002fbe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2206      	movs	r2, #6
 8002fc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,I,D,J,E");
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	33a4      	adds	r3, #164	; 0xa4
 8002fca:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <problem_fetch+0x16e4>)
 8002fcc:	461c      	mov	r4, r3
 8002fce:	4613      	mov	r3, r2
 8002fd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fd2:	6020      	str	r0, [r4, #0]
 8002fd4:	6061      	str	r1, [r4, #4]
 8002fd6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"10,14,14,18,5,6");
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4a26      	ldr	r2, [pc, #152]	; (8003078 <problem_fetch+0x16e8>)
 8002fde:	461c      	mov	r4, r3
 8002fe0:	4615      	mov	r5, r2
 8002fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe4:	6020      	str	r0, [r4, #0]
 8002fe6:	6061      	str	r1, [r4, #4]
 8002fe8:	60a2      	str	r2, [r4, #8]
 8002fea:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s,s");
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002ff2:	4a22      	ldr	r2, [pc, #136]	; (800307c <problem_fetch+0x16ec>)
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ffa:	6020      	str	r0, [r4, #0]
 8002ffc:	6061      	str	r1, [r4, #4]
 8002ffe:	60a2      	str	r2, [r4, #8]
			break;
 8003000:	f019 bbf6 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8003004:	08023e2c 	.word	0x08023e2c
 8003008:	08023c28 	.word	0x08023c28
 800300c:	08023e38 	.word	0x08023e38
 8003010:	08023e48 	.word	0x08023e48
 8003014:	08023c08 	.word	0x08023c08
 8003018:	08023e5c 	.word	0x08023e5c
 800301c:	08023b90 	.word	0x08023b90
 8003020:	08023e68 	.word	0x08023e68
 8003024:	08023e78 	.word	0x08023e78
 8003028:	08023e8c 	.word	0x08023e8c
 800302c:	08023e9c 	.word	0x08023e9c
 8003030:	08023d30 	.word	0x08023d30
 8003034:	08023eb0 	.word	0x08023eb0
 8003038:	08023ec0 	.word	0x08023ec0
 800303c:	08023ed4 	.word	0x08023ed4
 8003040:	08023ee4 	.word	0x08023ee4
 8003044:	08023ee8 	.word	0x08023ee8
 8003048:	08023ef4 	.word	0x08023ef4
 800304c:	08023b70 	.word	0x08023b70
 8003050:	08023f04 	.word	0x08023f04
 8003054:	08023b50 	.word	0x08023b50
 8003058:	08023f10 	.word	0x08023f10
 800305c:	08023f1c 	.word	0x08023f1c
 8003060:	08023f2c 	.word	0x08023f2c
 8003064:	08023f38 	.word	0x08023f38
 8003068:	08023f40 	.word	0x08023f40
 800306c:	08023f4c 	.word	0x08023f4c
 8003070:	08023f5c 	.word	0x08023f5c
 8003074:	08023f68 	.word	0x08023f68
 8003078:	08023f74 	.word	0x08023f74
 800307c:	08023f84 	.word	0x08023f84
		case 20 :
			strcpy(p->name,"ALLBLACKS");
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003086:	49a9      	ldr	r1, [pc, #676]	; (800332c <problem_fetch+0x199c>)
 8003088:	461a      	mov	r2, r3
 800308a:	460b      	mov	r3, r1
 800308c:	cb03      	ldmia	r3!, {r0, r1}
 800308e:	6010      	str	r0, [r2, #0]
 8003090:	6051      	str	r1, [r2, #4]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800309c:	4aa4      	ldr	r2, [pc, #656]	; (8003330 <problem_fetch+0x19a0>)
 800309e:	8811      	ldrh	r1, [r2, #0]
 80030a0:	7892      	ldrb	r2, [r2, #2]
 80030a2:	8019      	strh	r1, [r3, #0]
 80030a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2206      	movs	r2, #6
 80030aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,D,A");
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	33a4      	adds	r3, #164	; 0xa4
 80030b0:	4aa0      	ldr	r2, [pc, #640]	; (8003334 <problem_fetch+0x19a4>)
 80030b2:	461c      	mov	r4, r3
 80030b4:	4613      	mov	r3, r2
 80030b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030b8:	6020      	str	r0, [r4, #0]
 80030ba:	6061      	str	r1, [r4, #4]
 80030bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,10,13,15,18");
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4a9d      	ldr	r2, [pc, #628]	; (8003338 <problem_fetch+0x19a8>)
 80030c4:	461c      	mov	r4, r3
 80030c6:	4615      	mov	r5, r2
 80030c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030ca:	6020      	str	r0, [r4, #0]
 80030cc:	6061      	str	r1, [r4, #4]
 80030ce:	60a2      	str	r2, [r4, #8]
 80030d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80030d8:	4a98      	ldr	r2, [pc, #608]	; (800333c <problem_fetch+0x19ac>)
 80030da:	461c      	mov	r4, r3
 80030dc:	4613      	mov	r3, r2
 80030de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030e0:	6020      	str	r0, [r4, #0]
 80030e2:	6061      	str	r1, [r4, #4]
 80030e4:	60a2      	str	r2, [r4, #8]
			break;
 80030e6:	f019 bb83 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 21 :
			strcpy(p->name,"FLEMMING THE BEAST");
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80030f0:	4a93      	ldr	r2, [pc, #588]	; (8003340 <problem_fetch+0x19b0>)
 80030f2:	461d      	mov	r5, r3
 80030f4:	4614      	mov	r4, r2
 80030f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f8:	6028      	str	r0, [r5, #0]
 80030fa:	6069      	str	r1, [r5, #4]
 80030fc:	60aa      	str	r2, [r5, #8]
 80030fe:	60eb      	str	r3, [r5, #12]
 8003100:	8823      	ldrh	r3, [r4, #0]
 8003102:	78a2      	ldrb	r2, [r4, #2]
 8003104:	822b      	strh	r3, [r5, #16]
 8003106:	4613      	mov	r3, r2
 8003108:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003110:	4a8c      	ldr	r2, [pc, #560]	; (8003344 <problem_fetch+0x19b4>)
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2208      	movs	r2, #8
 800311a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,E,H,A,E,D");
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	33a4      	adds	r3, #164	; 0xa4
 8003120:	4a89      	ldr	r2, [pc, #548]	; (8003348 <problem_fetch+0x19b8>)
 8003122:	461c      	mov	r4, r3
 8003124:	4615      	mov	r5, r2
 8003126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003128:	6020      	str	r0, [r4, #0]
 800312a:	6061      	str	r1, [r4, #4]
 800312c:	60a2      	str	r2, [r4, #8]
 800312e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,12,8,14,16,18");
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4a85      	ldr	r2, [pc, #532]	; (800334c <problem_fetch+0x19bc>)
 8003136:	461d      	mov	r5, r3
 8003138:	4614      	mov	r4, r2
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	6028      	str	r0, [r5, #0]
 800313e:	6069      	str	r1, [r5, #4]
 8003140:	60aa      	str	r2, [r5, #8]
 8003142:	60eb      	str	r3, [r5, #12]
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800314e:	4a80      	ldr	r2, [pc, #512]	; (8003350 <problem_fetch+0x19c0>)
 8003150:	461c      	mov	r4, r3
 8003152:	4615      	mov	r5, r2
 8003154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003156:	6020      	str	r0, [r4, #0]
 8003158:	6061      	str	r1, [r4, #4]
 800315a:	60a2      	str	r2, [r4, #8]
 800315c:	60e3      	str	r3, [r4, #12]
			break;
 800315e:	f019 bb47 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 22 :
			strcpy(p->name,"BIG LE MOVIES");
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003168:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <problem_fetch+0x19c4>)
 800316a:	461c      	mov	r4, r3
 800316c:	4613      	mov	r3, r2
 800316e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003170:	6020      	str	r0, [r4, #0]
 8003172:	6061      	str	r1, [r4, #4]
 8003174:	60a2      	str	r2, [r4, #8]
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003180:	4a75      	ldr	r2, [pc, #468]	; (8003358 <problem_fetch+0x19c8>)
 8003182:	6810      	ldr	r0, [r2, #0]
 8003184:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2207      	movs	r2, #7
 800318a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,H,G,G,I");
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	33a4      	adds	r3, #164	; 0xa4
 8003190:	4a72      	ldr	r2, [pc, #456]	; (800335c <problem_fetch+0x19cc>)
 8003192:	461c      	mov	r4, r3
 8003194:	4613      	mov	r3, r2
 8003196:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003198:	6020      	str	r0, [r4, #0]
 800319a:	6061      	str	r1, [r4, #4]
 800319c:	60a2      	str	r2, [r4, #8]
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,10,14,17,18");
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <problem_fetch+0x19d0>)
 80031a8:	461d      	mov	r5, r3
 80031aa:	4614      	mov	r4, r2
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	6028      	str	r0, [r5, #0]
 80031b0:	6069      	str	r1, [r5, #4]
 80031b2:	60aa      	str	r2, [r5, #8]
 80031b4:	60eb      	str	r3, [r5, #12]
 80031b6:	8823      	ldrh	r3, [r4, #0]
 80031b8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80031c0:	4a68      	ldr	r2, [pc, #416]	; (8003364 <problem_fetch+0x19d4>)
 80031c2:	461c      	mov	r4, r3
 80031c4:	4613      	mov	r3, r2
 80031c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031c8:	6020      	str	r0, [r4, #0]
 80031ca:	6061      	str	r1, [r4, #4]
 80031cc:	60a2      	str	r2, [r4, #8]
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	81a3      	strh	r3, [r4, #12]
			break;
 80031d2:	f019 bb0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 23 :
			strcpy(p->name,"FIRST COME, FIRST SERVED");
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80031dc:	4a62      	ldr	r2, [pc, #392]	; (8003368 <problem_fetch+0x19d8>)
 80031de:	461d      	mov	r5, r3
 80031e0:	4614      	mov	r4, r2
 80031e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031e4:	6028      	str	r0, [r5, #0]
 80031e6:	6069      	str	r1, [r5, #4]
 80031e8:	60aa      	str	r2, [r5, #8]
 80031ea:	60eb      	str	r3, [r5, #12]
 80031ec:	cc03      	ldmia	r4!, {r0, r1}
 80031ee:	6128      	str	r0, [r5, #16]
 80031f0:	6169      	str	r1, [r5, #20]
 80031f2:	7823      	ldrb	r3, [r4, #0]
 80031f4:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80031fc:	4a5b      	ldr	r2, [pc, #364]	; (800336c <problem_fetch+0x19dc>)
 80031fe:	6810      	ldr	r0, [r2, #0]
 8003200:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2205      	movs	r2, #5
 8003206:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D");
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	33a4      	adds	r3, #164	; 0xa4
 800320c:	4958      	ldr	r1, [pc, #352]	; (8003370 <problem_fetch+0x19e0>)
 800320e:	461a      	mov	r2, r3
 8003210:	460b      	mov	r3, r1
 8003212:	cb03      	ldmia	r3!, {r0, r1}
 8003214:	6010      	str	r0, [r2, #0]
 8003216:	6051      	str	r1, [r2, #4]
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,11,14,18");
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	4a54      	ldr	r2, [pc, #336]	; (8003374 <problem_fetch+0x19e4>)
 8003222:	461c      	mov	r4, r3
 8003224:	4613      	mov	r3, r2
 8003226:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003228:	6020      	str	r0, [r4, #0]
 800322a:	6061      	str	r1, [r4, #4]
 800322c:	60a2      	str	r2, [r4, #8]
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003238:	494f      	ldr	r1, [pc, #316]	; (8003378 <problem_fetch+0x19e8>)
 800323a:	461a      	mov	r2, r3
 800323c:	460b      	mov	r3, r1
 800323e:	cb03      	ldmia	r3!, {r0, r1}
 8003240:	6010      	str	r0, [r2, #0]
 8003242:	6051      	str	r1, [r2, #4]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	8113      	strh	r3, [r2, #8]
			break;
 8003248:	f019 bad2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 24 :
			strcpy(p->name,"SALAD APOCALYPSE");
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003252:	4a4a      	ldr	r2, [pc, #296]	; (800337c <problem_fetch+0x19ec>)
 8003254:	461d      	mov	r5, r3
 8003256:	4614      	mov	r4, r2
 8003258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800325a:	6028      	str	r0, [r5, #0]
 800325c:	6069      	str	r1, [r5, #4]
 800325e:	60aa      	str	r2, [r5, #8]
 8003260:	60eb      	str	r3, [r5, #12]
 8003262:	7823      	ldrb	r3, [r4, #0]
 8003264:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800326c:	4a3f      	ldr	r2, [pc, #252]	; (800336c <problem_fetch+0x19dc>)
 800326e:	6810      	ldr	r0, [r2, #0]
 8003270:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2206      	movs	r2, #6
 8003276:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,H,D,A");
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	33a4      	adds	r3, #164	; 0xa4
 800327c:	4a40      	ldr	r2, [pc, #256]	; (8003380 <problem_fetch+0x19f0>)
 800327e:	461c      	mov	r4, r3
 8003280:	4613      	mov	r3, r2
 8003282:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003284:	6020      	str	r0, [r4, #0]
 8003286:	6061      	str	r1, [r4, #4]
 8003288:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,15,18");
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	4a3d      	ldr	r2, [pc, #244]	; (8003384 <problem_fetch+0x19f4>)
 8003290:	461c      	mov	r4, r3
 8003292:	4613      	mov	r3, r2
 8003294:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003296:	6020      	str	r0, [r4, #0]
 8003298:	6061      	str	r1, [r4, #4]
 800329a:	60a2      	str	r2, [r4, #8]
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	789b      	ldrb	r3, [r3, #2]
 80032a0:	81a2      	strh	r2, [r4, #12]
 80032a2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80032aa:	4a24      	ldr	r2, [pc, #144]	; (800333c <problem_fetch+0x19ac>)
 80032ac:	461c      	mov	r4, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032b2:	6020      	str	r0, [r4, #0]
 80032b4:	6061      	str	r1, [r4, #4]
 80032b6:	60a2      	str	r2, [r4, #8]
			break;
 80032b8:	f019 ba9a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 25 :
			strcpy(p->name,"VISUALIZZA VERS2");
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80032c2:	4a31      	ldr	r2, [pc, #196]	; (8003388 <problem_fetch+0x19f8>)
 80032c4:	461d      	mov	r5, r3
 80032c6:	4614      	mov	r4, r2
 80032c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ca:	6028      	str	r0, [r5, #0]
 80032cc:	6069      	str	r1, [r5, #4]
 80032ce:	60aa      	str	r2, [r5, #8]
 80032d0:	60eb      	str	r3, [r5, #12]
 80032d2:	7823      	ldrb	r3, [r4, #0]
 80032d4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032dc:	4a23      	ldr	r2, [pc, #140]	; (800336c <problem_fetch+0x19dc>)
 80032de:	6810      	ldr	r0, [r2, #0]
 80032e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2206      	movs	r2, #6
 80032e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,E,D");
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	33a4      	adds	r3, #164	; 0xa4
 80032ec:	4a27      	ldr	r2, [pc, #156]	; (800338c <problem_fetch+0x19fc>)
 80032ee:	461c      	mov	r4, r3
 80032f0:	4613      	mov	r3, r2
 80032f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032f4:	6020      	str	r0, [r4, #0]
 80032f6:	6061      	str	r1, [r4, #4]
 80032f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <problem_fetch+0x1a00>)
 8003300:	461c      	mov	r4, r3
 8003302:	4613      	mov	r3, r2
 8003304:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003306:	6020      	str	r0, [r4, #0]
 8003308:	6061      	str	r1, [r4, #4]
 800330a:	60a2      	str	r2, [r4, #8]
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	789b      	ldrb	r3, [r3, #2]
 8003310:	81a2      	strh	r2, [r4, #12]
 8003312:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <problem_fetch+0x1a04>)
 800331c:	461c      	mov	r4, r3
 800331e:	4613      	mov	r3, r2
 8003320:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003322:	6020      	str	r0, [r4, #0]
 8003324:	6061      	str	r1, [r4, #4]
 8003326:	60a2      	str	r2, [r4, #8]
			break;
 8003328:	f019 ba62 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800332c:	08023f90 	.word	0x08023f90
 8003330:	08023b50 	.word	0x08023b50
 8003334:	08023f9c 	.word	0x08023f9c
 8003338:	08023fa8 	.word	0x08023fa8
 800333c:	08023b70 	.word	0x08023b70
 8003340:	08023fb8 	.word	0x08023fb8
 8003344:	08023c28 	.word	0x08023c28
 8003348:	08023fcc 	.word	0x08023fcc
 800334c:	08023fdc 	.word	0x08023fdc
 8003350:	08023da0 	.word	0x08023da0
 8003354:	08023ff0 	.word	0x08023ff0
 8003358:	08023b90 	.word	0x08023b90
 800335c:	08024000 	.word	0x08024000
 8003360:	08024010 	.word	0x08024010
 8003364:	08023d18 	.word	0x08023d18
 8003368:	08024024 	.word	0x08024024
 800336c:	08023ccc 	.word	0x08023ccc
 8003370:	08024040 	.word	0x08024040
 8003374:	0802404c 	.word	0x0802404c
 8003378:	0802405c 	.word	0x0802405c
 800337c:	08024068 	.word	0x08024068
 8003380:	0802407c 	.word	0x0802407c
 8003384:	08024088 	.word	0x08024088
 8003388:	08024098 	.word	0x08024098
 800338c:	080240ac 	.word	0x080240ac
 8003390:	080240b8 	.word	0x080240b8
 8003394:	08023f2c 	.word	0x08023f2c
		case 26 :
			strcpy(p->name,"PSYCHO MANTIS");
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800339e:	4aa7      	ldr	r2, [pc, #668]	; (800363c <problem_fetch+0x1cac>)
 80033a0:	461c      	mov	r4, r3
 80033a2:	4613      	mov	r3, r2
 80033a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033a6:	6020      	str	r0, [r4, #0]
 80033a8:	6061      	str	r1, [r4, #4]
 80033aa:	60a2      	str	r2, [r4, #8]
 80033ac:	881b      	ldrh	r3, [r3, #0]
 80033ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80033b6:	4aa2      	ldr	r2, [pc, #648]	; (8003640 <problem_fetch+0x1cb0>)
 80033b8:	6810      	ldr	r0, [r2, #0]
 80033ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2206      	movs	r2, #6
 80033c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,B,E,D");
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	33a4      	adds	r3, #164	; 0xa4
 80033c6:	4a9f      	ldr	r2, [pc, #636]	; (8003644 <problem_fetch+0x1cb4>)
 80033c8:	461c      	mov	r4, r3
 80033ca:	4613      	mov	r3, r2
 80033cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033ce:	6020      	str	r0, [r4, #0]
 80033d0:	6061      	str	r1, [r4, #4]
 80033d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,10,14,18");
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3304      	adds	r3, #4
 80033d8:	4a9b      	ldr	r2, [pc, #620]	; (8003648 <problem_fetch+0x1cb8>)
 80033da:	461c      	mov	r4, r3
 80033dc:	4615      	mov	r5, r2
 80033de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e0:	6020      	str	r0, [r4, #0]
 80033e2:	6061      	str	r1, [r4, #4]
 80033e4:	60a2      	str	r2, [r4, #8]
 80033e6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80033ee:	4a97      	ldr	r2, [pc, #604]	; (800364c <problem_fetch+0x1cbc>)
 80033f0:	461c      	mov	r4, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80033f6:	6020      	str	r0, [r4, #0]
 80033f8:	6061      	str	r1, [r4, #4]
 80033fa:	60a2      	str	r2, [r4, #8]
			break;
 80033fc:	f019 b9f8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 27 :
			strcpy(p->name,"STOUT LITE");
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003406:	4992      	ldr	r1, [pc, #584]	; (8003650 <problem_fetch+0x1cc0>)
 8003408:	461a      	mov	r2, r3
 800340a:	460b      	mov	r3, r1
 800340c:	cb03      	ldmia	r3!, {r0, r1}
 800340e:	6010      	str	r0, [r2, #0]
 8003410:	6051      	str	r1, [r2, #4]
 8003412:	8819      	ldrh	r1, [r3, #0]
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	8111      	strh	r1, [r2, #8]
 8003418:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003420:	4a87      	ldr	r2, [pc, #540]	; (8003640 <problem_fetch+0x1cb0>)
 8003422:	6810      	ldr	r0, [r2, #0]
 8003424:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,G,I");
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	33a4      	adds	r3, #164	; 0xa4
 8003430:	4a88      	ldr	r2, [pc, #544]	; (8003654 <problem_fetch+0x1cc4>)
 8003432:	461c      	mov	r4, r3
 8003434:	4613      	mov	r3, r2
 8003436:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003438:	6020      	str	r0, [r4, #0]
 800343a:	6061      	str	r1, [r4, #4]
 800343c:	60a2      	str	r2, [r4, #8]
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,11,14,15,18");
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	4a84      	ldr	r2, [pc, #528]	; (8003658 <problem_fetch+0x1cc8>)
 8003448:	461d      	mov	r5, r3
 800344a:	4614      	mov	r4, r2
 800344c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800344e:	6028      	str	r0, [r5, #0]
 8003450:	6069      	str	r1, [r5, #4]
 8003452:	60aa      	str	r2, [r5, #8]
 8003454:	60eb      	str	r3, [r5, #12]
 8003456:	8823      	ldrh	r3, [r4, #0]
 8003458:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003460:	4a7e      	ldr	r2, [pc, #504]	; (800365c <problem_fetch+0x1ccc>)
 8003462:	461c      	mov	r4, r3
 8003464:	4613      	mov	r3, r2
 8003466:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003468:	6020      	str	r0, [r4, #0]
 800346a:	6061      	str	r1, [r4, #4]
 800346c:	60a2      	str	r2, [r4, #8]
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	81a3      	strh	r3, [r4, #12]
			break;
 8003472:	f019 b9bd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 28 :
			strcpy(p->name,"BLACKROCK");
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800347c:	4978      	ldr	r1, [pc, #480]	; (8003660 <problem_fetch+0x1cd0>)
 800347e:	461a      	mov	r2, r3
 8003480:	460b      	mov	r3, r1
 8003482:	cb03      	ldmia	r3!, {r0, r1}
 8003484:	6010      	str	r0, [r2, #0]
 8003486:	6051      	str	r1, [r2, #4]
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003492:	4a6b      	ldr	r2, [pc, #428]	; (8003640 <problem_fetch+0x1cb0>)
 8003494:	6810      	ldr	r0, [r2, #0]
 8003496:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2207      	movs	r2, #7
 800349c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,B,D");
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	33a4      	adds	r3, #164	; 0xa4
 80034a2:	4a70      	ldr	r2, [pc, #448]	; (8003664 <problem_fetch+0x1cd4>)
 80034a4:	461c      	mov	r4, r3
 80034a6:	4613      	mov	r3, r2
 80034a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034aa:	6020      	str	r0, [r4, #0]
 80034ac:	6061      	str	r1, [r4, #4]
 80034ae:	60a2      	str	r2, [r4, #8]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,12,15,18");
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4a6b      	ldr	r2, [pc, #428]	; (8003668 <problem_fetch+0x1cd8>)
 80034ba:	461d      	mov	r5, r3
 80034bc:	4614      	mov	r4, r2
 80034be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034c0:	6028      	str	r0, [r5, #0]
 80034c2:	6069      	str	r1, [r5, #4]
 80034c4:	60aa      	str	r2, [r5, #8]
 80034c6:	60eb      	str	r3, [r5, #12]
 80034c8:	8823      	ldrh	r3, [r4, #0]
 80034ca:	78a2      	ldrb	r2, [r4, #2]
 80034cc:	822b      	strh	r3, [r5, #16]
 80034ce:	4613      	mov	r3, r2
 80034d0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80034d8:	4a60      	ldr	r2, [pc, #384]	; (800365c <problem_fetch+0x1ccc>)
 80034da:	461c      	mov	r4, r3
 80034dc:	4613      	mov	r3, r2
 80034de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034e0:	6020      	str	r0, [r4, #0]
 80034e2:	6061      	str	r1, [r4, #4]
 80034e4:	60a2      	str	r2, [r4, #8]
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	81a3      	strh	r3, [r4, #12]
			break;
 80034ea:	f019 b981 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 29 :
			strcpy(p->name,"BO4");
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <problem_fetch+0x1cdc>)
 80034f6:	6810      	ldr	r0, [r2, #0]
 80034f8:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003500:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <problem_fetch+0x1ce0>)
 8003502:	8811      	ldrh	r1, [r2, #0]
 8003504:	7892      	ldrb	r2, [r2, #2]
 8003506:	8019      	strh	r1, [r3, #0]
 8003508:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,H,G,I,H");
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	33a4      	adds	r3, #164	; 0xa4
 8003514:	4a57      	ldr	r2, [pc, #348]	; (8003674 <problem_fetch+0x1ce4>)
 8003516:	461c      	mov	r4, r3
 8003518:	4613      	mov	r3, r2
 800351a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800351c:	6020      	str	r0, [r4, #0]
 800351e:	6061      	str	r1, [r4, #4]
 8003520:	60a2      	str	r2, [r4, #8]
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,5,15,18,12");
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	4a53      	ldr	r2, [pc, #332]	; (8003678 <problem_fetch+0x1ce8>)
 800352c:	461d      	mov	r5, r3
 800352e:	4614      	mov	r4, r2
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	6028      	str	r0, [r5, #0]
 8003534:	6069      	str	r1, [r5, #4]
 8003536:	60aa      	str	r2, [r5, #8]
 8003538:	60eb      	str	r3, [r5, #12]
 800353a:	8823      	ldrh	r3, [r4, #0]
 800353c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,e,d");
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003544:	4a4d      	ldr	r2, [pc, #308]	; (800367c <problem_fetch+0x1cec>)
 8003546:	461c      	mov	r4, r3
 8003548:	4613      	mov	r3, r2
 800354a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800354c:	6020      	str	r0, [r4, #0]
 800354e:	6061      	str	r1, [r4, #4]
 8003550:	60a2      	str	r2, [r4, #8]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	81a3      	strh	r3, [r4, #12]
			break;
 8003556:	f019 b94b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 30 :
			strcpy(p->name,"UP MY SLEEVES");
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003560:	4a47      	ldr	r2, [pc, #284]	; (8003680 <problem_fetch+0x1cf0>)
 8003562:	461c      	mov	r4, r3
 8003564:	4613      	mov	r3, r2
 8003566:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003568:	6020      	str	r0, [r4, #0]
 800356a:	6061      	str	r1, [r4, #4]
 800356c:	60a2      	str	r2, [r4, #8]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C+");
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003578:	4a42      	ldr	r2, [pc, #264]	; (8003684 <problem_fetch+0x1cf4>)
 800357a:	6810      	ldr	r0, [r2, #0]
 800357c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2205      	movs	r2, #5
 8003582:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,J,E,A");
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	33a4      	adds	r3, #164	; 0xa4
 8003588:	493f      	ldr	r1, [pc, #252]	; (8003688 <problem_fetch+0x1cf8>)
 800358a:	461a      	mov	r2, r3
 800358c:	460b      	mov	r3, r1
 800358e:	cb03      	ldmia	r3!, {r0, r1}
 8003590:	6010      	str	r0, [r2, #0]
 8003592:	6051      	str	r1, [r2, #4]
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3304      	adds	r3, #4
 800359c:	4a3b      	ldr	r2, [pc, #236]	; (800368c <problem_fetch+0x1cfc>)
 800359e:	461c      	mov	r4, r3
 80035a0:	4613      	mov	r3, r2
 80035a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035a4:	6020      	str	r0, [r4, #0]
 80035a6:	6061      	str	r1, [r4, #4]
 80035a8:	60a2      	str	r2, [r4, #8]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80035b4:	4936      	ldr	r1, [pc, #216]	; (8003690 <problem_fetch+0x1d00>)
 80035b6:	461a      	mov	r2, r3
 80035b8:	460b      	mov	r3, r1
 80035ba:	cb03      	ldmia	r3!, {r0, r1}
 80035bc:	6010      	str	r0, [r2, #0]
 80035be:	6051      	str	r1, [r2, #4]
 80035c0:	881b      	ldrh	r3, [r3, #0]
 80035c2:	8113      	strh	r3, [r2, #8]
			break;
 80035c4:	f019 b914 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 31 :
			strcpy(p->name,"ULTRAVIOLENCE");
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80035ce:	4a31      	ldr	r2, [pc, #196]	; (8003694 <problem_fetch+0x1d04>)
 80035d0:	461c      	mov	r4, r3
 80035d2:	4613      	mov	r3, r2
 80035d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035d6:	6020      	str	r0, [r4, #0]
 80035d8:	6061      	str	r1, [r4, #4]
 80035da:	60a2      	str	r2, [r4, #8]
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80035e6:	4a16      	ldr	r2, [pc, #88]	; (8003640 <problem_fetch+0x1cb0>)
 80035e8:	6810      	ldr	r0, [r2, #0]
 80035ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2207      	movs	r2, #7
 80035f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,F,E,J,D");
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	33a4      	adds	r3, #164	; 0xa4
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <problem_fetch+0x1d08>)
 80035f8:	461c      	mov	r4, r3
 80035fa:	4613      	mov	r3, r2
 80035fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80035fe:	6020      	str	r0, [r4, #0]
 8003600:	6061      	str	r1, [r4, #4]
 8003602:	60a2      	str	r2, [r4, #8]
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4a23      	ldr	r2, [pc, #140]	; (800369c <problem_fetch+0x1d0c>)
 800360e:	461d      	mov	r5, r3
 8003610:	4614      	mov	r4, r2
 8003612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003614:	6028      	str	r0, [r5, #0]
 8003616:	6069      	str	r1, [r5, #4]
 8003618:	60aa      	str	r2, [r5, #8]
 800361a:	60eb      	str	r3, [r5, #12]
 800361c:	8823      	ldrh	r3, [r4, #0]
 800361e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <problem_fetch+0x1d10>)
 8003628:	461c      	mov	r4, r3
 800362a:	4613      	mov	r3, r2
 800362c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800362e:	6020      	str	r0, [r4, #0]
 8003630:	6061      	str	r1, [r4, #4]
 8003632:	60a2      	str	r2, [r4, #8]
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	81a3      	strh	r3, [r4, #12]
			break;
 8003638:	f019 b8da 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800363c:	080240c8 	.word	0x080240c8
 8003640:	08023c28 	.word	0x08023c28
 8003644:	080240d8 	.word	0x080240d8
 8003648:	080240e4 	.word	0x080240e4
 800364c:	08023f2c 	.word	0x08023f2c
 8003650:	080240f4 	.word	0x080240f4
 8003654:	08024100 	.word	0x08024100
 8003658:	08024110 	.word	0x08024110
 800365c:	08023d18 	.word	0x08023d18
 8003660:	08024124 	.word	0x08024124
 8003664:	08024130 	.word	0x08024130
 8003668:	08024140 	.word	0x08024140
 800366c:	08024154 	.word	0x08024154
 8003670:	08023b50 	.word	0x08023b50
 8003674:	08024158 	.word	0x08024158
 8003678:	08024168 	.word	0x08024168
 800367c:	0802417c 	.word	0x0802417c
 8003680:	0802418c 	.word	0x0802418c
 8003684:	0802419c 	.word	0x0802419c
 8003688:	080241a0 	.word	0x080241a0
 800368c:	080241ac 	.word	0x080241ac
 8003690:	0802405c 	.word	0x0802405c
 8003694:	080241bc 	.word	0x080241bc
 8003698:	080241cc 	.word	0x080241cc
 800369c:	080241dc 	.word	0x080241dc
 80036a0:	08023c08 	.word	0x08023c08
		case 32 :
			strcpy(p->name,"DJWUDHDJWJCJDJE");
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80036aa:	4ab0      	ldr	r2, [pc, #704]	; (800396c <problem_fetch+0x1fdc>)
 80036ac:	461c      	mov	r4, r3
 80036ae:	4615      	mov	r5, r2
 80036b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b2:	6020      	str	r0, [r4, #0]
 80036b4:	6061      	str	r1, [r4, #4]
 80036b6:	60a2      	str	r2, [r4, #8]
 80036b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80036c0:	4aab      	ldr	r2, [pc, #684]	; (8003970 <problem_fetch+0x1fe0>)
 80036c2:	6810      	ldr	r0, [r2, #0]
 80036c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	220a      	movs	r2, #10
 80036ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,E,D,B,A,D");
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	33a4      	adds	r3, #164	; 0xa4
 80036d0:	4aa8      	ldr	r2, [pc, #672]	; (8003974 <problem_fetch+0x1fe4>)
 80036d2:	461d      	mov	r5, r3
 80036d4:	4614      	mov	r4, r2
 80036d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d8:	6028      	str	r0, [r5, #0]
 80036da:	6069      	str	r1, [r5, #4]
 80036dc:	60aa      	str	r2, [r5, #8]
 80036de:	60eb      	str	r3, [r5, #12]
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,13,12,15,15,18,18");
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4aa3      	ldr	r2, [pc, #652]	; (8003978 <problem_fetch+0x1fe8>)
 80036ea:	461d      	mov	r5, r3
 80036ec:	4614      	mov	r4, r2
 80036ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f0:	6028      	str	r0, [r5, #0]
 80036f2:	6069      	str	r1, [r5, #4]
 80036f4:	60aa      	str	r2, [r5, #8]
 80036f6:	60eb      	str	r3, [r5, #12]
 80036f8:	cc03      	ldmia	r4!, {r0, r1}
 80036fa:	6128      	str	r0, [r5, #16]
 80036fc:	6169      	str	r1, [r5, #20]
 80036fe:	8823      	ldrh	r3, [r4, #0]
 8003700:	78a2      	ldrb	r2, [r4, #2]
 8003702:	832b      	strh	r3, [r5, #24]
 8003704:	4613      	mov	r3, r2
 8003706:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e,e");
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800370e:	4a9b      	ldr	r2, [pc, #620]	; (800397c <problem_fetch+0x1fec>)
 8003710:	461d      	mov	r5, r3
 8003712:	4614      	mov	r4, r2
 8003714:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003716:	6028      	str	r0, [r5, #0]
 8003718:	6069      	str	r1, [r5, #4]
 800371a:	60aa      	str	r2, [r5, #8]
 800371c:	60eb      	str	r3, [r5, #12]
 800371e:	6820      	ldr	r0, [r4, #0]
 8003720:	6128      	str	r0, [r5, #16]
			break;
 8003722:	f019 b865 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 33 :
			strcpy(p->name,"I ❤️ ELLIA");
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800372c:	4a94      	ldr	r2, [pc, #592]	; (8003980 <problem_fetch+0x1ff0>)
 800372e:	461c      	mov	r4, r3
 8003730:	4613      	mov	r3, r2
 8003732:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003734:	6020      	str	r0, [r4, #0]
 8003736:	6061      	str	r1, [r4, #4]
 8003738:	60a2      	str	r2, [r4, #8]
 800373a:	881a      	ldrh	r2, [r3, #0]
 800373c:	789b      	ldrb	r3, [r3, #2]
 800373e:	81a2      	strh	r2, [r4, #12]
 8003740:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003748:	4a8e      	ldr	r2, [pc, #568]	; (8003984 <problem_fetch+0x1ff4>)
 800374a:	6810      	ldr	r0, [r2, #0]
 800374c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2205      	movs	r2, #5
 8003752:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,D");
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	33a4      	adds	r3, #164	; 0xa4
 8003758:	498b      	ldr	r1, [pc, #556]	; (8003988 <problem_fetch+0x1ff8>)
 800375a:	461a      	mov	r2, r3
 800375c:	460b      	mov	r3, r1
 800375e:	cb03      	ldmia	r3!, {r0, r1}
 8003760:	6010      	str	r0, [r2, #0]
 8003762:	6051      	str	r1, [r2, #4]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,13,18");
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3304      	adds	r3, #4
 800376c:	4a87      	ldr	r2, [pc, #540]	; (800398c <problem_fetch+0x1ffc>)
 800376e:	461c      	mov	r4, r3
 8003770:	4613      	mov	r3, r2
 8003772:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003774:	6020      	str	r0, [r4, #0]
 8003776:	6061      	str	r1, [r4, #4]
 8003778:	60a2      	str	r2, [r4, #8]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003784:	4982      	ldr	r1, [pc, #520]	; (8003990 <problem_fetch+0x2000>)
 8003786:	461a      	mov	r2, r3
 8003788:	460b      	mov	r3, r1
 800378a:	cb03      	ldmia	r3!, {r0, r1}
 800378c:	6010      	str	r0, [r2, #0]
 800378e:	6051      	str	r1, [r2, #4]
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	8113      	strh	r3, [r2, #8]
			break;
 8003794:	f019 b82c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 34 :
			strcpy(p->name,"LIZZY BLACK");
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800379e:	4a7d      	ldr	r2, [pc, #500]	; (8003994 <problem_fetch+0x2004>)
 80037a0:	461c      	mov	r4, r3
 80037a2:	4613      	mov	r3, r2
 80037a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80037a6:	6020      	str	r0, [r4, #0]
 80037a8:	6061      	str	r1, [r4, #4]
 80037aa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037b2:	4a79      	ldr	r2, [pc, #484]	; (8003998 <problem_fetch+0x2008>)
 80037b4:	8811      	ldrh	r1, [r2, #0]
 80037b6:	7892      	ldrb	r2, [r2, #2]
 80037b8:	8019      	strh	r1, [r3, #0]
 80037ba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2206      	movs	r2, #6
 80037c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,E,D,I");
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	33a4      	adds	r3, #164	; 0xa4
 80037c6:	4a75      	ldr	r2, [pc, #468]	; (800399c <problem_fetch+0x200c>)
 80037c8:	461c      	mov	r4, r3
 80037ca:	4613      	mov	r3, r2
 80037cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80037ce:	6020      	str	r0, [r4, #0]
 80037d0:	6061      	str	r1, [r4, #4]
 80037d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,12,15,18");
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3304      	adds	r3, #4
 80037d8:	4a71      	ldr	r2, [pc, #452]	; (80039a0 <problem_fetch+0x2010>)
 80037da:	461d      	mov	r5, r3
 80037dc:	4614      	mov	r4, r2
 80037de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e0:	6028      	str	r0, [r5, #0]
 80037e2:	6069      	str	r1, [r5, #4]
 80037e4:	60aa      	str	r2, [r5, #8]
 80037e6:	60eb      	str	r3, [r5, #12]
 80037e8:	7823      	ldrb	r3, [r4, #0]
 80037ea:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80037f2:	4a6c      	ldr	r2, [pc, #432]	; (80039a4 <problem_fetch+0x2014>)
 80037f4:	461c      	mov	r4, r3
 80037f6:	4613      	mov	r3, r2
 80037f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80037fa:	6020      	str	r0, [r4, #0]
 80037fc:	6061      	str	r1, [r4, #4]
 80037fe:	60a2      	str	r2, [r4, #8]
			break;
 8003800:	f018 bff6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 35 :
			strcpy(p->name,"NOT FOR HOONY");
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800380a:	4a67      	ldr	r2, [pc, #412]	; (80039a8 <problem_fetch+0x2018>)
 800380c:	461c      	mov	r4, r3
 800380e:	4613      	mov	r3, r2
 8003810:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003812:	6020      	str	r0, [r4, #0]
 8003814:	6061      	str	r1, [r4, #4]
 8003816:	60a2      	str	r2, [r4, #8]
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003822:	4a58      	ldr	r2, [pc, #352]	; (8003984 <problem_fetch+0x1ff4>)
 8003824:	6810      	ldr	r0, [r2, #0]
 8003826:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2208      	movs	r2, #8
 800382c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,G,A,I,H");
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	33a4      	adds	r3, #164	; 0xa4
 8003832:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <problem_fetch+0x201c>)
 8003834:	461c      	mov	r4, r3
 8003836:	4615      	mov	r5, r2
 8003838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800383a:	6020      	str	r0, [r4, #0]
 800383c:	6061      	str	r1, [r4, #4]
 800383e:	60a2      	str	r2, [r4, #8]
 8003840:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,13,17,9,18,16");
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3304      	adds	r3, #4
 8003846:	4a5a      	ldr	r2, [pc, #360]	; (80039b0 <problem_fetch+0x2020>)
 8003848:	461d      	mov	r5, r3
 800384a:	4614      	mov	r4, r2
 800384c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384e:	6028      	str	r0, [r5, #0]
 8003850:	6069      	str	r1, [r5, #4]
 8003852:	60aa      	str	r2, [r5, #8]
 8003854:	60eb      	str	r3, [r5, #12]
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003860:	4a54      	ldr	r2, [pc, #336]	; (80039b4 <problem_fetch+0x2024>)
 8003862:	461c      	mov	r4, r3
 8003864:	4615      	mov	r5, r2
 8003866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003868:	6020      	str	r0, [r4, #0]
 800386a:	6061      	str	r1, [r4, #4]
 800386c:	60a2      	str	r2, [r4, #8]
 800386e:	60e3      	str	r3, [r4, #12]
			break;
 8003870:	f018 bfbe 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 36 :
			strcpy(p->name,"L’HEURE SOMBRE");
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800387a:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <problem_fetch+0x2028>)
 800387c:	461d      	mov	r5, r3
 800387e:	4614      	mov	r4, r2
 8003880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003882:	6028      	str	r0, [r5, #0]
 8003884:	6069      	str	r1, [r5, #4]
 8003886:	60aa      	str	r2, [r5, #8]
 8003888:	60eb      	str	r3, [r5, #12]
 800388a:	7823      	ldrb	r3, [r4, #0]
 800388c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003894:	4a49      	ldr	r2, [pc, #292]	; (80039bc <problem_fetch+0x202c>)
 8003896:	6810      	ldr	r0, [r2, #0]
 8003898:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2209      	movs	r2, #9
 800389e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,D,E,B,C,A,B");
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	33a4      	adds	r3, #164	; 0xa4
 80038a4:	4a46      	ldr	r2, [pc, #280]	; (80039c0 <problem_fetch+0x2030>)
 80038a6:	461d      	mov	r5, r3
 80038a8:	4614      	mov	r4, r2
 80038aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038ac:	6028      	str	r0, [r5, #0]
 80038ae:	6069      	str	r1, [r5, #4]
 80038b0:	60aa      	str	r2, [r5, #8]
 80038b2:	60eb      	str	r3, [r5, #12]
 80038b4:	8823      	ldrh	r3, [r4, #0]
 80038b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,14,12,16,18,6");
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <problem_fetch+0x2034>)
 80038be:	461c      	mov	r4, r3
 80038c0:	4615      	mov	r5, r2
 80038c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038c4:	6020      	str	r0, [r4, #0]
 80038c6:	6061      	str	r1, [r4, #4]
 80038c8:	60a2      	str	r2, [r4, #8]
 80038ca:	60e3      	str	r3, [r4, #12]
 80038cc:	6828      	ldr	r0, [r5, #0]
 80038ce:	6120      	str	r0, [r4, #16]
 80038d0:	88ab      	ldrh	r3, [r5, #4]
 80038d2:	79aa      	ldrb	r2, [r5, #6]
 80038d4:	82a3      	strh	r3, [r4, #20]
 80038d6:	4613      	mov	r3, r2
 80038d8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80038e0:	4a39      	ldr	r2, [pc, #228]	; (80039c8 <problem_fetch+0x2038>)
 80038e2:	461d      	mov	r5, r3
 80038e4:	4614      	mov	r4, r2
 80038e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038e8:	6028      	str	r0, [r5, #0]
 80038ea:	6069      	str	r1, [r5, #4]
 80038ec:	60aa      	str	r2, [r5, #8]
 80038ee:	60eb      	str	r3, [r5, #12]
 80038f0:	8823      	ldrh	r3, [r4, #0]
 80038f2:	822b      	strh	r3, [r5, #16]
			break;
 80038f4:	f018 bf7c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 37 :
			strcpy(p->name,"MOMMSEN'S#2");
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80038fe:	4a33      	ldr	r2, [pc, #204]	; (80039cc <problem_fetch+0x203c>)
 8003900:	461c      	mov	r4, r3
 8003902:	4613      	mov	r3, r2
 8003904:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003906:	6020      	str	r0, [r4, #0]
 8003908:	6061      	str	r1, [r4, #4]
 800390a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <problem_fetch+0x2040>)
 8003914:	8811      	ldrh	r1, [r2, #0]
 8003916:	7892      	ldrb	r2, [r2, #2]
 8003918:	8019      	strh	r1, [r3, #0]
 800391a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2207      	movs	r2, #7
 8003920:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,I,G,I");
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	33a4      	adds	r3, #164	; 0xa4
 8003926:	4a2b      	ldr	r2, [pc, #172]	; (80039d4 <problem_fetch+0x2044>)
 8003928:	461c      	mov	r4, r3
 800392a:	4613      	mov	r3, r2
 800392c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800392e:	6020      	str	r0, [r4, #0]
 8003930:	6061      	str	r1, [r4, #4]
 8003932:	60a2      	str	r2, [r4, #8]
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3304      	adds	r3, #4
 800393c:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <problem_fetch+0x2048>)
 800393e:	461d      	mov	r5, r3
 8003940:	4614      	mov	r4, r2
 8003942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003944:	6028      	str	r0, [r5, #0]
 8003946:	6069      	str	r1, [r5, #4]
 8003948:	60aa      	str	r2, [r5, #8]
 800394a:	60eb      	str	r3, [r5, #12]
 800394c:	8823      	ldrh	r3, [r4, #0]
 800394e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003956:	4a21      	ldr	r2, [pc, #132]	; (80039dc <problem_fetch+0x204c>)
 8003958:	461c      	mov	r4, r3
 800395a:	4613      	mov	r3, r2
 800395c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800395e:	6020      	str	r0, [r4, #0]
 8003960:	6061      	str	r1, [r4, #4]
 8003962:	60a2      	str	r2, [r4, #8]
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	81a3      	strh	r3, [r4, #12]
			break;
 8003968:	f018 bf42 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800396c:	080241f0 	.word	0x080241f0
 8003970:	08023b90 	.word	0x08023b90
 8003974:	08024200 	.word	0x08024200
 8003978:	08024214 	.word	0x08024214
 800397c:	08024230 	.word	0x08024230
 8003980:	08024244 	.word	0x08024244
 8003984:	08023d30 	.word	0x08023d30
 8003988:	08024254 	.word	0x08024254
 800398c:	08024260 	.word	0x08024260
 8003990:	08024270 	.word	0x08024270
 8003994:	0802427c 	.word	0x0802427c
 8003998:	08024288 	.word	0x08024288
 800399c:	0802428c 	.word	0x0802428c
 80039a0:	08024298 	.word	0x08024298
 80039a4:	08023f2c 	.word	0x08023f2c
 80039a8:	080242ac 	.word	0x080242ac
 80039ac:	080242bc 	.word	0x080242bc
 80039b0:	080242cc 	.word	0x080242cc
 80039b4:	080242e0 	.word	0x080242e0
 80039b8:	080242f0 	.word	0x080242f0
 80039bc:	08023ccc 	.word	0x08023ccc
 80039c0:	08024304 	.word	0x08024304
 80039c4:	08024318 	.word	0x08024318
 80039c8:	08024330 	.word	0x08024330
 80039cc:	08024344 	.word	0x08024344
 80039d0:	08023c5c 	.word	0x08023c5c
 80039d4:	08024350 	.word	0x08024350
 80039d8:	08024360 	.word	0x08024360
 80039dc:	08023d18 	.word	0x08023d18
		case 38 :
			strcpy(p->name,"GGGGGGH");
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80039e6:	49af      	ldr	r1, [pc, #700]	; (8003ca4 <problem_fetch+0x2314>)
 80039e8:	461a      	mov	r2, r3
 80039ea:	460b      	mov	r3, r1
 80039ec:	cb03      	ldmia	r3!, {r0, r1}
 80039ee:	6010      	str	r0, [r2, #0]
 80039f0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80039f8:	4aab      	ldr	r2, [pc, #684]	; (8003ca8 <problem_fetch+0x2318>)
 80039fa:	6810      	ldr	r0, [r2, #0]
 80039fc:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2209      	movs	r2, #9
 8003a02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,K,H,J,I,J,K");
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	33a4      	adds	r3, #164	; 0xa4
 8003a08:	4aa8      	ldr	r2, [pc, #672]	; (8003cac <problem_fetch+0x231c>)
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	4614      	mov	r4, r2
 8003a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a10:	6028      	str	r0, [r5, #0]
 8003a12:	6069      	str	r1, [r5, #4]
 8003a14:	60aa      	str	r2, [r5, #8]
 8003a16:	60eb      	str	r3, [r5, #12]
 8003a18:	8823      	ldrh	r3, [r4, #0]
 8003a1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,9,10,13,18,16,16");
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4aa3      	ldr	r2, [pc, #652]	; (8003cb0 <problem_fetch+0x2320>)
 8003a22:	461c      	mov	r4, r3
 8003a24:	4615      	mov	r5, r2
 8003a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a28:	6020      	str	r0, [r4, #0]
 8003a2a:	6061      	str	r1, [r4, #4]
 8003a2c:	60a2      	str	r2, [r4, #8]
 8003a2e:	60e3      	str	r3, [r4, #12]
 8003a30:	6828      	ldr	r0, [r5, #0]
 8003a32:	6120      	str	r0, [r4, #16]
 8003a34:	88ab      	ldrh	r3, [r5, #4]
 8003a36:	79aa      	ldrb	r2, [r5, #6]
 8003a38:	82a3      	strh	r3, [r4, #20]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d,d");
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003a44:	4a9b      	ldr	r2, [pc, #620]	; (8003cb4 <problem_fetch+0x2324>)
 8003a46:	461d      	mov	r5, r3
 8003a48:	4614      	mov	r4, r2
 8003a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a4c:	6028      	str	r0, [r5, #0]
 8003a4e:	6069      	str	r1, [r5, #4]
 8003a50:	60aa      	str	r2, [r5, #8]
 8003a52:	60eb      	str	r3, [r5, #12]
 8003a54:	8823      	ldrh	r3, [r4, #0]
 8003a56:	822b      	strh	r3, [r5, #16]
			break;
 8003a58:	f018 beca 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 39 :
			strcpy(p->name,"19-1.2");
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a62:	4a95      	ldr	r2, [pc, #596]	; (8003cb8 <problem_fetch+0x2328>)
 8003a64:	6810      	ldr	r0, [r2, #0]
 8003a66:	6018      	str	r0, [r3, #0]
 8003a68:	8891      	ldrh	r1, [r2, #4]
 8003a6a:	7992      	ldrb	r2, [r2, #6]
 8003a6c:	8099      	strh	r1, [r3, #4]
 8003a6e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a76:	4a91      	ldr	r2, [pc, #580]	; (8003cbc <problem_fetch+0x232c>)
 8003a78:	8811      	ldrh	r1, [r2, #0]
 8003a7a:	7892      	ldrb	r2, [r2, #2]
 8003a7c:	8019      	strh	r1, [r3, #0]
 8003a7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2208      	movs	r2, #8
 8003a84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,B,C,G,I,J");
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	33a4      	adds	r3, #164	; 0xa4
 8003a8a:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <problem_fetch+0x2330>)
 8003a8c:	461c      	mov	r4, r3
 8003a8e:	4615      	mov	r5, r2
 8003a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a92:	6020      	str	r0, [r4, #0]
 8003a94:	6061      	str	r1, [r4, #4]
 8003a96:	60a2      	str	r2, [r4, #8]
 8003a98:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,7,10,13,14,18,16");
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4a89      	ldr	r2, [pc, #548]	; (8003cc4 <problem_fetch+0x2334>)
 8003aa0:	461d      	mov	r5, r3
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa6:	6028      	str	r0, [r5, #0]
 8003aa8:	6069      	str	r1, [r5, #4]
 8003aaa:	60aa      	str	r2, [r5, #8]
 8003aac:	60eb      	str	r3, [r5, #12]
 8003aae:	6820      	ldr	r0, [r4, #0]
 8003ab0:	6128      	str	r0, [r5, #16]
 8003ab2:	7923      	ldrb	r3, [r4, #4]
 8003ab4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003abc:	4a82      	ldr	r2, [pc, #520]	; (8003cc8 <problem_fetch+0x2338>)
 8003abe:	461c      	mov	r4, r3
 8003ac0:	4615      	mov	r5, r2
 8003ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ac4:	6020      	str	r0, [r4, #0]
 8003ac6:	6061      	str	r1, [r4, #4]
 8003ac8:	60a2      	str	r2, [r4, #8]
 8003aca:	60e3      	str	r3, [r4, #12]
			break;
 8003acc:	f018 be90 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 40 :
			strcpy(p->name,"BASTION");
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ad6:	497d      	ldr	r1, [pc, #500]	; (8003ccc <problem_fetch+0x233c>)
 8003ad8:	461a      	mov	r2, r3
 8003ada:	460b      	mov	r3, r1
 8003adc:	cb03      	ldmia	r3!, {r0, r1}
 8003ade:	6010      	str	r0, [r2, #0]
 8003ae0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ae8:	4a79      	ldr	r2, [pc, #484]	; (8003cd0 <problem_fetch+0x2340>)
 8003aea:	8811      	ldrh	r1, [r2, #0]
 8003aec:	7892      	ldrb	r2, [r2, #2]
 8003aee:	8019      	strh	r1, [r3, #0]
 8003af0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	220a      	movs	r2, #10
 8003af6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,F,B,E,B,G,E,I");
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	33a4      	adds	r3, #164	; 0xa4
 8003afc:	4a75      	ldr	r2, [pc, #468]	; (8003cd4 <problem_fetch+0x2344>)
 8003afe:	461d      	mov	r5, r3
 8003b00:	4614      	mov	r4, r2
 8003b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b04:	6028      	str	r0, [r5, #0]
 8003b06:	6069      	str	r1, [r5, #4]
 8003b08:	60aa      	str	r2, [r5, #8]
 8003b0a:	60eb      	str	r3, [r5, #12]
 8003b0c:	6820      	ldr	r0, [r4, #0]
 8003b0e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,12,12,15,17,16,18");
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4a70      	ldr	r2, [pc, #448]	; (8003cd8 <problem_fetch+0x2348>)
 8003b16:	461d      	mov	r5, r3
 8003b18:	4614      	mov	r4, r2
 8003b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1c:	6028      	str	r0, [r5, #0]
 8003b1e:	6069      	str	r1, [r5, #4]
 8003b20:	60aa      	str	r2, [r5, #8]
 8003b22:	60eb      	str	r3, [r5, #12]
 8003b24:	cc03      	ldmia	r4!, {r0, r1}
 8003b26:	6128      	str	r0, [r5, #16]
 8003b28:	6169      	str	r1, [r5, #20]
 8003b2a:	8823      	ldrh	r3, [r4, #0]
 8003b2c:	78a2      	ldrb	r2, [r4, #2]
 8003b2e:	832b      	strh	r3, [r5, #24]
 8003b30:	4613      	mov	r3, r2
 8003b32:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003b3a:	4a68      	ldr	r2, [pc, #416]	; (8003cdc <problem_fetch+0x234c>)
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	4614      	mov	r4, r2
 8003b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b42:	6028      	str	r0, [r5, #0]
 8003b44:	6069      	str	r1, [r5, #4]
 8003b46:	60aa      	str	r2, [r5, #8]
 8003b48:	60eb      	str	r3, [r5, #12]
 8003b4a:	6820      	ldr	r0, [r4, #0]
 8003b4c:	6128      	str	r0, [r5, #16]
			break;
 8003b4e:	f018 be4f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 41 :
			strcpy(p->name,"GOBRIGHT SPECIAL");
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b58:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <problem_fetch+0x2350>)
 8003b5a:	461d      	mov	r5, r3
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b60:	6028      	str	r0, [r5, #0]
 8003b62:	6069      	str	r1, [r5, #4]
 8003b64:	60aa      	str	r2, [r5, #8]
 8003b66:	60eb      	str	r3, [r5, #12]
 8003b68:	7823      	ldrb	r3, [r4, #0]
 8003b6a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b72:	4a5c      	ldr	r2, [pc, #368]	; (8003ce4 <problem_fetch+0x2354>)
 8003b74:	8811      	ldrh	r1, [r2, #0]
 8003b76:	7892      	ldrb	r2, [r2, #2]
 8003b78:	8019      	strh	r1, [r3, #0]
 8003b7a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2205      	movs	r2, #5
 8003b80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,H,H,C,D");
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	33a4      	adds	r3, #164	; 0xa4
 8003b86:	4958      	ldr	r1, [pc, #352]	; (8003ce8 <problem_fetch+0x2358>)
 8003b88:	461a      	mov	r2, r3
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	cb03      	ldmia	r3!, {r0, r1}
 8003b8e:	6010      	str	r0, [r2, #0]
 8003b90:	6051      	str	r1, [r2, #4]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4a54      	ldr	r2, [pc, #336]	; (8003cec <problem_fetch+0x235c>)
 8003b9c:	461c      	mov	r4, r3
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003ba2:	6020      	str	r0, [r4, #0]
 8003ba4:	6061      	str	r1, [r4, #4]
 8003ba6:	60a2      	str	r2, [r4, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003bb2:	494f      	ldr	r1, [pc, #316]	; (8003cf0 <problem_fetch+0x2360>)
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	cb03      	ldmia	r3!, {r0, r1}
 8003bba:	6010      	str	r0, [r2, #0]
 8003bbc:	6051      	str	r1, [r2, #4]
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	8113      	strh	r3, [r2, #8]
			break;
 8003bc2:	f018 be15 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 42 :
			strcpy(p->name,"BLACK CAT");
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003bcc:	4949      	ldr	r1, [pc, #292]	; (8003cf4 <problem_fetch+0x2364>)
 8003bce:	461a      	mov	r2, r3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	cb03      	ldmia	r3!, {r0, r1}
 8003bd4:	6010      	str	r0, [r2, #0]
 8003bd6:	6051      	str	r1, [r2, #4]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003be2:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <problem_fetch+0x2368>)
 8003be4:	6810      	ldr	r0, [r2, #0]
 8003be6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2207      	movs	r2, #7
 8003bec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,J,I");
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	33a4      	adds	r3, #164	; 0xa4
 8003bf2:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <problem_fetch+0x236c>)
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003bfa:	6020      	str	r0, [r4, #0]
 8003bfc:	6061      	str	r1, [r4, #4]
 8003bfe:	60a2      	str	r2, [r4, #8]
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,16,18");
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <problem_fetch+0x2370>)
 8003c0a:	461d      	mov	r5, r3
 8003c0c:	4614      	mov	r4, r2
 8003c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c10:	6028      	str	r0, [r5, #0]
 8003c12:	6069      	str	r1, [r5, #4]
 8003c14:	60aa      	str	r2, [r5, #8]
 8003c16:	60eb      	str	r3, [r5, #12]
 8003c18:	8823      	ldrh	r3, [r4, #0]
 8003c1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003c22:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <problem_fetch+0x2374>)
 8003c24:	461c      	mov	r4, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c2a:	6020      	str	r0, [r4, #0]
 8003c2c:	6061      	str	r1, [r4, #4]
 8003c2e:	60a2      	str	r2, [r4, #8]
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	81a3      	strh	r3, [r4, #12]
			break;
 8003c34:	f018 bddc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 43 :
			strcpy(p->name,"WING SPANDEX");
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003c3e:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <problem_fetch+0x2378>)
 8003c40:	461c      	mov	r4, r3
 8003c42:	4613      	mov	r3, r2
 8003c44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c46:	6020      	str	r0, [r4, #0]
 8003c48:	6061      	str	r1, [r4, #4]
 8003c4a:	60a2      	str	r2, [r4, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c56:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <problem_fetch+0x237c>)
 8003c58:	8811      	ldrh	r1, [r2, #0]
 8003c5a:	7892      	ldrb	r2, [r2, #2]
 8003c5c:	8019      	strh	r1, [r3, #0]
 8003c5e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2206      	movs	r2, #6
 8003c64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,C,G,A");
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	33a4      	adds	r3, #164	; 0xa4
 8003c6a:	4a29      	ldr	r2, [pc, #164]	; (8003d10 <problem_fetch+0x2380>)
 8003c6c:	461c      	mov	r4, r3
 8003c6e:	4613      	mov	r3, r2
 8003c70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c72:	6020      	str	r0, [r4, #0]
 8003c74:	6061      	str	r1, [r4, #4]
 8003c76:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,13,17,18");
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4a25      	ldr	r2, [pc, #148]	; (8003d14 <problem_fetch+0x2384>)
 8003c7e:	461c      	mov	r4, r3
 8003c80:	4615      	mov	r5, r2
 8003c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c84:	6020      	str	r0, [r4, #0]
 8003c86:	6061      	str	r1, [r4, #4]
 8003c88:	60a2      	str	r2, [r4, #8]
 8003c8a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <problem_fetch+0x2388>)
 8003c94:	461c      	mov	r4, r3
 8003c96:	4613      	mov	r3, r2
 8003c98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c9a:	6020      	str	r0, [r4, #0]
 8003c9c:	6061      	str	r1, [r4, #4]
 8003c9e:	60a2      	str	r2, [r4, #8]
			break;
 8003ca0:	f018 bda6 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8003ca4:	08024374 	.word	0x08024374
 8003ca8:	08023b90 	.word	0x08023b90
 8003cac:	0802437c 	.word	0x0802437c
 8003cb0:	08024390 	.word	0x08024390
 8003cb4:	080243a8 	.word	0x080243a8
 8003cb8:	080243bc 	.word	0x080243bc
 8003cbc:	080243c4 	.word	0x080243c4
 8003cc0:	080243c8 	.word	0x080243c8
 8003cc4:	080243d8 	.word	0x080243d8
 8003cc8:	080243f0 	.word	0x080243f0
 8003ccc:	08024400 	.word	0x08024400
 8003cd0:	08023c5c 	.word	0x08023c5c
 8003cd4:	08024408 	.word	0x08024408
 8003cd8:	0802441c 	.word	0x0802441c
 8003cdc:	08024438 	.word	0x08024438
 8003ce0:	0802444c 	.word	0x0802444c
 8003ce4:	08023b50 	.word	0x08023b50
 8003ce8:	08024460 	.word	0x08024460
 8003cec:	0802446c 	.word	0x0802446c
 8003cf0:	08024270 	.word	0x08024270
 8003cf4:	0802447c 	.word	0x0802447c
 8003cf8:	08023ccc 	.word	0x08023ccc
 8003cfc:	08024488 	.word	0x08024488
 8003d00:	08024498 	.word	0x08024498
 8003d04:	08023d18 	.word	0x08023d18
 8003d08:	080244ac 	.word	0x080244ac
 8003d0c:	08024288 	.word	0x08024288
 8003d10:	080244bc 	.word	0x080244bc
 8003d14:	080244c8 	.word	0x080244c8
 8003d18:	08023f2c 	.word	0x08023f2c
		case 44 :
			strcpy(p->name,"CAVATELLI");
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d22:	49b2      	ldr	r1, [pc, #712]	; (8003fec <problem_fetch+0x265c>)
 8003d24:	461a      	mov	r2, r3
 8003d26:	460b      	mov	r3, r1
 8003d28:	cb03      	ldmia	r3!, {r0, r1}
 8003d2a:	6010      	str	r0, [r2, #0]
 8003d2c:	6051      	str	r1, [r2, #4]
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003d38:	4aad      	ldr	r2, [pc, #692]	; (8003ff0 <problem_fetch+0x2660>)
 8003d3a:	6810      	ldr	r0, [r2, #0]
 8003d3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2205      	movs	r2, #5
 8003d42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,J,D");
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	33a4      	adds	r3, #164	; 0xa4
 8003d48:	49aa      	ldr	r1, [pc, #680]	; (8003ff4 <problem_fetch+0x2664>)
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	cb03      	ldmia	r3!, {r0, r1}
 8003d50:	6010      	str	r0, [r2, #0]
 8003d52:	6051      	str	r1, [r2, #4]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,16,18");
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4aa6      	ldr	r2, [pc, #664]	; (8003ff8 <problem_fetch+0x2668>)
 8003d5e:	461c      	mov	r4, r3
 8003d60:	4613      	mov	r3, r2
 8003d62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d64:	6020      	str	r0, [r4, #0]
 8003d66:	6061      	str	r1, [r4, #4]
 8003d68:	60a2      	str	r2, [r4, #8]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003d74:	49a1      	ldr	r1, [pc, #644]	; (8003ffc <problem_fetch+0x266c>)
 8003d76:	461a      	mov	r2, r3
 8003d78:	460b      	mov	r3, r1
 8003d7a:	cb03      	ldmia	r3!, {r0, r1}
 8003d7c:	6010      	str	r0, [r2, #0]
 8003d7e:	6051      	str	r1, [r2, #4]
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	8113      	strh	r3, [r2, #8]
			break;
 8003d84:	f018 bd34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 45 :
			strcpy(p->name,"THE BIRTH OF TRAGEDY");
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003d8e:	4a9c      	ldr	r2, [pc, #624]	; (8004000 <problem_fetch+0x2670>)
 8003d90:	461d      	mov	r5, r3
 8003d92:	4614      	mov	r4, r2
 8003d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d96:	6028      	str	r0, [r5, #0]
 8003d98:	6069      	str	r1, [r5, #4]
 8003d9a:	60aa      	str	r2, [r5, #8]
 8003d9c:	60eb      	str	r3, [r5, #12]
 8003d9e:	6820      	ldr	r0, [r4, #0]
 8003da0:	6128      	str	r0, [r5, #16]
 8003da2:	7923      	ldrb	r3, [r4, #4]
 8003da4:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003dac:	4a95      	ldr	r2, [pc, #596]	; (8004004 <problem_fetch+0x2674>)
 8003dae:	8811      	ldrh	r1, [r2, #0]
 8003db0:	7892      	ldrb	r2, [r2, #2]
 8003db2:	8019      	strh	r1, [r3, #0]
 8003db4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2207      	movs	r2, #7
 8003dba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,A");
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	33a4      	adds	r3, #164	; 0xa4
 8003dc0:	4a91      	ldr	r2, [pc, #580]	; (8004008 <problem_fetch+0x2678>)
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003dc8:	6020      	str	r0, [r4, #0]
 8003dca:	6061      	str	r1, [r4, #4]
 8003dcc:	60a2      	str	r2, [r4, #8]
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,18");
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4a8d      	ldr	r2, [pc, #564]	; (800400c <problem_fetch+0x267c>)
 8003dd8:	461d      	mov	r5, r3
 8003dda:	4614      	mov	r4, r2
 8003ddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dde:	6028      	str	r0, [r5, #0]
 8003de0:	6069      	str	r1, [r5, #4]
 8003de2:	60aa      	str	r2, [r5, #8]
 8003de4:	60eb      	str	r3, [r5, #12]
 8003de6:	8823      	ldrh	r3, [r4, #0]
 8003de8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003df0:	4a87      	ldr	r2, [pc, #540]	; (8004010 <problem_fetch+0x2680>)
 8003df2:	461c      	mov	r4, r3
 8003df4:	4613      	mov	r3, r2
 8003df6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003df8:	6020      	str	r0, [r4, #0]
 8003dfa:	6061      	str	r1, [r4, #4]
 8003dfc:	60a2      	str	r2, [r4, #8]
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	81a3      	strh	r3, [r4, #12]
			break;
 8003e02:	f018 bcf5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 46 :
			strcpy(p->name,"THE WILL TO POWER");
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e0c:	4a81      	ldr	r2, [pc, #516]	; (8004014 <problem_fetch+0x2684>)
 8003e0e:	461d      	mov	r5, r3
 8003e10:	4614      	mov	r4, r2
 8003e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e14:	6028      	str	r0, [r5, #0]
 8003e16:	6069      	str	r1, [r5, #4]
 8003e18:	60aa      	str	r2, [r5, #8]
 8003e1a:	60eb      	str	r3, [r5, #12]
 8003e1c:	8823      	ldrh	r3, [r4, #0]
 8003e1e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e26:	4a77      	ldr	r2, [pc, #476]	; (8004004 <problem_fetch+0x2674>)
 8003e28:	8811      	ldrh	r1, [r2, #0]
 8003e2a:	7892      	ldrb	r2, [r2, #2]
 8003e2c:	8019      	strh	r1, [r3, #0]
 8003e2e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2208      	movs	r2, #8
 8003e34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,H,K,G,H,D");
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	33a4      	adds	r3, #164	; 0xa4
 8003e3a:	4a77      	ldr	r2, [pc, #476]	; (8004018 <problem_fetch+0x2688>)
 8003e3c:	461c      	mov	r4, r3
 8003e3e:	4615      	mov	r5, r2
 8003e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e42:	6020      	str	r0, [r4, #0]
 8003e44:	6061      	str	r1, [r4, #4]
 8003e46:	60a2      	str	r2, [r4, #8]
 8003e48:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,17,16,18");
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4a73      	ldr	r2, [pc, #460]	; (800401c <problem_fetch+0x268c>)
 8003e50:	461d      	mov	r5, r3
 8003e52:	4614      	mov	r4, r2
 8003e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e56:	6028      	str	r0, [r5, #0]
 8003e58:	6069      	str	r1, [r5, #4]
 8003e5a:	60aa      	str	r2, [r5, #8]
 8003e5c:	60eb      	str	r3, [r5, #12]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	6128      	str	r0, [r5, #16]
 8003e62:	7923      	ldrb	r3, [r4, #4]
 8003e64:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003e6c:	4a6c      	ldr	r2, [pc, #432]	; (8004020 <problem_fetch+0x2690>)
 8003e6e:	461c      	mov	r4, r3
 8003e70:	4615      	mov	r5, r2
 8003e72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e74:	6020      	str	r0, [r4, #0]
 8003e76:	6061      	str	r1, [r4, #4]
 8003e78:	60a2      	str	r2, [r4, #8]
 8003e7a:	60e3      	str	r3, [r4, #12]
			break;
 8003e7c:	f018 bcb8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 47 :
			strcpy(p->name,"BEYOND GOOD AND EVIL");
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e86:	4a67      	ldr	r2, [pc, #412]	; (8004024 <problem_fetch+0x2694>)
 8003e88:	461d      	mov	r5, r3
 8003e8a:	4614      	mov	r4, r2
 8003e8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e8e:	6028      	str	r0, [r5, #0]
 8003e90:	6069      	str	r1, [r5, #4]
 8003e92:	60aa      	str	r2, [r5, #8]
 8003e94:	60eb      	str	r3, [r5, #12]
 8003e96:	6820      	ldr	r0, [r4, #0]
 8003e98:	6128      	str	r0, [r5, #16]
 8003e9a:	7923      	ldrb	r3, [r4, #4]
 8003e9c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <problem_fetch+0x2674>)
 8003ea6:	8811      	ldrh	r1, [r2, #0]
 8003ea8:	7892      	ldrb	r2, [r2, #2]
 8003eaa:	8019      	strh	r1, [r3, #0]
 8003eac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,B,G,E,I");
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	33a4      	adds	r3, #164	; 0xa4
 8003eb8:	4a5b      	ldr	r2, [pc, #364]	; (8004028 <problem_fetch+0x2698>)
 8003eba:	461c      	mov	r4, r3
 8003ebc:	4615      	mov	r5, r2
 8003ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ec0:	6020      	str	r0, [r4, #0]
 8003ec2:	6061      	str	r1, [r4, #4]
 8003ec4:	60a2      	str	r2, [r4, #8]
 8003ec6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,6,12,15,17,16,18");
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4a57      	ldr	r2, [pc, #348]	; (800402c <problem_fetch+0x269c>)
 8003ece:	461d      	mov	r5, r3
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ed4:	6028      	str	r0, [r5, #0]
 8003ed6:	6069      	str	r1, [r5, #4]
 8003ed8:	60aa      	str	r2, [r5, #8]
 8003eda:	60eb      	str	r3, [r5, #12]
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	6128      	str	r0, [r5, #16]
 8003ee0:	7923      	ldrb	r3, [r4, #4]
 8003ee2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,s,d,d,d,d,e");
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003eea:	4a51      	ldr	r2, [pc, #324]	; (8004030 <problem_fetch+0x26a0>)
 8003eec:	461c      	mov	r4, r3
 8003eee:	4615      	mov	r5, r2
 8003ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ef2:	6020      	str	r0, [r4, #0]
 8003ef4:	6061      	str	r1, [r4, #4]
 8003ef6:	60a2      	str	r2, [r4, #8]
 8003ef8:	60e3      	str	r3, [r4, #12]
			break;
 8003efa:	f018 bc79 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 48 :
			strcpy(p->name,"BLACK CHAMBER ORDER");
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003f04:	4a4b      	ldr	r2, [pc, #300]	; (8004034 <problem_fetch+0x26a4>)
 8003f06:	461d      	mov	r5, r3
 8003f08:	4614      	mov	r4, r2
 8003f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0c:	6028      	str	r0, [r5, #0]
 8003f0e:	6069      	str	r1, [r5, #4]
 8003f10:	60aa      	str	r2, [r5, #8]
 8003f12:	60eb      	str	r3, [r5, #12]
 8003f14:	6820      	ldr	r0, [r4, #0]
 8003f16:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f1e:	4a46      	ldr	r2, [pc, #280]	; (8004038 <problem_fetch+0x26a8>)
 8003f20:	8811      	ldrh	r1, [r2, #0]
 8003f22:	7892      	ldrb	r2, [r2, #2]
 8003f24:	8019      	strh	r1, [r3, #0]
 8003f26:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2207      	movs	r2, #7
 8003f2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,B,D,A");
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	33a4      	adds	r3, #164	; 0xa4
 8003f32:	4a42      	ldr	r2, [pc, #264]	; (800403c <problem_fetch+0x26ac>)
 8003f34:	461c      	mov	r4, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f3a:	6020      	str	r0, [r4, #0]
 8003f3c:	6061      	str	r1, [r4, #4]
 8003f3e:	60a2      	str	r2, [r4, #8]
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,15,18");
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4a3d      	ldr	r2, [pc, #244]	; (8004040 <problem_fetch+0x26b0>)
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f50:	6028      	str	r0, [r5, #0]
 8003f52:	6069      	str	r1, [r5, #4]
 8003f54:	60aa      	str	r2, [r5, #8]
 8003f56:	60eb      	str	r3, [r5, #12]
 8003f58:	7823      	ldrb	r3, [r4, #0]
 8003f5a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003f62:	4a38      	ldr	r2, [pc, #224]	; (8004044 <problem_fetch+0x26b4>)
 8003f64:	461c      	mov	r4, r3
 8003f66:	4613      	mov	r3, r2
 8003f68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	6061      	str	r1, [r4, #4]
 8003f6e:	60a2      	str	r2, [r4, #8]
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	81a3      	strh	r3, [r4, #12]
			break;
 8003f74:	f018 bc3c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 49 :
			strcpy(p->name,"CALCULO");
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003f7e:	4932      	ldr	r1, [pc, #200]	; (8004048 <problem_fetch+0x26b8>)
 8003f80:	461a      	mov	r2, r3
 8003f82:	460b      	mov	r3, r1
 8003f84:	cb03      	ldmia	r3!, {r0, r1}
 8003f86:	6010      	str	r0, [r2, #0]
 8003f88:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <problem_fetch+0x2674>)
 8003f92:	8811      	ldrh	r1, [r2, #0]
 8003f94:	7892      	ldrb	r2, [r2, #2]
 8003f96:	8019      	strh	r1, [r3, #0]
 8003f98:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,F,G,I");
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	33a4      	adds	r3, #164	; 0xa4
 8003fa4:	4a29      	ldr	r2, [pc, #164]	; (800404c <problem_fetch+0x26bc>)
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	4613      	mov	r3, r2
 8003faa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fac:	6020      	str	r0, [r4, #0]
 8003fae:	6061      	str	r1, [r4, #4]
 8003fb0:	60a2      	str	r2, [r4, #8]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,13,15,18");
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4a25      	ldr	r2, [pc, #148]	; (8004050 <problem_fetch+0x26c0>)
 8003fbc:	461d      	mov	r5, r3
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	6028      	str	r0, [r5, #0]
 8003fc4:	6069      	str	r1, [r5, #4]
 8003fc6:	60aa      	str	r2, [r5, #8]
 8003fc8:	60eb      	str	r3, [r5, #12]
 8003fca:	8823      	ldrh	r3, [r4, #0]
 8003fcc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003fd4:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <problem_fetch+0x2680>)
 8003fd6:	461c      	mov	r4, r3
 8003fd8:	4613      	mov	r3, r2
 8003fda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fdc:	6020      	str	r0, [r4, #0]
 8003fde:	6061      	str	r1, [r4, #4]
 8003fe0:	60a2      	str	r2, [r4, #8]
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	81a3      	strh	r3, [r4, #12]
			break;
 8003fe6:	f018 bc03 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8003fea:	bf00      	nop
 8003fec:	080244d8 	.word	0x080244d8
 8003ff0:	08023c28 	.word	0x08023c28
 8003ff4:	080244e4 	.word	0x080244e4
 8003ff8:	080244f0 	.word	0x080244f0
 8003ffc:	0802405c 	.word	0x0802405c
 8004000:	08024500 	.word	0x08024500
 8004004:	08023c5c 	.word	0x08023c5c
 8004008:	08024518 	.word	0x08024518
 800400c:	08024528 	.word	0x08024528
 8004010:	08023d18 	.word	0x08023d18
 8004014:	0802453c 	.word	0x0802453c
 8004018:	08024550 	.word	0x08024550
 800401c:	08024560 	.word	0x08024560
 8004020:	08023cb4 	.word	0x08023cb4
 8004024:	08024578 	.word	0x08024578
 8004028:	08024590 	.word	0x08024590
 800402c:	080245a0 	.word	0x080245a0
 8004030:	080245b8 	.word	0x080245b8
 8004034:	080245c8 	.word	0x080245c8
 8004038:	08023b50 	.word	0x08023b50
 800403c:	080245dc 	.word	0x080245dc
 8004040:	080245ec 	.word	0x080245ec
 8004044:	08023c08 	.word	0x08023c08
 8004048:	08024600 	.word	0x08024600
 800404c:	08024608 	.word	0x08024608
 8004050:	08024618 	.word	0x08024618
		case 50 :
			strcpy(p->name,"LONG BLACK");
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800405a:	49bd      	ldr	r1, [pc, #756]	; (8004350 <problem_fetch+0x29c0>)
 800405c:	461a      	mov	r2, r3
 800405e:	460b      	mov	r3, r1
 8004060:	cb03      	ldmia	r3!, {r0, r1}
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	6051      	str	r1, [r2, #4]
 8004066:	8819      	ldrh	r1, [r3, #0]
 8004068:	789b      	ldrb	r3, [r3, #2]
 800406a:	8111      	strh	r1, [r2, #8]
 800406c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004074:	4ab7      	ldr	r2, [pc, #732]	; (8004354 <problem_fetch+0x29c4>)
 8004076:	6810      	ldr	r0, [r2, #0]
 8004078:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2206      	movs	r2, #6
 800407e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,E,E,D");
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	33a4      	adds	r3, #164	; 0xa4
 8004084:	4ab4      	ldr	r2, [pc, #720]	; (8004358 <problem_fetch+0x29c8>)
 8004086:	461c      	mov	r4, r3
 8004088:	4613      	mov	r3, r2
 800408a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800408c:	6020      	str	r0, [r4, #0]
 800408e:	6061      	str	r1, [r4, #4]
 8004090:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,14,16,18");
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	4ab1      	ldr	r2, [pc, #708]	; (800435c <problem_fetch+0x29cc>)
 8004098:	461c      	mov	r4, r3
 800409a:	4615      	mov	r5, r2
 800409c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409e:	6020      	str	r0, [r4, #0]
 80040a0:	6061      	str	r1, [r4, #4]
 80040a2:	60a2      	str	r2, [r4, #8]
 80040a4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80040ac:	4aac      	ldr	r2, [pc, #688]	; (8004360 <problem_fetch+0x29d0>)
 80040ae:	461c      	mov	r4, r3
 80040b0:	4613      	mov	r3, r2
 80040b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040b4:	6020      	str	r0, [r4, #0]
 80040b6:	6061      	str	r1, [r4, #4]
 80040b8:	60a2      	str	r2, [r4, #8]
			break;
 80040ba:	f018 bb99 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 51 :
			strcpy(p->name,"BLACK JACK");
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80040c4:	49a7      	ldr	r1, [pc, #668]	; (8004364 <problem_fetch+0x29d4>)
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	cb03      	ldmia	r3!, {r0, r1}
 80040cc:	6010      	str	r0, [r2, #0]
 80040ce:	6051      	str	r1, [r2, #4]
 80040d0:	8819      	ldrh	r1, [r3, #0]
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	8111      	strh	r1, [r2, #8]
 80040d6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80040de:	4aa2      	ldr	r2, [pc, #648]	; (8004368 <problem_fetch+0x29d8>)
 80040e0:	8811      	ldrh	r1, [r2, #0]
 80040e2:	7892      	ldrb	r2, [r2, #2]
 80040e4:	8019      	strh	r1, [r3, #0]
 80040e6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2206      	movs	r2, #6
 80040ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,D");
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	33a4      	adds	r3, #164	; 0xa4
 80040f2:	4a9e      	ldr	r2, [pc, #632]	; (800436c <problem_fetch+0x29dc>)
 80040f4:	461c      	mov	r4, r3
 80040f6:	4613      	mov	r3, r2
 80040f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040fa:	6020      	str	r0, [r4, #0]
 80040fc:	6061      	str	r1, [r4, #4]
 80040fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,13,14,18");
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3304      	adds	r3, #4
 8004104:	4a9a      	ldr	r2, [pc, #616]	; (8004370 <problem_fetch+0x29e0>)
 8004106:	461c      	mov	r4, r3
 8004108:	4615      	mov	r5, r2
 800410a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410c:	6020      	str	r0, [r4, #0]
 800410e:	6061      	str	r1, [r4, #4]
 8004110:	60a2      	str	r2, [r4, #8]
 8004112:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800411a:	4a96      	ldr	r2, [pc, #600]	; (8004374 <problem_fetch+0x29e4>)
 800411c:	461c      	mov	r4, r3
 800411e:	4613      	mov	r3, r2
 8004120:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004122:	6020      	str	r0, [r4, #0]
 8004124:	6061      	str	r1, [r4, #4]
 8004126:	60a2      	str	r2, [r4, #8]
			break;
 8004128:	f018 bb62 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 52 :
			strcpy(p->name,"DITA DI BURRO");
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004132:	4a91      	ldr	r2, [pc, #580]	; (8004378 <problem_fetch+0x29e8>)
 8004134:	461c      	mov	r4, r3
 8004136:	4613      	mov	r3, r2
 8004138:	cb07      	ldmia	r3!, {r0, r1, r2}
 800413a:	6020      	str	r0, [r4, #0]
 800413c:	6061      	str	r1, [r4, #4]
 800413e:	60a2      	str	r2, [r4, #8]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800414a:	4a87      	ldr	r2, [pc, #540]	; (8004368 <problem_fetch+0x29d8>)
 800414c:	8811      	ldrh	r1, [r2, #0]
 800414e:	7892      	ldrb	r2, [r2, #2]
 8004150:	8019      	strh	r1, [r3, #0]
 8004152:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2204      	movs	r2, #4
 8004158:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,C,D");
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	33a4      	adds	r3, #164	; 0xa4
 800415e:	4987      	ldr	r1, [pc, #540]	; (800437c <problem_fetch+0x29ec>)
 8004160:	461a      	mov	r2, r3
 8004162:	460b      	mov	r3, r1
 8004164:	cb03      	ldmia	r3!, {r0, r1}
 8004166:	6010      	str	r0, [r2, #0]
 8004168:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"9,5,13,18");
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3304      	adds	r3, #4
 800416e:	4984      	ldr	r1, [pc, #528]	; (8004380 <problem_fetch+0x29f0>)
 8004170:	461a      	mov	r2, r3
 8004172:	460b      	mov	r3, r1
 8004174:	cb03      	ldmia	r3!, {r0, r1}
 8004176:	6010      	str	r0, [r2, #0]
 8004178:	6051      	str	r1, [r2, #4]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"d,s,d,e");
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004184:	497f      	ldr	r1, [pc, #508]	; (8004384 <problem_fetch+0x29f4>)
 8004186:	461a      	mov	r2, r3
 8004188:	460b      	mov	r3, r1
 800418a:	cb03      	ldmia	r3!, {r0, r1}
 800418c:	6010      	str	r0, [r2, #0]
 800418e:	6051      	str	r1, [r2, #4]
			break;
 8004190:	f018 bb2e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 53 :
			strcpy(p->name,"ELBOW GREASE VAR");
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800419a:	4a7b      	ldr	r2, [pc, #492]	; (8004388 <problem_fetch+0x29f8>)
 800419c:	461d      	mov	r5, r3
 800419e:	4614      	mov	r4, r2
 80041a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a2:	6028      	str	r0, [r5, #0]
 80041a4:	6069      	str	r1, [r5, #4]
 80041a6:	60aa      	str	r2, [r5, #8]
 80041a8:	60eb      	str	r3, [r5, #12]
 80041aa:	7823      	ldrb	r3, [r4, #0]
 80041ac:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80041b4:	4a75      	ldr	r2, [pc, #468]	; (800438c <problem_fetch+0x29fc>)
 80041b6:	6810      	ldr	r0, [r2, #0]
 80041b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2206      	movs	r2, #6
 80041be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,A");
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	33a4      	adds	r3, #164	; 0xa4
 80041c4:	4a72      	ldr	r2, [pc, #456]	; (8004390 <problem_fetch+0x2a00>)
 80041c6:	461c      	mov	r4, r3
 80041c8:	4613      	mov	r3, r2
 80041ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041cc:	6020      	str	r0, [r4, #0]
 80041ce:	6061      	str	r1, [r4, #4]
 80041d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,11,15,18");
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4a6f      	ldr	r2, [pc, #444]	; (8004394 <problem_fetch+0x2a04>)
 80041d8:	461c      	mov	r4, r3
 80041da:	4613      	mov	r3, r2
 80041dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041de:	6020      	str	r0, [r4, #0]
 80041e0:	6061      	str	r1, [r4, #4]
 80041e2:	60a2      	str	r2, [r4, #8]
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	789b      	ldrb	r3, [r3, #2]
 80041e8:	81a2      	strh	r2, [r4, #12]
 80041ea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80041f2:	4a60      	ldr	r2, [pc, #384]	; (8004374 <problem_fetch+0x29e4>)
 80041f4:	461c      	mov	r4, r3
 80041f6:	4613      	mov	r3, r2
 80041f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041fa:	6020      	str	r0, [r4, #0]
 80041fc:	6061      	str	r1, [r4, #4]
 80041fe:	60a2      	str	r2, [r4, #8]
			break;
 8004200:	f018 baf6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 54 :
			strcpy(p->name,"ELBOW GREASE");
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800420a:	4a63      	ldr	r2, [pc, #396]	; (8004398 <problem_fetch+0x2a08>)
 800420c:	461c      	mov	r4, r3
 800420e:	4613      	mov	r3, r2
 8004210:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004212:	6020      	str	r0, [r4, #0]
 8004214:	6061      	str	r1, [r4, #4]
 8004216:	60a2      	str	r2, [r4, #8]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004222:	4a5e      	ldr	r2, [pc, #376]	; (800439c <problem_fetch+0x2a0c>)
 8004224:	6810      	ldr	r0, [r2, #0]
 8004226:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2207      	movs	r2, #7
 800422c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,C,A");
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	33a4      	adds	r3, #164	; 0xa4
 8004232:	4a5b      	ldr	r2, [pc, #364]	; (80043a0 <problem_fetch+0x2a10>)
 8004234:	461c      	mov	r4, r3
 8004236:	4613      	mov	r3, r2
 8004238:	cb07      	ldmia	r3!, {r0, r1, r2}
 800423a:	6020      	str	r0, [r4, #0]
 800423c:	6061      	str	r1, [r4, #4]
 800423e:	60a2      	str	r2, [r4, #8]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,15,5,18");
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4a56      	ldr	r2, [pc, #344]	; (80043a4 <problem_fetch+0x2a14>)
 800424a:	461d      	mov	r5, r3
 800424c:	4614      	mov	r4, r2
 800424e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004250:	6028      	str	r0, [r5, #0]
 8004252:	6069      	str	r1, [r5, #4]
 8004254:	60aa      	str	r2, [r5, #8]
 8004256:	60eb      	str	r3, [r5, #12]
 8004258:	7823      	ldrb	r3, [r4, #0]
 800425a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004262:	4a51      	ldr	r2, [pc, #324]	; (80043a8 <problem_fetch+0x2a18>)
 8004264:	461c      	mov	r4, r3
 8004266:	4613      	mov	r3, r2
 8004268:	cb07      	ldmia	r3!, {r0, r1, r2}
 800426a:	6020      	str	r0, [r4, #0]
 800426c:	6061      	str	r1, [r4, #4]
 800426e:	60a2      	str	r2, [r4, #8]
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	81a3      	strh	r3, [r4, #12]
			break;
 8004274:	f018 babc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 55 :
			strcpy(p->name,"MY FLOW");
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800427e:	494b      	ldr	r1, [pc, #300]	; (80043ac <problem_fetch+0x2a1c>)
 8004280:	461a      	mov	r2, r3
 8004282:	460b      	mov	r3, r1
 8004284:	cb03      	ldmia	r3!, {r0, r1}
 8004286:	6010      	str	r0, [r2, #0]
 8004288:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004290:	4a47      	ldr	r2, [pc, #284]	; (80043b0 <problem_fetch+0x2a20>)
 8004292:	6810      	ldr	r0, [r2, #0]
 8004294:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2206      	movs	r2, #6
 800429a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	33a4      	adds	r3, #164	; 0xa4
 80042a0:	4a44      	ldr	r2, [pc, #272]	; (80043b4 <problem_fetch+0x2a24>)
 80042a2:	461c      	mov	r4, r3
 80042a4:	4613      	mov	r3, r2
 80042a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042a8:	6020      	str	r0, [r4, #0]
 80042aa:	6061      	str	r1, [r4, #4]
 80042ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4a41      	ldr	r2, [pc, #260]	; (80043b8 <problem_fetch+0x2a28>)
 80042b4:	461c      	mov	r4, r3
 80042b6:	4613      	mov	r3, r2
 80042b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042ba:	6020      	str	r0, [r4, #0]
 80042bc:	6061      	str	r1, [r4, #4]
 80042be:	60a2      	str	r2, [r4, #8]
 80042c0:	881a      	ldrh	r2, [r3, #0]
 80042c2:	789b      	ldrb	r3, [r3, #2]
 80042c4:	81a2      	strh	r2, [r4, #12]
 80042c6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80042ce:	4a29      	ldr	r2, [pc, #164]	; (8004374 <problem_fetch+0x29e4>)
 80042d0:	461c      	mov	r4, r3
 80042d2:	4613      	mov	r3, r2
 80042d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042d6:	6020      	str	r0, [r4, #0]
 80042d8:	6061      	str	r1, [r4, #4]
 80042da:	60a2      	str	r2, [r4, #8]
			break;
 80042dc:	f018 ba88 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 56 :
			strcpy(p->name,"BLACK ARE GOOD");
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <problem_fetch+0x2a2c>)
 80042e8:	461c      	mov	r4, r3
 80042ea:	4613      	mov	r3, r2
 80042ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042ee:	6020      	str	r0, [r4, #0]
 80042f0:	6061      	str	r1, [r4, #4]
 80042f2:	60a2      	str	r2, [r4, #8]
 80042f4:	881a      	ldrh	r2, [r3, #0]
 80042f6:	789b      	ldrb	r3, [r3, #2]
 80042f8:	81a2      	strh	r2, [r4, #12]
 80042fa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004302:	4a2f      	ldr	r2, [pc, #188]	; (80043c0 <problem_fetch+0x2a30>)
 8004304:	8811      	ldrh	r1, [r2, #0]
 8004306:	7892      	ldrb	r2, [r2, #2]
 8004308:	8019      	strh	r1, [r3, #0]
 800430a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2206      	movs	r2, #6
 8004310:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,I,J,G,I");
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	33a4      	adds	r3, #164	; 0xa4
 8004316:	4a2b      	ldr	r2, [pc, #172]	; (80043c4 <problem_fetch+0x2a34>)
 8004318:	461c      	mov	r4, r3
 800431a:	4613      	mov	r3, r2
 800431c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800431e:	6020      	str	r0, [r4, #0]
 8004320:	6061      	str	r1, [r4, #4]
 8004322:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,12,15,18");
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3304      	adds	r3, #4
 8004328:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <problem_fetch+0x2a38>)
 800432a:	461c      	mov	r4, r3
 800432c:	4615      	mov	r5, r2
 800432e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004330:	6020      	str	r0, [r4, #0]
 8004332:	6061      	str	r1, [r4, #4]
 8004334:	60a2      	str	r2, [r4, #8]
 8004336:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800433e:	4a0d      	ldr	r2, [pc, #52]	; (8004374 <problem_fetch+0x29e4>)
 8004340:	461c      	mov	r4, r3
 8004342:	4613      	mov	r3, r2
 8004344:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004346:	6020      	str	r0, [r4, #0]
 8004348:	6061      	str	r1, [r4, #4]
 800434a:	60a2      	str	r2, [r4, #8]
			break;
 800434c:	f018 ba50 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8004350:	0802462c 	.word	0x0802462c
 8004354:	08023b90 	.word	0x08023b90
 8004358:	08024638 	.word	0x08024638
 800435c:	08024644 	.word	0x08024644
 8004360:	08023b70 	.word	0x08023b70
 8004364:	08024654 	.word	0x08024654
 8004368:	08023b50 	.word	0x08023b50
 800436c:	08024660 	.word	0x08024660
 8004370:	0802466c 	.word	0x0802466c
 8004374:	08023f2c 	.word	0x08023f2c
 8004378:	0802467c 	.word	0x0802467c
 800437c:	0802468c 	.word	0x0802468c
 8004380:	08024694 	.word	0x08024694
 8004384:	080246a0 	.word	0x080246a0
 8004388:	080246a8 	.word	0x080246a8
 800438c:	0802419c 	.word	0x0802419c
 8004390:	080246bc 	.word	0x080246bc
 8004394:	080246c8 	.word	0x080246c8
 8004398:	080246d8 	.word	0x080246d8
 800439c:	08023ccc 	.word	0x08023ccc
 80043a0:	080246e8 	.word	0x080246e8
 80043a4:	080246f8 	.word	0x080246f8
 80043a8:	08023d18 	.word	0x08023d18
 80043ac:	0802470c 	.word	0x0802470c
 80043b0:	08023d30 	.word	0x08023d30
 80043b4:	08024714 	.word	0x08024714
 80043b8:	080240b8 	.word	0x080240b8
 80043bc:	08024720 	.word	0x08024720
 80043c0:	08023c5c 	.word	0x08023c5c
 80043c4:	08024730 	.word	0x08024730
 80043c8:	0802473c 	.word	0x0802473c
		case 57 :
			strcpy(p->name,"THE DARK ARTS DIRECT");
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80043d2:	4aad      	ldr	r2, [pc, #692]	; (8004688 <problem_fetch+0x2cf8>)
 80043d4:	461d      	mov	r5, r3
 80043d6:	4614      	mov	r4, r2
 80043d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043da:	6028      	str	r0, [r5, #0]
 80043dc:	6069      	str	r1, [r5, #4]
 80043de:	60aa      	str	r2, [r5, #8]
 80043e0:	60eb      	str	r3, [r5, #12]
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	6128      	str	r0, [r5, #16]
 80043e6:	7923      	ldrb	r3, [r4, #4]
 80043e8:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7C+");
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80043f0:	4aa6      	ldr	r2, [pc, #664]	; (800468c <problem_fetch+0x2cfc>)
 80043f2:	6810      	ldr	r0, [r2, #0]
 80043f4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2206      	movs	r2, #6
 80043fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,G,I");
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	33a4      	adds	r3, #164	; 0xa4
 8004400:	4aa3      	ldr	r2, [pc, #652]	; (8004690 <problem_fetch+0x2d00>)
 8004402:	461c      	mov	r4, r3
 8004404:	4613      	mov	r3, r2
 8004406:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004408:	6020      	str	r0, [r4, #0]
 800440a:	6061      	str	r1, [r4, #4]
 800440c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,13,17,18");
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4aa0      	ldr	r2, [pc, #640]	; (8004694 <problem_fetch+0x2d04>)
 8004414:	461c      	mov	r4, r3
 8004416:	4613      	mov	r3, r2
 8004418:	cb07      	ldmia	r3!, {r0, r1, r2}
 800441a:	6020      	str	r0, [r4, #0]
 800441c:	6061      	str	r1, [r4, #4]
 800441e:	60a2      	str	r2, [r4, #8]
 8004420:	881a      	ldrh	r2, [r3, #0]
 8004422:	789b      	ldrb	r3, [r3, #2]
 8004424:	81a2      	strh	r2, [r4, #12]
 8004426:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800442e:	4a9a      	ldr	r2, [pc, #616]	; (8004698 <problem_fetch+0x2d08>)
 8004430:	461c      	mov	r4, r3
 8004432:	4613      	mov	r3, r2
 8004434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004436:	6020      	str	r0, [r4, #0]
 8004438:	6061      	str	r1, [r4, #4]
 800443a:	60a2      	str	r2, [r4, #8]
			break;
 800443c:	f018 b9d8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 58 :
			strcpy(p->name,"THE MOST HIGH");
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004446:	4a95      	ldr	r2, [pc, #596]	; (800469c <problem_fetch+0x2d0c>)
 8004448:	461c      	mov	r4, r3
 800444a:	4613      	mov	r3, r2
 800444c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800444e:	6020      	str	r0, [r4, #0]
 8004450:	6061      	str	r1, [r4, #4]
 8004452:	60a2      	str	r2, [r4, #8]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800445e:	4a90      	ldr	r2, [pc, #576]	; (80046a0 <problem_fetch+0x2d10>)
 8004460:	6810      	ldr	r0, [r2, #0]
 8004462:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2207      	movs	r2, #7
 8004468:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,G,E,I");
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	33a4      	adds	r3, #164	; 0xa4
 800446e:	4a8d      	ldr	r2, [pc, #564]	; (80046a4 <problem_fetch+0x2d14>)
 8004470:	461c      	mov	r4, r3
 8004472:	4613      	mov	r3, r2
 8004474:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004476:	6020      	str	r0, [r4, #0]
 8004478:	6061      	str	r1, [r4, #4]
 800447a:	60a2      	str	r2, [r4, #8]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4a88      	ldr	r2, [pc, #544]	; (80046a8 <problem_fetch+0x2d18>)
 8004486:	461d      	mov	r5, r3
 8004488:	4614      	mov	r4, r2
 800448a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448c:	6028      	str	r0, [r5, #0]
 800448e:	6069      	str	r1, [r5, #4]
 8004490:	60aa      	str	r2, [r5, #8]
 8004492:	60eb      	str	r3, [r5, #12]
 8004494:	8823      	ldrh	r3, [r4, #0]
 8004496:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800449e:	4a83      	ldr	r2, [pc, #524]	; (80046ac <problem_fetch+0x2d1c>)
 80044a0:	461c      	mov	r4, r3
 80044a2:	4613      	mov	r3, r2
 80044a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044a6:	6020      	str	r0, [r4, #0]
 80044a8:	6061      	str	r1, [r4, #4]
 80044aa:	60a2      	str	r2, [r4, #8]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	81a3      	strh	r3, [r4, #12]
			break;
 80044b0:	f018 b99e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 59 :
			strcpy(p->name,"MAN IN BLACK");
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80044ba:	4a7d      	ldr	r2, [pc, #500]	; (80046b0 <problem_fetch+0x2d20>)
 80044bc:	461c      	mov	r4, r3
 80044be:	4613      	mov	r3, r2
 80044c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044c2:	6020      	str	r0, [r4, #0]
 80044c4:	6061      	str	r1, [r4, #4]
 80044c6:	60a2      	str	r2, [r4, #8]
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044d2:	4a78      	ldr	r2, [pc, #480]	; (80046b4 <problem_fetch+0x2d24>)
 80044d4:	6810      	ldr	r0, [r2, #0]
 80044d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2209      	movs	r2, #9
 80044dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,I,I,K,I,G");
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	33a4      	adds	r3, #164	; 0xa4
 80044e2:	4a75      	ldr	r2, [pc, #468]	; (80046b8 <problem_fetch+0x2d28>)
 80044e4:	461d      	mov	r5, r3
 80044e6:	4614      	mov	r4, r2
 80044e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044ea:	6028      	str	r0, [r5, #0]
 80044ec:	6069      	str	r1, [r5, #4]
 80044ee:	60aa      	str	r2, [r5, #8]
 80044f0:	60eb      	str	r3, [r5, #12]
 80044f2:	8823      	ldrh	r3, [r4, #0]
 80044f4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,12,14,15,16,18,4");
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4a70      	ldr	r2, [pc, #448]	; (80046bc <problem_fetch+0x2d2c>)
 80044fc:	461c      	mov	r4, r3
 80044fe:	4615      	mov	r5, r2
 8004500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004502:	6020      	str	r0, [r4, #0]
 8004504:	6061      	str	r1, [r4, #4]
 8004506:	60a2      	str	r2, [r4, #8]
 8004508:	60e3      	str	r3, [r4, #12]
 800450a:	6828      	ldr	r0, [r5, #0]
 800450c:	6120      	str	r0, [r4, #16]
 800450e:	88ab      	ldrh	r3, [r5, #4]
 8004510:	79aa      	ldrb	r2, [r5, #6]
 8004512:	82a3      	strh	r3, [r4, #20]
 8004514:	4613      	mov	r3, r2
 8004516:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800451e:	4a68      	ldr	r2, [pc, #416]	; (80046c0 <problem_fetch+0x2d30>)
 8004520:	461d      	mov	r5, r3
 8004522:	4614      	mov	r4, r2
 8004524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004526:	6028      	str	r0, [r5, #0]
 8004528:	6069      	str	r1, [r5, #4]
 800452a:	60aa      	str	r2, [r5, #8]
 800452c:	60eb      	str	r3, [r5, #12]
 800452e:	8823      	ldrh	r3, [r4, #0]
 8004530:	822b      	strh	r3, [r5, #16]
			break;
 8004532:	f018 b95d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 60 :
			strcpy(p->name,"STRIZZANGELES");
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800453c:	4a61      	ldr	r2, [pc, #388]	; (80046c4 <problem_fetch+0x2d34>)
 800453e:	461c      	mov	r4, r3
 8004540:	4613      	mov	r3, r2
 8004542:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004544:	6020      	str	r0, [r4, #0]
 8004546:	6061      	str	r1, [r4, #4]
 8004548:	60a2      	str	r2, [r4, #8]
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004554:	4a52      	ldr	r2, [pc, #328]	; (80046a0 <problem_fetch+0x2d10>)
 8004556:	6810      	ldr	r0, [r2, #0]
 8004558:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2207      	movs	r2, #7
 800455e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,J,E,I");
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	33a4      	adds	r3, #164	; 0xa4
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <problem_fetch+0x2d38>)
 8004566:	461c      	mov	r4, r3
 8004568:	4613      	mov	r3, r2
 800456a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800456c:	6020      	str	r0, [r4, #0]
 800456e:	6061      	str	r1, [r4, #4]
 8004570:	60a2      	str	r2, [r4, #8]
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,14,7,16,18");
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4a54      	ldr	r2, [pc, #336]	; (80046cc <problem_fetch+0x2d3c>)
 800457c:	461d      	mov	r5, r3
 800457e:	4614      	mov	r4, r2
 8004580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004582:	6028      	str	r0, [r5, #0]
 8004584:	6069      	str	r1, [r5, #4]
 8004586:	60aa      	str	r2, [r5, #8]
 8004588:	60eb      	str	r3, [r5, #12]
 800458a:	8823      	ldrh	r3, [r4, #0]
 800458c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004594:	4a4e      	ldr	r2, [pc, #312]	; (80046d0 <problem_fetch+0x2d40>)
 8004596:	461c      	mov	r4, r3
 8004598:	4613      	mov	r3, r2
 800459a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800459c:	6020      	str	r0, [r4, #0]
 800459e:	6061      	str	r1, [r4, #4]
 80045a0:	60a2      	str	r2, [r4, #8]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	81a3      	strh	r3, [r4, #12]
			break;
 80045a6:	f018 b923 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 61 :
			strcpy(p->name,"BOARDMEETING 3.0");
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80045b0:	4a48      	ldr	r2, [pc, #288]	; (80046d4 <problem_fetch+0x2d44>)
 80045b2:	461d      	mov	r5, r3
 80045b4:	4614      	mov	r4, r2
 80045b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b8:	6028      	str	r0, [r5, #0]
 80045ba:	6069      	str	r1, [r5, #4]
 80045bc:	60aa      	str	r2, [r5, #8]
 80045be:	60eb      	str	r3, [r5, #12]
 80045c0:	7823      	ldrb	r3, [r4, #0]
 80045c2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80045ca:	4a35      	ldr	r2, [pc, #212]	; (80046a0 <problem_fetch+0x2d10>)
 80045cc:	6810      	ldr	r0, [r2, #0]
 80045ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2206      	movs	r2, #6
 80045d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,G,H,D");
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	33a4      	adds	r3, #164	; 0xa4
 80045da:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <problem_fetch+0x2d48>)
 80045dc:	461c      	mov	r4, r3
 80045de:	4613      	mov	r3, r2
 80045e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045e2:	6020      	str	r0, [r4, #0]
 80045e4:	6061      	str	r1, [r4, #4]
 80045e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,16,18");
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4a3b      	ldr	r2, [pc, #236]	; (80046dc <problem_fetch+0x2d4c>)
 80045ee:	461c      	mov	r4, r3
 80045f0:	4615      	mov	r5, r2
 80045f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045f4:	6020      	str	r0, [r4, #0]
 80045f6:	6061      	str	r1, [r4, #4]
 80045f8:	60a2      	str	r2, [r4, #8]
 80045fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004602:	4a25      	ldr	r2, [pc, #148]	; (8004698 <problem_fetch+0x2d08>)
 8004604:	461c      	mov	r4, r3
 8004606:	4613      	mov	r3, r2
 8004608:	cb07      	ldmia	r3!, {r0, r1, r2}
 800460a:	6020      	str	r0, [r4, #0]
 800460c:	6061      	str	r1, [r4, #4]
 800460e:	60a2      	str	r2, [r4, #8]
			break;
 8004610:	f018 b8ee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 62 :
			strcpy(p->name,"CANIGAN");
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800461a:	4931      	ldr	r1, [pc, #196]	; (80046e0 <problem_fetch+0x2d50>)
 800461c:	461a      	mov	r2, r3
 800461e:	460b      	mov	r3, r1
 8004620:	cb03      	ldmia	r3!, {r0, r1}
 8004622:	6010      	str	r0, [r2, #0]
 8004624:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <problem_fetch+0x2d54>)
 800462e:	8811      	ldrh	r1, [r2, #0]
 8004630:	7892      	ldrb	r2, [r2, #2]
 8004632:	8019      	strh	r1, [r3, #0]
 8004634:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2208      	movs	r2, #8
 800463a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,G,I,F,K,H,I");
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	33a4      	adds	r3, #164	; 0xa4
 8004640:	4a29      	ldr	r2, [pc, #164]	; (80046e8 <problem_fetch+0x2d58>)
 8004642:	461c      	mov	r4, r3
 8004644:	4615      	mov	r5, r2
 8004646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004648:	6020      	str	r0, [r4, #0]
 800464a:	6061      	str	r1, [r4, #4]
 800464c:	60a2      	str	r2, [r4, #8]
 800464e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,10,13,14,16,18");
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3304      	adds	r3, #4
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <problem_fetch+0x2d5c>)
 8004656:	461d      	mov	r5, r3
 8004658:	4614      	mov	r4, r2
 800465a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800465c:	6028      	str	r0, [r5, #0]
 800465e:	6069      	str	r1, [r5, #4]
 8004660:	60aa      	str	r2, [r5, #8]
 8004662:	60eb      	str	r3, [r5, #12]
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	6128      	str	r0, [r5, #16]
 8004668:	7923      	ldrb	r3, [r4, #4]
 800466a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004672:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <problem_fetch+0x2d60>)
 8004674:	461c      	mov	r4, r3
 8004676:	4615      	mov	r5, r2
 8004678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467a:	6020      	str	r0, [r4, #0]
 800467c:	6061      	str	r1, [r4, #4]
 800467e:	60a2      	str	r2, [r4, #8]
 8004680:	60e3      	str	r3, [r4, #12]
			break;
 8004682:	f018 b8b5 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8004686:	bf00      	nop
 8004688:	0802474c 	.word	0x0802474c
 800468c:	0802419c 	.word	0x0802419c
 8004690:	08024764 	.word	0x08024764
 8004694:	08024770 	.word	0x08024770
 8004698:	08023b70 	.word	0x08023b70
 800469c:	08024780 	.word	0x08024780
 80046a0:	08023c28 	.word	0x08023c28
 80046a4:	08024790 	.word	0x08024790
 80046a8:	080247a0 	.word	0x080247a0
 80046ac:	08023c08 	.word	0x08023c08
 80046b0:	080247b4 	.word	0x080247b4
 80046b4:	08023b90 	.word	0x08023b90
 80046b8:	080247c4 	.word	0x080247c4
 80046bc:	080247d8 	.word	0x080247d8
 80046c0:	08024330 	.word	0x08024330
 80046c4:	080247f0 	.word	0x080247f0
 80046c8:	08024800 	.word	0x08024800
 80046cc:	08024810 	.word	0x08024810
 80046d0:	08023d18 	.word	0x08023d18
 80046d4:	08024824 	.word	0x08024824
 80046d8:	08024838 	.word	0x08024838
 80046dc:	08024844 	.word	0x08024844
 80046e0:	08024854 	.word	0x08024854
 80046e4:	08023b50 	.word	0x08023b50
 80046e8:	0802485c 	.word	0x0802485c
 80046ec:	0802486c 	.word	0x0802486c
 80046f0:	08023da0 	.word	0x08023da0
		case 63 :
			strcpy(p->name,"KOKURYU");
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80046fa:	49a6      	ldr	r1, [pc, #664]	; (8004994 <problem_fetch+0x3004>)
 80046fc:	461a      	mov	r2, r3
 80046fe:	460b      	mov	r3, r1
 8004700:	cb03      	ldmia	r3!, {r0, r1}
 8004702:	6010      	str	r0, [r2, #0]
 8004704:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800470c:	4aa2      	ldr	r2, [pc, #648]	; (8004998 <problem_fetch+0x3008>)
 800470e:	6810      	ldr	r0, [r2, #0]
 8004710:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2207      	movs	r2, #7
 8004716:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,G,E,I");
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	33a4      	adds	r3, #164	; 0xa4
 800471c:	4a9f      	ldr	r2, [pc, #636]	; (800499c <problem_fetch+0x300c>)
 800471e:	461c      	mov	r4, r3
 8004720:	4613      	mov	r3, r2
 8004722:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004724:	6020      	str	r0, [r4, #0]
 8004726:	6061      	str	r1, [r4, #4]
 8004728:	60a2      	str	r2, [r4, #8]
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	4a9b      	ldr	r2, [pc, #620]	; (80049a0 <problem_fetch+0x3010>)
 8004734:	461d      	mov	r5, r3
 8004736:	4614      	mov	r4, r2
 8004738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800473a:	6028      	str	r0, [r5, #0]
 800473c:	6069      	str	r1, [r5, #4]
 800473e:	60aa      	str	r2, [r5, #8]
 8004740:	60eb      	str	r3, [r5, #12]
 8004742:	8823      	ldrh	r3, [r4, #0]
 8004744:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800474c:	4a95      	ldr	r2, [pc, #596]	; (80049a4 <problem_fetch+0x3014>)
 800474e:	461c      	mov	r4, r3
 8004750:	4613      	mov	r3, r2
 8004752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004754:	6020      	str	r0, [r4, #0]
 8004756:	6061      	str	r1, [r4, #4]
 8004758:	60a2      	str	r2, [r4, #8]
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	81a3      	strh	r3, [r4, #12]
			break;
 800475e:	f018 b847 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 64 :
			strcpy(p->name,"V7 ANOS DE AEP");
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004768:	4a8f      	ldr	r2, [pc, #572]	; (80049a8 <problem_fetch+0x3018>)
 800476a:	461c      	mov	r4, r3
 800476c:	4613      	mov	r3, r2
 800476e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004770:	6020      	str	r0, [r4, #0]
 8004772:	6061      	str	r1, [r4, #4]
 8004774:	60a2      	str	r2, [r4, #8]
 8004776:	881a      	ldrh	r2, [r3, #0]
 8004778:	789b      	ldrb	r3, [r3, #2]
 800477a:	81a2      	strh	r2, [r4, #12]
 800477c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004784:	4a89      	ldr	r2, [pc, #548]	; (80049ac <problem_fetch+0x301c>)
 8004786:	6810      	ldr	r0, [r2, #0]
 8004788:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2206      	movs	r2, #6
 800478e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,J,G,I");
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	33a4      	adds	r3, #164	; 0xa4
 8004794:	4a86      	ldr	r2, [pc, #536]	; (80049b0 <problem_fetch+0x3020>)
 8004796:	461c      	mov	r4, r3
 8004798:	4613      	mov	r3, r2
 800479a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800479c:	6020      	str	r0, [r4, #0]
 800479e:	6061      	str	r1, [r4, #4]
 80047a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,12,15,18");
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4a83      	ldr	r2, [pc, #524]	; (80049b4 <problem_fetch+0x3024>)
 80047a8:	461c      	mov	r4, r3
 80047aa:	4613      	mov	r3, r2
 80047ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	6061      	str	r1, [r4, #4]
 80047b2:	60a2      	str	r2, [r4, #8]
 80047b4:	881a      	ldrh	r2, [r3, #0]
 80047b6:	789b      	ldrb	r3, [r3, #2]
 80047b8:	81a2      	strh	r2, [r4, #12]
 80047ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80047c2:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <problem_fetch+0x3028>)
 80047c4:	461c      	mov	r4, r3
 80047c6:	4613      	mov	r3, r2
 80047c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047ca:	6020      	str	r0, [r4, #0]
 80047cc:	6061      	str	r1, [r4, #4]
 80047ce:	60a2      	str	r2, [r4, #8]
			break;
 80047d0:	f018 b80e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 65 :
			strcpy(p->name,"YURP");
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80047da:	4a78      	ldr	r2, [pc, #480]	; (80049bc <problem_fetch+0x302c>)
 80047dc:	6810      	ldr	r0, [r2, #0]
 80047de:	6018      	str	r0, [r3, #0]
 80047e0:	7912      	ldrb	r2, [r2, #4]
 80047e2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047ea:	4a6b      	ldr	r2, [pc, #428]	; (8004998 <problem_fetch+0x3008>)
 80047ec:	6810      	ldr	r0, [r2, #0]
 80047ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2206      	movs	r2, #6
 80047f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,G,I");
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	33a4      	adds	r3, #164	; 0xa4
 80047fa:	4a71      	ldr	r2, [pc, #452]	; (80049c0 <problem_fetch+0x3030>)
 80047fc:	461c      	mov	r4, r3
 80047fe:	4613      	mov	r3, r2
 8004800:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004802:	6020      	str	r0, [r4, #0]
 8004804:	6061      	str	r1, [r4, #4]
 8004806:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,12,14,18");
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4a6d      	ldr	r2, [pc, #436]	; (80049c4 <problem_fetch+0x3034>)
 800480e:	461c      	mov	r4, r3
 8004810:	4615      	mov	r5, r2
 8004812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004814:	6020      	str	r0, [r4, #0]
 8004816:	6061      	str	r1, [r4, #4]
 8004818:	60a2      	str	r2, [r4, #8]
 800481a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004822:	4a65      	ldr	r2, [pc, #404]	; (80049b8 <problem_fetch+0x3028>)
 8004824:	461c      	mov	r4, r3
 8004826:	4613      	mov	r3, r2
 8004828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800482a:	6020      	str	r0, [r4, #0]
 800482c:	6061      	str	r1, [r4, #4]
 800482e:	60a2      	str	r2, [r4, #8]
			break;
 8004830:	f017 bfde 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 66 :
			strcpy(p->name,"POALET");
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800483a:	4a63      	ldr	r2, [pc, #396]	; (80049c8 <problem_fetch+0x3038>)
 800483c:	6810      	ldr	r0, [r2, #0]
 800483e:	6018      	str	r0, [r3, #0]
 8004840:	8891      	ldrh	r1, [r2, #4]
 8004842:	7992      	ldrb	r2, [r2, #6]
 8004844:	8099      	strh	r1, [r3, #4]
 8004846:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800484e:	4a5f      	ldr	r2, [pc, #380]	; (80049cc <problem_fetch+0x303c>)
 8004850:	8811      	ldrh	r1, [r2, #0]
 8004852:	7892      	ldrb	r2, [r2, #2]
 8004854:	8019      	strh	r1, [r3, #0]
 8004856:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2207      	movs	r2, #7
 800485c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,I,E,I,J,G");
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	33a4      	adds	r3, #164	; 0xa4
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <problem_fetch+0x3040>)
 8004864:	461c      	mov	r4, r3
 8004866:	4613      	mov	r3, r2
 8004868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800486a:	6020      	str	r0, [r4, #0]
 800486c:	6061      	str	r1, [r4, #4]
 800486e:	60a2      	str	r2, [r4, #8]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,11,14,16,18,7,6");
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4a56      	ldr	r2, [pc, #344]	; (80049d4 <problem_fetch+0x3044>)
 800487a:	461d      	mov	r5, r3
 800487c:	4614      	mov	r4, r2
 800487e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004880:	6028      	str	r0, [r5, #0]
 8004882:	6069      	str	r1, [r5, #4]
 8004884:	60aa      	str	r2, [r5, #8]
 8004886:	60eb      	str	r3, [r5, #12]
 8004888:	8823      	ldrh	r3, [r4, #0]
 800488a:	78a2      	ldrb	r2, [r4, #2]
 800488c:	822b      	strh	r3, [r5, #16]
 800488e:	4613      	mov	r3, r2
 8004890:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004898:	4a4f      	ldr	r2, [pc, #316]	; (80049d8 <problem_fetch+0x3048>)
 800489a:	461c      	mov	r4, r3
 800489c:	4613      	mov	r3, r2
 800489e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048a0:	6020      	str	r0, [r4, #0]
 80048a2:	6061      	str	r1, [r4, #4]
 80048a4:	60a2      	str	r2, [r4, #8]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	81a3      	strh	r3, [r4, #12]
			break;
 80048aa:	f017 bfa1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 67 :
			strcpy(p->name,"TORCI SPALLA");
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80048b4:	4a49      	ldr	r2, [pc, #292]	; (80049dc <problem_fetch+0x304c>)
 80048b6:	461c      	mov	r4, r3
 80048b8:	4613      	mov	r3, r2
 80048ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048bc:	6020      	str	r0, [r4, #0]
 80048be:	6061      	str	r1, [r4, #4]
 80048c0:	60a2      	str	r2, [r4, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048cc:	4a44      	ldr	r2, [pc, #272]	; (80049e0 <problem_fetch+0x3050>)
 80048ce:	6810      	ldr	r0, [r2, #0]
 80048d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2208      	movs	r2, #8
 80048d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,A,B,G,I");
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	33a4      	adds	r3, #164	; 0xa4
 80048dc:	4a41      	ldr	r2, [pc, #260]	; (80049e4 <problem_fetch+0x3054>)
 80048de:	461c      	mov	r4, r3
 80048e0:	4615      	mov	r5, r2
 80048e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e4:	6020      	str	r0, [r4, #0]
 80048e6:	6061      	str	r1, [r4, #4]
 80048e8:	60a2      	str	r2, [r4, #8]
 80048ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,11,12,14,15,17,18");
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4a3d      	ldr	r2, [pc, #244]	; (80049e8 <problem_fetch+0x3058>)
 80048f2:	461c      	mov	r4, r3
 80048f4:	4615      	mov	r5, r2
 80048f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048f8:	6020      	str	r0, [r4, #0]
 80048fa:	6061      	str	r1, [r4, #4]
 80048fc:	60a2      	str	r2, [r4, #8]
 80048fe:	60e3      	str	r3, [r4, #12]
 8004900:	6828      	ldr	r0, [r5, #0]
 8004902:	6120      	str	r0, [r4, #16]
 8004904:	88ab      	ldrh	r3, [r5, #4]
 8004906:	79aa      	ldrb	r2, [r5, #6]
 8004908:	82a3      	strh	r3, [r4, #20]
 800490a:	4613      	mov	r3, r2
 800490c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <problem_fetch+0x305c>)
 8004916:	461c      	mov	r4, r3
 8004918:	4615      	mov	r5, r2
 800491a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800491c:	6020      	str	r0, [r4, #0]
 800491e:	6061      	str	r1, [r4, #4]
 8004920:	60a2      	str	r2, [r4, #8]
 8004922:	60e3      	str	r3, [r4, #12]
			break;
 8004924:	f017 bf64 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 68 :
			strcpy(p->name,"INVERTIDOSO");
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800492e:	4a30      	ldr	r2, [pc, #192]	; (80049f0 <problem_fetch+0x3060>)
 8004930:	461c      	mov	r4, r3
 8004932:	4613      	mov	r3, r2
 8004934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004936:	6020      	str	r0, [r4, #0]
 8004938:	6061      	str	r1, [r4, #4]
 800493a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004942:	4a2c      	ldr	r2, [pc, #176]	; (80049f4 <problem_fetch+0x3064>)
 8004944:	8811      	ldrh	r1, [r2, #0]
 8004946:	7892      	ldrb	r2, [r2, #2]
 8004948:	8019      	strh	r1, [r3, #0]
 800494a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2205      	movs	r2, #5
 8004950:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,F,I");
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	33a4      	adds	r3, #164	; 0xa4
 8004956:	4928      	ldr	r1, [pc, #160]	; (80049f8 <problem_fetch+0x3068>)
 8004958:	461a      	mov	r2, r3
 800495a:	460b      	mov	r3, r1
 800495c:	cb03      	ldmia	r3!, {r0, r1}
 800495e:	6010      	str	r0, [r2, #0]
 8004960:	6051      	str	r1, [r2, #4]
 8004962:	881b      	ldrh	r3, [r3, #0]
 8004964:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3304      	adds	r3, #4
 800496a:	4a24      	ldr	r2, [pc, #144]	; (80049fc <problem_fetch+0x306c>)
 800496c:	461c      	mov	r4, r3
 800496e:	4613      	mov	r3, r2
 8004970:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004972:	6020      	str	r0, [r4, #0]
 8004974:	6061      	str	r1, [r4, #4]
 8004976:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800497e:	4920      	ldr	r1, [pc, #128]	; (8004a00 <problem_fetch+0x3070>)
 8004980:	461a      	mov	r2, r3
 8004982:	460b      	mov	r3, r1
 8004984:	cb03      	ldmia	r3!, {r0, r1}
 8004986:	6010      	str	r0, [r2, #0]
 8004988:	6051      	str	r1, [r2, #4]
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	8113      	strh	r3, [r2, #8]
			break;
 800498e:	f017 bf2f 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8004992:	bf00      	nop
 8004994:	08024884 	.word	0x08024884
 8004998:	08023b90 	.word	0x08023b90
 800499c:	0802488c 	.word	0x0802488c
 80049a0:	0802489c 	.word	0x0802489c
 80049a4:	08023c08 	.word	0x08023c08
 80049a8:	080248b0 	.word	0x080248b0
 80049ac:	08023d30 	.word	0x08023d30
 80049b0:	080248c0 	.word	0x080248c0
 80049b4:	080248cc 	.word	0x080248cc
 80049b8:	08023f2c 	.word	0x08023f2c
 80049bc:	080248dc 	.word	0x080248dc
 80049c0:	080248e4 	.word	0x080248e4
 80049c4:	080248f0 	.word	0x080248f0
 80049c8:	08024900 	.word	0x08024900
 80049cc:	08023c5c 	.word	0x08023c5c
 80049d0:	08024908 	.word	0x08024908
 80049d4:	08024918 	.word	0x08024918
 80049d8:	0802492c 	.word	0x0802492c
 80049dc:	0802493c 	.word	0x0802493c
 80049e0:	08023ccc 	.word	0x08023ccc
 80049e4:	0802494c 	.word	0x0802494c
 80049e8:	0802495c 	.word	0x0802495c
 80049ec:	08023da0 	.word	0x08023da0
 80049f0:	08024974 	.word	0x08024974
 80049f4:	08024288 	.word	0x08024288
 80049f8:	08024980 	.word	0x08024980
 80049fc:	0802498c 	.word	0x0802498c
 8004a00:	0802405c 	.word	0x0802405c
		case 69 :
			strcpy(p->name,"BLACK BLOCK X");
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a0a:	4ac0      	ldr	r2, [pc, #768]	; (8004d0c <problem_fetch+0x337c>)
 8004a0c:	461c      	mov	r4, r3
 8004a0e:	4613      	mov	r3, r2
 8004a10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a12:	6020      	str	r0, [r4, #0]
 8004a14:	6061      	str	r1, [r4, #4]
 8004a16:	60a2      	str	r2, [r4, #8]
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a22:	4abb      	ldr	r2, [pc, #748]	; (8004d10 <problem_fetch+0x3380>)
 8004a24:	8811      	ldrh	r1, [r2, #0]
 8004a26:	7892      	ldrb	r2, [r2, #2]
 8004a28:	8019      	strh	r1, [r3, #0]
 8004a2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2208      	movs	r2, #8
 8004a30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I,G,I,E");
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	33a4      	adds	r3, #164	; 0xa4
 8004a36:	4ab7      	ldr	r2, [pc, #732]	; (8004d14 <problem_fetch+0x3384>)
 8004a38:	461c      	mov	r4, r3
 8004a3a:	4615      	mov	r5, r2
 8004a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a3e:	6020      	str	r0, [r4, #0]
 8004a40:	6061      	str	r1, [r4, #4]
 8004a42:	60a2      	str	r2, [r4, #8]
 8004a44:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,17,18,6");
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4ab3      	ldr	r2, [pc, #716]	; (8004d18 <problem_fetch+0x3388>)
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	4614      	mov	r4, r2
 8004a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a52:	6028      	str	r0, [r5, #0]
 8004a54:	6069      	str	r1, [r5, #4]
 8004a56:	60aa      	str	r2, [r5, #8]
 8004a58:	60eb      	str	r3, [r5, #12]
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	6128      	str	r0, [r5, #16]
 8004a5e:	7923      	ldrb	r3, [r4, #4]
 8004a60:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s");
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004a68:	4aac      	ldr	r2, [pc, #688]	; (8004d1c <problem_fetch+0x338c>)
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	4615      	mov	r5, r2
 8004a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a70:	6020      	str	r0, [r4, #0]
 8004a72:	6061      	str	r1, [r4, #4]
 8004a74:	60a2      	str	r2, [r4, #8]
 8004a76:	60e3      	str	r3, [r4, #12]
			break;
 8004a78:	f017 beba 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 70 :
			strcpy(p->name,"LADYBUG CLEAN");
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a82:	4aa7      	ldr	r2, [pc, #668]	; (8004d20 <problem_fetch+0x3390>)
 8004a84:	461c      	mov	r4, r3
 8004a86:	4613      	mov	r3, r2
 8004a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a8a:	6020      	str	r0, [r4, #0]
 8004a8c:	6061      	str	r1, [r4, #4]
 8004a8e:	60a2      	str	r2, [r4, #8]
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a9a:	4aa2      	ldr	r2, [pc, #648]	; (8004d24 <problem_fetch+0x3394>)
 8004a9c:	6810      	ldr	r0, [r2, #0]
 8004a9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2206      	movs	r2, #6
 8004aa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,F,C,D");
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	33a4      	adds	r3, #164	; 0xa4
 8004aaa:	4a9f      	ldr	r2, [pc, #636]	; (8004d28 <problem_fetch+0x3398>)
 8004aac:	461c      	mov	r4, r3
 8004aae:	4613      	mov	r3, r2
 8004ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ab2:	6020      	str	r0, [r4, #0]
 8004ab4:	6061      	str	r1, [r4, #4]
 8004ab6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,11,13,18");
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4a9b      	ldr	r2, [pc, #620]	; (8004d2c <problem_fetch+0x339c>)
 8004abe:	461c      	mov	r4, r3
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac4:	6020      	str	r0, [r4, #0]
 8004ac6:	6061      	str	r1, [r4, #4]
 8004ac8:	60a2      	str	r2, [r4, #8]
 8004aca:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004ad2:	4a97      	ldr	r2, [pc, #604]	; (8004d30 <problem_fetch+0x33a0>)
 8004ad4:	461c      	mov	r4, r3
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ada:	6020      	str	r0, [r4, #0]
 8004adc:	6061      	str	r1, [r4, #4]
 8004ade:	60a2      	str	r2, [r4, #8]
			break;
 8004ae0:	f017 be86 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 71 :
			strcpy(p->name,"POCKET FULL OF DREAMS");
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004aea:	4a92      	ldr	r2, [pc, #584]	; (8004d34 <problem_fetch+0x33a4>)
 8004aec:	461d      	mov	r5, r3
 8004aee:	4614      	mov	r4, r2
 8004af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af2:	6028      	str	r0, [r5, #0]
 8004af4:	6069      	str	r1, [r5, #4]
 8004af6:	60aa      	str	r2, [r5, #8]
 8004af8:	60eb      	str	r3, [r5, #12]
 8004afa:	6820      	ldr	r0, [r4, #0]
 8004afc:	6128      	str	r0, [r5, #16]
 8004afe:	88a3      	ldrh	r3, [r4, #4]
 8004b00:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b08:	4a8b      	ldr	r2, [pc, #556]	; (8004d38 <problem_fetch+0x33a8>)
 8004b0a:	6810      	ldr	r0, [r2, #0]
 8004b0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2208      	movs	r2, #8
 8004b12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,B,A,E,D");
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	33a4      	adds	r3, #164	; 0xa4
 8004b18:	4a88      	ldr	r2, [pc, #544]	; (8004d3c <problem_fetch+0x33ac>)
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b20:	6020      	str	r0, [r4, #0]
 8004b22:	6061      	str	r1, [r4, #4]
 8004b24:	60a2      	str	r2, [r4, #8]
 8004b26:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,12,14,14,18");
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4a84      	ldr	r2, [pc, #528]	; (8004d40 <problem_fetch+0x33b0>)
 8004b2e:	461d      	mov	r5, r3
 8004b30:	4614      	mov	r4, r2
 8004b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b34:	6028      	str	r0, [r5, #0]
 8004b36:	6069      	str	r1, [r5, #4]
 8004b38:	60aa      	str	r2, [r5, #8]
 8004b3a:	60eb      	str	r3, [r5, #12]
 8004b3c:	6820      	ldr	r0, [r4, #0]
 8004b3e:	6128      	str	r0, [r5, #16]
 8004b40:	7923      	ldrb	r3, [r4, #4]
 8004b42:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004b4a:	4a7e      	ldr	r2, [pc, #504]	; (8004d44 <problem_fetch+0x33b4>)
 8004b4c:	461c      	mov	r4, r3
 8004b4e:	4615      	mov	r5, r2
 8004b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b52:	6020      	str	r0, [r4, #0]
 8004b54:	6061      	str	r1, [r4, #4]
 8004b56:	60a2      	str	r2, [r4, #8]
 8004b58:	60e3      	str	r3, [r4, #12]
			break;
 8004b5a:	f017 be49 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 72 :
			strcpy(p->name,"TAFFO");
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b64:	4a78      	ldr	r2, [pc, #480]	; (8004d48 <problem_fetch+0x33b8>)
 8004b66:	6810      	ldr	r0, [r2, #0]
 8004b68:	6018      	str	r0, [r3, #0]
 8004b6a:	8892      	ldrh	r2, [r2, #4]
 8004b6c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b74:	4a70      	ldr	r2, [pc, #448]	; (8004d38 <problem_fetch+0x33a8>)
 8004b76:	6810      	ldr	r0, [r2, #0]
 8004b78:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2206      	movs	r2, #6
 8004b7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,C,D,A");
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	33a4      	adds	r3, #164	; 0xa4
 8004b84:	4a71      	ldr	r2, [pc, #452]	; (8004d4c <problem_fetch+0x33bc>)
 8004b86:	461c      	mov	r4, r3
 8004b88:	4613      	mov	r3, r2
 8004b8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b8c:	6020      	str	r0, [r4, #0]
 8004b8e:	6061      	str	r1, [r4, #4]
 8004b90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,13,15,18");
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4a6e      	ldr	r2, [pc, #440]	; (8004d50 <problem_fetch+0x33c0>)
 8004b98:	461c      	mov	r4, r3
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b9e:	6020      	str	r0, [r4, #0]
 8004ba0:	6061      	str	r1, [r4, #4]
 8004ba2:	60a2      	str	r2, [r4, #8]
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	789b      	ldrb	r3, [r3, #2]
 8004ba8:	81a2      	strh	r2, [r4, #12]
 8004baa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004bb2:	4a68      	ldr	r2, [pc, #416]	; (8004d54 <problem_fetch+0x33c4>)
 8004bb4:	461c      	mov	r4, r3
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004bba:	6020      	str	r0, [r4, #0]
 8004bbc:	6061      	str	r1, [r4, #4]
 8004bbe:	60a2      	str	r2, [r4, #8]
			break;
 8004bc0:	f017 be16 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 73 :
			strcpy(p->name,"BLACK GECKO");
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bca:	4a63      	ldr	r2, [pc, #396]	; (8004d58 <problem_fetch+0x33c8>)
 8004bcc:	461c      	mov	r4, r3
 8004bce:	4613      	mov	r3, r2
 8004bd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	6061      	str	r1, [r4, #4]
 8004bd6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bde:	4a5f      	ldr	r2, [pc, #380]	; (8004d5c <problem_fetch+0x33cc>)
 8004be0:	6810      	ldr	r0, [r2, #0]
 8004be2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2206      	movs	r2, #6
 8004be8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,C,E,D");
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	33a4      	adds	r3, #164	; 0xa4
 8004bee:	4a5c      	ldr	r2, [pc, #368]	; (8004d60 <problem_fetch+0x33d0>)
 8004bf0:	461c      	mov	r4, r3
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	6061      	str	r1, [r4, #4]
 8004bfa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,14,18");
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	4a58      	ldr	r2, [pc, #352]	; (8004d64 <problem_fetch+0x33d4>)
 8004c02:	461c      	mov	r4, r3
 8004c04:	4615      	mov	r5, r2
 8004c06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c08:	6020      	str	r0, [r4, #0]
 8004c0a:	6061      	str	r1, [r4, #4]
 8004c0c:	60a2      	str	r2, [r4, #8]
 8004c0e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004c16:	4a46      	ldr	r2, [pc, #280]	; (8004d30 <problem_fetch+0x33a0>)
 8004c18:	461c      	mov	r4, r3
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c1e:	6020      	str	r0, [r4, #0]
 8004c20:	6061      	str	r1, [r4, #4]
 8004c22:	60a2      	str	r2, [r4, #8]
			break;
 8004c24:	f017 bde4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 74 :
			strcpy(p->name,"BREATHE");
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c2e:	494e      	ldr	r1, [pc, #312]	; (8004d68 <problem_fetch+0x33d8>)
 8004c30:	461a      	mov	r2, r3
 8004c32:	460b      	mov	r3, r1
 8004c34:	cb03      	ldmia	r3!, {r0, r1}
 8004c36:	6010      	str	r0, [r2, #0]
 8004c38:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c40:	4a4a      	ldr	r2, [pc, #296]	; (8004d6c <problem_fetch+0x33dc>)
 8004c42:	8811      	ldrh	r1, [r2, #0]
 8004c44:	7892      	ldrb	r2, [r2, #2]
 8004c46:	8019      	strh	r1, [r3, #0]
 8004c48:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,H,C,B,F,G,I,J");
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	33a4      	adds	r3, #164	; 0xa4
 8004c54:	4a46      	ldr	r2, [pc, #280]	; (8004d70 <problem_fetch+0x33e0>)
 8004c56:	461d      	mov	r5, r3
 8004c58:	4614      	mov	r4, r2
 8004c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5c:	6028      	str	r0, [r5, #0]
 8004c5e:	6069      	str	r1, [r5, #4]
 8004c60:	60aa      	str	r2, [r5, #8]
 8004c62:	60eb      	str	r3, [r5, #12]
 8004c64:	6820      	ldr	r0, [r4, #0]
 8004c66:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"8,9,12,5,5,6,13,15,18,12");
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <problem_fetch+0x33e4>)
 8004c6e:	461d      	mov	r5, r3
 8004c70:	4614      	mov	r4, r2
 8004c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c74:	6028      	str	r0, [r5, #0]
 8004c76:	6069      	str	r1, [r5, #4]
 8004c78:	60aa      	str	r2, [r5, #8]
 8004c7a:	60eb      	str	r3, [r5, #12]
 8004c7c:	cc03      	ldmia	r4!, {r0, r1}
 8004c7e:	6128      	str	r0, [r5, #16]
 8004c80:	6169      	str	r1, [r5, #20]
 8004c82:	7823      	ldrb	r3, [r4, #0]
 8004c84:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"d,d,d,d,s,s,d,d,e,d");
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004c8c:	4a3a      	ldr	r2, [pc, #232]	; (8004d78 <problem_fetch+0x33e8>)
 8004c8e:	461d      	mov	r5, r3
 8004c90:	4614      	mov	r4, r2
 8004c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c94:	6028      	str	r0, [r5, #0]
 8004c96:	6069      	str	r1, [r5, #4]
 8004c98:	60aa      	str	r2, [r5, #8]
 8004c9a:	60eb      	str	r3, [r5, #12]
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	6128      	str	r0, [r5, #16]
			break;
 8004ca0:	f017 bda6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 75 :
			strcpy(p->name,"THE GRANARY");
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004caa:	4a34      	ldr	r2, [pc, #208]	; (8004d7c <problem_fetch+0x33ec>)
 8004cac:	461c      	mov	r4, r3
 8004cae:	4613      	mov	r3, r2
 8004cb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004cb2:	6020      	str	r0, [r4, #0]
 8004cb4:	6061      	str	r1, [r4, #4]
 8004cb6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004cbe:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <problem_fetch+0x33dc>)
 8004cc0:	8811      	ldrh	r1, [r2, #0]
 8004cc2:	7892      	ldrb	r2, [r2, #2]
 8004cc4:	8019      	strh	r1, [r3, #0]
 8004cc6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2206      	movs	r2, #6
 8004ccc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,C,D,D");
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	33a4      	adds	r3, #164	; 0xa4
 8004cd2:	4a2b      	ldr	r2, [pc, #172]	; (8004d80 <problem_fetch+0x33f0>)
 8004cd4:	461c      	mov	r4, r3
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004cda:	6020      	str	r0, [r4, #0]
 8004cdc:	6061      	str	r1, [r4, #4]
 8004cde:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,15,18");
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	4a27      	ldr	r2, [pc, #156]	; (8004d84 <problem_fetch+0x33f4>)
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	4615      	mov	r5, r2
 8004cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cec:	6020      	str	r0, [r4, #0]
 8004cee:	6061      	str	r1, [r4, #4]
 8004cf0:	60a2      	str	r2, [r4, #8]
 8004cf2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004cfa:	4a0d      	ldr	r2, [pc, #52]	; (8004d30 <problem_fetch+0x33a0>)
 8004cfc:	461c      	mov	r4, r3
 8004cfe:	4613      	mov	r3, r2
 8004d00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	6061      	str	r1, [r4, #4]
 8004d06:	60a2      	str	r2, [r4, #8]
			break;
 8004d08:	f017 bd72 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8004d0c:	08024998 	.word	0x08024998
 8004d10:	08023c5c 	.word	0x08023c5c
 8004d14:	080249a8 	.word	0x080249a8
 8004d18:	080249b8 	.word	0x080249b8
 8004d1c:	080249d0 	.word	0x080249d0
 8004d20:	080249e0 	.word	0x080249e0
 8004d24:	08023d30 	.word	0x08023d30
 8004d28:	080249f0 	.word	0x080249f0
 8004d2c:	080249fc 	.word	0x080249fc
 8004d30:	08023b70 	.word	0x08023b70
 8004d34:	08024a0c 	.word	0x08024a0c
 8004d38:	08023b90 	.word	0x08023b90
 8004d3c:	08024a24 	.word	0x08024a24
 8004d40:	08024a34 	.word	0x08024a34
 8004d44:	08023da0 	.word	0x08023da0
 8004d48:	08024a4c 	.word	0x08024a4c
 8004d4c:	08024a54 	.word	0x08024a54
 8004d50:	08024a60 	.word	0x08024a60
 8004d54:	08023f2c 	.word	0x08023f2c
 8004d58:	08024a70 	.word	0x08024a70
 8004d5c:	08023c28 	.word	0x08023c28
 8004d60:	08024a7c 	.word	0x08024a7c
 8004d64:	08024a88 	.word	0x08024a88
 8004d68:	08024a98 	.word	0x08024a98
 8004d6c:	08023b50 	.word	0x08023b50
 8004d70:	08024aa0 	.word	0x08024aa0
 8004d74:	08024ab4 	.word	0x08024ab4
 8004d78:	08024ad0 	.word	0x08024ad0
 8004d7c:	08024ae4 	.word	0x08024ae4
 8004d80:	08024af0 	.word	0x08024af0
 8004d84:	08024afc 	.word	0x08024afc
		case 76 :
			strcpy(p->name,"SMALL HOT 3 SPLENDA");
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d8e:	4aaf      	ldr	r2, [pc, #700]	; (800504c <problem_fetch+0x36bc>)
 8004d90:	461d      	mov	r5, r3
 8004d92:	4614      	mov	r4, r2
 8004d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d96:	6028      	str	r0, [r5, #0]
 8004d98:	6069      	str	r1, [r5, #4]
 8004d9a:	60aa      	str	r2, [r5, #8]
 8004d9c:	60eb      	str	r3, [r5, #12]
 8004d9e:	6820      	ldr	r0, [r4, #0]
 8004da0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004da8:	4aa9      	ldr	r2, [pc, #676]	; (8005050 <problem_fetch+0x36c0>)
 8004daa:	6810      	ldr	r0, [r2, #0]
 8004dac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2206      	movs	r2, #6
 8004db2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,I,E,D");
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	33a4      	adds	r3, #164	; 0xa4
 8004db8:	4aa6      	ldr	r2, [pc, #664]	; (8005054 <problem_fetch+0x36c4>)
 8004dba:	461c      	mov	r4, r3
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dc0:	6020      	str	r0, [r4, #0]
 8004dc2:	6061      	str	r1, [r4, #4]
 8004dc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4aa3      	ldr	r2, [pc, #652]	; (8005058 <problem_fetch+0x36c8>)
 8004dcc:	461d      	mov	r5, r3
 8004dce:	4614      	mov	r4, r2
 8004dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd2:	6028      	str	r0, [r5, #0]
 8004dd4:	6069      	str	r1, [r5, #4]
 8004dd6:	60aa      	str	r2, [r5, #8]
 8004dd8:	60eb      	str	r3, [r5, #12]
 8004dda:	7823      	ldrb	r3, [r4, #0]
 8004ddc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004de4:	4a9d      	ldr	r2, [pc, #628]	; (800505c <problem_fetch+0x36cc>)
 8004de6:	461c      	mov	r4, r3
 8004de8:	4613      	mov	r3, r2
 8004dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004dec:	6020      	str	r0, [r4, #0]
 8004dee:	6061      	str	r1, [r4, #4]
 8004df0:	60a2      	str	r2, [r4, #8]
			break;
 8004df2:	f017 bcfd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 77 :
			strcpy(p->name,"WALLABY");
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004dfc:	4998      	ldr	r1, [pc, #608]	; (8005060 <problem_fetch+0x36d0>)
 8004dfe:	461a      	mov	r2, r3
 8004e00:	460b      	mov	r3, r1
 8004e02:	cb03      	ldmia	r3!, {r0, r1}
 8004e04:	6010      	str	r0, [r2, #0]
 8004e06:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e0e:	4a95      	ldr	r2, [pc, #596]	; (8005064 <problem_fetch+0x36d4>)
 8004e10:	8811      	ldrh	r1, [r2, #0]
 8004e12:	7892      	ldrb	r2, [r2, #2]
 8004e14:	8019      	strh	r1, [r3, #0]
 8004e16:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2209      	movs	r2, #9
 8004e1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,F,E,J,I,H,I");
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	33a4      	adds	r3, #164	; 0xa4
 8004e22:	4a91      	ldr	r2, [pc, #580]	; (8005068 <problem_fetch+0x36d8>)
 8004e24:	461d      	mov	r5, r3
 8004e26:	4614      	mov	r4, r2
 8004e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e2a:	6028      	str	r0, [r5, #0]
 8004e2c:	6069      	str	r1, [r5, #4]
 8004e2e:	60aa      	str	r2, [r5, #8]
 8004e30:	60eb      	str	r3, [r5, #12]
 8004e32:	8823      	ldrh	r3, [r4, #0]
 8004e34:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,11,12,7,14,16,18");
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4a8c      	ldr	r2, [pc, #560]	; (800506c <problem_fetch+0x36dc>)
 8004e3c:	461c      	mov	r4, r3
 8004e3e:	4615      	mov	r5, r2
 8004e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e42:	6020      	str	r0, [r4, #0]
 8004e44:	6061      	str	r1, [r4, #4]
 8004e46:	60a2      	str	r2, [r4, #8]
 8004e48:	60e3      	str	r3, [r4, #12]
 8004e4a:	6828      	ldr	r0, [r5, #0]
 8004e4c:	6120      	str	r0, [r4, #16]
 8004e4e:	88ab      	ldrh	r3, [r5, #4]
 8004e50:	79aa      	ldrb	r2, [r5, #6]
 8004e52:	82a3      	strh	r3, [r4, #20]
 8004e54:	4613      	mov	r3, r2
 8004e56:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004e5e:	4a84      	ldr	r2, [pc, #528]	; (8005070 <problem_fetch+0x36e0>)
 8004e60:	461d      	mov	r5, r3
 8004e62:	4614      	mov	r4, r2
 8004e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e66:	6028      	str	r0, [r5, #0]
 8004e68:	6069      	str	r1, [r5, #4]
 8004e6a:	60aa      	str	r2, [r5, #8]
 8004e6c:	60eb      	str	r3, [r5, #12]
 8004e6e:	8823      	ldrh	r3, [r4, #0]
 8004e70:	822b      	strh	r3, [r5, #16]
			break;
 8004e72:	f017 bcbd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 78 :
			strcpy(p->name,"ESSEK");
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e7c:	4a7d      	ldr	r2, [pc, #500]	; (8005074 <problem_fetch+0x36e4>)
 8004e7e:	6810      	ldr	r0, [r2, #0]
 8004e80:	6018      	str	r0, [r3, #0]
 8004e82:	8892      	ldrh	r2, [r2, #4]
 8004e84:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e8c:	4a7a      	ldr	r2, [pc, #488]	; (8005078 <problem_fetch+0x36e8>)
 8004e8e:	6810      	ldr	r0, [r2, #0]
 8004e90:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2208      	movs	r2, #8
 8004e96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,E,G,G,G,D");
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	33a4      	adds	r3, #164	; 0xa4
 8004e9c:	4a77      	ldr	r2, [pc, #476]	; (800507c <problem_fetch+0x36ec>)
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	4615      	mov	r5, r2
 8004ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ea4:	6020      	str	r0, [r4, #0]
 8004ea6:	6061      	str	r1, [r4, #4]
 8004ea8:	60a2      	str	r2, [r4, #8]
 8004eaa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,14,15,17,18");
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4a73      	ldr	r2, [pc, #460]	; (8005080 <problem_fetch+0x36f0>)
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	4614      	mov	r4, r2
 8004eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004eb8:	6028      	str	r0, [r5, #0]
 8004eba:	6069      	str	r1, [r5, #4]
 8004ebc:	60aa      	str	r2, [r5, #8]
 8004ebe:	60eb      	str	r3, [r5, #12]
 8004ec0:	6820      	ldr	r0, [r4, #0]
 8004ec2:	6128      	str	r0, [r5, #16]
 8004ec4:	88a3      	ldrh	r3, [r4, #4]
 8004ec6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004ece:	4a6d      	ldr	r2, [pc, #436]	; (8005084 <problem_fetch+0x36f4>)
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	4615      	mov	r5, r2
 8004ed4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ed6:	6020      	str	r0, [r4, #0]
 8004ed8:	6061      	str	r1, [r4, #4]
 8004eda:	60a2      	str	r2, [r4, #8]
 8004edc:	60e3      	str	r3, [r4, #12]
			break;
 8004ede:	f017 bc87 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 79 :
			strcpy(p->name,"BLACK MIRROR");
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ee8:	4a67      	ldr	r2, [pc, #412]	; (8005088 <problem_fetch+0x36f8>)
 8004eea:	461c      	mov	r4, r3
 8004eec:	4613      	mov	r3, r2
 8004eee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ef0:	6020      	str	r0, [r4, #0]
 8004ef2:	6061      	str	r1, [r4, #4]
 8004ef4:	60a2      	str	r2, [r4, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f00:	4a62      	ldr	r2, [pc, #392]	; (800508c <problem_fetch+0x36fc>)
 8004f02:	8811      	ldrh	r1, [r2, #0]
 8004f04:	7892      	ldrb	r2, [r2, #2]
 8004f06:	8019      	strh	r1, [r3, #0]
 8004f08:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,F,E,D,G,I");
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	33a4      	adds	r3, #164	; 0xa4
 8004f14:	4a5e      	ldr	r2, [pc, #376]	; (8005090 <problem_fetch+0x3700>)
 8004f16:	461c      	mov	r4, r3
 8004f18:	4615      	mov	r5, r2
 8004f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f1c:	6020      	str	r0, [r4, #0]
 8004f1e:	6061      	str	r1, [r4, #4]
 8004f20:	60a2      	str	r2, [r4, #8]
 8004f22:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,15,17,18");
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4a5a      	ldr	r2, [pc, #360]	; (8005094 <problem_fetch+0x3704>)
 8004f2a:	461d      	mov	r5, r3
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f30:	6028      	str	r0, [r5, #0]
 8004f32:	6069      	str	r1, [r5, #4]
 8004f34:	60aa      	str	r2, [r5, #8]
 8004f36:	60eb      	str	r3, [r5, #12]
 8004f38:	6820      	ldr	r0, [r4, #0]
 8004f3a:	6128      	str	r0, [r5, #16]
 8004f3c:	7923      	ldrb	r3, [r4, #4]
 8004f3e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004f46:	4a54      	ldr	r2, [pc, #336]	; (8005098 <problem_fetch+0x3708>)
 8004f48:	461c      	mov	r4, r3
 8004f4a:	4615      	mov	r5, r2
 8004f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f4e:	6020      	str	r0, [r4, #0]
 8004f50:	6061      	str	r1, [r4, #4]
 8004f52:	60a2      	str	r2, [r4, #8]
 8004f54:	60e3      	str	r3, [r4, #12]
			break;
 8004f56:	f017 bc4b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 80 :
			strcpy(p->name,"Z3GZAG");
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f60:	4a4e      	ldr	r2, [pc, #312]	; (800509c <problem_fetch+0x370c>)
 8004f62:	6810      	ldr	r0, [r2, #0]
 8004f64:	6018      	str	r0, [r3, #0]
 8004f66:	8891      	ldrh	r1, [r2, #4]
 8004f68:	7992      	ldrb	r2, [r2, #6]
 8004f6a:	8099      	strh	r1, [r3, #4]
 8004f6c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f74:	4a36      	ldr	r2, [pc, #216]	; (8005050 <problem_fetch+0x36c0>)
 8004f76:	6810      	ldr	r0, [r2, #0]
 8004f78:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2209      	movs	r2, #9
 8004f7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,I,G,G,D,E");
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	33a4      	adds	r3, #164	; 0xa4
 8004f84:	4a46      	ldr	r2, [pc, #280]	; (80050a0 <problem_fetch+0x3710>)
 8004f86:	461d      	mov	r5, r3
 8004f88:	4614      	mov	r4, r2
 8004f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f8c:	6028      	str	r0, [r5, #0]
 8004f8e:	6069      	str	r1, [r5, #4]
 8004f90:	60aa      	str	r2, [r5, #8]
 8004f92:	60eb      	str	r3, [r5, #12]
 8004f94:	8823      	ldrh	r3, [r4, #0]
 8004f96:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18,6");
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4a41      	ldr	r2, [pc, #260]	; (80050a4 <problem_fetch+0x3714>)
 8004f9e:	461d      	mov	r5, r3
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fa4:	6028      	str	r0, [r5, #0]
 8004fa6:	6069      	str	r1, [r5, #4]
 8004fa8:	60aa      	str	r2, [r5, #8]
 8004faa:	60eb      	str	r3, [r5, #12]
 8004fac:	cc03      	ldmia	r4!, {r0, r1}
 8004fae:	6128      	str	r0, [r5, #16]
 8004fb0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004fb8:	4a3b      	ldr	r2, [pc, #236]	; (80050a8 <problem_fetch+0x3718>)
 8004fba:	461d      	mov	r5, r3
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	6069      	str	r1, [r5, #4]
 8004fc4:	60aa      	str	r2, [r5, #8]
 8004fc6:	60eb      	str	r3, [r5, #12]
 8004fc8:	8823      	ldrh	r3, [r4, #0]
 8004fca:	822b      	strh	r3, [r5, #16]
			break;
 8004fcc:	f017 bc10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 81 :
			strcpy(p->name,"WHO NEEDS DR. GREG");
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fd6:	4a35      	ldr	r2, [pc, #212]	; (80050ac <problem_fetch+0x371c>)
 8004fd8:	461d      	mov	r5, r3
 8004fda:	4614      	mov	r4, r2
 8004fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fde:	6028      	str	r0, [r5, #0]
 8004fe0:	6069      	str	r1, [r5, #4]
 8004fe2:	60aa      	str	r2, [r5, #8]
 8004fe4:	60eb      	str	r3, [r5, #12]
 8004fe6:	8823      	ldrh	r3, [r4, #0]
 8004fe8:	78a2      	ldrb	r2, [r4, #2]
 8004fea:	822b      	strh	r3, [r5, #16]
 8004fec:	4613      	mov	r3, r2
 8004fee:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ff6:	4a2e      	ldr	r2, [pc, #184]	; (80050b0 <problem_fetch+0x3720>)
 8004ff8:	6810      	ldr	r0, [r2, #0]
 8004ffa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2207      	movs	r2, #7
 8005000:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,E,D,G,H,D");
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	33a4      	adds	r3, #164	; 0xa4
 8005006:	4a2b      	ldr	r2, [pc, #172]	; (80050b4 <problem_fetch+0x3724>)
 8005008:	461c      	mov	r4, r3
 800500a:	4613      	mov	r3, r2
 800500c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800500e:	6020      	str	r0, [r4, #0]
 8005010:	6061      	str	r1, [r4, #4]
 8005012:	60a2      	str	r2, [r4, #8]
 8005014:	881b      	ldrh	r3, [r3, #0]
 8005016:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,14,18,9,12,11");
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4a26      	ldr	r2, [pc, #152]	; (80050b8 <problem_fetch+0x3728>)
 800501e:	461d      	mov	r5, r3
 8005020:	4614      	mov	r4, r2
 8005022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005024:	6028      	str	r0, [r5, #0]
 8005026:	6069      	str	r1, [r5, #4]
 8005028:	60aa      	str	r2, [r5, #8]
 800502a:	60eb      	str	r3, [r5, #12]
 800502c:	8823      	ldrh	r3, [r4, #0]
 800502e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,e,d,d,d");
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005036:	4a21      	ldr	r2, [pc, #132]	; (80050bc <problem_fetch+0x372c>)
 8005038:	461c      	mov	r4, r3
 800503a:	4613      	mov	r3, r2
 800503c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800503e:	6020      	str	r0, [r4, #0]
 8005040:	6061      	str	r1, [r4, #4]
 8005042:	60a2      	str	r2, [r4, #8]
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	81a3      	strh	r3, [r4, #12]
			break;
 8005048:	f017 bbd2 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800504c:	08024b0c 	.word	0x08024b0c
 8005050:	08023b90 	.word	0x08023b90
 8005054:	08024b20 	.word	0x08024b20
 8005058:	08024b2c 	.word	0x08024b2c
 800505c:	08023f2c 	.word	0x08023f2c
 8005060:	08024b40 	.word	0x08024b40
 8005064:	08023c5c 	.word	0x08023c5c
 8005068:	08024b48 	.word	0x08024b48
 800506c:	08024b5c 	.word	0x08024b5c
 8005070:	08024b74 	.word	0x08024b74
 8005074:	08024b88 	.word	0x08024b88
 8005078:	08023c28 	.word	0x08023c28
 800507c:	08024b90 	.word	0x08024b90
 8005080:	08024ba0 	.word	0x08024ba0
 8005084:	08023cb4 	.word	0x08023cb4
 8005088:	08024bb8 	.word	0x08024bb8
 800508c:	080243c4 	.word	0x080243c4
 8005090:	08024bc8 	.word	0x08024bc8
 8005094:	08024bd8 	.word	0x08024bd8
 8005098:	08023da0 	.word	0x08023da0
 800509c:	08024bf0 	.word	0x08024bf0
 80050a0:	08024bf8 	.word	0x08024bf8
 80050a4:	08024c0c 	.word	0x08024c0c
 80050a8:	08024330 	.word	0x08024330
 80050ac:	08024c24 	.word	0x08024c24
 80050b0:	08023d30 	.word	0x08023d30
 80050b4:	08024c38 	.word	0x08024c38
 80050b8:	08024c48 	.word	0x08024c48
 80050bc:	08024c5c 	.word	0x08024c5c
		case 82 :
			strcpy(p->name,"BLACKTOP");
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80050c6:	49af      	ldr	r1, [pc, #700]	; (8005384 <problem_fetch+0x39f4>)
 80050c8:	461a      	mov	r2, r3
 80050ca:	460b      	mov	r3, r1
 80050cc:	cb03      	ldmia	r3!, {r0, r1}
 80050ce:	6010      	str	r0, [r2, #0]
 80050d0:	6051      	str	r1, [r2, #4]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80050dc:	4aaa      	ldr	r2, [pc, #680]	; (8005388 <problem_fetch+0x39f8>)
 80050de:	8811      	ldrh	r1, [r2, #0]
 80050e0:	7892      	ldrb	r2, [r2, #2]
 80050e2:	8019      	strh	r1, [r3, #0]
 80050e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2206      	movs	r2, #6
 80050ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,D,D");
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	33a4      	adds	r3, #164	; 0xa4
 80050f0:	4aa6      	ldr	r2, [pc, #664]	; (800538c <problem_fetch+0x39fc>)
 80050f2:	461c      	mov	r4, r3
 80050f4:	4613      	mov	r3, r2
 80050f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80050f8:	6020      	str	r0, [r4, #0]
 80050fa:	6061      	str	r1, [r4, #4]
 80050fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,14,11,18");
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	4aa3      	ldr	r2, [pc, #652]	; (8005390 <problem_fetch+0x3a00>)
 8005104:	461c      	mov	r4, r3
 8005106:	4613      	mov	r3, r2
 8005108:	cb07      	ldmia	r3!, {r0, r1, r2}
 800510a:	6020      	str	r0, [r4, #0]
 800510c:	6061      	str	r1, [r4, #4]
 800510e:	60a2      	str	r2, [r4, #8]
 8005110:	881a      	ldrh	r2, [r3, #0]
 8005112:	789b      	ldrb	r3, [r3, #2]
 8005114:	81a2      	strh	r2, [r4, #12]
 8005116:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800511e:	4a9d      	ldr	r2, [pc, #628]	; (8005394 <problem_fetch+0x3a04>)
 8005120:	461c      	mov	r4, r3
 8005122:	4613      	mov	r3, r2
 8005124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005126:	6020      	str	r0, [r4, #0]
 8005128:	6061      	str	r1, [r4, #4]
 800512a:	60a2      	str	r2, [r4, #8]
			break;
 800512c:	f017 bb60 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 83 :
			strcpy(p->name,"MURPHY STINKS");
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005136:	4a98      	ldr	r2, [pc, #608]	; (8005398 <problem_fetch+0x3a08>)
 8005138:	461c      	mov	r4, r3
 800513a:	4613      	mov	r3, r2
 800513c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800513e:	6020      	str	r0, [r4, #0]
 8005140:	6061      	str	r1, [r4, #4]
 8005142:	60a2      	str	r2, [r4, #8]
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800514e:	4a93      	ldr	r2, [pc, #588]	; (800539c <problem_fetch+0x3a0c>)
 8005150:	6810      	ldr	r0, [r2, #0]
 8005152:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2207      	movs	r2, #7
 8005158:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,I,J,I,J,J");
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	33a4      	adds	r3, #164	; 0xa4
 800515e:	4a90      	ldr	r2, [pc, #576]	; (80053a0 <problem_fetch+0x3a10>)
 8005160:	461c      	mov	r4, r3
 8005162:	4613      	mov	r3, r2
 8005164:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005166:	6020      	str	r0, [r4, #0]
 8005168:	6061      	str	r1, [r4, #4]
 800516a:	60a2      	str	r2, [r4, #8]
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,10,14,12,18,7,5");
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	3304      	adds	r3, #4
 8005174:	4a8b      	ldr	r2, [pc, #556]	; (80053a4 <problem_fetch+0x3a14>)
 8005176:	461d      	mov	r5, r3
 8005178:	4614      	mov	r4, r2
 800517a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800517c:	6028      	str	r0, [r5, #0]
 800517e:	6069      	str	r1, [r5, #4]
 8005180:	60aa      	str	r2, [r5, #8]
 8005182:	60eb      	str	r3, [r5, #12]
 8005184:	8823      	ldrh	r3, [r4, #0]
 8005186:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800518e:	4a86      	ldr	r2, [pc, #536]	; (80053a8 <problem_fetch+0x3a18>)
 8005190:	461c      	mov	r4, r3
 8005192:	4613      	mov	r3, r2
 8005194:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005196:	6020      	str	r0, [r4, #0]
 8005198:	6061      	str	r1, [r4, #4]
 800519a:	60a2      	str	r2, [r4, #8]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	81a3      	strh	r3, [r4, #12]
			break;
 80051a0:	f017 bb26 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 84 :
			strcpy(p->name,"BLACK HORSE");
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80051aa:	4a80      	ldr	r2, [pc, #512]	; (80053ac <problem_fetch+0x3a1c>)
 80051ac:	461c      	mov	r4, r3
 80051ae:	4613      	mov	r3, r2
 80051b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	6061      	str	r1, [r4, #4]
 80051b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80051be:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <problem_fetch+0x3a20>)
 80051c0:	6810      	ldr	r0, [r2, #0]
 80051c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2207      	movs	r2, #7
 80051c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,D,E,A,I");
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	33a4      	adds	r3, #164	; 0xa4
 80051ce:	4a79      	ldr	r2, [pc, #484]	; (80053b4 <problem_fetch+0x3a24>)
 80051d0:	461c      	mov	r4, r3
 80051d2:	4613      	mov	r3, r2
 80051d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051d6:	6020      	str	r0, [r4, #0]
 80051d8:	6061      	str	r1, [r4, #4]
 80051da:	60a2      	str	r2, [r4, #8]
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,15,16,18,14");
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4a74      	ldr	r2, [pc, #464]	; (80053b8 <problem_fetch+0x3a28>)
 80051e6:	461d      	mov	r5, r3
 80051e8:	4614      	mov	r4, r2
 80051ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051ec:	6028      	str	r0, [r5, #0]
 80051ee:	6069      	str	r1, [r5, #4]
 80051f0:	60aa      	str	r2, [r5, #8]
 80051f2:	60eb      	str	r3, [r5, #12]
 80051f4:	8823      	ldrh	r3, [r4, #0]
 80051f6:	78a2      	ldrb	r2, [r4, #2]
 80051f8:	822b      	strh	r3, [r5, #16]
 80051fa:	4613      	mov	r3, r2
 80051fc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005204:	4a6d      	ldr	r2, [pc, #436]	; (80053bc <problem_fetch+0x3a2c>)
 8005206:	461c      	mov	r4, r3
 8005208:	4613      	mov	r3, r2
 800520a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800520c:	6020      	str	r0, [r4, #0]
 800520e:	6061      	str	r1, [r4, #4]
 8005210:	60a2      	str	r2, [r4, #8]
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	81a3      	strh	r3, [r4, #12]
			break;
 8005216:	f017 baeb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 85 :
			strcpy(p->name,"BLACK 1.1");
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005220:	4967      	ldr	r1, [pc, #412]	; (80053c0 <problem_fetch+0x3a30>)
 8005222:	461a      	mov	r2, r3
 8005224:	460b      	mov	r3, r1
 8005226:	cb03      	ldmia	r3!, {r0, r1}
 8005228:	6010      	str	r0, [r2, #0]
 800522a:	6051      	str	r1, [r2, #4]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005236:	4a54      	ldr	r2, [pc, #336]	; (8005388 <problem_fetch+0x39f8>)
 8005238:	8811      	ldrh	r1, [r2, #0]
 800523a:	7892      	ldrb	r2, [r2, #2]
 800523c:	8019      	strh	r1, [r3, #0]
 800523e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2207      	movs	r2, #7
 8005244:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,I,E,D");
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	33a4      	adds	r3, #164	; 0xa4
 800524a:	4a5e      	ldr	r2, [pc, #376]	; (80053c4 <problem_fetch+0x3a34>)
 800524c:	461c      	mov	r4, r3
 800524e:	4613      	mov	r3, r2
 8005250:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005252:	6020      	str	r0, [r4, #0]
 8005254:	6061      	str	r1, [r4, #4]
 8005256:	60a2      	str	r2, [r4, #8]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,18");
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	4a59      	ldr	r2, [pc, #356]	; (80053c8 <problem_fetch+0x3a38>)
 8005262:	461d      	mov	r5, r3
 8005264:	4614      	mov	r4, r2
 8005266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005268:	6028      	str	r0, [r5, #0]
 800526a:	6069      	str	r1, [r5, #4]
 800526c:	60aa      	str	r2, [r5, #8]
 800526e:	60eb      	str	r3, [r5, #12]
 8005270:	8823      	ldrh	r3, [r4, #0]
 8005272:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800527a:	4a54      	ldr	r2, [pc, #336]	; (80053cc <problem_fetch+0x3a3c>)
 800527c:	461c      	mov	r4, r3
 800527e:	4613      	mov	r3, r2
 8005280:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005282:	6020      	str	r0, [r4, #0]
 8005284:	6061      	str	r1, [r4, #4]
 8005286:	60a2      	str	r2, [r4, #8]
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	81a3      	strh	r3, [r4, #12]
			break;
 800528c:	f017 bab0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 86 :
			strcpy(p->name,"BLACK 1");
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005296:	494e      	ldr	r1, [pc, #312]	; (80053d0 <problem_fetch+0x3a40>)
 8005298:	461a      	mov	r2, r3
 800529a:	460b      	mov	r3, r1
 800529c:	cb03      	ldmia	r3!, {r0, r1}
 800529e:	6010      	str	r0, [r2, #0]
 80052a0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052a8:	4a3c      	ldr	r2, [pc, #240]	; (800539c <problem_fetch+0x3a0c>)
 80052aa:	6810      	ldr	r0, [r2, #0]
 80052ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,E,G,B,B,A,D");
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	33a4      	adds	r3, #164	; 0xa4
 80052b8:	4a46      	ldr	r2, [pc, #280]	; (80053d4 <problem_fetch+0x3a44>)
 80052ba:	461c      	mov	r4, r3
 80052bc:	4613      	mov	r3, r2
 80052be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052c0:	6020      	str	r0, [r4, #0]
 80052c2:	6061      	str	r1, [r4, #4]
 80052c4:	60a2      	str	r2, [r4, #8]
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"7,8,4,10,12,14,18");
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4a42      	ldr	r2, [pc, #264]	; (80053d8 <problem_fetch+0x3a48>)
 80052d0:	461d      	mov	r5, r3
 80052d2:	4614      	mov	r4, r2
 80052d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052d6:	6028      	str	r0, [r5, #0]
 80052d8:	6069      	str	r1, [r5, #4]
 80052da:	60aa      	str	r2, [r5, #8]
 80052dc:	60eb      	str	r3, [r5, #12]
 80052de:	8823      	ldrh	r3, [r4, #0]
 80052e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,s,d,d,d,e");
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80052e8:	4a3c      	ldr	r2, [pc, #240]	; (80053dc <problem_fetch+0x3a4c>)
 80052ea:	461c      	mov	r4, r3
 80052ec:	4613      	mov	r3, r2
 80052ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052f0:	6020      	str	r0, [r4, #0]
 80052f2:	6061      	str	r1, [r4, #4]
 80052f4:	60a2      	str	r2, [r4, #8]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	81a3      	strh	r3, [r4, #12]
			break;
 80052fa:	f017 ba79 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 87 :
			strcpy(p->name,"BLACKBOARD");
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005304:	4936      	ldr	r1, [pc, #216]	; (80053e0 <problem_fetch+0x3a50>)
 8005306:	461a      	mov	r2, r3
 8005308:	460b      	mov	r3, r1
 800530a:	cb03      	ldmia	r3!, {r0, r1}
 800530c:	6010      	str	r0, [r2, #0]
 800530e:	6051      	str	r1, [r2, #4]
 8005310:	8819      	ldrh	r1, [r3, #0]
 8005312:	789b      	ldrb	r3, [r3, #2]
 8005314:	8111      	strh	r1, [r2, #8]
 8005316:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <problem_fetch+0x39f8>)
 8005320:	8811      	ldrh	r1, [r2, #0]
 8005322:	7892      	ldrb	r2, [r2, #2]
 8005324:	8019      	strh	r1, [r3, #0]
 8005326:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	220a      	movs	r2, #10
 800532c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,H,G,K,J,K,H,G,D");
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	33a4      	adds	r3, #164	; 0xa4
 8005332:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <problem_fetch+0x3a54>)
 8005334:	461d      	mov	r5, r3
 8005336:	4614      	mov	r4, r2
 8005338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800533a:	6028      	str	r0, [r5, #0]
 800533c:	6069      	str	r1, [r5, #4]
 800533e:	60aa      	str	r2, [r5, #8]
 8005340:	60eb      	str	r3, [r5, #12]
 8005342:	6820      	ldr	r0, [r4, #0]
 8005344:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,5,6,9,13,16,16,17,18");
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3304      	adds	r3, #4
 800534a:	4a27      	ldr	r2, [pc, #156]	; (80053e8 <problem_fetch+0x3a58>)
 800534c:	461d      	mov	r5, r3
 800534e:	4614      	mov	r4, r2
 8005350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005352:	6028      	str	r0, [r5, #0]
 8005354:	6069      	str	r1, [r5, #4]
 8005356:	60aa      	str	r2, [r5, #8]
 8005358:	60eb      	str	r3, [r5, #12]
 800535a:	cc03      	ldmia	r4!, {r0, r1}
 800535c:	6128      	str	r0, [r5, #16]
 800535e:	6169      	str	r1, [r5, #20]
 8005360:	7823      	ldrb	r3, [r4, #0]
 8005362:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800536a:	4a20      	ldr	r2, [pc, #128]	; (80053ec <problem_fetch+0x3a5c>)
 800536c:	461d      	mov	r5, r3
 800536e:	4614      	mov	r4, r2
 8005370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005372:	6028      	str	r0, [r5, #0]
 8005374:	6069      	str	r1, [r5, #4]
 8005376:	60aa      	str	r2, [r5, #8]
 8005378:	60eb      	str	r3, [r5, #12]
 800537a:	6820      	ldr	r0, [r4, #0]
 800537c:	6128      	str	r0, [r5, #16]
			break;
 800537e:	f017 ba37 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8005382:	bf00      	nop
 8005384:	08024c6c 	.word	0x08024c6c
 8005388:	08023b50 	.word	0x08023b50
 800538c:	08024c78 	.word	0x08024c78
 8005390:	08024c84 	.word	0x08024c84
 8005394:	08023f2c 	.word	0x08023f2c
 8005398:	08024c94 	.word	0x08024c94
 800539c:	08023b90 	.word	0x08023b90
 80053a0:	08024ca4 	.word	0x08024ca4
 80053a4:	08024cb4 	.word	0x08024cb4
 80053a8:	0802492c 	.word	0x0802492c
 80053ac:	08024cc8 	.word	0x08024cc8
 80053b0:	08023c28 	.word	0x08023c28
 80053b4:	08024cd4 	.word	0x08024cd4
 80053b8:	08024ce4 	.word	0x08024ce4
 80053bc:	08024cf8 	.word	0x08024cf8
 80053c0:	08024d08 	.word	0x08024d08
 80053c4:	08024d14 	.word	0x08024d14
 80053c8:	08024d24 	.word	0x08024d24
 80053cc:	08023c08 	.word	0x08023c08
 80053d0:	08024d38 	.word	0x08024d38
 80053d4:	08024d40 	.word	0x08024d40
 80053d8:	08024d50 	.word	0x08024d50
 80053dc:	08024d64 	.word	0x08024d64
 80053e0:	08024d74 	.word	0x08024d74
 80053e4:	08024d80 	.word	0x08024d80
 80053e8:	08024d94 	.word	0x08024d94
 80053ec:	08024438 	.word	0x08024438
		case 88 :
			strcpy(p->name,"JA ICH BIN NOCH");
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80053f6:	4aaa      	ldr	r2, [pc, #680]	; (80056a0 <problem_fetch+0x3d10>)
 80053f8:	461c      	mov	r4, r3
 80053fa:	4615      	mov	r5, r2
 80053fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fe:	6020      	str	r0, [r4, #0]
 8005400:	6061      	str	r1, [r4, #4]
 8005402:	60a2      	str	r2, [r4, #8]
 8005404:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800540c:	4aa5      	ldr	r2, [pc, #660]	; (80056a4 <problem_fetch+0x3d14>)
 800540e:	6810      	ldr	r0, [r2, #0]
 8005410:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2207      	movs	r2, #7
 8005416:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,E,E,I");
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	33a4      	adds	r3, #164	; 0xa4
 800541c:	4aa2      	ldr	r2, [pc, #648]	; (80056a8 <problem_fetch+0x3d18>)
 800541e:	461c      	mov	r4, r3
 8005420:	4613      	mov	r3, r2
 8005422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005424:	6020      	str	r0, [r4, #0]
 8005426:	6061      	str	r1, [r4, #4]
 8005428:	60a2      	str	r2, [r4, #8]
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3304      	adds	r3, #4
 8005432:	4a9e      	ldr	r2, [pc, #632]	; (80056ac <problem_fetch+0x3d1c>)
 8005434:	461d      	mov	r5, r3
 8005436:	4614      	mov	r4, r2
 8005438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800543a:	6028      	str	r0, [r5, #0]
 800543c:	6069      	str	r1, [r5, #4]
 800543e:	60aa      	str	r2, [r5, #8]
 8005440:	60eb      	str	r3, [r5, #12]
 8005442:	8823      	ldrh	r3, [r4, #0]
 8005444:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800544c:	4a98      	ldr	r2, [pc, #608]	; (80056b0 <problem_fetch+0x3d20>)
 800544e:	461c      	mov	r4, r3
 8005450:	4613      	mov	r3, r2
 8005452:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005454:	6020      	str	r0, [r4, #0]
 8005456:	6061      	str	r1, [r4, #4]
 8005458:	60a2      	str	r2, [r4, #8]
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	81a3      	strh	r3, [r4, #12]
			break;
 800545e:	f017 b9c7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 89 :
			strcpy(p->name,"GORILA");
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005468:	4a92      	ldr	r2, [pc, #584]	; (80056b4 <problem_fetch+0x3d24>)
 800546a:	6810      	ldr	r0, [r2, #0]
 800546c:	6018      	str	r0, [r3, #0]
 800546e:	8891      	ldrh	r1, [r2, #4]
 8005470:	7992      	ldrb	r2, [r2, #6]
 8005472:	8099      	strh	r1, [r3, #4]
 8005474:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800547c:	4a8e      	ldr	r2, [pc, #568]	; (80056b8 <problem_fetch+0x3d28>)
 800547e:	8811      	ldrh	r1, [r2, #0]
 8005480:	7892      	ldrb	r2, [r2, #2]
 8005482:	8019      	strh	r1, [r3, #0]
 8005484:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2207      	movs	r2, #7
 800548a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,G,F,C,E,D");
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	33a4      	adds	r3, #164	; 0xa4
 8005490:	4a8a      	ldr	r2, [pc, #552]	; (80056bc <problem_fetch+0x3d2c>)
 8005492:	461c      	mov	r4, r3
 8005494:	4613      	mov	r3, r2
 8005496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005498:	6020      	str	r0, [r4, #0]
 800549a:	6061      	str	r1, [r4, #4]
 800549c:	60a2      	str	r2, [r4, #8]
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,11,13,14,18");
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4a86      	ldr	r2, [pc, #536]	; (80056c0 <problem_fetch+0x3d30>)
 80054a8:	461d      	mov	r5, r3
 80054aa:	4614      	mov	r4, r2
 80054ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ae:	6028      	str	r0, [r5, #0]
 80054b0:	6069      	str	r1, [r5, #4]
 80054b2:	60aa      	str	r2, [r5, #8]
 80054b4:	60eb      	str	r3, [r5, #12]
 80054b6:	8823      	ldrh	r3, [r4, #0]
 80054b8:	78a2      	ldrb	r2, [r4, #2]
 80054ba:	822b      	strh	r3, [r5, #16]
 80054bc:	4613      	mov	r3, r2
 80054be:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80054c6:	4a7f      	ldr	r2, [pc, #508]	; (80056c4 <problem_fetch+0x3d34>)
 80054c8:	461c      	mov	r4, r3
 80054ca:	4613      	mov	r3, r2
 80054cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80054ce:	6020      	str	r0, [r4, #0]
 80054d0:	6061      	str	r1, [r4, #4]
 80054d2:	60a2      	str	r2, [r4, #8]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	81a3      	strh	r3, [r4, #12]
			break;
 80054d8:	f017 b98a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 90 :
			strcpy(p->name,"URBAN WALL");
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80054e2:	4979      	ldr	r1, [pc, #484]	; (80056c8 <problem_fetch+0x3d38>)
 80054e4:	461a      	mov	r2, r3
 80054e6:	460b      	mov	r3, r1
 80054e8:	cb03      	ldmia	r3!, {r0, r1}
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	6051      	str	r1, [r2, #4]
 80054ee:	8819      	ldrh	r1, [r3, #0]
 80054f0:	789b      	ldrb	r3, [r3, #2]
 80054f2:	8111      	strh	r1, [r2, #8]
 80054f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054fc:	4a73      	ldr	r2, [pc, #460]	; (80056cc <problem_fetch+0x3d3c>)
 80054fe:	8811      	ldrh	r1, [r2, #0]
 8005500:	7892      	ldrb	r2, [r2, #2]
 8005502:	8019      	strh	r1, [r3, #0]
 8005504:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2206      	movs	r2, #6
 800550a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,A,D");
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	33a4      	adds	r3, #164	; 0xa4
 8005510:	4a6f      	ldr	r2, [pc, #444]	; (80056d0 <problem_fetch+0x3d40>)
 8005512:	461c      	mov	r4, r3
 8005514:	4613      	mov	r3, r2
 8005516:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005518:	6020      	str	r0, [r4, #0]
 800551a:	6061      	str	r1, [r4, #4]
 800551c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	4a6c      	ldr	r2, [pc, #432]	; (80056d4 <problem_fetch+0x3d44>)
 8005524:	461c      	mov	r4, r3
 8005526:	4613      	mov	r3, r2
 8005528:	cb07      	ldmia	r3!, {r0, r1, r2}
 800552a:	6020      	str	r0, [r4, #0]
 800552c:	6061      	str	r1, [r4, #4]
 800552e:	60a2      	str	r2, [r4, #8]
 8005530:	881a      	ldrh	r2, [r3, #0]
 8005532:	789b      	ldrb	r3, [r3, #2]
 8005534:	81a2      	strh	r2, [r4, #12]
 8005536:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800553e:	4a66      	ldr	r2, [pc, #408]	; (80056d8 <problem_fetch+0x3d48>)
 8005540:	461c      	mov	r4, r3
 8005542:	4613      	mov	r3, r2
 8005544:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005546:	6020      	str	r0, [r4, #0]
 8005548:	6061      	str	r1, [r4, #4]
 800554a:	60a2      	str	r2, [r4, #8]
			break;
 800554c:	f017 b950 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 91 :
			strcpy(p->name,"BLACKER");
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005556:	4961      	ldr	r1, [pc, #388]	; (80056dc <problem_fetch+0x3d4c>)
 8005558:	461a      	mov	r2, r3
 800555a:	460b      	mov	r3, r1
 800555c:	cb03      	ldmia	r3!, {r0, r1}
 800555e:	6010      	str	r0, [r2, #0]
 8005560:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005568:	4a5d      	ldr	r2, [pc, #372]	; (80056e0 <problem_fetch+0x3d50>)
 800556a:	8811      	ldrh	r1, [r2, #0]
 800556c:	7892      	ldrb	r2, [r2, #2]
 800556e:	8019      	strh	r1, [r3, #0]
 8005570:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2206      	movs	r2, #6
 8005576:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,H,C,H,D");
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	33a4      	adds	r3, #164	; 0xa4
 800557c:	4a59      	ldr	r2, [pc, #356]	; (80056e4 <problem_fetch+0x3d54>)
 800557e:	461c      	mov	r4, r3
 8005580:	4613      	mov	r3, r2
 8005582:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005584:	6020      	str	r0, [r4, #0]
 8005586:	6061      	str	r1, [r4, #4]
 8005588:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,10,13,16,18");
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	3304      	adds	r3, #4
 800558e:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <problem_fetch+0x3d58>)
 8005590:	461c      	mov	r4, r3
 8005592:	4615      	mov	r5, r2
 8005594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005596:	6020      	str	r0, [r4, #0]
 8005598:	6061      	str	r1, [r4, #4]
 800559a:	60a2      	str	r2, [r4, #8]
 800559c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80055a4:	4a4c      	ldr	r2, [pc, #304]	; (80056d8 <problem_fetch+0x3d48>)
 80055a6:	461c      	mov	r4, r3
 80055a8:	4613      	mov	r3, r2
 80055aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055ac:	6020      	str	r0, [r4, #0]
 80055ae:	6061      	str	r1, [r4, #4]
 80055b0:	60a2      	str	r2, [r4, #8]
			break;
 80055b2:	f017 b91d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 92 :
			strcpy(p->name,"DURANGO TANGO");
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80055bc:	4a4b      	ldr	r2, [pc, #300]	; (80056ec <problem_fetch+0x3d5c>)
 80055be:	461c      	mov	r4, r3
 80055c0:	4613      	mov	r3, r2
 80055c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055c4:	6020      	str	r0, [r4, #0]
 80055c6:	6061      	str	r1, [r4, #4]
 80055c8:	60a2      	str	r2, [r4, #8]
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055d4:	4a46      	ldr	r2, [pc, #280]	; (80056f0 <problem_fetch+0x3d60>)
 80055d6:	6810      	ldr	r0, [r2, #0]
 80055d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2207      	movs	r2, #7
 80055de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,E,G,H,I");
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	33a4      	adds	r3, #164	; 0xa4
 80055e4:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <problem_fetch+0x3d64>)
 80055e6:	461c      	mov	r4, r3
 80055e8:	4613      	mov	r3, r2
 80055ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055ec:	6020      	str	r0, [r4, #0]
 80055ee:	6061      	str	r1, [r4, #4]
 80055f0:	60a2      	str	r2, [r4, #8]
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,12,9,15,16,18");
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4a3f      	ldr	r2, [pc, #252]	; (80056f8 <problem_fetch+0x3d68>)
 80055fc:	461d      	mov	r5, r3
 80055fe:	4614      	mov	r4, r2
 8005600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005602:	6028      	str	r0, [r5, #0]
 8005604:	6069      	str	r1, [r5, #4]
 8005606:	60aa      	str	r2, [r5, #8]
 8005608:	60eb      	str	r3, [r5, #12]
 800560a:	8823      	ldrh	r3, [r4, #0]
 800560c:	78a2      	ldrb	r2, [r4, #2]
 800560e:	822b      	strh	r3, [r5, #16]
 8005610:	4613      	mov	r3, r2
 8005612:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800561a:	4a2a      	ldr	r2, [pc, #168]	; (80056c4 <problem_fetch+0x3d34>)
 800561c:	461c      	mov	r4, r3
 800561e:	4613      	mov	r3, r2
 8005620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005622:	6020      	str	r0, [r4, #0]
 8005624:	6061      	str	r1, [r4, #4]
 8005626:	60a2      	str	r2, [r4, #8]
 8005628:	881b      	ldrh	r3, [r3, #0]
 800562a:	81a3      	strh	r3, [r4, #12]
			break;
 800562c:	f017 b8e0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 93 :
			strcpy(p->name,"DARK MAGIC");
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005636:	4931      	ldr	r1, [pc, #196]	; (80056fc <problem_fetch+0x3d6c>)
 8005638:	461a      	mov	r2, r3
 800563a:	460b      	mov	r3, r1
 800563c:	cb03      	ldmia	r3!, {r0, r1}
 800563e:	6010      	str	r0, [r2, #0]
 8005640:	6051      	str	r1, [r2, #4]
 8005642:	8819      	ldrh	r1, [r3, #0]
 8005644:	789b      	ldrb	r3, [r3, #2]
 8005646:	8111      	strh	r1, [r2, #8]
 8005648:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <problem_fetch+0x3d70>)
 8005652:	6810      	ldr	r0, [r2, #0]
 8005654:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2205      	movs	r2, #5
 800565a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,E,I");
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	33a4      	adds	r3, #164	; 0xa4
 8005660:	4928      	ldr	r1, [pc, #160]	; (8005704 <problem_fetch+0x3d74>)
 8005662:	461a      	mov	r2, r3
 8005664:	460b      	mov	r3, r1
 8005666:	cb03      	ldmia	r3!, {r0, r1}
 8005668:	6010      	str	r0, [r2, #0]
 800566a:	6051      	str	r1, [r2, #4]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	4a24      	ldr	r2, [pc, #144]	; (8005708 <problem_fetch+0x3d78>)
 8005676:	461c      	mov	r4, r3
 8005678:	4613      	mov	r3, r2
 800567a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800567c:	6020      	str	r0, [r4, #0]
 800567e:	6061      	str	r1, [r4, #4]
 8005680:	60a2      	str	r2, [r4, #8]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800568c:	491f      	ldr	r1, [pc, #124]	; (800570c <problem_fetch+0x3d7c>)
 800568e:	461a      	mov	r2, r3
 8005690:	460b      	mov	r3, r1
 8005692:	cb03      	ldmia	r3!, {r0, r1}
 8005694:	6010      	str	r0, [r2, #0]
 8005696:	6051      	str	r1, [r2, #4]
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	8113      	strh	r3, [r2, #8]
			break;
 800569c:	f017 b8a8 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80056a0:	08024db0 	.word	0x08024db0
 80056a4:	08023b90 	.word	0x08023b90
 80056a8:	08024dc0 	.word	0x08024dc0
 80056ac:	08024dd0 	.word	0x08024dd0
 80056b0:	08023c08 	.word	0x08023c08
 80056b4:	08024de4 	.word	0x08024de4
 80056b8:	08024288 	.word	0x08024288
 80056bc:	08024dec 	.word	0x08024dec
 80056c0:	08024dfc 	.word	0x08024dfc
 80056c4:	08023d18 	.word	0x08023d18
 80056c8:	08024e10 	.word	0x08024e10
 80056cc:	08023c5c 	.word	0x08023c5c
 80056d0:	08024e1c 	.word	0x08024e1c
 80056d4:	08023c38 	.word	0x08023c38
 80056d8:	08023b70 	.word	0x08023b70
 80056dc:	08024e28 	.word	0x08024e28
 80056e0:	08023b50 	.word	0x08023b50
 80056e4:	08024e30 	.word	0x08024e30
 80056e8:	08024e3c 	.word	0x08024e3c
 80056ec:	08024e4c 	.word	0x08024e4c
 80056f0:	08023c28 	.word	0x08023c28
 80056f4:	08024e5c 	.word	0x08024e5c
 80056f8:	08024e6c 	.word	0x08024e6c
 80056fc:	08024e80 	.word	0x08024e80
 8005700:	08023ccc 	.word	0x08023ccc
 8005704:	08024e8c 	.word	0x08024e8c
 8005708:	08024e98 	.word	0x08024e98
 800570c:	0802405c 	.word	0x0802405c
		case 94 :
			strcpy(p->name,"LITTLE DIDDY");
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005716:	4ab0      	ldr	r2, [pc, #704]	; (80059d8 <problem_fetch+0x4048>)
 8005718:	461c      	mov	r4, r3
 800571a:	4613      	mov	r3, r2
 800571c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800571e:	6020      	str	r0, [r4, #0]
 8005720:	6061      	str	r1, [r4, #4]
 8005722:	60a2      	str	r2, [r4, #8]
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800572e:	4aab      	ldr	r2, [pc, #684]	; (80059dc <problem_fetch+0x404c>)
 8005730:	6810      	ldr	r0, [r2, #0]
 8005732:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	220a      	movs	r2, #10
 8005738:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,D,B,F,J,K,J,I");
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	33a4      	adds	r3, #164	; 0xa4
 800573e:	4aa8      	ldr	r2, [pc, #672]	; (80059e0 <problem_fetch+0x4050>)
 8005740:	461d      	mov	r5, r3
 8005742:	4614      	mov	r4, r2
 8005744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005746:	6028      	str	r0, [r5, #0]
 8005748:	6069      	str	r1, [r5, #4]
 800574a:	60aa      	str	r2, [r5, #8]
 800574c:	60eb      	str	r3, [r5, #12]
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,12,13,12,9,16,18");
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	4aa3      	ldr	r2, [pc, #652]	; (80059e4 <problem_fetch+0x4054>)
 8005758:	461d      	mov	r5, r3
 800575a:	4614      	mov	r4, r2
 800575c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575e:	6028      	str	r0, [r5, #0]
 8005760:	6069      	str	r1, [r5, #4]
 8005762:	60aa      	str	r2, [r5, #8]
 8005764:	60eb      	str	r3, [r5, #12]
 8005766:	cc03      	ldmia	r4!, {r0, r1}
 8005768:	6128      	str	r0, [r5, #16]
 800576a:	6169      	str	r1, [r5, #20]
 800576c:	8823      	ldrh	r3, [r4, #0]
 800576e:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005776:	4a9c      	ldr	r2, [pc, #624]	; (80059e8 <problem_fetch+0x4058>)
 8005778:	461d      	mov	r5, r3
 800577a:	4614      	mov	r4, r2
 800577c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800577e:	6028      	str	r0, [r5, #0]
 8005780:	6069      	str	r1, [r5, #4]
 8005782:	60aa      	str	r2, [r5, #8]
 8005784:	60eb      	str	r3, [r5, #12]
 8005786:	6820      	ldr	r0, [r4, #0]
 8005788:	6128      	str	r0, [r5, #16]
			break;
 800578a:	f017 b831 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 95 :
			strcpy(p->name,"MOMOGO");
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005794:	4a95      	ldr	r2, [pc, #596]	; (80059ec <problem_fetch+0x405c>)
 8005796:	6810      	ldr	r0, [r2, #0]
 8005798:	6018      	str	r0, [r3, #0]
 800579a:	8891      	ldrh	r1, [r2, #4]
 800579c:	7992      	ldrb	r2, [r2, #6]
 800579e:	8099      	strh	r1, [r3, #4]
 80057a0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80057a8:	4a91      	ldr	r2, [pc, #580]	; (80059f0 <problem_fetch+0x4060>)
 80057aa:	6810      	ldr	r0, [r2, #0]
 80057ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2209      	movs	r2, #9
 80057b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,I,J,F,I,H,I");
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	33a4      	adds	r3, #164	; 0xa4
 80057b8:	4a8e      	ldr	r2, [pc, #568]	; (80059f4 <problem_fetch+0x4064>)
 80057ba:	461d      	mov	r5, r3
 80057bc:	4614      	mov	r4, r2
 80057be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c0:	6028      	str	r0, [r5, #0]
 80057c2:	6069      	str	r1, [r5, #4]
 80057c4:	60aa      	str	r2, [r5, #8]
 80057c6:	60eb      	str	r3, [r5, #12]
 80057c8:	8823      	ldrh	r3, [r4, #0]
 80057ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,10,12,13,14,16,18");
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4a89      	ldr	r2, [pc, #548]	; (80059f8 <problem_fetch+0x4068>)
 80057d2:	461d      	mov	r5, r3
 80057d4:	4614      	mov	r4, r2
 80057d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057d8:	6028      	str	r0, [r5, #0]
 80057da:	6069      	str	r1, [r5, #4]
 80057dc:	60aa      	str	r2, [r5, #8]
 80057de:	60eb      	str	r3, [r5, #12]
 80057e0:	cc03      	ldmia	r4!, {r0, r1}
 80057e2:	6128      	str	r0, [r5, #16]
 80057e4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80057ec:	4a83      	ldr	r2, [pc, #524]	; (80059fc <problem_fetch+0x406c>)
 80057ee:	461d      	mov	r5, r3
 80057f0:	4614      	mov	r4, r2
 80057f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f4:	6028      	str	r0, [r5, #0]
 80057f6:	6069      	str	r1, [r5, #4]
 80057f8:	60aa      	str	r2, [r5, #8]
 80057fa:	60eb      	str	r3, [r5, #12]
 80057fc:	8823      	ldrh	r3, [r4, #0]
 80057fe:	822b      	strh	r3, [r5, #16]
			break;
 8005800:	f016 bff6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 96 :
			strcpy(p->name,"COW FUNK");
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800580a:	497d      	ldr	r1, [pc, #500]	; (8005a00 <problem_fetch+0x4070>)
 800580c:	461a      	mov	r2, r3
 800580e:	460b      	mov	r3, r1
 8005810:	cb03      	ldmia	r3!, {r0, r1}
 8005812:	6010      	str	r0, [r2, #0]
 8005814:	6051      	str	r1, [r2, #4]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005820:	4a73      	ldr	r2, [pc, #460]	; (80059f0 <problem_fetch+0x4060>)
 8005822:	6810      	ldr	r0, [r2, #0]
 8005824:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2207      	movs	r2, #7
 800582a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D");
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	33a4      	adds	r3, #164	; 0xa4
 8005830:	4a74      	ldr	r2, [pc, #464]	; (8005a04 <problem_fetch+0x4074>)
 8005832:	461c      	mov	r4, r3
 8005834:	4613      	mov	r3, r2
 8005836:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005838:	6020      	str	r0, [r4, #0]
 800583a:	6061      	str	r1, [r4, #4]
 800583c:	60a2      	str	r2, [r4, #8]
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,18");
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <problem_fetch+0x4078>)
 8005848:	461d      	mov	r5, r3
 800584a:	4614      	mov	r4, r2
 800584c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800584e:	6028      	str	r0, [r5, #0]
 8005850:	6069      	str	r1, [r5, #4]
 8005852:	60aa      	str	r2, [r5, #8]
 8005854:	60eb      	str	r3, [r5, #12]
 8005856:	7823      	ldrb	r3, [r4, #0]
 8005858:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005860:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <problem_fetch+0x407c>)
 8005862:	461c      	mov	r4, r3
 8005864:	4613      	mov	r3, r2
 8005866:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005868:	6020      	str	r0, [r4, #0]
 800586a:	6061      	str	r1, [r4, #4]
 800586c:	60a2      	str	r2, [r4, #8]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	81a3      	strh	r3, [r4, #12]
			break;
 8005872:	f016 bfbd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 97 :
			strcpy(p->name,"CERBERO");
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800587c:	4964      	ldr	r1, [pc, #400]	; (8005a10 <problem_fetch+0x4080>)
 800587e:	461a      	mov	r2, r3
 8005880:	460b      	mov	r3, r1
 8005882:	cb03      	ldmia	r3!, {r0, r1}
 8005884:	6010      	str	r0, [r2, #0]
 8005886:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800588e:	4a61      	ldr	r2, [pc, #388]	; (8005a14 <problem_fetch+0x4084>)
 8005890:	8811      	ldrh	r1, [r2, #0]
 8005892:	7892      	ldrb	r2, [r2, #2]
 8005894:	8019      	strh	r1, [r3, #0]
 8005896:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2205      	movs	r2, #5
 800589c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,K,I");
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	33a4      	adds	r3, #164	; 0xa4
 80058a2:	495d      	ldr	r1, [pc, #372]	; (8005a18 <problem_fetch+0x4088>)
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	cb03      	ldmia	r3!, {r0, r1}
 80058aa:	6010      	str	r0, [r2, #0]
 80058ac:	6051      	str	r1, [r2, #4]
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,14,18");
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4a59      	ldr	r2, [pc, #356]	; (8005a1c <problem_fetch+0x408c>)
 80058b8:	461c      	mov	r4, r3
 80058ba:	4613      	mov	r3, r2
 80058bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058be:	6020      	str	r0, [r4, #0]
 80058c0:	6061      	str	r1, [r4, #4]
 80058c2:	60a2      	str	r2, [r4, #8]
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80058ce:	4954      	ldr	r1, [pc, #336]	; (8005a20 <problem_fetch+0x4090>)
 80058d0:	461a      	mov	r2, r3
 80058d2:	460b      	mov	r3, r1
 80058d4:	cb03      	ldmia	r3!, {r0, r1}
 80058d6:	6010      	str	r0, [r2, #0]
 80058d8:	6051      	str	r1, [r2, #4]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	8113      	strh	r3, [r2, #8]
			break;
 80058de:	f016 bf87 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 98 :
			strcpy(p->name,"ZONED IN (H10 FOOT ONLY)");
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80058e8:	4a4e      	ldr	r2, [pc, #312]	; (8005a24 <problem_fetch+0x4094>)
 80058ea:	461d      	mov	r5, r3
 80058ec:	4614      	mov	r4, r2
 80058ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058f0:	6028      	str	r0, [r5, #0]
 80058f2:	6069      	str	r1, [r5, #4]
 80058f4:	60aa      	str	r2, [r5, #8]
 80058f6:	60eb      	str	r3, [r5, #12]
 80058f8:	cc03      	ldmia	r4!, {r0, r1}
 80058fa:	6128      	str	r0, [r5, #16]
 80058fc:	6169      	str	r1, [r5, #20]
 80058fe:	7823      	ldrb	r3, [r4, #0]
 8005900:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005908:	4a39      	ldr	r2, [pc, #228]	; (80059f0 <problem_fetch+0x4060>)
 800590a:	6810      	ldr	r0, [r2, #0]
 800590c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2209      	movs	r2, #9
 8005912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,C,F,C,E,D");
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	33a4      	adds	r3, #164	; 0xa4
 8005918:	4a43      	ldr	r2, [pc, #268]	; (8005a28 <problem_fetch+0x4098>)
 800591a:	461d      	mov	r5, r3
 800591c:	4614      	mov	r4, r2
 800591e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005920:	6028      	str	r0, [r5, #0]
 8005922:	6069      	str	r1, [r5, #4]
 8005924:	60aa      	str	r2, [r5, #8]
 8005926:	60eb      	str	r3, [r5, #12]
 8005928:	8823      	ldrh	r3, [r4, #0]
 800592a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,8,11,13,16,18");
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4a3e      	ldr	r2, [pc, #248]	; (8005a2c <problem_fetch+0x409c>)
 8005932:	461c      	mov	r4, r3
 8005934:	4615      	mov	r5, r2
 8005936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005938:	6020      	str	r0, [r4, #0]
 800593a:	6061      	str	r1, [r4, #4]
 800593c:	60a2      	str	r2, [r4, #8]
 800593e:	60e3      	str	r3, [r4, #12]
 8005940:	6828      	ldr	r0, [r5, #0]
 8005942:	6120      	str	r0, [r4, #16]
 8005944:	88ab      	ldrh	r3, [r5, #4]
 8005946:	79aa      	ldrb	r2, [r5, #6]
 8005948:	82a3      	strh	r3, [r4, #20]
 800594a:	4613      	mov	r3, r2
 800594c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005954:	4a29      	ldr	r2, [pc, #164]	; (80059fc <problem_fetch+0x406c>)
 8005956:	461d      	mov	r5, r3
 8005958:	4614      	mov	r4, r2
 800595a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800595c:	6028      	str	r0, [r5, #0]
 800595e:	6069      	str	r1, [r5, #4]
 8005960:	60aa      	str	r2, [r5, #8]
 8005962:	60eb      	str	r3, [r5, #12]
 8005964:	8823      	ldrh	r3, [r4, #0]
 8005966:	822b      	strh	r3, [r5, #16]
			break;
 8005968:	f016 bf42 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 99 :
			strcpy(p->name,"FLAPJACKS");
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005972:	492f      	ldr	r1, [pc, #188]	; (8005a30 <problem_fetch+0x40a0>)
 8005974:	461a      	mov	r2, r3
 8005976:	460b      	mov	r3, r1
 8005978:	cb03      	ldmia	r3!, {r0, r1}
 800597a:	6010      	str	r0, [r2, #0]
 800597c:	6051      	str	r1, [r2, #4]
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005988:	4a19      	ldr	r2, [pc, #100]	; (80059f0 <problem_fetch+0x4060>)
 800598a:	6810      	ldr	r0, [r2, #0]
 800598c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2206      	movs	r2, #6
 8005992:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,E,A");
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	33a4      	adds	r3, #164	; 0xa4
 8005998:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <problem_fetch+0x40a4>)
 800599a:	461c      	mov	r4, r3
 800599c:	4613      	mov	r3, r2
 800599e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059a0:	6020      	str	r0, [r4, #0]
 80059a2:	6061      	str	r1, [r4, #4]
 80059a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,14,18");
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4a23      	ldr	r2, [pc, #140]	; (8005a38 <problem_fetch+0x40a8>)
 80059ac:	461c      	mov	r4, r3
 80059ae:	4613      	mov	r3, r2
 80059b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059b2:	6020      	str	r0, [r4, #0]
 80059b4:	6061      	str	r1, [r4, #4]
 80059b6:	60a2      	str	r2, [r4, #8]
 80059b8:	881a      	ldrh	r2, [r3, #0]
 80059ba:	789b      	ldrb	r3, [r3, #2]
 80059bc:	81a2      	strh	r2, [r4, #12]
 80059be:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80059c6:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <problem_fetch+0x40ac>)
 80059c8:	461c      	mov	r4, r3
 80059ca:	4613      	mov	r3, r2
 80059cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059ce:	6020      	str	r0, [r4, #0]
 80059d0:	6061      	str	r1, [r4, #4]
 80059d2:	60a2      	str	r2, [r4, #8]
			break;
 80059d4:	f016 bf0c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80059d8:	08024ea8 	.word	0x08024ea8
 80059dc:	08023ccc 	.word	0x08023ccc
 80059e0:	08024eb8 	.word	0x08024eb8
 80059e4:	08024ecc 	.word	0x08024ecc
 80059e8:	08024ee8 	.word	0x08024ee8
 80059ec:	08024efc 	.word	0x08024efc
 80059f0:	08023b90 	.word	0x08023b90
 80059f4:	08024f04 	.word	0x08024f04
 80059f8:	08024f18 	.word	0x08024f18
 80059fc:	08024b74 	.word	0x08024b74
 8005a00:	08024f30 	.word	0x08024f30
 8005a04:	08024f3c 	.word	0x08024f3c
 8005a08:	08024f4c 	.word	0x08024f4c
 8005a0c:	08023d18 	.word	0x08023d18
 8005a10:	08024f60 	.word	0x08024f60
 8005a14:	08023b50 	.word	0x08023b50
 8005a18:	08024f68 	.word	0x08024f68
 8005a1c:	08024f74 	.word	0x08024f74
 8005a20:	0802405c 	.word	0x0802405c
 8005a24:	08024f84 	.word	0x08024f84
 8005a28:	08024fa0 	.word	0x08024fa0
 8005a2c:	08024fb4 	.word	0x08024fb4
 8005a30:	08024fcc 	.word	0x08024fcc
 8005a34:	08024fd8 	.word	0x08024fd8
 8005a38:	08024fe4 	.word	0x08024fe4
 8005a3c:	08023b70 	.word	0x08023b70
		case 100 :
			strcpy(p->name,"TESTJ");
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a46:	4abd      	ldr	r2, [pc, #756]	; (8005d3c <problem_fetch+0x43ac>)
 8005a48:	6810      	ldr	r0, [r2, #0]
 8005a4a:	6018      	str	r0, [r3, #0]
 8005a4c:	8892      	ldrh	r2, [r2, #4]
 8005a4e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005a56:	4aba      	ldr	r2, [pc, #744]	; (8005d40 <problem_fetch+0x43b0>)
 8005a58:	6810      	ldr	r0, [r2, #0]
 8005a5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2209      	movs	r2, #9
 8005a60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,E,G,D,A");
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	33a4      	adds	r3, #164	; 0xa4
 8005a66:	4ab7      	ldr	r2, [pc, #732]	; (8005d44 <problem_fetch+0x43b4>)
 8005a68:	461d      	mov	r5, r3
 8005a6a:	4614      	mov	r4, r2
 8005a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a6e:	6028      	str	r0, [r5, #0]
 8005a70:	6069      	str	r1, [r5, #4]
 8005a72:	60aa      	str	r2, [r5, #8]
 8005a74:	60eb      	str	r3, [r5, #12]
 8005a76:	8823      	ldrh	r3, [r4, #0]
 8005a78:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,14,17,18,14");
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4ab2      	ldr	r2, [pc, #712]	; (8005d48 <problem_fetch+0x43b8>)
 8005a80:	461d      	mov	r5, r3
 8005a82:	4614      	mov	r4, r2
 8005a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a86:	6028      	str	r0, [r5, #0]
 8005a88:	6069      	str	r1, [r5, #4]
 8005a8a:	60aa      	str	r2, [r5, #8]
 8005a8c:	60eb      	str	r3, [r5, #12]
 8005a8e:	cc03      	ldmia	r4!, {r0, r1}
 8005a90:	6128      	str	r0, [r5, #16]
 8005a92:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005a9a:	4aac      	ldr	r2, [pc, #688]	; (8005d4c <problem_fetch+0x43bc>)
 8005a9c:	461d      	mov	r5, r3
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005aa2:	6028      	str	r0, [r5, #0]
 8005aa4:	6069      	str	r1, [r5, #4]
 8005aa6:	60aa      	str	r2, [r5, #8]
 8005aa8:	60eb      	str	r3, [r5, #12]
 8005aaa:	8823      	ldrh	r3, [r4, #0]
 8005aac:	822b      	strh	r3, [r5, #16]
			break;
 8005aae:	f016 be9f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 101 :
			strcpy(p->name,"MISSILE");
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005ab8:	49a5      	ldr	r1, [pc, #660]	; (8005d50 <problem_fetch+0x43c0>)
 8005aba:	461a      	mov	r2, r3
 8005abc:	460b      	mov	r3, r1
 8005abe:	cb03      	ldmia	r3!, {r0, r1}
 8005ac0:	6010      	str	r0, [r2, #0]
 8005ac2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005aca:	4aa2      	ldr	r2, [pc, #648]	; (8005d54 <problem_fetch+0x43c4>)
 8005acc:	8811      	ldrh	r1, [r2, #0]
 8005ace:	7892      	ldrb	r2, [r2, #2]
 8005ad0:	8019      	strh	r1, [r3, #0]
 8005ad2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,B,E,C,D");
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	33a4      	adds	r3, #164	; 0xa4
 8005ade:	4a9e      	ldr	r2, [pc, #632]	; (8005d58 <problem_fetch+0x43c8>)
 8005ae0:	461c      	mov	r4, r3
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ae6:	6020      	str	r0, [r4, #0]
 8005ae8:	6061      	str	r1, [r4, #4]
 8005aea:	60a2      	str	r2, [r4, #8]
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,12,13,18");
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4a99      	ldr	r2, [pc, #612]	; (8005d5c <problem_fetch+0x43cc>)
 8005af6:	461d      	mov	r5, r3
 8005af8:	4614      	mov	r4, r2
 8005afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005afc:	6028      	str	r0, [r5, #0]
 8005afe:	6069      	str	r1, [r5, #4]
 8005b00:	60aa      	str	r2, [r5, #8]
 8005b02:	60eb      	str	r3, [r5, #12]
 8005b04:	8823      	ldrh	r3, [r4, #0]
 8005b06:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005b0e:	4a94      	ldr	r2, [pc, #592]	; (8005d60 <problem_fetch+0x43d0>)
 8005b10:	461c      	mov	r4, r3
 8005b12:	4613      	mov	r3, r2
 8005b14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b16:	6020      	str	r0, [r4, #0]
 8005b18:	6061      	str	r1, [r4, #4]
 8005b1a:	60a2      	str	r2, [r4, #8]
 8005b1c:	881b      	ldrh	r3, [r3, #0]
 8005b1e:	81a3      	strh	r3, [r4, #12]
			break;
 8005b20:	f016 be66 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 102 :
			strcpy(p->name,"MOFOS");
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b2a:	4a8e      	ldr	r2, [pc, #568]	; (8005d64 <problem_fetch+0x43d4>)
 8005b2c:	6810      	ldr	r0, [r2, #0]
 8005b2e:	6018      	str	r0, [r3, #0]
 8005b30:	8892      	ldrh	r2, [r2, #4]
 8005b32:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005b3a:	4a8b      	ldr	r2, [pc, #556]	; (8005d68 <problem_fetch+0x43d8>)
 8005b3c:	8811      	ldrh	r1, [r2, #0]
 8005b3e:	7892      	ldrb	r2, [r2, #2]
 8005b40:	8019      	strh	r1, [r3, #0]
 8005b42:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2206      	movs	r2, #6
 8005b48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,C,D,D");
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	33a4      	adds	r3, #164	; 0xa4
 8005b4e:	4a87      	ldr	r2, [pc, #540]	; (8005d6c <problem_fetch+0x43dc>)
 8005b50:	461c      	mov	r4, r3
 8005b52:	4613      	mov	r3, r2
 8005b54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b56:	6020      	str	r0, [r4, #0]
 8005b58:	6061      	str	r1, [r4, #4]
 8005b5a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,13,15,18");
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3304      	adds	r3, #4
 8005b60:	4a83      	ldr	r2, [pc, #524]	; (8005d70 <problem_fetch+0x43e0>)
 8005b62:	461c      	mov	r4, r3
 8005b64:	4615      	mov	r5, r2
 8005b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b68:	6020      	str	r0, [r4, #0]
 8005b6a:	6061      	str	r1, [r4, #4]
 8005b6c:	60a2      	str	r2, [r4, #8]
 8005b6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005b76:	4a7f      	ldr	r2, [pc, #508]	; (8005d74 <problem_fetch+0x43e4>)
 8005b78:	461c      	mov	r4, r3
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b7e:	6020      	str	r0, [r4, #0]
 8005b80:	6061      	str	r1, [r4, #4]
 8005b82:	60a2      	str	r2, [r4, #8]
			break;
 8005b84:	f016 be34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 103 :
			strcpy(p->name,"LI VARDASCI");
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b8e:	4a7a      	ldr	r2, [pc, #488]	; (8005d78 <problem_fetch+0x43e8>)
 8005b90:	461c      	mov	r4, r3
 8005b92:	4613      	mov	r3, r2
 8005b94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005b96:	6020      	str	r0, [r4, #0]
 8005b98:	6061      	str	r1, [r4, #4]
 8005b9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ba2:	4a76      	ldr	r2, [pc, #472]	; (8005d7c <problem_fetch+0x43ec>)
 8005ba4:	8811      	ldrh	r1, [r2, #0]
 8005ba6:	7892      	ldrb	r2, [r2, #2]
 8005ba8:	8019      	strh	r1, [r3, #0]
 8005baa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,D");
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	33a4      	adds	r3, #164	; 0xa4
 8005bb6:	4972      	ldr	r1, [pc, #456]	; (8005d80 <problem_fetch+0x43f0>)
 8005bb8:	461a      	mov	r2, r3
 8005bba:	460b      	mov	r3, r1
 8005bbc:	cb03      	ldmia	r3!, {r0, r1}
 8005bbe:	6010      	str	r0, [r2, #0]
 8005bc0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	496f      	ldr	r1, [pc, #444]	; (8005d84 <problem_fetch+0x43f4>)
 8005bc8:	461a      	mov	r2, r3
 8005bca:	460b      	mov	r3, r1
 8005bcc:	cb03      	ldmia	r3!, {r0, r1}
 8005bce:	6010      	str	r0, [r2, #0]
 8005bd0:	6051      	str	r1, [r2, #4]
 8005bd2:	8819      	ldrh	r1, [r3, #0]
 8005bd4:	789b      	ldrb	r3, [r3, #2]
 8005bd6:	8111      	strh	r1, [r2, #8]
 8005bd8:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005be0:	4969      	ldr	r1, [pc, #420]	; (8005d88 <problem_fetch+0x43f8>)
 8005be2:	461a      	mov	r2, r3
 8005be4:	460b      	mov	r3, r1
 8005be6:	cb03      	ldmia	r3!, {r0, r1}
 8005be8:	6010      	str	r0, [r2, #0]
 8005bea:	6051      	str	r1, [r2, #4]
			break;
 8005bec:	f016 be00 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 104 :
			strcpy(p->name,"LA FRICHINA");
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005bf6:	4a65      	ldr	r2, [pc, #404]	; (8005d8c <problem_fetch+0x43fc>)
 8005bf8:	461c      	mov	r4, r3
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bfe:	6020      	str	r0, [r4, #0]
 8005c00:	6061      	str	r1, [r4, #4]
 8005c02:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c0a:	4a52      	ldr	r2, [pc, #328]	; (8005d54 <problem_fetch+0x43c4>)
 8005c0c:	8811      	ldrh	r1, [r2, #0]
 8005c0e:	7892      	ldrb	r2, [r2, #2]
 8005c10:	8019      	strh	r1, [r3, #0]
 8005c12:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2205      	movs	r2, #5
 8005c18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,H,I");
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	33a4      	adds	r3, #164	; 0xa4
 8005c1e:	495c      	ldr	r1, [pc, #368]	; (8005d90 <problem_fetch+0x4400>)
 8005c20:	461a      	mov	r2, r3
 8005c22:	460b      	mov	r3, r1
 8005c24:	cb03      	ldmia	r3!, {r0, r1}
 8005c26:	6010      	str	r0, [r2, #0]
 8005c28:	6051      	str	r1, [r2, #4]
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,14,13,18");
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4a58      	ldr	r2, [pc, #352]	; (8005d94 <problem_fetch+0x4404>)
 8005c34:	461c      	mov	r4, r3
 8005c36:	4613      	mov	r3, r2
 8005c38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c3a:	6020      	str	r0, [r4, #0]
 8005c3c:	6061      	str	r1, [r4, #4]
 8005c3e:	60a2      	str	r2, [r4, #8]
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005c4a:	4953      	ldr	r1, [pc, #332]	; (8005d98 <problem_fetch+0x4408>)
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	460b      	mov	r3, r1
 8005c50:	cb03      	ldmia	r3!, {r0, r1}
 8005c52:	6010      	str	r0, [r2, #0]
 8005c54:	6051      	str	r1, [r2, #4]
 8005c56:	881b      	ldrh	r3, [r3, #0]
 8005c58:	8113      	strh	r3, [r2, #8]
			break;
 8005c5a:	f016 bdc9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 105 :
			strcpy(p->name,"BLACKNANA OLDNANA");
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005c64:	4a4d      	ldr	r2, [pc, #308]	; (8005d9c <problem_fetch+0x440c>)
 8005c66:	461d      	mov	r5, r3
 8005c68:	4614      	mov	r4, r2
 8005c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c6c:	6028      	str	r0, [r5, #0]
 8005c6e:	6069      	str	r1, [r5, #4]
 8005c70:	60aa      	str	r2, [r5, #8]
 8005c72:	60eb      	str	r3, [r5, #12]
 8005c74:	8823      	ldrh	r3, [r4, #0]
 8005c76:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c7e:	4a48      	ldr	r2, [pc, #288]	; (8005da0 <problem_fetch+0x4410>)
 8005c80:	6810      	ldr	r0, [r2, #0]
 8005c82:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2206      	movs	r2, #6
 8005c88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,H,D,D");
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	33a4      	adds	r3, #164	; 0xa4
 8005c8e:	4a45      	ldr	r2, [pc, #276]	; (8005da4 <problem_fetch+0x4414>)
 8005c90:	461c      	mov	r4, r3
 8005c92:	4613      	mov	r3, r2
 8005c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c96:	6020      	str	r0, [r4, #0]
 8005c98:	6061      	str	r1, [r4, #4]
 8005c9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,13,15,18");
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4a41      	ldr	r2, [pc, #260]	; (8005da8 <problem_fetch+0x4418>)
 8005ca2:	461c      	mov	r4, r3
 8005ca4:	4615      	mov	r5, r2
 8005ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ca8:	6020      	str	r0, [r4, #0]
 8005caa:	6061      	str	r1, [r4, #4]
 8005cac:	60a2      	str	r2, [r4, #8]
 8005cae:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005cb6:	4a3d      	ldr	r2, [pc, #244]	; (8005dac <problem_fetch+0x441c>)
 8005cb8:	461c      	mov	r4, r3
 8005cba:	4613      	mov	r3, r2
 8005cbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cbe:	6020      	str	r0, [r4, #0]
 8005cc0:	6061      	str	r1, [r4, #4]
 8005cc2:	60a2      	str	r2, [r4, #8]
			break;
 8005cc4:	f016 bd94 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 106 :
			strcpy(p->name,"MONOLITH");
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005cce:	4938      	ldr	r1, [pc, #224]	; (8005db0 <problem_fetch+0x4420>)
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	cb03      	ldmia	r3!, {r0, r1}
 8005cd6:	6010      	str	r0, [r2, #0]
 8005cd8:	6051      	str	r1, [r2, #4]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ce4:	4a16      	ldr	r2, [pc, #88]	; (8005d40 <problem_fetch+0x43b0>)
 8005ce6:	6810      	ldr	r0, [r2, #0]
 8005ce8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2207      	movs	r2, #7
 8005cee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,C,E,D");
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	33a4      	adds	r3, #164	; 0xa4
 8005cf4:	4a2f      	ldr	r2, [pc, #188]	; (8005db4 <problem_fetch+0x4424>)
 8005cf6:	461c      	mov	r4, r3
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cfc:	6020      	str	r0, [r4, #0]
 8005cfe:	6061      	str	r1, [r4, #4]
 8005d00:	60a2      	str	r2, [r4, #8]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4a2b      	ldr	r2, [pc, #172]	; (8005db8 <problem_fetch+0x4428>)
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	4614      	mov	r4, r2
 8005d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	6069      	str	r1, [r5, #4]
 8005d16:	60aa      	str	r2, [r5, #8]
 8005d18:	60eb      	str	r3, [r5, #12]
 8005d1a:	8823      	ldrh	r3, [r4, #0]
 8005d1c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005d24:	4a0e      	ldr	r2, [pc, #56]	; (8005d60 <problem_fetch+0x43d0>)
 8005d26:	461c      	mov	r4, r3
 8005d28:	4613      	mov	r3, r2
 8005d2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d2c:	6020      	str	r0, [r4, #0]
 8005d2e:	6061      	str	r1, [r4, #4]
 8005d30:	60a2      	str	r2, [r4, #8]
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	81a3      	strh	r3, [r4, #12]
			break;
 8005d36:	f016 bd5b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8005d3a:	bf00      	nop
 8005d3c:	08024ff4 	.word	0x08024ff4
 8005d40:	08023b90 	.word	0x08023b90
 8005d44:	08024ffc 	.word	0x08024ffc
 8005d48:	08025010 	.word	0x08025010
 8005d4c:	08025028 	.word	0x08025028
 8005d50:	0802503c 	.word	0x0802503c
 8005d54:	08023b50 	.word	0x08023b50
 8005d58:	08025044 	.word	0x08025044
 8005d5c:	08025054 	.word	0x08025054
 8005d60:	08023d18 	.word	0x08023d18
 8005d64:	08025068 	.word	0x08025068
 8005d68:	08023c5c 	.word	0x08023c5c
 8005d6c:	08025070 	.word	0x08025070
 8005d70:	0802507c 	.word	0x0802507c
 8005d74:	08023b70 	.word	0x08023b70
 8005d78:	0802508c 	.word	0x0802508c
 8005d7c:	08024288 	.word	0x08024288
 8005d80:	08025098 	.word	0x08025098
 8005d84:	080250a0 	.word	0x080250a0
 8005d88:	08023ce4 	.word	0x08023ce4
 8005d8c:	080250ac 	.word	0x080250ac
 8005d90:	080250b8 	.word	0x080250b8
 8005d94:	080250c4 	.word	0x080250c4
 8005d98:	0802405c 	.word	0x0802405c
 8005d9c:	080250d4 	.word	0x080250d4
 8005da0:	08023ccc 	.word	0x08023ccc
 8005da4:	080250e8 	.word	0x080250e8
 8005da8:	080250f4 	.word	0x080250f4
 8005dac:	08023f2c 	.word	0x08023f2c
 8005db0:	08025104 	.word	0x08025104
 8005db4:	08025110 	.word	0x08025110
 8005db8:	08025120 	.word	0x08025120
		case 107 :
			strcpy(p->name,"ZONING IN (ALT. START)");
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005dc2:	4ab2      	ldr	r2, [pc, #712]	; (800608c <problem_fetch+0x46fc>)
 8005dc4:	461c      	mov	r4, r3
 8005dc6:	4615      	mov	r5, r2
 8005dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dca:	6020      	str	r0, [r4, #0]
 8005dcc:	6061      	str	r1, [r4, #4]
 8005dce:	60a2      	str	r2, [r4, #8]
 8005dd0:	60e3      	str	r3, [r4, #12]
 8005dd2:	6828      	ldr	r0, [r5, #0]
 8005dd4:	6120      	str	r0, [r4, #16]
 8005dd6:	88ab      	ldrh	r3, [r5, #4]
 8005dd8:	79aa      	ldrb	r2, [r5, #6]
 8005dda:	82a3      	strh	r3, [r4, #20]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"6B+");
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005de6:	4aaa      	ldr	r2, [pc, #680]	; (8006090 <problem_fetch+0x4700>)
 8005de8:	6810      	ldr	r0, [r2, #0]
 8005dea:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2208      	movs	r2, #8
 8005df0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,E,C,E,D");
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	33a4      	adds	r3, #164	; 0xa4
 8005df6:	4aa7      	ldr	r2, [pc, #668]	; (8006094 <problem_fetch+0x4704>)
 8005df8:	461c      	mov	r4, r3
 8005dfa:	4615      	mov	r5, r2
 8005dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dfe:	6020      	str	r0, [r4, #0]
 8005e00:	6061      	str	r1, [r4, #4]
 8005e02:	60a2      	str	r2, [r4, #8]
 8005e04:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,8,12,13,16,18");
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	3304      	adds	r3, #4
 8005e0a:	4aa3      	ldr	r2, [pc, #652]	; (8006098 <problem_fetch+0x4708>)
 8005e0c:	461d      	mov	r5, r3
 8005e0e:	4614      	mov	r4, r2
 8005e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e12:	6028      	str	r0, [r5, #0]
 8005e14:	6069      	str	r1, [r5, #4]
 8005e16:	60aa      	str	r2, [r5, #8]
 8005e18:	60eb      	str	r3, [r5, #12]
 8005e1a:	6820      	ldr	r0, [r4, #0]
 8005e1c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005e24:	4a9d      	ldr	r2, [pc, #628]	; (800609c <problem_fetch+0x470c>)
 8005e26:	461c      	mov	r4, r3
 8005e28:	4615      	mov	r5, r2
 8005e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e2c:	6020      	str	r0, [r4, #0]
 8005e2e:	6061      	str	r1, [r4, #4]
 8005e30:	60a2      	str	r2, [r4, #8]
 8005e32:	60e3      	str	r3, [r4, #12]
			break;
 8005e34:	f016 bcdc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 108 :
			strcpy(p->name,"ZONING IN");
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005e3e:	4998      	ldr	r1, [pc, #608]	; (80060a0 <problem_fetch+0x4710>)
 8005e40:	461a      	mov	r2, r3
 8005e42:	460b      	mov	r3, r1
 8005e44:	cb03      	ldmia	r3!, {r0, r1}
 8005e46:	6010      	str	r0, [r2, #0]
 8005e48:	6051      	str	r1, [r2, #4]
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005e54:	4a8e      	ldr	r2, [pc, #568]	; (8006090 <problem_fetch+0x4700>)
 8005e56:	6810      	ldr	r0, [r2, #0]
 8005e58:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2207      	movs	r2, #7
 8005e5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,H,C,E,D");
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	33a4      	adds	r3, #164	; 0xa4
 8005e64:	4a8f      	ldr	r2, [pc, #572]	; (80060a4 <problem_fetch+0x4714>)
 8005e66:	461c      	mov	r4, r3
 8005e68:	4613      	mov	r3, r2
 8005e6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e6c:	6020      	str	r0, [r4, #0]
 8005e6e:	6061      	str	r1, [r4, #4]
 8005e70:	60a2      	str	r2, [r4, #8]
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,8,13,16,18");
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4a8b      	ldr	r2, [pc, #556]	; (80060a8 <problem_fetch+0x4718>)
 8005e7c:	461d      	mov	r5, r3
 8005e7e:	4614      	mov	r4, r2
 8005e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6069      	str	r1, [r5, #4]
 8005e86:	60aa      	str	r2, [r5, #8]
 8005e88:	60eb      	str	r3, [r5, #12]
 8005e8a:	8823      	ldrh	r3, [r4, #0]
 8005e8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005e94:	4a85      	ldr	r2, [pc, #532]	; (80060ac <problem_fetch+0x471c>)
 8005e96:	461c      	mov	r4, r3
 8005e98:	4613      	mov	r3, r2
 8005e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e9c:	6020      	str	r0, [r4, #0]
 8005e9e:	6061      	str	r1, [r4, #4]
 8005ea0:	60a2      	str	r2, [r4, #8]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	81a3      	strh	r3, [r4, #12]
			break;
 8005ea6:	f016 bca3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 109 :
			strcpy(p->name,"ORANGE IS THE NEW BLACK");
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005eb0:	4a7f      	ldr	r2, [pc, #508]	; (80060b0 <problem_fetch+0x4720>)
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005eb8:	6028      	str	r0, [r5, #0]
 8005eba:	6069      	str	r1, [r5, #4]
 8005ebc:	60aa      	str	r2, [r5, #8]
 8005ebe:	60eb      	str	r3, [r5, #12]
 8005ec0:	cc03      	ldmia	r4!, {r0, r1}
 8005ec2:	6128      	str	r0, [r5, #16]
 8005ec4:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005ecc:	4a79      	ldr	r2, [pc, #484]	; (80060b4 <problem_fetch+0x4724>)
 8005ece:	8811      	ldrh	r1, [r2, #0]
 8005ed0:	7892      	ldrb	r2, [r2, #2]
 8005ed2:	8019      	strh	r1, [r3, #0]
 8005ed4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2206      	movs	r2, #6
 8005eda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,G,C,D");
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	33a4      	adds	r3, #164	; 0xa4
 8005ee0:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <problem_fetch+0x4728>)
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ee8:	6020      	str	r0, [r4, #0]
 8005eea:	6061      	str	r1, [r4, #4]
 8005eec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,14,8,18");
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4a72      	ldr	r2, [pc, #456]	; (80060bc <problem_fetch+0x472c>)
 8005ef4:	461c      	mov	r4, r3
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005efa:	6020      	str	r0, [r4, #0]
 8005efc:	6061      	str	r1, [r4, #4]
 8005efe:	60a2      	str	r2, [r4, #8]
 8005f00:	881a      	ldrh	r2, [r3, #0]
 8005f02:	789b      	ldrb	r3, [r3, #2]
 8005f04:	81a2      	strh	r2, [r4, #12]
 8005f06:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005f0e:	4a6c      	ldr	r2, [pc, #432]	; (80060c0 <problem_fetch+0x4730>)
 8005f10:	461c      	mov	r4, r3
 8005f12:	4613      	mov	r3, r2
 8005f14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f16:	6020      	str	r0, [r4, #0]
 8005f18:	6061      	str	r1, [r4, #4]
 8005f1a:	60a2      	str	r2, [r4, #8]
			break;
 8005f1c:	f016 bc68 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 110 :
			strcpy(p->name,"COCA COLA");
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f26:	4967      	ldr	r1, [pc, #412]	; (80060c4 <problem_fetch+0x4734>)
 8005f28:	461a      	mov	r2, r3
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	cb03      	ldmia	r3!, {r0, r1}
 8005f2e:	6010      	str	r0, [r2, #0]
 8005f30:	6051      	str	r1, [r2, #4]
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005f3c:	4a62      	ldr	r2, [pc, #392]	; (80060c8 <problem_fetch+0x4738>)
 8005f3e:	8811      	ldrh	r1, [r2, #0]
 8005f40:	7892      	ldrb	r2, [r2, #2]
 8005f42:	8019      	strh	r1, [r3, #0]
 8005f44:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2207      	movs	r2, #7
 8005f4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,E,G,D,C");
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	33a4      	adds	r3, #164	; 0xa4
 8005f50:	4a5e      	ldr	r2, [pc, #376]	; (80060cc <problem_fetch+0x473c>)
 8005f52:	461c      	mov	r4, r3
 8005f54:	4613      	mov	r3, r2
 8005f56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f58:	6020      	str	r0, [r4, #0]
 8005f5a:	6061      	str	r1, [r4, #4]
 8005f5c:	60a2      	str	r2, [r4, #8]
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,15,18,8");
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4a5a      	ldr	r2, [pc, #360]	; (80060d0 <problem_fetch+0x4740>)
 8005f68:	461d      	mov	r5, r3
 8005f6a:	4614      	mov	r4, r2
 8005f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f6e:	6028      	str	r0, [r5, #0]
 8005f70:	6069      	str	r1, [r5, #4]
 8005f72:	60aa      	str	r2, [r5, #8]
 8005f74:	60eb      	str	r3, [r5, #12]
 8005f76:	8823      	ldrh	r3, [r4, #0]
 8005f78:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005f80:	4a54      	ldr	r2, [pc, #336]	; (80060d4 <problem_fetch+0x4744>)
 8005f82:	461c      	mov	r4, r3
 8005f84:	4613      	mov	r3, r2
 8005f86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f88:	6020      	str	r0, [r4, #0]
 8005f8a:	6061      	str	r1, [r4, #4]
 8005f8c:	60a2      	str	r2, [r4, #8]
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	81a3      	strh	r3, [r4, #12]
			break;
 8005f92:	f016 bc2d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 111 :
			strcpy(p->name,"OINTMENT 007");
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f9c:	4a4e      	ldr	r2, [pc, #312]	; (80060d8 <problem_fetch+0x4748>)
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005fa4:	6020      	str	r0, [r4, #0]
 8005fa6:	6061      	str	r1, [r4, #4]
 8005fa8:	60a2      	str	r2, [r4, #8]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005fb4:	4a36      	ldr	r2, [pc, #216]	; (8006090 <problem_fetch+0x4700>)
 8005fb6:	6810      	ldr	r0, [r2, #0]
 8005fb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2209      	movs	r2, #9
 8005fbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,G,H,G,I,G,I");
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	33a4      	adds	r3, #164	; 0xa4
 8005fc4:	4a45      	ldr	r2, [pc, #276]	; (80060dc <problem_fetch+0x474c>)
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4614      	mov	r4, r2
 8005fca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fcc:	6028      	str	r0, [r5, #0]
 8005fce:	6069      	str	r1, [r5, #4]
 8005fd0:	60aa      	str	r2, [r5, #8]
 8005fd2:	60eb      	str	r3, [r5, #12]
 8005fd4:	8823      	ldrh	r3, [r4, #0]
 8005fd6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,10,14,14,15,18");
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4a40      	ldr	r2, [pc, #256]	; (80060e0 <problem_fetch+0x4750>)
 8005fde:	461c      	mov	r4, r3
 8005fe0:	4615      	mov	r5, r2
 8005fe2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fe4:	6020      	str	r0, [r4, #0]
 8005fe6:	6061      	str	r1, [r4, #4]
 8005fe8:	60a2      	str	r2, [r4, #8]
 8005fea:	60e3      	str	r3, [r4, #12]
 8005fec:	6828      	ldr	r0, [r5, #0]
 8005fee:	6120      	str	r0, [r4, #16]
 8005ff0:	88ab      	ldrh	r3, [r5, #4]
 8005ff2:	79aa      	ldrb	r2, [r5, #6]
 8005ff4:	82a3      	strh	r3, [r4, #20]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006000:	4a38      	ldr	r2, [pc, #224]	; (80060e4 <problem_fetch+0x4754>)
 8006002:	461d      	mov	r5, r3
 8006004:	4614      	mov	r4, r2
 8006006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006008:	6028      	str	r0, [r5, #0]
 800600a:	6069      	str	r1, [r5, #4]
 800600c:	60aa      	str	r2, [r5, #8]
 800600e:	60eb      	str	r3, [r5, #12]
 8006010:	8823      	ldrh	r3, [r4, #0]
 8006012:	822b      	strh	r3, [r5, #16]
			break;
 8006014:	f016 bbec 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 112 :
			strcpy(p->name,"WARM UP STUFF");
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800601e:	4a32      	ldr	r2, [pc, #200]	; (80060e8 <problem_fetch+0x4758>)
 8006020:	461c      	mov	r4, r3
 8006022:	4613      	mov	r3, r2
 8006024:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	6061      	str	r1, [r4, #4]
 800602a:	60a2      	str	r2, [r4, #8]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006036:	4a16      	ldr	r2, [pc, #88]	; (8006090 <problem_fetch+0x4700>)
 8006038:	6810      	ldr	r0, [r2, #0]
 800603a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2207      	movs	r2, #7
 8006040:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,D,E,A,D");
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	33a4      	adds	r3, #164	; 0xa4
 8006046:	4a29      	ldr	r2, [pc, #164]	; (80060ec <problem_fetch+0x475c>)
 8006048:	461c      	mov	r4, r3
 800604a:	4613      	mov	r3, r2
 800604c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800604e:	6020      	str	r0, [r4, #0]
 8006050:	6061      	str	r1, [r4, #4]
 8006052:	60a2      	str	r2, [r4, #8]
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,12,14,18");
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4a24      	ldr	r2, [pc, #144]	; (80060f0 <problem_fetch+0x4760>)
 800605e:	461d      	mov	r5, r3
 8006060:	4614      	mov	r4, r2
 8006062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006064:	6028      	str	r0, [r5, #0]
 8006066:	6069      	str	r1, [r5, #4]
 8006068:	60aa      	str	r2, [r5, #8]
 800606a:	60eb      	str	r3, [r5, #12]
 800606c:	8823      	ldrh	r3, [r4, #0]
 800606e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006076:	4a1f      	ldr	r2, [pc, #124]	; (80060f4 <problem_fetch+0x4764>)
 8006078:	461c      	mov	r4, r3
 800607a:	4613      	mov	r3, r2
 800607c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800607e:	6020      	str	r0, [r4, #0]
 8006080:	6061      	str	r1, [r4, #4]
 8006082:	60a2      	str	r2, [r4, #8]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	81a3      	strh	r3, [r4, #12]
			break;
 8006088:	f016 bbb2 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800608c:	08025134 	.word	0x08025134
 8006090:	08023b90 	.word	0x08023b90
 8006094:	0802514c 	.word	0x0802514c
 8006098:	0802515c 	.word	0x0802515c
 800609c:	08023cb4 	.word	0x08023cb4
 80060a0:	08025170 	.word	0x08025170
 80060a4:	0802517c 	.word	0x0802517c
 80060a8:	0802518c 	.word	0x0802518c
 80060ac:	08023d18 	.word	0x08023d18
 80060b0:	080251a0 	.word	0x080251a0
 80060b4:	08024288 	.word	0x08024288
 80060b8:	080251b8 	.word	0x080251b8
 80060bc:	080251c4 	.word	0x080251c4
 80060c0:	08023f2c 	.word	0x08023f2c
 80060c4:	080251d4 	.word	0x080251d4
 80060c8:	08023b50 	.word	0x08023b50
 80060cc:	080251e0 	.word	0x080251e0
 80060d0:	080251f0 	.word	0x080251f0
 80060d4:	08024cf8 	.word	0x08024cf8
 80060d8:	08025204 	.word	0x08025204
 80060dc:	08025214 	.word	0x08025214
 80060e0:	08025228 	.word	0x08025228
 80060e4:	08024b74 	.word	0x08024b74
 80060e8:	08025240 	.word	0x08025240
 80060ec:	08025250 	.word	0x08025250
 80060f0:	08025260 	.word	0x08025260
 80060f4:	08023c08 	.word	0x08023c08
		case 113 :
			strcpy(p->name,"VANTABLACK");
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060fe:	49b1      	ldr	r1, [pc, #708]	; (80063c4 <problem_fetch+0x4a34>)
 8006100:	461a      	mov	r2, r3
 8006102:	460b      	mov	r3, r1
 8006104:	cb03      	ldmia	r3!, {r0, r1}
 8006106:	6010      	str	r0, [r2, #0]
 8006108:	6051      	str	r1, [r2, #4]
 800610a:	8819      	ldrh	r1, [r3, #0]
 800610c:	789b      	ldrb	r3, [r3, #2]
 800610e:	8111      	strh	r1, [r2, #8]
 8006110:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006118:	4aab      	ldr	r2, [pc, #684]	; (80063c8 <problem_fetch+0x4a38>)
 800611a:	6810      	ldr	r0, [r2, #0]
 800611c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2205      	movs	r2, #5
 8006122:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,D,A,G");
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	33a4      	adds	r3, #164	; 0xa4
 8006128:	49a8      	ldr	r1, [pc, #672]	; (80063cc <problem_fetch+0x4a3c>)
 800612a:	461a      	mov	r2, r3
 800612c:	460b      	mov	r3, r1
 800612e:	cb03      	ldmia	r3!, {r0, r1}
 8006130:	6010      	str	r0, [r2, #0]
 8006132:	6051      	str	r1, [r2, #4]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"8,10,15,18,4");
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	3304      	adds	r3, #4
 800613c:	4aa4      	ldr	r2, [pc, #656]	; (80063d0 <problem_fetch+0x4a40>)
 800613e:	461c      	mov	r4, r3
 8006140:	4613      	mov	r3, r2
 8006142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006144:	6020      	str	r0, [r4, #0]
 8006146:	6061      	str	r1, [r4, #4]
 8006148:	60a2      	str	r2, [r4, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006154:	499f      	ldr	r1, [pc, #636]	; (80063d4 <problem_fetch+0x4a44>)
 8006156:	461a      	mov	r2, r3
 8006158:	460b      	mov	r3, r1
 800615a:	cb03      	ldmia	r3!, {r0, r1}
 800615c:	6010      	str	r0, [r2, #0]
 800615e:	6051      	str	r1, [r2, #4]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	8113      	strh	r3, [r2, #8]
			break;
 8006164:	f016 bb44 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 114 :
			strcpy(p->name,"ORDERLY HOUSING");
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800616e:	4a9a      	ldr	r2, [pc, #616]	; (80063d8 <problem_fetch+0x4a48>)
 8006170:	461c      	mov	r4, r3
 8006172:	4615      	mov	r5, r2
 8006174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006176:	6020      	str	r0, [r4, #0]
 8006178:	6061      	str	r1, [r4, #4]
 800617a:	60a2      	str	r2, [r4, #8]
 800617c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006184:	4a95      	ldr	r2, [pc, #596]	; (80063dc <problem_fetch+0x4a4c>)
 8006186:	8811      	ldrh	r1, [r2, #0]
 8006188:	7892      	ldrb	r2, [r2, #2]
 800618a:	8019      	strh	r1, [r3, #0]
 800618c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2205      	movs	r2, #5
 8006192:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,E,D");
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	33a4      	adds	r3, #164	; 0xa4
 8006198:	4991      	ldr	r1, [pc, #580]	; (80063e0 <problem_fetch+0x4a50>)
 800619a:	461a      	mov	r2, r3
 800619c:	460b      	mov	r3, r1
 800619e:	cb03      	ldmia	r3!, {r0, r1}
 80061a0:	6010      	str	r0, [r2, #0]
 80061a2:	6051      	str	r1, [r2, #4]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4a8d      	ldr	r2, [pc, #564]	; (80063e4 <problem_fetch+0x4a54>)
 80061ae:	461c      	mov	r4, r3
 80061b0:	4613      	mov	r3, r2
 80061b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061b4:	6020      	str	r0, [r4, #0]
 80061b6:	6061      	str	r1, [r4, #4]
 80061b8:	60a2      	str	r2, [r4, #8]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80061c4:	4988      	ldr	r1, [pc, #544]	; (80063e8 <problem_fetch+0x4a58>)
 80061c6:	461a      	mov	r2, r3
 80061c8:	460b      	mov	r3, r1
 80061ca:	cb03      	ldmia	r3!, {r0, r1}
 80061cc:	6010      	str	r0, [r2, #0]
 80061ce:	6051      	str	r1, [r2, #4]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	8113      	strh	r3, [r2, #8]
			break;
 80061d4:	f016 bb0c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 115 :
			strcpy(p->name,"CATCH AND PULL");
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80061de:	4a83      	ldr	r2, [pc, #524]	; (80063ec <problem_fetch+0x4a5c>)
 80061e0:	461c      	mov	r4, r3
 80061e2:	4613      	mov	r3, r2
 80061e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061e6:	6020      	str	r0, [r4, #0]
 80061e8:	6061      	str	r1, [r4, #4]
 80061ea:	60a2      	str	r2, [r4, #8]
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	789b      	ldrb	r3, [r3, #2]
 80061f0:	81a2      	strh	r2, [r4, #12]
 80061f2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80061fa:	4a7d      	ldr	r2, [pc, #500]	; (80063f0 <problem_fetch+0x4a60>)
 80061fc:	8811      	ldrh	r1, [r2, #0]
 80061fe:	7892      	ldrb	r2, [r2, #2]
 8006200:	8019      	strh	r1, [r3, #0]
 8006202:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2205      	movs	r2, #5
 8006208:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,I");
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	33a4      	adds	r3, #164	; 0xa4
 800620e:	4979      	ldr	r1, [pc, #484]	; (80063f4 <problem_fetch+0x4a64>)
 8006210:	461a      	mov	r2, r3
 8006212:	460b      	mov	r3, r1
 8006214:	cb03      	ldmia	r3!, {r0, r1}
 8006216:	6010      	str	r0, [r2, #0]
 8006218:	6051      	str	r1, [r2, #4]
 800621a:	881b      	ldrh	r3, [r3, #0]
 800621c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"14,8,4,18,9");
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3304      	adds	r3, #4
 8006222:	4a75      	ldr	r2, [pc, #468]	; (80063f8 <problem_fetch+0x4a68>)
 8006224:	461c      	mov	r4, r3
 8006226:	4613      	mov	r3, r2
 8006228:	cb07      	ldmia	r3!, {r0, r1, r2}
 800622a:	6020      	str	r0, [r4, #0]
 800622c:	6061      	str	r1, [r4, #4]
 800622e:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"d,d,s,e,d");
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006236:	4971      	ldr	r1, [pc, #452]	; (80063fc <problem_fetch+0x4a6c>)
 8006238:	461a      	mov	r2, r3
 800623a:	460b      	mov	r3, r1
 800623c:	cb03      	ldmia	r3!, {r0, r1}
 800623e:	6010      	str	r0, [r2, #0]
 8006240:	6051      	str	r1, [r2, #4]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	8113      	strh	r3, [r2, #8]
			break;
 8006246:	f016 bad3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 116 :
			strcpy(p->name,"WHERE'S YOUR BERRY");
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006250:	4a6b      	ldr	r2, [pc, #428]	; (8006400 <problem_fetch+0x4a70>)
 8006252:	461d      	mov	r5, r3
 8006254:	4614      	mov	r4, r2
 8006256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006258:	6028      	str	r0, [r5, #0]
 800625a:	6069      	str	r1, [r5, #4]
 800625c:	60aa      	str	r2, [r5, #8]
 800625e:	60eb      	str	r3, [r5, #12]
 8006260:	8823      	ldrh	r3, [r4, #0]
 8006262:	78a2      	ldrb	r2, [r4, #2]
 8006264:	822b      	strh	r3, [r5, #16]
 8006266:	4613      	mov	r3, r2
 8006268:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006270:	4a64      	ldr	r2, [pc, #400]	; (8006404 <problem_fetch+0x4a74>)
 8006272:	6810      	ldr	r0, [r2, #0]
 8006274:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2209      	movs	r2, #9
 800627a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,E,F,C,B,E,B");
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	33a4      	adds	r3, #164	; 0xa4
 8006280:	4a61      	ldr	r2, [pc, #388]	; (8006408 <problem_fetch+0x4a78>)
 8006282:	461d      	mov	r5, r3
 8006284:	4614      	mov	r4, r2
 8006286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006288:	6028      	str	r0, [r5, #0]
 800628a:	6069      	str	r1, [r5, #4]
 800628c:	60aa      	str	r2, [r5, #8]
 800628e:	60eb      	str	r3, [r5, #12]
 8006290:	8823      	ldrh	r3, [r4, #0]
 8006292:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,15,18,16,11,13,10,8,6");
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3304      	adds	r3, #4
 8006298:	4a5c      	ldr	r2, [pc, #368]	; (800640c <problem_fetch+0x4a7c>)
 800629a:	461d      	mov	r5, r3
 800629c:	4614      	mov	r4, r2
 800629e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062a0:	6028      	str	r0, [r5, #0]
 80062a2:	6069      	str	r1, [r5, #4]
 80062a4:	60aa      	str	r2, [r5, #8]
 80062a6:	60eb      	str	r3, [r5, #12]
 80062a8:	cc03      	ldmia	r4!, {r0, r1}
 80062aa:	6128      	str	r0, [r5, #16]
 80062ac:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,e,d,d,d,d,d,s");
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80062b4:	4a56      	ldr	r2, [pc, #344]	; (8006410 <problem_fetch+0x4a80>)
 80062b6:	461d      	mov	r5, r3
 80062b8:	4614      	mov	r4, r2
 80062ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062bc:	6028      	str	r0, [r5, #0]
 80062be:	6069      	str	r1, [r5, #4]
 80062c0:	60aa      	str	r2, [r5, #8]
 80062c2:	60eb      	str	r3, [r5, #12]
 80062c4:	8823      	ldrh	r3, [r4, #0]
 80062c6:	822b      	strh	r3, [r5, #16]
			break;
 80062c8:	f016 ba92 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 117 :
			strcpy(p->name,"PURPLE NURPLE BOYS");
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80062d2:	4a50      	ldr	r2, [pc, #320]	; (8006414 <problem_fetch+0x4a84>)
 80062d4:	461d      	mov	r5, r3
 80062d6:	4614      	mov	r4, r2
 80062d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062da:	6028      	str	r0, [r5, #0]
 80062dc:	6069      	str	r1, [r5, #4]
 80062de:	60aa      	str	r2, [r5, #8]
 80062e0:	60eb      	str	r3, [r5, #12]
 80062e2:	8823      	ldrh	r3, [r4, #0]
 80062e4:	78a2      	ldrb	r2, [r4, #2]
 80062e6:	822b      	strh	r3, [r5, #16]
 80062e8:	4613      	mov	r3, r2
 80062ea:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80062f2:	4a49      	ldr	r2, [pc, #292]	; (8006418 <problem_fetch+0x4a88>)
 80062f4:	6810      	ldr	r0, [r2, #0]
 80062f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2207      	movs	r2, #7
 80062fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,E,I,G,I");
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	33a4      	adds	r3, #164	; 0xa4
 8006302:	4a46      	ldr	r2, [pc, #280]	; (800641c <problem_fetch+0x4a8c>)
 8006304:	461c      	mov	r4, r3
 8006306:	4613      	mov	r3, r2
 8006308:	cb07      	ldmia	r3!, {r0, r1, r2}
 800630a:	6020      	str	r0, [r4, #0]
 800630c:	6061      	str	r1, [r4, #4]
 800630e:	60a2      	str	r2, [r4, #8]
 8006310:	881b      	ldrh	r3, [r3, #0]
 8006312:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,14,15,18");
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	3304      	adds	r3, #4
 8006318:	4a41      	ldr	r2, [pc, #260]	; (8006420 <problem_fetch+0x4a90>)
 800631a:	461d      	mov	r5, r3
 800631c:	4614      	mov	r4, r2
 800631e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006320:	6028      	str	r0, [r5, #0]
 8006322:	6069      	str	r1, [r5, #4]
 8006324:	60aa      	str	r2, [r5, #8]
 8006326:	60eb      	str	r3, [r5, #12]
 8006328:	8823      	ldrh	r3, [r4, #0]
 800632a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006332:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <problem_fetch+0x4a94>)
 8006334:	461c      	mov	r4, r3
 8006336:	4613      	mov	r3, r2
 8006338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	6061      	str	r1, [r4, #4]
 800633e:	60a2      	str	r2, [r4, #8]
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	81a3      	strh	r3, [r4, #12]
			break;
 8006344:	f016 ba54 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 118 :
			strcpy(p->name,"DUMBADUMBA EASY");
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800634e:	4a36      	ldr	r2, [pc, #216]	; (8006428 <problem_fetch+0x4a98>)
 8006350:	461c      	mov	r4, r3
 8006352:	4615      	mov	r5, r2
 8006354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006356:	6020      	str	r0, [r4, #0]
 8006358:	6061      	str	r1, [r4, #4]
 800635a:	60a2      	str	r2, [r4, #8]
 800635c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <problem_fetch+0x4a74>)
 8006366:	6810      	ldr	r0, [r2, #0]
 8006368:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2209      	movs	r2, #9
 800636e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,C,D,D,E,C");
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	33a4      	adds	r3, #164	; 0xa4
 8006374:	4a2d      	ldr	r2, [pc, #180]	; (800642c <problem_fetch+0x4a9c>)
 8006376:	461d      	mov	r5, r3
 8006378:	4614      	mov	r4, r2
 800637a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800637c:	6028      	str	r0, [r5, #0]
 800637e:	6069      	str	r1, [r5, #4]
 8006380:	60aa      	str	r2, [r5, #8]
 8006382:	60eb      	str	r3, [r5, #12]
 8006384:	8823      	ldrh	r3, [r4, #0]
 8006386:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18,6,5");
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3304      	adds	r3, #4
 800638c:	4a28      	ldr	r2, [pc, #160]	; (8006430 <problem_fetch+0x4aa0>)
 800638e:	461d      	mov	r5, r3
 8006390:	4614      	mov	r4, r2
 8006392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006394:	6028      	str	r0, [r5, #0]
 8006396:	6069      	str	r1, [r5, #4]
 8006398:	60aa      	str	r2, [r5, #8]
 800639a:	60eb      	str	r3, [r5, #12]
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	6128      	str	r0, [r5, #16]
 80063a0:	88a3      	ldrh	r3, [r4, #4]
 80063a2:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s,d");
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80063aa:	4a22      	ldr	r2, [pc, #136]	; (8006434 <problem_fetch+0x4aa4>)
 80063ac:	461d      	mov	r5, r3
 80063ae:	4614      	mov	r4, r2
 80063b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063b2:	6028      	str	r0, [r5, #0]
 80063b4:	6069      	str	r1, [r5, #4]
 80063b6:	60aa      	str	r2, [r5, #8]
 80063b8:	60eb      	str	r3, [r5, #12]
 80063ba:	8823      	ldrh	r3, [r4, #0]
 80063bc:	822b      	strh	r3, [r5, #16]
			break;
 80063be:	f016 ba17 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80063c2:	bf00      	nop
 80063c4:	08025274 	.word	0x08025274
 80063c8:	08023ccc 	.word	0x08023ccc
 80063cc:	08025280 	.word	0x08025280
 80063d0:	0802528c 	.word	0x0802528c
 80063d4:	0802529c 	.word	0x0802529c
 80063d8:	080252a8 	.word	0x080252a8
 80063dc:	080243c4 	.word	0x080243c4
 80063e0:	080252b8 	.word	0x080252b8
 80063e4:	080252c4 	.word	0x080252c4
 80063e8:	0802405c 	.word	0x0802405c
 80063ec:	080252d4 	.word	0x080252d4
 80063f0:	08024288 	.word	0x08024288
 80063f4:	080252e4 	.word	0x080252e4
 80063f8:	080252f0 	.word	0x080252f0
 80063fc:	080252fc 	.word	0x080252fc
 8006400:	08025308 	.word	0x08025308
 8006404:	08023b90 	.word	0x08023b90
 8006408:	0802531c 	.word	0x0802531c
 800640c:	08025330 	.word	0x08025330
 8006410:	08025348 	.word	0x08025348
 8006414:	0802535c 	.word	0x0802535c
 8006418:	08023c28 	.word	0x08023c28
 800641c:	08025370 	.word	0x08025370
 8006420:	08025380 	.word	0x08025380
 8006424:	08023c08 	.word	0x08023c08
 8006428:	08025394 	.word	0x08025394
 800642c:	080253a4 	.word	0x080253a4
 8006430:	080253b8 	.word	0x080253b8
 8006434:	080253d0 	.word	0x080253d0
		case 119 :
			strcpy(p->name,"ANTI JULIE");
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800643e:	49b0      	ldr	r1, [pc, #704]	; (8006700 <problem_fetch+0x4d70>)
 8006440:	461a      	mov	r2, r3
 8006442:	460b      	mov	r3, r1
 8006444:	cb03      	ldmia	r3!, {r0, r1}
 8006446:	6010      	str	r0, [r2, #0]
 8006448:	6051      	str	r1, [r2, #4]
 800644a:	8819      	ldrh	r1, [r3, #0]
 800644c:	789b      	ldrb	r3, [r3, #2]
 800644e:	8111      	strh	r1, [r2, #8]
 8006450:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006458:	4aaa      	ldr	r2, [pc, #680]	; (8006704 <problem_fetch+0x4d74>)
 800645a:	8811      	ldrh	r1, [r2, #0]
 800645c:	7892      	ldrb	r2, [r2, #2]
 800645e:	8019      	strh	r1, [r3, #0]
 8006460:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2206      	movs	r2, #6
 8006466:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,G,A,B");
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	33a4      	adds	r3, #164	; 0xa4
 800646c:	4aa6      	ldr	r2, [pc, #664]	; (8006708 <problem_fetch+0x4d78>)
 800646e:	461c      	mov	r4, r3
 8006470:	4613      	mov	r3, r2
 8006472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006474:	6020      	str	r0, [r4, #0]
 8006476:	6061      	str	r1, [r4, #4]
 8006478:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,17,18,6");
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3304      	adds	r3, #4
 800647e:	4aa3      	ldr	r2, [pc, #652]	; (800670c <problem_fetch+0x4d7c>)
 8006480:	461c      	mov	r4, r3
 8006482:	4615      	mov	r5, r2
 8006484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006486:	6020      	str	r0, [r4, #0]
 8006488:	6061      	str	r1, [r4, #4]
 800648a:	60a2      	str	r2, [r4, #8]
 800648c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006494:	4a9e      	ldr	r2, [pc, #632]	; (8006710 <problem_fetch+0x4d80>)
 8006496:	461c      	mov	r4, r3
 8006498:	4613      	mov	r3, r2
 800649a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800649c:	6020      	str	r0, [r4, #0]
 800649e:	6061      	str	r1, [r4, #4]
 80064a0:	60a2      	str	r2, [r4, #8]
			break;
 80064a2:	f016 b9a5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 120 :
			strcpy(p->name,"BROWN DIRTY WATER");
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80064ac:	4a99      	ldr	r2, [pc, #612]	; (8006714 <problem_fetch+0x4d84>)
 80064ae:	461d      	mov	r5, r3
 80064b0:	4614      	mov	r4, r2
 80064b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b4:	6028      	str	r0, [r5, #0]
 80064b6:	6069      	str	r1, [r5, #4]
 80064b8:	60aa      	str	r2, [r5, #8]
 80064ba:	60eb      	str	r3, [r5, #12]
 80064bc:	8823      	ldrh	r3, [r4, #0]
 80064be:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80064c6:	4a94      	ldr	r2, [pc, #592]	; (8006718 <problem_fetch+0x4d88>)
 80064c8:	6810      	ldr	r0, [r2, #0]
 80064ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2207      	movs	r2, #7
 80064d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,D");
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	33a4      	adds	r3, #164	; 0xa4
 80064d6:	4a91      	ldr	r2, [pc, #580]	; (800671c <problem_fetch+0x4d8c>)
 80064d8:	461c      	mov	r4, r3
 80064da:	4613      	mov	r3, r2
 80064dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064de:	6020      	str	r0, [r4, #0]
 80064e0:	6061      	str	r1, [r4, #4]
 80064e2:	60a2      	str	r2, [r4, #8]
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,8,11,14,18");
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4a8c      	ldr	r2, [pc, #560]	; (8006720 <problem_fetch+0x4d90>)
 80064ee:	461d      	mov	r5, r3
 80064f0:	4614      	mov	r4, r2
 80064f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064f4:	6028      	str	r0, [r5, #0]
 80064f6:	6069      	str	r1, [r5, #4]
 80064f8:	60aa      	str	r2, [r5, #8]
 80064fa:	60eb      	str	r3, [r5, #12]
 80064fc:	7823      	ldrb	r3, [r4, #0]
 80064fe:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006506:	4a87      	ldr	r2, [pc, #540]	; (8006724 <problem_fetch+0x4d94>)
 8006508:	461c      	mov	r4, r3
 800650a:	4613      	mov	r3, r2
 800650c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800650e:	6020      	str	r0, [r4, #0]
 8006510:	6061      	str	r1, [r4, #4]
 8006512:	60a2      	str	r2, [r4, #8]
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	81a3      	strh	r3, [r4, #12]
			break;
 8006518:	f016 b96a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 121 :
			strcpy(p->name,"INNSMOUTH HORROR");
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006522:	4a81      	ldr	r2, [pc, #516]	; (8006728 <problem_fetch+0x4d98>)
 8006524:	461d      	mov	r5, r3
 8006526:	4614      	mov	r4, r2
 8006528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652a:	6028      	str	r0, [r5, #0]
 800652c:	6069      	str	r1, [r5, #4]
 800652e:	60aa      	str	r2, [r5, #8]
 8006530:	60eb      	str	r3, [r5, #12]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800653c:	4a7b      	ldr	r2, [pc, #492]	; (800672c <problem_fetch+0x4d9c>)
 800653e:	6810      	ldr	r0, [r2, #0]
 8006540:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2209      	movs	r2, #9
 8006546:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,E,G,E,I,I,E");
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	33a4      	adds	r3, #164	; 0xa4
 800654c:	4a78      	ldr	r2, [pc, #480]	; (8006730 <problem_fetch+0x4da0>)
 800654e:	461d      	mov	r5, r3
 8006550:	4614      	mov	r4, r2
 8006552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006554:	6028      	str	r0, [r5, #0]
 8006556:	6069      	str	r1, [r5, #4]
 8006558:	60aa      	str	r2, [r5, #8]
 800655a:	60eb      	str	r3, [r5, #12]
 800655c:	8823      	ldrh	r3, [r4, #0]
 800655e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,8,11,12,14,16,18,7,6");
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	4a73      	ldr	r2, [pc, #460]	; (8006734 <problem_fetch+0x4da4>)
 8006566:	461c      	mov	r4, r3
 8006568:	4615      	mov	r5, r2
 800656a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800656c:	6020      	str	r0, [r4, #0]
 800656e:	6061      	str	r1, [r4, #4]
 8006570:	60a2      	str	r2, [r4, #8]
 8006572:	60e3      	str	r3, [r4, #12]
 8006574:	6828      	ldr	r0, [r5, #0]
 8006576:	6120      	str	r0, [r4, #16]
 8006578:	88ab      	ldrh	r3, [r5, #4]
 800657a:	79aa      	ldrb	r2, [r5, #6]
 800657c:	82a3      	strh	r3, [r4, #20]
 800657e:	4613      	mov	r3, r2
 8006580:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,s");
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006588:	4a6b      	ldr	r2, [pc, #428]	; (8006738 <problem_fetch+0x4da8>)
 800658a:	461d      	mov	r5, r3
 800658c:	4614      	mov	r4, r2
 800658e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006590:	6028      	str	r0, [r5, #0]
 8006592:	6069      	str	r1, [r5, #4]
 8006594:	60aa      	str	r2, [r5, #8]
 8006596:	60eb      	str	r3, [r5, #12]
 8006598:	8823      	ldrh	r3, [r4, #0]
 800659a:	822b      	strh	r3, [r5, #16]
			break;
 800659c:	f016 b928 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 122 :
			strcpy(p->name,"PB AND JELLY");
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80065a6:	4a65      	ldr	r2, [pc, #404]	; (800673c <problem_fetch+0x4dac>)
 80065a8:	461c      	mov	r4, r3
 80065aa:	4613      	mov	r3, r2
 80065ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065ae:	6020      	str	r0, [r4, #0]
 80065b0:	6061      	str	r1, [r4, #4]
 80065b2:	60a2      	str	r2, [r4, #8]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80065be:	4a56      	ldr	r2, [pc, #344]	; (8006718 <problem_fetch+0x4d88>)
 80065c0:	6810      	ldr	r0, [r2, #0]
 80065c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2207      	movs	r2, #7
 80065c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,E,H,I,D");
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	33a4      	adds	r3, #164	; 0xa4
 80065ce:	4a5c      	ldr	r2, [pc, #368]	; (8006740 <problem_fetch+0x4db0>)
 80065d0:	461c      	mov	r4, r3
 80065d2:	4613      	mov	r3, r2
 80065d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065d6:	6020      	str	r0, [r4, #0]
 80065d8:	6061      	str	r1, [r4, #4]
 80065da:	60a2      	str	r2, [r4, #8]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,12,14,18");
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4a57      	ldr	r2, [pc, #348]	; (8006744 <problem_fetch+0x4db4>)
 80065e6:	461d      	mov	r5, r3
 80065e8:	4614      	mov	r4, r2
 80065ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ec:	6028      	str	r0, [r5, #0]
 80065ee:	6069      	str	r1, [r5, #4]
 80065f0:	60aa      	str	r2, [r5, #8]
 80065f2:	60eb      	str	r3, [r5, #12]
 80065f4:	8823      	ldrh	r3, [r4, #0]
 80065f6:	78a2      	ldrb	r2, [r4, #2]
 80065f8:	822b      	strh	r3, [r5, #16]
 80065fa:	4613      	mov	r3, r2
 80065fc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006604:	4a50      	ldr	r2, [pc, #320]	; (8006748 <problem_fetch+0x4db8>)
 8006606:	461c      	mov	r4, r3
 8006608:	4613      	mov	r3, r2
 800660a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800660c:	6020      	str	r0, [r4, #0]
 800660e:	6061      	str	r1, [r4, #4]
 8006610:	60a2      	str	r2, [r4, #8]
 8006612:	881b      	ldrh	r3, [r3, #0]
 8006614:	81a3      	strh	r3, [r4, #12]
			break;
 8006616:	f016 b8eb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 123 :
			strcpy(p->name,"APRITI");
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006620:	4a4a      	ldr	r2, [pc, #296]	; (800674c <problem_fetch+0x4dbc>)
 8006622:	6810      	ldr	r0, [r2, #0]
 8006624:	6018      	str	r0, [r3, #0]
 8006626:	8891      	ldrh	r1, [r2, #4]
 8006628:	7992      	ldrb	r2, [r2, #6]
 800662a:	8099      	strh	r1, [r3, #4]
 800662c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006634:	4a46      	ldr	r2, [pc, #280]	; (8006750 <problem_fetch+0x4dc0>)
 8006636:	8811      	ldrh	r1, [r2, #0]
 8006638:	7892      	ldrb	r2, [r2, #2]
 800663a:	8019      	strh	r1, [r3, #0]
 800663c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2208      	movs	r2, #8
 8006642:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,D,C,D,D");
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	33a4      	adds	r3, #164	; 0xa4
 8006648:	4a42      	ldr	r2, [pc, #264]	; (8006754 <problem_fetch+0x4dc4>)
 800664a:	461c      	mov	r4, r3
 800664c:	4615      	mov	r5, r2
 800664e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006650:	6020      	str	r0, [r4, #0]
 8006652:	6061      	str	r1, [r4, #4]
 8006654:	60a2      	str	r2, [r4, #8]
 8006656:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,11,13,15,18");
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	4a3e      	ldr	r2, [pc, #248]	; (8006758 <problem_fetch+0x4dc8>)
 800665e:	461d      	mov	r5, r3
 8006660:	4614      	mov	r4, r2
 8006662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006664:	6028      	str	r0, [r5, #0]
 8006666:	6069      	str	r1, [r5, #4]
 8006668:	60aa      	str	r2, [r5, #8]
 800666a:	60eb      	str	r3, [r5, #12]
 800666c:	6820      	ldr	r0, [r4, #0]
 800666e:	6128      	str	r0, [r5, #16]
 8006670:	7923      	ldrb	r3, [r4, #4]
 8006672:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800667a:	4a38      	ldr	r2, [pc, #224]	; (800675c <problem_fetch+0x4dcc>)
 800667c:	461c      	mov	r4, r3
 800667e:	4615      	mov	r5, r2
 8006680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006682:	6020      	str	r0, [r4, #0]
 8006684:	6061      	str	r1, [r4, #4]
 8006686:	60a2      	str	r2, [r4, #8]
 8006688:	60e3      	str	r3, [r4, #12]
			break;
 800668a:	f016 b8b1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 124 :
			strcpy(p->name,"LADYBUG DIRECT");
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006694:	4a32      	ldr	r2, [pc, #200]	; (8006760 <problem_fetch+0x4dd0>)
 8006696:	461c      	mov	r4, r3
 8006698:	4613      	mov	r3, r2
 800669a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800669c:	6020      	str	r0, [r4, #0]
 800669e:	6061      	str	r1, [r4, #4]
 80066a0:	60a2      	str	r2, [r4, #8]
 80066a2:	881a      	ldrh	r2, [r3, #0]
 80066a4:	789b      	ldrb	r3, [r3, #2]
 80066a6:	81a2      	strh	r2, [r4, #12]
 80066a8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80066b0:	4a2c      	ldr	r2, [pc, #176]	; (8006764 <problem_fetch+0x4dd4>)
 80066b2:	6810      	ldr	r0, [r2, #0]
 80066b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2206      	movs	r2, #6
 80066ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A");
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	33a4      	adds	r3, #164	; 0xa4
 80066c0:	4a29      	ldr	r2, [pc, #164]	; (8006768 <problem_fetch+0x4dd8>)
 80066c2:	461c      	mov	r4, r3
 80066c4:	4613      	mov	r3, r2
 80066c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066c8:	6020      	str	r0, [r4, #0]
 80066ca:	6061      	str	r1, [r4, #4]
 80066cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18,9");
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	3304      	adds	r3, #4
 80066d2:	4a26      	ldr	r2, [pc, #152]	; (800676c <problem_fetch+0x4ddc>)
 80066d4:	461c      	mov	r4, r3
 80066d6:	4613      	mov	r3, r2
 80066d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066da:	6020      	str	r0, [r4, #0]
 80066dc:	6061      	str	r1, [r4, #4]
 80066de:	60a2      	str	r2, [r4, #8]
 80066e0:	881a      	ldrh	r2, [r3, #0]
 80066e2:	789b      	ldrb	r3, [r3, #2]
 80066e4:	81a2      	strh	r2, [r4, #12]
 80066e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80066ee:	4a20      	ldr	r2, [pc, #128]	; (8006770 <problem_fetch+0x4de0>)
 80066f0:	461c      	mov	r4, r3
 80066f2:	4613      	mov	r3, r2
 80066f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	6061      	str	r1, [r4, #4]
 80066fa:	60a2      	str	r2, [r4, #8]
			break;
 80066fc:	f016 b878 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8006700:	080253e4 	.word	0x080253e4
 8006704:	08023b50 	.word	0x08023b50
 8006708:	080253f0 	.word	0x080253f0
 800670c:	080253fc 	.word	0x080253fc
 8006710:	0802540c 	.word	0x0802540c
 8006714:	08025418 	.word	0x08025418
 8006718:	08023c28 	.word	0x08023c28
 800671c:	0802542c 	.word	0x0802542c
 8006720:	0802543c 	.word	0x0802543c
 8006724:	08023c08 	.word	0x08023c08
 8006728:	08025450 	.word	0x08025450
 800672c:	08023b90 	.word	0x08023b90
 8006730:	08025464 	.word	0x08025464
 8006734:	08025478 	.word	0x08025478
 8006738:	08025490 	.word	0x08025490
 800673c:	080254a4 	.word	0x080254a4
 8006740:	080254b4 	.word	0x080254b4
 8006744:	080254c4 	.word	0x080254c4
 8006748:	08023d18 	.word	0x08023d18
 800674c:	080254d8 	.word	0x080254d8
 8006750:	08023c5c 	.word	0x08023c5c
 8006754:	080254e0 	.word	0x080254e0
 8006758:	080254f0 	.word	0x080254f0
 800675c:	08023cb4 	.word	0x08023cb4
 8006760:	08025508 	.word	0x08025508
 8006764:	08023d30 	.word	0x08023d30
 8006768:	08025518 	.word	0x08025518
 800676c:	08025524 	.word	0x08025524
 8006770:	08025534 	.word	0x08025534
		case 125 :
			strcpy(p->name,"CATA");
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800677a:	4abf      	ldr	r2, [pc, #764]	; (8006a78 <problem_fetch+0x50e8>)
 800677c:	6810      	ldr	r0, [r2, #0]
 800677e:	6018      	str	r0, [r3, #0]
 8006780:	7912      	ldrb	r2, [r2, #4]
 8006782:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800678a:	4abc      	ldr	r2, [pc, #752]	; (8006a7c <problem_fetch+0x50ec>)
 800678c:	6810      	ldr	r0, [r2, #0]
 800678e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2205      	movs	r2, #5
 8006794:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,A,D");
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	33a4      	adds	r3, #164	; 0xa4
 800679a:	49b9      	ldr	r1, [pc, #740]	; (8006a80 <problem_fetch+0x50f0>)
 800679c:	461a      	mov	r2, r3
 800679e:	460b      	mov	r3, r1
 80067a0:	cb03      	ldmia	r3!, {r0, r1}
 80067a2:	6010      	str	r0, [r2, #0]
 80067a4:	6051      	str	r1, [r2, #4]
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,7,11,14,18");
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4ab5      	ldr	r2, [pc, #724]	; (8006a84 <problem_fetch+0x50f4>)
 80067b0:	461c      	mov	r4, r3
 80067b2:	4613      	mov	r3, r2
 80067b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	6061      	str	r1, [r4, #4]
 80067ba:	60a2      	str	r2, [r4, #8]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80067c6:	49b0      	ldr	r1, [pc, #704]	; (8006a88 <problem_fetch+0x50f8>)
 80067c8:	461a      	mov	r2, r3
 80067ca:	460b      	mov	r3, r1
 80067cc:	cb03      	ldmia	r3!, {r0, r1}
 80067ce:	6010      	str	r0, [r2, #0]
 80067d0:	6051      	str	r1, [r2, #4]
 80067d2:	881b      	ldrh	r3, [r3, #0]
 80067d4:	8113      	strh	r3, [r2, #8]
			break;
 80067d6:	f016 b80b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 126 :
			strcpy(p->name,"TRØNDERSPOTT");
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80067e0:	4aaa      	ldr	r2, [pc, #680]	; (8006a8c <problem_fetch+0x50fc>)
 80067e2:	461c      	mov	r4, r3
 80067e4:	4613      	mov	r3, r2
 80067e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067e8:	6020      	str	r0, [r4, #0]
 80067ea:	6061      	str	r1, [r4, #4]
 80067ec:	60a2      	str	r2, [r4, #8]
 80067ee:	881b      	ldrh	r3, [r3, #0]
 80067f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80067f8:	4aa5      	ldr	r2, [pc, #660]	; (8006a90 <problem_fetch+0x5100>)
 80067fa:	6810      	ldr	r0, [r2, #0]
 80067fc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2205      	movs	r2, #5
 8006802:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D");
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	33a4      	adds	r3, #164	; 0xa4
 8006808:	49a2      	ldr	r1, [pc, #648]	; (8006a94 <problem_fetch+0x5104>)
 800680a:	461a      	mov	r2, r3
 800680c:	460b      	mov	r3, r1
 800680e:	cb03      	ldmia	r3!, {r0, r1}
 8006810:	6010      	str	r0, [r2, #0]
 8006812:	6051      	str	r1, [r2, #4]
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,13,18");
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	4a9e      	ldr	r2, [pc, #632]	; (8006a98 <problem_fetch+0x5108>)
 800681e:	461c      	mov	r4, r3
 8006820:	4613      	mov	r3, r2
 8006822:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006824:	6020      	str	r0, [r4, #0]
 8006826:	6061      	str	r1, [r4, #4]
 8006828:	60a2      	str	r2, [r4, #8]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006834:	4999      	ldr	r1, [pc, #612]	; (8006a9c <problem_fetch+0x510c>)
 8006836:	461a      	mov	r2, r3
 8006838:	460b      	mov	r3, r1
 800683a:	cb03      	ldmia	r3!, {r0, r1}
 800683c:	6010      	str	r0, [r2, #0]
 800683e:	6051      	str	r1, [r2, #4]
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	8113      	strh	r3, [r2, #8]
			break;
 8006844:	f015 bfd4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 127 :
			strcpy(p->name,"RYEBREAD");
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800684e:	4994      	ldr	r1, [pc, #592]	; (8006aa0 <problem_fetch+0x5110>)
 8006850:	461a      	mov	r2, r3
 8006852:	460b      	mov	r3, r1
 8006854:	cb03      	ldmia	r3!, {r0, r1}
 8006856:	6010      	str	r0, [r2, #0]
 8006858:	6051      	str	r1, [r2, #4]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C+");
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006864:	4a8f      	ldr	r2, [pc, #572]	; (8006aa4 <problem_fetch+0x5114>)
 8006866:	6810      	ldr	r0, [r2, #0]
 8006868:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2205      	movs	r2, #5
 800686e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,A,A");
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	33a4      	adds	r3, #164	; 0xa4
 8006874:	498c      	ldr	r1, [pc, #560]	; (8006aa8 <problem_fetch+0x5118>)
 8006876:	461a      	mov	r2, r3
 8006878:	460b      	mov	r3, r1
 800687a:	cb03      	ldmia	r3!, {r0, r1}
 800687c:	6010      	str	r0, [r2, #0]
 800687e:	6051      	str	r1, [r2, #4]
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,11,5,14,18");
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3304      	adds	r3, #4
 8006888:	4a88      	ldr	r2, [pc, #544]	; (8006aac <problem_fetch+0x511c>)
 800688a:	461c      	mov	r4, r3
 800688c:	4613      	mov	r3, r2
 800688e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006890:	6020      	str	r0, [r4, #0]
 8006892:	6061      	str	r1, [r4, #4]
 8006894:	60a2      	str	r2, [r4, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80068a0:	4979      	ldr	r1, [pc, #484]	; (8006a88 <problem_fetch+0x50f8>)
 80068a2:	461a      	mov	r2, r3
 80068a4:	460b      	mov	r3, r1
 80068a6:	cb03      	ldmia	r3!, {r0, r1}
 80068a8:	6010      	str	r0, [r2, #0]
 80068aa:	6051      	str	r1, [r2, #4]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	8113      	strh	r3, [r2, #8]
			break;
 80068b0:	f015 bf9e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 128 :
			strcpy(p->name,"SUPE");
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80068ba:	4a7d      	ldr	r2, [pc, #500]	; (8006ab0 <problem_fetch+0x5120>)
 80068bc:	6810      	ldr	r0, [r2, #0]
 80068be:	6018      	str	r0, [r3, #0]
 80068c0:	7912      	ldrb	r2, [r2, #4]
 80068c2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80068ca:	4a7a      	ldr	r2, [pc, #488]	; (8006ab4 <problem_fetch+0x5124>)
 80068cc:	6810      	ldr	r0, [r2, #0]
 80068ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2208      	movs	r2, #8
 80068d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,G,C,G,E,I");
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	33a4      	adds	r3, #164	; 0xa4
 80068da:	4a77      	ldr	r2, [pc, #476]	; (8006ab8 <problem_fetch+0x5128>)
 80068dc:	461c      	mov	r4, r3
 80068de:	4615      	mov	r5, r2
 80068e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068e2:	6020      	str	r0, [r4, #0]
 80068e4:	6061      	str	r1, [r4, #4]
 80068e6:	60a2      	str	r2, [r4, #8]
 80068e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,6,10,13,14,16,18");
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3304      	adds	r3, #4
 80068ee:	4a73      	ldr	r2, [pc, #460]	; (8006abc <problem_fetch+0x512c>)
 80068f0:	461d      	mov	r5, r3
 80068f2:	4614      	mov	r4, r2
 80068f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068f6:	6028      	str	r0, [r5, #0]
 80068f8:	6069      	str	r1, [r5, #4]
 80068fa:	60aa      	str	r2, [r5, #8]
 80068fc:	60eb      	str	r3, [r5, #12]
 80068fe:	6820      	ldr	r0, [r4, #0]
 8006900:	6128      	str	r0, [r5, #16]
 8006902:	7923      	ldrb	r3, [r4, #4]
 8006904:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800690c:	4a6c      	ldr	r2, [pc, #432]	; (8006ac0 <problem_fetch+0x5130>)
 800690e:	461c      	mov	r4, r3
 8006910:	4615      	mov	r5, r2
 8006912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006914:	6020      	str	r0, [r4, #0]
 8006916:	6061      	str	r1, [r4, #4]
 8006918:	60a2      	str	r2, [r4, #8]
 800691a:	60e3      	str	r3, [r4, #12]
			break;
 800691c:	f015 bf68 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 129 :
			strcpy(p->name,"LONG BOI 2");
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006926:	4967      	ldr	r1, [pc, #412]	; (8006ac4 <problem_fetch+0x5134>)
 8006928:	461a      	mov	r2, r3
 800692a:	460b      	mov	r3, r1
 800692c:	cb03      	ldmia	r3!, {r0, r1}
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	6051      	str	r1, [r2, #4]
 8006932:	8819      	ldrh	r1, [r3, #0]
 8006934:	789b      	ldrb	r3, [r3, #2]
 8006936:	8111      	strh	r1, [r2, #8]
 8006938:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006940:	4a4e      	ldr	r2, [pc, #312]	; (8006a7c <problem_fetch+0x50ec>)
 8006942:	6810      	ldr	r0, [r2, #0]
 8006944:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2204      	movs	r2, #4
 800694a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,I");
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	33a4      	adds	r3, #164	; 0xa4
 8006950:	495d      	ldr	r1, [pc, #372]	; (8006ac8 <problem_fetch+0x5138>)
 8006952:	461a      	mov	r2, r3
 8006954:	460b      	mov	r3, r1
 8006956:	cb03      	ldmia	r3!, {r0, r1}
 8006958:	6010      	str	r0, [r2, #0]
 800695a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,15,18");
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	495a      	ldr	r1, [pc, #360]	; (8006acc <problem_fetch+0x513c>)
 8006962:	461a      	mov	r2, r3
 8006964:	460b      	mov	r3, r1
 8006966:	cb03      	ldmia	r3!, {r0, r1}
 8006968:	6010      	str	r0, [r2, #0]
 800696a:	6051      	str	r1, [r2, #4]
 800696c:	8819      	ldrh	r1, [r3, #0]
 800696e:	789b      	ldrb	r3, [r3, #2]
 8006970:	8111      	strh	r1, [r2, #8]
 8006972:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800697a:	4955      	ldr	r1, [pc, #340]	; (8006ad0 <problem_fetch+0x5140>)
 800697c:	461a      	mov	r2, r3
 800697e:	460b      	mov	r3, r1
 8006980:	cb03      	ldmia	r3!, {r0, r1}
 8006982:	6010      	str	r0, [r2, #0]
 8006984:	6051      	str	r1, [r2, #4]
			break;
 8006986:	f015 bf33 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 130 :
			strcpy(p->name,"PHILLING SHIFTS");
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006990:	4a50      	ldr	r2, [pc, #320]	; (8006ad4 <problem_fetch+0x5144>)
 8006992:	461c      	mov	r4, r3
 8006994:	4615      	mov	r5, r2
 8006996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006998:	6020      	str	r0, [r4, #0]
 800699a:	6061      	str	r1, [r4, #4]
 800699c:	60a2      	str	r2, [r4, #8]
 800699e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80069a6:	4a4c      	ldr	r2, [pc, #304]	; (8006ad8 <problem_fetch+0x5148>)
 80069a8:	8811      	ldrh	r1, [r2, #0]
 80069aa:	7892      	ldrb	r2, [r2, #2]
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2207      	movs	r2, #7
 80069b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,D,E,J,H,K,G");
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	33a4      	adds	r3, #164	; 0xa4
 80069ba:	4a48      	ldr	r2, [pc, #288]	; (8006adc <problem_fetch+0x514c>)
 80069bc:	461c      	mov	r4, r3
 80069be:	4613      	mov	r3, r2
 80069c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069c2:	6020      	str	r0, [r4, #0]
 80069c4:	6061      	str	r1, [r4, #4]
 80069c6:	60a2      	str	r2, [r4, #8]
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,18,14,12,8,9,4");
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4a43      	ldr	r2, [pc, #268]	; (8006ae0 <problem_fetch+0x5150>)
 80069d2:	461d      	mov	r5, r3
 80069d4:	4614      	mov	r4, r2
 80069d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069d8:	6028      	str	r0, [r5, #0]
 80069da:	6069      	str	r1, [r5, #4]
 80069dc:	60aa      	str	r2, [r5, #8]
 80069de:	60eb      	str	r3, [r5, #12]
 80069e0:	8823      	ldrh	r3, [r4, #0]
 80069e2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,e,d,d,d,d,s");
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80069ea:	4a3e      	ldr	r2, [pc, #248]	; (8006ae4 <problem_fetch+0x5154>)
 80069ec:	461c      	mov	r4, r3
 80069ee:	4613      	mov	r3, r2
 80069f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069f2:	6020      	str	r0, [r4, #0]
 80069f4:	6061      	str	r1, [r4, #4]
 80069f6:	60a2      	str	r2, [r4, #8]
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	81a3      	strh	r3, [r4, #12]
			break;
 80069fc:	f015 bef8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 131 :
			strcpy(p->name,"HOJAR KLUBBEN");
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a06:	4a38      	ldr	r2, [pc, #224]	; (8006ae8 <problem_fetch+0x5158>)
 8006a08:	461c      	mov	r4, r3
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a0e:	6020      	str	r0, [r4, #0]
 8006a10:	6061      	str	r1, [r4, #4]
 8006a12:	60a2      	str	r2, [r4, #8]
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a1e:	4a33      	ldr	r2, [pc, #204]	; (8006aec <problem_fetch+0x515c>)
 8006a20:	8811      	ldrh	r1, [r2, #0]
 8006a22:	7892      	ldrb	r2, [r2, #2]
 8006a24:	8019      	strh	r1, [r3, #0]
 8006a26:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2207      	movs	r2, #7
 8006a2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,J,G,H,G,I");
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	33a4      	adds	r3, #164	; 0xa4
 8006a32:	4a2f      	ldr	r2, [pc, #188]	; (8006af0 <problem_fetch+0x5160>)
 8006a34:	461c      	mov	r4, r3
 8006a36:	4613      	mov	r3, r2
 8006a38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a3a:	6020      	str	r0, [r4, #0]
 8006a3c:	6061      	str	r1, [r4, #4]
 8006a3e:	60a2      	str	r2, [r4, #8]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,13,15,16,17,18");
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4a2a      	ldr	r2, [pc, #168]	; (8006af4 <problem_fetch+0x5164>)
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a50:	6028      	str	r0, [r5, #0]
 8006a52:	6069      	str	r1, [r5, #4]
 8006a54:	60aa      	str	r2, [r5, #8]
 8006a56:	60eb      	str	r3, [r5, #12]
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006a62:	4a25      	ldr	r2, [pc, #148]	; (8006af8 <problem_fetch+0x5168>)
 8006a64:	461c      	mov	r4, r3
 8006a66:	4613      	mov	r3, r2
 8006a68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a6a:	6020      	str	r0, [r4, #0]
 8006a6c:	6061      	str	r1, [r4, #4]
 8006a6e:	60a2      	str	r2, [r4, #8]
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	81a3      	strh	r3, [r4, #12]
			break;
 8006a74:	f015 bebc 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8006a78:	08025540 	.word	0x08025540
 8006a7c:	08023d30 	.word	0x08023d30
 8006a80:	08025548 	.word	0x08025548
 8006a84:	08025554 	.word	0x08025554
 8006a88:	0802405c 	.word	0x0802405c
 8006a8c:	08025564 	.word	0x08025564
 8006a90:	08023b90 	.word	0x08023b90
 8006a94:	08025574 	.word	0x08025574
 8006a98:	08025580 	.word	0x08025580
 8006a9c:	08024270 	.word	0x08024270
 8006aa0:	08025590 	.word	0x08025590
 8006aa4:	0802419c 	.word	0x0802419c
 8006aa8:	0802559c 	.word	0x0802559c
 8006aac:	080255a8 	.word	0x080255a8
 8006ab0:	080255b8 	.word	0x080255b8
 8006ab4:	08023c28 	.word	0x08023c28
 8006ab8:	080255c0 	.word	0x080255c0
 8006abc:	080255d0 	.word	0x080255d0
 8006ac0:	08023da0 	.word	0x08023da0
 8006ac4:	080255e8 	.word	0x080255e8
 8006ac8:	080255f4 	.word	0x080255f4
 8006acc:	080255fc 	.word	0x080255fc
 8006ad0:	08023ce4 	.word	0x08023ce4
 8006ad4:	08025608 	.word	0x08025608
 8006ad8:	080243c4 	.word	0x080243c4
 8006adc:	08025618 	.word	0x08025618
 8006ae0:	08025628 	.word	0x08025628
 8006ae4:	0802563c 	.word	0x0802563c
 8006ae8:	0802564c 	.word	0x0802564c
 8006aec:	08024288 	.word	0x08024288
 8006af0:	0802565c 	.word	0x0802565c
 8006af4:	0802566c 	.word	0x0802566c
 8006af8:	08023d18 	.word	0x08023d18
		case 132 :
			strcpy(p->name,"TRIP4");
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006b02:	4ac3      	ldr	r2, [pc, #780]	; (8006e10 <problem_fetch+0x5480>)
 8006b04:	6810      	ldr	r0, [r2, #0]
 8006b06:	6018      	str	r0, [r3, #0]
 8006b08:	8892      	ldrh	r2, [r2, #4]
 8006b0a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006b12:	4ac0      	ldr	r2, [pc, #768]	; (8006e14 <problem_fetch+0x5484>)
 8006b14:	6810      	ldr	r0, [r2, #0]
 8006b16:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2209      	movs	r2, #9
 8006b1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,J,H,D,D,I,D");
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	33a4      	adds	r3, #164	; 0xa4
 8006b22:	4abd      	ldr	r2, [pc, #756]	; (8006e18 <problem_fetch+0x5488>)
 8006b24:	461d      	mov	r5, r3
 8006b26:	4614      	mov	r4, r2
 8006b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b2a:	6028      	str	r0, [r5, #0]
 8006b2c:	6069      	str	r1, [r5, #4]
 8006b2e:	60aa      	str	r2, [r5, #8]
 8006b30:	60eb      	str	r3, [r5, #12]
 8006b32:	8823      	ldrh	r3, [r4, #0]
 8006b34:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,13,12,11,7,7,18");
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4ab8      	ldr	r2, [pc, #736]	; (8006e1c <problem_fetch+0x548c>)
 8006b3c:	461d      	mov	r5, r3
 8006b3e:	4614      	mov	r4, r2
 8006b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b42:	6028      	str	r0, [r5, #0]
 8006b44:	6069      	str	r1, [r5, #4]
 8006b46:	60aa      	str	r2, [r5, #8]
 8006b48:	60eb      	str	r3, [r5, #12]
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	6128      	str	r0, [r5, #16]
 8006b4e:	88a3      	ldrh	r3, [r4, #4]
 8006b50:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006b58:	4ab1      	ldr	r2, [pc, #708]	; (8006e20 <problem_fetch+0x5490>)
 8006b5a:	461d      	mov	r5, r3
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b60:	6028      	str	r0, [r5, #0]
 8006b62:	6069      	str	r1, [r5, #4]
 8006b64:	60aa      	str	r2, [r5, #8]
 8006b66:	60eb      	str	r3, [r5, #12]
 8006b68:	8823      	ldrh	r3, [r4, #0]
 8006b6a:	822b      	strh	r3, [r5, #16]
			break;
 8006b6c:	f015 be40 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 133 :
			strcpy(p->name,"TRIP3");
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006b76:	4aab      	ldr	r2, [pc, #684]	; (8006e24 <problem_fetch+0x5494>)
 8006b78:	6810      	ldr	r0, [r2, #0]
 8006b7a:	6018      	str	r0, [r3, #0]
 8006b7c:	8892      	ldrh	r2, [r2, #4]
 8006b7e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006b86:	4aa8      	ldr	r2, [pc, #672]	; (8006e28 <problem_fetch+0x5498>)
 8006b88:	6810      	ldr	r0, [r2, #0]
 8006b8a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2206      	movs	r2, #6
 8006b90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,C,C,D");
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	33a4      	adds	r3, #164	; 0xa4
 8006b96:	4aa5      	ldr	r2, [pc, #660]	; (8006e2c <problem_fetch+0x549c>)
 8006b98:	461c      	mov	r4, r3
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006b9e:	6020      	str	r0, [r4, #0]
 8006ba0:	6061      	str	r1, [r4, #4]
 8006ba2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"12,6,10,8,5,18");
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4aa1      	ldr	r2, [pc, #644]	; (8006e30 <problem_fetch+0x54a0>)
 8006baa:	461c      	mov	r4, r3
 8006bac:	4613      	mov	r3, r2
 8006bae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006bb0:	6020      	str	r0, [r4, #0]
 8006bb2:	6061      	str	r1, [r4, #4]
 8006bb4:	60a2      	str	r2, [r4, #8]
 8006bb6:	881a      	ldrh	r2, [r3, #0]
 8006bb8:	789b      	ldrb	r3, [r3, #2]
 8006bba:	81a2      	strh	r2, [r4, #12]
 8006bbc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,d,d,s,e");
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006bc4:	4a9b      	ldr	r2, [pc, #620]	; (8006e34 <problem_fetch+0x54a4>)
 8006bc6:	461c      	mov	r4, r3
 8006bc8:	4613      	mov	r3, r2
 8006bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006bcc:	6020      	str	r0, [r4, #0]
 8006bce:	6061      	str	r1, [r4, #4]
 8006bd0:	60a2      	str	r2, [r4, #8]
			break;
 8006bd2:	f015 be0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 134 :
			strcpy(p->name,"LEVITATOR MUSIC");
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006bdc:	4a96      	ldr	r2, [pc, #600]	; (8006e38 <problem_fetch+0x54a8>)
 8006bde:	461c      	mov	r4, r3
 8006be0:	4615      	mov	r5, r2
 8006be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006be4:	6020      	str	r0, [r4, #0]
 8006be6:	6061      	str	r1, [r4, #4]
 8006be8:	60a2      	str	r2, [r4, #8]
 8006bea:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006bf2:	4a8d      	ldr	r2, [pc, #564]	; (8006e28 <problem_fetch+0x5498>)
 8006bf4:	6810      	ldr	r0, [r2, #0]
 8006bf6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2207      	movs	r2, #7
 8006bfc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,A,A,F,K,J,I");
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	33a4      	adds	r3, #164	; 0xa4
 8006c02:	4a8e      	ldr	r2, [pc, #568]	; (8006e3c <problem_fetch+0x54ac>)
 8006c04:	461c      	mov	r4, r3
 8006c06:	4613      	mov	r3, r2
 8006c08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c0a:	6020      	str	r0, [r4, #0]
 8006c0c:	6061      	str	r1, [r4, #4]
 8006c0e:	60a2      	str	r2, [r4, #8]
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,14,18,11,9,5,7");
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3304      	adds	r3, #4
 8006c18:	4a89      	ldr	r2, [pc, #548]	; (8006e40 <problem_fetch+0x54b0>)
 8006c1a:	461d      	mov	r5, r3
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c20:	6028      	str	r0, [r5, #0]
 8006c22:	6069      	str	r1, [r5, #4]
 8006c24:	60aa      	str	r2, [r5, #8]
 8006c26:	60eb      	str	r3, [r5, #12]
 8006c28:	8823      	ldrh	r3, [r4, #0]
 8006c2a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,e,d,d,s,d");
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006c32:	4a84      	ldr	r2, [pc, #528]	; (8006e44 <problem_fetch+0x54b4>)
 8006c34:	461c      	mov	r4, r3
 8006c36:	4613      	mov	r3, r2
 8006c38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c3a:	6020      	str	r0, [r4, #0]
 8006c3c:	6061      	str	r1, [r4, #4]
 8006c3e:	60a2      	str	r2, [r4, #8]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	81a3      	strh	r3, [r4, #12]
			break;
 8006c44:	f015 bdd4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 135 :
			strcpy(p->name,"ELEVATOR MUSIC");
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c4e:	4a7e      	ldr	r2, [pc, #504]	; (8006e48 <problem_fetch+0x54b8>)
 8006c50:	461c      	mov	r4, r3
 8006c52:	4613      	mov	r3, r2
 8006c54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c56:	6020      	str	r0, [r4, #0]
 8006c58:	6061      	str	r1, [r4, #4]
 8006c5a:	60a2      	str	r2, [r4, #8]
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	789b      	ldrb	r3, [r3, #2]
 8006c60:	81a2      	strh	r2, [r4, #12]
 8006c62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006c6a:	4a78      	ldr	r2, [pc, #480]	; (8006e4c <problem_fetch+0x54bc>)
 8006c6c:	8811      	ldrh	r1, [r2, #0]
 8006c6e:	7892      	ldrb	r2, [r2, #2]
 8006c70:	8019      	strh	r1, [r3, #0]
 8006c72:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2206      	movs	r2, #6
 8006c78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,G,K,J,F,I");
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	33a4      	adds	r3, #164	; 0xa4
 8006c7e:	4a74      	ldr	r2, [pc, #464]	; (8006e50 <problem_fetch+0x54c0>)
 8006c80:	461c      	mov	r4, r3
 8006c82:	4613      	mov	r3, r2
 8006c84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c86:	6020      	str	r0, [r4, #0]
 8006c88:	6061      	str	r1, [r4, #4]
 8006c8a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,14,9,5,11,7");
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4a70      	ldr	r2, [pc, #448]	; (8006e54 <problem_fetch+0x54c4>)
 8006c92:	461c      	mov	r4, r3
 8006c94:	4613      	mov	r3, r2
 8006c96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c98:	6020      	str	r0, [r4, #0]
 8006c9a:	6061      	str	r1, [r4, #4]
 8006c9c:	60a2      	str	r2, [r4, #8]
 8006c9e:	881a      	ldrh	r2, [r3, #0]
 8006ca0:	789b      	ldrb	r3, [r3, #2]
 8006ca2:	81a2      	strh	r2, [r4, #12]
 8006ca4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,d,d,s,d,d");
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006cac:	4a6a      	ldr	r2, [pc, #424]	; (8006e58 <problem_fetch+0x54c8>)
 8006cae:	461c      	mov	r4, r3
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cb4:	6020      	str	r0, [r4, #0]
 8006cb6:	6061      	str	r1, [r4, #4]
 8006cb8:	60a2      	str	r2, [r4, #8]
			break;
 8006cba:	f015 bd99 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 136 :
			strcpy(p->name,"POPPED A XAN-DON");
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006cc4:	4a65      	ldr	r2, [pc, #404]	; (8006e5c <problem_fetch+0x54cc>)
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	4614      	mov	r4, r2
 8006cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ccc:	6028      	str	r0, [r5, #0]
 8006cce:	6069      	str	r1, [r5, #4]
 8006cd0:	60aa      	str	r2, [r5, #8]
 8006cd2:	60eb      	str	r3, [r5, #12]
 8006cd4:	7823      	ldrb	r3, [r4, #0]
 8006cd6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006cde:	4a60      	ldr	r2, [pc, #384]	; (8006e60 <problem_fetch+0x54d0>)
 8006ce0:	6810      	ldr	r0, [r2, #0]
 8006ce2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2205      	movs	r2, #5
 8006ce8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,K,I");
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	33a4      	adds	r3, #164	; 0xa4
 8006cee:	495d      	ldr	r1, [pc, #372]	; (8006e64 <problem_fetch+0x54d4>)
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	cb03      	ldmia	r3!, {r0, r1}
 8006cf6:	6010      	str	r0, [r2, #0]
 8006cf8:	6051      	str	r1, [r2, #4]
 8006cfa:	881b      	ldrh	r3, [r3, #0]
 8006cfc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4a59      	ldr	r2, [pc, #356]	; (8006e68 <problem_fetch+0x54d8>)
 8006d04:	461c      	mov	r4, r3
 8006d06:	4613      	mov	r3, r2
 8006d08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	6061      	str	r1, [r4, #4]
 8006d0e:	60a2      	str	r2, [r4, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006d1a:	4954      	ldr	r1, [pc, #336]	; (8006e6c <problem_fetch+0x54dc>)
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	460b      	mov	r3, r1
 8006d20:	cb03      	ldmia	r3!, {r0, r1}
 8006d22:	6010      	str	r0, [r2, #0]
 8006d24:	6051      	str	r1, [r2, #4]
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	8113      	strh	r3, [r2, #8]
			break;
 8006d2a:	f015 bd61 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 137 :
			strcpy(p->name,"DOMINOS PINZA");
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d34:	4a4e      	ldr	r2, [pc, #312]	; (8006e70 <problem_fetch+0x54e0>)
 8006d36:	461c      	mov	r4, r3
 8006d38:	4613      	mov	r3, r2
 8006d3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d3c:	6020      	str	r0, [r4, #0]
 8006d3e:	6061      	str	r1, [r4, #4]
 8006d40:	60a2      	str	r2, [r4, #8]
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006d4c:	4a44      	ldr	r2, [pc, #272]	; (8006e60 <problem_fetch+0x54d0>)
 8006d4e:	6810      	ldr	r0, [r2, #0]
 8006d50:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2205      	movs	r2, #5
 8006d56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,I,I");
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	33a4      	adds	r3, #164	; 0xa4
 8006d5c:	4945      	ldr	r1, [pc, #276]	; (8006e74 <problem_fetch+0x54e4>)
 8006d5e:	461a      	mov	r2, r3
 8006d60:	460b      	mov	r3, r1
 8006d62:	cb03      	ldmia	r3!, {r0, r1}
 8006d64:	6010      	str	r0, [r2, #0]
 8006d66:	6051      	str	r1, [r2, #4]
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,14,18");
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4a41      	ldr	r2, [pc, #260]	; (8006e78 <problem_fetch+0x54e8>)
 8006d72:	461c      	mov	r4, r3
 8006d74:	4613      	mov	r3, r2
 8006d76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d78:	6020      	str	r0, [r4, #0]
 8006d7a:	6061      	str	r1, [r4, #4]
 8006d7c:	60a2      	str	r2, [r4, #8]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006d88:	4938      	ldr	r1, [pc, #224]	; (8006e6c <problem_fetch+0x54dc>)
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	cb03      	ldmia	r3!, {r0, r1}
 8006d90:	6010      	str	r0, [r2, #0]
 8006d92:	6051      	str	r1, [r2, #4]
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	8113      	strh	r3, [r2, #8]
			break;
 8006d98:	f015 bd2a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 138 :
			strcpy(p->name,"HOWARD THE ALIEN");
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006da2:	4a36      	ldr	r2, [pc, #216]	; (8006e7c <problem_fetch+0x54ec>)
 8006da4:	461d      	mov	r5, r3
 8006da6:	4614      	mov	r4, r2
 8006da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006daa:	6028      	str	r0, [r5, #0]
 8006dac:	6069      	str	r1, [r5, #4]
 8006dae:	60aa      	str	r2, [r5, #8]
 8006db0:	60eb      	str	r3, [r5, #12]
 8006db2:	7823      	ldrb	r3, [r4, #0]
 8006db4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006dbc:	4a30      	ldr	r2, [pc, #192]	; (8006e80 <problem_fetch+0x54f0>)
 8006dbe:	8811      	ldrh	r1, [r2, #0]
 8006dc0:	7892      	ldrb	r2, [r2, #2]
 8006dc2:	8019      	strh	r1, [r3, #0]
 8006dc4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2205      	movs	r2, #5
 8006dca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,C,I,D");
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	33a4      	adds	r3, #164	; 0xa4
 8006dd0:	492c      	ldr	r1, [pc, #176]	; (8006e84 <problem_fetch+0x54f4>)
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	cb03      	ldmia	r3!, {r0, r1}
 8006dd8:	6010      	str	r0, [r2, #0]
 8006dda:	6051      	str	r1, [r2, #4]
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4a28      	ldr	r2, [pc, #160]	; (8006e88 <problem_fetch+0x54f8>)
 8006de6:	461c      	mov	r4, r3
 8006de8:	4613      	mov	r3, r2
 8006dea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006dec:	6020      	str	r0, [r4, #0]
 8006dee:	6061      	str	r1, [r4, #4]
 8006df0:	60a2      	str	r2, [r4, #8]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006dfc:	491b      	ldr	r1, [pc, #108]	; (8006e6c <problem_fetch+0x54dc>)
 8006dfe:	461a      	mov	r2, r3
 8006e00:	460b      	mov	r3, r1
 8006e02:	cb03      	ldmia	r3!, {r0, r1}
 8006e04:	6010      	str	r0, [r2, #0]
 8006e06:	6051      	str	r1, [r2, #4]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	8113      	strh	r3, [r2, #8]
			break;
 8006e0c:	f015 bcf0 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8006e10:	08025680 	.word	0x08025680
 8006e14:	0802419c 	.word	0x0802419c
 8006e18:	08025688 	.word	0x08025688
 8006e1c:	0802569c 	.word	0x0802569c
 8006e20:	08024b74 	.word	0x08024b74
 8006e24:	080256b4 	.word	0x080256b4
 8006e28:	08023d30 	.word	0x08023d30
 8006e2c:	080256bc 	.word	0x080256bc
 8006e30:	080256c8 	.word	0x080256c8
 8006e34:	080256d8 	.word	0x080256d8
 8006e38:	080256e4 	.word	0x080256e4
 8006e3c:	080256f4 	.word	0x080256f4
 8006e40:	08025704 	.word	0x08025704
 8006e44:	08025718 	.word	0x08025718
 8006e48:	08025728 	.word	0x08025728
 8006e4c:	08023b50 	.word	0x08023b50
 8006e50:	08025738 	.word	0x08025738
 8006e54:	08025744 	.word	0x08025744
 8006e58:	08025754 	.word	0x08025754
 8006e5c:	08025760 	.word	0x08025760
 8006e60:	08023ccc 	.word	0x08023ccc
 8006e64:	08025774 	.word	0x08025774
 8006e68:	080241ac 	.word	0x080241ac
 8006e6c:	0802405c 	.word	0x0802405c
 8006e70:	08025780 	.word	0x08025780
 8006e74:	08025790 	.word	0x08025790
 8006e78:	0802579c 	.word	0x0802579c
 8006e7c:	080257ac 	.word	0x080257ac
 8006e80:	080243c4 	.word	0x080243c4
 8006e84:	080257c0 	.word	0x080257c0
 8006e88:	080257cc 	.word	0x080257cc
		case 139 :
			strcpy(p->name,"EZ CLAP");
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e92:	49c4      	ldr	r1, [pc, #784]	; (80071a4 <problem_fetch+0x5814>)
 8006e94:	461a      	mov	r2, r3
 8006e96:	460b      	mov	r3, r1
 8006e98:	cb03      	ldmia	r3!, {r0, r1}
 8006e9a:	6010      	str	r0, [r2, #0]
 8006e9c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006ea4:	4ac0      	ldr	r2, [pc, #768]	; (80071a8 <problem_fetch+0x5818>)
 8006ea6:	8811      	ldrh	r1, [r2, #0]
 8006ea8:	7892      	ldrb	r2, [r2, #2]
 8006eaa:	8019      	strh	r1, [r3, #0]
 8006eac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2206      	movs	r2, #6
 8006eb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,E");
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	33a4      	adds	r3, #164	; 0xa4
 8006eb8:	4abc      	ldr	r2, [pc, #752]	; (80071ac <problem_fetch+0x581c>)
 8006eba:	461c      	mov	r4, r3
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ec0:	6020      	str	r0, [r4, #0]
 8006ec2:	6061      	str	r1, [r4, #4]
 8006ec4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,18,14");
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4ab9      	ldr	r2, [pc, #740]	; (80071b0 <problem_fetch+0x5820>)
 8006ecc:	461c      	mov	r4, r3
 8006ece:	4615      	mov	r5, r2
 8006ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ed2:	6020      	str	r0, [r4, #0]
 8006ed4:	6061      	str	r1, [r4, #4]
 8006ed6:	60a2      	str	r2, [r4, #8]
 8006ed8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006ee0:	4ab4      	ldr	r2, [pc, #720]	; (80071b4 <problem_fetch+0x5824>)
 8006ee2:	461c      	mov	r4, r3
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ee8:	6020      	str	r0, [r4, #0]
 8006eea:	6061      	str	r1, [r4, #4]
 8006eec:	60a2      	str	r2, [r4, #8]
			break;
 8006eee:	f015 bc7f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 140 :
			strcpy(p->name,"BRUTE");
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006ef8:	4aaf      	ldr	r2, [pc, #700]	; (80071b8 <problem_fetch+0x5828>)
 8006efa:	6810      	ldr	r0, [r2, #0]
 8006efc:	6018      	str	r0, [r3, #0]
 8006efe:	8892      	ldrh	r2, [r2, #4]
 8006f00:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f08:	4aac      	ldr	r2, [pc, #688]	; (80071bc <problem_fetch+0x582c>)
 8006f0a:	8811      	ldrh	r1, [r2, #0]
 8006f0c:	7892      	ldrb	r2, [r2, #2]
 8006f0e:	8019      	strh	r1, [r3, #0]
 8006f10:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2205      	movs	r2, #5
 8006f16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,B,G,I");
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	33a4      	adds	r3, #164	; 0xa4
 8006f1c:	49a8      	ldr	r1, [pc, #672]	; (80071c0 <problem_fetch+0x5830>)
 8006f1e:	461a      	mov	r2, r3
 8006f20:	460b      	mov	r3, r1
 8006f22:	cb03      	ldmia	r3!, {r0, r1}
 8006f24:	6010      	str	r0, [r2, #0]
 8006f26:	6051      	str	r1, [r2, #4]
 8006f28:	881b      	ldrh	r3, [r3, #0]
 8006f2a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,14,18");
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	4aa4      	ldr	r2, [pc, #656]	; (80071c4 <problem_fetch+0x5834>)
 8006f32:	461c      	mov	r4, r3
 8006f34:	4613      	mov	r3, r2
 8006f36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f38:	6020      	str	r0, [r4, #0]
 8006f3a:	6061      	str	r1, [r4, #4]
 8006f3c:	60a2      	str	r2, [r4, #8]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006f48:	499f      	ldr	r1, [pc, #636]	; (80071c8 <problem_fetch+0x5838>)
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	cb03      	ldmia	r3!, {r0, r1}
 8006f50:	6010      	str	r0, [r2, #0]
 8006f52:	6051      	str	r1, [r2, #4]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	8113      	strh	r3, [r2, #8]
			break;
 8006f58:	f015 bc4a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 141 :
			strcpy(p->name,"MASTERFUL GAP ALT");
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f62:	4a9a      	ldr	r2, [pc, #616]	; (80071cc <problem_fetch+0x583c>)
 8006f64:	461d      	mov	r5, r3
 8006f66:	4614      	mov	r4, r2
 8006f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f6a:	6028      	str	r0, [r5, #0]
 8006f6c:	6069      	str	r1, [r5, #4]
 8006f6e:	60aa      	str	r2, [r5, #8]
 8006f70:	60eb      	str	r3, [r5, #12]
 8006f72:	8823      	ldrh	r3, [r4, #0]
 8006f74:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f7c:	4a8f      	ldr	r2, [pc, #572]	; (80071bc <problem_fetch+0x582c>)
 8006f7e:	8811      	ldrh	r1, [r2, #0]
 8006f80:	7892      	ldrb	r2, [r2, #2]
 8006f82:	8019      	strh	r1, [r3, #0]
 8006f84:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2206      	movs	r2, #6
 8006f8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,E,F,I");
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	33a4      	adds	r3, #164	; 0xa4
 8006f90:	4a8f      	ldr	r2, [pc, #572]	; (80071d0 <problem_fetch+0x5840>)
 8006f92:	461c      	mov	r4, r3
 8006f94:	4613      	mov	r3, r2
 8006f96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f98:	6020      	str	r0, [r4, #0]
 8006f9a:	6061      	str	r1, [r4, #4]
 8006f9c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"9,6,5,16,11,18");
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4a8c      	ldr	r2, [pc, #560]	; (80071d4 <problem_fetch+0x5844>)
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006faa:	6020      	str	r0, [r4, #0]
 8006fac:	6061      	str	r1, [r4, #4]
 8006fae:	60a2      	str	r2, [r4, #8]
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	789b      	ldrb	r3, [r3, #2]
 8006fb4:	81a2      	strh	r2, [r4, #12]
 8006fb6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,s,d,d,e");
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006fbe:	4a86      	ldr	r2, [pc, #536]	; (80071d8 <problem_fetch+0x5848>)
 8006fc0:	461c      	mov	r4, r3
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fc6:	6020      	str	r0, [r4, #0]
 8006fc8:	6061      	str	r1, [r4, #4]
 8006fca:	60a2      	str	r2, [r4, #8]
			break;
 8006fcc:	f015 bc10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 142 :
			strcpy(p->name,"RIVER RAT");
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006fd6:	4981      	ldr	r1, [pc, #516]	; (80071dc <problem_fetch+0x584c>)
 8006fd8:	461a      	mov	r2, r3
 8006fda:	460b      	mov	r3, r1
 8006fdc:	cb03      	ldmia	r3!, {r0, r1}
 8006fde:	6010      	str	r0, [r2, #0]
 8006fe0:	6051      	str	r1, [r2, #4]
 8006fe2:	881b      	ldrh	r3, [r3, #0]
 8006fe4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006fec:	4a7c      	ldr	r2, [pc, #496]	; (80071e0 <problem_fetch+0x5850>)
 8006fee:	6810      	ldr	r0, [r2, #0]
 8006ff0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2206      	movs	r2, #6
 8006ff6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,E,A");
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	33a4      	adds	r3, #164	; 0xa4
 8006ffc:	4a79      	ldr	r2, [pc, #484]	; (80071e4 <problem_fetch+0x5854>)
 8006ffe:	461c      	mov	r4, r3
 8007000:	4613      	mov	r3, r2
 8007002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007004:	6020      	str	r0, [r4, #0]
 8007006:	6061      	str	r1, [r4, #4]
 8007008:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,11,16,18");
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	3304      	adds	r3, #4
 800700e:	4a76      	ldr	r2, [pc, #472]	; (80071e8 <problem_fetch+0x5858>)
 8007010:	461c      	mov	r4, r3
 8007012:	4615      	mov	r5, r2
 8007014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	6061      	str	r1, [r4, #4]
 800701a:	60a2      	str	r2, [r4, #8]
 800701c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007024:	4a71      	ldr	r2, [pc, #452]	; (80071ec <problem_fetch+0x585c>)
 8007026:	461c      	mov	r4, r3
 8007028:	4613      	mov	r3, r2
 800702a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800702c:	6020      	str	r0, [r4, #0]
 800702e:	6061      	str	r1, [r4, #4]
 8007030:	60a2      	str	r2, [r4, #8]
			break;
 8007032:	f015 bbdd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 143 :
			strcpy(p->name,"BIG DAWWWWG");
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800703c:	4a6c      	ldr	r2, [pc, #432]	; (80071f0 <problem_fetch+0x5860>)
 800703e:	461c      	mov	r4, r3
 8007040:	4613      	mov	r3, r2
 8007042:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007044:	6020      	str	r0, [r4, #0]
 8007046:	6061      	str	r1, [r4, #4]
 8007048:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007050:	4a68      	ldr	r2, [pc, #416]	; (80071f4 <problem_fetch+0x5864>)
 8007052:	8811      	ldrh	r1, [r2, #0]
 8007054:	7892      	ldrb	r2, [r2, #2]
 8007056:	8019      	strh	r1, [r3, #0]
 8007058:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2207      	movs	r2, #7
 800705e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,C,H,H,I");
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	33a4      	adds	r3, #164	; 0xa4
 8007064:	4a64      	ldr	r2, [pc, #400]	; (80071f8 <problem_fetch+0x5868>)
 8007066:	461c      	mov	r4, r3
 8007068:	4613      	mov	r3, r2
 800706a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800706c:	6020      	str	r0, [r4, #0]
 800706e:	6061      	str	r1, [r4, #4]
 8007070:	60a2      	str	r2, [r4, #8]
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	3304      	adds	r3, #4
 800707a:	4a60      	ldr	r2, [pc, #384]	; (80071fc <problem_fetch+0x586c>)
 800707c:	461d      	mov	r5, r3
 800707e:	4614      	mov	r4, r2
 8007080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007082:	6028      	str	r0, [r5, #0]
 8007084:	6069      	str	r1, [r5, #4]
 8007086:	60aa      	str	r2, [r5, #8]
 8007088:	60eb      	str	r3, [r5, #12]
 800708a:	8823      	ldrh	r3, [r4, #0]
 800708c:	78a2      	ldrb	r2, [r4, #2]
 800708e:	822b      	strh	r3, [r5, #16]
 8007090:	4613      	mov	r3, r2
 8007092:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800709a:	4a59      	ldr	r2, [pc, #356]	; (8007200 <problem_fetch+0x5870>)
 800709c:	461c      	mov	r4, r3
 800709e:	4613      	mov	r3, r2
 80070a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070a2:	6020      	str	r0, [r4, #0]
 80070a4:	6061      	str	r1, [r4, #4]
 80070a6:	60a2      	str	r2, [r4, #8]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	81a3      	strh	r3, [r4, #12]
			break;
 80070ac:	f015 bba0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 144 :
			strcpy(p->name,"BACK TO BASICS");
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80070b6:	4a53      	ldr	r2, [pc, #332]	; (8007204 <problem_fetch+0x5874>)
 80070b8:	461c      	mov	r4, r3
 80070ba:	4613      	mov	r3, r2
 80070bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070be:	6020      	str	r0, [r4, #0]
 80070c0:	6061      	str	r1, [r4, #4]
 80070c2:	60a2      	str	r2, [r4, #8]
 80070c4:	881a      	ldrh	r2, [r3, #0]
 80070c6:	789b      	ldrb	r3, [r3, #2]
 80070c8:	81a2      	strh	r2, [r4, #12]
 80070ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80070d2:	4a4d      	ldr	r2, [pc, #308]	; (8007208 <problem_fetch+0x5878>)
 80070d4:	6810      	ldr	r0, [r2, #0]
 80070d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2207      	movs	r2, #7
 80070dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,G,G,D");
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	33a4      	adds	r3, #164	; 0xa4
 80070e2:	4a4a      	ldr	r2, [pc, #296]	; (800720c <problem_fetch+0x587c>)
 80070e4:	461c      	mov	r4, r3
 80070e6:	4613      	mov	r3, r2
 80070e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070ea:	6020      	str	r0, [r4, #0]
 80070ec:	6061      	str	r1, [r4, #4]
 80070ee:	60a2      	str	r2, [r4, #8]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,15,17,18");
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4a45      	ldr	r2, [pc, #276]	; (8007210 <problem_fetch+0x5880>)
 80070fa:	461d      	mov	r5, r3
 80070fc:	4614      	mov	r4, r2
 80070fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007100:	6028      	str	r0, [r5, #0]
 8007102:	6069      	str	r1, [r5, #4]
 8007104:	60aa      	str	r2, [r5, #8]
 8007106:	60eb      	str	r3, [r5, #12]
 8007108:	8823      	ldrh	r3, [r4, #0]
 800710a:	78a2      	ldrb	r2, [r4, #2]
 800710c:	822b      	strh	r3, [r5, #16]
 800710e:	4613      	mov	r3, r2
 8007110:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007118:	4a39      	ldr	r2, [pc, #228]	; (8007200 <problem_fetch+0x5870>)
 800711a:	461c      	mov	r4, r3
 800711c:	4613      	mov	r3, r2
 800711e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007120:	6020      	str	r0, [r4, #0]
 8007122:	6061      	str	r1, [r4, #4]
 8007124:	60a2      	str	r2, [r4, #8]
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	81a3      	strh	r3, [r4, #12]
			break;
 800712a:	f015 bb61 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 145 :
			strcpy(p->name,"ROADWAY");
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007134:	4937      	ldr	r1, [pc, #220]	; (8007214 <problem_fetch+0x5884>)
 8007136:	461a      	mov	r2, r3
 8007138:	460b      	mov	r3, r1
 800713a:	cb03      	ldmia	r3!, {r0, r1}
 800713c:	6010      	str	r0, [r2, #0]
 800713e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007146:	4a30      	ldr	r2, [pc, #192]	; (8007208 <problem_fetch+0x5878>)
 8007148:	6810      	ldr	r0, [r2, #0]
 800714a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2209      	movs	r2, #9
 8007150:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,E,G,D,I");
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	33a4      	adds	r3, #164	; 0xa4
 8007156:	4a30      	ldr	r2, [pc, #192]	; (8007218 <problem_fetch+0x5888>)
 8007158:	461d      	mov	r5, r3
 800715a:	4614      	mov	r4, r2
 800715c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800715e:	6028      	str	r0, [r5, #0]
 8007160:	6069      	str	r1, [r5, #4]
 8007162:	60aa      	str	r2, [r5, #8]
 8007164:	60eb      	str	r3, [r5, #12]
 8007166:	8823      	ldrh	r3, [r4, #0]
 8007168:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,13,14,16,17,18,10");
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3304      	adds	r3, #4
 800716e:	4a2b      	ldr	r2, [pc, #172]	; (800721c <problem_fetch+0x588c>)
 8007170:	461d      	mov	r5, r3
 8007172:	4614      	mov	r4, r2
 8007174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007176:	6028      	str	r0, [r5, #0]
 8007178:	6069      	str	r1, [r5, #4]
 800717a:	60aa      	str	r2, [r5, #8]
 800717c:	60eb      	str	r3, [r5, #12]
 800717e:	cc03      	ldmia	r4!, {r0, r1}
 8007180:	6128      	str	r0, [r5, #16]
 8007182:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800718a:	4a25      	ldr	r2, [pc, #148]	; (8007220 <problem_fetch+0x5890>)
 800718c:	461d      	mov	r5, r3
 800718e:	4614      	mov	r4, r2
 8007190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007192:	6028      	str	r0, [r5, #0]
 8007194:	6069      	str	r1, [r5, #4]
 8007196:	60aa      	str	r2, [r5, #8]
 8007198:	60eb      	str	r3, [r5, #12]
 800719a:	8823      	ldrh	r3, [r4, #0]
 800719c:	822b      	strh	r3, [r5, #16]
			break;
 800719e:	f015 bb27 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80071a2:	bf00      	nop
 80071a4:	080257dc 	.word	0x080257dc
 80071a8:	08023b50 	.word	0x08023b50
 80071ac:	080257e4 	.word	0x080257e4
 80071b0:	080257f0 	.word	0x080257f0
 80071b4:	08025534 	.word	0x08025534
 80071b8:	08025800 	.word	0x08025800
 80071bc:	080243c4 	.word	0x080243c4
 80071c0:	08025808 	.word	0x08025808
 80071c4:	08025814 	.word	0x08025814
 80071c8:	08024270 	.word	0x08024270
 80071cc:	08025824 	.word	0x08025824
 80071d0:	08025838 	.word	0x08025838
 80071d4:	08025844 	.word	0x08025844
 80071d8:	08025854 	.word	0x08025854
 80071dc:	08025860 	.word	0x08025860
 80071e0:	08023d30 	.word	0x08023d30
 80071e4:	0802586c 	.word	0x0802586c
 80071e8:	08025878 	.word	0x08025878
 80071ec:	08023f2c 	.word	0x08023f2c
 80071f0:	08025888 	.word	0x08025888
 80071f4:	08023c5c 	.word	0x08023c5c
 80071f8:	08025894 	.word	0x08025894
 80071fc:	080258a4 	.word	0x080258a4
 8007200:	08023d18 	.word	0x08023d18
 8007204:	080258b8 	.word	0x080258b8
 8007208:	08023b90 	.word	0x08023b90
 800720c:	080258c8 	.word	0x080258c8
 8007210:	080258d8 	.word	0x080258d8
 8007214:	080258ec 	.word	0x080258ec
 8007218:	080258f4 	.word	0x080258f4
 800721c:	08025908 	.word	0x08025908
 8007220:	08025028 	.word	0x08025028
		case 146 :
			strcpy(p->name,"MEN IN BLACK");
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800722a:	4aae      	ldr	r2, [pc, #696]	; (80074e4 <problem_fetch+0x5b54>)
 800722c:	461c      	mov	r4, r3
 800722e:	4613      	mov	r3, r2
 8007230:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007232:	6020      	str	r0, [r4, #0]
 8007234:	6061      	str	r1, [r4, #4]
 8007236:	60a2      	str	r2, [r4, #8]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007242:	4aa9      	ldr	r2, [pc, #676]	; (80074e8 <problem_fetch+0x5b58>)
 8007244:	8811      	ldrh	r1, [r2, #0]
 8007246:	7892      	ldrb	r2, [r2, #2]
 8007248:	8019      	strh	r1, [r3, #0]
 800724a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2206      	movs	r2, #6
 8007250:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,I,E,D");
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	33a4      	adds	r3, #164	; 0xa4
 8007256:	4aa5      	ldr	r2, [pc, #660]	; (80074ec <problem_fetch+0x5b5c>)
 8007258:	461c      	mov	r4, r3
 800725a:	4613      	mov	r3, r2
 800725c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800725e:	6020      	str	r0, [r4, #0]
 8007260:	6061      	str	r1, [r4, #4]
 8007262:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,14,16,18");
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	3304      	adds	r3, #4
 8007268:	4aa1      	ldr	r2, [pc, #644]	; (80074f0 <problem_fetch+0x5b60>)
 800726a:	461c      	mov	r4, r3
 800726c:	4615      	mov	r5, r2
 800726e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007270:	6020      	str	r0, [r4, #0]
 8007272:	6061      	str	r1, [r4, #4]
 8007274:	60a2      	str	r2, [r4, #8]
 8007276:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800727e:	4a9d      	ldr	r2, [pc, #628]	; (80074f4 <problem_fetch+0x5b64>)
 8007280:	461c      	mov	r4, r3
 8007282:	4613      	mov	r3, r2
 8007284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007286:	6020      	str	r0, [r4, #0]
 8007288:	6061      	str	r1, [r4, #4]
 800728a:	60a2      	str	r2, [r4, #8]
			break;
 800728c:	f015 bab0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 147 :
			strcpy(p->name,"SET1");
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007296:	4a98      	ldr	r2, [pc, #608]	; (80074f8 <problem_fetch+0x5b68>)
 8007298:	6810      	ldr	r0, [r2, #0]
 800729a:	6018      	str	r0, [r3, #0]
 800729c:	7912      	ldrb	r2, [r2, #4]
 800729e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80072a6:	4a95      	ldr	r2, [pc, #596]	; (80074fc <problem_fetch+0x5b6c>)
 80072a8:	6810      	ldr	r0, [r2, #0]
 80072aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2209      	movs	r2, #9
 80072b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,I,G,I,J");
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	33a4      	adds	r3, #164	; 0xa4
 80072b6:	4a92      	ldr	r2, [pc, #584]	; (8007500 <problem_fetch+0x5b70>)
 80072b8:	461d      	mov	r5, r3
 80072ba:	4614      	mov	r4, r2
 80072bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072be:	6028      	str	r0, [r5, #0]
 80072c0:	6069      	str	r1, [r5, #4]
 80072c2:	60aa      	str	r2, [r5, #8]
 80072c4:	60eb      	str	r3, [r5, #12]
 80072c6:	8823      	ldrh	r3, [r4, #0]
 80072c8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,17,18,5");
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3304      	adds	r3, #4
 80072ce:	4a8d      	ldr	r2, [pc, #564]	; (8007504 <problem_fetch+0x5b74>)
 80072d0:	461c      	mov	r4, r3
 80072d2:	4615      	mov	r5, r2
 80072d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072d6:	6020      	str	r0, [r4, #0]
 80072d8:	6061      	str	r1, [r4, #4]
 80072da:	60a2      	str	r2, [r4, #8]
 80072dc:	60e3      	str	r3, [r4, #12]
 80072de:	6828      	ldr	r0, [r5, #0]
 80072e0:	6120      	str	r0, [r4, #16]
 80072e2:	88ab      	ldrh	r3, [r5, #4]
 80072e4:	79aa      	ldrb	r2, [r5, #6]
 80072e6:	82a3      	strh	r3, [r4, #20]
 80072e8:	4613      	mov	r3, r2
 80072ea:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80072f2:	4a85      	ldr	r2, [pc, #532]	; (8007508 <problem_fetch+0x5b78>)
 80072f4:	461d      	mov	r5, r3
 80072f6:	4614      	mov	r4, r2
 80072f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80072fa:	6028      	str	r0, [r5, #0]
 80072fc:	6069      	str	r1, [r5, #4]
 80072fe:	60aa      	str	r2, [r5, #8]
 8007300:	60eb      	str	r3, [r5, #12]
 8007302:	8823      	ldrh	r3, [r4, #0]
 8007304:	822b      	strh	r3, [r5, #16]
			break;
 8007306:	f015 ba73 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 148 :
			strcpy(p->name,"MÁVROS K2");
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007310:	497e      	ldr	r1, [pc, #504]	; (800750c <problem_fetch+0x5b7c>)
 8007312:	461a      	mov	r2, r3
 8007314:	460b      	mov	r3, r1
 8007316:	cb03      	ldmia	r3!, {r0, r1}
 8007318:	6010      	str	r0, [r2, #0]
 800731a:	6051      	str	r1, [r2, #4]
 800731c:	8819      	ldrh	r1, [r3, #0]
 800731e:	789b      	ldrb	r3, [r3, #2]
 8007320:	8111      	strh	r1, [r2, #8]
 8007322:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800732a:	4a79      	ldr	r2, [pc, #484]	; (8007510 <problem_fetch+0x5b80>)
 800732c:	6810      	ldr	r0, [r2, #0]
 800732e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2206      	movs	r2, #6
 8007334:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,C,D");
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	33a4      	adds	r3, #164	; 0xa4
 800733a:	4a76      	ldr	r2, [pc, #472]	; (8007514 <problem_fetch+0x5b84>)
 800733c:	461c      	mov	r4, r3
 800733e:	4613      	mov	r3, r2
 8007340:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	6061      	str	r1, [r4, #4]
 8007346:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,8,13,18");
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3304      	adds	r3, #4
 800734c:	4a72      	ldr	r2, [pc, #456]	; (8007518 <problem_fetch+0x5b88>)
 800734e:	461c      	mov	r4, r3
 8007350:	4613      	mov	r3, r2
 8007352:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007354:	6020      	str	r0, [r4, #0]
 8007356:	6061      	str	r1, [r4, #4]
 8007358:	60a2      	str	r2, [r4, #8]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007364:	4a6d      	ldr	r2, [pc, #436]	; (800751c <problem_fetch+0x5b8c>)
 8007366:	461c      	mov	r4, r3
 8007368:	4613      	mov	r3, r2
 800736a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800736c:	6020      	str	r0, [r4, #0]
 800736e:	6061      	str	r1, [r4, #4]
 8007370:	60a2      	str	r2, [r4, #8]
			break;
 8007372:	f015 ba3d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 149 :
			strcpy(p->name,"GARAGE DAYS");
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800737c:	4a68      	ldr	r2, [pc, #416]	; (8007520 <problem_fetch+0x5b90>)
 800737e:	461c      	mov	r4, r3
 8007380:	4613      	mov	r3, r2
 8007382:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007384:	6020      	str	r0, [r4, #0]
 8007386:	6061      	str	r1, [r4, #4]
 8007388:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007390:	4a64      	ldr	r2, [pc, #400]	; (8007524 <problem_fetch+0x5b94>)
 8007392:	8811      	ldrh	r1, [r2, #0]
 8007394:	7892      	ldrb	r2, [r2, #2]
 8007396:	8019      	strh	r1, [r3, #0]
 8007398:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2207      	movs	r2, #7
 800739e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,K,H,I,E,D");
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	33a4      	adds	r3, #164	; 0xa4
 80073a4:	4a60      	ldr	r2, [pc, #384]	; (8007528 <problem_fetch+0x5b98>)
 80073a6:	461c      	mov	r4, r3
 80073a8:	4613      	mov	r3, r2
 80073aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80073ac:	6020      	str	r0, [r4, #0]
 80073ae:	6061      	str	r1, [r4, #4]
 80073b0:	60a2      	str	r2, [r4, #8]
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,16,18");
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	3304      	adds	r3, #4
 80073ba:	4a5c      	ldr	r2, [pc, #368]	; (800752c <problem_fetch+0x5b9c>)
 80073bc:	461d      	mov	r5, r3
 80073be:	4614      	mov	r4, r2
 80073c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073c2:	6028      	str	r0, [r5, #0]
 80073c4:	6069      	str	r1, [r5, #4]
 80073c6:	60aa      	str	r2, [r5, #8]
 80073c8:	60eb      	str	r3, [r5, #12]
 80073ca:	8823      	ldrh	r3, [r4, #0]
 80073cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80073d4:	4a56      	ldr	r2, [pc, #344]	; (8007530 <problem_fetch+0x5ba0>)
 80073d6:	461c      	mov	r4, r3
 80073d8:	4613      	mov	r3, r2
 80073da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80073dc:	6020      	str	r0, [r4, #0]
 80073de:	6061      	str	r1, [r4, #4]
 80073e0:	60a2      	str	r2, [r4, #8]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	81a3      	strh	r3, [r4, #12]
			break;
 80073e6:	f015 ba03 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 150 :
			strcpy(p->name,"ELEMENTS OF STYLE");
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80073f0:	4a50      	ldr	r2, [pc, #320]	; (8007534 <problem_fetch+0x5ba4>)
 80073f2:	461d      	mov	r5, r3
 80073f4:	4614      	mov	r4, r2
 80073f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073f8:	6028      	str	r0, [r5, #0]
 80073fa:	6069      	str	r1, [r5, #4]
 80073fc:	60aa      	str	r2, [r5, #8]
 80073fe:	60eb      	str	r3, [r5, #12]
 8007400:	8823      	ldrh	r3, [r4, #0]
 8007402:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800740a:	4a37      	ldr	r2, [pc, #220]	; (80074e8 <problem_fetch+0x5b58>)
 800740c:	8811      	ldrh	r1, [r2, #0]
 800740e:	7892      	ldrb	r2, [r2, #2]
 8007410:	8019      	strh	r1, [r3, #0]
 8007412:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2206      	movs	r2, #6
 8007418:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,D,F,A,D");
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	33a4      	adds	r3, #164	; 0xa4
 800741e:	4a46      	ldr	r2, [pc, #280]	; (8007538 <problem_fetch+0x5ba8>)
 8007420:	461c      	mov	r4, r3
 8007422:	4613      	mov	r3, r2
 8007424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	6061      	str	r1, [r4, #4]
 800742a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,7,11,14,18");
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3304      	adds	r3, #4
 8007430:	4a42      	ldr	r2, [pc, #264]	; (800753c <problem_fetch+0x5bac>)
 8007432:	461c      	mov	r4, r3
 8007434:	4613      	mov	r3, r2
 8007436:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007438:	6020      	str	r0, [r4, #0]
 800743a:	6061      	str	r1, [r4, #4]
 800743c:	60a2      	str	r2, [r4, #8]
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	789b      	ldrb	r3, [r3, #2]
 8007442:	81a2      	strh	r2, [r4, #12]
 8007444:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800744c:	4a29      	ldr	r2, [pc, #164]	; (80074f4 <problem_fetch+0x5b64>)
 800744e:	461c      	mov	r4, r3
 8007450:	4613      	mov	r3, r2
 8007452:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007454:	6020      	str	r0, [r4, #0]
 8007456:	6061      	str	r1, [r4, #4]
 8007458:	60a2      	str	r2, [r4, #8]
			break;
 800745a:	f015 b9c9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 151 :
			strcpy(p->name,"OLI'S YELLOW FEVA");
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007464:	4a36      	ldr	r2, [pc, #216]	; (8007540 <problem_fetch+0x5bb0>)
 8007466:	461d      	mov	r5, r3
 8007468:	4614      	mov	r4, r2
 800746a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800746c:	6028      	str	r0, [r5, #0]
 800746e:	6069      	str	r1, [r5, #4]
 8007470:	60aa      	str	r2, [r5, #8]
 8007472:	60eb      	str	r3, [r5, #12]
 8007474:	8823      	ldrh	r3, [r4, #0]
 8007476:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800747e:	4a1f      	ldr	r2, [pc, #124]	; (80074fc <problem_fetch+0x5b6c>)
 8007480:	6810      	ldr	r0, [r2, #0]
 8007482:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2209      	movs	r2, #9
 8007488:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,H,F,G,I,I");
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	33a4      	adds	r3, #164	; 0xa4
 800748e:	4a2d      	ldr	r2, [pc, #180]	; (8007544 <problem_fetch+0x5bb4>)
 8007490:	461d      	mov	r5, r3
 8007492:	4614      	mov	r4, r2
 8007494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007496:	6028      	str	r0, [r5, #0]
 8007498:	6069      	str	r1, [r5, #4]
 800749a:	60aa      	str	r2, [r5, #8]
 800749c:	60eb      	str	r3, [r5, #12]
 800749e:	8823      	ldrh	r3, [r4, #0]
 80074a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,5,10,11,14,14,18");
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4a28      	ldr	r2, [pc, #160]	; (8007548 <problem_fetch+0x5bb8>)
 80074a8:	461c      	mov	r4, r3
 80074aa:	4615      	mov	r5, r2
 80074ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	6061      	str	r1, [r4, #4]
 80074b2:	60a2      	str	r2, [r4, #8]
 80074b4:	60e3      	str	r3, [r4, #12]
 80074b6:	6828      	ldr	r0, [r5, #0]
 80074b8:	6120      	str	r0, [r4, #16]
 80074ba:	88ab      	ldrh	r3, [r5, #4]
 80074bc:	79aa      	ldrb	r2, [r5, #6]
 80074be:	82a3      	strh	r3, [r4, #20]
 80074c0:	4613      	mov	r3, r2
 80074c2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80074ca:	4a20      	ldr	r2, [pc, #128]	; (800754c <problem_fetch+0x5bbc>)
 80074cc:	461d      	mov	r5, r3
 80074ce:	4614      	mov	r4, r2
 80074d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074d2:	6028      	str	r0, [r5, #0]
 80074d4:	6069      	str	r1, [r5, #4]
 80074d6:	60aa      	str	r2, [r5, #8]
 80074d8:	60eb      	str	r3, [r5, #12]
 80074da:	8823      	ldrh	r3, [r4, #0]
 80074dc:	822b      	strh	r3, [r5, #16]
			break;
 80074de:	f015 b987 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80074e2:	bf00      	nop
 80074e4:	08025920 	.word	0x08025920
 80074e8:	08023b50 	.word	0x08023b50
 80074ec:	08025930 	.word	0x08025930
 80074f0:	0802593c 	.word	0x0802593c
 80074f4:	08023f2c 	.word	0x08023f2c
 80074f8:	0802594c 	.word	0x0802594c
 80074fc:	08023b90 	.word	0x08023b90
 8007500:	08025954 	.word	0x08025954
 8007504:	08025968 	.word	0x08025968
 8007508:	08025028 	.word	0x08025028
 800750c:	08025980 	.word	0x08025980
 8007510:	08023c28 	.word	0x08023c28
 8007514:	0802598c 	.word	0x0802598c
 8007518:	08025998 	.word	0x08025998
 800751c:	08023b70 	.word	0x08023b70
 8007520:	080259a8 	.word	0x080259a8
 8007524:	08023c5c 	.word	0x08023c5c
 8007528:	080259b4 	.word	0x080259b4
 800752c:	080259c4 	.word	0x080259c4
 8007530:	08023c08 	.word	0x08023c08
 8007534:	080259d8 	.word	0x080259d8
 8007538:	080259ec 	.word	0x080259ec
 800753c:	080259f8 	.word	0x080259f8
 8007540:	08025a08 	.word	0x08025a08
 8007544:	08025a1c 	.word	0x08025a1c
 8007548:	08025a30 	.word	0x08025a30
 800754c:	08025a48 	.word	0x08025a48
		case 152 :
			strcpy(p->name,"GAMBIT");
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007556:	4aac      	ldr	r2, [pc, #688]	; (8007808 <problem_fetch+0x5e78>)
 8007558:	6810      	ldr	r0, [r2, #0]
 800755a:	6018      	str	r0, [r3, #0]
 800755c:	8891      	ldrh	r1, [r2, #4]
 800755e:	7992      	ldrb	r2, [r2, #6]
 8007560:	8099      	strh	r1, [r3, #4]
 8007562:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800756a:	4aa8      	ldr	r2, [pc, #672]	; (800780c <problem_fetch+0x5e7c>)
 800756c:	8811      	ldrh	r1, [r2, #0]
 800756e:	7892      	ldrb	r2, [r2, #2]
 8007570:	8019      	strh	r1, [r3, #0]
 8007572:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2205      	movs	r2, #5
 8007578:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,A");
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	33a4      	adds	r3, #164	; 0xa4
 800757e:	49a4      	ldr	r1, [pc, #656]	; (8007810 <problem_fetch+0x5e80>)
 8007580:	461a      	mov	r2, r3
 8007582:	460b      	mov	r3, r1
 8007584:	cb03      	ldmia	r3!, {r0, r1}
 8007586:	6010      	str	r0, [r2, #0]
 8007588:	6051      	str	r1, [r2, #4]
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3304      	adds	r3, #4
 8007592:	4aa0      	ldr	r2, [pc, #640]	; (8007814 <problem_fetch+0x5e84>)
 8007594:	461c      	mov	r4, r3
 8007596:	4613      	mov	r3, r2
 8007598:	cb07      	ldmia	r3!, {r0, r1, r2}
 800759a:	6020      	str	r0, [r4, #0]
 800759c:	6061      	str	r1, [r4, #4]
 800759e:	60a2      	str	r2, [r4, #8]
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80075aa:	499b      	ldr	r1, [pc, #620]	; (8007818 <problem_fetch+0x5e88>)
 80075ac:	461a      	mov	r2, r3
 80075ae:	460b      	mov	r3, r1
 80075b0:	cb03      	ldmia	r3!, {r0, r1}
 80075b2:	6010      	str	r0, [r2, #0]
 80075b4:	6051      	str	r1, [r2, #4]
 80075b6:	881b      	ldrh	r3, [r3, #0]
 80075b8:	8113      	strh	r3, [r2, #8]
			break;
 80075ba:	f015 b919 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 153 :
			strcpy(p->name,"THE FORGOTTEN ONES");
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075c4:	4a95      	ldr	r2, [pc, #596]	; (800781c <problem_fetch+0x5e8c>)
 80075c6:	461d      	mov	r5, r3
 80075c8:	4614      	mov	r4, r2
 80075ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075cc:	6028      	str	r0, [r5, #0]
 80075ce:	6069      	str	r1, [r5, #4]
 80075d0:	60aa      	str	r2, [r5, #8]
 80075d2:	60eb      	str	r3, [r5, #12]
 80075d4:	8823      	ldrh	r3, [r4, #0]
 80075d6:	78a2      	ldrb	r2, [r4, #2]
 80075d8:	822b      	strh	r3, [r5, #16]
 80075da:	4613      	mov	r3, r2
 80075dc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80075e4:	4a8e      	ldr	r2, [pc, #568]	; (8007820 <problem_fetch+0x5e90>)
 80075e6:	6810      	ldr	r0, [r2, #0]
 80075e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,F,K,I,I");
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	33a4      	adds	r3, #164	; 0xa4
 80075f4:	4a8b      	ldr	r2, [pc, #556]	; (8007824 <problem_fetch+0x5e94>)
 80075f6:	461c      	mov	r4, r3
 80075f8:	4615      	mov	r5, r2
 80075fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075fc:	6020      	str	r0, [r4, #0]
 80075fe:	6061      	str	r1, [r4, #4]
 8007600:	60a2      	str	r2, [r4, #8]
 8007602:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,15,18");
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	4a87      	ldr	r2, [pc, #540]	; (8007828 <problem_fetch+0x5e98>)
 800760a:	461d      	mov	r5, r3
 800760c:	4614      	mov	r4, r2
 800760e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007610:	6028      	str	r0, [r5, #0]
 8007612:	6069      	str	r1, [r5, #4]
 8007614:	60aa      	str	r2, [r5, #8]
 8007616:	60eb      	str	r3, [r5, #12]
 8007618:	6820      	ldr	r0, [r4, #0]
 800761a:	6128      	str	r0, [r5, #16]
 800761c:	7923      	ldrb	r3, [r4, #4]
 800761e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007626:	4a81      	ldr	r2, [pc, #516]	; (800782c <problem_fetch+0x5e9c>)
 8007628:	461c      	mov	r4, r3
 800762a:	4615      	mov	r5, r2
 800762c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800762e:	6020      	str	r0, [r4, #0]
 8007630:	6061      	str	r1, [r4, #4]
 8007632:	60a2      	str	r2, [r4, #8]
 8007634:	60e3      	str	r3, [r4, #12]
			break;
 8007636:	f015 b8db 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 154 :
			strcpy(p->name,"BLUE BOWLS");
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007640:	497b      	ldr	r1, [pc, #492]	; (8007830 <problem_fetch+0x5ea0>)
 8007642:	461a      	mov	r2, r3
 8007644:	460b      	mov	r3, r1
 8007646:	cb03      	ldmia	r3!, {r0, r1}
 8007648:	6010      	str	r0, [r2, #0]
 800764a:	6051      	str	r1, [r2, #4]
 800764c:	8819      	ldrh	r1, [r3, #0]
 800764e:	789b      	ldrb	r3, [r3, #2]
 8007650:	8111      	strh	r1, [r2, #8]
 8007652:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800765a:	4a76      	ldr	r2, [pc, #472]	; (8007834 <problem_fetch+0x5ea4>)
 800765c:	6810      	ldr	r0, [r2, #0]
 800765e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2208      	movs	r2, #8
 8007664:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,G,D,H,J");
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	33a4      	adds	r3, #164	; 0xa4
 800766a:	4a73      	ldr	r2, [pc, #460]	; (8007838 <problem_fetch+0x5ea8>)
 800766c:	461c      	mov	r4, r3
 800766e:	4615      	mov	r5, r2
 8007670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007672:	6020      	str	r0, [r4, #0]
 8007674:	6061      	str	r1, [r4, #4]
 8007676:	60a2      	str	r2, [r4, #8]
 8007678:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,12,14,16,17,18,5,5");
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3304      	adds	r3, #4
 800767e:	4a6f      	ldr	r2, [pc, #444]	; (800783c <problem_fetch+0x5eac>)
 8007680:	461d      	mov	r5, r3
 8007682:	4614      	mov	r4, r2
 8007684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007686:	6028      	str	r0, [r5, #0]
 8007688:	6069      	str	r1, [r5, #4]
 800768a:	60aa      	str	r2, [r5, #8]
 800768c:	60eb      	str	r3, [r5, #12]
 800768e:	6820      	ldr	r0, [r4, #0]
 8007690:	6128      	str	r0, [r5, #16]
 8007692:	7923      	ldrb	r3, [r4, #4]
 8007694:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,s");
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800769c:	4a68      	ldr	r2, [pc, #416]	; (8007840 <problem_fetch+0x5eb0>)
 800769e:	461c      	mov	r4, r3
 80076a0:	4615      	mov	r5, r2
 80076a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076a4:	6020      	str	r0, [r4, #0]
 80076a6:	6061      	str	r1, [r4, #4]
 80076a8:	60a2      	str	r2, [r4, #8]
 80076aa:	60e3      	str	r3, [r4, #12]
			break;
 80076ac:	f015 b8a0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 155 :
			strcpy(p->name,"GILDA");
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80076b6:	4a63      	ldr	r2, [pc, #396]	; (8007844 <problem_fetch+0x5eb4>)
 80076b8:	6810      	ldr	r0, [r2, #0]
 80076ba:	6018      	str	r0, [r3, #0]
 80076bc:	8892      	ldrh	r2, [r2, #4]
 80076be:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80076c6:	4a60      	ldr	r2, [pc, #384]	; (8007848 <problem_fetch+0x5eb8>)
 80076c8:	8811      	ldrh	r1, [r2, #0]
 80076ca:	7892      	ldrb	r2, [r2, #2]
 80076cc:	8019      	strh	r1, [r3, #0]
 80076ce:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2208      	movs	r2, #8
 80076d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,E,I,H,I");
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	33a4      	adds	r3, #164	; 0xa4
 80076da:	4a5c      	ldr	r2, [pc, #368]	; (800784c <problem_fetch+0x5ebc>)
 80076dc:	461c      	mov	r4, r3
 80076de:	4615      	mov	r5, r2
 80076e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	6061      	str	r1, [r4, #4]
 80076e6:	60a2      	str	r2, [r4, #8]
 80076e8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,9,12,14,16,18");
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4a58      	ldr	r2, [pc, #352]	; (8007850 <problem_fetch+0x5ec0>)
 80076f0:	461d      	mov	r5, r3
 80076f2:	4614      	mov	r4, r2
 80076f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076f6:	6028      	str	r0, [r5, #0]
 80076f8:	6069      	str	r1, [r5, #4]
 80076fa:	60aa      	str	r2, [r5, #8]
 80076fc:	60eb      	str	r3, [r5, #12]
 80076fe:	6820      	ldr	r0, [r4, #0]
 8007700:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007708:	4a52      	ldr	r2, [pc, #328]	; (8007854 <problem_fetch+0x5ec4>)
 800770a:	461c      	mov	r4, r3
 800770c:	4615      	mov	r5, r2
 800770e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007710:	6020      	str	r0, [r4, #0]
 8007712:	6061      	str	r1, [r4, #4]
 8007714:	60a2      	str	r2, [r4, #8]
 8007716:	60e3      	str	r3, [r4, #12]
			break;
 8007718:	f015 b86a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 156 :
			strcpy(p->name,"DARK HORSE");
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007722:	494d      	ldr	r1, [pc, #308]	; (8007858 <problem_fetch+0x5ec8>)
 8007724:	461a      	mov	r2, r3
 8007726:	460b      	mov	r3, r1
 8007728:	cb03      	ldmia	r3!, {r0, r1}
 800772a:	6010      	str	r0, [r2, #0]
 800772c:	6051      	str	r1, [r2, #4]
 800772e:	8819      	ldrh	r1, [r3, #0]
 8007730:	789b      	ldrb	r3, [r3, #2]
 8007732:	8111      	strh	r1, [r2, #8]
 8007734:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800773c:	4a47      	ldr	r2, [pc, #284]	; (800785c <problem_fetch+0x5ecc>)
 800773e:	6810      	ldr	r0, [r2, #0]
 8007740:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2207      	movs	r2, #7
 8007746:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,F,I,D,E");
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	33a4      	adds	r3, #164	; 0xa4
 800774c:	4a44      	ldr	r2, [pc, #272]	; (8007860 <problem_fetch+0x5ed0>)
 800774e:	461c      	mov	r4, r3
 8007750:	4613      	mov	r3, r2
 8007752:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007754:	6020      	str	r0, [r4, #0]
 8007756:	6061      	str	r1, [r4, #4]
 8007758:	60a2      	str	r2, [r4, #8]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,13,10,18,16");
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	3304      	adds	r3, #4
 8007762:	4a40      	ldr	r2, [pc, #256]	; (8007864 <problem_fetch+0x5ed4>)
 8007764:	461d      	mov	r5, r3
 8007766:	4614      	mov	r4, r2
 8007768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800776a:	6028      	str	r0, [r5, #0]
 800776c:	6069      	str	r1, [r5, #4]
 800776e:	60aa      	str	r2, [r5, #8]
 8007770:	60eb      	str	r3, [r5, #12]
 8007772:	8823      	ldrh	r3, [r4, #0]
 8007774:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800777c:	4a3a      	ldr	r2, [pc, #232]	; (8007868 <problem_fetch+0x5ed8>)
 800777e:	461c      	mov	r4, r3
 8007780:	4613      	mov	r3, r2
 8007782:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007784:	6020      	str	r0, [r4, #0]
 8007786:	6061      	str	r1, [r4, #4]
 8007788:	60a2      	str	r2, [r4, #8]
 800778a:	881b      	ldrh	r3, [r3, #0]
 800778c:	81a3      	strh	r3, [r4, #12]
			break;
 800778e:	f015 b82f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 157 :
			strcpy(p->name,"LAP OF LUXURY");
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007798:	4a34      	ldr	r2, [pc, #208]	; (800786c <problem_fetch+0x5edc>)
 800779a:	461c      	mov	r4, r3
 800779c:	4613      	mov	r3, r2
 800779e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077a0:	6020      	str	r0, [r4, #0]
 80077a2:	6061      	str	r1, [r4, #4]
 80077a4:	60a2      	str	r2, [r4, #8]
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80077b0:	4a20      	ldr	r2, [pc, #128]	; (8007834 <problem_fetch+0x5ea4>)
 80077b2:	6810      	ldr	r0, [r2, #0]
 80077b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2207      	movs	r2, #7
 80077ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,E,B,E,E,I");
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	33a4      	adds	r3, #164	; 0xa4
 80077c0:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <problem_fetch+0x5ee0>)
 80077c2:	461c      	mov	r4, r3
 80077c4:	4613      	mov	r3, r2
 80077c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077c8:	6020      	str	r0, [r4, #0]
 80077ca:	6061      	str	r1, [r4, #4]
 80077cc:	60a2      	str	r2, [r4, #8]
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,16,18");
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	3304      	adds	r3, #4
 80077d6:	4a27      	ldr	r2, [pc, #156]	; (8007874 <problem_fetch+0x5ee4>)
 80077d8:	461d      	mov	r5, r3
 80077da:	4614      	mov	r4, r2
 80077dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80077de:	6028      	str	r0, [r5, #0]
 80077e0:	6069      	str	r1, [r5, #4]
 80077e2:	60aa      	str	r2, [r5, #8]
 80077e4:	60eb      	str	r3, [r5, #12]
 80077e6:	8823      	ldrh	r3, [r4, #0]
 80077e8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80077f0:	4a21      	ldr	r2, [pc, #132]	; (8007878 <problem_fetch+0x5ee8>)
 80077f2:	461c      	mov	r4, r3
 80077f4:	4613      	mov	r3, r2
 80077f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077f8:	6020      	str	r0, [r4, #0]
 80077fa:	6061      	str	r1, [r4, #4]
 80077fc:	60a2      	str	r2, [r4, #8]
 80077fe:	881b      	ldrh	r3, [r3, #0]
 8007800:	81a3      	strh	r3, [r4, #12]
			break;
 8007802:	f014 bff5 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8007806:	bf00      	nop
 8007808:	08025a5c 	.word	0x08025a5c
 800780c:	08023b50 	.word	0x08023b50
 8007810:	08025a64 	.word	0x08025a64
 8007814:	08025a70 	.word	0x08025a70
 8007818:	0802405c 	.word	0x0802405c
 800781c:	08025a80 	.word	0x08025a80
 8007820:	08023d30 	.word	0x08023d30
 8007824:	08025a94 	.word	0x08025a94
 8007828:	08025aa4 	.word	0x08025aa4
 800782c:	08023cb4 	.word	0x08023cb4
 8007830:	08025abc 	.word	0x08025abc
 8007834:	08023c28 	.word	0x08023c28
 8007838:	08025ac8 	.word	0x08025ac8
 800783c:	08025ad8 	.word	0x08025ad8
 8007840:	08025af0 	.word	0x08025af0
 8007844:	08025b00 	.word	0x08025b00
 8007848:	08023c5c 	.word	0x08023c5c
 800784c:	08025b08 	.word	0x08025b08
 8007850:	08025b18 	.word	0x08025b18
 8007854:	08023da0 	.word	0x08023da0
 8007858:	08025b2c 	.word	0x08025b2c
 800785c:	08023ccc 	.word	0x08023ccc
 8007860:	08025b38 	.word	0x08025b38
 8007864:	08025b48 	.word	0x08025b48
 8007868:	08024cf8 	.word	0x08024cf8
 800786c:	08025b5c 	.word	0x08025b5c
 8007870:	08025b6c 	.word	0x08025b6c
 8007874:	08025b7c 	.word	0x08025b7c
 8007878:	08023d18 	.word	0x08023d18
		case 158 :
			strcpy(p->name,"EASE OF ACCESS");
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007882:	4aab      	ldr	r2, [pc, #684]	; (8007b30 <problem_fetch+0x61a0>)
 8007884:	461c      	mov	r4, r3
 8007886:	4613      	mov	r3, r2
 8007888:	cb07      	ldmia	r3!, {r0, r1, r2}
 800788a:	6020      	str	r0, [r4, #0]
 800788c:	6061      	str	r1, [r4, #4]
 800788e:	60a2      	str	r2, [r4, #8]
 8007890:	881a      	ldrh	r2, [r3, #0]
 8007892:	789b      	ldrb	r3, [r3, #2]
 8007894:	81a2      	strh	r2, [r4, #12]
 8007896:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800789e:	4aa5      	ldr	r2, [pc, #660]	; (8007b34 <problem_fetch+0x61a4>)
 80078a0:	6810      	ldr	r0, [r2, #0]
 80078a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2209      	movs	r2, #9
 80078a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,J,E,J,J,H,E,D");
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	33a4      	adds	r3, #164	; 0xa4
 80078ae:	4aa2      	ldr	r2, [pc, #648]	; (8007b38 <problem_fetch+0x61a8>)
 80078b0:	461d      	mov	r5, r3
 80078b2:	4614      	mov	r4, r2
 80078b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078b6:	6028      	str	r0, [r5, #0]
 80078b8:	6069      	str	r1, [r5, #4]
 80078ba:	60aa      	str	r2, [r5, #8]
 80078bc:	60eb      	str	r3, [r5, #12]
 80078be:	8823      	ldrh	r3, [r4, #0]
 80078c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,9,7,9,13,16,16,16,18");
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4a9d      	ldr	r2, [pc, #628]	; (8007b3c <problem_fetch+0x61ac>)
 80078c8:	461c      	mov	r4, r3
 80078ca:	4615      	mov	r5, r2
 80078cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80078ce:	6020      	str	r0, [r4, #0]
 80078d0:	6061      	str	r1, [r4, #4]
 80078d2:	60a2      	str	r2, [r4, #8]
 80078d4:	60e3      	str	r3, [r4, #12]
 80078d6:	6828      	ldr	r0, [r5, #0]
 80078d8:	6120      	str	r0, [r4, #16]
 80078da:	88ab      	ldrh	r3, [r5, #4]
 80078dc:	79aa      	ldrb	r2, [r5, #6]
 80078de:	82a3      	strh	r3, [r4, #20]
 80078e0:	4613      	mov	r3, r2
 80078e2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80078ea:	4a95      	ldr	r2, [pc, #596]	; (8007b40 <problem_fetch+0x61b0>)
 80078ec:	461d      	mov	r5, r3
 80078ee:	4614      	mov	r4, r2
 80078f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078f2:	6028      	str	r0, [r5, #0]
 80078f4:	6069      	str	r1, [r5, #4]
 80078f6:	60aa      	str	r2, [r5, #8]
 80078f8:	60eb      	str	r3, [r5, #12]
 80078fa:	8823      	ldrh	r3, [r4, #0]
 80078fc:	822b      	strh	r3, [r5, #16]
			break;
 80078fe:	f014 bf77 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 159 :
			strcpy(p->name,"OLYMPUS");
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007908:	498e      	ldr	r1, [pc, #568]	; (8007b44 <problem_fetch+0x61b4>)
 800790a:	461a      	mov	r2, r3
 800790c:	460b      	mov	r3, r1
 800790e:	cb03      	ldmia	r3!, {r0, r1}
 8007910:	6010      	str	r0, [r2, #0]
 8007912:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800791a:	4a8b      	ldr	r2, [pc, #556]	; (8007b48 <problem_fetch+0x61b8>)
 800791c:	8811      	ldrh	r1, [r2, #0]
 800791e:	7892      	ldrb	r2, [r2, #2]
 8007920:	8019      	strh	r1, [r3, #0]
 8007922:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2207      	movs	r2, #7
 8007928:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,D,F,G,I");
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	33a4      	adds	r3, #164	; 0xa4
 800792e:	4a87      	ldr	r2, [pc, #540]	; (8007b4c <problem_fetch+0x61bc>)
 8007930:	461c      	mov	r4, r3
 8007932:	4613      	mov	r3, r2
 8007934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007936:	6020      	str	r0, [r4, #0]
 8007938:	6061      	str	r1, [r4, #4]
 800793a:	60a2      	str	r2, [r4, #8]
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,15,18");
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4a82      	ldr	r2, [pc, #520]	; (8007b50 <problem_fetch+0x61c0>)
 8007946:	461d      	mov	r5, r3
 8007948:	4614      	mov	r4, r2
 800794a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800794c:	6028      	str	r0, [r5, #0]
 800794e:	6069      	str	r1, [r5, #4]
 8007950:	60aa      	str	r2, [r5, #8]
 8007952:	60eb      	str	r3, [r5, #12]
 8007954:	8823      	ldrh	r3, [r4, #0]
 8007956:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800795e:	4a7d      	ldr	r2, [pc, #500]	; (8007b54 <problem_fetch+0x61c4>)
 8007960:	461c      	mov	r4, r3
 8007962:	4613      	mov	r3, r2
 8007964:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007966:	6020      	str	r0, [r4, #0]
 8007968:	6061      	str	r1, [r4, #4]
 800796a:	60a2      	str	r2, [r4, #8]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	81a3      	strh	r3, [r4, #12]
			break;
 8007970:	f014 bf3e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 160 :
			strcpy(p->name,"FRUIT CAKE");
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800797a:	4977      	ldr	r1, [pc, #476]	; (8007b58 <problem_fetch+0x61c8>)
 800797c:	461a      	mov	r2, r3
 800797e:	460b      	mov	r3, r1
 8007980:	cb03      	ldmia	r3!, {r0, r1}
 8007982:	6010      	str	r0, [r2, #0]
 8007984:	6051      	str	r1, [r2, #4]
 8007986:	8819      	ldrh	r1, [r3, #0]
 8007988:	789b      	ldrb	r3, [r3, #2]
 800798a:	8111      	strh	r1, [r2, #8]
 800798c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007994:	4a71      	ldr	r2, [pc, #452]	; (8007b5c <problem_fetch+0x61cc>)
 8007996:	6810      	ldr	r0, [r2, #0]
 8007998:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2206      	movs	r2, #6
 800799e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,D,D");
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	33a4      	adds	r3, #164	; 0xa4
 80079a4:	4a6e      	ldr	r2, [pc, #440]	; (8007b60 <problem_fetch+0x61d0>)
 80079a6:	461c      	mov	r4, r3
 80079a8:	4613      	mov	r3, r2
 80079aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079ac:	6020      	str	r0, [r4, #0]
 80079ae:	6061      	str	r1, [r4, #4]
 80079b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,12,15,18");
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4a6b      	ldr	r2, [pc, #428]	; (8007b64 <problem_fetch+0x61d4>)
 80079b8:	461c      	mov	r4, r3
 80079ba:	4615      	mov	r5, r2
 80079bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079be:	6020      	str	r0, [r4, #0]
 80079c0:	6061      	str	r1, [r4, #4]
 80079c2:	60a2      	str	r2, [r4, #8]
 80079c4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80079cc:	4a66      	ldr	r2, [pc, #408]	; (8007b68 <problem_fetch+0x61d8>)
 80079ce:	461c      	mov	r4, r3
 80079d0:	4613      	mov	r3, r2
 80079d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079d4:	6020      	str	r0, [r4, #0]
 80079d6:	6061      	str	r1, [r4, #4]
 80079d8:	60a2      	str	r2, [r4, #8]
			break;
 80079da:	f014 bf09 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 161 :
			strcpy(p->name,"LA MARY ME PAGA");
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079e4:	4a61      	ldr	r2, [pc, #388]	; (8007b6c <problem_fetch+0x61dc>)
 80079e6:	461c      	mov	r4, r3
 80079e8:	4615      	mov	r5, r2
 80079ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ec:	6020      	str	r0, [r4, #0]
 80079ee:	6061      	str	r1, [r4, #4]
 80079f0:	60a2      	str	r2, [r4, #8]
 80079f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80079fa:	4a5d      	ldr	r2, [pc, #372]	; (8007b70 <problem_fetch+0x61e0>)
 80079fc:	8811      	ldrh	r1, [r2, #0]
 80079fe:	7892      	ldrb	r2, [r2, #2]
 8007a00:	8019      	strh	r1, [r3, #0]
 8007a02:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2206      	movs	r2, #6
 8007a08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,D");
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	33a4      	adds	r3, #164	; 0xa4
 8007a0e:	4a59      	ldr	r2, [pc, #356]	; (8007b74 <problem_fetch+0x61e4>)
 8007a10:	461c      	mov	r4, r3
 8007a12:	4613      	mov	r3, r2
 8007a14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	6061      	str	r1, [r4, #4]
 8007a1a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,10,14,18");
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	4a55      	ldr	r2, [pc, #340]	; (8007b78 <problem_fetch+0x61e8>)
 8007a22:	461c      	mov	r4, r3
 8007a24:	4613      	mov	r3, r2
 8007a26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a28:	6020      	str	r0, [r4, #0]
 8007a2a:	6061      	str	r1, [r4, #4]
 8007a2c:	60a2      	str	r2, [r4, #8]
 8007a2e:	881a      	ldrh	r2, [r3, #0]
 8007a30:	789b      	ldrb	r3, [r3, #2]
 8007a32:	81a2      	strh	r2, [r4, #12]
 8007a34:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007a3c:	4a4f      	ldr	r2, [pc, #316]	; (8007b7c <problem_fetch+0x61ec>)
 8007a3e:	461c      	mov	r4, r3
 8007a40:	4613      	mov	r3, r2
 8007a42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a44:	6020      	str	r0, [r4, #0]
 8007a46:	6061      	str	r1, [r4, #4]
 8007a48:	60a2      	str	r2, [r4, #8]
			break;
 8007a4a:	f014 bed1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 162 :
			strcpy(p->name,"WILD BILL");
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a54:	494a      	ldr	r1, [pc, #296]	; (8007b80 <problem_fetch+0x61f0>)
 8007a56:	461a      	mov	r2, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	cb03      	ldmia	r3!, {r0, r1}
 8007a5c:	6010      	str	r0, [r2, #0]
 8007a5e:	6051      	str	r1, [r2, #4]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007a6a:	4a41      	ldr	r2, [pc, #260]	; (8007b70 <problem_fetch+0x61e0>)
 8007a6c:	8811      	ldrh	r1, [r2, #0]
 8007a6e:	7892      	ldrb	r2, [r2, #2]
 8007a70:	8019      	strh	r1, [r3, #0]
 8007a72:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2206      	movs	r2, #6
 8007a78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,G,D,D,A");
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	33a4      	adds	r3, #164	; 0xa4
 8007a7e:	4a41      	ldr	r2, [pc, #260]	; (8007b84 <problem_fetch+0x61f4>)
 8007a80:	461c      	mov	r4, r3
 8007a82:	4613      	mov	r3, r2
 8007a84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a86:	6020      	str	r0, [r4, #0]
 8007a88:	6061      	str	r1, [r4, #4]
 8007a8a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,18,18");
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4a3d      	ldr	r2, [pc, #244]	; (8007b88 <problem_fetch+0x61f8>)
 8007a92:	461c      	mov	r4, r3
 8007a94:	4615      	mov	r5, r2
 8007a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a98:	6020      	str	r0, [r4, #0]
 8007a9a:	6061      	str	r1, [r4, #4]
 8007a9c:	60a2      	str	r2, [r4, #8]
 8007a9e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,e");
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007aa6:	4a39      	ldr	r2, [pc, #228]	; (8007b8c <problem_fetch+0x61fc>)
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	4613      	mov	r3, r2
 8007aac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007aae:	6020      	str	r0, [r4, #0]
 8007ab0:	6061      	str	r1, [r4, #4]
 8007ab2:	60a2      	str	r2, [r4, #8]
			break;
 8007ab4:	f014 be9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 163 :
			strcpy(p->name,"DARK DAYS");
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007abe:	4934      	ldr	r1, [pc, #208]	; (8007b90 <problem_fetch+0x6200>)
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	cb03      	ldmia	r3!, {r0, r1}
 8007ac6:	6010      	str	r0, [r2, #0]
 8007ac8:	6051      	str	r1, [r2, #4]
 8007aca:	881b      	ldrh	r3, [r3, #0]
 8007acc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007ad4:	4a2f      	ldr	r2, [pc, #188]	; (8007b94 <problem_fetch+0x6204>)
 8007ad6:	6810      	ldr	r0, [r2, #0]
 8007ad8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2209      	movs	r2, #9
 8007ade:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,D,I,K,I,I");
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	33a4      	adds	r3, #164	; 0xa4
 8007ae4:	4a2c      	ldr	r2, [pc, #176]	; (8007b98 <problem_fetch+0x6208>)
 8007ae6:	461d      	mov	r5, r3
 8007ae8:	4614      	mov	r4, r2
 8007aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007aec:	6028      	str	r0, [r5, #0]
 8007aee:	6069      	str	r1, [r5, #4]
 8007af0:	60aa      	str	r2, [r5, #8]
 8007af2:	60eb      	str	r3, [r5, #12]
 8007af4:	8823      	ldrh	r3, [r4, #0]
 8007af6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,14,15,15,14,18,7");
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	4a27      	ldr	r2, [pc, #156]	; (8007b9c <problem_fetch+0x620c>)
 8007afe:	461d      	mov	r5, r3
 8007b00:	4614      	mov	r4, r2
 8007b02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b04:	6028      	str	r0, [r5, #0]
 8007b06:	6069      	str	r1, [r5, #4]
 8007b08:	60aa      	str	r2, [r5, #8]
 8007b0a:	60eb      	str	r3, [r5, #12]
 8007b0c:	cc03      	ldmia	r4!, {r0, r1}
 8007b0e:	6128      	str	r0, [r5, #16]
 8007b10:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,d");
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007b18:	4a21      	ldr	r2, [pc, #132]	; (8007ba0 <problem_fetch+0x6210>)
 8007b1a:	461d      	mov	r5, r3
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b20:	6028      	str	r0, [r5, #0]
 8007b22:	6069      	str	r1, [r5, #4]
 8007b24:	60aa      	str	r2, [r5, #8]
 8007b26:	60eb      	str	r3, [r5, #12]
 8007b28:	8823      	ldrh	r3, [r4, #0]
 8007b2a:	822b      	strh	r3, [r5, #16]
			break;
 8007b2c:	f014 be60 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8007b30:	08025b90 	.word	0x08025b90
 8007b34:	08023c28 	.word	0x08023c28
 8007b38:	08025ba0 	.word	0x08025ba0
 8007b3c:	08025bb4 	.word	0x08025bb4
 8007b40:	08025a48 	.word	0x08025a48
 8007b44:	08025bcc 	.word	0x08025bcc
 8007b48:	080243c4 	.word	0x080243c4
 8007b4c:	08025bd4 	.word	0x08025bd4
 8007b50:	08025be4 	.word	0x08025be4
 8007b54:	08023d18 	.word	0x08023d18
 8007b58:	08025bf8 	.word	0x08025bf8
 8007b5c:	08023b90 	.word	0x08023b90
 8007b60:	08025c04 	.word	0x08025c04
 8007b64:	08025c10 	.word	0x08025c10
 8007b68:	08023f2c 	.word	0x08023f2c
 8007b6c:	08025c20 	.word	0x08025c20
 8007b70:	08024288 	.word	0x08024288
 8007b74:	08025c30 	.word	0x08025c30
 8007b78:	08025c3c 	.word	0x08025c3c
 8007b7c:	08023b70 	.word	0x08023b70
 8007b80:	08025c4c 	.word	0x08025c4c
 8007b84:	08025c58 	.word	0x08025c58
 8007b88:	08025c64 	.word	0x08025c64
 8007b8c:	08025c74 	.word	0x08025c74
 8007b90:	08025c80 	.word	0x08025c80
 8007b94:	08023d30 	.word	0x08023d30
 8007b98:	08025c8c 	.word	0x08025c8c
 8007b9c:	08025ca0 	.word	0x08025ca0
 8007ba0:	08025cb8 	.word	0x08025cb8
		case 164 :
			strcpy(p->name,"PINPANPUN");
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007baa:	49a8      	ldr	r1, [pc, #672]	; (8007e4c <problem_fetch+0x64bc>)
 8007bac:	461a      	mov	r2, r3
 8007bae:	460b      	mov	r3, r1
 8007bb0:	cb03      	ldmia	r3!, {r0, r1}
 8007bb2:	6010      	str	r0, [r2, #0]
 8007bb4:	6051      	str	r1, [r2, #4]
 8007bb6:	881b      	ldrh	r3, [r3, #0]
 8007bb8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007bc0:	4aa3      	ldr	r2, [pc, #652]	; (8007e50 <problem_fetch+0x64c0>)
 8007bc2:	6810      	ldr	r0, [r2, #0]
 8007bc4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2207      	movs	r2, #7
 8007bca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,A,E,A,D");
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	33a4      	adds	r3, #164	; 0xa4
 8007bd0:	4aa0      	ldr	r2, [pc, #640]	; (8007e54 <problem_fetch+0x64c4>)
 8007bd2:	461c      	mov	r4, r3
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007bd8:	6020      	str	r0, [r4, #0]
 8007bda:	6061      	str	r1, [r4, #4]
 8007bdc:	60a2      	str	r2, [r4, #8]
 8007bde:	881b      	ldrh	r3, [r3, #0]
 8007be0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,12,14,18");
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3304      	adds	r3, #4
 8007be6:	4a9c      	ldr	r2, [pc, #624]	; (8007e58 <problem_fetch+0x64c8>)
 8007be8:	461d      	mov	r5, r3
 8007bea:	4614      	mov	r4, r2
 8007bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007bee:	6028      	str	r0, [r5, #0]
 8007bf0:	6069      	str	r1, [r5, #4]
 8007bf2:	60aa      	str	r2, [r5, #8]
 8007bf4:	60eb      	str	r3, [r5, #12]
 8007bf6:	7823      	ldrb	r3, [r4, #0]
 8007bf8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007c00:	4a96      	ldr	r2, [pc, #600]	; (8007e5c <problem_fetch+0x64cc>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	4613      	mov	r3, r2
 8007c06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c08:	6020      	str	r0, [r4, #0]
 8007c0a:	6061      	str	r1, [r4, #4]
 8007c0c:	60a2      	str	r2, [r4, #8]
 8007c0e:	881b      	ldrh	r3, [r3, #0]
 8007c10:	81a3      	strh	r3, [r4, #12]
			break;
 8007c12:	f014 bded 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 165 :
			strcpy(p->name,"CK");
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c1c:	4a90      	ldr	r2, [pc, #576]	; (8007e60 <problem_fetch+0x64d0>)
 8007c1e:	8811      	ldrh	r1, [r2, #0]
 8007c20:	7892      	ldrb	r2, [r2, #2]
 8007c22:	8019      	strh	r1, [r3, #0]
 8007c24:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c2c:	4a8d      	ldr	r2, [pc, #564]	; (8007e64 <problem_fetch+0x64d4>)
 8007c2e:	6810      	ldr	r0, [r2, #0]
 8007c30:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2206      	movs	r2, #6
 8007c36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,J,F,G,D");
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	33a4      	adds	r3, #164	; 0xa4
 8007c3c:	4a8a      	ldr	r2, [pc, #552]	; (8007e68 <problem_fetch+0x64d8>)
 8007c3e:	461c      	mov	r4, r3
 8007c40:	4613      	mov	r3, r2
 8007c42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c44:	6020      	str	r0, [r4, #0]
 8007c46:	6061      	str	r1, [r4, #4]
 8007c48:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,13,17,18");
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4a87      	ldr	r2, [pc, #540]	; (8007e6c <problem_fetch+0x64dc>)
 8007c50:	461c      	mov	r4, r3
 8007c52:	4615      	mov	r5, r2
 8007c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c56:	6020      	str	r0, [r4, #0]
 8007c58:	6061      	str	r1, [r4, #4]
 8007c5a:	60a2      	str	r2, [r4, #8]
 8007c5c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007c64:	4a82      	ldr	r2, [pc, #520]	; (8007e70 <problem_fetch+0x64e0>)
 8007c66:	461c      	mov	r4, r3
 8007c68:	4613      	mov	r3, r2
 8007c6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c6c:	6020      	str	r0, [r4, #0]
 8007c6e:	6061      	str	r1, [r4, #4]
 8007c70:	60a2      	str	r2, [r4, #8]
			break;
 8007c72:	f014 bdbd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 166 :
			strcpy(p->name,"TRIO TERNURA");
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c7c:	4a7d      	ldr	r2, [pc, #500]	; (8007e74 <problem_fetch+0x64e4>)
 8007c7e:	461c      	mov	r4, r3
 8007c80:	4613      	mov	r3, r2
 8007c82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c84:	6020      	str	r0, [r4, #0]
 8007c86:	6061      	str	r1, [r4, #4]
 8007c88:	60a2      	str	r2, [r4, #8]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c94:	4a78      	ldr	r2, [pc, #480]	; (8007e78 <problem_fetch+0x64e8>)
 8007c96:	6810      	ldr	r0, [r2, #0]
 8007c98:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2206      	movs	r2, #6
 8007c9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,A,A");
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	33a4      	adds	r3, #164	; 0xa4
 8007ca4:	4a75      	ldr	r2, [pc, #468]	; (8007e7c <problem_fetch+0x64ec>)
 8007ca6:	461c      	mov	r4, r3
 8007ca8:	4613      	mov	r3, r2
 8007caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007cac:	6020      	str	r0, [r4, #0]
 8007cae:	6061      	str	r1, [r4, #4]
 8007cb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,14,18");
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	4a72      	ldr	r2, [pc, #456]	; (8007e80 <problem_fetch+0x64f0>)
 8007cb8:	461c      	mov	r4, r3
 8007cba:	4613      	mov	r3, r2
 8007cbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007cbe:	6020      	str	r0, [r4, #0]
 8007cc0:	6061      	str	r1, [r4, #4]
 8007cc2:	60a2      	str	r2, [r4, #8]
 8007cc4:	881a      	ldrh	r2, [r3, #0]
 8007cc6:	789b      	ldrb	r3, [r3, #2]
 8007cc8:	81a2      	strh	r2, [r4, #12]
 8007cca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007cd2:	4a67      	ldr	r2, [pc, #412]	; (8007e70 <problem_fetch+0x64e0>)
 8007cd4:	461c      	mov	r4, r3
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007cda:	6020      	str	r0, [r4, #0]
 8007cdc:	6061      	str	r1, [r4, #4]
 8007cde:	60a2      	str	r2, [r4, #8]
			break;
 8007ce0:	f014 bd86 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 167 :
			strcpy(p->name,"BLACK PROJECT");
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007cea:	4a66      	ldr	r2, [pc, #408]	; (8007e84 <problem_fetch+0x64f4>)
 8007cec:	461c      	mov	r4, r3
 8007cee:	4613      	mov	r3, r2
 8007cf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	6061      	str	r1, [r4, #4]
 8007cf6:	60a2      	str	r2, [r4, #8]
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d02:	4a61      	ldr	r2, [pc, #388]	; (8007e88 <problem_fetch+0x64f8>)
 8007d04:	8811      	ldrh	r1, [r2, #0]
 8007d06:	7892      	ldrb	r2, [r2, #2]
 8007d08:	8019      	strh	r1, [r3, #0]
 8007d0a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2205      	movs	r2, #5
 8007d10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,H,H,I");
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	33a4      	adds	r3, #164	; 0xa4
 8007d16:	495d      	ldr	r1, [pc, #372]	; (8007e8c <problem_fetch+0x64fc>)
 8007d18:	461a      	mov	r2, r3
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	cb03      	ldmia	r3!, {r0, r1}
 8007d1e:	6010      	str	r0, [r2, #0]
 8007d20:	6051      	str	r1, [r2, #4]
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,16,18");
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	4a59      	ldr	r2, [pc, #356]	; (8007e90 <problem_fetch+0x6500>)
 8007d2c:	461c      	mov	r4, r3
 8007d2e:	4613      	mov	r3, r2
 8007d30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007d32:	6020      	str	r0, [r4, #0]
 8007d34:	6061      	str	r1, [r4, #4]
 8007d36:	60a2      	str	r2, [r4, #8]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007d42:	4954      	ldr	r1, [pc, #336]	; (8007e94 <problem_fetch+0x6504>)
 8007d44:	461a      	mov	r2, r3
 8007d46:	460b      	mov	r3, r1
 8007d48:	cb03      	ldmia	r3!, {r0, r1}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	6051      	str	r1, [r2, #4]
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	8113      	strh	r3, [r2, #8]
			break;
 8007d52:	f014 bd4d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 168 :
			strcpy(p->name,"BLACK-OUT");
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d5c:	494e      	ldr	r1, [pc, #312]	; (8007e98 <problem_fetch+0x6508>)
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	cb03      	ldmia	r3!, {r0, r1}
 8007d64:	6010      	str	r0, [r2, #0]
 8007d66:	6051      	str	r1, [r2, #4]
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d72:	4a4a      	ldr	r2, [pc, #296]	; (8007e9c <problem_fetch+0x650c>)
 8007d74:	6810      	ldr	r0, [r2, #0]
 8007d76:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2209      	movs	r2, #9
 8007d7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,F,B,A,E,D");
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	33a4      	adds	r3, #164	; 0xa4
 8007d82:	4a47      	ldr	r2, [pc, #284]	; (8007ea0 <problem_fetch+0x6510>)
 8007d84:	461d      	mov	r5, r3
 8007d86:	4614      	mov	r4, r2
 8007d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d8a:	6028      	str	r0, [r5, #0]
 8007d8c:	6069      	str	r1, [r5, #4]
 8007d8e:	60aa      	str	r2, [r5, #8]
 8007d90:	60eb      	str	r3, [r5, #12]
 8007d92:	8823      	ldrh	r3, [r4, #0]
 8007d94:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,11,12,14,16,18");
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4a42      	ldr	r2, [pc, #264]	; (8007ea4 <problem_fetch+0x6514>)
 8007d9c:	461c      	mov	r4, r3
 8007d9e:	4615      	mov	r5, r2
 8007da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	6061      	str	r1, [r4, #4]
 8007da6:	60a2      	str	r2, [r4, #8]
 8007da8:	60e3      	str	r3, [r4, #12]
 8007daa:	6828      	ldr	r0, [r5, #0]
 8007dac:	6120      	str	r0, [r4, #16]
 8007dae:	88ab      	ldrh	r3, [r5, #4]
 8007db0:	79aa      	ldrb	r2, [r5, #6]
 8007db2:	82a3      	strh	r3, [r4, #20]
 8007db4:	4613      	mov	r3, r2
 8007db6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007dbe:	4a3a      	ldr	r2, [pc, #232]	; (8007ea8 <problem_fetch+0x6518>)
 8007dc0:	461d      	mov	r5, r3
 8007dc2:	4614      	mov	r4, r2
 8007dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dc6:	6028      	str	r0, [r5, #0]
 8007dc8:	6069      	str	r1, [r5, #4]
 8007dca:	60aa      	str	r2, [r5, #8]
 8007dcc:	60eb      	str	r3, [r5, #12]
 8007dce:	8823      	ldrh	r3, [r4, #0]
 8007dd0:	822b      	strh	r3, [r5, #16]
			break;
 8007dd2:	f014 bd0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 169 :
			strcpy(p->name,"YET ANOTHER WASTE OF SKIN");
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ddc:	4a33      	ldr	r2, [pc, #204]	; (8007eac <problem_fetch+0x651c>)
 8007dde:	461d      	mov	r5, r3
 8007de0:	4614      	mov	r4, r2
 8007de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007de4:	6028      	str	r0, [r5, #0]
 8007de6:	6069      	str	r1, [r5, #4]
 8007de8:	60aa      	str	r2, [r5, #8]
 8007dea:	60eb      	str	r3, [r5, #12]
 8007dec:	cc03      	ldmia	r4!, {r0, r1}
 8007dee:	6128      	str	r0, [r5, #16]
 8007df0:	6169      	str	r1, [r5, #20]
 8007df2:	8823      	ldrh	r3, [r4, #0]
 8007df4:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	; (8007e78 <problem_fetch+0x64e8>)
 8007dfe:	6810      	ldr	r0, [r2, #0]
 8007e00:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,D,A");
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	33a4      	adds	r3, #164	; 0xa4
 8007e0c:	4928      	ldr	r1, [pc, #160]	; (8007eb0 <problem_fetch+0x6520>)
 8007e0e:	461a      	mov	r2, r3
 8007e10:	460b      	mov	r3, r1
 8007e12:	cb03      	ldmia	r3!, {r0, r1}
 8007e14:	6010      	str	r0, [r2, #0]
 8007e16:	6051      	str	r1, [r2, #4]
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4a24      	ldr	r2, [pc, #144]	; (8007eb4 <problem_fetch+0x6524>)
 8007e22:	461c      	mov	r4, r3
 8007e24:	4613      	mov	r3, r2
 8007e26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e28:	6020      	str	r0, [r4, #0]
 8007e2a:	6061      	str	r1, [r4, #4]
 8007e2c:	60a2      	str	r2, [r4, #8]
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007e38:	4916      	ldr	r1, [pc, #88]	; (8007e94 <problem_fetch+0x6504>)
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	cb03      	ldmia	r3!, {r0, r1}
 8007e40:	6010      	str	r0, [r2, #0]
 8007e42:	6051      	str	r1, [r2, #4]
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	8113      	strh	r3, [r2, #8]
			break;
 8007e48:	f014 bcd2 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8007e4c:	08025ccc 	.word	0x08025ccc
 8007e50:	08023d30 	.word	0x08023d30
 8007e54:	08025cd8 	.word	0x08025cd8
 8007e58:	08025ce8 	.word	0x08025ce8
 8007e5c:	08023c08 	.word	0x08023c08
 8007e60:	08025cfc 	.word	0x08025cfc
 8007e64:	08023c28 	.word	0x08023c28
 8007e68:	08025d00 	.word	0x08025d00
 8007e6c:	08025d0c 	.word	0x08025d0c
 8007e70:	08023f2c 	.word	0x08023f2c
 8007e74:	08025d1c 	.word	0x08025d1c
 8007e78:	08023ccc 	.word	0x08023ccc
 8007e7c:	08025d2c 	.word	0x08025d2c
 8007e80:	08025d38 	.word	0x08025d38
 8007e84:	08025d48 	.word	0x08025d48
 8007e88:	08023b50 	.word	0x08023b50
 8007e8c:	08025d58 	.word	0x08025d58
 8007e90:	08025d64 	.word	0x08025d64
 8007e94:	0802405c 	.word	0x0802405c
 8007e98:	08025d74 	.word	0x08025d74
 8007e9c:	08023b90 	.word	0x08023b90
 8007ea0:	08025d80 	.word	0x08025d80
 8007ea4:	08025d94 	.word	0x08025d94
 8007ea8:	08024b74 	.word	0x08024b74
 8007eac:	08025dac 	.word	0x08025dac
 8007eb0:	08025dc8 	.word	0x08025dc8
 8007eb4:	08025a70 	.word	0x08025a70
		case 170 :
			strcpy(p->name,"SCIENTIFIC PROGRESS");
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ebe:	4aae      	ldr	r2, [pc, #696]	; (8008178 <problem_fetch+0x67e8>)
 8007ec0:	461d      	mov	r5, r3
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ec6:	6028      	str	r0, [r5, #0]
 8007ec8:	6069      	str	r1, [r5, #4]
 8007eca:	60aa      	str	r2, [r5, #8]
 8007ecc:	60eb      	str	r3, [r5, #12]
 8007ece:	6820      	ldr	r0, [r4, #0]
 8007ed0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007ed8:	4aa8      	ldr	r2, [pc, #672]	; (800817c <problem_fetch+0x67ec>)
 8007eda:	8811      	ldrh	r1, [r2, #0]
 8007edc:	7892      	ldrb	r2, [r2, #2]
 8007ede:	8019      	strh	r1, [r3, #0]
 8007ee0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,A,A");
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	33a4      	adds	r3, #164	; 0xa4
 8007eec:	49a4      	ldr	r1, [pc, #656]	; (8008180 <problem_fetch+0x67f0>)
 8007eee:	461a      	mov	r2, r3
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	cb03      	ldmia	r3!, {r0, r1}
 8007ef4:	6010      	str	r0, [r2, #0]
 8007ef6:	6051      	str	r1, [r2, #4]
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,11,14,18");
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	3304      	adds	r3, #4
 8007f00:	4aa0      	ldr	r2, [pc, #640]	; (8008184 <problem_fetch+0x67f4>)
 8007f02:	461c      	mov	r4, r3
 8007f04:	4613      	mov	r3, r2
 8007f06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f08:	6020      	str	r0, [r4, #0]
 8007f0a:	6061      	str	r1, [r4, #4]
 8007f0c:	60a2      	str	r2, [r4, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007f18:	499b      	ldr	r1, [pc, #620]	; (8008188 <problem_fetch+0x67f8>)
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	cb03      	ldmia	r3!, {r0, r1}
 8007f20:	6010      	str	r0, [r2, #0]
 8007f22:	6051      	str	r1, [r2, #4]
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	8113      	strh	r3, [r2, #8]
			break;
 8007f28:	f014 bc62 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 171 :
			strcpy(p->name,"THE BLACK MAMBA 🐍");
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f32:	4a96      	ldr	r2, [pc, #600]	; (800818c <problem_fetch+0x67fc>)
 8007f34:	461d      	mov	r5, r3
 8007f36:	4614      	mov	r4, r2
 8007f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f3a:	6028      	str	r0, [r5, #0]
 8007f3c:	6069      	str	r1, [r5, #4]
 8007f3e:	60aa      	str	r2, [r5, #8]
 8007f40:	60eb      	str	r3, [r5, #12]
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	6128      	str	r0, [r5, #16]
 8007f46:	7923      	ldrb	r3, [r4, #4]
 8007f48:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007f50:	4a8f      	ldr	r2, [pc, #572]	; (8008190 <problem_fetch+0x6800>)
 8007f52:	6810      	ldr	r0, [r2, #0]
 8007f54:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	220b      	movs	r2, #11
 8007f5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,B,E,C,D,B,D,A");
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	33a4      	adds	r3, #164	; 0xa4
 8007f60:	4a8c      	ldr	r2, [pc, #560]	; (8008194 <problem_fetch+0x6804>)
 8007f62:	461d      	mov	r5, r3
 8007f64:	4614      	mov	r4, r2
 8007f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f68:	6028      	str	r0, [r5, #0]
 8007f6a:	6069      	str	r1, [r5, #4]
 8007f6c:	60aa      	str	r2, [r5, #8]
 8007f6e:	60eb      	str	r3, [r5, #12]
 8007f70:	6820      	ldr	r0, [r4, #0]
 8007f72:	6128      	str	r0, [r5, #16]
 8007f74:	88a3      	ldrh	r3, [r4, #4]
 8007f76:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,9,8,10,12,13,15,15,18,18");
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4a86      	ldr	r2, [pc, #536]	; (8008198 <problem_fetch+0x6808>)
 8007f7e:	461d      	mov	r5, r3
 8007f80:	4614      	mov	r4, r2
 8007f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f84:	6028      	str	r0, [r5, #0]
 8007f86:	6069      	str	r1, [r5, #4]
 8007f88:	60aa      	str	r2, [r5, #8]
 8007f8a:	60eb      	str	r3, [r5, #12]
 8007f8c:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007f8e:	6128      	str	r0, [r5, #16]
 8007f90:	6169      	str	r1, [r5, #20]
 8007f92:	61aa      	str	r2, [r5, #24]
 8007f94:	7823      	ldrb	r3, [r4, #0]
 8007f96:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e,e");
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007f9e:	4a7f      	ldr	r2, [pc, #508]	; (800819c <problem_fetch+0x680c>)
 8007fa0:	461d      	mov	r5, r3
 8007fa2:	4614      	mov	r4, r2
 8007fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fa6:	6028      	str	r0, [r5, #0]
 8007fa8:	6069      	str	r1, [r5, #4]
 8007faa:	60aa      	str	r2, [r5, #8]
 8007fac:	60eb      	str	r3, [r5, #12]
 8007fae:	6820      	ldr	r0, [r4, #0]
 8007fb0:	6128      	str	r0, [r5, #16]
 8007fb2:	88a3      	ldrh	r3, [r4, #4]
 8007fb4:	82ab      	strh	r3, [r5, #20]
			break;
 8007fb6:	f014 bc1b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 172 :
			strcpy(p->name,"PINCH THE PINCH");
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007fc0:	4a77      	ldr	r2, [pc, #476]	; (80081a0 <problem_fetch+0x6810>)
 8007fc2:	461c      	mov	r4, r3
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007fc8:	6020      	str	r0, [r4, #0]
 8007fca:	6061      	str	r1, [r4, #4]
 8007fcc:	60a2      	str	r2, [r4, #8]
 8007fce:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007fd6:	4a69      	ldr	r2, [pc, #420]	; (800817c <problem_fetch+0x67ec>)
 8007fd8:	8811      	ldrh	r1, [r2, #0]
 8007fda:	7892      	ldrb	r2, [r2, #2]
 8007fdc:	8019      	strh	r1, [r3, #0]
 8007fde:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D");
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	33a4      	adds	r3, #164	; 0xa4
 8007fea:	496e      	ldr	r1, [pc, #440]	; (80081a4 <problem_fetch+0x6814>)
 8007fec:	461a      	mov	r2, r3
 8007fee:	460b      	mov	r3, r1
 8007ff0:	cb03      	ldmia	r3!, {r0, r1}
 8007ff2:	6010      	str	r0, [r2, #0]
 8007ff4:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,14,18");
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	496b      	ldr	r1, [pc, #428]	; (80081a8 <problem_fetch+0x6818>)
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	460b      	mov	r3, r1
 8008000:	cb03      	ldmia	r3!, {r0, r1}
 8008002:	6010      	str	r0, [r2, #0]
 8008004:	6051      	str	r1, [r2, #4]
 8008006:	8819      	ldrh	r1, [r3, #0]
 8008008:	789b      	ldrb	r3, [r3, #2]
 800800a:	8111      	strh	r1, [r2, #8]
 800800c:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008014:	4965      	ldr	r1, [pc, #404]	; (80081ac <problem_fetch+0x681c>)
 8008016:	461a      	mov	r2, r3
 8008018:	460b      	mov	r3, r1
 800801a:	cb03      	ldmia	r3!, {r0, r1}
 800801c:	6010      	str	r0, [r2, #0]
 800801e:	6051      	str	r1, [r2, #4]
			break;
 8008020:	f014 bbe6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 173 :
			strcpy(p->name,"OLD SCHOOL BLACK");
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800802a:	4a61      	ldr	r2, [pc, #388]	; (80081b0 <problem_fetch+0x6820>)
 800802c:	461d      	mov	r5, r3
 800802e:	4614      	mov	r4, r2
 8008030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008032:	6028      	str	r0, [r5, #0]
 8008034:	6069      	str	r1, [r5, #4]
 8008036:	60aa      	str	r2, [r5, #8]
 8008038:	60eb      	str	r3, [r5, #12]
 800803a:	7823      	ldrb	r3, [r4, #0]
 800803c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008044:	4a4d      	ldr	r2, [pc, #308]	; (800817c <problem_fetch+0x67ec>)
 8008046:	8811      	ldrh	r1, [r2, #0]
 8008048:	7892      	ldrb	r2, [r2, #2]
 800804a:	8019      	strh	r1, [r3, #0]
 800804c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2206      	movs	r2, #6
 8008052:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,G,G,D");
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	33a4      	adds	r3, #164	; 0xa4
 8008058:	4a56      	ldr	r2, [pc, #344]	; (80081b4 <problem_fetch+0x6824>)
 800805a:	461c      	mov	r4, r3
 800805c:	4613      	mov	r3, r2
 800805e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008060:	6020      	str	r0, [r4, #0]
 8008062:	6061      	str	r1, [r4, #4]
 8008064:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,17,18");
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3304      	adds	r3, #4
 800806a:	4a53      	ldr	r2, [pc, #332]	; (80081b8 <problem_fetch+0x6828>)
 800806c:	461c      	mov	r4, r3
 800806e:	4615      	mov	r5, r2
 8008070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	6061      	str	r1, [r4, #4]
 8008076:	60a2      	str	r2, [r4, #8]
 8008078:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008080:	4a4e      	ldr	r2, [pc, #312]	; (80081bc <problem_fetch+0x682c>)
 8008082:	461c      	mov	r4, r3
 8008084:	4613      	mov	r3, r2
 8008086:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008088:	6020      	str	r0, [r4, #0]
 800808a:	6061      	str	r1, [r4, #4]
 800808c:	60a2      	str	r2, [r4, #8]
			break;
 800808e:	f014 bbaf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 174 :
			strcpy(p->name,"MÖRCSÖG");
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008098:	4949      	ldr	r1, [pc, #292]	; (80081c0 <problem_fetch+0x6830>)
 800809a:	461a      	mov	r2, r3
 800809c:	460b      	mov	r3, r1
 800809e:	cb03      	ldmia	r3!, {r0, r1}
 80080a0:	6010      	str	r0, [r2, #0]
 80080a2:	6051      	str	r1, [r2, #4]
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80080ae:	4a45      	ldr	r2, [pc, #276]	; (80081c4 <problem_fetch+0x6834>)
 80080b0:	8811      	ldrh	r1, [r2, #0]
 80080b2:	7892      	ldrb	r2, [r2, #2]
 80080b4:	8019      	strh	r1, [r3, #0]
 80080b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2206      	movs	r2, #6
 80080bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,G,D");
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	33a4      	adds	r3, #164	; 0xa4
 80080c2:	4a41      	ldr	r2, [pc, #260]	; (80081c8 <problem_fetch+0x6838>)
 80080c4:	461c      	mov	r4, r3
 80080c6:	4613      	mov	r3, r2
 80080c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080ca:	6020      	str	r0, [r4, #0]
 80080cc:	6061      	str	r1, [r4, #4]
 80080ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4a3d      	ldr	r2, [pc, #244]	; (80081cc <problem_fetch+0x683c>)
 80080d6:	461c      	mov	r4, r3
 80080d8:	4615      	mov	r5, r2
 80080da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080dc:	6020      	str	r0, [r4, #0]
 80080de:	6061      	str	r1, [r4, #4]
 80080e0:	60a2      	str	r2, [r4, #8]
 80080e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80080ea:	4a39      	ldr	r2, [pc, #228]	; (80081d0 <problem_fetch+0x6840>)
 80080ec:	461c      	mov	r4, r3
 80080ee:	4613      	mov	r3, r2
 80080f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080f2:	6020      	str	r0, [r4, #0]
 80080f4:	6061      	str	r1, [r4, #4]
 80080f6:	60a2      	str	r2, [r4, #8]
			break;
 80080f8:	f014 bb7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 175 :
			strcpy(p->name,"BLACKSWING");
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008102:	4934      	ldr	r1, [pc, #208]	; (80081d4 <problem_fetch+0x6844>)
 8008104:	461a      	mov	r2, r3
 8008106:	460b      	mov	r3, r1
 8008108:	cb03      	ldmia	r3!, {r0, r1}
 800810a:	6010      	str	r0, [r2, #0]
 800810c:	6051      	str	r1, [r2, #4]
 800810e:	8819      	ldrh	r1, [r3, #0]
 8008110:	789b      	ldrb	r3, [r3, #2]
 8008112:	8111      	strh	r1, [r2, #8]
 8008114:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800811c:	4a2e      	ldr	r2, [pc, #184]	; (80081d8 <problem_fetch+0x6848>)
 800811e:	8811      	ldrh	r1, [r2, #0]
 8008120:	7892      	ldrb	r2, [r2, #2]
 8008122:	8019      	strh	r1, [r3, #0]
 8008124:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2207      	movs	r2, #7
 800812a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,D,C,E,D");
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	33a4      	adds	r3, #164	; 0xa4
 8008130:	4a2a      	ldr	r2, [pc, #168]	; (80081dc <problem_fetch+0x684c>)
 8008132:	461c      	mov	r4, r3
 8008134:	4613      	mov	r3, r2
 8008136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008138:	6020      	str	r0, [r4, #0]
 800813a:	6061      	str	r1, [r4, #4]
 800813c:	60a2      	str	r2, [r4, #8]
 800813e:	881b      	ldrh	r3, [r3, #0]
 8008140:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,18");
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	3304      	adds	r3, #4
 8008146:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <problem_fetch+0x6850>)
 8008148:	461d      	mov	r5, r3
 800814a:	4614      	mov	r4, r2
 800814c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800814e:	6028      	str	r0, [r5, #0]
 8008150:	6069      	str	r1, [r5, #4]
 8008152:	60aa      	str	r2, [r5, #8]
 8008154:	60eb      	str	r3, [r5, #12]
 8008156:	8823      	ldrh	r3, [r4, #0]
 8008158:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008160:	4a20      	ldr	r2, [pc, #128]	; (80081e4 <problem_fetch+0x6854>)
 8008162:	461c      	mov	r4, r3
 8008164:	4613      	mov	r3, r2
 8008166:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008168:	6020      	str	r0, [r4, #0]
 800816a:	6061      	str	r1, [r4, #4]
 800816c:	60a2      	str	r2, [r4, #8]
 800816e:	881b      	ldrh	r3, [r3, #0]
 8008170:	81a3      	strh	r3, [r4, #12]
			break;
 8008172:	f014 bb3d 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8008176:	bf00      	nop
 8008178:	08025dd4 	.word	0x08025dd4
 800817c:	08023b50 	.word	0x08023b50
 8008180:	08025de8 	.word	0x08025de8
 8008184:	08025df4 	.word	0x08025df4
 8008188:	0802405c 	.word	0x0802405c
 800818c:	08025e04 	.word	0x08025e04
 8008190:	08023b90 	.word	0x08023b90
 8008194:	08025e1c 	.word	0x08025e1c
 8008198:	08025e34 	.word	0x08025e34
 800819c:	08025e54 	.word	0x08025e54
 80081a0:	08025e6c 	.word	0x08025e6c
 80081a4:	08025e7c 	.word	0x08025e7c
 80081a8:	08025e84 	.word	0x08025e84
 80081ac:	08023ce4 	.word	0x08023ce4
 80081b0:	08025e90 	.word	0x08025e90
 80081b4:	08025ea4 	.word	0x08025ea4
 80081b8:	08025eb0 	.word	0x08025eb0
 80081bc:	08023b70 	.word	0x08023b70
 80081c0:	08025ec0 	.word	0x08025ec0
 80081c4:	08024288 	.word	0x08024288
 80081c8:	08025ecc 	.word	0x08025ecc
 80081cc:	08025ed8 	.word	0x08025ed8
 80081d0:	08023f2c 	.word	0x08023f2c
 80081d4:	08025ee8 	.word	0x08025ee8
 80081d8:	08025ef4 	.word	0x08025ef4
 80081dc:	08025ef8 	.word	0x08025ef8
 80081e0:	08025f08 	.word	0x08025f08
 80081e4:	08023c08 	.word	0x08023c08
		case 176 :
			strcpy(p->name,"FREAKING MAIMED");
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80081ee:	4aad      	ldr	r2, [pc, #692]	; (80084a4 <problem_fetch+0x6b14>)
 80081f0:	461c      	mov	r4, r3
 80081f2:	4615      	mov	r5, r2
 80081f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081f6:	6020      	str	r0, [r4, #0]
 80081f8:	6061      	str	r1, [r4, #4]
 80081fa:	60a2      	str	r2, [r4, #8]
 80081fc:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008204:	4aa8      	ldr	r2, [pc, #672]	; (80084a8 <problem_fetch+0x6b18>)
 8008206:	8811      	ldrh	r1, [r2, #0]
 8008208:	7892      	ldrb	r2, [r2, #2]
 800820a:	8019      	strh	r1, [r3, #0]
 800820c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2207      	movs	r2, #7
 8008212:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,C,G,H,I");
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	33a4      	adds	r3, #164	; 0xa4
 8008218:	4aa4      	ldr	r2, [pc, #656]	; (80084ac <problem_fetch+0x6b1c>)
 800821a:	461c      	mov	r4, r3
 800821c:	4613      	mov	r3, r2
 800821e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008220:	6020      	str	r0, [r4, #0]
 8008222:	6061      	str	r1, [r4, #4]
 8008224:	60a2      	str	r2, [r4, #8]
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,13,17,16,18");
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3304      	adds	r3, #4
 800822e:	4aa0      	ldr	r2, [pc, #640]	; (80084b0 <problem_fetch+0x6b20>)
 8008230:	461d      	mov	r5, r3
 8008232:	4614      	mov	r4, r2
 8008234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008236:	6028      	str	r0, [r5, #0]
 8008238:	6069      	str	r1, [r5, #4]
 800823a:	60aa      	str	r2, [r5, #8]
 800823c:	60eb      	str	r3, [r5, #12]
 800823e:	8823      	ldrh	r3, [r4, #0]
 8008240:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008248:	4a9a      	ldr	r2, [pc, #616]	; (80084b4 <problem_fetch+0x6b24>)
 800824a:	461c      	mov	r4, r3
 800824c:	4613      	mov	r3, r2
 800824e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008250:	6020      	str	r0, [r4, #0]
 8008252:	6061      	str	r1, [r4, #4]
 8008254:	60a2      	str	r2, [r4, #8]
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	81a3      	strh	r3, [r4, #12]
			break;
 800825a:	f014 bac9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 177 :
			strcpy(p->name,"CAN’T REMEMBER THE NAME");
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008264:	4a94      	ldr	r2, [pc, #592]	; (80084b8 <problem_fetch+0x6b28>)
 8008266:	461d      	mov	r5, r3
 8008268:	4614      	mov	r4, r2
 800826a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800826c:	6028      	str	r0, [r5, #0]
 800826e:	6069      	str	r1, [r5, #4]
 8008270:	60aa      	str	r2, [r5, #8]
 8008272:	60eb      	str	r3, [r5, #12]
 8008274:	cc03      	ldmia	r4!, {r0, r1}
 8008276:	6128      	str	r0, [r5, #16]
 8008278:	6169      	str	r1, [r5, #20]
 800827a:	8823      	ldrh	r3, [r4, #0]
 800827c:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008284:	4a8d      	ldr	r2, [pc, #564]	; (80084bc <problem_fetch+0x6b2c>)
 8008286:	8811      	ldrh	r1, [r2, #0]
 8008288:	7892      	ldrb	r2, [r2, #2]
 800828a:	8019      	strh	r1, [r3, #0]
 800828c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,I,G,D,E,A");
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	33a4      	adds	r3, #164	; 0xa4
 8008298:	4a89      	ldr	r2, [pc, #548]	; (80084c0 <problem_fetch+0x6b30>)
 800829a:	461c      	mov	r4, r3
 800829c:	4613      	mov	r3, r2
 800829e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082a0:	6020      	str	r0, [r4, #0]
 80082a2:	6061      	str	r1, [r4, #4]
 80082a4:	60a2      	str	r2, [r4, #8]
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,6,11,16,18");
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4a85      	ldr	r2, [pc, #532]	; (80084c4 <problem_fetch+0x6b34>)
 80082b0:	461d      	mov	r5, r3
 80082b2:	4614      	mov	r4, r2
 80082b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082b6:	6028      	str	r0, [r5, #0]
 80082b8:	6069      	str	r1, [r5, #4]
 80082ba:	60aa      	str	r2, [r5, #8]
 80082bc:	60eb      	str	r3, [r5, #12]
 80082be:	8823      	ldrh	r3, [r4, #0]
 80082c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80082c8:	4a7f      	ldr	r2, [pc, #508]	; (80084c8 <problem_fetch+0x6b38>)
 80082ca:	461c      	mov	r4, r3
 80082cc:	4613      	mov	r3, r2
 80082ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082d0:	6020      	str	r0, [r4, #0]
 80082d2:	6061      	str	r1, [r4, #4]
 80082d4:	60a2      	str	r2, [r4, #8]
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	81a3      	strh	r3, [r4, #12]
			break;
 80082da:	f014 ba89 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 178 :
			strcpy(p->name,"FOUR");
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80082e4:	4a79      	ldr	r2, [pc, #484]	; (80084cc <problem_fetch+0x6b3c>)
 80082e6:	6810      	ldr	r0, [r2, #0]
 80082e8:	6018      	str	r0, [r3, #0]
 80082ea:	7912      	ldrb	r2, [r2, #4]
 80082ec:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80082f4:	4a71      	ldr	r2, [pc, #452]	; (80084bc <problem_fetch+0x6b2c>)
 80082f6:	8811      	ldrh	r1, [r2, #0]
 80082f8:	7892      	ldrb	r2, [r2, #2]
 80082fa:	8019      	strh	r1, [r3, #0]
 80082fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2207      	movs	r2, #7
 8008302:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,I,H,I");
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	33a4      	adds	r3, #164	; 0xa4
 8008308:	4a71      	ldr	r2, [pc, #452]	; (80084d0 <problem_fetch+0x6b40>)
 800830a:	461c      	mov	r4, r3
 800830c:	4613      	mov	r3, r2
 800830e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008310:	6020      	str	r0, [r4, #0]
 8008312:	6061      	str	r1, [r4, #4]
 8008314:	60a2      	str	r2, [r4, #8]
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,11,14,16,18");
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	3304      	adds	r3, #4
 800831e:	4a6d      	ldr	r2, [pc, #436]	; (80084d4 <problem_fetch+0x6b44>)
 8008320:	461d      	mov	r5, r3
 8008322:	4614      	mov	r4, r2
 8008324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008326:	6028      	str	r0, [r5, #0]
 8008328:	6069      	str	r1, [r5, #4]
 800832a:	60aa      	str	r2, [r5, #8]
 800832c:	60eb      	str	r3, [r5, #12]
 800832e:	8823      	ldrh	r3, [r4, #0]
 8008330:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008338:	4a67      	ldr	r2, [pc, #412]	; (80084d8 <problem_fetch+0x6b48>)
 800833a:	461c      	mov	r4, r3
 800833c:	4613      	mov	r3, r2
 800833e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008340:	6020      	str	r0, [r4, #0]
 8008342:	6061      	str	r1, [r4, #4]
 8008344:	60a2      	str	r2, [r4, #8]
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	81a3      	strh	r3, [r4, #12]
			break;
 800834a:	f014 ba51 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 179 :
			strcpy(p->name,"SALMON SNAKE");
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008354:	4a61      	ldr	r2, [pc, #388]	; (80084dc <problem_fetch+0x6b4c>)
 8008356:	461c      	mov	r4, r3
 8008358:	4613      	mov	r3, r2
 800835a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800835c:	6020      	str	r0, [r4, #0]
 800835e:	6061      	str	r1, [r4, #4]
 8008360:	60a2      	str	r2, [r4, #8]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800836c:	4a53      	ldr	r2, [pc, #332]	; (80084bc <problem_fetch+0x6b2c>)
 800836e:	8811      	ldrh	r1, [r2, #0]
 8008370:	7892      	ldrb	r2, [r2, #2]
 8008372:	8019      	strh	r1, [r3, #0]
 8008374:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2205      	movs	r2, #5
 800837a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,D,A");
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	33a4      	adds	r3, #164	; 0xa4
 8008380:	4957      	ldr	r1, [pc, #348]	; (80084e0 <problem_fetch+0x6b50>)
 8008382:	461a      	mov	r2, r3
 8008384:	460b      	mov	r3, r1
 8008386:	cb03      	ldmia	r3!, {r0, r1}
 8008388:	6010      	str	r0, [r2, #0]
 800838a:	6051      	str	r1, [r2, #4]
 800838c:	881b      	ldrh	r3, [r3, #0]
 800838e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,11,15,18");
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	3304      	adds	r3, #4
 8008394:	4a53      	ldr	r2, [pc, #332]	; (80084e4 <problem_fetch+0x6b54>)
 8008396:	461c      	mov	r4, r3
 8008398:	4613      	mov	r3, r2
 800839a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800839c:	6020      	str	r0, [r4, #0]
 800839e:	6061      	str	r1, [r4, #4]
 80083a0:	60a2      	str	r2, [r4, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80083ac:	494e      	ldr	r1, [pc, #312]	; (80084e8 <problem_fetch+0x6b58>)
 80083ae:	461a      	mov	r2, r3
 80083b0:	460b      	mov	r3, r1
 80083b2:	cb03      	ldmia	r3!, {r0, r1}
 80083b4:	6010      	str	r0, [r2, #0]
 80083b6:	6051      	str	r1, [r2, #4]
 80083b8:	881b      	ldrh	r3, [r3, #0]
 80083ba:	8113      	strh	r3, [r2, #8]
			break;
 80083bc:	f014 ba18 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 180 :
			strcpy(p->name,"COSTA NEGRA");
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80083c6:	4a49      	ldr	r2, [pc, #292]	; (80084ec <problem_fetch+0x6b5c>)
 80083c8:	461c      	mov	r4, r3
 80083ca:	4613      	mov	r3, r2
 80083cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083ce:	6020      	str	r0, [r4, #0]
 80083d0:	6061      	str	r1, [r4, #4]
 80083d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80083da:	4a45      	ldr	r2, [pc, #276]	; (80084f0 <problem_fetch+0x6b60>)
 80083dc:	8811      	ldrh	r1, [r2, #0]
 80083de:	7892      	ldrb	r2, [r2, #2]
 80083e0:	8019      	strh	r1, [r3, #0]
 80083e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2209      	movs	r2, #9
 80083e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,I,G,I");
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	33a4      	adds	r3, #164	; 0xa4
 80083ee:	4a41      	ldr	r2, [pc, #260]	; (80084f4 <problem_fetch+0x6b64>)
 80083f0:	461d      	mov	r5, r3
 80083f2:	4614      	mov	r4, r2
 80083f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083f6:	6028      	str	r0, [r5, #0]
 80083f8:	6069      	str	r1, [r5, #4]
 80083fa:	60aa      	str	r2, [r5, #8]
 80083fc:	60eb      	str	r3, [r5, #12]
 80083fe:	8823      	ldrh	r3, [r4, #0]
 8008400:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,14,15,18");
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3304      	adds	r3, #4
 8008406:	4a3c      	ldr	r2, [pc, #240]	; (80084f8 <problem_fetch+0x6b68>)
 8008408:	461d      	mov	r5, r3
 800840a:	4614      	mov	r4, r2
 800840c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800840e:	6028      	str	r0, [r5, #0]
 8008410:	6069      	str	r1, [r5, #4]
 8008412:	60aa      	str	r2, [r5, #8]
 8008414:	60eb      	str	r3, [r5, #12]
 8008416:	cc03      	ldmia	r4!, {r0, r1}
 8008418:	6128      	str	r0, [r5, #16]
 800841a:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008422:	4a36      	ldr	r2, [pc, #216]	; (80084fc <problem_fetch+0x6b6c>)
 8008424:	461d      	mov	r5, r3
 8008426:	4614      	mov	r4, r2
 8008428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800842a:	6028      	str	r0, [r5, #0]
 800842c:	6069      	str	r1, [r5, #4]
 800842e:	60aa      	str	r2, [r5, #8]
 8008430:	60eb      	str	r3, [r5, #12]
 8008432:	8823      	ldrh	r3, [r4, #0]
 8008434:	822b      	strh	r3, [r5, #16]
			break;
 8008436:	f014 b9db 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 181 :
			strcpy(p->name,"LOPPULÄMPPÄ");
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008440:	4a2f      	ldr	r2, [pc, #188]	; (8008500 <problem_fetch+0x6b70>)
 8008442:	461c      	mov	r4, r3
 8008444:	4613      	mov	r3, r2
 8008446:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008448:	6020      	str	r0, [r4, #0]
 800844a:	6061      	str	r1, [r4, #4]
 800844c:	60a2      	str	r2, [r4, #8]
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008458:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <problem_fetch+0x6b74>)
 800845a:	6810      	ldr	r0, [r2, #0]
 800845c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2206      	movs	r2, #6
 8008462:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,G,I");
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	33a4      	adds	r3, #164	; 0xa4
 8008468:	4a27      	ldr	r2, [pc, #156]	; (8008508 <problem_fetch+0x6b78>)
 800846a:	461c      	mov	r4, r3
 800846c:	4613      	mov	r3, r2
 800846e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008470:	6020      	str	r0, [r4, #0]
 8008472:	6061      	str	r1, [r4, #4]
 8008474:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,17,18");
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	3304      	adds	r3, #4
 800847a:	4a24      	ldr	r2, [pc, #144]	; (800850c <problem_fetch+0x6b7c>)
 800847c:	461c      	mov	r4, r3
 800847e:	4615      	mov	r5, r2
 8008480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008482:	6020      	str	r0, [r4, #0]
 8008484:	6061      	str	r1, [r4, #4]
 8008486:	60a2      	str	r2, [r4, #8]
 8008488:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008490:	4a1f      	ldr	r2, [pc, #124]	; (8008510 <problem_fetch+0x6b80>)
 8008492:	461c      	mov	r4, r3
 8008494:	4613      	mov	r3, r2
 8008496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008498:	6020      	str	r0, [r4, #0]
 800849a:	6061      	str	r1, [r4, #4]
 800849c:	60a2      	str	r2, [r4, #8]
			break;
 800849e:	f014 b9a7 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80084a2:	bf00      	nop
 80084a4:	08025f1c 	.word	0x08025f1c
 80084a8:	080243c4 	.word	0x080243c4
 80084ac:	08025f2c 	.word	0x08025f2c
 80084b0:	08025f3c 	.word	0x08025f3c
 80084b4:	08023d18 	.word	0x08023d18
 80084b8:	08025f50 	.word	0x08025f50
 80084bc:	08023b50 	.word	0x08023b50
 80084c0:	08025f6c 	.word	0x08025f6c
 80084c4:	08025f7c 	.word	0x08025f7c
 80084c8:	08025f90 	.word	0x08025f90
 80084cc:	08025fa0 	.word	0x08025fa0
 80084d0:	08025fa8 	.word	0x08025fa8
 80084d4:	08025fb8 	.word	0x08025fb8
 80084d8:	08023c08 	.word	0x08023c08
 80084dc:	08025fcc 	.word	0x08025fcc
 80084e0:	08025fdc 	.word	0x08025fdc
 80084e4:	08025fe8 	.word	0x08025fe8
 80084e8:	0802405c 	.word	0x0802405c
 80084ec:	08025ff8 	.word	0x08025ff8
 80084f0:	08023c5c 	.word	0x08023c5c
 80084f4:	08026004 	.word	0x08026004
 80084f8:	08026018 	.word	0x08026018
 80084fc:	08024b74 	.word	0x08024b74
 8008500:	08026030 	.word	0x08026030
 8008504:	08023d30 	.word	0x08023d30
 8008508:	08026040 	.word	0x08026040
 800850c:	0802604c 	.word	0x0802604c
 8008510:	08023f2c 	.word	0x08023f2c
		case 182 :
			strcpy(p->name,"MEK");
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800851a:	4ac1      	ldr	r2, [pc, #772]	; (8008820 <problem_fetch+0x6e90>)
 800851c:	6810      	ldr	r0, [r2, #0]
 800851e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008526:	4abf      	ldr	r2, [pc, #764]	; (8008824 <problem_fetch+0x6e94>)
 8008528:	8811      	ldrh	r1, [r2, #0]
 800852a:	7892      	ldrb	r2, [r2, #2]
 800852c:	8019      	strh	r1, [r3, #0]
 800852e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2208      	movs	r2, #8
 8008534:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,B,D,G,E,I");
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	33a4      	adds	r3, #164	; 0xa4
 800853a:	4abb      	ldr	r2, [pc, #748]	; (8008828 <problem_fetch+0x6e98>)
 800853c:	461c      	mov	r4, r3
 800853e:	4615      	mov	r5, r2
 8008540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008542:	6020      	str	r0, [r4, #0]
 8008544:	6061      	str	r1, [r4, #4]
 8008546:	60a2      	str	r2, [r4, #8]
 8008548:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,13,11,6,7,4,16,18");
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3304      	adds	r3, #4
 800854e:	4ab7      	ldr	r2, [pc, #732]	; (800882c <problem_fetch+0x6e9c>)
 8008550:	461d      	mov	r5, r3
 8008552:	4614      	mov	r4, r2
 8008554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008556:	6028      	str	r0, [r5, #0]
 8008558:	6069      	str	r1, [r5, #4]
 800855a:	60aa      	str	r2, [r5, #8]
 800855c:	60eb      	str	r3, [r5, #12]
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	6128      	str	r0, [r5, #16]
 8008562:	7923      	ldrb	r3, [r4, #4]
 8008564:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,s,d,s,d,e");
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800856c:	4ab0      	ldr	r2, [pc, #704]	; (8008830 <problem_fetch+0x6ea0>)
 800856e:	461c      	mov	r4, r3
 8008570:	4615      	mov	r5, r2
 8008572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008574:	6020      	str	r0, [r4, #0]
 8008576:	6061      	str	r1, [r4, #4]
 8008578:	60a2      	str	r2, [r4, #8]
 800857a:	60e3      	str	r3, [r4, #12]
			break;
 800857c:	f014 b938 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 183 :
			strcpy(p->name,"5WL^4/(384EI)");
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008586:	4aab      	ldr	r2, [pc, #684]	; (8008834 <problem_fetch+0x6ea4>)
 8008588:	461c      	mov	r4, r3
 800858a:	4613      	mov	r3, r2
 800858c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800858e:	6020      	str	r0, [r4, #0]
 8008590:	6061      	str	r1, [r4, #4]
 8008592:	60a2      	str	r2, [r4, #8]
 8008594:	881b      	ldrh	r3, [r3, #0]
 8008596:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800859e:	4aa6      	ldr	r2, [pc, #664]	; (8008838 <problem_fetch+0x6ea8>)
 80085a0:	8811      	ldrh	r1, [r2, #0]
 80085a2:	7892      	ldrb	r2, [r2, #2]
 80085a4:	8019      	strh	r1, [r3, #0]
 80085a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2206      	movs	r2, #6
 80085ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,A,B,A");
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	33a4      	adds	r3, #164	; 0xa4
 80085b2:	4aa2      	ldr	r2, [pc, #648]	; (800883c <problem_fetch+0x6eac>)
 80085b4:	461c      	mov	r4, r3
 80085b6:	4613      	mov	r3, r2
 80085b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085ba:	6020      	str	r0, [r4, #0]
 80085bc:	6061      	str	r1, [r4, #4]
 80085be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4a9e      	ldr	r2, [pc, #632]	; (8008840 <problem_fetch+0x6eb0>)
 80085c6:	461c      	mov	r4, r3
 80085c8:	4615      	mov	r5, r2
 80085ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085cc:	6020      	str	r0, [r4, #0]
 80085ce:	6061      	str	r1, [r4, #4]
 80085d0:	60a2      	str	r2, [r4, #8]
 80085d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80085da:	4a9a      	ldr	r2, [pc, #616]	; (8008844 <problem_fetch+0x6eb4>)
 80085dc:	461c      	mov	r4, r3
 80085de:	4613      	mov	r3, r2
 80085e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80085e2:	6020      	str	r0, [r4, #0]
 80085e4:	6061      	str	r1, [r4, #4]
 80085e6:	60a2      	str	r2, [r4, #8]
			break;
 80085e8:	f014 b902 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 184 :
			strcpy(p->name,"ATLANTIC SEA NETTLE");
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80085f2:	4a95      	ldr	r2, [pc, #596]	; (8008848 <problem_fetch+0x6eb8>)
 80085f4:	461d      	mov	r5, r3
 80085f6:	4614      	mov	r4, r2
 80085f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085fa:	6028      	str	r0, [r5, #0]
 80085fc:	6069      	str	r1, [r5, #4]
 80085fe:	60aa      	str	r2, [r5, #8]
 8008600:	60eb      	str	r3, [r5, #12]
 8008602:	6820      	ldr	r0, [r4, #0]
 8008604:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800860c:	4a8f      	ldr	r2, [pc, #572]	; (800884c <problem_fetch+0x6ebc>)
 800860e:	6810      	ldr	r0, [r2, #0]
 8008610:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2206      	movs	r2, #6
 8008616:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,B,D,A");
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	33a4      	adds	r3, #164	; 0xa4
 800861c:	4a8c      	ldr	r2, [pc, #560]	; (8008850 <problem_fetch+0x6ec0>)
 800861e:	461c      	mov	r4, r3
 8008620:	4613      	mov	r3, r2
 8008622:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008624:	6020      	str	r0, [r4, #0]
 8008626:	6061      	str	r1, [r4, #4]
 8008628:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,12,15,18");
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	3304      	adds	r3, #4
 800862e:	4a89      	ldr	r2, [pc, #548]	; (8008854 <problem_fetch+0x6ec4>)
 8008630:	461c      	mov	r4, r3
 8008632:	4615      	mov	r5, r2
 8008634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	6061      	str	r1, [r4, #4]
 800863a:	60a2      	str	r2, [r4, #8]
 800863c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008644:	4a7f      	ldr	r2, [pc, #508]	; (8008844 <problem_fetch+0x6eb4>)
 8008646:	461c      	mov	r4, r3
 8008648:	4613      	mov	r3, r2
 800864a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800864c:	6020      	str	r0, [r4, #0]
 800864e:	6061      	str	r1, [r4, #4]
 8008650:	60a2      	str	r2, [r4, #8]
			break;
 8008652:	f014 b8cd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 185 :
			strcpy(p->name,"WOA");
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800865c:	4a7e      	ldr	r2, [pc, #504]	; (8008858 <problem_fetch+0x6ec8>)
 800865e:	6810      	ldr	r0, [r2, #0]
 8008660:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008668:	4a6e      	ldr	r2, [pc, #440]	; (8008824 <problem_fetch+0x6e94>)
 800866a:	8811      	ldrh	r1, [r2, #0]
 800866c:	7892      	ldrb	r2, [r2, #2]
 800866e:	8019      	strh	r1, [r3, #0]
 8008670:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2207      	movs	r2, #7
 8008676:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,F,G,I");
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	33a4      	adds	r3, #164	; 0xa4
 800867c:	4a77      	ldr	r2, [pc, #476]	; (800885c <problem_fetch+0x6ecc>)
 800867e:	461c      	mov	r4, r3
 8008680:	4613      	mov	r3, r2
 8008682:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008684:	6020      	str	r0, [r4, #0]
 8008686:	6061      	str	r1, [r4, #4]
 8008688:	60a2      	str	r2, [r4, #8]
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,13,15,18");
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	4a73      	ldr	r2, [pc, #460]	; (8008860 <problem_fetch+0x6ed0>)
 8008694:	461d      	mov	r5, r3
 8008696:	4614      	mov	r4, r2
 8008698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800869a:	6028      	str	r0, [r5, #0]
 800869c:	6069      	str	r1, [r5, #4]
 800869e:	60aa      	str	r2, [r5, #8]
 80086a0:	60eb      	str	r3, [r5, #12]
 80086a2:	8823      	ldrh	r3, [r4, #0]
 80086a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80086ac:	4a6d      	ldr	r2, [pc, #436]	; (8008864 <problem_fetch+0x6ed4>)
 80086ae:	461c      	mov	r4, r3
 80086b0:	4613      	mov	r3, r2
 80086b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086b4:	6020      	str	r0, [r4, #0]
 80086b6:	6061      	str	r1, [r4, #4]
 80086b8:	60a2      	str	r2, [r4, #8]
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	81a3      	strh	r3, [r4, #12]
			break;
 80086be:	f014 b897 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 186 :
			strcpy(p->name,"GJ2");
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80086c8:	4a67      	ldr	r2, [pc, #412]	; (8008868 <problem_fetch+0x6ed8>)
 80086ca:	6810      	ldr	r0, [r2, #0]
 80086cc:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80086d4:	4a65      	ldr	r2, [pc, #404]	; (800886c <problem_fetch+0x6edc>)
 80086d6:	6810      	ldr	r0, [r2, #0]
 80086d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2207      	movs	r2, #7
 80086de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,F,C,D,A");
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	33a4      	adds	r3, #164	; 0xa4
 80086e4:	4a62      	ldr	r2, [pc, #392]	; (8008870 <problem_fetch+0x6ee0>)
 80086e6:	461c      	mov	r4, r3
 80086e8:	4613      	mov	r3, r2
 80086ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086ec:	6020      	str	r0, [r4, #0]
 80086ee:	6061      	str	r1, [r4, #4]
 80086f0:	60a2      	str	r2, [r4, #8]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,15,18");
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	3304      	adds	r3, #4
 80086fa:	4a5e      	ldr	r2, [pc, #376]	; (8008874 <problem_fetch+0x6ee4>)
 80086fc:	461d      	mov	r5, r3
 80086fe:	4614      	mov	r4, r2
 8008700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008702:	6028      	str	r0, [r5, #0]
 8008704:	6069      	str	r1, [r5, #4]
 8008706:	60aa      	str	r2, [r5, #8]
 8008708:	60eb      	str	r3, [r5, #12]
 800870a:	8823      	ldrh	r3, [r4, #0]
 800870c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008714:	4a53      	ldr	r2, [pc, #332]	; (8008864 <problem_fetch+0x6ed4>)
 8008716:	461c      	mov	r4, r3
 8008718:	4613      	mov	r3, r2
 800871a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800871c:	6020      	str	r0, [r4, #0]
 800871e:	6061      	str	r1, [r4, #4]
 8008720:	60a2      	str	r2, [r4, #8]
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	81a3      	strh	r3, [r4, #12]
			break;
 8008726:	f014 b863 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 187 :
			strcpy(p->name,"CHEESE AND PICKLE");
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008730:	4a51      	ldr	r2, [pc, #324]	; (8008878 <problem_fetch+0x6ee8>)
 8008732:	461d      	mov	r5, r3
 8008734:	4614      	mov	r4, r2
 8008736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008738:	6028      	str	r0, [r5, #0]
 800873a:	6069      	str	r1, [r5, #4]
 800873c:	60aa      	str	r2, [r5, #8]
 800873e:	60eb      	str	r3, [r5, #12]
 8008740:	8823      	ldrh	r3, [r4, #0]
 8008742:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800874a:	4a40      	ldr	r2, [pc, #256]	; (800884c <problem_fetch+0x6ebc>)
 800874c:	6810      	ldr	r0, [r2, #0]
 800874e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2207      	movs	r2, #7
 8008754:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,A,E,A");
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	33a4      	adds	r3, #164	; 0xa4
 800875a:	4a48      	ldr	r2, [pc, #288]	; (800887c <problem_fetch+0x6eec>)
 800875c:	461c      	mov	r4, r3
 800875e:	4613      	mov	r3, r2
 8008760:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008762:	6020      	str	r0, [r4, #0]
 8008764:	6061      	str	r1, [r4, #4]
 8008766:	60a2      	str	r2, [r4, #8]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,16,18");
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	4a43      	ldr	r2, [pc, #268]	; (8008880 <problem_fetch+0x6ef0>)
 8008772:	461d      	mov	r5, r3
 8008774:	4614      	mov	r4, r2
 8008776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008778:	6028      	str	r0, [r5, #0]
 800877a:	6069      	str	r1, [r5, #4]
 800877c:	60aa      	str	r2, [r5, #8]
 800877e:	60eb      	str	r3, [r5, #12]
 8008780:	8823      	ldrh	r3, [r4, #0]
 8008782:	78a2      	ldrb	r2, [r4, #2]
 8008784:	822b      	strh	r3, [r5, #16]
 8008786:	4613      	mov	r3, r2
 8008788:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008790:	4a34      	ldr	r2, [pc, #208]	; (8008864 <problem_fetch+0x6ed4>)
 8008792:	461c      	mov	r4, r3
 8008794:	4613      	mov	r3, r2
 8008796:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008798:	6020      	str	r0, [r4, #0]
 800879a:	6061      	str	r1, [r4, #4]
 800879c:	60a2      	str	r2, [r4, #8]
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	81a3      	strh	r3, [r4, #12]
			break;
 80087a2:	f014 b825 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 188 :
			strcpy(p->name,"A MATCH MADE IN HEAVEN");
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80087ac:	4a35      	ldr	r2, [pc, #212]	; (8008884 <problem_fetch+0x6ef4>)
 80087ae:	461c      	mov	r4, r3
 80087b0:	4615      	mov	r5, r2
 80087b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b4:	6020      	str	r0, [r4, #0]
 80087b6:	6061      	str	r1, [r4, #4]
 80087b8:	60a2      	str	r2, [r4, #8]
 80087ba:	60e3      	str	r3, [r4, #12]
 80087bc:	6828      	ldr	r0, [r5, #0]
 80087be:	6120      	str	r0, [r4, #16]
 80087c0:	88ab      	ldrh	r3, [r5, #4]
 80087c2:	79aa      	ldrb	r2, [r5, #6]
 80087c4:	82a3      	strh	r3, [r4, #20]
 80087c6:	4613      	mov	r3, r2
 80087c8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7B+");
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80087d0:	4a2d      	ldr	r2, [pc, #180]	; (8008888 <problem_fetch+0x6ef8>)
 80087d2:	6810      	ldr	r0, [r2, #0]
 80087d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2205      	movs	r2, #5
 80087da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,D,D");
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	33a4      	adds	r3, #164	; 0xa4
 80087e0:	492a      	ldr	r1, [pc, #168]	; (800888c <problem_fetch+0x6efc>)
 80087e2:	461a      	mov	r2, r3
 80087e4:	460b      	mov	r3, r1
 80087e6:	cb03      	ldmia	r3!, {r0, r1}
 80087e8:	6010      	str	r0, [r2, #0]
 80087ea:	6051      	str	r1, [r2, #4]
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,11,15,18");
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4a26      	ldr	r2, [pc, #152]	; (8008890 <problem_fetch+0x6f00>)
 80087f6:	461c      	mov	r4, r3
 80087f8:	4613      	mov	r3, r2
 80087fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087fc:	6020      	str	r0, [r4, #0]
 80087fe:	6061      	str	r1, [r4, #4]
 8008800:	60a2      	str	r2, [r4, #8]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800880c:	4921      	ldr	r1, [pc, #132]	; (8008894 <problem_fetch+0x6f04>)
 800880e:	461a      	mov	r2, r3
 8008810:	460b      	mov	r3, r1
 8008812:	cb03      	ldmia	r3!, {r0, r1}
 8008814:	6010      	str	r0, [r2, #0]
 8008816:	6051      	str	r1, [r2, #4]
 8008818:	881b      	ldrh	r3, [r3, #0]
 800881a:	8113      	strh	r3, [r2, #8]
			break;
 800881c:	f013 bfe8 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8008820:	0802605c 	.word	0x0802605c
 8008824:	08023b50 	.word	0x08023b50
 8008828:	08026060 	.word	0x08026060
 800882c:	08026070 	.word	0x08026070
 8008830:	08026088 	.word	0x08026088
 8008834:	08026098 	.word	0x08026098
 8008838:	080243c4 	.word	0x080243c4
 800883c:	080260a8 	.word	0x080260a8
 8008840:	08025ed8 	.word	0x08025ed8
 8008844:	08023f2c 	.word	0x08023f2c
 8008848:	080260b4 	.word	0x080260b4
 800884c:	08023c28 	.word	0x08023c28
 8008850:	080260c8 	.word	0x080260c8
 8008854:	080260d4 	.word	0x080260d4
 8008858:	080260e4 	.word	0x080260e4
 800885c:	080260e8 	.word	0x080260e8
 8008860:	080260f8 	.word	0x080260f8
 8008864:	08023d18 	.word	0x08023d18
 8008868:	0802610c 	.word	0x0802610c
 800886c:	08023b90 	.word	0x08023b90
 8008870:	08026110 	.word	0x08026110
 8008874:	08026120 	.word	0x08026120
 8008878:	08026134 	.word	0x08026134
 800887c:	08026148 	.word	0x08026148
 8008880:	08026158 	.word	0x08026158
 8008884:	0802616c 	.word	0x0802616c
 8008888:	08023ccc 	.word	0x08023ccc
 800888c:	08026184 	.word	0x08026184
 8008890:	08026190 	.word	0x08026190
 8008894:	0802405c 	.word	0x0802405c
		case 189 :
			strcpy(p->name,"DUDDY QUALIFIED");
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800889e:	4ac1      	ldr	r2, [pc, #772]	; (8008ba4 <problem_fetch+0x7214>)
 80088a0:	461c      	mov	r4, r3
 80088a2:	4615      	mov	r5, r2
 80088a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088a6:	6020      	str	r0, [r4, #0]
 80088a8:	6061      	str	r1, [r4, #4]
 80088aa:	60a2      	str	r2, [r4, #8]
 80088ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80088b4:	4abc      	ldr	r2, [pc, #752]	; (8008ba8 <problem_fetch+0x7218>)
 80088b6:	6810      	ldr	r0, [r2, #0]
 80088b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2207      	movs	r2, #7
 80088be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D,E,I");
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	33a4      	adds	r3, #164	; 0xa4
 80088c4:	4ab9      	ldr	r2, [pc, #740]	; (8008bac <problem_fetch+0x721c>)
 80088c6:	461c      	mov	r4, r3
 80088c8:	4613      	mov	r3, r2
 80088ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088cc:	6020      	str	r0, [r4, #0]
 80088ce:	6061      	str	r1, [r4, #4]
 80088d0:	60a2      	str	r2, [r4, #8]
 80088d2:	881b      	ldrh	r3, [r3, #0]
 80088d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,14,15,16,18");
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	3304      	adds	r3, #4
 80088da:	4ab5      	ldr	r2, [pc, #724]	; (8008bb0 <problem_fetch+0x7220>)
 80088dc:	461d      	mov	r5, r3
 80088de:	4614      	mov	r4, r2
 80088e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088e2:	6028      	str	r0, [r5, #0]
 80088e4:	6069      	str	r1, [r5, #4]
 80088e6:	60aa      	str	r2, [r5, #8]
 80088e8:	60eb      	str	r3, [r5, #12]
 80088ea:	8823      	ldrh	r3, [r4, #0]
 80088ec:	78a2      	ldrb	r2, [r4, #2]
 80088ee:	822b      	strh	r3, [r5, #16]
 80088f0:	4613      	mov	r3, r2
 80088f2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80088fa:	4aae      	ldr	r2, [pc, #696]	; (8008bb4 <problem_fetch+0x7224>)
 80088fc:	461c      	mov	r4, r3
 80088fe:	4613      	mov	r3, r2
 8008900:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008902:	6020      	str	r0, [r4, #0]
 8008904:	6061      	str	r1, [r4, #4]
 8008906:	60a2      	str	r2, [r4, #8]
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	81a3      	strh	r3, [r4, #12]
			break;
 800890c:	f013 bf70 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 190 :
			strcpy(p->name,"EM'S BUNNY");
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008916:	49a8      	ldr	r1, [pc, #672]	; (8008bb8 <problem_fetch+0x7228>)
 8008918:	461a      	mov	r2, r3
 800891a:	460b      	mov	r3, r1
 800891c:	cb03      	ldmia	r3!, {r0, r1}
 800891e:	6010      	str	r0, [r2, #0]
 8008920:	6051      	str	r1, [r2, #4]
 8008922:	8819      	ldrh	r1, [r3, #0]
 8008924:	789b      	ldrb	r3, [r3, #2]
 8008926:	8111      	strh	r1, [r2, #8]
 8008928:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008930:	4aa2      	ldr	r2, [pc, #648]	; (8008bbc <problem_fetch+0x722c>)
 8008932:	8811      	ldrh	r1, [r2, #0]
 8008934:	7892      	ldrb	r2, [r2, #2]
 8008936:	8019      	strh	r1, [r3, #0]
 8008938:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2206      	movs	r2, #6
 800893e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,I,E,I");
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	33a4      	adds	r3, #164	; 0xa4
 8008944:	4a9e      	ldr	r2, [pc, #632]	; (8008bc0 <problem_fetch+0x7230>)
 8008946:	461c      	mov	r4, r3
 8008948:	4613      	mov	r3, r2
 800894a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800894c:	6020      	str	r0, [r4, #0]
 800894e:	6061      	str	r1, [r4, #4]
 8008950:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,8,10,14,18");
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	3304      	adds	r3, #4
 8008956:	4a9b      	ldr	r2, [pc, #620]	; (8008bc4 <problem_fetch+0x7234>)
 8008958:	461c      	mov	r4, r3
 800895a:	4613      	mov	r3, r2
 800895c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800895e:	6020      	str	r0, [r4, #0]
 8008960:	6061      	str	r1, [r4, #4]
 8008962:	60a2      	str	r2, [r4, #8]
 8008964:	881a      	ldrh	r2, [r3, #0]
 8008966:	789b      	ldrb	r3, [r3, #2]
 8008968:	81a2      	strh	r2, [r4, #12]
 800896a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008972:	4a95      	ldr	r2, [pc, #596]	; (8008bc8 <problem_fetch+0x7238>)
 8008974:	461c      	mov	r4, r3
 8008976:	4613      	mov	r3, r2
 8008978:	cb07      	ldmia	r3!, {r0, r1, r2}
 800897a:	6020      	str	r0, [r4, #0]
 800897c:	6061      	str	r1, [r4, #4]
 800897e:	60a2      	str	r2, [r4, #8]
			break;
 8008980:	f013 bf36 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 191 :
			strcpy(p->name,"DUST IN THE WIND");
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800898a:	4a90      	ldr	r2, [pc, #576]	; (8008bcc <problem_fetch+0x723c>)
 800898c:	461d      	mov	r5, r3
 800898e:	4614      	mov	r4, r2
 8008990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008992:	6028      	str	r0, [r5, #0]
 8008994:	6069      	str	r1, [r5, #4]
 8008996:	60aa      	str	r2, [r5, #8]
 8008998:	60eb      	str	r3, [r5, #12]
 800899a:	7823      	ldrb	r3, [r4, #0]
 800899c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80089a4:	4a8a      	ldr	r2, [pc, #552]	; (8008bd0 <problem_fetch+0x7240>)
 80089a6:	6810      	ldr	r0, [r2, #0]
 80089a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2206      	movs	r2, #6
 80089ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,G,D");
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	33a4      	adds	r3, #164	; 0xa4
 80089b4:	4a87      	ldr	r2, [pc, #540]	; (8008bd4 <problem_fetch+0x7244>)
 80089b6:	461c      	mov	r4, r3
 80089b8:	4613      	mov	r3, r2
 80089ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089bc:	6020      	str	r0, [r4, #0]
 80089be:	6061      	str	r1, [r4, #4]
 80089c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	4a84      	ldr	r2, [pc, #528]	; (8008bd8 <problem_fetch+0x7248>)
 80089c8:	461c      	mov	r4, r3
 80089ca:	4615      	mov	r5, r2
 80089cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	6061      	str	r1, [r4, #4]
 80089d2:	60a2      	str	r2, [r4, #8]
 80089d4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80089dc:	4a7a      	ldr	r2, [pc, #488]	; (8008bc8 <problem_fetch+0x7238>)
 80089de:	461c      	mov	r4, r3
 80089e0:	4613      	mov	r3, r2
 80089e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089e4:	6020      	str	r0, [r4, #0]
 80089e6:	6061      	str	r1, [r4, #4]
 80089e8:	60a2      	str	r2, [r4, #8]
			break;
 80089ea:	f013 bf01 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 192 :
			strcpy(p->name,"THREE");
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80089f4:	4a79      	ldr	r2, [pc, #484]	; (8008bdc <problem_fetch+0x724c>)
 80089f6:	6810      	ldr	r0, [r2, #0]
 80089f8:	6018      	str	r0, [r3, #0]
 80089fa:	8892      	ldrh	r2, [r2, #4]
 80089fc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a04:	4a72      	ldr	r2, [pc, #456]	; (8008bd0 <problem_fetch+0x7240>)
 8008a06:	6810      	ldr	r0, [r2, #0]
 8008a08:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2206      	movs	r2, #6
 8008a0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,E,A");
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	33a4      	adds	r3, #164	; 0xa4
 8008a14:	4a72      	ldr	r2, [pc, #456]	; (8008be0 <problem_fetch+0x7250>)
 8008a16:	461c      	mov	r4, r3
 8008a18:	4613      	mov	r3, r2
 8008a1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a1c:	6020      	str	r0, [r4, #0]
 8008a1e:	6061      	str	r1, [r4, #4]
 8008a20:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	3304      	adds	r3, #4
 8008a26:	4a6f      	ldr	r2, [pc, #444]	; (8008be4 <problem_fetch+0x7254>)
 8008a28:	461c      	mov	r4, r3
 8008a2a:	4615      	mov	r5, r2
 8008a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	6061      	str	r1, [r4, #4]
 8008a32:	60a2      	str	r2, [r4, #8]
 8008a34:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008a3c:	4a6a      	ldr	r2, [pc, #424]	; (8008be8 <problem_fetch+0x7258>)
 8008a3e:	461c      	mov	r4, r3
 8008a40:	4613      	mov	r3, r2
 8008a42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a44:	6020      	str	r0, [r4, #0]
 8008a46:	6061      	str	r1, [r4, #4]
 8008a48:	60a2      	str	r2, [r4, #8]
			break;
 8008a4a:	f013 bed1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 193 :
			strcpy(p->name,"GRO1");
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008a54:	4a65      	ldr	r2, [pc, #404]	; (8008bec <problem_fetch+0x725c>)
 8008a56:	6810      	ldr	r0, [r2, #0]
 8008a58:	6018      	str	r0, [r3, #0]
 8008a5a:	7912      	ldrb	r2, [r2, #4]
 8008a5c:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a64:	4a55      	ldr	r2, [pc, #340]	; (8008bbc <problem_fetch+0x722c>)
 8008a66:	8811      	ldrh	r1, [r2, #0]
 8008a68:	7892      	ldrb	r2, [r2, #2]
 8008a6a:	8019      	strh	r1, [r3, #0]
 8008a6c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2206      	movs	r2, #6
 8008a72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,C,E,D");
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	33a4      	adds	r3, #164	; 0xa4
 8008a78:	4a5d      	ldr	r2, [pc, #372]	; (8008bf0 <problem_fetch+0x7260>)
 8008a7a:	461c      	mov	r4, r3
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a80:	6020      	str	r0, [r4, #0]
 8008a82:	6061      	str	r1, [r4, #4]
 8008a84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4a5a      	ldr	r2, [pc, #360]	; (8008bf4 <problem_fetch+0x7264>)
 8008a8c:	461c      	mov	r4, r3
 8008a8e:	4615      	mov	r5, r2
 8008a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a92:	6020      	str	r0, [r4, #0]
 8008a94:	6061      	str	r1, [r4, #4]
 8008a96:	60a2      	str	r2, [r4, #8]
 8008a98:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008aa0:	4a49      	ldr	r2, [pc, #292]	; (8008bc8 <problem_fetch+0x7238>)
 8008aa2:	461c      	mov	r4, r3
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008aa8:	6020      	str	r0, [r4, #0]
 8008aaa:	6061      	str	r1, [r4, #4]
 8008aac:	60a2      	str	r2, [r4, #8]
			break;
 8008aae:	f013 be9f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 194 :
			strcpy(p->name,"INTO THE SHADOW DUST");
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ab8:	4a4f      	ldr	r2, [pc, #316]	; (8008bf8 <problem_fetch+0x7268>)
 8008aba:	461d      	mov	r5, r3
 8008abc:	4614      	mov	r4, r2
 8008abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ac0:	6028      	str	r0, [r5, #0]
 8008ac2:	6069      	str	r1, [r5, #4]
 8008ac4:	60aa      	str	r2, [r5, #8]
 8008ac6:	60eb      	str	r3, [r5, #12]
 8008ac8:	6820      	ldr	r0, [r4, #0]
 8008aca:	6128      	str	r0, [r5, #16]
 8008acc:	7923      	ldrb	r3, [r4, #4]
 8008ace:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ad6:	4a49      	ldr	r2, [pc, #292]	; (8008bfc <problem_fetch+0x726c>)
 8008ad8:	6810      	ldr	r0, [r2, #0]
 8008ada:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2208      	movs	r2, #8
 8008ae0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,C,G,G,I");
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	33a4      	adds	r3, #164	; 0xa4
 8008ae6:	4a46      	ldr	r2, [pc, #280]	; (8008c00 <problem_fetch+0x7270>)
 8008ae8:	461c      	mov	r4, r3
 8008aea:	4615      	mov	r5, r2
 8008aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008aee:	6020      	str	r0, [r4, #0]
 8008af0:	6061      	str	r1, [r4, #4]
 8008af2:	60a2      	str	r2, [r4, #8]
 8008af4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,14,17,18");
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	3304      	adds	r3, #4
 8008afa:	4a42      	ldr	r2, [pc, #264]	; (8008c04 <problem_fetch+0x7274>)
 8008afc:	461d      	mov	r5, r3
 8008afe:	4614      	mov	r4, r2
 8008b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b02:	6028      	str	r0, [r5, #0]
 8008b04:	6069      	str	r1, [r5, #4]
 8008b06:	60aa      	str	r2, [r5, #8]
 8008b08:	60eb      	str	r3, [r5, #12]
 8008b0a:	6820      	ldr	r0, [r4, #0]
 8008b0c:	6128      	str	r0, [r5, #16]
 8008b0e:	7923      	ldrb	r3, [r4, #4]
 8008b10:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008b18:	4a3b      	ldr	r2, [pc, #236]	; (8008c08 <problem_fetch+0x7278>)
 8008b1a:	461c      	mov	r4, r3
 8008b1c:	4615      	mov	r5, r2
 8008b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b20:	6020      	str	r0, [r4, #0]
 8008b22:	6061      	str	r1, [r4, #4]
 8008b24:	60a2      	str	r2, [r4, #8]
 8008b26:	60e3      	str	r3, [r4, #12]
			break;
 8008b28:	f013 be62 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 195 :
			strcpy(p->name,"BILLIONS AND BILLIONS");
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b32:	4a36      	ldr	r2, [pc, #216]	; (8008c0c <problem_fetch+0x727c>)
 8008b34:	461d      	mov	r5, r3
 8008b36:	4614      	mov	r4, r2
 8008b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b3a:	6028      	str	r0, [r5, #0]
 8008b3c:	6069      	str	r1, [r5, #4]
 8008b3e:	60aa      	str	r2, [r5, #8]
 8008b40:	60eb      	str	r3, [r5, #12]
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	6128      	str	r0, [r5, #16]
 8008b46:	88a3      	ldrh	r3, [r4, #4]
 8008b48:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b50:	4a2f      	ldr	r2, [pc, #188]	; (8008c10 <problem_fetch+0x7280>)
 8008b52:	8811      	ldrh	r1, [r2, #0]
 8008b54:	7892      	ldrb	r2, [r2, #2]
 8008b56:	8019      	strh	r1, [r3, #0]
 8008b58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,G,D");
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	33a4      	adds	r3, #164	; 0xa4
 8008b64:	4a2b      	ldr	r2, [pc, #172]	; (8008c14 <problem_fetch+0x7284>)
 8008b66:	461c      	mov	r4, r3
 8008b68:	4613      	mov	r3, r2
 8008b6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b6c:	6020      	str	r0, [r4, #0]
 8008b6e:	6061      	str	r1, [r4, #4]
 8008b70:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,9,12,14,18");
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3304      	adds	r3, #4
 8008b76:	4a28      	ldr	r2, [pc, #160]	; (8008c18 <problem_fetch+0x7288>)
 8008b78:	461c      	mov	r4, r3
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b7e:	6020      	str	r0, [r4, #0]
 8008b80:	6061      	str	r1, [r4, #4]
 8008b82:	60a2      	str	r2, [r4, #8]
 8008b84:	881a      	ldrh	r2, [r3, #0]
 8008b86:	789b      	ldrb	r3, [r3, #2]
 8008b88:	81a2      	strh	r2, [r4, #12]
 8008b8a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008b92:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <problem_fetch+0x7258>)
 8008b94:	461c      	mov	r4, r3
 8008b96:	4613      	mov	r3, r2
 8008b98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b9a:	6020      	str	r0, [r4, #0]
 8008b9c:	6061      	str	r1, [r4, #4]
 8008b9e:	60a2      	str	r2, [r4, #8]
			break;
 8008ba0:	f013 be26 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8008ba4:	080261a0 	.word	0x080261a0
 8008ba8:	08023d30 	.word	0x08023d30
 8008bac:	080261b0 	.word	0x080261b0
 8008bb0:	080261c0 	.word	0x080261c0
 8008bb4:	08023d18 	.word	0x08023d18
 8008bb8:	080261d4 	.word	0x080261d4
 8008bbc:	08023c5c 	.word	0x08023c5c
 8008bc0:	080261e0 	.word	0x080261e0
 8008bc4:	080261ec 	.word	0x080261ec
 8008bc8:	08023f2c 	.word	0x08023f2c
 8008bcc:	080261fc 	.word	0x080261fc
 8008bd0:	08023c28 	.word	0x08023c28
 8008bd4:	08026210 	.word	0x08026210
 8008bd8:	0802621c 	.word	0x0802621c
 8008bdc:	0802622c 	.word	0x0802622c
 8008be0:	08026234 	.word	0x08026234
 8008be4:	08026240 	.word	0x08026240
 8008be8:	08023b70 	.word	0x08023b70
 8008bec:	08026250 	.word	0x08026250
 8008bf0:	08026258 	.word	0x08026258
 8008bf4:	08026264 	.word	0x08026264
 8008bf8:	08026274 	.word	0x08026274
 8008bfc:	08023b90 	.word	0x08023b90
 8008c00:	0802628c 	.word	0x0802628c
 8008c04:	0802629c 	.word	0x0802629c
 8008c08:	08023da0 	.word	0x08023da0
 8008c0c:	080262b4 	.word	0x080262b4
 8008c10:	08023b50 	.word	0x08023b50
 8008c14:	080262cc 	.word	0x080262cc
 8008c18:	080262d8 	.word	0x080262d8
		case 196 :
			strcpy(p->name,"TWO");
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c22:	4abd      	ldr	r2, [pc, #756]	; (8008f18 <problem_fetch+0x7588>)
 8008c24:	6810      	ldr	r0, [r2, #0]
 8008c26:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C+");
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008c2e:	4abb      	ldr	r2, [pc, #748]	; (8008f1c <problem_fetch+0x758c>)
 8008c30:	6810      	ldr	r0, [r2, #0]
 8008c32:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2207      	movs	r2, #7
 8008c38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,E,I,I");
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	33a4      	adds	r3, #164	; 0xa4
 8008c3e:	4ab8      	ldr	r2, [pc, #736]	; (8008f20 <problem_fetch+0x7590>)
 8008c40:	461c      	mov	r4, r3
 8008c42:	4613      	mov	r3, r2
 8008c44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c46:	6020      	str	r0, [r4, #0]
 8008c48:	6061      	str	r1, [r4, #4]
 8008c4a:	60a2      	str	r2, [r4, #8]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,14,18");
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	3304      	adds	r3, #4
 8008c54:	4ab3      	ldr	r2, [pc, #716]	; (8008f24 <problem_fetch+0x7594>)
 8008c56:	461d      	mov	r5, r3
 8008c58:	4614      	mov	r4, r2
 8008c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c5c:	6028      	str	r0, [r5, #0]
 8008c5e:	6069      	str	r1, [r5, #4]
 8008c60:	60aa      	str	r2, [r5, #8]
 8008c62:	60eb      	str	r3, [r5, #12]
 8008c64:	8823      	ldrh	r3, [r4, #0]
 8008c66:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008c6e:	4aae      	ldr	r2, [pc, #696]	; (8008f28 <problem_fetch+0x7598>)
 8008c70:	461c      	mov	r4, r3
 8008c72:	4613      	mov	r3, r2
 8008c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c76:	6020      	str	r0, [r4, #0]
 8008c78:	6061      	str	r1, [r4, #4]
 8008c7a:	60a2      	str	r2, [r4, #8]
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	81a3      	strh	r3, [r4, #12]
			break;
 8008c80:	f013 bdb6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 197 :
			strcpy(p->name,"CHINGA SU ES TO MADRE");
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c8a:	4aa8      	ldr	r2, [pc, #672]	; (8008f2c <problem_fetch+0x759c>)
 8008c8c:	461d      	mov	r5, r3
 8008c8e:	4614      	mov	r4, r2
 8008c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c92:	6028      	str	r0, [r5, #0]
 8008c94:	6069      	str	r1, [r5, #4]
 8008c96:	60aa      	str	r2, [r5, #8]
 8008c98:	60eb      	str	r3, [r5, #12]
 8008c9a:	6820      	ldr	r0, [r4, #0]
 8008c9c:	6128      	str	r0, [r5, #16]
 8008c9e:	88a3      	ldrh	r3, [r4, #4]
 8008ca0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ca8:	4aa1      	ldr	r2, [pc, #644]	; (8008f30 <problem_fetch+0x75a0>)
 8008caa:	8811      	ldrh	r1, [r2, #0]
 8008cac:	7892      	ldrb	r2, [r2, #2]
 8008cae:	8019      	strh	r1, [r3, #0]
 8008cb0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2205      	movs	r2, #5
 8008cb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,A,B");
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	33a4      	adds	r3, #164	; 0xa4
 8008cbc:	499d      	ldr	r1, [pc, #628]	; (8008f34 <problem_fetch+0x75a4>)
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	cb03      	ldmia	r3!, {r0, r1}
 8008cc4:	6010      	str	r0, [r2, #0]
 8008cc6:	6051      	str	r1, [r2, #4]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,12,18,15");
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4a99      	ldr	r2, [pc, #612]	; (8008f38 <problem_fetch+0x75a8>)
 8008cd2:	461c      	mov	r4, r3
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008cd8:	6020      	str	r0, [r4, #0]
 8008cda:	6061      	str	r1, [r4, #4]
 8008cdc:	60a2      	str	r2, [r4, #8]
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,e,d");
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008ce8:	4994      	ldr	r1, [pc, #592]	; (8008f3c <problem_fetch+0x75ac>)
 8008cea:	461a      	mov	r2, r3
 8008cec:	460b      	mov	r3, r1
 8008cee:	cb03      	ldmia	r3!, {r0, r1}
 8008cf0:	6010      	str	r0, [r2, #0]
 8008cf2:	6051      	str	r1, [r2, #4]
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	8113      	strh	r3, [r2, #8]
			break;
 8008cf8:	f013 bd7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 198 :
			strcpy(p->name,"DON'T BLACKOUT");
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008d02:	4a8f      	ldr	r2, [pc, #572]	; (8008f40 <problem_fetch+0x75b0>)
 8008d04:	461c      	mov	r4, r3
 8008d06:	4613      	mov	r3, r2
 8008d08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	6061      	str	r1, [r4, #4]
 8008d0e:	60a2      	str	r2, [r4, #8]
 8008d10:	881a      	ldrh	r2, [r3, #0]
 8008d12:	789b      	ldrb	r3, [r3, #2]
 8008d14:	81a2      	strh	r2, [r4, #12]
 8008d16:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008d1e:	4a89      	ldr	r2, [pc, #548]	; (8008f44 <problem_fetch+0x75b4>)
 8008d20:	8811      	ldrh	r1, [r2, #0]
 8008d22:	7892      	ldrb	r2, [r2, #2]
 8008d24:	8019      	strh	r1, [r3, #0]
 8008d26:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2207      	movs	r2, #7
 8008d2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D,H,A");
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	33a4      	adds	r3, #164	; 0xa4
 8008d32:	4a85      	ldr	r2, [pc, #532]	; (8008f48 <problem_fetch+0x75b8>)
 8008d34:	461c      	mov	r4, r3
 8008d36:	4613      	mov	r3, r2
 8008d38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	6061      	str	r1, [r4, #4]
 8008d3e:	60a2      	str	r2, [r4, #8]
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,11,9,15,10,18");
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	3304      	adds	r3, #4
 8008d48:	4a80      	ldr	r2, [pc, #512]	; (8008f4c <problem_fetch+0x75bc>)
 8008d4a:	461d      	mov	r5, r3
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d50:	6028      	str	r0, [r5, #0]
 8008d52:	6069      	str	r1, [r5, #4]
 8008d54:	60aa      	str	r2, [r5, #8]
 8008d56:	60eb      	str	r3, [r5, #12]
 8008d58:	8823      	ldrh	r3, [r4, #0]
 8008d5a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008d62:	4a71      	ldr	r2, [pc, #452]	; (8008f28 <problem_fetch+0x7598>)
 8008d64:	461c      	mov	r4, r3
 8008d66:	4613      	mov	r3, r2
 8008d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d6a:	6020      	str	r0, [r4, #0]
 8008d6c:	6061      	str	r1, [r4, #4]
 8008d6e:	60a2      	str	r2, [r4, #8]
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	81a3      	strh	r3, [r4, #12]
			break;
 8008d74:	f013 bd3c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 199 :
			strcpy(p->name,"LUCID NONSENSE");
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008d7e:	4a74      	ldr	r2, [pc, #464]	; (8008f50 <problem_fetch+0x75c0>)
 8008d80:	461c      	mov	r4, r3
 8008d82:	4613      	mov	r3, r2
 8008d84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d86:	6020      	str	r0, [r4, #0]
 8008d88:	6061      	str	r1, [r4, #4]
 8008d8a:	60a2      	str	r2, [r4, #8]
 8008d8c:	881a      	ldrh	r2, [r3, #0]
 8008d8e:	789b      	ldrb	r3, [r3, #2]
 8008d90:	81a2      	strh	r2, [r4, #12]
 8008d92:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008d9a:	4a6a      	ldr	r2, [pc, #424]	; (8008f44 <problem_fetch+0x75b4>)
 8008d9c:	8811      	ldrh	r1, [r2, #0]
 8008d9e:	7892      	ldrb	r2, [r2, #2]
 8008da0:	8019      	strh	r1, [r3, #0]
 8008da2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2206      	movs	r2, #6
 8008da8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,E,B,I");
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	33a4      	adds	r3, #164	; 0xa4
 8008dae:	4a69      	ldr	r2, [pc, #420]	; (8008f54 <problem_fetch+0x75c4>)
 8008db0:	461c      	mov	r4, r3
 8008db2:	4613      	mov	r3, r2
 8008db4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008db6:	6020      	str	r0, [r4, #0]
 8008db8:	6061      	str	r1, [r4, #4]
 8008dba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,15,16,10,18");
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3304      	adds	r3, #4
 8008dc0:	4a65      	ldr	r2, [pc, #404]	; (8008f58 <problem_fetch+0x75c8>)
 8008dc2:	461c      	mov	r4, r3
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dc8:	6020      	str	r0, [r4, #0]
 8008dca:	6061      	str	r1, [r4, #4]
 8008dcc:	60a2      	str	r2, [r4, #8]
 8008dce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008dd6:	4a61      	ldr	r2, [pc, #388]	; (8008f5c <problem_fetch+0x75cc>)
 8008dd8:	461c      	mov	r4, r3
 8008dda:	4613      	mov	r3, r2
 8008ddc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dde:	6020      	str	r0, [r4, #0]
 8008de0:	6061      	str	r1, [r4, #4]
 8008de2:	60a2      	str	r2, [r4, #8]
			break;
 8008de4:	f013 bd04 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 200 :
			strcpy(p->name,"SNAP");
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008dee:	4a5c      	ldr	r2, [pc, #368]	; (8008f60 <problem_fetch+0x75d0>)
 8008df0:	6810      	ldr	r0, [r2, #0]
 8008df2:	6018      	str	r0, [r3, #0]
 8008df4:	7912      	ldrb	r2, [r2, #4]
 8008df6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008dfe:	4a59      	ldr	r2, [pc, #356]	; (8008f64 <problem_fetch+0x75d4>)
 8008e00:	6810      	ldr	r0, [r2, #0]
 8008e02:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2206      	movs	r2, #6
 8008e08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,A,D");
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	33a4      	adds	r3, #164	; 0xa4
 8008e0e:	4a56      	ldr	r2, [pc, #344]	; (8008f68 <problem_fetch+0x75d8>)
 8008e10:	461c      	mov	r4, r3
 8008e12:	4613      	mov	r3, r2
 8008e14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e16:	6020      	str	r0, [r4, #0]
 8008e18:	6061      	str	r1, [r4, #4]
 8008e1a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,10,12,14,18");
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	3304      	adds	r3, #4
 8008e20:	4a52      	ldr	r2, [pc, #328]	; (8008f6c <problem_fetch+0x75dc>)
 8008e22:	461c      	mov	r4, r3
 8008e24:	4615      	mov	r5, r2
 8008e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e28:	6020      	str	r0, [r4, #0]
 8008e2a:	6061      	str	r1, [r4, #4]
 8008e2c:	60a2      	str	r2, [r4, #8]
 8008e2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008e36:	4a49      	ldr	r2, [pc, #292]	; (8008f5c <problem_fetch+0x75cc>)
 8008e38:	461c      	mov	r4, r3
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e3e:	6020      	str	r0, [r4, #0]
 8008e40:	6061      	str	r1, [r4, #4]
 8008e42:	60a2      	str	r2, [r4, #8]
			break;
 8008e44:	f013 bcd4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 201 :
			strcpy(p->name,"FAT 'N WEAK");
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e4e:	4a48      	ldr	r2, [pc, #288]	; (8008f70 <problem_fetch+0x75e0>)
 8008e50:	461c      	mov	r4, r3
 8008e52:	4613      	mov	r3, r2
 8008e54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e56:	6020      	str	r0, [r4, #0]
 8008e58:	6061      	str	r1, [r4, #4]
 8008e5a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008e62:	4a2e      	ldr	r2, [pc, #184]	; (8008f1c <problem_fetch+0x758c>)
 8008e64:	6810      	ldr	r0, [r2, #0]
 8008e66:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2206      	movs	r2, #6
 8008e6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A");
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	33a4      	adds	r3, #164	; 0xa4
 8008e72:	4a40      	ldr	r2, [pc, #256]	; (8008f74 <problem_fetch+0x75e4>)
 8008e74:	461c      	mov	r4, r3
 8008e76:	4613      	mov	r3, r2
 8008e78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	6061      	str	r1, [r4, #4]
 8008e7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,16,18");
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3304      	adds	r3, #4
 8008e84:	4a3c      	ldr	r2, [pc, #240]	; (8008f78 <problem_fetch+0x75e8>)
 8008e86:	461c      	mov	r4, r3
 8008e88:	4615      	mov	r5, r2
 8008e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e8c:	6020      	str	r0, [r4, #0]
 8008e8e:	6061      	str	r1, [r4, #4]
 8008e90:	60a2      	str	r2, [r4, #8]
 8008e92:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008e9a:	4a30      	ldr	r2, [pc, #192]	; (8008f5c <problem_fetch+0x75cc>)
 8008e9c:	461c      	mov	r4, r3
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ea2:	6020      	str	r0, [r4, #0]
 8008ea4:	6061      	str	r1, [r4, #4]
 8008ea6:	60a2      	str	r2, [r4, #8]
			break;
 8008ea8:	f013 bca2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 202 :
			strcpy(p->name,"MSFTS");
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008eb2:	4a32      	ldr	r2, [pc, #200]	; (8008f7c <problem_fetch+0x75ec>)
 8008eb4:	6810      	ldr	r0, [r2, #0]
 8008eb6:	6018      	str	r0, [r3, #0]
 8008eb8:	8892      	ldrh	r2, [r2, #4]
 8008eba:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008ec2:	4a16      	ldr	r2, [pc, #88]	; (8008f1c <problem_fetch+0x758c>)
 8008ec4:	6810      	ldr	r0, [r2, #0]
 8008ec6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2207      	movs	r2, #7
 8008ecc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,E,J,J,H,I");
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	33a4      	adds	r3, #164	; 0xa4
 8008ed2:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <problem_fetch+0x75f0>)
 8008ed4:	461c      	mov	r4, r3
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008eda:	6020      	str	r0, [r4, #0]
 8008edc:	6061      	str	r1, [r4, #4]
 8008ede:	60a2      	str	r2, [r4, #8]
 8008ee0:	881b      	ldrh	r3, [r3, #0]
 8008ee2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,5,13,16,18");
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <problem_fetch+0x75f4>)
 8008eea:	461d      	mov	r5, r3
 8008eec:	4614      	mov	r4, r2
 8008eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ef0:	6028      	str	r0, [r5, #0]
 8008ef2:	6069      	str	r1, [r5, #4]
 8008ef4:	60aa      	str	r2, [r5, #8]
 8008ef6:	60eb      	str	r3, [r5, #12]
 8008ef8:	8823      	ldrh	r3, [r4, #0]
 8008efa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008f02:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <problem_fetch+0x75f8>)
 8008f04:	461c      	mov	r4, r3
 8008f06:	4613      	mov	r3, r2
 8008f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f0a:	6020      	str	r0, [r4, #0]
 8008f0c:	6061      	str	r1, [r4, #4]
 8008f0e:	60a2      	str	r2, [r4, #8]
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	81a3      	strh	r3, [r4, #12]
			break;
 8008f14:	f013 bc6c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8008f18:	080262e8 	.word	0x080262e8
 8008f1c:	08023c28 	.word	0x08023c28
 8008f20:	080262ec 	.word	0x080262ec
 8008f24:	080262fc 	.word	0x080262fc
 8008f28:	08023c08 	.word	0x08023c08
 8008f2c:	08026310 	.word	0x08026310
 8008f30:	080243c4 	.word	0x080243c4
 8008f34:	08026328 	.word	0x08026328
 8008f38:	08026334 	.word	0x08026334
 8008f3c:	08026344 	.word	0x08026344
 8008f40:	08026350 	.word	0x08026350
 8008f44:	08023b50 	.word	0x08023b50
 8008f48:	08026360 	.word	0x08026360
 8008f4c:	08026370 	.word	0x08026370
 8008f50:	08026384 	.word	0x08026384
 8008f54:	08026394 	.word	0x08026394
 8008f58:	080263a0 	.word	0x080263a0
 8008f5c:	08023f2c 	.word	0x08023f2c
 8008f60:	080263b0 	.word	0x080263b0
 8008f64:	08023d30 	.word	0x08023d30
 8008f68:	080263b8 	.word	0x080263b8
 8008f6c:	080263c4 	.word	0x080263c4
 8008f70:	080263d4 	.word	0x080263d4
 8008f74:	080263e0 	.word	0x080263e0
 8008f78:	080263ec 	.word	0x080263ec
 8008f7c:	080263fc 	.word	0x080263fc
 8008f80:	08026404 	.word	0x08026404
 8008f84:	08026414 	.word	0x08026414
 8008f88:	08025f90 	.word	0x08025f90
		case 203 :
			strcpy(p->name,"ITIM");
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008f92:	4aaa      	ldr	r2, [pc, #680]	; (800923c <problem_fetch+0x78ac>)
 8008f94:	6810      	ldr	r0, [r2, #0]
 8008f96:	6018      	str	r0, [r3, #0]
 8008f98:	7912      	ldrb	r2, [r2, #4]
 8008f9a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008fa2:	4aa7      	ldr	r2, [pc, #668]	; (8009240 <problem_fetch+0x78b0>)
 8008fa4:	6810      	ldr	r0, [r2, #0]
 8008fa6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2207      	movs	r2, #7
 8008fac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,I,E,E,G,E,G");
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	33a4      	adds	r3, #164	; 0xa4
 8008fb2:	4aa4      	ldr	r2, [pc, #656]	; (8009244 <problem_fetch+0x78b4>)
 8008fb4:	461c      	mov	r4, r3
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fba:	6020      	str	r0, [r4, #0]
 8008fbc:	6061      	str	r1, [r4, #4]
 8008fbe:	60a2      	str	r2, [r4, #8]
 8008fc0:	881b      	ldrh	r3, [r3, #0]
 8008fc2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"13,18,9,16,14,8,4");
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4a9f      	ldr	r2, [pc, #636]	; (8009248 <problem_fetch+0x78b8>)
 8008fca:	461d      	mov	r5, r3
 8008fcc:	4614      	mov	r4, r2
 8008fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fd0:	6028      	str	r0, [r5, #0]
 8008fd2:	6069      	str	r1, [r5, #4]
 8008fd4:	60aa      	str	r2, [r5, #8]
 8008fd6:	60eb      	str	r3, [r5, #12]
 8008fd8:	8823      	ldrh	r3, [r4, #0]
 8008fda:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,e,d,d,d,d,s");
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008fe2:	4a9a      	ldr	r2, [pc, #616]	; (800924c <problem_fetch+0x78bc>)
 8008fe4:	461c      	mov	r4, r3
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008fea:	6020      	str	r0, [r4, #0]
 8008fec:	6061      	str	r1, [r4, #4]
 8008fee:	60a2      	str	r2, [r4, #8]
 8008ff0:	881b      	ldrh	r3, [r3, #0]
 8008ff2:	81a3      	strh	r3, [r4, #12]
			break;
 8008ff4:	f013 bbfc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 204 :
			strcpy(p->name,"SIDEPULL SIDEWALK");
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ffe:	4a94      	ldr	r2, [pc, #592]	; (8009250 <problem_fetch+0x78c0>)
 8009000:	461d      	mov	r5, r3
 8009002:	4614      	mov	r4, r2
 8009004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009006:	6028      	str	r0, [r5, #0]
 8009008:	6069      	str	r1, [r5, #4]
 800900a:	60aa      	str	r2, [r5, #8]
 800900c:	60eb      	str	r3, [r5, #12]
 800900e:	8823      	ldrh	r3, [r4, #0]
 8009010:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009018:	4a8e      	ldr	r2, [pc, #568]	; (8009254 <problem_fetch+0x78c4>)
 800901a:	6810      	ldr	r0, [r2, #0]
 800901c:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	220a      	movs	r2, #10
 8009022:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,H,F,I,G,I");
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	33a4      	adds	r3, #164	; 0xa4
 8009028:	4a8b      	ldr	r2, [pc, #556]	; (8009258 <problem_fetch+0x78c8>)
 800902a:	461d      	mov	r5, r3
 800902c:	4614      	mov	r4, r2
 800902e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009030:	6028      	str	r0, [r5, #0]
 8009032:	6069      	str	r1, [r5, #4]
 8009034:	60aa      	str	r2, [r5, #8]
 8009036:	60eb      	str	r3, [r5, #12]
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,6,8,9,10,11,14,15,18");
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3304      	adds	r3, #4
 8009040:	4a86      	ldr	r2, [pc, #536]	; (800925c <problem_fetch+0x78cc>)
 8009042:	461d      	mov	r5, r3
 8009044:	4614      	mov	r4, r2
 8009046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009048:	6028      	str	r0, [r5, #0]
 800904a:	6069      	str	r1, [r5, #4]
 800904c:	60aa      	str	r2, [r5, #8]
 800904e:	60eb      	str	r3, [r5, #12]
 8009050:	cc03      	ldmia	r4!, {r0, r1}
 8009052:	6128      	str	r0, [r5, #16]
 8009054:	6169      	str	r1, [r5, #20]
 8009056:	7823      	ldrb	r3, [r4, #0]
 8009058:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009060:	4a7f      	ldr	r2, [pc, #508]	; (8009260 <problem_fetch+0x78d0>)
 8009062:	461d      	mov	r5, r3
 8009064:	4614      	mov	r4, r2
 8009066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009068:	6028      	str	r0, [r5, #0]
 800906a:	6069      	str	r1, [r5, #4]
 800906c:	60aa      	str	r2, [r5, #8]
 800906e:	60eb      	str	r3, [r5, #12]
 8009070:	6820      	ldr	r0, [r4, #0]
 8009072:	6128      	str	r0, [r5, #16]
			break;
 8009074:	f013 bbbc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 205 :
			strcpy(p->name,"DROPPIN SOAP");
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800907e:	4a79      	ldr	r2, [pc, #484]	; (8009264 <problem_fetch+0x78d4>)
 8009080:	461c      	mov	r4, r3
 8009082:	4613      	mov	r3, r2
 8009084:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009086:	6020      	str	r0, [r4, #0]
 8009088:	6061      	str	r1, [r4, #4]
 800908a:	60a2      	str	r2, [r4, #8]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009096:	4a6a      	ldr	r2, [pc, #424]	; (8009240 <problem_fetch+0x78b0>)
 8009098:	6810      	ldr	r0, [r2, #0]
 800909a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2205      	movs	r2, #5
 80090a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,I");
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	33a4      	adds	r3, #164	; 0xa4
 80090a6:	4970      	ldr	r1, [pc, #448]	; (8009268 <problem_fetch+0x78d8>)
 80090a8:	461a      	mov	r2, r3
 80090aa:	460b      	mov	r3, r1
 80090ac:	cb03      	ldmia	r3!, {r0, r1}
 80090ae:	6010      	str	r0, [r2, #0]
 80090b0:	6051      	str	r1, [r2, #4]
 80090b2:	881b      	ldrh	r3, [r3, #0]
 80090b4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,14,12,18");
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4a6c      	ldr	r2, [pc, #432]	; (800926c <problem_fetch+0x78dc>)
 80090bc:	461c      	mov	r4, r3
 80090be:	4613      	mov	r3, r2
 80090c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090c2:	6020      	str	r0, [r4, #0]
 80090c4:	6061      	str	r1, [r4, #4]
 80090c6:	60a2      	str	r2, [r4, #8]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80090d2:	4967      	ldr	r1, [pc, #412]	; (8009270 <problem_fetch+0x78e0>)
 80090d4:	461a      	mov	r2, r3
 80090d6:	460b      	mov	r3, r1
 80090d8:	cb03      	ldmia	r3!, {r0, r1}
 80090da:	6010      	str	r0, [r2, #0]
 80090dc:	6051      	str	r1, [r2, #4]
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	8113      	strh	r3, [r2, #8]
			break;
 80090e2:	f013 bb85 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 206 :
			strcpy(p->name,"BLACK #268162639");
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090ec:	4a61      	ldr	r2, [pc, #388]	; (8009274 <problem_fetch+0x78e4>)
 80090ee:	461d      	mov	r5, r3
 80090f0:	4614      	mov	r4, r2
 80090f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090f4:	6028      	str	r0, [r5, #0]
 80090f6:	6069      	str	r1, [r5, #4]
 80090f8:	60aa      	str	r2, [r5, #8]
 80090fa:	60eb      	str	r3, [r5, #12]
 80090fc:	7823      	ldrb	r3, [r4, #0]
 80090fe:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009106:	4a4e      	ldr	r2, [pc, #312]	; (8009240 <problem_fetch+0x78b0>)
 8009108:	6810      	ldr	r0, [r2, #0]
 800910a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2205      	movs	r2, #5
 8009110:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,J,D");
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	33a4      	adds	r3, #164	; 0xa4
 8009116:	4958      	ldr	r1, [pc, #352]	; (8009278 <problem_fetch+0x78e8>)
 8009118:	461a      	mov	r2, r3
 800911a:	460b      	mov	r3, r1
 800911c:	cb03      	ldmia	r3!, {r0, r1}
 800911e:	6010      	str	r0, [r2, #0]
 8009120:	6051      	str	r1, [r2, #4]
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	3304      	adds	r3, #4
 800912a:	4a54      	ldr	r2, [pc, #336]	; (800927c <problem_fetch+0x78ec>)
 800912c:	461c      	mov	r4, r3
 800912e:	4613      	mov	r3, r2
 8009130:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009132:	6020      	str	r0, [r4, #0]
 8009134:	6061      	str	r1, [r4, #4]
 8009136:	60a2      	str	r2, [r4, #8]
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009142:	494b      	ldr	r1, [pc, #300]	; (8009270 <problem_fetch+0x78e0>)
 8009144:	461a      	mov	r2, r3
 8009146:	460b      	mov	r3, r1
 8009148:	cb03      	ldmia	r3!, {r0, r1}
 800914a:	6010      	str	r0, [r2, #0]
 800914c:	6051      	str	r1, [r2, #4]
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	8113      	strh	r3, [r2, #8]
			break;
 8009152:	f013 bb4d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 207 :
			strcpy(p->name,"MBT1RIGHT");
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800915c:	4948      	ldr	r1, [pc, #288]	; (8009280 <problem_fetch+0x78f0>)
 800915e:	461a      	mov	r2, r3
 8009160:	460b      	mov	r3, r1
 8009162:	cb03      	ldmia	r3!, {r0, r1}
 8009164:	6010      	str	r0, [r2, #0]
 8009166:	6051      	str	r1, [r2, #4]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009172:	4a44      	ldr	r2, [pc, #272]	; (8009284 <problem_fetch+0x78f4>)
 8009174:	6810      	ldr	r0, [r2, #0]
 8009176:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2205      	movs	r2, #5
 800917c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,D,I");
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	33a4      	adds	r3, #164	; 0xa4
 8009182:	4941      	ldr	r1, [pc, #260]	; (8009288 <problem_fetch+0x78f8>)
 8009184:	461a      	mov	r2, r3
 8009186:	460b      	mov	r3, r1
 8009188:	cb03      	ldmia	r3!, {r0, r1}
 800918a:	6010      	str	r0, [r2, #0]
 800918c:	6051      	str	r1, [r2, #4]
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,14,11,18");
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3304      	adds	r3, #4
 8009196:	4a3d      	ldr	r2, [pc, #244]	; (800928c <problem_fetch+0x78fc>)
 8009198:	461c      	mov	r4, r3
 800919a:	4613      	mov	r3, r2
 800919c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	6061      	str	r1, [r4, #4]
 80091a2:	60a2      	str	r2, [r4, #8]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80091ae:	4930      	ldr	r1, [pc, #192]	; (8009270 <problem_fetch+0x78e0>)
 80091b0:	461a      	mov	r2, r3
 80091b2:	460b      	mov	r3, r1
 80091b4:	cb03      	ldmia	r3!, {r0, r1}
 80091b6:	6010      	str	r0, [r2, #0]
 80091b8:	6051      	str	r1, [r2, #4]
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	8113      	strh	r3, [r2, #8]
			break;
 80091be:	f013 bb17 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 208 :
			strcpy(p->name,"BROKEN RECORD");
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091c8:	4a31      	ldr	r2, [pc, #196]	; (8009290 <problem_fetch+0x7900>)
 80091ca:	461c      	mov	r4, r3
 80091cc:	4613      	mov	r3, r2
 80091ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80091d0:	6020      	str	r0, [r4, #0]
 80091d2:	6061      	str	r1, [r4, #4]
 80091d4:	60a2      	str	r2, [r4, #8]
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80091e0:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <problem_fetch+0x7904>)
 80091e2:	8811      	ldrh	r1, [r2, #0]
 80091e4:	7892      	ldrb	r2, [r2, #2]
 80091e6:	8019      	strh	r1, [r3, #0]
 80091e8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2207      	movs	r2, #7
 80091ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A,D,A");
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	33a4      	adds	r3, #164	; 0xa4
 80091f4:	4a28      	ldr	r2, [pc, #160]	; (8009298 <problem_fetch+0x7908>)
 80091f6:	461c      	mov	r4, r3
 80091f8:	4613      	mov	r3, r2
 80091fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80091fc:	6020      	str	r0, [r4, #0]
 80091fe:	6061      	str	r1, [r4, #4]
 8009200:	60a2      	str	r2, [r4, #8]
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,12,14,15,18");
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3304      	adds	r3, #4
 800920a:	4a24      	ldr	r2, [pc, #144]	; (800929c <problem_fetch+0x790c>)
 800920c:	461d      	mov	r5, r3
 800920e:	4614      	mov	r4, r2
 8009210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009212:	6028      	str	r0, [r5, #0]
 8009214:	6069      	str	r1, [r5, #4]
 8009216:	60aa      	str	r2, [r5, #8]
 8009218:	60eb      	str	r3, [r5, #12]
 800921a:	8823      	ldrh	r3, [r4, #0]
 800921c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009224:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <problem_fetch+0x7910>)
 8009226:	461c      	mov	r4, r3
 8009228:	4613      	mov	r3, r2
 800922a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800922c:	6020      	str	r0, [r4, #0]
 800922e:	6061      	str	r1, [r4, #4]
 8009230:	60a2      	str	r2, [r4, #8]
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	81a3      	strh	r3, [r4, #12]
			break;
 8009236:	f013 badb 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800923a:	bf00      	nop
 800923c:	08026428 	.word	0x08026428
 8009240:	08023d30 	.word	0x08023d30
 8009244:	08026430 	.word	0x08026430
 8009248:	08026440 	.word	0x08026440
 800924c:	08026454 	.word	0x08026454
 8009250:	08026464 	.word	0x08026464
 8009254:	08023b90 	.word	0x08023b90
 8009258:	08026478 	.word	0x08026478
 800925c:	0802648c 	.word	0x0802648c
 8009260:	08024438 	.word	0x08024438
 8009264:	080264a8 	.word	0x080264a8
 8009268:	080264b8 	.word	0x080264b8
 800926c:	080264c4 	.word	0x080264c4
 8009270:	0802405c 	.word	0x0802405c
 8009274:	080264d4 	.word	0x080264d4
 8009278:	080264e8 	.word	0x080264e8
 800927c:	080264f4 	.word	0x080264f4
 8009280:	08026504 	.word	0x08026504
 8009284:	08023c28 	.word	0x08023c28
 8009288:	08026510 	.word	0x08026510
 800928c:	0802651c 	.word	0x0802651c
 8009290:	0802652c 	.word	0x0802652c
 8009294:	08023c5c 	.word	0x08023c5c
 8009298:	0802653c 	.word	0x0802653c
 800929c:	0802654c 	.word	0x0802654c
 80092a0:	08023d18 	.word	0x08023d18
		case 209 :
			strcpy(p->name,"BLACK 2");
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80092aa:	49ab      	ldr	r1, [pc, #684]	; (8009558 <problem_fetch+0x7bc8>)
 80092ac:	461a      	mov	r2, r3
 80092ae:	460b      	mov	r3, r1
 80092b0:	cb03      	ldmia	r3!, {r0, r1}
 80092b2:	6010      	str	r0, [r2, #0]
 80092b4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80092bc:	4aa7      	ldr	r2, [pc, #668]	; (800955c <problem_fetch+0x7bcc>)
 80092be:	6810      	ldr	r0, [r2, #0]
 80092c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2207      	movs	r2, #7
 80092c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,E,G,D");
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	33a4      	adds	r3, #164	; 0xa4
 80092cc:	4aa4      	ldr	r2, [pc, #656]	; (8009560 <problem_fetch+0x7bd0>)
 80092ce:	461c      	mov	r4, r3
 80092d0:	4613      	mov	r3, r2
 80092d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80092d4:	6020      	str	r0, [r4, #0]
 80092d6:	6061      	str	r1, [r4, #4]
 80092d8:	60a2      	str	r2, [r4, #8]
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4aa0      	ldr	r2, [pc, #640]	; (8009564 <problem_fetch+0x7bd4>)
 80092e4:	461d      	mov	r5, r3
 80092e6:	4614      	mov	r4, r2
 80092e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092ea:	6028      	str	r0, [r5, #0]
 80092ec:	6069      	str	r1, [r5, #4]
 80092ee:	60aa      	str	r2, [r5, #8]
 80092f0:	60eb      	str	r3, [r5, #12]
 80092f2:	8823      	ldrh	r3, [r4, #0]
 80092f4:	78a2      	ldrb	r2, [r4, #2]
 80092f6:	822b      	strh	r3, [r5, #16]
 80092f8:	4613      	mov	r3, r2
 80092fa:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009302:	4a99      	ldr	r2, [pc, #612]	; (8009568 <problem_fetch+0x7bd8>)
 8009304:	461c      	mov	r4, r3
 8009306:	4613      	mov	r3, r2
 8009308:	cb07      	ldmia	r3!, {r0, r1, r2}
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	6061      	str	r1, [r4, #4]
 800930e:	60a2      	str	r2, [r4, #8]
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	81a3      	strh	r3, [r4, #12]
			break;
 8009314:	f013 ba6c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 210 :
			strcpy(p->name,"ROLLING PEAS");
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800931e:	4a93      	ldr	r2, [pc, #588]	; (800956c <problem_fetch+0x7bdc>)
 8009320:	461c      	mov	r4, r3
 8009322:	4613      	mov	r3, r2
 8009324:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009326:	6020      	str	r0, [r4, #0]
 8009328:	6061      	str	r1, [r4, #4]
 800932a:	60a2      	str	r2, [r4, #8]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009336:	4a8e      	ldr	r2, [pc, #568]	; (8009570 <problem_fetch+0x7be0>)
 8009338:	8811      	ldrh	r1, [r2, #0]
 800933a:	7892      	ldrb	r2, [r2, #2]
 800933c:	8019      	strh	r1, [r3, #0]
 800933e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2206      	movs	r2, #6
 8009344:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	33a4      	adds	r3, #164	; 0xa4
 800934a:	4a8a      	ldr	r2, [pc, #552]	; (8009574 <problem_fetch+0x7be4>)
 800934c:	461c      	mov	r4, r3
 800934e:	4613      	mov	r3, r2
 8009350:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009352:	6020      	str	r0, [r4, #0]
 8009354:	6061      	str	r1, [r4, #4]
 8009356:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,15,18");
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3304      	adds	r3, #4
 800935c:	4a86      	ldr	r2, [pc, #536]	; (8009578 <problem_fetch+0x7be8>)
 800935e:	461c      	mov	r4, r3
 8009360:	4615      	mov	r5, r2
 8009362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	6061      	str	r1, [r4, #4]
 8009368:	60a2      	str	r2, [r4, #8]
 800936a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009372:	4a82      	ldr	r2, [pc, #520]	; (800957c <problem_fetch+0x7bec>)
 8009374:	461c      	mov	r4, r3
 8009376:	4613      	mov	r3, r2
 8009378:	cb07      	ldmia	r3!, {r0, r1, r2}
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	6061      	str	r1, [r4, #4]
 800937e:	60a2      	str	r2, [r4, #8]
			break;
 8009380:	f013 ba36 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 211 :
			strcpy(p->name,"SQUASHED PEAS");
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800938a:	4a7d      	ldr	r2, [pc, #500]	; (8009580 <problem_fetch+0x7bf0>)
 800938c:	461c      	mov	r4, r3
 800938e:	4613      	mov	r3, r2
 8009390:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009392:	6020      	str	r0, [r4, #0]
 8009394:	6061      	str	r1, [r4, #4]
 8009396:	60a2      	str	r2, [r4, #8]
 8009398:	881b      	ldrh	r3, [r3, #0]
 800939a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80093a2:	4a6e      	ldr	r2, [pc, #440]	; (800955c <problem_fetch+0x7bcc>)
 80093a4:	6810      	ldr	r0, [r2, #0]
 80093a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2208      	movs	r2, #8
 80093ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,I,E,G,D");
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	33a4      	adds	r3, #164	; 0xa4
 80093b2:	4a74      	ldr	r2, [pc, #464]	; (8009584 <problem_fetch+0x7bf4>)
 80093b4:	461c      	mov	r4, r3
 80093b6:	4615      	mov	r5, r2
 80093b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093ba:	6020      	str	r0, [r4, #0]
 80093bc:	6061      	str	r1, [r4, #4]
 80093be:	60a2      	str	r2, [r4, #8]
 80093c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,12,14,14,17,18");
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	3304      	adds	r3, #4
 80093c6:	4a70      	ldr	r2, [pc, #448]	; (8009588 <problem_fetch+0x7bf8>)
 80093c8:	461d      	mov	r5, r3
 80093ca:	4614      	mov	r4, r2
 80093cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093ce:	6028      	str	r0, [r5, #0]
 80093d0:	6069      	str	r1, [r5, #4]
 80093d2:	60aa      	str	r2, [r5, #8]
 80093d4:	60eb      	str	r3, [r5, #12]
 80093d6:	6820      	ldr	r0, [r4, #0]
 80093d8:	6128      	str	r0, [r5, #16]
 80093da:	88a3      	ldrh	r3, [r4, #4]
 80093dc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80093e4:	4a69      	ldr	r2, [pc, #420]	; (800958c <problem_fetch+0x7bfc>)
 80093e6:	461c      	mov	r4, r3
 80093e8:	4615      	mov	r5, r2
 80093ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093ec:	6020      	str	r0, [r4, #0]
 80093ee:	6061      	str	r1, [r4, #4]
 80093f0:	60a2      	str	r2, [r4, #8]
 80093f2:	60e3      	str	r3, [r4, #12]
			break;
 80093f4:	f013 b9fc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 212 :
			strcpy(p->name,"LAST PEA");
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80093fe:	4964      	ldr	r1, [pc, #400]	; (8009590 <problem_fetch+0x7c00>)
 8009400:	461a      	mov	r2, r3
 8009402:	460b      	mov	r3, r1
 8009404:	cb03      	ldmia	r3!, {r0, r1}
 8009406:	6010      	str	r0, [r2, #0]
 8009408:	6051      	str	r1, [r2, #4]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009414:	4a5f      	ldr	r2, [pc, #380]	; (8009594 <problem_fetch+0x7c04>)
 8009416:	8811      	ldrh	r1, [r2, #0]
 8009418:	7892      	ldrb	r2, [r2, #2]
 800941a:	8019      	strh	r1, [r3, #0]
 800941c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2209      	movs	r2, #9
 8009422:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,B,E,D,I,E,I");
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	33a4      	adds	r3, #164	; 0xa4
 8009428:	4a5b      	ldr	r2, [pc, #364]	; (8009598 <problem_fetch+0x7c08>)
 800942a:	461d      	mov	r5, r3
 800942c:	4614      	mov	r4, r2
 800942e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009430:	6028      	str	r0, [r5, #0]
 8009432:	6069      	str	r1, [r5, #4]
 8009434:	60aa      	str	r2, [r5, #8]
 8009436:	60eb      	str	r3, [r5, #12]
 8009438:	8823      	ldrh	r3, [r4, #0]
 800943a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,11,14,16,18");
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3304      	adds	r3, #4
 8009440:	4a56      	ldr	r2, [pc, #344]	; (800959c <problem_fetch+0x7c0c>)
 8009442:	461d      	mov	r5, r3
 8009444:	4614      	mov	r4, r2
 8009446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009448:	6028      	str	r0, [r5, #0]
 800944a:	6069      	str	r1, [r5, #4]
 800944c:	60aa      	str	r2, [r5, #8]
 800944e:	60eb      	str	r3, [r5, #12]
 8009450:	cc03      	ldmia	r4!, {r0, r1}
 8009452:	6128      	str	r0, [r5, #16]
 8009454:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800945c:	4a50      	ldr	r2, [pc, #320]	; (80095a0 <problem_fetch+0x7c10>)
 800945e:	461d      	mov	r5, r3
 8009460:	4614      	mov	r4, r2
 8009462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009464:	6028      	str	r0, [r5, #0]
 8009466:	6069      	str	r1, [r5, #4]
 8009468:	60aa      	str	r2, [r5, #8]
 800946a:	60eb      	str	r3, [r5, #12]
 800946c:	8823      	ldrh	r3, [r4, #0]
 800946e:	822b      	strh	r3, [r5, #16]
			break;
 8009470:	f013 b9be 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 213 :
			strcpy(p->name,"DIAGO");
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800947a:	4a4a      	ldr	r2, [pc, #296]	; (80095a4 <problem_fetch+0x7c14>)
 800947c:	6810      	ldr	r0, [r2, #0]
 800947e:	6018      	str	r0, [r3, #0]
 8009480:	8892      	ldrh	r2, [r2, #4]
 8009482:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800948a:	4a47      	ldr	r2, [pc, #284]	; (80095a8 <problem_fetch+0x7c18>)
 800948c:	6810      	ldr	r0, [r2, #0]
 800948e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2208      	movs	r2, #8
 8009494:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,E,F,D,A");
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	33a4      	adds	r3, #164	; 0xa4
 800949a:	4a44      	ldr	r2, [pc, #272]	; (80095ac <problem_fetch+0x7c1c>)
 800949c:	461c      	mov	r4, r3
 800949e:	4615      	mov	r5, r2
 80094a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	6061      	str	r1, [r4, #4]
 80094a6:	60a2      	str	r2, [r4, #8]
 80094a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,11,15,18");
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4a40      	ldr	r2, [pc, #256]	; (80095b0 <problem_fetch+0x7c20>)
 80094b0:	461d      	mov	r5, r3
 80094b2:	4614      	mov	r4, r2
 80094b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094b6:	6028      	str	r0, [r5, #0]
 80094b8:	6069      	str	r1, [r5, #4]
 80094ba:	60aa      	str	r2, [r5, #8]
 80094bc:	60eb      	str	r3, [r5, #12]
 80094be:	6820      	ldr	r0, [r4, #0]
 80094c0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80094c8:	4a30      	ldr	r2, [pc, #192]	; (800958c <problem_fetch+0x7bfc>)
 80094ca:	461c      	mov	r4, r3
 80094cc:	4615      	mov	r5, r2
 80094ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094d0:	6020      	str	r0, [r4, #0]
 80094d2:	6061      	str	r1, [r4, #4]
 80094d4:	60a2      	str	r2, [r4, #8]
 80094d6:	60e3      	str	r3, [r4, #12]
			break;
 80094d8:	f013 b98a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 214 :
			strcpy(p->name,"IV");
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80094e2:	4a34      	ldr	r2, [pc, #208]	; (80095b4 <problem_fetch+0x7c24>)
 80094e4:	8811      	ldrh	r1, [r2, #0]
 80094e6:	7892      	ldrb	r2, [r2, #2]
 80094e8:	8019      	strh	r1, [r3, #0]
 80094ea:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80094f2:	4a31      	ldr	r2, [pc, #196]	; (80095b8 <problem_fetch+0x7c28>)
 80094f4:	6810      	ldr	r0, [r2, #0]
 80094f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	220c      	movs	r2, #12
 80094fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,E,A,A,B,A,D,C,J,C");
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	33a4      	adds	r3, #164	; 0xa4
 8009502:	4a2e      	ldr	r2, [pc, #184]	; (80095bc <problem_fetch+0x7c2c>)
 8009504:	461d      	mov	r5, r3
 8009506:	4614      	mov	r4, r2
 8009508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800950a:	6028      	str	r0, [r5, #0]
 800950c:	6069      	str	r1, [r5, #4]
 800950e:	60aa      	str	r2, [r5, #8]
 8009510:	60eb      	str	r3, [r5, #12]
 8009512:	cc03      	ldmia	r4!, {r0, r1}
 8009514:	6128      	str	r0, [r5, #16]
 8009516:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"8,8,6,9,9,14,15,18,11,13,5,5");
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3304      	adds	r3, #4
 800951c:	4a28      	ldr	r2, [pc, #160]	; (80095c0 <problem_fetch+0x7c30>)
 800951e:	461d      	mov	r5, r3
 8009520:	4614      	mov	r4, r2
 8009522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009524:	6028      	str	r0, [r5, #0]
 8009526:	6069      	str	r1, [r5, #4]
 8009528:	60aa      	str	r2, [r5, #8]
 800952a:	60eb      	str	r3, [r5, #12]
 800952c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800952e:	6128      	str	r0, [r5, #16]
 8009530:	6169      	str	r1, [r5, #20]
 8009532:	61aa      	str	r2, [r5, #24]
 8009534:	7823      	ldrb	r3, [r4, #0]
 8009536:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"d,d,s,d,d,d,d,e,d,d,s,d");
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800953e:	4a21      	ldr	r2, [pc, #132]	; (80095c4 <problem_fetch+0x7c34>)
 8009540:	461d      	mov	r5, r3
 8009542:	4614      	mov	r4, r2
 8009544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009546:	6028      	str	r0, [r5, #0]
 8009548:	6069      	str	r1, [r5, #4]
 800954a:	60aa      	str	r2, [r5, #8]
 800954c:	60eb      	str	r3, [r5, #12]
 800954e:	cc03      	ldmia	r4!, {r0, r1}
 8009550:	6128      	str	r0, [r5, #16]
 8009552:	6169      	str	r1, [r5, #20]
			break;
 8009554:	f013 b94c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8009558:	08026560 	.word	0x08026560
 800955c:	08023c28 	.word	0x08023c28
 8009560:	08026568 	.word	0x08026568
 8009564:	08026578 	.word	0x08026578
 8009568:	08023d18 	.word	0x08023d18
 800956c:	0802658c 	.word	0x0802658c
 8009570:	08023c5c 	.word	0x08023c5c
 8009574:	0802659c 	.word	0x0802659c
 8009578:	080265a8 	.word	0x080265a8
 800957c:	08023b70 	.word	0x08023b70
 8009580:	080265b8 	.word	0x080265b8
 8009584:	080265c8 	.word	0x080265c8
 8009588:	080265d8 	.word	0x080265d8
 800958c:	08023cb4 	.word	0x08023cb4
 8009590:	080265f0 	.word	0x080265f0
 8009594:	08023b50 	.word	0x08023b50
 8009598:	080265fc 	.word	0x080265fc
 800959c:	08026610 	.word	0x08026610
 80095a0:	08024b74 	.word	0x08024b74
 80095a4:	08026628 	.word	0x08026628
 80095a8:	08023ccc 	.word	0x08023ccc
 80095ac:	08026630 	.word	0x08026630
 80095b0:	08026640 	.word	0x08026640
 80095b4:	08026654 	.word	0x08026654
 80095b8:	08023b90 	.word	0x08023b90
 80095bc:	08026658 	.word	0x08026658
 80095c0:	08026670 	.word	0x08026670
 80095c4:	08026690 	.word	0x08026690
		case 215 :
			strcpy(p->name,"III");
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80095ce:	4aba      	ldr	r2, [pc, #744]	; (80098b8 <problem_fetch+0x7f28>)
 80095d0:	6810      	ldr	r0, [r2, #0]
 80095d2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80095da:	4ab8      	ldr	r2, [pc, #736]	; (80098bc <problem_fetch+0x7f2c>)
 80095dc:	6810      	ldr	r0, [r2, #0]
 80095de:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	220e      	movs	r2, #14
 80095e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,D,G,E,C,B,C,H,H,H,K,J,J");
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	33a4      	adds	r3, #164	; 0xa4
 80095ea:	4ab5      	ldr	r2, [pc, #724]	; (80098c0 <problem_fetch+0x7f30>)
 80095ec:	461d      	mov	r5, r3
 80095ee:	4614      	mov	r4, r2
 80095f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80095f2:	6028      	str	r0, [r5, #0]
 80095f4:	6069      	str	r1, [r5, #4]
 80095f6:	60aa      	str	r2, [r5, #8]
 80095f8:	60eb      	str	r3, [r5, #12]
 80095fa:	cc07      	ldmia	r4!, {r0, r1, r2}
 80095fc:	6128      	str	r0, [r5, #16]
 80095fe:	6169      	str	r1, [r5, #20]
 8009600:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"16,16,18,9,8,8,6,5,10,16,12,14,12,7");
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3304      	adds	r3, #4
 8009606:	4aaf      	ldr	r2, [pc, #700]	; (80098c4 <problem_fetch+0x7f34>)
 8009608:	4614      	mov	r4, r2
 800960a:	469c      	mov	ip, r3
 800960c:	f104 0e20 	add.w	lr, r4, #32
 8009610:	4665      	mov	r5, ip
 8009612:	4626      	mov	r6, r4
 8009614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009616:	6028      	str	r0, [r5, #0]
 8009618:	6069      	str	r1, [r5, #4]
 800961a:	60aa      	str	r2, [r5, #8]
 800961c:	60eb      	str	r3, [r5, #12]
 800961e:	3410      	adds	r4, #16
 8009620:	f10c 0c10 	add.w	ip, ip, #16
 8009624:	4574      	cmp	r4, lr
 8009626:	d1f3      	bne.n	8009610 <problem_fetch+0x7c80>
 8009628:	4663      	mov	r3, ip
 800962a:	4622      	mov	r2, r4
 800962c:	6810      	ldr	r0, [r2, #0]
 800962e:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"d,d,e,d,d,d,s,s,d,d,d,d,d,d");
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009636:	4aa4      	ldr	r2, [pc, #656]	; (80098c8 <problem_fetch+0x7f38>)
 8009638:	461d      	mov	r5, r3
 800963a:	4614      	mov	r4, r2
 800963c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800963e:	6028      	str	r0, [r5, #0]
 8009640:	6069      	str	r1, [r5, #4]
 8009642:	60aa      	str	r2, [r5, #8]
 8009644:	60eb      	str	r3, [r5, #12]
 8009646:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009648:	6128      	str	r0, [r5, #16]
 800964a:	6169      	str	r1, [r5, #20]
 800964c:	61aa      	str	r2, [r5, #24]
			break;
 800964e:	f013 b8cf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 216 :
			strcpy(p->name,"I");
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009658:	499c      	ldr	r1, [pc, #624]	; (80098cc <problem_fetch+0x7f3c>)
 800965a:	461a      	mov	r2, r3
 800965c:	460b      	mov	r3, r1
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	8013      	strh	r3, [r2, #0]
			strcpy(p->grade,"6B+");
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009668:	4a94      	ldr	r2, [pc, #592]	; (80098bc <problem_fetch+0x7f2c>)
 800966a:	6810      	ldr	r0, [r2, #0]
 800966c:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	220e      	movs	r2, #14
 8009672:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,G,G,J,J,I,I,E,H,E,D");
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	33a4      	adds	r3, #164	; 0xa4
 8009678:	4a95      	ldr	r2, [pc, #596]	; (80098d0 <problem_fetch+0x7f40>)
 800967a:	461d      	mov	r5, r3
 800967c:	4614      	mov	r4, r2
 800967e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009680:	6028      	str	r0, [r5, #0]
 8009682:	6069      	str	r1, [r5, #4]
 8009684:	60aa      	str	r2, [r5, #8]
 8009686:	60eb      	str	r3, [r5, #12]
 8009688:	cc07      	ldmia	r4!, {r0, r1, r2}
 800968a:	6128      	str	r0, [r5, #16]
 800968c:	6169      	str	r1, [r5, #20]
 800968e:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"14,14,12,12,4,9,7,5,7,9,8,5,16,18");
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	3304      	adds	r3, #4
 8009694:	4a8f      	ldr	r2, [pc, #572]	; (80098d4 <problem_fetch+0x7f44>)
 8009696:	4614      	mov	r4, r2
 8009698:	469c      	mov	ip, r3
 800969a:	f104 0e20 	add.w	lr, r4, #32
 800969e:	4665      	mov	r5, ip
 80096a0:	4626      	mov	r6, r4
 80096a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80096a4:	6028      	str	r0, [r5, #0]
 80096a6:	6069      	str	r1, [r5, #4]
 80096a8:	60aa      	str	r2, [r5, #8]
 80096aa:	60eb      	str	r3, [r5, #12]
 80096ac:	3410      	adds	r4, #16
 80096ae:	f10c 0c10 	add.w	ip, ip, #16
 80096b2:	4574      	cmp	r4, lr
 80096b4:	d1f3      	bne.n	800969e <problem_fetch+0x7d0e>
 80096b6:	4662      	mov	r2, ip
 80096b8:	4623      	mov	r3, r4
 80096ba:	881b      	ldrh	r3, [r3, #0]
 80096bc:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"d,d,d,d,s,d,d,d,d,d,d,d,d,e");
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80096c4:	4a84      	ldr	r2, [pc, #528]	; (80098d8 <problem_fetch+0x7f48>)
 80096c6:	461d      	mov	r5, r3
 80096c8:	4614      	mov	r4, r2
 80096ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096cc:	6028      	str	r0, [r5, #0]
 80096ce:	6069      	str	r1, [r5, #4]
 80096d0:	60aa      	str	r2, [r5, #8]
 80096d2:	60eb      	str	r3, [r5, #12]
 80096d4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80096d6:	6128      	str	r0, [r5, #16]
 80096d8:	6169      	str	r1, [r5, #20]
 80096da:	61aa      	str	r2, [r5, #24]
			break;
 80096dc:	f013 b888 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 217 :
			strcpy(p->name,"NEW");
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80096e6:	4a7d      	ldr	r2, [pc, #500]	; (80098dc <problem_fetch+0x7f4c>)
 80096e8:	6810      	ldr	r0, [r2, #0]
 80096ea:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80096f2:	4a72      	ldr	r2, [pc, #456]	; (80098bc <problem_fetch+0x7f2c>)
 80096f4:	6810      	ldr	r0, [r2, #0]
 80096f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	220e      	movs	r2, #14
 80096fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I,H,G,H,I,H,H,I,I,I,J");
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	33a4      	adds	r3, #164	; 0xa4
 8009702:	4a77      	ldr	r2, [pc, #476]	; (80098e0 <problem_fetch+0x7f50>)
 8009704:	461d      	mov	r5, r3
 8009706:	4614      	mov	r4, r2
 8009708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800970a:	6028      	str	r0, [r5, #0]
 800970c:	6069      	str	r1, [r5, #4]
 800970e:	60aa      	str	r2, [r5, #8]
 8009710:	60eb      	str	r3, [r5, #12]
 8009712:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009714:	6128      	str	r0, [r5, #16]
 8009716:	6169      	str	r1, [r5, #20]
 8009718:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,6,7,8,9,10,10,12,13,14,15,18,16");
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	4a71      	ldr	r2, [pc, #452]	; (80098e4 <problem_fetch+0x7f54>)
 8009720:	4614      	mov	r4, r2
 8009722:	469c      	mov	ip, r3
 8009724:	f104 0e20 	add.w	lr, r4, #32
 8009728:	4665      	mov	r5, ip
 800972a:	4626      	mov	r6, r4
 800972c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800972e:	6028      	str	r0, [r5, #0]
 8009730:	6069      	str	r1, [r5, #4]
 8009732:	60aa      	str	r2, [r5, #8]
 8009734:	60eb      	str	r3, [r5, #12]
 8009736:	3410      	adds	r4, #16
 8009738:	f10c 0c10 	add.w	ip, ip, #16
 800973c:	4574      	cmp	r4, lr
 800973e:	d1f3      	bne.n	8009728 <problem_fetch+0x7d98>
 8009740:	4663      	mov	r3, ip
 8009742:	4622      	mov	r2, r4
 8009744:	6810      	ldr	r0, [r2, #0]
 8009746:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e,d");
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800974e:	4a66      	ldr	r2, [pc, #408]	; (80098e8 <problem_fetch+0x7f58>)
 8009750:	461d      	mov	r5, r3
 8009752:	4614      	mov	r4, r2
 8009754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009756:	6028      	str	r0, [r5, #0]
 8009758:	6069      	str	r1, [r5, #4]
 800975a:	60aa      	str	r2, [r5, #8]
 800975c:	60eb      	str	r3, [r5, #12]
 800975e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009760:	6128      	str	r0, [r5, #16]
 8009762:	6169      	str	r1, [r5, #20]
 8009764:	61aa      	str	r2, [r5, #24]
			break;
 8009766:	f013 b843 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 218 :
			strcpy(p->name,"THE BLACK");
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009770:	495e      	ldr	r1, [pc, #376]	; (80098ec <problem_fetch+0x7f5c>)
 8009772:	461a      	mov	r2, r3
 8009774:	460b      	mov	r3, r1
 8009776:	cb03      	ldmia	r3!, {r0, r1}
 8009778:	6010      	str	r0, [r2, #0]
 800977a:	6051      	str	r1, [r2, #4]
 800977c:	881b      	ldrh	r3, [r3, #0]
 800977e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009786:	4a5a      	ldr	r2, [pc, #360]	; (80098f0 <problem_fetch+0x7f60>)
 8009788:	6810      	ldr	r0, [r2, #0]
 800978a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2207      	movs	r2, #7
 8009790:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,C,H,K,I");
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	33a4      	adds	r3, #164	; 0xa4
 8009796:	4a57      	ldr	r2, [pc, #348]	; (80098f4 <problem_fetch+0x7f64>)
 8009798:	461c      	mov	r4, r3
 800979a:	4613      	mov	r3, r2
 800979c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800979e:	6020      	str	r0, [r4, #0]
 80097a0:	6061      	str	r1, [r4, #4]
 80097a2:	60a2      	str	r2, [r4, #8]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4a52      	ldr	r2, [pc, #328]	; (80098f8 <problem_fetch+0x7f68>)
 80097ae:	461d      	mov	r5, r3
 80097b0:	4614      	mov	r4, r2
 80097b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097b4:	6028      	str	r0, [r5, #0]
 80097b6:	6069      	str	r1, [r5, #4]
 80097b8:	60aa      	str	r2, [r5, #8]
 80097ba:	60eb      	str	r3, [r5, #12]
 80097bc:	8823      	ldrh	r3, [r4, #0]
 80097be:	78a2      	ldrb	r2, [r4, #2]
 80097c0:	822b      	strh	r3, [r5, #16]
 80097c2:	4613      	mov	r3, r2
 80097c4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80097cc:	4a4b      	ldr	r2, [pc, #300]	; (80098fc <problem_fetch+0x7f6c>)
 80097ce:	461c      	mov	r4, r3
 80097d0:	4613      	mov	r3, r2
 80097d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80097d4:	6020      	str	r0, [r4, #0]
 80097d6:	6061      	str	r1, [r4, #4]
 80097d8:	60a2      	str	r2, [r4, #8]
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	81a3      	strh	r3, [r4, #12]
			break;
 80097de:	f013 b807 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 219 :
			strcpy(p->name,"KLIK IT");
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80097e8:	4945      	ldr	r1, [pc, #276]	; (8009900 <problem_fetch+0x7f70>)
 80097ea:	461a      	mov	r2, r3
 80097ec:	460b      	mov	r3, r1
 80097ee:	cb03      	ldmia	r3!, {r0, r1}
 80097f0:	6010      	str	r0, [r2, #0]
 80097f2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80097fa:	4a42      	ldr	r2, [pc, #264]	; (8009904 <problem_fetch+0x7f74>)
 80097fc:	8811      	ldrh	r1, [r2, #0]
 80097fe:	7892      	ldrb	r2, [r2, #2]
 8009800:	8019      	strh	r1, [r3, #0]
 8009802:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2205      	movs	r2, #5
 8009808:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,A,D");
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	33a4      	adds	r3, #164	; 0xa4
 800980e:	493e      	ldr	r1, [pc, #248]	; (8009908 <problem_fetch+0x7f78>)
 8009810:	461a      	mov	r2, r3
 8009812:	460b      	mov	r3, r1
 8009814:	cb03      	ldmia	r3!, {r0, r1}
 8009816:	6010      	str	r0, [r2, #0]
 8009818:	6051      	str	r1, [r2, #4]
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3304      	adds	r3, #4
 8009822:	4a3a      	ldr	r2, [pc, #232]	; (800990c <problem_fetch+0x7f7c>)
 8009824:	461c      	mov	r4, r3
 8009826:	4613      	mov	r3, r2
 8009828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800982a:	6020      	str	r0, [r4, #0]
 800982c:	6061      	str	r1, [r4, #4]
 800982e:	60a2      	str	r2, [r4, #8]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800983a:	4935      	ldr	r1, [pc, #212]	; (8009910 <problem_fetch+0x7f80>)
 800983c:	461a      	mov	r2, r3
 800983e:	460b      	mov	r3, r1
 8009840:	cb03      	ldmia	r3!, {r0, r1}
 8009842:	6010      	str	r0, [r2, #0]
 8009844:	6051      	str	r1, [r2, #4]
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	8113      	strh	r3, [r2, #8]
			break;
 800984a:	f012 bfd1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 220 :
			strcpy(p->name,"SOFA 3");
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009854:	4a2f      	ldr	r2, [pc, #188]	; (8009914 <problem_fetch+0x7f84>)
 8009856:	6810      	ldr	r0, [r2, #0]
 8009858:	6018      	str	r0, [r3, #0]
 800985a:	8891      	ldrh	r1, [r2, #4]
 800985c:	7992      	ldrb	r2, [r2, #6]
 800985e:	8099      	strh	r1, [r3, #4]
 8009860:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009868:	4a2b      	ldr	r2, [pc, #172]	; (8009918 <problem_fetch+0x7f88>)
 800986a:	6810      	ldr	r0, [r2, #0]
 800986c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2205      	movs	r2, #5
 8009872:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,J,I");
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	33a4      	adds	r3, #164	; 0xa4
 8009878:	4928      	ldr	r1, [pc, #160]	; (800991c <problem_fetch+0x7f8c>)
 800987a:	461a      	mov	r2, r3
 800987c:	460b      	mov	r3, r1
 800987e:	cb03      	ldmia	r3!, {r0, r1}
 8009880:	6010      	str	r0, [r2, #0]
 8009882:	6051      	str	r1, [r2, #4]
 8009884:	881b      	ldrh	r3, [r3, #0]
 8009886:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,12,13,18");
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	4a24      	ldr	r2, [pc, #144]	; (8009920 <problem_fetch+0x7f90>)
 800988e:	461c      	mov	r4, r3
 8009890:	4613      	mov	r3, r2
 8009892:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009894:	6020      	str	r0, [r4, #0]
 8009896:	6061      	str	r1, [r4, #4]
 8009898:	60a2      	str	r2, [r4, #8]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80098a4:	491a      	ldr	r1, [pc, #104]	; (8009910 <problem_fetch+0x7f80>)
 80098a6:	461a      	mov	r2, r3
 80098a8:	460b      	mov	r3, r1
 80098aa:	cb03      	ldmia	r3!, {r0, r1}
 80098ac:	6010      	str	r0, [r2, #0]
 80098ae:	6051      	str	r1, [r2, #4]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	8113      	strh	r3, [r2, #8]
			break;
 80098b4:	f012 bf9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80098b8:	080266a8 	.word	0x080266a8
 80098bc:	08023b90 	.word	0x08023b90
 80098c0:	080266ac 	.word	0x080266ac
 80098c4:	080266c8 	.word	0x080266c8
 80098c8:	080266ec 	.word	0x080266ec
 80098cc:	08026708 	.word	0x08026708
 80098d0:	0802670c 	.word	0x0802670c
 80098d4:	08026728 	.word	0x08026728
 80098d8:	0802674c 	.word	0x0802674c
 80098dc:	08026768 	.word	0x08026768
 80098e0:	0802676c 	.word	0x0802676c
 80098e4:	08026788 	.word	0x08026788
 80098e8:	080267ac 	.word	0x080267ac
 80098ec:	080267c8 	.word	0x080267c8
 80098f0:	08023d30 	.word	0x08023d30
 80098f4:	080267d4 	.word	0x080267d4
 80098f8:	080258a4 	.word	0x080258a4
 80098fc:	08023d18 	.word	0x08023d18
 8009900:	080267e4 	.word	0x080267e4
 8009904:	080243c4 	.word	0x080243c4
 8009908:	080267ec 	.word	0x080267ec
 800990c:	080252c4 	.word	0x080252c4
 8009910:	0802405c 	.word	0x0802405c
 8009914:	080267f8 	.word	0x080267f8
 8009918:	08023ccc 	.word	0x08023ccc
 800991c:	08026800 	.word	0x08026800
 8009920:	0802680c 	.word	0x0802680c
		case 221 :
			strcpy(p->name,"ET");
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800992a:	4aad      	ldr	r2, [pc, #692]	; (8009be0 <problem_fetch+0x8250>)
 800992c:	8811      	ldrh	r1, [r2, #0]
 800992e:	7892      	ldrb	r2, [r2, #2]
 8009930:	8019      	strh	r1, [r3, #0]
 8009932:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800993a:	4aaa      	ldr	r2, [pc, #680]	; (8009be4 <problem_fetch+0x8254>)
 800993c:	8811      	ldrh	r1, [r2, #0]
 800993e:	7892      	ldrb	r2, [r2, #2]
 8009940:	8019      	strh	r1, [r3, #0]
 8009942:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2207      	movs	r2, #7
 8009948:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,B,E,E,I");
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	33a4      	adds	r3, #164	; 0xa4
 800994e:	4aa6      	ldr	r2, [pc, #664]	; (8009be8 <problem_fetch+0x8258>)
 8009950:	461c      	mov	r4, r3
 8009952:	4613      	mov	r3, r2
 8009954:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009956:	6020      	str	r0, [r4, #0]
 8009958:	6061      	str	r1, [r4, #4]
 800995a:	60a2      	str	r2, [r4, #8]
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3304      	adds	r3, #4
 8009964:	4aa1      	ldr	r2, [pc, #644]	; (8009bec <problem_fetch+0x825c>)
 8009966:	461d      	mov	r5, r3
 8009968:	4614      	mov	r4, r2
 800996a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800996c:	6028      	str	r0, [r5, #0]
 800996e:	6069      	str	r1, [r5, #4]
 8009970:	60aa      	str	r2, [r5, #8]
 8009972:	60eb      	str	r3, [r5, #12]
 8009974:	8823      	ldrh	r3, [r4, #0]
 8009976:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800997e:	4a9c      	ldr	r2, [pc, #624]	; (8009bf0 <problem_fetch+0x8260>)
 8009980:	461c      	mov	r4, r3
 8009982:	4613      	mov	r3, r2
 8009984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	6061      	str	r1, [r4, #4]
 800998a:	60a2      	str	r2, [r4, #8]
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	81a3      	strh	r3, [r4, #12]
			break;
 8009990:	f012 bf2e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 222 :
			strcpy(p->name,"THE WALL 1");
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800999a:	4996      	ldr	r1, [pc, #600]	; (8009bf4 <problem_fetch+0x8264>)
 800999c:	461a      	mov	r2, r3
 800999e:	460b      	mov	r3, r1
 80099a0:	cb03      	ldmia	r3!, {r0, r1}
 80099a2:	6010      	str	r0, [r2, #0]
 80099a4:	6051      	str	r1, [r2, #4]
 80099a6:	8819      	ldrh	r1, [r3, #0]
 80099a8:	789b      	ldrb	r3, [r3, #2]
 80099aa:	8111      	strh	r1, [r2, #8]
 80099ac:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099b4:	4a8b      	ldr	r2, [pc, #556]	; (8009be4 <problem_fetch+0x8254>)
 80099b6:	8811      	ldrh	r1, [r2, #0]
 80099b8:	7892      	ldrb	r2, [r2, #2]
 80099ba:	8019      	strh	r1, [r3, #0]
 80099bc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2209      	movs	r2, #9
 80099c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,F,F,I,E,I");
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	33a4      	adds	r3, #164	; 0xa4
 80099c8:	4a8b      	ldr	r2, [pc, #556]	; (8009bf8 <problem_fetch+0x8268>)
 80099ca:	461d      	mov	r5, r3
 80099cc:	4614      	mov	r4, r2
 80099ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099d0:	6028      	str	r0, [r5, #0]
 80099d2:	6069      	str	r1, [r5, #4]
 80099d4:	60aa      	str	r2, [r5, #8]
 80099d6:	60eb      	str	r3, [r5, #12]
 80099d8:	8823      	ldrh	r3, [r4, #0]
 80099da:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,10,11,13,14,16,18");
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	3304      	adds	r3, #4
 80099e0:	4a86      	ldr	r2, [pc, #536]	; (8009bfc <problem_fetch+0x826c>)
 80099e2:	461d      	mov	r5, r3
 80099e4:	4614      	mov	r4, r2
 80099e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099e8:	6028      	str	r0, [r5, #0]
 80099ea:	6069      	str	r1, [r5, #4]
 80099ec:	60aa      	str	r2, [r5, #8]
 80099ee:	60eb      	str	r3, [r5, #12]
 80099f0:	cc03      	ldmia	r4!, {r0, r1}
 80099f2:	6128      	str	r0, [r5, #16]
 80099f4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80099fc:	4a80      	ldr	r2, [pc, #512]	; (8009c00 <problem_fetch+0x8270>)
 80099fe:	461d      	mov	r5, r3
 8009a00:	4614      	mov	r4, r2
 8009a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a04:	6028      	str	r0, [r5, #0]
 8009a06:	6069      	str	r1, [r5, #4]
 8009a08:	60aa      	str	r2, [r5, #8]
 8009a0a:	60eb      	str	r3, [r5, #12]
 8009a0c:	8823      	ldrh	r3, [r4, #0]
 8009a0e:	822b      	strh	r3, [r5, #16]
			break;
 8009a10:	f012 beee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 223 :
			strcpy(p->name,"OACHKAZL");
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a1a:	497a      	ldr	r1, [pc, #488]	; (8009c04 <problem_fetch+0x8274>)
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	460b      	mov	r3, r1
 8009a20:	cb03      	ldmia	r3!, {r0, r1}
 8009a22:	6010      	str	r0, [r2, #0]
 8009a24:	6051      	str	r1, [r2, #4]
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a30:	4a75      	ldr	r2, [pc, #468]	; (8009c08 <problem_fetch+0x8278>)
 8009a32:	6810      	ldr	r0, [r2, #0]
 8009a34:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,D,D,C");
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	33a4      	adds	r3, #164	; 0xa4
 8009a40:	4a72      	ldr	r2, [pc, #456]	; (8009c0c <problem_fetch+0x827c>)
 8009a42:	461c      	mov	r4, r3
 8009a44:	4615      	mov	r5, r2
 8009a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a48:	6020      	str	r0, [r4, #0]
 8009a4a:	6061      	str	r1, [r4, #4]
 8009a4c:	60a2      	str	r2, [r4, #8]
 8009a4e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,16,18,15,8");
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	3304      	adds	r3, #4
 8009a54:	4a6e      	ldr	r2, [pc, #440]	; (8009c10 <problem_fetch+0x8280>)
 8009a56:	461d      	mov	r5, r3
 8009a58:	4614      	mov	r4, r2
 8009a5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a5c:	6028      	str	r0, [r5, #0]
 8009a5e:	6069      	str	r1, [r5, #4]
 8009a60:	60aa      	str	r2, [r5, #8]
 8009a62:	60eb      	str	r3, [r5, #12]
 8009a64:	6820      	ldr	r0, [r4, #0]
 8009a66:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d,d");
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009a6e:	4a69      	ldr	r2, [pc, #420]	; (8009c14 <problem_fetch+0x8284>)
 8009a70:	461c      	mov	r4, r3
 8009a72:	4615      	mov	r5, r2
 8009a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a76:	6020      	str	r0, [r4, #0]
 8009a78:	6061      	str	r1, [r4, #4]
 8009a7a:	60a2      	str	r2, [r4, #8]
 8009a7c:	60e3      	str	r3, [r4, #12]
			break;
 8009a7e:	f012 beb7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 224 :
			strcpy(p->name,"LA BANDA DEL PATIO");
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a88:	4a63      	ldr	r2, [pc, #396]	; (8009c18 <problem_fetch+0x8288>)
 8009a8a:	461d      	mov	r5, r3
 8009a8c:	4614      	mov	r4, r2
 8009a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a90:	6028      	str	r0, [r5, #0]
 8009a92:	6069      	str	r1, [r5, #4]
 8009a94:	60aa      	str	r2, [r5, #8]
 8009a96:	60eb      	str	r3, [r5, #12]
 8009a98:	8823      	ldrh	r3, [r4, #0]
 8009a9a:	78a2      	ldrb	r2, [r4, #2]
 8009a9c:	822b      	strh	r3, [r5, #16]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009aa8:	4a5c      	ldr	r2, [pc, #368]	; (8009c1c <problem_fetch+0x828c>)
 8009aaa:	6810      	ldr	r0, [r2, #0]
 8009aac:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,C,B,E,A,D");
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	33a4      	adds	r3, #164	; 0xa4
 8009ab8:	4a59      	ldr	r2, [pc, #356]	; (8009c20 <problem_fetch+0x8290>)
 8009aba:	461c      	mov	r4, r3
 8009abc:	4615      	mov	r5, r2
 8009abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ac0:	6020      	str	r0, [r4, #0]
 8009ac2:	6061      	str	r1, [r4, #4]
 8009ac4:	60a2      	str	r2, [r4, #8]
 8009ac6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,8,12,12,14,18");
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	3304      	adds	r3, #4
 8009acc:	4a55      	ldr	r2, [pc, #340]	; (8009c24 <problem_fetch+0x8294>)
 8009ace:	461d      	mov	r5, r3
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ad4:	6028      	str	r0, [r5, #0]
 8009ad6:	6069      	str	r1, [r5, #4]
 8009ad8:	60aa      	str	r2, [r5, #8]
 8009ada:	60eb      	str	r3, [r5, #12]
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009ae6:	4a50      	ldr	r2, [pc, #320]	; (8009c28 <problem_fetch+0x8298>)
 8009ae8:	461c      	mov	r4, r3
 8009aea:	4615      	mov	r5, r2
 8009aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009aee:	6020      	str	r0, [r4, #0]
 8009af0:	6061      	str	r1, [r4, #4]
 8009af2:	60a2      	str	r2, [r4, #8]
 8009af4:	60e3      	str	r3, [r4, #12]
			break;
 8009af6:	f012 be7b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 225 :
			strcpy(p->name,"GLUTAMATO MONOSODICO");
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b00:	4a4a      	ldr	r2, [pc, #296]	; (8009c2c <problem_fetch+0x829c>)
 8009b02:	461d      	mov	r5, r3
 8009b04:	4614      	mov	r4, r2
 8009b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b08:	6028      	str	r0, [r5, #0]
 8009b0a:	6069      	str	r1, [r5, #4]
 8009b0c:	60aa      	str	r2, [r5, #8]
 8009b0e:	60eb      	str	r3, [r5, #12]
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	6128      	str	r0, [r5, #16]
 8009b14:	7923      	ldrb	r3, [r4, #4]
 8009b16:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b1e:	4a3f      	ldr	r2, [pc, #252]	; (8009c1c <problem_fetch+0x828c>)
 8009b20:	6810      	ldr	r0, [r2, #0]
 8009b22:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2207      	movs	r2, #7
 8009b28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,B,E,D");
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	33a4      	adds	r3, #164	; 0xa4
 8009b2e:	4a40      	ldr	r2, [pc, #256]	; (8009c30 <problem_fetch+0x82a0>)
 8009b30:	461c      	mov	r4, r3
 8009b32:	4613      	mov	r3, r2
 8009b34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b36:	6020      	str	r0, [r4, #0]
 8009b38:	6061      	str	r1, [r4, #4]
 8009b3a:	60a2      	str	r2, [r4, #8]
 8009b3c:	881b      	ldrh	r3, [r3, #0]
 8009b3e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,12,18");
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3304      	adds	r3, #4
 8009b44:	4a3b      	ldr	r2, [pc, #236]	; (8009c34 <problem_fetch+0x82a4>)
 8009b46:	461d      	mov	r5, r3
 8009b48:	4614      	mov	r4, r2
 8009b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b4c:	6028      	str	r0, [r5, #0]
 8009b4e:	6069      	str	r1, [r5, #4]
 8009b50:	60aa      	str	r2, [r5, #8]
 8009b52:	60eb      	str	r3, [r5, #12]
 8009b54:	7823      	ldrb	r3, [r4, #0]
 8009b56:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009b5e:	4a36      	ldr	r2, [pc, #216]	; (8009c38 <problem_fetch+0x82a8>)
 8009b60:	461c      	mov	r4, r3
 8009b62:	4613      	mov	r3, r2
 8009b64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b66:	6020      	str	r0, [r4, #0]
 8009b68:	6061      	str	r1, [r4, #4]
 8009b6a:	60a2      	str	r2, [r4, #8]
 8009b6c:	881b      	ldrh	r3, [r3, #0]
 8009b6e:	81a3      	strh	r3, [r4, #12]
			break;
 8009b70:	f012 be3e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 226 :
			strcpy(p->name,"LOST DAY");
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b7a:	4930      	ldr	r1, [pc, #192]	; (8009c3c <problem_fetch+0x82ac>)
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	460b      	mov	r3, r1
 8009b80:	cb03      	ldmia	r3!, {r0, r1}
 8009b82:	6010      	str	r0, [r2, #0]
 8009b84:	6051      	str	r1, [r2, #4]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b90:	4a14      	ldr	r2, [pc, #80]	; (8009be4 <problem_fetch+0x8254>)
 8009b92:	8811      	ldrh	r1, [r2, #0]
 8009b94:	7892      	ldrb	r2, [r2, #2]
 8009b96:	8019      	strh	r1, [r3, #0]
 8009b98:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2206      	movs	r2, #6
 8009b9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,D");
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	33a4      	adds	r3, #164	; 0xa4
 8009ba4:	4a26      	ldr	r2, [pc, #152]	; (8009c40 <problem_fetch+0x82b0>)
 8009ba6:	461c      	mov	r4, r3
 8009ba8:	4613      	mov	r3, r2
 8009baa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bac:	6020      	str	r0, [r4, #0]
 8009bae:	6061      	str	r1, [r4, #4]
 8009bb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4a23      	ldr	r2, [pc, #140]	; (8009c44 <problem_fetch+0x82b4>)
 8009bb8:	461c      	mov	r4, r3
 8009bba:	4615      	mov	r5, r2
 8009bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bbe:	6020      	str	r0, [r4, #0]
 8009bc0:	6061      	str	r1, [r4, #4]
 8009bc2:	60a2      	str	r2, [r4, #8]
 8009bc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009bcc:	4a1e      	ldr	r2, [pc, #120]	; (8009c48 <problem_fetch+0x82b8>)
 8009bce:	461c      	mov	r4, r3
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bd4:	6020      	str	r0, [r4, #0]
 8009bd6:	6061      	str	r1, [r4, #4]
 8009bd8:	60a2      	str	r2, [r4, #8]
			break;
 8009bda:	f012 be09 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8009bde:	bf00      	nop
 8009be0:	0802681c 	.word	0x0802681c
 8009be4:	08023c5c 	.word	0x08023c5c
 8009be8:	08026820 	.word	0x08026820
 8009bec:	08026830 	.word	0x08026830
 8009bf0:	08023d18 	.word	0x08023d18
 8009bf4:	08026844 	.word	0x08026844
 8009bf8:	08026850 	.word	0x08026850
 8009bfc:	08026864 	.word	0x08026864
 8009c00:	08024b74 	.word	0x08024b74
 8009c04:	0802687c 	.word	0x0802687c
 8009c08:	08023d30 	.word	0x08023d30
 8009c0c:	08026888 	.word	0x08026888
 8009c10:	08026898 	.word	0x08026898
 8009c14:	080268ac 	.word	0x080268ac
 8009c18:	080268bc 	.word	0x080268bc
 8009c1c:	08023b90 	.word	0x08023b90
 8009c20:	080268d0 	.word	0x080268d0
 8009c24:	080268e0 	.word	0x080268e0
 8009c28:	08023cb4 	.word	0x08023cb4
 8009c2c:	080268f4 	.word	0x080268f4
 8009c30:	0802690c 	.word	0x0802690c
 8009c34:	0802691c 	.word	0x0802691c
 8009c38:	08023c08 	.word	0x08023c08
 8009c3c:	08026930 	.word	0x08026930
 8009c40:	0802693c 	.word	0x0802693c
 8009c44:	08026948 	.word	0x08026948
 8009c48:	08023b70 	.word	0x08023b70
		case 227 :
			strcpy(p->name,"FOR BEGINNERS - 3");
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c52:	4aab      	ldr	r2, [pc, #684]	; (8009f00 <problem_fetch+0x8570>)
 8009c54:	461d      	mov	r5, r3
 8009c56:	4614      	mov	r4, r2
 8009c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c5a:	6028      	str	r0, [r5, #0]
 8009c5c:	6069      	str	r1, [r5, #4]
 8009c5e:	60aa      	str	r2, [r5, #8]
 8009c60:	60eb      	str	r3, [r5, #12]
 8009c62:	8823      	ldrh	r3, [r4, #0]
 8009c64:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009c6c:	4aa5      	ldr	r2, [pc, #660]	; (8009f04 <problem_fetch+0x8574>)
 8009c6e:	6810      	ldr	r0, [r2, #0]
 8009c70:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2208      	movs	r2, #8
 8009c76:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,F,I,H,E,D");
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	33a4      	adds	r3, #164	; 0xa4
 8009c7c:	4aa2      	ldr	r2, [pc, #648]	; (8009f08 <problem_fetch+0x8578>)
 8009c7e:	461c      	mov	r4, r3
 8009c80:	4615      	mov	r5, r2
 8009c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009c84:	6020      	str	r0, [r4, #0]
 8009c86:	6061      	str	r1, [r4, #4]
 8009c88:	60a2      	str	r2, [r4, #8]
 8009c8a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,10,13,14,12,16,18");
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3304      	adds	r3, #4
 8009c90:	4a9e      	ldr	r2, [pc, #632]	; (8009f0c <problem_fetch+0x857c>)
 8009c92:	461d      	mov	r5, r3
 8009c94:	4614      	mov	r4, r2
 8009c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c98:	6028      	str	r0, [r5, #0]
 8009c9a:	6069      	str	r1, [r5, #4]
 8009c9c:	60aa      	str	r2, [r5, #8]
 8009c9e:	60eb      	str	r3, [r5, #12]
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	6128      	str	r0, [r5, #16]
 8009ca4:	88a3      	ldrh	r3, [r4, #4]
 8009ca6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009cae:	4a98      	ldr	r2, [pc, #608]	; (8009f10 <problem_fetch+0x8580>)
 8009cb0:	461c      	mov	r4, r3
 8009cb2:	4615      	mov	r5, r2
 8009cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cb6:	6020      	str	r0, [r4, #0]
 8009cb8:	6061      	str	r1, [r4, #4]
 8009cba:	60a2      	str	r2, [r4, #8]
 8009cbc:	60e3      	str	r3, [r4, #12]
			break;
 8009cbe:	f012 bd97 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 228 :
			strcpy(p->name,"JUDGEMENT RAINS");
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009cc8:	4a92      	ldr	r2, [pc, #584]	; (8009f14 <problem_fetch+0x8584>)
 8009cca:	461c      	mov	r4, r3
 8009ccc:	4615      	mov	r5, r2
 8009cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cd0:	6020      	str	r0, [r4, #0]
 8009cd2:	6061      	str	r1, [r4, #4]
 8009cd4:	60a2      	str	r2, [r4, #8]
 8009cd6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009cde:	4a8e      	ldr	r2, [pc, #568]	; (8009f18 <problem_fetch+0x8588>)
 8009ce0:	6810      	ldr	r0, [r2, #0]
 8009ce2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2207      	movs	r2, #7
 8009ce8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,H,K,I");
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	33a4      	adds	r3, #164	; 0xa4
 8009cee:	4a8b      	ldr	r2, [pc, #556]	; (8009f1c <problem_fetch+0x858c>)
 8009cf0:	461c      	mov	r4, r3
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009cf6:	6020      	str	r0, [r4, #0]
 8009cf8:	6061      	str	r1, [r4, #4]
 8009cfa:	60a2      	str	r2, [r4, #8]
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,18");
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4a86      	ldr	r2, [pc, #536]	; (8009f20 <problem_fetch+0x8590>)
 8009d06:	461d      	mov	r5, r3
 8009d08:	4614      	mov	r4, r2
 8009d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d0c:	6028      	str	r0, [r5, #0]
 8009d0e:	6069      	str	r1, [r5, #4]
 8009d10:	60aa      	str	r2, [r5, #8]
 8009d12:	60eb      	str	r3, [r5, #12]
 8009d14:	8823      	ldrh	r3, [r4, #0]
 8009d16:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009d1e:	4a81      	ldr	r2, [pc, #516]	; (8009f24 <problem_fetch+0x8594>)
 8009d20:	461c      	mov	r4, r3
 8009d22:	4613      	mov	r3, r2
 8009d24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d26:	6020      	str	r0, [r4, #0]
 8009d28:	6061      	str	r1, [r4, #4]
 8009d2a:	60a2      	str	r2, [r4, #8]
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	81a3      	strh	r3, [r4, #12]
			break;
 8009d30:	f012 bd5e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 229 :
			strcpy(p->name,"LEAVE OR FOLLOW");
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d3a:	4a7b      	ldr	r2, [pc, #492]	; (8009f28 <problem_fetch+0x8598>)
 8009d3c:	461c      	mov	r4, r3
 8009d3e:	4615      	mov	r5, r2
 8009d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d42:	6020      	str	r0, [r4, #0]
 8009d44:	6061      	str	r1, [r4, #4]
 8009d46:	60a2      	str	r2, [r4, #8]
 8009d48:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009d50:	4a76      	ldr	r2, [pc, #472]	; (8009f2c <problem_fetch+0x859c>)
 8009d52:	8811      	ldrh	r1, [r2, #0]
 8009d54:	7892      	ldrb	r2, [r2, #2]
 8009d56:	8019      	strh	r1, [r3, #0]
 8009d58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2206      	movs	r2, #6
 8009d5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,I");
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	33a4      	adds	r3, #164	; 0xa4
 8009d64:	4a72      	ldr	r2, [pc, #456]	; (8009f30 <problem_fetch+0x85a0>)
 8009d66:	461c      	mov	r4, r3
 8009d68:	4613      	mov	r3, r2
 8009d6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d6c:	6020      	str	r0, [r4, #0]
 8009d6e:	6061      	str	r1, [r4, #4]
 8009d70:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,15,18");
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	3304      	adds	r3, #4
 8009d76:	4a6f      	ldr	r2, [pc, #444]	; (8009f34 <problem_fetch+0x85a4>)
 8009d78:	461c      	mov	r4, r3
 8009d7a:	4615      	mov	r5, r2
 8009d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d7e:	6020      	str	r0, [r4, #0]
 8009d80:	6061      	str	r1, [r4, #4]
 8009d82:	60a2      	str	r2, [r4, #8]
 8009d84:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009d8c:	4a6a      	ldr	r2, [pc, #424]	; (8009f38 <problem_fetch+0x85a8>)
 8009d8e:	461c      	mov	r4, r3
 8009d90:	4613      	mov	r3, r2
 8009d92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d94:	6020      	str	r0, [r4, #0]
 8009d96:	6061      	str	r1, [r4, #4]
 8009d98:	60a2      	str	r2, [r4, #8]
			break;
 8009d9a:	f012 bd29 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 230 :
			strcpy(p->name,"EASY GO");
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009da4:	4965      	ldr	r1, [pc, #404]	; (8009f3c <problem_fetch+0x85ac>)
 8009da6:	461a      	mov	r2, r3
 8009da8:	460b      	mov	r3, r1
 8009daa:	cb03      	ldmia	r3!, {r0, r1}
 8009dac:	6010      	str	r0, [r2, #0]
 8009dae:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009db6:	4a53      	ldr	r2, [pc, #332]	; (8009f04 <problem_fetch+0x8574>)
 8009db8:	6810      	ldr	r0, [r2, #0]
 8009dba:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2207      	movs	r2, #7
 8009dc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,C,D");
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	33a4      	adds	r3, #164	; 0xa4
 8009dc6:	4a5e      	ldr	r2, [pc, #376]	; (8009f40 <problem_fetch+0x85b0>)
 8009dc8:	461c      	mov	r4, r3
 8009dca:	4613      	mov	r3, r2
 8009dcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009dce:	6020      	str	r0, [r4, #0]
 8009dd0:	6061      	str	r1, [r4, #4]
 8009dd2:	60a2      	str	r2, [r4, #8]
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,8,11,13,18");
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4a59      	ldr	r2, [pc, #356]	; (8009f44 <problem_fetch+0x85b4>)
 8009dde:	461d      	mov	r5, r3
 8009de0:	4614      	mov	r4, r2
 8009de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009de4:	6028      	str	r0, [r5, #0]
 8009de6:	6069      	str	r1, [r5, #4]
 8009de8:	60aa      	str	r2, [r5, #8]
 8009dea:	60eb      	str	r3, [r5, #12]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009df6:	4a4b      	ldr	r2, [pc, #300]	; (8009f24 <problem_fetch+0x8594>)
 8009df8:	461c      	mov	r4, r3
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009dfe:	6020      	str	r0, [r4, #0]
 8009e00:	6061      	str	r1, [r4, #4]
 8009e02:	60a2      	str	r2, [r4, #8]
 8009e04:	881b      	ldrh	r3, [r3, #0]
 8009e06:	81a3      	strh	r3, [r4, #12]
			break;
 8009e08:	f012 bcf2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 231 :
			strcpy(p->name,"UPRISING");
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e12:	494d      	ldr	r1, [pc, #308]	; (8009f48 <problem_fetch+0x85b8>)
 8009e14:	461a      	mov	r2, r3
 8009e16:	460b      	mov	r3, r1
 8009e18:	cb03      	ldmia	r3!, {r0, r1}
 8009e1a:	6010      	str	r0, [r2, #0]
 8009e1c:	6051      	str	r1, [r2, #4]
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009e28:	4a36      	ldr	r2, [pc, #216]	; (8009f04 <problem_fetch+0x8574>)
 8009e2a:	6810      	ldr	r0, [r2, #0]
 8009e2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2209      	movs	r2, #9
 8009e32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,E,F,G,H,I");
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	33a4      	adds	r3, #164	; 0xa4
 8009e38:	4a44      	ldr	r2, [pc, #272]	; (8009f4c <problem_fetch+0x85bc>)
 8009e3a:	461d      	mov	r5, r3
 8009e3c:	4614      	mov	r4, r2
 8009e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e40:	6028      	str	r0, [r5, #0]
 8009e42:	6069      	str	r1, [r5, #4]
 8009e44:	60aa      	str	r2, [r5, #8]
 8009e46:	60eb      	str	r3, [r5, #12]
 8009e48:	8823      	ldrh	r3, [r4, #0]
 8009e4a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,9,12,13,14,16,18");
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	3304      	adds	r3, #4
 8009e50:	4a3f      	ldr	r2, [pc, #252]	; (8009f50 <problem_fetch+0x85c0>)
 8009e52:	461c      	mov	r4, r3
 8009e54:	4615      	mov	r5, r2
 8009e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e58:	6020      	str	r0, [r4, #0]
 8009e5a:	6061      	str	r1, [r4, #4]
 8009e5c:	60a2      	str	r2, [r4, #8]
 8009e5e:	60e3      	str	r3, [r4, #12]
 8009e60:	6828      	ldr	r0, [r5, #0]
 8009e62:	6120      	str	r0, [r4, #16]
 8009e64:	88ab      	ldrh	r3, [r5, #4]
 8009e66:	79aa      	ldrb	r2, [r5, #6]
 8009e68:	82a3      	strh	r3, [r4, #20]
 8009e6a:	4613      	mov	r3, r2
 8009e6c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009e74:	4a37      	ldr	r2, [pc, #220]	; (8009f54 <problem_fetch+0x85c4>)
 8009e76:	461d      	mov	r5, r3
 8009e78:	4614      	mov	r4, r2
 8009e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e7c:	6028      	str	r0, [r5, #0]
 8009e7e:	6069      	str	r1, [r5, #4]
 8009e80:	60aa      	str	r2, [r5, #8]
 8009e82:	60eb      	str	r3, [r5, #12]
 8009e84:	8823      	ldrh	r3, [r4, #0]
 8009e86:	822b      	strh	r3, [r5, #16]
			break;
 8009e88:	f012 bcb2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 232 :
			strcpy(p->name,"SILENT MEDIA");
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e92:	4a31      	ldr	r2, [pc, #196]	; (8009f58 <problem_fetch+0x85c8>)
 8009e94:	461c      	mov	r4, r3
 8009e96:	4613      	mov	r3, r2
 8009e98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e9a:	6020      	str	r0, [r4, #0]
 8009e9c:	6061      	str	r1, [r4, #4]
 8009e9e:	60a2      	str	r2, [r4, #8]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009eaa:	4a16      	ldr	r2, [pc, #88]	; (8009f04 <problem_fetch+0x8574>)
 8009eac:	6810      	ldr	r0, [r2, #0]
 8009eae:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2207      	movs	r2, #7
 8009eb4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,G,I,H,I");
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	33a4      	adds	r3, #164	; 0xa4
 8009eba:	4a28      	ldr	r2, [pc, #160]	; (8009f5c <problem_fetch+0x85cc>)
 8009ebc:	461c      	mov	r4, r3
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ec2:	6020      	str	r0, [r4, #0]
 8009ec4:	6061      	str	r1, [r4, #4]
 8009ec6:	60a2      	str	r2, [r4, #8]
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,9,14,16,18");
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	3304      	adds	r3, #4
 8009ed0:	4a23      	ldr	r2, [pc, #140]	; (8009f60 <problem_fetch+0x85d0>)
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	4614      	mov	r4, r2
 8009ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ed8:	6028      	str	r0, [r5, #0]
 8009eda:	6069      	str	r1, [r5, #4]
 8009edc:	60aa      	str	r2, [r5, #8]
 8009ede:	60eb      	str	r3, [r5, #12]
 8009ee0:	8823      	ldrh	r3, [r4, #0]
 8009ee2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009eea:	4a1e      	ldr	r2, [pc, #120]	; (8009f64 <problem_fetch+0x85d4>)
 8009eec:	461c      	mov	r4, r3
 8009eee:	4613      	mov	r3, r2
 8009ef0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ef2:	6020      	str	r0, [r4, #0]
 8009ef4:	6061      	str	r1, [r4, #4]
 8009ef6:	60a2      	str	r2, [r4, #8]
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	81a3      	strh	r3, [r4, #12]
			break;
 8009efc:	f012 bc78 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8009f00:	08026958 	.word	0x08026958
 8009f04:	08023b90 	.word	0x08023b90
 8009f08:	0802696c 	.word	0x0802696c
 8009f0c:	0802697c 	.word	0x0802697c
 8009f10:	08026994 	.word	0x08026994
 8009f14:	080269a4 	.word	0x080269a4
 8009f18:	08023d30 	.word	0x08023d30
 8009f1c:	080269b4 	.word	0x080269b4
 8009f20:	080269c4 	.word	0x080269c4
 8009f24:	08023c08 	.word	0x08023c08
 8009f28:	080269d8 	.word	0x080269d8
 8009f2c:	08023c5c 	.word	0x08023c5c
 8009f30:	080269e8 	.word	0x080269e8
 8009f34:	080269f4 	.word	0x080269f4
 8009f38:	08023f2c 	.word	0x08023f2c
 8009f3c:	08026a04 	.word	0x08026a04
 8009f40:	08026a0c 	.word	0x08026a0c
 8009f44:	08026a1c 	.word	0x08026a1c
 8009f48:	08026a30 	.word	0x08026a30
 8009f4c:	08026a3c 	.word	0x08026a3c
 8009f50:	08026a50 	.word	0x08026a50
 8009f54:	08024b74 	.word	0x08024b74
 8009f58:	08026a68 	.word	0x08026a68
 8009f5c:	08026a78 	.word	0x08026a78
 8009f60:	08026a88 	.word	0x08026a88
 8009f64:	08023d18 	.word	0x08023d18
		case 233 :
			strcpy(p->name,"HOONGA (REMAKE)");
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009f6e:	4ab5      	ldr	r2, [pc, #724]	; (800a244 <problem_fetch+0x88b4>)
 8009f70:	461c      	mov	r4, r3
 8009f72:	4615      	mov	r5, r2
 8009f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f76:	6020      	str	r0, [r4, #0]
 8009f78:	6061      	str	r1, [r4, #4]
 8009f7a:	60a2      	str	r2, [r4, #8]
 8009f7c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009f84:	4ab0      	ldr	r2, [pc, #704]	; (800a248 <problem_fetch+0x88b8>)
 8009f86:	6810      	ldr	r0, [r2, #0]
 8009f88:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	220a      	movs	r2, #10
 8009f8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,E,D,H,G,H,I");
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	33a4      	adds	r3, #164	; 0xa4
 8009f94:	4aad      	ldr	r2, [pc, #692]	; (800a24c <problem_fetch+0x88bc>)
 8009f96:	461d      	mov	r5, r3
 8009f98:	4614      	mov	r4, r2
 8009f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f9c:	6028      	str	r0, [r5, #0]
 8009f9e:	6069      	str	r1, [r5, #4]
 8009fa0:	60aa      	str	r2, [r5, #8]
 8009fa2:	60eb      	str	r3, [r5, #12]
 8009fa4:	6820      	ldr	r0, [r4, #0]
 8009fa6:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,10,12,11,13,14,16,18");
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	3304      	adds	r3, #4
 8009fac:	4aa8      	ldr	r2, [pc, #672]	; (800a250 <problem_fetch+0x88c0>)
 8009fae:	461d      	mov	r5, r3
 8009fb0:	4614      	mov	r4, r2
 8009fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fb4:	6028      	str	r0, [r5, #0]
 8009fb6:	6069      	str	r1, [r5, #4]
 8009fb8:	60aa      	str	r2, [r5, #8]
 8009fba:	60eb      	str	r3, [r5, #12]
 8009fbc:	cc03      	ldmia	r4!, {r0, r1}
 8009fbe:	6128      	str	r0, [r5, #16]
 8009fc0:	6169      	str	r1, [r5, #20]
 8009fc2:	8823      	ldrh	r3, [r4, #0]
 8009fc4:	78a2      	ldrb	r2, [r4, #2]
 8009fc6:	832b      	strh	r3, [r5, #24]
 8009fc8:	4613      	mov	r3, r2
 8009fca:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009fd2:	4aa0      	ldr	r2, [pc, #640]	; (800a254 <problem_fetch+0x88c4>)
 8009fd4:	461d      	mov	r5, r3
 8009fd6:	4614      	mov	r4, r2
 8009fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fda:	6028      	str	r0, [r5, #0]
 8009fdc:	6069      	str	r1, [r5, #4]
 8009fde:	60aa      	str	r2, [r5, #8]
 8009fe0:	60eb      	str	r3, [r5, #12]
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	6128      	str	r0, [r5, #16]
			break;
 8009fe6:	f012 bc03 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 234 :
			strcpy(p->name,"EDITHS BOULDER");
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ff0:	4a99      	ldr	r2, [pc, #612]	; (800a258 <problem_fetch+0x88c8>)
 8009ff2:	461c      	mov	r4, r3
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ff8:	6020      	str	r0, [r4, #0]
 8009ffa:	6061      	str	r1, [r4, #4]
 8009ffc:	60a2      	str	r2, [r4, #8]
 8009ffe:	881a      	ldrh	r2, [r3, #0]
 800a000:	789b      	ldrb	r3, [r3, #2]
 800a002:	81a2      	strh	r2, [r4, #12]
 800a004:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a00c:	4a93      	ldr	r2, [pc, #588]	; (800a25c <problem_fetch+0x88cc>)
 800a00e:	6810      	ldr	r0, [r2, #0]
 800a010:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2207      	movs	r2, #7
 800a016:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,E,J,D,E,A");
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	33a4      	adds	r3, #164	; 0xa4
 800a01c:	4a90      	ldr	r2, [pc, #576]	; (800a260 <problem_fetch+0x88d0>)
 800a01e:	461c      	mov	r4, r3
 800a020:	4613      	mov	r3, r2
 800a022:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a024:	6020      	str	r0, [r4, #0]
 800a026:	6061      	str	r1, [r4, #4]
 800a028:	60a2      	str	r2, [r4, #8]
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,7,8,5,15,16,18");
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	3304      	adds	r3, #4
 800a032:	4a8c      	ldr	r2, [pc, #560]	; (800a264 <problem_fetch+0x88d4>)
 800a034:	461d      	mov	r5, r3
 800a036:	4614      	mov	r4, r2
 800a038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a03a:	6028      	str	r0, [r5, #0]
 800a03c:	6069      	str	r1, [r5, #4]
 800a03e:	60aa      	str	r2, [r5, #8]
 800a040:	60eb      	str	r3, [r5, #12]
 800a042:	8823      	ldrh	r3, [r4, #0]
 800a044:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,s,d,d,e");
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a04c:	4a86      	ldr	r2, [pc, #536]	; (800a268 <problem_fetch+0x88d8>)
 800a04e:	461c      	mov	r4, r3
 800a050:	4613      	mov	r3, r2
 800a052:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a054:	6020      	str	r0, [r4, #0]
 800a056:	6061      	str	r1, [r4, #4]
 800a058:	60a2      	str	r2, [r4, #8]
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	81a3      	strh	r3, [r4, #12]
			break;
 800a05e:	f012 bbc7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 235 :
			strcpy(p->name,"IGNORANT STYLE");
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a068:	4a80      	ldr	r2, [pc, #512]	; (800a26c <problem_fetch+0x88dc>)
 800a06a:	461c      	mov	r4, r3
 800a06c:	4613      	mov	r3, r2
 800a06e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a070:	6020      	str	r0, [r4, #0]
 800a072:	6061      	str	r1, [r4, #4]
 800a074:	60a2      	str	r2, [r4, #8]
 800a076:	881a      	ldrh	r2, [r3, #0]
 800a078:	789b      	ldrb	r3, [r3, #2]
 800a07a:	81a2      	strh	r2, [r4, #12]
 800a07c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a084:	4a7a      	ldr	r2, [pc, #488]	; (800a270 <problem_fetch+0x88e0>)
 800a086:	8811      	ldrh	r1, [r2, #0]
 800a088:	7892      	ldrb	r2, [r2, #2]
 800a08a:	8019      	strh	r1, [r3, #0]
 800a08c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2206      	movs	r2, #6
 800a092:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,I,I");
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	33a4      	adds	r3, #164	; 0xa4
 800a098:	4a76      	ldr	r2, [pc, #472]	; (800a274 <problem_fetch+0x88e4>)
 800a09a:	461c      	mov	r4, r3
 800a09c:	4613      	mov	r3, r2
 800a09e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a0a0:	6020      	str	r0, [r4, #0]
 800a0a2:	6061      	str	r1, [r4, #4]
 800a0a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,11,14,18");
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4a73      	ldr	r2, [pc, #460]	; (800a278 <problem_fetch+0x88e8>)
 800a0ac:	461c      	mov	r4, r3
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a0b2:	6020      	str	r0, [r4, #0]
 800a0b4:	6061      	str	r1, [r4, #4]
 800a0b6:	60a2      	str	r2, [r4, #8]
 800a0b8:	881a      	ldrh	r2, [r3, #0]
 800a0ba:	789b      	ldrb	r3, [r3, #2]
 800a0bc:	81a2      	strh	r2, [r4, #12]
 800a0be:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a0c6:	4a6d      	ldr	r2, [pc, #436]	; (800a27c <problem_fetch+0x88ec>)
 800a0c8:	461c      	mov	r4, r3
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a0ce:	6020      	str	r0, [r4, #0]
 800a0d0:	6061      	str	r1, [r4, #4]
 800a0d2:	60a2      	str	r2, [r4, #8]
			break;
 800a0d4:	f012 bb8c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 236 :
			strcpy(p->name,"FUN1");
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a0de:	4a68      	ldr	r2, [pc, #416]	; (800a280 <problem_fetch+0x88f0>)
 800a0e0:	6810      	ldr	r0, [r2, #0]
 800a0e2:	6018      	str	r0, [r3, #0]
 800a0e4:	7912      	ldrb	r2, [r2, #4]
 800a0e6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a0ee:	4a65      	ldr	r2, [pc, #404]	; (800a284 <problem_fetch+0x88f4>)
 800a0f0:	6810      	ldr	r0, [r2, #0]
 800a0f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	220e      	movs	r2, #14
 800a0f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D,F,H,F,I,I,G,H,I");
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	33a4      	adds	r3, #164	; 0xa4
 800a0fe:	4a62      	ldr	r2, [pc, #392]	; (800a288 <problem_fetch+0x88f8>)
 800a100:	461d      	mov	r5, r3
 800a102:	4614      	mov	r4, r2
 800a104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a106:	6028      	str	r0, [r5, #0]
 800a108:	6069      	str	r1, [r5, #4]
 800a10a:	60aa      	str	r2, [r5, #8]
 800a10c:	60eb      	str	r3, [r5, #12]
 800a10e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800a110:	6128      	str	r0, [r5, #16]
 800a112:	6169      	str	r1, [r5, #20]
 800a114:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,8,9,11,11,12,13,14,15,15,16,18");
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3304      	adds	r3, #4
 800a11a:	4a5c      	ldr	r2, [pc, #368]	; (800a28c <problem_fetch+0x88fc>)
 800a11c:	4614      	mov	r4, r2
 800a11e:	469c      	mov	ip, r3
 800a120:	f104 0e20 	add.w	lr, r4, #32
 800a124:	4665      	mov	r5, ip
 800a126:	4626      	mov	r6, r4
 800a128:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a12a:	6028      	str	r0, [r5, #0]
 800a12c:	6069      	str	r1, [r5, #4]
 800a12e:	60aa      	str	r2, [r5, #8]
 800a130:	60eb      	str	r3, [r5, #12]
 800a132:	3410      	adds	r4, #16
 800a134:	f10c 0c10 	add.w	ip, ip, #16
 800a138:	4574      	cmp	r4, lr
 800a13a:	d1f3      	bne.n	800a124 <problem_fetch+0x8794>
 800a13c:	4663      	mov	r3, ip
 800a13e:	4622      	mov	r2, r4
 800a140:	6810      	ldr	r0, [r2, #0]
 800a142:	6018      	str	r0, [r3, #0]
 800a144:	7912      	ldrb	r2, [r2, #4]
 800a146:	711a      	strb	r2, [r3, #4]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,d,e");
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a14e:	4a50      	ldr	r2, [pc, #320]	; (800a290 <problem_fetch+0x8900>)
 800a150:	461d      	mov	r5, r3
 800a152:	4614      	mov	r4, r2
 800a154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a156:	6028      	str	r0, [r5, #0]
 800a158:	6069      	str	r1, [r5, #4]
 800a15a:	60aa      	str	r2, [r5, #8]
 800a15c:	60eb      	str	r3, [r5, #12]
 800a15e:	cc07      	ldmia	r4!, {r0, r1, r2}
 800a160:	6128      	str	r0, [r5, #16]
 800a162:	6169      	str	r1, [r5, #20]
 800a164:	61aa      	str	r2, [r5, #24]
			break;
 800a166:	f012 bb43 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 237 :
			strcpy(p->name,"MALEDICTION");
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a170:	4a48      	ldr	r2, [pc, #288]	; (800a294 <problem_fetch+0x8904>)
 800a172:	461c      	mov	r4, r3
 800a174:	4613      	mov	r3, r2
 800a176:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a178:	6020      	str	r0, [r4, #0]
 800a17a:	6061      	str	r1, [r4, #4]
 800a17c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a184:	4a44      	ldr	r2, [pc, #272]	; (800a298 <problem_fetch+0x8908>)
 800a186:	6810      	ldr	r0, [r2, #0]
 800a188:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2206      	movs	r2, #6
 800a18e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,G,I,D");
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	33a4      	adds	r3, #164	; 0xa4
 800a194:	4a41      	ldr	r2, [pc, #260]	; (800a29c <problem_fetch+0x890c>)
 800a196:	461c      	mov	r4, r3
 800a198:	4613      	mov	r3, r2
 800a19a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a19c:	6020      	str	r0, [r4, #0]
 800a19e:	6061      	str	r1, [r4, #4]
 800a1a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,11,12,15,15,18");
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4a3e      	ldr	r2, [pc, #248]	; (800a2a0 <problem_fetch+0x8910>)
 800a1a8:	461d      	mov	r5, r3
 800a1aa:	4614      	mov	r4, r2
 800a1ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ae:	6028      	str	r0, [r5, #0]
 800a1b0:	6069      	str	r1, [r5, #4]
 800a1b2:	60aa      	str	r2, [r5, #8]
 800a1b4:	60eb      	str	r3, [r5, #12]
 800a1b6:	7823      	ldrb	r3, [r4, #0]
 800a1b8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a1c0:	4a2e      	ldr	r2, [pc, #184]	; (800a27c <problem_fetch+0x88ec>)
 800a1c2:	461c      	mov	r4, r3
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a1c8:	6020      	str	r0, [r4, #0]
 800a1ca:	6061      	str	r1, [r4, #4]
 800a1cc:	60a2      	str	r2, [r4, #8]
			break;
 800a1ce:	f012 bb0f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 238 :
			strcpy(p->name,"KYLO REN");
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a1d8:	4932      	ldr	r1, [pc, #200]	; (800a2a4 <problem_fetch+0x8914>)
 800a1da:	461a      	mov	r2, r3
 800a1dc:	460b      	mov	r3, r1
 800a1de:	cb03      	ldmia	r3!, {r0, r1}
 800a1e0:	6010      	str	r0, [r2, #0]
 800a1e2:	6051      	str	r1, [r2, #4]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a1ee:	4a20      	ldr	r2, [pc, #128]	; (800a270 <problem_fetch+0x88e0>)
 800a1f0:	8811      	ldrh	r1, [r2, #0]
 800a1f2:	7892      	ldrb	r2, [r2, #2]
 800a1f4:	8019      	strh	r1, [r3, #0]
 800a1f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,G,E,I,E");
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	33a4      	adds	r3, #164	; 0xa4
 800a202:	4a29      	ldr	r2, [pc, #164]	; (800a2a8 <problem_fetch+0x8918>)
 800a204:	461c      	mov	r4, r3
 800a206:	4615      	mov	r5, r2
 800a208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	6061      	str	r1, [r4, #4]
 800a20e:	60a2      	str	r2, [r4, #8]
 800a210:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18,9");
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3304      	adds	r3, #4
 800a216:	4a25      	ldr	r2, [pc, #148]	; (800a2ac <problem_fetch+0x891c>)
 800a218:	461d      	mov	r5, r3
 800a21a:	4614      	mov	r4, r2
 800a21c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a21e:	6028      	str	r0, [r5, #0]
 800a220:	6069      	str	r1, [r5, #4]
 800a222:	60aa      	str	r2, [r5, #8]
 800a224:	60eb      	str	r3, [r5, #12]
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a230:	4a1f      	ldr	r2, [pc, #124]	; (800a2b0 <problem_fetch+0x8920>)
 800a232:	461c      	mov	r4, r3
 800a234:	4615      	mov	r5, r2
 800a236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a238:	6020      	str	r0, [r4, #0]
 800a23a:	6061      	str	r1, [r4, #4]
 800a23c:	60a2      	str	r2, [r4, #8]
 800a23e:	60e3      	str	r3, [r4, #12]
			break;
 800a240:	f012 bad6 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800a244:	08026a9c 	.word	0x08026a9c
 800a248:	08023ccc 	.word	0x08023ccc
 800a24c:	08026aac 	.word	0x08026aac
 800a250:	08026ac0 	.word	0x08026ac0
 800a254:	08024438 	.word	0x08024438
 800a258:	08026adc 	.word	0x08026adc
 800a25c:	08023c28 	.word	0x08023c28
 800a260:	08026aec 	.word	0x08026aec
 800a264:	08026afc 	.word	0x08026afc
 800a268:	08026b10 	.word	0x08026b10
 800a26c:	08026b20 	.word	0x08026b20
 800a270:	08023b50 	.word	0x08023b50
 800a274:	08026b30 	.word	0x08026b30
 800a278:	08026b3c 	.word	0x08026b3c
 800a27c:	08023f2c 	.word	0x08023f2c
 800a280:	08026b4c 	.word	0x08026b4c
 800a284:	08023b90 	.word	0x08023b90
 800a288:	08026b54 	.word	0x08026b54
 800a28c:	08026b70 	.word	0x08026b70
 800a290:	08026b98 	.word	0x08026b98
 800a294:	08026bb4 	.word	0x08026bb4
 800a298:	08023d30 	.word	0x08023d30
 800a29c:	08026bc0 	.word	0x08026bc0
 800a2a0:	08026bcc 	.word	0x08026bcc
 800a2a4:	08026be0 	.word	0x08026be0
 800a2a8:	08026bec 	.word	0x08026bec
 800a2ac:	08026bfc 	.word	0x08026bfc
 800a2b0:	080243f0 	.word	0x080243f0
		case 239 :
			strcpy(p->name,"STRAIGHTER THAN YOU");
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a2ba:	4ab2      	ldr	r2, [pc, #712]	; (800a584 <problem_fetch+0x8bf4>)
 800a2bc:	461d      	mov	r5, r3
 800a2be:	4614      	mov	r4, r2
 800a2c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2c2:	6028      	str	r0, [r5, #0]
 800a2c4:	6069      	str	r1, [r5, #4]
 800a2c6:	60aa      	str	r2, [r5, #8]
 800a2c8:	60eb      	str	r3, [r5, #12]
 800a2ca:	6820      	ldr	r0, [r4, #0]
 800a2cc:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a2d4:	4aac      	ldr	r2, [pc, #688]	; (800a588 <problem_fetch+0x8bf8>)
 800a2d6:	8811      	ldrh	r1, [r2, #0]
 800a2d8:	7892      	ldrb	r2, [r2, #2]
 800a2da:	8019      	strh	r1, [r3, #0]
 800a2dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2205      	movs	r2, #5
 800a2e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,K,I");
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	33a4      	adds	r3, #164	; 0xa4
 800a2e8:	49a8      	ldr	r1, [pc, #672]	; (800a58c <problem_fetch+0x8bfc>)
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	cb03      	ldmia	r3!, {r0, r1}
 800a2f0:	6010      	str	r0, [r2, #0]
 800a2f2:	6051      	str	r1, [r2, #4]
 800a2f4:	881b      	ldrh	r3, [r3, #0]
 800a2f6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,16,18");
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4aa4      	ldr	r2, [pc, #656]	; (800a590 <problem_fetch+0x8c00>)
 800a2fe:	461c      	mov	r4, r3
 800a300:	4613      	mov	r3, r2
 800a302:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a304:	6020      	str	r0, [r4, #0]
 800a306:	6061      	str	r1, [r4, #4]
 800a308:	60a2      	str	r2, [r4, #8]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a314:	499f      	ldr	r1, [pc, #636]	; (800a594 <problem_fetch+0x8c04>)
 800a316:	461a      	mov	r2, r3
 800a318:	460b      	mov	r3, r1
 800a31a:	cb03      	ldmia	r3!, {r0, r1}
 800a31c:	6010      	str	r0, [r2, #0]
 800a31e:	6051      	str	r1, [r2, #4]
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	8113      	strh	r3, [r2, #8]
			break;
 800a324:	f012 ba64 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 240 :
			strcpy(p->name,"JAM FUNK");
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a32e:	499a      	ldr	r1, [pc, #616]	; (800a598 <problem_fetch+0x8c08>)
 800a330:	461a      	mov	r2, r3
 800a332:	460b      	mov	r3, r1
 800a334:	cb03      	ldmia	r3!, {r0, r1}
 800a336:	6010      	str	r0, [r2, #0]
 800a338:	6051      	str	r1, [r2, #4]
 800a33a:	781b      	ldrb	r3, [r3, #0]
 800a33c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"8A");
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a344:	4a95      	ldr	r2, [pc, #596]	; (800a59c <problem_fetch+0x8c0c>)
 800a346:	8811      	ldrh	r1, [r2, #0]
 800a348:	7892      	ldrb	r2, [r2, #2]
 800a34a:	8019      	strh	r1, [r3, #0]
 800a34c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2208      	movs	r2, #8
 800a352:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,B,C,D,B,D");
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	33a4      	adds	r3, #164	; 0xa4
 800a358:	4a91      	ldr	r2, [pc, #580]	; (800a5a0 <problem_fetch+0x8c10>)
 800a35a:	461c      	mov	r4, r3
 800a35c:	4615      	mov	r5, r2
 800a35e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a360:	6020      	str	r0, [r4, #0]
 800a362:	6061      	str	r1, [r4, #4]
 800a364:	60a2      	str	r2, [r4, #8]
 800a366:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,10,13,12,16,18,6,7");
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	4a8d      	ldr	r2, [pc, #564]	; (800a5a4 <problem_fetch+0x8c14>)
 800a36e:	461d      	mov	r5, r3
 800a370:	4614      	mov	r4, r2
 800a372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a374:	6028      	str	r0, [r5, #0]
 800a376:	6069      	str	r1, [r5, #4]
 800a378:	60aa      	str	r2, [r5, #8]
 800a37a:	60eb      	str	r3, [r5, #12]
 800a37c:	6820      	ldr	r0, [r4, #0]
 800a37e:	6128      	str	r0, [r5, #16]
 800a380:	88a3      	ldrh	r3, [r4, #4]
 800a382:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,d");
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a38a:	4a87      	ldr	r2, [pc, #540]	; (800a5a8 <problem_fetch+0x8c18>)
 800a38c:	461c      	mov	r4, r3
 800a38e:	4615      	mov	r5, r2
 800a390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	6061      	str	r1, [r4, #4]
 800a396:	60a2      	str	r2, [r4, #8]
 800a398:	60e3      	str	r3, [r4, #12]
			break;
 800a39a:	f012 ba29 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 241 :
			strcpy(p->name,"PROBLEM#148");
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a3a4:	4a81      	ldr	r2, [pc, #516]	; (800a5ac <problem_fetch+0x8c1c>)
 800a3a6:	461c      	mov	r4, r3
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a3ac:	6020      	str	r0, [r4, #0]
 800a3ae:	6061      	str	r1, [r4, #4]
 800a3b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a3b8:	4a7d      	ldr	r2, [pc, #500]	; (800a5b0 <problem_fetch+0x8c20>)
 800a3ba:	6810      	ldr	r0, [r2, #0]
 800a3bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,F,E,I,D,E,B,A");
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	33a4      	adds	r3, #164	; 0xa4
 800a3c8:	4a7a      	ldr	r2, [pc, #488]	; (800a5b4 <problem_fetch+0x8c24>)
 800a3ca:	461d      	mov	r5, r3
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3d0:	6028      	str	r0, [r5, #0]
 800a3d2:	6069      	str	r1, [r5, #4]
 800a3d4:	60aa      	str	r2, [r5, #8]
 800a3d6:	60eb      	str	r3, [r5, #12]
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,8,11,12,14,15,16,15,18");
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4a75      	ldr	r2, [pc, #468]	; (800a5b8 <problem_fetch+0x8c28>)
 800a3e2:	461d      	mov	r5, r3
 800a3e4:	4614      	mov	r4, r2
 800a3e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3e8:	6028      	str	r0, [r5, #0]
 800a3ea:	6069      	str	r1, [r5, #4]
 800a3ec:	60aa      	str	r2, [r5, #8]
 800a3ee:	60eb      	str	r3, [r5, #12]
 800a3f0:	cc03      	ldmia	r4!, {r0, r1}
 800a3f2:	6128      	str	r0, [r5, #16]
 800a3f4:	6169      	str	r1, [r5, #20]
 800a3f6:	8823      	ldrh	r3, [r4, #0]
 800a3f8:	78a2      	ldrb	r2, [r4, #2]
 800a3fa:	832b      	strh	r3, [r5, #24]
 800a3fc:	4613      	mov	r3, r2
 800a3fe:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a406:	4a6d      	ldr	r2, [pc, #436]	; (800a5bc <problem_fetch+0x8c2c>)
 800a408:	461d      	mov	r5, r3
 800a40a:	4614      	mov	r4, r2
 800a40c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a40e:	6028      	str	r0, [r5, #0]
 800a410:	6069      	str	r1, [r5, #4]
 800a412:	60aa      	str	r2, [r5, #8]
 800a414:	60eb      	str	r3, [r5, #12]
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	6128      	str	r0, [r5, #16]
			break;
 800a41a:	f012 b9e9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 242 :
			strcpy(p->name,"HOONGA");
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a424:	4a66      	ldr	r2, [pc, #408]	; (800a5c0 <problem_fetch+0x8c30>)
 800a426:	6810      	ldr	r0, [r2, #0]
 800a428:	6018      	str	r0, [r3, #0]
 800a42a:	8891      	ldrh	r1, [r2, #4]
 800a42c:	7992      	ldrb	r2, [r2, #6]
 800a42e:	8099      	strh	r1, [r3, #4]
 800a430:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a438:	4a53      	ldr	r2, [pc, #332]	; (800a588 <problem_fetch+0x8bf8>)
 800a43a:	8811      	ldrh	r1, [r2, #0]
 800a43c:	7892      	ldrb	r2, [r2, #2]
 800a43e:	8019      	strh	r1, [r3, #0]
 800a440:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2209      	movs	r2, #9
 800a446:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,C,D,H,G,H,I");
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	33a4      	adds	r3, #164	; 0xa4
 800a44c:	4a5d      	ldr	r2, [pc, #372]	; (800a5c4 <problem_fetch+0x8c34>)
 800a44e:	461d      	mov	r5, r3
 800a450:	4614      	mov	r4, r2
 800a452:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a454:	6028      	str	r0, [r5, #0]
 800a456:	6069      	str	r1, [r5, #4]
 800a458:	60aa      	str	r2, [r5, #8]
 800a45a:	60eb      	str	r3, [r5, #12]
 800a45c:	8823      	ldrh	r3, [r4, #0]
 800a45e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,5,11,13,14,16,18");
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	4a58      	ldr	r2, [pc, #352]	; (800a5c8 <problem_fetch+0x8c38>)
 800a466:	461d      	mov	r5, r3
 800a468:	4614      	mov	r4, r2
 800a46a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a46c:	6028      	str	r0, [r5, #0]
 800a46e:	6069      	str	r1, [r5, #4]
 800a470:	60aa      	str	r2, [r5, #8]
 800a472:	60eb      	str	r3, [r5, #12]
 800a474:	cc03      	ldmia	r4!, {r0, r1}
 800a476:	6128      	str	r0, [r5, #16]
 800a478:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,s,d,d,d,d,e");
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a480:	4a52      	ldr	r2, [pc, #328]	; (800a5cc <problem_fetch+0x8c3c>)
 800a482:	461d      	mov	r5, r3
 800a484:	4614      	mov	r4, r2
 800a486:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a488:	6028      	str	r0, [r5, #0]
 800a48a:	6069      	str	r1, [r5, #4]
 800a48c:	60aa      	str	r2, [r5, #8]
 800a48e:	60eb      	str	r3, [r5, #12]
 800a490:	8823      	ldrh	r3, [r4, #0]
 800a492:	822b      	strh	r3, [r5, #16]
			break;
 800a494:	f012 b9ac 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 243 :
			strcpy(p->name,"TAR");
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a49e:	4a4c      	ldr	r2, [pc, #304]	; (800a5d0 <problem_fetch+0x8c40>)
 800a4a0:	6810      	ldr	r0, [r2, #0]
 800a4a2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a4aa:	4a4a      	ldr	r2, [pc, #296]	; (800a5d4 <problem_fetch+0x8c44>)
 800a4ac:	6810      	ldr	r0, [r2, #0]
 800a4ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2209      	movs	r2, #9
 800a4b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,B,D,I,H,E,F");
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	33a4      	adds	r3, #164	; 0xa4
 800a4ba:	4a47      	ldr	r2, [pc, #284]	; (800a5d8 <problem_fetch+0x8c48>)
 800a4bc:	461d      	mov	r5, r3
 800a4be:	4614      	mov	r4, r2
 800a4c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4c2:	6028      	str	r0, [r5, #0]
 800a4c4:	6069      	str	r1, [r5, #4]
 800a4c6:	60aa      	str	r2, [r5, #8]
 800a4c8:	60eb      	str	r3, [r5, #12]
 800a4ca:	8823      	ldrh	r3, [r4, #0]
 800a4cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,13,15,15,18,7,8,9,11");
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	4a42      	ldr	r2, [pc, #264]	; (800a5dc <problem_fetch+0x8c4c>)
 800a4d4:	461c      	mov	r4, r3
 800a4d6:	4615      	mov	r5, r2
 800a4d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4da:	6020      	str	r0, [r4, #0]
 800a4dc:	6061      	str	r1, [r4, #4]
 800a4de:	60a2      	str	r2, [r4, #8]
 800a4e0:	60e3      	str	r3, [r4, #12]
 800a4e2:	6828      	ldr	r0, [r5, #0]
 800a4e4:	6120      	str	r0, [r4, #16]
 800a4e6:	88ab      	ldrh	r3, [r5, #4]
 800a4e8:	79aa      	ldrb	r2, [r5, #6]
 800a4ea:	82a3      	strh	r3, [r4, #20]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a4f6:	4a3a      	ldr	r2, [pc, #232]	; (800a5e0 <problem_fetch+0x8c50>)
 800a4f8:	461d      	mov	r5, r3
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4fe:	6028      	str	r0, [r5, #0]
 800a500:	6069      	str	r1, [r5, #4]
 800a502:	60aa      	str	r2, [r5, #8]
 800a504:	60eb      	str	r3, [r5, #12]
 800a506:	8823      	ldrh	r3, [r4, #0]
 800a508:	822b      	strh	r3, [r5, #16]
			break;
 800a50a:	f012 b971 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 244 :
			strcpy(p->name,"FIRST SNOW");
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a514:	4933      	ldr	r1, [pc, #204]	; (800a5e4 <problem_fetch+0x8c54>)
 800a516:	461a      	mov	r2, r3
 800a518:	460b      	mov	r3, r1
 800a51a:	cb03      	ldmia	r3!, {r0, r1}
 800a51c:	6010      	str	r0, [r2, #0]
 800a51e:	6051      	str	r1, [r2, #4]
 800a520:	8819      	ldrh	r1, [r3, #0]
 800a522:	789b      	ldrb	r3, [r3, #2]
 800a524:	8111      	strh	r1, [r2, #8]
 800a526:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a52e:	4a2e      	ldr	r2, [pc, #184]	; (800a5e8 <problem_fetch+0x8c58>)
 800a530:	8811      	ldrh	r1, [r2, #0]
 800a532:	7892      	ldrb	r2, [r2, #2]
 800a534:	8019      	strh	r1, [r3, #0]
 800a536:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2205      	movs	r2, #5
 800a53c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,B,B,D");
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	33a4      	adds	r3, #164	; 0xa4
 800a542:	492a      	ldr	r1, [pc, #168]	; (800a5ec <problem_fetch+0x8c5c>)
 800a544:	461a      	mov	r2, r3
 800a546:	460b      	mov	r3, r1
 800a548:	cb03      	ldmia	r3!, {r0, r1}
 800a54a:	6010      	str	r0, [r2, #0]
 800a54c:	6051      	str	r1, [r2, #4]
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,15,18");
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3304      	adds	r3, #4
 800a556:	4a26      	ldr	r2, [pc, #152]	; (800a5f0 <problem_fetch+0x8c60>)
 800a558:	461c      	mov	r4, r3
 800a55a:	4613      	mov	r3, r2
 800a55c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a55e:	6020      	str	r0, [r4, #0]
 800a560:	6061      	str	r1, [r4, #4]
 800a562:	60a2      	str	r2, [r4, #8]
 800a564:	881b      	ldrh	r3, [r3, #0]
 800a566:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a56e:	4909      	ldr	r1, [pc, #36]	; (800a594 <problem_fetch+0x8c04>)
 800a570:	461a      	mov	r2, r3
 800a572:	460b      	mov	r3, r1
 800a574:	cb03      	ldmia	r3!, {r0, r1}
 800a576:	6010      	str	r0, [r2, #0]
 800a578:	6051      	str	r1, [r2, #4]
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	8113      	strh	r3, [r2, #8]
			break;
 800a57e:	f012 b937 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800a582:	bf00      	nop
 800a584:	08026c10 	.word	0x08026c10
 800a588:	080243c4 	.word	0x080243c4
 800a58c:	08026c24 	.word	0x08026c24
 800a590:	08026c30 	.word	0x08026c30
 800a594:	0802405c 	.word	0x0802405c
 800a598:	08026c40 	.word	0x08026c40
 800a59c:	08025ef4 	.word	0x08025ef4
 800a5a0:	08026c4c 	.word	0x08026c4c
 800a5a4:	08026c5c 	.word	0x08026c5c
 800a5a8:	08026c74 	.word	0x08026c74
 800a5ac:	08026c84 	.word	0x08026c84
 800a5b0:	08023b90 	.word	0x08023b90
 800a5b4:	08026c90 	.word	0x08026c90
 800a5b8:	08026ca4 	.word	0x08026ca4
 800a5bc:	08024ee8 	.word	0x08024ee8
 800a5c0:	08026cc0 	.word	0x08026cc0
 800a5c4:	08026cc8 	.word	0x08026cc8
 800a5c8:	08026cdc 	.word	0x08026cdc
 800a5cc:	08026cf4 	.word	0x08026cf4
 800a5d0:	08026d08 	.word	0x08026d08
 800a5d4:	08023d30 	.word	0x08023d30
 800a5d8:	08026d0c 	.word	0x08026d0c
 800a5dc:	08026d20 	.word	0x08026d20
 800a5e0:	08026d38 	.word	0x08026d38
 800a5e4:	08026d4c 	.word	0x08026d4c
 800a5e8:	08023b50 	.word	0x08023b50
 800a5ec:	08026d58 	.word	0x08026d58
 800a5f0:	08026d64 	.word	0x08026d64
		case 245 :
			strcpy(p->name,"WHAT IS YOUR PROBLEM???");
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a5fa:	4aab      	ldr	r2, [pc, #684]	; (800a8a8 <problem_fetch+0x8f18>)
 800a5fc:	461d      	mov	r5, r3
 800a5fe:	4614      	mov	r4, r2
 800a600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a602:	6028      	str	r0, [r5, #0]
 800a604:	6069      	str	r1, [r5, #4]
 800a606:	60aa      	str	r2, [r5, #8]
 800a608:	60eb      	str	r3, [r5, #12]
 800a60a:	cc03      	ldmia	r4!, {r0, r1}
 800a60c:	6128      	str	r0, [r5, #16]
 800a60e:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C");
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a616:	4aa5      	ldr	r2, [pc, #660]	; (800a8ac <problem_fetch+0x8f1c>)
 800a618:	8811      	ldrh	r1, [r2, #0]
 800a61a:	7892      	ldrb	r2, [r2, #2]
 800a61c:	8019      	strh	r1, [r3, #0]
 800a61e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2208      	movs	r2, #8
 800a624:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,F,I,F,I");
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	33a4      	adds	r3, #164	; 0xa4
 800a62a:	4aa1      	ldr	r2, [pc, #644]	; (800a8b0 <problem_fetch+0x8f20>)
 800a62c:	461c      	mov	r4, r3
 800a62e:	4615      	mov	r5, r2
 800a630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a632:	6020      	str	r0, [r4, #0]
 800a634:	6061      	str	r1, [r4, #4]
 800a636:	60a2      	str	r2, [r4, #8]
 800a638:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,14,13,18");
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3304      	adds	r3, #4
 800a63e:	4a9d      	ldr	r2, [pc, #628]	; (800a8b4 <problem_fetch+0x8f24>)
 800a640:	461d      	mov	r5, r3
 800a642:	4614      	mov	r4, r2
 800a644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a646:	6028      	str	r0, [r5, #0]
 800a648:	6069      	str	r1, [r5, #4]
 800a64a:	60aa      	str	r2, [r5, #8]
 800a64c:	60eb      	str	r3, [r5, #12]
 800a64e:	6820      	ldr	r0, [r4, #0]
 800a650:	6128      	str	r0, [r5, #16]
 800a652:	7923      	ldrb	r3, [r4, #4]
 800a654:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a65c:	4a96      	ldr	r2, [pc, #600]	; (800a8b8 <problem_fetch+0x8f28>)
 800a65e:	461c      	mov	r4, r3
 800a660:	4615      	mov	r5, r2
 800a662:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a664:	6020      	str	r0, [r4, #0]
 800a666:	6061      	str	r1, [r4, #4]
 800a668:	60a2      	str	r2, [r4, #8]
 800a66a:	60e3      	str	r3, [r4, #12]
			break;
 800a66c:	f012 b8c0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 246 :
			strcpy(p->name,"BLACK IS WHERE YOU AT");
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a676:	4a91      	ldr	r2, [pc, #580]	; (800a8bc <problem_fetch+0x8f2c>)
 800a678:	461d      	mov	r5, r3
 800a67a:	4614      	mov	r4, r2
 800a67c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a67e:	6028      	str	r0, [r5, #0]
 800a680:	6069      	str	r1, [r5, #4]
 800a682:	60aa      	str	r2, [r5, #8]
 800a684:	60eb      	str	r3, [r5, #12]
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	6128      	str	r0, [r5, #16]
 800a68a:	88a3      	ldrh	r3, [r4, #4]
 800a68c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a694:	4a8a      	ldr	r2, [pc, #552]	; (800a8c0 <problem_fetch+0x8f30>)
 800a696:	8811      	ldrh	r1, [r2, #0]
 800a698:	7892      	ldrb	r2, [r2, #2]
 800a69a:	8019      	strh	r1, [r3, #0]
 800a69c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,E,B,D,B,E");
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	33a4      	adds	r3, #164	; 0xa4
 800a6a8:	4a86      	ldr	r2, [pc, #536]	; (800a8c4 <problem_fetch+0x8f34>)
 800a6aa:	461c      	mov	r4, r3
 800a6ac:	4615      	mov	r5, r2
 800a6ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6b0:	6020      	str	r0, [r4, #0]
 800a6b2:	6061      	str	r1, [r4, #4]
 800a6b4:	60a2      	str	r2, [r4, #8]
 800a6b6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,12,15,18,12,16");
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	4a82      	ldr	r2, [pc, #520]	; (800a8c8 <problem_fetch+0x8f38>)
 800a6be:	461d      	mov	r5, r3
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6c4:	6028      	str	r0, [r5, #0]
 800a6c6:	6069      	str	r1, [r5, #4]
 800a6c8:	60aa      	str	r2, [r5, #8]
 800a6ca:	60eb      	str	r3, [r5, #12]
 800a6cc:	6820      	ldr	r0, [r4, #0]
 800a6ce:	6128      	str	r0, [r5, #16]
 800a6d0:	7923      	ldrb	r3, [r4, #4]
 800a6d2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,e,d,d");
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a6da:	4a7c      	ldr	r2, [pc, #496]	; (800a8cc <problem_fetch+0x8f3c>)
 800a6dc:	461c      	mov	r4, r3
 800a6de:	4615      	mov	r5, r2
 800a6e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6e2:	6020      	str	r0, [r4, #0]
 800a6e4:	6061      	str	r1, [r4, #4]
 800a6e6:	60a2      	str	r2, [r4, #8]
 800a6e8:	60e3      	str	r3, [r4, #12]
			break;
 800a6ea:	f012 b881 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 247 :
			strcpy(p->name,"LORD VADER");
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a6f4:	4976      	ldr	r1, [pc, #472]	; (800a8d0 <problem_fetch+0x8f40>)
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	cb03      	ldmia	r3!, {r0, r1}
 800a6fc:	6010      	str	r0, [r2, #0]
 800a6fe:	6051      	str	r1, [r2, #4]
 800a700:	8819      	ldrh	r1, [r3, #0]
 800a702:	789b      	ldrb	r3, [r3, #2]
 800a704:	8111      	strh	r1, [r2, #8]
 800a706:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a70e:	4a71      	ldr	r2, [pc, #452]	; (800a8d4 <problem_fetch+0x8f44>)
 800a710:	6810      	ldr	r0, [r2, #0]
 800a712:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2208      	movs	r2, #8
 800a718:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,F,E,G,D,D");
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	33a4      	adds	r3, #164	; 0xa4
 800a71e:	4a6e      	ldr	r2, [pc, #440]	; (800a8d8 <problem_fetch+0x8f48>)
 800a720:	461c      	mov	r4, r3
 800a722:	4615      	mov	r5, r2
 800a724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a726:	6020      	str	r0, [r4, #0]
 800a728:	6061      	str	r1, [r4, #4]
 800a72a:	60a2      	str	r2, [r4, #8]
 800a72c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,10,13,6,14,15,18");
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	3304      	adds	r3, #4
 800a732:	4a6a      	ldr	r2, [pc, #424]	; (800a8dc <problem_fetch+0x8f4c>)
 800a734:	461d      	mov	r5, r3
 800a736:	4614      	mov	r4, r2
 800a738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a73a:	6028      	str	r0, [r5, #0]
 800a73c:	6069      	str	r1, [r5, #4]
 800a73e:	60aa      	str	r2, [r5, #8]
 800a740:	60eb      	str	r3, [r5, #12]
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	6128      	str	r0, [r5, #16]
 800a746:	7923      	ldrb	r3, [r4, #4]
 800a748:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a750:	4a63      	ldr	r2, [pc, #396]	; (800a8e0 <problem_fetch+0x8f50>)
 800a752:	461c      	mov	r4, r3
 800a754:	4615      	mov	r5, r2
 800a756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a758:	6020      	str	r0, [r4, #0]
 800a75a:	6061      	str	r1, [r4, #4]
 800a75c:	60a2      	str	r2, [r4, #8]
 800a75e:	60e3      	str	r3, [r4, #12]
			break;
 800a760:	f012 b846 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 248 :
			strcpy(p->name,"WOOO");
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a76a:	4a5e      	ldr	r2, [pc, #376]	; (800a8e4 <problem_fetch+0x8f54>)
 800a76c:	6810      	ldr	r0, [r2, #0]
 800a76e:	6018      	str	r0, [r3, #0]
 800a770:	7912      	ldrb	r2, [r2, #4]
 800a772:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a77a:	4a5b      	ldr	r2, [pc, #364]	; (800a8e8 <problem_fetch+0x8f58>)
 800a77c:	6810      	ldr	r0, [r2, #0]
 800a77e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2208      	movs	r2, #8
 800a784:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,F,H,G,I");
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	33a4      	adds	r3, #164	; 0xa4
 800a78a:	4a58      	ldr	r2, [pc, #352]	; (800a8ec <problem_fetch+0x8f5c>)
 800a78c:	461c      	mov	r4, r3
 800a78e:	4615      	mov	r5, r2
 800a790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a792:	6020      	str	r0, [r4, #0]
 800a794:	6061      	str	r1, [r4, #4]
 800a796:	60a2      	str	r2, [r4, #8]
 800a798:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,13,16,17,18");
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4a54      	ldr	r2, [pc, #336]	; (800a8f0 <problem_fetch+0x8f60>)
 800a7a0:	461d      	mov	r5, r3
 800a7a2:	4614      	mov	r4, r2
 800a7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7a6:	6028      	str	r0, [r5, #0]
 800a7a8:	6069      	str	r1, [r5, #4]
 800a7aa:	60aa      	str	r2, [r5, #8]
 800a7ac:	60eb      	str	r3, [r5, #12]
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a7b8:	4a4e      	ldr	r2, [pc, #312]	; (800a8f4 <problem_fetch+0x8f64>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	4615      	mov	r5, r2
 800a7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7c0:	6020      	str	r0, [r4, #0]
 800a7c2:	6061      	str	r1, [r4, #4]
 800a7c4:	60a2      	str	r2, [r4, #8]
 800a7c6:	60e3      	str	r3, [r4, #12]
			break;
 800a7c8:	f012 b812 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 249 :
			strcpy(p->name,"YAYYY");
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7d2:	4a49      	ldr	r2, [pc, #292]	; (800a8f8 <problem_fetch+0x8f68>)
 800a7d4:	6810      	ldr	r0, [r2, #0]
 800a7d6:	6018      	str	r0, [r3, #0]
 800a7d8:	8892      	ldrh	r2, [r2, #4]
 800a7da:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a7e2:	4a41      	ldr	r2, [pc, #260]	; (800a8e8 <problem_fetch+0x8f58>)
 800a7e4:	6810      	ldr	r0, [r2, #0]
 800a7e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2208      	movs	r2, #8
 800a7ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,H,G,H,I");
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	33a4      	adds	r3, #164	; 0xa4
 800a7f2:	4a42      	ldr	r2, [pc, #264]	; (800a8fc <problem_fetch+0x8f6c>)
 800a7f4:	461c      	mov	r4, r3
 800a7f6:	4615      	mov	r5, r2
 800a7f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7fa:	6020      	str	r0, [r4, #0]
 800a7fc:	6061      	str	r1, [r4, #4]
 800a7fe:	60a2      	str	r2, [r4, #8]
 800a800:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,12,15,16,18");
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	4a3e      	ldr	r2, [pc, #248]	; (800a900 <problem_fetch+0x8f70>)
 800a808:	461d      	mov	r5, r3
 800a80a:	4614      	mov	r4, r2
 800a80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a80e:	6028      	str	r0, [r5, #0]
 800a810:	6069      	str	r1, [r5, #4]
 800a812:	60aa      	str	r2, [r5, #8]
 800a814:	60eb      	str	r3, [r5, #12]
 800a816:	6820      	ldr	r0, [r4, #0]
 800a818:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a820:	4a34      	ldr	r2, [pc, #208]	; (800a8f4 <problem_fetch+0x8f64>)
 800a822:	461c      	mov	r4, r3
 800a824:	4615      	mov	r5, r2
 800a826:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a828:	6020      	str	r0, [r4, #0]
 800a82a:	6061      	str	r1, [r4, #4]
 800a82c:	60a2      	str	r2, [r4, #8]
 800a82e:	60e3      	str	r3, [r4, #12]
			break;
 800a830:	f011 bfde 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 250 :
			strcpy(p->name,"BEST PROBLEM 567");
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a83a:	4a32      	ldr	r2, [pc, #200]	; (800a904 <problem_fetch+0x8f74>)
 800a83c:	461d      	mov	r5, r3
 800a83e:	4614      	mov	r4, r2
 800a840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a842:	6028      	str	r0, [r5, #0]
 800a844:	6069      	str	r1, [r5, #4]
 800a846:	60aa      	str	r2, [r5, #8]
 800a848:	60eb      	str	r3, [r5, #12]
 800a84a:	7823      	ldrb	r3, [r4, #0]
 800a84c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a854:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <problem_fetch+0x8f1c>)
 800a856:	8811      	ldrh	r1, [r2, #0]
 800a858:	7892      	ldrb	r2, [r2, #2]
 800a85a:	8019      	strh	r1, [r3, #0]
 800a85c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2206      	movs	r2, #6
 800a862:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,E,A,G");
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	33a4      	adds	r3, #164	; 0xa4
 800a868:	4a27      	ldr	r2, [pc, #156]	; (800a908 <problem_fetch+0x8f78>)
 800a86a:	461c      	mov	r4, r3
 800a86c:	4613      	mov	r3, r2
 800a86e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a870:	6020      	str	r0, [r4, #0]
 800a872:	6061      	str	r1, [r4, #4]
 800a874:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,13,14,18,4");
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3304      	adds	r3, #4
 800a87a:	4a24      	ldr	r2, [pc, #144]	; (800a90c <problem_fetch+0x8f7c>)
 800a87c:	461c      	mov	r4, r3
 800a87e:	4613      	mov	r3, r2
 800a880:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a882:	6020      	str	r0, [r4, #0]
 800a884:	6061      	str	r1, [r4, #4]
 800a886:	60a2      	str	r2, [r4, #8]
 800a888:	881a      	ldrh	r2, [r3, #0]
 800a88a:	789b      	ldrb	r3, [r3, #2]
 800a88c:	81a2      	strh	r2, [r4, #12]
 800a88e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,d,d,d,e,s");
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a896:	4a1e      	ldr	r2, [pc, #120]	; (800a910 <problem_fetch+0x8f80>)
 800a898:	461c      	mov	r4, r3
 800a89a:	4613      	mov	r3, r2
 800a89c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a89e:	6020      	str	r0, [r4, #0]
 800a8a0:	6061      	str	r1, [r4, #4]
 800a8a2:	60a2      	str	r2, [r4, #8]
			break;
 800a8a4:	f011 bfa4 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800a8a8:	08026d74 	.word	0x08026d74
 800a8ac:	08023c5c 	.word	0x08023c5c
 800a8b0:	08026d8c 	.word	0x08026d8c
 800a8b4:	08026d9c 	.word	0x08026d9c
 800a8b8:	08026994 	.word	0x08026994
 800a8bc:	08026db4 	.word	0x08026db4
 800a8c0:	08023b50 	.word	0x08023b50
 800a8c4:	08026dcc 	.word	0x08026dcc
 800a8c8:	08026ddc 	.word	0x08026ddc
 800a8cc:	08026df4 	.word	0x08026df4
 800a8d0:	08026e04 	.word	0x08026e04
 800a8d4:	08023c28 	.word	0x08023c28
 800a8d8:	08026e10 	.word	0x08026e10
 800a8dc:	08026e20 	.word	0x08026e20
 800a8e0:	08026e38 	.word	0x08026e38
 800a8e4:	08026e48 	.word	0x08026e48
 800a8e8:	08023b90 	.word	0x08023b90
 800a8ec:	08026e50 	.word	0x08026e50
 800a8f0:	08026e60 	.word	0x08026e60
 800a8f4:	08023cb4 	.word	0x08023cb4
 800a8f8:	08026e74 	.word	0x08026e74
 800a8fc:	08026e7c 	.word	0x08026e7c
 800a900:	08026e8c 	.word	0x08026e8c
 800a904:	08026ea0 	.word	0x08026ea0
 800a908:	08026eb4 	.word	0x08026eb4
 800a90c:	08026ec0 	.word	0x08026ec0
 800a910:	08026ed0 	.word	0x08026ed0
		case 251 :
			strcpy(p->name,"WORLD CUP");
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a91a:	49c2      	ldr	r1, [pc, #776]	; (800ac24 <problem_fetch+0x9294>)
 800a91c:	461a      	mov	r2, r3
 800a91e:	460b      	mov	r3, r1
 800a920:	cb03      	ldmia	r3!, {r0, r1}
 800a922:	6010      	str	r0, [r2, #0]
 800a924:	6051      	str	r1, [r2, #4]
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a930:	4abd      	ldr	r2, [pc, #756]	; (800ac28 <problem_fetch+0x9298>)
 800a932:	6810      	ldr	r0, [r2, #0]
 800a934:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2209      	movs	r2, #9
 800a93a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,H,I,J,G,J,I");
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	33a4      	adds	r3, #164	; 0xa4
 800a940:	4aba      	ldr	r2, [pc, #744]	; (800ac2c <problem_fetch+0x929c>)
 800a942:	461d      	mov	r5, r3
 800a944:	4614      	mov	r4, r2
 800a946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a948:	6028      	str	r0, [r5, #0]
 800a94a:	6069      	str	r1, [r5, #4]
 800a94c:	60aa      	str	r2, [r5, #8]
 800a94e:	60eb      	str	r3, [r5, #12]
 800a950:	8823      	ldrh	r3, [r4, #0]
 800a952:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,10,13,15,16,18");
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3304      	adds	r3, #4
 800a958:	4ab5      	ldr	r2, [pc, #724]	; (800ac30 <problem_fetch+0x92a0>)
 800a95a:	461d      	mov	r5, r3
 800a95c:	4614      	mov	r4, r2
 800a95e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a960:	6028      	str	r0, [r5, #0]
 800a962:	6069      	str	r1, [r5, #4]
 800a964:	60aa      	str	r2, [r5, #8]
 800a966:	60eb      	str	r3, [r5, #12]
 800a968:	cc03      	ldmia	r4!, {r0, r1}
 800a96a:	6128      	str	r0, [r5, #16]
 800a96c:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a974:	4aaf      	ldr	r2, [pc, #700]	; (800ac34 <problem_fetch+0x92a4>)
 800a976:	461d      	mov	r5, r3
 800a978:	4614      	mov	r4, r2
 800a97a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a97c:	6028      	str	r0, [r5, #0]
 800a97e:	6069      	str	r1, [r5, #4]
 800a980:	60aa      	str	r2, [r5, #8]
 800a982:	60eb      	str	r3, [r5, #12]
 800a984:	8823      	ldrh	r3, [r4, #0]
 800a986:	822b      	strh	r3, [r5, #16]
			break;
 800a988:	f011 bf32 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 252 :
			strcpy(p->name,"ALONE IN THE DARK");
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a992:	4aa9      	ldr	r2, [pc, #676]	; (800ac38 <problem_fetch+0x92a8>)
 800a994:	461d      	mov	r5, r3
 800a996:	4614      	mov	r4, r2
 800a998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a99a:	6028      	str	r0, [r5, #0]
 800a99c:	6069      	str	r1, [r5, #4]
 800a99e:	60aa      	str	r2, [r5, #8]
 800a9a0:	60eb      	str	r3, [r5, #12]
 800a9a2:	8823      	ldrh	r3, [r4, #0]
 800a9a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a9ac:	4aa3      	ldr	r2, [pc, #652]	; (800ac3c <problem_fetch+0x92ac>)
 800a9ae:	8811      	ldrh	r1, [r2, #0]
 800a9b0:	7892      	ldrb	r2, [r2, #2]
 800a9b2:	8019      	strh	r1, [r3, #0]
 800a9b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2206      	movs	r2, #6
 800a9ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I,I");
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	33a4      	adds	r3, #164	; 0xa4
 800a9c0:	4a9f      	ldr	r2, [pc, #636]	; (800ac40 <problem_fetch+0x92b0>)
 800a9c2:	461c      	mov	r4, r3
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9c8:	6020      	str	r0, [r4, #0]
 800a9ca:	6061      	str	r1, [r4, #4]
 800a9cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,14,14,18");
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	4a9c      	ldr	r2, [pc, #624]	; (800ac44 <problem_fetch+0x92b4>)
 800a9d4:	461c      	mov	r4, r3
 800a9d6:	4615      	mov	r5, r2
 800a9d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a9da:	6020      	str	r0, [r4, #0]
 800a9dc:	6061      	str	r1, [r4, #4]
 800a9de:	60a2      	str	r2, [r4, #8]
 800a9e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a9e8:	4a97      	ldr	r2, [pc, #604]	; (800ac48 <problem_fetch+0x92b8>)
 800a9ea:	461c      	mov	r4, r3
 800a9ec:	4613      	mov	r3, r2
 800a9ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a9f0:	6020      	str	r0, [r4, #0]
 800a9f2:	6061      	str	r1, [r4, #4]
 800a9f4:	60a2      	str	r2, [r4, #8]
			break;
 800a9f6:	f011 befb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 253 :
			strcpy(p->name,"JUDEMANDUD");
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aa00:	4992      	ldr	r1, [pc, #584]	; (800ac4c <problem_fetch+0x92bc>)
 800aa02:	461a      	mov	r2, r3
 800aa04:	460b      	mov	r3, r1
 800aa06:	cb03      	ldmia	r3!, {r0, r1}
 800aa08:	6010      	str	r0, [r2, #0]
 800aa0a:	6051      	str	r1, [r2, #4]
 800aa0c:	8819      	ldrh	r1, [r3, #0]
 800aa0e:	789b      	ldrb	r3, [r3, #2]
 800aa10:	8111      	strh	r1, [r2, #8]
 800aa12:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa1a:	4a88      	ldr	r2, [pc, #544]	; (800ac3c <problem_fetch+0x92ac>)
 800aa1c:	8811      	ldrh	r1, [r2, #0]
 800aa1e:	7892      	ldrb	r2, [r2, #2]
 800aa20:	8019      	strh	r1, [r3, #0]
 800aa22:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2207      	movs	r2, #7
 800aa28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,B,B,A");
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	33a4      	adds	r3, #164	; 0xa4
 800aa2e:	4a88      	ldr	r2, [pc, #544]	; (800ac50 <problem_fetch+0x92c0>)
 800aa30:	461c      	mov	r4, r3
 800aa32:	4613      	mov	r3, r2
 800aa34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa36:	6020      	str	r0, [r4, #0]
 800aa38:	6061      	str	r1, [r4, #4]
 800aa3a:	60a2      	str	r2, [r4, #8]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,6,9,12,15,18");
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4a83      	ldr	r2, [pc, #524]	; (800ac54 <problem_fetch+0x92c4>)
 800aa46:	461d      	mov	r5, r3
 800aa48:	4614      	mov	r4, r2
 800aa4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa4c:	6028      	str	r0, [r5, #0]
 800aa4e:	6069      	str	r1, [r5, #4]
 800aa50:	60aa      	str	r2, [r5, #8]
 800aa52:	60eb      	str	r3, [r5, #12]
 800aa54:	7823      	ldrb	r3, [r4, #0]
 800aa56:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,s,d,d,d,e");
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aa5e:	4a7e      	ldr	r2, [pc, #504]	; (800ac58 <problem_fetch+0x92c8>)
 800aa60:	461c      	mov	r4, r3
 800aa62:	4613      	mov	r3, r2
 800aa64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa66:	6020      	str	r0, [r4, #0]
 800aa68:	6061      	str	r1, [r4, #4]
 800aa6a:	60a2      	str	r2, [r4, #8]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	81a3      	strh	r3, [r4, #12]
			break;
 800aa70:	f011 bebe 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 254 :
			strcpy(p->name,"BLACK MARINO");
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aa7a:	4a78      	ldr	r2, [pc, #480]	; (800ac5c <problem_fetch+0x92cc>)
 800aa7c:	461c      	mov	r4, r3
 800aa7e:	4613      	mov	r3, r2
 800aa80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	6061      	str	r1, [r4, #4]
 800aa86:	60a2      	str	r2, [r4, #8]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa92:	4a73      	ldr	r2, [pc, #460]	; (800ac60 <problem_fetch+0x92d0>)
 800aa94:	6810      	ldr	r0, [r2, #0]
 800aa96:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2206      	movs	r2, #6
 800aa9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,E,D");
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	33a4      	adds	r3, #164	; 0xa4
 800aaa2:	4a70      	ldr	r2, [pc, #448]	; (800ac64 <problem_fetch+0x92d4>)
 800aaa4:	461c      	mov	r4, r3
 800aaa6:	4613      	mov	r3, r2
 800aaa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aaaa:	6020      	str	r0, [r4, #0]
 800aaac:	6061      	str	r1, [r4, #4]
 800aaae:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4a6c      	ldr	r2, [pc, #432]	; (800ac68 <problem_fetch+0x92d8>)
 800aab6:	461c      	mov	r4, r3
 800aab8:	4615      	mov	r5, r2
 800aaba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aabc:	6020      	str	r0, [r4, #0]
 800aabe:	6061      	str	r1, [r4, #4]
 800aac0:	60a2      	str	r2, [r4, #8]
 800aac2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aaca:	4a68      	ldr	r2, [pc, #416]	; (800ac6c <problem_fetch+0x92dc>)
 800aacc:	461c      	mov	r4, r3
 800aace:	4613      	mov	r3, r2
 800aad0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aad2:	6020      	str	r0, [r4, #0]
 800aad4:	6061      	str	r1, [r4, #4]
 800aad6:	60a2      	str	r2, [r4, #8]
			break;
 800aad8:	f011 be8a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 255 :
			strcpy(p->name,"KIWAK");
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aae2:	4a63      	ldr	r2, [pc, #396]	; (800ac70 <problem_fetch+0x92e0>)
 800aae4:	6810      	ldr	r0, [r2, #0]
 800aae6:	6018      	str	r0, [r3, #0]
 800aae8:	8892      	ldrh	r2, [r2, #4]
 800aaea:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aaf2:	4a4d      	ldr	r2, [pc, #308]	; (800ac28 <problem_fetch+0x9298>)
 800aaf4:	6810      	ldr	r0, [r2, #0]
 800aaf6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2207      	movs	r2, #7
 800aafc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,E,G,D,A");
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	33a4      	adds	r3, #164	; 0xa4
 800ab02:	4a5c      	ldr	r2, [pc, #368]	; (800ac74 <problem_fetch+0x92e4>)
 800ab04:	461c      	mov	r4, r3
 800ab06:	4613      	mov	r3, r2
 800ab08:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab0a:	6020      	str	r0, [r4, #0]
 800ab0c:	6061      	str	r1, [r4, #4]
 800ab0e:	60a2      	str	r2, [r4, #8]
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,14,9,15,18");
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4a57      	ldr	r2, [pc, #348]	; (800ac78 <problem_fetch+0x92e8>)
 800ab1a:	461d      	mov	r5, r3
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab20:	6028      	str	r0, [r5, #0]
 800ab22:	6069      	str	r1, [r5, #4]
 800ab24:	60aa      	str	r2, [r5, #8]
 800ab26:	60eb      	str	r3, [r5, #12]
 800ab28:	8823      	ldrh	r3, [r4, #0]
 800ab2a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ab32:	4a52      	ldr	r2, [pc, #328]	; (800ac7c <problem_fetch+0x92ec>)
 800ab34:	461c      	mov	r4, r3
 800ab36:	4613      	mov	r3, r2
 800ab38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	6061      	str	r1, [r4, #4]
 800ab3e:	60a2      	str	r2, [r4, #8]
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	81a3      	strh	r3, [r4, #12]
			break;
 800ab44:	f011 be54 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 256 :
			strcpy(p->name,"RIESKO");
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab4e:	4a4c      	ldr	r2, [pc, #304]	; (800ac80 <problem_fetch+0x92f0>)
 800ab50:	6810      	ldr	r0, [r2, #0]
 800ab52:	6018      	str	r0, [r3, #0]
 800ab54:	8891      	ldrh	r1, [r2, #4]
 800ab56:	7992      	ldrb	r2, [r2, #6]
 800ab58:	8099      	strh	r1, [r3, #4]
 800ab5a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ab62:	4a31      	ldr	r2, [pc, #196]	; (800ac28 <problem_fetch+0x9298>)
 800ab64:	6810      	ldr	r0, [r2, #0]
 800ab66:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2206      	movs	r2, #6
 800ab6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,F,E,A");
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	33a4      	adds	r3, #164	; 0xa4
 800ab72:	4a44      	ldr	r2, [pc, #272]	; (800ac84 <problem_fetch+0x92f4>)
 800ab74:	461c      	mov	r4, r3
 800ab76:	4613      	mov	r3, r2
 800ab78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab7a:	6020      	str	r0, [r4, #0]
 800ab7c:	6061      	str	r1, [r4, #4]
 800ab7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,14,18");
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4a40      	ldr	r2, [pc, #256]	; (800ac88 <problem_fetch+0x92f8>)
 800ab86:	461c      	mov	r4, r3
 800ab88:	4613      	mov	r3, r2
 800ab8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab8c:	6020      	str	r0, [r4, #0]
 800ab8e:	6061      	str	r1, [r4, #4]
 800ab90:	60a2      	str	r2, [r4, #8]
 800ab92:	881a      	ldrh	r2, [r3, #0]
 800ab94:	789b      	ldrb	r3, [r3, #2]
 800ab96:	81a2      	strh	r2, [r4, #12]
 800ab98:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aba0:	4a32      	ldr	r2, [pc, #200]	; (800ac6c <problem_fetch+0x92dc>)
 800aba2:	461c      	mov	r4, r3
 800aba4:	4613      	mov	r3, r2
 800aba6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aba8:	6020      	str	r0, [r4, #0]
 800abaa:	6061      	str	r1, [r4, #4]
 800abac:	60a2      	str	r2, [r4, #8]
			break;
 800abae:	f011 be1f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 257 :
			strcpy(p->name,"XCRAG");
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800abb8:	4a34      	ldr	r2, [pc, #208]	; (800ac8c <problem_fetch+0x92fc>)
 800abba:	6810      	ldr	r0, [r2, #0]
 800abbc:	6018      	str	r0, [r3, #0]
 800abbe:	8892      	ldrh	r2, [r2, #4]
 800abc0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800abc8:	4a31      	ldr	r2, [pc, #196]	; (800ac90 <problem_fetch+0x9300>)
 800abca:	8811      	ldrh	r1, [r2, #0]
 800abcc:	7892      	ldrb	r2, [r2, #2]
 800abce:	8019      	strh	r1, [r3, #0]
 800abd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2207      	movs	r2, #7
 800abd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,C,E,I");
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	33a4      	adds	r3, #164	; 0xa4
 800abdc:	4a2d      	ldr	r2, [pc, #180]	; (800ac94 <problem_fetch+0x9304>)
 800abde:	461c      	mov	r4, r3
 800abe0:	4613      	mov	r3, r2
 800abe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800abe4:	6020      	str	r0, [r4, #0]
 800abe6:	6061      	str	r1, [r4, #4]
 800abe8:	60a2      	str	r2, [r4, #8]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,14,18");
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4a29      	ldr	r2, [pc, #164]	; (800ac98 <problem_fetch+0x9308>)
 800abf4:	461d      	mov	r5, r3
 800abf6:	4614      	mov	r4, r2
 800abf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abfa:	6028      	str	r0, [r5, #0]
 800abfc:	6069      	str	r1, [r5, #4]
 800abfe:	60aa      	str	r2, [r5, #8]
 800ac00:	60eb      	str	r3, [r5, #12]
 800ac02:	8823      	ldrh	r3, [r4, #0]
 800ac04:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ac0c:	4a23      	ldr	r2, [pc, #140]	; (800ac9c <problem_fetch+0x930c>)
 800ac0e:	461c      	mov	r4, r3
 800ac10:	4613      	mov	r3, r2
 800ac12:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ac14:	6020      	str	r0, [r4, #0]
 800ac16:	6061      	str	r1, [r4, #4]
 800ac18:	60a2      	str	r2, [r4, #8]
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	81a3      	strh	r3, [r4, #12]
			break;
 800ac1e:	f011 bde7 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800ac22:	bf00      	nop
 800ac24:	08026edc 	.word	0x08026edc
 800ac28:	08023b90 	.word	0x08023b90
 800ac2c:	08026ee8 	.word	0x08026ee8
 800ac30:	08026efc 	.word	0x08026efc
 800ac34:	08024b74 	.word	0x08024b74
 800ac38:	08026f14 	.word	0x08026f14
 800ac3c:	08023b50 	.word	0x08023b50
 800ac40:	08026f28 	.word	0x08026f28
 800ac44:	08026f34 	.word	0x08026f34
 800ac48:	08023f2c 	.word	0x08023f2c
 800ac4c:	08026f44 	.word	0x08026f44
 800ac50:	08026f50 	.word	0x08026f50
 800ac54:	08026f60 	.word	0x08026f60
 800ac58:	08026f74 	.word	0x08026f74
 800ac5c:	08026f84 	.word	0x08026f84
 800ac60:	08023c28 	.word	0x08023c28
 800ac64:	08026f94 	.word	0x08026f94
 800ac68:	08026240 	.word	0x08026240
 800ac6c:	08023b70 	.word	0x08023b70
 800ac70:	08026fa0 	.word	0x08026fa0
 800ac74:	08026fa8 	.word	0x08026fa8
 800ac78:	08026fb8 	.word	0x08026fb8
 800ac7c:	08023d18 	.word	0x08023d18
 800ac80:	08026fcc 	.word	0x08026fcc
 800ac84:	08026fd4 	.word	0x08026fd4
 800ac88:	08026fe0 	.word	0x08026fe0
 800ac8c:	08026ff0 	.word	0x08026ff0
 800ac90:	08023c5c 	.word	0x08023c5c
 800ac94:	08026ff8 	.word	0x08026ff8
 800ac98:	08027008 	.word	0x08027008
 800ac9c:	08023c08 	.word	0x08023c08
		case 258 :
			strcpy(p->name,"LITTLE MAN ON CAMPUS");
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aca6:	4ab2      	ldr	r2, [pc, #712]	; (800af70 <problem_fetch+0x95e0>)
 800aca8:	461d      	mov	r5, r3
 800acaa:	4614      	mov	r4, r2
 800acac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acae:	6028      	str	r0, [r5, #0]
 800acb0:	6069      	str	r1, [r5, #4]
 800acb2:	60aa      	str	r2, [r5, #8]
 800acb4:	60eb      	str	r3, [r5, #12]
 800acb6:	6820      	ldr	r0, [r4, #0]
 800acb8:	6128      	str	r0, [r5, #16]
 800acba:	7923      	ldrb	r3, [r4, #4]
 800acbc:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7B");
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800acc4:	4aab      	ldr	r2, [pc, #684]	; (800af74 <problem_fetch+0x95e4>)
 800acc6:	8811      	ldrh	r1, [r2, #0]
 800acc8:	7892      	ldrb	r2, [r2, #2]
 800acca:	8019      	strh	r1, [r3, #0]
 800accc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2206      	movs	r2, #6
 800acd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,F,H,K,I");
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	33a4      	adds	r3, #164	; 0xa4
 800acd8:	4aa7      	ldr	r2, [pc, #668]	; (800af78 <problem_fetch+0x95e8>)
 800acda:	461c      	mov	r4, r3
 800acdc:	4613      	mov	r3, r2
 800acde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ace0:	6020      	str	r0, [r4, #0]
 800ace2:	6061      	str	r1, [r4, #4]
 800ace4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,12,14,18");
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	3304      	adds	r3, #4
 800acea:	4aa4      	ldr	r2, [pc, #656]	; (800af7c <problem_fetch+0x95ec>)
 800acec:	461c      	mov	r4, r3
 800acee:	4615      	mov	r5, r2
 800acf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	6061      	str	r1, [r4, #4]
 800acf6:	60a2      	str	r2, [r4, #8]
 800acf8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ad00:	4a9f      	ldr	r2, [pc, #636]	; (800af80 <problem_fetch+0x95f0>)
 800ad02:	461c      	mov	r4, r3
 800ad04:	4613      	mov	r3, r2
 800ad06:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad08:	6020      	str	r0, [r4, #0]
 800ad0a:	6061      	str	r1, [r4, #4]
 800ad0c:	60a2      	str	r2, [r4, #8]
			break;
 800ad0e:	f011 bd6f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 259 :
			strcpy(p->name,"KILL HIM YOUR LEGS");
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad18:	4a9a      	ldr	r2, [pc, #616]	; (800af84 <problem_fetch+0x95f4>)
 800ad1a:	461d      	mov	r5, r3
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad20:	6028      	str	r0, [r5, #0]
 800ad22:	6069      	str	r1, [r5, #4]
 800ad24:	60aa      	str	r2, [r5, #8]
 800ad26:	60eb      	str	r3, [r5, #12]
 800ad28:	8823      	ldrh	r3, [r4, #0]
 800ad2a:	78a2      	ldrb	r2, [r4, #2]
 800ad2c:	822b      	strh	r3, [r5, #16]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ad38:	4a8e      	ldr	r2, [pc, #568]	; (800af74 <problem_fetch+0x95e4>)
 800ad3a:	8811      	ldrh	r1, [r2, #0]
 800ad3c:	7892      	ldrb	r2, [r2, #2]
 800ad3e:	8019      	strh	r1, [r3, #0]
 800ad40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2204      	movs	r2, #4
 800ad46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I");
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	33a4      	adds	r3, #164	; 0xa4
 800ad4c:	498e      	ldr	r1, [pc, #568]	; (800af88 <problem_fetch+0x95f8>)
 800ad4e:	461a      	mov	r2, r3
 800ad50:	460b      	mov	r3, r1
 800ad52:	cb03      	ldmia	r3!, {r0, r1}
 800ad54:	6010      	str	r0, [r2, #0]
 800ad56:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	498b      	ldr	r1, [pc, #556]	; (800af8c <problem_fetch+0x95fc>)
 800ad5e:	461a      	mov	r2, r3
 800ad60:	460b      	mov	r3, r1
 800ad62:	cb03      	ldmia	r3!, {r0, r1}
 800ad64:	6010      	str	r0, [r2, #0]
 800ad66:	6051      	str	r1, [r2, #4]
 800ad68:	8819      	ldrh	r1, [r3, #0]
 800ad6a:	789b      	ldrb	r3, [r3, #2]
 800ad6c:	8111      	strh	r1, [r2, #8]
 800ad6e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ad76:	4986      	ldr	r1, [pc, #536]	; (800af90 <problem_fetch+0x9600>)
 800ad78:	461a      	mov	r2, r3
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	cb03      	ldmia	r3!, {r0, r1}
 800ad7e:	6010      	str	r0, [r2, #0]
 800ad80:	6051      	str	r1, [r2, #4]
			break;
 800ad82:	f011 bd35 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 260 :
			strcpy(p->name,"HOG TROUGH");
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad8c:	4981      	ldr	r1, [pc, #516]	; (800af94 <problem_fetch+0x9604>)
 800ad8e:	461a      	mov	r2, r3
 800ad90:	460b      	mov	r3, r1
 800ad92:	cb03      	ldmia	r3!, {r0, r1}
 800ad94:	6010      	str	r0, [r2, #0]
 800ad96:	6051      	str	r1, [r2, #4]
 800ad98:	8819      	ldrh	r1, [r3, #0]
 800ad9a:	789b      	ldrb	r3, [r3, #2]
 800ad9c:	8111      	strh	r1, [r2, #8]
 800ad9e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ada6:	4a7c      	ldr	r2, [pc, #496]	; (800af98 <problem_fetch+0x9608>)
 800ada8:	6810      	ldr	r0, [r2, #0]
 800adaa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2206      	movs	r2, #6
 800adb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,D,D");
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	33a4      	adds	r3, #164	; 0xa4
 800adb6:	4a79      	ldr	r2, [pc, #484]	; (800af9c <problem_fetch+0x960c>)
 800adb8:	461c      	mov	r4, r3
 800adba:	4613      	mov	r3, r2
 800adbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800adbe:	6020      	str	r0, [r4, #0]
 800adc0:	6061      	str	r1, [r4, #4]
 800adc2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,15,18");
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3304      	adds	r3, #4
 800adc8:	4a75      	ldr	r2, [pc, #468]	; (800afa0 <problem_fetch+0x9610>)
 800adca:	461c      	mov	r4, r3
 800adcc:	4613      	mov	r3, r2
 800adce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800add0:	6020      	str	r0, [r4, #0]
 800add2:	6061      	str	r1, [r4, #4]
 800add4:	60a2      	str	r2, [r4, #8]
 800add6:	881a      	ldrh	r2, [r3, #0]
 800add8:	789b      	ldrb	r3, [r3, #2]
 800adda:	81a2      	strh	r2, [r4, #12]
 800addc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ade4:	4a66      	ldr	r2, [pc, #408]	; (800af80 <problem_fetch+0x95f0>)
 800ade6:	461c      	mov	r4, r3
 800ade8:	4613      	mov	r3, r2
 800adea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800adec:	6020      	str	r0, [r4, #0]
 800adee:	6061      	str	r1, [r4, #4]
 800adf0:	60a2      	str	r2, [r4, #8]
			break;
 800adf2:	f011 bcfd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 261 :
			strcpy(p->name,"FLOOZY DOO");
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800adfc:	4969      	ldr	r1, [pc, #420]	; (800afa4 <problem_fetch+0x9614>)
 800adfe:	461a      	mov	r2, r3
 800ae00:	460b      	mov	r3, r1
 800ae02:	cb03      	ldmia	r3!, {r0, r1}
 800ae04:	6010      	str	r0, [r2, #0]
 800ae06:	6051      	str	r1, [r2, #4]
 800ae08:	8819      	ldrh	r1, [r3, #0]
 800ae0a:	789b      	ldrb	r3, [r3, #2]
 800ae0c:	8111      	strh	r1, [r2, #8]
 800ae0e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae16:	4a64      	ldr	r2, [pc, #400]	; (800afa8 <problem_fetch+0x9618>)
 800ae18:	6810      	ldr	r0, [r2, #0]
 800ae1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2208      	movs	r2, #8
 800ae20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,A,C,A,D");
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	33a4      	adds	r3, #164	; 0xa4
 800ae26:	4a61      	ldr	r2, [pc, #388]	; (800afac <problem_fetch+0x961c>)
 800ae28:	461c      	mov	r4, r3
 800ae2a:	4615      	mov	r5, r2
 800ae2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae2e:	6020      	str	r0, [r4, #0]
 800ae30:	6061      	str	r1, [r4, #4]
 800ae32:	60a2      	str	r2, [r4, #8]
 800ae34:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,9,13,14,18");
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4a5d      	ldr	r2, [pc, #372]	; (800afb0 <problem_fetch+0x9620>)
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	4614      	mov	r4, r2
 800ae40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae42:	6028      	str	r0, [r5, #0]
 800ae44:	6069      	str	r1, [r5, #4]
 800ae46:	60aa      	str	r2, [r5, #8]
 800ae48:	60eb      	str	r3, [r5, #12]
 800ae4a:	6820      	ldr	r0, [r4, #0]
 800ae4c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ae54:	4a57      	ldr	r2, [pc, #348]	; (800afb4 <problem_fetch+0x9624>)
 800ae56:	461c      	mov	r4, r3
 800ae58:	4615      	mov	r5, r2
 800ae5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae5c:	6020      	str	r0, [r4, #0]
 800ae5e:	6061      	str	r1, [r4, #4]
 800ae60:	60a2      	str	r2, [r4, #8]
 800ae62:	60e3      	str	r3, [r4, #12]
			break;
 800ae64:	f011 bcc4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 262 :
			strcpy(p->name,"SZECHUAN");
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae6e:	4952      	ldr	r1, [pc, #328]	; (800afb8 <problem_fetch+0x9628>)
 800ae70:	461a      	mov	r2, r3
 800ae72:	460b      	mov	r3, r1
 800ae74:	cb03      	ldmia	r3!, {r0, r1}
 800ae76:	6010      	str	r0, [r2, #0]
 800ae78:	6051      	str	r1, [r2, #4]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae84:	4a3b      	ldr	r2, [pc, #236]	; (800af74 <problem_fetch+0x95e4>)
 800ae86:	8811      	ldrh	r1, [r2, #0]
 800ae88:	7892      	ldrb	r2, [r2, #2]
 800ae8a:	8019      	strh	r1, [r3, #0]
 800ae8c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2209      	movs	r2, #9
 800ae92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,A,C,E,A,D,G,I");
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	33a4      	adds	r3, #164	; 0xa4
 800ae98:	4a48      	ldr	r2, [pc, #288]	; (800afbc <problem_fetch+0x962c>)
 800ae9a:	461d      	mov	r5, r3
 800ae9c:	4614      	mov	r4, r2
 800ae9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aea0:	6028      	str	r0, [r5, #0]
 800aea2:	6069      	str	r1, [r5, #4]
 800aea4:	60aa      	str	r2, [r5, #8]
 800aea6:	60eb      	str	r3, [r5, #12]
 800aea8:	8823      	ldrh	r3, [r4, #0]
 800aeaa:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,9,5,12,14,15,17,18");
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4a43      	ldr	r2, [pc, #268]	; (800afc0 <problem_fetch+0x9630>)
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	4615      	mov	r5, r2
 800aeb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aeb8:	6020      	str	r0, [r4, #0]
 800aeba:	6061      	str	r1, [r4, #4]
 800aebc:	60a2      	str	r2, [r4, #8]
 800aebe:	60e3      	str	r3, [r4, #12]
 800aec0:	6828      	ldr	r0, [r5, #0]
 800aec2:	6120      	str	r0, [r4, #16]
 800aec4:	88ab      	ldrh	r3, [r5, #4]
 800aec6:	79aa      	ldrb	r2, [r5, #6]
 800aec8:	82a3      	strh	r3, [r4, #20]
 800aeca:	4613      	mov	r3, r2
 800aecc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aed4:	4a3b      	ldr	r2, [pc, #236]	; (800afc4 <problem_fetch+0x9634>)
 800aed6:	461d      	mov	r5, r3
 800aed8:	4614      	mov	r4, r2
 800aeda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aedc:	6028      	str	r0, [r5, #0]
 800aede:	6069      	str	r1, [r5, #4]
 800aee0:	60aa      	str	r2, [r5, #8]
 800aee2:	60eb      	str	r3, [r5, #12]
 800aee4:	8823      	ldrh	r3, [r4, #0]
 800aee6:	822b      	strh	r3, [r5, #16]
			break;
 800aee8:	f011 bc82 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 263 :
			strcpy(p->name,"BLACK.HO");
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aef2:	4935      	ldr	r1, [pc, #212]	; (800afc8 <problem_fetch+0x9638>)
 800aef4:	461a      	mov	r2, r3
 800aef6:	460b      	mov	r3, r1
 800aef8:	cb03      	ldmia	r3!, {r0, r1}
 800aefa:	6010      	str	r0, [r2, #0]
 800aefc:	6051      	str	r1, [r2, #4]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af08:	4a30      	ldr	r2, [pc, #192]	; (800afcc <problem_fetch+0x963c>)
 800af0a:	8811      	ldrh	r1, [r2, #0]
 800af0c:	7892      	ldrb	r2, [r2, #2]
 800af0e:	8019      	strh	r1, [r3, #0]
 800af10:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2209      	movs	r2, #9
 800af16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,A,E,I,A,E,G,H");
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	33a4      	adds	r3, #164	; 0xa4
 800af1c:	4a2c      	ldr	r2, [pc, #176]	; (800afd0 <problem_fetch+0x9640>)
 800af1e:	461d      	mov	r5, r3
 800af20:	4614      	mov	r4, r2
 800af22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af24:	6028      	str	r0, [r5, #0]
 800af26:	6069      	str	r1, [r5, #4]
 800af28:	60aa      	str	r2, [r5, #8]
 800af2a:	60eb      	str	r3, [r5, #12]
 800af2c:	8823      	ldrh	r3, [r4, #0]
 800af2e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,9,18,14,16,17,12");
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	4a27      	ldr	r2, [pc, #156]	; (800afd4 <problem_fetch+0x9644>)
 800af36:	461c      	mov	r4, r3
 800af38:	4615      	mov	r5, r2
 800af3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af3c:	6020      	str	r0, [r4, #0]
 800af3e:	6061      	str	r1, [r4, #4]
 800af40:	60a2      	str	r2, [r4, #8]
 800af42:	60e3      	str	r3, [r4, #12]
 800af44:	6828      	ldr	r0, [r5, #0]
 800af46:	6120      	str	r0, [r4, #16]
 800af48:	88ab      	ldrh	r3, [r5, #4]
 800af4a:	79aa      	ldrb	r2, [r5, #6]
 800af4c:	82a3      	strh	r3, [r4, #20]
 800af4e:	4613      	mov	r3, r2
 800af50:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800af58:	4a1f      	ldr	r2, [pc, #124]	; (800afd8 <problem_fetch+0x9648>)
 800af5a:	461d      	mov	r5, r3
 800af5c:	4614      	mov	r4, r2
 800af5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af60:	6028      	str	r0, [r5, #0]
 800af62:	6069      	str	r1, [r5, #4]
 800af64:	60aa      	str	r2, [r5, #8]
 800af66:	60eb      	str	r3, [r5, #12]
 800af68:	8823      	ldrh	r3, [r4, #0]
 800af6a:	822b      	strh	r3, [r5, #16]
			break;
 800af6c:	f011 bc40 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800af70:	0802701c 	.word	0x0802701c
 800af74:	08024288 	.word	0x08024288
 800af78:	08027034 	.word	0x08027034
 800af7c:	08027040 	.word	0x08027040
 800af80:	08023f2c 	.word	0x08023f2c
 800af84:	08027050 	.word	0x08027050
 800af88:	08027064 	.word	0x08027064
 800af8c:	0802706c 	.word	0x0802706c
 800af90:	08023ce4 	.word	0x08023ce4
 800af94:	08027078 	.word	0x08027078
 800af98:	08023b90 	.word	0x08023b90
 800af9c:	08027084 	.word	0x08027084
 800afa0:	08027090 	.word	0x08027090
 800afa4:	080270a0 	.word	0x080270a0
 800afa8:	08023d30 	.word	0x08023d30
 800afac:	080270ac 	.word	0x080270ac
 800afb0:	080270bc 	.word	0x080270bc
 800afb4:	08023da0 	.word	0x08023da0
 800afb8:	080270d0 	.word	0x080270d0
 800afbc:	080270dc 	.word	0x080270dc
 800afc0:	080270f0 	.word	0x080270f0
 800afc4:	08025a48 	.word	0x08025a48
 800afc8:	08027108 	.word	0x08027108
 800afcc:	080243c4 	.word	0x080243c4
 800afd0:	08027114 	.word	0x08027114
 800afd4:	08027128 	.word	0x08027128
 800afd8:	08026d38 	.word	0x08026d38
		case 264 :
			strcpy(p->name,"SLIPPERY WHEN WET");
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800afe2:	4ac4      	ldr	r2, [pc, #784]	; (800b2f4 <problem_fetch+0x9964>)
 800afe4:	461d      	mov	r5, r3
 800afe6:	4614      	mov	r4, r2
 800afe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afea:	6028      	str	r0, [r5, #0]
 800afec:	6069      	str	r1, [r5, #4]
 800afee:	60aa      	str	r2, [r5, #8]
 800aff0:	60eb      	str	r3, [r5, #12]
 800aff2:	8823      	ldrh	r3, [r4, #0]
 800aff4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800affc:	4abe      	ldr	r2, [pc, #760]	; (800b2f8 <problem_fetch+0x9968>)
 800affe:	8811      	ldrh	r1, [r2, #0]
 800b000:	7892      	ldrb	r2, [r2, #2]
 800b002:	8019      	strh	r1, [r3, #0]
 800b004:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2207      	movs	r2, #7
 800b00a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,D,D,A");
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	33a4      	adds	r3, #164	; 0xa4
 800b010:	4aba      	ldr	r2, [pc, #744]	; (800b2fc <problem_fetch+0x996c>)
 800b012:	461c      	mov	r4, r3
 800b014:	4613      	mov	r3, r2
 800b016:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b018:	6020      	str	r0, [r4, #0]
 800b01a:	6061      	str	r1, [r4, #4]
 800b01c:	60a2      	str	r2, [r4, #8]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,15,18,18");
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3304      	adds	r3, #4
 800b026:	4ab6      	ldr	r2, [pc, #728]	; (800b300 <problem_fetch+0x9970>)
 800b028:	461d      	mov	r5, r3
 800b02a:	4614      	mov	r4, r2
 800b02c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b02e:	6028      	str	r0, [r5, #0]
 800b030:	6069      	str	r1, [r5, #4]
 800b032:	60aa      	str	r2, [r5, #8]
 800b034:	60eb      	str	r3, [r5, #12]
 800b036:	8823      	ldrh	r3, [r4, #0]
 800b038:	78a2      	ldrb	r2, [r4, #2]
 800b03a:	822b      	strh	r3, [r5, #16]
 800b03c:	4613      	mov	r3, r2
 800b03e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,e");
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b046:	4aaf      	ldr	r2, [pc, #700]	; (800b304 <problem_fetch+0x9974>)
 800b048:	461c      	mov	r4, r3
 800b04a:	4613      	mov	r3, r2
 800b04c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b04e:	6020      	str	r0, [r4, #0]
 800b050:	6061      	str	r1, [r4, #4]
 800b052:	60a2      	str	r2, [r4, #8]
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	81a3      	strh	r3, [r4, #12]
			break;
 800b058:	f011 bbca 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 265 :
			strcpy(p->name,"UNSULLIED");
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b062:	49a9      	ldr	r1, [pc, #676]	; (800b308 <problem_fetch+0x9978>)
 800b064:	461a      	mov	r2, r3
 800b066:	460b      	mov	r3, r1
 800b068:	cb03      	ldmia	r3!, {r0, r1}
 800b06a:	6010      	str	r0, [r2, #0]
 800b06c:	6051      	str	r1, [r2, #4]
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b078:	4a9f      	ldr	r2, [pc, #636]	; (800b2f8 <problem_fetch+0x9968>)
 800b07a:	8811      	ldrh	r1, [r2, #0]
 800b07c:	7892      	ldrb	r2, [r2, #2]
 800b07e:	8019      	strh	r1, [r3, #0]
 800b080:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2204      	movs	r2, #4
 800b086:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,D");
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	33a4      	adds	r3, #164	; 0xa4
 800b08c:	499f      	ldr	r1, [pc, #636]	; (800b30c <problem_fetch+0x997c>)
 800b08e:	461a      	mov	r2, r3
 800b090:	460b      	mov	r3, r1
 800b092:	cb03      	ldmia	r3!, {r0, r1}
 800b094:	6010      	str	r0, [r2, #0]
 800b096:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	3304      	adds	r3, #4
 800b09c:	499c      	ldr	r1, [pc, #624]	; (800b310 <problem_fetch+0x9980>)
 800b09e:	461a      	mov	r2, r3
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	cb03      	ldmia	r3!, {r0, r1}
 800b0a4:	6010      	str	r0, [r2, #0]
 800b0a6:	6051      	str	r1, [r2, #4]
 800b0a8:	8819      	ldrh	r1, [r3, #0]
 800b0aa:	789b      	ldrb	r3, [r3, #2]
 800b0ac:	8111      	strh	r1, [r2, #8]
 800b0ae:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b0b6:	4997      	ldr	r1, [pc, #604]	; (800b314 <problem_fetch+0x9984>)
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	cb03      	ldmia	r3!, {r0, r1}
 800b0be:	6010      	str	r0, [r2, #0]
 800b0c0:	6051      	str	r1, [r2, #4]
			break;
 800b0c2:	f011 bb95 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 266 :
			strcpy(p->name,"HEAVY LIFTING");
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b0cc:	4a92      	ldr	r2, [pc, #584]	; (800b318 <problem_fetch+0x9988>)
 800b0ce:	461c      	mov	r4, r3
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0d4:	6020      	str	r0, [r4, #0]
 800b0d6:	6061      	str	r1, [r4, #4]
 800b0d8:	60a2      	str	r2, [r4, #8]
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b0e4:	4a8d      	ldr	r2, [pc, #564]	; (800b31c <problem_fetch+0x998c>)
 800b0e6:	6810      	ldr	r0, [r2, #0]
 800b0e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2206      	movs	r2, #6
 800b0ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,G,D,D");
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	33a4      	adds	r3, #164	; 0xa4
 800b0f4:	4a8a      	ldr	r2, [pc, #552]	; (800b320 <problem_fetch+0x9990>)
 800b0f6:	461c      	mov	r4, r3
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0fc:	6020      	str	r0, [r4, #0]
 800b0fe:	6061      	str	r1, [r4, #4]
 800b100:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,10,14,15,18");
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	3304      	adds	r3, #4
 800b106:	4a87      	ldr	r2, [pc, #540]	; (800b324 <problem_fetch+0x9994>)
 800b108:	461c      	mov	r4, r3
 800b10a:	4615      	mov	r5, r2
 800b10c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b10e:	6020      	str	r0, [r4, #0]
 800b110:	6061      	str	r1, [r4, #4]
 800b112:	60a2      	str	r2, [r4, #8]
 800b114:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b11c:	4a82      	ldr	r2, [pc, #520]	; (800b328 <problem_fetch+0x9998>)
 800b11e:	461c      	mov	r4, r3
 800b120:	4613      	mov	r3, r2
 800b122:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b124:	6020      	str	r0, [r4, #0]
 800b126:	6061      	str	r1, [r4, #4]
 800b128:	60a2      	str	r2, [r4, #8]
			break;
 800b12a:	f011 bb61 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 267 :
			strcpy(p->name,"SOFA KING SNAKED");
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b134:	4a7d      	ldr	r2, [pc, #500]	; (800b32c <problem_fetch+0x999c>)
 800b136:	461d      	mov	r5, r3
 800b138:	4614      	mov	r4, r2
 800b13a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b13c:	6028      	str	r0, [r5, #0]
 800b13e:	6069      	str	r1, [r5, #4]
 800b140:	60aa      	str	r2, [r5, #8]
 800b142:	60eb      	str	r3, [r5, #12]
 800b144:	7823      	ldrb	r3, [r4, #0]
 800b146:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b14e:	4a78      	ldr	r2, [pc, #480]	; (800b330 <problem_fetch+0x99a0>)
 800b150:	8811      	ldrh	r1, [r2, #0]
 800b152:	7892      	ldrb	r2, [r2, #2]
 800b154:	8019      	strh	r1, [r3, #0]
 800b156:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2206      	movs	r2, #6
 800b15c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,I,D");
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	33a4      	adds	r3, #164	; 0xa4
 800b162:	4a74      	ldr	r2, [pc, #464]	; (800b334 <problem_fetch+0x99a4>)
 800b164:	461c      	mov	r4, r3
 800b166:	4613      	mov	r3, r2
 800b168:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b16a:	6020      	str	r0, [r4, #0]
 800b16c:	6061      	str	r1, [r4, #4]
 800b16e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,14,18");
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3304      	adds	r3, #4
 800b174:	4a70      	ldr	r2, [pc, #448]	; (800b338 <problem_fetch+0x99a8>)
 800b176:	461c      	mov	r4, r3
 800b178:	4615      	mov	r5, r2
 800b17a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b17c:	6020      	str	r0, [r4, #0]
 800b17e:	6061      	str	r1, [r4, #4]
 800b180:	60a2      	str	r2, [r4, #8]
 800b182:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b18a:	4a6c      	ldr	r2, [pc, #432]	; (800b33c <problem_fetch+0x99ac>)
 800b18c:	461c      	mov	r4, r3
 800b18e:	4613      	mov	r3, r2
 800b190:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	6061      	str	r1, [r4, #4]
 800b196:	60a2      	str	r2, [r4, #8]
			break;
 800b198:	f011 bb2a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 268 :
			strcpy(p->name,"SOFA KING JUGGY");
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b1a2:	4a67      	ldr	r2, [pc, #412]	; (800b340 <problem_fetch+0x99b0>)
 800b1a4:	461c      	mov	r4, r3
 800b1a6:	4615      	mov	r5, r2
 800b1a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1aa:	6020      	str	r0, [r4, #0]
 800b1ac:	6061      	str	r1, [r4, #4]
 800b1ae:	60a2      	str	r2, [r4, #8]
 800b1b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b1b8:	4a62      	ldr	r2, [pc, #392]	; (800b344 <problem_fetch+0x99b4>)
 800b1ba:	6810      	ldr	r0, [r2, #0]
 800b1bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2205      	movs	r2, #5
 800b1c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,D");
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	33a4      	adds	r3, #164	; 0xa4
 800b1c8:	495f      	ldr	r1, [pc, #380]	; (800b348 <problem_fetch+0x99b8>)
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	cb03      	ldmia	r3!, {r0, r1}
 800b1d0:	6010      	str	r0, [r2, #0]
 800b1d2:	6051      	str	r1, [r2, #4]
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4a5b      	ldr	r2, [pc, #364]	; (800b34c <problem_fetch+0x99bc>)
 800b1de:	461c      	mov	r4, r3
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1e4:	6020      	str	r0, [r4, #0]
 800b1e6:	6061      	str	r1, [r4, #4]
 800b1e8:	60a2      	str	r2, [r4, #8]
 800b1ea:	881b      	ldrh	r3, [r3, #0]
 800b1ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b1f4:	4956      	ldr	r1, [pc, #344]	; (800b350 <problem_fetch+0x99c0>)
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	cb03      	ldmia	r3!, {r0, r1}
 800b1fc:	6010      	str	r0, [r2, #0]
 800b1fe:	6051      	str	r1, [r2, #4]
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	8113      	strh	r3, [r2, #8]
			break;
 800b204:	f011 baf4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 269 :
			strcpy(p->name,"THE PEOPLE'S HEEL HOOK");
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b20e:	4a51      	ldr	r2, [pc, #324]	; (800b354 <problem_fetch+0x99c4>)
 800b210:	461c      	mov	r4, r3
 800b212:	4615      	mov	r5, r2
 800b214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b216:	6020      	str	r0, [r4, #0]
 800b218:	6061      	str	r1, [r4, #4]
 800b21a:	60a2      	str	r2, [r4, #8]
 800b21c:	60e3      	str	r3, [r4, #12]
 800b21e:	6828      	ldr	r0, [r5, #0]
 800b220:	6120      	str	r0, [r4, #16]
 800b222:	88ab      	ldrh	r3, [r5, #4]
 800b224:	79aa      	ldrb	r2, [r5, #6]
 800b226:	82a3      	strh	r3, [r4, #20]
 800b228:	4613      	mov	r3, r2
 800b22a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b232:	4a31      	ldr	r2, [pc, #196]	; (800b2f8 <problem_fetch+0x9968>)
 800b234:	8811      	ldrh	r1, [r2, #0]
 800b236:	7892      	ldrb	r2, [r2, #2]
 800b238:	8019      	strh	r1, [r3, #0]
 800b23a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2205      	movs	r2, #5
 800b240:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	33a4      	adds	r3, #164	; 0xa4
 800b246:	4944      	ldr	r1, [pc, #272]	; (800b358 <problem_fetch+0x99c8>)
 800b248:	461a      	mov	r2, r3
 800b24a:	460b      	mov	r3, r1
 800b24c:	cb03      	ldmia	r3!, {r0, r1}
 800b24e:	6010      	str	r0, [r2, #0]
 800b250:	6051      	str	r1, [r2, #4]
 800b252:	881b      	ldrh	r3, [r3, #0]
 800b254:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,14,18");
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3304      	adds	r3, #4
 800b25a:	4a40      	ldr	r2, [pc, #256]	; (800b35c <problem_fetch+0x99cc>)
 800b25c:	461c      	mov	r4, r3
 800b25e:	4613      	mov	r3, r2
 800b260:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b262:	6020      	str	r0, [r4, #0]
 800b264:	6061      	str	r1, [r4, #4]
 800b266:	60a2      	str	r2, [r4, #8]
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b272:	4937      	ldr	r1, [pc, #220]	; (800b350 <problem_fetch+0x99c0>)
 800b274:	461a      	mov	r2, r3
 800b276:	460b      	mov	r3, r1
 800b278:	cb03      	ldmia	r3!, {r0, r1}
 800b27a:	6010      	str	r0, [r2, #0]
 800b27c:	6051      	str	r1, [r2, #4]
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	8113      	strh	r3, [r2, #8]
			break;
 800b282:	f011 bab5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 270 :
			strcpy(p->name,"ZIO BENNY");
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b28c:	4934      	ldr	r1, [pc, #208]	; (800b360 <problem_fetch+0x99d0>)
 800b28e:	461a      	mov	r2, r3
 800b290:	460b      	mov	r3, r1
 800b292:	cb03      	ldmia	r3!, {r0, r1}
 800b294:	6010      	str	r0, [r2, #0]
 800b296:	6051      	str	r1, [r2, #4]
 800b298:	881b      	ldrh	r3, [r3, #0]
 800b29a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b2a2:	4a1e      	ldr	r2, [pc, #120]	; (800b31c <problem_fetch+0x998c>)
 800b2a4:	6810      	ldr	r0, [r2, #0]
 800b2a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2205      	movs	r2, #5
 800b2ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,D");
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	33a4      	adds	r3, #164	; 0xa4
 800b2b2:	492c      	ldr	r1, [pc, #176]	; (800b364 <problem_fetch+0x99d4>)
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	cb03      	ldmia	r3!, {r0, r1}
 800b2ba:	6010      	str	r0, [r2, #0]
 800b2bc:	6051      	str	r1, [r2, #4]
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	4a28      	ldr	r2, [pc, #160]	; (800b368 <problem_fetch+0x99d8>)
 800b2c8:	461c      	mov	r4, r3
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b2ce:	6020      	str	r0, [r4, #0]
 800b2d0:	6061      	str	r1, [r4, #4]
 800b2d2:	60a2      	str	r2, [r4, #8]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b2de:	491c      	ldr	r1, [pc, #112]	; (800b350 <problem_fetch+0x99c0>)
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	cb03      	ldmia	r3!, {r0, r1}
 800b2e6:	6010      	str	r0, [r2, #0]
 800b2e8:	6051      	str	r1, [r2, #4]
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	8113      	strh	r3, [r2, #8]
			break;
 800b2ee:	f011 ba7f 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800b2f2:	bf00      	nop
 800b2f4:	08027140 	.word	0x08027140
 800b2f8:	08023b50 	.word	0x08023b50
 800b2fc:	08027154 	.word	0x08027154
 800b300:	08027164 	.word	0x08027164
 800b304:	08027178 	.word	0x08027178
 800b308:	08027188 	.word	0x08027188
 800b30c:	08027194 	.word	0x08027194
 800b310:	0802719c 	.word	0x0802719c
 800b314:	08023ce4 	.word	0x08023ce4
 800b318:	080271a8 	.word	0x080271a8
 800b31c:	08023d30 	.word	0x08023d30
 800b320:	080271b8 	.word	0x080271b8
 800b324:	080271c4 	.word	0x080271c4
 800b328:	08023b70 	.word	0x08023b70
 800b32c:	080271d4 	.word	0x080271d4
 800b330:	08024288 	.word	0x08024288
 800b334:	080271e8 	.word	0x080271e8
 800b338:	080271f4 	.word	0x080271f4
 800b33c:	08023f2c 	.word	0x08023f2c
 800b340:	08027204 	.word	0x08027204
 800b344:	08023ccc 	.word	0x08023ccc
 800b348:	08027214 	.word	0x08027214
 800b34c:	080264f4 	.word	0x080264f4
 800b350:	0802405c 	.word	0x0802405c
 800b354:	08027220 	.word	0x08027220
 800b358:	08027238 	.word	0x08027238
 800b35c:	08027244 	.word	0x08027244
 800b360:	08027254 	.word	0x08027254
 800b364:	08027260 	.word	0x08027260
 800b368:	080257cc 	.word	0x080257cc
		case 271 :
			strcpy(p->name,"ONE DAY");
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b372:	49a9      	ldr	r1, [pc, #676]	; (800b618 <problem_fetch+0x9c88>)
 800b374:	461a      	mov	r2, r3
 800b376:	460b      	mov	r3, r1
 800b378:	cb03      	ldmia	r3!, {r0, r1}
 800b37a:	6010      	str	r0, [r2, #0]
 800b37c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b384:	4aa5      	ldr	r2, [pc, #660]	; (800b61c <problem_fetch+0x9c8c>)
 800b386:	6810      	ldr	r0, [r2, #0]
 800b388:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2207      	movs	r2, #7
 800b38e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,B,H,C,I");
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	33a4      	adds	r3, #164	; 0xa4
 800b394:	4aa2      	ldr	r2, [pc, #648]	; (800b620 <problem_fetch+0x9c90>)
 800b396:	461c      	mov	r4, r3
 800b398:	4613      	mov	r3, r2
 800b39a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b39c:	6020      	str	r0, [r4, #0]
 800b39e:	6061      	str	r1, [r4, #4]
 800b3a0:	60a2      	str	r2, [r4, #8]
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,13,13,18");
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	4a9e      	ldr	r2, [pc, #632]	; (800b624 <problem_fetch+0x9c94>)
 800b3ac:	461d      	mov	r5, r3
 800b3ae:	4614      	mov	r4, r2
 800b3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3b2:	6028      	str	r0, [r5, #0]
 800b3b4:	6069      	str	r1, [r5, #4]
 800b3b6:	60aa      	str	r2, [r5, #8]
 800b3b8:	60eb      	str	r3, [r5, #12]
 800b3ba:	8823      	ldrh	r3, [r4, #0]
 800b3bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b3c4:	4a98      	ldr	r2, [pc, #608]	; (800b628 <problem_fetch+0x9c98>)
 800b3c6:	461c      	mov	r4, r3
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b3cc:	6020      	str	r0, [r4, #0]
 800b3ce:	6061      	str	r1, [r4, #4]
 800b3d0:	60a2      	str	r2, [r4, #8]
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	81a3      	strh	r3, [r4, #12]
			break;
 800b3d6:	f011 ba0b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 272 :
			strcpy(p->name,"HEART OF THE SEA");
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b3e0:	4a92      	ldr	r2, [pc, #584]	; (800b62c <problem_fetch+0x9c9c>)
 800b3e2:	461d      	mov	r5, r3
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b3e8:	6028      	str	r0, [r5, #0]
 800b3ea:	6069      	str	r1, [r5, #4]
 800b3ec:	60aa      	str	r2, [r5, #8]
 800b3ee:	60eb      	str	r3, [r5, #12]
 800b3f0:	7823      	ldrb	r3, [r4, #0]
 800b3f2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b3fa:	4a8d      	ldr	r2, [pc, #564]	; (800b630 <problem_fetch+0x9ca0>)
 800b3fc:	8811      	ldrh	r1, [r2, #0]
 800b3fe:	7892      	ldrb	r2, [r2, #2]
 800b400:	8019      	strh	r1, [r3, #0]
 800b402:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2207      	movs	r2, #7
 800b408:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,B,F,A,D");
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	33a4      	adds	r3, #164	; 0xa4
 800b40e:	4a89      	ldr	r2, [pc, #548]	; (800b634 <problem_fetch+0x9ca4>)
 800b410:	461c      	mov	r4, r3
 800b412:	4613      	mov	r3, r2
 800b414:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b416:	6020      	str	r0, [r4, #0]
 800b418:	6061      	str	r1, [r4, #4]
 800b41a:	60a2      	str	r2, [r4, #8]
 800b41c:	881b      	ldrh	r3, [r3, #0]
 800b41e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,6,11,14,18");
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	3304      	adds	r3, #4
 800b424:	4a84      	ldr	r2, [pc, #528]	; (800b638 <problem_fetch+0x9ca8>)
 800b426:	461d      	mov	r5, r3
 800b428:	4614      	mov	r4, r2
 800b42a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b42c:	6028      	str	r0, [r5, #0]
 800b42e:	6069      	str	r1, [r5, #4]
 800b430:	60aa      	str	r2, [r5, #8]
 800b432:	60eb      	str	r3, [r5, #12]
 800b434:	7823      	ldrb	r3, [r4, #0]
 800b436:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b43e:	4a7f      	ldr	r2, [pc, #508]	; (800b63c <problem_fetch+0x9cac>)
 800b440:	461c      	mov	r4, r3
 800b442:	4613      	mov	r3, r2
 800b444:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b446:	6020      	str	r0, [r4, #0]
 800b448:	6061      	str	r1, [r4, #4]
 800b44a:	60a2      	str	r2, [r4, #8]
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	81a3      	strh	r3, [r4, #12]
			break;
 800b450:	f011 b9ce 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 273 :
			strcpy(p->name,"SNEAKER JUICE DEUX");
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b45a:	4a79      	ldr	r2, [pc, #484]	; (800b640 <problem_fetch+0x9cb0>)
 800b45c:	461d      	mov	r5, r3
 800b45e:	4614      	mov	r4, r2
 800b460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b462:	6028      	str	r0, [r5, #0]
 800b464:	6069      	str	r1, [r5, #4]
 800b466:	60aa      	str	r2, [r5, #8]
 800b468:	60eb      	str	r3, [r5, #12]
 800b46a:	8823      	ldrh	r3, [r4, #0]
 800b46c:	78a2      	ldrb	r2, [r4, #2]
 800b46e:	822b      	strh	r3, [r5, #16]
 800b470:	4613      	mov	r3, r2
 800b472:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b47a:	4a72      	ldr	r2, [pc, #456]	; (800b644 <problem_fetch+0x9cb4>)
 800b47c:	6810      	ldr	r0, [r2, #0]
 800b47e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2206      	movs	r2, #6
 800b484:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,F,K,I");
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	33a4      	adds	r3, #164	; 0xa4
 800b48a:	4a6f      	ldr	r2, [pc, #444]	; (800b648 <problem_fetch+0x9cb8>)
 800b48c:	461c      	mov	r4, r3
 800b48e:	4613      	mov	r3, r2
 800b490:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b492:	6020      	str	r0, [r4, #0]
 800b494:	6061      	str	r1, [r4, #4]
 800b496:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,10,13,14,18");
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	3304      	adds	r3, #4
 800b49c:	4a6b      	ldr	r2, [pc, #428]	; (800b64c <problem_fetch+0x9cbc>)
 800b49e:	461c      	mov	r4, r3
 800b4a0:	4615      	mov	r5, r2
 800b4a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b4a4:	6020      	str	r0, [r4, #0]
 800b4a6:	6061      	str	r1, [r4, #4]
 800b4a8:	60a2      	str	r2, [r4, #8]
 800b4aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b4b2:	4a67      	ldr	r2, [pc, #412]	; (800b650 <problem_fetch+0x9cc0>)
 800b4b4:	461c      	mov	r4, r3
 800b4b6:	4613      	mov	r3, r2
 800b4b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4ba:	6020      	str	r0, [r4, #0]
 800b4bc:	6061      	str	r1, [r4, #4]
 800b4be:	60a2      	str	r2, [r4, #8]
			break;
 800b4c0:	f011 b996 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 274 :
			strcpy(p->name,"THREE OF CUPS");
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b4ca:	4a62      	ldr	r2, [pc, #392]	; (800b654 <problem_fetch+0x9cc4>)
 800b4cc:	461c      	mov	r4, r3
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4d2:	6020      	str	r0, [r4, #0]
 800b4d4:	6061      	str	r1, [r4, #4]
 800b4d6:	60a2      	str	r2, [r4, #8]
 800b4d8:	881b      	ldrh	r3, [r3, #0]
 800b4da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b4e2:	4a53      	ldr	r2, [pc, #332]	; (800b630 <problem_fetch+0x9ca0>)
 800b4e4:	8811      	ldrh	r1, [r2, #0]
 800b4e6:	7892      	ldrb	r2, [r2, #2]
 800b4e8:	8019      	strh	r1, [r3, #0]
 800b4ea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2205      	movs	r2, #5
 800b4f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,F,A,D");
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	33a4      	adds	r3, #164	; 0xa4
 800b4f6:	4958      	ldr	r1, [pc, #352]	; (800b658 <problem_fetch+0x9cc8>)
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	cb03      	ldmia	r3!, {r0, r1}
 800b4fe:	6010      	str	r0, [r2, #0]
 800b500:	6051      	str	r1, [r2, #4]
 800b502:	881b      	ldrh	r3, [r3, #0]
 800b504:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	3304      	adds	r3, #4
 800b50a:	4a54      	ldr	r2, [pc, #336]	; (800b65c <problem_fetch+0x9ccc>)
 800b50c:	461c      	mov	r4, r3
 800b50e:	4613      	mov	r3, r2
 800b510:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b512:	6020      	str	r0, [r4, #0]
 800b514:	6061      	str	r1, [r4, #4]
 800b516:	60a2      	str	r2, [r4, #8]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b522:	494f      	ldr	r1, [pc, #316]	; (800b660 <problem_fetch+0x9cd0>)
 800b524:	461a      	mov	r2, r3
 800b526:	460b      	mov	r3, r1
 800b528:	cb03      	ldmia	r3!, {r0, r1}
 800b52a:	6010      	str	r0, [r2, #0]
 800b52c:	6051      	str	r1, [r2, #4]
 800b52e:	881b      	ldrh	r3, [r3, #0]
 800b530:	8113      	strh	r3, [r2, #8]
			break;
 800b532:	f011 b95d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 275 :
			strcpy(p->name,"BRICK TAMLAND");
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b53c:	4a49      	ldr	r2, [pc, #292]	; (800b664 <problem_fetch+0x9cd4>)
 800b53e:	461c      	mov	r4, r3
 800b540:	4613      	mov	r3, r2
 800b542:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b544:	6020      	str	r0, [r4, #0]
 800b546:	6061      	str	r1, [r4, #4]
 800b548:	60a2      	str	r2, [r4, #8]
 800b54a:	881b      	ldrh	r3, [r3, #0]
 800b54c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b554:	4a3b      	ldr	r2, [pc, #236]	; (800b644 <problem_fetch+0x9cb4>)
 800b556:	6810      	ldr	r0, [r2, #0]
 800b558:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2208      	movs	r2, #8
 800b55e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,J,H,G,D,G");
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	33a4      	adds	r3, #164	; 0xa4
 800b564:	4a40      	ldr	r2, [pc, #256]	; (800b668 <problem_fetch+0x9cd8>)
 800b566:	461c      	mov	r4, r3
 800b568:	4615      	mov	r5, r2
 800b56a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b56c:	6020      	str	r0, [r4, #0]
 800b56e:	6061      	str	r1, [r4, #4]
 800b570:	60a2      	str	r2, [r4, #8]
 800b572:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,5,12,17,18,15");
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3304      	adds	r3, #4
 800b578:	4a3c      	ldr	r2, [pc, #240]	; (800b66c <problem_fetch+0x9cdc>)
 800b57a:	461d      	mov	r5, r3
 800b57c:	4614      	mov	r4, r2
 800b57e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b580:	6028      	str	r0, [r5, #0]
 800b582:	6069      	str	r1, [r5, #4]
 800b584:	60aa      	str	r2, [r5, #8]
 800b586:	60eb      	str	r3, [r5, #12]
 800b588:	6820      	ldr	r0, [r4, #0]
 800b58a:	6128      	str	r0, [r5, #16]
 800b58c:	7923      	ldrb	r3, [r4, #4]
 800b58e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b596:	4a36      	ldr	r2, [pc, #216]	; (800b670 <problem_fetch+0x9ce0>)
 800b598:	461c      	mov	r4, r3
 800b59a:	4615      	mov	r5, r2
 800b59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	6061      	str	r1, [r4, #4]
 800b5a2:	60a2      	str	r2, [r4, #8]
 800b5a4:	60e3      	str	r3, [r4, #12]
			break;
 800b5a6:	f011 b923 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 276 :
			strcpy(p->name,"GET WITH IT");
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b5b0:	4a30      	ldr	r2, [pc, #192]	; (800b674 <problem_fetch+0x9ce4>)
 800b5b2:	461c      	mov	r4, r3
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5b8:	6020      	str	r0, [r4, #0]
 800b5ba:	6061      	str	r1, [r4, #4]
 800b5bc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b5c4:	4a1a      	ldr	r2, [pc, #104]	; (800b630 <problem_fetch+0x9ca0>)
 800b5c6:	8811      	ldrh	r1, [r2, #0]
 800b5c8:	7892      	ldrb	r2, [r2, #2]
 800b5ca:	8019      	strh	r1, [r3, #0]
 800b5cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2206      	movs	r2, #6
 800b5d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,B,A,E,D,A");
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	33a4      	adds	r3, #164	; 0xa4
 800b5d8:	4a27      	ldr	r2, [pc, #156]	; (800b678 <problem_fetch+0x9ce8>)
 800b5da:	461c      	mov	r4, r3
 800b5dc:	4613      	mov	r3, r2
 800b5de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5e0:	6020      	str	r0, [r4, #0]
 800b5e2:	6061      	str	r1, [r4, #4]
 800b5e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,12,14,8,18,9");
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4a24      	ldr	r2, [pc, #144]	; (800b67c <problem_fetch+0x9cec>)
 800b5ec:	461c      	mov	r4, r3
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5f2:	6020      	str	r0, [r4, #0]
 800b5f4:	6061      	str	r1, [r4, #4]
 800b5f6:	60a2      	str	r2, [r4, #8]
 800b5f8:	881a      	ldrh	r2, [r3, #0]
 800b5fa:	789b      	ldrb	r3, [r3, #2]
 800b5fc:	81a2      	strh	r2, [r4, #12]
 800b5fe:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b606:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <problem_fetch+0x9cf0>)
 800b608:	461c      	mov	r4, r3
 800b60a:	4613      	mov	r3, r2
 800b60c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b60e:	6020      	str	r0, [r4, #0]
 800b610:	6061      	str	r1, [r4, #4]
 800b612:	60a2      	str	r2, [r4, #8]
			break;
 800b614:	f011 b8ec 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800b618:	0802726c 	.word	0x0802726c
 800b61c:	08023b90 	.word	0x08023b90
 800b620:	08027274 	.word	0x08027274
 800b624:	08027284 	.word	0x08027284
 800b628:	08023d18 	.word	0x08023d18
 800b62c:	08027298 	.word	0x08027298
 800b630:	08023b50 	.word	0x08023b50
 800b634:	080272ac 	.word	0x080272ac
 800b638:	080272bc 	.word	0x080272bc
 800b63c:	08025f90 	.word	0x08025f90
 800b640:	080272d0 	.word	0x080272d0
 800b644:	08023c28 	.word	0x08023c28
 800b648:	080272e4 	.word	0x080272e4
 800b64c:	080272f0 	.word	0x080272f0
 800b650:	08023f2c 	.word	0x08023f2c
 800b654:	08027300 	.word	0x08027300
 800b658:	08027310 	.word	0x08027310
 800b65c:	0802731c 	.word	0x0802731c
 800b660:	0802405c 	.word	0x0802405c
 800b664:	0802732c 	.word	0x0802732c
 800b668:	0802733c 	.word	0x0802733c
 800b66c:	0802734c 	.word	0x0802734c
 800b670:	080242e0 	.word	0x080242e0
 800b674:	08027364 	.word	0x08027364
 800b678:	08027370 	.word	0x08027370
 800b67c:	0802737c 	.word	0x0802737c
 800b680:	0802540c 	.word	0x0802540c
		case 277 :
			strcpy(p->name,"MOTIVATION");
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b68a:	49ab      	ldr	r1, [pc, #684]	; (800b938 <problem_fetch+0x9fa8>)
 800b68c:	461a      	mov	r2, r3
 800b68e:	460b      	mov	r3, r1
 800b690:	cb03      	ldmia	r3!, {r0, r1}
 800b692:	6010      	str	r0, [r2, #0]
 800b694:	6051      	str	r1, [r2, #4]
 800b696:	8819      	ldrh	r1, [r3, #0]
 800b698:	789b      	ldrb	r3, [r3, #2]
 800b69a:	8111      	strh	r1, [r2, #8]
 800b69c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b6a4:	4aa5      	ldr	r2, [pc, #660]	; (800b93c <problem_fetch+0x9fac>)
 800b6a6:	6810      	ldr	r0, [r2, #0]
 800b6a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2207      	movs	r2, #7
 800b6ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,E,B,B,D");
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	33a4      	adds	r3, #164	; 0xa4
 800b6b4:	4aa2      	ldr	r2, [pc, #648]	; (800b940 <problem_fetch+0x9fb0>)
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b6bc:	6020      	str	r0, [r4, #0]
 800b6be:	6061      	str	r1, [r4, #4]
 800b6c0:	60a2      	str	r2, [r4, #8]
 800b6c2:	881b      	ldrh	r3, [r3, #0]
 800b6c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,12,15,18");
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	3304      	adds	r3, #4
 800b6ca:	4a9e      	ldr	r2, [pc, #632]	; (800b944 <problem_fetch+0x9fb4>)
 800b6cc:	461d      	mov	r5, r3
 800b6ce:	4614      	mov	r4, r2
 800b6d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b6d2:	6028      	str	r0, [r5, #0]
 800b6d4:	6069      	str	r1, [r5, #4]
 800b6d6:	60aa      	str	r2, [r5, #8]
 800b6d8:	60eb      	str	r3, [r5, #12]
 800b6da:	8823      	ldrh	r3, [r4, #0]
 800b6dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b6e4:	4a98      	ldr	r2, [pc, #608]	; (800b948 <problem_fetch+0x9fb8>)
 800b6e6:	461c      	mov	r4, r3
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b6ec:	6020      	str	r0, [r4, #0]
 800b6ee:	6061      	str	r1, [r4, #4]
 800b6f0:	60a2      	str	r2, [r4, #8]
 800b6f2:	881b      	ldrh	r3, [r3, #0]
 800b6f4:	81a3      	strh	r3, [r4, #12]
			break;
 800b6f6:	f011 b87b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 278 :
			strcpy(p->name,"SNEAKER JUICE");
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b700:	4a92      	ldr	r2, [pc, #584]	; (800b94c <problem_fetch+0x9fbc>)
 800b702:	461c      	mov	r4, r3
 800b704:	4613      	mov	r3, r2
 800b706:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b708:	6020      	str	r0, [r4, #0]
 800b70a:	6061      	str	r1, [r4, #4]
 800b70c:	60a2      	str	r2, [r4, #8]
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b718:	4a8d      	ldr	r2, [pc, #564]	; (800b950 <problem_fetch+0x9fc0>)
 800b71a:	6810      	ldr	r0, [r2, #0]
 800b71c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2207      	movs	r2, #7
 800b722:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,K,H,I,F,I");
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	33a4      	adds	r3, #164	; 0xa4
 800b728:	4a8a      	ldr	r2, [pc, #552]	; (800b954 <problem_fetch+0x9fc4>)
 800b72a:	461c      	mov	r4, r3
 800b72c:	4613      	mov	r3, r2
 800b72e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b730:	6020      	str	r0, [r4, #0]
 800b732:	6061      	str	r1, [r4, #4]
 800b734:	60a2      	str	r2, [r4, #8]
 800b736:	881b      	ldrh	r3, [r3, #0]
 800b738:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,14,16,18,11,10");
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4a86      	ldr	r2, [pc, #536]	; (800b958 <problem_fetch+0x9fc8>)
 800b740:	461d      	mov	r5, r3
 800b742:	4614      	mov	r4, r2
 800b744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b746:	6028      	str	r0, [r5, #0]
 800b748:	6069      	str	r1, [r5, #4]
 800b74a:	60aa      	str	r2, [r5, #8]
 800b74c:	60eb      	str	r3, [r5, #12]
 800b74e:	8823      	ldrh	r3, [r4, #0]
 800b750:	78a2      	ldrb	r2, [r4, #2]
 800b752:	822b      	strh	r3, [r5, #16]
 800b754:	4613      	mov	r3, r2
 800b756:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,e,d,d");
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b75e:	4a7f      	ldr	r2, [pc, #508]	; (800b95c <problem_fetch+0x9fcc>)
 800b760:	461c      	mov	r4, r3
 800b762:	4613      	mov	r3, r2
 800b764:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b766:	6020      	str	r0, [r4, #0]
 800b768:	6061      	str	r1, [r4, #4]
 800b76a:	60a2      	str	r2, [r4, #8]
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	81a3      	strh	r3, [r4, #12]
			break;
 800b770:	f011 b83e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 279 :
			strcpy(p->name,"BUNNY GRAHAMS");
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b77a:	4a79      	ldr	r2, [pc, #484]	; (800b960 <problem_fetch+0x9fd0>)
 800b77c:	461c      	mov	r4, r3
 800b77e:	4613      	mov	r3, r2
 800b780:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b782:	6020      	str	r0, [r4, #0]
 800b784:	6061      	str	r1, [r4, #4]
 800b786:	60a2      	str	r2, [r4, #8]
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b792:	4a6f      	ldr	r2, [pc, #444]	; (800b950 <problem_fetch+0x9fc0>)
 800b794:	6810      	ldr	r0, [r2, #0]
 800b796:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2207      	movs	r2, #7
 800b79c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,J,K,I,H");
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	33a4      	adds	r3, #164	; 0xa4
 800b7a2:	4a70      	ldr	r2, [pc, #448]	; (800b964 <problem_fetch+0x9fd4>)
 800b7a4:	461c      	mov	r4, r3
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7aa:	6020      	str	r0, [r4, #0]
 800b7ac:	6061      	str	r1, [r4, #4]
 800b7ae:	60a2      	str	r2, [r4, #8]
 800b7b0:	881b      	ldrh	r3, [r3, #0]
 800b7b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,13,16,18,8");
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4a6b      	ldr	r2, [pc, #428]	; (800b968 <problem_fetch+0x9fd8>)
 800b7ba:	461d      	mov	r5, r3
 800b7bc:	4614      	mov	r4, r2
 800b7be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7c0:	6028      	str	r0, [r5, #0]
 800b7c2:	6069      	str	r1, [r5, #4]
 800b7c4:	60aa      	str	r2, [r5, #8]
 800b7c6:	60eb      	str	r3, [r5, #12]
 800b7c8:	8823      	ldrh	r3, [r4, #0]
 800b7ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,e,d");
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b7d2:	4a66      	ldr	r2, [pc, #408]	; (800b96c <problem_fetch+0x9fdc>)
 800b7d4:	461c      	mov	r4, r3
 800b7d6:	4613      	mov	r3, r2
 800b7d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7da:	6020      	str	r0, [r4, #0]
 800b7dc:	6061      	str	r1, [r4, #4]
 800b7de:	60a2      	str	r2, [r4, #8]
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	81a3      	strh	r3, [r4, #12]
			break;
 800b7e4:	f011 b804 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 280 :
			strcpy(p->name,"LOOK UP TO ME");
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b7ee:	4a60      	ldr	r2, [pc, #384]	; (800b970 <problem_fetch+0x9fe0>)
 800b7f0:	461c      	mov	r4, r3
 800b7f2:	4613      	mov	r3, r2
 800b7f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b7f6:	6020      	str	r0, [r4, #0]
 800b7f8:	6061      	str	r1, [r4, #4]
 800b7fa:	60a2      	str	r2, [r4, #8]
 800b7fc:	881b      	ldrh	r3, [r3, #0]
 800b7fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b806:	4a4d      	ldr	r2, [pc, #308]	; (800b93c <problem_fetch+0x9fac>)
 800b808:	6810      	ldr	r0, [r2, #0]
 800b80a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2206      	movs	r2, #6
 800b810:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,G,D");
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	33a4      	adds	r3, #164	; 0xa4
 800b816:	4a57      	ldr	r2, [pc, #348]	; (800b974 <problem_fetch+0x9fe4>)
 800b818:	461c      	mov	r4, r3
 800b81a:	4613      	mov	r3, r2
 800b81c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b81e:	6020      	str	r0, [r4, #0]
 800b820:	6061      	str	r1, [r4, #4]
 800b822:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3304      	adds	r3, #4
 800b828:	4a53      	ldr	r2, [pc, #332]	; (800b978 <problem_fetch+0x9fe8>)
 800b82a:	461c      	mov	r4, r3
 800b82c:	4615      	mov	r5, r2
 800b82e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b830:	6020      	str	r0, [r4, #0]
 800b832:	6061      	str	r1, [r4, #4]
 800b834:	60a2      	str	r2, [r4, #8]
 800b836:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b83e:	4a4f      	ldr	r2, [pc, #316]	; (800b97c <problem_fetch+0x9fec>)
 800b840:	461c      	mov	r4, r3
 800b842:	4613      	mov	r3, r2
 800b844:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b846:	6020      	str	r0, [r4, #0]
 800b848:	6061      	str	r1, [r4, #4]
 800b84a:	60a2      	str	r2, [r4, #8]
			break;
 800b84c:	f010 bfd0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 281 :
			strcpy(p->name,"BOOKA");
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b856:	4a4a      	ldr	r2, [pc, #296]	; (800b980 <problem_fetch+0x9ff0>)
 800b858:	6810      	ldr	r0, [r2, #0]
 800b85a:	6018      	str	r0, [r3, #0]
 800b85c:	8892      	ldrh	r2, [r2, #4]
 800b85e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b866:	4a47      	ldr	r2, [pc, #284]	; (800b984 <problem_fetch+0x9ff4>)
 800b868:	8811      	ldrh	r1, [r2, #0]
 800b86a:	7892      	ldrb	r2, [r2, #2]
 800b86c:	8019      	strh	r1, [r3, #0]
 800b86e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2206      	movs	r2, #6
 800b874:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,E,A,D");
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	33a4      	adds	r3, #164	; 0xa4
 800b87a:	4a43      	ldr	r2, [pc, #268]	; (800b988 <problem_fetch+0x9ff8>)
 800b87c:	461c      	mov	r4, r3
 800b87e:	4613      	mov	r3, r2
 800b880:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b882:	6020      	str	r0, [r4, #0]
 800b884:	6061      	str	r1, [r4, #4]
 800b886:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4a3f      	ldr	r2, [pc, #252]	; (800b98c <problem_fetch+0x9ffc>)
 800b88e:	461c      	mov	r4, r3
 800b890:	4613      	mov	r3, r2
 800b892:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b894:	6020      	str	r0, [r4, #0]
 800b896:	6061      	str	r1, [r4, #4]
 800b898:	60a2      	str	r2, [r4, #8]
 800b89a:	881a      	ldrh	r2, [r3, #0]
 800b89c:	789b      	ldrb	r3, [r3, #2]
 800b89e:	81a2      	strh	r2, [r4, #12]
 800b8a0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b8a8:	4a39      	ldr	r2, [pc, #228]	; (800b990 <problem_fetch+0xa000>)
 800b8aa:	461c      	mov	r4, r3
 800b8ac:	4613      	mov	r3, r2
 800b8ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8b0:	6020      	str	r0, [r4, #0]
 800b8b2:	6061      	str	r1, [r4, #4]
 800b8b4:	60a2      	str	r2, [r4, #8]
			break;
 800b8b6:	f010 bf9b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 282 :
			strcpy(p->name,"FIVEB PROJ 2");
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b8c0:	4a34      	ldr	r2, [pc, #208]	; (800b994 <problem_fetch+0xa004>)
 800b8c2:	461c      	mov	r4, r3
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8c8:	6020      	str	r0, [r4, #0]
 800b8ca:	6061      	str	r1, [r4, #4]
 800b8cc:	60a2      	str	r2, [r4, #8]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b8d8:	4a2f      	ldr	r2, [pc, #188]	; (800b998 <problem_fetch+0xa008>)
 800b8da:	6810      	ldr	r0, [r2, #0]
 800b8dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	220a      	movs	r2, #10
 800b8e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,G,G,D");
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	33a4      	adds	r3, #164	; 0xa4
 800b8e8:	4a2c      	ldr	r2, [pc, #176]	; (800b99c <problem_fetch+0xa00c>)
 800b8ea:	461d      	mov	r5, r3
 800b8ec:	4614      	mov	r4, r2
 800b8ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b8f0:	6028      	str	r0, [r5, #0]
 800b8f2:	6069      	str	r1, [r5, #4]
 800b8f4:	60aa      	str	r2, [r5, #8]
 800b8f6:	60eb      	str	r3, [r5, #12]
 800b8f8:	6820      	ldr	r0, [r4, #0]
 800b8fa:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,15,17,18");
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3304      	adds	r3, #4
 800b900:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <problem_fetch+0xa010>)
 800b902:	461d      	mov	r5, r3
 800b904:	4614      	mov	r4, r2
 800b906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b908:	6028      	str	r0, [r5, #0]
 800b90a:	6069      	str	r1, [r5, #4]
 800b90c:	60aa      	str	r2, [r5, #8]
 800b90e:	60eb      	str	r3, [r5, #12]
 800b910:	cc03      	ldmia	r4!, {r0, r1}
 800b912:	6128      	str	r0, [r5, #16]
 800b914:	6169      	str	r1, [r5, #20]
 800b916:	8823      	ldrh	r3, [r4, #0]
 800b918:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b920:	4a20      	ldr	r2, [pc, #128]	; (800b9a4 <problem_fetch+0xa014>)
 800b922:	461d      	mov	r5, r3
 800b924:	4614      	mov	r4, r2
 800b926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b928:	6028      	str	r0, [r5, #0]
 800b92a:	6069      	str	r1, [r5, #4]
 800b92c:	60aa      	str	r2, [r5, #8]
 800b92e:	60eb      	str	r3, [r5, #12]
 800b930:	6820      	ldr	r0, [r4, #0]
 800b932:	6128      	str	r0, [r5, #16]
			break;
 800b934:	f010 bf5c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800b938:	0802738c 	.word	0x0802738c
 800b93c:	08023c28 	.word	0x08023c28
 800b940:	08027398 	.word	0x08027398
 800b944:	080273a8 	.word	0x080273a8
 800b948:	08023c08 	.word	0x08023c08
 800b94c:	080273bc 	.word	0x080273bc
 800b950:	08023b90 	.word	0x08023b90
 800b954:	080273cc 	.word	0x080273cc
 800b958:	080273dc 	.word	0x080273dc
 800b95c:	080273f0 	.word	0x080273f0
 800b960:	08027400 	.word	0x08027400
 800b964:	08027410 	.word	0x08027410
 800b968:	08027420 	.word	0x08027420
 800b96c:	08027434 	.word	0x08027434
 800b970:	08027444 	.word	0x08027444
 800b974:	08027454 	.word	0x08027454
 800b978:	0802621c 	.word	0x0802621c
 800b97c:	08023b70 	.word	0x08023b70
 800b980:	08027460 	.word	0x08027460
 800b984:	08023b50 	.word	0x08023b50
 800b988:	08027468 	.word	0x08027468
 800b98c:	080240b8 	.word	0x080240b8
 800b990:	08023f2c 	.word	0x08023f2c
 800b994:	08027474 	.word	0x08027474
 800b998:	08023d30 	.word	0x08023d30
 800b99c:	08027484 	.word	0x08027484
 800b9a0:	08027498 	.word	0x08027498
 800b9a4:	08024438 	.word	0x08024438
		case 283 :
			strcpy(p->name,"MÄX 2");
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b9ae:	4ab5      	ldr	r2, [pc, #724]	; (800bc84 <problem_fetch+0xa2f4>)
 800b9b0:	6810      	ldr	r0, [r2, #0]
 800b9b2:	6018      	str	r0, [r3, #0]
 800b9b4:	8891      	ldrh	r1, [r2, #4]
 800b9b6:	7992      	ldrb	r2, [r2, #6]
 800b9b8:	8099      	strh	r1, [r3, #4]
 800b9ba:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b9c2:	4ab1      	ldr	r2, [pc, #708]	; (800bc88 <problem_fetch+0xa2f8>)
 800b9c4:	6810      	ldr	r0, [r2, #0]
 800b9c6:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	220b      	movs	r2, #11
 800b9cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,F,C,D,A,C,A,A");
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	33a4      	adds	r3, #164	; 0xa4
 800b9d2:	4aae      	ldr	r2, [pc, #696]	; (800bc8c <problem_fetch+0xa2fc>)
 800b9d4:	461d      	mov	r5, r3
 800b9d6:	4614      	mov	r4, r2
 800b9d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9da:	6028      	str	r0, [r5, #0]
 800b9dc:	6069      	str	r1, [r5, #4]
 800b9de:	60aa      	str	r2, [r5, #8]
 800b9e0:	60eb      	str	r3, [r5, #12]
 800b9e2:	6820      	ldr	r0, [r4, #0]
 800b9e4:	6128      	str	r0, [r5, #16]
 800b9e6:	88a3      	ldrh	r3, [r4, #4]
 800b9e8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,4,8,9,11,13,15,9,5,14,18");
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	4aa8      	ldr	r2, [pc, #672]	; (800bc90 <problem_fetch+0xa300>)
 800b9f0:	461d      	mov	r5, r3
 800b9f2:	4614      	mov	r4, r2
 800b9f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b9f6:	6028      	str	r0, [r5, #0]
 800b9f8:	6069      	str	r1, [r5, #4]
 800b9fa:	60aa      	str	r2, [r5, #8]
 800b9fc:	60eb      	str	r3, [r5, #12]
 800b9fe:	cc03      	ldmia	r4!, {r0, r1}
 800ba00:	6128      	str	r0, [r5, #16]
 800ba02:	6169      	str	r1, [r5, #20]
 800ba04:	8823      	ldrh	r3, [r4, #0]
 800ba06:	78a2      	ldrb	r2, [r4, #2]
 800ba08:	832b      	strh	r3, [r5, #24]
 800ba0a:	4613      	mov	r3, r2
 800ba0c:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ba14:	4a9f      	ldr	r2, [pc, #636]	; (800bc94 <problem_fetch+0xa304>)
 800ba16:	461d      	mov	r5, r3
 800ba18:	4614      	mov	r4, r2
 800ba1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba1c:	6028      	str	r0, [r5, #0]
 800ba1e:	6069      	str	r1, [r5, #4]
 800ba20:	60aa      	str	r2, [r5, #8]
 800ba22:	60eb      	str	r3, [r5, #12]
 800ba24:	6820      	ldr	r0, [r4, #0]
 800ba26:	6128      	str	r0, [r5, #16]
 800ba28:	88a3      	ldrh	r3, [r4, #4]
 800ba2a:	82ab      	strh	r3, [r5, #20]
			break;
 800ba2c:	f010 bee0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 284 :
			strcpy(p->name,"BACK IN ACTION");
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba36:	4a98      	ldr	r2, [pc, #608]	; (800bc98 <problem_fetch+0xa308>)
 800ba38:	461c      	mov	r4, r3
 800ba3a:	4613      	mov	r3, r2
 800ba3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba3e:	6020      	str	r0, [r4, #0]
 800ba40:	6061      	str	r1, [r4, #4]
 800ba42:	60a2      	str	r2, [r4, #8]
 800ba44:	881a      	ldrh	r2, [r3, #0]
 800ba46:	789b      	ldrb	r3, [r3, #2]
 800ba48:	81a2      	strh	r2, [r4, #12]
 800ba4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ba52:	4a8d      	ldr	r2, [pc, #564]	; (800bc88 <problem_fetch+0xa2f8>)
 800ba54:	6810      	ldr	r0, [r2, #0]
 800ba56:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2208      	movs	r2, #8
 800ba5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,C,E,D");
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	33a4      	adds	r3, #164	; 0xa4
 800ba62:	4a8e      	ldr	r2, [pc, #568]	; (800bc9c <problem_fetch+0xa30c>)
 800ba64:	461c      	mov	r4, r3
 800ba66:	4615      	mov	r5, r2
 800ba68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba6a:	6020      	str	r0, [r4, #0]
 800ba6c:	6061      	str	r1, [r4, #4]
 800ba6e:	60a2      	str	r2, [r4, #8]
 800ba70:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,13,16,18");
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	3304      	adds	r3, #4
 800ba76:	4a8a      	ldr	r2, [pc, #552]	; (800bca0 <problem_fetch+0xa310>)
 800ba78:	461d      	mov	r5, r3
 800ba7a:	4614      	mov	r4, r2
 800ba7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba7e:	6028      	str	r0, [r5, #0]
 800ba80:	6069      	str	r1, [r5, #4]
 800ba82:	60aa      	str	r2, [r5, #8]
 800ba84:	60eb      	str	r3, [r5, #12]
 800ba86:	6820      	ldr	r0, [r4, #0]
 800ba88:	6128      	str	r0, [r5, #16]
 800ba8a:	7923      	ldrb	r3, [r4, #4]
 800ba8c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ba94:	4a83      	ldr	r2, [pc, #524]	; (800bca4 <problem_fetch+0xa314>)
 800ba96:	461c      	mov	r4, r3
 800ba98:	4615      	mov	r5, r2
 800ba9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba9c:	6020      	str	r0, [r4, #0]
 800ba9e:	6061      	str	r1, [r4, #4]
 800baa0:	60a2      	str	r2, [r4, #8]
 800baa2:	60e3      	str	r3, [r4, #12]
			break;
 800baa4:	f010 bea4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 285 :
			strcpy(p->name,"THE REAL SIRIUS BLACK");
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800baae:	4a7e      	ldr	r2, [pc, #504]	; (800bca8 <problem_fetch+0xa318>)
 800bab0:	461d      	mov	r5, r3
 800bab2:	4614      	mov	r4, r2
 800bab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bab6:	6028      	str	r0, [r5, #0]
 800bab8:	6069      	str	r1, [r5, #4]
 800baba:	60aa      	str	r2, [r5, #8]
 800babc:	60eb      	str	r3, [r5, #12]
 800babe:	6820      	ldr	r0, [r4, #0]
 800bac0:	6128      	str	r0, [r5, #16]
 800bac2:	88a3      	ldrh	r3, [r4, #4]
 800bac4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bacc:	4a77      	ldr	r2, [pc, #476]	; (800bcac <problem_fetch+0xa31c>)
 800bace:	8811      	ldrh	r1, [r2, #0]
 800bad0:	7892      	ldrb	r2, [r2, #2]
 800bad2:	8019      	strh	r1, [r3, #0]
 800bad4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2207      	movs	r2, #7
 800bada:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,J,E,F,C,D");
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	33a4      	adds	r3, #164	; 0xa4
 800bae0:	4a73      	ldr	r2, [pc, #460]	; (800bcb0 <problem_fetch+0xa320>)
 800bae2:	461c      	mov	r4, r3
 800bae4:	4613      	mov	r3, r2
 800bae6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bae8:	6020      	str	r0, [r4, #0]
 800baea:	6061      	str	r1, [r4, #4]
 800baec:	60a2      	str	r2, [r4, #8]
 800baee:	881b      	ldrh	r3, [r3, #0]
 800baf0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,5,9,11,13,18");
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	3304      	adds	r3, #4
 800baf6:	4a6f      	ldr	r2, [pc, #444]	; (800bcb4 <problem_fetch+0xa324>)
 800baf8:	461d      	mov	r5, r3
 800bafa:	4614      	mov	r4, r2
 800bafc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bafe:	6028      	str	r0, [r5, #0]
 800bb00:	6069      	str	r1, [r5, #4]
 800bb02:	60aa      	str	r2, [r5, #8]
 800bb04:	60eb      	str	r3, [r5, #12]
 800bb06:	7823      	ldrb	r3, [r4, #0]
 800bb08:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bb10:	4a69      	ldr	r2, [pc, #420]	; (800bcb8 <problem_fetch+0xa328>)
 800bb12:	461c      	mov	r4, r3
 800bb14:	4613      	mov	r3, r2
 800bb16:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb18:	6020      	str	r0, [r4, #0]
 800bb1a:	6061      	str	r1, [r4, #4]
 800bb1c:	60a2      	str	r2, [r4, #8]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	81a3      	strh	r3, [r4, #12]
			break;
 800bb22:	f010 be65 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 286 :
			strcpy(p->name,"REAL SIRIUS BLACK");
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb2c:	4a63      	ldr	r2, [pc, #396]	; (800bcbc <problem_fetch+0xa32c>)
 800bb2e:	461d      	mov	r5, r3
 800bb30:	4614      	mov	r4, r2
 800bb32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb34:	6028      	str	r0, [r5, #0]
 800bb36:	6069      	str	r1, [r5, #4]
 800bb38:	60aa      	str	r2, [r5, #8]
 800bb3a:	60eb      	str	r3, [r5, #12]
 800bb3c:	8823      	ldrh	r3, [r4, #0]
 800bb3e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb46:	4a59      	ldr	r2, [pc, #356]	; (800bcac <problem_fetch+0xa31c>)
 800bb48:	8811      	ldrh	r1, [r2, #0]
 800bb4a:	7892      	ldrb	r2, [r2, #2]
 800bb4c:	8019      	strh	r1, [r3, #0]
 800bb4e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2206      	movs	r2, #6
 800bb54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,C,D");
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	33a4      	adds	r3, #164	; 0xa4
 800bb5a:	4a59      	ldr	r2, [pc, #356]	; (800bcc0 <problem_fetch+0xa330>)
 800bb5c:	461c      	mov	r4, r3
 800bb5e:	4613      	mov	r3, r2
 800bb60:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb62:	6020      	str	r0, [r4, #0]
 800bb64:	6061      	str	r1, [r4, #4]
 800bb66:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,13,18");
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	4a55      	ldr	r2, [pc, #340]	; (800bcc4 <problem_fetch+0xa334>)
 800bb6e:	461c      	mov	r4, r3
 800bb70:	4613      	mov	r3, r2
 800bb72:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb74:	6020      	str	r0, [r4, #0]
 800bb76:	6061      	str	r1, [r4, #4]
 800bb78:	60a2      	str	r2, [r4, #8]
 800bb7a:	881a      	ldrh	r2, [r3, #0]
 800bb7c:	789b      	ldrb	r3, [r3, #2]
 800bb7e:	81a2      	strh	r2, [r4, #12]
 800bb80:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bb88:	4a4f      	ldr	r2, [pc, #316]	; (800bcc8 <problem_fetch+0xa338>)
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	4613      	mov	r3, r2
 800bb8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb90:	6020      	str	r0, [r4, #0]
 800bb92:	6061      	str	r1, [r4, #4]
 800bb94:	60a2      	str	r2, [r4, #8]
			break;
 800bb96:	f010 be2b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 287 :
			strcpy(p->name,"SIRIUS BLACK");
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bba0:	4a4a      	ldr	r2, [pc, #296]	; (800bccc <problem_fetch+0xa33c>)
 800bba2:	461c      	mov	r4, r3
 800bba4:	4613      	mov	r3, r2
 800bba6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bba8:	6020      	str	r0, [r4, #0]
 800bbaa:	6061      	str	r1, [r4, #4]
 800bbac:	60a2      	str	r2, [r4, #8]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bbb8:	4a3c      	ldr	r2, [pc, #240]	; (800bcac <problem_fetch+0xa31c>)
 800bbba:	8811      	ldrh	r1, [r2, #0]
 800bbbc:	7892      	ldrb	r2, [r2, #2]
 800bbbe:	8019      	strh	r1, [r3, #0]
 800bbc0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2207      	movs	r2, #7
 800bbc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,F,J,C,D");
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	33a4      	adds	r3, #164	; 0xa4
 800bbcc:	4a40      	ldr	r2, [pc, #256]	; (800bcd0 <problem_fetch+0xa340>)
 800bbce:	461c      	mov	r4, r3
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbd4:	6020      	str	r0, [r4, #0]
 800bbd6:	6061      	str	r1, [r4, #4]
 800bbd8:	60a2      	str	r2, [r4, #8]
 800bbda:	881b      	ldrh	r3, [r3, #0]
 800bbdc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,5,13,18");
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	4a3c      	ldr	r2, [pc, #240]	; (800bcd4 <problem_fetch+0xa344>)
 800bbe4:	461d      	mov	r5, r3
 800bbe6:	4614      	mov	r4, r2
 800bbe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbea:	6028      	str	r0, [r5, #0]
 800bbec:	6069      	str	r1, [r5, #4]
 800bbee:	60aa      	str	r2, [r5, #8]
 800bbf0:	60eb      	str	r3, [r5, #12]
 800bbf2:	7823      	ldrb	r3, [r4, #0]
 800bbf4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bbfc:	4a2e      	ldr	r2, [pc, #184]	; (800bcb8 <problem_fetch+0xa328>)
 800bbfe:	461c      	mov	r4, r3
 800bc00:	4613      	mov	r3, r2
 800bc02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc04:	6020      	str	r0, [r4, #0]
 800bc06:	6061      	str	r1, [r4, #4]
 800bc08:	60a2      	str	r2, [r4, #8]
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	81a3      	strh	r3, [r4, #12]
			break;
 800bc0e:	f010 bdef 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 288 :
			strcpy(p->name,"SUCK IT ELLIOTT");
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bc18:	4a2f      	ldr	r2, [pc, #188]	; (800bcd8 <problem_fetch+0xa348>)
 800bc1a:	461c      	mov	r4, r3
 800bc1c:	4615      	mov	r5, r2
 800bc1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc20:	6020      	str	r0, [r4, #0]
 800bc22:	6061      	str	r1, [r4, #4]
 800bc24:	60a2      	str	r2, [r4, #8]
 800bc26:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bc2e:	4a1f      	ldr	r2, [pc, #124]	; (800bcac <problem_fetch+0xa31c>)
 800bc30:	8811      	ldrh	r1, [r2, #0]
 800bc32:	7892      	ldrb	r2, [r2, #2]
 800bc34:	8019      	strh	r1, [r3, #0]
 800bc36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2206      	movs	r2, #6
 800bc3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,D");
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	33a4      	adds	r3, #164	; 0xa4
 800bc42:	4a26      	ldr	r2, [pc, #152]	; (800bcdc <problem_fetch+0xa34c>)
 800bc44:	461c      	mov	r4, r3
 800bc46:	4613      	mov	r3, r2
 800bc48:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc4a:	6020      	str	r0, [r4, #0]
 800bc4c:	6061      	str	r1, [r4, #4]
 800bc4e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,15,18");
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	3304      	adds	r3, #4
 800bc54:	4a22      	ldr	r2, [pc, #136]	; (800bce0 <problem_fetch+0xa350>)
 800bc56:	461c      	mov	r4, r3
 800bc58:	4613      	mov	r3, r2
 800bc5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc5c:	6020      	str	r0, [r4, #0]
 800bc5e:	6061      	str	r1, [r4, #4]
 800bc60:	60a2      	str	r2, [r4, #8]
 800bc62:	881a      	ldrh	r2, [r3, #0]
 800bc64:	789b      	ldrb	r3, [r3, #2]
 800bc66:	81a2      	strh	r2, [r4, #12]
 800bc68:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bc70:	4a15      	ldr	r2, [pc, #84]	; (800bcc8 <problem_fetch+0xa338>)
 800bc72:	461c      	mov	r4, r3
 800bc74:	4613      	mov	r3, r2
 800bc76:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc78:	6020      	str	r0, [r4, #0]
 800bc7a:	6061      	str	r1, [r4, #4]
 800bc7c:	60a2      	str	r2, [r4, #8]
			break;
 800bc7e:	f010 bdb7 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800bc82:	bf00      	nop
 800bc84:	080274b4 	.word	0x080274b4
 800bc88:	08023b90 	.word	0x08023b90
 800bc8c:	080274bc 	.word	0x080274bc
 800bc90:	080274d4 	.word	0x080274d4
 800bc94:	080274f0 	.word	0x080274f0
 800bc98:	08027508 	.word	0x08027508
 800bc9c:	08027518 	.word	0x08027518
 800bca0:	08027528 	.word	0x08027528
 800bca4:	08023cb4 	.word	0x08023cb4
 800bca8:	08027540 	.word	0x08027540
 800bcac:	08023b50 	.word	0x08023b50
 800bcb0:	08027558 	.word	0x08027558
 800bcb4:	08027568 	.word	0x08027568
 800bcb8:	08023c08 	.word	0x08023c08
 800bcbc:	0802757c 	.word	0x0802757c
 800bcc0:	08027590 	.word	0x08027590
 800bcc4:	0802759c 	.word	0x0802759c
 800bcc8:	08023b70 	.word	0x08023b70
 800bccc:	080275ac 	.word	0x080275ac
 800bcd0:	080275bc 	.word	0x080275bc
 800bcd4:	080275cc 	.word	0x080275cc
 800bcd8:	080275e0 	.word	0x080275e0
 800bcdc:	080275f0 	.word	0x080275f0
 800bce0:	080275fc 	.word	0x080275fc
		case 289 :
			strcpy(p->name,"SPALLA&AMP;PIATTA");
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bcea:	4abe      	ldr	r2, [pc, #760]	; (800bfe4 <problem_fetch+0xa654>)
 800bcec:	461d      	mov	r5, r3
 800bcee:	4614      	mov	r4, r2
 800bcf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bcf2:	6028      	str	r0, [r5, #0]
 800bcf4:	6069      	str	r1, [r5, #4]
 800bcf6:	60aa      	str	r2, [r5, #8]
 800bcf8:	60eb      	str	r3, [r5, #12]
 800bcfa:	8823      	ldrh	r3, [r4, #0]
 800bcfc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bd04:	4ab8      	ldr	r2, [pc, #736]	; (800bfe8 <problem_fetch+0xa658>)
 800bd06:	6810      	ldr	r0, [r2, #0]
 800bd08:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,F,G,D,D");
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	33a4      	adds	r3, #164	; 0xa4
 800bd14:	4ab5      	ldr	r2, [pc, #724]	; (800bfec <problem_fetch+0xa65c>)
 800bd16:	461c      	mov	r4, r3
 800bd18:	4613      	mov	r3, r2
 800bd1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd1c:	6020      	str	r0, [r4, #0]
 800bd1e:	6061      	str	r1, [r4, #4]
 800bd20:	60a2      	str	r2, [r4, #8]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,14,15,18");
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4ab1      	ldr	r2, [pc, #708]	; (800bff0 <problem_fetch+0xa660>)
 800bd2c:	461d      	mov	r5, r3
 800bd2e:	4614      	mov	r4, r2
 800bd30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bd32:	6028      	str	r0, [r5, #0]
 800bd34:	6069      	str	r1, [r5, #4]
 800bd36:	60aa      	str	r2, [r5, #8]
 800bd38:	60eb      	str	r3, [r5, #12]
 800bd3a:	8823      	ldrh	r3, [r4, #0]
 800bd3c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bd44:	4aab      	ldr	r2, [pc, #684]	; (800bff4 <problem_fetch+0xa664>)
 800bd46:	461c      	mov	r4, r3
 800bd48:	4613      	mov	r3, r2
 800bd4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd4c:	6020      	str	r0, [r4, #0]
 800bd4e:	6061      	str	r1, [r4, #4]
 800bd50:	60a2      	str	r2, [r4, #8]
 800bd52:	881b      	ldrh	r3, [r3, #0]
 800bd54:	81a3      	strh	r3, [r4, #12]
			break;
 800bd56:	f010 bd4b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 290 :
			strcpy(p->name,"몰라여");
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bd60:	49a5      	ldr	r1, [pc, #660]	; (800bff8 <problem_fetch+0xa668>)
 800bd62:	461a      	mov	r2, r3
 800bd64:	460b      	mov	r3, r1
 800bd66:	cb03      	ldmia	r3!, {r0, r1}
 800bd68:	6010      	str	r0, [r2, #0]
 800bd6a:	6051      	str	r1, [r2, #4]
 800bd6c:	881b      	ldrh	r3, [r3, #0]
 800bd6e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bd76:	4aa1      	ldr	r2, [pc, #644]	; (800bffc <problem_fetch+0xa66c>)
 800bd78:	8811      	ldrh	r1, [r2, #0]
 800bd7a:	7892      	ldrb	r2, [r2, #2]
 800bd7c:	8019      	strh	r1, [r3, #0]
 800bd7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2207      	movs	r2, #7
 800bd84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,A,G,C,E,I");
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	33a4      	adds	r3, #164	; 0xa4
 800bd8a:	4a9d      	ldr	r2, [pc, #628]	; (800c000 <problem_fetch+0xa670>)
 800bd8c:	461c      	mov	r4, r3
 800bd8e:	4613      	mov	r3, r2
 800bd90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	6061      	str	r1, [r4, #4]
 800bd96:	60a2      	str	r2, [r4, #8]
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,13,16,18");
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	3304      	adds	r3, #4
 800bda0:	4a98      	ldr	r2, [pc, #608]	; (800c004 <problem_fetch+0xa674>)
 800bda2:	461d      	mov	r5, r3
 800bda4:	4614      	mov	r4, r2
 800bda6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bda8:	6028      	str	r0, [r5, #0]
 800bdaa:	6069      	str	r1, [r5, #4]
 800bdac:	60aa      	str	r2, [r5, #8]
 800bdae:	60eb      	str	r3, [r5, #12]
 800bdb0:	7823      	ldrb	r3, [r4, #0]
 800bdb2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bdba:	4a8e      	ldr	r2, [pc, #568]	; (800bff4 <problem_fetch+0xa664>)
 800bdbc:	461c      	mov	r4, r3
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdc2:	6020      	str	r0, [r4, #0]
 800bdc4:	6061      	str	r1, [r4, #4]
 800bdc6:	60a2      	str	r2, [r4, #8]
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	81a3      	strh	r3, [r4, #12]
			break;
 800bdcc:	f010 bd10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 291 :
			strcpy(p->name,"I'M RON BURGUNDY?");
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bdd6:	4a8c      	ldr	r2, [pc, #560]	; (800c008 <problem_fetch+0xa678>)
 800bdd8:	461d      	mov	r5, r3
 800bdda:	4614      	mov	r4, r2
 800bddc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdde:	6028      	str	r0, [r5, #0]
 800bde0:	6069      	str	r1, [r5, #4]
 800bde2:	60aa      	str	r2, [r5, #8]
 800bde4:	60eb      	str	r3, [r5, #12]
 800bde6:	8823      	ldrh	r3, [r4, #0]
 800bde8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bdf0:	4a86      	ldr	r2, [pc, #536]	; (800c00c <problem_fetch+0xa67c>)
 800bdf2:	6810      	ldr	r0, [r2, #0]
 800bdf4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2206      	movs	r2, #6
 800bdfa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,D,A");
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	33a4      	adds	r3, #164	; 0xa4
 800be00:	4a83      	ldr	r2, [pc, #524]	; (800c010 <problem_fetch+0xa680>)
 800be02:	461c      	mov	r4, r3
 800be04:	4613      	mov	r3, r2
 800be06:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be08:	6020      	str	r0, [r4, #0]
 800be0a:	6061      	str	r1, [r4, #4]
 800be0c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,13,15,18");
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	3304      	adds	r3, #4
 800be12:	4a80      	ldr	r2, [pc, #512]	; (800c014 <problem_fetch+0xa684>)
 800be14:	461c      	mov	r4, r3
 800be16:	4615      	mov	r5, r2
 800be18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800be1a:	6020      	str	r0, [r4, #0]
 800be1c:	6061      	str	r1, [r4, #4]
 800be1e:	60a2      	str	r2, [r4, #8]
 800be20:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800be28:	4a7b      	ldr	r2, [pc, #492]	; (800c018 <problem_fetch+0xa688>)
 800be2a:	461c      	mov	r4, r3
 800be2c:	4613      	mov	r3, r2
 800be2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be30:	6020      	str	r0, [r4, #0]
 800be32:	6061      	str	r1, [r4, #4]
 800be34:	60a2      	str	r2, [r4, #8]
			break;
 800be36:	f010 bcdb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 292 :
			strcpy(p->name,"FUNNY");
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be40:	4a76      	ldr	r2, [pc, #472]	; (800c01c <problem_fetch+0xa68c>)
 800be42:	6810      	ldr	r0, [r2, #0]
 800be44:	6018      	str	r0, [r3, #0]
 800be46:	8892      	ldrh	r2, [r2, #4]
 800be48:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800be50:	4a73      	ldr	r2, [pc, #460]	; (800c020 <problem_fetch+0xa690>)
 800be52:	8811      	ldrh	r1, [r2, #0]
 800be54:	7892      	ldrb	r2, [r2, #2]
 800be56:	8019      	strh	r1, [r3, #0]
 800be58:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2205      	movs	r2, #5
 800be5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	33a4      	adds	r3, #164	; 0xa4
 800be64:	496f      	ldr	r1, [pc, #444]	; (800c024 <problem_fetch+0xa694>)
 800be66:	461a      	mov	r2, r3
 800be68:	460b      	mov	r3, r1
 800be6a:	cb03      	ldmia	r3!, {r0, r1}
 800be6c:	6010      	str	r0, [r2, #0]
 800be6e:	6051      	str	r1, [r2, #4]
 800be70:	881b      	ldrh	r3, [r3, #0]
 800be72:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,7,14,18");
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3304      	adds	r3, #4
 800be78:	4a6b      	ldr	r2, [pc, #428]	; (800c028 <problem_fetch+0xa698>)
 800be7a:	461c      	mov	r4, r3
 800be7c:	4613      	mov	r3, r2
 800be7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be80:	6020      	str	r0, [r4, #0]
 800be82:	6061      	str	r1, [r4, #4]
 800be84:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800be8c:	4967      	ldr	r1, [pc, #412]	; (800c02c <problem_fetch+0xa69c>)
 800be8e:	461a      	mov	r2, r3
 800be90:	460b      	mov	r3, r1
 800be92:	cb03      	ldmia	r3!, {r0, r1}
 800be94:	6010      	str	r0, [r2, #0]
 800be96:	6051      	str	r1, [r2, #4]
 800be98:	881b      	ldrh	r3, [r3, #0]
 800be9a:	8113      	strh	r3, [r2, #8]
			break;
 800be9c:	f010 bca8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 293 :
			strcpy(p->name,"NUN");
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bea6:	4a62      	ldr	r2, [pc, #392]	; (800c030 <problem_fetch+0xa6a0>)
 800bea8:	6810      	ldr	r0, [r2, #0]
 800beaa:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800beb2:	4a4d      	ldr	r2, [pc, #308]	; (800bfe8 <problem_fetch+0xa658>)
 800beb4:	6810      	ldr	r0, [r2, #0]
 800beb6:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2204      	movs	r2, #4
 800bebc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,D");
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	33a4      	adds	r3, #164	; 0xa4
 800bec2:	495c      	ldr	r1, [pc, #368]	; (800c034 <problem_fetch+0xa6a4>)
 800bec4:	461a      	mov	r2, r3
 800bec6:	460b      	mov	r3, r1
 800bec8:	cb03      	ldmia	r3!, {r0, r1}
 800beca:	6010      	str	r0, [r2, #0]
 800becc:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,8,13,18");
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4959      	ldr	r1, [pc, #356]	; (800c038 <problem_fetch+0xa6a8>)
 800bed4:	461a      	mov	r2, r3
 800bed6:	460b      	mov	r3, r1
 800bed8:	cb03      	ldmia	r3!, {r0, r1}
 800beda:	6010      	str	r0, [r2, #0]
 800bedc:	6051      	str	r1, [r2, #4]
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bee8:	4954      	ldr	r1, [pc, #336]	; (800c03c <problem_fetch+0xa6ac>)
 800beea:	461a      	mov	r2, r3
 800beec:	460b      	mov	r3, r1
 800beee:	cb03      	ldmia	r3!, {r0, r1}
 800bef0:	6010      	str	r0, [r2, #0]
 800bef2:	6051      	str	r1, [r2, #4]
			break;
 800bef4:	f010 bc7c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 294 :
			strcpy(p->name,"THE LAST PEA");
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800befe:	4a50      	ldr	r2, [pc, #320]	; (800c040 <problem_fetch+0xa6b0>)
 800bf00:	461c      	mov	r4, r3
 800bf02:	4613      	mov	r3, r2
 800bf04:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf06:	6020      	str	r0, [r4, #0]
 800bf08:	6061      	str	r1, [r4, #4]
 800bf0a:	60a2      	str	r2, [r4, #8]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf16:	4a4b      	ldr	r2, [pc, #300]	; (800c044 <problem_fetch+0xa6b4>)
 800bf18:	6810      	ldr	r0, [r2, #0]
 800bf1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2207      	movs	r2, #7
 800bf20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,C,D,A");
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	33a4      	adds	r3, #164	; 0xa4
 800bf26:	4a48      	ldr	r2, [pc, #288]	; (800c048 <problem_fetch+0xa6b8>)
 800bf28:	461c      	mov	r4, r3
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf2e:	6020      	str	r0, [r4, #0]
 800bf30:	6061      	str	r1, [r4, #4]
 800bf32:	60a2      	str	r2, [r4, #8]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,12,13,15,18");
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4a43      	ldr	r2, [pc, #268]	; (800c04c <problem_fetch+0xa6bc>)
 800bf3e:	461d      	mov	r5, r3
 800bf40:	4614      	mov	r4, r2
 800bf42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf44:	6028      	str	r0, [r5, #0]
 800bf46:	6069      	str	r1, [r5, #4]
 800bf48:	60aa      	str	r2, [r5, #8]
 800bf4a:	60eb      	str	r3, [r5, #12]
 800bf4c:	8823      	ldrh	r3, [r4, #0]
 800bf4e:	78a2      	ldrb	r2, [r4, #2]
 800bf50:	822b      	strh	r3, [r5, #16]
 800bf52:	4613      	mov	r3, r2
 800bf54:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bf5c:	4a3c      	ldr	r2, [pc, #240]	; (800c050 <problem_fetch+0xa6c0>)
 800bf5e:	461c      	mov	r4, r3
 800bf60:	4613      	mov	r3, r2
 800bf62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf64:	6020      	str	r0, [r4, #0]
 800bf66:	6061      	str	r1, [r4, #4]
 800bf68:	60a2      	str	r2, [r4, #8]
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	81a3      	strh	r3, [r4, #12]
			break;
 800bf6e:	f010 bc3f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 295 :
			strcpy(p->name,"PEAS AND GRAVY");
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf78:	4a36      	ldr	r2, [pc, #216]	; (800c054 <problem_fetch+0xa6c4>)
 800bf7a:	461c      	mov	r4, r3
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf80:	6020      	str	r0, [r4, #0]
 800bf82:	6061      	str	r1, [r4, #4]
 800bf84:	60a2      	str	r2, [r4, #8]
 800bf86:	881a      	ldrh	r2, [r3, #0]
 800bf88:	789b      	ldrb	r3, [r3, #2]
 800bf8a:	81a2      	strh	r2, [r4, #12]
 800bf8c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf94:	4a30      	ldr	r2, [pc, #192]	; (800c058 <problem_fetch+0xa6c8>)
 800bf96:	8811      	ldrh	r1, [r2, #0]
 800bf98:	7892      	ldrb	r2, [r2, #2]
 800bf9a:	8019      	strh	r1, [r3, #0]
 800bf9c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2206      	movs	r2, #6
 800bfa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,A");
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	33a4      	adds	r3, #164	; 0xa4
 800bfa8:	4a2c      	ldr	r2, [pc, #176]	; (800c05c <problem_fetch+0xa6cc>)
 800bfaa:	461c      	mov	r4, r3
 800bfac:	4613      	mov	r3, r2
 800bfae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfb0:	6020      	str	r0, [r4, #0]
 800bfb2:	6061      	str	r1, [r4, #4]
 800bfb4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3304      	adds	r3, #4
 800bfba:	4a29      	ldr	r2, [pc, #164]	; (800c060 <problem_fetch+0xa6d0>)
 800bfbc:	461c      	mov	r4, r3
 800bfbe:	4615      	mov	r5, r2
 800bfc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bfc2:	6020      	str	r0, [r4, #0]
 800bfc4:	6061      	str	r1, [r4, #4]
 800bfc6:	60a2      	str	r2, [r4, #8]
 800bfc8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bfd0:	4a24      	ldr	r2, [pc, #144]	; (800c064 <problem_fetch+0xa6d4>)
 800bfd2:	461c      	mov	r4, r3
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfd8:	6020      	str	r0, [r4, #0]
 800bfda:	6061      	str	r1, [r4, #4]
 800bfdc:	60a2      	str	r2, [r4, #8]
			break;
 800bfde:	f010 bc07 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800bfe2:	bf00      	nop
 800bfe4:	0802760c 	.word	0x0802760c
 800bfe8:	08023d30 	.word	0x08023d30
 800bfec:	08027620 	.word	0x08027620
 800bff0:	08027630 	.word	0x08027630
 800bff4:	08023c08 	.word	0x08023c08
 800bff8:	08027644 	.word	0x08027644
 800bffc:	08023b50 	.word	0x08023b50
 800c000:	08027650 	.word	0x08027650
 800c004:	08027660 	.word	0x08027660
 800c008:	08027674 	.word	0x08027674
 800c00c:	08023c28 	.word	0x08023c28
 800c010:	08027688 	.word	0x08027688
 800c014:	08027694 	.word	0x08027694
 800c018:	08023f2c 	.word	0x08023f2c
 800c01c:	080276a4 	.word	0x080276a4
 800c020:	080243c4 	.word	0x080243c4
 800c024:	080276ac 	.word	0x080276ac
 800c028:	080276b8 	.word	0x080276b8
 800c02c:	0802405c 	.word	0x0802405c
 800c030:	080276c4 	.word	0x080276c4
 800c034:	080276c8 	.word	0x080276c8
 800c038:	080276d0 	.word	0x080276d0
 800c03c:	08023ce4 	.word	0x08023ce4
 800c040:	080276dc 	.word	0x080276dc
 800c044:	08023b90 	.word	0x08023b90
 800c048:	080276ec 	.word	0x080276ec
 800c04c:	080276fc 	.word	0x080276fc
 800c050:	08023d18 	.word	0x08023d18
 800c054:	08027710 	.word	0x08027710
 800c058:	08023c5c 	.word	0x08023c5c
 800c05c:	08027720 	.word	0x08027720
 800c060:	08026948 	.word	0x08026948
 800c064:	08023b70 	.word	0x08023b70
		case 296 :
			strcpy(p->name,"TEST111");
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c06e:	49c2      	ldr	r1, [pc, #776]	; (800c378 <problem_fetch+0xa9e8>)
 800c070:	461a      	mov	r2, r3
 800c072:	460b      	mov	r3, r1
 800c074:	cb03      	ldmia	r3!, {r0, r1}
 800c076:	6010      	str	r0, [r2, #0]
 800c078:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c080:	4abe      	ldr	r2, [pc, #760]	; (800c37c <problem_fetch+0xa9ec>)
 800c082:	8811      	ldrh	r1, [r2, #0]
 800c084:	7892      	ldrb	r2, [r2, #2]
 800c086:	8019      	strh	r1, [r3, #0]
 800c088:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2207      	movs	r2, #7
 800c08e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,F,E,D,A");
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	33a4      	adds	r3, #164	; 0xa4
 800c094:	4aba      	ldr	r2, [pc, #744]	; (800c380 <problem_fetch+0xa9f0>)
 800c096:	461c      	mov	r4, r3
 800c098:	4613      	mov	r3, r2
 800c09a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c09c:	6020      	str	r0, [r4, #0]
 800c09e:	6061      	str	r1, [r4, #4]
 800c0a0:	60a2      	str	r2, [r4, #8]
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,11,12,15,18");
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	4ab6      	ldr	r2, [pc, #728]	; (800c384 <problem_fetch+0xa9f4>)
 800c0ac:	461d      	mov	r5, r3
 800c0ae:	4614      	mov	r4, r2
 800c0b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c0b2:	6028      	str	r0, [r5, #0]
 800c0b4:	6069      	str	r1, [r5, #4]
 800c0b6:	60aa      	str	r2, [r5, #8]
 800c0b8:	60eb      	str	r3, [r5, #12]
 800c0ba:	8823      	ldrh	r3, [r4, #0]
 800c0bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c0c4:	4ab0      	ldr	r2, [pc, #704]	; (800c388 <problem_fetch+0xa9f8>)
 800c0c6:	461c      	mov	r4, r3
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c0cc:	6020      	str	r0, [r4, #0]
 800c0ce:	6061      	str	r1, [r4, #4]
 800c0d0:	60a2      	str	r2, [r4, #8]
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	81a3      	strh	r3, [r4, #12]
			break;
 800c0d6:	f010 bb8b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 297 :
			strcpy(p->name,"FAMILY MAN");
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c0e0:	49aa      	ldr	r1, [pc, #680]	; (800c38c <problem_fetch+0xa9fc>)
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	cb03      	ldmia	r3!, {r0, r1}
 800c0e8:	6010      	str	r0, [r2, #0]
 800c0ea:	6051      	str	r1, [r2, #4]
 800c0ec:	8819      	ldrh	r1, [r3, #0]
 800c0ee:	789b      	ldrb	r3, [r3, #2]
 800c0f0:	8111      	strh	r1, [r2, #8]
 800c0f2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c0fa:	4aa0      	ldr	r2, [pc, #640]	; (800c37c <problem_fetch+0xa9ec>)
 800c0fc:	8811      	ldrh	r1, [r2, #0]
 800c0fe:	7892      	ldrb	r2, [r2, #2]
 800c100:	8019      	strh	r1, [r3, #0]
 800c102:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2207      	movs	r2, #7
 800c108:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,I,J");
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	33a4      	adds	r3, #164	; 0xa4
 800c10e:	4aa0      	ldr	r2, [pc, #640]	; (800c390 <problem_fetch+0xaa00>)
 800c110:	461c      	mov	r4, r3
 800c112:	4613      	mov	r3, r2
 800c114:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c116:	6020      	str	r0, [r4, #0]
 800c118:	6061      	str	r1, [r4, #4]
 800c11a:	60a2      	str	r2, [r4, #8]
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"15,18,12,14,5,10,5");
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3304      	adds	r3, #4
 800c124:	4a9b      	ldr	r2, [pc, #620]	; (800c394 <problem_fetch+0xaa04>)
 800c126:	461d      	mov	r5, r3
 800c128:	4614      	mov	r4, r2
 800c12a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c12c:	6028      	str	r0, [r5, #0]
 800c12e:	6069      	str	r1, [r5, #4]
 800c130:	60aa      	str	r2, [r5, #8]
 800c132:	60eb      	str	r3, [r5, #12]
 800c134:	8823      	ldrh	r3, [r4, #0]
 800c136:	78a2      	ldrb	r2, [r4, #2]
 800c138:	822b      	strh	r3, [r5, #16]
 800c13a:	4613      	mov	r3, r2
 800c13c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,e,d,d,s,d,s");
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c144:	4a94      	ldr	r2, [pc, #592]	; (800c398 <problem_fetch+0xaa08>)
 800c146:	461c      	mov	r4, r3
 800c148:	4613      	mov	r3, r2
 800c14a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c14c:	6020      	str	r0, [r4, #0]
 800c14e:	6061      	str	r1, [r4, #4]
 800c150:	60a2      	str	r2, [r4, #8]
 800c152:	881b      	ldrh	r3, [r3, #0]
 800c154:	81a3      	strh	r3, [r4, #12]
			break;
 800c156:	f010 bb4b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 298 :
			strcpy(p->name,"FROGGERTON GOES TO SCHOOL");
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c160:	4a8e      	ldr	r2, [pc, #568]	; (800c39c <problem_fetch+0xaa0c>)
 800c162:	461d      	mov	r5, r3
 800c164:	4614      	mov	r4, r2
 800c166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c168:	6028      	str	r0, [r5, #0]
 800c16a:	6069      	str	r1, [r5, #4]
 800c16c:	60aa      	str	r2, [r5, #8]
 800c16e:	60eb      	str	r3, [r5, #12]
 800c170:	cc03      	ldmia	r4!, {r0, r1}
 800c172:	6128      	str	r0, [r5, #16]
 800c174:	6169      	str	r1, [r5, #20]
 800c176:	8823      	ldrh	r3, [r4, #0]
 800c178:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c180:	4a87      	ldr	r2, [pc, #540]	; (800c3a0 <problem_fetch+0xaa10>)
 800c182:	6810      	ldr	r0, [r2, #0]
 800c184:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2206      	movs	r2, #6
 800c18a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,C,A,A");
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	33a4      	adds	r3, #164	; 0xa4
 800c190:	4a84      	ldr	r2, [pc, #528]	; (800c3a4 <problem_fetch+0xaa14>)
 800c192:	461c      	mov	r4, r3
 800c194:	4613      	mov	r3, r2
 800c196:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c198:	6020      	str	r0, [r4, #0]
 800c19a:	6061      	str	r1, [r4, #4]
 800c19c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,14,18");
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3304      	adds	r3, #4
 800c1a2:	4a81      	ldr	r2, [pc, #516]	; (800c3a8 <problem_fetch+0xaa18>)
 800c1a4:	461c      	mov	r4, r3
 800c1a6:	4615      	mov	r5, r2
 800c1a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1aa:	6020      	str	r0, [r4, #0]
 800c1ac:	6061      	str	r1, [r4, #4]
 800c1ae:	60a2      	str	r2, [r4, #8]
 800c1b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c1b8:	4a7c      	ldr	r2, [pc, #496]	; (800c3ac <problem_fetch+0xaa1c>)
 800c1ba:	461c      	mov	r4, r3
 800c1bc:	4613      	mov	r3, r2
 800c1be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1c0:	6020      	str	r0, [r4, #0]
 800c1c2:	6061      	str	r1, [r4, #4]
 800c1c4:	60a2      	str	r2, [r4, #8]
			break;
 800c1c6:	f010 bb13 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 299 :
			strcpy(p->name,"BOCHANPOWER");
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c1d0:	4a77      	ldr	r2, [pc, #476]	; (800c3b0 <problem_fetch+0xaa20>)
 800c1d2:	461c      	mov	r4, r3
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1d8:	6020      	str	r0, [r4, #0]
 800c1da:	6061      	str	r1, [r4, #4]
 800c1dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c1e4:	4a73      	ldr	r2, [pc, #460]	; (800c3b4 <problem_fetch+0xaa24>)
 800c1e6:	6810      	ldr	r0, [r2, #0]
 800c1e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2205      	movs	r2, #5
 800c1ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,G,D");
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	33a4      	adds	r3, #164	; 0xa4
 800c1f4:	4970      	ldr	r1, [pc, #448]	; (800c3b8 <problem_fetch+0xaa28>)
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	cb03      	ldmia	r3!, {r0, r1}
 800c1fc:	6010      	str	r0, [r2, #0]
 800c1fe:	6051      	str	r1, [r2, #4]
 800c200:	881b      	ldrh	r3, [r3, #0]
 800c202:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,8,14,18");
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	3304      	adds	r3, #4
 800c208:	4a6c      	ldr	r2, [pc, #432]	; (800c3bc <problem_fetch+0xaa2c>)
 800c20a:	461c      	mov	r4, r3
 800c20c:	4613      	mov	r3, r2
 800c20e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c210:	6020      	str	r0, [r4, #0]
 800c212:	6061      	str	r1, [r4, #4]
 800c214:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c21c:	4968      	ldr	r1, [pc, #416]	; (800c3c0 <problem_fetch+0xaa30>)
 800c21e:	461a      	mov	r2, r3
 800c220:	460b      	mov	r3, r1
 800c222:	cb03      	ldmia	r3!, {r0, r1}
 800c224:	6010      	str	r0, [r2, #0]
 800c226:	6051      	str	r1, [r2, #4]
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	8113      	strh	r3, [r2, #8]
			break;
 800c22c:	f010 bae0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 300 :
			strcpy(p->name,"ENRON");
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c236:	4a63      	ldr	r2, [pc, #396]	; (800c3c4 <problem_fetch+0xaa34>)
 800c238:	6810      	ldr	r0, [r2, #0]
 800c23a:	6018      	str	r0, [r3, #0]
 800c23c:	8892      	ldrh	r2, [r2, #4]
 800c23e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c246:	4a60      	ldr	r2, [pc, #384]	; (800c3c8 <problem_fetch+0xaa38>)
 800c248:	8811      	ldrh	r1, [r2, #0]
 800c24a:	7892      	ldrb	r2, [r2, #2]
 800c24c:	8019      	strh	r1, [r3, #0]
 800c24e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2207      	movs	r2, #7
 800c254:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,B,D");
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	33a4      	adds	r3, #164	; 0xa4
 800c25a:	4a5c      	ldr	r2, [pc, #368]	; (800c3cc <problem_fetch+0xaa3c>)
 800c25c:	461c      	mov	r4, r3
 800c25e:	4613      	mov	r3, r2
 800c260:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c262:	6020      	str	r0, [r4, #0]
 800c264:	6061      	str	r1, [r4, #4]
 800c266:	60a2      	str	r2, [r4, #8]
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,15,18");
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3304      	adds	r3, #4
 800c270:	4a57      	ldr	r2, [pc, #348]	; (800c3d0 <problem_fetch+0xaa40>)
 800c272:	461d      	mov	r5, r3
 800c274:	4614      	mov	r4, r2
 800c276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c278:	6028      	str	r0, [r5, #0]
 800c27a:	6069      	str	r1, [r5, #4]
 800c27c:	60aa      	str	r2, [r5, #8]
 800c27e:	60eb      	str	r3, [r5, #12]
 800c280:	8823      	ldrh	r3, [r4, #0]
 800c282:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c28a:	4a52      	ldr	r2, [pc, #328]	; (800c3d4 <problem_fetch+0xaa44>)
 800c28c:	461c      	mov	r4, r3
 800c28e:	4613      	mov	r3, r2
 800c290:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c292:	6020      	str	r0, [r4, #0]
 800c294:	6061      	str	r1, [r4, #4]
 800c296:	60a2      	str	r2, [r4, #8]
 800c298:	881b      	ldrh	r3, [r3, #0]
 800c29a:	81a3      	strh	r3, [r4, #12]
			break;
 800c29c:	f010 baa8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 301 :
			strcpy(p->name,"RON DUC DONG");
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c2a6:	4a4c      	ldr	r2, [pc, #304]	; (800c3d8 <problem_fetch+0xaa48>)
 800c2a8:	461c      	mov	r4, r3
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2ae:	6020      	str	r0, [r4, #0]
 800c2b0:	6061      	str	r1, [r4, #4]
 800c2b2:	60a2      	str	r2, [r4, #8]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c2be:	4a47      	ldr	r2, [pc, #284]	; (800c3dc <problem_fetch+0xaa4c>)
 800c2c0:	6810      	ldr	r0, [r2, #0]
 800c2c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2207      	movs	r2, #7
 800c2c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,G,E,I,E,D");
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	33a4      	adds	r3, #164	; 0xa4
 800c2ce:	4a44      	ldr	r2, [pc, #272]	; (800c3e0 <problem_fetch+0xaa50>)
 800c2d0:	461c      	mov	r4, r3
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2d6:	6020      	str	r0, [r4, #0]
 800c2d8:	6061      	str	r1, [r4, #4]
 800c2da:	60a2      	str	r2, [r4, #8]
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,14,16,18");
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4a3f      	ldr	r2, [pc, #252]	; (800c3e4 <problem_fetch+0xaa54>)
 800c2e6:	461d      	mov	r5, r3
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2ec:	6028      	str	r0, [r5, #0]
 800c2ee:	6069      	str	r1, [r5, #4]
 800c2f0:	60aa      	str	r2, [r5, #8]
 800c2f2:	60eb      	str	r3, [r5, #12]
 800c2f4:	8823      	ldrh	r3, [r4, #0]
 800c2f6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c2fe:	4a35      	ldr	r2, [pc, #212]	; (800c3d4 <problem_fetch+0xaa44>)
 800c300:	461c      	mov	r4, r3
 800c302:	4613      	mov	r3, r2
 800c304:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c306:	6020      	str	r0, [r4, #0]
 800c308:	6061      	str	r1, [r4, #4]
 800c30a:	60a2      	str	r2, [r4, #8]
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	81a3      	strh	r3, [r4, #12]
			break;
 800c310:	f010 ba6e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 302 :
			strcpy(p->name,"OKTRY");
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c31a:	4a33      	ldr	r2, [pc, #204]	; (800c3e8 <problem_fetch+0xaa58>)
 800c31c:	6810      	ldr	r0, [r2, #0]
 800c31e:	6018      	str	r0, [r3, #0]
 800c320:	8892      	ldrh	r2, [r2, #4]
 800c322:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c32a:	4a1d      	ldr	r2, [pc, #116]	; (800c3a0 <problem_fetch+0xaa10>)
 800c32c:	6810      	ldr	r0, [r2, #0]
 800c32e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2205      	movs	r2, #5
 800c334:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,C,D");
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	33a4      	adds	r3, #164	; 0xa4
 800c33a:	492c      	ldr	r1, [pc, #176]	; (800c3ec <problem_fetch+0xaa5c>)
 800c33c:	461a      	mov	r2, r3
 800c33e:	460b      	mov	r3, r1
 800c340:	cb03      	ldmia	r3!, {r0, r1}
 800c342:	6010      	str	r0, [r2, #0]
 800c344:	6051      	str	r1, [r2, #4]
 800c346:	881b      	ldrh	r3, [r3, #0]
 800c348:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,8,13,18");
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	3304      	adds	r3, #4
 800c34e:	4a28      	ldr	r2, [pc, #160]	; (800c3f0 <problem_fetch+0xaa60>)
 800c350:	461c      	mov	r4, r3
 800c352:	4613      	mov	r3, r2
 800c354:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c356:	6020      	str	r0, [r4, #0]
 800c358:	6061      	str	r1, [r4, #4]
 800c35a:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c362:	4924      	ldr	r1, [pc, #144]	; (800c3f4 <problem_fetch+0xaa64>)
 800c364:	461a      	mov	r2, r3
 800c366:	460b      	mov	r3, r1
 800c368:	cb03      	ldmia	r3!, {r0, r1}
 800c36a:	6010      	str	r0, [r2, #0]
 800c36c:	6051      	str	r1, [r2, #4]
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	8113      	strh	r3, [r2, #8]
			break;
 800c372:	f010 ba3d 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800c376:	bf00      	nop
 800c378:	0802772c 	.word	0x0802772c
 800c37c:	08023c5c 	.word	0x08023c5c
 800c380:	08027734 	.word	0x08027734
 800c384:	08027744 	.word	0x08027744
 800c388:	08023d18 	.word	0x08023d18
 800c38c:	08027758 	.word	0x08027758
 800c390:	08027764 	.word	0x08027764
 800c394:	08027774 	.word	0x08027774
 800c398:	08027788 	.word	0x08027788
 800c39c:	08027798 	.word	0x08027798
 800c3a0:	08023b90 	.word	0x08023b90
 800c3a4:	080277b4 	.word	0x080277b4
 800c3a8:	080277c0 	.word	0x080277c0
 800c3ac:	08023f2c 	.word	0x08023f2c
 800c3b0:	080277d0 	.word	0x080277d0
 800c3b4:	08023d30 	.word	0x08023d30
 800c3b8:	080277dc 	.word	0x080277dc
 800c3bc:	080277e8 	.word	0x080277e8
 800c3c0:	0802405c 	.word	0x0802405c
 800c3c4:	080277f4 	.word	0x080277f4
 800c3c8:	08023b50 	.word	0x08023b50
 800c3cc:	080277fc 	.word	0x080277fc
 800c3d0:	0802780c 	.word	0x0802780c
 800c3d4:	08023c08 	.word	0x08023c08
 800c3d8:	08027820 	.word	0x08027820
 800c3dc:	08023c28 	.word	0x08023c28
 800c3e0:	08027830 	.word	0x08027830
 800c3e4:	08027840 	.word	0x08027840
 800c3e8:	08027854 	.word	0x08027854
 800c3ec:	0802785c 	.word	0x0802785c
 800c3f0:	08027868 	.word	0x08027868
 800c3f4:	08024270 	.word	0x08024270
		case 303 :
			strcpy(p->name,"TRYTRYTRY");
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c3fe:	49be      	ldr	r1, [pc, #760]	; (800c6f8 <problem_fetch+0xad68>)
 800c400:	461a      	mov	r2, r3
 800c402:	460b      	mov	r3, r1
 800c404:	cb03      	ldmia	r3!, {r0, r1}
 800c406:	6010      	str	r0, [r2, #0]
 800c408:	6051      	str	r1, [r2, #4]
 800c40a:	881b      	ldrh	r3, [r3, #0]
 800c40c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c414:	4ab9      	ldr	r2, [pc, #740]	; (800c6fc <problem_fetch+0xad6c>)
 800c416:	6810      	ldr	r0, [r2, #0]
 800c418:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2206      	movs	r2, #6
 800c41e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,G,D");
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	33a4      	adds	r3, #164	; 0xa4
 800c424:	4ab6      	ldr	r2, [pc, #728]	; (800c700 <problem_fetch+0xad70>)
 800c426:	461c      	mov	r4, r3
 800c428:	4613      	mov	r3, r2
 800c42a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c42c:	6020      	str	r0, [r4, #0]
 800c42e:	6061      	str	r1, [r4, #4]
 800c430:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,13,8,9,18");
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	3304      	adds	r3, #4
 800c436:	4ab3      	ldr	r2, [pc, #716]	; (800c704 <problem_fetch+0xad74>)
 800c438:	461c      	mov	r4, r3
 800c43a:	4613      	mov	r3, r2
 800c43c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c43e:	6020      	str	r0, [r4, #0]
 800c440:	6061      	str	r1, [r4, #4]
 800c442:	60a2      	str	r2, [r4, #8]
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c44e:	4aae      	ldr	r2, [pc, #696]	; (800c708 <problem_fetch+0xad78>)
 800c450:	461c      	mov	r4, r3
 800c452:	4613      	mov	r3, r2
 800c454:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c456:	6020      	str	r0, [r4, #0]
 800c458:	6061      	str	r1, [r4, #4]
 800c45a:	60a2      	str	r2, [r4, #8]
			break;
 800c45c:	f010 b9c8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 304 :
			strcpy(p->name,"TRYTRY");
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c466:	4aa9      	ldr	r2, [pc, #676]	; (800c70c <problem_fetch+0xad7c>)
 800c468:	6810      	ldr	r0, [r2, #0]
 800c46a:	6018      	str	r0, [r3, #0]
 800c46c:	8891      	ldrh	r1, [r2, #4]
 800c46e:	7992      	ldrb	r2, [r2, #6]
 800c470:	8099      	strh	r1, [r3, #4]
 800c472:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c47a:	4aa0      	ldr	r2, [pc, #640]	; (800c6fc <problem_fetch+0xad6c>)
 800c47c:	6810      	ldr	r0, [r2, #0]
 800c47e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2207      	movs	r2, #7
 800c484:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,B,C,C,A");
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	33a4      	adds	r3, #164	; 0xa4
 800c48a:	4aa1      	ldr	r2, [pc, #644]	; (800c710 <problem_fetch+0xad80>)
 800c48c:	461c      	mov	r4, r3
 800c48e:	4613      	mov	r3, r2
 800c490:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c492:	6020      	str	r0, [r4, #0]
 800c494:	6061      	str	r1, [r4, #4]
 800c496:	60a2      	str	r2, [r4, #8]
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,16,18");
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4a9c      	ldr	r2, [pc, #624]	; (800c714 <problem_fetch+0xad84>)
 800c4a2:	461d      	mov	r5, r3
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4a8:	6028      	str	r0, [r5, #0]
 800c4aa:	6069      	str	r1, [r5, #4]
 800c4ac:	60aa      	str	r2, [r5, #8]
 800c4ae:	60eb      	str	r3, [r5, #12]
 800c4b0:	8823      	ldrh	r3, [r4, #0]
 800c4b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c4ba:	4a97      	ldr	r2, [pc, #604]	; (800c718 <problem_fetch+0xad88>)
 800c4bc:	461c      	mov	r4, r3
 800c4be:	4613      	mov	r3, r2
 800c4c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4c2:	6020      	str	r0, [r4, #0]
 800c4c4:	6061      	str	r1, [r4, #4]
 800c4c6:	60a2      	str	r2, [r4, #8]
 800c4c8:	881b      	ldrh	r3, [r3, #0]
 800c4ca:	81a3      	strh	r3, [r4, #12]
			break;
 800c4cc:	f010 b990 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 305 :
			strcpy(p->name,"FOLLIA1");
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c4d6:	4991      	ldr	r1, [pc, #580]	; (800c71c <problem_fetch+0xad8c>)
 800c4d8:	461a      	mov	r2, r3
 800c4da:	460b      	mov	r3, r1
 800c4dc:	cb03      	ldmia	r3!, {r0, r1}
 800c4de:	6010      	str	r0, [r2, #0]
 800c4e0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c4e8:	4a84      	ldr	r2, [pc, #528]	; (800c6fc <problem_fetch+0xad6c>)
 800c4ea:	6810      	ldr	r0, [r2, #0]
 800c4ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2207      	movs	r2, #7
 800c4f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,G,H,G,I");
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	33a4      	adds	r3, #164	; 0xa4
 800c4f8:	4a89      	ldr	r2, [pc, #548]	; (800c720 <problem_fetch+0xad90>)
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	4613      	mov	r3, r2
 800c4fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c500:	6020      	str	r0, [r4, #0]
 800c502:	6061      	str	r1, [r4, #4]
 800c504:	60a2      	str	r2, [r4, #8]
 800c506:	881b      	ldrh	r3, [r3, #0]
 800c508:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,18");
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3304      	adds	r3, #4
 800c50e:	4a85      	ldr	r2, [pc, #532]	; (800c724 <problem_fetch+0xad94>)
 800c510:	461d      	mov	r5, r3
 800c512:	4614      	mov	r4, r2
 800c514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c516:	6028      	str	r0, [r5, #0]
 800c518:	6069      	str	r1, [r5, #4]
 800c51a:	60aa      	str	r2, [r5, #8]
 800c51c:	60eb      	str	r3, [r5, #12]
 800c51e:	8823      	ldrh	r3, [r4, #0]
 800c520:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c528:	4a7b      	ldr	r2, [pc, #492]	; (800c718 <problem_fetch+0xad88>)
 800c52a:	461c      	mov	r4, r3
 800c52c:	4613      	mov	r3, r2
 800c52e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c530:	6020      	str	r0, [r4, #0]
 800c532:	6061      	str	r1, [r4, #4]
 800c534:	60a2      	str	r2, [r4, #8]
 800c536:	881b      	ldrh	r3, [r3, #0]
 800c538:	81a3      	strh	r3, [r4, #12]
			break;
 800c53a:	f010 b959 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 306 :
			strcpy(p->name,"JH 1.0");
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c544:	4a78      	ldr	r2, [pc, #480]	; (800c728 <problem_fetch+0xad98>)
 800c546:	6810      	ldr	r0, [r2, #0]
 800c548:	6018      	str	r0, [r3, #0]
 800c54a:	8891      	ldrh	r1, [r2, #4]
 800c54c:	7992      	ldrb	r2, [r2, #6]
 800c54e:	8099      	strh	r1, [r3, #4]
 800c550:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c558:	4a74      	ldr	r2, [pc, #464]	; (800c72c <problem_fetch+0xad9c>)
 800c55a:	6810      	ldr	r0, [r2, #0]
 800c55c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,G,I");
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	33a4      	adds	r3, #164	; 0xa4
 800c568:	4a71      	ldr	r2, [pc, #452]	; (800c730 <problem_fetch+0xada0>)
 800c56a:	461c      	mov	r4, r3
 800c56c:	4613      	mov	r3, r2
 800c56e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c570:	6020      	str	r0, [r4, #0]
 800c572:	6061      	str	r1, [r4, #4]
 800c574:	60a2      	str	r2, [r4, #8]
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,12,15,17,18");
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4a6d      	ldr	r2, [pc, #436]	; (800c734 <problem_fetch+0xada4>)
 800c580:	461d      	mov	r5, r3
 800c582:	4614      	mov	r4, r2
 800c584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c586:	6028      	str	r0, [r5, #0]
 800c588:	6069      	str	r1, [r5, #4]
 800c58a:	60aa      	str	r2, [r5, #8]
 800c58c:	60eb      	str	r3, [r5, #12]
 800c58e:	8823      	ldrh	r3, [r4, #0]
 800c590:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c598:	4a67      	ldr	r2, [pc, #412]	; (800c738 <problem_fetch+0xada8>)
 800c59a:	461c      	mov	r4, r3
 800c59c:	4613      	mov	r3, r2
 800c59e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5a0:	6020      	str	r0, [r4, #0]
 800c5a2:	6061      	str	r1, [r4, #4]
 800c5a4:	60a2      	str	r2, [r4, #8]
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	81a3      	strh	r3, [r4, #12]
			break;
 800c5aa:	f010 b921 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 307 :
			strcpy(p->name,"FROSTED AFRO");
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c5b4:	4a61      	ldr	r2, [pc, #388]	; (800c73c <problem_fetch+0xadac>)
 800c5b6:	461c      	mov	r4, r3
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5bc:	6020      	str	r0, [r4, #0]
 800c5be:	6061      	str	r1, [r4, #4]
 800c5c0:	60a2      	str	r2, [r4, #8]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c5cc:	4a5c      	ldr	r2, [pc, #368]	; (800c740 <problem_fetch+0xadb0>)
 800c5ce:	8811      	ldrh	r1, [r2, #0]
 800c5d0:	7892      	ldrb	r2, [r2, #2]
 800c5d2:	8019      	strh	r1, [r3, #0]
 800c5d4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2206      	movs	r2, #6
 800c5da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,J,D");
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	33a4      	adds	r3, #164	; 0xa4
 800c5e0:	4a58      	ldr	r2, [pc, #352]	; (800c744 <problem_fetch+0xadb4>)
 800c5e2:	461c      	mov	r4, r3
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5e8:	6020      	str	r0, [r4, #0]
 800c5ea:	6061      	str	r1, [r4, #4]
 800c5ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,14,16,18");
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	4a55      	ldr	r2, [pc, #340]	; (800c748 <problem_fetch+0xadb8>)
 800c5f4:	461c      	mov	r4, r3
 800c5f6:	4615      	mov	r5, r2
 800c5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c5fa:	6020      	str	r0, [r4, #0]
 800c5fc:	6061      	str	r1, [r4, #4]
 800c5fe:	60a2      	str	r2, [r4, #8]
 800c600:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c608:	4a3f      	ldr	r2, [pc, #252]	; (800c708 <problem_fetch+0xad78>)
 800c60a:	461c      	mov	r4, r3
 800c60c:	4613      	mov	r3, r2
 800c60e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c610:	6020      	str	r0, [r4, #0]
 800c612:	6061      	str	r1, [r4, #4]
 800c614:	60a2      	str	r2, [r4, #8]
			break;
 800c616:	f010 b8eb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 308 :
			strcpy(p->name,"FLYING  BUDDAH");
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c620:	4a4a      	ldr	r2, [pc, #296]	; (800c74c <problem_fetch+0xadbc>)
 800c622:	461c      	mov	r4, r3
 800c624:	4613      	mov	r3, r2
 800c626:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c628:	6020      	str	r0, [r4, #0]
 800c62a:	6061      	str	r1, [r4, #4]
 800c62c:	60a2      	str	r2, [r4, #8]
 800c62e:	881a      	ldrh	r2, [r3, #0]
 800c630:	789b      	ldrb	r3, [r3, #2]
 800c632:	81a2      	strh	r2, [r4, #12]
 800c634:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c63c:	4a44      	ldr	r2, [pc, #272]	; (800c750 <problem_fetch+0xadc0>)
 800c63e:	6810      	ldr	r0, [r2, #0]
 800c640:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2206      	movs	r2, #6
 800c646:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,F,I,D");
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	33a4      	adds	r3, #164	; 0xa4
 800c64c:	4a41      	ldr	r2, [pc, #260]	; (800c754 <problem_fetch+0xadc4>)
 800c64e:	461c      	mov	r4, r3
 800c650:	4613      	mov	r3, r2
 800c652:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c654:	6020      	str	r0, [r4, #0]
 800c656:	6061      	str	r1, [r4, #4]
 800c658:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,14,18");
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3304      	adds	r3, #4
 800c65e:	4a3e      	ldr	r2, [pc, #248]	; (800c758 <problem_fetch+0xadc8>)
 800c660:	461c      	mov	r4, r3
 800c662:	4613      	mov	r3, r2
 800c664:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c666:	6020      	str	r0, [r4, #0]
 800c668:	6061      	str	r1, [r4, #4]
 800c66a:	60a2      	str	r2, [r4, #8]
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	789b      	ldrb	r3, [r3, #2]
 800c670:	81a2      	strh	r2, [r4, #12]
 800c672:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c67a:	4a23      	ldr	r2, [pc, #140]	; (800c708 <problem_fetch+0xad78>)
 800c67c:	461c      	mov	r4, r3
 800c67e:	4613      	mov	r3, r2
 800c680:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c682:	6020      	str	r0, [r4, #0]
 800c684:	6061      	str	r1, [r4, #4]
 800c686:	60a2      	str	r2, [r4, #8]
			break;
 800c688:	f010 b8b2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 309 :
			strcpy(p->name,"KAKAKAKA");
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c692:	4932      	ldr	r1, [pc, #200]	; (800c75c <problem_fetch+0xadcc>)
 800c694:	461a      	mov	r2, r3
 800c696:	460b      	mov	r3, r1
 800c698:	cb03      	ldmia	r3!, {r0, r1}
 800c69a:	6010      	str	r0, [r2, #0]
 800c69c:	6051      	str	r1, [r2, #4]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c6a8:	4a2d      	ldr	r2, [pc, #180]	; (800c760 <problem_fetch+0xadd0>)
 800c6aa:	6810      	ldr	r0, [r2, #0]
 800c6ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,I,D");
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	33a4      	adds	r3, #164	; 0xa4
 800c6b8:	492a      	ldr	r1, [pc, #168]	; (800c764 <problem_fetch+0xadd4>)
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	460b      	mov	r3, r1
 800c6be:	cb03      	ldmia	r3!, {r0, r1}
 800c6c0:	6010      	str	r0, [r2, #0]
 800c6c2:	6051      	str	r1, [r2, #4]
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3304      	adds	r3, #4
 800c6cc:	4a26      	ldr	r2, [pc, #152]	; (800c768 <problem_fetch+0xadd8>)
 800c6ce:	461c      	mov	r4, r3
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6d4:	6020      	str	r0, [r4, #0]
 800c6d6:	6061      	str	r1, [r4, #4]
 800c6d8:	60a2      	str	r2, [r4, #8]
 800c6da:	881b      	ldrh	r3, [r3, #0]
 800c6dc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c6e4:	4921      	ldr	r1, [pc, #132]	; (800c76c <problem_fetch+0xaddc>)
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	cb03      	ldmia	r3!, {r0, r1}
 800c6ec:	6010      	str	r0, [r2, #0]
 800c6ee:	6051      	str	r1, [r2, #4]
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	8113      	strh	r3, [r2, #8]
			break;
 800c6f4:	f010 b87c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800c6f8:	08027874 	.word	0x08027874
 800c6fc:	08023b90 	.word	0x08023b90
 800c700:	08027880 	.word	0x08027880
 800c704:	0802788c 	.word	0x0802788c
 800c708:	08023b70 	.word	0x08023b70
 800c70c:	0802789c 	.word	0x0802789c
 800c710:	080278a4 	.word	0x080278a4
 800c714:	080278b4 	.word	0x080278b4
 800c718:	08023c08 	.word	0x08023c08
 800c71c:	080278c8 	.word	0x080278c8
 800c720:	080278d0 	.word	0x080278d0
 800c724:	080278e0 	.word	0x080278e0
 800c728:	080278f4 	.word	0x080278f4
 800c72c:	08023ccc 	.word	0x08023ccc
 800c730:	080278fc 	.word	0x080278fc
 800c734:	0802790c 	.word	0x0802790c
 800c738:	08023d18 	.word	0x08023d18
 800c73c:	08027920 	.word	0x08027920
 800c740:	08023b50 	.word	0x08023b50
 800c744:	08027930 	.word	0x08027930
 800c748:	0802793c 	.word	0x0802793c
 800c74c:	0802794c 	.word	0x0802794c
 800c750:	08023d30 	.word	0x08023d30
 800c754:	0802795c 	.word	0x0802795c
 800c758:	08027968 	.word	0x08027968
 800c75c:	08027978 	.word	0x08027978
 800c760:	08023c28 	.word	0x08023c28
 800c764:	08027984 	.word	0x08027984
 800c768:	08027990 	.word	0x08027990
 800c76c:	0802405c 	.word	0x0802405c
		case 310 :
			strcpy(p->name,"FIRSTEASY");
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c776:	49ba      	ldr	r1, [pc, #744]	; (800ca60 <problem_fetch+0xb0d0>)
 800c778:	461a      	mov	r2, r3
 800c77a:	460b      	mov	r3, r1
 800c77c:	cb03      	ldmia	r3!, {r0, r1}
 800c77e:	6010      	str	r0, [r2, #0]
 800c780:	6051      	str	r1, [r2, #4]
 800c782:	881b      	ldrh	r3, [r3, #0]
 800c784:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c78c:	4ab5      	ldr	r2, [pc, #724]	; (800ca64 <problem_fetch+0xb0d4>)
 800c78e:	6810      	ldr	r0, [r2, #0]
 800c790:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2206      	movs	r2, #6
 800c796:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,E,D");
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	33a4      	adds	r3, #164	; 0xa4
 800c79c:	4ab2      	ldr	r2, [pc, #712]	; (800ca68 <problem_fetch+0xb0d8>)
 800c79e:	461c      	mov	r4, r3
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7a4:	6020      	str	r0, [r4, #0]
 800c7a6:	6061      	str	r1, [r4, #4]
 800c7a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	3304      	adds	r3, #4
 800c7ae:	4aaf      	ldr	r2, [pc, #700]	; (800ca6c <problem_fetch+0xb0dc>)
 800c7b0:	461c      	mov	r4, r3
 800c7b2:	4615      	mov	r5, r2
 800c7b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c7b6:	6020      	str	r0, [r4, #0]
 800c7b8:	6061      	str	r1, [r4, #4]
 800c7ba:	60a2      	str	r2, [r4, #8]
 800c7bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c7c4:	4aaa      	ldr	r2, [pc, #680]	; (800ca70 <problem_fetch+0xb0e0>)
 800c7c6:	461c      	mov	r4, r3
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7cc:	6020      	str	r0, [r4, #0]
 800c7ce:	6061      	str	r1, [r4, #4]
 800c7d0:	60a2      	str	r2, [r4, #8]
			break;
 800c7d2:	f010 b80d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 311 :
			strcpy(p->name,"MATTS");
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c7dc:	4aa5      	ldr	r2, [pc, #660]	; (800ca74 <problem_fetch+0xb0e4>)
 800c7de:	6810      	ldr	r0, [r2, #0]
 800c7e0:	6018      	str	r0, [r3, #0]
 800c7e2:	8892      	ldrh	r2, [r2, #4]
 800c7e4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"8B+");
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c7ec:	4aa2      	ldr	r2, [pc, #648]	; (800ca78 <problem_fetch+0xb0e8>)
 800c7ee:	6810      	ldr	r0, [r2, #0]
 800c7f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2206      	movs	r2, #6
 800c7f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,I,K,I,I");
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	33a4      	adds	r3, #164	; 0xa4
 800c7fc:	4a9f      	ldr	r2, [pc, #636]	; (800ca7c <problem_fetch+0xb0ec>)
 800c7fe:	461c      	mov	r4, r3
 800c800:	4613      	mov	r3, r2
 800c802:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c804:	6020      	str	r0, [r4, #0]
 800c806:	6061      	str	r1, [r4, #4]
 800c808:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,11,7,14,9,18");
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3304      	adds	r3, #4
 800c80e:	4a9c      	ldr	r2, [pc, #624]	; (800ca80 <problem_fetch+0xb0f0>)
 800c810:	461c      	mov	r4, r3
 800c812:	4613      	mov	r3, r2
 800c814:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c816:	6020      	str	r0, [r4, #0]
 800c818:	6061      	str	r1, [r4, #4]
 800c81a:	60a2      	str	r2, [r4, #8]
 800c81c:	881a      	ldrh	r2, [r3, #0]
 800c81e:	789b      	ldrb	r3, [r3, #2]
 800c820:	81a2      	strh	r2, [r4, #12]
 800c822:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c82a:	4a91      	ldr	r2, [pc, #580]	; (800ca70 <problem_fetch+0xb0e0>)
 800c82c:	461c      	mov	r4, r3
 800c82e:	4613      	mov	r3, r2
 800c830:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c832:	6020      	str	r0, [r4, #0]
 800c834:	6061      	str	r1, [r4, #4]
 800c836:	60a2      	str	r2, [r4, #8]
			break;
 800c838:	f00f bfda 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 312 :
			strcpy(p->name,"SO YOU THINK YOU CAN DYNO");
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c842:	4a90      	ldr	r2, [pc, #576]	; (800ca84 <problem_fetch+0xb0f4>)
 800c844:	461d      	mov	r5, r3
 800c846:	4614      	mov	r4, r2
 800c848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c84a:	6028      	str	r0, [r5, #0]
 800c84c:	6069      	str	r1, [r5, #4]
 800c84e:	60aa      	str	r2, [r5, #8]
 800c850:	60eb      	str	r3, [r5, #12]
 800c852:	cc03      	ldmia	r4!, {r0, r1}
 800c854:	6128      	str	r0, [r5, #16]
 800c856:	6169      	str	r1, [r5, #20]
 800c858:	8823      	ldrh	r3, [r4, #0]
 800c85a:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c862:	4a89      	ldr	r2, [pc, #548]	; (800ca88 <problem_fetch+0xb0f8>)
 800c864:	6810      	ldr	r0, [r2, #0]
 800c866:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2206      	movs	r2, #6
 800c86c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,I");
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	33a4      	adds	r3, #164	; 0xa4
 800c872:	4a86      	ldr	r2, [pc, #536]	; (800ca8c <problem_fetch+0xb0fc>)
 800c874:	461c      	mov	r4, r3
 800c876:	4613      	mov	r3, r2
 800c878:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c87a:	6020      	str	r0, [r4, #0]
 800c87c:	6061      	str	r1, [r4, #4]
 800c87e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,13,8,8,18");
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	3304      	adds	r3, #4
 800c884:	4a82      	ldr	r2, [pc, #520]	; (800ca90 <problem_fetch+0xb100>)
 800c886:	461c      	mov	r4, r3
 800c888:	4613      	mov	r3, r2
 800c88a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c88c:	6020      	str	r0, [r4, #0]
 800c88e:	6061      	str	r1, [r4, #4]
 800c890:	60a2      	str	r2, [r4, #8]
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c89c:	4a7d      	ldr	r2, [pc, #500]	; (800ca94 <problem_fetch+0xb104>)
 800c89e:	461c      	mov	r4, r3
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c8a4:	6020      	str	r0, [r4, #0]
 800c8a6:	6061      	str	r1, [r4, #4]
 800c8a8:	60a2      	str	r2, [r4, #8]
			break;
 800c8aa:	f00f bfa1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 313 :
			strcpy(p->name,"THE TROLLOC WARS");
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c8b4:	4a78      	ldr	r2, [pc, #480]	; (800ca98 <problem_fetch+0xb108>)
 800c8b6:	461d      	mov	r5, r3
 800c8b8:	4614      	mov	r4, r2
 800c8ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8bc:	6028      	str	r0, [r5, #0]
 800c8be:	6069      	str	r1, [r5, #4]
 800c8c0:	60aa      	str	r2, [r5, #8]
 800c8c2:	60eb      	str	r3, [r5, #12]
 800c8c4:	7823      	ldrb	r3, [r4, #0]
 800c8c6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c8ce:	4a73      	ldr	r2, [pc, #460]	; (800ca9c <problem_fetch+0xb10c>)
 800c8d0:	8811      	ldrh	r1, [r2, #0]
 800c8d2:	7892      	ldrb	r2, [r2, #2]
 800c8d4:	8019      	strh	r1, [r3, #0]
 800c8d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2205      	movs	r2, #5
 800c8dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,A,D");
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	33a4      	adds	r3, #164	; 0xa4
 800c8e2:	496f      	ldr	r1, [pc, #444]	; (800caa0 <problem_fetch+0xb110>)
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	cb03      	ldmia	r3!, {r0, r1}
 800c8ea:	6010      	str	r0, [r2, #0]
 800c8ec:	6051      	str	r1, [r2, #4]
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	4a6b      	ldr	r2, [pc, #428]	; (800caa4 <problem_fetch+0xb114>)
 800c8f8:	461c      	mov	r4, r3
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c8fe:	6020      	str	r0, [r4, #0]
 800c900:	6061      	str	r1, [r4, #4]
 800c902:	60a2      	str	r2, [r4, #8]
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c90e:	4966      	ldr	r1, [pc, #408]	; (800caa8 <problem_fetch+0xb118>)
 800c910:	461a      	mov	r2, r3
 800c912:	460b      	mov	r3, r1
 800c914:	cb03      	ldmia	r3!, {r0, r1}
 800c916:	6010      	str	r0, [r2, #0]
 800c918:	6051      	str	r1, [r2, #4]
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	8113      	strh	r3, [r2, #8]
			break;
 800c91e:	f00f bf67 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 314 :
			strcpy(p->name,"BRETT'S PROBLEM");
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c928:	4a60      	ldr	r2, [pc, #384]	; (800caac <problem_fetch+0xb11c>)
 800c92a:	461c      	mov	r4, r3
 800c92c:	4615      	mov	r5, r2
 800c92e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c930:	6020      	str	r0, [r4, #0]
 800c932:	6061      	str	r1, [r4, #4]
 800c934:	60a2      	str	r2, [r4, #8]
 800c936:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c93e:	4a52      	ldr	r2, [pc, #328]	; (800ca88 <problem_fetch+0xb0f8>)
 800c940:	6810      	ldr	r0, [r2, #0]
 800c942:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2206      	movs	r2, #6
 800c948:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,G,B,C,D");
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	33a4      	adds	r3, #164	; 0xa4
 800c94e:	4a58      	ldr	r2, [pc, #352]	; (800cab0 <problem_fetch+0xb120>)
 800c950:	461c      	mov	r4, r3
 800c952:	4613      	mov	r3, r2
 800c954:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c956:	6020      	str	r0, [r4, #0]
 800c958:	6061      	str	r1, [r4, #4]
 800c95a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,13,18");
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	3304      	adds	r3, #4
 800c960:	4a54      	ldr	r2, [pc, #336]	; (800cab4 <problem_fetch+0xb124>)
 800c962:	461c      	mov	r4, r3
 800c964:	4615      	mov	r5, r2
 800c966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c968:	6020      	str	r0, [r4, #0]
 800c96a:	6061      	str	r1, [r4, #4]
 800c96c:	60a2      	str	r2, [r4, #8]
 800c96e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c976:	4a3e      	ldr	r2, [pc, #248]	; (800ca70 <problem_fetch+0xb0e0>)
 800c978:	461c      	mov	r4, r3
 800c97a:	4613      	mov	r3, r2
 800c97c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c97e:	6020      	str	r0, [r4, #0]
 800c980:	6061      	str	r1, [r4, #4]
 800c982:	60a2      	str	r2, [r4, #8]
			break;
 800c984:	f00f bf34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 315 :
			strcpy(p->name,"GNOCCHE AL RAGÙ");
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c98e:	4a4a      	ldr	r2, [pc, #296]	; (800cab8 <problem_fetch+0xb128>)
 800c990:	461d      	mov	r5, r3
 800c992:	4614      	mov	r4, r2
 800c994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c996:	6028      	str	r0, [r5, #0]
 800c998:	6069      	str	r1, [r5, #4]
 800c99a:	60aa      	str	r2, [r5, #8]
 800c99c:	60eb      	str	r3, [r5, #12]
 800c99e:	7823      	ldrb	r3, [r4, #0]
 800c9a0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c9a8:	4a44      	ldr	r2, [pc, #272]	; (800cabc <problem_fetch+0xb12c>)
 800c9aa:	6810      	ldr	r0, [r2, #0]
 800c9ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2206      	movs	r2, #6
 800c9b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,K,I");
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	33a4      	adds	r3, #164	; 0xa4
 800c9b8:	4a41      	ldr	r2, [pc, #260]	; (800cac0 <problem_fetch+0xb130>)
 800c9ba:	461c      	mov	r4, r3
 800c9bc:	4613      	mov	r3, r2
 800c9be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9c0:	6020      	str	r0, [r4, #0]
 800c9c2:	6061      	str	r1, [r4, #4]
 800c9c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,12,14,18");
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4a3e      	ldr	r2, [pc, #248]	; (800cac4 <problem_fetch+0xb134>)
 800c9cc:	461c      	mov	r4, r3
 800c9ce:	4615      	mov	r5, r2
 800c9d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9d2:	6020      	str	r0, [r4, #0]
 800c9d4:	6061      	str	r1, [r4, #4]
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c9e0:	4a23      	ldr	r2, [pc, #140]	; (800ca70 <problem_fetch+0xb0e0>)
 800c9e2:	461c      	mov	r4, r3
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9e8:	6020      	str	r0, [r4, #0]
 800c9ea:	6061      	str	r1, [r4, #4]
 800c9ec:	60a2      	str	r2, [r4, #8]
			break;
 800c9ee:	f00f beff 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 316 :
			strcpy(p->name,"A SAFE PLACE");
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c9f8:	4a33      	ldr	r2, [pc, #204]	; (800cac8 <problem_fetch+0xb138>)
 800c9fa:	461c      	mov	r4, r3
 800c9fc:	4613      	mov	r3, r2
 800c9fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca00:	6020      	str	r0, [r4, #0]
 800ca02:	6061      	str	r1, [r4, #4]
 800ca04:	60a2      	str	r2, [r4, #8]
 800ca06:	781b      	ldrb	r3, [r3, #0]
 800ca08:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ca10:	4a2e      	ldr	r2, [pc, #184]	; (800cacc <problem_fetch+0xb13c>)
 800ca12:	8811      	ldrh	r1, [r2, #0]
 800ca14:	7892      	ldrb	r2, [r2, #2]
 800ca16:	8019      	strh	r1, [r3, #0]
 800ca18:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2206      	movs	r2, #6
 800ca1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,D,G,E,D");
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	33a4      	adds	r3, #164	; 0xa4
 800ca24:	4a2a      	ldr	r2, [pc, #168]	; (800cad0 <problem_fetch+0xb140>)
 800ca26:	461c      	mov	r4, r3
 800ca28:	4613      	mov	r3, r2
 800ca2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca2c:	6020      	str	r0, [r4, #0]
 800ca2e:	6061      	str	r1, [r4, #4]
 800ca30:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3304      	adds	r3, #4
 800ca36:	4a27      	ldr	r2, [pc, #156]	; (800cad4 <problem_fetch+0xb144>)
 800ca38:	461c      	mov	r4, r3
 800ca3a:	4615      	mov	r5, r2
 800ca3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca3e:	6020      	str	r0, [r4, #0]
 800ca40:	6061      	str	r1, [r4, #4]
 800ca42:	60a2      	str	r2, [r4, #8]
 800ca44:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ca4c:	4a08      	ldr	r2, [pc, #32]	; (800ca70 <problem_fetch+0xb0e0>)
 800ca4e:	461c      	mov	r4, r3
 800ca50:	4613      	mov	r3, r2
 800ca52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca54:	6020      	str	r0, [r4, #0]
 800ca56:	6061      	str	r1, [r4, #4]
 800ca58:	60a2      	str	r2, [r4, #8]
			break;
 800ca5a:	f00f bec9 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800ca5e:	bf00      	nop
 800ca60:	080279a0 	.word	0x080279a0
 800ca64:	08023b90 	.word	0x08023b90
 800ca68:	080279ac 	.word	0x080279ac
 800ca6c:	08026264 	.word	0x08026264
 800ca70:	08023f2c 	.word	0x08023f2c
 800ca74:	080279b8 	.word	0x080279b8
 800ca78:	080279c0 	.word	0x080279c0
 800ca7c:	080279c4 	.word	0x080279c4
 800ca80:	080279d0 	.word	0x080279d0
 800ca84:	080279e0 	.word	0x080279e0
 800ca88:	08023ccc 	.word	0x08023ccc
 800ca8c:	080279fc 	.word	0x080279fc
 800ca90:	08027a08 	.word	0x08027a08
 800ca94:	08023b70 	.word	0x08023b70
 800ca98:	08027a18 	.word	0x08027a18
 800ca9c:	08023b50 	.word	0x08023b50
 800caa0:	08027a2c 	.word	0x08027a2c
 800caa4:	08027a38 	.word	0x08027a38
 800caa8:	08024270 	.word	0x08024270
 800caac:	08027a48 	.word	0x08027a48
 800cab0:	08027a58 	.word	0x08027a58
 800cab4:	08027a64 	.word	0x08027a64
 800cab8:	08027a74 	.word	0x08027a74
 800cabc:	08023d30 	.word	0x08023d30
 800cac0:	08027a88 	.word	0x08027a88
 800cac4:	08027a94 	.word	0x08027a94
 800cac8:	08027aa4 	.word	0x08027aa4
 800cacc:	08023c5c 	.word	0x08023c5c
 800cad0:	08027ab4 	.word	0x08027ab4
 800cad4:	08027ac0 	.word	0x08027ac0
		case 317 :
			strcpy(p->name,"CRONENBERG");
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cade:	49a8      	ldr	r1, [pc, #672]	; (800cd80 <problem_fetch+0xb3f0>)
 800cae0:	461a      	mov	r2, r3
 800cae2:	460b      	mov	r3, r1
 800cae4:	cb03      	ldmia	r3!, {r0, r1}
 800cae6:	6010      	str	r0, [r2, #0]
 800cae8:	6051      	str	r1, [r2, #4]
 800caea:	8819      	ldrh	r1, [r3, #0]
 800caec:	789b      	ldrb	r3, [r3, #2]
 800caee:	8111      	strh	r1, [r2, #8]
 800caf0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800caf8:	4aa2      	ldr	r2, [pc, #648]	; (800cd84 <problem_fetch+0xb3f4>)
 800cafa:	6810      	ldr	r0, [r2, #0]
 800cafc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2207      	movs	r2, #7
 800cb02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,E,I");
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	33a4      	adds	r3, #164	; 0xa4
 800cb08:	4a9f      	ldr	r2, [pc, #636]	; (800cd88 <problem_fetch+0xb3f8>)
 800cb0a:	461c      	mov	r4, r3
 800cb0c:	4613      	mov	r3, r2
 800cb0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb10:	6020      	str	r0, [r4, #0]
 800cb12:	6061      	str	r1, [r4, #4]
 800cb14:	60a2      	str	r2, [r4, #8]
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,9,12,16,18");
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	3304      	adds	r3, #4
 800cb1e:	4a9b      	ldr	r2, [pc, #620]	; (800cd8c <problem_fetch+0xb3fc>)
 800cb20:	461d      	mov	r5, r3
 800cb22:	4614      	mov	r4, r2
 800cb24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb26:	6028      	str	r0, [r5, #0]
 800cb28:	6069      	str	r1, [r5, #4]
 800cb2a:	60aa      	str	r2, [r5, #8]
 800cb2c:	60eb      	str	r3, [r5, #12]
 800cb2e:	7823      	ldrb	r3, [r4, #0]
 800cb30:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cb38:	4a95      	ldr	r2, [pc, #596]	; (800cd90 <problem_fetch+0xb400>)
 800cb3a:	461c      	mov	r4, r3
 800cb3c:	4613      	mov	r3, r2
 800cb3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb40:	6020      	str	r0, [r4, #0]
 800cb42:	6061      	str	r1, [r4, #4]
 800cb44:	60a2      	str	r2, [r4, #8]
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	81a3      	strh	r3, [r4, #12]
			break;
 800cb4a:	f00f be51 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 318 :
			strcpy(p->name,"ALLES IST MÖGLICH");
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cb54:	4a8f      	ldr	r2, [pc, #572]	; (800cd94 <problem_fetch+0xb404>)
 800cb56:	461d      	mov	r5, r3
 800cb58:	4614      	mov	r4, r2
 800cb5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb5c:	6028      	str	r0, [r5, #0]
 800cb5e:	6069      	str	r1, [r5, #4]
 800cb60:	60aa      	str	r2, [r5, #8]
 800cb62:	60eb      	str	r3, [r5, #12]
 800cb64:	8823      	ldrh	r3, [r4, #0]
 800cb66:	78a2      	ldrb	r2, [r4, #2]
 800cb68:	822b      	strh	r3, [r5, #16]
 800cb6a:	4613      	mov	r3, r2
 800cb6c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B+");
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cb74:	4a88      	ldr	r2, [pc, #544]	; (800cd98 <problem_fetch+0xb408>)
 800cb76:	6810      	ldr	r0, [r2, #0]
 800cb78:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2204      	movs	r2, #4
 800cb7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,D");
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	33a4      	adds	r3, #164	; 0xa4
 800cb84:	4985      	ldr	r1, [pc, #532]	; (800cd9c <problem_fetch+0xb40c>)
 800cb86:	461a      	mov	r2, r3
 800cb88:	460b      	mov	r3, r1
 800cb8a:	cb03      	ldmia	r3!, {r0, r1}
 800cb8c:	6010      	str	r0, [r2, #0]
 800cb8e:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3304      	adds	r3, #4
 800cb94:	4982      	ldr	r1, [pc, #520]	; (800cda0 <problem_fetch+0xb410>)
 800cb96:	461a      	mov	r2, r3
 800cb98:	460b      	mov	r3, r1
 800cb9a:	cb03      	ldmia	r3!, {r0, r1}
 800cb9c:	6010      	str	r0, [r2, #0]
 800cb9e:	6051      	str	r1, [r2, #4]
 800cba0:	8819      	ldrh	r1, [r3, #0]
 800cba2:	789b      	ldrb	r3, [r3, #2]
 800cba4:	8111      	strh	r1, [r2, #8]
 800cba6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cbae:	497d      	ldr	r1, [pc, #500]	; (800cda4 <problem_fetch+0xb414>)
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	cb03      	ldmia	r3!, {r0, r1}
 800cbb6:	6010      	str	r0, [r2, #0]
 800cbb8:	6051      	str	r1, [r2, #4]
			break;
 800cbba:	f00f be19 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 319 :
			strcpy(p->name,"KKSBSKAN");
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cbc4:	4978      	ldr	r1, [pc, #480]	; (800cda8 <problem_fetch+0xb418>)
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	460b      	mov	r3, r1
 800cbca:	cb03      	ldmia	r3!, {r0, r1}
 800cbcc:	6010      	str	r0, [r2, #0]
 800cbce:	6051      	str	r1, [r2, #4]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cbda:	4a74      	ldr	r2, [pc, #464]	; (800cdac <problem_fetch+0xb41c>)
 800cbdc:	8811      	ldrh	r1, [r2, #0]
 800cbde:	7892      	ldrb	r2, [r2, #2]
 800cbe0:	8019      	strh	r1, [r3, #0]
 800cbe2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2205      	movs	r2, #5
 800cbe8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,C,I");
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	33a4      	adds	r3, #164	; 0xa4
 800cbee:	4970      	ldr	r1, [pc, #448]	; (800cdb0 <problem_fetch+0xb420>)
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	cb03      	ldmia	r3!, {r0, r1}
 800cbf6:	6010      	str	r0, [r2, #0]
 800cbf8:	6051      	str	r1, [r2, #4]
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,16,18");
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4a6c      	ldr	r2, [pc, #432]	; (800cdb4 <problem_fetch+0xb424>)
 800cc04:	461c      	mov	r4, r3
 800cc06:	4613      	mov	r3, r2
 800cc08:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc0a:	6020      	str	r0, [r4, #0]
 800cc0c:	6061      	str	r1, [r4, #4]
 800cc0e:	60a2      	str	r2, [r4, #8]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cc1a:	4967      	ldr	r1, [pc, #412]	; (800cdb8 <problem_fetch+0xb428>)
 800cc1c:	461a      	mov	r2, r3
 800cc1e:	460b      	mov	r3, r1
 800cc20:	cb03      	ldmia	r3!, {r0, r1}
 800cc22:	6010      	str	r0, [r2, #0]
 800cc24:	6051      	str	r1, [r2, #4]
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	8113      	strh	r3, [r2, #8]
			break;
 800cc2a:	f00f bde1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 320 :
			strcpy(p->name,"MATCHCATCH");
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc34:	4961      	ldr	r1, [pc, #388]	; (800cdbc <problem_fetch+0xb42c>)
 800cc36:	461a      	mov	r2, r3
 800cc38:	460b      	mov	r3, r1
 800cc3a:	cb03      	ldmia	r3!, {r0, r1}
 800cc3c:	6010      	str	r0, [r2, #0]
 800cc3e:	6051      	str	r1, [r2, #4]
 800cc40:	8819      	ldrh	r1, [r3, #0]
 800cc42:	789b      	ldrb	r3, [r3, #2]
 800cc44:	8111      	strh	r1, [r2, #8]
 800cc46:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc4e:	4a4d      	ldr	r2, [pc, #308]	; (800cd84 <problem_fetch+0xb3f4>)
 800cc50:	6810      	ldr	r0, [r2, #0]
 800cc52:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2205      	movs	r2, #5
 800cc58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,J,G,I");
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	33a4      	adds	r3, #164	; 0xa4
 800cc5e:	4958      	ldr	r1, [pc, #352]	; (800cdc0 <problem_fetch+0xb430>)
 800cc60:	461a      	mov	r2, r3
 800cc62:	460b      	mov	r3, r1
 800cc64:	cb03      	ldmia	r3!, {r0, r1}
 800cc66:	6010      	str	r0, [r2, #0]
 800cc68:	6051      	str	r1, [r2, #4]
 800cc6a:	881b      	ldrh	r3, [r3, #0]
 800cc6c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	3304      	adds	r3, #4
 800cc72:	4a54      	ldr	r2, [pc, #336]	; (800cdc4 <problem_fetch+0xb434>)
 800cc74:	461c      	mov	r4, r3
 800cc76:	4613      	mov	r3, r2
 800cc78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc7a:	6020      	str	r0, [r4, #0]
 800cc7c:	6061      	str	r1, [r4, #4]
 800cc7e:	60a2      	str	r2, [r4, #8]
 800cc80:	881b      	ldrh	r3, [r3, #0]
 800cc82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cc8a:	494b      	ldr	r1, [pc, #300]	; (800cdb8 <problem_fetch+0xb428>)
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	460b      	mov	r3, r1
 800cc90:	cb03      	ldmia	r3!, {r0, r1}
 800cc92:	6010      	str	r0, [r2, #0]
 800cc94:	6051      	str	r1, [r2, #4]
 800cc96:	881b      	ldrh	r3, [r3, #0]
 800cc98:	8113      	strh	r3, [r2, #8]
			break;
 800cc9a:	f00f bda9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 321 :
			strcpy(p->name,"CAPTAIN AUBREY VAR.");
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cca4:	4a48      	ldr	r2, [pc, #288]	; (800cdc8 <problem_fetch+0xb438>)
 800cca6:	461d      	mov	r5, r3
 800cca8:	4614      	mov	r4, r2
 800ccaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccac:	6028      	str	r0, [r5, #0]
 800ccae:	6069      	str	r1, [r5, #4]
 800ccb0:	60aa      	str	r2, [r5, #8]
 800ccb2:	60eb      	str	r3, [r5, #12]
 800ccb4:	6820      	ldr	r0, [r4, #0]
 800ccb6:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ccbe:	4a43      	ldr	r2, [pc, #268]	; (800cdcc <problem_fetch+0xb43c>)
 800ccc0:	6810      	ldr	r0, [r2, #0]
 800ccc2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2205      	movs	r2, #5
 800ccc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,I");
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	33a4      	adds	r3, #164	; 0xa4
 800ccce:	4940      	ldr	r1, [pc, #256]	; (800cdd0 <problem_fetch+0xb440>)
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	cb03      	ldmia	r3!, {r0, r1}
 800ccd6:	6010      	str	r0, [r2, #0]
 800ccd8:	6051      	str	r1, [r2, #4]
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3304      	adds	r3, #4
 800cce2:	4a3c      	ldr	r2, [pc, #240]	; (800cdd4 <problem_fetch+0xb444>)
 800cce4:	461c      	mov	r4, r3
 800cce6:	4613      	mov	r3, r2
 800cce8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccea:	6020      	str	r0, [r4, #0]
 800ccec:	6061      	str	r1, [r4, #4]
 800ccee:	60a2      	str	r2, [r4, #8]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ccfa:	492f      	ldr	r1, [pc, #188]	; (800cdb8 <problem_fetch+0xb428>)
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	460b      	mov	r3, r1
 800cd00:	cb03      	ldmia	r3!, {r0, r1}
 800cd02:	6010      	str	r0, [r2, #0]
 800cd04:	6051      	str	r1, [r2, #4]
 800cd06:	881b      	ldrh	r3, [r3, #0]
 800cd08:	8113      	strh	r3, [r2, #8]
			break;
 800cd0a:	f00f bd71 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 322 :
			strcpy(p->name,"OKLAHOMA");
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd14:	4930      	ldr	r1, [pc, #192]	; (800cdd8 <problem_fetch+0xb448>)
 800cd16:	461a      	mov	r2, r3
 800cd18:	460b      	mov	r3, r1
 800cd1a:	cb03      	ldmia	r3!, {r0, r1}
 800cd1c:	6010      	str	r0, [r2, #0]
 800cd1e:	6051      	str	r1, [r2, #4]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd2a:	4a2c      	ldr	r2, [pc, #176]	; (800cddc <problem_fetch+0xb44c>)
 800cd2c:	8811      	ldrh	r1, [r2, #0]
 800cd2e:	7892      	ldrb	r2, [r2, #2]
 800cd30:	8019      	strh	r1, [r3, #0]
 800cd32:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2205      	movs	r2, #5
 800cd38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,A");
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	33a4      	adds	r3, #164	; 0xa4
 800cd3e:	4928      	ldr	r1, [pc, #160]	; (800cde0 <problem_fetch+0xb450>)
 800cd40:	461a      	mov	r2, r3
 800cd42:	460b      	mov	r3, r1
 800cd44:	cb03      	ldmia	r3!, {r0, r1}
 800cd46:	6010      	str	r0, [r2, #0]
 800cd48:	6051      	str	r1, [r2, #4]
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3304      	adds	r3, #4
 800cd52:	4a24      	ldr	r2, [pc, #144]	; (800cde4 <problem_fetch+0xb454>)
 800cd54:	461c      	mov	r4, r3
 800cd56:	4613      	mov	r3, r2
 800cd58:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd5a:	6020      	str	r0, [r4, #0]
 800cd5c:	6061      	str	r1, [r4, #4]
 800cd5e:	60a2      	str	r2, [r4, #8]
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cd6a:	4913      	ldr	r1, [pc, #76]	; (800cdb8 <problem_fetch+0xb428>)
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	460b      	mov	r3, r1
 800cd70:	cb03      	ldmia	r3!, {r0, r1}
 800cd72:	6010      	str	r0, [r2, #0]
 800cd74:	6051      	str	r1, [r2, #4]
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	8113      	strh	r3, [r2, #8]
			break;
 800cd7a:	f00f bd39 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800cd7e:	bf00      	nop
 800cd80:	08027ad0 	.word	0x08027ad0
 800cd84:	08023c28 	.word	0x08023c28
 800cd88:	08027adc 	.word	0x08027adc
 800cd8c:	08027aec 	.word	0x08027aec
 800cd90:	08023d18 	.word	0x08023d18
 800cd94:	08027b00 	.word	0x08027b00
 800cd98:	08023ccc 	.word	0x08023ccc
 800cd9c:	08027b14 	.word	0x08027b14
 800cda0:	08027b1c 	.word	0x08027b1c
 800cda4:	08023ce4 	.word	0x08023ce4
 800cda8:	08027b28 	.word	0x08027b28
 800cdac:	080243c4 	.word	0x080243c4
 800cdb0:	08027b34 	.word	0x08027b34
 800cdb4:	08027b40 	.word	0x08027b40
 800cdb8:	0802405c 	.word	0x0802405c
 800cdbc:	08027b50 	.word	0x08027b50
 800cdc0:	08027b5c 	.word	0x08027b5c
 800cdc4:	08027990 	.word	0x08027990
 800cdc8:	08027b68 	.word	0x08027b68
 800cdcc:	08023d30 	.word	0x08023d30
 800cdd0:	08027b7c 	.word	0x08027b7c
 800cdd4:	08027b88 	.word	0x08027b88
 800cdd8:	08027b98 	.word	0x08027b98
 800cddc:	08023b50 	.word	0x08023b50
 800cde0:	08027ba4 	.word	0x08027ba4
 800cde4:	08027bb0 	.word	0x08027bb0
		case 323 :
			strcpy(p->name,"BLACK PHENOMENON");
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cdee:	4ac0      	ldr	r2, [pc, #768]	; (800d0f0 <problem_fetch+0xb760>)
 800cdf0:	461d      	mov	r5, r3
 800cdf2:	4614      	mov	r4, r2
 800cdf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cdf6:	6028      	str	r0, [r5, #0]
 800cdf8:	6069      	str	r1, [r5, #4]
 800cdfa:	60aa      	str	r2, [r5, #8]
 800cdfc:	60eb      	str	r3, [r5, #12]
 800cdfe:	7823      	ldrb	r3, [r4, #0]
 800ce00:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"8A");
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ce08:	4aba      	ldr	r2, [pc, #744]	; (800d0f4 <problem_fetch+0xb764>)
 800ce0a:	8811      	ldrh	r1, [r2, #0]
 800ce0c:	7892      	ldrb	r2, [r2, #2]
 800ce0e:	8019      	strh	r1, [r3, #0]
 800ce10:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2206      	movs	r2, #6
 800ce16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,B,G,B,D");
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	33a4      	adds	r3, #164	; 0xa4
 800ce1c:	4ab6      	ldr	r2, [pc, #728]	; (800d0f8 <problem_fetch+0xb768>)
 800ce1e:	461c      	mov	r4, r3
 800ce20:	4613      	mov	r3, r2
 800ce22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce24:	6020      	str	r0, [r4, #0]
 800ce26:	6061      	str	r1, [r4, #4]
 800ce28:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,6,10,10,18");
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4ab3      	ldr	r2, [pc, #716]	; (800d0fc <problem_fetch+0xb76c>)
 800ce30:	461c      	mov	r4, r3
 800ce32:	4613      	mov	r3, r2
 800ce34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce36:	6020      	str	r0, [r4, #0]
 800ce38:	6061      	str	r1, [r4, #4]
 800ce3a:	60a2      	str	r2, [r4, #8]
 800ce3c:	881a      	ldrh	r2, [r3, #0]
 800ce3e:	789b      	ldrb	r3, [r3, #2]
 800ce40:	81a2      	strh	r2, [r4, #12]
 800ce42:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ce4a:	4aad      	ldr	r2, [pc, #692]	; (800d100 <problem_fetch+0xb770>)
 800ce4c:	461c      	mov	r4, r3
 800ce4e:	4613      	mov	r3, r2
 800ce50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce52:	6020      	str	r0, [r4, #0]
 800ce54:	6061      	str	r1, [r4, #4]
 800ce56:	60a2      	str	r2, [r4, #8]
			break;
 800ce58:	f00f bcca 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 324 :
			strcpy(p->name,"KHAZAD DUM");
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ce62:	49a8      	ldr	r1, [pc, #672]	; (800d104 <problem_fetch+0xb774>)
 800ce64:	461a      	mov	r2, r3
 800ce66:	460b      	mov	r3, r1
 800ce68:	cb03      	ldmia	r3!, {r0, r1}
 800ce6a:	6010      	str	r0, [r2, #0]
 800ce6c:	6051      	str	r1, [r2, #4]
 800ce6e:	8819      	ldrh	r1, [r3, #0]
 800ce70:	789b      	ldrb	r3, [r3, #2]
 800ce72:	8111      	strh	r1, [r2, #8]
 800ce74:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ce7c:	4aa2      	ldr	r2, [pc, #648]	; (800d108 <problem_fetch+0xb778>)
 800ce7e:	6810      	ldr	r0, [r2, #0]
 800ce80:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2206      	movs	r2, #6
 800ce86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,D,A");
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	33a4      	adds	r3, #164	; 0xa4
 800ce8c:	4a9f      	ldr	r2, [pc, #636]	; (800d10c <problem_fetch+0xb77c>)
 800ce8e:	461c      	mov	r4, r3
 800ce90:	4613      	mov	r3, r2
 800ce92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ce94:	6020      	str	r0, [r4, #0]
 800ce96:	6061      	str	r1, [r4, #4]
 800ce98:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,13,15,18");
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	4a9c      	ldr	r2, [pc, #624]	; (800d110 <problem_fetch+0xb780>)
 800cea0:	461c      	mov	r4, r3
 800cea2:	4615      	mov	r5, r2
 800cea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cea6:	6020      	str	r0, [r4, #0]
 800cea8:	6061      	str	r1, [r4, #4]
 800ceaa:	60a2      	str	r2, [r4, #8]
 800ceac:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ceb4:	4a92      	ldr	r2, [pc, #584]	; (800d100 <problem_fetch+0xb770>)
 800ceb6:	461c      	mov	r4, r3
 800ceb8:	4613      	mov	r3, r2
 800ceba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cebc:	6020      	str	r0, [r4, #0]
 800cebe:	6061      	str	r1, [r4, #4]
 800cec0:	60a2      	str	r2, [r4, #8]
			break;
 800cec2:	f00f bc95 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 325 :
			strcpy(p->name,"TESSME 4");
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cecc:	4991      	ldr	r1, [pc, #580]	; (800d114 <problem_fetch+0xb784>)
 800cece:	461a      	mov	r2, r3
 800ced0:	460b      	mov	r3, r1
 800ced2:	cb03      	ldmia	r3!, {r0, r1}
 800ced4:	6010      	str	r0, [r2, #0]
 800ced6:	6051      	str	r1, [r2, #4]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cee2:	4a8d      	ldr	r2, [pc, #564]	; (800d118 <problem_fetch+0xb788>)
 800cee4:	6810      	ldr	r0, [r2, #0]
 800cee6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2206      	movs	r2, #6
 800ceec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,D,I");
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	33a4      	adds	r3, #164	; 0xa4
 800cef2:	4a8a      	ldr	r2, [pc, #552]	; (800d11c <problem_fetch+0xb78c>)
 800cef4:	461c      	mov	r4, r3
 800cef6:	4613      	mov	r3, r2
 800cef8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cefa:	6020      	str	r0, [r4, #0]
 800cefc:	6061      	str	r1, [r4, #4]
 800cefe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,14,7,18");
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3304      	adds	r3, #4
 800cf04:	4a86      	ldr	r2, [pc, #536]	; (800d120 <problem_fetch+0xb790>)
 800cf06:	461c      	mov	r4, r3
 800cf08:	4613      	mov	r3, r2
 800cf0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf0c:	6020      	str	r0, [r4, #0]
 800cf0e:	6061      	str	r1, [r4, #4]
 800cf10:	60a2      	str	r2, [r4, #8]
 800cf12:	881a      	ldrh	r2, [r3, #0]
 800cf14:	789b      	ldrb	r3, [r3, #2]
 800cf16:	81a2      	strh	r2, [r4, #12]
 800cf18:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cf20:	4a77      	ldr	r2, [pc, #476]	; (800d100 <problem_fetch+0xb770>)
 800cf22:	461c      	mov	r4, r3
 800cf24:	4613      	mov	r3, r2
 800cf26:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf28:	6020      	str	r0, [r4, #0]
 800cf2a:	6061      	str	r1, [r4, #4]
 800cf2c:	60a2      	str	r2, [r4, #8]
			break;
 800cf2e:	f00f bc5f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 326 :
			strcpy(p->name,"TESSME 3");
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf38:	497a      	ldr	r1, [pc, #488]	; (800d124 <problem_fetch+0xb794>)
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	460b      	mov	r3, r1
 800cf3e:	cb03      	ldmia	r3!, {r0, r1}
 800cf40:	6010      	str	r0, [r2, #0]
 800cf42:	6051      	str	r1, [r2, #4]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf4e:	4a76      	ldr	r2, [pc, #472]	; (800d128 <problem_fetch+0xb798>)
 800cf50:	6810      	ldr	r0, [r2, #0]
 800cf52:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2206      	movs	r2, #6
 800cf58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,I");
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	33a4      	adds	r3, #164	; 0xa4
 800cf5e:	4a73      	ldr	r2, [pc, #460]	; (800d12c <problem_fetch+0xb79c>)
 800cf60:	461c      	mov	r4, r3
 800cf62:	4613      	mov	r3, r2
 800cf64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf66:	6020      	str	r0, [r4, #0]
 800cf68:	6061      	str	r1, [r4, #4]
 800cf6a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,14,12,9,18");
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4a6f      	ldr	r2, [pc, #444]	; (800d130 <problem_fetch+0xb7a0>)
 800cf72:	461c      	mov	r4, r3
 800cf74:	4613      	mov	r3, r2
 800cf76:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf78:	6020      	str	r0, [r4, #0]
 800cf7a:	6061      	str	r1, [r4, #4]
 800cf7c:	60a2      	str	r2, [r4, #8]
 800cf7e:	881a      	ldrh	r2, [r3, #0]
 800cf80:	789b      	ldrb	r3, [r3, #2]
 800cf82:	81a2      	strh	r2, [r4, #12]
 800cf84:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cf8c:	4a5c      	ldr	r2, [pc, #368]	; (800d100 <problem_fetch+0xb770>)
 800cf8e:	461c      	mov	r4, r3
 800cf90:	4613      	mov	r3, r2
 800cf92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf94:	6020      	str	r0, [r4, #0]
 800cf96:	6061      	str	r1, [r4, #4]
 800cf98:	60a2      	str	r2, [r4, #8]
			break;
 800cf9a:	f00f bc29 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 327 :
			strcpy(p->name,"TESSME 1");
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cfa4:	4963      	ldr	r1, [pc, #396]	; (800d134 <problem_fetch+0xb7a4>)
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	cb03      	ldmia	r3!, {r0, r1}
 800cfac:	6010      	str	r0, [r2, #0]
 800cfae:	6051      	str	r1, [r2, #4]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cfba:	4a53      	ldr	r2, [pc, #332]	; (800d108 <problem_fetch+0xb778>)
 800cfbc:	6810      	ldr	r0, [r2, #0]
 800cfbe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2207      	movs	r2, #7
 800cfc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,J,H,I");
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	33a4      	adds	r3, #164	; 0xa4
 800cfca:	4a5b      	ldr	r2, [pc, #364]	; (800d138 <problem_fetch+0xb7a8>)
 800cfcc:	461c      	mov	r4, r3
 800cfce:	4613      	mov	r3, r2
 800cfd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfd2:	6020      	str	r0, [r4, #0]
 800cfd4:	6061      	str	r1, [r4, #4]
 800cfd6:	60a2      	str	r2, [r4, #8]
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	4a56      	ldr	r2, [pc, #344]	; (800d13c <problem_fetch+0xb7ac>)
 800cfe2:	461d      	mov	r5, r3
 800cfe4:	4614      	mov	r4, r2
 800cfe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfe8:	6028      	str	r0, [r5, #0]
 800cfea:	6069      	str	r1, [r5, #4]
 800cfec:	60aa      	str	r2, [r5, #8]
 800cfee:	60eb      	str	r3, [r5, #12]
 800cff0:	8823      	ldrh	r3, [r4, #0]
 800cff2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cffa:	4a51      	ldr	r2, [pc, #324]	; (800d140 <problem_fetch+0xb7b0>)
 800cffc:	461c      	mov	r4, r3
 800cffe:	4613      	mov	r3, r2
 800d000:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d002:	6020      	str	r0, [r4, #0]
 800d004:	6061      	str	r1, [r4, #4]
 800d006:	60a2      	str	r2, [r4, #8]
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	81a3      	strh	r3, [r4, #12]
			break;
 800d00c:	f00f bbf0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 328 :
			strcpy(p->name,"RONSTOPPABLE");
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d016:	4a4b      	ldr	r2, [pc, #300]	; (800d144 <problem_fetch+0xb7b4>)
 800d018:	461c      	mov	r4, r3
 800d01a:	4613      	mov	r3, r2
 800d01c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d01e:	6020      	str	r0, [r4, #0]
 800d020:	6061      	str	r1, [r4, #4]
 800d022:	60a2      	str	r2, [r4, #8]
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d02e:	4a46      	ldr	r2, [pc, #280]	; (800d148 <problem_fetch+0xb7b8>)
 800d030:	6810      	ldr	r0, [r2, #0]
 800d032:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2206      	movs	r2, #6
 800d038:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,B,D");
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	33a4      	adds	r3, #164	; 0xa4
 800d03e:	4a43      	ldr	r2, [pc, #268]	; (800d14c <problem_fetch+0xb7bc>)
 800d040:	461c      	mov	r4, r3
 800d042:	4613      	mov	r3, r2
 800d044:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d046:	6020      	str	r0, [r4, #0]
 800d048:	6061      	str	r1, [r4, #4]
 800d04a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	3304      	adds	r3, #4
 800d050:	4a3f      	ldr	r2, [pc, #252]	; (800d150 <problem_fetch+0xb7c0>)
 800d052:	461c      	mov	r4, r3
 800d054:	4613      	mov	r3, r2
 800d056:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d058:	6020      	str	r0, [r4, #0]
 800d05a:	6061      	str	r1, [r4, #4]
 800d05c:	60a2      	str	r2, [r4, #8]
 800d05e:	881a      	ldrh	r2, [r3, #0]
 800d060:	789b      	ldrb	r3, [r3, #2]
 800d062:	81a2      	strh	r2, [r4, #12]
 800d064:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d06c:	4a24      	ldr	r2, [pc, #144]	; (800d100 <problem_fetch+0xb770>)
 800d06e:	461c      	mov	r4, r3
 800d070:	4613      	mov	r3, r2
 800d072:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d074:	6020      	str	r0, [r4, #0]
 800d076:	6061      	str	r1, [r4, #4]
 800d078:	60a2      	str	r2, [r4, #8]
			break;
 800d07a:	f00f bbb9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 329 :
			strcpy(p->name,"MO'RON");
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d084:	4a33      	ldr	r2, [pc, #204]	; (800d154 <problem_fetch+0xb7c4>)
 800d086:	6810      	ldr	r0, [r2, #0]
 800d088:	6018      	str	r0, [r3, #0]
 800d08a:	8891      	ldrh	r1, [r2, #4]
 800d08c:	7992      	ldrb	r2, [r2, #6]
 800d08e:	8099      	strh	r1, [r3, #4]
 800d090:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d098:	4a2f      	ldr	r2, [pc, #188]	; (800d158 <problem_fetch+0xb7c8>)
 800d09a:	8811      	ldrh	r1, [r2, #0]
 800d09c:	7892      	ldrb	r2, [r2, #2]
 800d09e:	8019      	strh	r1, [r3, #0]
 800d0a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2208      	movs	r2, #8
 800d0a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,A,E,E,G,D");
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	33a4      	adds	r3, #164	; 0xa4
 800d0ac:	4a2b      	ldr	r2, [pc, #172]	; (800d15c <problem_fetch+0xb7cc>)
 800d0ae:	461c      	mov	r4, r3
 800d0b0:	4615      	mov	r5, r2
 800d0b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0b4:	6020      	str	r0, [r4, #0]
 800d0b6:	6061      	str	r1, [r4, #4]
 800d0b8:	60a2      	str	r2, [r4, #8]
 800d0ba:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,9,12,14,17,18");
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	3304      	adds	r3, #4
 800d0c0:	4a27      	ldr	r2, [pc, #156]	; (800d160 <problem_fetch+0xb7d0>)
 800d0c2:	461d      	mov	r5, r3
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0c8:	6028      	str	r0, [r5, #0]
 800d0ca:	6069      	str	r1, [r5, #4]
 800d0cc:	60aa      	str	r2, [r5, #8]
 800d0ce:	60eb      	str	r3, [r5, #12]
 800d0d0:	6820      	ldr	r0, [r4, #0]
 800d0d2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d0da:	4a22      	ldr	r2, [pc, #136]	; (800d164 <problem_fetch+0xb7d4>)
 800d0dc:	461c      	mov	r4, r3
 800d0de:	4615      	mov	r5, r2
 800d0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0e2:	6020      	str	r0, [r4, #0]
 800d0e4:	6061      	str	r1, [r4, #4]
 800d0e6:	60a2      	str	r2, [r4, #8]
 800d0e8:	60e3      	str	r3, [r4, #12]
			break;
 800d0ea:	f00f bb81 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800d0ee:	bf00      	nop
 800d0f0:	08027bc0 	.word	0x08027bc0
 800d0f4:	08025ef4 	.word	0x08025ef4
 800d0f8:	08027bd4 	.word	0x08027bd4
 800d0fc:	08027be0 	.word	0x08027be0
 800d100:	08023f2c 	.word	0x08023f2c
 800d104:	08027bf0 	.word	0x08027bf0
 800d108:	08023b90 	.word	0x08023b90
 800d10c:	08027bfc 	.word	0x08027bfc
 800d110:	08027c08 	.word	0x08027c08
 800d114:	08027c18 	.word	0x08027c18
 800d118:	08023ccc 	.word	0x08023ccc
 800d11c:	08027c24 	.word	0x08027c24
 800d120:	08027c30 	.word	0x08027c30
 800d124:	08027c40 	.word	0x08027c40
 800d128:	08023d30 	.word	0x08023d30
 800d12c:	08027c4c 	.word	0x08027c4c
 800d130:	08027c58 	.word	0x08027c58
 800d134:	08027c68 	.word	0x08027c68
 800d138:	08027c74 	.word	0x08027c74
 800d13c:	08025120 	.word	0x08025120
 800d140:	08023d18 	.word	0x08023d18
 800d144:	08027c84 	.word	0x08027c84
 800d148:	08023c28 	.word	0x08023c28
 800d14c:	08027c94 	.word	0x08027c94
 800d150:	08027ca0 	.word	0x08027ca0
 800d154:	08027cb0 	.word	0x08027cb0
 800d158:	08023b50 	.word	0x08023b50
 800d15c:	08027cb8 	.word	0x08027cb8
 800d160:	08027cc8 	.word	0x08027cc8
 800d164:	08023cb4 	.word	0x08023cb4
		case 330 :
			strcpy(p->name,"SLIGHTLY LESS BASIC B*TCH");
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d16e:	4aa9      	ldr	r2, [pc, #676]	; (800d414 <problem_fetch+0xba84>)
 800d170:	461d      	mov	r5, r3
 800d172:	4614      	mov	r4, r2
 800d174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d176:	6028      	str	r0, [r5, #0]
 800d178:	6069      	str	r1, [r5, #4]
 800d17a:	60aa      	str	r2, [r5, #8]
 800d17c:	60eb      	str	r3, [r5, #12]
 800d17e:	cc03      	ldmia	r4!, {r0, r1}
 800d180:	6128      	str	r0, [r5, #16]
 800d182:	6169      	str	r1, [r5, #20]
 800d184:	8823      	ldrh	r3, [r4, #0]
 800d186:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d18e:	4aa2      	ldr	r2, [pc, #648]	; (800d418 <problem_fetch+0xba88>)
 800d190:	6810      	ldr	r0, [r2, #0]
 800d192:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2205      	movs	r2, #5
 800d198:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,I");
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	33a4      	adds	r3, #164	; 0xa4
 800d19e:	499f      	ldr	r1, [pc, #636]	; (800d41c <problem_fetch+0xba8c>)
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	cb03      	ldmia	r3!, {r0, r1}
 800d1a6:	6010      	str	r0, [r2, #0]
 800d1a8:	6051      	str	r1, [r2, #4]
 800d1aa:	881b      	ldrh	r3, [r3, #0]
 800d1ac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	4a9b      	ldr	r2, [pc, #620]	; (800d420 <problem_fetch+0xba90>)
 800d1b4:	461c      	mov	r4, r3
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ba:	6020      	str	r0, [r4, #0]
 800d1bc:	6061      	str	r1, [r4, #4]
 800d1be:	60a2      	str	r2, [r4, #8]
 800d1c0:	881b      	ldrh	r3, [r3, #0]
 800d1c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d1ca:	4996      	ldr	r1, [pc, #600]	; (800d424 <problem_fetch+0xba94>)
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	cb03      	ldmia	r3!, {r0, r1}
 800d1d2:	6010      	str	r0, [r2, #0]
 800d1d4:	6051      	str	r1, [r2, #4]
 800d1d6:	881b      	ldrh	r3, [r3, #0]
 800d1d8:	8113      	strh	r3, [r2, #8]
			break;
 800d1da:	f00f bb09 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 331 :
			strcpy(p->name,"BASIC B*TCH");
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d1e4:	4a90      	ldr	r2, [pc, #576]	; (800d428 <problem_fetch+0xba98>)
 800d1e6:	461c      	mov	r4, r3
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ec:	6020      	str	r0, [r4, #0]
 800d1ee:	6061      	str	r1, [r4, #4]
 800d1f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d1f8:	4a87      	ldr	r2, [pc, #540]	; (800d418 <problem_fetch+0xba88>)
 800d1fa:	6810      	ldr	r0, [r2, #0]
 800d1fc:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2204      	movs	r2, #4
 800d202:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D");
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	33a4      	adds	r3, #164	; 0xa4
 800d208:	4988      	ldr	r1, [pc, #544]	; (800d42c <problem_fetch+0xba9c>)
 800d20a:	461a      	mov	r2, r3
 800d20c:	460b      	mov	r3, r1
 800d20e:	cb03      	ldmia	r3!, {r0, r1}
 800d210:	6010      	str	r0, [r2, #0]
 800d212:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,13,18");
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	3304      	adds	r3, #4
 800d218:	4985      	ldr	r1, [pc, #532]	; (800d430 <problem_fetch+0xbaa0>)
 800d21a:	461a      	mov	r2, r3
 800d21c:	460b      	mov	r3, r1
 800d21e:	cb03      	ldmia	r3!, {r0, r1}
 800d220:	6010      	str	r0, [r2, #0]
 800d222:	6051      	str	r1, [r2, #4]
 800d224:	8819      	ldrh	r1, [r3, #0]
 800d226:	789b      	ldrb	r3, [r3, #2]
 800d228:	8111      	strh	r1, [r2, #8]
 800d22a:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d232:	4980      	ldr	r1, [pc, #512]	; (800d434 <problem_fetch+0xbaa4>)
 800d234:	461a      	mov	r2, r3
 800d236:	460b      	mov	r3, r1
 800d238:	cb03      	ldmia	r3!, {r0, r1}
 800d23a:	6010      	str	r0, [r2, #0]
 800d23c:	6051      	str	r1, [r2, #4]
			break;
 800d23e:	f00f bad7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 332 :
			strcpy(p->name,"ANY GIVEN DAY");
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d248:	4a7b      	ldr	r2, [pc, #492]	; (800d438 <problem_fetch+0xbaa8>)
 800d24a:	461c      	mov	r4, r3
 800d24c:	4613      	mov	r3, r2
 800d24e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d250:	6020      	str	r0, [r4, #0]
 800d252:	6061      	str	r1, [r4, #4]
 800d254:	60a2      	str	r2, [r4, #8]
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d260:	4a76      	ldr	r2, [pc, #472]	; (800d43c <problem_fetch+0xbaac>)
 800d262:	6810      	ldr	r0, [r2, #0]
 800d264:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2206      	movs	r2, #6
 800d26a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	33a4      	adds	r3, #164	; 0xa4
 800d270:	4a73      	ldr	r2, [pc, #460]	; (800d440 <problem_fetch+0xbab0>)
 800d272:	461c      	mov	r4, r3
 800d274:	4613      	mov	r3, r2
 800d276:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d278:	6020      	str	r0, [r4, #0]
 800d27a:	6061      	str	r1, [r4, #4]
 800d27c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	3304      	adds	r3, #4
 800d282:	4a70      	ldr	r2, [pc, #448]	; (800d444 <problem_fetch+0xbab4>)
 800d284:	461c      	mov	r4, r3
 800d286:	4615      	mov	r5, r2
 800d288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d28a:	6020      	str	r0, [r4, #0]
 800d28c:	6061      	str	r1, [r4, #4]
 800d28e:	60a2      	str	r2, [r4, #8]
 800d290:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d298:	4a6b      	ldr	r2, [pc, #428]	; (800d448 <problem_fetch+0xbab8>)
 800d29a:	461c      	mov	r4, r3
 800d29c:	4613      	mov	r3, r2
 800d29e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d2a0:	6020      	str	r0, [r4, #0]
 800d2a2:	6061      	str	r1, [r4, #4]
 800d2a4:	60a2      	str	r2, [r4, #8]
			break;
 800d2a6:	f00f baa3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 333 :
			strcpy(p->name,"GS");
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d2b0:	4a66      	ldr	r2, [pc, #408]	; (800d44c <problem_fetch+0xbabc>)
 800d2b2:	8811      	ldrh	r1, [r2, #0]
 800d2b4:	7892      	ldrb	r2, [r2, #2]
 800d2b6:	8019      	strh	r1, [r3, #0]
 800d2b8:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d2c0:	4a63      	ldr	r2, [pc, #396]	; (800d450 <problem_fetch+0xbac0>)
 800d2c2:	8811      	ldrh	r1, [r2, #0]
 800d2c4:	7892      	ldrb	r2, [r2, #2]
 800d2c6:	8019      	strh	r1, [r3, #0]
 800d2c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	220a      	movs	r2, #10
 800d2ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,H,F,C,E,A,E,A");
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	33a4      	adds	r3, #164	; 0xa4
 800d2d4:	4a5f      	ldr	r2, [pc, #380]	; (800d454 <problem_fetch+0xbac4>)
 800d2d6:	461d      	mov	r5, r3
 800d2d8:	4614      	mov	r4, r2
 800d2da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2dc:	6028      	str	r0, [r5, #0]
 800d2de:	6069      	str	r1, [r5, #4]
 800d2e0:	60aa      	str	r2, [r5, #8]
 800d2e2:	60eb      	str	r3, [r5, #12]
 800d2e4:	6820      	ldr	r0, [r4, #0]
 800d2e6:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,11,13,14,14,16,18");
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4a5a      	ldr	r2, [pc, #360]	; (800d458 <problem_fetch+0xbac8>)
 800d2ee:	461d      	mov	r5, r3
 800d2f0:	4614      	mov	r4, r2
 800d2f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2f4:	6028      	str	r0, [r5, #0]
 800d2f6:	6069      	str	r1, [r5, #4]
 800d2f8:	60aa      	str	r2, [r5, #8]
 800d2fa:	60eb      	str	r3, [r5, #12]
 800d2fc:	cc03      	ldmia	r4!, {r0, r1}
 800d2fe:	6128      	str	r0, [r5, #16]
 800d300:	6169      	str	r1, [r5, #20]
 800d302:	8823      	ldrh	r3, [r4, #0]
 800d304:	78a2      	ldrb	r2, [r4, #2]
 800d306:	832b      	strh	r3, [r5, #24]
 800d308:	4613      	mov	r3, r2
 800d30a:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d312:	4a52      	ldr	r2, [pc, #328]	; (800d45c <problem_fetch+0xbacc>)
 800d314:	461d      	mov	r5, r3
 800d316:	4614      	mov	r4, r2
 800d318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d31a:	6028      	str	r0, [r5, #0]
 800d31c:	6069      	str	r1, [r5, #4]
 800d31e:	60aa      	str	r2, [r5, #8]
 800d320:	60eb      	str	r3, [r5, #12]
 800d322:	6820      	ldr	r0, [r4, #0]
 800d324:	6128      	str	r0, [r5, #16]
			break;
 800d326:	f00f ba63 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 334 :
			strcpy(p->name,"VALGULIOUS");
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d330:	494b      	ldr	r1, [pc, #300]	; (800d460 <problem_fetch+0xbad0>)
 800d332:	461a      	mov	r2, r3
 800d334:	460b      	mov	r3, r1
 800d336:	cb03      	ldmia	r3!, {r0, r1}
 800d338:	6010      	str	r0, [r2, #0]
 800d33a:	6051      	str	r1, [r2, #4]
 800d33c:	8819      	ldrh	r1, [r3, #0]
 800d33e:	789b      	ldrb	r3, [r3, #2]
 800d340:	8111      	strh	r1, [r2, #8]
 800d342:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d34a:	4a33      	ldr	r2, [pc, #204]	; (800d418 <problem_fetch+0xba88>)
 800d34c:	6810      	ldr	r0, [r2, #0]
 800d34e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2207      	movs	r2, #7
 800d354:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,J,J,I,I");
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	33a4      	adds	r3, #164	; 0xa4
 800d35a:	4a42      	ldr	r2, [pc, #264]	; (800d464 <problem_fetch+0xbad4>)
 800d35c:	461c      	mov	r4, r3
 800d35e:	4613      	mov	r3, r2
 800d360:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d362:	6020      	str	r0, [r4, #0]
 800d364:	6061      	str	r1, [r4, #4]
 800d366:	60a2      	str	r2, [r4, #8]
 800d368:	881b      	ldrh	r3, [r3, #0]
 800d36a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,5,12,15,18");
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	3304      	adds	r3, #4
 800d370:	4a3d      	ldr	r2, [pc, #244]	; (800d468 <problem_fetch+0xbad8>)
 800d372:	461d      	mov	r5, r3
 800d374:	4614      	mov	r4, r2
 800d376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d378:	6028      	str	r0, [r5, #0]
 800d37a:	6069      	str	r1, [r5, #4]
 800d37c:	60aa      	str	r2, [r5, #8]
 800d37e:	60eb      	str	r3, [r5, #12]
 800d380:	7823      	ldrb	r3, [r4, #0]
 800d382:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d38a:	4a38      	ldr	r2, [pc, #224]	; (800d46c <problem_fetch+0xbadc>)
 800d38c:	461c      	mov	r4, r3
 800d38e:	4613      	mov	r3, r2
 800d390:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	6061      	str	r1, [r4, #4]
 800d396:	60a2      	str	r2, [r4, #8]
 800d398:	881b      	ldrh	r3, [r3, #0]
 800d39a:	81a3      	strh	r3, [r4, #12]
			break;
 800d39c:	f00f ba28 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 335 :
			strcpy(p->name,"POWER HUNGRY");
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d3a6:	4a32      	ldr	r2, [pc, #200]	; (800d470 <problem_fetch+0xbae0>)
 800d3a8:	461c      	mov	r4, r3
 800d3aa:	4613      	mov	r3, r2
 800d3ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3ae:	6020      	str	r0, [r4, #0]
 800d3b0:	6061      	str	r1, [r4, #4]
 800d3b2:	60a2      	str	r2, [r4, #8]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d3be:	4a2d      	ldr	r2, [pc, #180]	; (800d474 <problem_fetch+0xbae4>)
 800d3c0:	8811      	ldrh	r1, [r2, #0]
 800d3c2:	7892      	ldrb	r2, [r2, #2]
 800d3c4:	8019      	strh	r1, [r3, #0]
 800d3c6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2206      	movs	r2, #6
 800d3cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,K,D,I,D");
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	33a4      	adds	r3, #164	; 0xa4
 800d3d2:	4a29      	ldr	r2, [pc, #164]	; (800d478 <problem_fetch+0xbae8>)
 800d3d4:	461c      	mov	r4, r3
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3da:	6020      	str	r0, [r4, #0]
 800d3dc:	6061      	str	r1, [r4, #4]
 800d3de:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,11,14,18");
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3304      	adds	r3, #4
 800d3e4:	4a25      	ldr	r2, [pc, #148]	; (800d47c <problem_fetch+0xbaec>)
 800d3e6:	461c      	mov	r4, r3
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3ec:	6020      	str	r0, [r4, #0]
 800d3ee:	6061      	str	r1, [r4, #4]
 800d3f0:	60a2      	str	r2, [r4, #8]
 800d3f2:	881a      	ldrh	r2, [r3, #0]
 800d3f4:	789b      	ldrb	r3, [r3, #2]
 800d3f6:	81a2      	strh	r2, [r4, #12]
 800d3f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d400:	4a1f      	ldr	r2, [pc, #124]	; (800d480 <problem_fetch+0xbaf0>)
 800d402:	461c      	mov	r4, r3
 800d404:	4613      	mov	r3, r2
 800d406:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d408:	6020      	str	r0, [r4, #0]
 800d40a:	6061      	str	r1, [r4, #4]
 800d40c:	60a2      	str	r2, [r4, #8]
			break;
 800d40e:	f00f b9ef 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800d412:	bf00      	nop
 800d414:	08027cdc 	.word	0x08027cdc
 800d418:	08023d30 	.word	0x08023d30
 800d41c:	08027cf8 	.word	0x08027cf8
 800d420:	08027d04 	.word	0x08027d04
 800d424:	0802405c 	.word	0x0802405c
 800d428:	08027d14 	.word	0x08027d14
 800d42c:	08027d20 	.word	0x08027d20
 800d430:	08027d28 	.word	0x08027d28
 800d434:	08023ce4 	.word	0x08023ce4
 800d438:	08027d34 	.word	0x08027d34
 800d43c:	08023b90 	.word	0x08023b90
 800d440:	0802659c 	.word	0x0802659c
 800d444:	08027d44 	.word	0x08027d44
 800d448:	08023f2c 	.word	0x08023f2c
 800d44c:	08027d54 	.word	0x08027d54
 800d450:	08023c5c 	.word	0x08023c5c
 800d454:	08027d58 	.word	0x08027d58
 800d458:	08027d6c 	.word	0x08027d6c
 800d45c:	08024438 	.word	0x08024438
 800d460:	08027d88 	.word	0x08027d88
 800d464:	08027d94 	.word	0x08027d94
 800d468:	08027da4 	.word	0x08027da4
 800d46c:	08023d18 	.word	0x08023d18
 800d470:	08027db8 	.word	0x08027db8
 800d474:	080243c4 	.word	0x080243c4
 800d478:	08027dc8 	.word	0x08027dc8
 800d47c:	08027dd4 	.word	0x08027dd4
 800d480:	08023b70 	.word	0x08023b70
		case 336 :
			strcpy(p->name,"INTERESTING");
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d48a:	4aac      	ldr	r2, [pc, #688]	; (800d73c <problem_fetch+0xbdac>)
 800d48c:	461c      	mov	r4, r3
 800d48e:	4613      	mov	r3, r2
 800d490:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d492:	6020      	str	r0, [r4, #0]
 800d494:	6061      	str	r1, [r4, #4]
 800d496:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d49e:	4aa8      	ldr	r2, [pc, #672]	; (800d740 <problem_fetch+0xbdb0>)
 800d4a0:	6810      	ldr	r0, [r2, #0]
 800d4a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2207      	movs	r2, #7
 800d4a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,H,E,I");
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	33a4      	adds	r3, #164	; 0xa4
 800d4ae:	4aa5      	ldr	r2, [pc, #660]	; (800d744 <problem_fetch+0xbdb4>)
 800d4b0:	461c      	mov	r4, r3
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4b6:	6020      	str	r0, [r4, #0]
 800d4b8:	6061      	str	r1, [r4, #4]
 800d4ba:	60a2      	str	r2, [r4, #8]
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,16,18");
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	3304      	adds	r3, #4
 800d4c4:	4aa0      	ldr	r2, [pc, #640]	; (800d748 <problem_fetch+0xbdb8>)
 800d4c6:	461d      	mov	r5, r3
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d4cc:	6028      	str	r0, [r5, #0]
 800d4ce:	6069      	str	r1, [r5, #4]
 800d4d0:	60aa      	str	r2, [r5, #8]
 800d4d2:	60eb      	str	r3, [r5, #12]
 800d4d4:	8823      	ldrh	r3, [r4, #0]
 800d4d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d4de:	4a9b      	ldr	r2, [pc, #620]	; (800d74c <problem_fetch+0xbdbc>)
 800d4e0:	461c      	mov	r4, r3
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d4e6:	6020      	str	r0, [r4, #0]
 800d4e8:	6061      	str	r1, [r4, #4]
 800d4ea:	60a2      	str	r2, [r4, #8]
 800d4ec:	881b      	ldrh	r3, [r3, #0]
 800d4ee:	81a3      	strh	r3, [r4, #12]
			break;
 800d4f0:	f00f b97e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 337 :
			strcpy(p->name,"BLACK WINGS");
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d4fa:	4a95      	ldr	r2, [pc, #596]	; (800d750 <problem_fetch+0xbdc0>)
 800d4fc:	461c      	mov	r4, r3
 800d4fe:	4613      	mov	r3, r2
 800d500:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d502:	6020      	str	r0, [r4, #0]
 800d504:	6061      	str	r1, [r4, #4]
 800d506:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d50e:	4a91      	ldr	r2, [pc, #580]	; (800d754 <problem_fetch+0xbdc4>)
 800d510:	6810      	ldr	r0, [r2, #0]
 800d512:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2209      	movs	r2, #9
 800d518:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,C,H,C,E,H,I");
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	33a4      	adds	r3, #164	; 0xa4
 800d51e:	4a8e      	ldr	r2, [pc, #568]	; (800d758 <problem_fetch+0xbdc8>)
 800d520:	461d      	mov	r5, r3
 800d522:	4614      	mov	r4, r2
 800d524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d526:	6028      	str	r0, [r5, #0]
 800d528:	6069      	str	r1, [r5, #4]
 800d52a:	60aa      	str	r2, [r5, #8]
 800d52c:	60eb      	str	r3, [r5, #12]
 800d52e:	8823      	ldrh	r3, [r4, #0]
 800d530:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,15,8,10,13,16,5,18");
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	3304      	adds	r3, #4
 800d536:	4a89      	ldr	r2, [pc, #548]	; (800d75c <problem_fetch+0xbdcc>)
 800d538:	461c      	mov	r4, r3
 800d53a:	4615      	mov	r5, r2
 800d53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d53e:	6020      	str	r0, [r4, #0]
 800d540:	6061      	str	r1, [r4, #4]
 800d542:	60a2      	str	r2, [r4, #8]
 800d544:	60e3      	str	r3, [r4, #12]
 800d546:	6828      	ldr	r0, [r5, #0]
 800d548:	6120      	str	r0, [r4, #16]
 800d54a:	88ab      	ldrh	r3, [r5, #4]
 800d54c:	79aa      	ldrb	r2, [r5, #6]
 800d54e:	82a3      	strh	r3, [r4, #20]
 800d550:	4613      	mov	r3, r2
 800d552:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d55a:	4a81      	ldr	r2, [pc, #516]	; (800d760 <problem_fetch+0xbdd0>)
 800d55c:	461d      	mov	r5, r3
 800d55e:	4614      	mov	r4, r2
 800d560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d562:	6028      	str	r0, [r5, #0]
 800d564:	6069      	str	r1, [r5, #4]
 800d566:	60aa      	str	r2, [r5, #8]
 800d568:	60eb      	str	r3, [r5, #12]
 800d56a:	8823      	ldrh	r3, [r4, #0]
 800d56c:	822b      	strh	r3, [r5, #16]
			break;
 800d56e:	f00f b93f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 338 :
			strcpy(p->name,"TVÅ");
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d578:	4a7a      	ldr	r2, [pc, #488]	; (800d764 <problem_fetch+0xbdd4>)
 800d57a:	6810      	ldr	r0, [r2, #0]
 800d57c:	6018      	str	r0, [r3, #0]
 800d57e:	7912      	ldrb	r2, [r2, #4]
 800d580:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d588:	4a72      	ldr	r2, [pc, #456]	; (800d754 <problem_fetch+0xbdc4>)
 800d58a:	6810      	ldr	r0, [r2, #0]
 800d58c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2208      	movs	r2, #8
 800d592:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,E,E,G,D,D");
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	33a4      	adds	r3, #164	; 0xa4
 800d598:	4a73      	ldr	r2, [pc, #460]	; (800d768 <problem_fetch+0xbdd8>)
 800d59a:	461c      	mov	r4, r3
 800d59c:	4615      	mov	r5, r2
 800d59e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5a0:	6020      	str	r0, [r4, #0]
 800d5a2:	6061      	str	r1, [r4, #4]
 800d5a4:	60a2      	str	r2, [r4, #8]
 800d5a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,8,8,12,14,15,18");
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3304      	adds	r3, #4
 800d5ac:	4a6f      	ldr	r2, [pc, #444]	; (800d76c <problem_fetch+0xbddc>)
 800d5ae:	461d      	mov	r5, r3
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5b4:	6028      	str	r0, [r5, #0]
 800d5b6:	6069      	str	r1, [r5, #4]
 800d5b8:	60aa      	str	r2, [r5, #8]
 800d5ba:	60eb      	str	r3, [r5, #12]
 800d5bc:	6820      	ldr	r0, [r4, #0]
 800d5be:	6128      	str	r0, [r5, #16]
 800d5c0:	7923      	ldrb	r3, [r4, #4]
 800d5c2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d5ca:	4a69      	ldr	r2, [pc, #420]	; (800d770 <problem_fetch+0xbde0>)
 800d5cc:	461c      	mov	r4, r3
 800d5ce:	4615      	mov	r5, r2
 800d5d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d5d2:	6020      	str	r0, [r4, #0]
 800d5d4:	6061      	str	r1, [r4, #4]
 800d5d6:	60a2      	str	r2, [r4, #8]
 800d5d8:	60e3      	str	r3, [r4, #12]
			break;
 800d5da:	f00f b909 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 339 :
			strcpy(p->name,"HIGH STEP IF YOU CAN");
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d5e4:	4a63      	ldr	r2, [pc, #396]	; (800d774 <problem_fetch+0xbde4>)
 800d5e6:	461d      	mov	r5, r3
 800d5e8:	4614      	mov	r4, r2
 800d5ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5ec:	6028      	str	r0, [r5, #0]
 800d5ee:	6069      	str	r1, [r5, #4]
 800d5f0:	60aa      	str	r2, [r5, #8]
 800d5f2:	60eb      	str	r3, [r5, #12]
 800d5f4:	6820      	ldr	r0, [r4, #0]
 800d5f6:	6128      	str	r0, [r5, #16]
 800d5f8:	7923      	ldrb	r3, [r4, #4]
 800d5fa:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d602:	4a54      	ldr	r2, [pc, #336]	; (800d754 <problem_fetch+0xbdc4>)
 800d604:	6810      	ldr	r0, [r2, #0]
 800d606:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2208      	movs	r2, #8
 800d60c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,B,E,E,B,E,D");
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	33a4      	adds	r3, #164	; 0xa4
 800d612:	4a59      	ldr	r2, [pc, #356]	; (800d778 <problem_fetch+0xbde8>)
 800d614:	461c      	mov	r4, r3
 800d616:	4615      	mov	r5, r2
 800d618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d61a:	6020      	str	r0, [r4, #0]
 800d61c:	6061      	str	r1, [r4, #4]
 800d61e:	60a2      	str	r2, [r4, #8]
 800d620:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,10,8,12,15,6,18");
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	3304      	adds	r3, #4
 800d626:	4a55      	ldr	r2, [pc, #340]	; (800d77c <problem_fetch+0xbdec>)
 800d628:	461d      	mov	r5, r3
 800d62a:	4614      	mov	r4, r2
 800d62c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d62e:	6028      	str	r0, [r5, #0]
 800d630:	6069      	str	r1, [r5, #4]
 800d632:	60aa      	str	r2, [r5, #8]
 800d634:	60eb      	str	r3, [r5, #12]
 800d636:	6820      	ldr	r0, [r4, #0]
 800d638:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d640:	4a4f      	ldr	r2, [pc, #316]	; (800d780 <problem_fetch+0xbdf0>)
 800d642:	461c      	mov	r4, r3
 800d644:	4615      	mov	r5, r2
 800d646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d648:	6020      	str	r0, [r4, #0]
 800d64a:	6061      	str	r1, [r4, #4]
 800d64c:	60a2      	str	r2, [r4, #8]
 800d64e:	60e3      	str	r3, [r4, #12]
			break;
 800d650:	f00f b8ce 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 340 :
			strcpy(p->name,"APPLE PIE");
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d65a:	494a      	ldr	r1, [pc, #296]	; (800d784 <problem_fetch+0xbdf4>)
 800d65c:	461a      	mov	r2, r3
 800d65e:	460b      	mov	r3, r1
 800d660:	cb03      	ldmia	r3!, {r0, r1}
 800d662:	6010      	str	r0, [r2, #0]
 800d664:	6051      	str	r1, [r2, #4]
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d670:	4a45      	ldr	r2, [pc, #276]	; (800d788 <problem_fetch+0xbdf8>)
 800d672:	8811      	ldrh	r1, [r2, #0]
 800d674:	7892      	ldrb	r2, [r2, #2]
 800d676:	8019      	strh	r1, [r3, #0]
 800d678:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2206      	movs	r2, #6
 800d67e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,F,J,I");
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	33a4      	adds	r3, #164	; 0xa4
 800d684:	4a41      	ldr	r2, [pc, #260]	; (800d78c <problem_fetch+0xbdfc>)
 800d686:	461c      	mov	r4, r3
 800d688:	4613      	mov	r3, r2
 800d68a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d68c:	6020      	str	r0, [r4, #0]
 800d68e:	6061      	str	r1, [r4, #4]
 800d690:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	3304      	adds	r3, #4
 800d696:	4a3e      	ldr	r2, [pc, #248]	; (800d790 <problem_fetch+0xbe00>)
 800d698:	461c      	mov	r4, r3
 800d69a:	4615      	mov	r5, r2
 800d69c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d69e:	6020      	str	r0, [r4, #0]
 800d6a0:	6061      	str	r1, [r4, #4]
 800d6a2:	60a2      	str	r2, [r4, #8]
 800d6a4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d6ac:	4a39      	ldr	r2, [pc, #228]	; (800d794 <problem_fetch+0xbe04>)
 800d6ae:	461c      	mov	r4, r3
 800d6b0:	4613      	mov	r3, r2
 800d6b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6b4:	6020      	str	r0, [r4, #0]
 800d6b6:	6061      	str	r1, [r4, #4]
 800d6b8:	60a2      	str	r2, [r4, #8]
			break;
 800d6ba:	f00f b899 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 341 :
			strcpy(p->name,"NOT A FIRSTIMER");
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d6c4:	4a34      	ldr	r2, [pc, #208]	; (800d798 <problem_fetch+0xbe08>)
 800d6c6:	461c      	mov	r4, r3
 800d6c8:	4615      	mov	r5, r2
 800d6ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d6cc:	6020      	str	r0, [r4, #0]
 800d6ce:	6061      	str	r1, [r4, #4]
 800d6d0:	60a2      	str	r2, [r4, #8]
 800d6d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d6da:	4a1e      	ldr	r2, [pc, #120]	; (800d754 <problem_fetch+0xbdc4>)
 800d6dc:	6810      	ldr	r0, [r2, #0]
 800d6de:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	220a      	movs	r2, #10
 800d6e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,C,I,G,G,J,I");
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	33a4      	adds	r3, #164	; 0xa4
 800d6ea:	4a2c      	ldr	r2, [pc, #176]	; (800d79c <problem_fetch+0xbe0c>)
 800d6ec:	461d      	mov	r5, r3
 800d6ee:	4614      	mov	r4, r2
 800d6f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6f2:	6028      	str	r0, [r5, #0]
 800d6f4:	6069      	str	r1, [r5, #4]
 800d6f6:	60aa      	str	r2, [r5, #8]
 800d6f8:	60eb      	str	r3, [r5, #12]
 800d6fa:	6820      	ldr	r0, [r4, #0]
 800d6fc:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,10,8,13,14,15,17,7,18");
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3304      	adds	r3, #4
 800d702:	4a27      	ldr	r2, [pc, #156]	; (800d7a0 <problem_fetch+0xbe10>)
 800d704:	461d      	mov	r5, r3
 800d706:	4614      	mov	r4, r2
 800d708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d70a:	6028      	str	r0, [r5, #0]
 800d70c:	6069      	str	r1, [r5, #4]
 800d70e:	60aa      	str	r2, [r5, #8]
 800d710:	60eb      	str	r3, [r5, #12]
 800d712:	cc03      	ldmia	r4!, {r0, r1}
 800d714:	6128      	str	r0, [r5, #16]
 800d716:	6169      	str	r1, [r5, #20]
 800d718:	8823      	ldrh	r3, [r4, #0]
 800d71a:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d722:	4a20      	ldr	r2, [pc, #128]	; (800d7a4 <problem_fetch+0xbe14>)
 800d724:	461d      	mov	r5, r3
 800d726:	4614      	mov	r4, r2
 800d728:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d72a:	6028      	str	r0, [r5, #0]
 800d72c:	6069      	str	r1, [r5, #4]
 800d72e:	60aa      	str	r2, [r5, #8]
 800d730:	60eb      	str	r3, [r5, #12]
 800d732:	6820      	ldr	r0, [r4, #0]
 800d734:	6128      	str	r0, [r5, #16]
			break;
 800d736:	f00f b85b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800d73a:	bf00      	nop
 800d73c:	08027de4 	.word	0x08027de4
 800d740:	08023c28 	.word	0x08023c28
 800d744:	08027df0 	.word	0x08027df0
 800d748:	08027e00 	.word	0x08027e00
 800d74c:	08023c08 	.word	0x08023c08
 800d750:	08027e14 	.word	0x08027e14
 800d754:	08023b90 	.word	0x08023b90
 800d758:	08027e20 	.word	0x08027e20
 800d75c:	08027e34 	.word	0x08027e34
 800d760:	08024b74 	.word	0x08024b74
 800d764:	08027e4c 	.word	0x08027e4c
 800d768:	08027e54 	.word	0x08027e54
 800d76c:	08027e64 	.word	0x08027e64
 800d770:	08023da0 	.word	0x08023da0
 800d774:	08027e7c 	.word	0x08027e7c
 800d778:	08027e94 	.word	0x08027e94
 800d77c:	08027ea4 	.word	0x08027ea4
 800d780:	08023cb4 	.word	0x08023cb4
 800d784:	08027eb8 	.word	0x08027eb8
 800d788:	08023b50 	.word	0x08023b50
 800d78c:	08027ec4 	.word	0x08027ec4
 800d790:	08026264 	.word	0x08026264
 800d794:	08023f2c 	.word	0x08023f2c
 800d798:	08027ed0 	.word	0x08027ed0
 800d79c:	08027ee0 	.word	0x08027ee0
 800d7a0:	08027ef4 	.word	0x08027ef4
 800d7a4:	08024438 	.word	0x08024438
		case 342 :
			strcpy(p->name,"PICTURES ON MY PHONE");
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d7ae:	4aa9      	ldr	r2, [pc, #676]	; (800da54 <problem_fetch+0xc0c4>)
 800d7b0:	461d      	mov	r5, r3
 800d7b2:	4614      	mov	r4, r2
 800d7b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7b6:	6028      	str	r0, [r5, #0]
 800d7b8:	6069      	str	r1, [r5, #4]
 800d7ba:	60aa      	str	r2, [r5, #8]
 800d7bc:	60eb      	str	r3, [r5, #12]
 800d7be:	6820      	ldr	r0, [r4, #0]
 800d7c0:	6128      	str	r0, [r5, #16]
 800d7c2:	7923      	ldrb	r3, [r4, #4]
 800d7c4:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d7cc:	4aa2      	ldr	r2, [pc, #648]	; (800da58 <problem_fetch+0xc0c8>)
 800d7ce:	6810      	ldr	r0, [r2, #0]
 800d7d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2208      	movs	r2, #8
 800d7d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,C,I,G,I");
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	33a4      	adds	r3, #164	; 0xa4
 800d7dc:	4a9f      	ldr	r2, [pc, #636]	; (800da5c <problem_fetch+0xc0cc>)
 800d7de:	461c      	mov	r4, r3
 800d7e0:	4615      	mov	r5, r2
 800d7e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7e4:	6020      	str	r0, [r4, #0]
 800d7e6:	6061      	str	r1, [r4, #4]
 800d7e8:	60a2      	str	r2, [r4, #8]
 800d7ea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,14,17,18");
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	3304      	adds	r3, #4
 800d7f0:	4a9b      	ldr	r2, [pc, #620]	; (800da60 <problem_fetch+0xc0d0>)
 800d7f2:	461d      	mov	r5, r3
 800d7f4:	4614      	mov	r4, r2
 800d7f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7f8:	6028      	str	r0, [r5, #0]
 800d7fa:	6069      	str	r1, [r5, #4]
 800d7fc:	60aa      	str	r2, [r5, #8]
 800d7fe:	60eb      	str	r3, [r5, #12]
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	6128      	str	r0, [r5, #16]
 800d804:	7923      	ldrb	r3, [r4, #4]
 800d806:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d80e:	4a95      	ldr	r2, [pc, #596]	; (800da64 <problem_fetch+0xc0d4>)
 800d810:	461c      	mov	r4, r3
 800d812:	4615      	mov	r5, r2
 800d814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d816:	6020      	str	r0, [r4, #0]
 800d818:	6061      	str	r1, [r4, #4]
 800d81a:	60a2      	str	r2, [r4, #8]
 800d81c:	60e3      	str	r3, [r4, #12]
			break;
 800d81e:	f00e bfe7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 343 :
			strcpy(p->name,"ONE CRIMP");
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d828:	498f      	ldr	r1, [pc, #572]	; (800da68 <problem_fetch+0xc0d8>)
 800d82a:	461a      	mov	r2, r3
 800d82c:	460b      	mov	r3, r1
 800d82e:	cb03      	ldmia	r3!, {r0, r1}
 800d830:	6010      	str	r0, [r2, #0]
 800d832:	6051      	str	r1, [r2, #4]
 800d834:	881b      	ldrh	r3, [r3, #0]
 800d836:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d83e:	4a8b      	ldr	r2, [pc, #556]	; (800da6c <problem_fetch+0xc0dc>)
 800d840:	6810      	ldr	r0, [r2, #0]
 800d842:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2207      	movs	r2, #7
 800d848:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,H,G,D,D");
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	33a4      	adds	r3, #164	; 0xa4
 800d84e:	4a88      	ldr	r2, [pc, #544]	; (800da70 <problem_fetch+0xc0e0>)
 800d850:	461c      	mov	r4, r3
 800d852:	4613      	mov	r3, r2
 800d854:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d856:	6020      	str	r0, [r4, #0]
 800d858:	6061      	str	r1, [r4, #4]
 800d85a:	60a2      	str	r2, [r4, #8]
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,15,15,18");
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	3304      	adds	r3, #4
 800d864:	4a83      	ldr	r2, [pc, #524]	; (800da74 <problem_fetch+0xc0e4>)
 800d866:	461d      	mov	r5, r3
 800d868:	4614      	mov	r4, r2
 800d86a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d86c:	6028      	str	r0, [r5, #0]
 800d86e:	6069      	str	r1, [r5, #4]
 800d870:	60aa      	str	r2, [r5, #8]
 800d872:	60eb      	str	r3, [r5, #12]
 800d874:	8823      	ldrh	r3, [r4, #0]
 800d876:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d87e:	4a7e      	ldr	r2, [pc, #504]	; (800da78 <problem_fetch+0xc0e8>)
 800d880:	461c      	mov	r4, r3
 800d882:	4613      	mov	r3, r2
 800d884:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d886:	6020      	str	r0, [r4, #0]
 800d888:	6061      	str	r1, [r4, #4]
 800d88a:	60a2      	str	r2, [r4, #8]
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	81a3      	strh	r3, [r4, #12]
			break;
 800d890:	f00e bfae 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 344 :
			strcpy(p->name,"GHASTLY");
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d89a:	4978      	ldr	r1, [pc, #480]	; (800da7c <problem_fetch+0xc0ec>)
 800d89c:	461a      	mov	r2, r3
 800d89e:	460b      	mov	r3, r1
 800d8a0:	cb03      	ldmia	r3!, {r0, r1}
 800d8a2:	6010      	str	r0, [r2, #0]
 800d8a4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d8ac:	4a74      	ldr	r2, [pc, #464]	; (800da80 <problem_fetch+0xc0f0>)
 800d8ae:	8811      	ldrh	r1, [r2, #0]
 800d8b0:	7892      	ldrb	r2, [r2, #2]
 800d8b2:	8019      	strh	r1, [r3, #0]
 800d8b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,J,K,E,G,D");
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	33a4      	adds	r3, #164	; 0xa4
 800d8c0:	4a70      	ldr	r2, [pc, #448]	; (800da84 <problem_fetch+0xc0f4>)
 800d8c2:	461c      	mov	r4, r3
 800d8c4:	4615      	mov	r5, r2
 800d8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8c8:	6020      	str	r0, [r4, #0]
 800d8ca:	6061      	str	r1, [r4, #4]
 800d8cc:	60a2      	str	r2, [r4, #8]
 800d8ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,17,18");
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4a6c      	ldr	r2, [pc, #432]	; (800da88 <problem_fetch+0xc0f8>)
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	4614      	mov	r4, r2
 800d8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8dc:	6028      	str	r0, [r5, #0]
 800d8de:	6069      	str	r1, [r5, #4]
 800d8e0:	60aa      	str	r2, [r5, #8]
 800d8e2:	60eb      	str	r3, [r5, #12]
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	6128      	str	r0, [r5, #16]
 800d8e8:	7923      	ldrb	r3, [r4, #4]
 800d8ea:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d8f2:	4a5c      	ldr	r2, [pc, #368]	; (800da64 <problem_fetch+0xc0d4>)
 800d8f4:	461c      	mov	r4, r3
 800d8f6:	4615      	mov	r5, r2
 800d8f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8fa:	6020      	str	r0, [r4, #0]
 800d8fc:	6061      	str	r1, [r4, #4]
 800d8fe:	60a2      	str	r2, [r4, #8]
 800d900:	60e3      	str	r3, [r4, #12]
			break;
 800d902:	f00e bf75 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 345 :
			strcpy(p->name,"ELECTRIC HEEL");
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d90c:	4a5f      	ldr	r2, [pc, #380]	; (800da8c <problem_fetch+0xc0fc>)
 800d90e:	461c      	mov	r4, r3
 800d910:	4613      	mov	r3, r2
 800d912:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d914:	6020      	str	r0, [r4, #0]
 800d916:	6061      	str	r1, [r4, #4]
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d924:	4a56      	ldr	r2, [pc, #344]	; (800da80 <problem_fetch+0xc0f0>)
 800d926:	8811      	ldrh	r1, [r2, #0]
 800d928:	7892      	ldrb	r2, [r2, #2]
 800d92a:	8019      	strh	r1, [r3, #0]
 800d92c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2206      	movs	r2, #6
 800d932:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,E,C,D");
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	33a4      	adds	r3, #164	; 0xa4
 800d938:	4a55      	ldr	r2, [pc, #340]	; (800da90 <problem_fetch+0xc100>)
 800d93a:	461c      	mov	r4, r3
 800d93c:	4613      	mov	r3, r2
 800d93e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d940:	6020      	str	r0, [r4, #0]
 800d942:	6061      	str	r1, [r4, #4]
 800d944:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3304      	adds	r3, #4
 800d94a:	4a52      	ldr	r2, [pc, #328]	; (800da94 <problem_fetch+0xc104>)
 800d94c:	461c      	mov	r4, r3
 800d94e:	4613      	mov	r3, r2
 800d950:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d952:	6020      	str	r0, [r4, #0]
 800d954:	6061      	str	r1, [r4, #4]
 800d956:	60a2      	str	r2, [r4, #8]
 800d958:	881a      	ldrh	r2, [r3, #0]
 800d95a:	789b      	ldrb	r3, [r3, #2]
 800d95c:	81a2      	strh	r2, [r4, #12]
 800d95e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d966:	4a4c      	ldr	r2, [pc, #304]	; (800da98 <problem_fetch+0xc108>)
 800d968:	461c      	mov	r4, r3
 800d96a:	4613      	mov	r3, r2
 800d96c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d96e:	6020      	str	r0, [r4, #0]
 800d970:	6061      	str	r1, [r4, #4]
 800d972:	60a2      	str	r2, [r4, #8]
			break;
 800d974:	f00e bf3c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 346 :
			strcpy(p->name,"WIND BENEATH MY WINGS");
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d97e:	4a47      	ldr	r2, [pc, #284]	; (800da9c <problem_fetch+0xc10c>)
 800d980:	461d      	mov	r5, r3
 800d982:	4614      	mov	r4, r2
 800d984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d986:	6028      	str	r0, [r5, #0]
 800d988:	6069      	str	r1, [r5, #4]
 800d98a:	60aa      	str	r2, [r5, #8]
 800d98c:	60eb      	str	r3, [r5, #12]
 800d98e:	6820      	ldr	r0, [r4, #0]
 800d990:	6128      	str	r0, [r5, #16]
 800d992:	88a3      	ldrh	r3, [r4, #4]
 800d994:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d99c:	4a40      	ldr	r2, [pc, #256]	; (800daa0 <problem_fetch+0xc110>)
 800d99e:	8811      	ldrh	r1, [r2, #0]
 800d9a0:	7892      	ldrb	r2, [r2, #2]
 800d9a2:	8019      	strh	r1, [r3, #0]
 800d9a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2204      	movs	r2, #4
 800d9aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D");
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	33a4      	adds	r3, #164	; 0xa4
 800d9b0:	493c      	ldr	r1, [pc, #240]	; (800daa4 <problem_fetch+0xc114>)
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	cb03      	ldmia	r3!, {r0, r1}
 800d9b8:	6010      	str	r0, [r2, #0]
 800d9ba:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,9,14,18");
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	3304      	adds	r3, #4
 800d9c0:	4939      	ldr	r1, [pc, #228]	; (800daa8 <problem_fetch+0xc118>)
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	cb03      	ldmia	r3!, {r0, r1}
 800d9c8:	6010      	str	r0, [r2, #0]
 800d9ca:	6051      	str	r1, [r2, #4]
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d9d6:	4935      	ldr	r1, [pc, #212]	; (800daac <problem_fetch+0xc11c>)
 800d9d8:	461a      	mov	r2, r3
 800d9da:	460b      	mov	r3, r1
 800d9dc:	cb03      	ldmia	r3!, {r0, r1}
 800d9de:	6010      	str	r0, [r2, #0]
 800d9e0:	6051      	str	r1, [r2, #4]
			break;
 800d9e2:	f00e bf05 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 347 :
			strcpy(p->name,"TAKEOFF");
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d9ec:	4930      	ldr	r1, [pc, #192]	; (800dab0 <problem_fetch+0xc120>)
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	cb03      	ldmia	r3!, {r0, r1}
 800d9f4:	6010      	str	r0, [r2, #0]
 800d9f6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d9fe:	4a20      	ldr	r2, [pc, #128]	; (800da80 <problem_fetch+0xc0f0>)
 800da00:	8811      	ldrh	r1, [r2, #0]
 800da02:	7892      	ldrb	r2, [r2, #2]
 800da04:	8019      	strh	r1, [r3, #0]
 800da06:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2205      	movs	r2, #5
 800da0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,I");
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	33a4      	adds	r3, #164	; 0xa4
 800da12:	4928      	ldr	r1, [pc, #160]	; (800dab4 <problem_fetch+0xc124>)
 800da14:	461a      	mov	r2, r3
 800da16:	460b      	mov	r3, r1
 800da18:	cb03      	ldmia	r3!, {r0, r1}
 800da1a:	6010      	str	r0, [r2, #0]
 800da1c:	6051      	str	r1, [r2, #4]
 800da1e:	881b      	ldrh	r3, [r3, #0]
 800da20:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,10,14,18");
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	3304      	adds	r3, #4
 800da26:	4a24      	ldr	r2, [pc, #144]	; (800dab8 <problem_fetch+0xc128>)
 800da28:	461c      	mov	r4, r3
 800da2a:	4613      	mov	r3, r2
 800da2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da2e:	6020      	str	r0, [r4, #0]
 800da30:	6061      	str	r1, [r4, #4]
 800da32:	60a2      	str	r2, [r4, #8]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800da3e:	491f      	ldr	r1, [pc, #124]	; (800dabc <problem_fetch+0xc12c>)
 800da40:	461a      	mov	r2, r3
 800da42:	460b      	mov	r3, r1
 800da44:	cb03      	ldmia	r3!, {r0, r1}
 800da46:	6010      	str	r0, [r2, #0]
 800da48:	6051      	str	r1, [r2, #4]
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	8113      	strh	r3, [r2, #8]
			break;
 800da4e:	f00e becf 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800da52:	bf00      	nop
 800da54:	08027f10 	.word	0x08027f10
 800da58:	08023b90 	.word	0x08023b90
 800da5c:	08027f28 	.word	0x08027f28
 800da60:	08027f38 	.word	0x08027f38
 800da64:	08023cb4 	.word	0x08023cb4
 800da68:	08027f50 	.word	0x08027f50
 800da6c:	08023d30 	.word	0x08023d30
 800da70:	08027f5c 	.word	0x08027f5c
 800da74:	08027f6c 	.word	0x08027f6c
 800da78:	08023d18 	.word	0x08023d18
 800da7c:	08027f80 	.word	0x08027f80
 800da80:	08023b50 	.word	0x08023b50
 800da84:	08027f88 	.word	0x08027f88
 800da88:	08027f98 	.word	0x08027f98
 800da8c:	08027fb0 	.word	0x08027fb0
 800da90:	08027fc0 	.word	0x08027fc0
 800da94:	08027fcc 	.word	0x08027fcc
 800da98:	08023f2c 	.word	0x08023f2c
 800da9c:	08027fdc 	.word	0x08027fdc
 800daa0:	080243c4 	.word	0x080243c4
 800daa4:	08027ff4 	.word	0x08027ff4
 800daa8:	08027ffc 	.word	0x08027ffc
 800daac:	08023ce4 	.word	0x08023ce4
 800dab0:	08028008 	.word	0x08028008
 800dab4:	08028010 	.word	0x08028010
 800dab8:	0802801c 	.word	0x0802801c
 800dabc:	08024270 	.word	0x08024270
		case 348 :
			strcpy(p->name,"CREAKY SQUEAKY");
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dac6:	4aae      	ldr	r2, [pc, #696]	; (800dd80 <problem_fetch+0xc3f0>)
 800dac8:	461c      	mov	r4, r3
 800daca:	4613      	mov	r3, r2
 800dacc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dace:	6020      	str	r0, [r4, #0]
 800dad0:	6061      	str	r1, [r4, #4]
 800dad2:	60a2      	str	r2, [r4, #8]
 800dad4:	881a      	ldrh	r2, [r3, #0]
 800dad6:	789b      	ldrb	r3, [r3, #2]
 800dad8:	81a2      	strh	r2, [r4, #12]
 800dada:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dae2:	4aa8      	ldr	r2, [pc, #672]	; (800dd84 <problem_fetch+0xc3f4>)
 800dae4:	6810      	ldr	r0, [r2, #0]
 800dae6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2208      	movs	r2, #8
 800daec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,B,E,F,H,D");
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	33a4      	adds	r3, #164	; 0xa4
 800daf2:	4aa5      	ldr	r2, [pc, #660]	; (800dd88 <problem_fetch+0xc3f8>)
 800daf4:	461c      	mov	r4, r3
 800daf6:	4615      	mov	r5, r2
 800daf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dafa:	6020      	str	r0, [r4, #0]
 800dafc:	6061      	str	r1, [r4, #4]
 800dafe:	60a2      	str	r2, [r4, #8]
 800db00:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,12,13,16,18");
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	3304      	adds	r3, #4
 800db06:	4aa1      	ldr	r2, [pc, #644]	; (800dd8c <problem_fetch+0xc3fc>)
 800db08:	461d      	mov	r5, r3
 800db0a:	4614      	mov	r4, r2
 800db0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db0e:	6028      	str	r0, [r5, #0]
 800db10:	6069      	str	r1, [r5, #4]
 800db12:	60aa      	str	r2, [r5, #8]
 800db14:	60eb      	str	r3, [r5, #12]
 800db16:	6820      	ldr	r0, [r4, #0]
 800db18:	6128      	str	r0, [r5, #16]
 800db1a:	7923      	ldrb	r3, [r4, #4]
 800db1c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800db24:	4a9a      	ldr	r2, [pc, #616]	; (800dd90 <problem_fetch+0xc400>)
 800db26:	461c      	mov	r4, r3
 800db28:	4615      	mov	r5, r2
 800db2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db2c:	6020      	str	r0, [r4, #0]
 800db2e:	6061      	str	r1, [r4, #4]
 800db30:	60a2      	str	r2, [r4, #8]
 800db32:	60e3      	str	r3, [r4, #12]
			break;
 800db34:	f00e be5c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 349 :
			strcpy(p->name,"SLUG TRAIL");
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db3e:	4995      	ldr	r1, [pc, #596]	; (800dd94 <problem_fetch+0xc404>)
 800db40:	461a      	mov	r2, r3
 800db42:	460b      	mov	r3, r1
 800db44:	cb03      	ldmia	r3!, {r0, r1}
 800db46:	6010      	str	r0, [r2, #0]
 800db48:	6051      	str	r1, [r2, #4]
 800db4a:	8819      	ldrh	r1, [r3, #0]
 800db4c:	789b      	ldrb	r3, [r3, #2]
 800db4e:	8111      	strh	r1, [r2, #8]
 800db50:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800db58:	4a8f      	ldr	r2, [pc, #572]	; (800dd98 <problem_fetch+0xc408>)
 800db5a:	6810      	ldr	r0, [r2, #0]
 800db5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2208      	movs	r2, #8
 800db62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,A,E,A");
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	33a4      	adds	r3, #164	; 0xa4
 800db68:	4a8c      	ldr	r2, [pc, #560]	; (800dd9c <problem_fetch+0xc40c>)
 800db6a:	461c      	mov	r4, r3
 800db6c:	4615      	mov	r5, r2
 800db6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db70:	6020      	str	r0, [r4, #0]
 800db72:	6061      	str	r1, [r4, #4]
 800db74:	60a2      	str	r2, [r4, #8]
 800db76:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,9,14,14,18");
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	3304      	adds	r3, #4
 800db7c:	4a88      	ldr	r2, [pc, #544]	; (800dda0 <problem_fetch+0xc410>)
 800db7e:	461d      	mov	r5, r3
 800db80:	4614      	mov	r4, r2
 800db82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db84:	6028      	str	r0, [r5, #0]
 800db86:	6069      	str	r1, [r5, #4]
 800db88:	60aa      	str	r2, [r5, #8]
 800db8a:	60eb      	str	r3, [r5, #12]
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800db96:	4a7e      	ldr	r2, [pc, #504]	; (800dd90 <problem_fetch+0xc400>)
 800db98:	461c      	mov	r4, r3
 800db9a:	4615      	mov	r5, r2
 800db9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db9e:	6020      	str	r0, [r4, #0]
 800dba0:	6061      	str	r1, [r4, #4]
 800dba2:	60a2      	str	r2, [r4, #8]
 800dba4:	60e3      	str	r3, [r4, #12]
			break;
 800dba6:	f00e be23 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 350 :
			strcpy(p->name,"GRAPE THIEF");
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dbb0:	4a7c      	ldr	r2, [pc, #496]	; (800dda4 <problem_fetch+0xc414>)
 800dbb2:	461c      	mov	r4, r3
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbb8:	6020      	str	r0, [r4, #0]
 800dbba:	6061      	str	r1, [r4, #4]
 800dbbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dbc4:	4a78      	ldr	r2, [pc, #480]	; (800dda8 <problem_fetch+0xc418>)
 800dbc6:	8811      	ldrh	r1, [r2, #0]
 800dbc8:	7892      	ldrb	r2, [r2, #2]
 800dbca:	8019      	strh	r1, [r3, #0]
 800dbcc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2204      	movs	r2, #4
 800dbd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	33a4      	adds	r3, #164	; 0xa4
 800dbd8:	4974      	ldr	r1, [pc, #464]	; (800ddac <problem_fetch+0xc41c>)
 800dbda:	461a      	mov	r2, r3
 800dbdc:	460b      	mov	r3, r1
 800dbde:	cb03      	ldmia	r3!, {r0, r1}
 800dbe0:	6010      	str	r0, [r2, #0]
 800dbe2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,14,9,18");
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	4971      	ldr	r1, [pc, #452]	; (800ddb0 <problem_fetch+0xc420>)
 800dbea:	461a      	mov	r2, r3
 800dbec:	460b      	mov	r3, r1
 800dbee:	cb03      	ldmia	r3!, {r0, r1}
 800dbf0:	6010      	str	r0, [r2, #0]
 800dbf2:	6051      	str	r1, [r2, #4]
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dbfe:	496d      	ldr	r1, [pc, #436]	; (800ddb4 <problem_fetch+0xc424>)
 800dc00:	461a      	mov	r2, r3
 800dc02:	460b      	mov	r3, r1
 800dc04:	cb03      	ldmia	r3!, {r0, r1}
 800dc06:	6010      	str	r0, [r2, #0]
 800dc08:	6051      	str	r1, [r2, #4]
			break;
 800dc0a:	f00e bdf1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 351 :
			strcpy(p->name,"CALL ME A FOOL WILL YOU?");
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc14:	4a68      	ldr	r2, [pc, #416]	; (800ddb8 <problem_fetch+0xc428>)
 800dc16:	461d      	mov	r5, r3
 800dc18:	4614      	mov	r4, r2
 800dc1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc1c:	6028      	str	r0, [r5, #0]
 800dc1e:	6069      	str	r1, [r5, #4]
 800dc20:	60aa      	str	r2, [r5, #8]
 800dc22:	60eb      	str	r3, [r5, #12]
 800dc24:	cc03      	ldmia	r4!, {r0, r1}
 800dc26:	6128      	str	r0, [r5, #16]
 800dc28:	6169      	str	r1, [r5, #20]
 800dc2a:	7823      	ldrb	r3, [r4, #0]
 800dc2c:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc34:	4a58      	ldr	r2, [pc, #352]	; (800dd98 <problem_fetch+0xc408>)
 800dc36:	6810      	ldr	r0, [r2, #0]
 800dc38:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	220b      	movs	r2, #11
 800dc3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,I,J,H,G,F,E,I");
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	33a4      	adds	r3, #164	; 0xa4
 800dc44:	4a5d      	ldr	r2, [pc, #372]	; (800ddbc <problem_fetch+0xc42c>)
 800dc46:	461d      	mov	r5, r3
 800dc48:	4614      	mov	r4, r2
 800dc4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc4c:	6028      	str	r0, [r5, #0]
 800dc4e:	6069      	str	r1, [r5, #4]
 800dc50:	60aa      	str	r2, [r5, #8]
 800dc52:	60eb      	str	r3, [r5, #12]
 800dc54:	6820      	ldr	r0, [r4, #0]
 800dc56:	6128      	str	r0, [r5, #16]
 800dc58:	88a3      	ldrh	r3, [r4, #4]
 800dc5a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,5,15,14,16,8,9,11,12,18");
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	3304      	adds	r3, #4
 800dc60:	4a57      	ldr	r2, [pc, #348]	; (800ddc0 <problem_fetch+0xc430>)
 800dc62:	461d      	mov	r5, r3
 800dc64:	4614      	mov	r4, r2
 800dc66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc68:	6028      	str	r0, [r5, #0]
 800dc6a:	6069      	str	r1, [r5, #4]
 800dc6c:	60aa      	str	r2, [r5, #8]
 800dc6e:	60eb      	str	r3, [r5, #12]
 800dc70:	cc07      	ldmia	r4!, {r0, r1, r2}
 800dc72:	6128      	str	r0, [r5, #16]
 800dc74:	6169      	str	r1, [r5, #20]
 800dc76:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dc7e:	4a51      	ldr	r2, [pc, #324]	; (800ddc4 <problem_fetch+0xc434>)
 800dc80:	461d      	mov	r5, r3
 800dc82:	4614      	mov	r4, r2
 800dc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc86:	6028      	str	r0, [r5, #0]
 800dc88:	6069      	str	r1, [r5, #4]
 800dc8a:	60aa      	str	r2, [r5, #8]
 800dc8c:	60eb      	str	r3, [r5, #12]
 800dc8e:	6820      	ldr	r0, [r4, #0]
 800dc90:	6128      	str	r0, [r5, #16]
 800dc92:	88a3      	ldrh	r3, [r4, #4]
 800dc94:	82ab      	strh	r3, [r5, #20]
			break;
 800dc96:	f00e bdab 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 352 :
			strcpy(p->name,"DESERT ROSE");
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dca0:	4a49      	ldr	r2, [pc, #292]	; (800ddc8 <problem_fetch+0xc438>)
 800dca2:	461c      	mov	r4, r3
 800dca4:	4613      	mov	r3, r2
 800dca6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dca8:	6020      	str	r0, [r4, #0]
 800dcaa:	6061      	str	r1, [r4, #4]
 800dcac:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dcb4:	4a33      	ldr	r2, [pc, #204]	; (800dd84 <problem_fetch+0xc3f4>)
 800dcb6:	6810      	ldr	r0, [r2, #0]
 800dcb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2206      	movs	r2, #6
 800dcbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,J,G,I");
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	33a4      	adds	r3, #164	; 0xa4
 800dcc4:	4a41      	ldr	r2, [pc, #260]	; (800ddcc <problem_fetch+0xc43c>)
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	4613      	mov	r3, r2
 800dcca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dccc:	6020      	str	r0, [r4, #0]
 800dcce:	6061      	str	r1, [r4, #4]
 800dcd0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	4a3e      	ldr	r2, [pc, #248]	; (800ddd0 <problem_fetch+0xc440>)
 800dcd8:	461c      	mov	r4, r3
 800dcda:	4613      	mov	r3, r2
 800dcdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dcde:	6020      	str	r0, [r4, #0]
 800dce0:	6061      	str	r1, [r4, #4]
 800dce2:	60a2      	str	r2, [r4, #8]
 800dce4:	881a      	ldrh	r2, [r3, #0]
 800dce6:	789b      	ldrb	r3, [r3, #2]
 800dce8:	81a2      	strh	r2, [r4, #12]
 800dcea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dcf2:	4a38      	ldr	r2, [pc, #224]	; (800ddd4 <problem_fetch+0xc444>)
 800dcf4:	461c      	mov	r4, r3
 800dcf6:	4613      	mov	r3, r2
 800dcf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dcfa:	6020      	str	r0, [r4, #0]
 800dcfc:	6061      	str	r1, [r4, #4]
 800dcfe:	60a2      	str	r2, [r4, #8]
			break;
 800dd00:	f00e bd76 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 353 :
			strcpy(p->name,"BUMPIN GO");
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dd0a:	4933      	ldr	r1, [pc, #204]	; (800ddd8 <problem_fetch+0xc448>)
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	460b      	mov	r3, r1
 800dd10:	cb03      	ldmia	r3!, {r0, r1}
 800dd12:	6010      	str	r0, [r2, #0]
 800dd14:	6051      	str	r1, [r2, #4]
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd20:	4a2e      	ldr	r2, [pc, #184]	; (800dddc <problem_fetch+0xc44c>)
 800dd22:	8811      	ldrh	r1, [r2, #0]
 800dd24:	7892      	ldrb	r2, [r2, #2]
 800dd26:	8019      	strh	r1, [r3, #0]
 800dd28:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,H,I,G,I");
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	33a4      	adds	r3, #164	; 0xa4
 800dd34:	4a2a      	ldr	r2, [pc, #168]	; (800dde0 <problem_fetch+0xc450>)
 800dd36:	461c      	mov	r4, r3
 800dd38:	4613      	mov	r3, r2
 800dd3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd3c:	6020      	str	r0, [r4, #0]
 800dd3e:	6061      	str	r1, [r4, #4]
 800dd40:	60a2      	str	r2, [r4, #8]
 800dd42:	881b      	ldrh	r3, [r3, #0]
 800dd44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,17,18");
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4a26      	ldr	r2, [pc, #152]	; (800dde4 <problem_fetch+0xc454>)
 800dd4c:	461d      	mov	r5, r3
 800dd4e:	4614      	mov	r4, r2
 800dd50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd52:	6028      	str	r0, [r5, #0]
 800dd54:	6069      	str	r1, [r5, #4]
 800dd56:	60aa      	str	r2, [r5, #8]
 800dd58:	60eb      	str	r3, [r5, #12]
 800dd5a:	8823      	ldrh	r3, [r4, #0]
 800dd5c:	78a2      	ldrb	r2, [r4, #2]
 800dd5e:	822b      	strh	r3, [r5, #16]
 800dd60:	4613      	mov	r3, r2
 800dd62:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dd6a:	4a1f      	ldr	r2, [pc, #124]	; (800dde8 <problem_fetch+0xc458>)
 800dd6c:	461c      	mov	r4, r3
 800dd6e:	4613      	mov	r3, r2
 800dd70:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd72:	6020      	str	r0, [r4, #0]
 800dd74:	6061      	str	r1, [r4, #4]
 800dd76:	60a2      	str	r2, [r4, #8]
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	81a3      	strh	r3, [r4, #12]
			break;
 800dd7c:	f00e bd38 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800dd80:	0802802c 	.word	0x0802802c
 800dd84:	08023c28 	.word	0x08023c28
 800dd88:	0802803c 	.word	0x0802803c
 800dd8c:	0802804c 	.word	0x0802804c
 800dd90:	08023cb4 	.word	0x08023cb4
 800dd94:	08028064 	.word	0x08028064
 800dd98:	08023b90 	.word	0x08023b90
 800dd9c:	08028070 	.word	0x08028070
 800dda0:	08028080 	.word	0x08028080
 800dda4:	08028094 	.word	0x08028094
 800dda8:	080243c4 	.word	0x080243c4
 800ddac:	08023cd0 	.word	0x08023cd0
 800ddb0:	080280a0 	.word	0x080280a0
 800ddb4:	08023ce4 	.word	0x08023ce4
 800ddb8:	080280ac 	.word	0x080280ac
 800ddbc:	080280c8 	.word	0x080280c8
 800ddc0:	080280e0 	.word	0x080280e0
 800ddc4:	080274f0 	.word	0x080274f0
 800ddc8:	080280fc 	.word	0x080280fc
 800ddcc:	08028108 	.word	0x08028108
 800ddd0:	08028114 	.word	0x08028114
 800ddd4:	08023f2c 	.word	0x08023f2c
 800ddd8:	08028124 	.word	0x08028124
 800dddc:	08023b50 	.word	0x08023b50
 800dde0:	08028130 	.word	0x08028130
 800dde4:	08028140 	.word	0x08028140
 800dde8:	08023d18 	.word	0x08023d18
		case 354 :
			strcpy(p->name,"BLACKLISTED");
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ddf2:	4abd      	ldr	r2, [pc, #756]	; (800e0e8 <problem_fetch+0xc758>)
 800ddf4:	461c      	mov	r4, r3
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddfa:	6020      	str	r0, [r4, #0]
 800ddfc:	6061      	str	r1, [r4, #4]
 800ddfe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800de06:	4ab9      	ldr	r2, [pc, #740]	; (800e0ec <problem_fetch+0xc75c>)
 800de08:	6810      	ldr	r0, [r2, #0]
 800de0a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2206      	movs	r2, #6
 800de10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D,A");
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	33a4      	adds	r3, #164	; 0xa4
 800de16:	4ab6      	ldr	r2, [pc, #728]	; (800e0f0 <problem_fetch+0xc760>)
 800de18:	461c      	mov	r4, r3
 800de1a:	4613      	mov	r3, r2
 800de1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de1e:	6020      	str	r0, [r4, #0]
 800de20:	6061      	str	r1, [r4, #4]
 800de22:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	3304      	adds	r3, #4
 800de28:	4ab2      	ldr	r2, [pc, #712]	; (800e0f4 <problem_fetch+0xc764>)
 800de2a:	461c      	mov	r4, r3
 800de2c:	4615      	mov	r5, r2
 800de2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de30:	6020      	str	r0, [r4, #0]
 800de32:	6061      	str	r1, [r4, #4]
 800de34:	60a2      	str	r2, [r4, #8]
 800de36:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800de3e:	4aae      	ldr	r2, [pc, #696]	; (800e0f8 <problem_fetch+0xc768>)
 800de40:	461c      	mov	r4, r3
 800de42:	4613      	mov	r3, r2
 800de44:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de46:	6020      	str	r0, [r4, #0]
 800de48:	6061      	str	r1, [r4, #4]
 800de4a:	60a2      	str	r2, [r4, #8]
			break;
 800de4c:	f00e bcd0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 355 :
			strcpy(p->name,"THE EASY EASY");
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800de56:	4aa9      	ldr	r2, [pc, #676]	; (800e0fc <problem_fetch+0xc76c>)
 800de58:	461c      	mov	r4, r3
 800de5a:	4613      	mov	r3, r2
 800de5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de5e:	6020      	str	r0, [r4, #0]
 800de60:	6061      	str	r1, [r4, #4]
 800de62:	60a2      	str	r2, [r4, #8]
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800de6e:	4aa4      	ldr	r2, [pc, #656]	; (800e100 <problem_fetch+0xc770>)
 800de70:	6810      	ldr	r0, [r2, #0]
 800de72:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2205      	movs	r2, #5
 800de78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,E,I");
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	33a4      	adds	r3, #164	; 0xa4
 800de7e:	49a1      	ldr	r1, [pc, #644]	; (800e104 <problem_fetch+0xc774>)
 800de80:	461a      	mov	r2, r3
 800de82:	460b      	mov	r3, r1
 800de84:	cb03      	ldmia	r3!, {r0, r1}
 800de86:	6010      	str	r0, [r2, #0]
 800de88:	6051      	str	r1, [r2, #4]
 800de8a:	881b      	ldrh	r3, [r3, #0]
 800de8c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,8,18");
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	3304      	adds	r3, #4
 800de92:	4a9d      	ldr	r2, [pc, #628]	; (800e108 <problem_fetch+0xc778>)
 800de94:	461c      	mov	r4, r3
 800de96:	4613      	mov	r3, r2
 800de98:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de9a:	6020      	str	r0, [r4, #0]
 800de9c:	6061      	str	r1, [r4, #4]
 800de9e:	60a2      	str	r2, [r4, #8]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800deaa:	4998      	ldr	r1, [pc, #608]	; (800e10c <problem_fetch+0xc77c>)
 800deac:	461a      	mov	r2, r3
 800deae:	460b      	mov	r3, r1
 800deb0:	cb03      	ldmia	r3!, {r0, r1}
 800deb2:	6010      	str	r0, [r2, #0]
 800deb4:	6051      	str	r1, [r2, #4]
 800deb6:	881b      	ldrh	r3, [r3, #0]
 800deb8:	8113      	strh	r3, [r2, #8]
			break;
 800deba:	f00e bc99 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 356 :
			strcpy(p->name,"BOOTHY TOOTHY");
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dec4:	4a92      	ldr	r2, [pc, #584]	; (800e110 <problem_fetch+0xc780>)
 800dec6:	461c      	mov	r4, r3
 800dec8:	4613      	mov	r3, r2
 800deca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800decc:	6020      	str	r0, [r4, #0]
 800dece:	6061      	str	r1, [r4, #4]
 800ded0:	60a2      	str	r2, [r4, #8]
 800ded2:	881b      	ldrh	r3, [r3, #0]
 800ded4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dedc:	4a88      	ldr	r2, [pc, #544]	; (800e100 <problem_fetch+0xc770>)
 800dede:	6810      	ldr	r0, [r2, #0]
 800dee0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2206      	movs	r2, #6
 800dee6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,E,J,E,I");
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	33a4      	adds	r3, #164	; 0xa4
 800deec:	4a89      	ldr	r2, [pc, #548]	; (800e114 <problem_fetch+0xc784>)
 800deee:	461c      	mov	r4, r3
 800def0:	4613      	mov	r3, r2
 800def2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800def4:	6020      	str	r0, [r4, #0]
 800def6:	6061      	str	r1, [r4, #4]
 800def8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,9,12,14,18");
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	3304      	adds	r3, #4
 800defe:	4a86      	ldr	r2, [pc, #536]	; (800e118 <problem_fetch+0xc788>)
 800df00:	461c      	mov	r4, r3
 800df02:	4613      	mov	r3, r2
 800df04:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df06:	6020      	str	r0, [r4, #0]
 800df08:	6061      	str	r1, [r4, #4]
 800df0a:	60a2      	str	r2, [r4, #8]
 800df0c:	881a      	ldrh	r2, [r3, #0]
 800df0e:	789b      	ldrb	r3, [r3, #2]
 800df10:	81a2      	strh	r2, [r4, #12]
 800df12:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800df1a:	4a80      	ldr	r2, [pc, #512]	; (800e11c <problem_fetch+0xc78c>)
 800df1c:	461c      	mov	r4, r3
 800df1e:	4613      	mov	r3, r2
 800df20:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df22:	6020      	str	r0, [r4, #0]
 800df24:	6061      	str	r1, [r4, #4]
 800df26:	60a2      	str	r2, [r4, #8]
			break;
 800df28:	f00e bc62 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 357 :
			strcpy(p->name,"LOCK IT DOWN");
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df32:	4a7b      	ldr	r2, [pc, #492]	; (800e120 <problem_fetch+0xc790>)
 800df34:	461c      	mov	r4, r3
 800df36:	4613      	mov	r3, r2
 800df38:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df3a:	6020      	str	r0, [r4, #0]
 800df3c:	6061      	str	r1, [r4, #4]
 800df3e:	60a2      	str	r2, [r4, #8]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df4a:	4a76      	ldr	r2, [pc, #472]	; (800e124 <problem_fetch+0xc794>)
 800df4c:	6810      	ldr	r0, [r2, #0]
 800df4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2206      	movs	r2, #6
 800df54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,J,E,H,D");
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	33a4      	adds	r3, #164	; 0xa4
 800df5a:	4a73      	ldr	r2, [pc, #460]	; (800e128 <problem_fetch+0xc798>)
 800df5c:	461c      	mov	r4, r3
 800df5e:	4613      	mov	r3, r2
 800df60:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df62:	6020      	str	r0, [r4, #0]
 800df64:	6061      	str	r1, [r4, #4]
 800df66:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,12,16,18");
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3304      	adds	r3, #4
 800df6c:	4a6f      	ldr	r2, [pc, #444]	; (800e12c <problem_fetch+0xc79c>)
 800df6e:	461c      	mov	r4, r3
 800df70:	4615      	mov	r5, r2
 800df72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df74:	6020      	str	r0, [r4, #0]
 800df76:	6061      	str	r1, [r4, #4]
 800df78:	60a2      	str	r2, [r4, #8]
 800df7a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800df82:	4a5d      	ldr	r2, [pc, #372]	; (800e0f8 <problem_fetch+0xc768>)
 800df84:	461c      	mov	r4, r3
 800df86:	4613      	mov	r3, r2
 800df88:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df8a:	6020      	str	r0, [r4, #0]
 800df8c:	6061      	str	r1, [r4, #4]
 800df8e:	60a2      	str	r2, [r4, #8]
			break;
 800df90:	f00e bc2e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 358 :
			strcpy(p->name,"RECHARGE");
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df9a:	4965      	ldr	r1, [pc, #404]	; (800e130 <problem_fetch+0xc7a0>)
 800df9c:	461a      	mov	r2, r3
 800df9e:	460b      	mov	r3, r1
 800dfa0:	cb03      	ldmia	r3!, {r0, r1}
 800dfa2:	6010      	str	r0, [r2, #0]
 800dfa4:	6051      	str	r1, [r2, #4]
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dfb0:	4a5c      	ldr	r2, [pc, #368]	; (800e124 <problem_fetch+0xc794>)
 800dfb2:	6810      	ldr	r0, [r2, #0]
 800dfb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2205      	movs	r2, #5
 800dfba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,G,A");
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	33a4      	adds	r3, #164	; 0xa4
 800dfc0:	495c      	ldr	r1, [pc, #368]	; (800e134 <problem_fetch+0xc7a4>)
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	cb03      	ldmia	r3!, {r0, r1}
 800dfc8:	6010      	str	r0, [r2, #0]
 800dfca:	6051      	str	r1, [r2, #4]
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,17,18");
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3304      	adds	r3, #4
 800dfd4:	4a58      	ldr	r2, [pc, #352]	; (800e138 <problem_fetch+0xc7a8>)
 800dfd6:	461c      	mov	r4, r3
 800dfd8:	4613      	mov	r3, r2
 800dfda:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dfdc:	6020      	str	r0, [r4, #0]
 800dfde:	6061      	str	r1, [r4, #4]
 800dfe0:	60a2      	str	r2, [r4, #8]
 800dfe2:	881b      	ldrh	r3, [r3, #0]
 800dfe4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dfec:	4947      	ldr	r1, [pc, #284]	; (800e10c <problem_fetch+0xc77c>)
 800dfee:	461a      	mov	r2, r3
 800dff0:	460b      	mov	r3, r1
 800dff2:	cb03      	ldmia	r3!, {r0, r1}
 800dff4:	6010      	str	r0, [r2, #0]
 800dff6:	6051      	str	r1, [r2, #4]
 800dff8:	881b      	ldrh	r3, [r3, #0]
 800dffa:	8113      	strh	r3, [r2, #8]
			break;
 800dffc:	f00e bbf8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 359 :
			strcpy(p->name,"QUARTER PAST MIDNIGHT");
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e006:	4a4d      	ldr	r2, [pc, #308]	; (800e13c <problem_fetch+0xc7ac>)
 800e008:	461d      	mov	r5, r3
 800e00a:	4614      	mov	r4, r2
 800e00c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e00e:	6028      	str	r0, [r5, #0]
 800e010:	6069      	str	r1, [r5, #4]
 800e012:	60aa      	str	r2, [r5, #8]
 800e014:	60eb      	str	r3, [r5, #12]
 800e016:	6820      	ldr	r0, [r4, #0]
 800e018:	6128      	str	r0, [r5, #16]
 800e01a:	88a3      	ldrh	r3, [r4, #4]
 800e01c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e024:	4a31      	ldr	r2, [pc, #196]	; (800e0ec <problem_fetch+0xc75c>)
 800e026:	6810      	ldr	r0, [r2, #0]
 800e028:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2207      	movs	r2, #7
 800e02e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,J,G,I");
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	33a4      	adds	r3, #164	; 0xa4
 800e034:	4a42      	ldr	r2, [pc, #264]	; (800e140 <problem_fetch+0xc7b0>)
 800e036:	461c      	mov	r4, r3
 800e038:	4613      	mov	r3, r2
 800e03a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e03c:	6020      	str	r0, [r4, #0]
 800e03e:	6061      	str	r1, [r4, #4]
 800e040:	60a2      	str	r2, [r4, #8]
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,13,15,18");
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	3304      	adds	r3, #4
 800e04a:	4a3e      	ldr	r2, [pc, #248]	; (800e144 <problem_fetch+0xc7b4>)
 800e04c:	461d      	mov	r5, r3
 800e04e:	4614      	mov	r4, r2
 800e050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e052:	6028      	str	r0, [r5, #0]
 800e054:	6069      	str	r1, [r5, #4]
 800e056:	60aa      	str	r2, [r5, #8]
 800e058:	60eb      	str	r3, [r5, #12]
 800e05a:	8823      	ldrh	r3, [r4, #0]
 800e05c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e064:	4a38      	ldr	r2, [pc, #224]	; (800e148 <problem_fetch+0xc7b8>)
 800e066:	461c      	mov	r4, r3
 800e068:	4613      	mov	r3, r2
 800e06a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e06c:	6020      	str	r0, [r4, #0]
 800e06e:	6061      	str	r1, [r4, #4]
 800e070:	60a2      	str	r2, [r4, #8]
 800e072:	881b      	ldrh	r3, [r3, #0]
 800e074:	81a3      	strh	r3, [r4, #12]
			break;
 800e076:	f00e bbbb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 360 :
			strcpy(p->name,"FINGERY BY NATURE");
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e080:	4a32      	ldr	r2, [pc, #200]	; (800e14c <problem_fetch+0xc7bc>)
 800e082:	461d      	mov	r5, r3
 800e084:	4614      	mov	r4, r2
 800e086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e088:	6028      	str	r0, [r5, #0]
 800e08a:	6069      	str	r1, [r5, #4]
 800e08c:	60aa      	str	r2, [r5, #8]
 800e08e:	60eb      	str	r3, [r5, #12]
 800e090:	8823      	ldrh	r3, [r4, #0]
 800e092:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e09a:	4a2d      	ldr	r2, [pc, #180]	; (800e150 <problem_fetch+0xc7c0>)
 800e09c:	8811      	ldrh	r1, [r2, #0]
 800e09e:	7892      	ldrb	r2, [r2, #2]
 800e0a0:	8019      	strh	r1, [r3, #0]
 800e0a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2206      	movs	r2, #6
 800e0a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,B,E,D");
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	33a4      	adds	r3, #164	; 0xa4
 800e0ae:	4a29      	ldr	r2, [pc, #164]	; (800e154 <problem_fetch+0xc7c4>)
 800e0b0:	461c      	mov	r4, r3
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e0b6:	6020      	str	r0, [r4, #0]
 800e0b8:	6061      	str	r1, [r4, #4]
 800e0ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,14,18");
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4a25      	ldr	r2, [pc, #148]	; (800e158 <problem_fetch+0xc7c8>)
 800e0c2:	461c      	mov	r4, r3
 800e0c4:	4615      	mov	r5, r2
 800e0c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0c8:	6020      	str	r0, [r4, #0]
 800e0ca:	6061      	str	r1, [r4, #4]
 800e0cc:	60a2      	str	r2, [r4, #8]
 800e0ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e0d6:	4a08      	ldr	r2, [pc, #32]	; (800e0f8 <problem_fetch+0xc768>)
 800e0d8:	461c      	mov	r4, r3
 800e0da:	4613      	mov	r3, r2
 800e0dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e0de:	6020      	str	r0, [r4, #0]
 800e0e0:	6061      	str	r1, [r4, #4]
 800e0e2:	60a2      	str	r2, [r4, #8]
			break;
 800e0e4:	f00e bb84 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800e0e8:	08028154 	.word	0x08028154
 800e0ec:	08023c28 	.word	0x08023c28
 800e0f0:	08028160 	.word	0x08028160
 800e0f4:	08027d44 	.word	0x08027d44
 800e0f8:	08023f2c 	.word	0x08023f2c
 800e0fc:	0802816c 	.word	0x0802816c
 800e100:	08023b90 	.word	0x08023b90
 800e104:	0802817c 	.word	0x0802817c
 800e108:	08028188 	.word	0x08028188
 800e10c:	0802405c 	.word	0x0802405c
 800e110:	08028198 	.word	0x08028198
 800e114:	080281a8 	.word	0x080281a8
 800e118:	080281b4 	.word	0x080281b4
 800e11c:	08023b70 	.word	0x08023b70
 800e120:	080281c4 	.word	0x080281c4
 800e124:	08023d30 	.word	0x08023d30
 800e128:	080281d4 	.word	0x080281d4
 800e12c:	080281e0 	.word	0x080281e0
 800e130:	080281f0 	.word	0x080281f0
 800e134:	080281fc 	.word	0x080281fc
 800e138:	08028208 	.word	0x08028208
 800e13c:	08028218 	.word	0x08028218
 800e140:	08028230 	.word	0x08028230
 800e144:	08028240 	.word	0x08028240
 800e148:	08023c08 	.word	0x08023c08
 800e14c:	08028254 	.word	0x08028254
 800e150:	08023b50 	.word	0x08023b50
 800e154:	08028268 	.word	0x08028268
 800e158:	08028274 	.word	0x08028274
		case 361 :
			strcpy(p->name,"FROCENZO A ROCCAMORICE");
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e162:	4aae      	ldr	r2, [pc, #696]	; (800e41c <problem_fetch+0xca8c>)
 800e164:	461c      	mov	r4, r3
 800e166:	4615      	mov	r5, r2
 800e168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e16a:	6020      	str	r0, [r4, #0]
 800e16c:	6061      	str	r1, [r4, #4]
 800e16e:	60a2      	str	r2, [r4, #8]
 800e170:	60e3      	str	r3, [r4, #12]
 800e172:	6828      	ldr	r0, [r5, #0]
 800e174:	6120      	str	r0, [r4, #16]
 800e176:	88ab      	ldrh	r3, [r5, #4]
 800e178:	79aa      	ldrb	r2, [r5, #6]
 800e17a:	82a3      	strh	r3, [r4, #20]
 800e17c:	4613      	mov	r3, r2
 800e17e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e186:	4aa6      	ldr	r2, [pc, #664]	; (800e420 <problem_fetch+0xca90>)
 800e188:	8811      	ldrh	r1, [r2, #0]
 800e18a:	7892      	ldrb	r2, [r2, #2]
 800e18c:	8019      	strh	r1, [r3, #0]
 800e18e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2205      	movs	r2, #5
 800e194:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,D,A");
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	33a4      	adds	r3, #164	; 0xa4
 800e19a:	49a2      	ldr	r1, [pc, #648]	; (800e424 <problem_fetch+0xca94>)
 800e19c:	461a      	mov	r2, r3
 800e19e:	460b      	mov	r3, r1
 800e1a0:	cb03      	ldmia	r3!, {r0, r1}
 800e1a2:	6010      	str	r0, [r2, #0]
 800e1a4:	6051      	str	r1, [r2, #4]
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,12,15,18");
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	4a9e      	ldr	r2, [pc, #632]	; (800e428 <problem_fetch+0xca98>)
 800e1b0:	461c      	mov	r4, r3
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1b6:	6020      	str	r0, [r4, #0]
 800e1b8:	6061      	str	r1, [r4, #4]
 800e1ba:	60a2      	str	r2, [r4, #8]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e1c6:	4999      	ldr	r1, [pc, #612]	; (800e42c <problem_fetch+0xca9c>)
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	cb03      	ldmia	r3!, {r0, r1}
 800e1ce:	6010      	str	r0, [r2, #0]
 800e1d0:	6051      	str	r1, [r2, #4]
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	8113      	strh	r3, [r2, #8]
			break;
 800e1d6:	f00e bb0b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 362 :
			strcpy(p->name,"SLING SHOT");
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1e0:	4993      	ldr	r1, [pc, #588]	; (800e430 <problem_fetch+0xcaa0>)
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	cb03      	ldmia	r3!, {r0, r1}
 800e1e8:	6010      	str	r0, [r2, #0]
 800e1ea:	6051      	str	r1, [r2, #4]
 800e1ec:	8819      	ldrh	r1, [r3, #0]
 800e1ee:	789b      	ldrb	r3, [r3, #2]
 800e1f0:	8111      	strh	r1, [r2, #8]
 800e1f2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e1fa:	4a8e      	ldr	r2, [pc, #568]	; (800e434 <problem_fetch+0xcaa4>)
 800e1fc:	8811      	ldrh	r1, [r2, #0]
 800e1fe:	7892      	ldrb	r2, [r2, #2]
 800e200:	8019      	strh	r1, [r3, #0]
 800e202:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2205      	movs	r2, #5
 800e208:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,I");
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	33a4      	adds	r3, #164	; 0xa4
 800e20e:	498a      	ldr	r1, [pc, #552]	; (800e438 <problem_fetch+0xcaa8>)
 800e210:	461a      	mov	r2, r3
 800e212:	460b      	mov	r3, r1
 800e214:	cb03      	ldmia	r3!, {r0, r1}
 800e216:	6010      	str	r0, [r2, #0]
 800e218:	6051      	str	r1, [r2, #4]
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	3304      	adds	r3, #4
 800e222:	4a86      	ldr	r2, [pc, #536]	; (800e43c <problem_fetch+0xcaac>)
 800e224:	461c      	mov	r4, r3
 800e226:	4613      	mov	r3, r2
 800e228:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e22a:	6020      	str	r0, [r4, #0]
 800e22c:	6061      	str	r1, [r4, #4]
 800e22e:	60a2      	str	r2, [r4, #8]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e23a:	497c      	ldr	r1, [pc, #496]	; (800e42c <problem_fetch+0xca9c>)
 800e23c:	461a      	mov	r2, r3
 800e23e:	460b      	mov	r3, r1
 800e240:	cb03      	ldmia	r3!, {r0, r1}
 800e242:	6010      	str	r0, [r2, #0]
 800e244:	6051      	str	r1, [r2, #4]
 800e246:	881b      	ldrh	r3, [r3, #0]
 800e248:	8113      	strh	r3, [r2, #8]
			break;
 800e24a:	f00e bad1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 363 :
			strcpy(p->name,"VANDO");
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e254:	4a7a      	ldr	r2, [pc, #488]	; (800e440 <problem_fetch+0xcab0>)
 800e256:	6810      	ldr	r0, [r2, #0]
 800e258:	6018      	str	r0, [r3, #0]
 800e25a:	8892      	ldrh	r2, [r2, #4]
 800e25c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e264:	4a77      	ldr	r2, [pc, #476]	; (800e444 <problem_fetch+0xcab4>)
 800e266:	6810      	ldr	r0, [r2, #0]
 800e268:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2205      	movs	r2, #5
 800e26e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D,D");
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	33a4      	adds	r3, #164	; 0xa4
 800e274:	4974      	ldr	r1, [pc, #464]	; (800e448 <problem_fetch+0xcab8>)
 800e276:	461a      	mov	r2, r3
 800e278:	460b      	mov	r3, r1
 800e27a:	cb03      	ldmia	r3!, {r0, r1}
 800e27c:	6010      	str	r0, [r2, #0]
 800e27e:	6051      	str	r1, [r2, #4]
 800e280:	881b      	ldrh	r3, [r3, #0]
 800e282:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	3304      	adds	r3, #4
 800e288:	4a70      	ldr	r2, [pc, #448]	; (800e44c <problem_fetch+0xcabc>)
 800e28a:	461c      	mov	r4, r3
 800e28c:	4613      	mov	r3, r2
 800e28e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e290:	6020      	str	r0, [r4, #0]
 800e292:	6061      	str	r1, [r4, #4]
 800e294:	60a2      	str	r2, [r4, #8]
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e2a0:	4962      	ldr	r1, [pc, #392]	; (800e42c <problem_fetch+0xca9c>)
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	cb03      	ldmia	r3!, {r0, r1}
 800e2a8:	6010      	str	r0, [r2, #0]
 800e2aa:	6051      	str	r1, [r2, #4]
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	8113      	strh	r3, [r2, #8]
			break;
 800e2b0:	f00e ba9e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 364 :
			strcpy(p->name,"WARM UP BB");
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e2ba:	4965      	ldr	r1, [pc, #404]	; (800e450 <problem_fetch+0xcac0>)
 800e2bc:	461a      	mov	r2, r3
 800e2be:	460b      	mov	r3, r1
 800e2c0:	cb03      	ldmia	r3!, {r0, r1}
 800e2c2:	6010      	str	r0, [r2, #0]
 800e2c4:	6051      	str	r1, [r2, #4]
 800e2c6:	8819      	ldrh	r1, [r3, #0]
 800e2c8:	789b      	ldrb	r3, [r3, #2]
 800e2ca:	8111      	strh	r1, [r2, #8]
 800e2cc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e2d4:	4a5b      	ldr	r2, [pc, #364]	; (800e444 <problem_fetch+0xcab4>)
 800e2d6:	6810      	ldr	r0, [r2, #0]
 800e2d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2208      	movs	r2, #8
 800e2de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,G,D,G,D");
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	33a4      	adds	r3, #164	; 0xa4
 800e2e4:	4a5b      	ldr	r2, [pc, #364]	; (800e454 <problem_fetch+0xcac4>)
 800e2e6:	461c      	mov	r4, r3
 800e2e8:	4615      	mov	r5, r2
 800e2ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2ec:	6020      	str	r0, [r4, #0]
 800e2ee:	6061      	str	r1, [r4, #4]
 800e2f0:	60a2      	str	r2, [r4, #8]
 800e2f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,8,14,15,17,18");
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4a57      	ldr	r2, [pc, #348]	; (800e458 <problem_fetch+0xcac8>)
 800e2fa:	461d      	mov	r5, r3
 800e2fc:	4614      	mov	r4, r2
 800e2fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e300:	6028      	str	r0, [r5, #0]
 800e302:	6069      	str	r1, [r5, #4]
 800e304:	60aa      	str	r2, [r5, #8]
 800e306:	60eb      	str	r3, [r5, #12]
 800e308:	6820      	ldr	r0, [r4, #0]
 800e30a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e312:	4a52      	ldr	r2, [pc, #328]	; (800e45c <problem_fetch+0xcacc>)
 800e314:	461c      	mov	r4, r3
 800e316:	4615      	mov	r5, r2
 800e318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e31a:	6020      	str	r0, [r4, #0]
 800e31c:	6061      	str	r1, [r4, #4]
 800e31e:	60a2      	str	r2, [r4, #8]
 800e320:	60e3      	str	r3, [r4, #12]
			break;
 800e322:	f00e ba65 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 365 :
			strcpy(p->name,"SHARK FIN");
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e32c:	494c      	ldr	r1, [pc, #304]	; (800e460 <problem_fetch+0xcad0>)
 800e32e:	461a      	mov	r2, r3
 800e330:	460b      	mov	r3, r1
 800e332:	cb03      	ldmia	r3!, {r0, r1}
 800e334:	6010      	str	r0, [r2, #0]
 800e336:	6051      	str	r1, [r2, #4]
 800e338:	881b      	ldrh	r3, [r3, #0]
 800e33a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e342:	4a40      	ldr	r2, [pc, #256]	; (800e444 <problem_fetch+0xcab4>)
 800e344:	6810      	ldr	r0, [r2, #0]
 800e346:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2209      	movs	r2, #9
 800e34c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,D,H,G,C,I");
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	33a4      	adds	r3, #164	; 0xa4
 800e352:	4a44      	ldr	r2, [pc, #272]	; (800e464 <problem_fetch+0xcad4>)
 800e354:	461d      	mov	r5, r3
 800e356:	4614      	mov	r4, r2
 800e358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e35a:	6028      	str	r0, [r5, #0]
 800e35c:	6069      	str	r1, [r5, #4]
 800e35e:	60aa      	str	r2, [r5, #8]
 800e360:	60eb      	str	r3, [r5, #12]
 800e362:	8823      	ldrh	r3, [r4, #0]
 800e364:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,9,11,13,15,5,18");
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3304      	adds	r3, #4
 800e36a:	4a3f      	ldr	r2, [pc, #252]	; (800e468 <problem_fetch+0xcad8>)
 800e36c:	461d      	mov	r5, r3
 800e36e:	4614      	mov	r4, r2
 800e370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e372:	6028      	str	r0, [r5, #0]
 800e374:	6069      	str	r1, [r5, #4]
 800e376:	60aa      	str	r2, [r5, #8]
 800e378:	60eb      	str	r3, [r5, #12]
 800e37a:	6820      	ldr	r0, [r4, #0]
 800e37c:	6128      	str	r0, [r5, #16]
 800e37e:	88a3      	ldrh	r3, [r4, #4]
 800e380:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e388:	4a38      	ldr	r2, [pc, #224]	; (800e46c <problem_fetch+0xcadc>)
 800e38a:	461d      	mov	r5, r3
 800e38c:	4614      	mov	r4, r2
 800e38e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e390:	6028      	str	r0, [r5, #0]
 800e392:	6069      	str	r1, [r5, #4]
 800e394:	60aa      	str	r2, [r5, #8]
 800e396:	60eb      	str	r3, [r5, #12]
 800e398:	8823      	ldrh	r3, [r4, #0]
 800e39a:	822b      	strh	r3, [r5, #16]
			break;
 800e39c:	f00e ba28 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 366 :
			strcpy(p->name,"FUDGE YEAH");
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e3a6:	4932      	ldr	r1, [pc, #200]	; (800e470 <problem_fetch+0xcae0>)
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	cb03      	ldmia	r3!, {r0, r1}
 800e3ae:	6010      	str	r0, [r2, #0]
 800e3b0:	6051      	str	r1, [r2, #4]
 800e3b2:	8819      	ldrh	r1, [r3, #0]
 800e3b4:	789b      	ldrb	r3, [r3, #2]
 800e3b6:	8111      	strh	r1, [r2, #8]
 800e3b8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e3c0:	4a20      	ldr	r2, [pc, #128]	; (800e444 <problem_fetch+0xcab4>)
 800e3c2:	6810      	ldr	r0, [r2, #0]
 800e3c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2209      	movs	r2, #9
 800e3ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,H,G,I,H,I");
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	33a4      	adds	r3, #164	; 0xa4
 800e3d0:	4a28      	ldr	r2, [pc, #160]	; (800e474 <problem_fetch+0xcae4>)
 800e3d2:	461d      	mov	r5, r3
 800e3d4:	4614      	mov	r4, r2
 800e3d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3d8:	6028      	str	r0, [r5, #0]
 800e3da:	6069      	str	r1, [r5, #4]
 800e3dc:	60aa      	str	r2, [r5, #8]
 800e3de:	60eb      	str	r3, [r5, #12]
 800e3e0:	8823      	ldrh	r3, [r4, #0]
 800e3e2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	3304      	adds	r3, #4
 800e3e8:	4a23      	ldr	r2, [pc, #140]	; (800e478 <problem_fetch+0xcae8>)
 800e3ea:	461d      	mov	r5, r3
 800e3ec:	4614      	mov	r4, r2
 800e3ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3f0:	6028      	str	r0, [r5, #0]
 800e3f2:	6069      	str	r1, [r5, #4]
 800e3f4:	60aa      	str	r2, [r5, #8]
 800e3f6:	60eb      	str	r3, [r5, #12]
 800e3f8:	cc03      	ldmia	r4!, {r0, r1}
 800e3fa:	6128      	str	r0, [r5, #16]
 800e3fc:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e404:	4a19      	ldr	r2, [pc, #100]	; (800e46c <problem_fetch+0xcadc>)
 800e406:	461d      	mov	r5, r3
 800e408:	4614      	mov	r4, r2
 800e40a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e40c:	6028      	str	r0, [r5, #0]
 800e40e:	6069      	str	r1, [r5, #4]
 800e410:	60aa      	str	r2, [r5, #8]
 800e412:	60eb      	str	r3, [r5, #12]
 800e414:	8823      	ldrh	r3, [r4, #0]
 800e416:	822b      	strh	r3, [r5, #16]
			break;
 800e418:	f00e b9ea 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800e41c:	08028284 	.word	0x08028284
 800e420:	08023b50 	.word	0x08023b50
 800e424:	0802829c 	.word	0x0802829c
 800e428:	080282a8 	.word	0x080282a8
 800e42c:	0802405c 	.word	0x0802405c
 800e430:	080282b8 	.word	0x080282b8
 800e434:	08023c5c 	.word	0x08023c5c
 800e438:	080282c4 	.word	0x080282c4
 800e43c:	080252c4 	.word	0x080252c4
 800e440:	080282d0 	.word	0x080282d0
 800e444:	08023b90 	.word	0x08023b90
 800e448:	080282d8 	.word	0x080282d8
 800e44c:	08027bb0 	.word	0x08027bb0
 800e450:	080282e4 	.word	0x080282e4
 800e454:	080282f0 	.word	0x080282f0
 800e458:	08028300 	.word	0x08028300
 800e45c:	08023cb4 	.word	0x08023cb4
 800e460:	08028314 	.word	0x08028314
 800e464:	08028320 	.word	0x08028320
 800e468:	08028334 	.word	0x08028334
 800e46c:	08024b74 	.word	0x08024b74
 800e470:	0802834c 	.word	0x0802834c
 800e474:	08028358 	.word	0x08028358
 800e478:	0802836c 	.word	0x0802836c
		case 367 :
			strcpy(p->name,"VITAMIN B12");
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e482:	4aa8      	ldr	r2, [pc, #672]	; (800e724 <problem_fetch+0xcd94>)
 800e484:	461c      	mov	r4, r3
 800e486:	4613      	mov	r3, r2
 800e488:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e48a:	6020      	str	r0, [r4, #0]
 800e48c:	6061      	str	r1, [r4, #4]
 800e48e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e496:	4aa4      	ldr	r2, [pc, #656]	; (800e728 <problem_fetch+0xcd98>)
 800e498:	6810      	ldr	r0, [r2, #0]
 800e49a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2206      	movs	r2, #6
 800e4a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,B,E,I");
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	33a4      	adds	r3, #164	; 0xa4
 800e4a6:	4aa1      	ldr	r2, [pc, #644]	; (800e72c <problem_fetch+0xcd9c>)
 800e4a8:	461c      	mov	r4, r3
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4ae:	6020      	str	r0, [r4, #0]
 800e4b0:	6061      	str	r1, [r4, #4]
 800e4b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,16,18");
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3304      	adds	r3, #4
 800e4b8:	4a9d      	ldr	r2, [pc, #628]	; (800e730 <problem_fetch+0xcda0>)
 800e4ba:	461c      	mov	r4, r3
 800e4bc:	4615      	mov	r5, r2
 800e4be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4c0:	6020      	str	r0, [r4, #0]
 800e4c2:	6061      	str	r1, [r4, #4]
 800e4c4:	60a2      	str	r2, [r4, #8]
 800e4c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e4ce:	4a99      	ldr	r2, [pc, #612]	; (800e734 <problem_fetch+0xcda4>)
 800e4d0:	461c      	mov	r4, r3
 800e4d2:	4613      	mov	r3, r2
 800e4d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4d6:	6020      	str	r0, [r4, #0]
 800e4d8:	6061      	str	r1, [r4, #4]
 800e4da:	60a2      	str	r2, [r4, #8]
			break;
 800e4dc:	f00e b988 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 368 :
			strcpy(p->name,"HUFFING BUBBLES");
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e4e6:	4a94      	ldr	r2, [pc, #592]	; (800e738 <problem_fetch+0xcda8>)
 800e4e8:	461c      	mov	r4, r3
 800e4ea:	4615      	mov	r5, r2
 800e4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e4ee:	6020      	str	r0, [r4, #0]
 800e4f0:	6061      	str	r1, [r4, #4]
 800e4f2:	60a2      	str	r2, [r4, #8]
 800e4f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e4fc:	4a8f      	ldr	r2, [pc, #572]	; (800e73c <problem_fetch+0xcdac>)
 800e4fe:	6810      	ldr	r0, [r2, #0]
 800e500:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2206      	movs	r2, #6
 800e506:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,F,B,D,E,A");
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	33a4      	adds	r3, #164	; 0xa4
 800e50c:	4a8c      	ldr	r2, [pc, #560]	; (800e740 <problem_fetch+0xcdb0>)
 800e50e:	461c      	mov	r4, r3
 800e510:	4613      	mov	r3, r2
 800e512:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e514:	6020      	str	r0, [r4, #0]
 800e516:	6061      	str	r1, [r4, #4]
 800e518:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,11,10,15,6,18");
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	3304      	adds	r3, #4
 800e51e:	4a89      	ldr	r2, [pc, #548]	; (800e744 <problem_fetch+0xcdb4>)
 800e520:	461c      	mov	r4, r3
 800e522:	4615      	mov	r5, r2
 800e524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e526:	6020      	str	r0, [r4, #0]
 800e528:	6061      	str	r1, [r4, #4]
 800e52a:	60a2      	str	r2, [r4, #8]
 800e52c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e534:	4a7f      	ldr	r2, [pc, #508]	; (800e734 <problem_fetch+0xcda4>)
 800e536:	461c      	mov	r4, r3
 800e538:	4613      	mov	r3, r2
 800e53a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e53c:	6020      	str	r0, [r4, #0]
 800e53e:	6061      	str	r1, [r4, #4]
 800e540:	60a2      	str	r2, [r4, #8]
			break;
 800e542:	f00e b955 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 369 :
			strcpy(p->name,"A SIDE OF FRIES?");
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e54c:	4a7e      	ldr	r2, [pc, #504]	; (800e748 <problem_fetch+0xcdb8>)
 800e54e:	461d      	mov	r5, r3
 800e550:	4614      	mov	r4, r2
 800e552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e554:	6028      	str	r0, [r5, #0]
 800e556:	6069      	str	r1, [r5, #4]
 800e558:	60aa      	str	r2, [r5, #8]
 800e55a:	60eb      	str	r3, [r5, #12]
 800e55c:	7823      	ldrb	r3, [r4, #0]
 800e55e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e566:	4a79      	ldr	r2, [pc, #484]	; (800e74c <problem_fetch+0xcdbc>)
 800e568:	8811      	ldrh	r1, [r2, #0]
 800e56a:	7892      	ldrb	r2, [r2, #2]
 800e56c:	8019      	strh	r1, [r3, #0]
 800e56e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2205      	movs	r2, #5
 800e574:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,G,I");
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	33a4      	adds	r3, #164	; 0xa4
 800e57a:	4975      	ldr	r1, [pc, #468]	; (800e750 <problem_fetch+0xcdc0>)
 800e57c:	461a      	mov	r2, r3
 800e57e:	460b      	mov	r3, r1
 800e580:	cb03      	ldmia	r3!, {r0, r1}
 800e582:	6010      	str	r0, [r2, #0]
 800e584:	6051      	str	r1, [r2, #4]
 800e586:	881b      	ldrh	r3, [r3, #0]
 800e588:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	3304      	adds	r3, #4
 800e58e:	4a71      	ldr	r2, [pc, #452]	; (800e754 <problem_fetch+0xcdc4>)
 800e590:	461c      	mov	r4, r3
 800e592:	4613      	mov	r3, r2
 800e594:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e596:	6020      	str	r0, [r4, #0]
 800e598:	6061      	str	r1, [r4, #4]
 800e59a:	60a2      	str	r2, [r4, #8]
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e5a6:	496c      	ldr	r1, [pc, #432]	; (800e758 <problem_fetch+0xcdc8>)
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	460b      	mov	r3, r1
 800e5ac:	cb03      	ldmia	r3!, {r0, r1}
 800e5ae:	6010      	str	r0, [r2, #0]
 800e5b0:	6051      	str	r1, [r2, #4]
 800e5b2:	881b      	ldrh	r3, [r3, #0]
 800e5b4:	8113      	strh	r3, [r2, #8]
			break;
 800e5b6:	f00e b91b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 370 :
			strcpy(p->name,"PINCH WARM UP");
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e5c0:	4a66      	ldr	r2, [pc, #408]	; (800e75c <problem_fetch+0xcdcc>)
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	4613      	mov	r3, r2
 800e5c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5c8:	6020      	str	r0, [r4, #0]
 800e5ca:	6061      	str	r1, [r4, #4]
 800e5cc:	60a2      	str	r2, [r4, #8]
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e5d8:	4a61      	ldr	r2, [pc, #388]	; (800e760 <problem_fetch+0xcdd0>)
 800e5da:	6810      	ldr	r0, [r2, #0]
 800e5dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2208      	movs	r2, #8
 800e5e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,A,D");
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	33a4      	adds	r3, #164	; 0xa4
 800e5e8:	4a5e      	ldr	r2, [pc, #376]	; (800e764 <problem_fetch+0xcdd4>)
 800e5ea:	461c      	mov	r4, r3
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5f0:	6020      	str	r0, [r4, #0]
 800e5f2:	6061      	str	r1, [r4, #4]
 800e5f4:	60a2      	str	r2, [r4, #8]
 800e5f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,14,18");
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4a5a      	ldr	r2, [pc, #360]	; (800e768 <problem_fetch+0xcdd8>)
 800e5fe:	461d      	mov	r5, r3
 800e600:	4614      	mov	r4, r2
 800e602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e604:	6028      	str	r0, [r5, #0]
 800e606:	6069      	str	r1, [r5, #4]
 800e608:	60aa      	str	r2, [r5, #8]
 800e60a:	60eb      	str	r3, [r5, #12]
 800e60c:	6820      	ldr	r0, [r4, #0]
 800e60e:	6128      	str	r0, [r5, #16]
 800e610:	88a3      	ldrh	r3, [r4, #4]
 800e612:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e61a:	4a54      	ldr	r2, [pc, #336]	; (800e76c <problem_fetch+0xcddc>)
 800e61c:	461c      	mov	r4, r3
 800e61e:	4615      	mov	r5, r2
 800e620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e622:	6020      	str	r0, [r4, #0]
 800e624:	6061      	str	r1, [r4, #4]
 800e626:	60a2      	str	r2, [r4, #8]
 800e628:	60e3      	str	r3, [r4, #12]
			break;
 800e62a:	f00e b8e1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 371 :
			strcpy(p->name,"PINCH &AMP; REACH");
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e634:	4a4e      	ldr	r2, [pc, #312]	; (800e770 <problem_fetch+0xcde0>)
 800e636:	461d      	mov	r5, r3
 800e638:	4614      	mov	r4, r2
 800e63a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e63c:	6028      	str	r0, [r5, #0]
 800e63e:	6069      	str	r1, [r5, #4]
 800e640:	60aa      	str	r2, [r5, #8]
 800e642:	60eb      	str	r3, [r5, #12]
 800e644:	8823      	ldrh	r3, [r4, #0]
 800e646:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e64e:	4a44      	ldr	r2, [pc, #272]	; (800e760 <problem_fetch+0xcdd0>)
 800e650:	6810      	ldr	r0, [r2, #0]
 800e652:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2207      	movs	r2, #7
 800e658:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,D");
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	33a4      	adds	r3, #164	; 0xa4
 800e65e:	4a45      	ldr	r2, [pc, #276]	; (800e774 <problem_fetch+0xcde4>)
 800e660:	461c      	mov	r4, r3
 800e662:	4613      	mov	r3, r2
 800e664:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e666:	6020      	str	r0, [r4, #0]
 800e668:	6061      	str	r1, [r4, #4]
 800e66a:	60a2      	str	r2, [r4, #8]
 800e66c:	881b      	ldrh	r3, [r3, #0]
 800e66e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,18");
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3304      	adds	r3, #4
 800e674:	4a40      	ldr	r2, [pc, #256]	; (800e778 <problem_fetch+0xcde8>)
 800e676:	461d      	mov	r5, r3
 800e678:	4614      	mov	r4, r2
 800e67a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e67c:	6028      	str	r0, [r5, #0]
 800e67e:	6069      	str	r1, [r5, #4]
 800e680:	60aa      	str	r2, [r5, #8]
 800e682:	60eb      	str	r3, [r5, #12]
 800e684:	8823      	ldrh	r3, [r4, #0]
 800e686:	78a2      	ldrb	r2, [r4, #2]
 800e688:	822b      	strh	r3, [r5, #16]
 800e68a:	4613      	mov	r3, r2
 800e68c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e694:	4a39      	ldr	r2, [pc, #228]	; (800e77c <problem_fetch+0xcdec>)
 800e696:	461c      	mov	r4, r3
 800e698:	4613      	mov	r3, r2
 800e69a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e69c:	6020      	str	r0, [r4, #0]
 800e69e:	6061      	str	r1, [r4, #4]
 800e6a0:	60a2      	str	r2, [r4, #8]
 800e6a2:	881b      	ldrh	r3, [r3, #0]
 800e6a4:	81a3      	strh	r3, [r4, #12]
			break;
 800e6a6:	f00e b8a3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 372 :
			strcpy(p->name,"LAYBACK WARM UP");
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e6b0:	4a33      	ldr	r2, [pc, #204]	; (800e780 <problem_fetch+0xcdf0>)
 800e6b2:	461c      	mov	r4, r3
 800e6b4:	4615      	mov	r5, r2
 800e6b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6b8:	6020      	str	r0, [r4, #0]
 800e6ba:	6061      	str	r1, [r4, #4]
 800e6bc:	60a2      	str	r2, [r4, #8]
 800e6be:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e6c6:	4a26      	ldr	r2, [pc, #152]	; (800e760 <problem_fetch+0xcdd0>)
 800e6c8:	6810      	ldr	r0, [r2, #0]
 800e6ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2207      	movs	r2, #7
 800e6d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,A,D");
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	33a4      	adds	r3, #164	; 0xa4
 800e6d6:	4a2b      	ldr	r2, [pc, #172]	; (800e784 <problem_fetch+0xcdf4>)
 800e6d8:	461c      	mov	r4, r3
 800e6da:	4613      	mov	r3, r2
 800e6dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6de:	6020      	str	r0, [r4, #0]
 800e6e0:	6061      	str	r1, [r4, #4]
 800e6e2:	60a2      	str	r2, [r4, #8]
 800e6e4:	881b      	ldrh	r3, [r3, #0]
 800e6e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,11,14,18");
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4a26      	ldr	r2, [pc, #152]	; (800e788 <problem_fetch+0xcdf8>)
 800e6ee:	461d      	mov	r5, r3
 800e6f0:	4614      	mov	r4, r2
 800e6f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e6f4:	6028      	str	r0, [r5, #0]
 800e6f6:	6069      	str	r1, [r5, #4]
 800e6f8:	60aa      	str	r2, [r5, #8]
 800e6fa:	60eb      	str	r3, [r5, #12]
 800e6fc:	8823      	ldrh	r3, [r4, #0]
 800e6fe:	78a2      	ldrb	r2, [r4, #2]
 800e700:	822b      	strh	r3, [r5, #16]
 800e702:	4613      	mov	r3, r2
 800e704:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e70c:	4a1b      	ldr	r2, [pc, #108]	; (800e77c <problem_fetch+0xcdec>)
 800e70e:	461c      	mov	r4, r3
 800e710:	4613      	mov	r3, r2
 800e712:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e714:	6020      	str	r0, [r4, #0]
 800e716:	6061      	str	r1, [r4, #4]
 800e718:	60a2      	str	r2, [r4, #8]
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	81a3      	strh	r3, [r4, #12]
			break;
 800e71e:	f00e b867 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800e722:	bf00      	nop
 800e724:	08028384 	.word	0x08028384
 800e728:	08023d30 	.word	0x08023d30
 800e72c:	08028390 	.word	0x08028390
 800e730:	0802839c 	.word	0x0802839c
 800e734:	08023f2c 	.word	0x08023f2c
 800e738:	080283ac 	.word	0x080283ac
 800e73c:	08023ccc 	.word	0x08023ccc
 800e740:	080283bc 	.word	0x080283bc
 800e744:	080283c8 	.word	0x080283c8
 800e748:	080283d8 	.word	0x080283d8
 800e74c:	08023b50 	.word	0x08023b50
 800e750:	080283ec 	.word	0x080283ec
 800e754:	08027b88 	.word	0x08027b88
 800e758:	0802405c 	.word	0x0802405c
 800e75c:	080283f8 	.word	0x080283f8
 800e760:	08023b90 	.word	0x08023b90
 800e764:	08028408 	.word	0x08028408
 800e768:	08028418 	.word	0x08028418
 800e76c:	08023cb4 	.word	0x08023cb4
 800e770:	08028430 	.word	0x08028430
 800e774:	08028444 	.word	0x08028444
 800e778:	08028454 	.word	0x08028454
 800e77c:	08023c08 	.word	0x08023c08
 800e780:	08028468 	.word	0x08028468
 800e784:	08028478 	.word	0x08028478
 800e788:	08028488 	.word	0x08028488
		case 373 :
			strcpy(p->name,"COMMITTING WARM UP");
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e792:	4ac2      	ldr	r2, [pc, #776]	; (800ea9c <problem_fetch+0xd10c>)
 800e794:	461d      	mov	r5, r3
 800e796:	4614      	mov	r4, r2
 800e798:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e79a:	6028      	str	r0, [r5, #0]
 800e79c:	6069      	str	r1, [r5, #4]
 800e79e:	60aa      	str	r2, [r5, #8]
 800e7a0:	60eb      	str	r3, [r5, #12]
 800e7a2:	8823      	ldrh	r3, [r4, #0]
 800e7a4:	78a2      	ldrb	r2, [r4, #2]
 800e7a6:	822b      	strh	r3, [r5, #16]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e7b2:	4abb      	ldr	r2, [pc, #748]	; (800eaa0 <problem_fetch+0xd110>)
 800e7b4:	6810      	ldr	r0, [r2, #0]
 800e7b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2207      	movs	r2, #7
 800e7bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,I,D");
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	33a4      	adds	r3, #164	; 0xa4
 800e7c2:	4ab8      	ldr	r2, [pc, #736]	; (800eaa4 <problem_fetch+0xd114>)
 800e7c4:	461c      	mov	r4, r3
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e7ca:	6020      	str	r0, [r4, #0]
 800e7cc:	6061      	str	r1, [r4, #4]
 800e7ce:	60a2      	str	r2, [r4, #8]
 800e7d0:	881b      	ldrh	r3, [r3, #0]
 800e7d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,14,18");
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	4ab3      	ldr	r2, [pc, #716]	; (800eaa8 <problem_fetch+0xd118>)
 800e7da:	461d      	mov	r5, r3
 800e7dc:	4614      	mov	r4, r2
 800e7de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7e0:	6028      	str	r0, [r5, #0]
 800e7e2:	6069      	str	r1, [r5, #4]
 800e7e4:	60aa      	str	r2, [r5, #8]
 800e7e6:	60eb      	str	r3, [r5, #12]
 800e7e8:	8823      	ldrh	r3, [r4, #0]
 800e7ea:	78a2      	ldrb	r2, [r4, #2]
 800e7ec:	822b      	strh	r3, [r5, #16]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e7f8:	4aac      	ldr	r2, [pc, #688]	; (800eaac <problem_fetch+0xd11c>)
 800e7fa:	461c      	mov	r4, r3
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e800:	6020      	str	r0, [r4, #0]
 800e802:	6061      	str	r1, [r4, #4]
 800e804:	60a2      	str	r2, [r4, #8]
 800e806:	881b      	ldrh	r3, [r3, #0]
 800e808:	81a3      	strh	r3, [r4, #12]
			break;
 800e80a:	f00d bff1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 374 :
			strcpy(p->name,"APEX");
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e814:	4aa6      	ldr	r2, [pc, #664]	; (800eab0 <problem_fetch+0xd120>)
 800e816:	6810      	ldr	r0, [r2, #0]
 800e818:	6018      	str	r0, [r3, #0]
 800e81a:	7912      	ldrb	r2, [r2, #4]
 800e81c:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e824:	4aa3      	ldr	r2, [pc, #652]	; (800eab4 <problem_fetch+0xd124>)
 800e826:	8811      	ldrh	r1, [r2, #0]
 800e828:	7892      	ldrb	r2, [r2, #2]
 800e82a:	8019      	strh	r1, [r3, #0]
 800e82c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2204      	movs	r2, #4
 800e832:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,I");
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	33a4      	adds	r3, #164	; 0xa4
 800e838:	499f      	ldr	r1, [pc, #636]	; (800eab8 <problem_fetch+0xd128>)
 800e83a:	461a      	mov	r2, r3
 800e83c:	460b      	mov	r3, r1
 800e83e:	cb03      	ldmia	r3!, {r0, r1}
 800e840:	6010      	str	r0, [r2, #0]
 800e842:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3304      	adds	r3, #4
 800e848:	499c      	ldr	r1, [pc, #624]	; (800eabc <problem_fetch+0xd12c>)
 800e84a:	461a      	mov	r2, r3
 800e84c:	460b      	mov	r3, r1
 800e84e:	cb03      	ldmia	r3!, {r0, r1}
 800e850:	6010      	str	r0, [r2, #0]
 800e852:	6051      	str	r1, [r2, #4]
 800e854:	8819      	ldrh	r1, [r3, #0]
 800e856:	789b      	ldrb	r3, [r3, #2]
 800e858:	8111      	strh	r1, [r2, #8]
 800e85a:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e862:	4997      	ldr	r1, [pc, #604]	; (800eac0 <problem_fetch+0xd130>)
 800e864:	461a      	mov	r2, r3
 800e866:	460b      	mov	r3, r1
 800e868:	cb03      	ldmia	r3!, {r0, r1}
 800e86a:	6010      	str	r0, [r2, #0]
 800e86c:	6051      	str	r1, [r2, #4]
			break;
 800e86e:	f00d bfbf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 375 :
			strcpy(p->name,"MEH");
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e878:	4a92      	ldr	r2, [pc, #584]	; (800eac4 <problem_fetch+0xd134>)
 800e87a:	6810      	ldr	r0, [r2, #0]
 800e87c:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e884:	4a86      	ldr	r2, [pc, #536]	; (800eaa0 <problem_fetch+0xd110>)
 800e886:	6810      	ldr	r0, [r2, #0]
 800e888:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2207      	movs	r2, #7
 800e88e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,D,F,G,I");
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	33a4      	adds	r3, #164	; 0xa4
 800e894:	4a8c      	ldr	r2, [pc, #560]	; (800eac8 <problem_fetch+0xd138>)
 800e896:	461c      	mov	r4, r3
 800e898:	4613      	mov	r3, r2
 800e89a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e89c:	6020      	str	r0, [r4, #0]
 800e89e:	6061      	str	r1, [r4, #4]
 800e8a0:	60a2      	str	r2, [r4, #8]
 800e8a2:	881b      	ldrh	r3, [r3, #0]
 800e8a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,13,15,18");
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	3304      	adds	r3, #4
 800e8aa:	4a88      	ldr	r2, [pc, #544]	; (800eacc <problem_fetch+0xd13c>)
 800e8ac:	461d      	mov	r5, r3
 800e8ae:	4614      	mov	r4, r2
 800e8b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8b2:	6028      	str	r0, [r5, #0]
 800e8b4:	6069      	str	r1, [r5, #4]
 800e8b6:	60aa      	str	r2, [r5, #8]
 800e8b8:	60eb      	str	r3, [r5, #12]
 800e8ba:	8823      	ldrh	r3, [r4, #0]
 800e8bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e8c4:	4a79      	ldr	r2, [pc, #484]	; (800eaac <problem_fetch+0xd11c>)
 800e8c6:	461c      	mov	r4, r3
 800e8c8:	4613      	mov	r3, r2
 800e8ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8cc:	6020      	str	r0, [r4, #0]
 800e8ce:	6061      	str	r1, [r4, #4]
 800e8d0:	60a2      	str	r2, [r4, #8]
 800e8d2:	881b      	ldrh	r3, [r3, #0]
 800e8d4:	81a3      	strh	r3, [r4, #12]
			break;
 800e8d6:	f00d bf8b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 376 :
			strcpy(p->name,"TE LA TAMALANCH");
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e8e0:	4a7b      	ldr	r2, [pc, #492]	; (800ead0 <problem_fetch+0xd140>)
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	4615      	mov	r5, r2
 800e8e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8e8:	6020      	str	r0, [r4, #0]
 800e8ea:	6061      	str	r1, [r4, #4]
 800e8ec:	60a2      	str	r2, [r4, #8]
 800e8ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e8f6:	4a77      	ldr	r2, [pc, #476]	; (800ead4 <problem_fetch+0xd144>)
 800e8f8:	6810      	ldr	r0, [r2, #0]
 800e8fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2206      	movs	r2, #6
 800e900:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,D,D,A");
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	33a4      	adds	r3, #164	; 0xa4
 800e906:	4a74      	ldr	r2, [pc, #464]	; (800ead8 <problem_fetch+0xd148>)
 800e908:	461c      	mov	r4, r3
 800e90a:	4613      	mov	r3, r2
 800e90c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e90e:	6020      	str	r0, [r4, #0]
 800e910:	6061      	str	r1, [r4, #4]
 800e912:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,15,18");
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	3304      	adds	r3, #4
 800e918:	4a70      	ldr	r2, [pc, #448]	; (800eadc <problem_fetch+0xd14c>)
 800e91a:	461c      	mov	r4, r3
 800e91c:	4613      	mov	r3, r2
 800e91e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e920:	6020      	str	r0, [r4, #0]
 800e922:	6061      	str	r1, [r4, #4]
 800e924:	60a2      	str	r2, [r4, #8]
 800e926:	881a      	ldrh	r2, [r3, #0]
 800e928:	789b      	ldrb	r3, [r3, #2]
 800e92a:	81a2      	strh	r2, [r4, #12]
 800e92c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e934:	4a6a      	ldr	r2, [pc, #424]	; (800eae0 <problem_fetch+0xd150>)
 800e936:	461c      	mov	r4, r3
 800e938:	4613      	mov	r3, r2
 800e93a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e93c:	6020      	str	r0, [r4, #0]
 800e93e:	6061      	str	r1, [r4, #4]
 800e940:	60a2      	str	r2, [r4, #8]
			break;
 800e942:	f00d bf55 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 377 :
			strcpy(p->name,"BITE YOUR NAILS");
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e94c:	4a65      	ldr	r2, [pc, #404]	; (800eae4 <problem_fetch+0xd154>)
 800e94e:	461c      	mov	r4, r3
 800e950:	4615      	mov	r5, r2
 800e952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e954:	6020      	str	r0, [r4, #0]
 800e956:	6061      	str	r1, [r4, #4]
 800e958:	60a2      	str	r2, [r4, #8]
 800e95a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e962:	4a61      	ldr	r2, [pc, #388]	; (800eae8 <problem_fetch+0xd158>)
 800e964:	8811      	ldrh	r1, [r2, #0]
 800e966:	7892      	ldrb	r2, [r2, #2]
 800e968:	8019      	strh	r1, [r3, #0]
 800e96a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2206      	movs	r2, #6
 800e970:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,C,E,D");
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	33a4      	adds	r3, #164	; 0xa4
 800e976:	4a5d      	ldr	r2, [pc, #372]	; (800eaec <problem_fetch+0xd15c>)
 800e978:	461c      	mov	r4, r3
 800e97a:	4613      	mov	r3, r2
 800e97c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e97e:	6020      	str	r0, [r4, #0]
 800e980:	6061      	str	r1, [r4, #4]
 800e982:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,13,16,18");
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3304      	adds	r3, #4
 800e988:	4a59      	ldr	r2, [pc, #356]	; (800eaf0 <problem_fetch+0xd160>)
 800e98a:	461c      	mov	r4, r3
 800e98c:	4613      	mov	r3, r2
 800e98e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e990:	6020      	str	r0, [r4, #0]
 800e992:	6061      	str	r1, [r4, #4]
 800e994:	60a2      	str	r2, [r4, #8]
 800e996:	881a      	ldrh	r2, [r3, #0]
 800e998:	789b      	ldrb	r3, [r3, #2]
 800e99a:	81a2      	strh	r2, [r4, #12]
 800e99c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e9a4:	4a53      	ldr	r2, [pc, #332]	; (800eaf4 <problem_fetch+0xd164>)
 800e9a6:	461c      	mov	r4, r3
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9ac:	6020      	str	r0, [r4, #0]
 800e9ae:	6061      	str	r1, [r4, #4]
 800e9b0:	60a2      	str	r2, [r4, #8]
			break;
 800e9b2:	f00d bf1d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 378 :
			strcpy(p->name,"BIT OF SIDE");
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e9bc:	4a4e      	ldr	r2, [pc, #312]	; (800eaf8 <problem_fetch+0xd168>)
 800e9be:	461c      	mov	r4, r3
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9c4:	6020      	str	r0, [r4, #0]
 800e9c6:	6061      	str	r1, [r4, #4]
 800e9c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e9d0:	4a33      	ldr	r2, [pc, #204]	; (800eaa0 <problem_fetch+0xd110>)
 800e9d2:	6810      	ldr	r0, [r2, #0]
 800e9d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2206      	movs	r2, #6
 800e9da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,A");
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	33a4      	adds	r3, #164	; 0xa4
 800e9e0:	4a46      	ldr	r2, [pc, #280]	; (800eafc <problem_fetch+0xd16c>)
 800e9e2:	461c      	mov	r4, r3
 800e9e4:	4613      	mov	r3, r2
 800e9e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9e8:	6020      	str	r0, [r4, #0]
 800e9ea:	6061      	str	r1, [r4, #4]
 800e9ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	3304      	adds	r3, #4
 800e9f2:	4a43      	ldr	r2, [pc, #268]	; (800eb00 <problem_fetch+0xd170>)
 800e9f4:	461c      	mov	r4, r3
 800e9f6:	4615      	mov	r5, r2
 800e9f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9fa:	6020      	str	r0, [r4, #0]
 800e9fc:	6061      	str	r1, [r4, #4]
 800e9fe:	60a2      	str	r2, [r4, #8]
 800ea00:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ea08:	4a3a      	ldr	r2, [pc, #232]	; (800eaf4 <problem_fetch+0xd164>)
 800ea0a:	461c      	mov	r4, r3
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea10:	6020      	str	r0, [r4, #0]
 800ea12:	6061      	str	r1, [r4, #4]
 800ea14:	60a2      	str	r2, [r4, #8]
			break;
 800ea16:	f00d beeb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 379 :
			strcpy(p->name,"LIZARD 3");
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea20:	4938      	ldr	r1, [pc, #224]	; (800eb04 <problem_fetch+0xd174>)
 800ea22:	461a      	mov	r2, r3
 800ea24:	460b      	mov	r3, r1
 800ea26:	cb03      	ldmia	r3!, {r0, r1}
 800ea28:	6010      	str	r0, [r2, #0]
 800ea2a:	6051      	str	r1, [r2, #4]
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ea36:	4a34      	ldr	r2, [pc, #208]	; (800eb08 <problem_fetch+0xd178>)
 800ea38:	6810      	ldr	r0, [r2, #0]
 800ea3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	220c      	movs	r2, #12
 800ea40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,J,I,H,F,E,C,D,B,A,A");
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	33a4      	adds	r3, #164	; 0xa4
 800ea46:	4a31      	ldr	r2, [pc, #196]	; (800eb0c <problem_fetch+0xd17c>)
 800ea48:	461d      	mov	r5, r3
 800ea4a:	4614      	mov	r4, r2
 800ea4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea4e:	6028      	str	r0, [r5, #0]
 800ea50:	6069      	str	r1, [r5, #4]
 800ea52:	60aa      	str	r2, [r5, #8]
 800ea54:	60eb      	str	r3, [r5, #12]
 800ea56:	cc03      	ldmia	r4!, {r0, r1}
 800ea58:	6128      	str	r0, [r5, #16]
 800ea5a:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"4,5,5,10,10,11,12,13,15,15,9,18");
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3304      	adds	r3, #4
 800ea60:	4a2b      	ldr	r2, [pc, #172]	; (800eb10 <problem_fetch+0xd180>)
 800ea62:	461c      	mov	r4, r3
 800ea64:	4615      	mov	r5, r2
 800ea66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea68:	6020      	str	r0, [r4, #0]
 800ea6a:	6061      	str	r1, [r4, #4]
 800ea6c:	60a2      	str	r2, [r4, #8]
 800ea6e:	60e3      	str	r3, [r4, #12]
 800ea70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea72:	6120      	str	r0, [r4, #16]
 800ea74:	6161      	str	r1, [r4, #20]
 800ea76:	61a2      	str	r2, [r4, #24]
 800ea78:	61e3      	str	r3, [r4, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,e");
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ea80:	4a24      	ldr	r2, [pc, #144]	; (800eb14 <problem_fetch+0xd184>)
 800ea82:	461d      	mov	r5, r3
 800ea84:	4614      	mov	r4, r2
 800ea86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ea88:	6028      	str	r0, [r5, #0]
 800ea8a:	6069      	str	r1, [r5, #4]
 800ea8c:	60aa      	str	r2, [r5, #8]
 800ea8e:	60eb      	str	r3, [r5, #12]
 800ea90:	cc03      	ldmia	r4!, {r0, r1}
 800ea92:	6128      	str	r0, [r5, #16]
 800ea94:	6169      	str	r1, [r5, #20]
			break;
 800ea96:	f00d beab 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800ea9a:	bf00      	nop
 800ea9c:	0802849c 	.word	0x0802849c
 800eaa0:	08023b90 	.word	0x08023b90
 800eaa4:	080284b0 	.word	0x080284b0
 800eaa8:	080284c0 	.word	0x080284c0
 800eaac:	08023c08 	.word	0x08023c08
 800eab0:	080284d4 	.word	0x080284d4
 800eab4:	080243c4 	.word	0x080243c4
 800eab8:	080284dc 	.word	0x080284dc
 800eabc:	08027b1c 	.word	0x08027b1c
 800eac0:	08023ce4 	.word	0x08023ce4
 800eac4:	080284e4 	.word	0x080284e4
 800eac8:	080284e8 	.word	0x080284e8
 800eacc:	080284f8 	.word	0x080284f8
 800ead0:	0802850c 	.word	0x0802850c
 800ead4:	08023d30 	.word	0x08023d30
 800ead8:	0802851c 	.word	0x0802851c
 800eadc:	08028528 	.word	0x08028528
 800eae0:	08023f2c 	.word	0x08023f2c
 800eae4:	08028538 	.word	0x08028538
 800eae8:	08024288 	.word	0x08024288
 800eaec:	08028548 	.word	0x08028548
 800eaf0:	08028554 	.word	0x08028554
 800eaf4:	08023b70 	.word	0x08023b70
 800eaf8:	08028564 	.word	0x08028564
 800eafc:	08028570 	.word	0x08028570
 800eb00:	0802857c 	.word	0x0802857c
 800eb04:	0802858c 	.word	0x0802858c
 800eb08:	08023c28 	.word	0x08023c28
 800eb0c:	08028598 	.word	0x08028598
 800eb10:	080285b0 	.word	0x080285b0
 800eb14:	080285d0 	.word	0x080285d0
		case 380 :
			strcpy(p->name,"MOLOTOV COCKTEASE");
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb1e:	4aab      	ldr	r2, [pc, #684]	; (800edcc <problem_fetch+0xd43c>)
 800eb20:	461d      	mov	r5, r3
 800eb22:	4614      	mov	r4, r2
 800eb24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb26:	6028      	str	r0, [r5, #0]
 800eb28:	6069      	str	r1, [r5, #4]
 800eb2a:	60aa      	str	r2, [r5, #8]
 800eb2c:	60eb      	str	r3, [r5, #12]
 800eb2e:	8823      	ldrh	r3, [r4, #0]
 800eb30:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eb38:	4aa5      	ldr	r2, [pc, #660]	; (800edd0 <problem_fetch+0xd440>)
 800eb3a:	6810      	ldr	r0, [r2, #0]
 800eb3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2206      	movs	r2, #6
 800eb42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,G,K,I");
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	33a4      	adds	r3, #164	; 0xa4
 800eb48:	4aa2      	ldr	r2, [pc, #648]	; (800edd4 <problem_fetch+0xd444>)
 800eb4a:	461c      	mov	r4, r3
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb50:	6020      	str	r0, [r4, #0]
 800eb52:	6061      	str	r1, [r4, #4]
 800eb54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,7,14,14,18");
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	4a9f      	ldr	r2, [pc, #636]	; (800edd8 <problem_fetch+0xd448>)
 800eb5c:	461c      	mov	r4, r3
 800eb5e:	4613      	mov	r3, r2
 800eb60:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb62:	6020      	str	r0, [r4, #0]
 800eb64:	6061      	str	r1, [r4, #4]
 800eb66:	60a2      	str	r2, [r4, #8]
 800eb68:	881a      	ldrh	r2, [r3, #0]
 800eb6a:	789b      	ldrb	r3, [r3, #2]
 800eb6c:	81a2      	strh	r2, [r4, #12]
 800eb6e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800eb76:	4a99      	ldr	r2, [pc, #612]	; (800eddc <problem_fetch+0xd44c>)
 800eb78:	461c      	mov	r4, r3
 800eb7a:	4613      	mov	r3, r2
 800eb7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb7e:	6020      	str	r0, [r4, #0]
 800eb80:	6061      	str	r1, [r4, #4]
 800eb82:	60a2      	str	r2, [r4, #8]
			break;
 800eb84:	f00d be34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 381 :
			strcpy(p->name,"BIROBIDJAN");
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb8e:	4994      	ldr	r1, [pc, #592]	; (800ede0 <problem_fetch+0xd450>)
 800eb90:	461a      	mov	r2, r3
 800eb92:	460b      	mov	r3, r1
 800eb94:	cb03      	ldmia	r3!, {r0, r1}
 800eb96:	6010      	str	r0, [r2, #0]
 800eb98:	6051      	str	r1, [r2, #4]
 800eb9a:	8819      	ldrh	r1, [r3, #0]
 800eb9c:	789b      	ldrb	r3, [r3, #2]
 800eb9e:	8111      	strh	r1, [r2, #8]
 800eba0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eba8:	4a8e      	ldr	r2, [pc, #568]	; (800ede4 <problem_fetch+0xd454>)
 800ebaa:	6810      	ldr	r0, [r2, #0]
 800ebac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2206      	movs	r2, #6
 800ebb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,A");
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	33a4      	adds	r3, #164	; 0xa4
 800ebb8:	4a8b      	ldr	r2, [pc, #556]	; (800ede8 <problem_fetch+0xd458>)
 800ebba:	461c      	mov	r4, r3
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebc0:	6020      	str	r0, [r4, #0]
 800ebc2:	6061      	str	r1, [r4, #4]
 800ebc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3304      	adds	r3, #4
 800ebca:	4a88      	ldr	r2, [pc, #544]	; (800edec <problem_fetch+0xd45c>)
 800ebcc:	461c      	mov	r4, r3
 800ebce:	4613      	mov	r3, r2
 800ebd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebd2:	6020      	str	r0, [r4, #0]
 800ebd4:	6061      	str	r1, [r4, #4]
 800ebd6:	60a2      	str	r2, [r4, #8]
 800ebd8:	881a      	ldrh	r2, [r3, #0]
 800ebda:	789b      	ldrb	r3, [r3, #2]
 800ebdc:	81a2      	strh	r2, [r4, #12]
 800ebde:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ebe6:	4a7d      	ldr	r2, [pc, #500]	; (800eddc <problem_fetch+0xd44c>)
 800ebe8:	461c      	mov	r4, r3
 800ebea:	4613      	mov	r3, r2
 800ebec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebee:	6020      	str	r0, [r4, #0]
 800ebf0:	6061      	str	r1, [r4, #4]
 800ebf2:	60a2      	str	r2, [r4, #8]
			break;
 800ebf4:	f00d bdfc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 382 :
			strcpy(p->name,"BLACK PANTHER");
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ebfe:	4a7c      	ldr	r2, [pc, #496]	; (800edf0 <problem_fetch+0xd460>)
 800ec00:	461c      	mov	r4, r3
 800ec02:	4613      	mov	r3, r2
 800ec04:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec06:	6020      	str	r0, [r4, #0]
 800ec08:	6061      	str	r1, [r4, #4]
 800ec0a:	60a2      	str	r2, [r4, #8]
 800ec0c:	881b      	ldrh	r3, [r3, #0]
 800ec0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ec16:	4a77      	ldr	r2, [pc, #476]	; (800edf4 <problem_fetch+0xd464>)
 800ec18:	6810      	ldr	r0, [r2, #0]
 800ec1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	220d      	movs	r2, #13
 800ec20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,G,C,B,H,C,D,D,F,G,A");
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	33a4      	adds	r3, #164	; 0xa4
 800ec26:	4a74      	ldr	r2, [pc, #464]	; (800edf8 <problem_fetch+0xd468>)
 800ec28:	461d      	mov	r5, r3
 800ec2a:	4614      	mov	r4, r2
 800ec2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec2e:	6028      	str	r0, [r5, #0]
 800ec30:	6069      	str	r1, [r5, #4]
 800ec32:	60aa      	str	r2, [r5, #8]
 800ec34:	60eb      	str	r3, [r5, #12]
 800ec36:	cc03      	ldmia	r4!, {r0, r1}
 800ec38:	6128      	str	r0, [r5, #16]
 800ec3a:	6169      	str	r1, [r5, #20]
 800ec3c:	8823      	ldrh	r3, [r4, #0]
 800ec3e:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,16,15,8,13,11,15,11,6,18");
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3304      	adds	r3, #4
 800ec44:	4a6d      	ldr	r2, [pc, #436]	; (800edfc <problem_fetch+0xd46c>)
 800ec46:	4614      	mov	r4, r2
 800ec48:	469c      	mov	ip, r3
 800ec4a:	f104 0e20 	add.w	lr, r4, #32
 800ec4e:	4665      	mov	r5, ip
 800ec50:	4626      	mov	r6, r4
 800ec52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ec54:	6028      	str	r0, [r5, #0]
 800ec56:	6069      	str	r1, [r5, #4]
 800ec58:	60aa      	str	r2, [r5, #8]
 800ec5a:	60eb      	str	r3, [r5, #12]
 800ec5c:	3410      	adds	r4, #16
 800ec5e:	f10c 0c10 	add.w	ip, ip, #16
 800ec62:	4574      	cmp	r4, lr
 800ec64:	d1f3      	bne.n	800ec4e <problem_fetch+0xd2be>
 800ec66:	4663      	mov	r3, ip
 800ec68:	4622      	mov	r2, r4
 800ec6a:	7812      	ldrb	r2, [r2, #0]
 800ec6c:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ec74:	4a62      	ldr	r2, [pc, #392]	; (800ee00 <problem_fetch+0xd470>)
 800ec76:	461d      	mov	r5, r3
 800ec78:	4614      	mov	r4, r2
 800ec7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ec7c:	6028      	str	r0, [r5, #0]
 800ec7e:	6069      	str	r1, [r5, #4]
 800ec80:	60aa      	str	r2, [r5, #8]
 800ec82:	60eb      	str	r3, [r5, #12]
 800ec84:	cc03      	ldmia	r4!, {r0, r1}
 800ec86:	6128      	str	r0, [r5, #16]
 800ec88:	6169      	str	r1, [r5, #20]
 800ec8a:	8823      	ldrh	r3, [r4, #0]
 800ec8c:	832b      	strh	r3, [r5, #24]
			break;
 800ec8e:	f00d bdaf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 383 :
			strcpy(p->name,"HOLE IN FOUR");
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec98:	4a5a      	ldr	r2, [pc, #360]	; (800ee04 <problem_fetch+0xd474>)
 800ec9a:	461c      	mov	r4, r3
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eca0:	6020      	str	r0, [r4, #0]
 800eca2:	6061      	str	r1, [r4, #4]
 800eca4:	60a2      	str	r2, [r4, #8]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ecb0:	4a55      	ldr	r2, [pc, #340]	; (800ee08 <problem_fetch+0xd478>)
 800ecb2:	6810      	ldr	r0, [r2, #0]
 800ecb4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2205      	movs	r2, #5
 800ecba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,B,D,A");
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	33a4      	adds	r3, #164	; 0xa4
 800ecc0:	4952      	ldr	r1, [pc, #328]	; (800ee0c <problem_fetch+0xd47c>)
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	cb03      	ldmia	r3!, {r0, r1}
 800ecc8:	6010      	str	r0, [r2, #0]
 800ecca:	6051      	str	r1, [r2, #4]
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	4a4e      	ldr	r2, [pc, #312]	; (800ee10 <problem_fetch+0xd480>)
 800ecd6:	461c      	mov	r4, r3
 800ecd8:	4613      	mov	r3, r2
 800ecda:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ecdc:	6020      	str	r0, [r4, #0]
 800ecde:	6061      	str	r1, [r4, #4]
 800ece0:	60a2      	str	r2, [r4, #8]
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ecec:	4949      	ldr	r1, [pc, #292]	; (800ee14 <problem_fetch+0xd484>)
 800ecee:	461a      	mov	r2, r3
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	cb03      	ldmia	r3!, {r0, r1}
 800ecf4:	6010      	str	r0, [r2, #0]
 800ecf6:	6051      	str	r1, [r2, #4]
 800ecf8:	881b      	ldrh	r3, [r3, #0]
 800ecfa:	8113      	strh	r3, [r2, #8]
			break;
 800ecfc:	f00d bd78 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 384 :
			strcpy(p->name,"POLARIS");
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed06:	4944      	ldr	r1, [pc, #272]	; (800ee18 <problem_fetch+0xd488>)
 800ed08:	461a      	mov	r2, r3
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	cb03      	ldmia	r3!, {r0, r1}
 800ed0e:	6010      	str	r0, [r2, #0]
 800ed10:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed18:	4a3b      	ldr	r2, [pc, #236]	; (800ee08 <problem_fetch+0xd478>)
 800ed1a:	6810      	ldr	r0, [r2, #0]
 800ed1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2206      	movs	r2, #6
 800ed22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D");
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	33a4      	adds	r3, #164	; 0xa4
 800ed28:	4a3c      	ldr	r2, [pc, #240]	; (800ee1c <problem_fetch+0xd48c>)
 800ed2a:	461c      	mov	r4, r3
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed30:	6020      	str	r0, [r4, #0]
 800ed32:	6061      	str	r1, [r4, #4]
 800ed34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,14,18");
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	3304      	adds	r3, #4
 800ed3a:	4a39      	ldr	r2, [pc, #228]	; (800ee20 <problem_fetch+0xd490>)
 800ed3c:	461c      	mov	r4, r3
 800ed3e:	4613      	mov	r3, r2
 800ed40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed42:	6020      	str	r0, [r4, #0]
 800ed44:	6061      	str	r1, [r4, #4]
 800ed46:	60a2      	str	r2, [r4, #8]
 800ed48:	881a      	ldrh	r2, [r3, #0]
 800ed4a:	789b      	ldrb	r3, [r3, #2]
 800ed4c:	81a2      	strh	r2, [r4, #12]
 800ed4e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ed56:	4a21      	ldr	r2, [pc, #132]	; (800eddc <problem_fetch+0xd44c>)
 800ed58:	461c      	mov	r4, r3
 800ed5a:	4613      	mov	r3, r2
 800ed5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed5e:	6020      	str	r0, [r4, #0]
 800ed60:	6061      	str	r1, [r4, #4]
 800ed62:	60a2      	str	r2, [r4, #8]
			break;
 800ed64:	f00d bd44 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 385 :
			strcpy(p->name,"REACHY");
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed6e:	4a2d      	ldr	r2, [pc, #180]	; (800ee24 <problem_fetch+0xd494>)
 800ed70:	6810      	ldr	r0, [r2, #0]
 800ed72:	6018      	str	r0, [r3, #0]
 800ed74:	8891      	ldrh	r1, [r2, #4]
 800ed76:	7992      	ldrb	r2, [r2, #6]
 800ed78:	8099      	strh	r1, [r3, #4]
 800ed7a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed82:	4a1c      	ldr	r2, [pc, #112]	; (800edf4 <problem_fetch+0xd464>)
 800ed84:	6810      	ldr	r0, [r2, #0]
 800ed86:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2206      	movs	r2, #6
 800ed8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,A");
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	33a4      	adds	r3, #164	; 0xa4
 800ed92:	4a25      	ldr	r2, [pc, #148]	; (800ee28 <problem_fetch+0xd498>)
 800ed94:	461c      	mov	r4, r3
 800ed96:	4613      	mov	r3, r2
 800ed98:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed9a:	6020      	str	r0, [r4, #0]
 800ed9c:	6061      	str	r1, [r4, #4]
 800ed9e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,11,15,18");
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3304      	adds	r3, #4
 800eda4:	4a21      	ldr	r2, [pc, #132]	; (800ee2c <problem_fetch+0xd49c>)
 800eda6:	461c      	mov	r4, r3
 800eda8:	4615      	mov	r5, r2
 800edaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800edac:	6020      	str	r0, [r4, #0]
 800edae:	6061      	str	r1, [r4, #4]
 800edb0:	60a2      	str	r2, [r4, #8]
 800edb2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800edba:	4a1d      	ldr	r2, [pc, #116]	; (800ee30 <problem_fetch+0xd4a0>)
 800edbc:	461c      	mov	r4, r3
 800edbe:	4613      	mov	r3, r2
 800edc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800edc2:	6020      	str	r0, [r4, #0]
 800edc4:	6061      	str	r1, [r4, #4]
 800edc6:	60a2      	str	r2, [r4, #8]
			break;
 800edc8:	f00d bd12 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800edcc:	080285e8 	.word	0x080285e8
 800edd0:	0802419c 	.word	0x0802419c
 800edd4:	080285fc 	.word	0x080285fc
 800edd8:	08028608 	.word	0x08028608
 800eddc:	08023f2c 	.word	0x08023f2c
 800ede0:	08028618 	.word	0x08028618
 800ede4:	08023c28 	.word	0x08023c28
 800ede8:	08028624 	.word	0x08028624
 800edec:	08028630 	.word	0x08028630
 800edf0:	08028640 	.word	0x08028640
 800edf4:	08023b90 	.word	0x08023b90
 800edf8:	08028650 	.word	0x08028650
 800edfc:	0802866c 	.word	0x0802866c
 800ee00:	08028690 	.word	0x08028690
 800ee04:	080286ac 	.word	0x080286ac
 800ee08:	08023d30 	.word	0x08023d30
 800ee0c:	080286bc 	.word	0x080286bc
 800ee10:	080286c8 	.word	0x080286c8
 800ee14:	0802405c 	.word	0x0802405c
 800ee18:	080286d8 	.word	0x080286d8
 800ee1c:	080286e0 	.word	0x080286e0
 800ee20:	080286ec 	.word	0x080286ec
 800ee24:	080286fc 	.word	0x080286fc
 800ee28:	08028704 	.word	0x08028704
 800ee2c:	08028710 	.word	0x08028710
 800ee30:	08023b70 	.word	0x08023b70
		case 386 :
			strcpy(p->name,"JUST JUMP AND PINCH");
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ee3a:	4ab7      	ldr	r2, [pc, #732]	; (800f118 <problem_fetch+0xd788>)
 800ee3c:	461d      	mov	r5, r3
 800ee3e:	4614      	mov	r4, r2
 800ee40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee42:	6028      	str	r0, [r5, #0]
 800ee44:	6069      	str	r1, [r5, #4]
 800ee46:	60aa      	str	r2, [r5, #8]
 800ee48:	60eb      	str	r3, [r5, #12]
 800ee4a:	6820      	ldr	r0, [r4, #0]
 800ee4c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ee54:	4ab1      	ldr	r2, [pc, #708]	; (800f11c <problem_fetch+0xd78c>)
 800ee56:	6810      	ldr	r0, [r2, #0]
 800ee58:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,A,D");
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	33a4      	adds	r3, #164	; 0xa4
 800ee64:	49ae      	ldr	r1, [pc, #696]	; (800f120 <problem_fetch+0xd790>)
 800ee66:	461a      	mov	r2, r3
 800ee68:	460b      	mov	r3, r1
 800ee6a:	cb03      	ldmia	r3!, {r0, r1}
 800ee6c:	6010      	str	r0, [r2, #0]
 800ee6e:	6051      	str	r1, [r2, #4]
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3304      	adds	r3, #4
 800ee78:	4aaa      	ldr	r2, [pc, #680]	; (800f124 <problem_fetch+0xd794>)
 800ee7a:	461c      	mov	r4, r3
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee80:	6020      	str	r0, [r4, #0]
 800ee82:	6061      	str	r1, [r4, #4]
 800ee84:	60a2      	str	r2, [r4, #8]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ee90:	49a5      	ldr	r1, [pc, #660]	; (800f128 <problem_fetch+0xd798>)
 800ee92:	461a      	mov	r2, r3
 800ee94:	460b      	mov	r3, r1
 800ee96:	cb03      	ldmia	r3!, {r0, r1}
 800ee98:	6010      	str	r0, [r2, #0]
 800ee9a:	6051      	str	r1, [r2, #4]
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	8113      	strh	r3, [r2, #8]
			break;
 800eea0:	f00d bca6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 387 :
			strcpy(p->name,"JUMP MAN");
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeaa:	49a0      	ldr	r1, [pc, #640]	; (800f12c <problem_fetch+0xd79c>)
 800eeac:	461a      	mov	r2, r3
 800eeae:	460b      	mov	r3, r1
 800eeb0:	cb03      	ldmia	r3!, {r0, r1}
 800eeb2:	6010      	str	r0, [r2, #0]
 800eeb4:	6051      	str	r1, [r2, #4]
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eec0:	4a96      	ldr	r2, [pc, #600]	; (800f11c <problem_fetch+0xd78c>)
 800eec2:	6810      	ldr	r0, [r2, #0]
 800eec4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2206      	movs	r2, #6
 800eeca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,D,D");
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	33a4      	adds	r3, #164	; 0xa4
 800eed0:	4a97      	ldr	r2, [pc, #604]	; (800f130 <problem_fetch+0xd7a0>)
 800eed2:	461c      	mov	r4, r3
 800eed4:	4613      	mov	r3, r2
 800eed6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eed8:	6020      	str	r0, [r4, #0]
 800eeda:	6061      	str	r1, [r4, #4]
 800eedc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,15,15,18");
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	3304      	adds	r3, #4
 800eee2:	4a94      	ldr	r2, [pc, #592]	; (800f134 <problem_fetch+0xd7a4>)
 800eee4:	461c      	mov	r4, r3
 800eee6:	4615      	mov	r5, r2
 800eee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eeea:	6020      	str	r0, [r4, #0]
 800eeec:	6061      	str	r1, [r4, #4]
 800eeee:	60a2      	str	r2, [r4, #8]
 800eef0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800eef8:	4a8f      	ldr	r2, [pc, #572]	; (800f138 <problem_fetch+0xd7a8>)
 800eefa:	461c      	mov	r4, r3
 800eefc:	4613      	mov	r3, r2
 800eefe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef00:	6020      	str	r0, [r4, #0]
 800ef02:	6061      	str	r1, [r4, #4]
 800ef04:	60a2      	str	r2, [r4, #8]
			break;
 800ef06:	f00d bc73 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 388 :
			strcpy(p->name,"BAMBA");
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ef10:	4a8a      	ldr	r2, [pc, #552]	; (800f13c <problem_fetch+0xd7ac>)
 800ef12:	6810      	ldr	r0, [r2, #0]
 800ef14:	6018      	str	r0, [r3, #0]
 800ef16:	8892      	ldrh	r2, [r2, #4]
 800ef18:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef20:	4a87      	ldr	r2, [pc, #540]	; (800f140 <problem_fetch+0xd7b0>)
 800ef22:	8811      	ldrh	r1, [r2, #0]
 800ef24:	7892      	ldrb	r2, [r2, #2]
 800ef26:	8019      	strh	r1, [r3, #0]
 800ef28:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2205      	movs	r2, #5
 800ef2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,E,D");
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	33a4      	adds	r3, #164	; 0xa4
 800ef34:	4983      	ldr	r1, [pc, #524]	; (800f144 <problem_fetch+0xd7b4>)
 800ef36:	461a      	mov	r2, r3
 800ef38:	460b      	mov	r3, r1
 800ef3a:	cb03      	ldmia	r3!, {r0, r1}
 800ef3c:	6010      	str	r0, [r2, #0]
 800ef3e:	6051      	str	r1, [r2, #4]
 800ef40:	881b      	ldrh	r3, [r3, #0]
 800ef42:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,16,18");
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	3304      	adds	r3, #4
 800ef48:	4a7f      	ldr	r2, [pc, #508]	; (800f148 <problem_fetch+0xd7b8>)
 800ef4a:	461c      	mov	r4, r3
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef50:	6020      	str	r0, [r4, #0]
 800ef52:	6061      	str	r1, [r4, #4]
 800ef54:	60a2      	str	r2, [r4, #8]
 800ef56:	881b      	ldrh	r3, [r3, #0]
 800ef58:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ef60:	497a      	ldr	r1, [pc, #488]	; (800f14c <problem_fetch+0xd7bc>)
 800ef62:	461a      	mov	r2, r3
 800ef64:	460b      	mov	r3, r1
 800ef66:	cb03      	ldmia	r3!, {r0, r1}
 800ef68:	6010      	str	r0, [r2, #0]
 800ef6a:	6051      	str	r1, [r2, #4]
 800ef6c:	881b      	ldrh	r3, [r3, #0]
 800ef6e:	8113      	strh	r3, [r2, #8]
			break;
 800ef70:	f00d bc3e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 389 :
			strcpy(p->name,"BO");
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ef7a:	4a75      	ldr	r2, [pc, #468]	; (800f150 <problem_fetch+0xd7c0>)
 800ef7c:	8811      	ldrh	r1, [r2, #0]
 800ef7e:	7892      	ldrb	r2, [r2, #2]
 800ef80:	8019      	strh	r1, [r3, #0]
 800ef82:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef8a:	4a72      	ldr	r2, [pc, #456]	; (800f154 <problem_fetch+0xd7c4>)
 800ef8c:	6810      	ldr	r0, [r2, #0]
 800ef8e:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2204      	movs	r2, #4
 800ef94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,I");
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	33a4      	adds	r3, #164	; 0xa4
 800ef9a:	496f      	ldr	r1, [pc, #444]	; (800f158 <problem_fetch+0xd7c8>)
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	460b      	mov	r3, r1
 800efa0:	cb03      	ldmia	r3!, {r0, r1}
 800efa2:	6010      	str	r0, [r2, #0]
 800efa4:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	3304      	adds	r3, #4
 800efaa:	496c      	ldr	r1, [pc, #432]	; (800f15c <problem_fetch+0xd7cc>)
 800efac:	461a      	mov	r2, r3
 800efae:	460b      	mov	r3, r1
 800efb0:	cb03      	ldmia	r3!, {r0, r1}
 800efb2:	6010      	str	r0, [r2, #0]
 800efb4:	6051      	str	r1, [r2, #4]
 800efb6:	8819      	ldrh	r1, [r3, #0]
 800efb8:	789b      	ldrb	r3, [r3, #2]
 800efba:	8111      	strh	r1, [r2, #8]
 800efbc:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800efc4:	4966      	ldr	r1, [pc, #408]	; (800f160 <problem_fetch+0xd7d0>)
 800efc6:	461a      	mov	r2, r3
 800efc8:	460b      	mov	r3, r1
 800efca:	cb03      	ldmia	r3!, {r0, r1}
 800efcc:	6010      	str	r0, [r2, #0]
 800efce:	6051      	str	r1, [r2, #4]
			break;
 800efd0:	f00d bc0e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 390 :
			strcpy(p->name,"REACH FOR THE SKY");
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800efda:	4a62      	ldr	r2, [pc, #392]	; (800f164 <problem_fetch+0xd7d4>)
 800efdc:	461d      	mov	r5, r3
 800efde:	4614      	mov	r4, r2
 800efe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efe2:	6028      	str	r0, [r5, #0]
 800efe4:	6069      	str	r1, [r5, #4]
 800efe6:	60aa      	str	r2, [r5, #8]
 800efe8:	60eb      	str	r3, [r5, #12]
 800efea:	8823      	ldrh	r3, [r4, #0]
 800efec:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eff4:	4a5c      	ldr	r2, [pc, #368]	; (800f168 <problem_fetch+0xd7d8>)
 800eff6:	8811      	ldrh	r1, [r2, #0]
 800eff8:	7892      	ldrb	r2, [r2, #2]
 800effa:	8019      	strh	r1, [r3, #0]
 800effc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2205      	movs	r2, #5
 800f002:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D");
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	33a4      	adds	r3, #164	; 0xa4
 800f008:	4958      	ldr	r1, [pc, #352]	; (800f16c <problem_fetch+0xd7dc>)
 800f00a:	461a      	mov	r2, r3
 800f00c:	460b      	mov	r3, r1
 800f00e:	cb03      	ldmia	r3!, {r0, r1}
 800f010:	6010      	str	r0, [r2, #0]
 800f012:	6051      	str	r1, [r2, #4]
 800f014:	881b      	ldrh	r3, [r3, #0]
 800f016:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	3304      	adds	r3, #4
 800f01c:	4a54      	ldr	r2, [pc, #336]	; (800f170 <problem_fetch+0xd7e0>)
 800f01e:	461c      	mov	r4, r3
 800f020:	4613      	mov	r3, r2
 800f022:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f024:	6020      	str	r0, [r4, #0]
 800f026:	6061      	str	r1, [r4, #4]
 800f028:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f030:	4946      	ldr	r1, [pc, #280]	; (800f14c <problem_fetch+0xd7bc>)
 800f032:	461a      	mov	r2, r3
 800f034:	460b      	mov	r3, r1
 800f036:	cb03      	ldmia	r3!, {r0, r1}
 800f038:	6010      	str	r0, [r2, #0]
 800f03a:	6051      	str	r1, [r2, #4]
 800f03c:	881b      	ldrh	r3, [r3, #0]
 800f03e:	8113      	strh	r3, [r2, #8]
			break;
 800f040:	f00d bbd6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 391 :
			strcpy(p->name,"CHIVAS");
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f04a:	4a4a      	ldr	r2, [pc, #296]	; (800f174 <problem_fetch+0xd7e4>)
 800f04c:	6810      	ldr	r0, [r2, #0]
 800f04e:	6018      	str	r0, [r3, #0]
 800f050:	8891      	ldrh	r1, [r2, #4]
 800f052:	7992      	ldrb	r2, [r2, #6]
 800f054:	8099      	strh	r1, [r3, #4]
 800f056:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f05e:	4a46      	ldr	r2, [pc, #280]	; (800f178 <problem_fetch+0xd7e8>)
 800f060:	8811      	ldrh	r1, [r2, #0]
 800f062:	7892      	ldrb	r2, [r2, #2]
 800f064:	8019      	strh	r1, [r3, #0]
 800f066:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2204      	movs	r2, #4
 800f06c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,A,A");
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	33a4      	adds	r3, #164	; 0xa4
 800f072:	4942      	ldr	r1, [pc, #264]	; (800f17c <problem_fetch+0xd7ec>)
 800f074:	461a      	mov	r2, r3
 800f076:	460b      	mov	r3, r1
 800f078:	cb03      	ldmia	r3!, {r0, r1}
 800f07a:	6010      	str	r0, [r2, #0]
 800f07c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	3304      	adds	r3, #4
 800f082:	493f      	ldr	r1, [pc, #252]	; (800f180 <problem_fetch+0xd7f0>)
 800f084:	461a      	mov	r2, r3
 800f086:	460b      	mov	r3, r1
 800f088:	cb03      	ldmia	r3!, {r0, r1}
 800f08a:	6010      	str	r0, [r2, #0]
 800f08c:	6051      	str	r1, [r2, #4]
 800f08e:	8819      	ldrh	r1, [r3, #0]
 800f090:	789b      	ldrb	r3, [r3, #2]
 800f092:	8111      	strh	r1, [r2, #8]
 800f094:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f09c:	4930      	ldr	r1, [pc, #192]	; (800f160 <problem_fetch+0xd7d0>)
 800f09e:	461a      	mov	r2, r3
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	cb03      	ldmia	r3!, {r0, r1}
 800f0a4:	6010      	str	r0, [r2, #0]
 800f0a6:	6051      	str	r1, [r2, #4]
			break;
 800f0a8:	f00d bba2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 392 :
			strcpy(p->name,"SPAIN IN VAIN");
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f0b2:	4a34      	ldr	r2, [pc, #208]	; (800f184 <problem_fetch+0xd7f4>)
 800f0b4:	461c      	mov	r4, r3
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0ba:	6020      	str	r0, [r4, #0]
 800f0bc:	6061      	str	r1, [r4, #4]
 800f0be:	60a2      	str	r2, [r4, #8]
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f0ca:	4a27      	ldr	r2, [pc, #156]	; (800f168 <problem_fetch+0xd7d8>)
 800f0cc:	8811      	ldrh	r1, [r2, #0]
 800f0ce:	7892      	ldrb	r2, [r2, #2]
 800f0d0:	8019      	strh	r1, [r3, #0]
 800f0d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2206      	movs	r2, #6
 800f0d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,E,A,D");
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	33a4      	adds	r3, #164	; 0xa4
 800f0de:	4a2a      	ldr	r2, [pc, #168]	; (800f188 <problem_fetch+0xd7f8>)
 800f0e0:	461c      	mov	r4, r3
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0e6:	6020      	str	r0, [r4, #0]
 800f0e8:	6061      	str	r1, [r4, #4]
 800f0ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,12,14,18");
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	3304      	adds	r3, #4
 800f0f0:	4a26      	ldr	r2, [pc, #152]	; (800f18c <problem_fetch+0xd7fc>)
 800f0f2:	461c      	mov	r4, r3
 800f0f4:	4615      	mov	r5, r2
 800f0f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0f8:	6020      	str	r0, [r4, #0]
 800f0fa:	6061      	str	r1, [r4, #4]
 800f0fc:	60a2      	str	r2, [r4, #8]
 800f0fe:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f106:	4a0c      	ldr	r2, [pc, #48]	; (800f138 <problem_fetch+0xd7a8>)
 800f108:	461c      	mov	r4, r3
 800f10a:	4613      	mov	r3, r2
 800f10c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f10e:	6020      	str	r0, [r4, #0]
 800f110:	6061      	str	r1, [r4, #4]
 800f112:	60a2      	str	r2, [r4, #8]
			break;
 800f114:	f00d bb6c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800f118:	08028720 	.word	0x08028720
 800f11c:	08023ccc 	.word	0x08023ccc
 800f120:	08028734 	.word	0x08028734
 800f124:	08027a38 	.word	0x08027a38
 800f128:	08024270 	.word	0x08024270
 800f12c:	08028740 	.word	0x08028740
 800f130:	0802874c 	.word	0x0802874c
 800f134:	08028758 	.word	0x08028758
 800f138:	08023f2c 	.word	0x08023f2c
 800f13c:	08028768 	.word	0x08028768
 800f140:	08023c5c 	.word	0x08023c5c
 800f144:	08028770 	.word	0x08028770
 800f148:	0802877c 	.word	0x0802877c
 800f14c:	0802405c 	.word	0x0802405c
 800f150:	0802878c 	.word	0x0802878c
 800f154:	08023c28 	.word	0x08023c28
 800f158:	08028790 	.word	0x08028790
 800f15c:	08023cd8 	.word	0x08023cd8
 800f160:	08023ce4 	.word	0x08023ce4
 800f164:	08028798 	.word	0x08028798
 800f168:	08023b50 	.word	0x08023b50
 800f16c:	080287ac 	.word	0x080287ac
 800f170:	0802498c 	.word	0x0802498c
 800f174:	080287b8 	.word	0x080287b8
 800f178:	08024288 	.word	0x08024288
 800f17c:	080287c0 	.word	0x080287c0
 800f180:	08027b1c 	.word	0x08027b1c
 800f184:	080287c8 	.word	0x080287c8
 800f188:	080287d8 	.word	0x080287d8
 800f18c:	080287e4 	.word	0x080287e4
		case 393 :
			strcpy(p->name,"LE VOYAGE");
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f196:	49ac      	ldr	r1, [pc, #688]	; (800f448 <problem_fetch+0xdab8>)
 800f198:	461a      	mov	r2, r3
 800f19a:	460b      	mov	r3, r1
 800f19c:	cb03      	ldmia	r3!, {r0, r1}
 800f19e:	6010      	str	r0, [r2, #0]
 800f1a0:	6051      	str	r1, [r2, #4]
 800f1a2:	881b      	ldrh	r3, [r3, #0]
 800f1a4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f1ac:	4aa7      	ldr	r2, [pc, #668]	; (800f44c <problem_fetch+0xdabc>)
 800f1ae:	8811      	ldrh	r1, [r2, #0]
 800f1b0:	7892      	ldrb	r2, [r2, #2]
 800f1b2:	8019      	strh	r1, [r3, #0]
 800f1b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2206      	movs	r2, #6
 800f1ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,A,C,D");
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	33a4      	adds	r3, #164	; 0xa4
 800f1c0:	4aa3      	ldr	r2, [pc, #652]	; (800f450 <problem_fetch+0xdac0>)
 800f1c2:	461c      	mov	r4, r3
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1c8:	6020      	str	r0, [r4, #0]
 800f1ca:	6061      	str	r1, [r4, #4]
 800f1cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,8,18");
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	3304      	adds	r3, #4
 800f1d2:	4aa0      	ldr	r2, [pc, #640]	; (800f454 <problem_fetch+0xdac4>)
 800f1d4:	461c      	mov	r4, r3
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1da:	6020      	str	r0, [r4, #0]
 800f1dc:	6061      	str	r1, [r4, #4]
 800f1de:	60a2      	str	r2, [r4, #8]
 800f1e0:	881a      	ldrh	r2, [r3, #0]
 800f1e2:	789b      	ldrb	r3, [r3, #2]
 800f1e4:	81a2      	strh	r2, [r4, #12]
 800f1e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f1ee:	4a9a      	ldr	r2, [pc, #616]	; (800f458 <problem_fetch+0xdac8>)
 800f1f0:	461c      	mov	r4, r3
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f1f6:	6020      	str	r0, [r4, #0]
 800f1f8:	6061      	str	r1, [r4, #4]
 800f1fa:	60a2      	str	r2, [r4, #8]
			break;
 800f1fc:	f00d baf8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 394 :
			strcpy(p->name,"SOFT LIKE BUTTER");
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f206:	4a95      	ldr	r2, [pc, #596]	; (800f45c <problem_fetch+0xdacc>)
 800f208:	461d      	mov	r5, r3
 800f20a:	4614      	mov	r4, r2
 800f20c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f20e:	6028      	str	r0, [r5, #0]
 800f210:	6069      	str	r1, [r5, #4]
 800f212:	60aa      	str	r2, [r5, #8]
 800f214:	60eb      	str	r3, [r5, #12]
 800f216:	7823      	ldrb	r3, [r4, #0]
 800f218:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f220:	4a8a      	ldr	r2, [pc, #552]	; (800f44c <problem_fetch+0xdabc>)
 800f222:	8811      	ldrh	r1, [r2, #0]
 800f224:	7892      	ldrb	r2, [r2, #2]
 800f226:	8019      	strh	r1, [r3, #0]
 800f228:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	2208      	movs	r2, #8
 800f22e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,J,E,G,D");
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	33a4      	adds	r3, #164	; 0xa4
 800f234:	4a8a      	ldr	r2, [pc, #552]	; (800f460 <problem_fetch+0xdad0>)
 800f236:	461c      	mov	r4, r3
 800f238:	4615      	mov	r5, r2
 800f23a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f23c:	6020      	str	r0, [r4, #0]
 800f23e:	6061      	str	r1, [r4, #4]
 800f240:	60a2      	str	r2, [r4, #8]
 800f242:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,14,17,18");
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	3304      	adds	r3, #4
 800f248:	4a86      	ldr	r2, [pc, #536]	; (800f464 <problem_fetch+0xdad4>)
 800f24a:	461d      	mov	r5, r3
 800f24c:	4614      	mov	r4, r2
 800f24e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f250:	6028      	str	r0, [r5, #0]
 800f252:	6069      	str	r1, [r5, #4]
 800f254:	60aa      	str	r2, [r5, #8]
 800f256:	60eb      	str	r3, [r5, #12]
 800f258:	6820      	ldr	r0, [r4, #0]
 800f25a:	6128      	str	r0, [r5, #16]
 800f25c:	88a3      	ldrh	r3, [r4, #4]
 800f25e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f266:	4a80      	ldr	r2, [pc, #512]	; (800f468 <problem_fetch+0xdad8>)
 800f268:	461c      	mov	r4, r3
 800f26a:	4615      	mov	r5, r2
 800f26c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f26e:	6020      	str	r0, [r4, #0]
 800f270:	6061      	str	r1, [r4, #4]
 800f272:	60a2      	str	r2, [r4, #8]
 800f274:	60e3      	str	r3, [r4, #12]
			break;
 800f276:	f00d babb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 395 :
			strcpy(p->name,"PINCHY PINCH");
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f280:	4a7a      	ldr	r2, [pc, #488]	; (800f46c <problem_fetch+0xdadc>)
 800f282:	461c      	mov	r4, r3
 800f284:	4613      	mov	r3, r2
 800f286:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f288:	6020      	str	r0, [r4, #0]
 800f28a:	6061      	str	r1, [r4, #4]
 800f28c:	60a2      	str	r2, [r4, #8]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f298:	4a75      	ldr	r2, [pc, #468]	; (800f470 <problem_fetch+0xdae0>)
 800f29a:	6810      	ldr	r0, [r2, #0]
 800f29c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2207      	movs	r2, #7
 800f2a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,C,D,A");
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	33a4      	adds	r3, #164	; 0xa4
 800f2a8:	4a72      	ldr	r2, [pc, #456]	; (800f474 <problem_fetch+0xdae4>)
 800f2aa:	461c      	mov	r4, r3
 800f2ac:	4613      	mov	r3, r2
 800f2ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2b0:	6020      	str	r0, [r4, #0]
 800f2b2:	6061      	str	r1, [r4, #4]
 800f2b4:	60a2      	str	r2, [r4, #8]
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	3304      	adds	r3, #4
 800f2be:	4a6e      	ldr	r2, [pc, #440]	; (800f478 <problem_fetch+0xdae8>)
 800f2c0:	461d      	mov	r5, r3
 800f2c2:	4614      	mov	r4, r2
 800f2c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2c6:	6028      	str	r0, [r5, #0]
 800f2c8:	6069      	str	r1, [r5, #4]
 800f2ca:	60aa      	str	r2, [r5, #8]
 800f2cc:	60eb      	str	r3, [r5, #12]
 800f2ce:	8823      	ldrh	r3, [r4, #0]
 800f2d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f2d8:	4a68      	ldr	r2, [pc, #416]	; (800f47c <problem_fetch+0xdaec>)
 800f2da:	461c      	mov	r4, r3
 800f2dc:	4613      	mov	r3, r2
 800f2de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2e0:	6020      	str	r0, [r4, #0]
 800f2e2:	6061      	str	r1, [r4, #4]
 800f2e4:	60a2      	str	r2, [r4, #8]
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	81a3      	strh	r3, [r4, #12]
			break;
 800f2ea:	f00d ba81 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 396 :
			strcpy(p->name,"ONE LINE");
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f2f4:	4962      	ldr	r1, [pc, #392]	; (800f480 <problem_fetch+0xdaf0>)
 800f2f6:	461a      	mov	r2, r3
 800f2f8:	460b      	mov	r3, r1
 800f2fa:	cb03      	ldmia	r3!, {r0, r1}
 800f2fc:	6010      	str	r0, [r2, #0]
 800f2fe:	6051      	str	r1, [r2, #4]
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f30a:	4a5e      	ldr	r2, [pc, #376]	; (800f484 <problem_fetch+0xdaf4>)
 800f30c:	6810      	ldr	r0, [r2, #0]
 800f30e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2208      	movs	r2, #8
 800f314:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	33a4      	adds	r3, #164	; 0xa4
 800f31a:	4a5b      	ldr	r2, [pc, #364]	; (800f488 <problem_fetch+0xdaf8>)
 800f31c:	461c      	mov	r4, r3
 800f31e:	4615      	mov	r5, r2
 800f320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f322:	6020      	str	r0, [r4, #0]
 800f324:	6061      	str	r1, [r4, #4]
 800f326:	60a2      	str	r2, [r4, #8]
 800f328:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,16,9,9,5,18");
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4a57      	ldr	r2, [pc, #348]	; (800f48c <problem_fetch+0xdafc>)
 800f330:	461d      	mov	r5, r3
 800f332:	4614      	mov	r4, r2
 800f334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f336:	6028      	str	r0, [r5, #0]
 800f338:	6069      	str	r1, [r5, #4]
 800f33a:	60aa      	str	r2, [r5, #8]
 800f33c:	60eb      	str	r3, [r5, #12]
 800f33e:	8823      	ldrh	r3, [r4, #0]
 800f340:	78a2      	ldrb	r2, [r4, #2]
 800f342:	822b      	strh	r3, [r5, #16]
 800f344:	4613      	mov	r3, r2
 800f346:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f34e:	4a50      	ldr	r2, [pc, #320]	; (800f490 <problem_fetch+0xdb00>)
 800f350:	461c      	mov	r4, r3
 800f352:	4615      	mov	r5, r2
 800f354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f356:	6020      	str	r0, [r4, #0]
 800f358:	6061      	str	r1, [r4, #4]
 800f35a:	60a2      	str	r2, [r4, #8]
 800f35c:	60e3      	str	r3, [r4, #12]
			break;
 800f35e:	f00d ba47 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 397 :
			strcpy(p->name,"RASTAMAN");
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f368:	494a      	ldr	r1, [pc, #296]	; (800f494 <problem_fetch+0xdb04>)
 800f36a:	461a      	mov	r2, r3
 800f36c:	460b      	mov	r3, r1
 800f36e:	cb03      	ldmia	r3!, {r0, r1}
 800f370:	6010      	str	r0, [r2, #0]
 800f372:	6051      	str	r1, [r2, #4]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f37e:	4a46      	ldr	r2, [pc, #280]	; (800f498 <problem_fetch+0xdb08>)
 800f380:	6810      	ldr	r0, [r2, #0]
 800f382:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2207      	movs	r2, #7
 800f388:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,A");
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	33a4      	adds	r3, #164	; 0xa4
 800f38e:	4a43      	ldr	r2, [pc, #268]	; (800f49c <problem_fetch+0xdb0c>)
 800f390:	461c      	mov	r4, r3
 800f392:	4613      	mov	r3, r2
 800f394:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f396:	6020      	str	r0, [r4, #0]
 800f398:	6061      	str	r1, [r4, #4]
 800f39a:	60a2      	str	r2, [r4, #8]
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3304      	adds	r3, #4
 800f3a4:	4a3e      	ldr	r2, [pc, #248]	; (800f4a0 <problem_fetch+0xdb10>)
 800f3a6:	461d      	mov	r5, r3
 800f3a8:	4614      	mov	r4, r2
 800f3aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f3ac:	6028      	str	r0, [r5, #0]
 800f3ae:	6069      	str	r1, [r5, #4]
 800f3b0:	60aa      	str	r2, [r5, #8]
 800f3b2:	60eb      	str	r3, [r5, #12]
 800f3b4:	8823      	ldrh	r3, [r4, #0]
 800f3b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f3be:	4a2f      	ldr	r2, [pc, #188]	; (800f47c <problem_fetch+0xdaec>)
 800f3c0:	461c      	mov	r4, r3
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3c6:	6020      	str	r0, [r4, #0]
 800f3c8:	6061      	str	r1, [r4, #4]
 800f3ca:	60a2      	str	r2, [r4, #8]
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	81a3      	strh	r3, [r4, #12]
			break;
 800f3d0:	f00d ba0e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 398 :
			strcpy(p->name,"TURKMENISTAN");
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f3da:	4a32      	ldr	r2, [pc, #200]	; (800f4a4 <problem_fetch+0xdb14>)
 800f3dc:	461c      	mov	r4, r3
 800f3de:	4613      	mov	r3, r2
 800f3e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3e2:	6020      	str	r0, [r4, #0]
 800f3e4:	6061      	str	r1, [r4, #4]
 800f3e6:	60a2      	str	r2, [r4, #8]
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f3f2:	4a29      	ldr	r2, [pc, #164]	; (800f498 <problem_fetch+0xdb08>)
 800f3f4:	6810      	ldr	r0, [r2, #0]
 800f3f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2207      	movs	r2, #7
 800f3fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,E,H,D");
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	33a4      	adds	r3, #164	; 0xa4
 800f402:	4a29      	ldr	r2, [pc, #164]	; (800f4a8 <problem_fetch+0xdb18>)
 800f404:	461c      	mov	r4, r3
 800f406:	4613      	mov	r3, r2
 800f408:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f40a:	6020      	str	r0, [r4, #0]
 800f40c:	6061      	str	r1, [r4, #4]
 800f40e:	60a2      	str	r2, [r4, #8]
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,16,18");
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3304      	adds	r3, #4
 800f418:	4a24      	ldr	r2, [pc, #144]	; (800f4ac <problem_fetch+0xdb1c>)
 800f41a:	461d      	mov	r5, r3
 800f41c:	4614      	mov	r4, r2
 800f41e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f420:	6028      	str	r0, [r5, #0]
 800f422:	6069      	str	r1, [r5, #4]
 800f424:	60aa      	str	r2, [r5, #8]
 800f426:	60eb      	str	r3, [r5, #12]
 800f428:	8823      	ldrh	r3, [r4, #0]
 800f42a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f432:	4a12      	ldr	r2, [pc, #72]	; (800f47c <problem_fetch+0xdaec>)
 800f434:	461c      	mov	r4, r3
 800f436:	4613      	mov	r3, r2
 800f438:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f43a:	6020      	str	r0, [r4, #0]
 800f43c:	6061      	str	r1, [r4, #4]
 800f43e:	60a2      	str	r2, [r4, #8]
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	81a3      	strh	r3, [r4, #12]
			break;
 800f444:	f00d b9d4 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800f448:	080287f4 	.word	0x080287f4
 800f44c:	08023c5c 	.word	0x08023c5c
 800f450:	08028800 	.word	0x08028800
 800f454:	0802880c 	.word	0x0802880c
 800f458:	08023f2c 	.word	0x08023f2c
 800f45c:	0802881c 	.word	0x0802881c
 800f460:	08028830 	.word	0x08028830
 800f464:	08028840 	.word	0x08028840
 800f468:	08023da0 	.word	0x08023da0
 800f46c:	08028858 	.word	0x08028858
 800f470:	08023c28 	.word	0x08023c28
 800f474:	08028868 	.word	0x08028868
 800f478:	08028878 	.word	0x08028878
 800f47c:	08023d18 	.word	0x08023d18
 800f480:	0802888c 	.word	0x0802888c
 800f484:	08023d30 	.word	0x08023d30
 800f488:	08028898 	.word	0x08028898
 800f48c:	080288a8 	.word	0x080288a8
 800f490:	08023cb4 	.word	0x08023cb4
 800f494:	080288bc 	.word	0x080288bc
 800f498:	08023b90 	.word	0x08023b90
 800f49c:	080288c8 	.word	0x080288c8
 800f4a0:	080288d8 	.word	0x080288d8
 800f4a4:	080288ec 	.word	0x080288ec
 800f4a8:	080288fc 	.word	0x080288fc
 800f4ac:	0802890c 	.word	0x0802890c
		case 399 :
			strcpy(p->name,"MAIDENATOR2");
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f4b6:	4aad      	ldr	r2, [pc, #692]	; (800f76c <problem_fetch+0xdddc>)
 800f4b8:	461c      	mov	r4, r3
 800f4ba:	4613      	mov	r3, r2
 800f4bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f4be:	6020      	str	r0, [r4, #0]
 800f4c0:	6061      	str	r1, [r4, #4]
 800f4c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f4ca:	4aa9      	ldr	r2, [pc, #676]	; (800f770 <problem_fetch+0xdde0>)
 800f4cc:	8811      	ldrh	r1, [r2, #0]
 800f4ce:	7892      	ldrb	r2, [r2, #2]
 800f4d0:	8019      	strh	r1, [r3, #0]
 800f4d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2209      	movs	r2, #9
 800f4d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,F,A,B,A");
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	33a4      	adds	r3, #164	; 0xa4
 800f4de:	4aa5      	ldr	r2, [pc, #660]	; (800f774 <problem_fetch+0xdde4>)
 800f4e0:	461d      	mov	r5, r3
 800f4e2:	4614      	mov	r4, r2
 800f4e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4e6:	6028      	str	r0, [r5, #0]
 800f4e8:	6069      	str	r1, [r5, #4]
 800f4ea:	60aa      	str	r2, [r5, #8]
 800f4ec:	60eb      	str	r3, [r5, #12]
 800f4ee:	8823      	ldrh	r3, [r4, #0]
 800f4f0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,8,13,11,14,15,18");
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	3304      	adds	r3, #4
 800f4f6:	4aa0      	ldr	r2, [pc, #640]	; (800f778 <problem_fetch+0xdde8>)
 800f4f8:	461c      	mov	r4, r3
 800f4fa:	4615      	mov	r5, r2
 800f4fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f4fe:	6020      	str	r0, [r4, #0]
 800f500:	6061      	str	r1, [r4, #4]
 800f502:	60a2      	str	r2, [r4, #8]
 800f504:	60e3      	str	r3, [r4, #12]
 800f506:	6828      	ldr	r0, [r5, #0]
 800f508:	6120      	str	r0, [r4, #16]
 800f50a:	88ab      	ldrh	r3, [r5, #4]
 800f50c:	79aa      	ldrb	r2, [r5, #6]
 800f50e:	82a3      	strh	r3, [r4, #20]
 800f510:	4613      	mov	r3, r2
 800f512:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f51a:	4a98      	ldr	r2, [pc, #608]	; (800f77c <problem_fetch+0xddec>)
 800f51c:	461d      	mov	r5, r3
 800f51e:	4614      	mov	r4, r2
 800f520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f522:	6028      	str	r0, [r5, #0]
 800f524:	6069      	str	r1, [r5, #4]
 800f526:	60aa      	str	r2, [r5, #8]
 800f528:	60eb      	str	r3, [r5, #12]
 800f52a:	8823      	ldrh	r3, [r4, #0]
 800f52c:	822b      	strh	r3, [r5, #16]
			break;
 800f52e:	f00d b95f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 400 :
			strcpy(p->name,"CHALK DUST");
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f538:	4991      	ldr	r1, [pc, #580]	; (800f780 <problem_fetch+0xddf0>)
 800f53a:	461a      	mov	r2, r3
 800f53c:	460b      	mov	r3, r1
 800f53e:	cb03      	ldmia	r3!, {r0, r1}
 800f540:	6010      	str	r0, [r2, #0]
 800f542:	6051      	str	r1, [r2, #4]
 800f544:	8819      	ldrh	r1, [r3, #0]
 800f546:	789b      	ldrb	r3, [r3, #2]
 800f548:	8111      	strh	r1, [r2, #8]
 800f54a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f552:	4a8c      	ldr	r2, [pc, #560]	; (800f784 <problem_fetch+0xddf4>)
 800f554:	6810      	ldr	r0, [r2, #0]
 800f556:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2207      	movs	r2, #7
 800f55c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	33a4      	adds	r3, #164	; 0xa4
 800f562:	4a89      	ldr	r2, [pc, #548]	; (800f788 <problem_fetch+0xddf8>)
 800f564:	461c      	mov	r4, r3
 800f566:	4613      	mov	r3, r2
 800f568:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f56a:	6020      	str	r0, [r4, #0]
 800f56c:	6061      	str	r1, [r4, #4]
 800f56e:	60a2      	str	r2, [r4, #8]
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3304      	adds	r3, #4
 800f578:	4a84      	ldr	r2, [pc, #528]	; (800f78c <problem_fetch+0xddfc>)
 800f57a:	461d      	mov	r5, r3
 800f57c:	4614      	mov	r4, r2
 800f57e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f580:	6028      	str	r0, [r5, #0]
 800f582:	6069      	str	r1, [r5, #4]
 800f584:	60aa      	str	r2, [r5, #8]
 800f586:	60eb      	str	r3, [r5, #12]
 800f588:	8823      	ldrh	r3, [r4, #0]
 800f58a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f592:	4a7f      	ldr	r2, [pc, #508]	; (800f790 <problem_fetch+0xde00>)
 800f594:	461c      	mov	r4, r3
 800f596:	4613      	mov	r3, r2
 800f598:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f59a:	6020      	str	r0, [r4, #0]
 800f59c:	6061      	str	r1, [r4, #4]
 800f59e:	60a2      	str	r2, [r4, #8]
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	81a3      	strh	r3, [r4, #12]
			break;
 800f5a4:	f00d b924 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 401 :
			strcpy(p->name,"LAPPNOR");
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f5ae:	4979      	ldr	r1, [pc, #484]	; (800f794 <problem_fetch+0xde04>)
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	cb03      	ldmia	r3!, {r0, r1}
 800f5b6:	6010      	str	r0, [r2, #0]
 800f5b8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f5c0:	4a75      	ldr	r2, [pc, #468]	; (800f798 <problem_fetch+0xde08>)
 800f5c2:	8811      	ldrh	r1, [r2, #0]
 800f5c4:	7892      	ldrb	r2, [r2, #2]
 800f5c6:	8019      	strh	r1, [r3, #0]
 800f5c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2207      	movs	r2, #7
 800f5ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,G,I");
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	33a4      	adds	r3, #164	; 0xa4
 800f5d4:	4a71      	ldr	r2, [pc, #452]	; (800f79c <problem_fetch+0xde0c>)
 800f5d6:	461c      	mov	r4, r3
 800f5d8:	4613      	mov	r3, r2
 800f5da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f5dc:	6020      	str	r0, [r4, #0]
 800f5de:	6061      	str	r1, [r4, #4]
 800f5e0:	60a2      	str	r2, [r4, #8]
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,15,18");
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	3304      	adds	r3, #4
 800f5ea:	4a6d      	ldr	r2, [pc, #436]	; (800f7a0 <problem_fetch+0xde10>)
 800f5ec:	461d      	mov	r5, r3
 800f5ee:	4614      	mov	r4, r2
 800f5f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5f2:	6028      	str	r0, [r5, #0]
 800f5f4:	6069      	str	r1, [r5, #4]
 800f5f6:	60aa      	str	r2, [r5, #8]
 800f5f8:	60eb      	str	r3, [r5, #12]
 800f5fa:	8823      	ldrh	r3, [r4, #0]
 800f5fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f604:	4a67      	ldr	r2, [pc, #412]	; (800f7a4 <problem_fetch+0xde14>)
 800f606:	461c      	mov	r4, r3
 800f608:	4613      	mov	r3, r2
 800f60a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f60c:	6020      	str	r0, [r4, #0]
 800f60e:	6061      	str	r1, [r4, #4]
 800f610:	60a2      	str	r2, [r4, #8]
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	81a3      	strh	r3, [r4, #12]
			break;
 800f616:	f00d b8eb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 402 :
			strcpy(p->name,"CHAMONIX BAD DAY");
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f620:	4a61      	ldr	r2, [pc, #388]	; (800f7a8 <problem_fetch+0xde18>)
 800f622:	461d      	mov	r5, r3
 800f624:	4614      	mov	r4, r2
 800f626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f628:	6028      	str	r0, [r5, #0]
 800f62a:	6069      	str	r1, [r5, #4]
 800f62c:	60aa      	str	r2, [r5, #8]
 800f62e:	60eb      	str	r3, [r5, #12]
 800f630:	7823      	ldrb	r3, [r4, #0]
 800f632:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f63a:	4a4d      	ldr	r2, [pc, #308]	; (800f770 <problem_fetch+0xdde0>)
 800f63c:	8811      	ldrh	r1, [r2, #0]
 800f63e:	7892      	ldrb	r2, [r2, #2]
 800f640:	8019      	strh	r1, [r3, #0]
 800f642:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2206      	movs	r2, #6
 800f648:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	33a4      	adds	r3, #164	; 0xa4
 800f64e:	4a57      	ldr	r2, [pc, #348]	; (800f7ac <problem_fetch+0xde1c>)
 800f650:	461c      	mov	r4, r3
 800f652:	4613      	mov	r3, r2
 800f654:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f656:	6020      	str	r0, [r4, #0]
 800f658:	6061      	str	r1, [r4, #4]
 800f65a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,14,18");
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	3304      	adds	r3, #4
 800f660:	4a53      	ldr	r2, [pc, #332]	; (800f7b0 <problem_fetch+0xde20>)
 800f662:	461c      	mov	r4, r3
 800f664:	4613      	mov	r3, r2
 800f666:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f668:	6020      	str	r0, [r4, #0]
 800f66a:	6061      	str	r1, [r4, #4]
 800f66c:	60a2      	str	r2, [r4, #8]
 800f66e:	881a      	ldrh	r2, [r3, #0]
 800f670:	789b      	ldrb	r3, [r3, #2]
 800f672:	81a2      	strh	r2, [r4, #12]
 800f674:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f67c:	4a4d      	ldr	r2, [pc, #308]	; (800f7b4 <problem_fetch+0xde24>)
 800f67e:	461c      	mov	r4, r3
 800f680:	4613      	mov	r3, r2
 800f682:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f684:	6020      	str	r0, [r4, #0]
 800f686:	6061      	str	r1, [r4, #4]
 800f688:	60a2      	str	r2, [r4, #8]
			break;
 800f68a:	f00d b8b1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 403 :
			strcpy(p->name,"CHARGER");
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f694:	4948      	ldr	r1, [pc, #288]	; (800f7b8 <problem_fetch+0xde28>)
 800f696:	461a      	mov	r2, r3
 800f698:	460b      	mov	r3, r1
 800f69a:	cb03      	ldmia	r3!, {r0, r1}
 800f69c:	6010      	str	r0, [r2, #0]
 800f69e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f6a6:	4a32      	ldr	r2, [pc, #200]	; (800f770 <problem_fetch+0xdde0>)
 800f6a8:	8811      	ldrh	r1, [r2, #0]
 800f6aa:	7892      	ldrb	r2, [r2, #2]
 800f6ac:	8019      	strh	r1, [r3, #0]
 800f6ae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2206      	movs	r2, #6
 800f6b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,B,D");
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	33a4      	adds	r3, #164	; 0xa4
 800f6ba:	4a40      	ldr	r2, [pc, #256]	; (800f7bc <problem_fetch+0xde2c>)
 800f6bc:	461c      	mov	r4, r3
 800f6be:	4613      	mov	r3, r2
 800f6c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6c2:	6020      	str	r0, [r4, #0]
 800f6c4:	6061      	str	r1, [r4, #4]
 800f6c6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,15,18");
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	3304      	adds	r3, #4
 800f6cc:	4a3c      	ldr	r2, [pc, #240]	; (800f7c0 <problem_fetch+0xde30>)
 800f6ce:	461c      	mov	r4, r3
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6d4:	6020      	str	r0, [r4, #0]
 800f6d6:	6061      	str	r1, [r4, #4]
 800f6d8:	60a2      	str	r2, [r4, #8]
 800f6da:	881a      	ldrh	r2, [r3, #0]
 800f6dc:	789b      	ldrb	r3, [r3, #2]
 800f6de:	81a2      	strh	r2, [r4, #12]
 800f6e0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f6e8:	4a32      	ldr	r2, [pc, #200]	; (800f7b4 <problem_fetch+0xde24>)
 800f6ea:	461c      	mov	r4, r3
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6f0:	6020      	str	r0, [r4, #0]
 800f6f2:	6061      	str	r1, [r4, #4]
 800f6f4:	60a2      	str	r2, [r4, #8]
			break;
 800f6f6:	f00d b87b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 404 :
			strcpy(p->name,"(S)ENDING");
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f700:	4930      	ldr	r1, [pc, #192]	; (800f7c4 <problem_fetch+0xde34>)
 800f702:	461a      	mov	r2, r3
 800f704:	460b      	mov	r3, r1
 800f706:	cb03      	ldmia	r3!, {r0, r1}
 800f708:	6010      	str	r0, [r2, #0]
 800f70a:	6051      	str	r1, [r2, #4]
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f716:	4a2c      	ldr	r2, [pc, #176]	; (800f7c8 <problem_fetch+0xde38>)
 800f718:	6810      	ldr	r0, [r2, #0]
 800f71a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2207      	movs	r2, #7
 800f720:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,J,G,G,D");
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	33a4      	adds	r3, #164	; 0xa4
 800f726:	4a29      	ldr	r2, [pc, #164]	; (800f7cc <problem_fetch+0xde3c>)
 800f728:	461c      	mov	r4, r3
 800f72a:	4613      	mov	r3, r2
 800f72c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f72e:	6020      	str	r0, [r4, #0]
 800f730:	6061      	str	r1, [r4, #4]
 800f732:	60a2      	str	r2, [r4, #8]
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,15,17,18");
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	3304      	adds	r3, #4
 800f73c:	4a24      	ldr	r2, [pc, #144]	; (800f7d0 <problem_fetch+0xde40>)
 800f73e:	461d      	mov	r5, r3
 800f740:	4614      	mov	r4, r2
 800f742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f744:	6028      	str	r0, [r5, #0]
 800f746:	6069      	str	r1, [r5, #4]
 800f748:	60aa      	str	r2, [r5, #8]
 800f74a:	60eb      	str	r3, [r5, #12]
 800f74c:	8823      	ldrh	r3, [r4, #0]
 800f74e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f756:	4a13      	ldr	r2, [pc, #76]	; (800f7a4 <problem_fetch+0xde14>)
 800f758:	461c      	mov	r4, r3
 800f75a:	4613      	mov	r3, r2
 800f75c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f75e:	6020      	str	r0, [r4, #0]
 800f760:	6061      	str	r1, [r4, #4]
 800f762:	60a2      	str	r2, [r4, #8]
 800f764:	881b      	ldrh	r3, [r3, #0]
 800f766:	81a3      	strh	r3, [r4, #12]
			break;
 800f768:	f00d b842 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800f76c:	08028920 	.word	0x08028920
 800f770:	08023c5c 	.word	0x08023c5c
 800f774:	0802892c 	.word	0x0802892c
 800f778:	08028940 	.word	0x08028940
 800f77c:	08024b74 	.word	0x08024b74
 800f780:	08028958 	.word	0x08028958
 800f784:	08023b90 	.word	0x08023b90
 800f788:	08028964 	.word	0x08028964
 800f78c:	08026830 	.word	0x08026830
 800f790:	08023c08 	.word	0x08023c08
 800f794:	08028974 	.word	0x08028974
 800f798:	08023b50 	.word	0x08023b50
 800f79c:	0802897c 	.word	0x0802897c
 800f7a0:	0802898c 	.word	0x0802898c
 800f7a4:	08023d18 	.word	0x08023d18
 800f7a8:	080289a0 	.word	0x080289a0
 800f7ac:	08024714 	.word	0x08024714
 800f7b0:	080289b4 	.word	0x080289b4
 800f7b4:	08023f2c 	.word	0x08023f2c
 800f7b8:	080289c4 	.word	0x080289c4
 800f7bc:	080289cc 	.word	0x080289cc
 800f7c0:	080289d8 	.word	0x080289d8
 800f7c4:	080289e8 	.word	0x080289e8
 800f7c8:	08023d30 	.word	0x08023d30
 800f7cc:	080289f4 	.word	0x080289f4
 800f7d0:	08028a04 	.word	0x08028a04
		case 405 :
			strcpy(p->name,"WEEL OF WOLVO");
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f7da:	4aa8      	ldr	r2, [pc, #672]	; (800fa7c <problem_fetch+0xe0ec>)
 800f7dc:	461c      	mov	r4, r3
 800f7de:	4613      	mov	r3, r2
 800f7e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7e2:	6020      	str	r0, [r4, #0]
 800f7e4:	6061      	str	r1, [r4, #4]
 800f7e6:	60a2      	str	r2, [r4, #8]
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f7f2:	4aa3      	ldr	r2, [pc, #652]	; (800fa80 <problem_fetch+0xe0f0>)
 800f7f4:	8811      	ldrh	r1, [r2, #0]
 800f7f6:	7892      	ldrb	r2, [r2, #2]
 800f7f8:	8019      	strh	r1, [r3, #0]
 800f7fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2207      	movs	r2, #7
 800f800:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,F,H,G,I");
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	33a4      	adds	r3, #164	; 0xa4
 800f806:	4a9f      	ldr	r2, [pc, #636]	; (800fa84 <problem_fetch+0xe0f4>)
 800f808:	461c      	mov	r4, r3
 800f80a:	4613      	mov	r3, r2
 800f80c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f80e:	6020      	str	r0, [r4, #0]
 800f810:	6061      	str	r1, [r4, #4]
 800f812:	60a2      	str	r2, [r4, #8]
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,5,11,12,15,18");
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	3304      	adds	r3, #4
 800f81c:	4a9a      	ldr	r2, [pc, #616]	; (800fa88 <problem_fetch+0xe0f8>)
 800f81e:	461d      	mov	r5, r3
 800f820:	4614      	mov	r4, r2
 800f822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f824:	6028      	str	r0, [r5, #0]
 800f826:	6069      	str	r1, [r5, #4]
 800f828:	60aa      	str	r2, [r5, #8]
 800f82a:	60eb      	str	r3, [r5, #12]
 800f82c:	8823      	ldrh	r3, [r4, #0]
 800f82e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f836:	4a95      	ldr	r2, [pc, #596]	; (800fa8c <problem_fetch+0xe0fc>)
 800f838:	461c      	mov	r4, r3
 800f83a:	4613      	mov	r3, r2
 800f83c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f83e:	6020      	str	r0, [r4, #0]
 800f840:	6061      	str	r1, [r4, #4]
 800f842:	60a2      	str	r2, [r4, #8]
 800f844:	881b      	ldrh	r3, [r3, #0]
 800f846:	81a3      	strh	r3, [r4, #12]
			break;
 800f848:	f00c bfd2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 406 :
			strcpy(p->name,"IMPACT");
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f852:	4a8f      	ldr	r2, [pc, #572]	; (800fa90 <problem_fetch+0xe100>)
 800f854:	6810      	ldr	r0, [r2, #0]
 800f856:	6018      	str	r0, [r3, #0]
 800f858:	8891      	ldrh	r1, [r2, #4]
 800f85a:	7992      	ldrb	r2, [r2, #6]
 800f85c:	8099      	strh	r1, [r3, #4]
 800f85e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f866:	4a8b      	ldr	r2, [pc, #556]	; (800fa94 <problem_fetch+0xe104>)
 800f868:	6810      	ldr	r0, [r2, #0]
 800f86a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2208      	movs	r2, #8
 800f870:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,B,E,D");
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	33a4      	adds	r3, #164	; 0xa4
 800f876:	4a88      	ldr	r2, [pc, #544]	; (800fa98 <problem_fetch+0xe108>)
 800f878:	461c      	mov	r4, r3
 800f87a:	4615      	mov	r5, r2
 800f87c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f87e:	6020      	str	r0, [r4, #0]
 800f880:	6061      	str	r1, [r4, #4]
 800f882:	60a2      	str	r2, [r4, #8]
 800f884:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,15,14,18");
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	3304      	adds	r3, #4
 800f88a:	4a84      	ldr	r2, [pc, #528]	; (800fa9c <problem_fetch+0xe10c>)
 800f88c:	461d      	mov	r5, r3
 800f88e:	4614      	mov	r4, r2
 800f890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f892:	6028      	str	r0, [r5, #0]
 800f894:	6069      	str	r1, [r5, #4]
 800f896:	60aa      	str	r2, [r5, #8]
 800f898:	60eb      	str	r3, [r5, #12]
 800f89a:	6820      	ldr	r0, [r4, #0]
 800f89c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f8a4:	4a7e      	ldr	r2, [pc, #504]	; (800faa0 <problem_fetch+0xe110>)
 800f8a6:	461c      	mov	r4, r3
 800f8a8:	4615      	mov	r5, r2
 800f8aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8ac:	6020      	str	r0, [r4, #0]
 800f8ae:	6061      	str	r1, [r4, #4]
 800f8b0:	60a2      	str	r2, [r4, #8]
 800f8b2:	60e3      	str	r3, [r4, #12]
			break;
 800f8b4:	f00c bf9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 407 :
			strcpy(p->name,"HUBBLE");
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f8be:	4a79      	ldr	r2, [pc, #484]	; (800faa4 <problem_fetch+0xe114>)
 800f8c0:	6810      	ldr	r0, [r2, #0]
 800f8c2:	6018      	str	r0, [r3, #0]
 800f8c4:	8891      	ldrh	r1, [r2, #4]
 800f8c6:	7992      	ldrb	r2, [r2, #6]
 800f8c8:	8099      	strh	r1, [r3, #4]
 800f8ca:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f8d2:	4a75      	ldr	r2, [pc, #468]	; (800faa8 <problem_fetch+0xe118>)
 800f8d4:	6810      	ldr	r0, [r2, #0]
 800f8d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2206      	movs	r2, #6
 800f8dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,K,I");
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	33a4      	adds	r3, #164	; 0xa4
 800f8e2:	4a72      	ldr	r2, [pc, #456]	; (800faac <problem_fetch+0xe11c>)
 800f8e4:	461c      	mov	r4, r3
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8ea:	6020      	str	r0, [r4, #0]
 800f8ec:	6061      	str	r1, [r4, #4]
 800f8ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	4a6e      	ldr	r2, [pc, #440]	; (800fab0 <problem_fetch+0xe120>)
 800f8f6:	461c      	mov	r4, r3
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8fc:	6020      	str	r0, [r4, #0]
 800f8fe:	6061      	str	r1, [r4, #4]
 800f900:	60a2      	str	r2, [r4, #8]
 800f902:	881a      	ldrh	r2, [r3, #0]
 800f904:	789b      	ldrb	r3, [r3, #2]
 800f906:	81a2      	strh	r2, [r4, #12]
 800f908:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f910:	4a68      	ldr	r2, [pc, #416]	; (800fab4 <problem_fetch+0xe124>)
 800f912:	461c      	mov	r4, r3
 800f914:	4613      	mov	r3, r2
 800f916:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f918:	6020      	str	r0, [r4, #0]
 800f91a:	6061      	str	r1, [r4, #4]
 800f91c:	60a2      	str	r2, [r4, #8]
			break;
 800f91e:	f00c bf67 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 408 :
			strcpy(p->name,"FREERIDER");
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f928:	4963      	ldr	r1, [pc, #396]	; (800fab8 <problem_fetch+0xe128>)
 800f92a:	461a      	mov	r2, r3
 800f92c:	460b      	mov	r3, r1
 800f92e:	cb03      	ldmia	r3!, {r0, r1}
 800f930:	6010      	str	r0, [r2, #0]
 800f932:	6051      	str	r1, [r2, #4]
 800f934:	881b      	ldrh	r3, [r3, #0]
 800f936:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f93e:	4a5a      	ldr	r2, [pc, #360]	; (800faa8 <problem_fetch+0xe118>)
 800f940:	6810      	ldr	r0, [r2, #0]
 800f942:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2206      	movs	r2, #6
 800f948:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	33a4      	adds	r3, #164	; 0xa4
 800f94e:	4a5b      	ldr	r2, [pc, #364]	; (800fabc <problem_fetch+0xe12c>)
 800f950:	461c      	mov	r4, r3
 800f952:	4613      	mov	r3, r2
 800f954:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f956:	6020      	str	r0, [r4, #0]
 800f958:	6061      	str	r1, [r4, #4]
 800f95a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3304      	adds	r3, #4
 800f960:	4a57      	ldr	r2, [pc, #348]	; (800fac0 <problem_fetch+0xe130>)
 800f962:	461c      	mov	r4, r3
 800f964:	4613      	mov	r3, r2
 800f966:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f968:	6020      	str	r0, [r4, #0]
 800f96a:	6061      	str	r1, [r4, #4]
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	881a      	ldrh	r2, [r3, #0]
 800f970:	789b      	ldrb	r3, [r3, #2]
 800f972:	81a2      	strh	r2, [r4, #12]
 800f974:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f97c:	4a51      	ldr	r2, [pc, #324]	; (800fac4 <problem_fetch+0xe134>)
 800f97e:	461c      	mov	r4, r3
 800f980:	4613      	mov	r3, r2
 800f982:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f984:	6020      	str	r0, [r4, #0]
 800f986:	6061      	str	r1, [r4, #4]
 800f988:	60a2      	str	r2, [r4, #8]
			break;
 800f98a:	f00c bf31 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 409 :
			strcpy(p->name,"LAST HOPE");
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f994:	494c      	ldr	r1, [pc, #304]	; (800fac8 <problem_fetch+0xe138>)
 800f996:	461a      	mov	r2, r3
 800f998:	460b      	mov	r3, r1
 800f99a:	cb03      	ldmia	r3!, {r0, r1}
 800f99c:	6010      	str	r0, [r2, #0]
 800f99e:	6051      	str	r1, [r2, #4]
 800f9a0:	881b      	ldrh	r3, [r3, #0]
 800f9a2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f9aa:	4a3f      	ldr	r2, [pc, #252]	; (800faa8 <problem_fetch+0xe118>)
 800f9ac:	6810      	ldr	r0, [r2, #0]
 800f9ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2206      	movs	r2, #6
 800f9b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,K,I");
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	33a4      	adds	r3, #164	; 0xa4
 800f9ba:	4a44      	ldr	r2, [pc, #272]	; (800facc <problem_fetch+0xe13c>)
 800f9bc:	461c      	mov	r4, r3
 800f9be:	4613      	mov	r3, r2
 800f9c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9c2:	6020      	str	r0, [r4, #0]
 800f9c4:	6061      	str	r1, [r4, #4]
 800f9c6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	4a40      	ldr	r2, [pc, #256]	; (800fad0 <problem_fetch+0xe140>)
 800f9ce:	461c      	mov	r4, r3
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9d4:	6020      	str	r0, [r4, #0]
 800f9d6:	6061      	str	r1, [r4, #4]
 800f9d8:	60a2      	str	r2, [r4, #8]
 800f9da:	881a      	ldrh	r2, [r3, #0]
 800f9dc:	789b      	ldrb	r3, [r3, #2]
 800f9de:	81a2      	strh	r2, [r4, #12]
 800f9e0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f9e8:	4a36      	ldr	r2, [pc, #216]	; (800fac4 <problem_fetch+0xe134>)
 800f9ea:	461c      	mov	r4, r3
 800f9ec:	4613      	mov	r3, r2
 800f9ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9f0:	6020      	str	r0, [r4, #0]
 800f9f2:	6061      	str	r1, [r4, #4]
 800f9f4:	60a2      	str	r2, [r4, #8]
			break;
 800f9f6:	f00c befb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 410 :
			strcpy(p->name,"RAINING MEANS TRAINING");
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fa00:	4a34      	ldr	r2, [pc, #208]	; (800fad4 <problem_fetch+0xe144>)
 800fa02:	461c      	mov	r4, r3
 800fa04:	4615      	mov	r5, r2
 800fa06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fa08:	6020      	str	r0, [r4, #0]
 800fa0a:	6061      	str	r1, [r4, #4]
 800fa0c:	60a2      	str	r2, [r4, #8]
 800fa0e:	60e3      	str	r3, [r4, #12]
 800fa10:	6828      	ldr	r0, [r5, #0]
 800fa12:	6120      	str	r0, [r4, #16]
 800fa14:	88ab      	ldrh	r3, [r5, #4]
 800fa16:	79aa      	ldrb	r2, [r5, #6]
 800fa18:	82a3      	strh	r3, [r4, #20]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A+");
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fa24:	4a20      	ldr	r2, [pc, #128]	; (800faa8 <problem_fetch+0xe118>)
 800fa26:	6810      	ldr	r0, [r2, #0]
 800fa28:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2207      	movs	r2, #7
 800fa2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,I,D");
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	33a4      	adds	r3, #164	; 0xa4
 800fa34:	4a28      	ldr	r2, [pc, #160]	; (800fad8 <problem_fetch+0xe148>)
 800fa36:	461c      	mov	r4, r3
 800fa38:	4613      	mov	r3, r2
 800fa3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa3c:	6020      	str	r0, [r4, #0]
 800fa3e:	6061      	str	r1, [r4, #4]
 800fa40:	60a2      	str	r2, [r4, #8]
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,12,16,7,18");
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	4a24      	ldr	r2, [pc, #144]	; (800fadc <problem_fetch+0xe14c>)
 800fa4c:	461d      	mov	r5, r3
 800fa4e:	4614      	mov	r4, r2
 800fa50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa52:	6028      	str	r0, [r5, #0]
 800fa54:	6069      	str	r1, [r5, #4]
 800fa56:	60aa      	str	r2, [r5, #8]
 800fa58:	60eb      	str	r3, [r5, #12]
 800fa5a:	7823      	ldrb	r3, [r4, #0]
 800fa5c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fa64:	4a09      	ldr	r2, [pc, #36]	; (800fa8c <problem_fetch+0xe0fc>)
 800fa66:	461c      	mov	r4, r3
 800fa68:	4613      	mov	r3, r2
 800fa6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa6c:	6020      	str	r0, [r4, #0]
 800fa6e:	6061      	str	r1, [r4, #4]
 800fa70:	60a2      	str	r2, [r4, #8]
 800fa72:	881b      	ldrh	r3, [r3, #0]
 800fa74:	81a3      	strh	r3, [r4, #12]
			break;
 800fa76:	f00c bebb 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800fa7a:	bf00      	nop
 800fa7c:	08028a18 	.word	0x08028a18
 800fa80:	08024288 	.word	0x08024288
 800fa84:	08028a28 	.word	0x08028a28
 800fa88:	08028a38 	.word	0x08028a38
 800fa8c:	08023d18 	.word	0x08023d18
 800fa90:	08028a4c 	.word	0x08028a4c
 800fa94:	08023b90 	.word	0x08023b90
 800fa98:	08028a54 	.word	0x08028a54
 800fa9c:	08028a64 	.word	0x08028a64
 800faa0:	08023da0 	.word	0x08023da0
 800faa4:	08028a78 	.word	0x08028a78
 800faa8:	08023d30 	.word	0x08023d30
 800faac:	08028a80 	.word	0x08028a80
 800fab0:	08028a8c 	.word	0x08028a8c
 800fab4:	08023b70 	.word	0x08023b70
 800fab8:	08028a9c 	.word	0x08028a9c
 800fabc:	08028aa8 	.word	0x08028aa8
 800fac0:	08028ab4 	.word	0x08028ab4
 800fac4:	08023f2c 	.word	0x08023f2c
 800fac8:	08028ac4 	.word	0x08028ac4
 800facc:	08028ad0 	.word	0x08028ad0
 800fad0:	080240b8 	.word	0x080240b8
 800fad4:	08028adc 	.word	0x08028adc
 800fad8:	08028af4 	.word	0x08028af4
 800fadc:	08028b04 	.word	0x08028b04
		case 411 :
			strcpy(p->name,"MADISH");
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fae6:	4ab0      	ldr	r2, [pc, #704]	; (800fda8 <problem_fetch+0xe418>)
 800fae8:	6810      	ldr	r0, [r2, #0]
 800faea:	6018      	str	r0, [r3, #0]
 800faec:	8891      	ldrh	r1, [r2, #4]
 800faee:	7992      	ldrb	r2, [r2, #6]
 800faf0:	8099      	strh	r1, [r3, #4]
 800faf2:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fafa:	4aac      	ldr	r2, [pc, #688]	; (800fdac <problem_fetch+0xe41c>)
 800fafc:	6810      	ldr	r0, [r2, #0]
 800fafe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2207      	movs	r2, #7
 800fb04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,E,D");
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	33a4      	adds	r3, #164	; 0xa4
 800fb0a:	4aa9      	ldr	r2, [pc, #676]	; (800fdb0 <problem_fetch+0xe420>)
 800fb0c:	461c      	mov	r4, r3
 800fb0e:	4613      	mov	r3, r2
 800fb10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb12:	6020      	str	r0, [r4, #0]
 800fb14:	6061      	str	r1, [r4, #4]
 800fb16:	60a2      	str	r2, [r4, #8]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,16,18");
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	4aa4      	ldr	r2, [pc, #656]	; (800fdb4 <problem_fetch+0xe424>)
 800fb22:	461d      	mov	r5, r3
 800fb24:	4614      	mov	r4, r2
 800fb26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb28:	6028      	str	r0, [r5, #0]
 800fb2a:	6069      	str	r1, [r5, #4]
 800fb2c:	60aa      	str	r2, [r5, #8]
 800fb2e:	60eb      	str	r3, [r5, #12]
 800fb30:	8823      	ldrh	r3, [r4, #0]
 800fb32:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fb3a:	4a9f      	ldr	r2, [pc, #636]	; (800fdb8 <problem_fetch+0xe428>)
 800fb3c:	461c      	mov	r4, r3
 800fb3e:	4613      	mov	r3, r2
 800fb40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb42:	6020      	str	r0, [r4, #0]
 800fb44:	6061      	str	r1, [r4, #4]
 800fb46:	60a2      	str	r2, [r4, #8]
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	81a3      	strh	r3, [r4, #12]
			break;
 800fb4c:	f00c be50 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 412 :
			strcpy(p->name,"BAGHEERA");
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb56:	4999      	ldr	r1, [pc, #612]	; (800fdbc <problem_fetch+0xe42c>)
 800fb58:	461a      	mov	r2, r3
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	cb03      	ldmia	r3!, {r0, r1}
 800fb5e:	6010      	str	r0, [r2, #0]
 800fb60:	6051      	str	r1, [r2, #4]
 800fb62:	781b      	ldrb	r3, [r3, #0]
 800fb64:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fb6c:	4a94      	ldr	r2, [pc, #592]	; (800fdc0 <problem_fetch+0xe430>)
 800fb6e:	8811      	ldrh	r1, [r2, #0]
 800fb70:	7892      	ldrb	r2, [r2, #2]
 800fb72:	8019      	strh	r1, [r3, #0]
 800fb74:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2207      	movs	r2, #7
 800fb7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,I,G,G,D");
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	33a4      	adds	r3, #164	; 0xa4
 800fb80:	4a90      	ldr	r2, [pc, #576]	; (800fdc4 <problem_fetch+0xe434>)
 800fb82:	461c      	mov	r4, r3
 800fb84:	4613      	mov	r3, r2
 800fb86:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fb88:	6020      	str	r0, [r4, #0]
 800fb8a:	6061      	str	r1, [r4, #4]
 800fb8c:	60a2      	str	r2, [r4, #8]
 800fb8e:	881b      	ldrh	r3, [r3, #0]
 800fb90:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,14,14,17,18");
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	3304      	adds	r3, #4
 800fb96:	4a8c      	ldr	r2, [pc, #560]	; (800fdc8 <problem_fetch+0xe438>)
 800fb98:	461d      	mov	r5, r3
 800fb9a:	4614      	mov	r4, r2
 800fb9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb9e:	6028      	str	r0, [r5, #0]
 800fba0:	6069      	str	r1, [r5, #4]
 800fba2:	60aa      	str	r2, [r5, #8]
 800fba4:	60eb      	str	r3, [r5, #12]
 800fba6:	8823      	ldrh	r3, [r4, #0]
 800fba8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fbb0:	4a86      	ldr	r2, [pc, #536]	; (800fdcc <problem_fetch+0xe43c>)
 800fbb2:	461c      	mov	r4, r3
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbb8:	6020      	str	r0, [r4, #0]
 800fbba:	6061      	str	r1, [r4, #4]
 800fbbc:	60a2      	str	r2, [r4, #8]
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	81a3      	strh	r3, [r4, #12]
			break;
 800fbc2:	f00c be15 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 413 :
			strcpy(p->name,"BLACK CAVIAR");
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fbcc:	4a80      	ldr	r2, [pc, #512]	; (800fdd0 <problem_fetch+0xe440>)
 800fbce:	461c      	mov	r4, r3
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbd4:	6020      	str	r0, [r4, #0]
 800fbd6:	6061      	str	r1, [r4, #4]
 800fbd8:	60a2      	str	r2, [r4, #8]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fbe4:	4a7b      	ldr	r2, [pc, #492]	; (800fdd4 <problem_fetch+0xe444>)
 800fbe6:	8811      	ldrh	r1, [r2, #0]
 800fbe8:	7892      	ldrb	r2, [r2, #2]
 800fbea:	8019      	strh	r1, [r3, #0]
 800fbec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	2208      	movs	r2, #8
 800fbf2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,A,A,H,F,D");
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	33a4      	adds	r3, #164	; 0xa4
 800fbf8:	4a77      	ldr	r2, [pc, #476]	; (800fdd8 <problem_fetch+0xe448>)
 800fbfa:	461c      	mov	r4, r3
 800fbfc:	4615      	mov	r5, r2
 800fbfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc00:	6020      	str	r0, [r4, #0]
 800fc02:	6061      	str	r1, [r4, #4]
 800fc04:	60a2      	str	r2, [r4, #8]
 800fc06:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,6,9,14,8,11,18");
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	4a73      	ldr	r2, [pc, #460]	; (800fddc <problem_fetch+0xe44c>)
 800fc0e:	461d      	mov	r5, r3
 800fc10:	4614      	mov	r4, r2
 800fc12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc14:	6028      	str	r0, [r5, #0]
 800fc16:	6069      	str	r1, [r5, #4]
 800fc18:	60aa      	str	r2, [r5, #8]
 800fc1a:	60eb      	str	r3, [r5, #12]
 800fc1c:	8823      	ldrh	r3, [r4, #0]
 800fc1e:	78a2      	ldrb	r2, [r4, #2]
 800fc20:	822b      	strh	r3, [r5, #16]
 800fc22:	4613      	mov	r3, r2
 800fc24:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fc2c:	4a6c      	ldr	r2, [pc, #432]	; (800fde0 <problem_fetch+0xe450>)
 800fc2e:	461c      	mov	r4, r3
 800fc30:	4615      	mov	r5, r2
 800fc32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc34:	6020      	str	r0, [r4, #0]
 800fc36:	6061      	str	r1, [r4, #4]
 800fc38:	60a2      	str	r2, [r4, #8]
 800fc3a:	60e3      	str	r3, [r4, #12]
			break;
 800fc3c:	f00c bdd8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 414 :
			strcpy(p->name,"HYPNOTIZED MINDS");
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fc46:	4a67      	ldr	r2, [pc, #412]	; (800fde4 <problem_fetch+0xe454>)
 800fc48:	461d      	mov	r5, r3
 800fc4a:	4614      	mov	r4, r2
 800fc4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc4e:	6028      	str	r0, [r5, #0]
 800fc50:	6069      	str	r1, [r5, #4]
 800fc52:	60aa      	str	r2, [r5, #8]
 800fc54:	60eb      	str	r3, [r5, #12]
 800fc56:	7823      	ldrb	r3, [r4, #0]
 800fc58:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fc60:	4a52      	ldr	r2, [pc, #328]	; (800fdac <problem_fetch+0xe41c>)
 800fc62:	6810      	ldr	r0, [r2, #0]
 800fc64:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2209      	movs	r2, #9
 800fc6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,G,J,I,C,H,J,I");
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	33a4      	adds	r3, #164	; 0xa4
 800fc70:	4a5d      	ldr	r2, [pc, #372]	; (800fde8 <problem_fetch+0xe458>)
 800fc72:	461d      	mov	r5, r3
 800fc74:	4614      	mov	r4, r2
 800fc76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc78:	6028      	str	r0, [r5, #0]
 800fc7a:	6069      	str	r1, [r5, #4]
 800fc7c:	60aa      	str	r2, [r5, #8]
 800fc7e:	60eb      	str	r3, [r5, #12]
 800fc80:	8823      	ldrh	r3, [r4, #0]
 800fc82:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,12,15,8,8,5,18");
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	3304      	adds	r3, #4
 800fc88:	4a58      	ldr	r2, [pc, #352]	; (800fdec <problem_fetch+0xe45c>)
 800fc8a:	461d      	mov	r5, r3
 800fc8c:	4614      	mov	r4, r2
 800fc8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc90:	6028      	str	r0, [r5, #0]
 800fc92:	6069      	str	r1, [r5, #4]
 800fc94:	60aa      	str	r2, [r5, #8]
 800fc96:	60eb      	str	r3, [r5, #12]
 800fc98:	6820      	ldr	r0, [r4, #0]
 800fc9a:	6128      	str	r0, [r5, #16]
 800fc9c:	7923      	ldrb	r3, [r4, #4]
 800fc9e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fca6:	4a52      	ldr	r2, [pc, #328]	; (800fdf0 <problem_fetch+0xe460>)
 800fca8:	461d      	mov	r5, r3
 800fcaa:	4614      	mov	r4, r2
 800fcac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fcae:	6028      	str	r0, [r5, #0]
 800fcb0:	6069      	str	r1, [r5, #4]
 800fcb2:	60aa      	str	r2, [r5, #8]
 800fcb4:	60eb      	str	r3, [r5, #12]
 800fcb6:	8823      	ldrh	r3, [r4, #0]
 800fcb8:	822b      	strh	r3, [r5, #16]
			break;
 800fcba:	f00c bd99 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 415 :
			strcpy(p->name,"CHRIS THE STRONGEST");
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fcc4:	4a4b      	ldr	r2, [pc, #300]	; (800fdf4 <problem_fetch+0xe464>)
 800fcc6:	461d      	mov	r5, r3
 800fcc8:	4614      	mov	r4, r2
 800fcca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fccc:	6028      	str	r0, [r5, #0]
 800fcce:	6069      	str	r1, [r5, #4]
 800fcd0:	60aa      	str	r2, [r5, #8]
 800fcd2:	60eb      	str	r3, [r5, #12]
 800fcd4:	6820      	ldr	r0, [r4, #0]
 800fcd6:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fcde:	4a46      	ldr	r2, [pc, #280]	; (800fdf8 <problem_fetch+0xe468>)
 800fce0:	8811      	ldrh	r1, [r2, #0]
 800fce2:	7892      	ldrb	r2, [r2, #2]
 800fce4:	8019      	strh	r1, [r3, #0]
 800fce6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2205      	movs	r2, #5
 800fcec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,D");
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	33a4      	adds	r3, #164	; 0xa4
 800fcf2:	4942      	ldr	r1, [pc, #264]	; (800fdfc <problem_fetch+0xe46c>)
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	460b      	mov	r3, r1
 800fcf8:	cb03      	ldmia	r3!, {r0, r1}
 800fcfa:	6010      	str	r0, [r2, #0]
 800fcfc:	6051      	str	r1, [r2, #4]
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,5,11,14,18");
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	3304      	adds	r3, #4
 800fd06:	4a3e      	ldr	r2, [pc, #248]	; (800fe00 <problem_fetch+0xe470>)
 800fd08:	461c      	mov	r4, r3
 800fd0a:	4613      	mov	r3, r2
 800fd0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd0e:	6020      	str	r0, [r4, #0]
 800fd10:	6061      	str	r1, [r4, #4]
 800fd12:	60a2      	str	r2, [r4, #8]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fd1e:	4939      	ldr	r1, [pc, #228]	; (800fe04 <problem_fetch+0xe474>)
 800fd20:	461a      	mov	r2, r3
 800fd22:	460b      	mov	r3, r1
 800fd24:	cb03      	ldmia	r3!, {r0, r1}
 800fd26:	6010      	str	r0, [r2, #0]
 800fd28:	6051      	str	r1, [r2, #4]
 800fd2a:	881b      	ldrh	r3, [r3, #0]
 800fd2c:	8113      	strh	r3, [r2, #8]
			break;
 800fd2e:	f00c bd5f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 416 :
			strcpy(p->name,"LE DOIGHT");
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd38:	4933      	ldr	r1, [pc, #204]	; (800fe08 <problem_fetch+0xe478>)
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	cb03      	ldmia	r3!, {r0, r1}
 800fd40:	6010      	str	r0, [r2, #0]
 800fd42:	6051      	str	r1, [r2, #4]
 800fd44:	881b      	ldrh	r3, [r3, #0]
 800fd46:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fd4e:	4a1c      	ldr	r2, [pc, #112]	; (800fdc0 <problem_fetch+0xe430>)
 800fd50:	8811      	ldrh	r1, [r2, #0]
 800fd52:	7892      	ldrb	r2, [r2, #2]
 800fd54:	8019      	strh	r1, [r3, #0]
 800fd56:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	2208      	movs	r2, #8
 800fd5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,E,C,G,I");
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	33a4      	adds	r3, #164	; 0xa4
 800fd62:	4a2a      	ldr	r2, [pc, #168]	; (800fe0c <problem_fetch+0xe47c>)
 800fd64:	461c      	mov	r4, r3
 800fd66:	4615      	mov	r5, r2
 800fd68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd6a:	6020      	str	r0, [r4, #0]
 800fd6c:	6061      	str	r1, [r4, #4]
 800fd6e:	60a2      	str	r2, [r4, #8]
 800fd70:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	3304      	adds	r3, #4
 800fd76:	4a26      	ldr	r2, [pc, #152]	; (800fe10 <problem_fetch+0xe480>)
 800fd78:	461d      	mov	r5, r3
 800fd7a:	4614      	mov	r4, r2
 800fd7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd7e:	6028      	str	r0, [r5, #0]
 800fd80:	6069      	str	r1, [r5, #4]
 800fd82:	60aa      	str	r2, [r5, #8]
 800fd84:	60eb      	str	r3, [r5, #12]
 800fd86:	6820      	ldr	r0, [r4, #0]
 800fd88:	6128      	str	r0, [r5, #16]
 800fd8a:	7923      	ldrb	r3, [r4, #4]
 800fd8c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fd94:	4a1f      	ldr	r2, [pc, #124]	; (800fe14 <problem_fetch+0xe484>)
 800fd96:	461c      	mov	r4, r3
 800fd98:	4615      	mov	r5, r2
 800fd9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd9c:	6020      	str	r0, [r4, #0]
 800fd9e:	6061      	str	r1, [r4, #4]
 800fda0:	60a2      	str	r2, [r4, #8]
 800fda2:	60e3      	str	r3, [r4, #12]
			break;
 800fda4:	f00c bd24 	b.w	801c7f0 <problem_fetch+0x1ae60>
 800fda8:	08028b18 	.word	0x08028b18
 800fdac:	08023b90 	.word	0x08023b90
 800fdb0:	08028b20 	.word	0x08028b20
 800fdb4:	08028b30 	.word	0x08028b30
 800fdb8:	08023c08 	.word	0x08023c08
 800fdbc:	08028b44 	.word	0x08028b44
 800fdc0:	08023b50 	.word	0x08023b50
 800fdc4:	08028b50 	.word	0x08028b50
 800fdc8:	08028b60 	.word	0x08028b60
 800fdcc:	08023d18 	.word	0x08023d18
 800fdd0:	08028b74 	.word	0x08028b74
 800fdd4:	08023c5c 	.word	0x08023c5c
 800fdd8:	08028b84 	.word	0x08028b84
 800fddc:	08028b94 	.word	0x08028b94
 800fde0:	08023da0 	.word	0x08023da0
 800fde4:	08028ba8 	.word	0x08028ba8
 800fde8:	08028bbc 	.word	0x08028bbc
 800fdec:	08028bd0 	.word	0x08028bd0
 800fdf0:	08024b74 	.word	0x08024b74
 800fdf4:	08028be8 	.word	0x08028be8
 800fdf8:	080243c4 	.word	0x080243c4
 800fdfc:	08028bfc 	.word	0x08028bfc
 800fe00:	08028c08 	.word	0x08028c08
 800fe04:	08024270 	.word	0x08024270
 800fe08:	08028c18 	.word	0x08028c18
 800fe0c:	08028c24 	.word	0x08028c24
 800fe10:	08028c34 	.word	0x08028c34
 800fe14:	08023cb4 	.word	0x08023cb4
		case 417 :
			strcpy(p->name,"LAPINERIE");
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe1e:	49a9      	ldr	r1, [pc, #676]	; (80100c4 <problem_fetch+0xe734>)
 800fe20:	461a      	mov	r2, r3
 800fe22:	460b      	mov	r3, r1
 800fe24:	cb03      	ldmia	r3!, {r0, r1}
 800fe26:	6010      	str	r0, [r2, #0]
 800fe28:	6051      	str	r1, [r2, #4]
 800fe2a:	881b      	ldrh	r3, [r3, #0]
 800fe2c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe34:	4aa4      	ldr	r2, [pc, #656]	; (80100c8 <problem_fetch+0xe738>)
 800fe36:	6810      	ldr	r0, [r2, #0]
 800fe38:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2206      	movs	r2, #6
 800fe3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,E,I");
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	33a4      	adds	r3, #164	; 0xa4
 800fe44:	4aa1      	ldr	r2, [pc, #644]	; (80100cc <problem_fetch+0xe73c>)
 800fe46:	461c      	mov	r4, r3
 800fe48:	4613      	mov	r3, r2
 800fe4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe4c:	6020      	str	r0, [r4, #0]
 800fe4e:	6061      	str	r1, [r4, #4]
 800fe50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	3304      	adds	r3, #4
 800fe56:	4a9e      	ldr	r2, [pc, #632]	; (80100d0 <problem_fetch+0xe740>)
 800fe58:	461c      	mov	r4, r3
 800fe5a:	4615      	mov	r5, r2
 800fe5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe5e:	6020      	str	r0, [r4, #0]
 800fe60:	6061      	str	r1, [r4, #4]
 800fe62:	60a2      	str	r2, [r4, #8]
 800fe64:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fe6c:	4a99      	ldr	r2, [pc, #612]	; (80100d4 <problem_fetch+0xe744>)
 800fe6e:	461c      	mov	r4, r3
 800fe70:	4613      	mov	r3, r2
 800fe72:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe74:	6020      	str	r0, [r4, #0]
 800fe76:	6061      	str	r1, [r4, #4]
 800fe78:	60a2      	str	r2, [r4, #8]
			break;
 800fe7a:	f00c bcb9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 418 :
			strcpy(p->name,"IL DOMANI");
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe84:	4994      	ldr	r1, [pc, #592]	; (80100d8 <problem_fetch+0xe748>)
 800fe86:	461a      	mov	r2, r3
 800fe88:	460b      	mov	r3, r1
 800fe8a:	cb03      	ldmia	r3!, {r0, r1}
 800fe8c:	6010      	str	r0, [r2, #0]
 800fe8e:	6051      	str	r1, [r2, #4]
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe9a:	4a90      	ldr	r2, [pc, #576]	; (80100dc <problem_fetch+0xe74c>)
 800fe9c:	8811      	ldrh	r1, [r2, #0]
 800fe9e:	7892      	ldrb	r2, [r2, #2]
 800fea0:	8019      	strh	r1, [r3, #0]
 800fea2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2205      	movs	r2, #5
 800fea8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,H,E,I");
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	33a4      	adds	r3, #164	; 0xa4
 800feae:	498c      	ldr	r1, [pc, #560]	; (80100e0 <problem_fetch+0xe750>)
 800feb0:	461a      	mov	r2, r3
 800feb2:	460b      	mov	r3, r1
 800feb4:	cb03      	ldmia	r3!, {r0, r1}
 800feb6:	6010      	str	r0, [r2, #0]
 800feb8:	6051      	str	r1, [r2, #4]
 800feba:	881b      	ldrh	r3, [r3, #0]
 800febc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3304      	adds	r3, #4
 800fec2:	4a88      	ldr	r2, [pc, #544]	; (80100e4 <problem_fetch+0xe754>)
 800fec4:	461c      	mov	r4, r3
 800fec6:	4613      	mov	r3, r2
 800fec8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800feca:	6020      	str	r0, [r4, #0]
 800fecc:	6061      	str	r1, [r4, #4]
 800fece:	60a2      	str	r2, [r4, #8]
 800fed0:	781b      	ldrb	r3, [r3, #0]
 800fed2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800feda:	4983      	ldr	r1, [pc, #524]	; (80100e8 <problem_fetch+0xe758>)
 800fedc:	461a      	mov	r2, r3
 800fede:	460b      	mov	r3, r1
 800fee0:	cb03      	ldmia	r3!, {r0, r1}
 800fee2:	6010      	str	r0, [r2, #0]
 800fee4:	6051      	str	r1, [r2, #4]
 800fee6:	881b      	ldrh	r3, [r3, #0]
 800fee8:	8113      	strh	r3, [r2, #8]
			break;
 800feea:	f00c bc81 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 419 :
			strcpy(p->name,"BLACK BEAN");
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fef4:	497d      	ldr	r1, [pc, #500]	; (80100ec <problem_fetch+0xe75c>)
 800fef6:	461a      	mov	r2, r3
 800fef8:	460b      	mov	r3, r1
 800fefa:	cb03      	ldmia	r3!, {r0, r1}
 800fefc:	6010      	str	r0, [r2, #0]
 800fefe:	6051      	str	r1, [r2, #4]
 800ff00:	8819      	ldrh	r1, [r3, #0]
 800ff02:	789b      	ldrb	r3, [r3, #2]
 800ff04:	8111      	strh	r1, [r2, #8]
 800ff06:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff0e:	4a78      	ldr	r2, [pc, #480]	; (80100f0 <problem_fetch+0xe760>)
 800ff10:	6810      	ldr	r0, [r2, #0]
 800ff12:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2208      	movs	r2, #8
 800ff18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	33a4      	adds	r3, #164	; 0xa4
 800ff1e:	4a75      	ldr	r2, [pc, #468]	; (80100f4 <problem_fetch+0xe764>)
 800ff20:	461c      	mov	r4, r3
 800ff22:	4615      	mov	r5, r2
 800ff24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff26:	6020      	str	r0, [r4, #0]
 800ff28:	6061      	str	r1, [r4, #4]
 800ff2a:	60a2      	str	r2, [r4, #8]
 800ff2c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,14,9,9,5,18");
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	3304      	adds	r3, #4
 800ff32:	4a71      	ldr	r2, [pc, #452]	; (80100f8 <problem_fetch+0xe768>)
 800ff34:	461d      	mov	r5, r3
 800ff36:	4614      	mov	r4, r2
 800ff38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff3a:	6028      	str	r0, [r5, #0]
 800ff3c:	6069      	str	r1, [r5, #4]
 800ff3e:	60aa      	str	r2, [r5, #8]
 800ff40:	60eb      	str	r3, [r5, #12]
 800ff42:	8823      	ldrh	r3, [r4, #0]
 800ff44:	78a2      	ldrb	r2, [r4, #2]
 800ff46:	822b      	strh	r3, [r5, #16]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ff52:	4a6a      	ldr	r2, [pc, #424]	; (80100fc <problem_fetch+0xe76c>)
 800ff54:	461c      	mov	r4, r3
 800ff56:	4615      	mov	r5, r2
 800ff58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff5a:	6020      	str	r0, [r4, #0]
 800ff5c:	6061      	str	r1, [r4, #4]
 800ff5e:	60a2      	str	r2, [r4, #8]
 800ff60:	60e3      	str	r3, [r4, #12]
			break;
 800ff62:	f00c bc45 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 420 :
			strcpy(p->name,"CLASSY");
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ff6c:	4a64      	ldr	r2, [pc, #400]	; (8010100 <problem_fetch+0xe770>)
 800ff6e:	6810      	ldr	r0, [r2, #0]
 800ff70:	6018      	str	r0, [r3, #0]
 800ff72:	8891      	ldrh	r1, [r2, #4]
 800ff74:	7992      	ldrb	r2, [r2, #6]
 800ff76:	8099      	strh	r1, [r3, #4]
 800ff78:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff80:	4a60      	ldr	r2, [pc, #384]	; (8010104 <problem_fetch+0xe774>)
 800ff82:	6810      	ldr	r0, [r2, #0]
 800ff84:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2205      	movs	r2, #5
 800ff8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D");
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	33a4      	adds	r3, #164	; 0xa4
 800ff90:	495d      	ldr	r1, [pc, #372]	; (8010108 <problem_fetch+0xe778>)
 800ff92:	461a      	mov	r2, r3
 800ff94:	460b      	mov	r3, r1
 800ff96:	cb03      	ldmia	r3!, {r0, r1}
 800ff98:	6010      	str	r0, [r2, #0]
 800ff9a:	6051      	str	r1, [r2, #4]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,13,18");
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	3304      	adds	r3, #4
 800ffa4:	4a59      	ldr	r2, [pc, #356]	; (801010c <problem_fetch+0xe77c>)
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffac:	6020      	str	r0, [r4, #0]
 800ffae:	6061      	str	r1, [r4, #4]
 800ffb0:	60a2      	str	r2, [r4, #8]
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ffbc:	494a      	ldr	r1, [pc, #296]	; (80100e8 <problem_fetch+0xe758>)
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	cb03      	ldmia	r3!, {r0, r1}
 800ffc4:	6010      	str	r0, [r2, #0]
 800ffc6:	6051      	str	r1, [r2, #4]
 800ffc8:	881b      	ldrh	r3, [r3, #0]
 800ffca:	8113      	strh	r3, [r2, #8]
			break;
 800ffcc:	f00c bc10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 421 :
			strcpy(p->name,"THE 45 SECRETS");
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ffd6:	4a4e      	ldr	r2, [pc, #312]	; (8010110 <problem_fetch+0xe780>)
 800ffd8:	461c      	mov	r4, r3
 800ffda:	4613      	mov	r3, r2
 800ffdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffde:	6020      	str	r0, [r4, #0]
 800ffe0:	6061      	str	r1, [r4, #4]
 800ffe2:	60a2      	str	r2, [r4, #8]
 800ffe4:	881a      	ldrh	r2, [r3, #0]
 800ffe6:	789b      	ldrb	r3, [r3, #2]
 800ffe8:	81a2      	strh	r2, [r4, #12]
 800ffea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fff2:	4a44      	ldr	r2, [pc, #272]	; (8010104 <problem_fetch+0xe774>)
 800fff4:	6810      	ldr	r0, [r2, #0]
 800fff6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2207      	movs	r2, #7
 800fffc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,A,A");
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	33a4      	adds	r3, #164	; 0xa4
 8010002:	4a44      	ldr	r2, [pc, #272]	; (8010114 <problem_fetch+0xe784>)
 8010004:	461c      	mov	r4, r3
 8010006:	4613      	mov	r3, r2
 8010008:	cb07      	ldmia	r3!, {r0, r1, r2}
 801000a:	6020      	str	r0, [r4, #0]
 801000c:	6061      	str	r1, [r4, #4]
 801000e:	60a2      	str	r2, [r4, #8]
 8010010:	881b      	ldrh	r3, [r3, #0]
 8010012:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,18");
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	3304      	adds	r3, #4
 8010018:	4a3f      	ldr	r2, [pc, #252]	; (8010118 <problem_fetch+0xe788>)
 801001a:	461d      	mov	r5, r3
 801001c:	4614      	mov	r4, r2
 801001e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010020:	6028      	str	r0, [r5, #0]
 8010022:	6069      	str	r1, [r5, #4]
 8010024:	60aa      	str	r2, [r5, #8]
 8010026:	60eb      	str	r3, [r5, #12]
 8010028:	7823      	ldrb	r3, [r4, #0]
 801002a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010032:	4a3a      	ldr	r2, [pc, #232]	; (801011c <problem_fetch+0xe78c>)
 8010034:	461c      	mov	r4, r3
 8010036:	4613      	mov	r3, r2
 8010038:	cb07      	ldmia	r3!, {r0, r1, r2}
 801003a:	6020      	str	r0, [r4, #0]
 801003c:	6061      	str	r1, [r4, #4]
 801003e:	60a2      	str	r2, [r4, #8]
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	81a3      	strh	r3, [r4, #12]
			break;
 8010044:	f00c bbd4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 422 :
			strcpy(p->name,"YOUR LAST PIECE OF CHALK");
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801004e:	4a34      	ldr	r2, [pc, #208]	; (8010120 <problem_fetch+0xe790>)
 8010050:	461d      	mov	r5, r3
 8010052:	4614      	mov	r4, r2
 8010054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010056:	6028      	str	r0, [r5, #0]
 8010058:	6069      	str	r1, [r5, #4]
 801005a:	60aa      	str	r2, [r5, #8]
 801005c:	60eb      	str	r3, [r5, #12]
 801005e:	cc03      	ldmia	r4!, {r0, r1}
 8010060:	6128      	str	r0, [r5, #16]
 8010062:	6169      	str	r1, [r5, #20]
 8010064:	7823      	ldrb	r3, [r4, #0]
 8010066:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801006e:	4a25      	ldr	r2, [pc, #148]	; (8010104 <problem_fetch+0xe774>)
 8010070:	6810      	ldr	r0, [r2, #0]
 8010072:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2207      	movs	r2, #7
 8010078:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,K,I,F,I");
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	33a4      	adds	r3, #164	; 0xa4
 801007e:	4a29      	ldr	r2, [pc, #164]	; (8010124 <problem_fetch+0xe794>)
 8010080:	461c      	mov	r4, r3
 8010082:	4613      	mov	r3, r2
 8010084:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010086:	6020      	str	r0, [r4, #0]
 8010088:	6061      	str	r1, [r4, #4]
 801008a:	60a2      	str	r2, [r4, #8]
 801008c:	881b      	ldrh	r3, [r3, #0]
 801008e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,9,14,11,18");
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	3304      	adds	r3, #4
 8010094:	4a24      	ldr	r2, [pc, #144]	; (8010128 <problem_fetch+0xe798>)
 8010096:	461d      	mov	r5, r3
 8010098:	4614      	mov	r4, r2
 801009a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801009c:	6028      	str	r0, [r5, #0]
 801009e:	6069      	str	r1, [r5, #4]
 80100a0:	60aa      	str	r2, [r5, #8]
 80100a2:	60eb      	str	r3, [r5, #12]
 80100a4:	8823      	ldrh	r3, [r4, #0]
 80100a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80100ae:	4a1b      	ldr	r2, [pc, #108]	; (801011c <problem_fetch+0xe78c>)
 80100b0:	461c      	mov	r4, r3
 80100b2:	4613      	mov	r3, r2
 80100b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100b6:	6020      	str	r0, [r4, #0]
 80100b8:	6061      	str	r1, [r4, #4]
 80100ba:	60a2      	str	r2, [r4, #8]
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	81a3      	strh	r3, [r4, #12]
			break;
 80100c0:	f00c bb96 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80100c4:	08028c4c 	.word	0x08028c4c
 80100c8:	08023ccc 	.word	0x08023ccc
 80100cc:	08028c58 	.word	0x08028c58
 80100d0:	08028c64 	.word	0x08028c64
 80100d4:	08023f2c 	.word	0x08023f2c
 80100d8:	08028c74 	.word	0x08028c74
 80100dc:	080243c4 	.word	0x080243c4
 80100e0:	08028c80 	.word	0x08028c80
 80100e4:	080241ac 	.word	0x080241ac
 80100e8:	0802405c 	.word	0x0802405c
 80100ec:	08028c8c 	.word	0x08028c8c
 80100f0:	08023d30 	.word	0x08023d30
 80100f4:	08028898 	.word	0x08028898
 80100f8:	08028c98 	.word	0x08028c98
 80100fc:	08023cb4 	.word	0x08023cb4
 8010100:	08028cac 	.word	0x08028cac
 8010104:	08023b90 	.word	0x08023b90
 8010108:	08028cb4 	.word	0x08028cb4
 801010c:	08028cc0 	.word	0x08028cc0
 8010110:	08028cd0 	.word	0x08028cd0
 8010114:	08028ce0 	.word	0x08028ce0
 8010118:	08028cf0 	.word	0x08028cf0
 801011c:	08023d18 	.word	0x08023d18
 8010120:	08028d04 	.word	0x08028d04
 8010124:	08028d20 	.word	0x08028d20
 8010128:	08028d30 	.word	0x08028d30
		case 423 :
			strcpy(p->name,"CASSIN");
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010132:	4ac0      	ldr	r2, [pc, #768]	; (8010434 <problem_fetch+0xeaa4>)
 8010134:	6810      	ldr	r0, [r2, #0]
 8010136:	6018      	str	r0, [r3, #0]
 8010138:	8891      	ldrh	r1, [r2, #4]
 801013a:	7992      	ldrb	r2, [r2, #6]
 801013c:	8099      	strh	r1, [r3, #4]
 801013e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010146:	4abc      	ldr	r2, [pc, #752]	; (8010438 <problem_fetch+0xeaa8>)
 8010148:	6810      	ldr	r0, [r2, #0]
 801014a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2206      	movs	r2, #6
 8010150:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,A");
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	33a4      	adds	r3, #164	; 0xa4
 8010156:	4ab9      	ldr	r2, [pc, #740]	; (801043c <problem_fetch+0xeaac>)
 8010158:	461c      	mov	r4, r3
 801015a:	4613      	mov	r3, r2
 801015c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801015e:	6020      	str	r0, [r4, #0]
 8010160:	6061      	str	r1, [r4, #4]
 8010162:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3304      	adds	r3, #4
 8010168:	4ab5      	ldr	r2, [pc, #724]	; (8010440 <problem_fetch+0xeab0>)
 801016a:	461c      	mov	r4, r3
 801016c:	4613      	mov	r3, r2
 801016e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010170:	6020      	str	r0, [r4, #0]
 8010172:	6061      	str	r1, [r4, #4]
 8010174:	60a2      	str	r2, [r4, #8]
 8010176:	881a      	ldrh	r2, [r3, #0]
 8010178:	789b      	ldrb	r3, [r3, #2]
 801017a:	81a2      	strh	r2, [r4, #12]
 801017c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010184:	4aaf      	ldr	r2, [pc, #700]	; (8010444 <problem_fetch+0xeab4>)
 8010186:	461c      	mov	r4, r3
 8010188:	4613      	mov	r3, r2
 801018a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801018c:	6020      	str	r0, [r4, #0]
 801018e:	6061      	str	r1, [r4, #4]
 8010190:	60a2      	str	r2, [r4, #8]
			break;
 8010192:	f00c bb2d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 424 :
			strcpy(p->name,"HOTEL SOPRAMONTE");
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801019c:	4aaa      	ldr	r2, [pc, #680]	; (8010448 <problem_fetch+0xeab8>)
 801019e:	461d      	mov	r5, r3
 80101a0:	4614      	mov	r4, r2
 80101a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101a4:	6028      	str	r0, [r5, #0]
 80101a6:	6069      	str	r1, [r5, #4]
 80101a8:	60aa      	str	r2, [r5, #8]
 80101aa:	60eb      	str	r3, [r5, #12]
 80101ac:	7823      	ldrb	r3, [r4, #0]
 80101ae:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80101b6:	4aa5      	ldr	r2, [pc, #660]	; (801044c <problem_fetch+0xeabc>)
 80101b8:	8811      	ldrh	r1, [r2, #0]
 80101ba:	7892      	ldrb	r2, [r2, #2]
 80101bc:	8019      	strh	r1, [r3, #0]
 80101be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2205      	movs	r2, #5
 80101c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,G,I");
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	33a4      	adds	r3, #164	; 0xa4
 80101ca:	49a1      	ldr	r1, [pc, #644]	; (8010450 <problem_fetch+0xeac0>)
 80101cc:	461a      	mov	r2, r3
 80101ce:	460b      	mov	r3, r1
 80101d0:	cb03      	ldmia	r3!, {r0, r1}
 80101d2:	6010      	str	r0, [r2, #0]
 80101d4:	6051      	str	r1, [r2, #4]
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	3304      	adds	r3, #4
 80101de:	4a9d      	ldr	r2, [pc, #628]	; (8010454 <problem_fetch+0xeac4>)
 80101e0:	461c      	mov	r4, r3
 80101e2:	4613      	mov	r3, r2
 80101e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80101e6:	6020      	str	r0, [r4, #0]
 80101e8:	6061      	str	r1, [r4, #4]
 80101ea:	60a2      	str	r2, [r4, #8]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80101f6:	4998      	ldr	r1, [pc, #608]	; (8010458 <problem_fetch+0xeac8>)
 80101f8:	461a      	mov	r2, r3
 80101fa:	460b      	mov	r3, r1
 80101fc:	cb03      	ldmia	r3!, {r0, r1}
 80101fe:	6010      	str	r0, [r2, #0]
 8010200:	6051      	str	r1, [r2, #4]
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	8113      	strh	r3, [r2, #8]
			break;
 8010206:	f00c baf3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 425 :
			strcpy(p->name,"THE GOLDEN GATE");
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010210:	4a92      	ldr	r2, [pc, #584]	; (801045c <problem_fetch+0xeacc>)
 8010212:	461c      	mov	r4, r3
 8010214:	4615      	mov	r5, r2
 8010216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010218:	6020      	str	r0, [r4, #0]
 801021a:	6061      	str	r1, [r4, #4]
 801021c:	60a2      	str	r2, [r4, #8]
 801021e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010226:	4a8e      	ldr	r2, [pc, #568]	; (8010460 <problem_fetch+0xead0>)
 8010228:	6810      	ldr	r0, [r2, #0]
 801022a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2206      	movs	r2, #6
 8010230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,D");
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	33a4      	adds	r3, #164	; 0xa4
 8010236:	4a8b      	ldr	r2, [pc, #556]	; (8010464 <problem_fetch+0xead4>)
 8010238:	461c      	mov	r4, r3
 801023a:	4613      	mov	r3, r2
 801023c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801023e:	6020      	str	r0, [r4, #0]
 8010240:	6061      	str	r1, [r4, #4]
 8010242:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,15,18");
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3304      	adds	r3, #4
 8010248:	4a87      	ldr	r2, [pc, #540]	; (8010468 <problem_fetch+0xead8>)
 801024a:	461c      	mov	r4, r3
 801024c:	4613      	mov	r3, r2
 801024e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010250:	6020      	str	r0, [r4, #0]
 8010252:	6061      	str	r1, [r4, #4]
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	881a      	ldrh	r2, [r3, #0]
 8010258:	789b      	ldrb	r3, [r3, #2]
 801025a:	81a2      	strh	r2, [r4, #12]
 801025c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010264:	4a81      	ldr	r2, [pc, #516]	; (801046c <problem_fetch+0xeadc>)
 8010266:	461c      	mov	r4, r3
 8010268:	4613      	mov	r3, r2
 801026a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801026c:	6020      	str	r0, [r4, #0]
 801026e:	6061      	str	r1, [r4, #4]
 8010270:	60a2      	str	r2, [r4, #8]
			break;
 8010272:	f00c babd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 426 :
			strcpy(p->name,"VASIL VASIL");
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801027c:	4a7c      	ldr	r2, [pc, #496]	; (8010470 <problem_fetch+0xeae0>)
 801027e:	461c      	mov	r4, r3
 8010280:	4613      	mov	r3, r2
 8010282:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010284:	6020      	str	r0, [r4, #0]
 8010286:	6061      	str	r1, [r4, #4]
 8010288:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010290:	4a6e      	ldr	r2, [pc, #440]	; (801044c <problem_fetch+0xeabc>)
 8010292:	8811      	ldrh	r1, [r2, #0]
 8010294:	7892      	ldrb	r2, [r2, #2]
 8010296:	8019      	strh	r1, [r3, #0]
 8010298:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2206      	movs	r2, #6
 801029e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,J,H,I");
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	33a4      	adds	r3, #164	; 0xa4
 80102a4:	4a73      	ldr	r2, [pc, #460]	; (8010474 <problem_fetch+0xeae4>)
 80102a6:	461c      	mov	r4, r3
 80102a8:	4613      	mov	r3, r2
 80102aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102ac:	6020      	str	r0, [r4, #0]
 80102ae:	6061      	str	r1, [r4, #4]
 80102b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,16,18");
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	3304      	adds	r3, #4
 80102b6:	4a70      	ldr	r2, [pc, #448]	; (8010478 <problem_fetch+0xeae8>)
 80102b8:	461c      	mov	r4, r3
 80102ba:	4613      	mov	r3, r2
 80102bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102be:	6020      	str	r0, [r4, #0]
 80102c0:	6061      	str	r1, [r4, #4]
 80102c2:	60a2      	str	r2, [r4, #8]
 80102c4:	881a      	ldrh	r2, [r3, #0]
 80102c6:	789b      	ldrb	r3, [r3, #2]
 80102c8:	81a2      	strh	r2, [r4, #12]
 80102ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80102d2:	4a66      	ldr	r2, [pc, #408]	; (801046c <problem_fetch+0xeadc>)
 80102d4:	461c      	mov	r4, r3
 80102d6:	4613      	mov	r3, r2
 80102d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102da:	6020      	str	r0, [r4, #0]
 80102dc:	6061      	str	r1, [r4, #4]
 80102de:	60a2      	str	r2, [r4, #8]
			break;
 80102e0:	f00c ba86 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 427 :
			strcpy(p->name,"WITNESS THE FITNESS");
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80102ea:	4a64      	ldr	r2, [pc, #400]	; (801047c <problem_fetch+0xeaec>)
 80102ec:	461d      	mov	r5, r3
 80102ee:	4614      	mov	r4, r2
 80102f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102f2:	6028      	str	r0, [r5, #0]
 80102f4:	6069      	str	r1, [r5, #4]
 80102f6:	60aa      	str	r2, [r5, #8]
 80102f8:	60eb      	str	r3, [r5, #12]
 80102fa:	6820      	ldr	r0, [r4, #0]
 80102fc:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010304:	4a56      	ldr	r2, [pc, #344]	; (8010460 <problem_fetch+0xead0>)
 8010306:	6810      	ldr	r0, [r2, #0]
 8010308:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2207      	movs	r2, #7
 801030e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,E,B,E,D");
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	33a4      	adds	r3, #164	; 0xa4
 8010314:	4a5a      	ldr	r2, [pc, #360]	; (8010480 <problem_fetch+0xeaf0>)
 8010316:	461c      	mov	r4, r3
 8010318:	4613      	mov	r3, r2
 801031a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801031c:	6020      	str	r0, [r4, #0]
 801031e:	6061      	str	r1, [r4, #4]
 8010320:	60a2      	str	r2, [r4, #8]
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,15,6,18");
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	3304      	adds	r3, #4
 801032a:	4a56      	ldr	r2, [pc, #344]	; (8010484 <problem_fetch+0xeaf4>)
 801032c:	461d      	mov	r5, r3
 801032e:	4614      	mov	r4, r2
 8010330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010332:	6028      	str	r0, [r5, #0]
 8010334:	6069      	str	r1, [r5, #4]
 8010336:	60aa      	str	r2, [r5, #8]
 8010338:	60eb      	str	r3, [r5, #12]
 801033a:	8823      	ldrh	r3, [r4, #0]
 801033c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010344:	4a50      	ldr	r2, [pc, #320]	; (8010488 <problem_fetch+0xeaf8>)
 8010346:	461c      	mov	r4, r3
 8010348:	4613      	mov	r3, r2
 801034a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801034c:	6020      	str	r0, [r4, #0]
 801034e:	6061      	str	r1, [r4, #4]
 8010350:	60a2      	str	r2, [r4, #8]
 8010352:	881b      	ldrh	r3, [r3, #0]
 8010354:	81a3      	strh	r3, [r4, #12]
			break;
 8010356:	f00c ba4b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 428 :
			strcpy(p->name,"LAST MOMENT");
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010360:	4a4a      	ldr	r2, [pc, #296]	; (801048c <problem_fetch+0xeafc>)
 8010362:	461c      	mov	r4, r3
 8010364:	4613      	mov	r3, r2
 8010366:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010368:	6020      	str	r0, [r4, #0]
 801036a:	6061      	str	r1, [r4, #4]
 801036c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010374:	4a3a      	ldr	r2, [pc, #232]	; (8010460 <problem_fetch+0xead0>)
 8010376:	6810      	ldr	r0, [r2, #0]
 8010378:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2205      	movs	r2, #5
 801037e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I");
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	33a4      	adds	r3, #164	; 0xa4
 8010384:	4942      	ldr	r1, [pc, #264]	; (8010490 <problem_fetch+0xeb00>)
 8010386:	461a      	mov	r2, r3
 8010388:	460b      	mov	r3, r1
 801038a:	cb03      	ldmia	r3!, {r0, r1}
 801038c:	6010      	str	r0, [r2, #0]
 801038e:	6051      	str	r1, [r2, #4]
 8010390:	881b      	ldrh	r3, [r3, #0]
 8010392:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,14,18");
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	3304      	adds	r3, #4
 8010398:	4a3e      	ldr	r2, [pc, #248]	; (8010494 <problem_fetch+0xeb04>)
 801039a:	461c      	mov	r4, r3
 801039c:	4613      	mov	r3, r2
 801039e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103a0:	6020      	str	r0, [r4, #0]
 80103a2:	6061      	str	r1, [r4, #4]
 80103a4:	60a2      	str	r2, [r4, #8]
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80103b0:	4929      	ldr	r1, [pc, #164]	; (8010458 <problem_fetch+0xeac8>)
 80103b2:	461a      	mov	r2, r3
 80103b4:	460b      	mov	r3, r1
 80103b6:	cb03      	ldmia	r3!, {r0, r1}
 80103b8:	6010      	str	r0, [r2, #0]
 80103ba:	6051      	str	r1, [r2, #4]
 80103bc:	881b      	ldrh	r3, [r3, #0]
 80103be:	8113      	strh	r3, [r2, #8]
			break;
 80103c0:	f00c ba16 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 429 :
			strcpy(p->name,"THE PROCESS");
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80103ca:	4a33      	ldr	r2, [pc, #204]	; (8010498 <problem_fetch+0xeb08>)
 80103cc:	461c      	mov	r4, r3
 80103ce:	4613      	mov	r3, r2
 80103d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103d2:	6020      	str	r0, [r4, #0]
 80103d4:	6061      	str	r1, [r4, #4]
 80103d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80103de:	4a2f      	ldr	r2, [pc, #188]	; (801049c <problem_fetch+0xeb0c>)
 80103e0:	6810      	ldr	r0, [r2, #0]
 80103e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2208      	movs	r2, #8
 80103e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,J,G,K,H,D");
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	33a4      	adds	r3, #164	; 0xa4
 80103ee:	4a2c      	ldr	r2, [pc, #176]	; (80104a0 <problem_fetch+0xeb10>)
 80103f0:	461c      	mov	r4, r3
 80103f2:	4615      	mov	r5, r2
 80103f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103f6:	6020      	str	r0, [r4, #0]
 80103f8:	6061      	str	r1, [r4, #4]
 80103fa:	60a2      	str	r2, [r4, #8]
 80103fc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,13,17,16,16,18");
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	3304      	adds	r3, #4
 8010402:	4a28      	ldr	r2, [pc, #160]	; (80104a4 <problem_fetch+0xeb14>)
 8010404:	461d      	mov	r5, r3
 8010406:	4614      	mov	r4, r2
 8010408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801040a:	6028      	str	r0, [r5, #0]
 801040c:	6069      	str	r1, [r5, #4]
 801040e:	60aa      	str	r2, [r5, #8]
 8010410:	60eb      	str	r3, [r5, #12]
 8010412:	6820      	ldr	r0, [r4, #0]
 8010414:	6128      	str	r0, [r5, #16]
 8010416:	7923      	ldrb	r3, [r4, #4]
 8010418:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010420:	4a21      	ldr	r2, [pc, #132]	; (80104a8 <problem_fetch+0xeb18>)
 8010422:	461c      	mov	r4, r3
 8010424:	4615      	mov	r5, r2
 8010426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010428:	6020      	str	r0, [r4, #0]
 801042a:	6061      	str	r1, [r4, #4]
 801042c:	60a2      	str	r2, [r4, #8]
 801042e:	60e3      	str	r3, [r4, #12]
			break;
 8010430:	f00c b9de 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8010434:	08028d44 	.word	0x08028d44
 8010438:	08023d30 	.word	0x08023d30
 801043c:	08028d4c 	.word	0x08028d4c
 8010440:	08028d58 	.word	0x08028d58
 8010444:	08023b70 	.word	0x08023b70
 8010448:	08028d68 	.word	0x08028d68
 801044c:	08024288 	.word	0x08024288
 8010450:	08028d7c 	.word	0x08028d7c
 8010454:	08028d88 	.word	0x08028d88
 8010458:	0802405c 	.word	0x0802405c
 801045c:	08028d98 	.word	0x08028d98
 8010460:	08023b90 	.word	0x08023b90
 8010464:	08028da8 	.word	0x08028da8
 8010468:	08028db4 	.word	0x08028db4
 801046c:	08023f2c 	.word	0x08023f2c
 8010470:	08028dc4 	.word	0x08028dc4
 8010474:	08028dd0 	.word	0x08028dd0
 8010478:	08028ddc 	.word	0x08028ddc
 801047c:	08028dec 	.word	0x08028dec
 8010480:	08028e00 	.word	0x08028e00
 8010484:	08028e10 	.word	0x08028e10
 8010488:	08023d18 	.word	0x08023d18
 801048c:	08028e24 	.word	0x08028e24
 8010490:	08028e30 	.word	0x08028e30
 8010494:	08028e3c 	.word	0x08028e3c
 8010498:	08028e4c 	.word	0x08028e4c
 801049c:	08023c28 	.word	0x08023c28
 80104a0:	08028e58 	.word	0x08028e58
 80104a4:	08028e68 	.word	0x08028e68
 80104a8:	08023cb4 	.word	0x08023cb4
		case 430 :
			strcpy(p->name,"THE FUNERAL (RIP PINCH)");
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80104b2:	4ac3      	ldr	r2, [pc, #780]	; (80107c0 <problem_fetch+0xee30>)
 80104b4:	461d      	mov	r5, r3
 80104b6:	4614      	mov	r4, r2
 80104b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80104ba:	6028      	str	r0, [r5, #0]
 80104bc:	6069      	str	r1, [r5, #4]
 80104be:	60aa      	str	r2, [r5, #8]
 80104c0:	60eb      	str	r3, [r5, #12]
 80104c2:	cc03      	ldmia	r4!, {r0, r1}
 80104c4:	6128      	str	r0, [r5, #16]
 80104c6:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80104ce:	4abd      	ldr	r2, [pc, #756]	; (80107c4 <problem_fetch+0xee34>)
 80104d0:	6810      	ldr	r0, [r2, #0]
 80104d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2206      	movs	r2, #6
 80104d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,I");
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	33a4      	adds	r3, #164	; 0xa4
 80104de:	4aba      	ldr	r2, [pc, #744]	; (80107c8 <problem_fetch+0xee38>)
 80104e0:	461c      	mov	r4, r3
 80104e2:	4613      	mov	r3, r2
 80104e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80104e6:	6020      	str	r0, [r4, #0]
 80104e8:	6061      	str	r1, [r4, #4]
 80104ea:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	3304      	adds	r3, #4
 80104f0:	4ab6      	ldr	r2, [pc, #728]	; (80107cc <problem_fetch+0xee3c>)
 80104f2:	461c      	mov	r4, r3
 80104f4:	4615      	mov	r5, r2
 80104f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104f8:	6020      	str	r0, [r4, #0]
 80104fa:	6061      	str	r1, [r4, #4]
 80104fc:	60a2      	str	r2, [r4, #8]
 80104fe:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010506:	4ab2      	ldr	r2, [pc, #712]	; (80107d0 <problem_fetch+0xee40>)
 8010508:	461c      	mov	r4, r3
 801050a:	4613      	mov	r3, r2
 801050c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801050e:	6020      	str	r0, [r4, #0]
 8010510:	6061      	str	r1, [r4, #4]
 8010512:	60a2      	str	r2, [r4, #8]
			break;
 8010514:	f00c b96c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 431 :
			strcpy(p->name,"THE PINCH OF DEATH");
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801051e:	4aad      	ldr	r2, [pc, #692]	; (80107d4 <problem_fetch+0xee44>)
 8010520:	461d      	mov	r5, r3
 8010522:	4614      	mov	r4, r2
 8010524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010526:	6028      	str	r0, [r5, #0]
 8010528:	6069      	str	r1, [r5, #4]
 801052a:	60aa      	str	r2, [r5, #8]
 801052c:	60eb      	str	r3, [r5, #12]
 801052e:	8823      	ldrh	r3, [r4, #0]
 8010530:	78a2      	ldrb	r2, [r4, #2]
 8010532:	822b      	strh	r3, [r5, #16]
 8010534:	4613      	mov	r3, r2
 8010536:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801053e:	4aa6      	ldr	r2, [pc, #664]	; (80107d8 <problem_fetch+0xee48>)
 8010540:	8811      	ldrh	r1, [r2, #0]
 8010542:	7892      	ldrb	r2, [r2, #2]
 8010544:	8019      	strh	r1, [r3, #0]
 8010546:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2206      	movs	r2, #6
 801054c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,D,A");
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	33a4      	adds	r3, #164	; 0xa4
 8010552:	4aa2      	ldr	r2, [pc, #648]	; (80107dc <problem_fetch+0xee4c>)
 8010554:	461c      	mov	r4, r3
 8010556:	4613      	mov	r3, r2
 8010558:	cb07      	ldmia	r3!, {r0, r1, r2}
 801055a:	6020      	str	r0, [r4, #0]
 801055c:	6061      	str	r1, [r4, #4]
 801055e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	3304      	adds	r3, #4
 8010564:	4a99      	ldr	r2, [pc, #612]	; (80107cc <problem_fetch+0xee3c>)
 8010566:	461c      	mov	r4, r3
 8010568:	4615      	mov	r5, r2
 801056a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801056c:	6020      	str	r0, [r4, #0]
 801056e:	6061      	str	r1, [r4, #4]
 8010570:	60a2      	str	r2, [r4, #8]
 8010572:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801057a:	4a95      	ldr	r2, [pc, #596]	; (80107d0 <problem_fetch+0xee40>)
 801057c:	461c      	mov	r4, r3
 801057e:	4613      	mov	r3, r2
 8010580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010582:	6020      	str	r0, [r4, #0]
 8010584:	6061      	str	r1, [r4, #4]
 8010586:	60a2      	str	r2, [r4, #8]
			break;
 8010588:	f00c b932 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 432 :
			strcpy(p->name,"COBRA REALE");
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010592:	4a93      	ldr	r2, [pc, #588]	; (80107e0 <problem_fetch+0xee50>)
 8010594:	461c      	mov	r4, r3
 8010596:	4613      	mov	r3, r2
 8010598:	cb07      	ldmia	r3!, {r0, r1, r2}
 801059a:	6020      	str	r0, [r4, #0]
 801059c:	6061      	str	r1, [r4, #4]
 801059e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80105a6:	4a8f      	ldr	r2, [pc, #572]	; (80107e4 <problem_fetch+0xee54>)
 80105a8:	6810      	ldr	r0, [r2, #0]
 80105aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2206      	movs	r2, #6
 80105b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,A");
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	33a4      	adds	r3, #164	; 0xa4
 80105b6:	4a8c      	ldr	r2, [pc, #560]	; (80107e8 <problem_fetch+0xee58>)
 80105b8:	461c      	mov	r4, r3
 80105ba:	4613      	mov	r3, r2
 80105bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	6061      	str	r1, [r4, #4]
 80105c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,14,18");
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4a88      	ldr	r2, [pc, #544]	; (80107ec <problem_fetch+0xee5c>)
 80105ca:	461c      	mov	r4, r3
 80105cc:	4613      	mov	r3, r2
 80105ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105d0:	6020      	str	r0, [r4, #0]
 80105d2:	6061      	str	r1, [r4, #4]
 80105d4:	60a2      	str	r2, [r4, #8]
 80105d6:	881a      	ldrh	r2, [r3, #0]
 80105d8:	789b      	ldrb	r3, [r3, #2]
 80105da:	81a2      	strh	r2, [r4, #12]
 80105dc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80105e4:	4a82      	ldr	r2, [pc, #520]	; (80107f0 <problem_fetch+0xee60>)
 80105e6:	461c      	mov	r4, r3
 80105e8:	4613      	mov	r3, r2
 80105ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105ec:	6020      	str	r0, [r4, #0]
 80105ee:	6061      	str	r1, [r4, #4]
 80105f0:	60a2      	str	r2, [r4, #8]
			break;
 80105f2:	f00c b8fd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 433 :
			strcpy(p->name,"OMBRA");
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80105fc:	4a7d      	ldr	r2, [pc, #500]	; (80107f4 <problem_fetch+0xee64>)
 80105fe:	6810      	ldr	r0, [r2, #0]
 8010600:	6018      	str	r0, [r3, #0]
 8010602:	8892      	ldrh	r2, [r2, #4]
 8010604:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801060c:	4a6d      	ldr	r2, [pc, #436]	; (80107c4 <problem_fetch+0xee34>)
 801060e:	6810      	ldr	r0, [r2, #0]
 8010610:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2207      	movs	r2, #7
 8010616:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,G,D");
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	33a4      	adds	r3, #164	; 0xa4
 801061c:	4a76      	ldr	r2, [pc, #472]	; (80107f8 <problem_fetch+0xee68>)
 801061e:	461c      	mov	r4, r3
 8010620:	4613      	mov	r3, r2
 8010622:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010624:	6020      	str	r0, [r4, #0]
 8010626:	6061      	str	r1, [r4, #4]
 8010628:	60a2      	str	r2, [r4, #8]
 801062a:	881b      	ldrh	r3, [r3, #0]
 801062c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,14,17,18");
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	3304      	adds	r3, #4
 8010632:	4a72      	ldr	r2, [pc, #456]	; (80107fc <problem_fetch+0xee6c>)
 8010634:	461d      	mov	r5, r3
 8010636:	4614      	mov	r4, r2
 8010638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801063a:	6028      	str	r0, [r5, #0]
 801063c:	6069      	str	r1, [r5, #4]
 801063e:	60aa      	str	r2, [r5, #8]
 8010640:	60eb      	str	r3, [r5, #12]
 8010642:	8823      	ldrh	r3, [r4, #0]
 8010644:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801064c:	4a6c      	ldr	r2, [pc, #432]	; (8010800 <problem_fetch+0xee70>)
 801064e:	461c      	mov	r4, r3
 8010650:	4613      	mov	r3, r2
 8010652:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010654:	6020      	str	r0, [r4, #0]
 8010656:	6061      	str	r1, [r4, #4]
 8010658:	60a2      	str	r2, [r4, #8]
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	81a3      	strh	r3, [r4, #12]
			break;
 801065e:	f00c b8c7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 434 :
			strcpy(p->name,"CORNALBA");
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010668:	4966      	ldr	r1, [pc, #408]	; (8010804 <problem_fetch+0xee74>)
 801066a:	461a      	mov	r2, r3
 801066c:	460b      	mov	r3, r1
 801066e:	cb03      	ldmia	r3!, {r0, r1}
 8010670:	6010      	str	r0, [r2, #0]
 8010672:	6051      	str	r1, [r2, #4]
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801067e:	4a59      	ldr	r2, [pc, #356]	; (80107e4 <problem_fetch+0xee54>)
 8010680:	6810      	ldr	r0, [r2, #0]
 8010682:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2207      	movs	r2, #7
 8010688:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,H,J,K,I");
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	33a4      	adds	r3, #164	; 0xa4
 801068e:	4a5e      	ldr	r2, [pc, #376]	; (8010808 <problem_fetch+0xee78>)
 8010690:	461c      	mov	r4, r3
 8010692:	4613      	mov	r3, r2
 8010694:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010696:	6020      	str	r0, [r4, #0]
 8010698:	6061      	str	r1, [r4, #4]
 801069a:	60a2      	str	r2, [r4, #8]
 801069c:	881b      	ldrh	r3, [r3, #0]
 801069e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,12,12,16,18");
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	3304      	adds	r3, #4
 80106a4:	4a59      	ldr	r2, [pc, #356]	; (801080c <problem_fetch+0xee7c>)
 80106a6:	461d      	mov	r5, r3
 80106a8:	4614      	mov	r4, r2
 80106aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106ac:	6028      	str	r0, [r5, #0]
 80106ae:	6069      	str	r1, [r5, #4]
 80106b0:	60aa      	str	r2, [r5, #8]
 80106b2:	60eb      	str	r3, [r5, #12]
 80106b4:	8823      	ldrh	r3, [r4, #0]
 80106b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80106be:	4a54      	ldr	r2, [pc, #336]	; (8010810 <problem_fetch+0xee80>)
 80106c0:	461c      	mov	r4, r3
 80106c2:	4613      	mov	r3, r2
 80106c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80106c6:	6020      	str	r0, [r4, #0]
 80106c8:	6061      	str	r1, [r4, #4]
 80106ca:	60a2      	str	r2, [r4, #8]
 80106cc:	881b      	ldrh	r3, [r3, #0]
 80106ce:	81a3      	strh	r3, [r4, #12]
			break;
 80106d0:	f00c b88e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 435 :
			strcpy(p->name,"BIOGRAPHIE");
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80106da:	494e      	ldr	r1, [pc, #312]	; (8010814 <problem_fetch+0xee84>)
 80106dc:	461a      	mov	r2, r3
 80106de:	460b      	mov	r3, r1
 80106e0:	cb03      	ldmia	r3!, {r0, r1}
 80106e2:	6010      	str	r0, [r2, #0]
 80106e4:	6051      	str	r1, [r2, #4]
 80106e6:	8819      	ldrh	r1, [r3, #0]
 80106e8:	789b      	ldrb	r3, [r3, #2]
 80106ea:	8111      	strh	r1, [r2, #8]
 80106ec:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80106f4:	4a48      	ldr	r2, [pc, #288]	; (8010818 <problem_fetch+0xee88>)
 80106f6:	8811      	ldrh	r1, [r2, #0]
 80106f8:	7892      	ldrb	r2, [r2, #2]
 80106fa:	8019      	strh	r1, [r3, #0]
 80106fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2207      	movs	r2, #7
 8010702:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,H,E,D");
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	33a4      	adds	r3, #164	; 0xa4
 8010708:	4a44      	ldr	r2, [pc, #272]	; (801081c <problem_fetch+0xee8c>)
 801070a:	461c      	mov	r4, r3
 801070c:	4613      	mov	r3, r2
 801070e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010710:	6020      	str	r0, [r4, #0]
 8010712:	6061      	str	r1, [r4, #4]
 8010714:	60a2      	str	r2, [r4, #8]
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,16,18");
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3304      	adds	r3, #4
 801071e:	4a40      	ldr	r2, [pc, #256]	; (8010820 <problem_fetch+0xee90>)
 8010720:	461d      	mov	r5, r3
 8010722:	4614      	mov	r4, r2
 8010724:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010726:	6028      	str	r0, [r5, #0]
 8010728:	6069      	str	r1, [r5, #4]
 801072a:	60aa      	str	r2, [r5, #8]
 801072c:	60eb      	str	r3, [r5, #12]
 801072e:	8823      	ldrh	r3, [r4, #0]
 8010730:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010738:	4a35      	ldr	r2, [pc, #212]	; (8010810 <problem_fetch+0xee80>)
 801073a:	461c      	mov	r4, r3
 801073c:	4613      	mov	r3, r2
 801073e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010740:	6020      	str	r0, [r4, #0]
 8010742:	6061      	str	r1, [r4, #4]
 8010744:	60a2      	str	r2, [r4, #8]
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	81a3      	strh	r3, [r4, #12]
			break;
 801074a:	f00c b851 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 436 :
			strcpy(p->name,"LITTLEFINGER");
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010754:	4a33      	ldr	r2, [pc, #204]	; (8010824 <problem_fetch+0xee94>)
 8010756:	461c      	mov	r4, r3
 8010758:	4613      	mov	r3, r2
 801075a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801075c:	6020      	str	r0, [r4, #0]
 801075e:	6061      	str	r1, [r4, #4]
 8010760:	60a2      	str	r2, [r4, #8]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801076c:	4a1a      	ldr	r2, [pc, #104]	; (80107d8 <problem_fetch+0xee48>)
 801076e:	8811      	ldrh	r1, [r2, #0]
 8010770:	7892      	ldrb	r2, [r2, #2]
 8010772:	8019      	strh	r1, [r3, #0]
 8010774:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2205      	movs	r2, #5
 801077a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I");
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	33a4      	adds	r3, #164	; 0xa4
 8010780:	4929      	ldr	r1, [pc, #164]	; (8010828 <problem_fetch+0xee98>)
 8010782:	461a      	mov	r2, r3
 8010784:	460b      	mov	r3, r1
 8010786:	cb03      	ldmia	r3!, {r0, r1}
 8010788:	6010      	str	r0, [r2, #0]
 801078a:	6051      	str	r1, [r2, #4]
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,13,16,18");
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	3304      	adds	r3, #4
 8010794:	4a25      	ldr	r2, [pc, #148]	; (801082c <problem_fetch+0xee9c>)
 8010796:	461c      	mov	r4, r3
 8010798:	4613      	mov	r3, r2
 801079a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801079c:	6020      	str	r0, [r4, #0]
 801079e:	6061      	str	r1, [r4, #4]
 80107a0:	60a2      	str	r2, [r4, #8]
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80107ac:	4920      	ldr	r1, [pc, #128]	; (8010830 <problem_fetch+0xeea0>)
 80107ae:	461a      	mov	r2, r3
 80107b0:	460b      	mov	r3, r1
 80107b2:	cb03      	ldmia	r3!, {r0, r1}
 80107b4:	6010      	str	r0, [r2, #0]
 80107b6:	6051      	str	r1, [r2, #4]
 80107b8:	881b      	ldrh	r3, [r3, #0]
 80107ba:	8113      	strh	r3, [r2, #8]
			break;
 80107bc:	f00c b818 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80107c0:	08028e80 	.word	0x08028e80
 80107c4:	08023c28 	.word	0x08023c28
 80107c8:	08028e98 	.word	0x08028e98
 80107cc:	08028ea4 	.word	0x08028ea4
 80107d0:	08023f2c 	.word	0x08023f2c
 80107d4:	08028eb4 	.word	0x08028eb4
 80107d8:	08023c5c 	.word	0x08023c5c
 80107dc:	08028ec8 	.word	0x08028ec8
 80107e0:	08028ed4 	.word	0x08028ed4
 80107e4:	08023d30 	.word	0x08023d30
 80107e8:	08028ee0 	.word	0x08028ee0
 80107ec:	08028eec 	.word	0x08028eec
 80107f0:	08023b70 	.word	0x08023b70
 80107f4:	08028efc 	.word	0x08028efc
 80107f8:	08028f04 	.word	0x08028f04
 80107fc:	08028f14 	.word	0x08028f14
 8010800:	08023d18 	.word	0x08023d18
 8010804:	08028f28 	.word	0x08028f28
 8010808:	08028f34 	.word	0x08028f34
 801080c:	08028f44 	.word	0x08028f44
 8010810:	08023c08 	.word	0x08023c08
 8010814:	08028f58 	.word	0x08028f58
 8010818:	08023b50 	.word	0x08023b50
 801081c:	08028f64 	.word	0x08028f64
 8010820:	08028f74 	.word	0x08028f74
 8010824:	08028f88 	.word	0x08028f88
 8010828:	08028f98 	.word	0x08028f98
 801082c:	08028fa4 	.word	0x08028fa4
 8010830:	0802405c 	.word	0x0802405c
		case 437 :
			strcpy(p->name,"THE POWER OF 9");
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801083a:	4aad      	ldr	r2, [pc, #692]	; (8010af0 <problem_fetch+0xf160>)
 801083c:	461c      	mov	r4, r3
 801083e:	4613      	mov	r3, r2
 8010840:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010842:	6020      	str	r0, [r4, #0]
 8010844:	6061      	str	r1, [r4, #4]
 8010846:	60a2      	str	r2, [r4, #8]
 8010848:	881a      	ldrh	r2, [r3, #0]
 801084a:	789b      	ldrb	r3, [r3, #2]
 801084c:	81a2      	strh	r2, [r4, #12]
 801084e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010856:	4aa7      	ldr	r2, [pc, #668]	; (8010af4 <problem_fetch+0xf164>)
 8010858:	6810      	ldr	r0, [r2, #0]
 801085a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2207      	movs	r2, #7
 8010860:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,E,E,E,I");
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	33a4      	adds	r3, #164	; 0xa4
 8010866:	4aa4      	ldr	r2, [pc, #656]	; (8010af8 <problem_fetch+0xf168>)
 8010868:	461c      	mov	r4, r3
 801086a:	4613      	mov	r3, r2
 801086c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801086e:	6020      	str	r0, [r4, #0]
 8010870:	6061      	str	r1, [r4, #4]
 8010872:	60a2      	str	r2, [r4, #8]
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,12,16,18");
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	3304      	adds	r3, #4
 801087c:	4a9f      	ldr	r2, [pc, #636]	; (8010afc <problem_fetch+0xf16c>)
 801087e:	461d      	mov	r5, r3
 8010880:	4614      	mov	r4, r2
 8010882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010884:	6028      	str	r0, [r5, #0]
 8010886:	6069      	str	r1, [r5, #4]
 8010888:	60aa      	str	r2, [r5, #8]
 801088a:	60eb      	str	r3, [r5, #12]
 801088c:	7823      	ldrb	r3, [r4, #0]
 801088e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010896:	4a9a      	ldr	r2, [pc, #616]	; (8010b00 <problem_fetch+0xf170>)
 8010898:	461c      	mov	r4, r3
 801089a:	4613      	mov	r3, r2
 801089c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801089e:	6020      	str	r0, [r4, #0]
 80108a0:	6061      	str	r1, [r4, #4]
 80108a2:	60a2      	str	r2, [r4, #8]
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	81a3      	strh	r3, [r4, #12]
			break;
 80108a8:	f00b bfa2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 438 :
			strcpy(p->name,"PUSSY DAVAILLE");
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80108b2:	4a94      	ldr	r2, [pc, #592]	; (8010b04 <problem_fetch+0xf174>)
 80108b4:	461c      	mov	r4, r3
 80108b6:	4613      	mov	r3, r2
 80108b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80108ba:	6020      	str	r0, [r4, #0]
 80108bc:	6061      	str	r1, [r4, #4]
 80108be:	60a2      	str	r2, [r4, #8]
 80108c0:	881a      	ldrh	r2, [r3, #0]
 80108c2:	789b      	ldrb	r3, [r3, #2]
 80108c4:	81a2      	strh	r2, [r4, #12]
 80108c6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80108ce:	4a8e      	ldr	r2, [pc, #568]	; (8010b08 <problem_fetch+0xf178>)
 80108d0:	8811      	ldrh	r1, [r2, #0]
 80108d2:	7892      	ldrb	r2, [r2, #2]
 80108d4:	8019      	strh	r1, [r3, #0]
 80108d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2207      	movs	r2, #7
 80108dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,C,G,E,B,D");
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	33a4      	adds	r3, #164	; 0xa4
 80108e2:	4a8a      	ldr	r2, [pc, #552]	; (8010b0c <problem_fetch+0xf17c>)
 80108e4:	461c      	mov	r4, r3
 80108e6:	4613      	mov	r3, r2
 80108e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80108ea:	6020      	str	r0, [r4, #0]
 80108ec:	6061      	str	r1, [r4, #4]
 80108ee:	60a2      	str	r2, [r4, #8]
 80108f0:	881b      	ldrh	r3, [r3, #0]
 80108f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,9,12,15,18");
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	3304      	adds	r3, #4
 80108f8:	4a85      	ldr	r2, [pc, #532]	; (8010b10 <problem_fetch+0xf180>)
 80108fa:	461d      	mov	r5, r3
 80108fc:	4614      	mov	r4, r2
 80108fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010900:	6028      	str	r0, [r5, #0]
 8010902:	6069      	str	r1, [r5, #4]
 8010904:	60aa      	str	r2, [r5, #8]
 8010906:	60eb      	str	r3, [r5, #12]
 8010908:	7823      	ldrb	r3, [r4, #0]
 801090a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010912:	4a7b      	ldr	r2, [pc, #492]	; (8010b00 <problem_fetch+0xf170>)
 8010914:	461c      	mov	r4, r3
 8010916:	4613      	mov	r3, r2
 8010918:	cb07      	ldmia	r3!, {r0, r1, r2}
 801091a:	6020      	str	r0, [r4, #0]
 801091c:	6061      	str	r1, [r4, #4]
 801091e:	60a2      	str	r2, [r4, #8]
 8010920:	881b      	ldrh	r3, [r3, #0]
 8010922:	81a3      	strh	r3, [r4, #12]
			break;
 8010924:	f00b bf64 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 439 :
			strcpy(p->name,"IN THE PINES");
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801092e:	4a79      	ldr	r2, [pc, #484]	; (8010b14 <problem_fetch+0xf184>)
 8010930:	461c      	mov	r4, r3
 8010932:	4613      	mov	r3, r2
 8010934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010936:	6020      	str	r0, [r4, #0]
 8010938:	6061      	str	r1, [r4, #4]
 801093a:	60a2      	str	r2, [r4, #8]
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010946:	4a6b      	ldr	r2, [pc, #428]	; (8010af4 <problem_fetch+0xf164>)
 8010948:	6810      	ldr	r0, [r2, #0]
 801094a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2208      	movs	r2, #8
 8010950:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,G,G,D");
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	33a4      	adds	r3, #164	; 0xa4
 8010956:	4a70      	ldr	r2, [pc, #448]	; (8010b18 <problem_fetch+0xf188>)
 8010958:	461c      	mov	r4, r3
 801095a:	4615      	mov	r5, r2
 801095c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801095e:	6020      	str	r0, [r4, #0]
 8010960:	6061      	str	r1, [r4, #4]
 8010962:	60a2      	str	r2, [r4, #8]
 8010964:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18");
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	3304      	adds	r3, #4
 801096a:	4a6c      	ldr	r2, [pc, #432]	; (8010b1c <problem_fetch+0xf18c>)
 801096c:	461d      	mov	r5, r3
 801096e:	4614      	mov	r4, r2
 8010970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010972:	6028      	str	r0, [r5, #0]
 8010974:	6069      	str	r1, [r5, #4]
 8010976:	60aa      	str	r2, [r5, #8]
 8010978:	60eb      	str	r3, [r5, #12]
 801097a:	6820      	ldr	r0, [r4, #0]
 801097c:	6128      	str	r0, [r5, #16]
 801097e:	88a3      	ldrh	r3, [r4, #4]
 8010980:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010988:	4a65      	ldr	r2, [pc, #404]	; (8010b20 <problem_fetch+0xf190>)
 801098a:	461c      	mov	r4, r3
 801098c:	4615      	mov	r5, r2
 801098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010990:	6020      	str	r0, [r4, #0]
 8010992:	6061      	str	r1, [r4, #4]
 8010994:	60a2      	str	r2, [r4, #8]
 8010996:	60e3      	str	r3, [r4, #12]
			break;
 8010998:	f00b bf2a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 440 :
			strcpy(p->name,"THE ONLY LIGHT");
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80109a2:	4a60      	ldr	r2, [pc, #384]	; (8010b24 <problem_fetch+0xf194>)
 80109a4:	461c      	mov	r4, r3
 80109a6:	4613      	mov	r3, r2
 80109a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109aa:	6020      	str	r0, [r4, #0]
 80109ac:	6061      	str	r1, [r4, #4]
 80109ae:	60a2      	str	r2, [r4, #8]
 80109b0:	881a      	ldrh	r2, [r3, #0]
 80109b2:	789b      	ldrb	r3, [r3, #2]
 80109b4:	81a2      	strh	r2, [r4, #12]
 80109b6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80109be:	4a52      	ldr	r2, [pc, #328]	; (8010b08 <problem_fetch+0xf178>)
 80109c0:	8811      	ldrh	r1, [r2, #0]
 80109c2:	7892      	ldrb	r2, [r2, #2]
 80109c4:	8019      	strh	r1, [r3, #0]
 80109c6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2207      	movs	r2, #7
 80109cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,F,H,E,D");
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	33a4      	adds	r3, #164	; 0xa4
 80109d2:	4a55      	ldr	r2, [pc, #340]	; (8010b28 <problem_fetch+0xf198>)
 80109d4:	461c      	mov	r4, r3
 80109d6:	4613      	mov	r3, r2
 80109d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109da:	6020      	str	r0, [r4, #0]
 80109dc:	6061      	str	r1, [r4, #4]
 80109de:	60a2      	str	r2, [r4, #8]
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,13,16,18");
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	3304      	adds	r3, #4
 80109e8:	4a50      	ldr	r2, [pc, #320]	; (8010b2c <problem_fetch+0xf19c>)
 80109ea:	461d      	mov	r5, r3
 80109ec:	4614      	mov	r4, r2
 80109ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109f0:	6028      	str	r0, [r5, #0]
 80109f2:	6069      	str	r1, [r5, #4]
 80109f4:	60aa      	str	r2, [r5, #8]
 80109f6:	60eb      	str	r3, [r5, #12]
 80109f8:	8823      	ldrh	r3, [r4, #0]
 80109fa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a02:	4a3f      	ldr	r2, [pc, #252]	; (8010b00 <problem_fetch+0xf170>)
 8010a04:	461c      	mov	r4, r3
 8010a06:	4613      	mov	r3, r2
 8010a08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a0a:	6020      	str	r0, [r4, #0]
 8010a0c:	6061      	str	r1, [r4, #4]
 8010a0e:	60a2      	str	r2, [r4, #8]
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	81a3      	strh	r3, [r4, #12]
			break;
 8010a14:	f00b beec 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 441 :
			strcpy(p->name,"DEFYING GRAVITY");
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a1e:	4a44      	ldr	r2, [pc, #272]	; (8010b30 <problem_fetch+0xf1a0>)
 8010a20:	461c      	mov	r4, r3
 8010a22:	4615      	mov	r5, r2
 8010a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a26:	6020      	str	r0, [r4, #0]
 8010a28:	6061      	str	r1, [r4, #4]
 8010a2a:	60a2      	str	r2, [r4, #8]
 8010a2c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a34:	4a3f      	ldr	r2, [pc, #252]	; (8010b34 <problem_fetch+0xf1a4>)
 8010a36:	6810      	ldr	r0, [r2, #0]
 8010a38:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	2206      	movs	r2, #6
 8010a3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,E,D");
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	33a4      	adds	r3, #164	; 0xa4
 8010a44:	4a3c      	ldr	r2, [pc, #240]	; (8010b38 <problem_fetch+0xf1a8>)
 8010a46:	461c      	mov	r4, r3
 8010a48:	4613      	mov	r3, r2
 8010a4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a4c:	6020      	str	r0, [r4, #0]
 8010a4e:	6061      	str	r1, [r4, #4]
 8010a50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,16,8,18");
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3304      	adds	r3, #4
 8010a56:	4a39      	ldr	r2, [pc, #228]	; (8010b3c <problem_fetch+0xf1ac>)
 8010a58:	461c      	mov	r4, r3
 8010a5a:	4615      	mov	r5, r2
 8010a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a5e:	6020      	str	r0, [r4, #0]
 8010a60:	6061      	str	r1, [r4, #4]
 8010a62:	60a2      	str	r2, [r4, #8]
 8010a64:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a6c:	4a34      	ldr	r2, [pc, #208]	; (8010b40 <problem_fetch+0xf1b0>)
 8010a6e:	461c      	mov	r4, r3
 8010a70:	4613      	mov	r3, r2
 8010a72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a74:	6020      	str	r0, [r4, #0]
 8010a76:	6061      	str	r1, [r4, #4]
 8010a78:	60a2      	str	r2, [r4, #8]
			break;
 8010a7a:	f00b beb9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 442 :
			strcpy(p->name,"BIG PAW");
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a84:	492f      	ldr	r1, [pc, #188]	; (8010b44 <problem_fetch+0xf1b4>)
 8010a86:	461a      	mov	r2, r3
 8010a88:	460b      	mov	r3, r1
 8010a8a:	cb03      	ldmia	r3!, {r0, r1}
 8010a8c:	6010      	str	r0, [r2, #0]
 8010a8e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B");
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a96:	4a2c      	ldr	r2, [pc, #176]	; (8010b48 <problem_fetch+0xf1b8>)
 8010a98:	8811      	ldrh	r1, [r2, #0]
 8010a9a:	7892      	ldrb	r2, [r2, #2]
 8010a9c:	8019      	strh	r1, [r3, #0]
 8010a9e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2207      	movs	r2, #7
 8010aa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,I,H,K,E,I");
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	33a4      	adds	r3, #164	; 0xa4
 8010aaa:	4a28      	ldr	r2, [pc, #160]	; (8010b4c <problem_fetch+0xf1bc>)
 8010aac:	461c      	mov	r4, r3
 8010aae:	4613      	mov	r3, r2
 8010ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ab2:	6020      	str	r0, [r4, #0]
 8010ab4:	6061      	str	r1, [r4, #4]
 8010ab6:	60a2      	str	r2, [r4, #8]
 8010ab8:	881b      	ldrh	r3, [r3, #0]
 8010aba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,9,18");
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4a23      	ldr	r2, [pc, #140]	; (8010b50 <problem_fetch+0xf1c0>)
 8010ac2:	461d      	mov	r5, r3
 8010ac4:	4614      	mov	r4, r2
 8010ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ac8:	6028      	str	r0, [r5, #0]
 8010aca:	6069      	str	r1, [r5, #4]
 8010acc:	60aa      	str	r2, [r5, #8]
 8010ace:	60eb      	str	r3, [r5, #12]
 8010ad0:	7823      	ldrb	r3, [r4, #0]
 8010ad2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010ada:	4a09      	ldr	r2, [pc, #36]	; (8010b00 <problem_fetch+0xf170>)
 8010adc:	461c      	mov	r4, r3
 8010ade:	4613      	mov	r3, r2
 8010ae0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ae2:	6020      	str	r0, [r4, #0]
 8010ae4:	6061      	str	r1, [r4, #4]
 8010ae6:	60a2      	str	r2, [r4, #8]
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	81a3      	strh	r3, [r4, #12]
			break;
 8010aec:	f00b be80 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8010af0:	08028fb4 	.word	0x08028fb4
 8010af4:	08023b90 	.word	0x08023b90
 8010af8:	08028fc4 	.word	0x08028fc4
 8010afc:	08028fd4 	.word	0x08028fd4
 8010b00:	08023c08 	.word	0x08023c08
 8010b04:	08028fe8 	.word	0x08028fe8
 8010b08:	08023c5c 	.word	0x08023c5c
 8010b0c:	08028ff8 	.word	0x08028ff8
 8010b10:	08029008 	.word	0x08029008
 8010b14:	0802901c 	.word	0x0802901c
 8010b18:	0802902c 	.word	0x0802902c
 8010b1c:	0802903c 	.word	0x0802903c
 8010b20:	08023da0 	.word	0x08023da0
 8010b24:	08029054 	.word	0x08029054
 8010b28:	08029064 	.word	0x08029064
 8010b2c:	08029074 	.word	0x08029074
 8010b30:	08029088 	.word	0x08029088
 8010b34:	08023c28 	.word	0x08023c28
 8010b38:	08029098 	.word	0x08029098
 8010b3c:	080290a4 	.word	0x080290a4
 8010b40:	08023f2c 	.word	0x08023f2c
 8010b44:	080290b4 	.word	0x080290b4
 8010b48:	08024288 	.word	0x08024288
 8010b4c:	080290bc 	.word	0x080290bc
 8010b50:	080290cc 	.word	0x080290cc
		case 443 :
			strcpy(p->name,"UGLY LITTLE PROBLEM");
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010b5a:	4aaa      	ldr	r2, [pc, #680]	; (8010e04 <problem_fetch+0xf474>)
 8010b5c:	461d      	mov	r5, r3
 8010b5e:	4614      	mov	r4, r2
 8010b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b62:	6028      	str	r0, [r5, #0]
 8010b64:	6069      	str	r1, [r5, #4]
 8010b66:	60aa      	str	r2, [r5, #8]
 8010b68:	60eb      	str	r3, [r5, #12]
 8010b6a:	6820      	ldr	r0, [r4, #0]
 8010b6c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010b74:	4aa4      	ldr	r2, [pc, #656]	; (8010e08 <problem_fetch+0xf478>)
 8010b76:	8811      	ldrh	r1, [r2, #0]
 8010b78:	7892      	ldrb	r2, [r2, #2]
 8010b7a:	8019      	strh	r1, [r3, #0]
 8010b7c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2205      	movs	r2, #5
 8010b82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,B,B,A");
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	33a4      	adds	r3, #164	; 0xa4
 8010b88:	49a0      	ldr	r1, [pc, #640]	; (8010e0c <problem_fetch+0xf47c>)
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	cb03      	ldmia	r3!, {r0, r1}
 8010b90:	6010      	str	r0, [r2, #0]
 8010b92:	6051      	str	r1, [r2, #4]
 8010b94:	881b      	ldrh	r3, [r3, #0]
 8010b96:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,15,18");
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	3304      	adds	r3, #4
 8010b9c:	4a9c      	ldr	r2, [pc, #624]	; (8010e10 <problem_fetch+0xf480>)
 8010b9e:	461c      	mov	r4, r3
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ba4:	6020      	str	r0, [r4, #0]
 8010ba6:	6061      	str	r1, [r4, #4]
 8010ba8:	60a2      	str	r2, [r4, #8]
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010bb4:	4997      	ldr	r1, [pc, #604]	; (8010e14 <problem_fetch+0xf484>)
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	460b      	mov	r3, r1
 8010bba:	cb03      	ldmia	r3!, {r0, r1}
 8010bbc:	6010      	str	r0, [r2, #0]
 8010bbe:	6051      	str	r1, [r2, #4]
 8010bc0:	881b      	ldrh	r3, [r3, #0]
 8010bc2:	8113      	strh	r3, [r2, #8]
			break;
 8010bc4:	f00b be14 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 444 :
			strcpy(p->name,"SHOULDER STRIKE");
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010bce:	4a92      	ldr	r2, [pc, #584]	; (8010e18 <problem_fetch+0xf488>)
 8010bd0:	461c      	mov	r4, r3
 8010bd2:	4615      	mov	r5, r2
 8010bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010bd6:	6020      	str	r0, [r4, #0]
 8010bd8:	6061      	str	r1, [r4, #4]
 8010bda:	60a2      	str	r2, [r4, #8]
 8010bdc:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010be4:	4a8d      	ldr	r2, [pc, #564]	; (8010e1c <problem_fetch+0xf48c>)
 8010be6:	8811      	ldrh	r1, [r2, #0]
 8010be8:	7892      	ldrb	r2, [r2, #2]
 8010bea:	8019      	strh	r1, [r3, #0]
 8010bec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2207      	movs	r2, #7
 8010bf2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,G,H,I,I");
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	33a4      	adds	r3, #164	; 0xa4
 8010bf8:	4a89      	ldr	r2, [pc, #548]	; (8010e20 <problem_fetch+0xf490>)
 8010bfa:	461c      	mov	r4, r3
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c00:	6020      	str	r0, [r4, #0]
 8010c02:	6061      	str	r1, [r4, #4]
 8010c04:	60a2      	str	r2, [r4, #8]
 8010c06:	881b      	ldrh	r3, [r3, #0]
 8010c08:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,12,15,5,7,18");
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	4a85      	ldr	r2, [pc, #532]	; (8010e24 <problem_fetch+0xf494>)
 8010c10:	461d      	mov	r5, r3
 8010c12:	4614      	mov	r4, r2
 8010c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c16:	6028      	str	r0, [r5, #0]
 8010c18:	6069      	str	r1, [r5, #4]
 8010c1a:	60aa      	str	r2, [r5, #8]
 8010c1c:	60eb      	str	r3, [r5, #12]
 8010c1e:	7823      	ldrb	r3, [r4, #0]
 8010c20:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010c28:	4a7f      	ldr	r2, [pc, #508]	; (8010e28 <problem_fetch+0xf498>)
 8010c2a:	461c      	mov	r4, r3
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c30:	6020      	str	r0, [r4, #0]
 8010c32:	6061      	str	r1, [r4, #4]
 8010c34:	60a2      	str	r2, [r4, #8]
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	81a3      	strh	r3, [r4, #12]
			break;
 8010c3a:	f00b bdd9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 445 :
			strcpy(p->name,"CRUXY E9");
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c44:	4979      	ldr	r1, [pc, #484]	; (8010e2c <problem_fetch+0xf49c>)
 8010c46:	461a      	mov	r2, r3
 8010c48:	460b      	mov	r3, r1
 8010c4a:	cb03      	ldmia	r3!, {r0, r1}
 8010c4c:	6010      	str	r0, [r2, #0]
 8010c4e:	6051      	str	r1, [r2, #4]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010c5a:	4a70      	ldr	r2, [pc, #448]	; (8010e1c <problem_fetch+0xf48c>)
 8010c5c:	8811      	ldrh	r1, [r2, #0]
 8010c5e:	7892      	ldrb	r2, [r2, #2]
 8010c60:	8019      	strh	r1, [r3, #0]
 8010c62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2207      	movs	r2, #7
 8010c68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,I,E,B,A");
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	33a4      	adds	r3, #164	; 0xa4
 8010c6e:	4a70      	ldr	r2, [pc, #448]	; (8010e30 <problem_fetch+0xf4a0>)
 8010c70:	461c      	mov	r4, r3
 8010c72:	4613      	mov	r3, r2
 8010c74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c76:	6020      	str	r0, [r4, #0]
 8010c78:	6061      	str	r1, [r4, #4]
 8010c7a:	60a2      	str	r2, [r4, #8]
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,7,12,15,18");
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	3304      	adds	r3, #4
 8010c84:	4a6b      	ldr	r2, [pc, #428]	; (8010e34 <problem_fetch+0xf4a4>)
 8010c86:	461d      	mov	r5, r3
 8010c88:	4614      	mov	r4, r2
 8010c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c8c:	6028      	str	r0, [r5, #0]
 8010c8e:	6069      	str	r1, [r5, #4]
 8010c90:	60aa      	str	r2, [r5, #8]
 8010c92:	60eb      	str	r3, [r5, #12]
 8010c94:	7823      	ldrb	r3, [r4, #0]
 8010c96:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010c9e:	4a62      	ldr	r2, [pc, #392]	; (8010e28 <problem_fetch+0xf498>)
 8010ca0:	461c      	mov	r4, r3
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ca6:	6020      	str	r0, [r4, #0]
 8010ca8:	6061      	str	r1, [r4, #4]
 8010caa:	60a2      	str	r2, [r4, #8]
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	81a3      	strh	r3, [r4, #12]
			break;
 8010cb0:	f00b bd9e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 446 :
			strcpy(p->name,"RECOVERY DRINK");
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010cba:	4a5f      	ldr	r2, [pc, #380]	; (8010e38 <problem_fetch+0xf4a8>)
 8010cbc:	461c      	mov	r4, r3
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010cc2:	6020      	str	r0, [r4, #0]
 8010cc4:	6061      	str	r1, [r4, #4]
 8010cc6:	60a2      	str	r2, [r4, #8]
 8010cc8:	881a      	ldrh	r2, [r3, #0]
 8010cca:	789b      	ldrb	r3, [r3, #2]
 8010ccc:	81a2      	strh	r2, [r4, #12]
 8010cce:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010cd6:	4a59      	ldr	r2, [pc, #356]	; (8010e3c <problem_fetch+0xf4ac>)
 8010cd8:	6810      	ldr	r0, [r2, #0]
 8010cda:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2206      	movs	r2, #6
 8010ce0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,H,I,I");
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	33a4      	adds	r3, #164	; 0xa4
 8010ce6:	4a56      	ldr	r2, [pc, #344]	; (8010e40 <problem_fetch+0xf4b0>)
 8010ce8:	461c      	mov	r4, r3
 8010cea:	4613      	mov	r3, r2
 8010cec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010cee:	6020      	str	r0, [r4, #0]
 8010cf0:	6061      	str	r1, [r4, #4]
 8010cf2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	3304      	adds	r3, #4
 8010cf8:	4a52      	ldr	r2, [pc, #328]	; (8010e44 <problem_fetch+0xf4b4>)
 8010cfa:	461c      	mov	r4, r3
 8010cfc:	4615      	mov	r5, r2
 8010cfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d00:	6020      	str	r0, [r4, #0]
 8010d02:	6061      	str	r1, [r4, #4]
 8010d04:	60a2      	str	r2, [r4, #8]
 8010d06:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d0e:	4a4e      	ldr	r2, [pc, #312]	; (8010e48 <problem_fetch+0xf4b8>)
 8010d10:	461c      	mov	r4, r3
 8010d12:	4613      	mov	r3, r2
 8010d14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d16:	6020      	str	r0, [r4, #0]
 8010d18:	6061      	str	r1, [r4, #4]
 8010d1a:	60a2      	str	r2, [r4, #8]
			break;
 8010d1c:	f00b bd68 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 447 :
			strcpy(p->name,"PACHIMAMA");
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d26:	4949      	ldr	r1, [pc, #292]	; (8010e4c <problem_fetch+0xf4bc>)
 8010d28:	461a      	mov	r2, r3
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	cb03      	ldmia	r3!, {r0, r1}
 8010d2e:	6010      	str	r0, [r2, #0]
 8010d30:	6051      	str	r1, [r2, #4]
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d3c:	4a32      	ldr	r2, [pc, #200]	; (8010e08 <problem_fetch+0xf478>)
 8010d3e:	8811      	ldrh	r1, [r2, #0]
 8010d40:	7892      	ldrb	r2, [r2, #2]
 8010d42:	8019      	strh	r1, [r3, #0]
 8010d44:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2206      	movs	r2, #6
 8010d4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,K,I");
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	33a4      	adds	r3, #164	; 0xa4
 8010d50:	4a3f      	ldr	r2, [pc, #252]	; (8010e50 <problem_fetch+0xf4c0>)
 8010d52:	461c      	mov	r4, r3
 8010d54:	4613      	mov	r3, r2
 8010d56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d58:	6020      	str	r0, [r4, #0]
 8010d5a:	6061      	str	r1, [r4, #4]
 8010d5c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	3304      	adds	r3, #4
 8010d62:	4a3c      	ldr	r2, [pc, #240]	; (8010e54 <problem_fetch+0xf4c4>)
 8010d64:	461c      	mov	r4, r3
 8010d66:	4613      	mov	r3, r2
 8010d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d6a:	6020      	str	r0, [r4, #0]
 8010d6c:	6061      	str	r1, [r4, #4]
 8010d6e:	60a2      	str	r2, [r4, #8]
 8010d70:	881a      	ldrh	r2, [r3, #0]
 8010d72:	789b      	ldrb	r3, [r3, #2]
 8010d74:	81a2      	strh	r2, [r4, #12]
 8010d76:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d7e:	4a36      	ldr	r2, [pc, #216]	; (8010e58 <problem_fetch+0xf4c8>)
 8010d80:	461c      	mov	r4, r3
 8010d82:	4613      	mov	r3, r2
 8010d84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d86:	6020      	str	r0, [r4, #0]
 8010d88:	6061      	str	r1, [r4, #4]
 8010d8a:	60a2      	str	r2, [r4, #8]
			break;
 8010d8c:	f00b bd30 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 448 :
			strcpy(p->name,"CRAZYCRACKER");
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d96:	4a31      	ldr	r2, [pc, #196]	; (8010e5c <problem_fetch+0xf4cc>)
 8010d98:	461c      	mov	r4, r3
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d9e:	6020      	str	r0, [r4, #0]
 8010da0:	6061      	str	r1, [r4, #4]
 8010da2:	60a2      	str	r2, [r4, #8]
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010dae:	4a2c      	ldr	r2, [pc, #176]	; (8010e60 <problem_fetch+0xf4d0>)
 8010db0:	6810      	ldr	r0, [r2, #0]
 8010db2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2208      	movs	r2, #8
 8010db8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,I,G,J,H,G,D");
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	33a4      	adds	r3, #164	; 0xa4
 8010dbe:	4a29      	ldr	r2, [pc, #164]	; (8010e64 <problem_fetch+0xf4d4>)
 8010dc0:	461c      	mov	r4, r3
 8010dc2:	4615      	mov	r5, r2
 8010dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc6:	6020      	str	r0, [r4, #0]
 8010dc8:	6061      	str	r1, [r4, #4]
 8010dca:	60a2      	str	r2, [r4, #8]
 8010dcc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4a25      	ldr	r2, [pc, #148]	; (8010e68 <problem_fetch+0xf4d8>)
 8010dd4:	461d      	mov	r5, r3
 8010dd6:	4614      	mov	r4, r2
 8010dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dda:	6028      	str	r0, [r5, #0]
 8010ddc:	6069      	str	r1, [r5, #4]
 8010dde:	60aa      	str	r2, [r5, #8]
 8010de0:	60eb      	str	r3, [r5, #12]
 8010de2:	6820      	ldr	r0, [r4, #0]
 8010de4:	6128      	str	r0, [r5, #16]
 8010de6:	7923      	ldrb	r3, [r4, #4]
 8010de8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010df0:	4a1e      	ldr	r2, [pc, #120]	; (8010e6c <problem_fetch+0xf4dc>)
 8010df2:	461c      	mov	r4, r3
 8010df4:	4615      	mov	r5, r2
 8010df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010df8:	6020      	str	r0, [r4, #0]
 8010dfa:	6061      	str	r1, [r4, #4]
 8010dfc:	60a2      	str	r2, [r4, #8]
 8010dfe:	60e3      	str	r3, [r4, #12]
			break;
 8010e00:	f00b bcf6 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8010e04:	080290e0 	.word	0x080290e0
 8010e08:	08023b50 	.word	0x08023b50
 8010e0c:	080290f4 	.word	0x080290f4
 8010e10:	08029100 	.word	0x08029100
 8010e14:	0802405c 	.word	0x0802405c
 8010e18:	08029110 	.word	0x08029110
 8010e1c:	08024288 	.word	0x08024288
 8010e20:	08029120 	.word	0x08029120
 8010e24:	08029130 	.word	0x08029130
 8010e28:	08023d18 	.word	0x08023d18
 8010e2c:	08029144 	.word	0x08029144
 8010e30:	08029150 	.word	0x08029150
 8010e34:	08029160 	.word	0x08029160
 8010e38:	08029174 	.word	0x08029174
 8010e3c:	08023ccc 	.word	0x08023ccc
 8010e40:	08029184 	.word	0x08029184
 8010e44:	08029190 	.word	0x08029190
 8010e48:	08023f2c 	.word	0x08023f2c
 8010e4c:	080291a0 	.word	0x080291a0
 8010e50:	080291ac 	.word	0x080291ac
 8010e54:	08028d58 	.word	0x08028d58
 8010e58:	08023b70 	.word	0x08023b70
 8010e5c:	080291b8 	.word	0x080291b8
 8010e60:	08023d30 	.word	0x08023d30
 8010e64:	080291c8 	.word	0x080291c8
 8010e68:	08028c34 	.word	0x08028c34
 8010e6c:	08023cb4 	.word	0x08023cb4
		case 449 :
			strcpy(p->name,"CLIMBING ON BLANK");
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010e76:	4aaa      	ldr	r2, [pc, #680]	; (8011120 <problem_fetch+0xf790>)
 8010e78:	461d      	mov	r5, r3
 8010e7a:	4614      	mov	r4, r2
 8010e7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e7e:	6028      	str	r0, [r5, #0]
 8010e80:	6069      	str	r1, [r5, #4]
 8010e82:	60aa      	str	r2, [r5, #8]
 8010e84:	60eb      	str	r3, [r5, #12]
 8010e86:	8823      	ldrh	r3, [r4, #0]
 8010e88:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010e90:	4aa4      	ldr	r2, [pc, #656]	; (8011124 <problem_fetch+0xf794>)
 8010e92:	8811      	ldrh	r1, [r2, #0]
 8010e94:	7892      	ldrb	r2, [r2, #2]
 8010e96:	8019      	strh	r1, [r3, #0]
 8010e98:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2206      	movs	r2, #6
 8010e9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,E,E,I");
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	33a4      	adds	r3, #164	; 0xa4
 8010ea4:	4aa0      	ldr	r2, [pc, #640]	; (8011128 <problem_fetch+0xf798>)
 8010ea6:	461c      	mov	r4, r3
 8010ea8:	4613      	mov	r3, r2
 8010eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010eac:	6020      	str	r0, [r4, #0]
 8010eae:	6061      	str	r1, [r4, #4]
 8010eb0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,16,18");
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	3304      	adds	r3, #4
 8010eb6:	4a9d      	ldr	r2, [pc, #628]	; (801112c <problem_fetch+0xf79c>)
 8010eb8:	461c      	mov	r4, r3
 8010eba:	4613      	mov	r3, r2
 8010ebc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ebe:	6020      	str	r0, [r4, #0]
 8010ec0:	6061      	str	r1, [r4, #4]
 8010ec2:	60a2      	str	r2, [r4, #8]
 8010ec4:	881a      	ldrh	r2, [r3, #0]
 8010ec6:	789b      	ldrb	r3, [r3, #2]
 8010ec8:	81a2      	strh	r2, [r4, #12]
 8010eca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010ed2:	4a97      	ldr	r2, [pc, #604]	; (8011130 <problem_fetch+0xf7a0>)
 8010ed4:	461c      	mov	r4, r3
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010eda:	6020      	str	r0, [r4, #0]
 8010edc:	6061      	str	r1, [r4, #4]
 8010ede:	60a2      	str	r2, [r4, #8]
			break;
 8010ee0:	f00b bc86 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 450 :
			strcpy(p->name,"PHSYCHO");
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010eea:	4992      	ldr	r1, [pc, #584]	; (8011134 <problem_fetch+0xf7a4>)
 8010eec:	461a      	mov	r2, r3
 8010eee:	460b      	mov	r3, r1
 8010ef0:	cb03      	ldmia	r3!, {r0, r1}
 8010ef2:	6010      	str	r0, [r2, #0]
 8010ef4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010efc:	4a8e      	ldr	r2, [pc, #568]	; (8011138 <problem_fetch+0xf7a8>)
 8010efe:	6810      	ldr	r0, [r2, #0]
 8010f00:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2207      	movs	r2, #7
 8010f06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,F,G,D,G,D");
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	33a4      	adds	r3, #164	; 0xa4
 8010f0c:	4a8b      	ldr	r2, [pc, #556]	; (801113c <problem_fetch+0xf7ac>)
 8010f0e:	461c      	mov	r4, r3
 8010f10:	4613      	mov	r3, r2
 8010f12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010f14:	6020      	str	r0, [r4, #0]
 8010f16:	6061      	str	r1, [r4, #4]
 8010f18:	60a2      	str	r2, [r4, #8]
 8010f1a:	881b      	ldrh	r3, [r3, #0]
 8010f1c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,13,17,7,10,18");
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	3304      	adds	r3, #4
 8010f22:	4a87      	ldr	r2, [pc, #540]	; (8011140 <problem_fetch+0xf7b0>)
 8010f24:	461d      	mov	r5, r3
 8010f26:	4614      	mov	r4, r2
 8010f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f2a:	6028      	str	r0, [r5, #0]
 8010f2c:	6069      	str	r1, [r5, #4]
 8010f2e:	60aa      	str	r2, [r5, #8]
 8010f30:	60eb      	str	r3, [r5, #12]
 8010f32:	8823      	ldrh	r3, [r4, #0]
 8010f34:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010f3c:	4a81      	ldr	r2, [pc, #516]	; (8011144 <problem_fetch+0xf7b4>)
 8010f3e:	461c      	mov	r4, r3
 8010f40:	4613      	mov	r3, r2
 8010f42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010f44:	6020      	str	r0, [r4, #0]
 8010f46:	6061      	str	r1, [r4, #4]
 8010f48:	60a2      	str	r2, [r4, #8]
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	81a3      	strh	r3, [r4, #12]
			break;
 8010f4e:	f00b bc4f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 451 :
			strcpy(p->name,"THE UNREAL THING");
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010f58:	4a7b      	ldr	r2, [pc, #492]	; (8011148 <problem_fetch+0xf7b8>)
 8010f5a:	461d      	mov	r5, r3
 8010f5c:	4614      	mov	r4, r2
 8010f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f60:	6028      	str	r0, [r5, #0]
 8010f62:	6069      	str	r1, [r5, #4]
 8010f64:	60aa      	str	r2, [r5, #8]
 8010f66:	60eb      	str	r3, [r5, #12]
 8010f68:	7823      	ldrb	r3, [r4, #0]
 8010f6a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010f72:	4a76      	ldr	r2, [pc, #472]	; (801114c <problem_fetch+0xf7bc>)
 8010f74:	6810      	ldr	r0, [r2, #0]
 8010f76:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2208      	movs	r2, #8
 8010f7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,E,A,D,A");
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	33a4      	adds	r3, #164	; 0xa4
 8010f82:	4a73      	ldr	r2, [pc, #460]	; (8011150 <problem_fetch+0xf7c0>)
 8010f84:	461c      	mov	r4, r3
 8010f86:	4615      	mov	r5, r2
 8010f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f8a:	6020      	str	r0, [r4, #0]
 8010f8c:	6061      	str	r1, [r4, #4]
 8010f8e:	60a2      	str	r2, [r4, #8]
 8010f90:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,15,18");
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	3304      	adds	r3, #4
 8010f96:	4a6f      	ldr	r2, [pc, #444]	; (8011154 <problem_fetch+0xf7c4>)
 8010f98:	461d      	mov	r5, r3
 8010f9a:	4614      	mov	r4, r2
 8010f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f9e:	6028      	str	r0, [r5, #0]
 8010fa0:	6069      	str	r1, [r5, #4]
 8010fa2:	60aa      	str	r2, [r5, #8]
 8010fa4:	60eb      	str	r3, [r5, #12]
 8010fa6:	6820      	ldr	r0, [r4, #0]
 8010fa8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010fb0:	4a69      	ldr	r2, [pc, #420]	; (8011158 <problem_fetch+0xf7c8>)
 8010fb2:	461c      	mov	r4, r3
 8010fb4:	4615      	mov	r5, r2
 8010fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fb8:	6020      	str	r0, [r4, #0]
 8010fba:	6061      	str	r1, [r4, #4]
 8010fbc:	60a2      	str	r2, [r4, #8]
 8010fbe:	60e3      	str	r3, [r4, #12]
			break;
 8010fc0:	f00b bc16 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 452 :
			strcpy(p->name,"THE NIGHTMARE");
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010fca:	4a64      	ldr	r2, [pc, #400]	; (801115c <problem_fetch+0xf7cc>)
 8010fcc:	461c      	mov	r4, r3
 8010fce:	4613      	mov	r3, r2
 8010fd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010fd2:	6020      	str	r0, [r4, #0]
 8010fd4:	6061      	str	r1, [r4, #4]
 8010fd6:	60a2      	str	r2, [r4, #8]
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010fe2:	4a5f      	ldr	r2, [pc, #380]	; (8011160 <problem_fetch+0xf7d0>)
 8010fe4:	6810      	ldr	r0, [r2, #0]
 8010fe6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2208      	movs	r2, #8
 8010fec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,B,E,F,D");
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	33a4      	adds	r3, #164	; 0xa4
 8010ff2:	4a5c      	ldr	r2, [pc, #368]	; (8011164 <problem_fetch+0xf7d4>)
 8010ff4:	461c      	mov	r4, r3
 8010ff6:	4615      	mov	r5, r2
 8010ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ffa:	6020      	str	r0, [r4, #0]
 8010ffc:	6061      	str	r1, [r4, #4]
 8010ffe:	60a2      	str	r2, [r4, #8]
 8011000:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,7,9,15,12,11,18");
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3304      	adds	r3, #4
 8011006:	4a58      	ldr	r2, [pc, #352]	; (8011168 <problem_fetch+0xf7d8>)
 8011008:	461d      	mov	r5, r3
 801100a:	4614      	mov	r4, r2
 801100c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801100e:	6028      	str	r0, [r5, #0]
 8011010:	6069      	str	r1, [r5, #4]
 8011012:	60aa      	str	r2, [r5, #8]
 8011014:	60eb      	str	r3, [r5, #12]
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011020:	4a52      	ldr	r2, [pc, #328]	; (801116c <problem_fetch+0xf7dc>)
 8011022:	461c      	mov	r4, r3
 8011024:	4615      	mov	r5, r2
 8011026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011028:	6020      	str	r0, [r4, #0]
 801102a:	6061      	str	r1, [r4, #4]
 801102c:	60a2      	str	r2, [r4, #8]
 801102e:	60e3      	str	r3, [r4, #12]
			break;
 8011030:	f00b bbde 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 453 :
			strcpy(p->name,"THE BIG DREAM");
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801103a:	4a4d      	ldr	r2, [pc, #308]	; (8011170 <problem_fetch+0xf7e0>)
 801103c:	461c      	mov	r4, r3
 801103e:	4613      	mov	r3, r2
 8011040:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011042:	6020      	str	r0, [r4, #0]
 8011044:	6061      	str	r1, [r4, #4]
 8011046:	60a2      	str	r2, [r4, #8]
 8011048:	881b      	ldrh	r3, [r3, #0]
 801104a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011052:	4a48      	ldr	r2, [pc, #288]	; (8011174 <problem_fetch+0xf7e4>)
 8011054:	8811      	ldrh	r1, [r2, #0]
 8011056:	7892      	ldrb	r2, [r2, #2]
 8011058:	8019      	strh	r1, [r3, #0]
 801105a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2208      	movs	r2, #8
 8011060:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,E,F,I,I");
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	33a4      	adds	r3, #164	; 0xa4
 8011066:	4a44      	ldr	r2, [pc, #272]	; (8011178 <problem_fetch+0xf7e8>)
 8011068:	461c      	mov	r4, r3
 801106a:	4615      	mov	r5, r2
 801106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801106e:	6020      	str	r0, [r4, #0]
 8011070:	6061      	str	r1, [r4, #4]
 8011072:	60a2      	str	r2, [r4, #8]
 8011074:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,12,13,14,18");
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3304      	adds	r3, #4
 801107a:	4a40      	ldr	r2, [pc, #256]	; (801117c <problem_fetch+0xf7ec>)
 801107c:	461d      	mov	r5, r3
 801107e:	4614      	mov	r4, r2
 8011080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011082:	6028      	str	r0, [r5, #0]
 8011084:	6069      	str	r1, [r5, #4]
 8011086:	60aa      	str	r2, [r5, #8]
 8011088:	60eb      	str	r3, [r5, #12]
 801108a:	6820      	ldr	r0, [r4, #0]
 801108c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011094:	4a35      	ldr	r2, [pc, #212]	; (801116c <problem_fetch+0xf7dc>)
 8011096:	461c      	mov	r4, r3
 8011098:	4615      	mov	r5, r2
 801109a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801109c:	6020      	str	r0, [r4, #0]
 801109e:	6061      	str	r1, [r4, #4]
 80110a0:	60a2      	str	r2, [r4, #8]
 80110a2:	60e3      	str	r3, [r4, #12]
			break;
 80110a4:	f00b bba4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 454 :
			strcpy(p->name,"THE LAPSUS SISTER");
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80110ae:	4a34      	ldr	r2, [pc, #208]	; (8011180 <problem_fetch+0xf7f0>)
 80110b0:	461d      	mov	r5, r3
 80110b2:	4614      	mov	r4, r2
 80110b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110b6:	6028      	str	r0, [r5, #0]
 80110b8:	6069      	str	r1, [r5, #4]
 80110ba:	60aa      	str	r2, [r5, #8]
 80110bc:	60eb      	str	r3, [r5, #12]
 80110be:	8823      	ldrh	r3, [r4, #0]
 80110c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80110c8:	4a20      	ldr	r2, [pc, #128]	; (801114c <problem_fetch+0xf7bc>)
 80110ca:	6810      	ldr	r0, [r2, #0]
 80110cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2207      	movs	r2, #7
 80110d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,B,E,B,D,D");
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	33a4      	adds	r3, #164	; 0xa4
 80110d8:	4a2a      	ldr	r2, [pc, #168]	; (8011184 <problem_fetch+0xf7f4>)
 80110da:	461c      	mov	r4, r3
 80110dc:	4613      	mov	r3, r2
 80110de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110e0:	6020      	str	r0, [r4, #0]
 80110e2:	6061      	str	r1, [r4, #4]
 80110e4:	60a2      	str	r2, [r4, #8]
 80110e6:	881b      	ldrh	r3, [r3, #0]
 80110e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,15,7,18");
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	3304      	adds	r3, #4
 80110ee:	4a26      	ldr	r2, [pc, #152]	; (8011188 <problem_fetch+0xf7f8>)
 80110f0:	461d      	mov	r5, r3
 80110f2:	4614      	mov	r4, r2
 80110f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110f6:	6028      	str	r0, [r5, #0]
 80110f8:	6069      	str	r1, [r5, #4]
 80110fa:	60aa      	str	r2, [r5, #8]
 80110fc:	60eb      	str	r3, [r5, #12]
 80110fe:	8823      	ldrh	r3, [r4, #0]
 8011100:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011108:	4a0e      	ldr	r2, [pc, #56]	; (8011144 <problem_fetch+0xf7b4>)
 801110a:	461c      	mov	r4, r3
 801110c:	4613      	mov	r3, r2
 801110e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011110:	6020      	str	r0, [r4, #0]
 8011112:	6061      	str	r1, [r4, #4]
 8011114:	60a2      	str	r2, [r4, #8]
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	81a3      	strh	r3, [r4, #12]
			break;
 801111a:	f00b bb69 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801111e:	bf00      	nop
 8011120:	080291d8 	.word	0x080291d8
 8011124:	08023b50 	.word	0x08023b50
 8011128:	080291ec 	.word	0x080291ec
 801112c:	080291f8 	.word	0x080291f8
 8011130:	08023f2c 	.word	0x08023f2c
 8011134:	08029208 	.word	0x08029208
 8011138:	08023d30 	.word	0x08023d30
 801113c:	08029210 	.word	0x08029210
 8011140:	08029220 	.word	0x08029220
 8011144:	08023c08 	.word	0x08023c08
 8011148:	08029234 	.word	0x08029234
 801114c:	08023b90 	.word	0x08023b90
 8011150:	08029248 	.word	0x08029248
 8011154:	08029258 	.word	0x08029258
 8011158:	08023da0 	.word	0x08023da0
 801115c:	0802926c 	.word	0x0802926c
 8011160:	08023c28 	.word	0x08023c28
 8011164:	0802927c 	.word	0x0802927c
 8011168:	0802928c 	.word	0x0802928c
 801116c:	08023cb4 	.word	0x08023cb4
 8011170:	080292a0 	.word	0x080292a0
 8011174:	08023c5c 	.word	0x08023c5c
 8011178:	080292b0 	.word	0x080292b0
 801117c:	080292c0 	.word	0x080292c0
 8011180:	080292d4 	.word	0x080292d4
 8011184:	080292e8 	.word	0x080292e8
 8011188:	080292f8 	.word	0x080292f8
		case 455 :
			strcpy(p->name,"TENDON DAY");
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011192:	49b0      	ldr	r1, [pc, #704]	; (8011454 <problem_fetch+0xfac4>)
 8011194:	461a      	mov	r2, r3
 8011196:	460b      	mov	r3, r1
 8011198:	cb03      	ldmia	r3!, {r0, r1}
 801119a:	6010      	str	r0, [r2, #0]
 801119c:	6051      	str	r1, [r2, #4]
 801119e:	8819      	ldrh	r1, [r3, #0]
 80111a0:	789b      	ldrb	r3, [r3, #2]
 80111a2:	8111      	strh	r1, [r2, #8]
 80111a4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80111ac:	4aaa      	ldr	r2, [pc, #680]	; (8011458 <problem_fetch+0xfac8>)
 80111ae:	8811      	ldrh	r1, [r2, #0]
 80111b0:	7892      	ldrb	r2, [r2, #2]
 80111b2:	8019      	strh	r1, [r3, #0]
 80111b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2208      	movs	r2, #8
 80111ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,E,A,E,A");
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	33a4      	adds	r3, #164	; 0xa4
 80111c0:	4aa6      	ldr	r2, [pc, #664]	; (801145c <problem_fetch+0xfacc>)
 80111c2:	461c      	mov	r4, r3
 80111c4:	4615      	mov	r5, r2
 80111c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111c8:	6020      	str	r0, [r4, #0]
 80111ca:	6061      	str	r1, [r4, #4]
 80111cc:	60a2      	str	r2, [r4, #8]
 80111ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,8,12,14,14,18");
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	3304      	adds	r3, #4
 80111d4:	4aa2      	ldr	r2, [pc, #648]	; (8011460 <problem_fetch+0xfad0>)
 80111d6:	461d      	mov	r5, r3
 80111d8:	4614      	mov	r4, r2
 80111da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111dc:	6028      	str	r0, [r5, #0]
 80111de:	6069      	str	r1, [r5, #4]
 80111e0:	60aa      	str	r2, [r5, #8]
 80111e2:	60eb      	str	r3, [r5, #12]
 80111e4:	6820      	ldr	r0, [r4, #0]
 80111e6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80111ee:	4a9d      	ldr	r2, [pc, #628]	; (8011464 <problem_fetch+0xfad4>)
 80111f0:	461c      	mov	r4, r3
 80111f2:	4615      	mov	r5, r2
 80111f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80111f6:	6020      	str	r0, [r4, #0]
 80111f8:	6061      	str	r1, [r4, #4]
 80111fa:	60a2      	str	r2, [r4, #8]
 80111fc:	60e3      	str	r3, [r4, #12]
			break;
 80111fe:	f00b baf7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 456 :
			strcpy(p->name,"LESS REST MORE INJURY");
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011208:	4a97      	ldr	r2, [pc, #604]	; (8011468 <problem_fetch+0xfad8>)
 801120a:	461d      	mov	r5, r3
 801120c:	4614      	mov	r4, r2
 801120e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011210:	6028      	str	r0, [r5, #0]
 8011212:	6069      	str	r1, [r5, #4]
 8011214:	60aa      	str	r2, [r5, #8]
 8011216:	60eb      	str	r3, [r5, #12]
 8011218:	6820      	ldr	r0, [r4, #0]
 801121a:	6128      	str	r0, [r5, #16]
 801121c:	88a3      	ldrh	r3, [r4, #4]
 801121e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011226:	4a91      	ldr	r2, [pc, #580]	; (801146c <problem_fetch+0xfadc>)
 8011228:	6810      	ldr	r0, [r2, #0]
 801122a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2209      	movs	r2, #9
 8011230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,G,F,G,J,G,D");
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	33a4      	adds	r3, #164	; 0xa4
 8011236:	4a8e      	ldr	r2, [pc, #568]	; (8011470 <problem_fetch+0xfae0>)
 8011238:	461d      	mov	r5, r3
 801123a:	4614      	mov	r4, r2
 801123c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801123e:	6028      	str	r0, [r5, #0]
 8011240:	6069      	str	r1, [r5, #4]
 8011242:	60aa      	str	r2, [r5, #8]
 8011244:	60eb      	str	r3, [r5, #12]
 8011246:	8823      	ldrh	r3, [r4, #0]
 8011248:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,7,9,11,17,13,15,18");
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	3304      	adds	r3, #4
 801124e:	4a89      	ldr	r2, [pc, #548]	; (8011474 <problem_fetch+0xfae4>)
 8011250:	461c      	mov	r4, r3
 8011252:	4615      	mov	r5, r2
 8011254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011256:	6020      	str	r0, [r4, #0]
 8011258:	6061      	str	r1, [r4, #4]
 801125a:	60a2      	str	r2, [r4, #8]
 801125c:	60e3      	str	r3, [r4, #12]
 801125e:	6828      	ldr	r0, [r5, #0]
 8011260:	6120      	str	r0, [r4, #16]
 8011262:	88ab      	ldrh	r3, [r5, #4]
 8011264:	79aa      	ldrb	r2, [r5, #6]
 8011266:	82a3      	strh	r3, [r4, #20]
 8011268:	4613      	mov	r3, r2
 801126a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011272:	4a81      	ldr	r2, [pc, #516]	; (8011478 <problem_fetch+0xfae8>)
 8011274:	461d      	mov	r5, r3
 8011276:	4614      	mov	r4, r2
 8011278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801127a:	6028      	str	r0, [r5, #0]
 801127c:	6069      	str	r1, [r5, #4]
 801127e:	60aa      	str	r2, [r5, #8]
 8011280:	60eb      	str	r3, [r5, #12]
 8011282:	8823      	ldrh	r3, [r4, #0]
 8011284:	822b      	strh	r3, [r5, #16]
			break;
 8011286:	f00b bab3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 457 :
			strcpy(p->name,"MORE EFFORT LESS SKIN");
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011290:	4a7a      	ldr	r2, [pc, #488]	; (801147c <problem_fetch+0xfaec>)
 8011292:	461d      	mov	r5, r3
 8011294:	4614      	mov	r4, r2
 8011296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011298:	6028      	str	r0, [r5, #0]
 801129a:	6069      	str	r1, [r5, #4]
 801129c:	60aa      	str	r2, [r5, #8]
 801129e:	60eb      	str	r3, [r5, #12]
 80112a0:	6820      	ldr	r0, [r4, #0]
 80112a2:	6128      	str	r0, [r5, #16]
 80112a4:	88a3      	ldrh	r3, [r4, #4]
 80112a6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80112ae:	4a6f      	ldr	r2, [pc, #444]	; (801146c <problem_fetch+0xfadc>)
 80112b0:	6810      	ldr	r0, [r2, #0]
 80112b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2208      	movs	r2, #8
 80112b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,J,F,G,J,I");
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	33a4      	adds	r3, #164	; 0xa4
 80112be:	4a70      	ldr	r2, [pc, #448]	; (8011480 <problem_fetch+0xfaf0>)
 80112c0:	461c      	mov	r4, r3
 80112c2:	4615      	mov	r5, r2
 80112c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112c6:	6020      	str	r0, [r4, #0]
 80112c8:	6061      	str	r1, [r4, #4]
 80112ca:	60a2      	str	r2, [r4, #8]
 80112cc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,16,13,11,9,7,18");
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	3304      	adds	r3, #4
 80112d2:	4a6c      	ldr	r2, [pc, #432]	; (8011484 <problem_fetch+0xfaf4>)
 80112d4:	461d      	mov	r5, r3
 80112d6:	4614      	mov	r4, r2
 80112d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112da:	6028      	str	r0, [r5, #0]
 80112dc:	6069      	str	r1, [r5, #4]
 80112de:	60aa      	str	r2, [r5, #8]
 80112e0:	60eb      	str	r3, [r5, #12]
 80112e2:	6820      	ldr	r0, [r4, #0]
 80112e4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80112ec:	4a5d      	ldr	r2, [pc, #372]	; (8011464 <problem_fetch+0xfad4>)
 80112ee:	461c      	mov	r4, r3
 80112f0:	4615      	mov	r5, r2
 80112f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112f4:	6020      	str	r0, [r4, #0]
 80112f6:	6061      	str	r1, [r4, #4]
 80112f8:	60a2      	str	r2, [r4, #8]
 80112fa:	60e3      	str	r3, [r4, #12]
			break;
 80112fc:	f00b ba78 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 458 :
			strcpy(p->name,"SKWAMA");
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011306:	4a60      	ldr	r2, [pc, #384]	; (8011488 <problem_fetch+0xfaf8>)
 8011308:	6810      	ldr	r0, [r2, #0]
 801130a:	6018      	str	r0, [r3, #0]
 801130c:	8891      	ldrh	r1, [r2, #4]
 801130e:	7992      	ldrb	r2, [r2, #6]
 8011310:	8099      	strh	r1, [r3, #4]
 8011312:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801131a:	4a5c      	ldr	r2, [pc, #368]	; (801148c <problem_fetch+0xfafc>)
 801131c:	6810      	ldr	r0, [r2, #0]
 801131e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2208      	movs	r2, #8
 8011324:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,H,K,G,I");
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	33a4      	adds	r3, #164	; 0xa4
 801132a:	4a59      	ldr	r2, [pc, #356]	; (8011490 <problem_fetch+0xfb00>)
 801132c:	461c      	mov	r4, r3
 801132e:	4615      	mov	r5, r2
 8011330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011332:	6020      	str	r0, [r4, #0]
 8011334:	6061      	str	r1, [r4, #4]
 8011336:	60a2      	str	r2, [r4, #8]
 8011338:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,14,15,18");
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	3304      	adds	r3, #4
 801133e:	4a55      	ldr	r2, [pc, #340]	; (8011494 <problem_fetch+0xfb04>)
 8011340:	461d      	mov	r5, r3
 8011342:	4614      	mov	r4, r2
 8011344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011346:	6028      	str	r0, [r5, #0]
 8011348:	6069      	str	r1, [r5, #4]
 801134a:	60aa      	str	r2, [r5, #8]
 801134c:	60eb      	str	r3, [r5, #12]
 801134e:	6820      	ldr	r0, [r4, #0]
 8011350:	6128      	str	r0, [r5, #16]
 8011352:	7923      	ldrb	r3, [r4, #4]
 8011354:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801135c:	4a4e      	ldr	r2, [pc, #312]	; (8011498 <problem_fetch+0xfb08>)
 801135e:	461c      	mov	r4, r3
 8011360:	4615      	mov	r5, r2
 8011362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011364:	6020      	str	r0, [r4, #0]
 8011366:	6061      	str	r1, [r4, #4]
 8011368:	60a2      	str	r2, [r4, #8]
 801136a:	60e3      	str	r3, [r4, #12]
			break;
 801136c:	f00b ba40 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 459 :
			strcpy(p->name,"NOIA");
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011376:	4a49      	ldr	r2, [pc, #292]	; (801149c <problem_fetch+0xfb0c>)
 8011378:	6810      	ldr	r0, [r2, #0]
 801137a:	6018      	str	r0, [r3, #0]
 801137c:	7912      	ldrb	r2, [r2, #4]
 801137e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011386:	4a39      	ldr	r2, [pc, #228]	; (801146c <problem_fetch+0xfadc>)
 8011388:	6810      	ldr	r0, [r2, #0]
 801138a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2206      	movs	r2, #6
 8011390:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,E,A,A");
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	33a4      	adds	r3, #164	; 0xa4
 8011396:	4a42      	ldr	r2, [pc, #264]	; (80114a0 <problem_fetch+0xfb10>)
 8011398:	461c      	mov	r4, r3
 801139a:	4613      	mov	r3, r2
 801139c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801139e:	6020      	str	r0, [r4, #0]
 80113a0:	6061      	str	r1, [r4, #4]
 80113a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,8,12,14,18");
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	3304      	adds	r3, #4
 80113a8:	4a3e      	ldr	r2, [pc, #248]	; (80114a4 <problem_fetch+0xfb14>)
 80113aa:	461c      	mov	r4, r3
 80113ac:	4613      	mov	r3, r2
 80113ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80113b0:	6020      	str	r0, [r4, #0]
 80113b2:	6061      	str	r1, [r4, #4]
 80113b4:	60a2      	str	r2, [r4, #8]
 80113b6:	881a      	ldrh	r2, [r3, #0]
 80113b8:	789b      	ldrb	r3, [r3, #2]
 80113ba:	81a2      	strh	r2, [r4, #12]
 80113bc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80113c4:	4a38      	ldr	r2, [pc, #224]	; (80114a8 <problem_fetch+0xfb18>)
 80113c6:	461c      	mov	r4, r3
 80113c8:	4613      	mov	r3, r2
 80113ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80113cc:	6020      	str	r0, [r4, #0]
 80113ce:	6061      	str	r1, [r4, #4]
 80113d0:	60a2      	str	r2, [r4, #8]
			break;
 80113d2:	f00b ba0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 460 :
			strcpy(p->name,"LES DRUS");
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80113dc:	4933      	ldr	r1, [pc, #204]	; (80114ac <problem_fetch+0xfb1c>)
 80113de:	461a      	mov	r2, r3
 80113e0:	460b      	mov	r3, r1
 80113e2:	cb03      	ldmia	r3!, {r0, r1}
 80113e4:	6010      	str	r0, [r2, #0]
 80113e6:	6051      	str	r1, [r2, #4]
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80113f2:	4a19      	ldr	r2, [pc, #100]	; (8011458 <problem_fetch+0xfac8>)
 80113f4:	8811      	ldrh	r1, [r2, #0]
 80113f6:	7892      	ldrb	r2, [r2, #2]
 80113f8:	8019      	strh	r1, [r3, #0]
 80113fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2207      	movs	r2, #7
 8011400:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,I,I,D");
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	33a4      	adds	r3, #164	; 0xa4
 8011406:	4a2a      	ldr	r2, [pc, #168]	; (80114b0 <problem_fetch+0xfb20>)
 8011408:	461c      	mov	r4, r3
 801140a:	4613      	mov	r3, r2
 801140c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801140e:	6020      	str	r0, [r4, #0]
 8011410:	6061      	str	r1, [r4, #4]
 8011412:	60a2      	str	r2, [r4, #8]
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,16,12,10,7,18");
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	3304      	adds	r3, #4
 801141c:	4a25      	ldr	r2, [pc, #148]	; (80114b4 <problem_fetch+0xfb24>)
 801141e:	461d      	mov	r5, r3
 8011420:	4614      	mov	r4, r2
 8011422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011424:	6028      	str	r0, [r5, #0]
 8011426:	6069      	str	r1, [r5, #4]
 8011428:	60aa      	str	r2, [r5, #8]
 801142a:	60eb      	str	r3, [r5, #12]
 801142c:	8823      	ldrh	r3, [r4, #0]
 801142e:	78a2      	ldrb	r2, [r4, #2]
 8011430:	822b      	strh	r3, [r5, #16]
 8011432:	4613      	mov	r3, r2
 8011434:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801143c:	4a1e      	ldr	r2, [pc, #120]	; (80114b8 <problem_fetch+0xfb28>)
 801143e:	461c      	mov	r4, r3
 8011440:	4613      	mov	r3, r2
 8011442:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011444:	6020      	str	r0, [r4, #0]
 8011446:	6061      	str	r1, [r4, #4]
 8011448:	60a2      	str	r2, [r4, #8]
 801144a:	881b      	ldrh	r3, [r3, #0]
 801144c:	81a3      	strh	r3, [r4, #12]
			break;
 801144e:	f00b b9cf 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8011452:	bf00      	nop
 8011454:	0802930c 	.word	0x0802930c
 8011458:	08023b50 	.word	0x08023b50
 801145c:	08029318 	.word	0x08029318
 8011460:	08029328 	.word	0x08029328
 8011464:	08023cb4 	.word	0x08023cb4
 8011468:	0802933c 	.word	0x0802933c
 801146c:	08023c28 	.word	0x08023c28
 8011470:	08029354 	.word	0x08029354
 8011474:	08029368 	.word	0x08029368
 8011478:	08024b74 	.word	0x08024b74
 801147c:	08029380 	.word	0x08029380
 8011480:	08029398 	.word	0x08029398
 8011484:	080293a8 	.word	0x080293a8
 8011488:	080293bc 	.word	0x080293bc
 801148c:	08023b90 	.word	0x08023b90
 8011490:	080293c4 	.word	0x080293c4
 8011494:	080293d4 	.word	0x080293d4
 8011498:	08023da0 	.word	0x08023da0
 801149c:	080293ec 	.word	0x080293ec
 80114a0:	080293f4 	.word	0x080293f4
 80114a4:	08029400 	.word	0x08029400
 80114a8:	08023b70 	.word	0x08023b70
 80114ac:	08029410 	.word	0x08029410
 80114b0:	0802941c 	.word	0x0802941c
 80114b4:	0802942c 	.word	0x0802942c
 80114b8:	08023d18 	.word	0x08023d18
		case 461 :
			strcpy(p->name,"GTC&AMP;TCT");
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80114c2:	4aba      	ldr	r2, [pc, #744]	; (80117ac <problem_fetch+0xfe1c>)
 80114c4:	461c      	mov	r4, r3
 80114c6:	4613      	mov	r3, r2
 80114c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114ca:	6020      	str	r0, [r4, #0]
 80114cc:	6061      	str	r1, [r4, #4]
 80114ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80114d6:	4ab6      	ldr	r2, [pc, #728]	; (80117b0 <problem_fetch+0xfe20>)
 80114d8:	6810      	ldr	r0, [r2, #0]
 80114da:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2207      	movs	r2, #7
 80114e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,G,J,I,J,D");
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	33a4      	adds	r3, #164	; 0xa4
 80114e6:	4ab3      	ldr	r2, [pc, #716]	; (80117b4 <problem_fetch+0xfe24>)
 80114e8:	461c      	mov	r4, r3
 80114ea:	4613      	mov	r3, r2
 80114ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114ee:	6020      	str	r0, [r4, #0]
 80114f0:	6061      	str	r1, [r4, #4]
 80114f2:	60a2      	str	r2, [r4, #8]
 80114f4:	881b      	ldrh	r3, [r3, #0]
 80114f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,17,12,10,7,18");
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	3304      	adds	r3, #4
 80114fc:	4aae      	ldr	r2, [pc, #696]	; (80117b8 <problem_fetch+0xfe28>)
 80114fe:	461d      	mov	r5, r3
 8011500:	4614      	mov	r4, r2
 8011502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011504:	6028      	str	r0, [r5, #0]
 8011506:	6069      	str	r1, [r5, #4]
 8011508:	60aa      	str	r2, [r5, #8]
 801150a:	60eb      	str	r3, [r5, #12]
 801150c:	8823      	ldrh	r3, [r4, #0]
 801150e:	78a2      	ldrb	r2, [r4, #2]
 8011510:	822b      	strh	r3, [r5, #16]
 8011512:	4613      	mov	r3, r2
 8011514:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801151c:	4aa7      	ldr	r2, [pc, #668]	; (80117bc <problem_fetch+0xfe2c>)
 801151e:	461c      	mov	r4, r3
 8011520:	4613      	mov	r3, r2
 8011522:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011524:	6020      	str	r0, [r4, #0]
 8011526:	6061      	str	r1, [r4, #4]
 8011528:	60a2      	str	r2, [r4, #8]
 801152a:	881b      	ldrh	r3, [r3, #0]
 801152c:	81a3      	strh	r3, [r4, #12]
			break;
 801152e:	f00b b95f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 462 :
			strcpy(p->name,"LA COSA NOSTRA");
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011538:	4aa1      	ldr	r2, [pc, #644]	; (80117c0 <problem_fetch+0xfe30>)
 801153a:	461c      	mov	r4, r3
 801153c:	4613      	mov	r3, r2
 801153e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011540:	6020      	str	r0, [r4, #0]
 8011542:	6061      	str	r1, [r4, #4]
 8011544:	60a2      	str	r2, [r4, #8]
 8011546:	881a      	ldrh	r2, [r3, #0]
 8011548:	789b      	ldrb	r3, [r3, #2]
 801154a:	81a2      	strh	r2, [r4, #12]
 801154c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011554:	4a96      	ldr	r2, [pc, #600]	; (80117b0 <problem_fetch+0xfe20>)
 8011556:	6810      	ldr	r0, [r2, #0]
 8011558:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2209      	movs	r2, #9
 801155e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,J,J,H,G,D");
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	33a4      	adds	r3, #164	; 0xa4
 8011564:	4a97      	ldr	r2, [pc, #604]	; (80117c4 <problem_fetch+0xfe34>)
 8011566:	461d      	mov	r5, r3
 8011568:	4614      	mov	r4, r2
 801156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801156c:	6028      	str	r0, [r5, #0]
 801156e:	6069      	str	r1, [r5, #4]
 8011570:	60aa      	str	r2, [r5, #8]
 8011572:	60eb      	str	r3, [r5, #12]
 8011574:	8823      	ldrh	r3, [r4, #0]
 8011576:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,9,6,11,7,13,16,17,18");
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	3304      	adds	r3, #4
 801157c:	4a92      	ldr	r2, [pc, #584]	; (80117c8 <problem_fetch+0xfe38>)
 801157e:	461c      	mov	r4, r3
 8011580:	4615      	mov	r5, r2
 8011582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011584:	6020      	str	r0, [r4, #0]
 8011586:	6061      	str	r1, [r4, #4]
 8011588:	60a2      	str	r2, [r4, #8]
 801158a:	60e3      	str	r3, [r4, #12]
 801158c:	6828      	ldr	r0, [r5, #0]
 801158e:	6120      	str	r0, [r4, #16]
 8011590:	88ab      	ldrh	r3, [r5, #4]
 8011592:	79aa      	ldrb	r2, [r5, #6]
 8011594:	82a3      	strh	r3, [r4, #20]
 8011596:	4613      	mov	r3, r2
 8011598:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80115a0:	4a8a      	ldr	r2, [pc, #552]	; (80117cc <problem_fetch+0xfe3c>)
 80115a2:	461d      	mov	r5, r3
 80115a4:	4614      	mov	r4, r2
 80115a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115a8:	6028      	str	r0, [r5, #0]
 80115aa:	6069      	str	r1, [r5, #4]
 80115ac:	60aa      	str	r2, [r5, #8]
 80115ae:	60eb      	str	r3, [r5, #12]
 80115b0:	8823      	ldrh	r3, [r4, #0]
 80115b2:	822b      	strh	r3, [r5, #16]
			break;
 80115b4:	f00b b91c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 463 :
			strcpy(p->name,"SMALL COSA NOSTRA");
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80115be:	4a84      	ldr	r2, [pc, #528]	; (80117d0 <problem_fetch+0xfe40>)
 80115c0:	461d      	mov	r5, r3
 80115c2:	4614      	mov	r4, r2
 80115c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115c6:	6028      	str	r0, [r5, #0]
 80115c8:	6069      	str	r1, [r5, #4]
 80115ca:	60aa      	str	r2, [r5, #8]
 80115cc:	60eb      	str	r3, [r5, #12]
 80115ce:	8823      	ldrh	r3, [r4, #0]
 80115d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80115d8:	4a7e      	ldr	r2, [pc, #504]	; (80117d4 <problem_fetch+0xfe44>)
 80115da:	8811      	ldrh	r1, [r2, #0]
 80115dc:	7892      	ldrb	r2, [r2, #2]
 80115de:	8019      	strh	r1, [r3, #0]
 80115e0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2208      	movs	r2, #8
 80115e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,F,E,J,H,I");
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	33a4      	adds	r3, #164	; 0xa4
 80115ec:	4a7a      	ldr	r2, [pc, #488]	; (80117d8 <problem_fetch+0xfe48>)
 80115ee:	461c      	mov	r4, r3
 80115f0:	4615      	mov	r5, r2
 80115f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115f4:	6020      	str	r0, [r4, #0]
 80115f6:	6061      	str	r1, [r4, #4]
 80115f8:	60a2      	str	r2, [r4, #8]
 80115fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,7,11,12,13,16,18");
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	3304      	adds	r3, #4
 8011600:	4a76      	ldr	r2, [pc, #472]	; (80117dc <problem_fetch+0xfe4c>)
 8011602:	461d      	mov	r5, r3
 8011604:	4614      	mov	r4, r2
 8011606:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011608:	6028      	str	r0, [r5, #0]
 801160a:	6069      	str	r1, [r5, #4]
 801160c:	60aa      	str	r2, [r5, #8]
 801160e:	60eb      	str	r3, [r5, #12]
 8011610:	6820      	ldr	r0, [r4, #0]
 8011612:	6128      	str	r0, [r5, #16]
 8011614:	7923      	ldrb	r3, [r4, #4]
 8011616:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801161e:	4a70      	ldr	r2, [pc, #448]	; (80117e0 <problem_fetch+0xfe50>)
 8011620:	461c      	mov	r4, r3
 8011622:	4615      	mov	r5, r2
 8011624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011626:	6020      	str	r0, [r4, #0]
 8011628:	6061      	str	r1, [r4, #4]
 801162a:	60a2      	str	r2, [r4, #8]
 801162c:	60e3      	str	r3, [r4, #12]
			break;
 801162e:	f00b b8df 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 464 :
			strcpy(p->name,"LITTLE COSA NOSTRA");
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011638:	4a6a      	ldr	r2, [pc, #424]	; (80117e4 <problem_fetch+0xfe54>)
 801163a:	461d      	mov	r5, r3
 801163c:	4614      	mov	r4, r2
 801163e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011640:	6028      	str	r0, [r5, #0]
 8011642:	6069      	str	r1, [r5, #4]
 8011644:	60aa      	str	r2, [r5, #8]
 8011646:	60eb      	str	r3, [r5, #12]
 8011648:	8823      	ldrh	r3, [r4, #0]
 801164a:	78a2      	ldrb	r2, [r4, #2]
 801164c:	822b      	strh	r3, [r5, #16]
 801164e:	4613      	mov	r3, r2
 8011650:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011658:	4a5e      	ldr	r2, [pc, #376]	; (80117d4 <problem_fetch+0xfe44>)
 801165a:	8811      	ldrh	r1, [r2, #0]
 801165c:	7892      	ldrb	r2, [r2, #2]
 801165e:	8019      	strh	r1, [r3, #0]
 8011660:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2209      	movs	r2, #9
 8011666:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,K,G,I,E,D");
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	33a4      	adds	r3, #164	; 0xa4
 801166c:	4a5e      	ldr	r2, [pc, #376]	; (80117e8 <problem_fetch+0xfe58>)
 801166e:	461d      	mov	r5, r3
 8011670:	4614      	mov	r4, r2
 8011672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011674:	6028      	str	r0, [r5, #0]
 8011676:	6069      	str	r1, [r5, #4]
 8011678:	60aa      	str	r2, [r5, #8]
 801167a:	60eb      	str	r3, [r5, #12]
 801167c:	8823      	ldrh	r3, [r4, #0]
 801167e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,9,10,14,16,18");
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	3304      	adds	r3, #4
 8011684:	4a59      	ldr	r2, [pc, #356]	; (80117ec <problem_fetch+0xfe5c>)
 8011686:	461c      	mov	r4, r3
 8011688:	4615      	mov	r5, r2
 801168a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801168c:	6020      	str	r0, [r4, #0]
 801168e:	6061      	str	r1, [r4, #4]
 8011690:	60a2      	str	r2, [r4, #8]
 8011692:	60e3      	str	r3, [r4, #12]
 8011694:	6828      	ldr	r0, [r5, #0]
 8011696:	6120      	str	r0, [r4, #16]
 8011698:	88ab      	ldrh	r3, [r5, #4]
 801169a:	79aa      	ldrb	r2, [r5, #6]
 801169c:	82a3      	strh	r3, [r4, #20]
 801169e:	4613      	mov	r3, r2
 80116a0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80116a8:	4a51      	ldr	r2, [pc, #324]	; (80117f0 <problem_fetch+0xfe60>)
 80116aa:	461d      	mov	r5, r3
 80116ac:	4614      	mov	r4, r2
 80116ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116b0:	6028      	str	r0, [r5, #0]
 80116b2:	6069      	str	r1, [r5, #4]
 80116b4:	60aa      	str	r2, [r5, #8]
 80116b6:	60eb      	str	r3, [r5, #12]
 80116b8:	8823      	ldrh	r3, [r4, #0]
 80116ba:	822b      	strh	r3, [r5, #16]
			break;
 80116bc:	f00b b898 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 465 :
			strcpy(p->name,"THE MOVE");
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116c6:	494b      	ldr	r1, [pc, #300]	; (80117f4 <problem_fetch+0xfe64>)
 80116c8:	461a      	mov	r2, r3
 80116ca:	460b      	mov	r3, r1
 80116cc:	cb03      	ldmia	r3!, {r0, r1}
 80116ce:	6010      	str	r0, [r2, #0]
 80116d0:	6051      	str	r1, [r2, #4]
 80116d2:	781b      	ldrb	r3, [r3, #0]
 80116d4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80116dc:	4a3d      	ldr	r2, [pc, #244]	; (80117d4 <problem_fetch+0xfe44>)
 80116de:	8811      	ldrh	r1, [r2, #0]
 80116e0:	7892      	ldrb	r2, [r2, #2]
 80116e2:	8019      	strh	r1, [r3, #0]
 80116e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2207      	movs	r2, #7
 80116ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,H,H,I");
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	33a4      	adds	r3, #164	; 0xa4
 80116f0:	4a41      	ldr	r2, [pc, #260]	; (80117f8 <problem_fetch+0xfe68>)
 80116f2:	461c      	mov	r4, r3
 80116f4:	4613      	mov	r3, r2
 80116f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80116f8:	6020      	str	r0, [r4, #0]
 80116fa:	6061      	str	r1, [r4, #4]
 80116fc:	60a2      	str	r2, [r4, #8]
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,16,18");
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	3304      	adds	r3, #4
 8011706:	4a3d      	ldr	r2, [pc, #244]	; (80117fc <problem_fetch+0xfe6c>)
 8011708:	461d      	mov	r5, r3
 801170a:	4614      	mov	r4, r2
 801170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801170e:	6028      	str	r0, [r5, #0]
 8011710:	6069      	str	r1, [r5, #4]
 8011712:	60aa      	str	r2, [r5, #8]
 8011714:	60eb      	str	r3, [r5, #12]
 8011716:	8823      	ldrh	r3, [r4, #0]
 8011718:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011720:	4a26      	ldr	r2, [pc, #152]	; (80117bc <problem_fetch+0xfe2c>)
 8011722:	461c      	mov	r4, r3
 8011724:	4613      	mov	r3, r2
 8011726:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011728:	6020      	str	r0, [r4, #0]
 801172a:	6061      	str	r1, [r4, #4]
 801172c:	60a2      	str	r2, [r4, #8]
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	81a3      	strh	r3, [r4, #12]
			break;
 8011732:	f00b b85d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 466 :
			strcpy(p->name,"THE LITTLE ISLAND");
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801173c:	4a30      	ldr	r2, [pc, #192]	; (8011800 <problem_fetch+0xfe70>)
 801173e:	461d      	mov	r5, r3
 8011740:	4614      	mov	r4, r2
 8011742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011744:	6028      	str	r0, [r5, #0]
 8011746:	6069      	str	r1, [r5, #4]
 8011748:	60aa      	str	r2, [r5, #8]
 801174a:	60eb      	str	r3, [r5, #12]
 801174c:	8823      	ldrh	r3, [r4, #0]
 801174e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B");
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011756:	4a2b      	ldr	r2, [pc, #172]	; (8011804 <problem_fetch+0xfe74>)
 8011758:	8811      	ldrh	r1, [r2, #0]
 801175a:	7892      	ldrb	r2, [r2, #2]
 801175c:	8019      	strh	r1, [r3, #0]
 801175e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2206      	movs	r2, #6
 8011764:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,H,G,D");
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	33a4      	adds	r3, #164	; 0xa4
 801176a:	4a27      	ldr	r2, [pc, #156]	; (8011808 <problem_fetch+0xfe78>)
 801176c:	461c      	mov	r4, r3
 801176e:	4613      	mov	r3, r2
 8011770:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011772:	6020      	str	r0, [r4, #0]
 8011774:	6061      	str	r1, [r4, #4]
 8011776:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,17,18");
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3304      	adds	r3, #4
 801177c:	4a23      	ldr	r2, [pc, #140]	; (801180c <problem_fetch+0xfe7c>)
 801177e:	461c      	mov	r4, r3
 8011780:	4613      	mov	r3, r2
 8011782:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011784:	6020      	str	r0, [r4, #0]
 8011786:	6061      	str	r1, [r4, #4]
 8011788:	60a2      	str	r2, [r4, #8]
 801178a:	881a      	ldrh	r2, [r3, #0]
 801178c:	789b      	ldrb	r3, [r3, #2]
 801178e:	81a2      	strh	r2, [r4, #12]
 8011790:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011798:	4a1d      	ldr	r2, [pc, #116]	; (8011810 <problem_fetch+0xfe80>)
 801179a:	461c      	mov	r4, r3
 801179c:	4613      	mov	r3, r2
 801179e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80117a0:	6020      	str	r0, [r4, #0]
 80117a2:	6061      	str	r1, [r4, #4]
 80117a4:	60a2      	str	r2, [r4, #8]
			break;
 80117a6:	f00b b823 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80117aa:	bf00      	nop
 80117ac:	08029440 	.word	0x08029440
 80117b0:	08023c28 	.word	0x08023c28
 80117b4:	0802944c 	.word	0x0802944c
 80117b8:	0802945c 	.word	0x0802945c
 80117bc:	08023d18 	.word	0x08023d18
 80117c0:	08029470 	.word	0x08029470
 80117c4:	08029480 	.word	0x08029480
 80117c8:	08029494 	.word	0x08029494
 80117cc:	08025a48 	.word	0x08025a48
 80117d0:	080294ac 	.word	0x080294ac
 80117d4:	08023c5c 	.word	0x08023c5c
 80117d8:	080294c0 	.word	0x080294c0
 80117dc:	080294d0 	.word	0x080294d0
 80117e0:	08023da0 	.word	0x08023da0
 80117e4:	080294e8 	.word	0x080294e8
 80117e8:	080294fc 	.word	0x080294fc
 80117ec:	08029510 	.word	0x08029510
 80117f0:	08024b74 	.word	0x08024b74
 80117f4:	08029528 	.word	0x08029528
 80117f8:	08029534 	.word	0x08029534
 80117fc:	08029544 	.word	0x08029544
 8011800:	08029558 	.word	0x08029558
 8011804:	08024288 	.word	0x08024288
 8011808:	0802956c 	.word	0x0802956c
 801180c:	08029578 	.word	0x08029578
 8011810:	08023f2c 	.word	0x08023f2c
		case 467 :
			strcpy(p->name,"FACE DE RAT");
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801181a:	4aad      	ldr	r2, [pc, #692]	; (8011ad0 <problem_fetch+0x10140>)
 801181c:	461c      	mov	r4, r3
 801181e:	4613      	mov	r3, r2
 8011820:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011822:	6020      	str	r0, [r4, #0]
 8011824:	6061      	str	r1, [r4, #4]
 8011826:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801182e:	4aa9      	ldr	r2, [pc, #676]	; (8011ad4 <problem_fetch+0x10144>)
 8011830:	8811      	ldrh	r1, [r2, #0]
 8011832:	7892      	ldrb	r2, [r2, #2]
 8011834:	8019      	strh	r1, [r3, #0]
 8011836:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	2208      	movs	r2, #8
 801183c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,F,I,I");
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	33a4      	adds	r3, #164	; 0xa4
 8011842:	4aa5      	ldr	r2, [pc, #660]	; (8011ad8 <problem_fetch+0x10148>)
 8011844:	461c      	mov	r4, r3
 8011846:	4615      	mov	r5, r2
 8011848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801184a:	6020      	str	r0, [r4, #0]
 801184c:	6061      	str	r1, [r4, #4]
 801184e:	60a2      	str	r2, [r4, #8]
 8011850:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,13,14,18");
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	3304      	adds	r3, #4
 8011856:	4aa1      	ldr	r2, [pc, #644]	; (8011adc <problem_fetch+0x1014c>)
 8011858:	461d      	mov	r5, r3
 801185a:	4614      	mov	r4, r2
 801185c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801185e:	6028      	str	r0, [r5, #0]
 8011860:	6069      	str	r1, [r5, #4]
 8011862:	60aa      	str	r2, [r5, #8]
 8011864:	60eb      	str	r3, [r5, #12]
 8011866:	6820      	ldr	r0, [r4, #0]
 8011868:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011870:	4a9b      	ldr	r2, [pc, #620]	; (8011ae0 <problem_fetch+0x10150>)
 8011872:	461c      	mov	r4, r3
 8011874:	4615      	mov	r5, r2
 8011876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011878:	6020      	str	r0, [r4, #0]
 801187a:	6061      	str	r1, [r4, #4]
 801187c:	60a2      	str	r2, [r4, #8]
 801187e:	60e3      	str	r3, [r4, #12]
			break;
 8011880:	f00a bfb6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 468 :
			strcpy(p->name,"THE F(L)IGHT");
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801188a:	4a96      	ldr	r2, [pc, #600]	; (8011ae4 <problem_fetch+0x10154>)
 801188c:	461c      	mov	r4, r3
 801188e:	4613      	mov	r3, r2
 8011890:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011892:	6020      	str	r0, [r4, #0]
 8011894:	6061      	str	r1, [r4, #4]
 8011896:	60a2      	str	r2, [r4, #8]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80118a2:	4a91      	ldr	r2, [pc, #580]	; (8011ae8 <problem_fetch+0x10158>)
 80118a4:	6810      	ldr	r0, [r2, #0]
 80118a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2208      	movs	r2, #8
 80118ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,F,J,J,E,I");
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	33a4      	adds	r3, #164	; 0xa4
 80118b2:	4a8e      	ldr	r2, [pc, #568]	; (8011aec <problem_fetch+0x1015c>)
 80118b4:	461c      	mov	r4, r3
 80118b6:	4615      	mov	r5, r2
 80118b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118ba:	6020      	str	r0, [r4, #0]
 80118bc:	6061      	str	r1, [r4, #4]
 80118be:	60a2      	str	r2, [r4, #8]
 80118c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,11,13,7,9,18");
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	3304      	adds	r3, #4
 80118c6:	4a8a      	ldr	r2, [pc, #552]	; (8011af0 <problem_fetch+0x10160>)
 80118c8:	461d      	mov	r5, r3
 80118ca:	4614      	mov	r4, r2
 80118cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118ce:	6028      	str	r0, [r5, #0]
 80118d0:	6069      	str	r1, [r5, #4]
 80118d2:	60aa      	str	r2, [r5, #8]
 80118d4:	60eb      	str	r3, [r5, #12]
 80118d6:	6820      	ldr	r0, [r4, #0]
 80118d8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80118e0:	4a84      	ldr	r2, [pc, #528]	; (8011af4 <problem_fetch+0x10164>)
 80118e2:	461c      	mov	r4, r3
 80118e4:	4615      	mov	r5, r2
 80118e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118e8:	6020      	str	r0, [r4, #0]
 80118ea:	6061      	str	r1, [r4, #4]
 80118ec:	60a2      	str	r2, [r4, #8]
 80118ee:	60e3      	str	r3, [r4, #12]
			break;
 80118f0:	f00a bf7e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 469 :
			strcpy(p->name,"ONE PUNCH");
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80118fa:	497f      	ldr	r1, [pc, #508]	; (8011af8 <problem_fetch+0x10168>)
 80118fc:	461a      	mov	r2, r3
 80118fe:	460b      	mov	r3, r1
 8011900:	cb03      	ldmia	r3!, {r0, r1}
 8011902:	6010      	str	r0, [r2, #0]
 8011904:	6051      	str	r1, [r2, #4]
 8011906:	881b      	ldrh	r3, [r3, #0]
 8011908:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011910:	4a70      	ldr	r2, [pc, #448]	; (8011ad4 <problem_fetch+0x10144>)
 8011912:	8811      	ldrh	r1, [r2, #0]
 8011914:	7892      	ldrb	r2, [r2, #2]
 8011916:	8019      	strh	r1, [r3, #0]
 8011918:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2209      	movs	r2, #9
 801191e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,K,H,K,G,I,D");
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	33a4      	adds	r3, #164	; 0xa4
 8011924:	4a75      	ldr	r2, [pc, #468]	; (8011afc <problem_fetch+0x1016c>)
 8011926:	461d      	mov	r5, r3
 8011928:	4614      	mov	r4, r2
 801192a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801192c:	6028      	str	r0, [r5, #0]
 801192e:	6069      	str	r1, [r5, #4]
 8011930:	60aa      	str	r2, [r5, #8]
 8011932:	60eb      	str	r3, [r5, #12]
 8011934:	8823      	ldrh	r3, [r4, #0]
 8011936:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,15,9,12,14,17,7,18");
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3304      	adds	r3, #4
 801193c:	4a70      	ldr	r2, [pc, #448]	; (8011b00 <problem_fetch+0x10170>)
 801193e:	461c      	mov	r4, r3
 8011940:	4615      	mov	r5, r2
 8011942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011944:	6020      	str	r0, [r4, #0]
 8011946:	6061      	str	r1, [r4, #4]
 8011948:	60a2      	str	r2, [r4, #8]
 801194a:	60e3      	str	r3, [r4, #12]
 801194c:	6828      	ldr	r0, [r5, #0]
 801194e:	6120      	str	r0, [r4, #16]
 8011950:	88ab      	ldrh	r3, [r5, #4]
 8011952:	79aa      	ldrb	r2, [r5, #6]
 8011954:	82a3      	strh	r3, [r4, #20]
 8011956:	4613      	mov	r3, r2
 8011958:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011960:	4a68      	ldr	r2, [pc, #416]	; (8011b04 <problem_fetch+0x10174>)
 8011962:	461d      	mov	r5, r3
 8011964:	4614      	mov	r4, r2
 8011966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011968:	6028      	str	r0, [r5, #0]
 801196a:	6069      	str	r1, [r5, #4]
 801196c:	60aa      	str	r2, [r5, #8]
 801196e:	60eb      	str	r3, [r5, #12]
 8011970:	8823      	ldrh	r3, [r4, #0]
 8011972:	822b      	strh	r3, [r5, #16]
			break;
 8011974:	f00a bf3c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 470 :
			strcpy(p->name,"PIZZAPUNT");
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801197e:	4962      	ldr	r1, [pc, #392]	; (8011b08 <problem_fetch+0x10178>)
 8011980:	461a      	mov	r2, r3
 8011982:	460b      	mov	r3, r1
 8011984:	cb03      	ldmia	r3!, {r0, r1}
 8011986:	6010      	str	r0, [r2, #0]
 8011988:	6051      	str	r1, [r2, #4]
 801198a:	881b      	ldrh	r3, [r3, #0]
 801198c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011994:	4a5d      	ldr	r2, [pc, #372]	; (8011b0c <problem_fetch+0x1017c>)
 8011996:	6810      	ldr	r0, [r2, #0]
 8011998:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2207      	movs	r2, #7
 801199e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,B,D");
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	33a4      	adds	r3, #164	; 0xa4
 80119a4:	4a5a      	ldr	r2, [pc, #360]	; (8011b10 <problem_fetch+0x10180>)
 80119a6:	461c      	mov	r4, r3
 80119a8:	4613      	mov	r3, r2
 80119aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80119ac:	6020      	str	r0, [r4, #0]
 80119ae:	6061      	str	r1, [r4, #4]
 80119b0:	60a2      	str	r2, [r4, #8]
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,15,18");
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	3304      	adds	r3, #4
 80119ba:	4a56      	ldr	r2, [pc, #344]	; (8011b14 <problem_fetch+0x10184>)
 80119bc:	461d      	mov	r5, r3
 80119be:	4614      	mov	r4, r2
 80119c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119c2:	6028      	str	r0, [r5, #0]
 80119c4:	6069      	str	r1, [r5, #4]
 80119c6:	60aa      	str	r2, [r5, #8]
 80119c8:	60eb      	str	r3, [r5, #12]
 80119ca:	7823      	ldrb	r3, [r4, #0]
 80119cc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80119d4:	4a50      	ldr	r2, [pc, #320]	; (8011b18 <problem_fetch+0x10188>)
 80119d6:	461c      	mov	r4, r3
 80119d8:	4613      	mov	r3, r2
 80119da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80119dc:	6020      	str	r0, [r4, #0]
 80119de:	6061      	str	r1, [r4, #4]
 80119e0:	60a2      	str	r2, [r4, #8]
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	81a3      	strh	r3, [r4, #12]
			break;
 80119e6:	f00a bf03 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 471 :
			strcpy(p->name,"A BIT REACHY");
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80119f0:	4a4a      	ldr	r2, [pc, #296]	; (8011b1c <problem_fetch+0x1018c>)
 80119f2:	461c      	mov	r4, r3
 80119f4:	4613      	mov	r3, r2
 80119f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80119f8:	6020      	str	r0, [r4, #0]
 80119fa:	6061      	str	r1, [r4, #4]
 80119fc:	60a2      	str	r2, [r4, #8]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a08:	4a40      	ldr	r2, [pc, #256]	; (8011b0c <problem_fetch+0x1017c>)
 8011a0a:	6810      	ldr	r0, [r2, #0]
 8011a0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2208      	movs	r2, #8
 8011a12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,H,G,I,G,I");
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	33a4      	adds	r3, #164	; 0xa4
 8011a18:	4a41      	ldr	r2, [pc, #260]	; (8011b20 <problem_fetch+0x10190>)
 8011a1a:	461c      	mov	r4, r3
 8011a1c:	4615      	mov	r5, r2
 8011a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a20:	6020      	str	r0, [r4, #0]
 8011a22:	6061      	str	r1, [r4, #4]
 8011a24:	60a2      	str	r2, [r4, #8]
 8011a26:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,10,14,14,15,18");
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	4a3d      	ldr	r2, [pc, #244]	; (8011b24 <problem_fetch+0x10194>)
 8011a2e:	461d      	mov	r5, r3
 8011a30:	4614      	mov	r4, r2
 8011a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a34:	6028      	str	r0, [r5, #0]
 8011a36:	6069      	str	r1, [r5, #4]
 8011a38:	60aa      	str	r2, [r5, #8]
 8011a3a:	60eb      	str	r3, [r5, #12]
 8011a3c:	6820      	ldr	r0, [r4, #0]
 8011a3e:	6128      	str	r0, [r5, #16]
 8011a40:	7923      	ldrb	r3, [r4, #4]
 8011a42:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011a4a:	4a2a      	ldr	r2, [pc, #168]	; (8011af4 <problem_fetch+0x10164>)
 8011a4c:	461c      	mov	r4, r3
 8011a4e:	4615      	mov	r5, r2
 8011a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a52:	6020      	str	r0, [r4, #0]
 8011a54:	6061      	str	r1, [r4, #4]
 8011a56:	60a2      	str	r2, [r4, #8]
 8011a58:	60e3      	str	r3, [r4, #12]
			break;
 8011a5a:	f00a bec9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 472 :
			strcpy(p->name,"NIC_LAICALADDER");
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011a64:	4a30      	ldr	r2, [pc, #192]	; (8011b28 <problem_fetch+0x10198>)
 8011a66:	461c      	mov	r4, r3
 8011a68:	4615      	mov	r5, r2
 8011a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a6c:	6020      	str	r0, [r4, #0]
 8011a6e:	6061      	str	r1, [r4, #4]
 8011a70:	60a2      	str	r2, [r4, #8]
 8011a72:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a7a:	4a2c      	ldr	r2, [pc, #176]	; (8011b2c <problem_fetch+0x1019c>)
 8011a7c:	8811      	ldrh	r1, [r2, #0]
 8011a7e:	7892      	ldrb	r2, [r2, #2]
 8011a80:	8019      	strh	r1, [r3, #0]
 8011a82:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2205      	movs	r2, #5
 8011a88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,J,I");
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	33a4      	adds	r3, #164	; 0xa4
 8011a8e:	4928      	ldr	r1, [pc, #160]	; (8011b30 <problem_fetch+0x101a0>)
 8011a90:	461a      	mov	r2, r3
 8011a92:	460b      	mov	r3, r1
 8011a94:	cb03      	ldmia	r3!, {r0, r1}
 8011a96:	6010      	str	r0, [r2, #0]
 8011a98:	6051      	str	r1, [r2, #4]
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,16,18");
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	3304      	adds	r3, #4
 8011aa2:	4a24      	ldr	r2, [pc, #144]	; (8011b34 <problem_fetch+0x101a4>)
 8011aa4:	461c      	mov	r4, r3
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011aaa:	6020      	str	r0, [r4, #0]
 8011aac:	6061      	str	r1, [r4, #4]
 8011aae:	60a2      	str	r2, [r4, #8]
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011aba:	491f      	ldr	r1, [pc, #124]	; (8011b38 <problem_fetch+0x101a8>)
 8011abc:	461a      	mov	r2, r3
 8011abe:	460b      	mov	r3, r1
 8011ac0:	cb03      	ldmia	r3!, {r0, r1}
 8011ac2:	6010      	str	r0, [r2, #0]
 8011ac4:	6051      	str	r1, [r2, #4]
 8011ac6:	881b      	ldrh	r3, [r3, #0]
 8011ac8:	8113      	strh	r3, [r2, #8]
			break;
 8011aca:	f00a be91 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8011ace:	bf00      	nop
 8011ad0:	08029588 	.word	0x08029588
 8011ad4:	08023c5c 	.word	0x08023c5c
 8011ad8:	08029594 	.word	0x08029594
 8011adc:	080295a4 	.word	0x080295a4
 8011ae0:	08023da0 	.word	0x08023da0
 8011ae4:	080295b8 	.word	0x080295b8
 8011ae8:	08023d30 	.word	0x08023d30
 8011aec:	080295c8 	.word	0x080295c8
 8011af0:	080295d8 	.word	0x080295d8
 8011af4:	08023cb4 	.word	0x08023cb4
 8011af8:	080295ec 	.word	0x080295ec
 8011afc:	080295f8 	.word	0x080295f8
 8011b00:	0802960c 	.word	0x0802960c
 8011b04:	08024b74 	.word	0x08024b74
 8011b08:	08029624 	.word	0x08029624
 8011b0c:	08023b90 	.word	0x08023b90
 8011b10:	08029630 	.word	0x08029630
 8011b14:	08029640 	.word	0x08029640
 8011b18:	08023d18 	.word	0x08023d18
 8011b1c:	08029654 	.word	0x08029654
 8011b20:	08029664 	.word	0x08029664
 8011b24:	08029674 	.word	0x08029674
 8011b28:	0802968c 	.word	0x0802968c
 8011b2c:	08023b50 	.word	0x08023b50
 8011b30:	0802969c 	.word	0x0802969c
 8011b34:	080296a8 	.word	0x080296a8
 8011b38:	0802405c 	.word	0x0802405c
		case 473 :
			strcpy(p->name,"GIUDA BALLERINI");
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011b42:	4aae      	ldr	r2, [pc, #696]	; (8011dfc <problem_fetch+0x1046c>)
 8011b44:	461c      	mov	r4, r3
 8011b46:	4615      	mov	r5, r2
 8011b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b4a:	6020      	str	r0, [r4, #0]
 8011b4c:	6061      	str	r1, [r4, #4]
 8011b4e:	60a2      	str	r2, [r4, #8]
 8011b50:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011b58:	4aa9      	ldr	r2, [pc, #676]	; (8011e00 <problem_fetch+0x10470>)
 8011b5a:	8811      	ldrh	r1, [r2, #0]
 8011b5c:	7892      	ldrb	r2, [r2, #2]
 8011b5e:	8019      	strh	r1, [r3, #0]
 8011b60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2207      	movs	r2, #7
 8011b66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,F,F,I,G,D");
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	33a4      	adds	r3, #164	; 0xa4
 8011b6c:	4aa5      	ldr	r2, [pc, #660]	; (8011e04 <problem_fetch+0x10474>)
 8011b6e:	461c      	mov	r4, r3
 8011b70:	4613      	mov	r3, r2
 8011b72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b74:	6020      	str	r0, [r4, #0]
 8011b76:	6061      	str	r1, [r4, #4]
 8011b78:	60a2      	str	r2, [r4, #8]
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,13,14,17,18");
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	3304      	adds	r3, #4
 8011b82:	4aa1      	ldr	r2, [pc, #644]	; (8011e08 <problem_fetch+0x10478>)
 8011b84:	461d      	mov	r5, r3
 8011b86:	4614      	mov	r4, r2
 8011b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b8a:	6028      	str	r0, [r5, #0]
 8011b8c:	6069      	str	r1, [r5, #4]
 8011b8e:	60aa      	str	r2, [r5, #8]
 8011b90:	60eb      	str	r3, [r5, #12]
 8011b92:	8823      	ldrh	r3, [r4, #0]
 8011b94:	78a2      	ldrb	r2, [r4, #2]
 8011b96:	822b      	strh	r3, [r5, #16]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011ba2:	4a9a      	ldr	r2, [pc, #616]	; (8011e0c <problem_fetch+0x1047c>)
 8011ba4:	461c      	mov	r4, r3
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011baa:	6020      	str	r0, [r4, #0]
 8011bac:	6061      	str	r1, [r4, #4]
 8011bae:	60a2      	str	r2, [r4, #8]
 8011bb0:	881b      	ldrh	r3, [r3, #0]
 8011bb2:	81a3      	strh	r3, [r4, #12]
			break;
 8011bb4:	f00a be1c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 474 :
			strcpy(p->name,"PINCHINGPANDA");
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011bbe:	4a94      	ldr	r2, [pc, #592]	; (8011e10 <problem_fetch+0x10480>)
 8011bc0:	461c      	mov	r4, r3
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	6061      	str	r1, [r4, #4]
 8011bca:	60a2      	str	r2, [r4, #8]
 8011bcc:	881b      	ldrh	r3, [r3, #0]
 8011bce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011bd6:	4a8f      	ldr	r2, [pc, #572]	; (8011e14 <problem_fetch+0x10484>)
 8011bd8:	6810      	ldr	r0, [r2, #0]
 8011bda:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	2209      	movs	r2, #9
 8011be0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,G,A");
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	33a4      	adds	r3, #164	; 0xa4
 8011be6:	4a8c      	ldr	r2, [pc, #560]	; (8011e18 <problem_fetch+0x10488>)
 8011be8:	461d      	mov	r5, r3
 8011bea:	4614      	mov	r4, r2
 8011bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011bee:	6028      	str	r0, [r5, #0]
 8011bf0:	6069      	str	r1, [r5, #4]
 8011bf2:	60aa      	str	r2, [r5, #8]
 8011bf4:	60eb      	str	r3, [r5, #12]
 8011bf6:	8823      	ldrh	r3, [r4, #0]
 8011bf8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,9,18");
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	4a87      	ldr	r2, [pc, #540]	; (8011e1c <problem_fetch+0x1048c>)
 8011c00:	461d      	mov	r5, r3
 8011c02:	4614      	mov	r4, r2
 8011c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c06:	6028      	str	r0, [r5, #0]
 8011c08:	6069      	str	r1, [r5, #4]
 8011c0a:	60aa      	str	r2, [r5, #8]
 8011c0c:	60eb      	str	r3, [r5, #12]
 8011c0e:	6820      	ldr	r0, [r4, #0]
 8011c10:	6128      	str	r0, [r5, #16]
 8011c12:	88a3      	ldrh	r3, [r4, #4]
 8011c14:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011c1c:	4a80      	ldr	r2, [pc, #512]	; (8011e20 <problem_fetch+0x10490>)
 8011c1e:	461d      	mov	r5, r3
 8011c20:	4614      	mov	r4, r2
 8011c22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c24:	6028      	str	r0, [r5, #0]
 8011c26:	6069      	str	r1, [r5, #4]
 8011c28:	60aa      	str	r2, [r5, #8]
 8011c2a:	60eb      	str	r3, [r5, #12]
 8011c2c:	8823      	ldrh	r3, [r4, #0]
 8011c2e:	822b      	strh	r3, [r5, #16]
			break;
 8011c30:	f00a bdde 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 475 :
			strcpy(p->name,"GOT PINCH?");
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c3a:	497a      	ldr	r1, [pc, #488]	; (8011e24 <problem_fetch+0x10494>)
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	460b      	mov	r3, r1
 8011c40:	cb03      	ldmia	r3!, {r0, r1}
 8011c42:	6010      	str	r0, [r2, #0]
 8011c44:	6051      	str	r1, [r2, #4]
 8011c46:	8819      	ldrh	r1, [r3, #0]
 8011c48:	789b      	ldrb	r3, [r3, #2]
 8011c4a:	8111      	strh	r1, [r2, #8]
 8011c4c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c54:	4a6f      	ldr	r2, [pc, #444]	; (8011e14 <problem_fetch+0x10484>)
 8011c56:	6810      	ldr	r0, [r2, #0]
 8011c58:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	2208      	movs	r2, #8
 8011c5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,A");
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	33a4      	adds	r3, #164	; 0xa4
 8011c64:	4a70      	ldr	r2, [pc, #448]	; (8011e28 <problem_fetch+0x10498>)
 8011c66:	461c      	mov	r4, r3
 8011c68:	4615      	mov	r5, r2
 8011c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c6c:	6020      	str	r0, [r4, #0]
 8011c6e:	6061      	str	r1, [r4, #4]
 8011c70:	60a2      	str	r2, [r4, #8]
 8011c72:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,18");
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	3304      	adds	r3, #4
 8011c78:	4a6c      	ldr	r2, [pc, #432]	; (8011e2c <problem_fetch+0x1049c>)
 8011c7a:	461d      	mov	r5, r3
 8011c7c:	4614      	mov	r4, r2
 8011c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011c80:	6028      	str	r0, [r5, #0]
 8011c82:	6069      	str	r1, [r5, #4]
 8011c84:	60aa      	str	r2, [r5, #8]
 8011c86:	60eb      	str	r3, [r5, #12]
 8011c88:	6820      	ldr	r0, [r4, #0]
 8011c8a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011c92:	4a67      	ldr	r2, [pc, #412]	; (8011e30 <problem_fetch+0x104a0>)
 8011c94:	461c      	mov	r4, r3
 8011c96:	4615      	mov	r5, r2
 8011c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c9a:	6020      	str	r0, [r4, #0]
 8011c9c:	6061      	str	r1, [r4, #4]
 8011c9e:	60a2      	str	r2, [r4, #8]
 8011ca0:	60e3      	str	r3, [r4, #12]
			break;
 8011ca2:	f00a bda5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 476 :
			strcpy(p->name,"HUMPA");
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011cac:	4a61      	ldr	r2, [pc, #388]	; (8011e34 <problem_fetch+0x104a4>)
 8011cae:	6810      	ldr	r0, [r2, #0]
 8011cb0:	6018      	str	r0, [r3, #0]
 8011cb2:	8892      	ldrh	r2, [r2, #4]
 8011cb4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011cbc:	4a55      	ldr	r2, [pc, #340]	; (8011e14 <problem_fetch+0x10484>)
 8011cbe:	6810      	ldr	r0, [r2, #0]
 8011cc0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2209      	movs	r2, #9
 8011cc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,G,E,H,I");
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	33a4      	adds	r3, #164	; 0xa4
 8011ccc:	4a5a      	ldr	r2, [pc, #360]	; (8011e38 <problem_fetch+0x104a8>)
 8011cce:	461d      	mov	r5, r3
 8011cd0:	4614      	mov	r4, r2
 8011cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cd4:	6028      	str	r0, [r5, #0]
 8011cd6:	6069      	str	r1, [r5, #4]
 8011cd8:	60aa      	str	r2, [r5, #8]
 8011cda:	60eb      	str	r3, [r5, #12]
 8011cdc:	8823      	ldrh	r3, [r4, #0]
 8011cde:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,14,15,8,10,18");
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	4a55      	ldr	r2, [pc, #340]	; (8011e3c <problem_fetch+0x104ac>)
 8011ce6:	461c      	mov	r4, r3
 8011ce8:	4615      	mov	r5, r2
 8011cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011cec:	6020      	str	r0, [r4, #0]
 8011cee:	6061      	str	r1, [r4, #4]
 8011cf0:	60a2      	str	r2, [r4, #8]
 8011cf2:	60e3      	str	r3, [r4, #12]
 8011cf4:	6828      	ldr	r0, [r5, #0]
 8011cf6:	6120      	str	r0, [r4, #16]
 8011cf8:	88ab      	ldrh	r3, [r5, #4]
 8011cfa:	79aa      	ldrb	r2, [r5, #6]
 8011cfc:	82a3      	strh	r3, [r4, #20]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011d08:	4a45      	ldr	r2, [pc, #276]	; (8011e20 <problem_fetch+0x10490>)
 8011d0a:	461d      	mov	r5, r3
 8011d0c:	4614      	mov	r4, r2
 8011d0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d10:	6028      	str	r0, [r5, #0]
 8011d12:	6069      	str	r1, [r5, #4]
 8011d14:	60aa      	str	r2, [r5, #8]
 8011d16:	60eb      	str	r3, [r5, #12]
 8011d18:	8823      	ldrh	r3, [r4, #0]
 8011d1a:	822b      	strh	r3, [r5, #16]
			break;
 8011d1c:	f00a bd68 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 477 :
			strcpy(p->name,"OH MY FAT FINGERS...");
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d26:	4a46      	ldr	r2, [pc, #280]	; (8011e40 <problem_fetch+0x104b0>)
 8011d28:	461d      	mov	r5, r3
 8011d2a:	4614      	mov	r4, r2
 8011d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d2e:	6028      	str	r0, [r5, #0]
 8011d30:	6069      	str	r1, [r5, #4]
 8011d32:	60aa      	str	r2, [r5, #8]
 8011d34:	60eb      	str	r3, [r5, #12]
 8011d36:	6820      	ldr	r0, [r4, #0]
 8011d38:	6128      	str	r0, [r5, #16]
 8011d3a:	7923      	ldrb	r3, [r4, #4]
 8011d3c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d44:	4a3f      	ldr	r2, [pc, #252]	; (8011e44 <problem_fetch+0x104b4>)
 8011d46:	8811      	ldrh	r1, [r2, #0]
 8011d48:	7892      	ldrb	r2, [r2, #2]
 8011d4a:	8019      	strh	r1, [r3, #0]
 8011d4c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2206      	movs	r2, #6
 8011d52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,F,K,E,I");
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	33a4      	adds	r3, #164	; 0xa4
 8011d58:	4a3b      	ldr	r2, [pc, #236]	; (8011e48 <problem_fetch+0x104b8>)
 8011d5a:	461c      	mov	r4, r3
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d60:	6020      	str	r0, [r4, #0]
 8011d62:	6061      	str	r1, [r4, #4]
 8011d64:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,8,18");
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	3304      	adds	r3, #4
 8011d6a:	4a38      	ldr	r2, [pc, #224]	; (8011e4c <problem_fetch+0x104bc>)
 8011d6c:	461c      	mov	r4, r3
 8011d6e:	4615      	mov	r5, r2
 8011d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011d72:	6020      	str	r0, [r4, #0]
 8011d74:	6061      	str	r1, [r4, #4]
 8011d76:	60a2      	str	r2, [r4, #8]
 8011d78:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011d80:	4a33      	ldr	r2, [pc, #204]	; (8011e50 <problem_fetch+0x104c0>)
 8011d82:	461c      	mov	r4, r3
 8011d84:	4613      	mov	r3, r2
 8011d86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d88:	6020      	str	r0, [r4, #0]
 8011d8a:	6061      	str	r1, [r4, #4]
 8011d8c:	60a2      	str	r2, [r4, #8]
			break;
 8011d8e:	f00a bd2f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 478 :
			strcpy(p->name,"SOFT SERVE");
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d98:	492e      	ldr	r1, [pc, #184]	; (8011e54 <problem_fetch+0x104c4>)
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	cb03      	ldmia	r3!, {r0, r1}
 8011da0:	6010      	str	r0, [r2, #0]
 8011da2:	6051      	str	r1, [r2, #4]
 8011da4:	8819      	ldrh	r1, [r3, #0]
 8011da6:	789b      	ldrb	r3, [r3, #2]
 8011da8:	8111      	strh	r1, [r2, #8]
 8011daa:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011db2:	4a29      	ldr	r2, [pc, #164]	; (8011e58 <problem_fetch+0x104c8>)
 8011db4:	6810      	ldr	r0, [r2, #0]
 8011db6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2206      	movs	r2, #6
 8011dbc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,D,E,I");
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	33a4      	adds	r3, #164	; 0xa4
 8011dc2:	4a26      	ldr	r2, [pc, #152]	; (8011e5c <problem_fetch+0x104cc>)
 8011dc4:	461c      	mov	r4, r3
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dca:	6020      	str	r0, [r4, #0]
 8011dcc:	6061      	str	r1, [r4, #4]
 8011dce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,15,16,18");
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	3304      	adds	r3, #4
 8011dd4:	4a22      	ldr	r2, [pc, #136]	; (8011e60 <problem_fetch+0x104d0>)
 8011dd6:	461c      	mov	r4, r3
 8011dd8:	4615      	mov	r5, r2
 8011dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011ddc:	6020      	str	r0, [r4, #0]
 8011dde:	6061      	str	r1, [r4, #4]
 8011de0:	60a2      	str	r2, [r4, #8]
 8011de2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011dea:	4a19      	ldr	r2, [pc, #100]	; (8011e50 <problem_fetch+0x104c0>)
 8011dec:	461c      	mov	r4, r3
 8011dee:	4613      	mov	r3, r2
 8011df0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011df2:	6020      	str	r0, [r4, #0]
 8011df4:	6061      	str	r1, [r4, #4]
 8011df6:	60a2      	str	r2, [r4, #8]
			break;
 8011df8:	f00a bcfa 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8011dfc:	080296b8 	.word	0x080296b8
 8011e00:	08024288 	.word	0x08024288
 8011e04:	080296c8 	.word	0x080296c8
 8011e08:	080296d8 	.word	0x080296d8
 8011e0c:	08023d18 	.word	0x08023d18
 8011e10:	080296ec 	.word	0x080296ec
 8011e14:	08023b90 	.word	0x08023b90
 8011e18:	080296fc 	.word	0x080296fc
 8011e1c:	08029710 	.word	0x08029710
 8011e20:	08024b74 	.word	0x08024b74
 8011e24:	08029728 	.word	0x08029728
 8011e28:	08029734 	.word	0x08029734
 8011e2c:	08029744 	.word	0x08029744
 8011e30:	08023cb4 	.word	0x08023cb4
 8011e34:	08029758 	.word	0x08029758
 8011e38:	08029760 	.word	0x08029760
 8011e3c:	08029774 	.word	0x08029774
 8011e40:	0802978c 	.word	0x0802978c
 8011e44:	08023c5c 	.word	0x08023c5c
 8011e48:	080297a4 	.word	0x080297a4
 8011e4c:	080297b0 	.word	0x080297b0
 8011e50:	08023f2c 	.word	0x08023f2c
 8011e54:	080297c0 	.word	0x080297c0
 8011e58:	08023d30 	.word	0x08023d30
 8011e5c:	080297cc 	.word	0x080297cc
 8011e60:	080297d8 	.word	0x080297d8
		case 479 :
			strcpy(p->name,"SCRUMPY MCBUTTERBALLS");
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011e6a:	4aac      	ldr	r2, [pc, #688]	; (801211c <problem_fetch+0x1078c>)
 8011e6c:	461d      	mov	r5, r3
 8011e6e:	4614      	mov	r4, r2
 8011e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e72:	6028      	str	r0, [r5, #0]
 8011e74:	6069      	str	r1, [r5, #4]
 8011e76:	60aa      	str	r2, [r5, #8]
 8011e78:	60eb      	str	r3, [r5, #12]
 8011e7a:	6820      	ldr	r0, [r4, #0]
 8011e7c:	6128      	str	r0, [r5, #16]
 8011e7e:	88a3      	ldrh	r3, [r4, #4]
 8011e80:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011e88:	4aa5      	ldr	r2, [pc, #660]	; (8012120 <problem_fetch+0x10790>)
 8011e8a:	6810      	ldr	r0, [r2, #0]
 8011e8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2205      	movs	r2, #5
 8011e92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,G,D");
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	33a4      	adds	r3, #164	; 0xa4
 8011e98:	49a2      	ldr	r1, [pc, #648]	; (8012124 <problem_fetch+0x10794>)
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	460b      	mov	r3, r1
 8011e9e:	cb03      	ldmia	r3!, {r0, r1}
 8011ea0:	6010      	str	r0, [r2, #0]
 8011ea2:	6051      	str	r1, [r2, #4]
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	4a9e      	ldr	r2, [pc, #632]	; (8012128 <problem_fetch+0x10798>)
 8011eae:	461c      	mov	r4, r3
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011eb4:	6020      	str	r0, [r4, #0]
 8011eb6:	6061      	str	r1, [r4, #4]
 8011eb8:	60a2      	str	r2, [r4, #8]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011ec4:	4999      	ldr	r1, [pc, #612]	; (801212c <problem_fetch+0x1079c>)
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	460b      	mov	r3, r1
 8011eca:	cb03      	ldmia	r3!, {r0, r1}
 8011ecc:	6010      	str	r0, [r2, #0]
 8011ece:	6051      	str	r1, [r2, #4]
 8011ed0:	881b      	ldrh	r3, [r3, #0]
 8011ed2:	8113      	strh	r3, [r2, #8]
			break;
 8011ed4:	f00a bc8c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 480 :
			strcpy(p->name,"JAB 2017");
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011ede:	4994      	ldr	r1, [pc, #592]	; (8012130 <problem_fetch+0x107a0>)
 8011ee0:	461a      	mov	r2, r3
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	cb03      	ldmia	r3!, {r0, r1}
 8011ee6:	6010      	str	r0, [r2, #0]
 8011ee8:	6051      	str	r1, [r2, #4]
 8011eea:	781b      	ldrb	r3, [r3, #0]
 8011eec:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011ef4:	4a8f      	ldr	r2, [pc, #572]	; (8012134 <problem_fetch+0x107a4>)
 8011ef6:	8811      	ldrh	r1, [r2, #0]
 8011ef8:	7892      	ldrb	r2, [r2, #2]
 8011efa:	8019      	strh	r1, [r3, #0]
 8011efc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2205      	movs	r2, #5
 8011f02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,I");
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	33a4      	adds	r3, #164	; 0xa4
 8011f08:	498b      	ldr	r1, [pc, #556]	; (8012138 <problem_fetch+0x107a8>)
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	460b      	mov	r3, r1
 8011f0e:	cb03      	ldmia	r3!, {r0, r1}
 8011f10:	6010      	str	r0, [r2, #0]
 8011f12:	6051      	str	r1, [r2, #4]
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3304      	adds	r3, #4
 8011f1c:	4a87      	ldr	r2, [pc, #540]	; (801213c <problem_fetch+0x107ac>)
 8011f1e:	461c      	mov	r4, r3
 8011f20:	4613      	mov	r3, r2
 8011f22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f24:	6020      	str	r0, [r4, #0]
 8011f26:	6061      	str	r1, [r4, #4]
 8011f28:	60a2      	str	r2, [r4, #8]
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011f34:	497d      	ldr	r1, [pc, #500]	; (801212c <problem_fetch+0x1079c>)
 8011f36:	461a      	mov	r2, r3
 8011f38:	460b      	mov	r3, r1
 8011f3a:	cb03      	ldmia	r3!, {r0, r1}
 8011f3c:	6010      	str	r0, [r2, #0]
 8011f3e:	6051      	str	r1, [r2, #4]
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	8113      	strh	r3, [r2, #8]
			break;
 8011f44:	f00a bc54 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 481 :
			strcpy(p->name,"BADMOTORFINGER");
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f4e:	4a7c      	ldr	r2, [pc, #496]	; (8012140 <problem_fetch+0x107b0>)
 8011f50:	461c      	mov	r4, r3
 8011f52:	4613      	mov	r3, r2
 8011f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f56:	6020      	str	r0, [r4, #0]
 8011f58:	6061      	str	r1, [r4, #4]
 8011f5a:	60a2      	str	r2, [r4, #8]
 8011f5c:	881a      	ldrh	r2, [r3, #0]
 8011f5e:	789b      	ldrb	r3, [r3, #2]
 8011f60:	81a2      	strh	r2, [r4, #12]
 8011f62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011f6a:	4a76      	ldr	r2, [pc, #472]	; (8012144 <problem_fetch+0x107b4>)
 8011f6c:	8811      	ldrh	r1, [r2, #0]
 8011f6e:	7892      	ldrb	r2, [r2, #2]
 8011f70:	8019      	strh	r1, [r3, #0]
 8011f72:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2207      	movs	r2, #7
 8011f78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,F,J,E,D");
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	33a4      	adds	r3, #164	; 0xa4
 8011f7e:	4a72      	ldr	r2, [pc, #456]	; (8012148 <problem_fetch+0x107b8>)
 8011f80:	461c      	mov	r4, r3
 8011f82:	4613      	mov	r3, r2
 8011f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f86:	6020      	str	r0, [r4, #0]
 8011f88:	6061      	str	r1, [r4, #4]
 8011f8a:	60a2      	str	r2, [r4, #8]
 8011f8c:	881b      	ldrh	r3, [r3, #0]
 8011f8e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,11,13,13,16,18");
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	3304      	adds	r3, #4
 8011f94:	4a6d      	ldr	r2, [pc, #436]	; (801214c <problem_fetch+0x107bc>)
 8011f96:	461d      	mov	r5, r3
 8011f98:	4614      	mov	r4, r2
 8011f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011f9c:	6028      	str	r0, [r5, #0]
 8011f9e:	6069      	str	r1, [r5, #4]
 8011fa0:	60aa      	str	r2, [r5, #8]
 8011fa2:	60eb      	str	r3, [r5, #12]
 8011fa4:	8823      	ldrh	r3, [r4, #0]
 8011fa6:	78a2      	ldrb	r2, [r4, #2]
 8011fa8:	822b      	strh	r3, [r5, #16]
 8011faa:	4613      	mov	r3, r2
 8011fac:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011fb4:	4a66      	ldr	r2, [pc, #408]	; (8012150 <problem_fetch+0x107c0>)
 8011fb6:	461c      	mov	r4, r3
 8011fb8:	4613      	mov	r3, r2
 8011fba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011fbc:	6020      	str	r0, [r4, #0]
 8011fbe:	6061      	str	r1, [r4, #4]
 8011fc0:	60a2      	str	r2, [r4, #8]
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	81a3      	strh	r3, [r4, #12]
			break;
 8011fc6:	f00a bc13 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 482 :
			strcpy(p->name,"ACG79");
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011fd0:	4a60      	ldr	r2, [pc, #384]	; (8012154 <problem_fetch+0x107c4>)
 8011fd2:	6810      	ldr	r0, [r2, #0]
 8011fd4:	6018      	str	r0, [r3, #0]
 8011fd6:	8892      	ldrh	r2, [r2, #4]
 8011fd8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011fe0:	4a58      	ldr	r2, [pc, #352]	; (8012144 <problem_fetch+0x107b4>)
 8011fe2:	8811      	ldrh	r1, [r2, #0]
 8011fe4:	7892      	ldrb	r2, [r2, #2]
 8011fe6:	8019      	strh	r1, [r3, #0]
 8011fe8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2207      	movs	r2, #7
 8011fee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,I,F,H,D");
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	33a4      	adds	r3, #164	; 0xa4
 8011ff4:	4a58      	ldr	r2, [pc, #352]	; (8012158 <problem_fetch+0x107c8>)
 8011ff6:	461c      	mov	r4, r3
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011ffc:	6020      	str	r0, [r4, #0]
 8011ffe:	6061      	str	r1, [r4, #4]
 8012000:	60a2      	str	r2, [r4, #8]
 8012002:	881b      	ldrh	r3, [r3, #0]
 8012004:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,13,16,18");
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	3304      	adds	r3, #4
 801200a:	4a54      	ldr	r2, [pc, #336]	; (801215c <problem_fetch+0x107cc>)
 801200c:	461d      	mov	r5, r3
 801200e:	4614      	mov	r4, r2
 8012010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012012:	6028      	str	r0, [r5, #0]
 8012014:	6069      	str	r1, [r5, #4]
 8012016:	60aa      	str	r2, [r5, #8]
 8012018:	60eb      	str	r3, [r5, #12]
 801201a:	7823      	ldrb	r3, [r4, #0]
 801201c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012024:	4a4e      	ldr	r2, [pc, #312]	; (8012160 <problem_fetch+0x107d0>)
 8012026:	461c      	mov	r4, r3
 8012028:	4613      	mov	r3, r2
 801202a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801202c:	6020      	str	r0, [r4, #0]
 801202e:	6061      	str	r1, [r4, #4]
 8012030:	60a2      	str	r2, [r4, #8]
 8012032:	881b      	ldrh	r3, [r3, #0]
 8012034:	81a3      	strh	r3, [r4, #12]
			break;
 8012036:	f00a bbdb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 483 :
			strcpy(p->name,"COMEBACK 4.0");
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012040:	4a48      	ldr	r2, [pc, #288]	; (8012164 <problem_fetch+0x107d4>)
 8012042:	461c      	mov	r4, r3
 8012044:	4613      	mov	r3, r2
 8012046:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012048:	6020      	str	r0, [r4, #0]
 801204a:	6061      	str	r1, [r4, #4]
 801204c:	60a2      	str	r2, [r4, #8]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012058:	4a43      	ldr	r2, [pc, #268]	; (8012168 <problem_fetch+0x107d8>)
 801205a:	6810      	ldr	r0, [r2, #0]
 801205c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2206      	movs	r2, #6
 8012062:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,D,D");
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	33a4      	adds	r3, #164	; 0xa4
 8012068:	4a40      	ldr	r2, [pc, #256]	; (801216c <problem_fetch+0x107dc>)
 801206a:	461c      	mov	r4, r3
 801206c:	4613      	mov	r3, r2
 801206e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012070:	6020      	str	r0, [r4, #0]
 8012072:	6061      	str	r1, [r4, #4]
 8012074:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,15,18");
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	3304      	adds	r3, #4
 801207a:	4a3d      	ldr	r2, [pc, #244]	; (8012170 <problem_fetch+0x107e0>)
 801207c:	461c      	mov	r4, r3
 801207e:	4613      	mov	r3, r2
 8012080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012082:	6020      	str	r0, [r4, #0]
 8012084:	6061      	str	r1, [r4, #4]
 8012086:	60a2      	str	r2, [r4, #8]
 8012088:	881a      	ldrh	r2, [r3, #0]
 801208a:	789b      	ldrb	r3, [r3, #2]
 801208c:	81a2      	strh	r2, [r4, #12]
 801208e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012096:	4a37      	ldr	r2, [pc, #220]	; (8012174 <problem_fetch+0x107e4>)
 8012098:	461c      	mov	r4, r3
 801209a:	4613      	mov	r3, r2
 801209c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801209e:	6020      	str	r0, [r4, #0]
 80120a0:	6061      	str	r1, [r4, #4]
 80120a2:	60a2      	str	r2, [r4, #8]
			break;
 80120a4:	f00a bba4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 484 :
			strcpy(p->name,"COMEBACK 3.5");
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80120ae:	4a32      	ldr	r2, [pc, #200]	; (8012178 <problem_fetch+0x107e8>)
 80120b0:	461c      	mov	r4, r3
 80120b2:	4613      	mov	r3, r2
 80120b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120b6:	6020      	str	r0, [r4, #0]
 80120b8:	6061      	str	r1, [r4, #4]
 80120ba:	60a2      	str	r2, [r4, #8]
 80120bc:	781b      	ldrb	r3, [r3, #0]
 80120be:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80120c6:	4a2d      	ldr	r2, [pc, #180]	; (801217c <problem_fetch+0x107ec>)
 80120c8:	6810      	ldr	r0, [r2, #0]
 80120ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2208      	movs	r2, #8
 80120d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,E,I");
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	33a4      	adds	r3, #164	; 0xa4
 80120d6:	4a2a      	ldr	r2, [pc, #168]	; (8012180 <problem_fetch+0x107f0>)
 80120d8:	461c      	mov	r4, r3
 80120da:	4615      	mov	r5, r2
 80120dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80120de:	6020      	str	r0, [r4, #0]
 80120e0:	6061      	str	r1, [r4, #4]
 80120e2:	60a2      	str	r2, [r4, #8]
 80120e4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,16,18");
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	3304      	adds	r3, #4
 80120ea:	4a26      	ldr	r2, [pc, #152]	; (8012184 <problem_fetch+0x107f4>)
 80120ec:	461d      	mov	r5, r3
 80120ee:	4614      	mov	r4, r2
 80120f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120f2:	6028      	str	r0, [r5, #0]
 80120f4:	6069      	str	r1, [r5, #4]
 80120f6:	60aa      	str	r2, [r5, #8]
 80120f8:	60eb      	str	r3, [r5, #12]
 80120fa:	6820      	ldr	r0, [r4, #0]
 80120fc:	6128      	str	r0, [r5, #16]
 80120fe:	7923      	ldrb	r3, [r4, #4]
 8012100:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012108:	4a1f      	ldr	r2, [pc, #124]	; (8012188 <problem_fetch+0x107f8>)
 801210a:	461c      	mov	r4, r3
 801210c:	4615      	mov	r5, r2
 801210e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012110:	6020      	str	r0, [r4, #0]
 8012112:	6061      	str	r1, [r4, #4]
 8012114:	60a2      	str	r2, [r4, #8]
 8012116:	60e3      	str	r3, [r4, #12]
			break;
 8012118:	f00a bb6a 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801211c:	080297e8 	.word	0x080297e8
 8012120:	08023d30 	.word	0x08023d30
 8012124:	08029800 	.word	0x08029800
 8012128:	08024e98 	.word	0x08024e98
 801212c:	0802405c 	.word	0x0802405c
 8012130:	0802980c 	.word	0x0802980c
 8012134:	08024288 	.word	0x08024288
 8012138:	08029818 	.word	0x08029818
 801213c:	08028d88 	.word	0x08028d88
 8012140:	08029824 	.word	0x08029824
 8012144:	08023b50 	.word	0x08023b50
 8012148:	08029834 	.word	0x08029834
 801214c:	08029844 	.word	0x08029844
 8012150:	08023d18 	.word	0x08023d18
 8012154:	08029858 	.word	0x08029858
 8012158:	08029860 	.word	0x08029860
 801215c:	08029870 	.word	0x08029870
 8012160:	08023c08 	.word	0x08023c08
 8012164:	08029884 	.word	0x08029884
 8012168:	08023c28 	.word	0x08023c28
 801216c:	08029894 	.word	0x08029894
 8012170:	080298a0 	.word	0x080298a0
 8012174:	08023f2c 	.word	0x08023f2c
 8012178:	080298b0 	.word	0x080298b0
 801217c:	08023b90 	.word	0x08023b90
 8012180:	080298c0 	.word	0x080298c0
 8012184:	080298d0 	.word	0x080298d0
 8012188:	08023da0 	.word	0x08023da0
		case 485 :
			strcpy(p->name,"MUCCA");
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012192:	4aae      	ldr	r2, [pc, #696]	; (801244c <problem_fetch+0x10abc>)
 8012194:	6810      	ldr	r0, [r2, #0]
 8012196:	6018      	str	r0, [r3, #0]
 8012198:	8892      	ldrh	r2, [r2, #4]
 801219a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80121a2:	4aab      	ldr	r2, [pc, #684]	; (8012450 <problem_fetch+0x10ac0>)
 80121a4:	6810      	ldr	r0, [r2, #0]
 80121a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2204      	movs	r2, #4
 80121ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I");
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	33a4      	adds	r3, #164	; 0xa4
 80121b2:	49a8      	ldr	r1, [pc, #672]	; (8012454 <problem_fetch+0x10ac4>)
 80121b4:	461a      	mov	r2, r3
 80121b6:	460b      	mov	r3, r1
 80121b8:	cb03      	ldmia	r3!, {r0, r1}
 80121ba:	6010      	str	r0, [r2, #0]
 80121bc:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	3304      	adds	r3, #4
 80121c2:	49a5      	ldr	r1, [pc, #660]	; (8012458 <problem_fetch+0x10ac8>)
 80121c4:	461a      	mov	r2, r3
 80121c6:	460b      	mov	r3, r1
 80121c8:	cb03      	ldmia	r3!, {r0, r1}
 80121ca:	6010      	str	r0, [r2, #0]
 80121cc:	6051      	str	r1, [r2, #4]
 80121ce:	8819      	ldrh	r1, [r3, #0]
 80121d0:	789b      	ldrb	r3, [r3, #2]
 80121d2:	8111      	strh	r1, [r2, #8]
 80121d4:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80121dc:	499f      	ldr	r1, [pc, #636]	; (801245c <problem_fetch+0x10acc>)
 80121de:	461a      	mov	r2, r3
 80121e0:	460b      	mov	r3, r1
 80121e2:	cb03      	ldmia	r3!, {r0, r1}
 80121e4:	6010      	str	r0, [r2, #0]
 80121e6:	6051      	str	r1, [r2, #4]
			break;
 80121e8:	f00a bb02 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 486 :
			strcpy(p->name,"MR PINCH");
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80121f2:	499b      	ldr	r1, [pc, #620]	; (8012460 <problem_fetch+0x10ad0>)
 80121f4:	461a      	mov	r2, r3
 80121f6:	460b      	mov	r3, r1
 80121f8:	cb03      	ldmia	r3!, {r0, r1}
 80121fa:	6010      	str	r0, [r2, #0]
 80121fc:	6051      	str	r1, [r2, #4]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012208:	4a96      	ldr	r2, [pc, #600]	; (8012464 <problem_fetch+0x10ad4>)
 801220a:	6810      	ldr	r0, [r2, #0]
 801220c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	2205      	movs	r2, #5
 8012212:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,E,D");
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	33a4      	adds	r3, #164	; 0xa4
 8012218:	4993      	ldr	r1, [pc, #588]	; (8012468 <problem_fetch+0x10ad8>)
 801221a:	461a      	mov	r2, r3
 801221c:	460b      	mov	r3, r1
 801221e:	cb03      	ldmia	r3!, {r0, r1}
 8012220:	6010      	str	r0, [r2, #0]
 8012222:	6051      	str	r1, [r2, #4]
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	3304      	adds	r3, #4
 801222c:	4a8f      	ldr	r2, [pc, #572]	; (801246c <problem_fetch+0x10adc>)
 801222e:	461c      	mov	r4, r3
 8012230:	4613      	mov	r3, r2
 8012232:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012234:	6020      	str	r0, [r4, #0]
 8012236:	6061      	str	r1, [r4, #4]
 8012238:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012240:	498b      	ldr	r1, [pc, #556]	; (8012470 <problem_fetch+0x10ae0>)
 8012242:	461a      	mov	r2, r3
 8012244:	460b      	mov	r3, r1
 8012246:	cb03      	ldmia	r3!, {r0, r1}
 8012248:	6010      	str	r0, [r2, #0]
 801224a:	6051      	str	r1, [r2, #4]
 801224c:	881b      	ldrh	r3, [r3, #0]
 801224e:	8113      	strh	r3, [r2, #8]
			break;
 8012250:	f00a bace 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 487 :
			strcpy(p->name,"PROJECT V1");
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801225a:	4986      	ldr	r1, [pc, #536]	; (8012474 <problem_fetch+0x10ae4>)
 801225c:	461a      	mov	r2, r3
 801225e:	460b      	mov	r3, r1
 8012260:	cb03      	ldmia	r3!, {r0, r1}
 8012262:	6010      	str	r0, [r2, #0]
 8012264:	6051      	str	r1, [r2, #4]
 8012266:	8819      	ldrh	r1, [r3, #0]
 8012268:	789b      	ldrb	r3, [r3, #2]
 801226a:	8111      	strh	r1, [r2, #8]
 801226c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012274:	4a7b      	ldr	r2, [pc, #492]	; (8012464 <problem_fetch+0x10ad4>)
 8012276:	6810      	ldr	r0, [r2, #0]
 8012278:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2207      	movs	r2, #7
 801227e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,F,I,G,D");
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	33a4      	adds	r3, #164	; 0xa4
 8012284:	4a7c      	ldr	r2, [pc, #496]	; (8012478 <problem_fetch+0x10ae8>)
 8012286:	461c      	mov	r4, r3
 8012288:	4613      	mov	r3, r2
 801228a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801228c:	6020      	str	r0, [r4, #0]
 801228e:	6061      	str	r1, [r4, #4]
 8012290:	60a2      	str	r2, [r4, #8]
 8012292:	881b      	ldrh	r3, [r3, #0]
 8012294:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,13,14,17,18");
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	3304      	adds	r3, #4
 801229a:	4a78      	ldr	r2, [pc, #480]	; (801247c <problem_fetch+0x10aec>)
 801229c:	461d      	mov	r5, r3
 801229e:	4614      	mov	r4, r2
 80122a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80122a2:	6028      	str	r0, [r5, #0]
 80122a4:	6069      	str	r1, [r5, #4]
 80122a6:	60aa      	str	r2, [r5, #8]
 80122a8:	60eb      	str	r3, [r5, #12]
 80122aa:	8823      	ldrh	r3, [r4, #0]
 80122ac:	78a2      	ldrb	r2, [r4, #2]
 80122ae:	822b      	strh	r3, [r5, #16]
 80122b0:	4613      	mov	r3, r2
 80122b2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80122ba:	4a71      	ldr	r2, [pc, #452]	; (8012480 <problem_fetch+0x10af0>)
 80122bc:	461c      	mov	r4, r3
 80122be:	4613      	mov	r3, r2
 80122c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122c2:	6020      	str	r0, [r4, #0]
 80122c4:	6061      	str	r1, [r4, #4]
 80122c6:	60a2      	str	r2, [r4, #8]
 80122c8:	881b      	ldrh	r3, [r3, #0]
 80122ca:	81a3      	strh	r3, [r4, #12]
			break;
 80122cc:	f00a ba90 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 488 :
			strcpy(p->name,"PAUNCH PINCHER");
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80122d6:	4a6b      	ldr	r2, [pc, #428]	; (8012484 <problem_fetch+0x10af4>)
 80122d8:	461c      	mov	r4, r3
 80122da:	4613      	mov	r3, r2
 80122dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122de:	6020      	str	r0, [r4, #0]
 80122e0:	6061      	str	r1, [r4, #4]
 80122e2:	60a2      	str	r2, [r4, #8]
 80122e4:	881a      	ldrh	r2, [r3, #0]
 80122e6:	789b      	ldrb	r3, [r3, #2]
 80122e8:	81a2      	strh	r2, [r4, #12]
 80122ea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80122f2:	4a65      	ldr	r2, [pc, #404]	; (8012488 <problem_fetch+0x10af8>)
 80122f4:	8811      	ldrh	r1, [r2, #0]
 80122f6:	7892      	ldrb	r2, [r2, #2]
 80122f8:	8019      	strh	r1, [r3, #0]
 80122fa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	220a      	movs	r2, #10
 8012300:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,F,C,F,G,C,K,I");
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	33a4      	adds	r3, #164	; 0xa4
 8012306:	4a61      	ldr	r2, [pc, #388]	; (801248c <problem_fetch+0x10afc>)
 8012308:	461d      	mov	r5, r3
 801230a:	4614      	mov	r4, r2
 801230c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801230e:	6028      	str	r0, [r5, #0]
 8012310:	6069      	str	r1, [r5, #4]
 8012312:	60aa      	str	r2, [r5, #8]
 8012314:	60eb      	str	r3, [r5, #12]
 8012316:	6820      	ldr	r0, [r4, #0]
 8012318:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,8,13,15,5,14,18");
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	3304      	adds	r3, #4
 801231e:	4a5c      	ldr	r2, [pc, #368]	; (8012490 <problem_fetch+0x10b00>)
 8012320:	461d      	mov	r5, r3
 8012322:	4614      	mov	r4, r2
 8012324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012326:	6028      	str	r0, [r5, #0]
 8012328:	6069      	str	r1, [r5, #4]
 801232a:	60aa      	str	r2, [r5, #8]
 801232c:	60eb      	str	r3, [r5, #12]
 801232e:	cc03      	ldmia	r4!, {r0, r1}
 8012330:	6128      	str	r0, [r5, #16]
 8012332:	6169      	str	r1, [r5, #20]
 8012334:	7823      	ldrb	r3, [r4, #0]
 8012336:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801233e:	4a55      	ldr	r2, [pc, #340]	; (8012494 <problem_fetch+0x10b04>)
 8012340:	461d      	mov	r5, r3
 8012342:	4614      	mov	r4, r2
 8012344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012346:	6028      	str	r0, [r5, #0]
 8012348:	6069      	str	r1, [r5, #4]
 801234a:	60aa      	str	r2, [r5, #8]
 801234c:	60eb      	str	r3, [r5, #12]
 801234e:	6820      	ldr	r0, [r4, #0]
 8012350:	6128      	str	r0, [r5, #16]
			break;
 8012352:	f00a ba4d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 489 :
			strcpy(p->name,"CHAKA MAKA");
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801235c:	494e      	ldr	r1, [pc, #312]	; (8012498 <problem_fetch+0x10b08>)
 801235e:	461a      	mov	r2, r3
 8012360:	460b      	mov	r3, r1
 8012362:	cb03      	ldmia	r3!, {r0, r1}
 8012364:	6010      	str	r0, [r2, #0]
 8012366:	6051      	str	r1, [r2, #4]
 8012368:	8819      	ldrh	r1, [r3, #0]
 801236a:	789b      	ldrb	r3, [r3, #2]
 801236c:	8111      	strh	r1, [r2, #8]
 801236e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012376:	4a49      	ldr	r2, [pc, #292]	; (801249c <problem_fetch+0x10b0c>)
 8012378:	8811      	ldrh	r1, [r2, #0]
 801237a:	7892      	ldrb	r2, [r2, #2]
 801237c:	8019      	strh	r1, [r3, #0]
 801237e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2207      	movs	r2, #7
 8012384:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,H,I,G,I");
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	33a4      	adds	r3, #164	; 0xa4
 801238a:	4a45      	ldr	r2, [pc, #276]	; (80124a0 <problem_fetch+0x10b10>)
 801238c:	461c      	mov	r4, r3
 801238e:	4613      	mov	r3, r2
 8012390:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012392:	6020      	str	r0, [r4, #0]
 8012394:	6061      	str	r1, [r4, #4]
 8012396:	60a2      	str	r2, [r4, #8]
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,13,7,17,18");
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	3304      	adds	r3, #4
 80123a0:	4a40      	ldr	r2, [pc, #256]	; (80124a4 <problem_fetch+0x10b14>)
 80123a2:	461d      	mov	r5, r3
 80123a4:	4614      	mov	r4, r2
 80123a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123a8:	6028      	str	r0, [r5, #0]
 80123aa:	6069      	str	r1, [r5, #4]
 80123ac:	60aa      	str	r2, [r5, #8]
 80123ae:	60eb      	str	r3, [r5, #12]
 80123b0:	8823      	ldrh	r3, [r4, #0]
 80123b2:	78a2      	ldrb	r2, [r4, #2]
 80123b4:	822b      	strh	r3, [r5, #16]
 80123b6:	4613      	mov	r3, r2
 80123b8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80123c0:	4a2f      	ldr	r2, [pc, #188]	; (8012480 <problem_fetch+0x10af0>)
 80123c2:	461c      	mov	r4, r3
 80123c4:	4613      	mov	r3, r2
 80123c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123c8:	6020      	str	r0, [r4, #0]
 80123ca:	6061      	str	r1, [r4, #4]
 80123cc:	60a2      	str	r2, [r4, #8]
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	81a3      	strh	r3, [r4, #12]
			break;
 80123d2:	f00a ba0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 490 :
			strcpy(p->name,"SHOULDER 'SPLODER");
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80123dc:	4a32      	ldr	r2, [pc, #200]	; (80124a8 <problem_fetch+0x10b18>)
 80123de:	461d      	mov	r5, r3
 80123e0:	4614      	mov	r4, r2
 80123e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123e4:	6028      	str	r0, [r5, #0]
 80123e6:	6069      	str	r1, [r5, #4]
 80123e8:	60aa      	str	r2, [r5, #8]
 80123ea:	60eb      	str	r3, [r5, #12]
 80123ec:	8823      	ldrh	r3, [r4, #0]
 80123ee:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80123f6:	4a2d      	ldr	r2, [pc, #180]	; (80124ac <problem_fetch+0x10b1c>)
 80123f8:	8811      	ldrh	r1, [r2, #0]
 80123fa:	7892      	ldrb	r2, [r2, #2]
 80123fc:	8019      	strh	r1, [r3, #0]
 80123fe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2206      	movs	r2, #6
 8012404:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,E,J,E,D");
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	33a4      	adds	r3, #164	; 0xa4
 801240a:	4a29      	ldr	r2, [pc, #164]	; (80124b0 <problem_fetch+0x10b20>)
 801240c:	461c      	mov	r4, r3
 801240e:	4613      	mov	r3, r2
 8012410:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012412:	6020      	str	r0, [r4, #0]
 8012414:	6061      	str	r1, [r4, #4]
 8012416:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,14,18");
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	3304      	adds	r3, #4
 801241c:	4a25      	ldr	r2, [pc, #148]	; (80124b4 <problem_fetch+0x10b24>)
 801241e:	461c      	mov	r4, r3
 8012420:	4613      	mov	r3, r2
 8012422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012424:	6020      	str	r0, [r4, #0]
 8012426:	6061      	str	r1, [r4, #4]
 8012428:	60a2      	str	r2, [r4, #8]
 801242a:	881a      	ldrh	r2, [r3, #0]
 801242c:	789b      	ldrb	r3, [r3, #2]
 801242e:	81a2      	strh	r2, [r4, #12]
 8012430:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012438:	4a1f      	ldr	r2, [pc, #124]	; (80124b8 <problem_fetch+0x10b28>)
 801243a:	461c      	mov	r4, r3
 801243c:	4613      	mov	r3, r2
 801243e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012440:	6020      	str	r0, [r4, #0]
 8012442:	6061      	str	r1, [r4, #4]
 8012444:	60a2      	str	r2, [r4, #8]
			break;
 8012446:	f00a b9d3 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801244a:	bf00      	nop
 801244c:	080298e8 	.word	0x080298e8
 8012450:	08023d30 	.word	0x08023d30
 8012454:	080298f0 	.word	0x080298f0
 8012458:	080250a0 	.word	0x080250a0
 801245c:	08023ce4 	.word	0x08023ce4
 8012460:	080298f8 	.word	0x080298f8
 8012464:	08023ccc 	.word	0x08023ccc
 8012468:	08029904 	.word	0x08029904
 801246c:	08029910 	.word	0x08029910
 8012470:	0802405c 	.word	0x0802405c
 8012474:	0802991c 	.word	0x0802991c
 8012478:	08029928 	.word	0x08029928
 801247c:	08029938 	.word	0x08029938
 8012480:	08023d18 	.word	0x08023d18
 8012484:	0802994c 	.word	0x0802994c
 8012488:	08023c5c 	.word	0x08023c5c
 801248c:	0802995c 	.word	0x0802995c
 8012490:	08029970 	.word	0x08029970
 8012494:	08024438 	.word	0x08024438
 8012498:	0802998c 	.word	0x0802998c
 801249c:	08024288 	.word	0x08024288
 80124a0:	08029998 	.word	0x08029998
 80124a4:	080299a8 	.word	0x080299a8
 80124a8:	080299bc 	.word	0x080299bc
 80124ac:	080243c4 	.word	0x080243c4
 80124b0:	080299d0 	.word	0x080299d0
 80124b4:	080299dc 	.word	0x080299dc
 80124b8:	08023f2c 	.word	0x08023f2c
		case 491 :
			strcpy(p->name,"BIG TIME BRUH");
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80124c2:	4aaa      	ldr	r2, [pc, #680]	; (801276c <problem_fetch+0x10ddc>)
 80124c4:	461c      	mov	r4, r3
 80124c6:	4613      	mov	r3, r2
 80124c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80124ca:	6020      	str	r0, [r4, #0]
 80124cc:	6061      	str	r1, [r4, #4]
 80124ce:	60a2      	str	r2, [r4, #8]
 80124d0:	881b      	ldrh	r3, [r3, #0]
 80124d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80124da:	4aa5      	ldr	r2, [pc, #660]	; (8012770 <problem_fetch+0x10de0>)
 80124dc:	8811      	ldrh	r1, [r2, #0]
 80124de:	7892      	ldrb	r2, [r2, #2]
 80124e0:	8019      	strh	r1, [r3, #0]
 80124e2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2207      	movs	r2, #7
 80124e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,E,I");
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	33a4      	adds	r3, #164	; 0xa4
 80124ee:	4aa1      	ldr	r2, [pc, #644]	; (8012774 <problem_fetch+0x10de4>)
 80124f0:	461c      	mov	r4, r3
 80124f2:	4613      	mov	r3, r2
 80124f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80124f6:	6020      	str	r0, [r4, #0]
 80124f8:	6061      	str	r1, [r4, #4]
 80124fa:	60a2      	str	r2, [r4, #8]
 80124fc:	881b      	ldrh	r3, [r3, #0]
 80124fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,14,16,18");
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3304      	adds	r3, #4
 8012504:	4a9c      	ldr	r2, [pc, #624]	; (8012778 <problem_fetch+0x10de8>)
 8012506:	461d      	mov	r5, r3
 8012508:	4614      	mov	r4, r2
 801250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801250c:	6028      	str	r0, [r5, #0]
 801250e:	6069      	str	r1, [r5, #4]
 8012510:	60aa      	str	r2, [r5, #8]
 8012512:	60eb      	str	r3, [r5, #12]
 8012514:	8823      	ldrh	r3, [r4, #0]
 8012516:	78a2      	ldrb	r2, [r4, #2]
 8012518:	822b      	strh	r3, [r5, #16]
 801251a:	4613      	mov	r3, r2
 801251c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012524:	4a95      	ldr	r2, [pc, #596]	; (801277c <problem_fetch+0x10dec>)
 8012526:	461c      	mov	r4, r3
 8012528:	4613      	mov	r3, r2
 801252a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801252c:	6020      	str	r0, [r4, #0]
 801252e:	6061      	str	r1, [r4, #4]
 8012530:	60a2      	str	r2, [r4, #8]
 8012532:	881b      	ldrh	r3, [r3, #0]
 8012534:	81a3      	strh	r3, [r4, #12]
			break;
 8012536:	f00a b95b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 492 :
			strcpy(p->name,"THE HUMAN FLAG");
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012540:	4a8f      	ldr	r2, [pc, #572]	; (8012780 <problem_fetch+0x10df0>)
 8012542:	461c      	mov	r4, r3
 8012544:	4613      	mov	r3, r2
 8012546:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012548:	6020      	str	r0, [r4, #0]
 801254a:	6061      	str	r1, [r4, #4]
 801254c:	60a2      	str	r2, [r4, #8]
 801254e:	881a      	ldrh	r2, [r3, #0]
 8012550:	789b      	ldrb	r3, [r3, #2]
 8012552:	81a2      	strh	r2, [r4, #12]
 8012554:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801255c:	4a89      	ldr	r2, [pc, #548]	; (8012784 <problem_fetch+0x10df4>)
 801255e:	8811      	ldrh	r1, [r2, #0]
 8012560:	7892      	ldrb	r2, [r2, #2]
 8012562:	8019      	strh	r1, [r3, #0]
 8012564:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2204      	movs	r2, #4
 801256a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	33a4      	adds	r3, #164	; 0xa4
 8012570:	4985      	ldr	r1, [pc, #532]	; (8012788 <problem_fetch+0x10df8>)
 8012572:	461a      	mov	r2, r3
 8012574:	460b      	mov	r3, r1
 8012576:	cb03      	ldmia	r3!, {r0, r1}
 8012578:	6010      	str	r0, [r2, #0]
 801257a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	3304      	adds	r3, #4
 8012580:	4982      	ldr	r1, [pc, #520]	; (801278c <problem_fetch+0x10dfc>)
 8012582:	461a      	mov	r2, r3
 8012584:	460b      	mov	r3, r1
 8012586:	cb03      	ldmia	r3!, {r0, r1}
 8012588:	6010      	str	r0, [r2, #0]
 801258a:	6051      	str	r1, [r2, #4]
 801258c:	8819      	ldrh	r1, [r3, #0]
 801258e:	789b      	ldrb	r3, [r3, #2]
 8012590:	8111      	strh	r1, [r2, #8]
 8012592:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801259a:	497d      	ldr	r1, [pc, #500]	; (8012790 <problem_fetch+0x10e00>)
 801259c:	461a      	mov	r2, r3
 801259e:	460b      	mov	r3, r1
 80125a0:	cb03      	ldmia	r3!, {r0, r1}
 80125a2:	6010      	str	r0, [r2, #0]
 80125a4:	6051      	str	r1, [r2, #4]
			break;
 80125a6:	f00a b923 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 493 :
			strcpy(p->name,"WINGSPAN");
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80125b0:	4978      	ldr	r1, [pc, #480]	; (8012794 <problem_fetch+0x10e04>)
 80125b2:	461a      	mov	r2, r3
 80125b4:	460b      	mov	r3, r1
 80125b6:	cb03      	ldmia	r3!, {r0, r1}
 80125b8:	6010      	str	r0, [r2, #0]
 80125ba:	6051      	str	r1, [r2, #4]
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80125c6:	4a74      	ldr	r2, [pc, #464]	; (8012798 <problem_fetch+0x10e08>)
 80125c8:	6810      	ldr	r0, [r2, #0]
 80125ca:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	2205      	movs	r2, #5
 80125d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,A,D");
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	33a4      	adds	r3, #164	; 0xa4
 80125d6:	4971      	ldr	r1, [pc, #452]	; (801279c <problem_fetch+0x10e0c>)
 80125d8:	461a      	mov	r2, r3
 80125da:	460b      	mov	r3, r1
 80125dc:	cb03      	ldmia	r3!, {r0, r1}
 80125de:	6010      	str	r0, [r2, #0]
 80125e0:	6051      	str	r1, [r2, #4]
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3304      	adds	r3, #4
 80125ea:	4a6d      	ldr	r2, [pc, #436]	; (80127a0 <problem_fetch+0x10e10>)
 80125ec:	461c      	mov	r4, r3
 80125ee:	4613      	mov	r3, r2
 80125f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80125f2:	6020      	str	r0, [r4, #0]
 80125f4:	6061      	str	r1, [r4, #4]
 80125f6:	60a2      	str	r2, [r4, #8]
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012602:	4968      	ldr	r1, [pc, #416]	; (80127a4 <problem_fetch+0x10e14>)
 8012604:	461a      	mov	r2, r3
 8012606:	460b      	mov	r3, r1
 8012608:	cb03      	ldmia	r3!, {r0, r1}
 801260a:	6010      	str	r0, [r2, #0]
 801260c:	6051      	str	r1, [r2, #4]
 801260e:	881b      	ldrh	r3, [r3, #0]
 8012610:	8113      	strh	r3, [r2, #8]
			break;
 8012612:	f00a b8ed 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 494 :
			strcpy(p->name,"BELLE NOIRE");
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801261c:	4a62      	ldr	r2, [pc, #392]	; (80127a8 <problem_fetch+0x10e18>)
 801261e:	461c      	mov	r4, r3
 8012620:	4613      	mov	r3, r2
 8012622:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012624:	6020      	str	r0, [r4, #0]
 8012626:	6061      	str	r1, [r4, #4]
 8012628:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012630:	4a59      	ldr	r2, [pc, #356]	; (8012798 <problem_fetch+0x10e08>)
 8012632:	6810      	ldr	r0, [r2, #0]
 8012634:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	2207      	movs	r2, #7
 801263a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,J,I,I");
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	33a4      	adds	r3, #164	; 0xa4
 8012640:	4a5a      	ldr	r2, [pc, #360]	; (80127ac <problem_fetch+0x10e1c>)
 8012642:	461c      	mov	r4, r3
 8012644:	4613      	mov	r3, r2
 8012646:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012648:	6020      	str	r0, [r4, #0]
 801264a:	6061      	str	r1, [r4, #4]
 801264c:	60a2      	str	r2, [r4, #8]
 801264e:	881b      	ldrh	r3, [r3, #0]
 8012650:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,13,15,18");
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3304      	adds	r3, #4
 8012656:	4a56      	ldr	r2, [pc, #344]	; (80127b0 <problem_fetch+0x10e20>)
 8012658:	461d      	mov	r5, r3
 801265a:	4614      	mov	r4, r2
 801265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801265e:	6028      	str	r0, [r5, #0]
 8012660:	6069      	str	r1, [r5, #4]
 8012662:	60aa      	str	r2, [r5, #8]
 8012664:	60eb      	str	r3, [r5, #12]
 8012666:	8823      	ldrh	r3, [r4, #0]
 8012668:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012670:	4a42      	ldr	r2, [pc, #264]	; (801277c <problem_fetch+0x10dec>)
 8012672:	461c      	mov	r4, r3
 8012674:	4613      	mov	r3, r2
 8012676:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012678:	6020      	str	r0, [r4, #0]
 801267a:	6061      	str	r1, [r4, #4]
 801267c:	60a2      	str	r2, [r4, #8]
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	81a3      	strh	r3, [r4, #12]
			break;
 8012682:	f00a b8b5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 495 :
			strcpy(p->name,"VORPAL SWORD");
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801268c:	4a49      	ldr	r2, [pc, #292]	; (80127b4 <problem_fetch+0x10e24>)
 801268e:	461c      	mov	r4, r3
 8012690:	4613      	mov	r3, r2
 8012692:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012694:	6020      	str	r0, [r4, #0]
 8012696:	6061      	str	r1, [r4, #4]
 8012698:	60a2      	str	r2, [r4, #8]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80126a4:	4a3c      	ldr	r2, [pc, #240]	; (8012798 <problem_fetch+0x10e08>)
 80126a6:	6810      	ldr	r0, [r2, #0]
 80126a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2206      	movs	r2, #6
 80126ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,H,H,I");
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	33a4      	adds	r3, #164	; 0xa4
 80126b4:	4a40      	ldr	r2, [pc, #256]	; (80127b8 <problem_fetch+0x10e28>)
 80126b6:	461c      	mov	r4, r3
 80126b8:	4613      	mov	r3, r2
 80126ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126bc:	6020      	str	r0, [r4, #0]
 80126be:	6061      	str	r1, [r4, #4]
 80126c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	3304      	adds	r3, #4
 80126c6:	4a3d      	ldr	r2, [pc, #244]	; (80127bc <problem_fetch+0x10e2c>)
 80126c8:	461c      	mov	r4, r3
 80126ca:	4613      	mov	r3, r2
 80126cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126ce:	6020      	str	r0, [r4, #0]
 80126d0:	6061      	str	r1, [r4, #4]
 80126d2:	60a2      	str	r2, [r4, #8]
 80126d4:	881a      	ldrh	r2, [r3, #0]
 80126d6:	789b      	ldrb	r3, [r3, #2]
 80126d8:	81a2      	strh	r2, [r4, #12]
 80126da:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80126e2:	4a37      	ldr	r2, [pc, #220]	; (80127c0 <problem_fetch+0x10e30>)
 80126e4:	461c      	mov	r4, r3
 80126e6:	4613      	mov	r3, r2
 80126e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126ea:	6020      	str	r0, [r4, #0]
 80126ec:	6061      	str	r1, [r4, #4]
 80126ee:	60a2      	str	r2, [r4, #8]
			break;
 80126f0:	f00a b87e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 496 :
			strcpy(p->name,"INSANE IN THE BRAIN");
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80126fa:	4a32      	ldr	r2, [pc, #200]	; (80127c4 <problem_fetch+0x10e34>)
 80126fc:	461d      	mov	r5, r3
 80126fe:	4614      	mov	r4, r2
 8012700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012702:	6028      	str	r0, [r5, #0]
 8012704:	6069      	str	r1, [r5, #4]
 8012706:	60aa      	str	r2, [r5, #8]
 8012708:	60eb      	str	r3, [r5, #12]
 801270a:	6820      	ldr	r0, [r4, #0]
 801270c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012714:	4a2c      	ldr	r2, [pc, #176]	; (80127c8 <problem_fetch+0x10e38>)
 8012716:	6810      	ldr	r0, [r2, #0]
 8012718:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2207      	movs	r2, #7
 801271e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,B,A,D");
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	33a4      	adds	r3, #164	; 0xa4
 8012724:	4a29      	ldr	r2, [pc, #164]	; (80127cc <problem_fetch+0x10e3c>)
 8012726:	461c      	mov	r4, r3
 8012728:	4613      	mov	r3, r2
 801272a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801272c:	6020      	str	r0, [r4, #0]
 801272e:	6061      	str	r1, [r4, #4]
 8012730:	60a2      	str	r2, [r4, #8]
 8012732:	881b      	ldrh	r3, [r3, #0]
 8012734:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,8,10,14,18");
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	3304      	adds	r3, #4
 801273a:	4a25      	ldr	r2, [pc, #148]	; (80127d0 <problem_fetch+0x10e40>)
 801273c:	461d      	mov	r5, r3
 801273e:	4614      	mov	r4, r2
 8012740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012742:	6028      	str	r0, [r5, #0]
 8012744:	6069      	str	r1, [r5, #4]
 8012746:	60aa      	str	r2, [r5, #8]
 8012748:	60eb      	str	r3, [r5, #12]
 801274a:	8823      	ldrh	r3, [r4, #0]
 801274c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012754:	4a1f      	ldr	r2, [pc, #124]	; (80127d4 <problem_fetch+0x10e44>)
 8012756:	461c      	mov	r4, r3
 8012758:	4613      	mov	r3, r2
 801275a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801275c:	6020      	str	r0, [r4, #0]
 801275e:	6061      	str	r1, [r4, #4]
 8012760:	60a2      	str	r2, [r4, #8]
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	81a3      	strh	r3, [r4, #12]
			break;
 8012766:	f00a b843 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801276a:	bf00      	nop
 801276c:	080299ec 	.word	0x080299ec
 8012770:	08023c5c 	.word	0x08023c5c
 8012774:	080299fc 	.word	0x080299fc
 8012778:	08029a0c 	.word	0x08029a0c
 801277c:	08023d18 	.word	0x08023d18
 8012780:	08029a20 	.word	0x08029a20
 8012784:	08023b50 	.word	0x08023b50
 8012788:	08029a30 	.word	0x08029a30
 801278c:	0802719c 	.word	0x0802719c
 8012790:	08023ce4 	.word	0x08023ce4
 8012794:	08029a38 	.word	0x08029a38
 8012798:	08023d30 	.word	0x08023d30
 801279c:	08029a44 	.word	0x08029a44
 80127a0:	0802731c 	.word	0x0802731c
 80127a4:	0802405c 	.word	0x0802405c
 80127a8:	08029a50 	.word	0x08029a50
 80127ac:	08029a5c 	.word	0x08029a5c
 80127b0:	08029a6c 	.word	0x08029a6c
 80127b4:	08029a80 	.word	0x08029a80
 80127b8:	08029a90 	.word	0x08029a90
 80127bc:	08028ab4 	.word	0x08028ab4
 80127c0:	08023f2c 	.word	0x08023f2c
 80127c4:	08029a9c 	.word	0x08029a9c
 80127c8:	08023b90 	.word	0x08023b90
 80127cc:	08029ab0 	.word	0x08029ab0
 80127d0:	08029ac0 	.word	0x08029ac0
 80127d4:	08023c08 	.word	0x08023c08
		case 497 :
			strcpy(p->name,"MARCUS IS THE PROBLEM");
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80127de:	4ab6      	ldr	r2, [pc, #728]	; (8012ab8 <problem_fetch+0x11128>)
 80127e0:	461d      	mov	r5, r3
 80127e2:	4614      	mov	r4, r2
 80127e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80127e6:	6028      	str	r0, [r5, #0]
 80127e8:	6069      	str	r1, [r5, #4]
 80127ea:	60aa      	str	r2, [r5, #8]
 80127ec:	60eb      	str	r3, [r5, #12]
 80127ee:	6820      	ldr	r0, [r4, #0]
 80127f0:	6128      	str	r0, [r5, #16]
 80127f2:	88a3      	ldrh	r3, [r4, #4]
 80127f4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80127fc:	4aaf      	ldr	r2, [pc, #700]	; (8012abc <problem_fetch+0x1112c>)
 80127fe:	8811      	ldrh	r1, [r2, #0]
 8012800:	7892      	ldrb	r2, [r2, #2]
 8012802:	8019      	strh	r1, [r3, #0]
 8012804:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2208      	movs	r2, #8
 801280a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,E,A,E,D");
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	33a4      	adds	r3, #164	; 0xa4
 8012810:	4aab      	ldr	r2, [pc, #684]	; (8012ac0 <problem_fetch+0x11130>)
 8012812:	461c      	mov	r4, r3
 8012814:	4615      	mov	r5, r2
 8012816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012818:	6020      	str	r0, [r4, #0]
 801281a:	6061      	str	r1, [r4, #4]
 801281c:	60a2      	str	r2, [r4, #8]
 801281e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,12,14,16,18");
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	3304      	adds	r3, #4
 8012824:	4aa7      	ldr	r2, [pc, #668]	; (8012ac4 <problem_fetch+0x11134>)
 8012826:	461d      	mov	r5, r3
 8012828:	4614      	mov	r4, r2
 801282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801282c:	6028      	str	r0, [r5, #0]
 801282e:	6069      	str	r1, [r5, #4]
 8012830:	60aa      	str	r2, [r5, #8]
 8012832:	60eb      	str	r3, [r5, #12]
 8012834:	6820      	ldr	r0, [r4, #0]
 8012836:	6128      	str	r0, [r5, #16]
 8012838:	7923      	ldrb	r3, [r4, #4]
 801283a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012842:	4aa1      	ldr	r2, [pc, #644]	; (8012ac8 <problem_fetch+0x11138>)
 8012844:	461c      	mov	r4, r3
 8012846:	4615      	mov	r5, r2
 8012848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801284a:	6020      	str	r0, [r4, #0]
 801284c:	6061      	str	r1, [r4, #4]
 801284e:	60a2      	str	r2, [r4, #8]
 8012850:	60e3      	str	r3, [r4, #12]
			break;
 8012852:	f009 bfcd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 498 :
			strcpy(p->name,"SACRED COW");
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801285c:	499b      	ldr	r1, [pc, #620]	; (8012acc <problem_fetch+0x1113c>)
 801285e:	461a      	mov	r2, r3
 8012860:	460b      	mov	r3, r1
 8012862:	cb03      	ldmia	r3!, {r0, r1}
 8012864:	6010      	str	r0, [r2, #0]
 8012866:	6051      	str	r1, [r2, #4]
 8012868:	8819      	ldrh	r1, [r3, #0]
 801286a:	789b      	ldrb	r3, [r3, #2]
 801286c:	8111      	strh	r1, [r2, #8]
 801286e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012876:	4a96      	ldr	r2, [pc, #600]	; (8012ad0 <problem_fetch+0x11140>)
 8012878:	8811      	ldrh	r1, [r2, #0]
 801287a:	7892      	ldrb	r2, [r2, #2]
 801287c:	8019      	strh	r1, [r3, #0]
 801287e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	220b      	movs	r2, #11
 8012884:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,C,A,C,H,G,H,I,I");
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	33a4      	adds	r3, #164	; 0xa4
 801288a:	4a92      	ldr	r2, [pc, #584]	; (8012ad4 <problem_fetch+0x11144>)
 801288c:	461d      	mov	r5, r3
 801288e:	4614      	mov	r4, r2
 8012890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012892:	6028      	str	r0, [r5, #0]
 8012894:	6069      	str	r1, [r5, #4]
 8012896:	60aa      	str	r2, [r5, #8]
 8012898:	60eb      	str	r3, [r5, #12]
 801289a:	6820      	ldr	r0, [r4, #0]
 801289c:	6128      	str	r0, [r5, #16]
 801289e:	88a3      	ldrh	r3, [r4, #4]
 80128a0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,14,13,9,8,10,9,8,7,18");
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	3304      	adds	r3, #4
 80128a6:	4a8c      	ldr	r2, [pc, #560]	; (8012ad8 <problem_fetch+0x11148>)
 80128a8:	461d      	mov	r5, r3
 80128aa:	4614      	mov	r4, r2
 80128ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ae:	6028      	str	r0, [r5, #0]
 80128b0:	6069      	str	r1, [r5, #4]
 80128b2:	60aa      	str	r2, [r5, #8]
 80128b4:	60eb      	str	r3, [r5, #12]
 80128b6:	cc03      	ldmia	r4!, {r0, r1}
 80128b8:	6128      	str	r0, [r5, #16]
 80128ba:	6169      	str	r1, [r5, #20]
 80128bc:	8823      	ldrh	r3, [r4, #0]
 80128be:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80128c6:	4a85      	ldr	r2, [pc, #532]	; (8012adc <problem_fetch+0x1114c>)
 80128c8:	461d      	mov	r5, r3
 80128ca:	4614      	mov	r4, r2
 80128cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128ce:	6028      	str	r0, [r5, #0]
 80128d0:	6069      	str	r1, [r5, #4]
 80128d2:	60aa      	str	r2, [r5, #8]
 80128d4:	60eb      	str	r3, [r5, #12]
 80128d6:	6820      	ldr	r0, [r4, #0]
 80128d8:	6128      	str	r0, [r5, #16]
 80128da:	88a3      	ldrh	r3, [r4, #4]
 80128dc:	82ab      	strh	r3, [r5, #20]
			break;
 80128de:	f009 bf87 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 499 :
			strcpy(p->name,"BABA BLACK SHEEP");
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80128e8:	4a7d      	ldr	r2, [pc, #500]	; (8012ae0 <problem_fetch+0x11150>)
 80128ea:	461d      	mov	r5, r3
 80128ec:	4614      	mov	r4, r2
 80128ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128f0:	6028      	str	r0, [r5, #0]
 80128f2:	6069      	str	r1, [r5, #4]
 80128f4:	60aa      	str	r2, [r5, #8]
 80128f6:	60eb      	str	r3, [r5, #12]
 80128f8:	7823      	ldrb	r3, [r4, #0]
 80128fa:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012902:	4a73      	ldr	r2, [pc, #460]	; (8012ad0 <problem_fetch+0x11140>)
 8012904:	8811      	ldrh	r1, [r2, #0]
 8012906:	7892      	ldrb	r2, [r2, #2]
 8012908:	8019      	strh	r1, [r3, #0]
 801290a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	220a      	movs	r2, #10
 8012910:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,I,H,G,H,I,C,I");
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	33a4      	adds	r3, #164	; 0xa4
 8012916:	4a73      	ldr	r2, [pc, #460]	; (8012ae4 <problem_fetch+0x11154>)
 8012918:	461d      	mov	r5, r3
 801291a:	4614      	mov	r4, r2
 801291c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801291e:	6028      	str	r0, [r5, #0]
 8012920:	6069      	str	r1, [r5, #4]
 8012922:	60aa      	str	r2, [r5, #8]
 8012924:	60eb      	str	r3, [r5, #12]
 8012926:	6820      	ldr	r0, [r4, #0]
 8012928:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,4,13,14,10,9,8,7,8,18");
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	3304      	adds	r3, #4
 801292e:	4a6e      	ldr	r2, [pc, #440]	; (8012ae8 <problem_fetch+0x11158>)
 8012930:	461d      	mov	r5, r3
 8012932:	4614      	mov	r4, r2
 8012934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012936:	6028      	str	r0, [r5, #0]
 8012938:	6069      	str	r1, [r5, #4]
 801293a:	60aa      	str	r2, [r5, #8]
 801293c:	60eb      	str	r3, [r5, #12]
 801293e:	cc03      	ldmia	r4!, {r0, r1}
 8012940:	6128      	str	r0, [r5, #16]
 8012942:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801294a:	4a68      	ldr	r2, [pc, #416]	; (8012aec <problem_fetch+0x1115c>)
 801294c:	461d      	mov	r5, r3
 801294e:	4614      	mov	r4, r2
 8012950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012952:	6028      	str	r0, [r5, #0]
 8012954:	6069      	str	r1, [r5, #4]
 8012956:	60aa      	str	r2, [r5, #8]
 8012958:	60eb      	str	r3, [r5, #12]
 801295a:	6820      	ldr	r0, [r4, #0]
 801295c:	6128      	str	r0, [r5, #16]
			break;
 801295e:	f009 bf47 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 500 :
			strcpy(p->name,"BLACK SHEEP");
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012968:	4a61      	ldr	r2, [pc, #388]	; (8012af0 <problem_fetch+0x11160>)
 801296a:	461c      	mov	r4, r3
 801296c:	4613      	mov	r3, r2
 801296e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012970:	6020      	str	r0, [r4, #0]
 8012972:	6061      	str	r1, [r4, #4]
 8012974:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801297c:	4a5d      	ldr	r2, [pc, #372]	; (8012af4 <problem_fetch+0x11164>)
 801297e:	6810      	ldr	r0, [r2, #0]
 8012980:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	2208      	movs	r2, #8
 8012986:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,H,I,C,I");
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	33a4      	adds	r3, #164	; 0xa4
 801298c:	4a5a      	ldr	r2, [pc, #360]	; (8012af8 <problem_fetch+0x11168>)
 801298e:	461c      	mov	r4, r3
 8012990:	4615      	mov	r5, r2
 8012992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012994:	6020      	str	r0, [r4, #0]
 8012996:	6061      	str	r1, [r4, #4]
 8012998:	60a2      	str	r2, [r4, #8]
 801299a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,10,9,8,7,8,18");
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	3304      	adds	r3, #4
 80129a0:	4a56      	ldr	r2, [pc, #344]	; (8012afc <problem_fetch+0x1116c>)
 80129a2:	461d      	mov	r5, r3
 80129a4:	4614      	mov	r4, r2
 80129a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129a8:	6028      	str	r0, [r5, #0]
 80129aa:	6069      	str	r1, [r5, #4]
 80129ac:	60aa      	str	r2, [r5, #8]
 80129ae:	60eb      	str	r3, [r5, #12]
 80129b0:	8823      	ldrh	r3, [r4, #0]
 80129b2:	78a2      	ldrb	r2, [r4, #2]
 80129b4:	822b      	strh	r3, [r5, #16]
 80129b6:	4613      	mov	r3, r2
 80129b8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80129c0:	4a4f      	ldr	r2, [pc, #316]	; (8012b00 <problem_fetch+0x11170>)
 80129c2:	461c      	mov	r4, r3
 80129c4:	4615      	mov	r5, r2
 80129c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80129c8:	6020      	str	r0, [r4, #0]
 80129ca:	6061      	str	r1, [r4, #4]
 80129cc:	60a2      	str	r2, [r4, #8]
 80129ce:	60e3      	str	r3, [r4, #12]
			break;
 80129d0:	f009 bf0e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 501 :
			strcpy(p->name,"TIGELLA OF DREAM");
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80129da:	4a4a      	ldr	r2, [pc, #296]	; (8012b04 <problem_fetch+0x11174>)
 80129dc:	461d      	mov	r5, r3
 80129de:	4614      	mov	r4, r2
 80129e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129e2:	6028      	str	r0, [r5, #0]
 80129e4:	6069      	str	r1, [r5, #4]
 80129e6:	60aa      	str	r2, [r5, #8]
 80129e8:	60eb      	str	r3, [r5, #12]
 80129ea:	7823      	ldrb	r3, [r4, #0]
 80129ec:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80129f4:	4a36      	ldr	r2, [pc, #216]	; (8012ad0 <problem_fetch+0x11140>)
 80129f6:	8811      	ldrh	r1, [r2, #0]
 80129f8:	7892      	ldrb	r2, [r2, #2]
 80129fa:	8019      	strh	r1, [r3, #0]
 80129fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2205      	movs	r2, #5
 8012a02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,F,C,E,D");
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	33a4      	adds	r3, #164	; 0xa4
 8012a08:	493f      	ldr	r1, [pc, #252]	; (8012b08 <problem_fetch+0x11178>)
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	cb03      	ldmia	r3!, {r0, r1}
 8012a10:	6010      	str	r0, [r2, #0]
 8012a12:	6051      	str	r1, [r2, #4]
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,11,13,6,18");
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	3304      	adds	r3, #4
 8012a1c:	4a3b      	ldr	r2, [pc, #236]	; (8012b0c <problem_fetch+0x1117c>)
 8012a1e:	461c      	mov	r4, r3
 8012a20:	4613      	mov	r3, r2
 8012a22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a24:	6020      	str	r0, [r4, #0]
 8012a26:	6061      	str	r1, [r4, #4]
 8012a28:	60a2      	str	r2, [r4, #8]
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012a34:	4936      	ldr	r1, [pc, #216]	; (8012b10 <problem_fetch+0x11180>)
 8012a36:	461a      	mov	r2, r3
 8012a38:	460b      	mov	r3, r1
 8012a3a:	cb03      	ldmia	r3!, {r0, r1}
 8012a3c:	6010      	str	r0, [r2, #0]
 8012a3e:	6051      	str	r1, [r2, #4]
 8012a40:	881b      	ldrh	r3, [r3, #0]
 8012a42:	8113      	strh	r3, [r2, #8]
			break;
 8012a44:	f009 bed4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 502 :
			strcpy(p->name,"AGRO-VATED");
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012a4e:	4931      	ldr	r1, [pc, #196]	; (8012b14 <problem_fetch+0x11184>)
 8012a50:	461a      	mov	r2, r3
 8012a52:	460b      	mov	r3, r1
 8012a54:	cb03      	ldmia	r3!, {r0, r1}
 8012a56:	6010      	str	r0, [r2, #0]
 8012a58:	6051      	str	r1, [r2, #4]
 8012a5a:	8819      	ldrh	r1, [r3, #0]
 8012a5c:	789b      	ldrb	r3, [r3, #2]
 8012a5e:	8111      	strh	r1, [r2, #8]
 8012a60:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a68:	4a2b      	ldr	r2, [pc, #172]	; (8012b18 <problem_fetch+0x11188>)
 8012a6a:	6810      	ldr	r0, [r2, #0]
 8012a6c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2206      	movs	r2, #6
 8012a72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,G,I");
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	33a4      	adds	r3, #164	; 0xa4
 8012a78:	4a28      	ldr	r2, [pc, #160]	; (8012b1c <problem_fetch+0x1118c>)
 8012a7a:	461c      	mov	r4, r3
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a80:	6020      	str	r0, [r4, #0]
 8012a82:	6061      	str	r1, [r4, #4]
 8012a84:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,14,18");
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	3304      	adds	r3, #4
 8012a8a:	4a25      	ldr	r2, [pc, #148]	; (8012b20 <problem_fetch+0x11190>)
 8012a8c:	461c      	mov	r4, r3
 8012a8e:	4613      	mov	r3, r2
 8012a90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a92:	6020      	str	r0, [r4, #0]
 8012a94:	6061      	str	r1, [r4, #4]
 8012a96:	60a2      	str	r2, [r4, #8]
 8012a98:	881a      	ldrh	r2, [r3, #0]
 8012a9a:	789b      	ldrb	r3, [r3, #2]
 8012a9c:	81a2      	strh	r2, [r4, #12]
 8012a9e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012aa6:	4a1f      	ldr	r2, [pc, #124]	; (8012b24 <problem_fetch+0x11194>)
 8012aa8:	461c      	mov	r4, r3
 8012aaa:	4613      	mov	r3, r2
 8012aac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012aae:	6020      	str	r0, [r4, #0]
 8012ab0:	6061      	str	r1, [r4, #4]
 8012ab2:	60a2      	str	r2, [r4, #8]
			break;
 8012ab4:	f009 be9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8012ab8:	08029ad4 	.word	0x08029ad4
 8012abc:	08023c5c 	.word	0x08023c5c
 8012ac0:	08029aec 	.word	0x08029aec
 8012ac4:	08029afc 	.word	0x08029afc
 8012ac8:	08023cb4 	.word	0x08023cb4
 8012acc:	08029b14 	.word	0x08029b14
 8012ad0:	08023b50 	.word	0x08023b50
 8012ad4:	08029b20 	.word	0x08029b20
 8012ad8:	08029b38 	.word	0x08029b38
 8012adc:	080274f0 	.word	0x080274f0
 8012ae0:	08029b54 	.word	0x08029b54
 8012ae4:	08029b68 	.word	0x08029b68
 8012ae8:	08029b7c 	.word	0x08029b7c
 8012aec:	08024438 	.word	0x08024438
 8012af0:	08029b94 	.word	0x08029b94
 8012af4:	08023b90 	.word	0x08023b90
 8012af8:	08029ba0 	.word	0x08029ba0
 8012afc:	08029bb0 	.word	0x08029bb0
 8012b00:	08023da0 	.word	0x08023da0
 8012b04:	08029bc4 	.word	0x08029bc4
 8012b08:	08029bd8 	.word	0x08029bd8
 8012b0c:	08029be4 	.word	0x08029be4
 8012b10:	0802405c 	.word	0x0802405c
 8012b14:	08029bf4 	.word	0x08029bf4
 8012b18:	08023d30 	.word	0x08023d30
 8012b1c:	08029c00 	.word	0x08029c00
 8012b20:	08029c0c 	.word	0x08029c0c
 8012b24:	08023f2c 	.word	0x08023f2c
		case 503 :
			strcpy(p->name,"TONE'S THROW");
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012b2e:	4ab1      	ldr	r2, [pc, #708]	; (8012df4 <problem_fetch+0x11464>)
 8012b30:	461c      	mov	r4, r3
 8012b32:	4613      	mov	r3, r2
 8012b34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b36:	6020      	str	r0, [r4, #0]
 8012b38:	6061      	str	r1, [r4, #4]
 8012b3a:	60a2      	str	r2, [r4, #8]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012b46:	4aac      	ldr	r2, [pc, #688]	; (8012df8 <problem_fetch+0x11468>)
 8012b48:	6810      	ldr	r0, [r2, #0]
 8012b4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2205      	movs	r2, #5
 8012b50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,A,D");
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	33a4      	adds	r3, #164	; 0xa4
 8012b56:	49a9      	ldr	r1, [pc, #676]	; (8012dfc <problem_fetch+0x1146c>)
 8012b58:	461a      	mov	r2, r3
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	cb03      	ldmia	r3!, {r0, r1}
 8012b5e:	6010      	str	r0, [r2, #0]
 8012b60:	6051      	str	r1, [r2, #4]
 8012b62:	881b      	ldrh	r3, [r3, #0]
 8012b64:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	3304      	adds	r3, #4
 8012b6a:	4aa5      	ldr	r2, [pc, #660]	; (8012e00 <problem_fetch+0x11470>)
 8012b6c:	461c      	mov	r4, r3
 8012b6e:	4613      	mov	r3, r2
 8012b70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b72:	6020      	str	r0, [r4, #0]
 8012b74:	6061      	str	r1, [r4, #4]
 8012b76:	60a2      	str	r2, [r4, #8]
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012b82:	49a0      	ldr	r1, [pc, #640]	; (8012e04 <problem_fetch+0x11474>)
 8012b84:	461a      	mov	r2, r3
 8012b86:	460b      	mov	r3, r1
 8012b88:	cb03      	ldmia	r3!, {r0, r1}
 8012b8a:	6010      	str	r0, [r2, #0]
 8012b8c:	6051      	str	r1, [r2, #4]
 8012b8e:	881b      	ldrh	r3, [r3, #0]
 8012b90:	8113      	strh	r3, [r2, #8]
			break;
 8012b92:	f009 be2d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 504 :
			strcpy(p->name,"BLACK PEPPER");
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012b9c:	4a9a      	ldr	r2, [pc, #616]	; (8012e08 <problem_fetch+0x11478>)
 8012b9e:	461c      	mov	r4, r3
 8012ba0:	4613      	mov	r3, r2
 8012ba2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ba4:	6020      	str	r0, [r4, #0]
 8012ba6:	6061      	str	r1, [r4, #4]
 8012ba8:	60a2      	str	r2, [r4, #8]
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012bb4:	4a95      	ldr	r2, [pc, #596]	; (8012e0c <problem_fetch+0x1147c>)
 8012bb6:	8811      	ldrh	r1, [r2, #0]
 8012bb8:	7892      	ldrb	r2, [r2, #2]
 8012bba:	8019      	strh	r1, [r3, #0]
 8012bbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2207      	movs	r2, #7
 8012bc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,C,D,D");
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	33a4      	adds	r3, #164	; 0xa4
 8012bc8:	4a91      	ldr	r2, [pc, #580]	; (8012e10 <problem_fetch+0x11480>)
 8012bca:	461c      	mov	r4, r3
 8012bcc:	4613      	mov	r3, r2
 8012bce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bd0:	6020      	str	r0, [r4, #0]
 8012bd2:	6061      	str	r1, [r4, #4]
 8012bd4:	60a2      	str	r2, [r4, #8]
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,9,13,15,18");
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	3304      	adds	r3, #4
 8012bde:	4a8d      	ldr	r2, [pc, #564]	; (8012e14 <problem_fetch+0x11484>)
 8012be0:	461d      	mov	r5, r3
 8012be2:	4614      	mov	r4, r2
 8012be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012be6:	6028      	str	r0, [r5, #0]
 8012be8:	6069      	str	r1, [r5, #4]
 8012bea:	60aa      	str	r2, [r5, #8]
 8012bec:	60eb      	str	r3, [r5, #12]
 8012bee:	7823      	ldrb	r3, [r4, #0]
 8012bf0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012bf8:	4a87      	ldr	r2, [pc, #540]	; (8012e18 <problem_fetch+0x11488>)
 8012bfa:	461c      	mov	r4, r3
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c00:	6020      	str	r0, [r4, #0]
 8012c02:	6061      	str	r1, [r4, #4]
 8012c04:	60a2      	str	r2, [r4, #8]
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	81a3      	strh	r3, [r4, #12]
			break;
 8012c0a:	f009 bdf1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 505 :
			strcpy(p->name,"GASTON GRADE PLEASE");
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c14:	4a81      	ldr	r2, [pc, #516]	; (8012e1c <problem_fetch+0x1148c>)
 8012c16:	461d      	mov	r5, r3
 8012c18:	4614      	mov	r4, r2
 8012c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c1c:	6028      	str	r0, [r5, #0]
 8012c1e:	6069      	str	r1, [r5, #4]
 8012c20:	60aa      	str	r2, [r5, #8]
 8012c22:	60eb      	str	r3, [r5, #12]
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c2e:	4a72      	ldr	r2, [pc, #456]	; (8012df8 <problem_fetch+0x11468>)
 8012c30:	6810      	ldr	r0, [r2, #0]
 8012c32:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	220b      	movs	r2, #11
 8012c38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,G,F,H,G,I,E,G,D");
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	33a4      	adds	r3, #164	; 0xa4
 8012c3e:	4a78      	ldr	r2, [pc, #480]	; (8012e20 <problem_fetch+0x11490>)
 8012c40:	461d      	mov	r5, r3
 8012c42:	4614      	mov	r4, r2
 8012c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c46:	6028      	str	r0, [r5, #0]
 8012c48:	6069      	str	r1, [r5, #4]
 8012c4a:	60aa      	str	r2, [r5, #8]
 8012c4c:	60eb      	str	r3, [r5, #12]
 8012c4e:	6820      	ldr	r0, [r4, #0]
 8012c50:	6128      	str	r0, [r5, #16]
 8012c52:	88a3      	ldrh	r3, [r4, #4]
 8012c54:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,9,11,12,14,14,16,17,18");
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	3304      	adds	r3, #4
 8012c5a:	4a72      	ldr	r2, [pc, #456]	; (8012e24 <problem_fetch+0x11494>)
 8012c5c:	461d      	mov	r5, r3
 8012c5e:	4614      	mov	r4, r2
 8012c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c62:	6028      	str	r0, [r5, #0]
 8012c64:	6069      	str	r1, [r5, #4]
 8012c66:	60aa      	str	r2, [r5, #8]
 8012c68:	60eb      	str	r3, [r5, #12]
 8012c6a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8012c6c:	6128      	str	r0, [r5, #16]
 8012c6e:	6169      	str	r1, [r5, #20]
 8012c70:	61aa      	str	r2, [r5, #24]
 8012c72:	7823      	ldrb	r3, [r4, #0]
 8012c74:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012c7c:	4a6a      	ldr	r2, [pc, #424]	; (8012e28 <problem_fetch+0x11498>)
 8012c7e:	461d      	mov	r5, r3
 8012c80:	4614      	mov	r4, r2
 8012c82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c84:	6028      	str	r0, [r5, #0]
 8012c86:	6069      	str	r1, [r5, #4]
 8012c88:	60aa      	str	r2, [r5, #8]
 8012c8a:	60eb      	str	r3, [r5, #12]
 8012c8c:	6820      	ldr	r0, [r4, #0]
 8012c8e:	6128      	str	r0, [r5, #16]
 8012c90:	88a3      	ldrh	r3, [r4, #4]
 8012c92:	82ab      	strh	r3, [r5, #20]
			break;
 8012c94:	f009 bdac 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 506 :
			strcpy(p->name,"SALUHALLEN 11");
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c9e:	4a63      	ldr	r2, [pc, #396]	; (8012e2c <problem_fetch+0x1149c>)
 8012ca0:	461c      	mov	r4, r3
 8012ca2:	4613      	mov	r3, r2
 8012ca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ca6:	6020      	str	r0, [r4, #0]
 8012ca8:	6061      	str	r1, [r4, #4]
 8012caa:	60a2      	str	r2, [r4, #8]
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012cb6:	4a5e      	ldr	r2, [pc, #376]	; (8012e30 <problem_fetch+0x114a0>)
 8012cb8:	6810      	ldr	r0, [r2, #0]
 8012cba:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2207      	movs	r2, #7
 8012cc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,G,D");
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	33a4      	adds	r3, #164	; 0xa4
 8012cc6:	4a5b      	ldr	r2, [pc, #364]	; (8012e34 <problem_fetch+0x114a4>)
 8012cc8:	461c      	mov	r4, r3
 8012cca:	4613      	mov	r3, r2
 8012ccc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cce:	6020      	str	r0, [r4, #0]
 8012cd0:	6061      	str	r1, [r4, #4]
 8012cd2:	60a2      	str	r2, [r4, #8]
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,15,18");
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	3304      	adds	r3, #4
 8012cdc:	4a56      	ldr	r2, [pc, #344]	; (8012e38 <problem_fetch+0x114a8>)
 8012cde:	461d      	mov	r5, r3
 8012ce0:	4614      	mov	r4, r2
 8012ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ce4:	6028      	str	r0, [r5, #0]
 8012ce6:	6069      	str	r1, [r5, #4]
 8012ce8:	60aa      	str	r2, [r5, #8]
 8012cea:	60eb      	str	r3, [r5, #12]
 8012cec:	8823      	ldrh	r3, [r4, #0]
 8012cee:	78a2      	ldrb	r2, [r4, #2]
 8012cf0:	822b      	strh	r3, [r5, #16]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012cfc:	4a46      	ldr	r2, [pc, #280]	; (8012e18 <problem_fetch+0x11488>)
 8012cfe:	461c      	mov	r4, r3
 8012d00:	4613      	mov	r3, r2
 8012d02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012d04:	6020      	str	r0, [r4, #0]
 8012d06:	6061      	str	r1, [r4, #4]
 8012d08:	60a2      	str	r2, [r4, #8]
 8012d0a:	881b      	ldrh	r3, [r3, #0]
 8012d0c:	81a3      	strh	r3, [r4, #12]
			break;
 8012d0e:	f009 bd6f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 507 :
			strcpy(p->name,"BULA 3");
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d18:	4a48      	ldr	r2, [pc, #288]	; (8012e3c <problem_fetch+0x114ac>)
 8012d1a:	6810      	ldr	r0, [r2, #0]
 8012d1c:	6018      	str	r0, [r3, #0]
 8012d1e:	8891      	ldrh	r1, [r2, #4]
 8012d20:	7992      	ldrb	r2, [r2, #6]
 8012d22:	8099      	strh	r1, [r3, #4]
 8012d24:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d2c:	4a40      	ldr	r2, [pc, #256]	; (8012e30 <problem_fetch+0x114a0>)
 8012d2e:	6810      	ldr	r0, [r2, #0]
 8012d30:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2207      	movs	r2, #7
 8012d36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,I,E,I");
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	33a4      	adds	r3, #164	; 0xa4
 8012d3c:	4a40      	ldr	r2, [pc, #256]	; (8012e40 <problem_fetch+0x114b0>)
 8012d3e:	461c      	mov	r4, r3
 8012d40:	4613      	mov	r3, r2
 8012d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012d44:	6020      	str	r0, [r4, #0]
 8012d46:	6061      	str	r1, [r4, #4]
 8012d48:	60a2      	str	r2, [r4, #8]
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	3304      	adds	r3, #4
 8012d52:	4a3c      	ldr	r2, [pc, #240]	; (8012e44 <problem_fetch+0x114b4>)
 8012d54:	461d      	mov	r5, r3
 8012d56:	4614      	mov	r4, r2
 8012d58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d5a:	6028      	str	r0, [r5, #0]
 8012d5c:	6069      	str	r1, [r5, #4]
 8012d5e:	60aa      	str	r2, [r5, #8]
 8012d60:	60eb      	str	r3, [r5, #12]
 8012d62:	8823      	ldrh	r3, [r4, #0]
 8012d64:	78a2      	ldrb	r2, [r4, #2]
 8012d66:	822b      	strh	r3, [r5, #16]
 8012d68:	4613      	mov	r3, r2
 8012d6a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012d72:	4a29      	ldr	r2, [pc, #164]	; (8012e18 <problem_fetch+0x11488>)
 8012d74:	461c      	mov	r4, r3
 8012d76:	4613      	mov	r3, r2
 8012d78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012d7a:	6020      	str	r0, [r4, #0]
 8012d7c:	6061      	str	r1, [r4, #4]
 8012d7e:	60a2      	str	r2, [r4, #8]
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	81a3      	strh	r3, [r4, #12]
			break;
 8012d84:	f009 bd34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 508 :
			strcpy(p->name,"CHICKUGA");
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d8e:	492e      	ldr	r1, [pc, #184]	; (8012e48 <problem_fetch+0x114b8>)
 8012d90:	461a      	mov	r2, r3
 8012d92:	460b      	mov	r3, r1
 8012d94:	cb03      	ldmia	r3!, {r0, r1}
 8012d96:	6010      	str	r0, [r2, #0]
 8012d98:	6051      	str	r1, [r2, #4]
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012da4:	4a29      	ldr	r2, [pc, #164]	; (8012e4c <problem_fetch+0x114bc>)
 8012da6:	6810      	ldr	r0, [r2, #0]
 8012da8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2206      	movs	r2, #6
 8012dae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D");
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	33a4      	adds	r3, #164	; 0xa4
 8012db4:	4a26      	ldr	r2, [pc, #152]	; (8012e50 <problem_fetch+0x114c0>)
 8012db6:	461c      	mov	r4, r3
 8012db8:	4613      	mov	r3, r2
 8012dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012dbc:	6020      	str	r0, [r4, #0]
 8012dbe:	6061      	str	r1, [r4, #4]
 8012dc0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,14,18");
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	3304      	adds	r3, #4
 8012dc6:	4a23      	ldr	r2, [pc, #140]	; (8012e54 <problem_fetch+0x114c4>)
 8012dc8:	461c      	mov	r4, r3
 8012dca:	4613      	mov	r3, r2
 8012dcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012dce:	6020      	str	r0, [r4, #0]
 8012dd0:	6061      	str	r1, [r4, #4]
 8012dd2:	60a2      	str	r2, [r4, #8]
 8012dd4:	881a      	ldrh	r2, [r3, #0]
 8012dd6:	789b      	ldrb	r3, [r3, #2]
 8012dd8:	81a2      	strh	r2, [r4, #12]
 8012dda:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012de2:	4a1d      	ldr	r2, [pc, #116]	; (8012e58 <problem_fetch+0x114c8>)
 8012de4:	461c      	mov	r4, r3
 8012de6:	4613      	mov	r3, r2
 8012de8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012dea:	6020      	str	r0, [r4, #0]
 8012dec:	6061      	str	r1, [r4, #4]
 8012dee:	60a2      	str	r2, [r4, #8]
			break;
 8012df0:	f009 bcfe 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8012df4:	08029c1c 	.word	0x08029c1c
 8012df8:	08023c28 	.word	0x08023c28
 8012dfc:	08029c2c 	.word	0x08029c2c
 8012e00:	080241ac 	.word	0x080241ac
 8012e04:	0802405c 	.word	0x0802405c
 8012e08:	08029c38 	.word	0x08029c38
 8012e0c:	08023b50 	.word	0x08023b50
 8012e10:	08029c48 	.word	0x08029c48
 8012e14:	08029c58 	.word	0x08029c58
 8012e18:	08023d18 	.word	0x08023d18
 8012e1c:	08029c6c 	.word	0x08029c6c
 8012e20:	08029c80 	.word	0x08029c80
 8012e24:	08029c98 	.word	0x08029c98
 8012e28:	080274f0 	.word	0x080274f0
 8012e2c:	08029cb8 	.word	0x08029cb8
 8012e30:	08023b90 	.word	0x08023b90
 8012e34:	08029cc8 	.word	0x08029cc8
 8012e38:	08029cd8 	.word	0x08029cd8
 8012e3c:	08029cec 	.word	0x08029cec
 8012e40:	08029cf4 	.word	0x08029cf4
 8012e44:	08029d04 	.word	0x08029d04
 8012e48:	08029d18 	.word	0x08029d18
 8012e4c:	08023ccc 	.word	0x08023ccc
 8012e50:	08029d24 	.word	0x08029d24
 8012e54:	08029d30 	.word	0x08029d30
 8012e58:	08023f2c 	.word	0x08023f2c
		case 509 :
			strcpy(p->name,"MASTERFUL GAP 2.0");
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012e62:	4aa6      	ldr	r2, [pc, #664]	; (80130fc <problem_fetch+0x1176c>)
 8012e64:	461d      	mov	r5, r3
 8012e66:	4614      	mov	r4, r2
 8012e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012e6a:	6028      	str	r0, [r5, #0]
 8012e6c:	6069      	str	r1, [r5, #4]
 8012e6e:	60aa      	str	r2, [r5, #8]
 8012e70:	60eb      	str	r3, [r5, #12]
 8012e72:	8823      	ldrh	r3, [r4, #0]
 8012e74:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012e7c:	4aa0      	ldr	r2, [pc, #640]	; (8013100 <problem_fetch+0x11770>)
 8012e7e:	6810      	ldr	r0, [r2, #0]
 8012e80:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2207      	movs	r2, #7
 8012e86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,E,A,I");
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	33a4      	adds	r3, #164	; 0xa4
 8012e8c:	4a9d      	ldr	r2, [pc, #628]	; (8013104 <problem_fetch+0x11774>)
 8012e8e:	461c      	mov	r4, r3
 8012e90:	4613      	mov	r3, r2
 8012e92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e94:	6020      	str	r0, [r4, #0]
 8012e96:	6061      	str	r1, [r4, #4]
 8012e98:	60a2      	str	r2, [r4, #8]
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,16,14,18");
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	3304      	adds	r3, #4
 8012ea2:	4a99      	ldr	r2, [pc, #612]	; (8013108 <problem_fetch+0x11778>)
 8012ea4:	461d      	mov	r5, r3
 8012ea6:	4614      	mov	r4, r2
 8012ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012eaa:	6028      	str	r0, [r5, #0]
 8012eac:	6069      	str	r1, [r5, #4]
 8012eae:	60aa      	str	r2, [r5, #8]
 8012eb0:	60eb      	str	r3, [r5, #12]
 8012eb2:	8823      	ldrh	r3, [r4, #0]
 8012eb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012ebc:	4a93      	ldr	r2, [pc, #588]	; (801310c <problem_fetch+0x1177c>)
 8012ebe:	461c      	mov	r4, r3
 8012ec0:	4613      	mov	r3, r2
 8012ec2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ec4:	6020      	str	r0, [r4, #0]
 8012ec6:	6061      	str	r1, [r4, #4]
 8012ec8:	60a2      	str	r2, [r4, #8]
 8012eca:	881b      	ldrh	r3, [r3, #0]
 8012ecc:	81a3      	strh	r3, [r4, #12]
			break;
 8012ece:	f009 bc8f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 510 :
			strcpy(p->name,"BLACK DOJO MINI");
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ed8:	4a8d      	ldr	r2, [pc, #564]	; (8013110 <problem_fetch+0x11780>)
 8012eda:	461c      	mov	r4, r3
 8012edc:	4615      	mov	r5, r2
 8012ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ee0:	6020      	str	r0, [r4, #0]
 8012ee2:	6061      	str	r1, [r4, #4]
 8012ee4:	60a2      	str	r2, [r4, #8]
 8012ee6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012eee:	4a89      	ldr	r2, [pc, #548]	; (8013114 <problem_fetch+0x11784>)
 8012ef0:	8811      	ldrh	r1, [r2, #0]
 8012ef2:	7892      	ldrb	r2, [r2, #2]
 8012ef4:	8019      	strh	r1, [r3, #0]
 8012ef6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2206      	movs	r2, #6
 8012efc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,C,E,A");
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	33a4      	adds	r3, #164	; 0xa4
 8012f02:	4a85      	ldr	r2, [pc, #532]	; (8013118 <problem_fetch+0x11788>)
 8012f04:	461c      	mov	r4, r3
 8012f06:	4613      	mov	r3, r2
 8012f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f0a:	6020      	str	r0, [r4, #0]
 8012f0c:	6061      	str	r1, [r4, #4]
 8012f0e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,13,16,18");
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	3304      	adds	r3, #4
 8012f14:	4a81      	ldr	r2, [pc, #516]	; (801311c <problem_fetch+0x1178c>)
 8012f16:	461c      	mov	r4, r3
 8012f18:	4615      	mov	r5, r2
 8012f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f1c:	6020      	str	r0, [r4, #0]
 8012f1e:	6061      	str	r1, [r4, #4]
 8012f20:	60a2      	str	r2, [r4, #8]
 8012f22:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012f2a:	4a7d      	ldr	r2, [pc, #500]	; (8013120 <problem_fetch+0x11790>)
 8012f2c:	461c      	mov	r4, r3
 8012f2e:	4613      	mov	r3, r2
 8012f30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f32:	6020      	str	r0, [r4, #0]
 8012f34:	6061      	str	r1, [r4, #4]
 8012f36:	60a2      	str	r2, [r4, #8]
			break;
 8012f38:	f009 bc5a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 511 :
			strcpy(p->name,"ANACONDA MALT LIQUOR");
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f42:	4a78      	ldr	r2, [pc, #480]	; (8013124 <problem_fetch+0x11794>)
 8012f44:	461d      	mov	r5, r3
 8012f46:	4614      	mov	r4, r2
 8012f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f4a:	6028      	str	r0, [r5, #0]
 8012f4c:	6069      	str	r1, [r5, #4]
 8012f4e:	60aa      	str	r2, [r5, #8]
 8012f50:	60eb      	str	r3, [r5, #12]
 8012f52:	6820      	ldr	r0, [r4, #0]
 8012f54:	6128      	str	r0, [r5, #16]
 8012f56:	7923      	ldrb	r3, [r4, #4]
 8012f58:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f60:	4a71      	ldr	r2, [pc, #452]	; (8013128 <problem_fetch+0x11798>)
 8012f62:	6810      	ldr	r0, [r2, #0]
 8012f64:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2206      	movs	r2, #6
 8012f6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,E,D");
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	33a4      	adds	r3, #164	; 0xa4
 8012f70:	4a6e      	ldr	r2, [pc, #440]	; (801312c <problem_fetch+0x1179c>)
 8012f72:	461c      	mov	r4, r3
 8012f74:	4613      	mov	r3, r2
 8012f76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f78:	6020      	str	r0, [r4, #0]
 8012f7a:	6061      	str	r1, [r4, #4]
 8012f7c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,14,10,16,18");
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	3304      	adds	r3, #4
 8012f82:	4a6b      	ldr	r2, [pc, #428]	; (8013130 <problem_fetch+0x117a0>)
 8012f84:	461c      	mov	r4, r3
 8012f86:	4615      	mov	r5, r2
 8012f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f8a:	6020      	str	r0, [r4, #0]
 8012f8c:	6061      	str	r1, [r4, #4]
 8012f8e:	60a2      	str	r2, [r4, #8]
 8012f90:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012f98:	4a61      	ldr	r2, [pc, #388]	; (8013120 <problem_fetch+0x11790>)
 8012f9a:	461c      	mov	r4, r3
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012fa0:	6020      	str	r0, [r4, #0]
 8012fa2:	6061      	str	r1, [r4, #4]
 8012fa4:	60a2      	str	r2, [r4, #8]
			break;
 8012fa6:	f009 bc23 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 512 :
			strcpy(p->name,"GREAT DANE ZANE");
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012fb0:	4a60      	ldr	r2, [pc, #384]	; (8013134 <problem_fetch+0x117a4>)
 8012fb2:	461c      	mov	r4, r3
 8012fb4:	4615      	mov	r5, r2
 8012fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fb8:	6020      	str	r0, [r4, #0]
 8012fba:	6061      	str	r1, [r4, #4]
 8012fbc:	60a2      	str	r2, [r4, #8]
 8012fbe:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012fc6:	4a5c      	ldr	r2, [pc, #368]	; (8013138 <problem_fetch+0x117a8>)
 8012fc8:	6810      	ldr	r0, [r2, #0]
 8012fca:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	2208      	movs	r2, #8
 8012fd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,F,G,E,B,G,I");
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	33a4      	adds	r3, #164	; 0xa4
 8012fd6:	4a59      	ldr	r2, [pc, #356]	; (801313c <problem_fetch+0x117ac>)
 8012fd8:	461c      	mov	r4, r3
 8012fda:	4615      	mov	r5, r2
 8012fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012fde:	6020      	str	r0, [r4, #0]
 8012fe0:	6061      	str	r1, [r4, #4]
 8012fe2:	60a2      	str	r2, [r4, #8]
 8012fe4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,13,15,9,12,4,18");
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	3304      	adds	r3, #4
 8012fea:	4a55      	ldr	r2, [pc, #340]	; (8013140 <problem_fetch+0x117b0>)
 8012fec:	461d      	mov	r5, r3
 8012fee:	4614      	mov	r4, r2
 8012ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ff2:	6028      	str	r0, [r5, #0]
 8012ff4:	6069      	str	r1, [r5, #4]
 8012ff6:	60aa      	str	r2, [r5, #8]
 8012ff8:	60eb      	str	r3, [r5, #12]
 8012ffa:	6820      	ldr	r0, [r4, #0]
 8012ffc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013004:	4a4f      	ldr	r2, [pc, #316]	; (8013144 <problem_fetch+0x117b4>)
 8013006:	461c      	mov	r4, r3
 8013008:	4615      	mov	r5, r2
 801300a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801300c:	6020      	str	r0, [r4, #0]
 801300e:	6061      	str	r1, [r4, #4]
 8013010:	60a2      	str	r2, [r4, #8]
 8013012:	60e3      	str	r3, [r4, #12]
			break;
 8013014:	f009 bbec 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 513 :
			strcpy(p->name,"BOULDER AND EMIKO");
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801301e:	4a4a      	ldr	r2, [pc, #296]	; (8013148 <problem_fetch+0x117b8>)
 8013020:	461d      	mov	r5, r3
 8013022:	4614      	mov	r4, r2
 8013024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013026:	6028      	str	r0, [r5, #0]
 8013028:	6069      	str	r1, [r5, #4]
 801302a:	60aa      	str	r2, [r5, #8]
 801302c:	60eb      	str	r3, [r5, #12]
 801302e:	8823      	ldrh	r3, [r4, #0]
 8013030:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013038:	4a44      	ldr	r2, [pc, #272]	; (801314c <problem_fetch+0x117bc>)
 801303a:	6810      	ldr	r0, [r2, #0]
 801303c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2208      	movs	r2, #8
 8013042:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,I,E,I");
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	33a4      	adds	r3, #164	; 0xa4
 8013048:	4a41      	ldr	r2, [pc, #260]	; (8013150 <problem_fetch+0x117c0>)
 801304a:	461c      	mov	r4, r3
 801304c:	4615      	mov	r5, r2
 801304e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013050:	6020      	str	r0, [r4, #0]
 8013052:	6061      	str	r1, [r4, #4]
 8013054:	60a2      	str	r2, [r4, #8]
 8013056:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,11,11,14,14,18");
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	3304      	adds	r3, #4
 801305c:	4a3d      	ldr	r2, [pc, #244]	; (8013154 <problem_fetch+0x117c4>)
 801305e:	461d      	mov	r5, r3
 8013060:	4614      	mov	r4, r2
 8013062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013064:	6028      	str	r0, [r5, #0]
 8013066:	6069      	str	r1, [r5, #4]
 8013068:	60aa      	str	r2, [r5, #8]
 801306a:	60eb      	str	r3, [r5, #12]
 801306c:	6820      	ldr	r0, [r4, #0]
 801306e:	6128      	str	r0, [r5, #16]
 8013070:	7923      	ldrb	r3, [r4, #4]
 8013072:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801307a:	4a32      	ldr	r2, [pc, #200]	; (8013144 <problem_fetch+0x117b4>)
 801307c:	461c      	mov	r4, r3
 801307e:	4615      	mov	r5, r2
 8013080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013082:	6020      	str	r0, [r4, #0]
 8013084:	6061      	str	r1, [r4, #4]
 8013086:	60a2      	str	r2, [r4, #8]
 8013088:	60e3      	str	r3, [r4, #12]
			break;
 801308a:	f009 bbb1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 514 :
			strcpy(p->name,"MORNING SHAKE");
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013094:	4a30      	ldr	r2, [pc, #192]	; (8013158 <problem_fetch+0x117c8>)
 8013096:	461c      	mov	r4, r3
 8013098:	4613      	mov	r3, r2
 801309a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801309c:	6020      	str	r0, [r4, #0]
 801309e:	6061      	str	r1, [r4, #4]
 80130a0:	60a2      	str	r2, [r4, #8]
 80130a2:	881b      	ldrh	r3, [r3, #0]
 80130a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80130ac:	4a27      	ldr	r2, [pc, #156]	; (801314c <problem_fetch+0x117bc>)
 80130ae:	6810      	ldr	r0, [r2, #0]
 80130b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2206      	movs	r2, #6
 80130b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,D,D");
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	33a4      	adds	r3, #164	; 0xa4
 80130bc:	4a27      	ldr	r2, [pc, #156]	; (801315c <problem_fetch+0x117cc>)
 80130be:	461c      	mov	r4, r3
 80130c0:	4613      	mov	r3, r2
 80130c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130c4:	6020      	str	r0, [r4, #0]
 80130c6:	6061      	str	r1, [r4, #4]
 80130c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,15,18");
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	3304      	adds	r3, #4
 80130ce:	4a24      	ldr	r2, [pc, #144]	; (8013160 <problem_fetch+0x117d0>)
 80130d0:	461c      	mov	r4, r3
 80130d2:	4613      	mov	r3, r2
 80130d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130d6:	6020      	str	r0, [r4, #0]
 80130d8:	6061      	str	r1, [r4, #4]
 80130da:	60a2      	str	r2, [r4, #8]
 80130dc:	881a      	ldrh	r2, [r3, #0]
 80130de:	789b      	ldrb	r3, [r3, #2]
 80130e0:	81a2      	strh	r2, [r4, #12]
 80130e2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80130ea:	4a1e      	ldr	r2, [pc, #120]	; (8013164 <problem_fetch+0x117d4>)
 80130ec:	461c      	mov	r4, r3
 80130ee:	4613      	mov	r3, r2
 80130f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130f2:	6020      	str	r0, [r4, #0]
 80130f4:	6061      	str	r1, [r4, #4]
 80130f6:	60a2      	str	r2, [r4, #8]
			break;
 80130f8:	f009 bb7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80130fc:	08029d40 	.word	0x08029d40
 8013100:	08023ccc 	.word	0x08023ccc
 8013104:	08029d54 	.word	0x08029d54
 8013108:	08029d64 	.word	0x08029d64
 801310c:	08023c08 	.word	0x08023c08
 8013110:	08029d78 	.word	0x08029d78
 8013114:	08023b50 	.word	0x08023b50
 8013118:	08029d88 	.word	0x08029d88
 801311c:	08029d94 	.word	0x08029d94
 8013120:	08023b70 	.word	0x08023b70
 8013124:	08029da4 	.word	0x08029da4
 8013128:	08023b90 	.word	0x08023b90
 801312c:	08029dbc 	.word	0x08029dbc
 8013130:	08029dc8 	.word	0x08029dc8
 8013134:	08029dd8 	.word	0x08029dd8
 8013138:	08023d30 	.word	0x08023d30
 801313c:	08029de8 	.word	0x08029de8
 8013140:	08029df8 	.word	0x08029df8
 8013144:	08023cb4 	.word	0x08023cb4
 8013148:	08029e0c 	.word	0x08029e0c
 801314c:	08023c28 	.word	0x08023c28
 8013150:	08029e20 	.word	0x08029e20
 8013154:	08029e30 	.word	0x08029e30
 8013158:	08029e48 	.word	0x08029e48
 801315c:	08029e58 	.word	0x08029e58
 8013160:	08029e64 	.word	0x08029e64
 8013164:	08023f2c 	.word	0x08023f2c
		case 515 :
			strcpy(p->name,"YAY POCKETS!");
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801316e:	4aa8      	ldr	r2, [pc, #672]	; (8013410 <problem_fetch+0x11a80>)
 8013170:	461c      	mov	r4, r3
 8013172:	4613      	mov	r3, r2
 8013174:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013176:	6020      	str	r0, [r4, #0]
 8013178:	6061      	str	r1, [r4, #4]
 801317a:	60a2      	str	r2, [r4, #8]
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013186:	4aa3      	ldr	r2, [pc, #652]	; (8013414 <problem_fetch+0x11a84>)
 8013188:	8811      	ldrh	r1, [r2, #0]
 801318a:	7892      	ldrb	r2, [r2, #2]
 801318c:	8019      	strh	r1, [r3, #0]
 801318e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2207      	movs	r2, #7
 8013194:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	33a4      	adds	r3, #164	; 0xa4
 801319a:	4a9f      	ldr	r2, [pc, #636]	; (8013418 <problem_fetch+0x11a88>)
 801319c:	461c      	mov	r4, r3
 801319e:	4613      	mov	r3, r2
 80131a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131a2:	6020      	str	r0, [r4, #0]
 80131a4:	6061      	str	r1, [r4, #4]
 80131a6:	60a2      	str	r2, [r4, #8]
 80131a8:	881b      	ldrh	r3, [r3, #0]
 80131aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,18");
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	3304      	adds	r3, #4
 80131b0:	4a9a      	ldr	r2, [pc, #616]	; (801341c <problem_fetch+0x11a8c>)
 80131b2:	461d      	mov	r5, r3
 80131b4:	4614      	mov	r4, r2
 80131b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80131b8:	6028      	str	r0, [r5, #0]
 80131ba:	6069      	str	r1, [r5, #4]
 80131bc:	60aa      	str	r2, [r5, #8]
 80131be:	60eb      	str	r3, [r5, #12]
 80131c0:	8823      	ldrh	r3, [r4, #0]
 80131c2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80131ca:	4a95      	ldr	r2, [pc, #596]	; (8013420 <problem_fetch+0x11a90>)
 80131cc:	461c      	mov	r4, r3
 80131ce:	4613      	mov	r3, r2
 80131d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131d2:	6020      	str	r0, [r4, #0]
 80131d4:	6061      	str	r1, [r4, #4]
 80131d6:	60a2      	str	r2, [r4, #8]
 80131d8:	881b      	ldrh	r3, [r3, #0]
 80131da:	81a3      	strh	r3, [r4, #12]
			break;
 80131dc:	f009 bb08 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 516 :
			strcpy(p->name,"SEX LANCHEZ");
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80131e6:	4a8f      	ldr	r2, [pc, #572]	; (8013424 <problem_fetch+0x11a94>)
 80131e8:	461c      	mov	r4, r3
 80131ea:	4613      	mov	r3, r2
 80131ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80131ee:	6020      	str	r0, [r4, #0]
 80131f0:	6061      	str	r1, [r4, #4]
 80131f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80131fa:	4a8b      	ldr	r2, [pc, #556]	; (8013428 <problem_fetch+0x11a98>)
 80131fc:	6810      	ldr	r0, [r2, #0]
 80131fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2204      	movs	r2, #4
 8013204:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D");
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	33a4      	adds	r3, #164	; 0xa4
 801320a:	4988      	ldr	r1, [pc, #544]	; (801342c <problem_fetch+0x11a9c>)
 801320c:	461a      	mov	r2, r3
 801320e:	460b      	mov	r3, r1
 8013210:	cb03      	ldmia	r3!, {r0, r1}
 8013212:	6010      	str	r0, [r2, #0]
 8013214:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,8,14,18");
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	3304      	adds	r3, #4
 801321a:	4985      	ldr	r1, [pc, #532]	; (8013430 <problem_fetch+0x11aa0>)
 801321c:	461a      	mov	r2, r3
 801321e:	460b      	mov	r3, r1
 8013220:	cb03      	ldmia	r3!, {r0, r1}
 8013222:	6010      	str	r0, [r2, #0]
 8013224:	6051      	str	r1, [r2, #4]
 8013226:	881b      	ldrh	r3, [r3, #0]
 8013228:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013230:	4980      	ldr	r1, [pc, #512]	; (8013434 <problem_fetch+0x11aa4>)
 8013232:	461a      	mov	r2, r3
 8013234:	460b      	mov	r3, r1
 8013236:	cb03      	ldmia	r3!, {r0, r1}
 8013238:	6010      	str	r0, [r2, #0]
 801323a:	6051      	str	r1, [r2, #4]
			break;
 801323c:	f009 bad8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 517 :
			strcpy(p->name,"BOUNCE EZ");
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013246:	497c      	ldr	r1, [pc, #496]	; (8013438 <problem_fetch+0x11aa8>)
 8013248:	461a      	mov	r2, r3
 801324a:	460b      	mov	r3, r1
 801324c:	cb03      	ldmia	r3!, {r0, r1}
 801324e:	6010      	str	r0, [r2, #0]
 8013250:	6051      	str	r1, [r2, #4]
 8013252:	881b      	ldrh	r3, [r3, #0]
 8013254:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801325c:	4a77      	ldr	r2, [pc, #476]	; (801343c <problem_fetch+0x11aac>)
 801325e:	6810      	ldr	r0, [r2, #0]
 8013260:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2205      	movs	r2, #5
 8013266:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D");
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	33a4      	adds	r3, #164	; 0xa4
 801326c:	4974      	ldr	r1, [pc, #464]	; (8013440 <problem_fetch+0x11ab0>)
 801326e:	461a      	mov	r2, r3
 8013270:	460b      	mov	r3, r1
 8013272:	cb03      	ldmia	r3!, {r0, r1}
 8013274:	6010      	str	r0, [r2, #0]
 8013276:	6051      	str	r1, [r2, #4]
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	3304      	adds	r3, #4
 8013280:	4a70      	ldr	r2, [pc, #448]	; (8013444 <problem_fetch+0x11ab4>)
 8013282:	461c      	mov	r4, r3
 8013284:	4613      	mov	r3, r2
 8013286:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013288:	6020      	str	r0, [r4, #0]
 801328a:	6061      	str	r1, [r4, #4]
 801328c:	60a2      	str	r2, [r4, #8]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013298:	496b      	ldr	r1, [pc, #428]	; (8013448 <problem_fetch+0x11ab8>)
 801329a:	461a      	mov	r2, r3
 801329c:	460b      	mov	r3, r1
 801329e:	cb03      	ldmia	r3!, {r0, r1}
 80132a0:	6010      	str	r0, [r2, #0]
 80132a2:	6051      	str	r1, [r2, #4]
 80132a4:	881b      	ldrh	r3, [r3, #0]
 80132a6:	8113      	strh	r3, [r2, #8]
			break;
 80132a8:	f009 baa2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 518 :
			strcpy(p->name,"WARM UP A6");
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80132b2:	4966      	ldr	r1, [pc, #408]	; (801344c <problem_fetch+0x11abc>)
 80132b4:	461a      	mov	r2, r3
 80132b6:	460b      	mov	r3, r1
 80132b8:	cb03      	ldmia	r3!, {r0, r1}
 80132ba:	6010      	str	r0, [r2, #0]
 80132bc:	6051      	str	r1, [r2, #4]
 80132be:	8819      	ldrh	r1, [r3, #0]
 80132c0:	789b      	ldrb	r3, [r3, #2]
 80132c2:	8111      	strh	r1, [r2, #8]
 80132c4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80132cc:	4a60      	ldr	r2, [pc, #384]	; (8013450 <problem_fetch+0x11ac0>)
 80132ce:	6810      	ldr	r0, [r2, #0]
 80132d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2205      	movs	r2, #5
 80132d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,I");
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	33a4      	adds	r3, #164	; 0xa4
 80132dc:	495d      	ldr	r1, [pc, #372]	; (8013454 <problem_fetch+0x11ac4>)
 80132de:	461a      	mov	r2, r3
 80132e0:	460b      	mov	r3, r1
 80132e2:	cb03      	ldmia	r3!, {r0, r1}
 80132e4:	6010      	str	r0, [r2, #0]
 80132e6:	6051      	str	r1, [r2, #4]
 80132e8:	881b      	ldrh	r3, [r3, #0]
 80132ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,7,10,14,18");
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	3304      	adds	r3, #4
 80132f0:	4a59      	ldr	r2, [pc, #356]	; (8013458 <problem_fetch+0x11ac8>)
 80132f2:	461c      	mov	r4, r3
 80132f4:	4613      	mov	r3, r2
 80132f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80132f8:	6020      	str	r0, [r4, #0]
 80132fa:	6061      	str	r1, [r4, #4]
 80132fc:	60a2      	str	r2, [r4, #8]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013308:	4954      	ldr	r1, [pc, #336]	; (801345c <problem_fetch+0x11acc>)
 801330a:	461a      	mov	r2, r3
 801330c:	460b      	mov	r3, r1
 801330e:	cb03      	ldmia	r3!, {r0, r1}
 8013310:	6010      	str	r0, [r2, #0]
 8013312:	6051      	str	r1, [r2, #4]
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	8113      	strh	r3, [r2, #8]
			break;
 8013318:	f009 ba6a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 519 :
			strcpy(p->name,"L'UOMO BISATTA");
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013322:	4a4f      	ldr	r2, [pc, #316]	; (8013460 <problem_fetch+0x11ad0>)
 8013324:	461c      	mov	r4, r3
 8013326:	4613      	mov	r3, r2
 8013328:	cb07      	ldmia	r3!, {r0, r1, r2}
 801332a:	6020      	str	r0, [r4, #0]
 801332c:	6061      	str	r1, [r4, #4]
 801332e:	60a2      	str	r2, [r4, #8]
 8013330:	881a      	ldrh	r2, [r3, #0]
 8013332:	789b      	ldrb	r3, [r3, #2]
 8013334:	81a2      	strh	r2, [r4, #12]
 8013336:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801333e:	4a49      	ldr	r2, [pc, #292]	; (8013464 <problem_fetch+0x11ad4>)
 8013340:	8811      	ldrh	r1, [r2, #0]
 8013342:	7892      	ldrb	r2, [r2, #2]
 8013344:	8019      	strh	r1, [r3, #0]
 8013346:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2207      	movs	r2, #7
 801334c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,C,H,D");
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	33a4      	adds	r3, #164	; 0xa4
 8013352:	4a45      	ldr	r2, [pc, #276]	; (8013468 <problem_fetch+0x11ad8>)
 8013354:	461c      	mov	r4, r3
 8013356:	4613      	mov	r3, r2
 8013358:	cb07      	ldmia	r3!, {r0, r1, r2}
 801335a:	6020      	str	r0, [r4, #0]
 801335c:	6061      	str	r1, [r4, #4]
 801335e:	60a2      	str	r2, [r4, #8]
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,8,16,18");
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	3304      	adds	r3, #4
 8013368:	4a40      	ldr	r2, [pc, #256]	; (801346c <problem_fetch+0x11adc>)
 801336a:	461d      	mov	r5, r3
 801336c:	4614      	mov	r4, r2
 801336e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013370:	6028      	str	r0, [r5, #0]
 8013372:	6069      	str	r1, [r5, #4]
 8013374:	60aa      	str	r2, [r5, #8]
 8013376:	60eb      	str	r3, [r5, #12]
 8013378:	7823      	ldrb	r3, [r4, #0]
 801337a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013382:	4a27      	ldr	r2, [pc, #156]	; (8013420 <problem_fetch+0x11a90>)
 8013384:	461c      	mov	r4, r3
 8013386:	4613      	mov	r3, r2
 8013388:	cb07      	ldmia	r3!, {r0, r1, r2}
 801338a:	6020      	str	r0, [r4, #0]
 801338c:	6061      	str	r1, [r4, #4]
 801338e:	60a2      	str	r2, [r4, #8]
 8013390:	881b      	ldrh	r3, [r3, #0]
 8013392:	81a3      	strh	r3, [r4, #12]
			break;
 8013394:	f009 ba2c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 520 :
			strcpy(p->name,"PONTUSBADET 2");
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801339e:	4a34      	ldr	r2, [pc, #208]	; (8013470 <problem_fetch+0x11ae0>)
 80133a0:	461c      	mov	r4, r3
 80133a2:	4613      	mov	r3, r2
 80133a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80133a6:	6020      	str	r0, [r4, #0]
 80133a8:	6061      	str	r1, [r4, #4]
 80133aa:	60a2      	str	r2, [r4, #8]
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80133b6:	4a17      	ldr	r2, [pc, #92]	; (8013414 <problem_fetch+0x11a84>)
 80133b8:	8811      	ldrh	r1, [r2, #0]
 80133ba:	7892      	ldrb	r2, [r2, #2]
 80133bc:	8019      	strh	r1, [r3, #0]
 80133be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2208      	movs	r2, #8
 80133c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,C,I,G,G,D");
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	33a4      	adds	r3, #164	; 0xa4
 80133ca:	4a2a      	ldr	r2, [pc, #168]	; (8013474 <problem_fetch+0x11ae4>)
 80133cc:	461c      	mov	r4, r3
 80133ce:	4615      	mov	r5, r2
 80133d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80133d2:	6020      	str	r0, [r4, #0]
 80133d4:	6061      	str	r1, [r4, #4]
 80133d6:	60a2      	str	r2, [r4, #8]
 80133d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,12,13,14,15,17,18");
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	3304      	adds	r3, #4
 80133de:	4a26      	ldr	r2, [pc, #152]	; (8013478 <problem_fetch+0x11ae8>)
 80133e0:	461d      	mov	r5, r3
 80133e2:	4614      	mov	r4, r2
 80133e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80133e6:	6028      	str	r0, [r5, #0]
 80133e8:	6069      	str	r1, [r5, #4]
 80133ea:	60aa      	str	r2, [r5, #8]
 80133ec:	60eb      	str	r3, [r5, #12]
 80133ee:	6820      	ldr	r0, [r4, #0]
 80133f0:	6128      	str	r0, [r5, #16]
 80133f2:	88a3      	ldrh	r3, [r4, #4]
 80133f4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80133fc:	4a1f      	ldr	r2, [pc, #124]	; (801347c <problem_fetch+0x11aec>)
 80133fe:	461c      	mov	r4, r3
 8013400:	4615      	mov	r5, r2
 8013402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013404:	6020      	str	r0, [r4, #0]
 8013406:	6061      	str	r1, [r4, #4]
 8013408:	60a2      	str	r2, [r4, #8]
 801340a:	60e3      	str	r3, [r4, #12]
			break;
 801340c:	f009 b9f0 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8013410:	08029e74 	.word	0x08029e74
 8013414:	08023c5c 	.word	0x08023c5c
 8013418:	08029e84 	.word	0x08029e84
 801341c:	08029e94 	.word	0x08029e94
 8013420:	08023c08 	.word	0x08023c08
 8013424:	08029ea8 	.word	0x08029ea8
 8013428:	0802419c 	.word	0x0802419c
 801342c:	08029eb4 	.word	0x08029eb4
 8013430:	08029ebc 	.word	0x08029ebc
 8013434:	08023ce4 	.word	0x08023ce4
 8013438:	08029ec8 	.word	0x08029ec8
 801343c:	08023c28 	.word	0x08023c28
 8013440:	08029ed4 	.word	0x08029ed4
 8013444:	0802446c 	.word	0x0802446c
 8013448:	08024270 	.word	0x08024270
 801344c:	08029ee0 	.word	0x08029ee0
 8013450:	08023b90 	.word	0x08023b90
 8013454:	08029eec 	.word	0x08029eec
 8013458:	08029ef8 	.word	0x08029ef8
 801345c:	0802405c 	.word	0x0802405c
 8013460:	08029f08 	.word	0x08029f08
 8013464:	08024288 	.word	0x08024288
 8013468:	08029f18 	.word	0x08029f18
 801346c:	08029f28 	.word	0x08029f28
 8013470:	08029f3c 	.word	0x08029f3c
 8013474:	08029f4c 	.word	0x08029f4c
 8013478:	08029f5c 	.word	0x08029f5c
 801347c:	08023da0 	.word	0x08023da0
		case 521 :
			strcpy(p->name,"ROSA PARKS");
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013486:	49c3      	ldr	r1, [pc, #780]	; (8013794 <problem_fetch+0x11e04>)
 8013488:	461a      	mov	r2, r3
 801348a:	460b      	mov	r3, r1
 801348c:	cb03      	ldmia	r3!, {r0, r1}
 801348e:	6010      	str	r0, [r2, #0]
 8013490:	6051      	str	r1, [r2, #4]
 8013492:	8819      	ldrh	r1, [r3, #0]
 8013494:	789b      	ldrb	r3, [r3, #2]
 8013496:	8111      	strh	r1, [r2, #8]
 8013498:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80134a0:	4abd      	ldr	r2, [pc, #756]	; (8013798 <problem_fetch+0x11e08>)
 80134a2:	8811      	ldrh	r1, [r2, #0]
 80134a4:	7892      	ldrb	r2, [r2, #2]
 80134a6:	8019      	strh	r1, [r3, #0]
 80134a8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2207      	movs	r2, #7
 80134ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,D,C,H,G,A");
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	33a4      	adds	r3, #164	; 0xa4
 80134b4:	4ab9      	ldr	r2, [pc, #740]	; (801379c <problem_fetch+0x11e0c>)
 80134b6:	461c      	mov	r4, r3
 80134b8:	4613      	mov	r3, r2
 80134ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80134bc:	6020      	str	r0, [r4, #0]
 80134be:	6061      	str	r1, [r4, #4]
 80134c0:	60a2      	str	r2, [r4, #8]
 80134c2:	881b      	ldrh	r3, [r3, #0]
 80134c4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,15,13,10,9,18");
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	3304      	adds	r3, #4
 80134ca:	4ab5      	ldr	r2, [pc, #724]	; (80137a0 <problem_fetch+0x11e10>)
 80134cc:	461d      	mov	r5, r3
 80134ce:	4614      	mov	r4, r2
 80134d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80134d2:	6028      	str	r0, [r5, #0]
 80134d4:	6069      	str	r1, [r5, #4]
 80134d6:	60aa      	str	r2, [r5, #8]
 80134d8:	60eb      	str	r3, [r5, #12]
 80134da:	8823      	ldrh	r3, [r4, #0]
 80134dc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80134e4:	4aaf      	ldr	r2, [pc, #700]	; (80137a4 <problem_fetch+0x11e14>)
 80134e6:	461c      	mov	r4, r3
 80134e8:	4613      	mov	r3, r2
 80134ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80134ec:	6020      	str	r0, [r4, #0]
 80134ee:	6061      	str	r1, [r4, #4]
 80134f0:	60a2      	str	r2, [r4, #8]
 80134f2:	881b      	ldrh	r3, [r3, #0]
 80134f4:	81a3      	strh	r3, [r4, #12]
			break;
 80134f6:	f009 b97b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 522 :
			strcpy(p->name,"PONTUSBADET");
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013500:	4aa9      	ldr	r2, [pc, #676]	; (80137a8 <problem_fetch+0x11e18>)
 8013502:	461c      	mov	r4, r3
 8013504:	4613      	mov	r3, r2
 8013506:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013508:	6020      	str	r0, [r4, #0]
 801350a:	6061      	str	r1, [r4, #4]
 801350c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013514:	4aa5      	ldr	r2, [pc, #660]	; (80137ac <problem_fetch+0x11e1c>)
 8013516:	8811      	ldrh	r1, [r2, #0]
 8013518:	7892      	ldrb	r2, [r2, #2]
 801351a:	8019      	strh	r1, [r3, #0]
 801351c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2207      	movs	r2, #7
 8013522:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,H,I");
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	33a4      	adds	r3, #164	; 0xa4
 8013528:	4aa1      	ldr	r2, [pc, #644]	; (80137b0 <problem_fetch+0x11e20>)
 801352a:	461c      	mov	r4, r3
 801352c:	4613      	mov	r3, r2
 801352e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013530:	6020      	str	r0, [r4, #0]
 8013532:	6061      	str	r1, [r4, #4]
 8013534:	60a2      	str	r2, [r4, #8]
 8013536:	881b      	ldrh	r3, [r3, #0]
 8013538:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,16,18");
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	3304      	adds	r3, #4
 801353e:	4a9d      	ldr	r2, [pc, #628]	; (80137b4 <problem_fetch+0x11e24>)
 8013540:	461d      	mov	r5, r3
 8013542:	4614      	mov	r4, r2
 8013544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013546:	6028      	str	r0, [r5, #0]
 8013548:	6069      	str	r1, [r5, #4]
 801354a:	60aa      	str	r2, [r5, #8]
 801354c:	60eb      	str	r3, [r5, #12]
 801354e:	8823      	ldrh	r3, [r4, #0]
 8013550:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013558:	4a92      	ldr	r2, [pc, #584]	; (80137a4 <problem_fetch+0x11e14>)
 801355a:	461c      	mov	r4, r3
 801355c:	4613      	mov	r3, r2
 801355e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013560:	6020      	str	r0, [r4, #0]
 8013562:	6061      	str	r1, [r4, #4]
 8013564:	60a2      	str	r2, [r4, #8]
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	81a3      	strh	r3, [r4, #12]
			break;
 801356a:	f009 b941 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 523 :
			strcpy(p->name,"FORSØK 25");
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013574:	4990      	ldr	r1, [pc, #576]	; (80137b8 <problem_fetch+0x11e28>)
 8013576:	461a      	mov	r2, r3
 8013578:	460b      	mov	r3, r1
 801357a:	cb03      	ldmia	r3!, {r0, r1}
 801357c:	6010      	str	r0, [r2, #0]
 801357e:	6051      	str	r1, [r2, #4]
 8013580:	8819      	ldrh	r1, [r3, #0]
 8013582:	789b      	ldrb	r3, [r3, #2]
 8013584:	8111      	strh	r1, [r2, #8]
 8013586:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801358e:	4a8b      	ldr	r2, [pc, #556]	; (80137bc <problem_fetch+0x11e2c>)
 8013590:	6810      	ldr	r0, [r2, #0]
 8013592:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	2208      	movs	r2, #8
 8013598:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,E,H,J");
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	33a4      	adds	r3, #164	; 0xa4
 801359e:	4a88      	ldr	r2, [pc, #544]	; (80137c0 <problem_fetch+0x11e30>)
 80135a0:	461c      	mov	r4, r3
 80135a2:	4615      	mov	r5, r2
 80135a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135a6:	6020      	str	r0, [r4, #0]
 80135a8:	6061      	str	r1, [r4, #4]
 80135aa:	60a2      	str	r2, [r4, #8]
 80135ac:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,5,18,6,8,12,8,5");
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	3304      	adds	r3, #4
 80135b2:	4a84      	ldr	r2, [pc, #528]	; (80137c4 <problem_fetch+0x11e34>)
 80135b4:	461d      	mov	r5, r3
 80135b6:	4614      	mov	r4, r2
 80135b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135ba:	6028      	str	r0, [r5, #0]
 80135bc:	6069      	str	r1, [r5, #4]
 80135be:	60aa      	str	r2, [r5, #8]
 80135c0:	60eb      	str	r3, [r5, #12]
 80135c2:	8823      	ldrh	r3, [r4, #0]
 80135c4:	78a2      	ldrb	r2, [r4, #2]
 80135c6:	822b      	strh	r3, [r5, #16]
 80135c8:	4613      	mov	r3, r2
 80135ca:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,s,e,s,d,d,d,d");
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80135d2:	4a7d      	ldr	r2, [pc, #500]	; (80137c8 <problem_fetch+0x11e38>)
 80135d4:	461c      	mov	r4, r3
 80135d6:	4615      	mov	r5, r2
 80135d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135da:	6020      	str	r0, [r4, #0]
 80135dc:	6061      	str	r1, [r4, #4]
 80135de:	60a2      	str	r2, [r4, #8]
 80135e0:	60e3      	str	r3, [r4, #12]
			break;
 80135e2:	f009 b905 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 524 :
			strcpy(p->name,"S1");
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80135ec:	4a77      	ldr	r2, [pc, #476]	; (80137cc <problem_fetch+0x11e3c>)
 80135ee:	8811      	ldrh	r1, [r2, #0]
 80135f0:	7892      	ldrb	r2, [r2, #2]
 80135f2:	8019      	strh	r1, [r3, #0]
 80135f4:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"7B");
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80135fc:	4a74      	ldr	r2, [pc, #464]	; (80137d0 <problem_fetch+0x11e40>)
 80135fe:	8811      	ldrh	r1, [r2, #0]
 8013600:	7892      	ldrb	r2, [r2, #2]
 8013602:	8019      	strh	r1, [r3, #0]
 8013604:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2207      	movs	r2, #7
 801360a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,D,D,B,A");
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	33a4      	adds	r3, #164	; 0xa4
 8013610:	4a70      	ldr	r2, [pc, #448]	; (80137d4 <problem_fetch+0x11e44>)
 8013612:	461c      	mov	r4, r3
 8013614:	4613      	mov	r3, r2
 8013616:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013618:	6020      	str	r0, [r4, #0]
 801361a:	6061      	str	r1, [r4, #4]
 801361c:	60a2      	str	r2, [r4, #8]
 801361e:	881b      	ldrh	r3, [r3, #0]
 8013620:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,15,6,18");
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	3304      	adds	r3, #4
 8013626:	4a6c      	ldr	r2, [pc, #432]	; (80137d8 <problem_fetch+0x11e48>)
 8013628:	461d      	mov	r5, r3
 801362a:	4614      	mov	r4, r2
 801362c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801362e:	6028      	str	r0, [r5, #0]
 8013630:	6069      	str	r1, [r5, #4]
 8013632:	60aa      	str	r2, [r5, #8]
 8013634:	60eb      	str	r3, [r5, #12]
 8013636:	7823      	ldrb	r3, [r4, #0]
 8013638:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013640:	4a66      	ldr	r2, [pc, #408]	; (80137dc <problem_fetch+0x11e4c>)
 8013642:	461c      	mov	r4, r3
 8013644:	4613      	mov	r3, r2
 8013646:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013648:	6020      	str	r0, [r4, #0]
 801364a:	6061      	str	r1, [r4, #4]
 801364c:	60a2      	str	r2, [r4, #8]
 801364e:	881b      	ldrh	r3, [r3, #0]
 8013650:	81a3      	strh	r3, [r4, #12]
			break;
 8013652:	f009 b8cd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 525 :
			strcpy(p->name,"YE BOI");
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801365c:	4a60      	ldr	r2, [pc, #384]	; (80137e0 <problem_fetch+0x11e50>)
 801365e:	6810      	ldr	r0, [r2, #0]
 8013660:	6018      	str	r0, [r3, #0]
 8013662:	8891      	ldrh	r1, [r2, #4]
 8013664:	7992      	ldrb	r2, [r2, #6]
 8013666:	8099      	strh	r1, [r3, #4]
 8013668:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013670:	4a5c      	ldr	r2, [pc, #368]	; (80137e4 <problem_fetch+0x11e54>)
 8013672:	6810      	ldr	r0, [r2, #0]
 8013674:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2204      	movs	r2, #4
 801367a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	33a4      	adds	r3, #164	; 0xa4
 8013680:	4959      	ldr	r1, [pc, #356]	; (80137e8 <problem_fetch+0x11e58>)
 8013682:	461a      	mov	r2, r3
 8013684:	460b      	mov	r3, r1
 8013686:	cb03      	ldmia	r3!, {r0, r1}
 8013688:	6010      	str	r0, [r2, #0]
 801368a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	3304      	adds	r3, #4
 8013690:	4956      	ldr	r1, [pc, #344]	; (80137ec <problem_fetch+0x11e5c>)
 8013692:	461a      	mov	r2, r3
 8013694:	460b      	mov	r3, r1
 8013696:	cb03      	ldmia	r3!, {r0, r1}
 8013698:	6010      	str	r0, [r2, #0]
 801369a:	6051      	str	r1, [r2, #4]
 801369c:	8819      	ldrh	r1, [r3, #0]
 801369e:	789b      	ldrb	r3, [r3, #2]
 80136a0:	8111      	strh	r1, [r2, #8]
 80136a2:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80136aa:	4951      	ldr	r1, [pc, #324]	; (80137f0 <problem_fetch+0x11e60>)
 80136ac:	461a      	mov	r2, r3
 80136ae:	460b      	mov	r3, r1
 80136b0:	cb03      	ldmia	r3!, {r0, r1}
 80136b2:	6010      	str	r0, [r2, #0]
 80136b4:	6051      	str	r1, [r2, #4]
			break;
 80136b6:	f009 b89b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 526 :
			strcpy(p->name,"PLAYING TINDER");
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80136c0:	4a4c      	ldr	r2, [pc, #304]	; (80137f4 <problem_fetch+0x11e64>)
 80136c2:	461c      	mov	r4, r3
 80136c4:	4613      	mov	r3, r2
 80136c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80136c8:	6020      	str	r0, [r4, #0]
 80136ca:	6061      	str	r1, [r4, #4]
 80136cc:	60a2      	str	r2, [r4, #8]
 80136ce:	881a      	ldrh	r2, [r3, #0]
 80136d0:	789b      	ldrb	r3, [r3, #2]
 80136d2:	81a2      	strh	r2, [r4, #12]
 80136d4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80136dc:	4a46      	ldr	r2, [pc, #280]	; (80137f8 <problem_fetch+0x11e68>)
 80136de:	6810      	ldr	r0, [r2, #0]
 80136e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2205      	movs	r2, #5
 80136e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,B,A");
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	33a4      	adds	r3, #164	; 0xa4
 80136ec:	4943      	ldr	r1, [pc, #268]	; (80137fc <problem_fetch+0x11e6c>)
 80136ee:	461a      	mov	r2, r3
 80136f0:	460b      	mov	r3, r1
 80136f2:	cb03      	ldmia	r3!, {r0, r1}
 80136f4:	6010      	str	r0, [r2, #0]
 80136f6:	6051      	str	r1, [r2, #4]
 80136f8:	881b      	ldrh	r3, [r3, #0]
 80136fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,10,15,18");
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	3304      	adds	r3, #4
 8013700:	4a3f      	ldr	r2, [pc, #252]	; (8013800 <problem_fetch+0x11e70>)
 8013702:	461c      	mov	r4, r3
 8013704:	4613      	mov	r3, r2
 8013706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013708:	6020      	str	r0, [r4, #0]
 801370a:	6061      	str	r1, [r4, #4]
 801370c:	60a2      	str	r2, [r4, #8]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013718:	493a      	ldr	r1, [pc, #232]	; (8013804 <problem_fetch+0x11e74>)
 801371a:	461a      	mov	r2, r3
 801371c:	460b      	mov	r3, r1
 801371e:	cb03      	ldmia	r3!, {r0, r1}
 8013720:	6010      	str	r0, [r2, #0]
 8013722:	6051      	str	r1, [r2, #4]
 8013724:	881b      	ldrh	r3, [r3, #0]
 8013726:	8113      	strh	r3, [r2, #8]
			break;
 8013728:	f009 b862 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 527 :
			strcpy(p->name,"EXIT");
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013732:	4a35      	ldr	r2, [pc, #212]	; (8013808 <problem_fetch+0x11e78>)
 8013734:	6810      	ldr	r0, [r2, #0]
 8013736:	6018      	str	r0, [r3, #0]
 8013738:	7912      	ldrb	r2, [r2, #4]
 801373a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013742:	4a32      	ldr	r2, [pc, #200]	; (801380c <problem_fetch+0x11e7c>)
 8013744:	6810      	ldr	r0, [r2, #0]
 8013746:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	2205      	movs	r2, #5
 801374c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,A,A");
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	33a4      	adds	r3, #164	; 0xa4
 8013752:	492f      	ldr	r1, [pc, #188]	; (8013810 <problem_fetch+0x11e80>)
 8013754:	461a      	mov	r2, r3
 8013756:	460b      	mov	r3, r1
 8013758:	cb03      	ldmia	r3!, {r0, r1}
 801375a:	6010      	str	r0, [r2, #0]
 801375c:	6051      	str	r1, [r2, #4]
 801375e:	881b      	ldrh	r3, [r3, #0]
 8013760:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	3304      	adds	r3, #4
 8013766:	4a2b      	ldr	r2, [pc, #172]	; (8013814 <problem_fetch+0x11e84>)
 8013768:	461c      	mov	r4, r3
 801376a:	4613      	mov	r3, r2
 801376c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801376e:	6020      	str	r0, [r4, #0]
 8013770:	6061      	str	r1, [r4, #4]
 8013772:	60a2      	str	r2, [r4, #8]
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801377e:	4921      	ldr	r1, [pc, #132]	; (8013804 <problem_fetch+0x11e74>)
 8013780:	461a      	mov	r2, r3
 8013782:	460b      	mov	r3, r1
 8013784:	cb03      	ldmia	r3!, {r0, r1}
 8013786:	6010      	str	r0, [r2, #0]
 8013788:	6051      	str	r1, [r2, #4]
 801378a:	881b      	ldrh	r3, [r3, #0]
 801378c:	8113      	strh	r3, [r2, #8]
			break;
 801378e:	f009 b82f 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8013792:	bf00      	nop
 8013794:	08029f74 	.word	0x08029f74
 8013798:	08023c5c 	.word	0x08023c5c
 801379c:	08029f80 	.word	0x08029f80
 80137a0:	08029f90 	.word	0x08029f90
 80137a4:	08023d18 	.word	0x08023d18
 80137a8:	08029fa4 	.word	0x08029fa4
 80137ac:	08023b50 	.word	0x08023b50
 80137b0:	08029fb0 	.word	0x08029fb0
 80137b4:	08029fc0 	.word	0x08029fc0
 80137b8:	08029fd4 	.word	0x08029fd4
 80137bc:	08023b90 	.word	0x08023b90
 80137c0:	08029fe0 	.word	0x08029fe0
 80137c4:	08029ff0 	.word	0x08029ff0
 80137c8:	0802a004 	.word	0x0802a004
 80137cc:	0802a014 	.word	0x0802a014
 80137d0:	08024288 	.word	0x08024288
 80137d4:	0802a018 	.word	0x0802a018
 80137d8:	0802a028 	.word	0x0802a028
 80137dc:	08023c08 	.word	0x08023c08
 80137e0:	0802a03c 	.word	0x0802a03c
 80137e4:	08023c28 	.word	0x08023c28
 80137e8:	08029a30 	.word	0x08029a30
 80137ec:	0802706c 	.word	0x0802706c
 80137f0:	08023ce4 	.word	0x08023ce4
 80137f4:	0802a044 	.word	0x0802a044
 80137f8:	08023ccc 	.word	0x08023ccc
 80137fc:	0802a054 	.word	0x0802a054
 8013800:	0802a060 	.word	0x0802a060
 8013804:	0802405c 	.word	0x0802405c
 8013808:	0802a070 	.word	0x0802a070
 801380c:	08023d30 	.word	0x08023d30
 8013810:	0802a078 	.word	0x0802a078
 8013814:	08027b88 	.word	0x08027b88
		case 528 :
			strcpy(p->name,"AKAHN N LIL CEASY");
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801381e:	4ac1      	ldr	r2, [pc, #772]	; (8013b24 <problem_fetch+0x12194>)
 8013820:	461d      	mov	r5, r3
 8013822:	4614      	mov	r4, r2
 8013824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013826:	6028      	str	r0, [r5, #0]
 8013828:	6069      	str	r1, [r5, #4]
 801382a:	60aa      	str	r2, [r5, #8]
 801382c:	60eb      	str	r3, [r5, #12]
 801382e:	8823      	ldrh	r3, [r4, #0]
 8013830:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013838:	4abb      	ldr	r2, [pc, #748]	; (8013b28 <problem_fetch+0x12198>)
 801383a:	6810      	ldr	r0, [r2, #0]
 801383c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2209      	movs	r2, #9
 8013842:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,E,J,I,E,D");
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	33a4      	adds	r3, #164	; 0xa4
 8013848:	4ab8      	ldr	r2, [pc, #736]	; (8013b2c <problem_fetch+0x1219c>)
 801384a:	461d      	mov	r5, r3
 801384c:	4614      	mov	r4, r2
 801384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013850:	6028      	str	r0, [r5, #0]
 8013852:	6069      	str	r1, [r5, #4]
 8013854:	60aa      	str	r2, [r5, #8]
 8013856:	60eb      	str	r3, [r5, #12]
 8013858:	8823      	ldrh	r3, [r4, #0]
 801385a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,8,11,12,7,14,16,18");
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	3304      	adds	r3, #4
 8013860:	4ab3      	ldr	r2, [pc, #716]	; (8013b30 <problem_fetch+0x121a0>)
 8013862:	461c      	mov	r4, r3
 8013864:	4615      	mov	r5, r2
 8013866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013868:	6020      	str	r0, [r4, #0]
 801386a:	6061      	str	r1, [r4, #4]
 801386c:	60a2      	str	r2, [r4, #8]
 801386e:	60e3      	str	r3, [r4, #12]
 8013870:	6828      	ldr	r0, [r5, #0]
 8013872:	6120      	str	r0, [r4, #16]
 8013874:	88ab      	ldrh	r3, [r5, #4]
 8013876:	79aa      	ldrb	r2, [r5, #6]
 8013878:	82a3      	strh	r3, [r4, #20]
 801387a:	4613      	mov	r3, r2
 801387c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013884:	4aab      	ldr	r2, [pc, #684]	; (8013b34 <problem_fetch+0x121a4>)
 8013886:	461d      	mov	r5, r3
 8013888:	4614      	mov	r4, r2
 801388a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801388c:	6028      	str	r0, [r5, #0]
 801388e:	6069      	str	r1, [r5, #4]
 8013890:	60aa      	str	r2, [r5, #8]
 8013892:	60eb      	str	r3, [r5, #12]
 8013894:	8823      	ldrh	r3, [r4, #0]
 8013896:	822b      	strh	r3, [r5, #16]
			break;
 8013898:	f008 bfaa 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 529 :
			strcpy(p->name,"TECH");
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80138a2:	4aa5      	ldr	r2, [pc, #660]	; (8013b38 <problem_fetch+0x121a8>)
 80138a4:	6810      	ldr	r0, [r2, #0]
 80138a6:	6018      	str	r0, [r3, #0]
 80138a8:	7912      	ldrb	r2, [r2, #4]
 80138aa:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80138b2:	4aa2      	ldr	r2, [pc, #648]	; (8013b3c <problem_fetch+0x121ac>)
 80138b4:	6810      	ldr	r0, [r2, #0]
 80138b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2207      	movs	r2, #7
 80138bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,H,G,I");
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	33a4      	adds	r3, #164	; 0xa4
 80138c2:	4a9f      	ldr	r2, [pc, #636]	; (8013b40 <problem_fetch+0x121b0>)
 80138c4:	461c      	mov	r4, r3
 80138c6:	4613      	mov	r3, r2
 80138c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80138ca:	6020      	str	r0, [r4, #0]
 80138cc:	6061      	str	r1, [r4, #4]
 80138ce:	60a2      	str	r2, [r4, #8]
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,12,15,18");
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	3304      	adds	r3, #4
 80138d8:	4a9a      	ldr	r2, [pc, #616]	; (8013b44 <problem_fetch+0x121b4>)
 80138da:	461d      	mov	r5, r3
 80138dc:	4614      	mov	r4, r2
 80138de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138e0:	6028      	str	r0, [r5, #0]
 80138e2:	6069      	str	r1, [r5, #4]
 80138e4:	60aa      	str	r2, [r5, #8]
 80138e6:	60eb      	str	r3, [r5, #12]
 80138e8:	8823      	ldrh	r3, [r4, #0]
 80138ea:	78a2      	ldrb	r2, [r4, #2]
 80138ec:	822b      	strh	r3, [r5, #16]
 80138ee:	4613      	mov	r3, r2
 80138f0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80138f8:	4a93      	ldr	r2, [pc, #588]	; (8013b48 <problem_fetch+0x121b8>)
 80138fa:	461c      	mov	r4, r3
 80138fc:	4613      	mov	r3, r2
 80138fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013900:	6020      	str	r0, [r4, #0]
 8013902:	6061      	str	r1, [r4, #4]
 8013904:	60a2      	str	r2, [r4, #8]
 8013906:	881b      	ldrh	r3, [r3, #0]
 8013908:	81a3      	strh	r3, [r4, #12]
			break;
 801390a:	f008 bf71 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 530 :
			strcpy(p->name,"FIRST PROB.");
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013914:	4a8d      	ldr	r2, [pc, #564]	; (8013b4c <problem_fetch+0x121bc>)
 8013916:	461c      	mov	r4, r3
 8013918:	4613      	mov	r3, r2
 801391a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801391c:	6020      	str	r0, [r4, #0]
 801391e:	6061      	str	r1, [r4, #4]
 8013920:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013928:	4a7f      	ldr	r2, [pc, #508]	; (8013b28 <problem_fetch+0x12198>)
 801392a:	6810      	ldr	r0, [r2, #0]
 801392c:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	220d      	movs	r2, #13
 8013932:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,E,G,G,D,C,A,D,C,E,A");
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	33a4      	adds	r3, #164	; 0xa4
 8013938:	4a85      	ldr	r2, [pc, #532]	; (8013b50 <problem_fetch+0x121c0>)
 801393a:	461d      	mov	r5, r3
 801393c:	4614      	mov	r4, r2
 801393e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013940:	6028      	str	r0, [r5, #0]
 8013942:	6069      	str	r1, [r5, #4]
 8013944:	60aa      	str	r2, [r5, #8]
 8013946:	60eb      	str	r3, [r5, #12]
 8013948:	cc03      	ldmia	r4!, {r0, r1}
 801394a:	6128      	str	r0, [r5, #16]
 801394c:	6169      	str	r1, [r5, #20]
 801394e:	8823      	ldrh	r3, [r4, #0]
 8013950:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,9,10,11,16,14,15,13,12,18");
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	3304      	adds	r3, #4
 8013956:	4a7f      	ldr	r2, [pc, #508]	; (8013b54 <problem_fetch+0x121c4>)
 8013958:	4614      	mov	r4, r2
 801395a:	469c      	mov	ip, r3
 801395c:	f104 0e20 	add.w	lr, r4, #32
 8013960:	4665      	mov	r5, ip
 8013962:	4626      	mov	r6, r4
 8013964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013966:	6028      	str	r0, [r5, #0]
 8013968:	6069      	str	r1, [r5, #4]
 801396a:	60aa      	str	r2, [r5, #8]
 801396c:	60eb      	str	r3, [r5, #12]
 801396e:	3410      	adds	r4, #16
 8013970:	f10c 0c10 	add.w	ip, ip, #16
 8013974:	4574      	cmp	r4, lr
 8013976:	d1f3      	bne.n	8013960 <problem_fetch+0x11fd0>
 8013978:	4662      	mov	r2, ip
 801397a:	4623      	mov	r3, r4
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013986:	4a74      	ldr	r2, [pc, #464]	; (8013b58 <problem_fetch+0x121c8>)
 8013988:	461d      	mov	r5, r3
 801398a:	4614      	mov	r4, r2
 801398c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801398e:	6028      	str	r0, [r5, #0]
 8013990:	6069      	str	r1, [r5, #4]
 8013992:	60aa      	str	r2, [r5, #8]
 8013994:	60eb      	str	r3, [r5, #12]
 8013996:	cc03      	ldmia	r4!, {r0, r1}
 8013998:	6128      	str	r0, [r5, #16]
 801399a:	6169      	str	r1, [r5, #20]
 801399c:	8823      	ldrh	r3, [r4, #0]
 801399e:	832b      	strh	r3, [r5, #24]
			break;
 80139a0:	f008 bf26 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 531 :
			strcpy(p->name,"NEW PROB");
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80139aa:	496c      	ldr	r1, [pc, #432]	; (8013b5c <problem_fetch+0x121cc>)
 80139ac:	461a      	mov	r2, r3
 80139ae:	460b      	mov	r3, r1
 80139b0:	cb03      	ldmia	r3!, {r0, r1}
 80139b2:	6010      	str	r0, [r2, #0]
 80139b4:	6051      	str	r1, [r2, #4]
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80139c0:	4a59      	ldr	r2, [pc, #356]	; (8013b28 <problem_fetch+0x12198>)
 80139c2:	6810      	ldr	r0, [r2, #0]
 80139c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	220d      	movs	r2, #13
 80139ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,A,B,C,B,A,D,C,E,D,A");
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	33a4      	adds	r3, #164	; 0xa4
 80139d0:	4a63      	ldr	r2, [pc, #396]	; (8013b60 <problem_fetch+0x121d0>)
 80139d2:	461d      	mov	r5, r3
 80139d4:	4614      	mov	r4, r2
 80139d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139d8:	6028      	str	r0, [r5, #0]
 80139da:	6069      	str	r1, [r5, #4]
 80139dc:	60aa      	str	r2, [r5, #8]
 80139de:	60eb      	str	r3, [r5, #12]
 80139e0:	cc03      	ldmia	r4!, {r0, r1}
 80139e2:	6128      	str	r0, [r5, #16]
 80139e4:	6169      	str	r1, [r5, #20]
 80139e6:	8823      	ldrh	r3, [r4, #0]
 80139e8:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,16,14,15,13,10,9,7,8,8,11,18");
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	3304      	adds	r3, #4
 80139ee:	4a5d      	ldr	r2, [pc, #372]	; (8013b64 <problem_fetch+0x121d4>)
 80139f0:	4614      	mov	r4, r2
 80139f2:	469c      	mov	ip, r3
 80139f4:	f104 0e20 	add.w	lr, r4, #32
 80139f8:	4665      	mov	r5, ip
 80139fa:	4626      	mov	r6, r4
 80139fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80139fe:	6028      	str	r0, [r5, #0]
 8013a00:	6069      	str	r1, [r5, #4]
 8013a02:	60aa      	str	r2, [r5, #8]
 8013a04:	60eb      	str	r3, [r5, #12]
 8013a06:	3410      	adds	r4, #16
 8013a08:	f10c 0c10 	add.w	ip, ip, #16
 8013a0c:	4574      	cmp	r4, lr
 8013a0e:	d1f3      	bne.n	80139f8 <problem_fetch+0x12068>
 8013a10:	4663      	mov	r3, ip
 8013a12:	4622      	mov	r2, r4
 8013a14:	7812      	ldrb	r2, [r2, #0]
 8013a16:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013a1e:	4a4e      	ldr	r2, [pc, #312]	; (8013b58 <problem_fetch+0x121c8>)
 8013a20:	461d      	mov	r5, r3
 8013a22:	4614      	mov	r4, r2
 8013a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a26:	6028      	str	r0, [r5, #0]
 8013a28:	6069      	str	r1, [r5, #4]
 8013a2a:	60aa      	str	r2, [r5, #8]
 8013a2c:	60eb      	str	r3, [r5, #12]
 8013a2e:	cc03      	ldmia	r4!, {r0, r1}
 8013a30:	6128      	str	r0, [r5, #16]
 8013a32:	6169      	str	r1, [r5, #20]
 8013a34:	8823      	ldrh	r3, [r4, #0]
 8013a36:	832b      	strh	r3, [r5, #24]
			break;
 8013a38:	f008 beda 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 532 :
			strcpy(p->name,"BLACK HEART");
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013a42:	4a49      	ldr	r2, [pc, #292]	; (8013b68 <problem_fetch+0x121d8>)
 8013a44:	461c      	mov	r4, r3
 8013a46:	4613      	mov	r3, r2
 8013a48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a4a:	6020      	str	r0, [r4, #0]
 8013a4c:	6061      	str	r1, [r4, #4]
 8013a4e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013a56:	4a45      	ldr	r2, [pc, #276]	; (8013b6c <problem_fetch+0x121dc>)
 8013a58:	6810      	ldr	r0, [r2, #0]
 8013a5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2205      	movs	r2, #5
 8013a60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,I");
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	33a4      	adds	r3, #164	; 0xa4
 8013a66:	4942      	ldr	r1, [pc, #264]	; (8013b70 <problem_fetch+0x121e0>)
 8013a68:	461a      	mov	r2, r3
 8013a6a:	460b      	mov	r3, r1
 8013a6c:	cb03      	ldmia	r3!, {r0, r1}
 8013a6e:	6010      	str	r0, [r2, #0]
 8013a70:	6051      	str	r1, [r2, #4]
 8013a72:	881b      	ldrh	r3, [r3, #0]
 8013a74:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	3304      	adds	r3, #4
 8013a7a:	4a3e      	ldr	r2, [pc, #248]	; (8013b74 <problem_fetch+0x121e4>)
 8013a7c:	461c      	mov	r4, r3
 8013a7e:	4613      	mov	r3, r2
 8013a80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a82:	6020      	str	r0, [r4, #0]
 8013a84:	6061      	str	r1, [r4, #4]
 8013a86:	60a2      	str	r2, [r4, #8]
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013a92:	4939      	ldr	r1, [pc, #228]	; (8013b78 <problem_fetch+0x121e8>)
 8013a94:	461a      	mov	r2, r3
 8013a96:	460b      	mov	r3, r1
 8013a98:	cb03      	ldmia	r3!, {r0, r1}
 8013a9a:	6010      	str	r0, [r2, #0]
 8013a9c:	6051      	str	r1, [r2, #4]
 8013a9e:	881b      	ldrh	r3, [r3, #0]
 8013aa0:	8113      	strh	r3, [r2, #8]
			break;
 8013aa2:	f008 bea5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 533 :
			strcpy(p->name,"MONOTHEISM");
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013aac:	4933      	ldr	r1, [pc, #204]	; (8013b7c <problem_fetch+0x121ec>)
 8013aae:	461a      	mov	r2, r3
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	cb03      	ldmia	r3!, {r0, r1}
 8013ab4:	6010      	str	r0, [r2, #0]
 8013ab6:	6051      	str	r1, [r2, #4]
 8013ab8:	8819      	ldrh	r1, [r3, #0]
 8013aba:	789b      	ldrb	r3, [r3, #2]
 8013abc:	8111      	strh	r1, [r2, #8]
 8013abe:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ac6:	4a1d      	ldr	r2, [pc, #116]	; (8013b3c <problem_fetch+0x121ac>)
 8013ac8:	6810      	ldr	r0, [r2, #0]
 8013aca:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2209      	movs	r2, #9
 8013ad0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,C,C,I,D,A");
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	33a4      	adds	r3, #164	; 0xa4
 8013ad6:	4a2a      	ldr	r2, [pc, #168]	; (8013b80 <problem_fetch+0x121f0>)
 8013ad8:	461d      	mov	r5, r3
 8013ada:	4614      	mov	r4, r2
 8013adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ade:	6028      	str	r0, [r5, #0]
 8013ae0:	6069      	str	r1, [r5, #4]
 8013ae2:	60aa      	str	r2, [r5, #8]
 8013ae4:	60eb      	str	r3, [r5, #12]
 8013ae6:	8823      	ldrh	r3, [r4, #0]
 8013ae8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,13,16,14,11,18");
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	3304      	adds	r3, #4
 8013aee:	4a25      	ldr	r2, [pc, #148]	; (8013b84 <problem_fetch+0x121f4>)
 8013af0:	461d      	mov	r5, r3
 8013af2:	4614      	mov	r4, r2
 8013af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013af6:	6028      	str	r0, [r5, #0]
 8013af8:	6069      	str	r1, [r5, #4]
 8013afa:	60aa      	str	r2, [r5, #8]
 8013afc:	60eb      	str	r3, [r5, #12]
 8013afe:	cc03      	ldmia	r4!, {r0, r1}
 8013b00:	6128      	str	r0, [r5, #16]
 8013b02:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013b0a:	4a1f      	ldr	r2, [pc, #124]	; (8013b88 <problem_fetch+0x121f8>)
 8013b0c:	461d      	mov	r5, r3
 8013b0e:	4614      	mov	r4, r2
 8013b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b12:	6028      	str	r0, [r5, #0]
 8013b14:	6069      	str	r1, [r5, #4]
 8013b16:	60aa      	str	r2, [r5, #8]
 8013b18:	60eb      	str	r3, [r5, #12]
 8013b1a:	8823      	ldrh	r3, [r4, #0]
 8013b1c:	822b      	strh	r3, [r5, #16]
			break;
 8013b1e:	f008 be67 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8013b22:	bf00      	nop
 8013b24:	0802a084 	.word	0x0802a084
 8013b28:	08023b90 	.word	0x08023b90
 8013b2c:	0802a098 	.word	0x0802a098
 8013b30:	0802a0ac 	.word	0x0802a0ac
 8013b34:	08025a48 	.word	0x08025a48
 8013b38:	0802a0c4 	.word	0x0802a0c4
 8013b3c:	08023d30 	.word	0x08023d30
 8013b40:	0802a0cc 	.word	0x0802a0cc
 8013b44:	0802a0dc 	.word	0x0802a0dc
 8013b48:	08023d18 	.word	0x08023d18
 8013b4c:	0802a0f0 	.word	0x0802a0f0
 8013b50:	0802a0fc 	.word	0x0802a0fc
 8013b54:	0802a118 	.word	0x0802a118
 8013b58:	08028690 	.word	0x08028690
 8013b5c:	0802a13c 	.word	0x0802a13c
 8013b60:	0802a148 	.word	0x0802a148
 8013b64:	0802a164 	.word	0x0802a164
 8013b68:	0802a188 	.word	0x0802a188
 8013b6c:	08023c28 	.word	0x08023c28
 8013b70:	0802a194 	.word	0x0802a194
 8013b74:	0802a1a0 	.word	0x0802a1a0
 8013b78:	0802405c 	.word	0x0802405c
 8013b7c:	0802a1b0 	.word	0x0802a1b0
 8013b80:	0802a1bc 	.word	0x0802a1bc
 8013b84:	0802a1d0 	.word	0x0802a1d0
 8013b88:	08024b74 	.word	0x08024b74
		case 534 :
			strcpy(p->name,"GIVE ME SOMETHING BETTER");
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013b92:	4aae      	ldr	r2, [pc, #696]	; (8013e4c <problem_fetch+0x124bc>)
 8013b94:	461d      	mov	r5, r3
 8013b96:	4614      	mov	r4, r2
 8013b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b9a:	6028      	str	r0, [r5, #0]
 8013b9c:	6069      	str	r1, [r5, #4]
 8013b9e:	60aa      	str	r2, [r5, #8]
 8013ba0:	60eb      	str	r3, [r5, #12]
 8013ba2:	cc03      	ldmia	r4!, {r0, r1}
 8013ba4:	6128      	str	r0, [r5, #16]
 8013ba6:	6169      	str	r1, [r5, #20]
 8013ba8:	7823      	ldrb	r3, [r4, #0]
 8013baa:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013bb2:	4aa7      	ldr	r2, [pc, #668]	; (8013e50 <problem_fetch+0x124c0>)
 8013bb4:	6810      	ldr	r0, [r2, #0]
 8013bb6:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2209      	movs	r2, #9
 8013bbc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,I,C,D,B,A");
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	33a4      	adds	r3, #164	; 0xa4
 8013bc2:	4aa4      	ldr	r2, [pc, #656]	; (8013e54 <problem_fetch+0x124c4>)
 8013bc4:	461d      	mov	r5, r3
 8013bc6:	4614      	mov	r4, r2
 8013bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bca:	6028      	str	r0, [r5, #0]
 8013bcc:	6069      	str	r1, [r5, #4]
 8013bce:	60aa      	str	r2, [r5, #8]
 8013bd0:	60eb      	str	r3, [r5, #12]
 8013bd2:	8823      	ldrh	r3, [r4, #0]
 8013bd4:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,14,13,15,12,18");
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	3304      	adds	r3, #4
 8013bda:	4a9f      	ldr	r2, [pc, #636]	; (8013e58 <problem_fetch+0x124c8>)
 8013bdc:	461d      	mov	r5, r3
 8013bde:	4614      	mov	r4, r2
 8013be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013be2:	6028      	str	r0, [r5, #0]
 8013be4:	6069      	str	r1, [r5, #4]
 8013be6:	60aa      	str	r2, [r5, #8]
 8013be8:	60eb      	str	r3, [r5, #12]
 8013bea:	cc03      	ldmia	r4!, {r0, r1}
 8013bec:	6128      	str	r0, [r5, #16]
 8013bee:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013bf6:	4a99      	ldr	r2, [pc, #612]	; (8013e5c <problem_fetch+0x124cc>)
 8013bf8:	461d      	mov	r5, r3
 8013bfa:	4614      	mov	r4, r2
 8013bfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013bfe:	6028      	str	r0, [r5, #0]
 8013c00:	6069      	str	r1, [r5, #4]
 8013c02:	60aa      	str	r2, [r5, #8]
 8013c04:	60eb      	str	r3, [r5, #12]
 8013c06:	8823      	ldrh	r3, [r4, #0]
 8013c08:	822b      	strh	r3, [r5, #16]
			break;
 8013c0a:	f008 bdf1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 535 :
			strcpy(p->name,"POOP TWISTER");
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c14:	4a92      	ldr	r2, [pc, #584]	; (8013e60 <problem_fetch+0x124d0>)
 8013c16:	461c      	mov	r4, r3
 8013c18:	4613      	mov	r3, r2
 8013c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c1c:	6020      	str	r0, [r4, #0]
 8013c1e:	6061      	str	r1, [r4, #4]
 8013c20:	60a2      	str	r2, [r4, #8]
 8013c22:	781b      	ldrb	r3, [r3, #0]
 8013c24:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c2c:	4a8d      	ldr	r2, [pc, #564]	; (8013e64 <problem_fetch+0x124d4>)
 8013c2e:	8811      	ldrh	r1, [r2, #0]
 8013c30:	7892      	ldrb	r2, [r2, #2]
 8013c32:	8019      	strh	r1, [r3, #0]
 8013c34:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2207      	movs	r2, #7
 8013c3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,D,G,E,I");
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	33a4      	adds	r3, #164	; 0xa4
 8013c40:	4a89      	ldr	r2, [pc, #548]	; (8013e68 <problem_fetch+0x124d8>)
 8013c42:	461c      	mov	r4, r3
 8013c44:	4613      	mov	r3, r2
 8013c46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c48:	6020      	str	r0, [r4, #0]
 8013c4a:	6061      	str	r1, [r4, #4]
 8013c4c:	60a2      	str	r2, [r4, #8]
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	3304      	adds	r3, #4
 8013c56:	4a85      	ldr	r2, [pc, #532]	; (8013e6c <problem_fetch+0x124dc>)
 8013c58:	461d      	mov	r5, r3
 8013c5a:	4614      	mov	r4, r2
 8013c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c5e:	6028      	str	r0, [r5, #0]
 8013c60:	6069      	str	r1, [r5, #4]
 8013c62:	60aa      	str	r2, [r5, #8]
 8013c64:	60eb      	str	r3, [r5, #12]
 8013c66:	8823      	ldrh	r3, [r4, #0]
 8013c68:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013c70:	4a7f      	ldr	r2, [pc, #508]	; (8013e70 <problem_fetch+0x124e0>)
 8013c72:	461c      	mov	r4, r3
 8013c74:	4613      	mov	r3, r2
 8013c76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c78:	6020      	str	r0, [r4, #0]
 8013c7a:	6061      	str	r1, [r4, #4]
 8013c7c:	60a2      	str	r2, [r4, #8]
 8013c7e:	881b      	ldrh	r3, [r3, #0]
 8013c80:	81a3      	strh	r3, [r4, #12]
			break;
 8013c82:	f008 bdb5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 536 :
			strcpy(p->name,"TAMOA NARASAKI BOMB");
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c8c:	4a79      	ldr	r2, [pc, #484]	; (8013e74 <problem_fetch+0x124e4>)
 8013c8e:	461d      	mov	r5, r3
 8013c90:	4614      	mov	r4, r2
 8013c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c94:	6028      	str	r0, [r5, #0]
 8013c96:	6069      	str	r1, [r5, #4]
 8013c98:	60aa      	str	r2, [r5, #8]
 8013c9a:	60eb      	str	r3, [r5, #12]
 8013c9c:	6820      	ldr	r0, [r4, #0]
 8013c9e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ca6:	4a74      	ldr	r2, [pc, #464]	; (8013e78 <problem_fetch+0x124e8>)
 8013ca8:	6810      	ldr	r0, [r2, #0]
 8013caa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2207      	movs	r2, #7
 8013cb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,E,C,A");
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	33a4      	adds	r3, #164	; 0xa4
 8013cb6:	4a71      	ldr	r2, [pc, #452]	; (8013e7c <problem_fetch+0x124ec>)
 8013cb8:	461c      	mov	r4, r3
 8013cba:	4613      	mov	r3, r2
 8013cbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013cbe:	6020      	str	r0, [r4, #0]
 8013cc0:	6061      	str	r1, [r4, #4]
 8013cc2:	60a2      	str	r2, [r4, #8]
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,9,16,13,18");
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	3304      	adds	r3, #4
 8013ccc:	4a6c      	ldr	r2, [pc, #432]	; (8013e80 <problem_fetch+0x124f0>)
 8013cce:	461d      	mov	r5, r3
 8013cd0:	4614      	mov	r4, r2
 8013cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cd4:	6028      	str	r0, [r5, #0]
 8013cd6:	6069      	str	r1, [r5, #4]
 8013cd8:	60aa      	str	r2, [r5, #8]
 8013cda:	60eb      	str	r3, [r5, #12]
 8013cdc:	7823      	ldrb	r3, [r4, #0]
 8013cde:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013ce6:	4a67      	ldr	r2, [pc, #412]	; (8013e84 <problem_fetch+0x124f4>)
 8013ce8:	461c      	mov	r4, r3
 8013cea:	4613      	mov	r3, r2
 8013cec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013cee:	6020      	str	r0, [r4, #0]
 8013cf0:	6061      	str	r1, [r4, #4]
 8013cf2:	60a2      	str	r2, [r4, #8]
 8013cf4:	881b      	ldrh	r3, [r3, #0]
 8013cf6:	81a3      	strh	r3, [r4, #12]
			break;
 8013cf8:	f008 bd7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 537 :
			strcpy(p->name,"ON BLACK");
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013d02:	4961      	ldr	r1, [pc, #388]	; (8013e88 <problem_fetch+0x124f8>)
 8013d04:	461a      	mov	r2, r3
 8013d06:	460b      	mov	r3, r1
 8013d08:	cb03      	ldmia	r3!, {r0, r1}
 8013d0a:	6010      	str	r0, [r2, #0]
 8013d0c:	6051      	str	r1, [r2, #4]
 8013d0e:	781b      	ldrb	r3, [r3, #0]
 8013d10:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d18:	4a5c      	ldr	r2, [pc, #368]	; (8013e8c <problem_fetch+0x124fc>)
 8013d1a:	6810      	ldr	r0, [r2, #0]
 8013d1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2206      	movs	r2, #6
 8013d22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,A");
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	33a4      	adds	r3, #164	; 0xa4
 8013d28:	4a59      	ldr	r2, [pc, #356]	; (8013e90 <problem_fetch+0x12500>)
 8013d2a:	461c      	mov	r4, r3
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d30:	6020      	str	r0, [r4, #0]
 8013d32:	6061      	str	r1, [r4, #4]
 8013d34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	3304      	adds	r3, #4
 8013d3a:	4a56      	ldr	r2, [pc, #344]	; (8013e94 <problem_fetch+0x12504>)
 8013d3c:	461c      	mov	r4, r3
 8013d3e:	4615      	mov	r5, r2
 8013d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d42:	6020      	str	r0, [r4, #0]
 8013d44:	6061      	str	r1, [r4, #4]
 8013d46:	60a2      	str	r2, [r4, #8]
 8013d48:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013d50:	4a51      	ldr	r2, [pc, #324]	; (8013e98 <problem_fetch+0x12508>)
 8013d52:	461c      	mov	r4, r3
 8013d54:	4613      	mov	r3, r2
 8013d56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d58:	6020      	str	r0, [r4, #0]
 8013d5a:	6061      	str	r1, [r4, #4]
 8013d5c:	60a2      	str	r2, [r4, #8]
			break;
 8013d5e:	f008 bd47 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 538 :
			strcpy(p->name,"SMOKING AREA HARD");
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013d68:	4a4c      	ldr	r2, [pc, #304]	; (8013e9c <problem_fetch+0x1250c>)
 8013d6a:	461d      	mov	r5, r3
 8013d6c:	4614      	mov	r4, r2
 8013d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d70:	6028      	str	r0, [r5, #0]
 8013d72:	6069      	str	r1, [r5, #4]
 8013d74:	60aa      	str	r2, [r5, #8]
 8013d76:	60eb      	str	r3, [r5, #12]
 8013d78:	8823      	ldrh	r3, [r4, #0]
 8013d7a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d82:	4a47      	ldr	r2, [pc, #284]	; (8013ea0 <problem_fetch+0x12510>)
 8013d84:	6810      	ldr	r0, [r2, #0]
 8013d86:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2205      	movs	r2, #5
 8013d8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	33a4      	adds	r3, #164	; 0xa4
 8013d92:	4944      	ldr	r1, [pc, #272]	; (8013ea4 <problem_fetch+0x12514>)
 8013d94:	461a      	mov	r2, r3
 8013d96:	460b      	mov	r3, r1
 8013d98:	cb03      	ldmia	r3!, {r0, r1}
 8013d9a:	6010      	str	r0, [r2, #0]
 8013d9c:	6051      	str	r1, [r2, #4]
 8013d9e:	881b      	ldrh	r3, [r3, #0]
 8013da0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,16,18");
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	3304      	adds	r3, #4
 8013da6:	4a40      	ldr	r2, [pc, #256]	; (8013ea8 <problem_fetch+0x12518>)
 8013da8:	461c      	mov	r4, r3
 8013daa:	4613      	mov	r3, r2
 8013dac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dae:	6020      	str	r0, [r4, #0]
 8013db0:	6061      	str	r1, [r4, #4]
 8013db2:	60a2      	str	r2, [r4, #8]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013dbe:	493b      	ldr	r1, [pc, #236]	; (8013eac <problem_fetch+0x1251c>)
 8013dc0:	461a      	mov	r2, r3
 8013dc2:	460b      	mov	r3, r1
 8013dc4:	cb03      	ldmia	r3!, {r0, r1}
 8013dc6:	6010      	str	r0, [r2, #0]
 8013dc8:	6051      	str	r1, [r2, #4]
 8013dca:	881b      	ldrh	r3, [r3, #0]
 8013dcc:	8113      	strh	r3, [r2, #8]
			break;
 8013dce:	f008 bd0f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 539 :
			strcpy(p->name,"THE WIZARD");
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013dd8:	4935      	ldr	r1, [pc, #212]	; (8013eb0 <problem_fetch+0x12520>)
 8013dda:	461a      	mov	r2, r3
 8013ddc:	460b      	mov	r3, r1
 8013dde:	cb03      	ldmia	r3!, {r0, r1}
 8013de0:	6010      	str	r0, [r2, #0]
 8013de2:	6051      	str	r1, [r2, #4]
 8013de4:	8819      	ldrh	r1, [r3, #0]
 8013de6:	789b      	ldrb	r3, [r3, #2]
 8013de8:	8111      	strh	r1, [r2, #8]
 8013dea:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013df2:	4a1c      	ldr	r2, [pc, #112]	; (8013e64 <problem_fetch+0x124d4>)
 8013df4:	8811      	ldrh	r1, [r2, #0]
 8013df6:	7892      	ldrb	r2, [r2, #2]
 8013df8:	8019      	strh	r1, [r3, #0]
 8013dfa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2208      	movs	r2, #8
 8013e00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,H,F,H,E,I");
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	33a4      	adds	r3, #164	; 0xa4
 8013e06:	4a2b      	ldr	r2, [pc, #172]	; (8013eb4 <problem_fetch+0x12524>)
 8013e08:	461c      	mov	r4, r3
 8013e0a:	4615      	mov	r5, r2
 8013e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e0e:	6020      	str	r0, [r4, #0]
 8013e10:	6061      	str	r1, [r4, #4]
 8013e12:	60a2      	str	r2, [r4, #8]
 8013e14:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,10,11,13,16,18");
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	3304      	adds	r3, #4
 8013e1a:	4a27      	ldr	r2, [pc, #156]	; (8013eb8 <problem_fetch+0x12528>)
 8013e1c:	461d      	mov	r5, r3
 8013e1e:	4614      	mov	r4, r2
 8013e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013e22:	6028      	str	r0, [r5, #0]
 8013e24:	6069      	str	r1, [r5, #4]
 8013e26:	60aa      	str	r2, [r5, #8]
 8013e28:	60eb      	str	r3, [r5, #12]
 8013e2a:	6820      	ldr	r0, [r4, #0]
 8013e2c:	6128      	str	r0, [r5, #16]
 8013e2e:	7923      	ldrb	r3, [r4, #4]
 8013e30:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013e38:	4a20      	ldr	r2, [pc, #128]	; (8013ebc <problem_fetch+0x1252c>)
 8013e3a:	461c      	mov	r4, r3
 8013e3c:	4615      	mov	r5, r2
 8013e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e40:	6020      	str	r0, [r4, #0]
 8013e42:	6061      	str	r1, [r4, #4]
 8013e44:	60a2      	str	r2, [r4, #8]
 8013e46:	60e3      	str	r3, [r4, #12]
			break;
 8013e48:	f008 bcd2 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8013e4c:	0802a1e8 	.word	0x0802a1e8
 8013e50:	08023c28 	.word	0x08023c28
 8013e54:	0802a204 	.word	0x0802a204
 8013e58:	0802a218 	.word	0x0802a218
 8013e5c:	08024b74 	.word	0x08024b74
 8013e60:	0802a230 	.word	0x0802a230
 8013e64:	08023c5c 	.word	0x08023c5c
 8013e68:	0802a240 	.word	0x0802a240
 8013e6c:	080247a0 	.word	0x080247a0
 8013e70:	08023c08 	.word	0x08023c08
 8013e74:	0802a250 	.word	0x0802a250
 8013e78:	08023ccc 	.word	0x08023ccc
 8013e7c:	0802a264 	.word	0x0802a264
 8013e80:	0802a274 	.word	0x0802a274
 8013e84:	08023d18 	.word	0x08023d18
 8013e88:	0802a288 	.word	0x0802a288
 8013e8c:	08023b90 	.word	0x08023b90
 8013e90:	0802a294 	.word	0x0802a294
 8013e94:	0802a2a0 	.word	0x0802a2a0
 8013e98:	08023f2c 	.word	0x08023f2c
 8013e9c:	0802a2b0 	.word	0x0802a2b0
 8013ea0:	08023d30 	.word	0x08023d30
 8013ea4:	08027238 	.word	0x08027238
 8013ea8:	0802a2c4 	.word	0x0802a2c4
 8013eac:	0802405c 	.word	0x0802405c
 8013eb0:	0802a2d4 	.word	0x0802a2d4
 8013eb4:	0802a2e0 	.word	0x0802a2e0
 8013eb8:	0802a2f0 	.word	0x0802a2f0
 8013ebc:	08023da0 	.word	0x08023da0
		case 540 :
			strcpy(p->name,"GYUUUUUN");
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013ec6:	49ab      	ldr	r1, [pc, #684]	; (8014174 <problem_fetch+0x127e4>)
 8013ec8:	461a      	mov	r2, r3
 8013eca:	460b      	mov	r3, r1
 8013ecc:	cb03      	ldmia	r3!, {r0, r1}
 8013ece:	6010      	str	r0, [r2, #0]
 8013ed0:	6051      	str	r1, [r2, #4]
 8013ed2:	781b      	ldrb	r3, [r3, #0]
 8013ed4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013edc:	4aa6      	ldr	r2, [pc, #664]	; (8014178 <problem_fetch+0x127e8>)
 8013ede:	8811      	ldrh	r1, [r2, #0]
 8013ee0:	7892      	ldrb	r2, [r2, #2]
 8013ee2:	8019      	strh	r1, [r3, #0]
 8013ee4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	2206      	movs	r2, #6
 8013eea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,E,E,I");
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	33a4      	adds	r3, #164	; 0xa4
 8013ef0:	4aa2      	ldr	r2, [pc, #648]	; (801417c <problem_fetch+0x127ec>)
 8013ef2:	461c      	mov	r4, r3
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ef8:	6020      	str	r0, [r4, #0]
 8013efa:	6061      	str	r1, [r4, #4]
 8013efc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	3304      	adds	r3, #4
 8013f02:	4a9f      	ldr	r2, [pc, #636]	; (8014180 <problem_fetch+0x127f0>)
 8013f04:	461d      	mov	r5, r3
 8013f06:	4614      	mov	r4, r2
 8013f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f0a:	6028      	str	r0, [r5, #0]
 8013f0c:	6069      	str	r1, [r5, #4]
 8013f0e:	60aa      	str	r2, [r5, #8]
 8013f10:	60eb      	str	r3, [r5, #12]
 8013f12:	7823      	ldrb	r3, [r4, #0]
 8013f14:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013f1c:	4a99      	ldr	r2, [pc, #612]	; (8014184 <problem_fetch+0x127f4>)
 8013f1e:	461c      	mov	r4, r3
 8013f20:	4613      	mov	r3, r2
 8013f22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013f24:	6020      	str	r0, [r4, #0]
 8013f26:	6061      	str	r1, [r4, #4]
 8013f28:	60a2      	str	r2, [r4, #8]
			break;
 8013f2a:	f008 bc61 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 541 :
			strcpy(p->name,"A LITTLE CROSSING");
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013f34:	4a94      	ldr	r2, [pc, #592]	; (8014188 <problem_fetch+0x127f8>)
 8013f36:	461d      	mov	r5, r3
 8013f38:	4614      	mov	r4, r2
 8013f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f3c:	6028      	str	r0, [r5, #0]
 8013f3e:	6069      	str	r1, [r5, #4]
 8013f40:	60aa      	str	r2, [r5, #8]
 8013f42:	60eb      	str	r3, [r5, #12]
 8013f44:	8823      	ldrh	r3, [r4, #0]
 8013f46:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013f4e:	4a8f      	ldr	r2, [pc, #572]	; (801418c <problem_fetch+0x127fc>)
 8013f50:	6810      	ldr	r0, [r2, #0]
 8013f52:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2208      	movs	r2, #8
 8013f58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,G,H,K,H,I");
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	33a4      	adds	r3, #164	; 0xa4
 8013f5e:	4a8c      	ldr	r2, [pc, #560]	; (8014190 <problem_fetch+0x12800>)
 8013f60:	461c      	mov	r4, r3
 8013f62:	4615      	mov	r5, r2
 8013f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f66:	6020      	str	r0, [r4, #0]
 8013f68:	6061      	str	r1, [r4, #4]
 8013f6a:	60a2      	str	r2, [r4, #8]
 8013f6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,12,14,16,18");
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	3304      	adds	r3, #4
 8013f72:	4a88      	ldr	r2, [pc, #544]	; (8014194 <problem_fetch+0x12804>)
 8013f74:	461d      	mov	r5, r3
 8013f76:	4614      	mov	r4, r2
 8013f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f7a:	6028      	str	r0, [r5, #0]
 8013f7c:	6069      	str	r1, [r5, #4]
 8013f7e:	60aa      	str	r2, [r5, #8]
 8013f80:	60eb      	str	r3, [r5, #12]
 8013f82:	6820      	ldr	r0, [r4, #0]
 8013f84:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013f8c:	4a82      	ldr	r2, [pc, #520]	; (8014198 <problem_fetch+0x12808>)
 8013f8e:	461c      	mov	r4, r3
 8013f90:	4615      	mov	r5, r2
 8013f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f94:	6020      	str	r0, [r4, #0]
 8013f96:	6061      	str	r1, [r4, #4]
 8013f98:	60a2      	str	r2, [r4, #8]
 8013f9a:	60e3      	str	r3, [r4, #12]
			break;
 8013f9c:	f008 bc28 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 542 :
			strcpy(p->name,"ZANZARE, NEBBIA E VIN");
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013fa6:	4a7d      	ldr	r2, [pc, #500]	; (801419c <problem_fetch+0x1280c>)
 8013fa8:	461d      	mov	r5, r3
 8013faa:	4614      	mov	r4, r2
 8013fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fae:	6028      	str	r0, [r5, #0]
 8013fb0:	6069      	str	r1, [r5, #4]
 8013fb2:	60aa      	str	r2, [r5, #8]
 8013fb4:	60eb      	str	r3, [r5, #12]
 8013fb6:	6820      	ldr	r0, [r4, #0]
 8013fb8:	6128      	str	r0, [r5, #16]
 8013fba:	88a3      	ldrh	r3, [r4, #4]
 8013fbc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013fc4:	4a6c      	ldr	r2, [pc, #432]	; (8014178 <problem_fetch+0x127e8>)
 8013fc6:	8811      	ldrh	r1, [r2, #0]
 8013fc8:	7892      	ldrb	r2, [r2, #2]
 8013fca:	8019      	strh	r1, [r3, #0]
 8013fcc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2205      	movs	r2, #5
 8013fd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,D");
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	33a4      	adds	r3, #164	; 0xa4
 8013fd8:	4971      	ldr	r1, [pc, #452]	; (80141a0 <problem_fetch+0x12810>)
 8013fda:	461a      	mov	r2, r3
 8013fdc:	460b      	mov	r3, r1
 8013fde:	cb03      	ldmia	r3!, {r0, r1}
 8013fe0:	6010      	str	r0, [r2, #0]
 8013fe2:	6051      	str	r1, [r2, #4]
 8013fe4:	881b      	ldrh	r3, [r3, #0]
 8013fe6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,13,16,18");
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	3304      	adds	r3, #4
 8013fec:	4a6d      	ldr	r2, [pc, #436]	; (80141a4 <problem_fetch+0x12814>)
 8013fee:	461c      	mov	r4, r3
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ff4:	6020      	str	r0, [r4, #0]
 8013ff6:	6061      	str	r1, [r4, #4]
 8013ff8:	60a2      	str	r2, [r4, #8]
 8013ffa:	881b      	ldrh	r3, [r3, #0]
 8013ffc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014004:	4968      	ldr	r1, [pc, #416]	; (80141a8 <problem_fetch+0x12818>)
 8014006:	461a      	mov	r2, r3
 8014008:	460b      	mov	r3, r1
 801400a:	cb03      	ldmia	r3!, {r0, r1}
 801400c:	6010      	str	r0, [r2, #0]
 801400e:	6051      	str	r1, [r2, #4]
 8014010:	881b      	ldrh	r3, [r3, #0]
 8014012:	8113      	strh	r3, [r2, #8]
			break;
 8014014:	f008 bbec 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 543 :
			strcpy(p->name,"STRATIFICAZIONI SOCIALI");
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801401e:	4a63      	ldr	r2, [pc, #396]	; (80141ac <problem_fetch+0x1281c>)
 8014020:	461d      	mov	r5, r3
 8014022:	4614      	mov	r4, r2
 8014024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014026:	6028      	str	r0, [r5, #0]
 8014028:	6069      	str	r1, [r5, #4]
 801402a:	60aa      	str	r2, [r5, #8]
 801402c:	60eb      	str	r3, [r5, #12]
 801402e:	cc03      	ldmia	r4!, {r0, r1}
 8014030:	6128      	str	r0, [r5, #16]
 8014032:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801403a:	4a54      	ldr	r2, [pc, #336]	; (801418c <problem_fetch+0x127fc>)
 801403c:	6810      	ldr	r0, [r2, #0]
 801403e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	2207      	movs	r2, #7
 8014044:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,G,C,C,D");
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	33a4      	adds	r3, #164	; 0xa4
 801404a:	4a59      	ldr	r2, [pc, #356]	; (80141b0 <problem_fetch+0x12820>)
 801404c:	461c      	mov	r4, r3
 801404e:	4613      	mov	r3, r2
 8014050:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014052:	6020      	str	r0, [r4, #0]
 8014054:	6061      	str	r1, [r4, #4]
 8014056:	60a2      	str	r2, [r4, #8]
 8014058:	881b      	ldrh	r3, [r3, #0]
 801405a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,8,16,18");
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	3304      	adds	r3, #4
 8014060:	4a54      	ldr	r2, [pc, #336]	; (80141b4 <problem_fetch+0x12824>)
 8014062:	461d      	mov	r5, r3
 8014064:	4614      	mov	r4, r2
 8014066:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014068:	6028      	str	r0, [r5, #0]
 801406a:	6069      	str	r1, [r5, #4]
 801406c:	60aa      	str	r2, [r5, #8]
 801406e:	60eb      	str	r3, [r5, #12]
 8014070:	8823      	ldrh	r3, [r4, #0]
 8014072:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801407a:	4a4f      	ldr	r2, [pc, #316]	; (80141b8 <problem_fetch+0x12828>)
 801407c:	461c      	mov	r4, r3
 801407e:	4613      	mov	r3, r2
 8014080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014082:	6020      	str	r0, [r4, #0]
 8014084:	6061      	str	r1, [r4, #4]
 8014086:	60a2      	str	r2, [r4, #8]
 8014088:	881b      	ldrh	r3, [r3, #0]
 801408a:	81a3      	strh	r3, [r4, #12]
			break;
 801408c:	f008 bbb0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 544 :
			strcpy(p->name,"CICCIOSPRUZZO");
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014096:	4a49      	ldr	r2, [pc, #292]	; (80141bc <problem_fetch+0x1282c>)
 8014098:	461c      	mov	r4, r3
 801409a:	4613      	mov	r3, r2
 801409c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801409e:	6020      	str	r0, [r4, #0]
 80140a0:	6061      	str	r1, [r4, #4]
 80140a2:	60a2      	str	r2, [r4, #8]
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80140ae:	4a44      	ldr	r2, [pc, #272]	; (80141c0 <problem_fetch+0x12830>)
 80140b0:	8811      	ldrh	r1, [r2, #0]
 80140b2:	7892      	ldrb	r2, [r2, #2]
 80140b4:	8019      	strh	r1, [r3, #0]
 80140b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2206      	movs	r2, #6
 80140bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,A,E,D");
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	33a4      	adds	r3, #164	; 0xa4
 80140c2:	4a40      	ldr	r2, [pc, #256]	; (80141c4 <problem_fetch+0x12834>)
 80140c4:	461c      	mov	r4, r3
 80140c6:	4613      	mov	r3, r2
 80140c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140ca:	6020      	str	r0, [r4, #0]
 80140cc:	6061      	str	r1, [r4, #4]
 80140ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	3304      	adds	r3, #4
 80140d4:	4a3c      	ldr	r2, [pc, #240]	; (80141c8 <problem_fetch+0x12838>)
 80140d6:	461c      	mov	r4, r3
 80140d8:	4615      	mov	r5, r2
 80140da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80140dc:	6020      	str	r0, [r4, #0]
 80140de:	6061      	str	r1, [r4, #4]
 80140e0:	60a2      	str	r2, [r4, #8]
 80140e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80140ea:	4a26      	ldr	r2, [pc, #152]	; (8014184 <problem_fetch+0x127f4>)
 80140ec:	461c      	mov	r4, r3
 80140ee:	4613      	mov	r3, r2
 80140f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140f2:	6020      	str	r0, [r4, #0]
 80140f4:	6061      	str	r1, [r4, #4]
 80140f6:	60a2      	str	r2, [r4, #8]
			break;
 80140f8:	f008 bb7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 545 :
			strcpy(p->name,"DOJO BLACK");
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014102:	4932      	ldr	r1, [pc, #200]	; (80141cc <problem_fetch+0x1283c>)
 8014104:	461a      	mov	r2, r3
 8014106:	460b      	mov	r3, r1
 8014108:	cb03      	ldmia	r3!, {r0, r1}
 801410a:	6010      	str	r0, [r2, #0]
 801410c:	6051      	str	r1, [r2, #4]
 801410e:	8819      	ldrh	r1, [r3, #0]
 8014110:	789b      	ldrb	r3, [r3, #2]
 8014112:	8111      	strh	r1, [r2, #8]
 8014114:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801411c:	4a2c      	ldr	r2, [pc, #176]	; (80141d0 <problem_fetch+0x12840>)
 801411e:	6810      	ldr	r0, [r2, #0]
 8014120:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2208      	movs	r2, #8
 8014126:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,I,J,D,G,C,D");
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	33a4      	adds	r3, #164	; 0xa4
 801412c:	4a29      	ldr	r2, [pc, #164]	; (80141d4 <problem_fetch+0x12844>)
 801412e:	461c      	mov	r4, r3
 8014130:	4615      	mov	r5, r2
 8014132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014134:	6020      	str	r0, [r4, #0]
 8014136:	6061      	str	r1, [r4, #4]
 8014138:	60a2      	str	r2, [r4, #8]
 801413a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,13,11,17,5,18");
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3304      	adds	r3, #4
 8014140:	4a25      	ldr	r2, [pc, #148]	; (80141d8 <problem_fetch+0x12848>)
 8014142:	461d      	mov	r5, r3
 8014144:	4614      	mov	r4, r2
 8014146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014148:	6028      	str	r0, [r5, #0]
 801414a:	6069      	str	r1, [r5, #4]
 801414c:	60aa      	str	r2, [r5, #8]
 801414e:	60eb      	str	r3, [r5, #12]
 8014150:	6820      	ldr	r0, [r4, #0]
 8014152:	6128      	str	r0, [r5, #16]
 8014154:	7923      	ldrb	r3, [r4, #4]
 8014156:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801415e:	4a1f      	ldr	r2, [pc, #124]	; (80141dc <problem_fetch+0x1284c>)
 8014160:	461c      	mov	r4, r3
 8014162:	4615      	mov	r5, r2
 8014164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014166:	6020      	str	r0, [r4, #0]
 8014168:	6061      	str	r1, [r4, #4]
 801416a:	60a2      	str	r2, [r4, #8]
 801416c:	60e3      	str	r3, [r4, #12]
			break;
 801416e:	f008 bb3f 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8014172:	bf00      	nop
 8014174:	0802a308 	.word	0x0802a308
 8014178:	08023c5c 	.word	0x08023c5c
 801417c:	0802a314 	.word	0x0802a314
 8014180:	08024b2c 	.word	0x08024b2c
 8014184:	08023f2c 	.word	0x08023f2c
 8014188:	0802a320 	.word	0x0802a320
 801418c:	08023c28 	.word	0x08023c28
 8014190:	0802a334 	.word	0x0802a334
 8014194:	0802a344 	.word	0x0802a344
 8014198:	08023cb4 	.word	0x08023cb4
 801419c:	0802a358 	.word	0x0802a358
 80141a0:	0802a370 	.word	0x0802a370
 80141a4:	0802a37c 	.word	0x0802a37c
 80141a8:	0802405c 	.word	0x0802405c
 80141ac:	0802a38c 	.word	0x0802a38c
 80141b0:	0802a3a4 	.word	0x0802a3a4
 80141b4:	0802a3b4 	.word	0x0802a3b4
 80141b8:	08023d18 	.word	0x08023d18
 80141bc:	0802a3c8 	.word	0x0802a3c8
 80141c0:	08023b50 	.word	0x08023b50
 80141c4:	0802a3d8 	.word	0x0802a3d8
 80141c8:	08027ac0 	.word	0x08027ac0
 80141cc:	0802a3e4 	.word	0x0802a3e4
 80141d0:	08023d30 	.word	0x08023d30
 80141d4:	0802a3f0 	.word	0x0802a3f0
 80141d8:	0802a400 	.word	0x0802a400
 80141dc:	08023da0 	.word	0x08023da0
		case 546 :
			strcpy(p->name,"WOKE UP FEELIN FROGGY");
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80141e6:	4aae      	ldr	r2, [pc, #696]	; (80144a0 <problem_fetch+0x12b10>)
 80141e8:	461d      	mov	r5, r3
 80141ea:	4614      	mov	r4, r2
 80141ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141ee:	6028      	str	r0, [r5, #0]
 80141f0:	6069      	str	r1, [r5, #4]
 80141f2:	60aa      	str	r2, [r5, #8]
 80141f4:	60eb      	str	r3, [r5, #12]
 80141f6:	6820      	ldr	r0, [r4, #0]
 80141f8:	6128      	str	r0, [r5, #16]
 80141fa:	88a3      	ldrh	r3, [r4, #4]
 80141fc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B+");
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014204:	4aa7      	ldr	r2, [pc, #668]	; (80144a4 <problem_fetch+0x12b14>)
 8014206:	6810      	ldr	r0, [r2, #0]
 8014208:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	2208      	movs	r2, #8
 801420e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,J,K,I,I");
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	33a4      	adds	r3, #164	; 0xa4
 8014214:	4aa4      	ldr	r2, [pc, #656]	; (80144a8 <problem_fetch+0x12b18>)
 8014216:	461c      	mov	r4, r3
 8014218:	4615      	mov	r5, r2
 801421a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801421c:	6020      	str	r0, [r4, #0]
 801421e:	6061      	str	r1, [r4, #4]
 8014220:	60a2      	str	r2, [r4, #8]
 8014222:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,13,14,7,18");
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	3304      	adds	r3, #4
 8014228:	4aa0      	ldr	r2, [pc, #640]	; (80144ac <problem_fetch+0x12b1c>)
 801422a:	461d      	mov	r5, r3
 801422c:	4614      	mov	r4, r2
 801422e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014230:	6028      	str	r0, [r5, #0]
 8014232:	6069      	str	r1, [r5, #4]
 8014234:	60aa      	str	r2, [r5, #8]
 8014236:	60eb      	str	r3, [r5, #12]
 8014238:	6820      	ldr	r0, [r4, #0]
 801423a:	6128      	str	r0, [r5, #16]
 801423c:	7923      	ldrb	r3, [r4, #4]
 801423e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014246:	4a9a      	ldr	r2, [pc, #616]	; (80144b0 <problem_fetch+0x12b20>)
 8014248:	461c      	mov	r4, r3
 801424a:	4615      	mov	r5, r2
 801424c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801424e:	6020      	str	r0, [r4, #0]
 8014250:	6061      	str	r1, [r4, #4]
 8014252:	60a2      	str	r2, [r4, #8]
 8014254:	60e3      	str	r3, [r4, #12]
			break;
 8014256:	f008 bacb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 547 :
			strcpy(p->name,"DDD");
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014260:	4a94      	ldr	r2, [pc, #592]	; (80144b4 <problem_fetch+0x12b24>)
 8014262:	6810      	ldr	r0, [r2, #0]
 8014264:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C");
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801426c:	4a92      	ldr	r2, [pc, #584]	; (80144b8 <problem_fetch+0x12b28>)
 801426e:	8811      	ldrh	r1, [r2, #0]
 8014270:	7892      	ldrb	r2, [r2, #2]
 8014272:	8019      	strh	r1, [r3, #0]
 8014274:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	220b      	movs	r2, #11
 801427a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,H,G,H,G,G,H,G,I");
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	33a4      	adds	r3, #164	; 0xa4
 8014280:	4a8e      	ldr	r2, [pc, #568]	; (80144bc <problem_fetch+0x12b2c>)
 8014282:	461d      	mov	r5, r3
 8014284:	4614      	mov	r4, r2
 8014286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014288:	6028      	str	r0, [r5, #0]
 801428a:	6069      	str	r1, [r5, #4]
 801428c:	60aa      	str	r2, [r5, #8]
 801428e:	60eb      	str	r3, [r5, #12]
 8014290:	6820      	ldr	r0, [r4, #0]
 8014292:	6128      	str	r0, [r5, #16]
 8014294:	88a3      	ldrh	r3, [r4, #4]
 8014296:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,8,10,10,13,14,15,16,17,18");
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	3304      	adds	r3, #4
 801429c:	4a88      	ldr	r2, [pc, #544]	; (80144c0 <problem_fetch+0x12b30>)
 801429e:	461d      	mov	r5, r3
 80142a0:	4614      	mov	r4, r2
 80142a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142a4:	6028      	str	r0, [r5, #0]
 80142a6:	6069      	str	r1, [r5, #4]
 80142a8:	60aa      	str	r2, [r5, #8]
 80142aa:	60eb      	str	r3, [r5, #12]
 80142ac:	cc07      	ldmia	r4!, {r0, r1, r2}
 80142ae:	6128      	str	r0, [r5, #16]
 80142b0:	6169      	str	r1, [r5, #20]
 80142b2:	61aa      	str	r2, [r5, #24]
 80142b4:	8823      	ldrh	r3, [r4, #0]
 80142b6:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80142be:	4a81      	ldr	r2, [pc, #516]	; (80144c4 <problem_fetch+0x12b34>)
 80142c0:	461d      	mov	r5, r3
 80142c2:	4614      	mov	r4, r2
 80142c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142c6:	6028      	str	r0, [r5, #0]
 80142c8:	6069      	str	r1, [r5, #4]
 80142ca:	60aa      	str	r2, [r5, #8]
 80142cc:	60eb      	str	r3, [r5, #12]
 80142ce:	6820      	ldr	r0, [r4, #0]
 80142d0:	6128      	str	r0, [r5, #16]
 80142d2:	88a3      	ldrh	r3, [r4, #4]
 80142d4:	82ab      	strh	r3, [r5, #20]
			break;
 80142d6:	f008 ba8b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 548 :
			strcpy(p->name,"CHIAPPO");
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80142e0:	4979      	ldr	r1, [pc, #484]	; (80144c8 <problem_fetch+0x12b38>)
 80142e2:	461a      	mov	r2, r3
 80142e4:	460b      	mov	r3, r1
 80142e6:	cb03      	ldmia	r3!, {r0, r1}
 80142e8:	6010      	str	r0, [r2, #0]
 80142ea:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80142f2:	4a76      	ldr	r2, [pc, #472]	; (80144cc <problem_fetch+0x12b3c>)
 80142f4:	6810      	ldr	r0, [r2, #0]
 80142f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2207      	movs	r2, #7
 80142fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,D");
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	33a4      	adds	r3, #164	; 0xa4
 8014302:	4a73      	ldr	r2, [pc, #460]	; (80144d0 <problem_fetch+0x12b40>)
 8014304:	461c      	mov	r4, r3
 8014306:	4613      	mov	r3, r2
 8014308:	cb07      	ldmia	r3!, {r0, r1, r2}
 801430a:	6020      	str	r0, [r4, #0]
 801430c:	6061      	str	r1, [r4, #4]
 801430e:	60a2      	str	r2, [r4, #8]
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	3304      	adds	r3, #4
 8014318:	4a6e      	ldr	r2, [pc, #440]	; (80144d4 <problem_fetch+0x12b44>)
 801431a:	461d      	mov	r5, r3
 801431c:	4614      	mov	r4, r2
 801431e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014320:	6028      	str	r0, [r5, #0]
 8014322:	6069      	str	r1, [r5, #4]
 8014324:	60aa      	str	r2, [r5, #8]
 8014326:	60eb      	str	r3, [r5, #12]
 8014328:	8823      	ldrh	r3, [r4, #0]
 801432a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014332:	4a69      	ldr	r2, [pc, #420]	; (80144d8 <problem_fetch+0x12b48>)
 8014334:	461c      	mov	r4, r3
 8014336:	4613      	mov	r3, r2
 8014338:	cb07      	ldmia	r3!, {r0, r1, r2}
 801433a:	6020      	str	r0, [r4, #0]
 801433c:	6061      	str	r1, [r4, #4]
 801433e:	60a2      	str	r2, [r4, #8]
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	81a3      	strh	r3, [r4, #12]
			break;
 8014344:	f008 ba54 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 549 :
			strcpy(p->name,"BIFFOSMEG");
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801434e:	4963      	ldr	r1, [pc, #396]	; (80144dc <problem_fetch+0x12b4c>)
 8014350:	461a      	mov	r2, r3
 8014352:	460b      	mov	r3, r1
 8014354:	cb03      	ldmia	r3!, {r0, r1}
 8014356:	6010      	str	r0, [r2, #0]
 8014358:	6051      	str	r1, [r2, #4]
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014364:	4a54      	ldr	r2, [pc, #336]	; (80144b8 <problem_fetch+0x12b28>)
 8014366:	8811      	ldrh	r1, [r2, #0]
 8014368:	7892      	ldrb	r2, [r2, #2]
 801436a:	8019      	strh	r1, [r3, #0]
 801436c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	2206      	movs	r2, #6
 8014372:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,E,A");
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	33a4      	adds	r3, #164	; 0xa4
 8014378:	4a59      	ldr	r2, [pc, #356]	; (80144e0 <problem_fetch+0x12b50>)
 801437a:	461c      	mov	r4, r3
 801437c:	4613      	mov	r3, r2
 801437e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014380:	6020      	str	r0, [r4, #0]
 8014382:	6061      	str	r1, [r4, #4]
 8014384:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,16,18");
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	3304      	adds	r3, #4
 801438a:	4a56      	ldr	r2, [pc, #344]	; (80144e4 <problem_fetch+0x12b54>)
 801438c:	461c      	mov	r4, r3
 801438e:	4613      	mov	r3, r2
 8014390:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014392:	6020      	str	r0, [r4, #0]
 8014394:	6061      	str	r1, [r4, #4]
 8014396:	60a2      	str	r2, [r4, #8]
 8014398:	881a      	ldrh	r2, [r3, #0]
 801439a:	789b      	ldrb	r3, [r3, #2]
 801439c:	81a2      	strh	r2, [r4, #12]
 801439e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80143a6:	4a50      	ldr	r2, [pc, #320]	; (80144e8 <problem_fetch+0x12b58>)
 80143a8:	461c      	mov	r4, r3
 80143aa:	4613      	mov	r3, r2
 80143ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143ae:	6020      	str	r0, [r4, #0]
 80143b0:	6061      	str	r1, [r4, #4]
 80143b2:	60a2      	str	r2, [r4, #8]
			break;
 80143b4:	f008 ba1c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 550 :
			strcpy(p->name,"HAY IS FOR HORSES");
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80143be:	4a4b      	ldr	r2, [pc, #300]	; (80144ec <problem_fetch+0x12b5c>)
 80143c0:	461d      	mov	r5, r3
 80143c2:	4614      	mov	r4, r2
 80143c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143c6:	6028      	str	r0, [r5, #0]
 80143c8:	6069      	str	r1, [r5, #4]
 80143ca:	60aa      	str	r2, [r5, #8]
 80143cc:	60eb      	str	r3, [r5, #12]
 80143ce:	8823      	ldrh	r3, [r4, #0]
 80143d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80143d8:	4a45      	ldr	r2, [pc, #276]	; (80144f0 <problem_fetch+0x12b60>)
 80143da:	6810      	ldr	r0, [r2, #0]
 80143dc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2205      	movs	r2, #5
 80143e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D");
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	33a4      	adds	r3, #164	; 0xa4
 80143e8:	4942      	ldr	r1, [pc, #264]	; (80144f4 <problem_fetch+0x12b64>)
 80143ea:	461a      	mov	r2, r3
 80143ec:	460b      	mov	r3, r1
 80143ee:	cb03      	ldmia	r3!, {r0, r1}
 80143f0:	6010      	str	r0, [r2, #0]
 80143f2:	6051      	str	r1, [r2, #4]
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	3304      	adds	r3, #4
 80143fc:	4a3e      	ldr	r2, [pc, #248]	; (80144f8 <problem_fetch+0x12b68>)
 80143fe:	461c      	mov	r4, r3
 8014400:	4613      	mov	r3, r2
 8014402:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014404:	6020      	str	r0, [r4, #0]
 8014406:	6061      	str	r1, [r4, #4]
 8014408:	60a2      	str	r2, [r4, #8]
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014414:	4939      	ldr	r1, [pc, #228]	; (80144fc <problem_fetch+0x12b6c>)
 8014416:	461a      	mov	r2, r3
 8014418:	460b      	mov	r3, r1
 801441a:	cb03      	ldmia	r3!, {r0, r1}
 801441c:	6010      	str	r0, [r2, #0]
 801441e:	6051      	str	r1, [r2, #4]
 8014420:	881b      	ldrh	r3, [r3, #0]
 8014422:	8113      	strh	r3, [r2, #8]
			break;
 8014424:	f008 b9e4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 551 :
			strcpy(p->name,"IL LADRO DI POLLI");
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801442e:	4a34      	ldr	r2, [pc, #208]	; (8014500 <problem_fetch+0x12b70>)
 8014430:	461d      	mov	r5, r3
 8014432:	4614      	mov	r4, r2
 8014434:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014436:	6028      	str	r0, [r5, #0]
 8014438:	6069      	str	r1, [r5, #4]
 801443a:	60aa      	str	r2, [r5, #8]
 801443c:	60eb      	str	r3, [r5, #12]
 801443e:	8823      	ldrh	r3, [r4, #0]
 8014440:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014448:	4a29      	ldr	r2, [pc, #164]	; (80144f0 <problem_fetch+0x12b60>)
 801444a:	6810      	ldr	r0, [r2, #0]
 801444c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2208      	movs	r2, #8
 8014452:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,J,E,E,D");
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	33a4      	adds	r3, #164	; 0xa4
 8014458:	4a2a      	ldr	r2, [pc, #168]	; (8014504 <problem_fetch+0x12b74>)
 801445a:	461c      	mov	r4, r3
 801445c:	4615      	mov	r5, r2
 801445e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014460:	6020      	str	r0, [r4, #0]
 8014462:	6061      	str	r1, [r4, #4]
 8014464:	60a2      	str	r2, [r4, #8]
 8014466:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,7,12,16,18");
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	3304      	adds	r3, #4
 801446c:	4a26      	ldr	r2, [pc, #152]	; (8014508 <problem_fetch+0x12b78>)
 801446e:	461d      	mov	r5, r3
 8014470:	4614      	mov	r4, r2
 8014472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014474:	6028      	str	r0, [r5, #0]
 8014476:	6069      	str	r1, [r5, #4]
 8014478:	60aa      	str	r2, [r5, #8]
 801447a:	60eb      	str	r3, [r5, #12]
 801447c:	8823      	ldrh	r3, [r4, #0]
 801447e:	78a2      	ldrb	r2, [r4, #2]
 8014480:	822b      	strh	r3, [r5, #16]
 8014482:	4613      	mov	r3, r2
 8014484:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801448c:	4a1f      	ldr	r2, [pc, #124]	; (801450c <problem_fetch+0x12b7c>)
 801448e:	461c      	mov	r4, r3
 8014490:	4615      	mov	r5, r2
 8014492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014494:	6020      	str	r0, [r4, #0]
 8014496:	6061      	str	r1, [r4, #4]
 8014498:	60a2      	str	r2, [r4, #8]
 801449a:	60e3      	str	r3, [r4, #12]
			break;
 801449c:	f008 b9a8 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80144a0:	0802a418 	.word	0x0802a418
 80144a4:	08023ccc 	.word	0x08023ccc
 80144a8:	0802a430 	.word	0x0802a430
 80144ac:	0802a440 	.word	0x0802a440
 80144b0:	08023da0 	.word	0x08023da0
 80144b4:	0802a458 	.word	0x0802a458
 80144b8:	08023c5c 	.word	0x08023c5c
 80144bc:	0802a45c 	.word	0x0802a45c
 80144c0:	0802a474 	.word	0x0802a474
 80144c4:	080274f0 	.word	0x080274f0
 80144c8:	0802a494 	.word	0x0802a494
 80144cc:	08023b90 	.word	0x08023b90
 80144d0:	0802a49c 	.word	0x0802a49c
 80144d4:	080288d8 	.word	0x080288d8
 80144d8:	08023d18 	.word	0x08023d18
 80144dc:	0802a4ac 	.word	0x0802a4ac
 80144e0:	0802a4b8 	.word	0x0802a4b8
 80144e4:	0802a4c4 	.word	0x0802a4c4
 80144e8:	08023f2c 	.word	0x08023f2c
 80144ec:	0802a4d4 	.word	0x0802a4d4
 80144f0:	08023c28 	.word	0x08023c28
 80144f4:	0802a4e8 	.word	0x0802a4e8
 80144f8:	08027bb0 	.word	0x08027bb0
 80144fc:	0802405c 	.word	0x0802405c
 8014500:	0802a4f4 	.word	0x0802a4f4
 8014504:	0802a508 	.word	0x0802a508
 8014508:	0802a518 	.word	0x0802a518
 801450c:	08023cb4 	.word	0x08023cb4
		case 552 :
			strcpy(p->name,"EVERY WHICH WAY BUT RIGHT");
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014516:	4ab6      	ldr	r2, [pc, #728]	; (80147f0 <problem_fetch+0x12e60>)
 8014518:	461d      	mov	r5, r3
 801451a:	4614      	mov	r4, r2
 801451c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801451e:	6028      	str	r0, [r5, #0]
 8014520:	6069      	str	r1, [r5, #4]
 8014522:	60aa      	str	r2, [r5, #8]
 8014524:	60eb      	str	r3, [r5, #12]
 8014526:	cc03      	ldmia	r4!, {r0, r1}
 8014528:	6128      	str	r0, [r5, #16]
 801452a:	6169      	str	r1, [r5, #20]
 801452c:	8823      	ldrh	r3, [r4, #0]
 801452e:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014536:	4aaf      	ldr	r2, [pc, #700]	; (80147f4 <problem_fetch+0x12e64>)
 8014538:	6810      	ldr	r0, [r2, #0]
 801453a:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	220a      	movs	r2, #10
 8014540:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,C,A,C,B,I,G,G,I");
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	33a4      	adds	r3, #164	; 0xa4
 8014546:	4aac      	ldr	r2, [pc, #688]	; (80147f8 <problem_fetch+0x12e68>)
 8014548:	461d      	mov	r5, r3
 801454a:	4614      	mov	r4, r2
 801454c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801454e:	6028      	str	r0, [r5, #0]
 8014550:	6069      	str	r1, [r5, #4]
 8014552:	60aa      	str	r2, [r5, #8]
 8014554:	60eb      	str	r3, [r5, #12]
 8014556:	6820      	ldr	r0, [r4, #0]
 8014558:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,13,15,10,15,17,18");
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	3304      	adds	r3, #4
 801455e:	4aa7      	ldr	r2, [pc, #668]	; (80147fc <problem_fetch+0x12e6c>)
 8014560:	461d      	mov	r5, r3
 8014562:	4614      	mov	r4, r2
 8014564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014566:	6028      	str	r0, [r5, #0]
 8014568:	6069      	str	r1, [r5, #4]
 801456a:	60aa      	str	r2, [r5, #8]
 801456c:	60eb      	str	r3, [r5, #12]
 801456e:	cc03      	ldmia	r4!, {r0, r1}
 8014570:	6128      	str	r0, [r5, #16]
 8014572:	6169      	str	r1, [r5, #20]
 8014574:	8823      	ldrh	r3, [r4, #0]
 8014576:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801457e:	4aa0      	ldr	r2, [pc, #640]	; (8014800 <problem_fetch+0x12e70>)
 8014580:	461d      	mov	r5, r3
 8014582:	4614      	mov	r4, r2
 8014584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014586:	6028      	str	r0, [r5, #0]
 8014588:	6069      	str	r1, [r5, #4]
 801458a:	60aa      	str	r2, [r5, #8]
 801458c:	60eb      	str	r3, [r5, #12]
 801458e:	6820      	ldr	r0, [r4, #0]
 8014590:	6128      	str	r0, [r5, #16]
			break;
 8014592:	f008 b92d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 553 :
			strcpy(p->name,"180 CAMPUS");
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801459c:	4999      	ldr	r1, [pc, #612]	; (8014804 <problem_fetch+0x12e74>)
 801459e:	461a      	mov	r2, r3
 80145a0:	460b      	mov	r3, r1
 80145a2:	cb03      	ldmia	r3!, {r0, r1}
 80145a4:	6010      	str	r0, [r2, #0]
 80145a6:	6051      	str	r1, [r2, #4]
 80145a8:	8819      	ldrh	r1, [r3, #0]
 80145aa:	789b      	ldrb	r3, [r3, #2]
 80145ac:	8111      	strh	r1, [r2, #8]
 80145ae:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80145b6:	4a94      	ldr	r2, [pc, #592]	; (8014808 <problem_fetch+0x12e78>)
 80145b8:	8811      	ldrh	r1, [r2, #0]
 80145ba:	7892      	ldrb	r2, [r2, #2]
 80145bc:	8019      	strh	r1, [r3, #0]
 80145be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2205      	movs	r2, #5
 80145c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,I,D");
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	33a4      	adds	r3, #164	; 0xa4
 80145ca:	4990      	ldr	r1, [pc, #576]	; (801480c <problem_fetch+0x12e7c>)
 80145cc:	461a      	mov	r2, r3
 80145ce:	460b      	mov	r3, r1
 80145d0:	cb03      	ldmia	r3!, {r0, r1}
 80145d2:	6010      	str	r0, [r2, #0]
 80145d4:	6051      	str	r1, [r2, #4]
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	3304      	adds	r3, #4
 80145de:	4a8c      	ldr	r2, [pc, #560]	; (8014810 <problem_fetch+0x12e80>)
 80145e0:	461c      	mov	r4, r3
 80145e2:	4613      	mov	r3, r2
 80145e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80145e6:	6020      	str	r0, [r4, #0]
 80145e8:	6061      	str	r1, [r4, #4]
 80145ea:	60a2      	str	r2, [r4, #8]
 80145ec:	781b      	ldrb	r3, [r3, #0]
 80145ee:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80145f6:	4987      	ldr	r1, [pc, #540]	; (8014814 <problem_fetch+0x12e84>)
 80145f8:	461a      	mov	r2, r3
 80145fa:	460b      	mov	r3, r1
 80145fc:	cb03      	ldmia	r3!, {r0, r1}
 80145fe:	6010      	str	r0, [r2, #0]
 8014600:	6051      	str	r1, [r2, #4]
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	8113      	strh	r3, [r2, #8]
			break;
 8014606:	f008 b8f3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 554 :
			strcpy(p->name,"JOHNNY REHAB 4");
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014610:	4a81      	ldr	r2, [pc, #516]	; (8014818 <problem_fetch+0x12e88>)
 8014612:	461c      	mov	r4, r3
 8014614:	4613      	mov	r3, r2
 8014616:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014618:	6020      	str	r0, [r4, #0]
 801461a:	6061      	str	r1, [r4, #4]
 801461c:	60a2      	str	r2, [r4, #8]
 801461e:	881a      	ldrh	r2, [r3, #0]
 8014620:	789b      	ldrb	r3, [r3, #2]
 8014622:	81a2      	strh	r2, [r4, #12]
 8014624:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801462c:	4a7b      	ldr	r2, [pc, #492]	; (801481c <problem_fetch+0x12e8c>)
 801462e:	6810      	ldr	r0, [r2, #0]
 8014630:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	2209      	movs	r2, #9
 8014636:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,K,J,I,E,J,D");
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	33a4      	adds	r3, #164	; 0xa4
 801463c:	4a78      	ldr	r2, [pc, #480]	; (8014820 <problem_fetch+0x12e90>)
 801463e:	461d      	mov	r5, r3
 8014640:	4614      	mov	r4, r2
 8014642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014644:	6028      	str	r0, [r5, #0]
 8014646:	6069      	str	r1, [r5, #4]
 8014648:	60aa      	str	r2, [r5, #8]
 801464a:	60eb      	str	r3, [r5, #12]
 801464c:	8823      	ldrh	r3, [r4, #0]
 801464e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,10,9,12,14,8,16,18");
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	3304      	adds	r3, #4
 8014654:	4a73      	ldr	r2, [pc, #460]	; (8014824 <problem_fetch+0x12e94>)
 8014656:	461c      	mov	r4, r3
 8014658:	4615      	mov	r5, r2
 801465a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801465c:	6020      	str	r0, [r4, #0]
 801465e:	6061      	str	r1, [r4, #4]
 8014660:	60a2      	str	r2, [r4, #8]
 8014662:	60e3      	str	r3, [r4, #12]
 8014664:	6828      	ldr	r0, [r5, #0]
 8014666:	6120      	str	r0, [r4, #16]
 8014668:	88ab      	ldrh	r3, [r5, #4]
 801466a:	79aa      	ldrb	r2, [r5, #6]
 801466c:	82a3      	strh	r3, [r4, #20]
 801466e:	4613      	mov	r3, r2
 8014670:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014678:	4a6b      	ldr	r2, [pc, #428]	; (8014828 <problem_fetch+0x12e98>)
 801467a:	461d      	mov	r5, r3
 801467c:	4614      	mov	r4, r2
 801467e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014680:	6028      	str	r0, [r5, #0]
 8014682:	6069      	str	r1, [r5, #4]
 8014684:	60aa      	str	r2, [r5, #8]
 8014686:	60eb      	str	r3, [r5, #12]
 8014688:	8823      	ldrh	r3, [r4, #0]
 801468a:	822b      	strh	r3, [r5, #16]
			break;
 801468c:	f008 b8b0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 555 :
			strcpy(p->name,"FULCRO HARD");
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014696:	4a65      	ldr	r2, [pc, #404]	; (801482c <problem_fetch+0x12e9c>)
 8014698:	461c      	mov	r4, r3
 801469a:	4613      	mov	r3, r2
 801469c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801469e:	6020      	str	r0, [r4, #0]
 80146a0:	6061      	str	r1, [r4, #4]
 80146a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80146aa:	4a61      	ldr	r2, [pc, #388]	; (8014830 <problem_fetch+0x12ea0>)
 80146ac:	8811      	ldrh	r1, [r2, #0]
 80146ae:	7892      	ldrb	r2, [r2, #2]
 80146b0:	8019      	strh	r1, [r3, #0]
 80146b2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2206      	movs	r2, #6
 80146b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,D");
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	33a4      	adds	r3, #164	; 0xa4
 80146be:	4a5d      	ldr	r2, [pc, #372]	; (8014834 <problem_fetch+0x12ea4>)
 80146c0:	461c      	mov	r4, r3
 80146c2:	4613      	mov	r3, r2
 80146c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146c6:	6020      	str	r0, [r4, #0]
 80146c8:	6061      	str	r1, [r4, #4]
 80146ca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	3304      	adds	r3, #4
 80146d0:	4a59      	ldr	r2, [pc, #356]	; (8014838 <problem_fetch+0x12ea8>)
 80146d2:	461c      	mov	r4, r3
 80146d4:	4613      	mov	r3, r2
 80146d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146d8:	6020      	str	r0, [r4, #0]
 80146da:	6061      	str	r1, [r4, #4]
 80146dc:	60a2      	str	r2, [r4, #8]
 80146de:	881a      	ldrh	r2, [r3, #0]
 80146e0:	789b      	ldrb	r3, [r3, #2]
 80146e2:	81a2      	strh	r2, [r4, #12]
 80146e4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80146ec:	4a53      	ldr	r2, [pc, #332]	; (801483c <problem_fetch+0x12eac>)
 80146ee:	461c      	mov	r4, r3
 80146f0:	4613      	mov	r3, r2
 80146f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80146f4:	6020      	str	r0, [r4, #0]
 80146f6:	6061      	str	r1, [r4, #4]
 80146f8:	60a2      	str	r2, [r4, #8]
			break;
 80146fa:	f008 b879 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 556 :
			strcpy(p->name,"FORSØK 15");
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014704:	494e      	ldr	r1, [pc, #312]	; (8014840 <problem_fetch+0x12eb0>)
 8014706:	461a      	mov	r2, r3
 8014708:	460b      	mov	r3, r1
 801470a:	cb03      	ldmia	r3!, {r0, r1}
 801470c:	6010      	str	r0, [r2, #0]
 801470e:	6051      	str	r1, [r2, #4]
 8014710:	8819      	ldrh	r1, [r3, #0]
 8014712:	789b      	ldrb	r3, [r3, #2]
 8014714:	8111      	strh	r1, [r2, #8]
 8014716:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801471e:	4a3f      	ldr	r2, [pc, #252]	; (801481c <problem_fetch+0x12e8c>)
 8014720:	6810      	ldr	r0, [r2, #0]
 8014722:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2207      	movs	r2, #7
 8014728:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	33a4      	adds	r3, #164	; 0xa4
 801472e:	4a45      	ldr	r2, [pc, #276]	; (8014844 <problem_fetch+0x12eb4>)
 8014730:	461c      	mov	r4, r3
 8014732:	4613      	mov	r3, r2
 8014734:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014736:	6020      	str	r0, [r4, #0]
 8014738:	6061      	str	r1, [r4, #4]
 801473a:	60a2      	str	r2, [r4, #8]
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	3304      	adds	r3, #4
 8014744:	4a40      	ldr	r2, [pc, #256]	; (8014848 <problem_fetch+0x12eb8>)
 8014746:	461d      	mov	r5, r3
 8014748:	4614      	mov	r4, r2
 801474a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801474c:	6028      	str	r0, [r5, #0]
 801474e:	6069      	str	r1, [r5, #4]
 8014750:	60aa      	str	r2, [r5, #8]
 8014752:	60eb      	str	r3, [r5, #12]
 8014754:	8823      	ldrh	r3, [r4, #0]
 8014756:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801475e:	4a3b      	ldr	r2, [pc, #236]	; (801484c <problem_fetch+0x12ebc>)
 8014760:	461c      	mov	r4, r3
 8014762:	4613      	mov	r3, r2
 8014764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014766:	6020      	str	r0, [r4, #0]
 8014768:	6061      	str	r1, [r4, #4]
 801476a:	60a2      	str	r2, [r4, #8]
 801476c:	881b      	ldrh	r3, [r3, #0]
 801476e:	81a3      	strh	r3, [r4, #12]
			break;
 8014770:	f008 b83e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 557 :
			strcpy(p->name,"ALEXS PROBLEM NUMBER ONE");
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801477a:	4a35      	ldr	r2, [pc, #212]	; (8014850 <problem_fetch+0x12ec0>)
 801477c:	461d      	mov	r5, r3
 801477e:	4614      	mov	r4, r2
 8014780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014782:	6028      	str	r0, [r5, #0]
 8014784:	6069      	str	r1, [r5, #4]
 8014786:	60aa      	str	r2, [r5, #8]
 8014788:	60eb      	str	r3, [r5, #12]
 801478a:	cc03      	ldmia	r4!, {r0, r1}
 801478c:	6128      	str	r0, [r5, #16]
 801478e:	6169      	str	r1, [r5, #20]
 8014790:	7823      	ldrb	r3, [r4, #0]
 8014792:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801479a:	4a2e      	ldr	r2, [pc, #184]	; (8014854 <problem_fetch+0x12ec4>)
 801479c:	6810      	ldr	r0, [r2, #0]
 801479e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2208      	movs	r2, #8
 80147a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,B,E,A,D,D");
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	33a4      	adds	r3, #164	; 0xa4
 80147aa:	4a2b      	ldr	r2, [pc, #172]	; (8014858 <problem_fetch+0x12ec8>)
 80147ac:	461c      	mov	r4, r3
 80147ae:	4615      	mov	r5, r2
 80147b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147b2:	6020      	str	r0, [r4, #0]
 80147b4:	6061      	str	r1, [r4, #4]
 80147b6:	60a2      	str	r2, [r4, #8]
 80147b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,12,14,15,18");
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	3304      	adds	r3, #4
 80147be:	4a27      	ldr	r2, [pc, #156]	; (801485c <problem_fetch+0x12ecc>)
 80147c0:	461d      	mov	r5, r3
 80147c2:	4614      	mov	r4, r2
 80147c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147c6:	6028      	str	r0, [r5, #0]
 80147c8:	6069      	str	r1, [r5, #4]
 80147ca:	60aa      	str	r2, [r5, #8]
 80147cc:	60eb      	str	r3, [r5, #12]
 80147ce:	6820      	ldr	r0, [r4, #0]
 80147d0:	6128      	str	r0, [r5, #16]
 80147d2:	7923      	ldrb	r3, [r4, #4]
 80147d4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80147dc:	4a20      	ldr	r2, [pc, #128]	; (8014860 <problem_fetch+0x12ed0>)
 80147de:	461c      	mov	r4, r3
 80147e0:	4615      	mov	r5, r2
 80147e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80147e4:	6020      	str	r0, [r4, #0]
 80147e6:	6061      	str	r1, [r4, #4]
 80147e8:	60a2      	str	r2, [r4, #8]
 80147ea:	60e3      	str	r3, [r4, #12]
			break;
 80147ec:	f008 b800 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80147f0:	0802a52c 	.word	0x0802a52c
 80147f4:	08023d30 	.word	0x08023d30
 80147f8:	0802a548 	.word	0x0802a548
 80147fc:	0802a55c 	.word	0x0802a55c
 8014800:	08024ee8 	.word	0x08024ee8
 8014804:	0802a578 	.word	0x0802a578
 8014808:	08023b50 	.word	0x08023b50
 801480c:	0802a584 	.word	0x0802a584
 8014810:	080257cc 	.word	0x080257cc
 8014814:	0802405c 	.word	0x0802405c
 8014818:	0802a590 	.word	0x0802a590
 801481c:	08023c28 	.word	0x08023c28
 8014820:	0802a5a0 	.word	0x0802a5a0
 8014824:	0802a5b4 	.word	0x0802a5b4
 8014828:	08024b74 	.word	0x08024b74
 801482c:	0802a5cc 	.word	0x0802a5cc
 8014830:	080243c4 	.word	0x080243c4
 8014834:	0802a5d8 	.word	0x0802a5d8
 8014838:	08023ef4 	.word	0x08023ef4
 801483c:	08023b70 	.word	0x08023b70
 8014840:	0802a5e4 	.word	0x0802a5e4
 8014844:	0802a5f0 	.word	0x0802a5f0
 8014848:	08028878 	.word	0x08028878
 801484c:	08023d18 	.word	0x08023d18
 8014850:	0802a600 	.word	0x0802a600
 8014854:	08023b90 	.word	0x08023b90
 8014858:	0802a61c 	.word	0x0802a61c
 801485c:	0802a62c 	.word	0x0802a62c
 8014860:	08023cb4 	.word	0x08023cb4
		case 558 :
			strcpy(p->name,"BLABLUB");
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801486a:	49ab      	ldr	r1, [pc, #684]	; (8014b18 <problem_fetch+0x13188>)
 801486c:	461a      	mov	r2, r3
 801486e:	460b      	mov	r3, r1
 8014870:	cb03      	ldmia	r3!, {r0, r1}
 8014872:	6010      	str	r0, [r2, #0]
 8014874:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801487c:	4aa7      	ldr	r2, [pc, #668]	; (8014b1c <problem_fetch+0x1318c>)
 801487e:	8811      	ldrh	r1, [r2, #0]
 8014880:	7892      	ldrb	r2, [r2, #2]
 8014882:	8019      	strh	r1, [r3, #0]
 8014884:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	2207      	movs	r2, #7
 801488a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,E,A,D,D");
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	33a4      	adds	r3, #164	; 0xa4
 8014890:	4aa3      	ldr	r2, [pc, #652]	; (8014b20 <problem_fetch+0x13190>)
 8014892:	461c      	mov	r4, r3
 8014894:	4613      	mov	r3, r2
 8014896:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014898:	6020      	str	r0, [r4, #0]
 801489a:	6061      	str	r1, [r4, #4]
 801489c:	60a2      	str	r2, [r4, #8]
 801489e:	881b      	ldrh	r3, [r3, #0]
 80148a0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,10,12,14,15,18");
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	3304      	adds	r3, #4
 80148a6:	4a9f      	ldr	r2, [pc, #636]	; (8014b24 <problem_fetch+0x13194>)
 80148a8:	461d      	mov	r5, r3
 80148aa:	4614      	mov	r4, r2
 80148ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80148ae:	6028      	str	r0, [r5, #0]
 80148b0:	6069      	str	r1, [r5, #4]
 80148b2:	60aa      	str	r2, [r5, #8]
 80148b4:	60eb      	str	r3, [r5, #12]
 80148b6:	8823      	ldrh	r3, [r4, #0]
 80148b8:	78a2      	ldrb	r2, [r4, #2]
 80148ba:	822b      	strh	r3, [r5, #16]
 80148bc:	4613      	mov	r3, r2
 80148be:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80148c6:	4a98      	ldr	r2, [pc, #608]	; (8014b28 <problem_fetch+0x13198>)
 80148c8:	461c      	mov	r4, r3
 80148ca:	4613      	mov	r3, r2
 80148cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80148ce:	6020      	str	r0, [r4, #0]
 80148d0:	6061      	str	r1, [r4, #4]
 80148d2:	60a2      	str	r2, [r4, #8]
 80148d4:	881b      	ldrh	r3, [r3, #0]
 80148d6:	81a3      	strh	r3, [r4, #12]
			break;
 80148d8:	f007 bf8a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 559 :
			strcpy(p->name,"CRANK IT UP A NOTCH!");
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80148e2:	4a92      	ldr	r2, [pc, #584]	; (8014b2c <problem_fetch+0x1319c>)
 80148e4:	461d      	mov	r5, r3
 80148e6:	4614      	mov	r4, r2
 80148e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80148ea:	6028      	str	r0, [r5, #0]
 80148ec:	6069      	str	r1, [r5, #4]
 80148ee:	60aa      	str	r2, [r5, #8]
 80148f0:	60eb      	str	r3, [r5, #12]
 80148f2:	6820      	ldr	r0, [r4, #0]
 80148f4:	6128      	str	r0, [r5, #16]
 80148f6:	7923      	ldrb	r3, [r4, #4]
 80148f8:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014900:	4a8b      	ldr	r2, [pc, #556]	; (8014b30 <problem_fetch+0x131a0>)
 8014902:	6810      	ldr	r0, [r2, #0]
 8014904:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2204      	movs	r2, #4
 801490a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,D");
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	33a4      	adds	r3, #164	; 0xa4
 8014910:	4988      	ldr	r1, [pc, #544]	; (8014b34 <problem_fetch+0x131a4>)
 8014912:	461a      	mov	r2, r3
 8014914:	460b      	mov	r3, r1
 8014916:	cb03      	ldmia	r3!, {r0, r1}
 8014918:	6010      	str	r0, [r2, #0]
 801491a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,13,18");
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	3304      	adds	r3, #4
 8014920:	4985      	ldr	r1, [pc, #532]	; (8014b38 <problem_fetch+0x131a8>)
 8014922:	461a      	mov	r2, r3
 8014924:	460b      	mov	r3, r1
 8014926:	cb03      	ldmia	r3!, {r0, r1}
 8014928:	6010      	str	r0, [r2, #0]
 801492a:	6051      	str	r1, [r2, #4]
 801492c:	8819      	ldrh	r1, [r3, #0]
 801492e:	789b      	ldrb	r3, [r3, #2]
 8014930:	8111      	strh	r1, [r2, #8]
 8014932:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801493a:	4980      	ldr	r1, [pc, #512]	; (8014b3c <problem_fetch+0x131ac>)
 801493c:	461a      	mov	r2, r3
 801493e:	460b      	mov	r3, r1
 8014940:	cb03      	ldmia	r3!, {r0, r1}
 8014942:	6010      	str	r0, [r2, #0]
 8014944:	6051      	str	r1, [r2, #4]
			break;
 8014946:	f007 bf53 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 560 :
			strcpy(p->name,"HOLY IWAN");
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014950:	497b      	ldr	r1, [pc, #492]	; (8014b40 <problem_fetch+0x131b0>)
 8014952:	461a      	mov	r2, r3
 8014954:	460b      	mov	r3, r1
 8014956:	cb03      	ldmia	r3!, {r0, r1}
 8014958:	6010      	str	r0, [r2, #0]
 801495a:	6051      	str	r1, [r2, #4]
 801495c:	881b      	ldrh	r3, [r3, #0]
 801495e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014966:	4a77      	ldr	r2, [pc, #476]	; (8014b44 <problem_fetch+0x131b4>)
 8014968:	6810      	ldr	r0, [r2, #0]
 801496a:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	220a      	movs	r2, #10
 8014970:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,C,B,E,C,D,C,D");
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	33a4      	adds	r3, #164	; 0xa4
 8014976:	4a74      	ldr	r2, [pc, #464]	; (8014b48 <problem_fetch+0x131b8>)
 8014978:	461d      	mov	r5, r3
 801497a:	4614      	mov	r4, r2
 801497c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801497e:	6028      	str	r0, [r5, #0]
 8014980:	6069      	str	r1, [r5, #4]
 8014982:	60aa      	str	r2, [r5, #8]
 8014984:	60eb      	str	r3, [r5, #12]
 8014986:	6820      	ldr	r0, [r4, #0]
 8014988:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,8,10,12,13,15,16,18");
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	3304      	adds	r3, #4
 801498e:	4a6f      	ldr	r2, [pc, #444]	; (8014b4c <problem_fetch+0x131bc>)
 8014990:	461d      	mov	r5, r3
 8014992:	4614      	mov	r4, r2
 8014994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014996:	6028      	str	r0, [r5, #0]
 8014998:	6069      	str	r1, [r5, #4]
 801499a:	60aa      	str	r2, [r5, #8]
 801499c:	60eb      	str	r3, [r5, #12]
 801499e:	cc03      	ldmia	r4!, {r0, r1}
 80149a0:	6128      	str	r0, [r5, #16]
 80149a2:	6169      	str	r1, [r5, #20]
 80149a4:	8823      	ldrh	r3, [r4, #0]
 80149a6:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80149ae:	4a68      	ldr	r2, [pc, #416]	; (8014b50 <problem_fetch+0x131c0>)
 80149b0:	461d      	mov	r5, r3
 80149b2:	4614      	mov	r4, r2
 80149b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149b6:	6028      	str	r0, [r5, #0]
 80149b8:	6069      	str	r1, [r5, #4]
 80149ba:	60aa      	str	r2, [r5, #8]
 80149bc:	60eb      	str	r3, [r5, #12]
 80149be:	6820      	ldr	r0, [r4, #0]
 80149c0:	6128      	str	r0, [r5, #16]
			break;
 80149c2:	f007 bf15 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 561 :
			strcpy(p->name,"BLACK HOLE SUN");
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80149cc:	4a61      	ldr	r2, [pc, #388]	; (8014b54 <problem_fetch+0x131c4>)
 80149ce:	461c      	mov	r4, r3
 80149d0:	4613      	mov	r3, r2
 80149d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80149d4:	6020      	str	r0, [r4, #0]
 80149d6:	6061      	str	r1, [r4, #4]
 80149d8:	60a2      	str	r2, [r4, #8]
 80149da:	881a      	ldrh	r2, [r3, #0]
 80149dc:	789b      	ldrb	r3, [r3, #2]
 80149de:	81a2      	strh	r2, [r4, #12]
 80149e0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80149e8:	4a5b      	ldr	r2, [pc, #364]	; (8014b58 <problem_fetch+0x131c8>)
 80149ea:	8811      	ldrh	r1, [r2, #0]
 80149ec:	7892      	ldrb	r2, [r2, #2]
 80149ee:	8019      	strh	r1, [r3, #0]
 80149f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	2206      	movs	r2, #6
 80149f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,B,A");
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	33a4      	adds	r3, #164	; 0xa4
 80149fc:	4a57      	ldr	r2, [pc, #348]	; (8014b5c <problem_fetch+0x131cc>)
 80149fe:	461c      	mov	r4, r3
 8014a00:	4613      	mov	r3, r2
 8014a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a04:	6020      	str	r0, [r4, #0]
 8014a06:	6061      	str	r1, [r4, #4]
 8014a08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,15,18");
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	3304      	adds	r3, #4
 8014a0e:	4a54      	ldr	r2, [pc, #336]	; (8014b60 <problem_fetch+0x131d0>)
 8014a10:	461c      	mov	r4, r3
 8014a12:	4615      	mov	r5, r2
 8014a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a16:	6020      	str	r0, [r4, #0]
 8014a18:	6061      	str	r1, [r4, #4]
 8014a1a:	60a2      	str	r2, [r4, #8]
 8014a1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014a24:	4a4f      	ldr	r2, [pc, #316]	; (8014b64 <problem_fetch+0x131d4>)
 8014a26:	461c      	mov	r4, r3
 8014a28:	4613      	mov	r3, r2
 8014a2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a2c:	6020      	str	r0, [r4, #0]
 8014a2e:	6061      	str	r1, [r4, #4]
 8014a30:	60a2      	str	r2, [r4, #8]
			break;
 8014a32:	f007 bedd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 562 :
			strcpy(p->name,"모리");
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014a3c:	4a4a      	ldr	r2, [pc, #296]	; (8014b68 <problem_fetch+0x131d8>)
 8014a3e:	6810      	ldr	r0, [r2, #0]
 8014a40:	6018      	str	r0, [r3, #0]
 8014a42:	8891      	ldrh	r1, [r2, #4]
 8014a44:	7992      	ldrb	r2, [r2, #6]
 8014a46:	8099      	strh	r1, [r3, #4]
 8014a48:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014a50:	4a46      	ldr	r2, [pc, #280]	; (8014b6c <problem_fetch+0x131dc>)
 8014a52:	6810      	ldr	r0, [r2, #0]
 8014a54:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	2207      	movs	r2, #7
 8014a5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,B,D,E,I");
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	33a4      	adds	r3, #164	; 0xa4
 8014a60:	4a43      	ldr	r2, [pc, #268]	; (8014b70 <problem_fetch+0x131e0>)
 8014a62:	461c      	mov	r4, r3
 8014a64:	4613      	mov	r3, r2
 8014a66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a68:	6020      	str	r0, [r4, #0]
 8014a6a:	6061      	str	r1, [r4, #4]
 8014a6c:	60a2      	str	r2, [r4, #8]
 8014a6e:	881b      	ldrh	r3, [r3, #0]
 8014a70:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,15,16,18");
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	3304      	adds	r3, #4
 8014a76:	4a3f      	ldr	r2, [pc, #252]	; (8014b74 <problem_fetch+0x131e4>)
 8014a78:	461d      	mov	r5, r3
 8014a7a:	4614      	mov	r4, r2
 8014a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a7e:	6028      	str	r0, [r5, #0]
 8014a80:	6069      	str	r1, [r5, #4]
 8014a82:	60aa      	str	r2, [r5, #8]
 8014a84:	60eb      	str	r3, [r5, #12]
 8014a86:	8823      	ldrh	r3, [r4, #0]
 8014a88:	78a2      	ldrb	r2, [r4, #2]
 8014a8a:	822b      	strh	r3, [r5, #16]
 8014a8c:	4613      	mov	r3, r2
 8014a8e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014a96:	4a38      	ldr	r2, [pc, #224]	; (8014b78 <problem_fetch+0x131e8>)
 8014a98:	461c      	mov	r4, r3
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a9e:	6020      	str	r0, [r4, #0]
 8014aa0:	6061      	str	r1, [r4, #4]
 8014aa2:	60a2      	str	r2, [r4, #8]
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	81a3      	strh	r3, [r4, #12]
			break;
 8014aa8:	f007 bea2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 563 :
			strcpy(p->name,"DAN1");
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014ab2:	4a32      	ldr	r2, [pc, #200]	; (8014b7c <problem_fetch+0x131ec>)
 8014ab4:	6810      	ldr	r0, [r2, #0]
 8014ab6:	6018      	str	r0, [r3, #0]
 8014ab8:	7912      	ldrb	r2, [r2, #4]
 8014aba:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014ac2:	4a2a      	ldr	r2, [pc, #168]	; (8014b6c <problem_fetch+0x131dc>)
 8014ac4:	6810      	ldr	r0, [r2, #0]
 8014ac6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2208      	movs	r2, #8
 8014acc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,E,C,D,D");
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	33a4      	adds	r3, #164	; 0xa4
 8014ad2:	4a2b      	ldr	r2, [pc, #172]	; (8014b80 <problem_fetch+0x131f0>)
 8014ad4:	461c      	mov	r4, r3
 8014ad6:	4615      	mov	r5, r2
 8014ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ada:	6020      	str	r0, [r4, #0]
 8014adc:	6061      	str	r1, [r4, #4]
 8014ade:	60a2      	str	r2, [r4, #8]
 8014ae0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,13,15,18");
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	3304      	adds	r3, #4
 8014ae6:	4a27      	ldr	r2, [pc, #156]	; (8014b84 <problem_fetch+0x131f4>)
 8014ae8:	461d      	mov	r5, r3
 8014aea:	4614      	mov	r4, r2
 8014aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014aee:	6028      	str	r0, [r5, #0]
 8014af0:	6069      	str	r1, [r5, #4]
 8014af2:	60aa      	str	r2, [r5, #8]
 8014af4:	60eb      	str	r3, [r5, #12]
 8014af6:	6820      	ldr	r0, [r4, #0]
 8014af8:	6128      	str	r0, [r5, #16]
 8014afa:	7923      	ldrb	r3, [r4, #4]
 8014afc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014b04:	4a20      	ldr	r2, [pc, #128]	; (8014b88 <problem_fetch+0x131f8>)
 8014b06:	461c      	mov	r4, r3
 8014b08:	4615      	mov	r5, r2
 8014b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b0c:	6020      	str	r0, [r4, #0]
 8014b0e:	6061      	str	r1, [r4, #4]
 8014b10:	60a2      	str	r2, [r4, #8]
 8014b12:	60e3      	str	r3, [r4, #12]
			break;
 8014b14:	f007 be6c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8014b18:	0802a644 	.word	0x0802a644
 8014b1c:	08023c5c 	.word	0x08023c5c
 8014b20:	0802a64c 	.word	0x0802a64c
 8014b24:	0802a65c 	.word	0x0802a65c
 8014b28:	08023c08 	.word	0x08023c08
 8014b2c:	0802a670 	.word	0x0802a670
 8014b30:	08023d30 	.word	0x08023d30
 8014b34:	0802a688 	.word	0x0802a688
 8014b38:	0802a690 	.word	0x0802a690
 8014b3c:	08023ce4 	.word	0x08023ce4
 8014b40:	0802a69c 	.word	0x0802a69c
 8014b44:	08023b90 	.word	0x08023b90
 8014b48:	0802a6a8 	.word	0x0802a6a8
 8014b4c:	0802a6bc 	.word	0x0802a6bc
 8014b50:	08024438 	.word	0x08024438
 8014b54:	0802a6d8 	.word	0x0802a6d8
 8014b58:	08023b50 	.word	0x08023b50
 8014b5c:	0802a6e8 	.word	0x0802a6e8
 8014b60:	0802a6f4 	.word	0x0802a6f4
 8014b64:	08023f2c 	.word	0x08023f2c
 8014b68:	0802a704 	.word	0x0802a704
 8014b6c:	08023c28 	.word	0x08023c28
 8014b70:	0802a70c 	.word	0x0802a70c
 8014b74:	0802a71c 	.word	0x0802a71c
 8014b78:	08023d18 	.word	0x08023d18
 8014b7c:	0802a730 	.word	0x0802a730
 8014b80:	0802a738 	.word	0x0802a738
 8014b84:	0802a748 	.word	0x0802a748
 8014b88:	08023da0 	.word	0x08023da0
		case 564 :
			strcpy(p->name,"BLACK DOJO");
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014b92:	49b0      	ldr	r1, [pc, #704]	; (8014e54 <problem_fetch+0x134c4>)
 8014b94:	461a      	mov	r2, r3
 8014b96:	460b      	mov	r3, r1
 8014b98:	cb03      	ldmia	r3!, {r0, r1}
 8014b9a:	6010      	str	r0, [r2, #0]
 8014b9c:	6051      	str	r1, [r2, #4]
 8014b9e:	8819      	ldrh	r1, [r3, #0]
 8014ba0:	789b      	ldrb	r3, [r3, #2]
 8014ba2:	8111      	strh	r1, [r2, #8]
 8014ba4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014bac:	4aaa      	ldr	r2, [pc, #680]	; (8014e58 <problem_fetch+0x134c8>)
 8014bae:	8811      	ldrh	r1, [r2, #0]
 8014bb0:	7892      	ldrb	r2, [r2, #2]
 8014bb2:	8019      	strh	r1, [r3, #0]
 8014bb4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2206      	movs	r2, #6
 8014bba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,B,A");
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	33a4      	adds	r3, #164	; 0xa4
 8014bc0:	4aa6      	ldr	r2, [pc, #664]	; (8014e5c <problem_fetch+0x134cc>)
 8014bc2:	461c      	mov	r4, r3
 8014bc4:	4613      	mov	r3, r2
 8014bc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014bc8:	6020      	str	r0, [r4, #0]
 8014bca:	6061      	str	r1, [r4, #4]
 8014bcc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,16,11,10,18");
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	4aa3      	ldr	r2, [pc, #652]	; (8014e60 <problem_fetch+0x134d0>)
 8014bd4:	461c      	mov	r4, r3
 8014bd6:	4615      	mov	r5, r2
 8014bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bda:	6020      	str	r0, [r4, #0]
 8014bdc:	6061      	str	r1, [r4, #4]
 8014bde:	60a2      	str	r2, [r4, #8]
 8014be0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014be8:	4a9e      	ldr	r2, [pc, #632]	; (8014e64 <problem_fetch+0x134d4>)
 8014bea:	461c      	mov	r4, r3
 8014bec:	4613      	mov	r3, r2
 8014bee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014bf0:	6020      	str	r0, [r4, #0]
 8014bf2:	6061      	str	r1, [r4, #4]
 8014bf4:	60a2      	str	r2, [r4, #8]
			break;
 8014bf6:	f007 bdfb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 565 :
			strcpy(p->name,"SIMON");
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c00:	4a99      	ldr	r2, [pc, #612]	; (8014e68 <problem_fetch+0x134d8>)
 8014c02:	6810      	ldr	r0, [r2, #0]
 8014c04:	6018      	str	r0, [r3, #0]
 8014c06:	8892      	ldrh	r2, [r2, #4]
 8014c08:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c10:	4a96      	ldr	r2, [pc, #600]	; (8014e6c <problem_fetch+0x134dc>)
 8014c12:	6810      	ldr	r0, [r2, #0]
 8014c14:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2207      	movs	r2, #7
 8014c1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,I,F,B,G,A");
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	33a4      	adds	r3, #164	; 0xa4
 8014c20:	4a93      	ldr	r2, [pc, #588]	; (8014e70 <problem_fetch+0x134e0>)
 8014c22:	461c      	mov	r4, r3
 8014c24:	4613      	mov	r3, r2
 8014c26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c28:	6020      	str	r0, [r4, #0]
 8014c2a:	6061      	str	r1, [r4, #4]
 8014c2c:	60a2      	str	r2, [r4, #8]
 8014c2e:	881b      	ldrh	r3, [r3, #0]
 8014c30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,11,12,17,18");
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	3304      	adds	r3, #4
 8014c36:	4a8f      	ldr	r2, [pc, #572]	; (8014e74 <problem_fetch+0x134e4>)
 8014c38:	461d      	mov	r5, r3
 8014c3a:	4614      	mov	r4, r2
 8014c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c3e:	6028      	str	r0, [r5, #0]
 8014c40:	6069      	str	r1, [r5, #4]
 8014c42:	60aa      	str	r2, [r5, #8]
 8014c44:	60eb      	str	r3, [r5, #12]
 8014c46:	8823      	ldrh	r3, [r4, #0]
 8014c48:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014c50:	4a89      	ldr	r2, [pc, #548]	; (8014e78 <problem_fetch+0x134e8>)
 8014c52:	461c      	mov	r4, r3
 8014c54:	4613      	mov	r3, r2
 8014c56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014c58:	6020      	str	r0, [r4, #0]
 8014c5a:	6061      	str	r1, [r4, #4]
 8014c5c:	60a2      	str	r2, [r4, #8]
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	81a3      	strh	r3, [r4, #12]
			break;
 8014c62:	f007 bdc5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 566 :
			strcpy(p->name,"BLACK HOLDS MATTER");
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c6c:	4a83      	ldr	r2, [pc, #524]	; (8014e7c <problem_fetch+0x134ec>)
 8014c6e:	461d      	mov	r5, r3
 8014c70:	4614      	mov	r4, r2
 8014c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c74:	6028      	str	r0, [r5, #0]
 8014c76:	6069      	str	r1, [r5, #4]
 8014c78:	60aa      	str	r2, [r5, #8]
 8014c7a:	60eb      	str	r3, [r5, #12]
 8014c7c:	8823      	ldrh	r3, [r4, #0]
 8014c7e:	78a2      	ldrb	r2, [r4, #2]
 8014c80:	822b      	strh	r3, [r5, #16]
 8014c82:	4613      	mov	r3, r2
 8014c84:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c8c:	4a7c      	ldr	r2, [pc, #496]	; (8014e80 <problem_fetch+0x134f0>)
 8014c8e:	8811      	ldrh	r1, [r2, #0]
 8014c90:	7892      	ldrb	r2, [r2, #2]
 8014c92:	8019      	strh	r1, [r3, #0]
 8014c94:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	220b      	movs	r2, #11
 8014c9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,K,G,G,I");
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	33a4      	adds	r3, #164	; 0xa4
 8014ca0:	4a78      	ldr	r2, [pc, #480]	; (8014e84 <problem_fetch+0x134f4>)
 8014ca2:	461d      	mov	r5, r3
 8014ca4:	4614      	mov	r4, r2
 8014ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ca8:	6028      	str	r0, [r5, #0]
 8014caa:	6069      	str	r1, [r5, #4]
 8014cac:	60aa      	str	r2, [r5, #8]
 8014cae:	60eb      	str	r3, [r5, #12]
 8014cb0:	6820      	ldr	r0, [r4, #0]
 8014cb2:	6128      	str	r0, [r5, #16]
 8014cb4:	88a3      	ldrh	r3, [r4, #4]
 8014cb6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,14,17,15,18");
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3304      	adds	r3, #4
 8014cbc:	4a72      	ldr	r2, [pc, #456]	; (8014e88 <problem_fetch+0x134f8>)
 8014cbe:	461d      	mov	r5, r3
 8014cc0:	4614      	mov	r4, r2
 8014cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cc4:	6028      	str	r0, [r5, #0]
 8014cc6:	6069      	str	r1, [r5, #4]
 8014cc8:	60aa      	str	r2, [r5, #8]
 8014cca:	60eb      	str	r3, [r5, #12]
 8014ccc:	cc07      	ldmia	r4!, {r0, r1, r2}
 8014cce:	6128      	str	r0, [r5, #16]
 8014cd0:	6169      	str	r1, [r5, #20]
 8014cd2:	61aa      	str	r2, [r5, #24]
 8014cd4:	7823      	ldrb	r3, [r4, #0]
 8014cd6:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014cde:	4a6b      	ldr	r2, [pc, #428]	; (8014e8c <problem_fetch+0x134fc>)
 8014ce0:	461d      	mov	r5, r3
 8014ce2:	4614      	mov	r4, r2
 8014ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce6:	6028      	str	r0, [r5, #0]
 8014ce8:	6069      	str	r1, [r5, #4]
 8014cea:	60aa      	str	r2, [r5, #8]
 8014cec:	60eb      	str	r3, [r5, #12]
 8014cee:	6820      	ldr	r0, [r4, #0]
 8014cf0:	6128      	str	r0, [r5, #16]
 8014cf2:	88a3      	ldrh	r3, [r4, #4]
 8014cf4:	82ab      	strh	r3, [r5, #20]
			break;
 8014cf6:	f007 bd7b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 567 :
			strcpy(p->name,"SEANN'S START");
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d00:	4a63      	ldr	r2, [pc, #396]	; (8014e90 <problem_fetch+0x13500>)
 8014d02:	461c      	mov	r4, r3
 8014d04:	4613      	mov	r3, r2
 8014d06:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d08:	6020      	str	r0, [r4, #0]
 8014d0a:	6061      	str	r1, [r4, #4]
 8014d0c:	60a2      	str	r2, [r4, #8]
 8014d0e:	881b      	ldrh	r3, [r3, #0]
 8014d10:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d18:	4a5e      	ldr	r2, [pc, #376]	; (8014e94 <problem_fetch+0x13504>)
 8014d1a:	6810      	ldr	r0, [r2, #0]
 8014d1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2207      	movs	r2, #7
 8014d22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,E,G,D");
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	33a4      	adds	r3, #164	; 0xa4
 8014d28:	4a5b      	ldr	r2, [pc, #364]	; (8014e98 <problem_fetch+0x13508>)
 8014d2a:	461c      	mov	r4, r3
 8014d2c:	4613      	mov	r3, r2
 8014d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d30:	6020      	str	r0, [r4, #0]
 8014d32:	6061      	str	r1, [r4, #4]
 8014d34:	60a2      	str	r2, [r4, #8]
 8014d36:	881b      	ldrh	r3, [r3, #0]
 8014d38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,13,12,16,9,18");
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	3304      	adds	r3, #4
 8014d3e:	4a57      	ldr	r2, [pc, #348]	; (8014e9c <problem_fetch+0x1350c>)
 8014d40:	461d      	mov	r5, r3
 8014d42:	4614      	mov	r4, r2
 8014d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d46:	6028      	str	r0, [r5, #0]
 8014d48:	6069      	str	r1, [r5, #4]
 8014d4a:	60aa      	str	r2, [r5, #8]
 8014d4c:	60eb      	str	r3, [r5, #12]
 8014d4e:	8823      	ldrh	r3, [r4, #0]
 8014d50:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014d58:	4a51      	ldr	r2, [pc, #324]	; (8014ea0 <problem_fetch+0x13510>)
 8014d5a:	461c      	mov	r4, r3
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d60:	6020      	str	r0, [r4, #0]
 8014d62:	6061      	str	r1, [r4, #4]
 8014d64:	60a2      	str	r2, [r4, #8]
 8014d66:	881b      	ldrh	r3, [r3, #0]
 8014d68:	81a3      	strh	r3, [r4, #12]
			break;
 8014d6a:	f007 bd41 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 568 :
			strcpy(p->name,"BLACK POCKETS MATTER");
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d74:	4a4b      	ldr	r2, [pc, #300]	; (8014ea4 <problem_fetch+0x13514>)
 8014d76:	461d      	mov	r5, r3
 8014d78:	4614      	mov	r4, r2
 8014d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d7c:	6028      	str	r0, [r5, #0]
 8014d7e:	6069      	str	r1, [r5, #4]
 8014d80:	60aa      	str	r2, [r5, #8]
 8014d82:	60eb      	str	r3, [r5, #12]
 8014d84:	6820      	ldr	r0, [r4, #0]
 8014d86:	6128      	str	r0, [r5, #16]
 8014d88:	7923      	ldrb	r3, [r4, #4]
 8014d8a:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d92:	4a45      	ldr	r2, [pc, #276]	; (8014ea8 <problem_fetch+0x13518>)
 8014d94:	6810      	ldr	r0, [r2, #0]
 8014d96:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2208      	movs	r2, #8
 8014d9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,G,H,C,D");
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	33a4      	adds	r3, #164	; 0xa4
 8014da2:	4a42      	ldr	r2, [pc, #264]	; (8014eac <problem_fetch+0x1351c>)
 8014da4:	461c      	mov	r4, r3
 8014da6:	4615      	mov	r5, r2
 8014da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014daa:	6020      	str	r0, [r4, #0]
 8014dac:	6061      	str	r1, [r4, #4]
 8014dae:	60a2      	str	r2, [r4, #8]
 8014db0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,10,13,16,18");
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	3304      	adds	r3, #4
 8014db6:	4a3e      	ldr	r2, [pc, #248]	; (8014eb0 <problem_fetch+0x13520>)
 8014db8:	461d      	mov	r5, r3
 8014dba:	4614      	mov	r4, r2
 8014dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dbe:	6028      	str	r0, [r5, #0]
 8014dc0:	6069      	str	r1, [r5, #4]
 8014dc2:	60aa      	str	r2, [r5, #8]
 8014dc4:	60eb      	str	r3, [r5, #12]
 8014dc6:	6820      	ldr	r0, [r4, #0]
 8014dc8:	6128      	str	r0, [r5, #16]
 8014dca:	7923      	ldrb	r3, [r4, #4]
 8014dcc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014dd4:	4a37      	ldr	r2, [pc, #220]	; (8014eb4 <problem_fetch+0x13524>)
 8014dd6:	461c      	mov	r4, r3
 8014dd8:	4615      	mov	r5, r2
 8014dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ddc:	6020      	str	r0, [r4, #0]
 8014dde:	6061      	str	r1, [r4, #4]
 8014de0:	60a2      	str	r2, [r4, #8]
 8014de2:	60e3      	str	r3, [r4, #12]
			break;
 8014de4:	f007 bd04 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 569 :
			strcpy(p->name,"CAD");
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014dee:	4a32      	ldr	r2, [pc, #200]	; (8014eb8 <problem_fetch+0x13528>)
 8014df0:	6810      	ldr	r0, [r2, #0]
 8014df2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014dfa:	4a30      	ldr	r2, [pc, #192]	; (8014ebc <problem_fetch+0x1352c>)
 8014dfc:	8811      	ldrh	r1, [r2, #0]
 8014dfe:	7892      	ldrb	r2, [r2, #2]
 8014e00:	8019      	strh	r1, [r3, #0]
 8014e02:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2208      	movs	r2, #8
 8014e08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	33a4      	adds	r3, #164	; 0xa4
 8014e0e:	4a2c      	ldr	r2, [pc, #176]	; (8014ec0 <problem_fetch+0x13530>)
 8014e10:	461c      	mov	r4, r3
 8014e12:	4615      	mov	r5, r2
 8014e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e16:	6020      	str	r0, [r4, #0]
 8014e18:	6061      	str	r1, [r4, #4]
 8014e1a:	60a2      	str	r2, [r4, #8]
 8014e1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	3304      	adds	r3, #4
 8014e22:	4a28      	ldr	r2, [pc, #160]	; (8014ec4 <problem_fetch+0x13534>)
 8014e24:	461d      	mov	r5, r3
 8014e26:	4614      	mov	r4, r2
 8014e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e2a:	6028      	str	r0, [r5, #0]
 8014e2c:	6069      	str	r1, [r5, #4]
 8014e2e:	60aa      	str	r2, [r5, #8]
 8014e30:	60eb      	str	r3, [r5, #12]
 8014e32:	6820      	ldr	r0, [r4, #0]
 8014e34:	6128      	str	r0, [r5, #16]
 8014e36:	7923      	ldrb	r3, [r4, #4]
 8014e38:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014e40:	4a1c      	ldr	r2, [pc, #112]	; (8014eb4 <problem_fetch+0x13524>)
 8014e42:	461c      	mov	r4, r3
 8014e44:	4615      	mov	r5, r2
 8014e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e48:	6020      	str	r0, [r4, #0]
 8014e4a:	6061      	str	r1, [r4, #4]
 8014e4c:	60a2      	str	r2, [r4, #8]
 8014e4e:	60e3      	str	r3, [r4, #12]
			break;
 8014e50:	f007 bcce 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8014e54:	0802a760 	.word	0x0802a760
 8014e58:	08024288 	.word	0x08024288
 8014e5c:	0802a76c 	.word	0x0802a76c
 8014e60:	0802a778 	.word	0x0802a778
 8014e64:	08023b70 	.word	0x08023b70
 8014e68:	0802a788 	.word	0x0802a788
 8014e6c:	0802419c 	.word	0x0802419c
 8014e70:	0802a790 	.word	0x0802a790
 8014e74:	0802a7a0 	.word	0x0802a7a0
 8014e78:	08023c08 	.word	0x08023c08
 8014e7c:	0802a7b4 	.word	0x0802a7b4
 8014e80:	08023c5c 	.word	0x08023c5c
 8014e84:	0802a7c8 	.word	0x0802a7c8
 8014e88:	0802a7e0 	.word	0x0802a7e0
 8014e8c:	080274f0 	.word	0x080274f0
 8014e90:	0802a800 	.word	0x0802a800
 8014e94:	08023b90 	.word	0x08023b90
 8014e98:	0802a810 	.word	0x0802a810
 8014e9c:	0802a820 	.word	0x0802a820
 8014ea0:	08023d18 	.word	0x08023d18
 8014ea4:	0802a834 	.word	0x0802a834
 8014ea8:	08023d30 	.word	0x08023d30
 8014eac:	0802a84c 	.word	0x0802a84c
 8014eb0:	0802a85c 	.word	0x0802a85c
 8014eb4:	08023cb4 	.word	0x08023cb4
 8014eb8:	0802a874 	.word	0x0802a874
 8014ebc:	08023b50 	.word	0x08023b50
 8014ec0:	0802a878 	.word	0x0802a878
 8014ec4:	0802a888 	.word	0x0802a888
		case 570 :
			strcpy(p->name,"CAD");
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014ece:	4aa8      	ldr	r2, [pc, #672]	; (8015170 <problem_fetch+0x137e0>)
 8014ed0:	6810      	ldr	r0, [r2, #0]
 8014ed2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014eda:	4aa6      	ldr	r2, [pc, #664]	; (8015174 <problem_fetch+0x137e4>)
 8014edc:	8811      	ldrh	r1, [r2, #0]
 8014ede:	7892      	ldrb	r2, [r2, #2]
 8014ee0:	8019      	strh	r1, [r3, #0]
 8014ee2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2208      	movs	r2, #8
 8014ee8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	33a4      	adds	r3, #164	; 0xa4
 8014eee:	4aa2      	ldr	r2, [pc, #648]	; (8015178 <problem_fetch+0x137e8>)
 8014ef0:	461c      	mov	r4, r3
 8014ef2:	4615      	mov	r5, r2
 8014ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ef6:	6020      	str	r0, [r4, #0]
 8014ef8:	6061      	str	r1, [r4, #4]
 8014efa:	60a2      	str	r2, [r4, #8]
 8014efc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	3304      	adds	r3, #4
 8014f02:	4a9e      	ldr	r2, [pc, #632]	; (801517c <problem_fetch+0x137ec>)
 8014f04:	461d      	mov	r5, r3
 8014f06:	4614      	mov	r4, r2
 8014f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f0a:	6028      	str	r0, [r5, #0]
 8014f0c:	6069      	str	r1, [r5, #4]
 8014f0e:	60aa      	str	r2, [r5, #8]
 8014f10:	60eb      	str	r3, [r5, #12]
 8014f12:	6820      	ldr	r0, [r4, #0]
 8014f14:	6128      	str	r0, [r5, #16]
 8014f16:	7923      	ldrb	r3, [r4, #4]
 8014f18:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014f20:	4a97      	ldr	r2, [pc, #604]	; (8015180 <problem_fetch+0x137f0>)
 8014f22:	461c      	mov	r4, r3
 8014f24:	4615      	mov	r5, r2
 8014f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f28:	6020      	str	r0, [r4, #0]
 8014f2a:	6061      	str	r1, [r4, #4]
 8014f2c:	60a2      	str	r2, [r4, #8]
 8014f2e:	60e3      	str	r3, [r4, #12]
			break;
 8014f30:	f007 bc5e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 571 :
			strcpy(p->name,"TIGHT BOX");
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f3a:	4992      	ldr	r1, [pc, #584]	; (8015184 <problem_fetch+0x137f4>)
 8014f3c:	461a      	mov	r2, r3
 8014f3e:	460b      	mov	r3, r1
 8014f40:	cb03      	ldmia	r3!, {r0, r1}
 8014f42:	6010      	str	r0, [r2, #0]
 8014f44:	6051      	str	r1, [r2, #4]
 8014f46:	881b      	ldrh	r3, [r3, #0]
 8014f48:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014f50:	4a8d      	ldr	r2, [pc, #564]	; (8015188 <problem_fetch+0x137f8>)
 8014f52:	6810      	ldr	r0, [r2, #0]
 8014f54:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	2208      	movs	r2, #8
 8014f5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,A,D,E,G,D");
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	33a4      	adds	r3, #164	; 0xa4
 8014f60:	4a8a      	ldr	r2, [pc, #552]	; (801518c <problem_fetch+0x137fc>)
 8014f62:	461c      	mov	r4, r3
 8014f64:	4615      	mov	r5, r2
 8014f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f68:	6020      	str	r0, [r4, #0]
 8014f6a:	6061      	str	r1, [r4, #4]
 8014f6c:	60a2      	str	r2, [r4, #8]
 8014f6e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,9,11,12,17,18");
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	3304      	adds	r3, #4
 8014f74:	4a86      	ldr	r2, [pc, #536]	; (8015190 <problem_fetch+0x13800>)
 8014f76:	461d      	mov	r5, r3
 8014f78:	4614      	mov	r4, r2
 8014f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f7c:	6028      	str	r0, [r5, #0]
 8014f7e:	6069      	str	r1, [r5, #4]
 8014f80:	60aa      	str	r2, [r5, #8]
 8014f82:	60eb      	str	r3, [r5, #12]
 8014f84:	6820      	ldr	r0, [r4, #0]
 8014f86:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014f8e:	4a7c      	ldr	r2, [pc, #496]	; (8015180 <problem_fetch+0x137f0>)
 8014f90:	461c      	mov	r4, r3
 8014f92:	4615      	mov	r5, r2
 8014f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f96:	6020      	str	r0, [r4, #0]
 8014f98:	6061      	str	r1, [r4, #4]
 8014f9a:	60a2      	str	r2, [r4, #8]
 8014f9c:	60e3      	str	r3, [r4, #12]
			break;
 8014f9e:	f007 bc27 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 572 :
			strcpy(p->name,"TIGER");
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014fa8:	4a7a      	ldr	r2, [pc, #488]	; (8015194 <problem_fetch+0x13804>)
 8014faa:	6810      	ldr	r0, [r2, #0]
 8014fac:	6018      	str	r0, [r3, #0]
 8014fae:	8892      	ldrh	r2, [r2, #4]
 8014fb0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014fb8:	4a73      	ldr	r2, [pc, #460]	; (8015188 <problem_fetch+0x137f8>)
 8014fba:	6810      	ldr	r0, [r2, #0]
 8014fbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	2207      	movs	r2, #7
 8014fc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,G,H,C,C,A");
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	33a4      	adds	r3, #164	; 0xa4
 8014fc8:	4a73      	ldr	r2, [pc, #460]	; (8015198 <problem_fetch+0x13808>)
 8014fca:	461c      	mov	r4, r3
 8014fcc:	4613      	mov	r3, r2
 8014fce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014fd0:	6020      	str	r0, [r4, #0]
 8014fd2:	6061      	str	r1, [r4, #4]
 8014fd4:	60a2      	str	r2, [r4, #8]
 8014fd6:	881b      	ldrh	r3, [r3, #0]
 8014fd8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,13,16,13,18");
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	3304      	adds	r3, #4
 8014fde:	4a6f      	ldr	r2, [pc, #444]	; (801519c <problem_fetch+0x1380c>)
 8014fe0:	461d      	mov	r5, r3
 8014fe2:	4614      	mov	r4, r2
 8014fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fe6:	6028      	str	r0, [r5, #0]
 8014fe8:	6069      	str	r1, [r5, #4]
 8014fea:	60aa      	str	r2, [r5, #8]
 8014fec:	60eb      	str	r3, [r5, #12]
 8014fee:	8823      	ldrh	r3, [r4, #0]
 8014ff0:	78a2      	ldrb	r2, [r4, #2]
 8014ff2:	822b      	strh	r3, [r5, #16]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014ffe:	4a68      	ldr	r2, [pc, #416]	; (80151a0 <problem_fetch+0x13810>)
 8015000:	461c      	mov	r4, r3
 8015002:	4613      	mov	r3, r2
 8015004:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015006:	6020      	str	r0, [r4, #0]
 8015008:	6061      	str	r1, [r4, #4]
 801500a:	60a2      	str	r2, [r4, #8]
 801500c:	881b      	ldrh	r3, [r3, #0]
 801500e:	81a3      	strh	r3, [r4, #12]
			break;
 8015010:	f007 bbee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 573 :
			strcpy(p->name,"V1.");
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801501a:	4a62      	ldr	r2, [pc, #392]	; (80151a4 <problem_fetch+0x13814>)
 801501c:	6810      	ldr	r0, [r2, #0]
 801501e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015026:	4a60      	ldr	r2, [pc, #384]	; (80151a8 <problem_fetch+0x13818>)
 8015028:	6810      	ldr	r0, [r2, #0]
 801502a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2209      	movs	r2, #9
 8015030:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,C,G,C,E,A,C,A");
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	33a4      	adds	r3, #164	; 0xa4
 8015036:	4a5d      	ldr	r2, [pc, #372]	; (80151ac <problem_fetch+0x1381c>)
 8015038:	461d      	mov	r5, r3
 801503a:	4614      	mov	r4, r2
 801503c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801503e:	6028      	str	r0, [r5, #0]
 8015040:	6069      	str	r1, [r5, #4]
 8015042:	60aa      	str	r2, [r5, #8]
 8015044:	60eb      	str	r3, [r5, #12]
 8015046:	8823      	ldrh	r3, [r4, #0]
 8015048:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,13,14,14,16,18");
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	3304      	adds	r3, #4
 801504e:	4a58      	ldr	r2, [pc, #352]	; (80151b0 <problem_fetch+0x13820>)
 8015050:	461d      	mov	r5, r3
 8015052:	4614      	mov	r4, r2
 8015054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015056:	6028      	str	r0, [r5, #0]
 8015058:	6069      	str	r1, [r5, #4]
 801505a:	60aa      	str	r2, [r5, #8]
 801505c:	60eb      	str	r3, [r5, #12]
 801505e:	cc03      	ldmia	r4!, {r0, r1}
 8015060:	6128      	str	r0, [r5, #16]
 8015062:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801506a:	4a52      	ldr	r2, [pc, #328]	; (80151b4 <problem_fetch+0x13824>)
 801506c:	461d      	mov	r5, r3
 801506e:	4614      	mov	r4, r2
 8015070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015072:	6028      	str	r0, [r5, #0]
 8015074:	6069      	str	r1, [r5, #4]
 8015076:	60aa      	str	r2, [r5, #8]
 8015078:	60eb      	str	r3, [r5, #12]
 801507a:	8823      	ldrh	r3, [r4, #0]
 801507c:	822b      	strh	r3, [r5, #16]
			break;
 801507e:	f007 bbb7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 574 :
			strcpy(p->name,"FOUL LANGUAGE");
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015088:	4a4b      	ldr	r2, [pc, #300]	; (80151b8 <problem_fetch+0x13828>)
 801508a:	461c      	mov	r4, r3
 801508c:	4613      	mov	r3, r2
 801508e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015090:	6020      	str	r0, [r4, #0]
 8015092:	6061      	str	r1, [r4, #4]
 8015094:	60a2      	str	r2, [r4, #8]
 8015096:	881b      	ldrh	r3, [r3, #0]
 8015098:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80150a0:	4a39      	ldr	r2, [pc, #228]	; (8015188 <problem_fetch+0x137f8>)
 80150a2:	6810      	ldr	r0, [r2, #0]
 80150a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	2209      	movs	r2, #9
 80150aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,K,G,G,B,D");
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	33a4      	adds	r3, #164	; 0xa4
 80150b0:	4a42      	ldr	r2, [pc, #264]	; (80151bc <problem_fetch+0x1382c>)
 80150b2:	461d      	mov	r5, r3
 80150b4:	4614      	mov	r4, r2
 80150b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150b8:	6028      	str	r0, [r5, #0]
 80150ba:	6069      	str	r1, [r5, #4]
 80150bc:	60aa      	str	r2, [r5, #8]
 80150be:	60eb      	str	r3, [r5, #12]
 80150c0:	8823      	ldrh	r3, [r4, #0]
 80150c2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,12,14,14,17,12,18");
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	3304      	adds	r3, #4
 80150c8:	4a3d      	ldr	r2, [pc, #244]	; (80151c0 <problem_fetch+0x13830>)
 80150ca:	461d      	mov	r5, r3
 80150cc:	4614      	mov	r4, r2
 80150ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150d0:	6028      	str	r0, [r5, #0]
 80150d2:	6069      	str	r1, [r5, #4]
 80150d4:	60aa      	str	r2, [r5, #8]
 80150d6:	60eb      	str	r3, [r5, #12]
 80150d8:	cc03      	ldmia	r4!, {r0, r1}
 80150da:	6128      	str	r0, [r5, #16]
 80150dc:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80150e4:	4a33      	ldr	r2, [pc, #204]	; (80151b4 <problem_fetch+0x13824>)
 80150e6:	461d      	mov	r5, r3
 80150e8:	4614      	mov	r4, r2
 80150ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150ec:	6028      	str	r0, [r5, #0]
 80150ee:	6069      	str	r1, [r5, #4]
 80150f0:	60aa      	str	r2, [r5, #8]
 80150f2:	60eb      	str	r3, [r5, #12]
 80150f4:	8823      	ldrh	r3, [r4, #0]
 80150f6:	822b      	strh	r3, [r5, #16]
			break;
 80150f8:	f007 bb7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 575 :
			strcpy(p->name,"BLACK HAWK DOWN");
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015102:	4a30      	ldr	r2, [pc, #192]	; (80151c4 <problem_fetch+0x13834>)
 8015104:	461c      	mov	r4, r3
 8015106:	4615      	mov	r5, r2
 8015108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801510a:	6020      	str	r0, [r4, #0]
 801510c:	6061      	str	r1, [r4, #4]
 801510e:	60a2      	str	r2, [r4, #8]
 8015110:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015118:	4a1b      	ldr	r2, [pc, #108]	; (8015188 <problem_fetch+0x137f8>)
 801511a:	6810      	ldr	r0, [r2, #0]
 801511c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	2207      	movs	r2, #7
 8015122:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,G,D,E,D");
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	33a4      	adds	r3, #164	; 0xa4
 8015128:	4a27      	ldr	r2, [pc, #156]	; (80151c8 <problem_fetch+0x13838>)
 801512a:	461c      	mov	r4, r3
 801512c:	4613      	mov	r3, r2
 801512e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015130:	6020      	str	r0, [r4, #0]
 8015132:	6061      	str	r1, [r4, #4]
 8015134:	60a2      	str	r2, [r4, #8]
 8015136:	881b      	ldrh	r3, [r3, #0]
 8015138:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,15,9,11,14,18");
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	3304      	adds	r3, #4
 801513e:	4a23      	ldr	r2, [pc, #140]	; (80151cc <problem_fetch+0x1383c>)
 8015140:	461d      	mov	r5, r3
 8015142:	4614      	mov	r4, r2
 8015144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015146:	6028      	str	r0, [r5, #0]
 8015148:	6069      	str	r1, [r5, #4]
 801514a:	60aa      	str	r2, [r5, #8]
 801514c:	60eb      	str	r3, [r5, #12]
 801514e:	8823      	ldrh	r3, [r4, #0]
 8015150:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015158:	4a11      	ldr	r2, [pc, #68]	; (80151a0 <problem_fetch+0x13810>)
 801515a:	461c      	mov	r4, r3
 801515c:	4613      	mov	r3, r2
 801515e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015160:	6020      	str	r0, [r4, #0]
 8015162:	6061      	str	r1, [r4, #4]
 8015164:	60a2      	str	r2, [r4, #8]
 8015166:	881b      	ldrh	r3, [r3, #0]
 8015168:	81a3      	strh	r3, [r4, #12]
			break;
 801516a:	f007 bb41 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801516e:	bf00      	nop
 8015170:	0802a874 	.word	0x0802a874
 8015174:	08023b50 	.word	0x08023b50
 8015178:	0802a878 	.word	0x0802a878
 801517c:	0802a888 	.word	0x0802a888
 8015180:	08023cb4 	.word	0x08023cb4
 8015184:	0802a8a0 	.word	0x0802a8a0
 8015188:	08023c28 	.word	0x08023c28
 801518c:	0802a8ac 	.word	0x0802a8ac
 8015190:	0802a8bc 	.word	0x0802a8bc
 8015194:	0802a8d0 	.word	0x0802a8d0
 8015198:	0802a8d8 	.word	0x0802a8d8
 801519c:	0802a8e8 	.word	0x0802a8e8
 80151a0:	08023d18 	.word	0x08023d18
 80151a4:	0802a8fc 	.word	0x0802a8fc
 80151a8:	08023b90 	.word	0x08023b90
 80151ac:	0802a900 	.word	0x0802a900
 80151b0:	0802a914 	.word	0x0802a914
 80151b4:	08024b74 	.word	0x08024b74
 80151b8:	0802a92c 	.word	0x0802a92c
 80151bc:	0802a93c 	.word	0x0802a93c
 80151c0:	0802a950 	.word	0x0802a950
 80151c4:	0802a968 	.word	0x0802a968
 80151c8:	0802a978 	.word	0x0802a978
 80151cc:	0802a988 	.word	0x0802a988
		case 576 :
			strcpy(p->name,"2 BLACK 2 HARD");
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80151d6:	4aae      	ldr	r2, [pc, #696]	; (8015490 <problem_fetch+0x13b00>)
 80151d8:	461c      	mov	r4, r3
 80151da:	4613      	mov	r3, r2
 80151dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151de:	6020      	str	r0, [r4, #0]
 80151e0:	6061      	str	r1, [r4, #4]
 80151e2:	60a2      	str	r2, [r4, #8]
 80151e4:	881a      	ldrh	r2, [r3, #0]
 80151e6:	789b      	ldrb	r3, [r3, #2]
 80151e8:	81a2      	strh	r2, [r4, #12]
 80151ea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"8A+");
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80151f2:	4aa8      	ldr	r2, [pc, #672]	; (8015494 <problem_fetch+0x13b04>)
 80151f4:	6810      	ldr	r0, [r2, #0]
 80151f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	2205      	movs	r2, #5
 80151fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,D,A");
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	33a4      	adds	r3, #164	; 0xa4
 8015202:	49a5      	ldr	r1, [pc, #660]	; (8015498 <problem_fetch+0x13b08>)
 8015204:	461a      	mov	r2, r3
 8015206:	460b      	mov	r3, r1
 8015208:	cb03      	ldmia	r3!, {r0, r1}
 801520a:	6010      	str	r0, [r2, #0]
 801520c:	6051      	str	r1, [r2, #4]
 801520e:	881b      	ldrh	r3, [r3, #0]
 8015210:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,9,15,18");
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3304      	adds	r3, #4
 8015216:	4aa1      	ldr	r2, [pc, #644]	; (801549c <problem_fetch+0x13b0c>)
 8015218:	461c      	mov	r4, r3
 801521a:	4613      	mov	r3, r2
 801521c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801521e:	6020      	str	r0, [r4, #0]
 8015220:	6061      	str	r1, [r4, #4]
 8015222:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801522a:	499d      	ldr	r1, [pc, #628]	; (80154a0 <problem_fetch+0x13b10>)
 801522c:	461a      	mov	r2, r3
 801522e:	460b      	mov	r3, r1
 8015230:	cb03      	ldmia	r3!, {r0, r1}
 8015232:	6010      	str	r0, [r2, #0]
 8015234:	6051      	str	r1, [r2, #4]
 8015236:	881b      	ldrh	r3, [r3, #0]
 8015238:	8113      	strh	r3, [r2, #8]
			break;
 801523a:	f007 bad9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 577 :
			strcpy(p->name,"カラス");
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015244:	4997      	ldr	r1, [pc, #604]	; (80154a4 <problem_fetch+0x13b14>)
 8015246:	461a      	mov	r2, r3
 8015248:	460b      	mov	r3, r1
 801524a:	cb03      	ldmia	r3!, {r0, r1}
 801524c:	6010      	str	r0, [r2, #0]
 801524e:	6051      	str	r1, [r2, #4]
 8015250:	881b      	ldrh	r3, [r3, #0]
 8015252:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801525a:	4a93      	ldr	r2, [pc, #588]	; (80154a8 <problem_fetch+0x13b18>)
 801525c:	8811      	ldrh	r1, [r2, #0]
 801525e:	7892      	ldrb	r2, [r2, #2]
 8015260:	8019      	strh	r1, [r3, #0]
 8015262:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	2207      	movs	r2, #7
 8015268:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,H,I,E,D");
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	33a4      	adds	r3, #164	; 0xa4
 801526e:	4a8f      	ldr	r2, [pc, #572]	; (80154ac <problem_fetch+0x13b1c>)
 8015270:	461c      	mov	r4, r3
 8015272:	4613      	mov	r3, r2
 8015274:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015276:	6020      	str	r0, [r4, #0]
 8015278:	6061      	str	r1, [r4, #4]
 801527a:	60a2      	str	r2, [r4, #8]
 801527c:	881b      	ldrh	r3, [r3, #0]
 801527e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,14,16,18");
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	3304      	adds	r3, #4
 8015284:	4a8a      	ldr	r2, [pc, #552]	; (80154b0 <problem_fetch+0x13b20>)
 8015286:	461d      	mov	r5, r3
 8015288:	4614      	mov	r4, r2
 801528a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801528c:	6028      	str	r0, [r5, #0]
 801528e:	6069      	str	r1, [r5, #4]
 8015290:	60aa      	str	r2, [r5, #8]
 8015292:	60eb      	str	r3, [r5, #12]
 8015294:	8823      	ldrh	r3, [r4, #0]
 8015296:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801529e:	4a85      	ldr	r2, [pc, #532]	; (80154b4 <problem_fetch+0x13b24>)
 80152a0:	461c      	mov	r4, r3
 80152a2:	4613      	mov	r3, r2
 80152a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152a6:	6020      	str	r0, [r4, #0]
 80152a8:	6061      	str	r1, [r4, #4]
 80152aa:	60a2      	str	r2, [r4, #8]
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	81a3      	strh	r3, [r4, #12]
			break;
 80152b0:	f007 ba9e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 578 :
			strcpy(p->name,"TOMTOM");
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80152ba:	4a7f      	ldr	r2, [pc, #508]	; (80154b8 <problem_fetch+0x13b28>)
 80152bc:	6810      	ldr	r0, [r2, #0]
 80152be:	6018      	str	r0, [r3, #0]
 80152c0:	8891      	ldrh	r1, [r2, #4]
 80152c2:	7992      	ldrb	r2, [r2, #6]
 80152c4:	8099      	strh	r1, [r3, #4]
 80152c6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80152ce:	4a7b      	ldr	r2, [pc, #492]	; (80154bc <problem_fetch+0x13b2c>)
 80152d0:	6810      	ldr	r0, [r2, #0]
 80152d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	2205      	movs	r2, #5
 80152d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,A");
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	33a4      	adds	r3, #164	; 0xa4
 80152de:	4978      	ldr	r1, [pc, #480]	; (80154c0 <problem_fetch+0x13b30>)
 80152e0:	461a      	mov	r2, r3
 80152e2:	460b      	mov	r3, r1
 80152e4:	cb03      	ldmia	r3!, {r0, r1}
 80152e6:	6010      	str	r0, [r2, #0]
 80152e8:	6051      	str	r1, [r2, #4]
 80152ea:	881b      	ldrh	r3, [r3, #0]
 80152ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,15,18");
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	3304      	adds	r3, #4
 80152f2:	4a74      	ldr	r2, [pc, #464]	; (80154c4 <problem_fetch+0x13b34>)
 80152f4:	461c      	mov	r4, r3
 80152f6:	4613      	mov	r3, r2
 80152f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152fa:	6020      	str	r0, [r4, #0]
 80152fc:	6061      	str	r1, [r4, #4]
 80152fe:	60a2      	str	r2, [r4, #8]
 8015300:	881b      	ldrh	r3, [r3, #0]
 8015302:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801530a:	496f      	ldr	r1, [pc, #444]	; (80154c8 <problem_fetch+0x13b38>)
 801530c:	461a      	mov	r2, r3
 801530e:	460b      	mov	r3, r1
 8015310:	cb03      	ldmia	r3!, {r0, r1}
 8015312:	6010      	str	r0, [r2, #0]
 8015314:	6051      	str	r1, [r2, #4]
 8015316:	881b      	ldrh	r3, [r3, #0]
 8015318:	8113      	strh	r3, [r2, #8]
			break;
 801531a:	f007 ba69 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 579 :
			strcpy(p->name,"THE GREAT HAMBINO");
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015324:	4a69      	ldr	r2, [pc, #420]	; (80154cc <problem_fetch+0x13b3c>)
 8015326:	461d      	mov	r5, r3
 8015328:	4614      	mov	r4, r2
 801532a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801532c:	6028      	str	r0, [r5, #0]
 801532e:	6069      	str	r1, [r5, #4]
 8015330:	60aa      	str	r2, [r5, #8]
 8015332:	60eb      	str	r3, [r5, #12]
 8015334:	8823      	ldrh	r3, [r4, #0]
 8015336:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801533e:	4a64      	ldr	r2, [pc, #400]	; (80154d0 <problem_fetch+0x13b40>)
 8015340:	6810      	ldr	r0, [r2, #0]
 8015342:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2209      	movs	r2, #9
 8015348:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,F,E,G,G,I");
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	33a4      	adds	r3, #164	; 0xa4
 801534e:	4a61      	ldr	r2, [pc, #388]	; (80154d4 <problem_fetch+0x13b44>)
 8015350:	461d      	mov	r5, r3
 8015352:	4614      	mov	r4, r2
 8015354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015356:	6028      	str	r0, [r5, #0]
 8015358:	6069      	str	r1, [r5, #4]
 801535a:	60aa      	str	r2, [r5, #8]
 801535c:	60eb      	str	r3, [r5, #12]
 801535e:	8823      	ldrh	r3, [r4, #0]
 8015360:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,8,11,12,14,15,18");
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	3304      	adds	r3, #4
 8015366:	4a5c      	ldr	r2, [pc, #368]	; (80154d8 <problem_fetch+0x13b48>)
 8015368:	461c      	mov	r4, r3
 801536a:	4615      	mov	r5, r2
 801536c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801536e:	6020      	str	r0, [r4, #0]
 8015370:	6061      	str	r1, [r4, #4]
 8015372:	60a2      	str	r2, [r4, #8]
 8015374:	60e3      	str	r3, [r4, #12]
 8015376:	6828      	ldr	r0, [r5, #0]
 8015378:	6120      	str	r0, [r4, #16]
 801537a:	88ab      	ldrh	r3, [r5, #4]
 801537c:	79aa      	ldrb	r2, [r5, #6]
 801537e:	82a3      	strh	r3, [r4, #20]
 8015380:	4613      	mov	r3, r2
 8015382:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801538a:	4a54      	ldr	r2, [pc, #336]	; (80154dc <problem_fetch+0x13b4c>)
 801538c:	461d      	mov	r5, r3
 801538e:	4614      	mov	r4, r2
 8015390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015392:	6028      	str	r0, [r5, #0]
 8015394:	6069      	str	r1, [r5, #4]
 8015396:	60aa      	str	r2, [r5, #8]
 8015398:	60eb      	str	r3, [r5, #12]
 801539a:	8823      	ldrh	r3, [r4, #0]
 801539c:	822b      	strh	r3, [r5, #16]
			break;
 801539e:	f007 ba27 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 580 :
			strcpy(p->name,"OUT THERE");
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80153a8:	494d      	ldr	r1, [pc, #308]	; (80154e0 <problem_fetch+0x13b50>)
 80153aa:	461a      	mov	r2, r3
 80153ac:	460b      	mov	r3, r1
 80153ae:	cb03      	ldmia	r3!, {r0, r1}
 80153b0:	6010      	str	r0, [r2, #0]
 80153b2:	6051      	str	r1, [r2, #4]
 80153b4:	881b      	ldrh	r3, [r3, #0]
 80153b6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80153be:	4a44      	ldr	r2, [pc, #272]	; (80154d0 <problem_fetch+0x13b40>)
 80153c0:	6810      	ldr	r0, [r2, #0]
 80153c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	2207      	movs	r2, #7
 80153c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,B,D");
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	33a4      	adds	r3, #164	; 0xa4
 80153ce:	4a45      	ldr	r2, [pc, #276]	; (80154e4 <problem_fetch+0x13b54>)
 80153d0:	461c      	mov	r4, r3
 80153d2:	4613      	mov	r3, r2
 80153d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153d6:	6020      	str	r0, [r4, #0]
 80153d8:	6061      	str	r1, [r4, #4]
 80153da:	60a2      	str	r2, [r4, #8]
 80153dc:	881b      	ldrh	r3, [r3, #0]
 80153de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,13,15,15,18");
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3304      	adds	r3, #4
 80153e4:	4a40      	ldr	r2, [pc, #256]	; (80154e8 <problem_fetch+0x13b58>)
 80153e6:	461d      	mov	r5, r3
 80153e8:	4614      	mov	r4, r2
 80153ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153ec:	6028      	str	r0, [r5, #0]
 80153ee:	6069      	str	r1, [r5, #4]
 80153f0:	60aa      	str	r2, [r5, #8]
 80153f2:	60eb      	str	r3, [r5, #12]
 80153f4:	8823      	ldrh	r3, [r4, #0]
 80153f6:	78a2      	ldrb	r2, [r4, #2]
 80153f8:	822b      	strh	r3, [r5, #16]
 80153fa:	4613      	mov	r3, r2
 80153fc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015404:	4a39      	ldr	r2, [pc, #228]	; (80154ec <problem_fetch+0x13b5c>)
 8015406:	461c      	mov	r4, r3
 8015408:	4613      	mov	r3, r2
 801540a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801540c:	6020      	str	r0, [r4, #0]
 801540e:	6061      	str	r1, [r4, #4]
 8015410:	60a2      	str	r2, [r4, #8]
 8015412:	881b      	ldrh	r3, [r3, #0]
 8015414:	81a3      	strh	r3, [r4, #12]
			break;
 8015416:	f007 b9eb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 581 :
			strcpy(p->name,"OPPOSITES");
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015420:	4933      	ldr	r1, [pc, #204]	; (80154f0 <problem_fetch+0x13b60>)
 8015422:	461a      	mov	r2, r3
 8015424:	460b      	mov	r3, r1
 8015426:	cb03      	ldmia	r3!, {r0, r1}
 8015428:	6010      	str	r0, [r2, #0]
 801542a:	6051      	str	r1, [r2, #4]
 801542c:	881b      	ldrh	r3, [r3, #0]
 801542e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015436:	4a2f      	ldr	r2, [pc, #188]	; (80154f4 <problem_fetch+0x13b64>)
 8015438:	8811      	ldrh	r1, [r2, #0]
 801543a:	7892      	ldrb	r2, [r2, #2]
 801543c:	8019      	strh	r1, [r3, #0]
 801543e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	2207      	movs	r2, #7
 8015444:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,J,F,G,D");
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	33a4      	adds	r3, #164	; 0xa4
 801544a:	4a2b      	ldr	r2, [pc, #172]	; (80154f8 <problem_fetch+0x13b68>)
 801544c:	461c      	mov	r4, r3
 801544e:	4613      	mov	r3, r2
 8015450:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015452:	6020      	str	r0, [r4, #0]
 8015454:	6061      	str	r1, [r4, #4]
 8015456:	60a2      	str	r2, [r4, #8]
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,8,12,13,15,18");
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	3304      	adds	r3, #4
 8015460:	4a26      	ldr	r2, [pc, #152]	; (80154fc <problem_fetch+0x13b6c>)
 8015462:	461d      	mov	r5, r3
 8015464:	4614      	mov	r4, r2
 8015466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015468:	6028      	str	r0, [r5, #0]
 801546a:	6069      	str	r1, [r5, #4]
 801546c:	60aa      	str	r2, [r5, #8]
 801546e:	60eb      	str	r3, [r5, #12]
 8015470:	8823      	ldrh	r3, [r4, #0]
 8015472:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801547a:	4a0e      	ldr	r2, [pc, #56]	; (80154b4 <problem_fetch+0x13b24>)
 801547c:	461c      	mov	r4, r3
 801547e:	4613      	mov	r3, r2
 8015480:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015482:	6020      	str	r0, [r4, #0]
 8015484:	6061      	str	r1, [r4, #4]
 8015486:	60a2      	str	r2, [r4, #8]
 8015488:	881b      	ldrh	r3, [r3, #0]
 801548a:	81a3      	strh	r3, [r4, #12]
			break;
 801548c:	f007 b9b0 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8015490:	0802a99c 	.word	0x0802a99c
 8015494:	0802a9ac 	.word	0x0802a9ac
 8015498:	0802a9b0 	.word	0x0802a9b0
 801549c:	0802a9bc 	.word	0x0802a9bc
 80154a0:	08024270 	.word	0x08024270
 80154a4:	0802a9c8 	.word	0x0802a9c8
 80154a8:	08023b50 	.word	0x08023b50
 80154ac:	0802a9d4 	.word	0x0802a9d4
 80154b0:	0802a9e4 	.word	0x0802a9e4
 80154b4:	08023d18 	.word	0x08023d18
 80154b8:	0802a9f8 	.word	0x0802a9f8
 80154bc:	08023c28 	.word	0x08023c28
 80154c0:	0802aa00 	.word	0x0802aa00
 80154c4:	0802aa0c 	.word	0x0802aa0c
 80154c8:	0802405c 	.word	0x0802405c
 80154cc:	0802aa1c 	.word	0x0802aa1c
 80154d0:	08023b90 	.word	0x08023b90
 80154d4:	0802aa30 	.word	0x0802aa30
 80154d8:	0802aa44 	.word	0x0802aa44
 80154dc:	08024b74 	.word	0x08024b74
 80154e0:	0802aa5c 	.word	0x0802aa5c
 80154e4:	0802aa68 	.word	0x0802aa68
 80154e8:	0802aa78 	.word	0x0802aa78
 80154ec:	08023c08 	.word	0x08023c08
 80154f0:	0802aa8c 	.word	0x0802aa8c
 80154f4:	08024288 	.word	0x08024288
 80154f8:	0802aa98 	.word	0x0802aa98
 80154fc:	0802aaa8 	.word	0x0802aaa8
		case 582 :
			strcpy(p->name,"BISCUITS RETURNS");
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015506:	4ac1      	ldr	r2, [pc, #772]	; (801580c <problem_fetch+0x13e7c>)
 8015508:	461d      	mov	r5, r3
 801550a:	4614      	mov	r4, r2
 801550c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801550e:	6028      	str	r0, [r5, #0]
 8015510:	6069      	str	r1, [r5, #4]
 8015512:	60aa      	str	r2, [r5, #8]
 8015514:	60eb      	str	r3, [r5, #12]
 8015516:	7823      	ldrb	r3, [r4, #0]
 8015518:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015520:	4abb      	ldr	r2, [pc, #748]	; (8015810 <problem_fetch+0x13e80>)
 8015522:	6810      	ldr	r0, [r2, #0]
 8015524:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2206      	movs	r2, #6
 801552a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,D");
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	33a4      	adds	r3, #164	; 0xa4
 8015530:	4ab8      	ldr	r2, [pc, #736]	; (8015814 <problem_fetch+0x13e84>)
 8015532:	461c      	mov	r4, r3
 8015534:	4613      	mov	r3, r2
 8015536:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015538:	6020      	str	r0, [r4, #0]
 801553a:	6061      	str	r1, [r4, #4]
 801553c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	3304      	adds	r3, #4
 8015542:	4ab5      	ldr	r2, [pc, #724]	; (8015818 <problem_fetch+0x13e88>)
 8015544:	461c      	mov	r4, r3
 8015546:	4615      	mov	r5, r2
 8015548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801554a:	6020      	str	r0, [r4, #0]
 801554c:	6061      	str	r1, [r4, #4]
 801554e:	60a2      	str	r2, [r4, #8]
 8015550:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015558:	4ab0      	ldr	r2, [pc, #704]	; (801581c <problem_fetch+0x13e8c>)
 801555a:	461c      	mov	r4, r3
 801555c:	4613      	mov	r3, r2
 801555e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015560:	6020      	str	r0, [r4, #0]
 8015562:	6061      	str	r1, [r4, #4]
 8015564:	60a2      	str	r2, [r4, #8]
			break;
 8015566:	f007 b943 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 583 :
			strcpy(p->name,"STREETS OF GOLD");
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015570:	4aab      	ldr	r2, [pc, #684]	; (8015820 <problem_fetch+0x13e90>)
 8015572:	461c      	mov	r4, r3
 8015574:	4615      	mov	r5, r2
 8015576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015578:	6020      	str	r0, [r4, #0]
 801557a:	6061      	str	r1, [r4, #4]
 801557c:	60a2      	str	r2, [r4, #8]
 801557e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015586:	4aa7      	ldr	r2, [pc, #668]	; (8015824 <problem_fetch+0x13e94>)
 8015588:	6810      	ldr	r0, [r2, #0]
 801558a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2206      	movs	r2, #6
 8015590:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,K,F,B,A");
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	33a4      	adds	r3, #164	; 0xa4
 8015596:	4aa4      	ldr	r2, [pc, #656]	; (8015828 <problem_fetch+0x13e98>)
 8015598:	461c      	mov	r4, r3
 801559a:	4613      	mov	r3, r2
 801559c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801559e:	6020      	str	r0, [r4, #0]
 80155a0:	6061      	str	r1, [r4, #4]
 80155a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,16,9,11,15,18");
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	3304      	adds	r3, #4
 80155a8:	4aa0      	ldr	r2, [pc, #640]	; (801582c <problem_fetch+0x13e9c>)
 80155aa:	461c      	mov	r4, r3
 80155ac:	4615      	mov	r5, r2
 80155ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80155b0:	6020      	str	r0, [r4, #0]
 80155b2:	6061      	str	r1, [r4, #4]
 80155b4:	60a2      	str	r2, [r4, #8]
 80155b6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80155be:	4a9c      	ldr	r2, [pc, #624]	; (8015830 <problem_fetch+0x13ea0>)
 80155c0:	461c      	mov	r4, r3
 80155c2:	4613      	mov	r3, r2
 80155c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155c6:	6020      	str	r0, [r4, #0]
 80155c8:	6061      	str	r1, [r4, #4]
 80155ca:	60a2      	str	r2, [r4, #8]
			break;
 80155cc:	f007 b910 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 584 :
			strcpy(p->name,"BLACK TIGER");
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80155d6:	4a97      	ldr	r2, [pc, #604]	; (8015834 <problem_fetch+0x13ea4>)
 80155d8:	461c      	mov	r4, r3
 80155da:	4613      	mov	r3, r2
 80155dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155de:	6020      	str	r0, [r4, #0]
 80155e0:	6061      	str	r1, [r4, #4]
 80155e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80155ea:	4a93      	ldr	r2, [pc, #588]	; (8015838 <problem_fetch+0x13ea8>)
 80155ec:	6810      	ldr	r0, [r2, #0]
 80155ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2205      	movs	r2, #5
 80155f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,I");
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	33a4      	adds	r3, #164	; 0xa4
 80155fa:	4990      	ldr	r1, [pc, #576]	; (801583c <problem_fetch+0x13eac>)
 80155fc:	461a      	mov	r2, r3
 80155fe:	460b      	mov	r3, r1
 8015600:	cb03      	ldmia	r3!, {r0, r1}
 8015602:	6010      	str	r0, [r2, #0]
 8015604:	6051      	str	r1, [r2, #4]
 8015606:	881b      	ldrh	r3, [r3, #0]
 8015608:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	3304      	adds	r3, #4
 801560e:	4a8c      	ldr	r2, [pc, #560]	; (8015840 <problem_fetch+0x13eb0>)
 8015610:	461c      	mov	r4, r3
 8015612:	4613      	mov	r3, r2
 8015614:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015616:	6020      	str	r0, [r4, #0]
 8015618:	6061      	str	r1, [r4, #4]
 801561a:	60a2      	str	r2, [r4, #8]
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015626:	4987      	ldr	r1, [pc, #540]	; (8015844 <problem_fetch+0x13eb4>)
 8015628:	461a      	mov	r2, r3
 801562a:	460b      	mov	r3, r1
 801562c:	cb03      	ldmia	r3!, {r0, r1}
 801562e:	6010      	str	r0, [r2, #0]
 8015630:	6051      	str	r1, [r2, #4]
 8015632:	881b      	ldrh	r3, [r3, #0]
 8015634:	8113      	strh	r3, [r2, #8]
			break;
 8015636:	f007 b8db 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 585 :
			strcpy(p->name,"THE REAL ONE");
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015640:	4a81      	ldr	r2, [pc, #516]	; (8015848 <problem_fetch+0x13eb8>)
 8015642:	461c      	mov	r4, r3
 8015644:	4613      	mov	r3, r2
 8015646:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015648:	6020      	str	r0, [r4, #0]
 801564a:	6061      	str	r1, [r4, #4]
 801564c:	60a2      	str	r2, [r4, #8]
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015658:	4a6d      	ldr	r2, [pc, #436]	; (8015810 <problem_fetch+0x13e80>)
 801565a:	6810      	ldr	r0, [r2, #0]
 801565c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2207      	movs	r2, #7
 8015662:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,E,I");
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	33a4      	adds	r3, #164	; 0xa4
 8015668:	4a78      	ldr	r2, [pc, #480]	; (801584c <problem_fetch+0x13ebc>)
 801566a:	461c      	mov	r4, r3
 801566c:	4613      	mov	r3, r2
 801566e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015670:	6020      	str	r0, [r4, #0]
 8015672:	6061      	str	r1, [r4, #4]
 8015674:	60a2      	str	r2, [r4, #8]
 8015676:	881b      	ldrh	r3, [r3, #0]
 8015678:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,13,14,16,18");
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3304      	adds	r3, #4
 801567e:	4a74      	ldr	r2, [pc, #464]	; (8015850 <problem_fetch+0x13ec0>)
 8015680:	461d      	mov	r5, r3
 8015682:	4614      	mov	r4, r2
 8015684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015686:	6028      	str	r0, [r5, #0]
 8015688:	6069      	str	r1, [r5, #4]
 801568a:	60aa      	str	r2, [r5, #8]
 801568c:	60eb      	str	r3, [r5, #12]
 801568e:	8823      	ldrh	r3, [r4, #0]
 8015690:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015698:	4a6e      	ldr	r2, [pc, #440]	; (8015854 <problem_fetch+0x13ec4>)
 801569a:	461c      	mov	r4, r3
 801569c:	4613      	mov	r3, r2
 801569e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156a0:	6020      	str	r0, [r4, #0]
 80156a2:	6061      	str	r1, [r4, #4]
 80156a4:	60a2      	str	r2, [r4, #8]
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	81a3      	strh	r3, [r4, #12]
			break;
 80156aa:	f007 b8a1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 586 :
			strcpy(p->name,"PURPLE IN THE OPEN");
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80156b4:	4a68      	ldr	r2, [pc, #416]	; (8015858 <problem_fetch+0x13ec8>)
 80156b6:	461d      	mov	r5, r3
 80156b8:	4614      	mov	r4, r2
 80156ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156bc:	6028      	str	r0, [r5, #0]
 80156be:	6069      	str	r1, [r5, #4]
 80156c0:	60aa      	str	r2, [r5, #8]
 80156c2:	60eb      	str	r3, [r5, #12]
 80156c4:	8823      	ldrh	r3, [r4, #0]
 80156c6:	78a2      	ldrb	r2, [r4, #2]
 80156c8:	822b      	strh	r3, [r5, #16]
 80156ca:	4613      	mov	r3, r2
 80156cc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80156d4:	4a61      	ldr	r2, [pc, #388]	; (801585c <problem_fetch+0x13ecc>)
 80156d6:	8811      	ldrh	r1, [r2, #0]
 80156d8:	7892      	ldrb	r2, [r2, #2]
 80156da:	8019      	strh	r1, [r3, #0]
 80156dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2207      	movs	r2, #7
 80156e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,D,I,H,I");
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	33a4      	adds	r3, #164	; 0xa4
 80156e8:	4a5d      	ldr	r2, [pc, #372]	; (8015860 <problem_fetch+0x13ed0>)
 80156ea:	461c      	mov	r4, r3
 80156ec:	4613      	mov	r3, r2
 80156ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156f0:	6020      	str	r0, [r4, #0]
 80156f2:	6061      	str	r1, [r4, #4]
 80156f4:	60a2      	str	r2, [r4, #8]
 80156f6:	881b      	ldrh	r3, [r3, #0]
 80156f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,12,11,14,16,18");
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	3304      	adds	r3, #4
 80156fe:	4a59      	ldr	r2, [pc, #356]	; (8015864 <problem_fetch+0x13ed4>)
 8015700:	461d      	mov	r5, r3
 8015702:	4614      	mov	r4, r2
 8015704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015706:	6028      	str	r0, [r5, #0]
 8015708:	6069      	str	r1, [r5, #4]
 801570a:	60aa      	str	r2, [r5, #8]
 801570c:	60eb      	str	r3, [r5, #12]
 801570e:	8823      	ldrh	r3, [r4, #0]
 8015710:	78a2      	ldrb	r2, [r4, #2]
 8015712:	822b      	strh	r3, [r5, #16]
 8015714:	4613      	mov	r3, r2
 8015716:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801571e:	4a4d      	ldr	r2, [pc, #308]	; (8015854 <problem_fetch+0x13ec4>)
 8015720:	461c      	mov	r4, r3
 8015722:	4613      	mov	r3, r2
 8015724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015726:	6020      	str	r0, [r4, #0]
 8015728:	6061      	str	r1, [r4, #4]
 801572a:	60a2      	str	r2, [r4, #8]
 801572c:	881b      	ldrh	r3, [r3, #0]
 801572e:	81a3      	strh	r3, [r4, #12]
			break;
 8015730:	f007 b85e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 587 :
			strcpy(p->name,"BOUJEE");
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801573a:	4a4b      	ldr	r2, [pc, #300]	; (8015868 <problem_fetch+0x13ed8>)
 801573c:	6810      	ldr	r0, [r2, #0]
 801573e:	6018      	str	r0, [r3, #0]
 8015740:	8891      	ldrh	r1, [r2, #4]
 8015742:	7992      	ldrb	r2, [r2, #6]
 8015744:	8099      	strh	r1, [r3, #4]
 8015746:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801574e:	4a47      	ldr	r2, [pc, #284]	; (801586c <problem_fetch+0x13edc>)
 8015750:	6810      	ldr	r0, [r2, #0]
 8015752:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2206      	movs	r2, #6
 8015758:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,H,C,D");
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	33a4      	adds	r3, #164	; 0xa4
 801575e:	4a44      	ldr	r2, [pc, #272]	; (8015870 <problem_fetch+0x13ee0>)
 8015760:	461c      	mov	r4, r3
 8015762:	4613      	mov	r3, r2
 8015764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015766:	6020      	str	r0, [r4, #0]
 8015768:	6061      	str	r1, [r4, #4]
 801576a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,13,15,10,8,18");
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	3304      	adds	r3, #4
 8015770:	4a40      	ldr	r2, [pc, #256]	; (8015874 <problem_fetch+0x13ee4>)
 8015772:	461c      	mov	r4, r3
 8015774:	4615      	mov	r5, r2
 8015776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015778:	6020      	str	r0, [r4, #0]
 801577a:	6061      	str	r1, [r4, #4]
 801577c:	60a2      	str	r2, [r4, #8]
 801577e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015786:	4a2a      	ldr	r2, [pc, #168]	; (8015830 <problem_fetch+0x13ea0>)
 8015788:	461c      	mov	r4, r3
 801578a:	4613      	mov	r3, r2
 801578c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801578e:	6020      	str	r0, [r4, #0]
 8015790:	6061      	str	r1, [r4, #4]
 8015792:	60a2      	str	r2, [r4, #8]
			break;
 8015794:	f007 b82c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 588 :
			strcpy(p->name,"CAPTAIN AUBREY");
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801579e:	4a36      	ldr	r2, [pc, #216]	; (8015878 <problem_fetch+0x13ee8>)
 80157a0:	461c      	mov	r4, r3
 80157a2:	4613      	mov	r3, r2
 80157a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157a6:	6020      	str	r0, [r4, #0]
 80157a8:	6061      	str	r1, [r4, #4]
 80157aa:	60a2      	str	r2, [r4, #8]
 80157ac:	881a      	ldrh	r2, [r3, #0]
 80157ae:	789b      	ldrb	r3, [r3, #2]
 80157b0:	81a2      	strh	r2, [r4, #12]
 80157b2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80157ba:	4a2c      	ldr	r2, [pc, #176]	; (801586c <problem_fetch+0x13edc>)
 80157bc:	6810      	ldr	r0, [r2, #0]
 80157be:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	2205      	movs	r2, #5
 80157c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,I,I");
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	33a4      	adds	r3, #164	; 0xa4
 80157ca:	492c      	ldr	r1, [pc, #176]	; (801587c <problem_fetch+0x13eec>)
 80157cc:	461a      	mov	r2, r3
 80157ce:	460b      	mov	r3, r1
 80157d0:	cb03      	ldmia	r3!, {r0, r1}
 80157d2:	6010      	str	r0, [r2, #0]
 80157d4:	6051      	str	r1, [r2, #4]
 80157d6:	881b      	ldrh	r3, [r3, #0]
 80157d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	3304      	adds	r3, #4
 80157de:	4a28      	ldr	r2, [pc, #160]	; (8015880 <problem_fetch+0x13ef0>)
 80157e0:	461c      	mov	r4, r3
 80157e2:	4613      	mov	r3, r2
 80157e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157e6:	6020      	str	r0, [r4, #0]
 80157e8:	6061      	str	r1, [r4, #4]
 80157ea:	60a2      	str	r2, [r4, #8]
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80157f6:	4913      	ldr	r1, [pc, #76]	; (8015844 <problem_fetch+0x13eb4>)
 80157f8:	461a      	mov	r2, r3
 80157fa:	460b      	mov	r3, r1
 80157fc:	cb03      	ldmia	r3!, {r0, r1}
 80157fe:	6010      	str	r0, [r2, #0]
 8015800:	6051      	str	r1, [r2, #4]
 8015802:	881b      	ldrh	r3, [r3, #0]
 8015804:	8113      	strh	r3, [r2, #8]
			break;
 8015806:	f006 bff3 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801580a:	bf00      	nop
 801580c:	0802aabc 	.word	0x0802aabc
 8015810:	08023b90 	.word	0x08023b90
 8015814:	0802aad0 	.word	0x0802aad0
 8015818:	0802857c 	.word	0x0802857c
 801581c:	08023b70 	.word	0x08023b70
 8015820:	0802aadc 	.word	0x0802aadc
 8015824:	08023ccc 	.word	0x08023ccc
 8015828:	0802aaec 	.word	0x0802aaec
 801582c:	0802aaf8 	.word	0x0802aaf8
 8015830:	08023f2c 	.word	0x08023f2c
 8015834:	0802ab08 	.word	0x0802ab08
 8015838:	08023c28 	.word	0x08023c28
 801583c:	0802ab14 	.word	0x0802ab14
 8015840:	080241ac 	.word	0x080241ac
 8015844:	0802405c 	.word	0x0802405c
 8015848:	0802ab20 	.word	0x0802ab20
 801584c:	0802ab30 	.word	0x0802ab30
 8015850:	0802ab40 	.word	0x0802ab40
 8015854:	08023d18 	.word	0x08023d18
 8015858:	0802ab54 	.word	0x0802ab54
 801585c:	08024288 	.word	0x08024288
 8015860:	0802ab68 	.word	0x0802ab68
 8015864:	0802ab78 	.word	0x0802ab78
 8015868:	0802ab8c 	.word	0x0802ab8c
 801586c:	08023d30 	.word	0x08023d30
 8015870:	0802ab94 	.word	0x0802ab94
 8015874:	0802aba0 	.word	0x0802aba0
 8015878:	0802abb0 	.word	0x0802abb0
 801587c:	0802abc0 	.word	0x0802abc0
 8015880:	0802731c 	.word	0x0802731c
		case 589 :
			strcpy(p->name,"LONDON FROG");
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801588a:	4aa8      	ldr	r2, [pc, #672]	; (8015b2c <problem_fetch+0x1419c>)
 801588c:	461c      	mov	r4, r3
 801588e:	4613      	mov	r3, r2
 8015890:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015892:	6020      	str	r0, [r4, #0]
 8015894:	6061      	str	r1, [r4, #4]
 8015896:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801589e:	4aa4      	ldr	r2, [pc, #656]	; (8015b30 <problem_fetch+0x141a0>)
 80158a0:	8811      	ldrh	r1, [r2, #0]
 80158a2:	7892      	ldrb	r2, [r2, #2]
 80158a4:	8019      	strh	r1, [r3, #0]
 80158a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	2206      	movs	r2, #6
 80158ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,I");
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	33a4      	adds	r3, #164	; 0xa4
 80158b2:	4aa0      	ldr	r2, [pc, #640]	; (8015b34 <problem_fetch+0x141a4>)
 80158b4:	461c      	mov	r4, r3
 80158b6:	4613      	mov	r3, r2
 80158b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80158ba:	6020      	str	r0, [r4, #0]
 80158bc:	6061      	str	r1, [r4, #4]
 80158be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,11,14,18");
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	3304      	adds	r3, #4
 80158c4:	4a9c      	ldr	r2, [pc, #624]	; (8015b38 <problem_fetch+0x141a8>)
 80158c6:	461c      	mov	r4, r3
 80158c8:	4613      	mov	r3, r2
 80158ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80158cc:	6020      	str	r0, [r4, #0]
 80158ce:	6061      	str	r1, [r4, #4]
 80158d0:	60a2      	str	r2, [r4, #8]
 80158d2:	881a      	ldrh	r2, [r3, #0]
 80158d4:	789b      	ldrb	r3, [r3, #2]
 80158d6:	81a2      	strh	r2, [r4, #12]
 80158d8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80158e0:	4a96      	ldr	r2, [pc, #600]	; (8015b3c <problem_fetch+0x141ac>)
 80158e2:	461c      	mov	r4, r3
 80158e4:	4613      	mov	r3, r2
 80158e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80158e8:	6020      	str	r0, [r4, #0]
 80158ea:	6061      	str	r1, [r4, #4]
 80158ec:	60a2      	str	r2, [r4, #8]
			break;
 80158ee:	f006 bf7f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 590 :
			strcpy(p->name,"MO6.1");
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80158f8:	4a91      	ldr	r2, [pc, #580]	; (8015b40 <problem_fetch+0x141b0>)
 80158fa:	6810      	ldr	r0, [r2, #0]
 80158fc:	6018      	str	r0, [r3, #0]
 80158fe:	8892      	ldrh	r2, [r2, #4]
 8015900:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015908:	4a89      	ldr	r2, [pc, #548]	; (8015b30 <problem_fetch+0x141a0>)
 801590a:	8811      	ldrh	r1, [r2, #0]
 801590c:	7892      	ldrb	r2, [r2, #2]
 801590e:	8019      	strh	r1, [r3, #0]
 8015910:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2206      	movs	r2, #6
 8015916:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,D,D,D");
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	33a4      	adds	r3, #164	; 0xa4
 801591c:	4a89      	ldr	r2, [pc, #548]	; (8015b44 <problem_fetch+0x141b4>)
 801591e:	461c      	mov	r4, r3
 8015920:	4613      	mov	r3, r2
 8015922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015924:	6020      	str	r0, [r4, #0]
 8015926:	6061      	str	r1, [r4, #4]
 8015928:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,15,11,18");
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3304      	adds	r3, #4
 801592e:	4a86      	ldr	r2, [pc, #536]	; (8015b48 <problem_fetch+0x141b8>)
 8015930:	461c      	mov	r4, r3
 8015932:	4615      	mov	r5, r2
 8015934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015936:	6020      	str	r0, [r4, #0]
 8015938:	6061      	str	r1, [r4, #4]
 801593a:	60a2      	str	r2, [r4, #8]
 801593c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015944:	4a7d      	ldr	r2, [pc, #500]	; (8015b3c <problem_fetch+0x141ac>)
 8015946:	461c      	mov	r4, r3
 8015948:	4613      	mov	r3, r2
 801594a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801594c:	6020      	str	r0, [r4, #0]
 801594e:	6061      	str	r1, [r4, #4]
 8015950:	60a2      	str	r2, [r4, #8]
			break;
 8015952:	f006 bf4d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 591 :
			strcpy(p->name,"ALL BLACK ERRTHANG");
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801595c:	4a7b      	ldr	r2, [pc, #492]	; (8015b4c <problem_fetch+0x141bc>)
 801595e:	461d      	mov	r5, r3
 8015960:	4614      	mov	r4, r2
 8015962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015964:	6028      	str	r0, [r5, #0]
 8015966:	6069      	str	r1, [r5, #4]
 8015968:	60aa      	str	r2, [r5, #8]
 801596a:	60eb      	str	r3, [r5, #12]
 801596c:	8823      	ldrh	r3, [r4, #0]
 801596e:	78a2      	ldrb	r2, [r4, #2]
 8015970:	822b      	strh	r3, [r5, #16]
 8015972:	4613      	mov	r3, r2
 8015974:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7C");
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801597c:	4a74      	ldr	r2, [pc, #464]	; (8015b50 <problem_fetch+0x141c0>)
 801597e:	8811      	ldrh	r1, [r2, #0]
 8015980:	7892      	ldrb	r2, [r2, #2]
 8015982:	8019      	strh	r1, [r3, #0]
 8015984:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	2205      	movs	r2, #5
 801598a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,G,A");
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	33a4      	adds	r3, #164	; 0xa4
 8015990:	4970      	ldr	r1, [pc, #448]	; (8015b54 <problem_fetch+0x141c4>)
 8015992:	461a      	mov	r2, r3
 8015994:	460b      	mov	r3, r1
 8015996:	cb03      	ldmia	r3!, {r0, r1}
 8015998:	6010      	str	r0, [r2, #0]
 801599a:	6051      	str	r1, [r2, #4]
 801599c:	881b      	ldrh	r3, [r3, #0]
 801599e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	3304      	adds	r3, #4
 80159a4:	4a6c      	ldr	r2, [pc, #432]	; (8015b58 <problem_fetch+0x141c8>)
 80159a6:	461c      	mov	r4, r3
 80159a8:	4613      	mov	r3, r2
 80159aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159ac:	6020      	str	r0, [r4, #0]
 80159ae:	6061      	str	r1, [r4, #4]
 80159b0:	60a2      	str	r2, [r4, #8]
 80159b2:	881b      	ldrh	r3, [r3, #0]
 80159b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80159bc:	4967      	ldr	r1, [pc, #412]	; (8015b5c <problem_fetch+0x141cc>)
 80159be:	461a      	mov	r2, r3
 80159c0:	460b      	mov	r3, r1
 80159c2:	cb03      	ldmia	r3!, {r0, r1}
 80159c4:	6010      	str	r0, [r2, #0]
 80159c6:	6051      	str	r1, [r2, #4]
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	8113      	strh	r3, [r2, #8]
			break;
 80159cc:	f006 bf10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 592 :
			strcpy(p->name,"BLACK ON RICE");
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80159d6:	4a62      	ldr	r2, [pc, #392]	; (8015b60 <problem_fetch+0x141d0>)
 80159d8:	461c      	mov	r4, r3
 80159da:	4613      	mov	r3, r2
 80159dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80159de:	6020      	str	r0, [r4, #0]
 80159e0:	6061      	str	r1, [r4, #4]
 80159e2:	60a2      	str	r2, [r4, #8]
 80159e4:	881b      	ldrh	r3, [r3, #0]
 80159e6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80159ee:	4a5d      	ldr	r2, [pc, #372]	; (8015b64 <problem_fetch+0x141d4>)
 80159f0:	6810      	ldr	r0, [r2, #0]
 80159f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	2207      	movs	r2, #7
 80159f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,E,C,A");
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	33a4      	adds	r3, #164	; 0xa4
 80159fe:	4a5a      	ldr	r2, [pc, #360]	; (8015b68 <problem_fetch+0x141d8>)
 8015a00:	461c      	mov	r4, r3
 8015a02:	4613      	mov	r3, r2
 8015a04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a06:	6020      	str	r0, [r4, #0]
 8015a08:	6061      	str	r1, [r4, #4]
 8015a0a:	60a2      	str	r2, [r4, #8]
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,16,13,18");
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	3304      	adds	r3, #4
 8015a14:	4a55      	ldr	r2, [pc, #340]	; (8015b6c <problem_fetch+0x141dc>)
 8015a16:	461d      	mov	r5, r3
 8015a18:	4614      	mov	r4, r2
 8015a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a1c:	6028      	str	r0, [r5, #0]
 8015a1e:	6069      	str	r1, [r5, #4]
 8015a20:	60aa      	str	r2, [r5, #8]
 8015a22:	60eb      	str	r3, [r5, #12]
 8015a24:	8823      	ldrh	r3, [r4, #0]
 8015a26:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015a2e:	4a50      	ldr	r2, [pc, #320]	; (8015b70 <problem_fetch+0x141e0>)
 8015a30:	461c      	mov	r4, r3
 8015a32:	4613      	mov	r3, r2
 8015a34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a36:	6020      	str	r0, [r4, #0]
 8015a38:	6061      	str	r1, [r4, #4]
 8015a3a:	60a2      	str	r2, [r4, #8]
 8015a3c:	881b      	ldrh	r3, [r3, #0]
 8015a3e:	81a3      	strh	r3, [r4, #12]
			break;
 8015a40:	f006 bed6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 593 :
			strcpy(p->name,"BAMBINI");
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015a4a:	494a      	ldr	r1, [pc, #296]	; (8015b74 <problem_fetch+0x141e4>)
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	460b      	mov	r3, r1
 8015a50:	cb03      	ldmia	r3!, {r0, r1}
 8015a52:	6010      	str	r0, [r2, #0]
 8015a54:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015a5c:	4a46      	ldr	r2, [pc, #280]	; (8015b78 <problem_fetch+0x141e8>)
 8015a5e:	6810      	ldr	r0, [r2, #0]
 8015a60:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2206      	movs	r2, #6
 8015a66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,D");
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	33a4      	adds	r3, #164	; 0xa4
 8015a6c:	4a43      	ldr	r2, [pc, #268]	; (8015b7c <problem_fetch+0x141ec>)
 8015a6e:	461c      	mov	r4, r3
 8015a70:	4613      	mov	r3, r2
 8015a72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a74:	6020      	str	r0, [r4, #0]
 8015a76:	6061      	str	r1, [r4, #4]
 8015a78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	3304      	adds	r3, #4
 8015a7e:	4a40      	ldr	r2, [pc, #256]	; (8015b80 <problem_fetch+0x141f0>)
 8015a80:	461c      	mov	r4, r3
 8015a82:	4615      	mov	r5, r2
 8015a84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a86:	6020      	str	r0, [r4, #0]
 8015a88:	6061      	str	r1, [r4, #4]
 8015a8a:	60a2      	str	r2, [r4, #8]
 8015a8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015a94:	4a29      	ldr	r2, [pc, #164]	; (8015b3c <problem_fetch+0x141ac>)
 8015a96:	461c      	mov	r4, r3
 8015a98:	4613      	mov	r3, r2
 8015a9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a9c:	6020      	str	r0, [r4, #0]
 8015a9e:	6061      	str	r1, [r4, #4]
 8015aa0:	60a2      	str	r2, [r4, #8]
			break;
 8015aa2:	f006 bea5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 594 :
			strcpy(p->name,"TRAVEQUE II");
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015aac:	4a35      	ldr	r2, [pc, #212]	; (8015b84 <problem_fetch+0x141f4>)
 8015aae:	461c      	mov	r4, r3
 8015ab0:	4613      	mov	r3, r2
 8015ab2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ab4:	6020      	str	r0, [r4, #0]
 8015ab6:	6061      	str	r1, [r4, #4]
 8015ab8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015ac0:	4a31      	ldr	r2, [pc, #196]	; (8015b88 <problem_fetch+0x141f8>)
 8015ac2:	8811      	ldrh	r1, [r2, #0]
 8015ac4:	7892      	ldrb	r2, [r2, #2]
 8015ac6:	8019      	strh	r1, [r3, #0]
 8015ac8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	220b      	movs	r2, #11
 8015ace:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,C,D,K,H,H,K,G,I");
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	33a4      	adds	r3, #164	; 0xa4
 8015ad4:	4a2d      	ldr	r2, [pc, #180]	; (8015b8c <problem_fetch+0x141fc>)
 8015ad6:	461d      	mov	r5, r3
 8015ad8:	4614      	mov	r4, r2
 8015ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015adc:	6028      	str	r0, [r5, #0]
 8015ade:	6069      	str	r1, [r5, #4]
 8015ae0:	60aa      	str	r2, [r5, #8]
 8015ae2:	60eb      	str	r3, [r5, #12]
 8015ae4:	6820      	ldr	r0, [r4, #0]
 8015ae6:	6128      	str	r0, [r5, #16]
 8015ae8:	88a3      	ldrh	r3, [r4, #4]
 8015aea:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,4,8,7,9,8,12,14,15,18");
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	3304      	adds	r3, #4
 8015af0:	4a27      	ldr	r2, [pc, #156]	; (8015b90 <problem_fetch+0x14200>)
 8015af2:	461d      	mov	r5, r3
 8015af4:	4614      	mov	r4, r2
 8015af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015af8:	6028      	str	r0, [r5, #0]
 8015afa:	6069      	str	r1, [r5, #4]
 8015afc:	60aa      	str	r2, [r5, #8]
 8015afe:	60eb      	str	r3, [r5, #12]
 8015b00:	cc03      	ldmia	r4!, {r0, r1}
 8015b02:	6128      	str	r0, [r5, #16]
 8015b04:	6169      	str	r1, [r5, #20]
 8015b06:	8823      	ldrh	r3, [r4, #0]
 8015b08:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015b10:	4a20      	ldr	r2, [pc, #128]	; (8015b94 <problem_fetch+0x14204>)
 8015b12:	461d      	mov	r5, r3
 8015b14:	4614      	mov	r4, r2
 8015b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b18:	6028      	str	r0, [r5, #0]
 8015b1a:	6069      	str	r1, [r5, #4]
 8015b1c:	60aa      	str	r2, [r5, #8]
 8015b1e:	60eb      	str	r3, [r5, #12]
 8015b20:	6820      	ldr	r0, [r4, #0]
 8015b22:	6128      	str	r0, [r5, #16]
 8015b24:	88a3      	ldrh	r3, [r4, #4]
 8015b26:	82ab      	strh	r3, [r5, #20]
			break;
 8015b28:	f006 be62 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8015b2c:	0802abcc 	.word	0x0802abcc
 8015b30:	08023b50 	.word	0x08023b50
 8015b34:	0802abd8 	.word	0x0802abd8
 8015b38:	0802abe4 	.word	0x0802abe4
 8015b3c:	08023f2c 	.word	0x08023f2c
 8015b40:	0802abf4 	.word	0x0802abf4
 8015b44:	0802abfc 	.word	0x0802abfc
 8015b48:	0802ac08 	.word	0x0802ac08
 8015b4c:	0802ac18 	.word	0x0802ac18
 8015b50:	080243c4 	.word	0x080243c4
 8015b54:	0802ac2c 	.word	0x0802ac2c
 8015b58:	0802a1a0 	.word	0x0802a1a0
 8015b5c:	0802405c 	.word	0x0802405c
 8015b60:	0802ac38 	.word	0x0802ac38
 8015b64:	08023c28 	.word	0x08023c28
 8015b68:	0802ac48 	.word	0x0802ac48
 8015b6c:	0802ac58 	.word	0x0802ac58
 8015b70:	08023c08 	.word	0x08023c08
 8015b74:	0802ac6c 	.word	0x0802ac6c
 8015b78:	08023b90 	.word	0x08023b90
 8015b7c:	0802ac74 	.word	0x0802ac74
 8015b80:	0802a2a0 	.word	0x0802a2a0
 8015b84:	0802ac80 	.word	0x0802ac80
 8015b88:	08023c5c 	.word	0x08023c5c
 8015b8c:	0802ac8c 	.word	0x0802ac8c
 8015b90:	0802aca4 	.word	0x0802aca4
 8015b94:	080274f0 	.word	0x080274f0
		case 595 :
			strcpy(p->name,"TRAVEQUE");
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015b9e:	49ac      	ldr	r1, [pc, #688]	; (8015e50 <problem_fetch+0x144c0>)
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	cb03      	ldmia	r3!, {r0, r1}
 8015ba6:	6010      	str	r0, [r2, #0]
 8015ba8:	6051      	str	r1, [r2, #4]
 8015baa:	781b      	ldrb	r3, [r3, #0]
 8015bac:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015bb4:	4aa7      	ldr	r2, [pc, #668]	; (8015e54 <problem_fetch+0x144c4>)
 8015bb6:	8811      	ldrh	r1, [r2, #0]
 8015bb8:	7892      	ldrb	r2, [r2, #2]
 8015bba:	8019      	strh	r1, [r3, #0]
 8015bbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	220a      	movs	r2, #10
 8015bc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,J,H,H,H,G,E,H,I");
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	33a4      	adds	r3, #164	; 0xa4
 8015bc8:	4aa3      	ldr	r2, [pc, #652]	; (8015e58 <problem_fetch+0x144c8>)
 8015bca:	461d      	mov	r5, r3
 8015bcc:	4614      	mov	r4, r2
 8015bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015bd0:	6028      	str	r0, [r5, #0]
 8015bd2:	6069      	str	r1, [r5, #4]
 8015bd4:	60aa      	str	r2, [r5, #8]
 8015bd6:	60eb      	str	r3, [r5, #12]
 8015bd8:	6820      	ldr	r0, [r4, #0]
 8015bda:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,16,12,8,4,6,5,18");
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	3304      	adds	r3, #4
 8015be0:	4a9e      	ldr	r2, [pc, #632]	; (8015e5c <problem_fetch+0x144cc>)
 8015be2:	461c      	mov	r4, r3
 8015be4:	4615      	mov	r5, r2
 8015be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015be8:	6020      	str	r0, [r4, #0]
 8015bea:	6061      	str	r1, [r4, #4]
 8015bec:	60a2      	str	r2, [r4, #8]
 8015bee:	60e3      	str	r3, [r4, #12]
 8015bf0:	6828      	ldr	r0, [r5, #0]
 8015bf2:	6120      	str	r0, [r4, #16]
 8015bf4:	88ab      	ldrh	r3, [r5, #4]
 8015bf6:	79aa      	ldrb	r2, [r5, #6]
 8015bf8:	82a3      	strh	r3, [r4, #20]
 8015bfa:	4613      	mov	r3, r2
 8015bfc:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015c04:	4a96      	ldr	r2, [pc, #600]	; (8015e60 <problem_fetch+0x144d0>)
 8015c06:	461d      	mov	r5, r3
 8015c08:	4614      	mov	r4, r2
 8015c0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c0c:	6028      	str	r0, [r5, #0]
 8015c0e:	6069      	str	r1, [r5, #4]
 8015c10:	60aa      	str	r2, [r5, #8]
 8015c12:	60eb      	str	r3, [r5, #12]
 8015c14:	6820      	ldr	r0, [r4, #0]
 8015c16:	6128      	str	r0, [r5, #16]
			break;
 8015c18:	f006 bdea 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 596 :
			strcpy(p->name,"YAYABLACK");
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c22:	4990      	ldr	r1, [pc, #576]	; (8015e64 <problem_fetch+0x144d4>)
 8015c24:	461a      	mov	r2, r3
 8015c26:	460b      	mov	r3, r1
 8015c28:	cb03      	ldmia	r3!, {r0, r1}
 8015c2a:	6010      	str	r0, [r2, #0]
 8015c2c:	6051      	str	r1, [r2, #4]
 8015c2e:	881b      	ldrh	r3, [r3, #0]
 8015c30:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015c38:	4a8b      	ldr	r2, [pc, #556]	; (8015e68 <problem_fetch+0x144d8>)
 8015c3a:	6810      	ldr	r0, [r2, #0]
 8015c3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2208      	movs	r2, #8
 8015c42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,J,E,H,C,D,D");
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	33a4      	adds	r3, #164	; 0xa4
 8015c48:	4a88      	ldr	r2, [pc, #544]	; (8015e6c <problem_fetch+0x144dc>)
 8015c4a:	461c      	mov	r4, r3
 8015c4c:	4615      	mov	r5, r2
 8015c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c50:	6020      	str	r0, [r4, #0]
 8015c52:	6061      	str	r1, [r4, #4]
 8015c54:	60a2      	str	r2, [r4, #8]
 8015c56:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,7,8,10,13,15,18");
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	3304      	adds	r3, #4
 8015c5c:	4a84      	ldr	r2, [pc, #528]	; (8015e70 <problem_fetch+0x144e0>)
 8015c5e:	461d      	mov	r5, r3
 8015c60:	4614      	mov	r4, r2
 8015c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c64:	6028      	str	r0, [r5, #0]
 8015c66:	6069      	str	r1, [r5, #4]
 8015c68:	60aa      	str	r2, [r5, #8]
 8015c6a:	60eb      	str	r3, [r5, #12]
 8015c6c:	6820      	ldr	r0, [r4, #0]
 8015c6e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015c76:	4a7f      	ldr	r2, [pc, #508]	; (8015e74 <problem_fetch+0x144e4>)
 8015c78:	461c      	mov	r4, r3
 8015c7a:	4615      	mov	r5, r2
 8015c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c7e:	6020      	str	r0, [r4, #0]
 8015c80:	6061      	str	r1, [r4, #4]
 8015c82:	60a2      	str	r2, [r4, #8]
 8015c84:	60e3      	str	r3, [r4, #12]
			break;
 8015c86:	f006 bdb3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 597 :
			strcpy(p->name,"SPORGASSE, GRAZ");
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c90:	4a79      	ldr	r2, [pc, #484]	; (8015e78 <problem_fetch+0x144e8>)
 8015c92:	461c      	mov	r4, r3
 8015c94:	4615      	mov	r5, r2
 8015c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c98:	6020      	str	r0, [r4, #0]
 8015c9a:	6061      	str	r1, [r4, #4]
 8015c9c:	60a2      	str	r2, [r4, #8]
 8015c9e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015ca6:	4a75      	ldr	r2, [pc, #468]	; (8015e7c <problem_fetch+0x144ec>)
 8015ca8:	8811      	ldrh	r1, [r2, #0]
 8015caa:	7892      	ldrb	r2, [r2, #2]
 8015cac:	8019      	strh	r1, [r3, #0]
 8015cae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	2205      	movs	r2, #5
 8015cb4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,D");
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	33a4      	adds	r3, #164	; 0xa4
 8015cba:	4971      	ldr	r1, [pc, #452]	; (8015e80 <problem_fetch+0x144f0>)
 8015cbc:	461a      	mov	r2, r3
 8015cbe:	460b      	mov	r3, r1
 8015cc0:	cb03      	ldmia	r3!, {r0, r1}
 8015cc2:	6010      	str	r0, [r2, #0]
 8015cc4:	6051      	str	r1, [r2, #4]
 8015cc6:	881b      	ldrh	r3, [r3, #0]
 8015cc8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,16,18");
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	3304      	adds	r3, #4
 8015cce:	4a6d      	ldr	r2, [pc, #436]	; (8015e84 <problem_fetch+0x144f4>)
 8015cd0:	461c      	mov	r4, r3
 8015cd2:	4613      	mov	r3, r2
 8015cd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015cd6:	6020      	str	r0, [r4, #0]
 8015cd8:	6061      	str	r1, [r4, #4]
 8015cda:	60a2      	str	r2, [r4, #8]
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015ce6:	4968      	ldr	r1, [pc, #416]	; (8015e88 <problem_fetch+0x144f8>)
 8015ce8:	461a      	mov	r2, r3
 8015cea:	460b      	mov	r3, r1
 8015cec:	cb03      	ldmia	r3!, {r0, r1}
 8015cee:	6010      	str	r0, [r2, #0]
 8015cf0:	6051      	str	r1, [r2, #4]
 8015cf2:	881b      	ldrh	r3, [r3, #0]
 8015cf4:	8113      	strh	r3, [r2, #8]
			break;
 8015cf6:	f006 bd7b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 598 :
			strcpy(p->name,"BACKSLASH");
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d00:	4962      	ldr	r1, [pc, #392]	; (8015e8c <problem_fetch+0x144fc>)
 8015d02:	461a      	mov	r2, r3
 8015d04:	460b      	mov	r3, r1
 8015d06:	cb03      	ldmia	r3!, {r0, r1}
 8015d08:	6010      	str	r0, [r2, #0]
 8015d0a:	6051      	str	r1, [r2, #4]
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d16:	4a5e      	ldr	r2, [pc, #376]	; (8015e90 <problem_fetch+0x14500>)
 8015d18:	8811      	ldrh	r1, [r2, #0]
 8015d1a:	7892      	ldrb	r2, [r2, #2]
 8015d1c:	8019      	strh	r1, [r3, #0]
 8015d1e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	2206      	movs	r2, #6
 8015d24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,I,I");
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	33a4      	adds	r3, #164	; 0xa4
 8015d2a:	4a5a      	ldr	r2, [pc, #360]	; (8015e94 <problem_fetch+0x14504>)
 8015d2c:	461c      	mov	r4, r3
 8015d2e:	4613      	mov	r3, r2
 8015d30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d32:	6020      	str	r0, [r4, #0]
 8015d34:	6061      	str	r1, [r4, #4]
 8015d36:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	3304      	adds	r3, #4
 8015d3c:	4a56      	ldr	r2, [pc, #344]	; (8015e98 <problem_fetch+0x14508>)
 8015d3e:	461c      	mov	r4, r3
 8015d40:	4613      	mov	r3, r2
 8015d42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d44:	6020      	str	r0, [r4, #0]
 8015d46:	6061      	str	r1, [r4, #4]
 8015d48:	60a2      	str	r2, [r4, #8]
 8015d4a:	881a      	ldrh	r2, [r3, #0]
 8015d4c:	789b      	ldrb	r3, [r3, #2]
 8015d4e:	81a2      	strh	r2, [r4, #12]
 8015d50:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015d58:	4a50      	ldr	r2, [pc, #320]	; (8015e9c <problem_fetch+0x1450c>)
 8015d5a:	461c      	mov	r4, r3
 8015d5c:	4613      	mov	r3, r2
 8015d5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d60:	6020      	str	r0, [r4, #0]
 8015d62:	6061      	str	r1, [r4, #4]
 8015d64:	60a2      	str	r2, [r4, #8]
			break;
 8015d66:	f006 bd43 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 599 :
			strcpy(p->name,"SLASHSLASH");
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d70:	494b      	ldr	r1, [pc, #300]	; (8015ea0 <problem_fetch+0x14510>)
 8015d72:	461a      	mov	r2, r3
 8015d74:	460b      	mov	r3, r1
 8015d76:	cb03      	ldmia	r3!, {r0, r1}
 8015d78:	6010      	str	r0, [r2, #0]
 8015d7a:	6051      	str	r1, [r2, #4]
 8015d7c:	8819      	ldrh	r1, [r3, #0]
 8015d7e:	789b      	ldrb	r3, [r3, #2]
 8015d80:	8111      	strh	r1, [r2, #8]
 8015d82:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d8a:	4a46      	ldr	r2, [pc, #280]	; (8015ea4 <problem_fetch+0x14514>)
 8015d8c:	6810      	ldr	r0, [r2, #0]
 8015d8e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2205      	movs	r2, #5
 8015d94:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,A,C,A,A");
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	33a4      	adds	r3, #164	; 0xa4
 8015d9a:	4943      	ldr	r1, [pc, #268]	; (8015ea8 <problem_fetch+0x14518>)
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	460b      	mov	r3, r1
 8015da0:	cb03      	ldmia	r3!, {r0, r1}
 8015da2:	6010      	str	r0, [r2, #0]
 8015da4:	6051      	str	r1, [r2, #4]
 8015da6:	881b      	ldrh	r3, [r3, #0]
 8015da8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,13,14,18");
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	3304      	adds	r3, #4
 8015dae:	4a3f      	ldr	r2, [pc, #252]	; (8015eac <problem_fetch+0x1451c>)
 8015db0:	461c      	mov	r4, r3
 8015db2:	4613      	mov	r3, r2
 8015db4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015db6:	6020      	str	r0, [r4, #0]
 8015db8:	6061      	str	r1, [r4, #4]
 8015dba:	60a2      	str	r2, [r4, #8]
 8015dbc:	781b      	ldrb	r3, [r3, #0]
 8015dbe:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015dc6:	493a      	ldr	r1, [pc, #232]	; (8015eb0 <problem_fetch+0x14520>)
 8015dc8:	461a      	mov	r2, r3
 8015dca:	460b      	mov	r3, r1
 8015dcc:	cb03      	ldmia	r3!, {r0, r1}
 8015dce:	6010      	str	r0, [r2, #0]
 8015dd0:	6051      	str	r1, [r2, #4]
 8015dd2:	881b      	ldrh	r3, [r3, #0]
 8015dd4:	8113      	strh	r3, [r2, #8]
			break;
 8015dd6:	f006 bd0b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 600 :
			strcpy(p->name,"WORLDSTAR");
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015de0:	4934      	ldr	r1, [pc, #208]	; (8015eb4 <problem_fetch+0x14524>)
 8015de2:	461a      	mov	r2, r3
 8015de4:	460b      	mov	r3, r1
 8015de6:	cb03      	ldmia	r3!, {r0, r1}
 8015de8:	6010      	str	r0, [r2, #0]
 8015dea:	6051      	str	r1, [r2, #4]
 8015dec:	881b      	ldrh	r3, [r3, #0]
 8015dee:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015df6:	4a26      	ldr	r2, [pc, #152]	; (8015e90 <problem_fetch+0x14500>)
 8015df8:	8811      	ldrh	r1, [r2, #0]
 8015dfa:	7892      	ldrb	r2, [r2, #2]
 8015dfc:	8019      	strh	r1, [r3, #0]
 8015dfe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2207      	movs	r2, #7
 8015e04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,A,E,A,D,A");
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	33a4      	adds	r3, #164	; 0xa4
 8015e0a:	4a2b      	ldr	r2, [pc, #172]	; (8015eb8 <problem_fetch+0x14528>)
 8015e0c:	461c      	mov	r4, r3
 8015e0e:	4613      	mov	r3, r2
 8015e10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e12:	6020      	str	r0, [r4, #0]
 8015e14:	6061      	str	r1, [r4, #4]
 8015e16:	60a2      	str	r2, [r4, #8]
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,15,18");
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	3304      	adds	r3, #4
 8015e20:	4a26      	ldr	r2, [pc, #152]	; (8015ebc <problem_fetch+0x1452c>)
 8015e22:	461d      	mov	r5, r3
 8015e24:	4614      	mov	r4, r2
 8015e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e28:	6028      	str	r0, [r5, #0]
 8015e2a:	6069      	str	r1, [r5, #4]
 8015e2c:	60aa      	str	r2, [r5, #8]
 8015e2e:	60eb      	str	r3, [r5, #12]
 8015e30:	8823      	ldrh	r3, [r4, #0]
 8015e32:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015e3a:	4a21      	ldr	r2, [pc, #132]	; (8015ec0 <problem_fetch+0x14530>)
 8015e3c:	461c      	mov	r4, r3
 8015e3e:	4613      	mov	r3, r2
 8015e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e42:	6020      	str	r0, [r4, #0]
 8015e44:	6061      	str	r1, [r4, #4]
 8015e46:	60a2      	str	r2, [r4, #8]
 8015e48:	881b      	ldrh	r3, [r3, #0]
 8015e4a:	81a3      	strh	r3, [r4, #12]
			break;
 8015e4c:	f006 bcd0 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8015e50:	0802acc0 	.word	0x0802acc0
 8015e54:	08023c5c 	.word	0x08023c5c
 8015e58:	0802accc 	.word	0x0802accc
 8015e5c:	0802ace0 	.word	0x0802ace0
 8015e60:	08024438 	.word	0x08024438
 8015e64:	0802acf8 	.word	0x0802acf8
 8015e68:	08023b90 	.word	0x08023b90
 8015e6c:	0802ad04 	.word	0x0802ad04
 8015e70:	0802ad14 	.word	0x0802ad14
 8015e74:	08023cb4 	.word	0x08023cb4
 8015e78:	0802ad28 	.word	0x0802ad28
 8015e7c:	08024288 	.word	0x08024288
 8015e80:	0802ad38 	.word	0x0802ad38
 8015e84:	0802ad44 	.word	0x0802ad44
 8015e88:	08024270 	.word	0x08024270
 8015e8c:	0802ad54 	.word	0x0802ad54
 8015e90:	08023b50 	.word	0x08023b50
 8015e94:	0802ad60 	.word	0x0802ad60
 8015e98:	0802ad6c 	.word	0x0802ad6c
 8015e9c:	08023f2c 	.word	0x08023f2c
 8015ea0:	0802ad7c 	.word	0x0802ad7c
 8015ea4:	08023ccc 	.word	0x08023ccc
 8015ea8:	0802ad88 	.word	0x0802ad88
 8015eac:	0802ad94 	.word	0x0802ad94
 8015eb0:	0802405c 	.word	0x0802405c
 8015eb4:	0802ada4 	.word	0x0802ada4
 8015eb8:	0802adb0 	.word	0x0802adb0
 8015ebc:	0802adc0 	.word	0x0802adc0
 8015ec0:	08023d18 	.word	0x08023d18
		case 601 :
			strcpy(p->name,"NINO LA RONCHIA");
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015eca:	4aac      	ldr	r2, [pc, #688]	; (801617c <problem_fetch+0x147ec>)
 8015ecc:	461c      	mov	r4, r3
 8015ece:	4615      	mov	r5, r2
 8015ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ed2:	6020      	str	r0, [r4, #0]
 8015ed4:	6061      	str	r1, [r4, #4]
 8015ed6:	60a2      	str	r2, [r4, #8]
 8015ed8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015ee0:	4aa7      	ldr	r2, [pc, #668]	; (8016180 <problem_fetch+0x147f0>)
 8015ee2:	8811      	ldrh	r1, [r2, #0]
 8015ee4:	7892      	ldrb	r2, [r2, #2]
 8015ee6:	8019      	strh	r1, [r3, #0]
 8015ee8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	220b      	movs	r2, #11
 8015eee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,K,H,H,D,B,G,H,J,I");
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	33a4      	adds	r3, #164	; 0xa4
 8015ef4:	4aa3      	ldr	r2, [pc, #652]	; (8016184 <problem_fetch+0x147f4>)
 8015ef6:	461d      	mov	r5, r3
 8015ef8:	4614      	mov	r4, r2
 8015efa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015efc:	6028      	str	r0, [r5, #0]
 8015efe:	6069      	str	r1, [r5, #4]
 8015f00:	60aa      	str	r2, [r5, #8]
 8015f02:	60eb      	str	r3, [r5, #12]
 8015f04:	6820      	ldr	r0, [r4, #0]
 8015f06:	6128      	str	r0, [r5, #16]
 8015f08:	88a3      	ldrh	r3, [r4, #4]
 8015f0a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,5,9,13,16,7,10,10,10,5,18");
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	3304      	adds	r3, #4
 8015f10:	4a9d      	ldr	r2, [pc, #628]	; (8016188 <problem_fetch+0x147f8>)
 8015f12:	461d      	mov	r5, r3
 8015f14:	4614      	mov	r4, r2
 8015f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f18:	6028      	str	r0, [r5, #0]
 8015f1a:	6069      	str	r1, [r5, #4]
 8015f1c:	60aa      	str	r2, [r5, #8]
 8015f1e:	60eb      	str	r3, [r5, #12]
 8015f20:	cc07      	ldmia	r4!, {r0, r1, r2}
 8015f22:	6128      	str	r0, [r5, #16]
 8015f24:	6169      	str	r1, [r5, #20]
 8015f26:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015f2e:	4a97      	ldr	r2, [pc, #604]	; (801618c <problem_fetch+0x147fc>)
 8015f30:	461d      	mov	r5, r3
 8015f32:	4614      	mov	r4, r2
 8015f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f36:	6028      	str	r0, [r5, #0]
 8015f38:	6069      	str	r1, [r5, #4]
 8015f3a:	60aa      	str	r2, [r5, #8]
 8015f3c:	60eb      	str	r3, [r5, #12]
 8015f3e:	6820      	ldr	r0, [r4, #0]
 8015f40:	6128      	str	r0, [r5, #16]
 8015f42:	88a3      	ldrh	r3, [r4, #4]
 8015f44:	82ab      	strh	r3, [r5, #20]
			break;
 8015f46:	f006 bc53 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 602 :
			strcpy(p->name,"BOBBI'S STRETCH");
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015f50:	4a8f      	ldr	r2, [pc, #572]	; (8016190 <problem_fetch+0x14800>)
 8015f52:	461c      	mov	r4, r3
 8015f54:	4615      	mov	r5, r2
 8015f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015f58:	6020      	str	r0, [r4, #0]
 8015f5a:	6061      	str	r1, [r4, #4]
 8015f5c:	60a2      	str	r2, [r4, #8]
 8015f5e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015f66:	4a8b      	ldr	r2, [pc, #556]	; (8016194 <problem_fetch+0x14804>)
 8015f68:	6810      	ldr	r0, [r2, #0]
 8015f6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2205      	movs	r2, #5
 8015f70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,D,E,A");
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	33a4      	adds	r3, #164	; 0xa4
 8015f76:	4988      	ldr	r1, [pc, #544]	; (8016198 <problem_fetch+0x14808>)
 8015f78:	461a      	mov	r2, r3
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	cb03      	ldmia	r3!, {r0, r1}
 8015f7e:	6010      	str	r0, [r2, #0]
 8015f80:	6051      	str	r1, [r2, #4]
 8015f82:	881b      	ldrh	r3, [r3, #0]
 8015f84:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,15,16,18");
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	3304      	adds	r3, #4
 8015f8a:	4a84      	ldr	r2, [pc, #528]	; (801619c <problem_fetch+0x1480c>)
 8015f8c:	461c      	mov	r4, r3
 8015f8e:	4613      	mov	r3, r2
 8015f90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f92:	6020      	str	r0, [r4, #0]
 8015f94:	6061      	str	r1, [r4, #4]
 8015f96:	60a2      	str	r2, [r4, #8]
 8015f98:	881b      	ldrh	r3, [r3, #0]
 8015f9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015fa2:	497f      	ldr	r1, [pc, #508]	; (80161a0 <problem_fetch+0x14810>)
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	cb03      	ldmia	r3!, {r0, r1}
 8015faa:	6010      	str	r0, [r2, #0]
 8015fac:	6051      	str	r1, [r2, #4]
 8015fae:	881b      	ldrh	r3, [r3, #0]
 8015fb0:	8113      	strh	r3, [r2, #8]
			break;
 8015fb2:	f006 bc1d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 603 :
			strcpy(p->name,"A SPY WHO LOVED ME");
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015fbc:	4a79      	ldr	r2, [pc, #484]	; (80161a4 <problem_fetch+0x14814>)
 8015fbe:	461d      	mov	r5, r3
 8015fc0:	4614      	mov	r4, r2
 8015fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015fc4:	6028      	str	r0, [r5, #0]
 8015fc6:	6069      	str	r1, [r5, #4]
 8015fc8:	60aa      	str	r2, [r5, #8]
 8015fca:	60eb      	str	r3, [r5, #12]
 8015fcc:	8823      	ldrh	r3, [r4, #0]
 8015fce:	78a2      	ldrb	r2, [r4, #2]
 8015fd0:	822b      	strh	r3, [r5, #16]
 8015fd2:	4613      	mov	r3, r2
 8015fd4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015fdc:	4a6d      	ldr	r2, [pc, #436]	; (8016194 <problem_fetch+0x14804>)
 8015fde:	6810      	ldr	r0, [r2, #0]
 8015fe0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	2207      	movs	r2, #7
 8015fe6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,D,G,I,I");
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	33a4      	adds	r3, #164	; 0xa4
 8015fec:	4a6e      	ldr	r2, [pc, #440]	; (80161a8 <problem_fetch+0x14818>)
 8015fee:	461c      	mov	r4, r3
 8015ff0:	4613      	mov	r3, r2
 8015ff2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ff4:	6020      	str	r0, [r4, #0]
 8015ff6:	6061      	str	r1, [r4, #4]
 8015ff8:	60a2      	str	r2, [r4, #8]
 8015ffa:	881b      	ldrh	r3, [r3, #0]
 8015ffc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,15,15,10,18");
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	3304      	adds	r3, #4
 8016002:	4a6a      	ldr	r2, [pc, #424]	; (80161ac <problem_fetch+0x1481c>)
 8016004:	461d      	mov	r5, r3
 8016006:	4614      	mov	r4, r2
 8016008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801600a:	6028      	str	r0, [r5, #0]
 801600c:	6069      	str	r1, [r5, #4]
 801600e:	60aa      	str	r2, [r5, #8]
 8016010:	60eb      	str	r3, [r5, #12]
 8016012:	8823      	ldrh	r3, [r4, #0]
 8016014:	78a2      	ldrb	r2, [r4, #2]
 8016016:	822b      	strh	r3, [r5, #16]
 8016018:	4613      	mov	r3, r2
 801601a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016022:	4a63      	ldr	r2, [pc, #396]	; (80161b0 <problem_fetch+0x14820>)
 8016024:	461c      	mov	r4, r3
 8016026:	4613      	mov	r3, r2
 8016028:	cb07      	ldmia	r3!, {r0, r1, r2}
 801602a:	6020      	str	r0, [r4, #0]
 801602c:	6061      	str	r1, [r4, #4]
 801602e:	60a2      	str	r2, [r4, #8]
 8016030:	881b      	ldrh	r3, [r3, #0]
 8016032:	81a3      	strh	r3, [r4, #12]
			break;
 8016034:	f006 bbdc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 604 :
			strcpy(p->name,"ALLIE WARM UP");
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801603e:	4a5d      	ldr	r2, [pc, #372]	; (80161b4 <problem_fetch+0x14824>)
 8016040:	461c      	mov	r4, r3
 8016042:	4613      	mov	r3, r2
 8016044:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016046:	6020      	str	r0, [r4, #0]
 8016048:	6061      	str	r1, [r4, #4]
 801604a:	60a2      	str	r2, [r4, #8]
 801604c:	881b      	ldrh	r3, [r3, #0]
 801604e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016056:	4a58      	ldr	r2, [pc, #352]	; (80161b8 <problem_fetch+0x14828>)
 8016058:	6810      	ldr	r0, [r2, #0]
 801605a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2206      	movs	r2, #6
 8016060:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,G,J,I");
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	33a4      	adds	r3, #164	; 0xa4
 8016066:	4a55      	ldr	r2, [pc, #340]	; (80161bc <problem_fetch+0x1482c>)
 8016068:	461c      	mov	r4, r3
 801606a:	4613      	mov	r3, r2
 801606c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801606e:	6020      	str	r0, [r4, #0]
 8016070:	6061      	str	r1, [r4, #4]
 8016072:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,16,18");
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	3304      	adds	r3, #4
 8016078:	4a51      	ldr	r2, [pc, #324]	; (80161c0 <problem_fetch+0x14830>)
 801607a:	461c      	mov	r4, r3
 801607c:	4615      	mov	r5, r2
 801607e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016080:	6020      	str	r0, [r4, #0]
 8016082:	6061      	str	r1, [r4, #4]
 8016084:	60a2      	str	r2, [r4, #8]
 8016086:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801608e:	4a4d      	ldr	r2, [pc, #308]	; (80161c4 <problem_fetch+0x14834>)
 8016090:	461c      	mov	r4, r3
 8016092:	4613      	mov	r3, r2
 8016094:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016096:	6020      	str	r0, [r4, #0]
 8016098:	6061      	str	r1, [r4, #4]
 801609a:	60a2      	str	r2, [r4, #8]
			break;
 801609c:	f006 bba8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 605 :
			strcpy(p->name,"NEW YEARS DELUSIONS");
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80160a6:	4a48      	ldr	r2, [pc, #288]	; (80161c8 <problem_fetch+0x14838>)
 80160a8:	461d      	mov	r5, r3
 80160aa:	4614      	mov	r4, r2
 80160ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160ae:	6028      	str	r0, [r5, #0]
 80160b0:	6069      	str	r1, [r5, #4]
 80160b2:	60aa      	str	r2, [r5, #8]
 80160b4:	60eb      	str	r3, [r5, #12]
 80160b6:	6820      	ldr	r0, [r4, #0]
 80160b8:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80160c0:	4a42      	ldr	r2, [pc, #264]	; (80161cc <problem_fetch+0x1483c>)
 80160c2:	6810      	ldr	r0, [r2, #0]
 80160c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	2208      	movs	r2, #8
 80160ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,A,H,D,A");
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	33a4      	adds	r3, #164	; 0xa4
 80160d0:	4a3f      	ldr	r2, [pc, #252]	; (80161d0 <problem_fetch+0x14840>)
 80160d2:	461c      	mov	r4, r3
 80160d4:	4615      	mov	r5, r2
 80160d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80160d8:	6020      	str	r0, [r4, #0]
 80160da:	6061      	str	r1, [r4, #4]
 80160dc:	60a2      	str	r2, [r4, #8]
 80160de:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,15,14,8,15,18");
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	3304      	adds	r3, #4
 80160e4:	4a3b      	ldr	r2, [pc, #236]	; (80161d4 <problem_fetch+0x14844>)
 80160e6:	461d      	mov	r5, r3
 80160e8:	4614      	mov	r4, r2
 80160ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160ec:	6028      	str	r0, [r5, #0]
 80160ee:	6069      	str	r1, [r5, #4]
 80160f0:	60aa      	str	r2, [r5, #8]
 80160f2:	60eb      	str	r3, [r5, #12]
 80160f4:	6820      	ldr	r0, [r4, #0]
 80160f6:	6128      	str	r0, [r5, #16]
 80160f8:	7923      	ldrb	r3, [r4, #4]
 80160fa:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016102:	4a35      	ldr	r2, [pc, #212]	; (80161d8 <problem_fetch+0x14848>)
 8016104:	461c      	mov	r4, r3
 8016106:	4615      	mov	r5, r2
 8016108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801610a:	6020      	str	r0, [r4, #0]
 801610c:	6061      	str	r1, [r4, #4]
 801610e:	60a2      	str	r2, [r4, #8]
 8016110:	60e3      	str	r3, [r4, #12]
			break;
 8016112:	f006 bb6d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 606 :
			strcpy(p->name,"EAZEEPEAZEE");
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801611c:	4a2f      	ldr	r2, [pc, #188]	; (80161dc <problem_fetch+0x1484c>)
 801611e:	461c      	mov	r4, r3
 8016120:	4613      	mov	r3, r2
 8016122:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016124:	6020      	str	r0, [r4, #0]
 8016126:	6061      	str	r1, [r4, #4]
 8016128:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016130:	4a21      	ldr	r2, [pc, #132]	; (80161b8 <problem_fetch+0x14828>)
 8016132:	6810      	ldr	r0, [r2, #0]
 8016134:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2206      	movs	r2, #6
 801613a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,H,I");
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	33a4      	adds	r3, #164	; 0xa4
 8016140:	4a27      	ldr	r2, [pc, #156]	; (80161e0 <problem_fetch+0x14850>)
 8016142:	461c      	mov	r4, r3
 8016144:	4613      	mov	r3, r2
 8016146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016148:	6020      	str	r0, [r4, #0]
 801614a:	6061      	str	r1, [r4, #4]
 801614c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,16,18");
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	3304      	adds	r3, #4
 8016152:	4a24      	ldr	r2, [pc, #144]	; (80161e4 <problem_fetch+0x14854>)
 8016154:	461c      	mov	r4, r3
 8016156:	4615      	mov	r5, r2
 8016158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801615a:	6020      	str	r0, [r4, #0]
 801615c:	6061      	str	r1, [r4, #4]
 801615e:	60a2      	str	r2, [r4, #8]
 8016160:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016168:	4a16      	ldr	r2, [pc, #88]	; (80161c4 <problem_fetch+0x14834>)
 801616a:	461c      	mov	r4, r3
 801616c:	4613      	mov	r3, r2
 801616e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016170:	6020      	str	r0, [r4, #0]
 8016172:	6061      	str	r1, [r4, #4]
 8016174:	60a2      	str	r2, [r4, #8]
			break;
 8016176:	f006 bb3b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801617a:	bf00      	nop
 801617c:	0802add4 	.word	0x0802add4
 8016180:	08023b50 	.word	0x08023b50
 8016184:	0802ade4 	.word	0x0802ade4
 8016188:	0802adfc 	.word	0x0802adfc
 801618c:	080274f0 	.word	0x080274f0
 8016190:	0802ae18 	.word	0x0802ae18
 8016194:	08023d30 	.word	0x08023d30
 8016198:	0802ae28 	.word	0x0802ae28
 801619c:	0802ae34 	.word	0x0802ae34
 80161a0:	0802405c 	.word	0x0802405c
 80161a4:	0802ae44 	.word	0x0802ae44
 80161a8:	0802ae58 	.word	0x0802ae58
 80161ac:	0802ae68 	.word	0x0802ae68
 80161b0:	08023d18 	.word	0x08023d18
 80161b4:	0802ae7c 	.word	0x0802ae7c
 80161b8:	08023b90 	.word	0x08023b90
 80161bc:	0802ae8c 	.word	0x0802ae8c
 80161c0:	0802ae98 	.word	0x0802ae98
 80161c4:	08023f2c 	.word	0x08023f2c
 80161c8:	0802aea8 	.word	0x0802aea8
 80161cc:	08023ccc 	.word	0x08023ccc
 80161d0:	0802aebc 	.word	0x0802aebc
 80161d4:	0802aecc 	.word	0x0802aecc
 80161d8:	08023da0 	.word	0x08023da0
 80161dc:	0802aee4 	.word	0x0802aee4
 80161e0:	0802aef0 	.word	0x0802aef0
 80161e4:	0802aefc 	.word	0x0802aefc
		case 607 :
			strcpy(p->name,"THE YEAR OF THE ROOSTER");
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80161ee:	4ac3      	ldr	r2, [pc, #780]	; (80164fc <problem_fetch+0x14b6c>)
 80161f0:	461d      	mov	r5, r3
 80161f2:	4614      	mov	r4, r2
 80161f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161f6:	6028      	str	r0, [r5, #0]
 80161f8:	6069      	str	r1, [r5, #4]
 80161fa:	60aa      	str	r2, [r5, #8]
 80161fc:	60eb      	str	r3, [r5, #12]
 80161fe:	cc03      	ldmia	r4!, {r0, r1}
 8016200:	6128      	str	r0, [r5, #16]
 8016202:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B+");
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801620a:	4abd      	ldr	r2, [pc, #756]	; (8016500 <problem_fetch+0x14b70>)
 801620c:	6810      	ldr	r0, [r2, #0]
 801620e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	2207      	movs	r2, #7
 8016214:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,E,F,G,I");
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	33a4      	adds	r3, #164	; 0xa4
 801621a:	4aba      	ldr	r2, [pc, #744]	; (8016504 <problem_fetch+0x14b74>)
 801621c:	461c      	mov	r4, r3
 801621e:	4613      	mov	r3, r2
 8016220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016222:	6020      	str	r0, [r4, #0]
 8016224:	6061      	str	r1, [r4, #4]
 8016226:	60a2      	str	r2, [r4, #8]
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,5,9,14,13,6,18");
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	3304      	adds	r3, #4
 8016230:	4ab5      	ldr	r2, [pc, #724]	; (8016508 <problem_fetch+0x14b78>)
 8016232:	461d      	mov	r5, r3
 8016234:	4614      	mov	r4, r2
 8016236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016238:	6028      	str	r0, [r5, #0]
 801623a:	6069      	str	r1, [r5, #4]
 801623c:	60aa      	str	r2, [r5, #8]
 801623e:	60eb      	str	r3, [r5, #12]
 8016240:	8823      	ldrh	r3, [r4, #0]
 8016242:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e");
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801624a:	4ab0      	ldr	r2, [pc, #704]	; (801650c <problem_fetch+0x14b7c>)
 801624c:	461c      	mov	r4, r3
 801624e:	4613      	mov	r3, r2
 8016250:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016252:	6020      	str	r0, [r4, #0]
 8016254:	6061      	str	r1, [r4, #4]
 8016256:	60a2      	str	r2, [r4, #8]
 8016258:	881b      	ldrh	r3, [r3, #0]
 801625a:	81a3      	strh	r3, [r4, #12]
			break;
 801625c:	f006 bac8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 608 :
			strcpy(p->name,"PEACHY");
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016266:	4aaa      	ldr	r2, [pc, #680]	; (8016510 <problem_fetch+0x14b80>)
 8016268:	6810      	ldr	r0, [r2, #0]
 801626a:	6018      	str	r0, [r3, #0]
 801626c:	8891      	ldrh	r1, [r2, #4]
 801626e:	7992      	ldrb	r2, [r2, #6]
 8016270:	8099      	strh	r1, [r3, #4]
 8016272:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801627a:	4aa6      	ldr	r2, [pc, #664]	; (8016514 <problem_fetch+0x14b84>)
 801627c:	8811      	ldrh	r1, [r2, #0]
 801627e:	7892      	ldrb	r2, [r2, #2]
 8016280:	8019      	strh	r1, [r3, #0]
 8016282:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2207      	movs	r2, #7
 8016288:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	33a4      	adds	r3, #164	; 0xa4
 801628e:	4aa2      	ldr	r2, [pc, #648]	; (8016518 <problem_fetch+0x14b88>)
 8016290:	461c      	mov	r4, r3
 8016292:	4613      	mov	r3, r2
 8016294:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016296:	6020      	str	r0, [r4, #0]
 8016298:	6061      	str	r1, [r4, #4]
 801629a:	60a2      	str	r2, [r4, #8]
 801629c:	881b      	ldrh	r3, [r3, #0]
 801629e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	3304      	adds	r3, #4
 80162a4:	4a9d      	ldr	r2, [pc, #628]	; (801651c <problem_fetch+0x14b8c>)
 80162a6:	461d      	mov	r5, r3
 80162a8:	4614      	mov	r4, r2
 80162aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80162ac:	6028      	str	r0, [r5, #0]
 80162ae:	6069      	str	r1, [r5, #4]
 80162b0:	60aa      	str	r2, [r5, #8]
 80162b2:	60eb      	str	r3, [r5, #12]
 80162b4:	8823      	ldrh	r3, [r4, #0]
 80162b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80162be:	4a98      	ldr	r2, [pc, #608]	; (8016520 <problem_fetch+0x14b90>)
 80162c0:	461c      	mov	r4, r3
 80162c2:	4613      	mov	r3, r2
 80162c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162c6:	6020      	str	r0, [r4, #0]
 80162c8:	6061      	str	r1, [r4, #4]
 80162ca:	60a2      	str	r2, [r4, #8]
 80162cc:	881b      	ldrh	r3, [r3, #0]
 80162ce:	81a3      	strh	r3, [r4, #12]
			break;
 80162d0:	f006 ba8e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 609 :
			strcpy(p->name,"UFO@5");
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80162da:	4a92      	ldr	r2, [pc, #584]	; (8016524 <problem_fetch+0x14b94>)
 80162dc:	6810      	ldr	r0, [r2, #0]
 80162de:	6018      	str	r0, [r3, #0]
 80162e0:	8892      	ldrh	r2, [r2, #4]
 80162e2:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80162ea:	4a8f      	ldr	r2, [pc, #572]	; (8016528 <problem_fetch+0x14b98>)
 80162ec:	6810      	ldr	r0, [r2, #0]
 80162ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2206      	movs	r2, #6
 80162f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,E,D");
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	33a4      	adds	r3, #164	; 0xa4
 80162fa:	4a8c      	ldr	r2, [pc, #560]	; (801652c <problem_fetch+0x14b9c>)
 80162fc:	461c      	mov	r4, r3
 80162fe:	4613      	mov	r3, r2
 8016300:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016302:	6020      	str	r0, [r4, #0]
 8016304:	6061      	str	r1, [r4, #4]
 8016306:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,14,16,18");
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	3304      	adds	r3, #4
 801630c:	4a88      	ldr	r2, [pc, #544]	; (8016530 <problem_fetch+0x14ba0>)
 801630e:	461c      	mov	r4, r3
 8016310:	4615      	mov	r5, r2
 8016312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016314:	6020      	str	r0, [r4, #0]
 8016316:	6061      	str	r1, [r4, #4]
 8016318:	60a2      	str	r2, [r4, #8]
 801631a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016322:	4a84      	ldr	r2, [pc, #528]	; (8016534 <problem_fetch+0x14ba4>)
 8016324:	461c      	mov	r4, r3
 8016326:	4613      	mov	r3, r2
 8016328:	cb07      	ldmia	r3!, {r0, r1, r2}
 801632a:	6020      	str	r0, [r4, #0]
 801632c:	6061      	str	r1, [r4, #4]
 801632e:	60a2      	str	r2, [r4, #8]
			break;
 8016330:	f006 ba5e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 610 :
			strcpy(p->name,"HUNTED BY GUSTAV");
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801633a:	4a7f      	ldr	r2, [pc, #508]	; (8016538 <problem_fetch+0x14ba8>)
 801633c:	461d      	mov	r5, r3
 801633e:	4614      	mov	r4, r2
 8016340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016342:	6028      	str	r0, [r5, #0]
 8016344:	6069      	str	r1, [r5, #4]
 8016346:	60aa      	str	r2, [r5, #8]
 8016348:	60eb      	str	r3, [r5, #12]
 801634a:	7823      	ldrb	r3, [r4, #0]
 801634c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016354:	4a79      	ldr	r2, [pc, #484]	; (801653c <problem_fetch+0x14bac>)
 8016356:	6810      	ldr	r0, [r2, #0]
 8016358:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	2207      	movs	r2, #7
 801635e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D,A");
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	33a4      	adds	r3, #164	; 0xa4
 8016364:	4a76      	ldr	r2, [pc, #472]	; (8016540 <problem_fetch+0x14bb0>)
 8016366:	461c      	mov	r4, r3
 8016368:	4613      	mov	r3, r2
 801636a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801636c:	6020      	str	r0, [r4, #0]
 801636e:	6061      	str	r1, [r4, #4]
 8016370:	60a2      	str	r2, [r4, #8]
 8016372:	881b      	ldrh	r3, [r3, #0]
 8016374:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,14,15,18");
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	3304      	adds	r3, #4
 801637a:	4a72      	ldr	r2, [pc, #456]	; (8016544 <problem_fetch+0x14bb4>)
 801637c:	461d      	mov	r5, r3
 801637e:	4614      	mov	r4, r2
 8016380:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016382:	6028      	str	r0, [r5, #0]
 8016384:	6069      	str	r1, [r5, #4]
 8016386:	60aa      	str	r2, [r5, #8]
 8016388:	60eb      	str	r3, [r5, #12]
 801638a:	8823      	ldrh	r3, [r4, #0]
 801638c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016394:	4a62      	ldr	r2, [pc, #392]	; (8016520 <problem_fetch+0x14b90>)
 8016396:	461c      	mov	r4, r3
 8016398:	4613      	mov	r3, r2
 801639a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801639c:	6020      	str	r0, [r4, #0]
 801639e:	6061      	str	r1, [r4, #4]
 80163a0:	60a2      	str	r2, [r4, #8]
 80163a2:	881b      	ldrh	r3, [r3, #0]
 80163a4:	81a3      	strh	r3, [r4, #12]
			break;
 80163a6:	f006 ba23 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 611 :
			strcpy(p->name,"BOTTLE SERVICE");
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80163b0:	4a65      	ldr	r2, [pc, #404]	; (8016548 <problem_fetch+0x14bb8>)
 80163b2:	461c      	mov	r4, r3
 80163b4:	4613      	mov	r3, r2
 80163b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80163b8:	6020      	str	r0, [r4, #0]
 80163ba:	6061      	str	r1, [r4, #4]
 80163bc:	60a2      	str	r2, [r4, #8]
 80163be:	881a      	ldrh	r2, [r3, #0]
 80163c0:	789b      	ldrb	r3, [r3, #2]
 80163c2:	81a2      	strh	r2, [r4, #12]
 80163c4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80163cc:	4a5f      	ldr	r2, [pc, #380]	; (801654c <problem_fetch+0x14bbc>)
 80163ce:	8811      	ldrh	r1, [r2, #0]
 80163d0:	7892      	ldrb	r2, [r2, #2]
 80163d2:	8019      	strh	r1, [r3, #0]
 80163d4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2206      	movs	r2, #6
 80163da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,K,G,I");
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	33a4      	adds	r3, #164	; 0xa4
 80163e0:	4a5b      	ldr	r2, [pc, #364]	; (8016550 <problem_fetch+0x14bc0>)
 80163e2:	461c      	mov	r4, r3
 80163e4:	4613      	mov	r3, r2
 80163e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80163e8:	6020      	str	r0, [r4, #0]
 80163ea:	6061      	str	r1, [r4, #4]
 80163ec:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,15,18");
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	3304      	adds	r3, #4
 80163f2:	4a58      	ldr	r2, [pc, #352]	; (8016554 <problem_fetch+0x14bc4>)
 80163f4:	461c      	mov	r4, r3
 80163f6:	4615      	mov	r5, r2
 80163f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163fa:	6020      	str	r0, [r4, #0]
 80163fc:	6061      	str	r1, [r4, #4]
 80163fe:	60a2      	str	r2, [r4, #8]
 8016400:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016408:	4a53      	ldr	r2, [pc, #332]	; (8016558 <problem_fetch+0x14bc8>)
 801640a:	461c      	mov	r4, r3
 801640c:	4613      	mov	r3, r2
 801640e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016410:	6020      	str	r0, [r4, #0]
 8016412:	6061      	str	r1, [r4, #4]
 8016414:	60a2      	str	r2, [r4, #8]
			break;
 8016416:	f006 b9eb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 612 :
			strcpy(p->name,"FOX AND JAX");
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016420:	4a4e      	ldr	r2, [pc, #312]	; (801655c <problem_fetch+0x14bcc>)
 8016422:	461c      	mov	r4, r3
 8016424:	4613      	mov	r3, r2
 8016426:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016428:	6020      	str	r0, [r4, #0]
 801642a:	6061      	str	r1, [r4, #4]
 801642c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016434:	4a37      	ldr	r2, [pc, #220]	; (8016514 <problem_fetch+0x14b84>)
 8016436:	8811      	ldrh	r1, [r2, #0]
 8016438:	7892      	ldrb	r2, [r2, #2]
 801643a:	8019      	strh	r1, [r3, #0]
 801643c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	2205      	movs	r2, #5
 8016442:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,F,I,I");
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	33a4      	adds	r3, #164	; 0xa4
 8016448:	4945      	ldr	r1, [pc, #276]	; (8016560 <problem_fetch+0x14bd0>)
 801644a:	461a      	mov	r2, r3
 801644c:	460b      	mov	r3, r1
 801644e:	cb03      	ldmia	r3!, {r0, r1}
 8016450:	6010      	str	r0, [r2, #0]
 8016452:	6051      	str	r1, [r2, #4]
 8016454:	881b      	ldrh	r3, [r3, #0]
 8016456:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	3304      	adds	r3, #4
 801645c:	4a41      	ldr	r2, [pc, #260]	; (8016564 <problem_fetch+0x14bd4>)
 801645e:	461c      	mov	r4, r3
 8016460:	4613      	mov	r3, r2
 8016462:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016464:	6020      	str	r0, [r4, #0]
 8016466:	6061      	str	r1, [r4, #4]
 8016468:	60a2      	str	r2, [r4, #8]
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016474:	493c      	ldr	r1, [pc, #240]	; (8016568 <problem_fetch+0x14bd8>)
 8016476:	461a      	mov	r2, r3
 8016478:	460b      	mov	r3, r1
 801647a:	cb03      	ldmia	r3!, {r0, r1}
 801647c:	6010      	str	r0, [r2, #0]
 801647e:	6051      	str	r1, [r2, #4]
 8016480:	881b      	ldrh	r3, [r3, #0]
 8016482:	8113      	strh	r3, [r2, #8]
			break;
 8016484:	f006 b9b4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 613 :
			strcpy(p->name,"GOT A LICENSE TO KILL");
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801648e:	4a37      	ldr	r2, [pc, #220]	; (801656c <problem_fetch+0x14bdc>)
 8016490:	461d      	mov	r5, r3
 8016492:	4614      	mov	r4, r2
 8016494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016496:	6028      	str	r0, [r5, #0]
 8016498:	6069      	str	r1, [r5, #4]
 801649a:	60aa      	str	r2, [r5, #8]
 801649c:	60eb      	str	r3, [r5, #12]
 801649e:	6820      	ldr	r0, [r4, #0]
 80164a0:	6128      	str	r0, [r5, #16]
 80164a2:	88a3      	ldrh	r3, [r4, #4]
 80164a4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80164ac:	4a30      	ldr	r2, [pc, #192]	; (8016570 <problem_fetch+0x14be0>)
 80164ae:	8811      	ldrh	r1, [r2, #0]
 80164b0:	7892      	ldrb	r2, [r2, #2]
 80164b2:	8019      	strh	r1, [r3, #0]
 80164b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	2206      	movs	r2, #6
 80164ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,B,F,A");
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	33a4      	adds	r3, #164	; 0xa4
 80164c0:	4a2c      	ldr	r2, [pc, #176]	; (8016574 <problem_fetch+0x14be4>)
 80164c2:	461c      	mov	r4, r3
 80164c4:	4613      	mov	r3, r2
 80164c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164c8:	6020      	str	r0, [r4, #0]
 80164ca:	6061      	str	r1, [r4, #4]
 80164cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,11,18");
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	3304      	adds	r3, #4
 80164d2:	4a29      	ldr	r2, [pc, #164]	; (8016578 <problem_fetch+0x14be8>)
 80164d4:	461c      	mov	r4, r3
 80164d6:	4615      	mov	r5, r2
 80164d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164da:	6020      	str	r0, [r4, #0]
 80164dc:	6061      	str	r1, [r4, #4]
 80164de:	60a2      	str	r2, [r4, #8]
 80164e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80164e8:	4a12      	ldr	r2, [pc, #72]	; (8016534 <problem_fetch+0x14ba4>)
 80164ea:	461c      	mov	r4, r3
 80164ec:	4613      	mov	r3, r2
 80164ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164f0:	6020      	str	r0, [r4, #0]
 80164f2:	6061      	str	r1, [r4, #4]
 80164f4:	60a2      	str	r2, [r4, #8]
			break;
 80164f6:	f006 b97b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80164fa:	bf00      	nop
 80164fc:	0802af0c 	.word	0x0802af0c
 8016500:	08023ccc 	.word	0x08023ccc
 8016504:	0802af24 	.word	0x0802af24
 8016508:	0802af34 	.word	0x0802af34
 801650c:	0802af48 	.word	0x0802af48
 8016510:	0802af58 	.word	0x0802af58
 8016514:	08023c5c 	.word	0x08023c5c
 8016518:	0802a5f0 	.word	0x0802a5f0
 801651c:	08028878 	.word	0x08028878
 8016520:	08023d18 	.word	0x08023d18
 8016524:	0802af60 	.word	0x0802af60
 8016528:	08023b90 	.word	0x08023b90
 801652c:	0802af68 	.word	0x0802af68
 8016530:	0802af74 	.word	0x0802af74
 8016534:	08023f2c 	.word	0x08023f2c
 8016538:	0802af84 	.word	0x0802af84
 801653c:	08023c28 	.word	0x08023c28
 8016540:	0802af98 	.word	0x0802af98
 8016544:	0802afa8 	.word	0x0802afa8
 8016548:	0802afbc 	.word	0x0802afbc
 801654c:	08023b50 	.word	0x08023b50
 8016550:	0802afcc 	.word	0x0802afcc
 8016554:	0802afd8 	.word	0x0802afd8
 8016558:	08023b70 	.word	0x08023b70
 801655c:	0802afe8 	.word	0x0802afe8
 8016560:	0802aff4 	.word	0x0802aff4
 8016564:	080252c4 	.word	0x080252c4
 8016568:	0802405c 	.word	0x0802405c
 801656c:	0802b000 	.word	0x0802b000
 8016570:	080243c4 	.word	0x080243c4
 8016574:	0802b018 	.word	0x0802b018
 8016578:	0802b024 	.word	0x0802b024
		case 614 :
			strcpy(p->name,"JET-BLACK HAIR");
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016582:	4ac1      	ldr	r2, [pc, #772]	; (8016888 <problem_fetch+0x14ef8>)
 8016584:	461c      	mov	r4, r3
 8016586:	4613      	mov	r3, r2
 8016588:	cb07      	ldmia	r3!, {r0, r1, r2}
 801658a:	6020      	str	r0, [r4, #0]
 801658c:	6061      	str	r1, [r4, #4]
 801658e:	60a2      	str	r2, [r4, #8]
 8016590:	881a      	ldrh	r2, [r3, #0]
 8016592:	789b      	ldrb	r3, [r3, #2]
 8016594:	81a2      	strh	r2, [r4, #12]
 8016596:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801659e:	4abb      	ldr	r2, [pc, #748]	; (801688c <problem_fetch+0x14efc>)
 80165a0:	6810      	ldr	r0, [r2, #0]
 80165a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	2206      	movs	r2, #6
 80165a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,D,A");
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	33a4      	adds	r3, #164	; 0xa4
 80165ae:	4ab8      	ldr	r2, [pc, #736]	; (8016890 <problem_fetch+0x14f00>)
 80165b0:	461c      	mov	r4, r3
 80165b2:	4613      	mov	r3, r2
 80165b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165b6:	6020      	str	r0, [r4, #0]
 80165b8:	6061      	str	r1, [r4, #4]
 80165ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,15,18");
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	3304      	adds	r3, #4
 80165c0:	4ab4      	ldr	r2, [pc, #720]	; (8016894 <problem_fetch+0x14f04>)
 80165c2:	461c      	mov	r4, r3
 80165c4:	4615      	mov	r5, r2
 80165c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165c8:	6020      	str	r0, [r4, #0]
 80165ca:	6061      	str	r1, [r4, #4]
 80165cc:	60a2      	str	r2, [r4, #8]
 80165ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80165d6:	4ab0      	ldr	r2, [pc, #704]	; (8016898 <problem_fetch+0x14f08>)
 80165d8:	461c      	mov	r4, r3
 80165da:	4613      	mov	r3, r2
 80165dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165de:	6020      	str	r0, [r4, #0]
 80165e0:	6061      	str	r1, [r4, #4]
 80165e2:	60a2      	str	r2, [r4, #8]
			break;
 80165e4:	f006 b904 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 615 :
			strcpy(p->name,"BLACK CRAPPIE");
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80165ee:	4aab      	ldr	r2, [pc, #684]	; (801689c <problem_fetch+0x14f0c>)
 80165f0:	461c      	mov	r4, r3
 80165f2:	4613      	mov	r3, r2
 80165f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165f6:	6020      	str	r0, [r4, #0]
 80165f8:	6061      	str	r1, [r4, #4]
 80165fa:	60a2      	str	r2, [r4, #8]
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016606:	4aa6      	ldr	r2, [pc, #664]	; (80168a0 <problem_fetch+0x14f10>)
 8016608:	6810      	ldr	r0, [r2, #0]
 801660a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2206      	movs	r2, #6
 8016610:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,D");
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	33a4      	adds	r3, #164	; 0xa4
 8016616:	4aa3      	ldr	r2, [pc, #652]	; (80168a4 <problem_fetch+0x14f14>)
 8016618:	461c      	mov	r4, r3
 801661a:	4613      	mov	r3, r2
 801661c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801661e:	6020      	str	r0, [r4, #0]
 8016620:	6061      	str	r1, [r4, #4]
 8016622:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,9,12,14,18");
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	3304      	adds	r3, #4
 8016628:	4a9f      	ldr	r2, [pc, #636]	; (80168a8 <problem_fetch+0x14f18>)
 801662a:	461c      	mov	r4, r3
 801662c:	4613      	mov	r3, r2
 801662e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016630:	6020      	str	r0, [r4, #0]
 8016632:	6061      	str	r1, [r4, #4]
 8016634:	60a2      	str	r2, [r4, #8]
 8016636:	881a      	ldrh	r2, [r3, #0]
 8016638:	789b      	ldrb	r3, [r3, #2]
 801663a:	81a2      	strh	r2, [r4, #12]
 801663c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016644:	4a94      	ldr	r2, [pc, #592]	; (8016898 <problem_fetch+0x14f08>)
 8016646:	461c      	mov	r4, r3
 8016648:	4613      	mov	r3, r2
 801664a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801664c:	6020      	str	r0, [r4, #0]
 801664e:	6061      	str	r1, [r4, #4]
 8016650:	60a2      	str	r2, [r4, #8]
			break;
 8016652:	f006 b8cd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 616 :
			strcpy(p->name,"BLACK KISS BLACK");
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801665c:	4a93      	ldr	r2, [pc, #588]	; (80168ac <problem_fetch+0x14f1c>)
 801665e:	461d      	mov	r5, r3
 8016660:	4614      	mov	r4, r2
 8016662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016664:	6028      	str	r0, [r5, #0]
 8016666:	6069      	str	r1, [r5, #4]
 8016668:	60aa      	str	r2, [r5, #8]
 801666a:	60eb      	str	r3, [r5, #12]
 801666c:	7823      	ldrb	r3, [r4, #0]
 801666e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016676:	4a8e      	ldr	r2, [pc, #568]	; (80168b0 <problem_fetch+0x14f20>)
 8016678:	8811      	ldrh	r1, [r2, #0]
 801667a:	7892      	ldrb	r2, [r2, #2]
 801667c:	8019      	strh	r1, [r3, #0]
 801667e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2208      	movs	r2, #8
 8016684:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,H,C,G,E,I");
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	33a4      	adds	r3, #164	; 0xa4
 801668a:	4a8a      	ldr	r2, [pc, #552]	; (80168b4 <problem_fetch+0x14f24>)
 801668c:	461c      	mov	r4, r3
 801668e:	4615      	mov	r5, r2
 8016690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016692:	6020      	str	r0, [r4, #0]
 8016694:	6061      	str	r1, [r4, #4]
 8016696:	60a2      	str	r2, [r4, #8]
 8016698:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,10,13,14,16,18");
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	3304      	adds	r3, #4
 801669e:	4a86      	ldr	r2, [pc, #536]	; (80168b8 <problem_fetch+0x14f28>)
 80166a0:	461d      	mov	r5, r3
 80166a2:	4614      	mov	r4, r2
 80166a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166a6:	6028      	str	r0, [r5, #0]
 80166a8:	6069      	str	r1, [r5, #4]
 80166aa:	60aa      	str	r2, [r5, #8]
 80166ac:	60eb      	str	r3, [r5, #12]
 80166ae:	6820      	ldr	r0, [r4, #0]
 80166b0:	6128      	str	r0, [r5, #16]
 80166b2:	7923      	ldrb	r3, [r4, #4]
 80166b4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80166bc:	4a7f      	ldr	r2, [pc, #508]	; (80168bc <problem_fetch+0x14f2c>)
 80166be:	461c      	mov	r4, r3
 80166c0:	4615      	mov	r5, r2
 80166c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166c4:	6020      	str	r0, [r4, #0]
 80166c6:	6061      	str	r1, [r4, #4]
 80166c8:	60a2      	str	r2, [r4, #8]
 80166ca:	60e3      	str	r3, [r4, #12]
			break;
 80166cc:	f006 b890 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 617 :
			strcpy(p->name,"GORILLA NR.2");
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80166d6:	4a7a      	ldr	r2, [pc, #488]	; (80168c0 <problem_fetch+0x14f30>)
 80166d8:	461c      	mov	r4, r3
 80166da:	4613      	mov	r3, r2
 80166dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166de:	6020      	str	r0, [r4, #0]
 80166e0:	6061      	str	r1, [r4, #4]
 80166e2:	60a2      	str	r2, [r4, #8]
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80166ee:	4a75      	ldr	r2, [pc, #468]	; (80168c4 <problem_fetch+0x14f34>)
 80166f0:	6810      	ldr	r0, [r2, #0]
 80166f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	2204      	movs	r2, #4
 80166f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,D");
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	33a4      	adds	r3, #164	; 0xa4
 80166fe:	4972      	ldr	r1, [pc, #456]	; (80168c8 <problem_fetch+0x14f38>)
 8016700:	461a      	mov	r2, r3
 8016702:	460b      	mov	r3, r1
 8016704:	cb03      	ldmia	r3!, {r0, r1}
 8016706:	6010      	str	r0, [r2, #0]
 8016708:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	3304      	adds	r3, #4
 801670e:	496f      	ldr	r1, [pc, #444]	; (80168cc <problem_fetch+0x14f3c>)
 8016710:	461a      	mov	r2, r3
 8016712:	460b      	mov	r3, r1
 8016714:	cb03      	ldmia	r3!, {r0, r1}
 8016716:	6010      	str	r0, [r2, #0]
 8016718:	6051      	str	r1, [r2, #4]
 801671a:	8819      	ldrh	r1, [r3, #0]
 801671c:	789b      	ldrb	r3, [r3, #2]
 801671e:	8111      	strh	r1, [r2, #8]
 8016720:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016728:	4969      	ldr	r1, [pc, #420]	; (80168d0 <problem_fetch+0x14f40>)
 801672a:	461a      	mov	r2, r3
 801672c:	460b      	mov	r3, r1
 801672e:	cb03      	ldmia	r3!, {r0, r1}
 8016730:	6010      	str	r0, [r2, #0]
 8016732:	6051      	str	r1, [r2, #4]
			break;
 8016734:	f006 b85c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 618 :
			strcpy(p->name,"BLACK MAGIC");
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801673e:	4a65      	ldr	r2, [pc, #404]	; (80168d4 <problem_fetch+0x14f44>)
 8016740:	461c      	mov	r4, r3
 8016742:	4613      	mov	r3, r2
 8016744:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016746:	6020      	str	r0, [r4, #0]
 8016748:	6061      	str	r1, [r4, #4]
 801674a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016752:	4a5c      	ldr	r2, [pc, #368]	; (80168c4 <problem_fetch+0x14f34>)
 8016754:	6810      	ldr	r0, [r2, #0]
 8016756:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2207      	movs	r2, #7
 801675c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,C,H,F,H,I");
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	33a4      	adds	r3, #164	; 0xa4
 8016762:	4a5d      	ldr	r2, [pc, #372]	; (80168d8 <problem_fetch+0x14f48>)
 8016764:	461c      	mov	r4, r3
 8016766:	4613      	mov	r3, r2
 8016768:	cb07      	ldmia	r3!, {r0, r1, r2}
 801676a:	6020      	str	r0, [r4, #0]
 801676c:	6061      	str	r1, [r4, #4]
 801676e:	60a2      	str	r2, [r4, #8]
 8016770:	881b      	ldrh	r3, [r3, #0]
 8016772:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,13,16,18");
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	3304      	adds	r3, #4
 8016778:	4a58      	ldr	r2, [pc, #352]	; (80168dc <problem_fetch+0x14f4c>)
 801677a:	461d      	mov	r5, r3
 801677c:	4614      	mov	r4, r2
 801677e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016780:	6028      	str	r0, [r5, #0]
 8016782:	6069      	str	r1, [r5, #4]
 8016784:	60aa      	str	r2, [r5, #8]
 8016786:	60eb      	str	r3, [r5, #12]
 8016788:	8823      	ldrh	r3, [r4, #0]
 801678a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016792:	4a53      	ldr	r2, [pc, #332]	; (80168e0 <problem_fetch+0x14f50>)
 8016794:	461c      	mov	r4, r3
 8016796:	4613      	mov	r3, r2
 8016798:	cb07      	ldmia	r3!, {r0, r1, r2}
 801679a:	6020      	str	r0, [r4, #0]
 801679c:	6061      	str	r1, [r4, #4]
 801679e:	60a2      	str	r2, [r4, #8]
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	81a3      	strh	r3, [r4, #12]
			break;
 80167a4:	f006 b824 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 619 :
			strcpy(p->name,"GOOD LIFE");
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80167ae:	494d      	ldr	r1, [pc, #308]	; (80168e4 <problem_fetch+0x14f54>)
 80167b0:	461a      	mov	r2, r3
 80167b2:	460b      	mov	r3, r1
 80167b4:	cb03      	ldmia	r3!, {r0, r1}
 80167b6:	6010      	str	r0, [r2, #0]
 80167b8:	6051      	str	r1, [r2, #4]
 80167ba:	881b      	ldrh	r3, [r3, #0]
 80167bc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80167c4:	4a3f      	ldr	r2, [pc, #252]	; (80168c4 <problem_fetch+0x14f34>)
 80167c6:	6810      	ldr	r0, [r2, #0]
 80167c8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2206      	movs	r2, #6
 80167ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,F,A");
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	33a4      	adds	r3, #164	; 0xa4
 80167d4:	4a44      	ldr	r2, [pc, #272]	; (80168e8 <problem_fetch+0x14f58>)
 80167d6:	461c      	mov	r4, r3
 80167d8:	4613      	mov	r3, r2
 80167da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167dc:	6020      	str	r0, [r4, #0]
 80167de:	6061      	str	r1, [r4, #4]
 80167e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,15,11,18");
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	3304      	adds	r3, #4
 80167e6:	4a41      	ldr	r2, [pc, #260]	; (80168ec <problem_fetch+0x14f5c>)
 80167e8:	461c      	mov	r4, r3
 80167ea:	4613      	mov	r3, r2
 80167ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167ee:	6020      	str	r0, [r4, #0]
 80167f0:	6061      	str	r1, [r4, #4]
 80167f2:	60a2      	str	r2, [r4, #8]
 80167f4:	881a      	ldrh	r2, [r3, #0]
 80167f6:	789b      	ldrb	r3, [r3, #2]
 80167f8:	81a2      	strh	r2, [r4, #12]
 80167fa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016802:	4a25      	ldr	r2, [pc, #148]	; (8016898 <problem_fetch+0x14f08>)
 8016804:	461c      	mov	r4, r3
 8016806:	4613      	mov	r3, r2
 8016808:	cb07      	ldmia	r3!, {r0, r1, r2}
 801680a:	6020      	str	r0, [r4, #0]
 801680c:	6061      	str	r1, [r4, #4]
 801680e:	60a2      	str	r2, [r4, #8]
			break;
 8016810:	f005 bfee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 620 :
			strcpy(p->name,"CALCIUM20");
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801681a:	4935      	ldr	r1, [pc, #212]	; (80168f0 <problem_fetch+0x14f60>)
 801681c:	461a      	mov	r2, r3
 801681e:	460b      	mov	r3, r1
 8016820:	cb03      	ldmia	r3!, {r0, r1}
 8016822:	6010      	str	r0, [r2, #0]
 8016824:	6051      	str	r1, [r2, #4]
 8016826:	881b      	ldrh	r3, [r3, #0]
 8016828:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016830:	4a1b      	ldr	r2, [pc, #108]	; (80168a0 <problem_fetch+0x14f10>)
 8016832:	6810      	ldr	r0, [r2, #0]
 8016834:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	2207      	movs	r2, #7
 801683a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,D,B,D");
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	33a4      	adds	r3, #164	; 0xa4
 8016840:	4a2c      	ldr	r2, [pc, #176]	; (80168f4 <problem_fetch+0x14f64>)
 8016842:	461c      	mov	r4, r3
 8016844:	4613      	mov	r3, r2
 8016846:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016848:	6020      	str	r0, [r4, #0]
 801684a:	6061      	str	r1, [r4, #4]
 801684c:	60a2      	str	r2, [r4, #8]
 801684e:	881b      	ldrh	r3, [r3, #0]
 8016850:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,10,15,15,18");
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	3304      	adds	r3, #4
 8016856:	4a28      	ldr	r2, [pc, #160]	; (80168f8 <problem_fetch+0x14f68>)
 8016858:	461d      	mov	r5, r3
 801685a:	4614      	mov	r4, r2
 801685c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801685e:	6028      	str	r0, [r5, #0]
 8016860:	6069      	str	r1, [r5, #4]
 8016862:	60aa      	str	r2, [r5, #8]
 8016864:	60eb      	str	r3, [r5, #12]
 8016866:	8823      	ldrh	r3, [r4, #0]
 8016868:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016870:	4a22      	ldr	r2, [pc, #136]	; (80168fc <problem_fetch+0x14f6c>)
 8016872:	461c      	mov	r4, r3
 8016874:	4613      	mov	r3, r2
 8016876:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016878:	6020      	str	r0, [r4, #0]
 801687a:	6061      	str	r1, [r4, #4]
 801687c:	60a2      	str	r2, [r4, #8]
 801687e:	881b      	ldrh	r3, [r3, #0]
 8016880:	81a3      	strh	r3, [r4, #12]
			break;
 8016882:	f005 bfb5 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8016886:	bf00      	nop
 8016888:	0802b034 	.word	0x0802b034
 801688c:	08023ccc 	.word	0x08023ccc
 8016890:	0802b044 	.word	0x0802b044
 8016894:	0802b050 	.word	0x0802b050
 8016898:	08023f2c 	.word	0x08023f2c
 801689c:	0802b060 	.word	0x0802b060
 80168a0:	08023c28 	.word	0x08023c28
 80168a4:	0802b070 	.word	0x0802b070
 80168a8:	0802b07c 	.word	0x0802b07c
 80168ac:	0802b08c 	.word	0x0802b08c
 80168b0:	08023c5c 	.word	0x08023c5c
 80168b4:	0802b0a0 	.word	0x0802b0a0
 80168b8:	0802b0b0 	.word	0x0802b0b0
 80168bc:	08023da0 	.word	0x08023da0
 80168c0:	0802b0c8 	.word	0x0802b0c8
 80168c4:	08023d30 	.word	0x08023d30
 80168c8:	0802b0d8 	.word	0x0802b0d8
 80168cc:	08023cd8 	.word	0x08023cd8
 80168d0:	08023ce4 	.word	0x08023ce4
 80168d4:	0802b0e0 	.word	0x0802b0e0
 80168d8:	0802b0ec 	.word	0x0802b0ec
 80168dc:	0802b0fc 	.word	0x0802b0fc
 80168e0:	08023d18 	.word	0x08023d18
 80168e4:	0802b110 	.word	0x0802b110
 80168e8:	0802b11c 	.word	0x0802b11c
 80168ec:	0802b128 	.word	0x0802b128
 80168f0:	0802b138 	.word	0x0802b138
 80168f4:	0802b144 	.word	0x0802b144
 80168f8:	0802b154 	.word	0x0802b154
 80168fc:	08023c08 	.word	0x08023c08
		case 621 :
			strcpy(p->name,"BLACK IS BACK");
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016906:	4aa8      	ldr	r2, [pc, #672]	; (8016ba8 <problem_fetch+0x15218>)
 8016908:	461c      	mov	r4, r3
 801690a:	4613      	mov	r3, r2
 801690c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801690e:	6020      	str	r0, [r4, #0]
 8016910:	6061      	str	r1, [r4, #4]
 8016912:	60a2      	str	r2, [r4, #8]
 8016914:	881b      	ldrh	r3, [r3, #0]
 8016916:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801691e:	4aa3      	ldr	r2, [pc, #652]	; (8016bac <problem_fetch+0x1521c>)
 8016920:	6810      	ldr	r0, [r2, #0]
 8016922:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2207      	movs	r2, #7
 8016928:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,I,D");
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	33a4      	adds	r3, #164	; 0xa4
 801692e:	4aa0      	ldr	r2, [pc, #640]	; (8016bb0 <problem_fetch+0x15220>)
 8016930:	461c      	mov	r4, r3
 8016932:	4613      	mov	r3, r2
 8016934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016936:	6020      	str	r0, [r4, #0]
 8016938:	6061      	str	r1, [r4, #4]
 801693a:	60a2      	str	r2, [r4, #8]
 801693c:	881b      	ldrh	r3, [r3, #0]
 801693e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,10,13,14,18");
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	3304      	adds	r3, #4
 8016944:	4a9b      	ldr	r2, [pc, #620]	; (8016bb4 <problem_fetch+0x15224>)
 8016946:	461d      	mov	r5, r3
 8016948:	4614      	mov	r4, r2
 801694a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801694c:	6028      	str	r0, [r5, #0]
 801694e:	6069      	str	r1, [r5, #4]
 8016950:	60aa      	str	r2, [r5, #8]
 8016952:	60eb      	str	r3, [r5, #12]
 8016954:	8823      	ldrh	r3, [r4, #0]
 8016956:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801695e:	4a96      	ldr	r2, [pc, #600]	; (8016bb8 <problem_fetch+0x15228>)
 8016960:	461c      	mov	r4, r3
 8016962:	4613      	mov	r3, r2
 8016964:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016966:	6020      	str	r0, [r4, #0]
 8016968:	6061      	str	r1, [r4, #4]
 801696a:	60a2      	str	r2, [r4, #8]
 801696c:	881b      	ldrh	r3, [r3, #0]
 801696e:	81a3      	strh	r3, [r4, #12]
			break;
 8016970:	f005 bf3e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 622 :
			strcpy(p->name,"CAPTAIN RILEY");
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801697a:	4a90      	ldr	r2, [pc, #576]	; (8016bbc <problem_fetch+0x1522c>)
 801697c:	461c      	mov	r4, r3
 801697e:	4613      	mov	r3, r2
 8016980:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016982:	6020      	str	r0, [r4, #0]
 8016984:	6061      	str	r1, [r4, #4]
 8016986:	60a2      	str	r2, [r4, #8]
 8016988:	881b      	ldrh	r3, [r3, #0]
 801698a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016992:	4a8b      	ldr	r2, [pc, #556]	; (8016bc0 <problem_fetch+0x15230>)
 8016994:	6810      	ldr	r0, [r2, #0]
 8016996:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2206      	movs	r2, #6
 801699c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,E,A");
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	33a4      	adds	r3, #164	; 0xa4
 80169a2:	4a88      	ldr	r2, [pc, #544]	; (8016bc4 <problem_fetch+0x15234>)
 80169a4:	461c      	mov	r4, r3
 80169a6:	4613      	mov	r3, r2
 80169a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80169aa:	6020      	str	r0, [r4, #0]
 80169ac:	6061      	str	r1, [r4, #4]
 80169ae:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,16,18");
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	3304      	adds	r3, #4
 80169b4:	4a84      	ldr	r2, [pc, #528]	; (8016bc8 <problem_fetch+0x15238>)
 80169b6:	461c      	mov	r4, r3
 80169b8:	4615      	mov	r5, r2
 80169ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80169bc:	6020      	str	r0, [r4, #0]
 80169be:	6061      	str	r1, [r4, #4]
 80169c0:	60a2      	str	r2, [r4, #8]
 80169c2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80169ca:	4a80      	ldr	r2, [pc, #512]	; (8016bcc <problem_fetch+0x1523c>)
 80169cc:	461c      	mov	r4, r3
 80169ce:	4613      	mov	r3, r2
 80169d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80169d2:	6020      	str	r0, [r4, #0]
 80169d4:	6061      	str	r1, [r4, #4]
 80169d6:	60a2      	str	r2, [r4, #8]
			break;
 80169d8:	f005 bf0a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 623 :
			strcpy(p->name,"WPOLOGIM 2");
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80169e2:	497b      	ldr	r1, [pc, #492]	; (8016bd0 <problem_fetch+0x15240>)
 80169e4:	461a      	mov	r2, r3
 80169e6:	460b      	mov	r3, r1
 80169e8:	cb03      	ldmia	r3!, {r0, r1}
 80169ea:	6010      	str	r0, [r2, #0]
 80169ec:	6051      	str	r1, [r2, #4]
 80169ee:	8819      	ldrh	r1, [r3, #0]
 80169f0:	789b      	ldrb	r3, [r3, #2]
 80169f2:	8111      	strh	r1, [r2, #8]
 80169f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80169fc:	4a75      	ldr	r2, [pc, #468]	; (8016bd4 <problem_fetch+0x15244>)
 80169fe:	8811      	ldrh	r1, [r2, #0]
 8016a00:	7892      	ldrb	r2, [r2, #2]
 8016a02:	8019      	strh	r1, [r3, #0]
 8016a04:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2206      	movs	r2, #6
 8016a0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,I,D");
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	33a4      	adds	r3, #164	; 0xa4
 8016a10:	4a71      	ldr	r2, [pc, #452]	; (8016bd8 <problem_fetch+0x15248>)
 8016a12:	461c      	mov	r4, r3
 8016a14:	4613      	mov	r3, r2
 8016a16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a18:	6020      	str	r0, [r4, #0]
 8016a1a:	6061      	str	r1, [r4, #4]
 8016a1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	3304      	adds	r3, #4
 8016a22:	4a6e      	ldr	r2, [pc, #440]	; (8016bdc <problem_fetch+0x1524c>)
 8016a24:	461c      	mov	r4, r3
 8016a26:	4613      	mov	r3, r2
 8016a28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a2a:	6020      	str	r0, [r4, #0]
 8016a2c:	6061      	str	r1, [r4, #4]
 8016a2e:	60a2      	str	r2, [r4, #8]
 8016a30:	881a      	ldrh	r2, [r3, #0]
 8016a32:	789b      	ldrb	r3, [r3, #2]
 8016a34:	81a2      	strh	r2, [r4, #12]
 8016a36:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016a3e:	4a63      	ldr	r2, [pc, #396]	; (8016bcc <problem_fetch+0x1523c>)
 8016a40:	461c      	mov	r4, r3
 8016a42:	4613      	mov	r3, r2
 8016a44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a46:	6020      	str	r0, [r4, #0]
 8016a48:	6061      	str	r1, [r4, #4]
 8016a4a:	60a2      	str	r2, [r4, #8]
			break;
 8016a4c:	f005 bed0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 624 :
			strcpy(p->name,"I LOVE ROCK AND ROLL");
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016a56:	4a62      	ldr	r2, [pc, #392]	; (8016be0 <problem_fetch+0x15250>)
 8016a58:	461d      	mov	r5, r3
 8016a5a:	4614      	mov	r4, r2
 8016a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a5e:	6028      	str	r0, [r5, #0]
 8016a60:	6069      	str	r1, [r5, #4]
 8016a62:	60aa      	str	r2, [r5, #8]
 8016a64:	60eb      	str	r3, [r5, #12]
 8016a66:	6820      	ldr	r0, [r4, #0]
 8016a68:	6128      	str	r0, [r5, #16]
 8016a6a:	7923      	ldrb	r3, [r4, #4]
 8016a6c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016a74:	4a4d      	ldr	r2, [pc, #308]	; (8016bac <problem_fetch+0x1521c>)
 8016a76:	6810      	ldr	r0, [r2, #0]
 8016a78:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2207      	movs	r2, #7
 8016a7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,F,G,I,I,J");
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	33a4      	adds	r3, #164	; 0xa4
 8016a84:	4a57      	ldr	r2, [pc, #348]	; (8016be4 <problem_fetch+0x15254>)
 8016a86:	461c      	mov	r4, r3
 8016a88:	4613      	mov	r3, r2
 8016a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016a8c:	6020      	str	r0, [r4, #0]
 8016a8e:	6061      	str	r1, [r4, #4]
 8016a90:	60a2      	str	r2, [r4, #8]
 8016a92:	881b      	ldrh	r3, [r3, #0]
 8016a94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,16,11,9,14,18,5");
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	3304      	adds	r3, #4
 8016a9a:	4a53      	ldr	r2, [pc, #332]	; (8016be8 <problem_fetch+0x15258>)
 8016a9c:	461d      	mov	r5, r3
 8016a9e:	4614      	mov	r4, r2
 8016aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016aa2:	6028      	str	r0, [r5, #0]
 8016aa4:	6069      	str	r1, [r5, #4]
 8016aa6:	60aa      	str	r2, [r5, #8]
 8016aa8:	60eb      	str	r3, [r5, #12]
 8016aaa:	8823      	ldrh	r3, [r4, #0]
 8016aac:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,e,s");
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016ab4:	4a4d      	ldr	r2, [pc, #308]	; (8016bec <problem_fetch+0x1525c>)
 8016ab6:	461c      	mov	r4, r3
 8016ab8:	4613      	mov	r3, r2
 8016aba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016abc:	6020      	str	r0, [r4, #0]
 8016abe:	6061      	str	r1, [r4, #4]
 8016ac0:	60a2      	str	r2, [r4, #8]
 8016ac2:	881b      	ldrh	r3, [r3, #0]
 8016ac4:	81a3      	strh	r3, [r4, #12]
			break;
 8016ac6:	f005 be93 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 625 :
			strcpy(p->name,"THE DAILY RATION");
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ad0:	4a47      	ldr	r2, [pc, #284]	; (8016bf0 <problem_fetch+0x15260>)
 8016ad2:	461d      	mov	r5, r3
 8016ad4:	4614      	mov	r4, r2
 8016ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ad8:	6028      	str	r0, [r5, #0]
 8016ada:	6069      	str	r1, [r5, #4]
 8016adc:	60aa      	str	r2, [r5, #8]
 8016ade:	60eb      	str	r3, [r5, #12]
 8016ae0:	7823      	ldrb	r3, [r4, #0]
 8016ae2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016aea:	4a30      	ldr	r2, [pc, #192]	; (8016bac <problem_fetch+0x1521c>)
 8016aec:	6810      	ldr	r0, [r2, #0]
 8016aee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2207      	movs	r2, #7
 8016af4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,G,H,J,D");
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	33a4      	adds	r3, #164	; 0xa4
 8016afa:	4a3e      	ldr	r2, [pc, #248]	; (8016bf4 <problem_fetch+0x15264>)
 8016afc:	461c      	mov	r4, r3
 8016afe:	4613      	mov	r3, r2
 8016b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b02:	6020      	str	r0, [r4, #0]
 8016b04:	6061      	str	r1, [r4, #4]
 8016b06:	60a2      	str	r2, [r4, #8]
 8016b08:	881b      	ldrh	r3, [r3, #0]
 8016b0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,14,17,15,10,7,18");
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	3304      	adds	r3, #4
 8016b10:	4a39      	ldr	r2, [pc, #228]	; (8016bf8 <problem_fetch+0x15268>)
 8016b12:	461d      	mov	r5, r3
 8016b14:	4614      	mov	r4, r2
 8016b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b18:	6028      	str	r0, [r5, #0]
 8016b1a:	6069      	str	r1, [r5, #4]
 8016b1c:	60aa      	str	r2, [r5, #8]
 8016b1e:	60eb      	str	r3, [r5, #12]
 8016b20:	8823      	ldrh	r3, [r4, #0]
 8016b22:	78a2      	ldrb	r2, [r4, #2]
 8016b24:	822b      	strh	r3, [r5, #16]
 8016b26:	4613      	mov	r3, r2
 8016b28:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016b30:	4a21      	ldr	r2, [pc, #132]	; (8016bb8 <problem_fetch+0x15228>)
 8016b32:	461c      	mov	r4, r3
 8016b34:	4613      	mov	r3, r2
 8016b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b38:	6020      	str	r0, [r4, #0]
 8016b3a:	6061      	str	r1, [r4, #4]
 8016b3c:	60a2      	str	r2, [r4, #8]
 8016b3e:	881b      	ldrh	r3, [r3, #0]
 8016b40:	81a3      	strh	r3, [r4, #12]
			break;
 8016b42:	f005 be55 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 626 :
			strcpy(p->name,"ZLATI");
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016b4c:	4a2b      	ldr	r2, [pc, #172]	; (8016bfc <problem_fetch+0x1526c>)
 8016b4e:	6810      	ldr	r0, [r2, #0]
 8016b50:	6018      	str	r0, [r3, #0]
 8016b52:	8892      	ldrh	r2, [r2, #4]
 8016b54:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016b5c:	4a13      	ldr	r2, [pc, #76]	; (8016bac <problem_fetch+0x1521c>)
 8016b5e:	6810      	ldr	r0, [r2, #0]
 8016b60:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	2206      	movs	r2, #6
 8016b66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,E,D");
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	33a4      	adds	r3, #164	; 0xa4
 8016b6c:	4a24      	ldr	r2, [pc, #144]	; (8016c00 <problem_fetch+0x15270>)
 8016b6e:	461c      	mov	r4, r3
 8016b70:	4613      	mov	r3, r2
 8016b72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b74:	6020      	str	r0, [r4, #0]
 8016b76:	6061      	str	r1, [r4, #4]
 8016b78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,13,12,18");
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	3304      	adds	r3, #4
 8016b7e:	4a21      	ldr	r2, [pc, #132]	; (8016c04 <problem_fetch+0x15274>)
 8016b80:	461c      	mov	r4, r3
 8016b82:	4615      	mov	r5, r2
 8016b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b86:	6020      	str	r0, [r4, #0]
 8016b88:	6061      	str	r1, [r4, #4]
 8016b8a:	60a2      	str	r2, [r4, #8]
 8016b8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016b94:	4a0d      	ldr	r2, [pc, #52]	; (8016bcc <problem_fetch+0x1523c>)
 8016b96:	461c      	mov	r4, r3
 8016b98:	4613      	mov	r3, r2
 8016b9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b9c:	6020      	str	r0, [r4, #0]
 8016b9e:	6061      	str	r1, [r4, #4]
 8016ba0:	60a2      	str	r2, [r4, #8]
			break;
 8016ba2:	f005 be25 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8016ba6:	bf00      	nop
 8016ba8:	0802b168 	.word	0x0802b168
 8016bac:	08023c28 	.word	0x08023c28
 8016bb0:	0802b178 	.word	0x0802b178
 8016bb4:	0802b188 	.word	0x0802b188
 8016bb8:	08023d18 	.word	0x08023d18
 8016bbc:	0802b19c 	.word	0x0802b19c
 8016bc0:	08023b90 	.word	0x08023b90
 8016bc4:	0802b1ac 	.word	0x0802b1ac
 8016bc8:	0802b1b8 	.word	0x0802b1b8
 8016bcc:	08023f2c 	.word	0x08023f2c
 8016bd0:	0802b1c8 	.word	0x0802b1c8
 8016bd4:	08024288 	.word	0x08024288
 8016bd8:	0802b1d4 	.word	0x0802b1d4
 8016bdc:	08028114 	.word	0x08028114
 8016be0:	0802b1e0 	.word	0x0802b1e0
 8016be4:	0802b1f8 	.word	0x0802b1f8
 8016be8:	0802b208 	.word	0x0802b208
 8016bec:	0802b21c 	.word	0x0802b21c
 8016bf0:	0802b22c 	.word	0x0802b22c
 8016bf4:	0802b240 	.word	0x0802b240
 8016bf8:	0802b250 	.word	0x0802b250
 8016bfc:	0802b264 	.word	0x0802b264
 8016c00:	0802b26c 	.word	0x0802b26c
 8016c04:	0802b278 	.word	0x0802b278
		case 627 :
			strcpy(p->name,"FISHIN FOR A COMPLIMENT");
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016c0e:	4aaa      	ldr	r2, [pc, #680]	; (8016eb8 <problem_fetch+0x15528>)
 8016c10:	461d      	mov	r5, r3
 8016c12:	4614      	mov	r4, r2
 8016c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c16:	6028      	str	r0, [r5, #0]
 8016c18:	6069      	str	r1, [r5, #4]
 8016c1a:	60aa      	str	r2, [r5, #8]
 8016c1c:	60eb      	str	r3, [r5, #12]
 8016c1e:	cc03      	ldmia	r4!, {r0, r1}
 8016c20:	6128      	str	r0, [r5, #16]
 8016c22:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c2a:	4aa4      	ldr	r2, [pc, #656]	; (8016ebc <problem_fetch+0x1552c>)
 8016c2c:	6810      	ldr	r0, [r2, #0]
 8016c2e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2205      	movs	r2, #5
 8016c34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,D");
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	33a4      	adds	r3, #164	; 0xa4
 8016c3a:	49a1      	ldr	r1, [pc, #644]	; (8016ec0 <problem_fetch+0x15530>)
 8016c3c:	461a      	mov	r2, r3
 8016c3e:	460b      	mov	r3, r1
 8016c40:	cb03      	ldmia	r3!, {r0, r1}
 8016c42:	6010      	str	r0, [r2, #0]
 8016c44:	6051      	str	r1, [r2, #4]
 8016c46:	881b      	ldrh	r3, [r3, #0]
 8016c48:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,13,18");
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	3304      	adds	r3, #4
 8016c4e:	4a9d      	ldr	r2, [pc, #628]	; (8016ec4 <problem_fetch+0x15534>)
 8016c50:	461c      	mov	r4, r3
 8016c52:	4613      	mov	r3, r2
 8016c54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016c56:	6020      	str	r0, [r4, #0]
 8016c58:	6061      	str	r1, [r4, #4]
 8016c5a:	60a2      	str	r2, [r4, #8]
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016c66:	4998      	ldr	r1, [pc, #608]	; (8016ec8 <problem_fetch+0x15538>)
 8016c68:	461a      	mov	r2, r3
 8016c6a:	460b      	mov	r3, r1
 8016c6c:	cb03      	ldmia	r3!, {r0, r1}
 8016c6e:	6010      	str	r0, [r2, #0]
 8016c70:	6051      	str	r1, [r2, #4]
 8016c72:	881b      	ldrh	r3, [r3, #0]
 8016c74:	8113      	strh	r3, [r2, #8]
			break;
 8016c76:	f005 bdbb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 628 :
			strcpy(p->name,"サミシクナイト");
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016c80:	4a92      	ldr	r2, [pc, #584]	; (8016ecc <problem_fetch+0x1553c>)
 8016c82:	461d      	mov	r5, r3
 8016c84:	4614      	mov	r4, r2
 8016c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016c88:	6028      	str	r0, [r5, #0]
 8016c8a:	6069      	str	r1, [r5, #4]
 8016c8c:	60aa      	str	r2, [r5, #8]
 8016c8e:	60eb      	str	r3, [r5, #12]
 8016c90:	6820      	ldr	r0, [r4, #0]
 8016c92:	6128      	str	r0, [r5, #16]
 8016c94:	88a3      	ldrh	r3, [r4, #4]
 8016c96:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c9e:	4a8c      	ldr	r2, [pc, #560]	; (8016ed0 <problem_fetch+0x15540>)
 8016ca0:	6810      	ldr	r0, [r2, #0]
 8016ca2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	2209      	movs	r2, #9
 8016ca8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,B,E,C,G,G,I");
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	33a4      	adds	r3, #164	; 0xa4
 8016cae:	4a89      	ldr	r2, [pc, #548]	; (8016ed4 <problem_fetch+0x15544>)
 8016cb0:	461d      	mov	r5, r3
 8016cb2:	4614      	mov	r4, r2
 8016cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cb6:	6028      	str	r0, [r5, #0]
 8016cb8:	6069      	str	r1, [r5, #4]
 8016cba:	60aa      	str	r2, [r5, #8]
 8016cbc:	60eb      	str	r3, [r5, #12]
 8016cbe:	8823      	ldrh	r3, [r4, #0]
 8016cc0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,10,12,13,15,17,18");
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	4a84      	ldr	r2, [pc, #528]	; (8016ed8 <problem_fetch+0x15548>)
 8016cc8:	461d      	mov	r5, r3
 8016cca:	4614      	mov	r4, r2
 8016ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cce:	6028      	str	r0, [r5, #0]
 8016cd0:	6069      	str	r1, [r5, #4]
 8016cd2:	60aa      	str	r2, [r5, #8]
 8016cd4:	60eb      	str	r3, [r5, #12]
 8016cd6:	cc03      	ldmia	r4!, {r0, r1}
 8016cd8:	6128      	str	r0, [r5, #16]
 8016cda:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016ce2:	4a7e      	ldr	r2, [pc, #504]	; (8016edc <problem_fetch+0x1554c>)
 8016ce4:	461d      	mov	r5, r3
 8016ce6:	4614      	mov	r4, r2
 8016ce8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cea:	6028      	str	r0, [r5, #0]
 8016cec:	6069      	str	r1, [r5, #4]
 8016cee:	60aa      	str	r2, [r5, #8]
 8016cf0:	60eb      	str	r3, [r5, #12]
 8016cf2:	8823      	ldrh	r3, [r4, #0]
 8016cf4:	822b      	strh	r3, [r5, #16]
			break;
 8016cf6:	f005 bd7b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 629 :
			strcpy(p->name,"NEIL1");
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016d00:	4a77      	ldr	r2, [pc, #476]	; (8016ee0 <problem_fetch+0x15550>)
 8016d02:	6810      	ldr	r0, [r2, #0]
 8016d04:	6018      	str	r0, [r3, #0]
 8016d06:	8892      	ldrh	r2, [r2, #4]
 8016d08:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d10:	4a6f      	ldr	r2, [pc, #444]	; (8016ed0 <problem_fetch+0x15540>)
 8016d12:	6810      	ldr	r0, [r2, #0]
 8016d14:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	2208      	movs	r2, #8
 8016d1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,D,C,A");
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	33a4      	adds	r3, #164	; 0xa4
 8016d20:	4a70      	ldr	r2, [pc, #448]	; (8016ee4 <problem_fetch+0x15554>)
 8016d22:	461c      	mov	r4, r3
 8016d24:	4615      	mov	r5, r2
 8016d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d28:	6020      	str	r0, [r4, #0]
 8016d2a:	6061      	str	r1, [r4, #4]
 8016d2c:	60a2      	str	r2, [r4, #8]
 8016d2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,11,16,18");
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	3304      	adds	r3, #4
 8016d34:	4a6c      	ldr	r2, [pc, #432]	; (8016ee8 <problem_fetch+0x15558>)
 8016d36:	461d      	mov	r5, r3
 8016d38:	4614      	mov	r4, r2
 8016d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d3c:	6028      	str	r0, [r5, #0]
 8016d3e:	6069      	str	r1, [r5, #4]
 8016d40:	60aa      	str	r2, [r5, #8]
 8016d42:	60eb      	str	r3, [r5, #12]
 8016d44:	6820      	ldr	r0, [r4, #0]
 8016d46:	6128      	str	r0, [r5, #16]
 8016d48:	7923      	ldrb	r3, [r4, #4]
 8016d4a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016d52:	4a66      	ldr	r2, [pc, #408]	; (8016eec <problem_fetch+0x1555c>)
 8016d54:	461c      	mov	r4, r3
 8016d56:	4615      	mov	r5, r2
 8016d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016d5a:	6020      	str	r0, [r4, #0]
 8016d5c:	6061      	str	r1, [r4, #4]
 8016d5e:	60a2      	str	r2, [r4, #8]
 8016d60:	60e3      	str	r3, [r4, #12]
			break;
 8016d62:	f005 bd45 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 630 :
			strcpy(p->name,"TIAMAT");
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016d6c:	4a60      	ldr	r2, [pc, #384]	; (8016ef0 <problem_fetch+0x15560>)
 8016d6e:	6810      	ldr	r0, [r2, #0]
 8016d70:	6018      	str	r0, [r3, #0]
 8016d72:	8891      	ldrh	r1, [r2, #4]
 8016d74:	7992      	ldrb	r2, [r2, #6]
 8016d76:	8099      	strh	r1, [r3, #4]
 8016d78:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d80:	4a53      	ldr	r2, [pc, #332]	; (8016ed0 <problem_fetch+0x15540>)
 8016d82:	6810      	ldr	r0, [r2, #0]
 8016d84:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	2207      	movs	r2, #7
 8016d8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,I,G,I");
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	33a4      	adds	r3, #164	; 0xa4
 8016d90:	4a58      	ldr	r2, [pc, #352]	; (8016ef4 <problem_fetch+0x15564>)
 8016d92:	461c      	mov	r4, r3
 8016d94:	4613      	mov	r3, r2
 8016d96:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d98:	6020      	str	r0, [r4, #0]
 8016d9a:	6061      	str	r1, [r4, #4]
 8016d9c:	60a2      	str	r2, [r4, #8]
 8016d9e:	881b      	ldrh	r3, [r3, #0]
 8016da0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	3304      	adds	r3, #4
 8016da6:	4a54      	ldr	r2, [pc, #336]	; (8016ef8 <problem_fetch+0x15568>)
 8016da8:	461d      	mov	r5, r3
 8016daa:	4614      	mov	r4, r2
 8016dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dae:	6028      	str	r0, [r5, #0]
 8016db0:	6069      	str	r1, [r5, #4]
 8016db2:	60aa      	str	r2, [r5, #8]
 8016db4:	60eb      	str	r3, [r5, #12]
 8016db6:	8823      	ldrh	r3, [r4, #0]
 8016db8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016dc0:	4a4e      	ldr	r2, [pc, #312]	; (8016efc <problem_fetch+0x1556c>)
 8016dc2:	461c      	mov	r4, r3
 8016dc4:	4613      	mov	r3, r2
 8016dc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016dc8:	6020      	str	r0, [r4, #0]
 8016dca:	6061      	str	r1, [r4, #4]
 8016dcc:	60a2      	str	r2, [r4, #8]
 8016dce:	881b      	ldrh	r3, [r3, #0]
 8016dd0:	81a3      	strh	r3, [r4, #12]
			break;
 8016dd2:	f005 bd0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 631 :
			strcpy(p->name,"MOON SHADOW");
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ddc:	4a48      	ldr	r2, [pc, #288]	; (8016f00 <problem_fetch+0x15570>)
 8016dde:	461c      	mov	r4, r3
 8016de0:	4613      	mov	r3, r2
 8016de2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016de4:	6020      	str	r0, [r4, #0]
 8016de6:	6061      	str	r1, [r4, #4]
 8016de8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016df0:	4a32      	ldr	r2, [pc, #200]	; (8016ebc <problem_fetch+0x1552c>)
 8016df2:	6810      	ldr	r0, [r2, #0]
 8016df4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2208      	movs	r2, #8
 8016dfa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,I,D,G,I");
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	33a4      	adds	r3, #164	; 0xa4
 8016e00:	4a40      	ldr	r2, [pc, #256]	; (8016f04 <problem_fetch+0x15574>)
 8016e02:	461c      	mov	r4, r3
 8016e04:	4615      	mov	r5, r2
 8016e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e08:	6020      	str	r0, [r4, #0]
 8016e0a:	6061      	str	r1, [r4, #4]
 8016e0c:	60a2      	str	r2, [r4, #8]
 8016e0e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,11,15,18");
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	3304      	adds	r3, #4
 8016e14:	4a3c      	ldr	r2, [pc, #240]	; (8016f08 <problem_fetch+0x15578>)
 8016e16:	461d      	mov	r5, r3
 8016e18:	4614      	mov	r4, r2
 8016e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e1c:	6028      	str	r0, [r5, #0]
 8016e1e:	6069      	str	r1, [r5, #4]
 8016e20:	60aa      	str	r2, [r5, #8]
 8016e22:	60eb      	str	r3, [r5, #12]
 8016e24:	6820      	ldr	r0, [r4, #0]
 8016e26:	6128      	str	r0, [r5, #16]
 8016e28:	7923      	ldrb	r3, [r4, #4]
 8016e2a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016e32:	4a2e      	ldr	r2, [pc, #184]	; (8016eec <problem_fetch+0x1555c>)
 8016e34:	461c      	mov	r4, r3
 8016e36:	4615      	mov	r5, r2
 8016e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e3a:	6020      	str	r0, [r4, #0]
 8016e3c:	6061      	str	r1, [r4, #4]
 8016e3e:	60a2      	str	r2, [r4, #8]
 8016e40:	60e3      	str	r3, [r4, #12]
			break;
 8016e42:	f005 bcd5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 632 :
			strcpy(p->name,"DAS SCHNITZEL ALT");
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e4c:	4a2f      	ldr	r2, [pc, #188]	; (8016f0c <problem_fetch+0x1557c>)
 8016e4e:	461d      	mov	r5, r3
 8016e50:	4614      	mov	r4, r2
 8016e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e54:	6028      	str	r0, [r5, #0]
 8016e56:	6069      	str	r1, [r5, #4]
 8016e58:	60aa      	str	r2, [r5, #8]
 8016e5a:	60eb      	str	r3, [r5, #12]
 8016e5c:	8823      	ldrh	r3, [r4, #0]
 8016e5e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016e66:	4a2a      	ldr	r2, [pc, #168]	; (8016f10 <problem_fetch+0x15580>)
 8016e68:	6810      	ldr	r0, [r2, #0]
 8016e6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2206      	movs	r2, #6
 8016e70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,F,G,D");
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	33a4      	adds	r3, #164	; 0xa4
 8016e76:	4a27      	ldr	r2, [pc, #156]	; (8016f14 <problem_fetch+0x15584>)
 8016e78:	461c      	mov	r4, r3
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e7e:	6020      	str	r0, [r4, #0]
 8016e80:	6061      	str	r1, [r4, #4]
 8016e82:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,13,14,18");
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	3304      	adds	r3, #4
 8016e88:	4a23      	ldr	r2, [pc, #140]	; (8016f18 <problem_fetch+0x15588>)
 8016e8a:	461c      	mov	r4, r3
 8016e8c:	4613      	mov	r3, r2
 8016e8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e90:	6020      	str	r0, [r4, #0]
 8016e92:	6061      	str	r1, [r4, #4]
 8016e94:	60a2      	str	r2, [r4, #8]
 8016e96:	881a      	ldrh	r2, [r3, #0]
 8016e98:	789b      	ldrb	r3, [r3, #2]
 8016e9a:	81a2      	strh	r2, [r4, #12]
 8016e9c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016ea4:	4a1d      	ldr	r2, [pc, #116]	; (8016f1c <problem_fetch+0x1558c>)
 8016ea6:	461c      	mov	r4, r3
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016eac:	6020      	str	r0, [r4, #0]
 8016eae:	6061      	str	r1, [r4, #4]
 8016eb0:	60a2      	str	r2, [r4, #8]
			break;
 8016eb2:	f005 bc9d 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8016eb6:	bf00      	nop
 8016eb8:	0802b288 	.word	0x0802b288
 8016ebc:	08023c28 	.word	0x08023c28
 8016ec0:	0802b2a0 	.word	0x0802b2a0
 8016ec4:	0802b2ac 	.word	0x0802b2ac
 8016ec8:	0802405c 	.word	0x0802405c
 8016ecc:	0802b2bc 	.word	0x0802b2bc
 8016ed0:	08023b90 	.word	0x08023b90
 8016ed4:	0802b2d4 	.word	0x0802b2d4
 8016ed8:	0802b2e8 	.word	0x0802b2e8
 8016edc:	08024b74 	.word	0x08024b74
 8016ee0:	0802b300 	.word	0x0802b300
 8016ee4:	0802b308 	.word	0x0802b308
 8016ee8:	0802b318 	.word	0x0802b318
 8016eec:	08023cb4 	.word	0x08023cb4
 8016ef0:	0802b330 	.word	0x0802b330
 8016ef4:	0802b338 	.word	0x0802b338
 8016ef8:	08024360 	.word	0x08024360
 8016efc:	08023c08 	.word	0x08023c08
 8016f00:	0802b348 	.word	0x0802b348
 8016f04:	0802b354 	.word	0x0802b354
 8016f08:	0802b364 	.word	0x0802b364
 8016f0c:	0802b37c 	.word	0x0802b37c
 8016f10:	08023ccc 	.word	0x08023ccc
 8016f14:	0802b390 	.word	0x0802b390
 8016f18:	0802b39c 	.word	0x0802b39c
 8016f1c:	08023b70 	.word	0x08023b70
		case 633 :
			strcpy(p->name,"ACG68");
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016f26:	4ac2      	ldr	r2, [pc, #776]	; (8017230 <problem_fetch+0x158a0>)
 8016f28:	6810      	ldr	r0, [r2, #0]
 8016f2a:	6018      	str	r0, [r3, #0]
 8016f2c:	8892      	ldrh	r2, [r2, #4]
 8016f2e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016f36:	4abf      	ldr	r2, [pc, #764]	; (8017234 <problem_fetch+0x158a4>)
 8016f38:	6810      	ldr	r0, [r2, #0]
 8016f3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	2208      	movs	r2, #8
 8016f40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,B,E,A");
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	33a4      	adds	r3, #164	; 0xa4
 8016f46:	4abc      	ldr	r2, [pc, #752]	; (8017238 <problem_fetch+0x158a8>)
 8016f48:	461c      	mov	r4, r3
 8016f4a:	4615      	mov	r5, r2
 8016f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f4e:	6020      	str	r0, [r4, #0]
 8016f50:	6061      	str	r1, [r4, #4]
 8016f52:	60a2      	str	r2, [r4, #8]
 8016f54:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,6,16,18");
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	3304      	adds	r3, #4
 8016f5a:	4ab8      	ldr	r2, [pc, #736]	; (801723c <problem_fetch+0x158ac>)
 8016f5c:	461d      	mov	r5, r3
 8016f5e:	4614      	mov	r4, r2
 8016f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f62:	6028      	str	r0, [r5, #0]
 8016f64:	6069      	str	r1, [r5, #4]
 8016f66:	60aa      	str	r2, [r5, #8]
 8016f68:	60eb      	str	r3, [r5, #12]
 8016f6a:	6820      	ldr	r0, [r4, #0]
 8016f6c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016f74:	4ab2      	ldr	r2, [pc, #712]	; (8017240 <problem_fetch+0x158b0>)
 8016f76:	461c      	mov	r4, r3
 8016f78:	4615      	mov	r5, r2
 8016f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f7c:	6020      	str	r0, [r4, #0]
 8016f7e:	6061      	str	r1, [r4, #4]
 8016f80:	60a2      	str	r2, [r4, #8]
 8016f82:	60e3      	str	r3, [r4, #12]
			break;
 8016f84:	f005 bc34 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 634 :
			strcpy(p->name,"ROBERTDS#1");
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016f8e:	49ad      	ldr	r1, [pc, #692]	; (8017244 <problem_fetch+0x158b4>)
 8016f90:	461a      	mov	r2, r3
 8016f92:	460b      	mov	r3, r1
 8016f94:	cb03      	ldmia	r3!, {r0, r1}
 8016f96:	6010      	str	r0, [r2, #0]
 8016f98:	6051      	str	r1, [r2, #4]
 8016f9a:	8819      	ldrh	r1, [r3, #0]
 8016f9c:	789b      	ldrb	r3, [r3, #2]
 8016f9e:	8111      	strh	r1, [r2, #8]
 8016fa0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016fa8:	4aa7      	ldr	r2, [pc, #668]	; (8017248 <problem_fetch+0x158b8>)
 8016faa:	6810      	ldr	r0, [r2, #0]
 8016fac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2207      	movs	r2, #7
 8016fb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,D,B,D,D");
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	33a4      	adds	r3, #164	; 0xa4
 8016fb8:	4aa4      	ldr	r2, [pc, #656]	; (801724c <problem_fetch+0x158bc>)
 8016fba:	461c      	mov	r4, r3
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016fc0:	6020      	str	r0, [r4, #0]
 8016fc2:	6061      	str	r1, [r4, #4]
 8016fc4:	60a2      	str	r2, [r4, #8]
 8016fc6:	881b      	ldrh	r3, [r3, #0]
 8016fc8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,11,12,15,18");
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	3304      	adds	r3, #4
 8016fce:	4aa0      	ldr	r2, [pc, #640]	; (8017250 <problem_fetch+0x158c0>)
 8016fd0:	461d      	mov	r5, r3
 8016fd2:	4614      	mov	r4, r2
 8016fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016fd6:	6028      	str	r0, [r5, #0]
 8016fd8:	6069      	str	r1, [r5, #4]
 8016fda:	60aa      	str	r2, [r5, #8]
 8016fdc:	60eb      	str	r3, [r5, #12]
 8016fde:	8823      	ldrh	r3, [r4, #0]
 8016fe0:	78a2      	ldrb	r2, [r4, #2]
 8016fe2:	822b      	strh	r3, [r5, #16]
 8016fe4:	4613      	mov	r3, r2
 8016fe6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016fee:	4a99      	ldr	r2, [pc, #612]	; (8017254 <problem_fetch+0x158c4>)
 8016ff0:	461c      	mov	r4, r3
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016ff6:	6020      	str	r0, [r4, #0]
 8016ff8:	6061      	str	r1, [r4, #4]
 8016ffa:	60a2      	str	r2, [r4, #8]
 8016ffc:	881b      	ldrh	r3, [r3, #0]
 8016ffe:	81a3      	strh	r3, [r4, #12]
			break;
 8017000:	f005 bbf6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 635 :
			strcpy(p->name,"DEATH EATER");
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801700a:	4a93      	ldr	r2, [pc, #588]	; (8017258 <problem_fetch+0x158c8>)
 801700c:	461c      	mov	r4, r3
 801700e:	4613      	mov	r3, r2
 8017010:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017012:	6020      	str	r0, [r4, #0]
 8017014:	6061      	str	r1, [r4, #4]
 8017016:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801701e:	4a8a      	ldr	r2, [pc, #552]	; (8017248 <problem_fetch+0x158b8>)
 8017020:	6810      	ldr	r0, [r2, #0]
 8017022:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2207      	movs	r2, #7
 8017028:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,I,J,G,I");
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	33a4      	adds	r3, #164	; 0xa4
 801702e:	4a8b      	ldr	r2, [pc, #556]	; (801725c <problem_fetch+0x158cc>)
 8017030:	461c      	mov	r4, r3
 8017032:	4613      	mov	r3, r2
 8017034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017036:	6020      	str	r0, [r4, #0]
 8017038:	6061      	str	r1, [r4, #4]
 801703a:	60a2      	str	r2, [r4, #8]
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,15,18");
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	3304      	adds	r3, #4
 8017044:	4a86      	ldr	r2, [pc, #536]	; (8017260 <problem_fetch+0x158d0>)
 8017046:	461d      	mov	r5, r3
 8017048:	4614      	mov	r4, r2
 801704a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801704c:	6028      	str	r0, [r5, #0]
 801704e:	6069      	str	r1, [r5, #4]
 8017050:	60aa      	str	r2, [r5, #8]
 8017052:	60eb      	str	r3, [r5, #12]
 8017054:	8823      	ldrh	r3, [r4, #0]
 8017056:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801705e:	4a81      	ldr	r2, [pc, #516]	; (8017264 <problem_fetch+0x158d4>)
 8017060:	461c      	mov	r4, r3
 8017062:	4613      	mov	r3, r2
 8017064:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017066:	6020      	str	r0, [r4, #0]
 8017068:	6061      	str	r1, [r4, #4]
 801706a:	60a2      	str	r2, [r4, #8]
 801706c:	881b      	ldrh	r3, [r3, #0]
 801706e:	81a3      	strh	r3, [r4, #12]
			break;
 8017070:	f005 bbbe 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 636 :
			strcpy(p->name,"VISUALIZZA STOC......");
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801707a:	4a7b      	ldr	r2, [pc, #492]	; (8017268 <problem_fetch+0x158d8>)
 801707c:	461d      	mov	r5, r3
 801707e:	4614      	mov	r4, r2
 8017080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017082:	6028      	str	r0, [r5, #0]
 8017084:	6069      	str	r1, [r5, #4]
 8017086:	60aa      	str	r2, [r5, #8]
 8017088:	60eb      	str	r3, [r5, #12]
 801708a:	6820      	ldr	r0, [r4, #0]
 801708c:	6128      	str	r0, [r5, #16]
 801708e:	88a3      	ldrh	r3, [r4, #4]
 8017090:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B");
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017098:	4a74      	ldr	r2, [pc, #464]	; (801726c <problem_fetch+0x158dc>)
 801709a:	8811      	ldrh	r1, [r2, #0]
 801709c:	7892      	ldrb	r2, [r2, #2]
 801709e:	8019      	strh	r1, [r3, #0]
 80170a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	2206      	movs	r2, #6
 80170a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,F,I");
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	33a4      	adds	r3, #164	; 0xa4
 80170ac:	4a70      	ldr	r2, [pc, #448]	; (8017270 <problem_fetch+0x158e0>)
 80170ae:	461c      	mov	r4, r3
 80170b0:	4613      	mov	r3, r2
 80170b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170b4:	6020      	str	r0, [r4, #0]
 80170b6:	6061      	str	r1, [r4, #4]
 80170b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	3304      	adds	r3, #4
 80170be:	4a6d      	ldr	r2, [pc, #436]	; (8017274 <problem_fetch+0x158e4>)
 80170c0:	461c      	mov	r4, r3
 80170c2:	4613      	mov	r3, r2
 80170c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170c6:	6020      	str	r0, [r4, #0]
 80170c8:	6061      	str	r1, [r4, #4]
 80170ca:	60a2      	str	r2, [r4, #8]
 80170cc:	881a      	ldrh	r2, [r3, #0]
 80170ce:	789b      	ldrb	r3, [r3, #2]
 80170d0:	81a2      	strh	r2, [r4, #12]
 80170d2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80170da:	4a67      	ldr	r2, [pc, #412]	; (8017278 <problem_fetch+0x158e8>)
 80170dc:	461c      	mov	r4, r3
 80170de:	4613      	mov	r3, r2
 80170e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170e2:	6020      	str	r0, [r4, #0]
 80170e4:	6061      	str	r1, [r4, #4]
 80170e6:	60a2      	str	r2, [r4, #8]
			break;
 80170e8:	f005 bb82 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 637 :
			strcpy(p->name,"SHRINE1");
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80170f2:	4962      	ldr	r1, [pc, #392]	; (801727c <problem_fetch+0x158ec>)
 80170f4:	461a      	mov	r2, r3
 80170f6:	460b      	mov	r3, r1
 80170f8:	cb03      	ldmia	r3!, {r0, r1}
 80170fa:	6010      	str	r0, [r2, #0]
 80170fc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017104:	4a5e      	ldr	r2, [pc, #376]	; (8017280 <problem_fetch+0x158f0>)
 8017106:	6810      	ldr	r0, [r2, #0]
 8017108:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	2206      	movs	r2, #6
 801710e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,F,J,I");
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	33a4      	adds	r3, #164	; 0xa4
 8017114:	4a5b      	ldr	r2, [pc, #364]	; (8017284 <problem_fetch+0x158f4>)
 8017116:	461c      	mov	r4, r3
 8017118:	4613      	mov	r3, r2
 801711a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801711c:	6020      	str	r0, [r4, #0]
 801711e:	6061      	str	r1, [r4, #4]
 8017120:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,13,16,18");
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	3304      	adds	r3, #4
 8017126:	4a58      	ldr	r2, [pc, #352]	; (8017288 <problem_fetch+0x158f8>)
 8017128:	461c      	mov	r4, r3
 801712a:	4615      	mov	r5, r2
 801712c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801712e:	6020      	str	r0, [r4, #0]
 8017130:	6061      	str	r1, [r4, #4]
 8017132:	60a2      	str	r2, [r4, #8]
 8017134:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801713c:	4a4e      	ldr	r2, [pc, #312]	; (8017278 <problem_fetch+0x158e8>)
 801713e:	461c      	mov	r4, r3
 8017140:	4613      	mov	r3, r2
 8017142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017144:	6020      	str	r0, [r4, #0]
 8017146:	6061      	str	r1, [r4, #4]
 8017148:	60a2      	str	r2, [r4, #8]
			break;
 801714a:	f005 bb51 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 638 :
			strcpy(p->name,"SQUINCHER");
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017154:	494d      	ldr	r1, [pc, #308]	; (801728c <problem_fetch+0x158fc>)
 8017156:	461a      	mov	r2, r3
 8017158:	460b      	mov	r3, r1
 801715a:	cb03      	ldmia	r3!, {r0, r1}
 801715c:	6010      	str	r0, [r2, #0]
 801715e:	6051      	str	r1, [r2, #4]
 8017160:	881b      	ldrh	r3, [r3, #0]
 8017162:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801716a:	4a37      	ldr	r2, [pc, #220]	; (8017248 <problem_fetch+0x158b8>)
 801716c:	6810      	ldr	r0, [r2, #0]
 801716e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	2207      	movs	r2, #7
 8017174:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,C,D,D");
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	33a4      	adds	r3, #164	; 0xa4
 801717a:	4a45      	ldr	r2, [pc, #276]	; (8017290 <problem_fetch+0x15900>)
 801717c:	461c      	mov	r4, r3
 801717e:	4613      	mov	r3, r2
 8017180:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017182:	6020      	str	r0, [r4, #0]
 8017184:	6061      	str	r1, [r4, #4]
 8017186:	60a2      	str	r2, [r4, #8]
 8017188:	881b      	ldrh	r3, [r3, #0]
 801718a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,13,15,18");
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	3304      	adds	r3, #4
 8017190:	4a40      	ldr	r2, [pc, #256]	; (8017294 <problem_fetch+0x15904>)
 8017192:	461d      	mov	r5, r3
 8017194:	4614      	mov	r4, r2
 8017196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017198:	6028      	str	r0, [r5, #0]
 801719a:	6069      	str	r1, [r5, #4]
 801719c:	60aa      	str	r2, [r5, #8]
 801719e:	60eb      	str	r3, [r5, #12]
 80171a0:	8823      	ldrh	r3, [r4, #0]
 80171a2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80171aa:	4a2a      	ldr	r2, [pc, #168]	; (8017254 <problem_fetch+0x158c4>)
 80171ac:	461c      	mov	r4, r3
 80171ae:	4613      	mov	r3, r2
 80171b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171b2:	6020      	str	r0, [r4, #0]
 80171b4:	6061      	str	r1, [r4, #4]
 80171b6:	60a2      	str	r2, [r4, #8]
 80171b8:	881b      	ldrh	r3, [r3, #0]
 80171ba:	81a3      	strh	r3, [r4, #12]
			break;
 80171bc:	f005 bb18 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 639 :
			strcpy(p->name,"ACG6 PLUS");
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80171c6:	4934      	ldr	r1, [pc, #208]	; (8017298 <problem_fetch+0x15908>)
 80171c8:	461a      	mov	r2, r3
 80171ca:	460b      	mov	r3, r1
 80171cc:	cb03      	ldmia	r3!, {r0, r1}
 80171ce:	6010      	str	r0, [r2, #0]
 80171d0:	6051      	str	r1, [r2, #4]
 80171d2:	881b      	ldrh	r3, [r3, #0]
 80171d4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80171dc:	4a2f      	ldr	r2, [pc, #188]	; (801729c <problem_fetch+0x1590c>)
 80171de:	8811      	ldrh	r1, [r2, #0]
 80171e0:	7892      	ldrb	r2, [r2, #2]
 80171e2:	8019      	strh	r1, [r3, #0]
 80171e4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	2206      	movs	r2, #6
 80171ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,C,I");
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	33a4      	adds	r3, #164	; 0xa4
 80171f0:	4a2b      	ldr	r2, [pc, #172]	; (80172a0 <problem_fetch+0x15910>)
 80171f2:	461c      	mov	r4, r3
 80171f4:	4613      	mov	r3, r2
 80171f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171f8:	6020      	str	r0, [r4, #0]
 80171fa:	6061      	str	r1, [r4, #4]
 80171fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,16,16,18");
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	3304      	adds	r3, #4
 8017202:	4a28      	ldr	r2, [pc, #160]	; (80172a4 <problem_fetch+0x15914>)
 8017204:	461d      	mov	r5, r3
 8017206:	4614      	mov	r4, r2
 8017208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801720a:	6028      	str	r0, [r5, #0]
 801720c:	6069      	str	r1, [r5, #4]
 801720e:	60aa      	str	r2, [r5, #8]
 8017210:	60eb      	str	r3, [r5, #12]
 8017212:	7823      	ldrb	r3, [r4, #0]
 8017214:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801721c:	4a16      	ldr	r2, [pc, #88]	; (8017278 <problem_fetch+0x158e8>)
 801721e:	461c      	mov	r4, r3
 8017220:	4613      	mov	r3, r2
 8017222:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017224:	6020      	str	r0, [r4, #0]
 8017226:	6061      	str	r1, [r4, #4]
 8017228:	60a2      	str	r2, [r4, #8]
			break;
 801722a:	f005 bae1 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801722e:	bf00      	nop
 8017230:	0802b3ac 	.word	0x0802b3ac
 8017234:	08023c28 	.word	0x08023c28
 8017238:	0802b3b4 	.word	0x0802b3b4
 801723c:	0802b3c4 	.word	0x0802b3c4
 8017240:	08023cb4 	.word	0x08023cb4
 8017244:	0802b3d8 	.word	0x0802b3d8
 8017248:	08023b90 	.word	0x08023b90
 801724c:	0802b3e4 	.word	0x0802b3e4
 8017250:	0802b3f4 	.word	0x0802b3f4
 8017254:	08023d18 	.word	0x08023d18
 8017258:	0802b408 	.word	0x0802b408
 801725c:	0802b414 	.word	0x0802b414
 8017260:	0802b424 	.word	0x0802b424
 8017264:	08023c08 	.word	0x08023c08
 8017268:	0802b438 	.word	0x0802b438
 801726c:	08024288 	.word	0x08024288
 8017270:	0802b450 	.word	0x0802b450
 8017274:	08027fcc 	.word	0x08027fcc
 8017278:	08023f2c 	.word	0x08023f2c
 801727c:	0802b45c 	.word	0x0802b45c
 8017280:	08023ccc 	.word	0x08023ccc
 8017284:	0802b464 	.word	0x0802b464
 8017288:	0802b470 	.word	0x0802b470
 801728c:	0802b480 	.word	0x0802b480
 8017290:	0802b48c 	.word	0x0802b48c
 8017294:	0802b49c 	.word	0x0802b49c
 8017298:	0802b4b0 	.word	0x0802b4b0
 801729c:	08023b50 	.word	0x08023b50
 80172a0:	0802b4bc 	.word	0x0802b4bc
 80172a4:	0802b4c8 	.word	0x0802b4c8
		case 640 :
			strcpy(p->name,"ROCKET");
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80172ae:	4aba      	ldr	r2, [pc, #744]	; (8017598 <problem_fetch+0x15c08>)
 80172b0:	6810      	ldr	r0, [r2, #0]
 80172b2:	6018      	str	r0, [r3, #0]
 80172b4:	8891      	ldrh	r1, [r2, #4]
 80172b6:	7992      	ldrb	r2, [r2, #6]
 80172b8:	8099      	strh	r1, [r3, #4]
 80172ba:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80172c2:	4ab6      	ldr	r2, [pc, #728]	; (801759c <problem_fetch+0x15c0c>)
 80172c4:	8811      	ldrh	r1, [r2, #0]
 80172c6:	7892      	ldrb	r2, [r2, #2]
 80172c8:	8019      	strh	r1, [r3, #0]
 80172ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2205      	movs	r2, #5
 80172d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,H,F,I");
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	33a4      	adds	r3, #164	; 0xa4
 80172d6:	49b2      	ldr	r1, [pc, #712]	; (80175a0 <problem_fetch+0x15c10>)
 80172d8:	461a      	mov	r2, r3
 80172da:	460b      	mov	r3, r1
 80172dc:	cb03      	ldmia	r3!, {r0, r1}
 80172de:	6010      	str	r0, [r2, #0]
 80172e0:	6051      	str	r1, [r2, #4]
 80172e2:	881b      	ldrh	r3, [r3, #0]
 80172e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,6,10,13,18");
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	3304      	adds	r3, #4
 80172ea:	4aae      	ldr	r2, [pc, #696]	; (80175a4 <problem_fetch+0x15c14>)
 80172ec:	461c      	mov	r4, r3
 80172ee:	4613      	mov	r3, r2
 80172f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172f2:	6020      	str	r0, [r4, #0]
 80172f4:	6061      	str	r1, [r4, #4]
 80172f6:	60a2      	str	r2, [r4, #8]
 80172f8:	781b      	ldrb	r3, [r3, #0]
 80172fa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017302:	49a9      	ldr	r1, [pc, #676]	; (80175a8 <problem_fetch+0x15c18>)
 8017304:	461a      	mov	r2, r3
 8017306:	460b      	mov	r3, r1
 8017308:	cb03      	ldmia	r3!, {r0, r1}
 801730a:	6010      	str	r0, [r2, #0]
 801730c:	6051      	str	r1, [r2, #4]
 801730e:	881b      	ldrh	r3, [r3, #0]
 8017310:	8113      	strh	r3, [r2, #8]
			break;
 8017312:	f005 ba6d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 641 :
			strcpy(p->name,"GAMBERO");
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801731c:	49a3      	ldr	r1, [pc, #652]	; (80175ac <problem_fetch+0x15c1c>)
 801731e:	461a      	mov	r2, r3
 8017320:	460b      	mov	r3, r1
 8017322:	cb03      	ldmia	r3!, {r0, r1}
 8017324:	6010      	str	r0, [r2, #0]
 8017326:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801732e:	4aa0      	ldr	r2, [pc, #640]	; (80175b0 <problem_fetch+0x15c20>)
 8017330:	8811      	ldrh	r1, [r2, #0]
 8017332:	7892      	ldrb	r2, [r2, #2]
 8017334:	8019      	strh	r1, [r3, #0]
 8017336:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2206      	movs	r2, #6
 801733c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,B,E,A");
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	33a4      	adds	r3, #164	; 0xa4
 8017342:	4a9c      	ldr	r2, [pc, #624]	; (80175b4 <problem_fetch+0x15c24>)
 8017344:	461c      	mov	r4, r3
 8017346:	4613      	mov	r3, r2
 8017348:	cb07      	ldmia	r3!, {r0, r1, r2}
 801734a:	6020      	str	r0, [r4, #0]
 801734c:	6061      	str	r1, [r4, #4]
 801734e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	3304      	adds	r3, #4
 8017354:	4a98      	ldr	r2, [pc, #608]	; (80175b8 <problem_fetch+0x15c28>)
 8017356:	461c      	mov	r4, r3
 8017358:	4613      	mov	r3, r2
 801735a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801735c:	6020      	str	r0, [r4, #0]
 801735e:	6061      	str	r1, [r4, #4]
 8017360:	60a2      	str	r2, [r4, #8]
 8017362:	881a      	ldrh	r2, [r3, #0]
 8017364:	789b      	ldrb	r3, [r3, #2]
 8017366:	81a2      	strh	r2, [r4, #12]
 8017368:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017370:	4a92      	ldr	r2, [pc, #584]	; (80175bc <problem_fetch+0x15c2c>)
 8017372:	461c      	mov	r4, r3
 8017374:	4613      	mov	r3, r2
 8017376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017378:	6020      	str	r0, [r4, #0]
 801737a:	6061      	str	r1, [r4, #4]
 801737c:	60a2      	str	r2, [r4, #8]
			break;
 801737e:	f005 ba37 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 642 :
			strcpy(p->name,"FIRST WORLD PROBLEM");
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017388:	4a8d      	ldr	r2, [pc, #564]	; (80175c0 <problem_fetch+0x15c30>)
 801738a:	461d      	mov	r5, r3
 801738c:	4614      	mov	r4, r2
 801738e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017390:	6028      	str	r0, [r5, #0]
 8017392:	6069      	str	r1, [r5, #4]
 8017394:	60aa      	str	r2, [r5, #8]
 8017396:	60eb      	str	r3, [r5, #12]
 8017398:	6820      	ldr	r0, [r4, #0]
 801739a:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80173a2:	4a88      	ldr	r2, [pc, #544]	; (80175c4 <problem_fetch+0x15c34>)
 80173a4:	6810      	ldr	r0, [r2, #0]
 80173a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	2206      	movs	r2, #6
 80173ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,C,E,C,D");
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	33a4      	adds	r3, #164	; 0xa4
 80173b2:	4a85      	ldr	r2, [pc, #532]	; (80175c8 <problem_fetch+0x15c38>)
 80173b4:	461c      	mov	r4, r3
 80173b6:	4613      	mov	r3, r2
 80173b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173ba:	6020      	str	r0, [r4, #0]
 80173bc:	6061      	str	r1, [r4, #4]
 80173be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,8,14,13,18");
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	3304      	adds	r3, #4
 80173c4:	4a81      	ldr	r2, [pc, #516]	; (80175cc <problem_fetch+0x15c3c>)
 80173c6:	461c      	mov	r4, r3
 80173c8:	4613      	mov	r3, r2
 80173ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173cc:	6020      	str	r0, [r4, #0]
 80173ce:	6061      	str	r1, [r4, #4]
 80173d0:	60a2      	str	r2, [r4, #8]
 80173d2:	881a      	ldrh	r2, [r3, #0]
 80173d4:	789b      	ldrb	r3, [r3, #2]
 80173d6:	81a2      	strh	r2, [r4, #12]
 80173d8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80173e0:	4a76      	ldr	r2, [pc, #472]	; (80175bc <problem_fetch+0x15c2c>)
 80173e2:	461c      	mov	r4, r3
 80173e4:	4613      	mov	r3, r2
 80173e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173e8:	6020      	str	r0, [r4, #0]
 80173ea:	6061      	str	r1, [r4, #4]
 80173ec:	60a2      	str	r2, [r4, #8]
			break;
 80173ee:	f005 b9ff 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 643 :
			strcpy(p->name,"POCKETLAND 2");
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80173f8:	4a75      	ldr	r2, [pc, #468]	; (80175d0 <problem_fetch+0x15c40>)
 80173fa:	461c      	mov	r4, r3
 80173fc:	4613      	mov	r3, r2
 80173fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017400:	6020      	str	r0, [r4, #0]
 8017402:	6061      	str	r1, [r4, #4]
 8017404:	60a2      	str	r2, [r4, #8]
 8017406:	781b      	ldrb	r3, [r3, #0]
 8017408:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017410:	4a67      	ldr	r2, [pc, #412]	; (80175b0 <problem_fetch+0x15c20>)
 8017412:	8811      	ldrh	r1, [r2, #0]
 8017414:	7892      	ldrb	r2, [r2, #2]
 8017416:	8019      	strh	r1, [r3, #0]
 8017418:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2206      	movs	r2, #6
 801741e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,H,E,I");
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	33a4      	adds	r3, #164	; 0xa4
 8017424:	4a6b      	ldr	r2, [pc, #428]	; (80175d4 <problem_fetch+0x15c44>)
 8017426:	461c      	mov	r4, r3
 8017428:	4613      	mov	r3, r2
 801742a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801742c:	6020      	str	r0, [r4, #0]
 801742e:	6061      	str	r1, [r4, #4]
 8017430:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	3304      	adds	r3, #4
 8017436:	4a68      	ldr	r2, [pc, #416]	; (80175d8 <problem_fetch+0x15c48>)
 8017438:	461c      	mov	r4, r3
 801743a:	4615      	mov	r5, r2
 801743c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801743e:	6020      	str	r0, [r4, #0]
 8017440:	6061      	str	r1, [r4, #4]
 8017442:	60a2      	str	r2, [r4, #8]
 8017444:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801744c:	4a5b      	ldr	r2, [pc, #364]	; (80175bc <problem_fetch+0x15c2c>)
 801744e:	461c      	mov	r4, r3
 8017450:	4613      	mov	r3, r2
 8017452:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017454:	6020      	str	r0, [r4, #0]
 8017456:	6061      	str	r1, [r4, #4]
 8017458:	60a2      	str	r2, [r4, #8]
			break;
 801745a:	f005 b9c9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 644 :
			strcpy(p->name,"POCKETLAND");
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017464:	495d      	ldr	r1, [pc, #372]	; (80175dc <problem_fetch+0x15c4c>)
 8017466:	461a      	mov	r2, r3
 8017468:	460b      	mov	r3, r1
 801746a:	cb03      	ldmia	r3!, {r0, r1}
 801746c:	6010      	str	r0, [r2, #0]
 801746e:	6051      	str	r1, [r2, #4]
 8017470:	8819      	ldrh	r1, [r3, #0]
 8017472:	789b      	ldrb	r3, [r3, #2]
 8017474:	8111      	strh	r1, [r2, #8]
 8017476:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801747e:	4a58      	ldr	r2, [pc, #352]	; (80175e0 <problem_fetch+0x15c50>)
 8017480:	8811      	ldrh	r1, [r2, #0]
 8017482:	7892      	ldrb	r2, [r2, #2]
 8017484:	8019      	strh	r1, [r3, #0]
 8017486:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	2206      	movs	r2, #6
 801748c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,G,G,A");
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	33a4      	adds	r3, #164	; 0xa4
 8017492:	4a54      	ldr	r2, [pc, #336]	; (80175e4 <problem_fetch+0x15c54>)
 8017494:	461c      	mov	r4, r3
 8017496:	4613      	mov	r3, r2
 8017498:	cb07      	ldmia	r3!, {r0, r1, r2}
 801749a:	6020      	str	r0, [r4, #0]
 801749c:	6061      	str	r1, [r4, #4]
 801749e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	3304      	adds	r3, #4
 80174a4:	4a50      	ldr	r2, [pc, #320]	; (80175e8 <problem_fetch+0x15c58>)
 80174a6:	461c      	mov	r4, r3
 80174a8:	4615      	mov	r5, r2
 80174aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80174ac:	6020      	str	r0, [r4, #0]
 80174ae:	6061      	str	r1, [r4, #4]
 80174b0:	60a2      	str	r2, [r4, #8]
 80174b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80174ba:	4a40      	ldr	r2, [pc, #256]	; (80175bc <problem_fetch+0x15c2c>)
 80174bc:	461c      	mov	r4, r3
 80174be:	4613      	mov	r3, r2
 80174c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174c2:	6020      	str	r0, [r4, #0]
 80174c4:	6061      	str	r1, [r4, #4]
 80174c6:	60a2      	str	r2, [r4, #8]
			break;
 80174c8:	f005 b992 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 645 :
			strcpy(p->name,"WLF46");
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80174d2:	4a46      	ldr	r2, [pc, #280]	; (80175ec <problem_fetch+0x15c5c>)
 80174d4:	6810      	ldr	r0, [r2, #0]
 80174d6:	6018      	str	r0, [r3, #0]
 80174d8:	8892      	ldrh	r2, [r2, #4]
 80174da:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80174e2:	4a2e      	ldr	r2, [pc, #184]	; (801759c <problem_fetch+0x15c0c>)
 80174e4:	8811      	ldrh	r1, [r2, #0]
 80174e6:	7892      	ldrb	r2, [r2, #2]
 80174e8:	8019      	strh	r1, [r3, #0]
 80174ea:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	2206      	movs	r2, #6
 80174f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,G,I");
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	33a4      	adds	r3, #164	; 0xa4
 80174f6:	4a3e      	ldr	r2, [pc, #248]	; (80175f0 <problem_fetch+0x15c60>)
 80174f8:	461c      	mov	r4, r3
 80174fa:	4613      	mov	r3, r2
 80174fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174fe:	6020      	str	r0, [r4, #0]
 8017500:	6061      	str	r1, [r4, #4]
 8017502:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,17,18");
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	3304      	adds	r3, #4
 8017508:	4a3a      	ldr	r2, [pc, #232]	; (80175f4 <problem_fetch+0x15c64>)
 801750a:	461c      	mov	r4, r3
 801750c:	4615      	mov	r5, r2
 801750e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017510:	6020      	str	r0, [r4, #0]
 8017512:	6061      	str	r1, [r4, #4]
 8017514:	60a2      	str	r2, [r4, #8]
 8017516:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801751e:	4a27      	ldr	r2, [pc, #156]	; (80175bc <problem_fetch+0x15c2c>)
 8017520:	461c      	mov	r4, r3
 8017522:	4613      	mov	r3, r2
 8017524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017526:	6020      	str	r0, [r4, #0]
 8017528:	6061      	str	r1, [r4, #4]
 801752a:	60a2      	str	r2, [r4, #8]
			break;
 801752c:	f005 b960 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 646 :
			strcpy(p->name,"HIEROGRIPIC");
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017536:	4a30      	ldr	r2, [pc, #192]	; (80175f8 <problem_fetch+0x15c68>)
 8017538:	461c      	mov	r4, r3
 801753a:	4613      	mov	r3, r2
 801753c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801753e:	6020      	str	r0, [r4, #0]
 8017540:	6061      	str	r1, [r4, #4]
 8017542:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801754a:	4a14      	ldr	r2, [pc, #80]	; (801759c <problem_fetch+0x15c0c>)
 801754c:	8811      	ldrh	r1, [r2, #0]
 801754e:	7892      	ldrb	r2, [r2, #2]
 8017550:	8019      	strh	r1, [r3, #0]
 8017552:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	2206      	movs	r2, #6
 8017558:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,A,A");
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	33a4      	adds	r3, #164	; 0xa4
 801755e:	4a27      	ldr	r2, [pc, #156]	; (80175fc <problem_fetch+0x15c6c>)
 8017560:	461c      	mov	r4, r3
 8017562:	4613      	mov	r3, r2
 8017564:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017566:	6020      	str	r0, [r4, #0]
 8017568:	6061      	str	r1, [r4, #4]
 801756a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,14,18");
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	3304      	adds	r3, #4
 8017570:	4a23      	ldr	r2, [pc, #140]	; (8017600 <problem_fetch+0x15c70>)
 8017572:	461c      	mov	r4, r3
 8017574:	4615      	mov	r5, r2
 8017576:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017578:	6020      	str	r0, [r4, #0]
 801757a:	6061      	str	r1, [r4, #4]
 801757c:	60a2      	str	r2, [r4, #8]
 801757e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017586:	4a1f      	ldr	r2, [pc, #124]	; (8017604 <problem_fetch+0x15c74>)
 8017588:	461c      	mov	r4, r3
 801758a:	4613      	mov	r3, r2
 801758c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801758e:	6020      	str	r0, [r4, #0]
 8017590:	6061      	str	r1, [r4, #4]
 8017592:	60a2      	str	r2, [r4, #8]
			break;
 8017594:	f005 b92c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8017598:	0802b4dc 	.word	0x0802b4dc
 801759c:	08023b50 	.word	0x08023b50
 80175a0:	0802b4e4 	.word	0x0802b4e4
 80175a4:	0802b4f0 	.word	0x0802b4f0
 80175a8:	08024270 	.word	0x08024270
 80175ac:	0802b500 	.word	0x0802b500
 80175b0:	080243c4 	.word	0x080243c4
 80175b4:	0802b508 	.word	0x0802b508
 80175b8:	08028a8c 	.word	0x08028a8c
 80175bc:	08023f2c 	.word	0x08023f2c
 80175c0:	0802b514 	.word	0x0802b514
 80175c4:	08023c28 	.word	0x08023c28
 80175c8:	0802b528 	.word	0x0802b528
 80175cc:	0802b534 	.word	0x0802b534
 80175d0:	0802b544 	.word	0x0802b544
 80175d4:	0802b554 	.word	0x0802b554
 80175d8:	0802b560 	.word	0x0802b560
 80175dc:	0802b570 	.word	0x0802b570
 80175e0:	08024288 	.word	0x08024288
 80175e4:	0802b57c 	.word	0x0802b57c
 80175e8:	0802b588 	.word	0x0802b588
 80175ec:	0802b598 	.word	0x0802b598
 80175f0:	0802b5a0 	.word	0x0802b5a0
 80175f4:	0802b5ac 	.word	0x0802b5ac
 80175f8:	0802b5bc 	.word	0x0802b5bc
 80175fc:	0802b5c8 	.word	0x0802b5c8
 8017600:	0802b5d4 	.word	0x0802b5d4
 8017604:	08023b70 	.word	0x08023b70
		case 647 :
			strcpy(p->name,"FRENCH INDUCED COMA");
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801760e:	4aab      	ldr	r2, [pc, #684]	; (80178bc <problem_fetch+0x15f2c>)
 8017610:	461d      	mov	r5, r3
 8017612:	4614      	mov	r4, r2
 8017614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017616:	6028      	str	r0, [r5, #0]
 8017618:	6069      	str	r1, [r5, #4]
 801761a:	60aa      	str	r2, [r5, #8]
 801761c:	60eb      	str	r3, [r5, #12]
 801761e:	6820      	ldr	r0, [r4, #0]
 8017620:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017628:	4aa5      	ldr	r2, [pc, #660]	; (80178c0 <problem_fetch+0x15f30>)
 801762a:	6810      	ldr	r0, [r2, #0]
 801762c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2205      	movs	r2, #5
 8017632:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,D,A");
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	33a4      	adds	r3, #164	; 0xa4
 8017638:	49a2      	ldr	r1, [pc, #648]	; (80178c4 <problem_fetch+0x15f34>)
 801763a:	461a      	mov	r2, r3
 801763c:	460b      	mov	r3, r1
 801763e:	cb03      	ldmia	r3!, {r0, r1}
 8017640:	6010      	str	r0, [r2, #0]
 8017642:	6051      	str	r1, [r2, #4]
 8017644:	881b      	ldrh	r3, [r3, #0]
 8017646:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,11,15,18");
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	3304      	adds	r3, #4
 801764c:	4a9e      	ldr	r2, [pc, #632]	; (80178c8 <problem_fetch+0x15f38>)
 801764e:	461c      	mov	r4, r3
 8017650:	4613      	mov	r3, r2
 8017652:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017654:	6020      	str	r0, [r4, #0]
 8017656:	6061      	str	r1, [r4, #4]
 8017658:	60a2      	str	r2, [r4, #8]
 801765a:	881b      	ldrh	r3, [r3, #0]
 801765c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017664:	4999      	ldr	r1, [pc, #612]	; (80178cc <problem_fetch+0x15f3c>)
 8017666:	461a      	mov	r2, r3
 8017668:	460b      	mov	r3, r1
 801766a:	cb03      	ldmia	r3!, {r0, r1}
 801766c:	6010      	str	r0, [r2, #0]
 801766e:	6051      	str	r1, [r2, #4]
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	8113      	strh	r3, [r2, #8]
			break;
 8017674:	f005 b8bc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 648 :
			strcpy(p->name,"YEEEEAHHH");
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801767e:	4994      	ldr	r1, [pc, #592]	; (80178d0 <problem_fetch+0x15f40>)
 8017680:	461a      	mov	r2, r3
 8017682:	460b      	mov	r3, r1
 8017684:	cb03      	ldmia	r3!, {r0, r1}
 8017686:	6010      	str	r0, [r2, #0]
 8017688:	6051      	str	r1, [r2, #4]
 801768a:	881b      	ldrh	r3, [r3, #0]
 801768c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017694:	4a8f      	ldr	r2, [pc, #572]	; (80178d4 <problem_fetch+0x15f44>)
 8017696:	8811      	ldrh	r1, [r2, #0]
 8017698:	7892      	ldrb	r2, [r2, #2]
 801769a:	8019      	strh	r1, [r3, #0]
 801769c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2204      	movs	r2, #4
 80176a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,I");
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	33a4      	adds	r3, #164	; 0xa4
 80176a8:	498b      	ldr	r1, [pc, #556]	; (80178d8 <problem_fetch+0x15f48>)
 80176aa:	461a      	mov	r2, r3
 80176ac:	460b      	mov	r3, r1
 80176ae:	cb03      	ldmia	r3!, {r0, r1}
 80176b0:	6010      	str	r0, [r2, #0]
 80176b2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	3304      	adds	r3, #4
 80176b8:	4988      	ldr	r1, [pc, #544]	; (80178dc <problem_fetch+0x15f4c>)
 80176ba:	461a      	mov	r2, r3
 80176bc:	460b      	mov	r3, r1
 80176be:	cb03      	ldmia	r3!, {r0, r1}
 80176c0:	6010      	str	r0, [r2, #0]
 80176c2:	6051      	str	r1, [r2, #4]
 80176c4:	8819      	ldrh	r1, [r3, #0]
 80176c6:	789b      	ldrb	r3, [r3, #2]
 80176c8:	8111      	strh	r1, [r2, #8]
 80176ca:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80176d2:	4983      	ldr	r1, [pc, #524]	; (80178e0 <problem_fetch+0x15f50>)
 80176d4:	461a      	mov	r2, r3
 80176d6:	460b      	mov	r3, r1
 80176d8:	cb03      	ldmia	r3!, {r0, r1}
 80176da:	6010      	str	r0, [r2, #0]
 80176dc:	6051      	str	r1, [r2, #4]
			break;
 80176de:	f005 b887 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 649 :
			strcpy(p->name,"OFD");
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80176e8:	4a7e      	ldr	r2, [pc, #504]	; (80178e4 <problem_fetch+0x15f54>)
 80176ea:	6810      	ldr	r0, [r2, #0]
 80176ec:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80176f4:	4a7c      	ldr	r2, [pc, #496]	; (80178e8 <problem_fetch+0x15f58>)
 80176f6:	6810      	ldr	r0, [r2, #0]
 80176f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	2206      	movs	r2, #6
 80176fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	33a4      	adds	r3, #164	; 0xa4
 8017704:	4a79      	ldr	r2, [pc, #484]	; (80178ec <problem_fetch+0x15f5c>)
 8017706:	461c      	mov	r4, r3
 8017708:	4613      	mov	r3, r2
 801770a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801770c:	6020      	str	r0, [r4, #0]
 801770e:	6061      	str	r1, [r4, #4]
 8017710:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	3304      	adds	r3, #4
 8017716:	4a76      	ldr	r2, [pc, #472]	; (80178f0 <problem_fetch+0x15f60>)
 8017718:	461c      	mov	r4, r3
 801771a:	4613      	mov	r3, r2
 801771c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801771e:	6020      	str	r0, [r4, #0]
 8017720:	6061      	str	r1, [r4, #4]
 8017722:	60a2      	str	r2, [r4, #8]
 8017724:	881a      	ldrh	r2, [r3, #0]
 8017726:	789b      	ldrb	r3, [r3, #2]
 8017728:	81a2      	strh	r2, [r4, #12]
 801772a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017732:	4a70      	ldr	r2, [pc, #448]	; (80178f4 <problem_fetch+0x15f64>)
 8017734:	461c      	mov	r4, r3
 8017736:	4613      	mov	r3, r2
 8017738:	cb07      	ldmia	r3!, {r0, r1, r2}
 801773a:	6020      	str	r0, [r4, #0]
 801773c:	6061      	str	r1, [r4, #4]
 801773e:	60a2      	str	r2, [r4, #8]
			break;
 8017740:	f005 b856 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 650 :
			strcpy(p->name,"GO BIG");
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801774a:	4a6b      	ldr	r2, [pc, #428]	; (80178f8 <problem_fetch+0x15f68>)
 801774c:	6810      	ldr	r0, [r2, #0]
 801774e:	6018      	str	r0, [r3, #0]
 8017750:	8891      	ldrh	r1, [r2, #4]
 8017752:	7992      	ldrb	r2, [r2, #6]
 8017754:	8099      	strh	r1, [r3, #4]
 8017756:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801775e:	4a67      	ldr	r2, [pc, #412]	; (80178fc <problem_fetch+0x15f6c>)
 8017760:	6810      	ldr	r0, [r2, #0]
 8017762:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2205      	movs	r2, #5
 8017768:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,A,A");
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	33a4      	adds	r3, #164	; 0xa4
 801776e:	4964      	ldr	r1, [pc, #400]	; (8017900 <problem_fetch+0x15f70>)
 8017770:	461a      	mov	r2, r3
 8017772:	460b      	mov	r3, r1
 8017774:	cb03      	ldmia	r3!, {r0, r1}
 8017776:	6010      	str	r0, [r2, #0]
 8017778:	6051      	str	r1, [r2, #4]
 801777a:	881b      	ldrh	r3, [r3, #0]
 801777c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,14,14,18");
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	3304      	adds	r3, #4
 8017782:	4a60      	ldr	r2, [pc, #384]	; (8017904 <problem_fetch+0x15f74>)
 8017784:	461c      	mov	r4, r3
 8017786:	4613      	mov	r3, r2
 8017788:	cb07      	ldmia	r3!, {r0, r1, r2}
 801778a:	6020      	str	r0, [r4, #0]
 801778c:	6061      	str	r1, [r4, #4]
 801778e:	60a2      	str	r2, [r4, #8]
 8017790:	781b      	ldrb	r3, [r3, #0]
 8017792:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801779a:	494c      	ldr	r1, [pc, #304]	; (80178cc <problem_fetch+0x15f3c>)
 801779c:	461a      	mov	r2, r3
 801779e:	460b      	mov	r3, r1
 80177a0:	cb03      	ldmia	r3!, {r0, r1}
 80177a2:	6010      	str	r0, [r2, #0]
 80177a4:	6051      	str	r1, [r2, #4]
 80177a6:	881b      	ldrh	r3, [r3, #0]
 80177a8:	8113      	strh	r3, [r2, #8]
			break;
 80177aa:	f005 b821 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 651 :
			strcpy(p->name,"VARIATION 2 6B+");
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80177b4:	4a54      	ldr	r2, [pc, #336]	; (8017908 <problem_fetch+0x15f78>)
 80177b6:	461c      	mov	r4, r3
 80177b8:	4615      	mov	r5, r2
 80177ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80177bc:	6020      	str	r0, [r4, #0]
 80177be:	6061      	str	r1, [r4, #4]
 80177c0:	60a2      	str	r2, [r4, #8]
 80177c2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80177ca:	4a3d      	ldr	r2, [pc, #244]	; (80178c0 <problem_fetch+0x15f30>)
 80177cc:	6810      	ldr	r0, [r2, #0]
 80177ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	2207      	movs	r2, #7
 80177d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,B,C,A,A");
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	33a4      	adds	r3, #164	; 0xa4
 80177da:	4a4c      	ldr	r2, [pc, #304]	; (801790c <problem_fetch+0x15f7c>)
 80177dc:	461c      	mov	r4, r3
 80177de:	4613      	mov	r3, r2
 80177e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177e2:	6020      	str	r0, [r4, #0]
 80177e4:	6061      	str	r1, [r4, #4]
 80177e6:	60a2      	str	r2, [r4, #8]
 80177e8:	881b      	ldrh	r3, [r3, #0]
 80177ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,14,18");
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	3304      	adds	r3, #4
 80177f0:	4a47      	ldr	r2, [pc, #284]	; (8017910 <problem_fetch+0x15f80>)
 80177f2:	461d      	mov	r5, r3
 80177f4:	4614      	mov	r4, r2
 80177f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177f8:	6028      	str	r0, [r5, #0]
 80177fa:	6069      	str	r1, [r5, #4]
 80177fc:	60aa      	str	r2, [r5, #8]
 80177fe:	60eb      	str	r3, [r5, #12]
 8017800:	8823      	ldrh	r3, [r4, #0]
 8017802:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801780a:	4a42      	ldr	r2, [pc, #264]	; (8017914 <problem_fetch+0x15f84>)
 801780c:	461c      	mov	r4, r3
 801780e:	4613      	mov	r3, r2
 8017810:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017812:	6020      	str	r0, [r4, #0]
 8017814:	6061      	str	r1, [r4, #4]
 8017816:	60a2      	str	r2, [r4, #8]
 8017818:	881b      	ldrh	r3, [r3, #0]
 801781a:	81a3      	strh	r3, [r4, #12]
			break;
 801781c:	f004 bfe8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 652 :
			strcpy(p->name,"ENDUROV6");
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017826:	493c      	ldr	r1, [pc, #240]	; (8017918 <problem_fetch+0x15f88>)
 8017828:	461a      	mov	r2, r3
 801782a:	460b      	mov	r3, r1
 801782c:	cb03      	ldmia	r3!, {r0, r1}
 801782e:	6010      	str	r0, [r2, #0]
 8017830:	6051      	str	r1, [r2, #4]
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801783c:	4a25      	ldr	r2, [pc, #148]	; (80178d4 <problem_fetch+0x15f44>)
 801783e:	8811      	ldrh	r1, [r2, #0]
 8017840:	7892      	ldrb	r2, [r2, #2]
 8017842:	8019      	strh	r1, [r3, #0]
 8017844:	709a      	strb	r2, [r3, #2]
			p->moveSize = 13;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	220d      	movs	r2, #13
 801784a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,H,G,F,A,D,E,G,C,B,E,I");
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	33a4      	adds	r3, #164	; 0xa4
 8017850:	4a32      	ldr	r2, [pc, #200]	; (801791c <problem_fetch+0x15f8c>)
 8017852:	461d      	mov	r5, r3
 8017854:	4614      	mov	r4, r2
 8017856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017858:	6028      	str	r0, [r5, #0]
 801785a:	6069      	str	r1, [r5, #4]
 801785c:	60aa      	str	r2, [r5, #8]
 801785e:	60eb      	str	r3, [r5, #12]
 8017860:	cc03      	ldmia	r4!, {r0, r1}
 8017862:	6128      	str	r0, [r5, #16]
 8017864:	6169      	str	r1, [r5, #20]
 8017866:	8823      	ldrh	r3, [r4, #0]
 8017868:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"5,7,8,9,11,14,15,16,17,5,10,8,18");
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	3304      	adds	r3, #4
 801786e:	4a2c      	ldr	r2, [pc, #176]	; (8017920 <problem_fetch+0x15f90>)
 8017870:	4614      	mov	r4, r2
 8017872:	469c      	mov	ip, r3
 8017874:	f104 0e20 	add.w	lr, r4, #32
 8017878:	4665      	mov	r5, ip
 801787a:	4626      	mov	r6, r4
 801787c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801787e:	6028      	str	r0, [r5, #0]
 8017880:	6069      	str	r1, [r5, #4]
 8017882:	60aa      	str	r2, [r5, #8]
 8017884:	60eb      	str	r3, [r5, #12]
 8017886:	3410      	adds	r4, #16
 8017888:	f10c 0c10 	add.w	ip, ip, #16
 801788c:	4574      	cmp	r4, lr
 801788e:	d1f3      	bne.n	8017878 <problem_fetch+0x15ee8>
 8017890:	4663      	mov	r3, ip
 8017892:	4622      	mov	r2, r4
 8017894:	7812      	ldrb	r2, [r2, #0]
 8017896:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,d,e");
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801789e:	4a21      	ldr	r2, [pc, #132]	; (8017924 <problem_fetch+0x15f94>)
 80178a0:	461d      	mov	r5, r3
 80178a2:	4614      	mov	r4, r2
 80178a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178a6:	6028      	str	r0, [r5, #0]
 80178a8:	6069      	str	r1, [r5, #4]
 80178aa:	60aa      	str	r2, [r5, #8]
 80178ac:	60eb      	str	r3, [r5, #12]
 80178ae:	cc03      	ldmia	r4!, {r0, r1}
 80178b0:	6128      	str	r0, [r5, #16]
 80178b2:	6169      	str	r1, [r5, #20]
 80178b4:	8823      	ldrh	r3, [r4, #0]
 80178b6:	832b      	strh	r3, [r5, #24]
			break;
 80178b8:	f004 bf9a 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80178bc:	0802b5e4 	.word	0x0802b5e4
 80178c0:	08023b90 	.word	0x08023b90
 80178c4:	0802b5f8 	.word	0x0802b5f8
 80178c8:	0802b604 	.word	0x0802b604
 80178cc:	0802405c 	.word	0x0802405c
 80178d0:	0802b614 	.word	0x0802b614
 80178d4:	08023b50 	.word	0x08023b50
 80178d8:	0802b620 	.word	0x0802b620
 80178dc:	080250a0 	.word	0x080250a0
 80178e0:	08023ce4 	.word	0x08023ce4
 80178e4:	0802b628 	.word	0x0802b628
 80178e8:	08023d30 	.word	0x08023d30
 80178ec:	0802b62c 	.word	0x0802b62c
 80178f0:	0802ad6c 	.word	0x0802ad6c
 80178f4:	08023f2c 	.word	0x08023f2c
 80178f8:	0802b638 	.word	0x0802b638
 80178fc:	08023ccc 	.word	0x08023ccc
 8017900:	0802b640 	.word	0x0802b640
 8017904:	0802b64c 	.word	0x0802b64c
 8017908:	0802b65c 	.word	0x0802b65c
 801790c:	0802b66c 	.word	0x0802b66c
 8017910:	0802b67c 	.word	0x0802b67c
 8017914:	08023c08 	.word	0x08023c08
 8017918:	0802b690 	.word	0x0802b690
 801791c:	0802b69c 	.word	0x0802b69c
 8017920:	0802b6b8 	.word	0x0802b6b8
 8017924:	0802b6dc 	.word	0x0802b6dc
		case 653 :
			strcpy(p->name,"OLDENBOAD4");
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801792e:	49aa      	ldr	r1, [pc, #680]	; (8017bd8 <problem_fetch+0x16248>)
 8017930:	461a      	mov	r2, r3
 8017932:	460b      	mov	r3, r1
 8017934:	cb03      	ldmia	r3!, {r0, r1}
 8017936:	6010      	str	r0, [r2, #0]
 8017938:	6051      	str	r1, [r2, #4]
 801793a:	8819      	ldrh	r1, [r3, #0]
 801793c:	789b      	ldrb	r3, [r3, #2]
 801793e:	8111      	strh	r1, [r2, #8]
 8017940:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017948:	4aa4      	ldr	r2, [pc, #656]	; (8017bdc <problem_fetch+0x1624c>)
 801794a:	6810      	ldr	r0, [r2, #0]
 801794c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	2207      	movs	r2, #7
 8017952:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,E,H,D");
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	33a4      	adds	r3, #164	; 0xa4
 8017958:	4aa1      	ldr	r2, [pc, #644]	; (8017be0 <problem_fetch+0x16250>)
 801795a:	461c      	mov	r4, r3
 801795c:	4613      	mov	r3, r2
 801795e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017960:	6020      	str	r0, [r4, #0]
 8017962:	6061      	str	r1, [r4, #4]
 8017964:	60a2      	str	r2, [r4, #8]
 8017966:	881b      	ldrh	r3, [r3, #0]
 8017968:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,13,16,10,18");
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	3304      	adds	r3, #4
 801796e:	4a9d      	ldr	r2, [pc, #628]	; (8017be4 <problem_fetch+0x16254>)
 8017970:	461d      	mov	r5, r3
 8017972:	4614      	mov	r4, r2
 8017974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017976:	6028      	str	r0, [r5, #0]
 8017978:	6069      	str	r1, [r5, #4]
 801797a:	60aa      	str	r2, [r5, #8]
 801797c:	60eb      	str	r3, [r5, #12]
 801797e:	8823      	ldrh	r3, [r4, #0]
 8017980:	78a2      	ldrb	r2, [r4, #2]
 8017982:	822b      	strh	r3, [r5, #16]
 8017984:	4613      	mov	r3, r2
 8017986:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801798e:	4a96      	ldr	r2, [pc, #600]	; (8017be8 <problem_fetch+0x16258>)
 8017990:	461c      	mov	r4, r3
 8017992:	4613      	mov	r3, r2
 8017994:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017996:	6020      	str	r0, [r4, #0]
 8017998:	6061      	str	r1, [r4, #4]
 801799a:	60a2      	str	r2, [r4, #8]
 801799c:	881b      	ldrh	r3, [r3, #0]
 801799e:	81a3      	strh	r3, [r4, #12]
			break;
 80179a0:	f004 bf26 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 654 :
			strcpy(p->name,"TB SAGA");
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80179aa:	4990      	ldr	r1, [pc, #576]	; (8017bec <problem_fetch+0x1625c>)
 80179ac:	461a      	mov	r2, r3
 80179ae:	460b      	mov	r3, r1
 80179b0:	cb03      	ldmia	r3!, {r0, r1}
 80179b2:	6010      	str	r0, [r2, #0]
 80179b4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80179bc:	4a8c      	ldr	r2, [pc, #560]	; (8017bf0 <problem_fetch+0x16260>)
 80179be:	8811      	ldrh	r1, [r2, #0]
 80179c0:	7892      	ldrb	r2, [r2, #2]
 80179c2:	8019      	strh	r1, [r3, #0]
 80179c4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2207      	movs	r2, #7
 80179ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,H,D");
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	33a4      	adds	r3, #164	; 0xa4
 80179d0:	4a88      	ldr	r2, [pc, #544]	; (8017bf4 <problem_fetch+0x16264>)
 80179d2:	461c      	mov	r4, r3
 80179d4:	4613      	mov	r3, r2
 80179d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179d8:	6020      	str	r0, [r4, #0]
 80179da:	6061      	str	r1, [r4, #4]
 80179dc:	60a2      	str	r2, [r4, #8]
 80179de:	881b      	ldrh	r3, [r3, #0]
 80179e0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,16,18");
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	3304      	adds	r3, #4
 80179e6:	4a84      	ldr	r2, [pc, #528]	; (8017bf8 <problem_fetch+0x16268>)
 80179e8:	461d      	mov	r5, r3
 80179ea:	4614      	mov	r4, r2
 80179ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179ee:	6028      	str	r0, [r5, #0]
 80179f0:	6069      	str	r1, [r5, #4]
 80179f2:	60aa      	str	r2, [r5, #8]
 80179f4:	60eb      	str	r3, [r5, #12]
 80179f6:	8823      	ldrh	r3, [r4, #0]
 80179f8:	78a2      	ldrb	r2, [r4, #2]
 80179fa:	822b      	strh	r3, [r5, #16]
 80179fc:	4613      	mov	r3, r2
 80179fe:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017a06:	4a7d      	ldr	r2, [pc, #500]	; (8017bfc <problem_fetch+0x1626c>)
 8017a08:	461c      	mov	r4, r3
 8017a0a:	4613      	mov	r3, r2
 8017a0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a0e:	6020      	str	r0, [r4, #0]
 8017a10:	6061      	str	r1, [r4, #4]
 8017a12:	60a2      	str	r2, [r4, #8]
 8017a14:	881b      	ldrh	r3, [r3, #0]
 8017a16:	81a3      	strh	r3, [r4, #12]
			break;
 8017a18:	f004 beea 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 655 :
			strcpy(p->name,"THE WING");
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a22:	4977      	ldr	r1, [pc, #476]	; (8017c00 <problem_fetch+0x16270>)
 8017a24:	461a      	mov	r2, r3
 8017a26:	460b      	mov	r3, r1
 8017a28:	cb03      	ldmia	r3!, {r0, r1}
 8017a2a:	6010      	str	r0, [r2, #0]
 8017a2c:	6051      	str	r1, [r2, #4]
 8017a2e:	781b      	ldrb	r3, [r3, #0]
 8017a30:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a38:	4a6d      	ldr	r2, [pc, #436]	; (8017bf0 <problem_fetch+0x16260>)
 8017a3a:	8811      	ldrh	r1, [r2, #0]
 8017a3c:	7892      	ldrb	r2, [r2, #2]
 8017a3e:	8019      	strh	r1, [r3, #0]
 8017a40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	2207      	movs	r2, #7
 8017a46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,D,D,D");
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	33a4      	adds	r3, #164	; 0xa4
 8017a4c:	4a6d      	ldr	r2, [pc, #436]	; (8017c04 <problem_fetch+0x16274>)
 8017a4e:	461c      	mov	r4, r3
 8017a50:	4613      	mov	r3, r2
 8017a52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a54:	6020      	str	r0, [r4, #0]
 8017a56:	6061      	str	r1, [r4, #4]
 8017a58:	60a2      	str	r2, [r4, #8]
 8017a5a:	881b      	ldrh	r3, [r3, #0]
 8017a5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,15,18");
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	3304      	adds	r3, #4
 8017a62:	4a69      	ldr	r2, [pc, #420]	; (8017c08 <problem_fetch+0x16278>)
 8017a64:	461d      	mov	r5, r3
 8017a66:	4614      	mov	r4, r2
 8017a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a6a:	6028      	str	r0, [r5, #0]
 8017a6c:	6069      	str	r1, [r5, #4]
 8017a6e:	60aa      	str	r2, [r5, #8]
 8017a70:	60eb      	str	r3, [r5, #12]
 8017a72:	8823      	ldrh	r3, [r4, #0]
 8017a74:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017a7c:	4a5a      	ldr	r2, [pc, #360]	; (8017be8 <problem_fetch+0x16258>)
 8017a7e:	461c      	mov	r4, r3
 8017a80:	4613      	mov	r3, r2
 8017a82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a84:	6020      	str	r0, [r4, #0]
 8017a86:	6061      	str	r1, [r4, #4]
 8017a88:	60a2      	str	r2, [r4, #8]
 8017a8a:	881b      	ldrh	r3, [r3, #0]
 8017a8c:	81a3      	strh	r3, [r4, #12]
			break;
 8017a8e:	f004 beaf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 656 :
			strcpy(p->name,"HER COMES THE QUEEN");
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a98:	4a5c      	ldr	r2, [pc, #368]	; (8017c0c <problem_fetch+0x1627c>)
 8017a9a:	461d      	mov	r5, r3
 8017a9c:	4614      	mov	r4, r2
 8017a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017aa0:	6028      	str	r0, [r5, #0]
 8017aa2:	6069      	str	r1, [r5, #4]
 8017aa4:	60aa      	str	r2, [r5, #8]
 8017aa6:	60eb      	str	r3, [r5, #12]
 8017aa8:	6820      	ldr	r0, [r4, #0]
 8017aaa:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ab2:	4a4a      	ldr	r2, [pc, #296]	; (8017bdc <problem_fetch+0x1624c>)
 8017ab4:	6810      	ldr	r0, [r2, #0]
 8017ab6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2205      	movs	r2, #5
 8017abc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D");
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	33a4      	adds	r3, #164	; 0xa4
 8017ac2:	4953      	ldr	r1, [pc, #332]	; (8017c10 <problem_fetch+0x16280>)
 8017ac4:	461a      	mov	r2, r3
 8017ac6:	460b      	mov	r3, r1
 8017ac8:	cb03      	ldmia	r3!, {r0, r1}
 8017aca:	6010      	str	r0, [r2, #0]
 8017acc:	6051      	str	r1, [r2, #4]
 8017ace:	881b      	ldrh	r3, [r3, #0]
 8017ad0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	3304      	adds	r3, #4
 8017ad6:	4a4f      	ldr	r2, [pc, #316]	; (8017c14 <problem_fetch+0x16284>)
 8017ad8:	461c      	mov	r4, r3
 8017ada:	4613      	mov	r3, r2
 8017adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ade:	6020      	str	r0, [r4, #0]
 8017ae0:	6061      	str	r1, [r4, #4]
 8017ae2:	60a2      	str	r2, [r4, #8]
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017aee:	494a      	ldr	r1, [pc, #296]	; (8017c18 <problem_fetch+0x16288>)
 8017af0:	461a      	mov	r2, r3
 8017af2:	460b      	mov	r3, r1
 8017af4:	cb03      	ldmia	r3!, {r0, r1}
 8017af6:	6010      	str	r0, [r2, #0]
 8017af8:	6051      	str	r1, [r2, #4]
 8017afa:	881b      	ldrh	r3, [r3, #0]
 8017afc:	8113      	strh	r3, [r2, #8]
			break;
 8017afe:	f004 be77 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 657 :
			strcpy(p->name,"EASY PINCH");
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b08:	4944      	ldr	r1, [pc, #272]	; (8017c1c <problem_fetch+0x1628c>)
 8017b0a:	461a      	mov	r2, r3
 8017b0c:	460b      	mov	r3, r1
 8017b0e:	cb03      	ldmia	r3!, {r0, r1}
 8017b10:	6010      	str	r0, [r2, #0]
 8017b12:	6051      	str	r1, [r2, #4]
 8017b14:	8819      	ldrh	r1, [r3, #0]
 8017b16:	789b      	ldrb	r3, [r3, #2]
 8017b18:	8111      	strh	r1, [r2, #8]
 8017b1a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b22:	4a3f      	ldr	r2, [pc, #252]	; (8017c20 <problem_fetch+0x16290>)
 8017b24:	6810      	ldr	r0, [r2, #0]
 8017b26:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	2206      	movs	r2, #6
 8017b2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,G,F,E,I");
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	33a4      	adds	r3, #164	; 0xa4
 8017b32:	4a3c      	ldr	r2, [pc, #240]	; (8017c24 <problem_fetch+0x16294>)
 8017b34:	461c      	mov	r4, r3
 8017b36:	4613      	mov	r3, r2
 8017b38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b3a:	6020      	str	r0, [r4, #0]
 8017b3c:	6061      	str	r1, [r4, #4]
 8017b3e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,14,18");
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	3304      	adds	r3, #4
 8017b44:	4a38      	ldr	r2, [pc, #224]	; (8017c28 <problem_fetch+0x16298>)
 8017b46:	461c      	mov	r4, r3
 8017b48:	4615      	mov	r5, r2
 8017b4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b4c:	6020      	str	r0, [r4, #0]
 8017b4e:	6061      	str	r1, [r4, #4]
 8017b50:	60a2      	str	r2, [r4, #8]
 8017b52:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017b5a:	4a34      	ldr	r2, [pc, #208]	; (8017c2c <problem_fetch+0x1629c>)
 8017b5c:	461c      	mov	r4, r3
 8017b5e:	4613      	mov	r3, r2
 8017b60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b62:	6020      	str	r0, [r4, #0]
 8017b64:	6061      	str	r1, [r4, #4]
 8017b66:	60a2      	str	r2, [r4, #8]
			break;
 8017b68:	f004 be42 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 658 :
			strcpy(p->name,"TIRARONCHIE");
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b72:	4a2f      	ldr	r2, [pc, #188]	; (8017c30 <problem_fetch+0x162a0>)
 8017b74:	461c      	mov	r4, r3
 8017b76:	4613      	mov	r3, r2
 8017b78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b7a:	6020      	str	r0, [r4, #0]
 8017b7c:	6061      	str	r1, [r4, #4]
 8017b7e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b86:	4a26      	ldr	r2, [pc, #152]	; (8017c20 <problem_fetch+0x16290>)
 8017b88:	6810      	ldr	r0, [r2, #0]
 8017b8a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	2206      	movs	r2, #6
 8017b90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	33a4      	adds	r3, #164	; 0xa4
 8017b96:	4a27      	ldr	r2, [pc, #156]	; (8017c34 <problem_fetch+0x162a4>)
 8017b98:	461c      	mov	r4, r3
 8017b9a:	4613      	mov	r3, r2
 8017b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b9e:	6020      	str	r0, [r4, #0]
 8017ba0:	6061      	str	r1, [r4, #4]
 8017ba2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,16,18");
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	3304      	adds	r3, #4
 8017ba8:	4a23      	ldr	r2, [pc, #140]	; (8017c38 <problem_fetch+0x162a8>)
 8017baa:	461c      	mov	r4, r3
 8017bac:	4613      	mov	r3, r2
 8017bae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017bb0:	6020      	str	r0, [r4, #0]
 8017bb2:	6061      	str	r1, [r4, #4]
 8017bb4:	60a2      	str	r2, [r4, #8]
 8017bb6:	881a      	ldrh	r2, [r3, #0]
 8017bb8:	789b      	ldrb	r3, [r3, #2]
 8017bba:	81a2      	strh	r2, [r4, #12]
 8017bbc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017bc4:	4a1d      	ldr	r2, [pc, #116]	; (8017c3c <problem_fetch+0x162ac>)
 8017bc6:	461c      	mov	r4, r3
 8017bc8:	4613      	mov	r3, r2
 8017bca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017bcc:	6020      	str	r0, [r4, #0]
 8017bce:	6061      	str	r1, [r4, #4]
 8017bd0:	60a2      	str	r2, [r4, #8]
			break;
 8017bd2:	f004 be0d 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8017bd6:	bf00      	nop
 8017bd8:	0802b6f8 	.word	0x0802b6f8
 8017bdc:	08023c28 	.word	0x08023c28
 8017be0:	0802b704 	.word	0x0802b704
 8017be4:	0802b714 	.word	0x0802b714
 8017be8:	08023c08 	.word	0x08023c08
 8017bec:	0802b728 	.word	0x0802b728
 8017bf0:	08023c5c 	.word	0x08023c5c
 8017bf4:	0802b730 	.word	0x0802b730
 8017bf8:	0802b740 	.word	0x0802b740
 8017bfc:	08023d18 	.word	0x08023d18
 8017c00:	0802b754 	.word	0x0802b754
 8017c04:	0802b760 	.word	0x0802b760
 8017c08:	0802b770 	.word	0x0802b770
 8017c0c:	0802b784 	.word	0x0802b784
 8017c10:	0802b798 	.word	0x0802b798
 8017c14:	080252c4 	.word	0x080252c4
 8017c18:	0802405c 	.word	0x0802405c
 8017c1c:	0802b7a4 	.word	0x0802b7a4
 8017c20:	08023d30 	.word	0x08023d30
 8017c24:	0802b7b0 	.word	0x0802b7b0
 8017c28:	0802b7bc 	.word	0x0802b7bc
 8017c2c:	08023f2c 	.word	0x08023f2c
 8017c30:	0802b7cc 	.word	0x0802b7cc
 8017c34:	08028aa8 	.word	0x08028aa8
 8017c38:	0802b7d8 	.word	0x0802b7d8
 8017c3c:	08023b70 	.word	0x08023b70
		case 659 :
			strcpy(p->name,"THE REAL DEAL");
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017c46:	4ab1      	ldr	r2, [pc, #708]	; (8017f0c <problem_fetch+0x1657c>)
 8017c48:	461c      	mov	r4, r3
 8017c4a:	4613      	mov	r3, r2
 8017c4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c4e:	6020      	str	r0, [r4, #0]
 8017c50:	6061      	str	r1, [r4, #4]
 8017c52:	60a2      	str	r2, [r4, #8]
 8017c54:	881b      	ldrh	r3, [r3, #0]
 8017c56:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"8A");
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017c5e:	4aac      	ldr	r2, [pc, #688]	; (8017f10 <problem_fetch+0x16580>)
 8017c60:	8811      	ldrh	r1, [r2, #0]
 8017c62:	7892      	ldrb	r2, [r2, #2]
 8017c64:	8019      	strh	r1, [r3, #0]
 8017c66:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	2208      	movs	r2, #8
 8017c6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,H,I,E,B,A");
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	33a4      	adds	r3, #164	; 0xa4
 8017c72:	4aa8      	ldr	r2, [pc, #672]	; (8017f14 <problem_fetch+0x16584>)
 8017c74:	461c      	mov	r4, r3
 8017c76:	4615      	mov	r5, r2
 8017c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017c7a:	6020      	str	r0, [r4, #0]
 8017c7c:	6061      	str	r1, [r4, #4]
 8017c7e:	60a2      	str	r2, [r4, #8]
 8017c80:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,7,12,15,14,12,18");
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	3304      	adds	r3, #4
 8017c86:	4aa4      	ldr	r2, [pc, #656]	; (8017f18 <problem_fetch+0x16588>)
 8017c88:	461d      	mov	r5, r3
 8017c8a:	4614      	mov	r4, r2
 8017c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c8e:	6028      	str	r0, [r5, #0]
 8017c90:	6069      	str	r1, [r5, #4]
 8017c92:	60aa      	str	r2, [r5, #8]
 8017c94:	60eb      	str	r3, [r5, #12]
 8017c96:	6820      	ldr	r0, [r4, #0]
 8017c98:	6128      	str	r0, [r5, #16]
 8017c9a:	7923      	ldrb	r3, [r4, #4]
 8017c9c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017ca4:	4a9d      	ldr	r2, [pc, #628]	; (8017f1c <problem_fetch+0x1658c>)
 8017ca6:	461c      	mov	r4, r3
 8017ca8:	4615      	mov	r5, r2
 8017caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017cac:	6020      	str	r0, [r4, #0]
 8017cae:	6061      	str	r1, [r4, #4]
 8017cb0:	60a2      	str	r2, [r4, #8]
 8017cb2:	60e3      	str	r3, [r4, #12]
			break;
 8017cb4:	f004 bd9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 660 :
			strcpy(p->name,"AF CHRISTMAS TUBERCULOSIS");
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017cbe:	4a98      	ldr	r2, [pc, #608]	; (8017f20 <problem_fetch+0x16590>)
 8017cc0:	461d      	mov	r5, r3
 8017cc2:	4614      	mov	r4, r2
 8017cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017cc6:	6028      	str	r0, [r5, #0]
 8017cc8:	6069      	str	r1, [r5, #4]
 8017cca:	60aa      	str	r2, [r5, #8]
 8017ccc:	60eb      	str	r3, [r5, #12]
 8017cce:	cc03      	ldmia	r4!, {r0, r1}
 8017cd0:	6128      	str	r0, [r5, #16]
 8017cd2:	6169      	str	r1, [r5, #20]
 8017cd4:	8823      	ldrh	r3, [r4, #0]
 8017cd6:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017cde:	4a91      	ldr	r2, [pc, #580]	; (8017f24 <problem_fetch+0x16594>)
 8017ce0:	6810      	ldr	r0, [r2, #0]
 8017ce2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	2207      	movs	r2, #7
 8017ce8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,I,I");
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	33a4      	adds	r3, #164	; 0xa4
 8017cee:	4a8e      	ldr	r2, [pc, #568]	; (8017f28 <problem_fetch+0x16598>)
 8017cf0:	461c      	mov	r4, r3
 8017cf2:	4613      	mov	r3, r2
 8017cf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017cf6:	6020      	str	r0, [r4, #0]
 8017cf8:	6061      	str	r1, [r4, #4]
 8017cfa:	60a2      	str	r2, [r4, #8]
 8017cfc:	881b      	ldrh	r3, [r3, #0]
 8017cfe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,11,14,15,18");
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	3304      	adds	r3, #4
 8017d04:	4a89      	ldr	r2, [pc, #548]	; (8017f2c <problem_fetch+0x1659c>)
 8017d06:	461d      	mov	r5, r3
 8017d08:	4614      	mov	r4, r2
 8017d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d0c:	6028      	str	r0, [r5, #0]
 8017d0e:	6069      	str	r1, [r5, #4]
 8017d10:	60aa      	str	r2, [r5, #8]
 8017d12:	60eb      	str	r3, [r5, #12]
 8017d14:	8823      	ldrh	r3, [r4, #0]
 8017d16:	78a2      	ldrb	r2, [r4, #2]
 8017d18:	822b      	strh	r3, [r5, #16]
 8017d1a:	4613      	mov	r3, r2
 8017d1c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017d24:	4a82      	ldr	r2, [pc, #520]	; (8017f30 <problem_fetch+0x165a0>)
 8017d26:	461c      	mov	r4, r3
 8017d28:	4613      	mov	r3, r2
 8017d2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d2c:	6020      	str	r0, [r4, #0]
 8017d2e:	6061      	str	r1, [r4, #4]
 8017d30:	60a2      	str	r2, [r4, #8]
 8017d32:	881b      	ldrh	r3, [r3, #0]
 8017d34:	81a3      	strh	r3, [r4, #12]
			break;
 8017d36:	f004 bd5b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 661 :
			strcpy(p->name,"AF EASY FOUR");
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017d40:	4a7c      	ldr	r2, [pc, #496]	; (8017f34 <problem_fetch+0x165a4>)
 8017d42:	461c      	mov	r4, r3
 8017d44:	4613      	mov	r3, r2
 8017d46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d48:	6020      	str	r0, [r4, #0]
 8017d4a:	6061      	str	r1, [r4, #4]
 8017d4c:	60a2      	str	r2, [r4, #8]
 8017d4e:	781b      	ldrb	r3, [r3, #0]
 8017d50:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017d58:	4a77      	ldr	r2, [pc, #476]	; (8017f38 <problem_fetch+0x165a8>)
 8017d5a:	6810      	ldr	r0, [r2, #0]
 8017d5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	2208      	movs	r2, #8
 8017d62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,F,I,G,I");
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	33a4      	adds	r3, #164	; 0xa4
 8017d68:	4a74      	ldr	r2, [pc, #464]	; (8017f3c <problem_fetch+0x165ac>)
 8017d6a:	461c      	mov	r4, r3
 8017d6c:	4615      	mov	r5, r2
 8017d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d70:	6020      	str	r0, [r4, #0]
 8017d72:	6061      	str	r1, [r4, #4]
 8017d74:	60a2      	str	r2, [r4, #8]
 8017d76:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,15,18");
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	3304      	adds	r3, #4
 8017d7c:	4a70      	ldr	r2, [pc, #448]	; (8017f40 <problem_fetch+0x165b0>)
 8017d7e:	461d      	mov	r5, r3
 8017d80:	4614      	mov	r4, r2
 8017d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d84:	6028      	str	r0, [r5, #0]
 8017d86:	6069      	str	r1, [r5, #4]
 8017d88:	60aa      	str	r2, [r5, #8]
 8017d8a:	60eb      	str	r3, [r5, #12]
 8017d8c:	6820      	ldr	r0, [r4, #0]
 8017d8e:	6128      	str	r0, [r5, #16]
 8017d90:	7923      	ldrb	r3, [r4, #4]
 8017d92:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017d9a:	4a60      	ldr	r2, [pc, #384]	; (8017f1c <problem_fetch+0x1658c>)
 8017d9c:	461c      	mov	r4, r3
 8017d9e:	4615      	mov	r5, r2
 8017da0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017da2:	6020      	str	r0, [r4, #0]
 8017da4:	6061      	str	r1, [r4, #4]
 8017da6:	60a2      	str	r2, [r4, #8]
 8017da8:	60e3      	str	r3, [r4, #12]
			break;
 8017daa:	f004 bd21 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 662 :
			strcpy(p->name,"AF EASY ONE");
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017db4:	4a63      	ldr	r2, [pc, #396]	; (8017f44 <problem_fetch+0x165b4>)
 8017db6:	461c      	mov	r4, r3
 8017db8:	4613      	mov	r3, r2
 8017dba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017dbc:	6020      	str	r0, [r4, #0]
 8017dbe:	6061      	str	r1, [r4, #4]
 8017dc0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017dc8:	4a5b      	ldr	r2, [pc, #364]	; (8017f38 <problem_fetch+0x165a8>)
 8017dca:	6810      	ldr	r0, [r2, #0]
 8017dcc:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2208      	movs	r2, #8
 8017dd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,J,G,K,I");
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	33a4      	adds	r3, #164	; 0xa4
 8017dd8:	4a5b      	ldr	r2, [pc, #364]	; (8017f48 <problem_fetch+0x165b8>)
 8017dda:	461c      	mov	r4, r3
 8017ddc:	4615      	mov	r5, r2
 8017dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017de0:	6020      	str	r0, [r4, #0]
 8017de2:	6061      	str	r1, [r4, #4]
 8017de4:	60a2      	str	r2, [r4, #8]
 8017de6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,16,18");
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	3304      	adds	r3, #4
 8017dec:	4a57      	ldr	r2, [pc, #348]	; (8017f4c <problem_fetch+0x165bc>)
 8017dee:	461d      	mov	r5, r3
 8017df0:	4614      	mov	r4, r2
 8017df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017df4:	6028      	str	r0, [r5, #0]
 8017df6:	6069      	str	r1, [r5, #4]
 8017df8:	60aa      	str	r2, [r5, #8]
 8017dfa:	60eb      	str	r3, [r5, #12]
 8017dfc:	6820      	ldr	r0, [r4, #0]
 8017dfe:	6128      	str	r0, [r5, #16]
 8017e00:	7923      	ldrb	r3, [r4, #4]
 8017e02:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017e0a:	4a44      	ldr	r2, [pc, #272]	; (8017f1c <problem_fetch+0x1658c>)
 8017e0c:	461c      	mov	r4, r3
 8017e0e:	4615      	mov	r5, r2
 8017e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e12:	6020      	str	r0, [r4, #0]
 8017e14:	6061      	str	r1, [r4, #4]
 8017e16:	60a2      	str	r2, [r4, #8]
 8017e18:	60e3      	str	r3, [r4, #12]
			break;
 8017e1a:	f004 bce9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 663 :
			strcpy(p->name,"HOLD THE SWING");
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e24:	4a4a      	ldr	r2, [pc, #296]	; (8017f50 <problem_fetch+0x165c0>)
 8017e26:	461c      	mov	r4, r3
 8017e28:	4613      	mov	r3, r2
 8017e2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e2c:	6020      	str	r0, [r4, #0]
 8017e2e:	6061      	str	r1, [r4, #4]
 8017e30:	60a2      	str	r2, [r4, #8]
 8017e32:	881a      	ldrh	r2, [r3, #0]
 8017e34:	789b      	ldrb	r3, [r3, #2]
 8017e36:	81a2      	strh	r2, [r4, #12]
 8017e38:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017e40:	4a44      	ldr	r2, [pc, #272]	; (8017f54 <problem_fetch+0x165c4>)
 8017e42:	8811      	ldrh	r1, [r2, #0]
 8017e44:	7892      	ldrb	r2, [r2, #2]
 8017e46:	8019      	strh	r1, [r3, #0]
 8017e48:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2207      	movs	r2, #7
 8017e4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,E,I,E,I");
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	33a4      	adds	r3, #164	; 0xa4
 8017e54:	4a40      	ldr	r2, [pc, #256]	; (8017f58 <problem_fetch+0x165c8>)
 8017e56:	461c      	mov	r4, r3
 8017e58:	4613      	mov	r3, r2
 8017e5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e5c:	6020      	str	r0, [r4, #0]
 8017e5e:	6061      	str	r1, [r4, #4]
 8017e60:	60a2      	str	r2, [r4, #8]
 8017e62:	881b      	ldrh	r3, [r3, #0]
 8017e64:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,14,18");
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	3304      	adds	r3, #4
 8017e6a:	4a3c      	ldr	r2, [pc, #240]	; (8017f5c <problem_fetch+0x165cc>)
 8017e6c:	461d      	mov	r5, r3
 8017e6e:	4614      	mov	r4, r2
 8017e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e72:	6028      	str	r0, [r5, #0]
 8017e74:	6069      	str	r1, [r5, #4]
 8017e76:	60aa      	str	r2, [r5, #8]
 8017e78:	60eb      	str	r3, [r5, #12]
 8017e7a:	8823      	ldrh	r3, [r4, #0]
 8017e7c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017e84:	4a36      	ldr	r2, [pc, #216]	; (8017f60 <problem_fetch+0x165d0>)
 8017e86:	461c      	mov	r4, r3
 8017e88:	4613      	mov	r3, r2
 8017e8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017e8c:	6020      	str	r0, [r4, #0]
 8017e8e:	6061      	str	r1, [r4, #4]
 8017e90:	60a2      	str	r2, [r4, #8]
 8017e92:	881b      	ldrh	r3, [r3, #0]
 8017e94:	81a3      	strh	r3, [r4, #12]
			break;
 8017e96:	f004 bcab 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 664 :
			strcpy(p->name,"DIAGONALE");
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017ea0:	4930      	ldr	r1, [pc, #192]	; (8017f64 <problem_fetch+0x165d4>)
 8017ea2:	461a      	mov	r2, r3
 8017ea4:	460b      	mov	r3, r1
 8017ea6:	cb03      	ldmia	r3!, {r0, r1}
 8017ea8:	6010      	str	r0, [r2, #0]
 8017eaa:	6051      	str	r1, [r2, #4]
 8017eac:	881b      	ldrh	r3, [r3, #0]
 8017eae:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017eb6:	4a2c      	ldr	r2, [pc, #176]	; (8017f68 <problem_fetch+0x165d8>)
 8017eb8:	8811      	ldrh	r1, [r2, #0]
 8017eba:	7892      	ldrb	r2, [r2, #2]
 8017ebc:	8019      	strh	r1, [r3, #0]
 8017ebe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	2205      	movs	r2, #5
 8017ec4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,D,A");
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	33a4      	adds	r3, #164	; 0xa4
 8017eca:	4928      	ldr	r1, [pc, #160]	; (8017f6c <problem_fetch+0x165dc>)
 8017ecc:	461a      	mov	r2, r3
 8017ece:	460b      	mov	r3, r1
 8017ed0:	cb03      	ldmia	r3!, {r0, r1}
 8017ed2:	6010      	str	r0, [r2, #0]
 8017ed4:	6051      	str	r1, [r2, #4]
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,15,18");
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	3304      	adds	r3, #4
 8017ede:	4a24      	ldr	r2, [pc, #144]	; (8017f70 <problem_fetch+0x165e0>)
 8017ee0:	461c      	mov	r4, r3
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ee6:	6020      	str	r0, [r4, #0]
 8017ee8:	6061      	str	r1, [r4, #4]
 8017eea:	60a2      	str	r2, [r4, #8]
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017ef6:	491f      	ldr	r1, [pc, #124]	; (8017f74 <problem_fetch+0x165e4>)
 8017ef8:	461a      	mov	r2, r3
 8017efa:	460b      	mov	r3, r1
 8017efc:	cb03      	ldmia	r3!, {r0, r1}
 8017efe:	6010      	str	r0, [r2, #0]
 8017f00:	6051      	str	r1, [r2, #4]
 8017f02:	881b      	ldrh	r3, [r3, #0]
 8017f04:	8113      	strh	r3, [r2, #8]
			break;
 8017f06:	f004 bc73 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8017f0a:	bf00      	nop
 8017f0c:	0802b7e8 	.word	0x0802b7e8
 8017f10:	08025ef4 	.word	0x08025ef4
 8017f14:	0802b7f8 	.word	0x0802b7f8
 8017f18:	0802b808 	.word	0x0802b808
 8017f1c:	08023da0 	.word	0x08023da0
 8017f20:	0802b820 	.word	0x0802b820
 8017f24:	08023c28 	.word	0x08023c28
 8017f28:	0802b83c 	.word	0x0802b83c
 8017f2c:	0802b84c 	.word	0x0802b84c
 8017f30:	08023d18 	.word	0x08023d18
 8017f34:	0802b860 	.word	0x0802b860
 8017f38:	08023b90 	.word	0x08023b90
 8017f3c:	0802b870 	.word	0x0802b870
 8017f40:	0802b880 	.word	0x0802b880
 8017f44:	0802b898 	.word	0x0802b898
 8017f48:	0802b8a4 	.word	0x0802b8a4
 8017f4c:	0802b8b4 	.word	0x0802b8b4
 8017f50:	0802b8cc 	.word	0x0802b8cc
 8017f54:	08023c5c 	.word	0x08023c5c
 8017f58:	0802b8dc 	.word	0x0802b8dc
 8017f5c:	0802b8ec 	.word	0x0802b8ec
 8017f60:	08023c08 	.word	0x08023c08
 8017f64:	0802b900 	.word	0x0802b900
 8017f68:	08024288 	.word	0x08024288
 8017f6c:	0802b90c 	.word	0x0802b90c
 8017f70:	0802b918 	.word	0x0802b918
 8017f74:	0802405c 	.word	0x0802405c
		case 665 :
			strcpy(p->name,"ACG59");
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017f7e:	4ac3      	ldr	r2, [pc, #780]	; (801828c <problem_fetch+0x168fc>)
 8017f80:	6810      	ldr	r0, [r2, #0]
 8017f82:	6018      	str	r0, [r3, #0]
 8017f84:	8892      	ldrh	r2, [r2, #4]
 8017f86:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f8e:	4ac0      	ldr	r2, [pc, #768]	; (8018290 <problem_fetch+0x16900>)
 8017f90:	8811      	ldrh	r1, [r2, #0]
 8017f92:	7892      	ldrb	r2, [r2, #2]
 8017f94:	8019      	strh	r1, [r3, #0]
 8017f96:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	2208      	movs	r2, #8
 8017f9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,D,E,F,I");
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	33a4      	adds	r3, #164	; 0xa4
 8017fa2:	4abc      	ldr	r2, [pc, #752]	; (8018294 <problem_fetch+0x16904>)
 8017fa4:	461c      	mov	r4, r3
 8017fa6:	4615      	mov	r5, r2
 8017fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017faa:	6020      	str	r0, [r4, #0]
 8017fac:	6061      	str	r1, [r4, #4]
 8017fae:	60a2      	str	r2, [r4, #8]
 8017fb0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,15,16,11,18");
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	3304      	adds	r3, #4
 8017fb6:	4ab8      	ldr	r2, [pc, #736]	; (8018298 <problem_fetch+0x16908>)
 8017fb8:	461d      	mov	r5, r3
 8017fba:	4614      	mov	r4, r2
 8017fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017fbe:	6028      	str	r0, [r5, #0]
 8017fc0:	6069      	str	r1, [r5, #4]
 8017fc2:	60aa      	str	r2, [r5, #8]
 8017fc4:	60eb      	str	r3, [r5, #12]
 8017fc6:	6820      	ldr	r0, [r4, #0]
 8017fc8:	6128      	str	r0, [r5, #16]
 8017fca:	7923      	ldrb	r3, [r4, #4]
 8017fcc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017fd4:	4ab1      	ldr	r2, [pc, #708]	; (801829c <problem_fetch+0x1690c>)
 8017fd6:	461c      	mov	r4, r3
 8017fd8:	4615      	mov	r5, r2
 8017fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fdc:	6020      	str	r0, [r4, #0]
 8017fde:	6061      	str	r1, [r4, #4]
 8017fe0:	60a2      	str	r2, [r4, #8]
 8017fe2:	60e3      	str	r3, [r4, #12]
			break;
 8017fe4:	f004 bc04 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 666 :
			strcpy(p->name,"ACG56");
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017fee:	4aac      	ldr	r2, [pc, #688]	; (80182a0 <problem_fetch+0x16910>)
 8017ff0:	6810      	ldr	r0, [r2, #0]
 8017ff2:	6018      	str	r0, [r3, #0]
 8017ff4:	8892      	ldrh	r2, [r2, #4]
 8017ff6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ffe:	4aa9      	ldr	r2, [pc, #676]	; (80182a4 <problem_fetch+0x16914>)
 8018000:	8811      	ldrh	r1, [r2, #0]
 8018002:	7892      	ldrb	r2, [r2, #2]
 8018004:	8019      	strh	r1, [r3, #0]
 8018006:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	2207      	movs	r2, #7
 801800c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,E,C,B,A");
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	33a4      	adds	r3, #164	; 0xa4
 8018012:	4aa5      	ldr	r2, [pc, #660]	; (80182a8 <problem_fetch+0x16918>)
 8018014:	461c      	mov	r4, r3
 8018016:	4613      	mov	r3, r2
 8018018:	cb07      	ldmia	r3!, {r0, r1, r2}
 801801a:	6020      	str	r0, [r4, #0]
 801801c:	6061      	str	r1, [r4, #4]
 801801e:	60a2      	str	r2, [r4, #8]
 8018020:	881b      	ldrh	r3, [r3, #0]
 8018022:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,13,16,16,10,18");
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	3304      	adds	r3, #4
 8018028:	4aa0      	ldr	r2, [pc, #640]	; (80182ac <problem_fetch+0x1691c>)
 801802a:	461d      	mov	r5, r3
 801802c:	4614      	mov	r4, r2
 801802e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018030:	6028      	str	r0, [r5, #0]
 8018032:	6069      	str	r1, [r5, #4]
 8018034:	60aa      	str	r2, [r5, #8]
 8018036:	60eb      	str	r3, [r5, #12]
 8018038:	6820      	ldr	r0, [r4, #0]
 801803a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018042:	4a9b      	ldr	r2, [pc, #620]	; (80182b0 <problem_fetch+0x16920>)
 8018044:	461c      	mov	r4, r3
 8018046:	4613      	mov	r3, r2
 8018048:	cb07      	ldmia	r3!, {r0, r1, r2}
 801804a:	6020      	str	r0, [r4, #0]
 801804c:	6061      	str	r1, [r4, #4]
 801804e:	60a2      	str	r2, [r4, #8]
 8018050:	881b      	ldrh	r3, [r3, #0]
 8018052:	81a3      	strh	r3, [r4, #12]
			break;
 8018054:	f004 bbcc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 667 :
			strcpy(p->name,"LAGO NERO");
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801805e:	4995      	ldr	r1, [pc, #596]	; (80182b4 <problem_fetch+0x16924>)
 8018060:	461a      	mov	r2, r3
 8018062:	460b      	mov	r3, r1
 8018064:	cb03      	ldmia	r3!, {r0, r1}
 8018066:	6010      	str	r0, [r2, #0]
 8018068:	6051      	str	r1, [r2, #4]
 801806a:	881b      	ldrh	r3, [r3, #0]
 801806c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018074:	4a90      	ldr	r2, [pc, #576]	; (80182b8 <problem_fetch+0x16928>)
 8018076:	6810      	ldr	r0, [r2, #0]
 8018078:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	2208      	movs	r2, #8
 801807e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,F,C,D,E,D");
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	33a4      	adds	r3, #164	; 0xa4
 8018084:	4a8d      	ldr	r2, [pc, #564]	; (80182bc <problem_fetch+0x1692c>)
 8018086:	461c      	mov	r4, r3
 8018088:	4615      	mov	r5, r2
 801808a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801808c:	6020      	str	r0, [r4, #0]
 801808e:	6061      	str	r1, [r4, #4]
 8018090:	60a2      	str	r2, [r4, #8]
 8018092:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,11,13,15,16,18");
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	3304      	adds	r3, #4
 8018098:	4a89      	ldr	r2, [pc, #548]	; (80182c0 <problem_fetch+0x16930>)
 801809a:	461d      	mov	r5, r3
 801809c:	4614      	mov	r4, r2
 801809e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180a0:	6028      	str	r0, [r5, #0]
 80180a2:	6069      	str	r1, [r5, #4]
 80180a4:	60aa      	str	r2, [r5, #8]
 80180a6:	60eb      	str	r3, [r5, #12]
 80180a8:	6820      	ldr	r0, [r4, #0]
 80180aa:	6128      	str	r0, [r5, #16]
 80180ac:	7923      	ldrb	r3, [r4, #4]
 80180ae:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80180b6:	4a79      	ldr	r2, [pc, #484]	; (801829c <problem_fetch+0x1690c>)
 80180b8:	461c      	mov	r4, r3
 80180ba:	4615      	mov	r5, r2
 80180bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80180be:	6020      	str	r0, [r4, #0]
 80180c0:	6061      	str	r1, [r4, #4]
 80180c2:	60a2      	str	r2, [r4, #8]
 80180c4:	60e3      	str	r3, [r4, #12]
			break;
 80180c6:	f004 bb93 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 668 :
			strcpy(p->name,"BP");
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80180d0:	4a7c      	ldr	r2, [pc, #496]	; (80182c4 <problem_fetch+0x16934>)
 80180d2:	8811      	ldrh	r1, [r2, #0]
 80180d4:	7892      	ldrb	r2, [r2, #2]
 80180d6:	8019      	strh	r1, [r3, #0]
 80180d8:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80180e0:	4a75      	ldr	r2, [pc, #468]	; (80182b8 <problem_fetch+0x16928>)
 80180e2:	6810      	ldr	r0, [r2, #0]
 80180e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2209      	movs	r2, #9
 80180ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,I,H,J,H,I");
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	33a4      	adds	r3, #164	; 0xa4
 80180f0:	4a75      	ldr	r2, [pc, #468]	; (80182c8 <problem_fetch+0x16938>)
 80180f2:	461d      	mov	r5, r3
 80180f4:	4614      	mov	r4, r2
 80180f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180f8:	6028      	str	r0, [r5, #0]
 80180fa:	6069      	str	r1, [r5, #4]
 80180fc:	60aa      	str	r2, [r5, #8]
 80180fe:	60eb      	str	r3, [r5, #12]
 8018100:	8823      	ldrh	r3, [r4, #0]
 8018102:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,8,10,12,13,16,18");
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	3304      	adds	r3, #4
 8018108:	4a70      	ldr	r2, [pc, #448]	; (80182cc <problem_fetch+0x1693c>)
 801810a:	461c      	mov	r4, r3
 801810c:	4615      	mov	r5, r2
 801810e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018110:	6020      	str	r0, [r4, #0]
 8018112:	6061      	str	r1, [r4, #4]
 8018114:	60a2      	str	r2, [r4, #8]
 8018116:	60e3      	str	r3, [r4, #12]
 8018118:	6828      	ldr	r0, [r5, #0]
 801811a:	6120      	str	r0, [r4, #16]
 801811c:	88ab      	ldrh	r3, [r5, #4]
 801811e:	79aa      	ldrb	r2, [r5, #6]
 8018120:	82a3      	strh	r3, [r4, #20]
 8018122:	4613      	mov	r3, r2
 8018124:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801812c:	4a68      	ldr	r2, [pc, #416]	; (80182d0 <problem_fetch+0x16940>)
 801812e:	461d      	mov	r5, r3
 8018130:	4614      	mov	r4, r2
 8018132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018134:	6028      	str	r0, [r5, #0]
 8018136:	6069      	str	r1, [r5, #4]
 8018138:	60aa      	str	r2, [r5, #8]
 801813a:	60eb      	str	r3, [r5, #12]
 801813c:	8823      	ldrh	r3, [r4, #0]
 801813e:	822b      	strh	r3, [r5, #16]
			break;
 8018140:	f004 bb56 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 669 :
			strcpy(p->name,"JAGUAR SHARK HARD");
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801814a:	4a62      	ldr	r2, [pc, #392]	; (80182d4 <problem_fetch+0x16944>)
 801814c:	461d      	mov	r5, r3
 801814e:	4614      	mov	r4, r2
 8018150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018152:	6028      	str	r0, [r5, #0]
 8018154:	6069      	str	r1, [r5, #4]
 8018156:	60aa      	str	r2, [r5, #8]
 8018158:	60eb      	str	r3, [r5, #12]
 801815a:	8823      	ldrh	r3, [r4, #0]
 801815c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018164:	4a5c      	ldr	r2, [pc, #368]	; (80182d8 <problem_fetch+0x16948>)
 8018166:	6810      	ldr	r0, [r2, #0]
 8018168:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	2206      	movs	r2, #6
 801816e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,E,I");
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	33a4      	adds	r3, #164	; 0xa4
 8018174:	4a59      	ldr	r2, [pc, #356]	; (80182dc <problem_fetch+0x1694c>)
 8018176:	461c      	mov	r4, r3
 8018178:	4613      	mov	r3, r2
 801817a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801817c:	6020      	str	r0, [r4, #0]
 801817e:	6061      	str	r1, [r4, #4]
 8018180:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,13,16,18");
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	3304      	adds	r3, #4
 8018186:	4a56      	ldr	r2, [pc, #344]	; (80182e0 <problem_fetch+0x16950>)
 8018188:	461d      	mov	r5, r3
 801818a:	4614      	mov	r4, r2
 801818c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801818e:	6028      	str	r0, [r5, #0]
 8018190:	6069      	str	r1, [r5, #4]
 8018192:	60aa      	str	r2, [r5, #8]
 8018194:	60eb      	str	r3, [r5, #12]
 8018196:	7823      	ldrb	r3, [r4, #0]
 8018198:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80181a0:	4a50      	ldr	r2, [pc, #320]	; (80182e4 <problem_fetch+0x16954>)
 80181a2:	461c      	mov	r4, r3
 80181a4:	4613      	mov	r3, r2
 80181a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181a8:	6020      	str	r0, [r4, #0]
 80181aa:	6061      	str	r1, [r4, #4]
 80181ac:	60a2      	str	r2, [r4, #8]
			break;
 80181ae:	f004 bb1f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 670 :
			strcpy(p->name,"IL MANFRUITO");
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80181b8:	4a4b      	ldr	r2, [pc, #300]	; (80182e8 <problem_fetch+0x16958>)
 80181ba:	461c      	mov	r4, r3
 80181bc:	4613      	mov	r3, r2
 80181be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181c0:	6020      	str	r0, [r4, #0]
 80181c2:	6061      	str	r1, [r4, #4]
 80181c4:	60a2      	str	r2, [r4, #8]
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80181d0:	4a46      	ldr	r2, [pc, #280]	; (80182ec <problem_fetch+0x1695c>)
 80181d2:	8811      	ldrh	r1, [r2, #0]
 80181d4:	7892      	ldrb	r2, [r2, #2]
 80181d6:	8019      	strh	r1, [r3, #0]
 80181d8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2206      	movs	r2, #6
 80181de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,E,E,F,G,G");
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	33a4      	adds	r3, #164	; 0xa4
 80181e4:	4a42      	ldr	r2, [pc, #264]	; (80182f0 <problem_fetch+0x16960>)
 80181e6:	461c      	mov	r4, r3
 80181e8:	4613      	mov	r3, r2
 80181ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181ec:	6020      	str	r0, [r4, #0]
 80181ee:	6061      	str	r1, [r4, #4]
 80181f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,6,9,13,4,17");
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	3304      	adds	r3, #4
 80181f6:	4a3f      	ldr	r2, [pc, #252]	; (80182f4 <problem_fetch+0x16964>)
 80181f8:	461c      	mov	r4, r3
 80181fa:	4613      	mov	r3, r2
 80181fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181fe:	6020      	str	r0, [r4, #0]
 8018200:	6061      	str	r1, [r4, #4]
 8018202:	60a2      	str	r2, [r4, #8]
 8018204:	881a      	ldrh	r2, [r3, #0]
 8018206:	789b      	ldrb	r3, [r3, #2]
 8018208:	81a2      	strh	r2, [r4, #12]
 801820a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,s,d,d,s,d");
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018212:	4a39      	ldr	r2, [pc, #228]	; (80182f8 <problem_fetch+0x16968>)
 8018214:	461c      	mov	r4, r3
 8018216:	4613      	mov	r3, r2
 8018218:	cb07      	ldmia	r3!, {r0, r1, r2}
 801821a:	6020      	str	r0, [r4, #0]
 801821c:	6061      	str	r1, [r4, #4]
 801821e:	60a2      	str	r2, [r4, #8]
			break;
 8018220:	f004 bae6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 671 :
			strcpy(p->name,"ROCK N LOCK");
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801822a:	4a34      	ldr	r2, [pc, #208]	; (80182fc <problem_fetch+0x1696c>)
 801822c:	461c      	mov	r4, r3
 801822e:	4613      	mov	r3, r2
 8018230:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018232:	6020      	str	r0, [r4, #0]
 8018234:	6061      	str	r1, [r4, #4]
 8018236:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801823e:	4a14      	ldr	r2, [pc, #80]	; (8018290 <problem_fetch+0x16900>)
 8018240:	8811      	ldrh	r1, [r2, #0]
 8018242:	7892      	ldrb	r2, [r2, #2]
 8018244:	8019      	strh	r1, [r3, #0]
 8018246:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2206      	movs	r2, #6
 801824c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,I,G,I");
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	33a4      	adds	r3, #164	; 0xa4
 8018252:	4a2b      	ldr	r2, [pc, #172]	; (8018300 <problem_fetch+0x16970>)
 8018254:	461c      	mov	r4, r3
 8018256:	4613      	mov	r3, r2
 8018258:	cb07      	ldmia	r3!, {r0, r1, r2}
 801825a:	6020      	str	r0, [r4, #0]
 801825c:	6061      	str	r1, [r4, #4]
 801825e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	3304      	adds	r3, #4
 8018264:	4a27      	ldr	r2, [pc, #156]	; (8018304 <problem_fetch+0x16974>)
 8018266:	461c      	mov	r4, r3
 8018268:	4615      	mov	r5, r2
 801826a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801826c:	6020      	str	r0, [r4, #0]
 801826e:	6061      	str	r1, [r4, #4]
 8018270:	60a2      	str	r2, [r4, #8]
 8018272:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801827a:	4a1a      	ldr	r2, [pc, #104]	; (80182e4 <problem_fetch+0x16954>)
 801827c:	461c      	mov	r4, r3
 801827e:	4613      	mov	r3, r2
 8018280:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018282:	6020      	str	r0, [r4, #0]
 8018284:	6061      	str	r1, [r4, #4]
 8018286:	60a2      	str	r2, [r4, #8]
			break;
 8018288:	f004 bab2 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801828c:	0802b928 	.word	0x0802b928
 8018290:	08023c5c 	.word	0x08023c5c
 8018294:	0802b930 	.word	0x0802b930
 8018298:	0802b940 	.word	0x0802b940
 801829c:	08023cb4 	.word	0x08023cb4
 80182a0:	0802b958 	.word	0x0802b958
 80182a4:	08023b50 	.word	0x08023b50
 80182a8:	0802b960 	.word	0x0802b960
 80182ac:	0802b970 	.word	0x0802b970
 80182b0:	08023d18 	.word	0x08023d18
 80182b4:	0802b984 	.word	0x0802b984
 80182b8:	08023b90 	.word	0x08023b90
 80182bc:	0802b990 	.word	0x0802b990
 80182c0:	0802b9a0 	.word	0x0802b9a0
 80182c4:	0802b9b8 	.word	0x0802b9b8
 80182c8:	0802b9bc 	.word	0x0802b9bc
 80182cc:	0802b9d0 	.word	0x0802b9d0
 80182d0:	08024b74 	.word	0x08024b74
 80182d4:	0802b9e8 	.word	0x0802b9e8
 80182d8:	08023ccc 	.word	0x08023ccc
 80182dc:	0802b9fc 	.word	0x0802b9fc
 80182e0:	0802ba08 	.word	0x0802ba08
 80182e4:	08023f2c 	.word	0x08023f2c
 80182e8:	0802ba1c 	.word	0x0802ba1c
 80182ec:	080243c4 	.word	0x080243c4
 80182f0:	0802ba2c 	.word	0x0802ba2c
 80182f4:	0802ba38 	.word	0x0802ba38
 80182f8:	0802ba48 	.word	0x0802ba48
 80182fc:	0802ba54 	.word	0x0802ba54
 8018300:	0802ba60 	.word	0x0802ba60
 8018304:	0802b588 	.word	0x0802b588
		case 672 :
			strcpy(p->name,"CRAYON PONYFISH");
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801830e:	4aab      	ldr	r2, [pc, #684]	; (80185bc <problem_fetch+0x16c2c>)
 8018310:	461c      	mov	r4, r3
 8018312:	4615      	mov	r5, r2
 8018314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018316:	6020      	str	r0, [r4, #0]
 8018318:	6061      	str	r1, [r4, #4]
 801831a:	60a2      	str	r2, [r4, #8]
 801831c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018324:	4aa6      	ldr	r2, [pc, #664]	; (80185c0 <problem_fetch+0x16c30>)
 8018326:	6810      	ldr	r0, [r2, #0]
 8018328:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	2205      	movs	r2, #5
 801832e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,D");
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	33a4      	adds	r3, #164	; 0xa4
 8018334:	49a3      	ldr	r1, [pc, #652]	; (80185c4 <problem_fetch+0x16c34>)
 8018336:	461a      	mov	r2, r3
 8018338:	460b      	mov	r3, r1
 801833a:	cb03      	ldmia	r3!, {r0, r1}
 801833c:	6010      	str	r0, [r2, #0]
 801833e:	6051      	str	r1, [r2, #4]
 8018340:	881b      	ldrh	r3, [r3, #0]
 8018342:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	3304      	adds	r3, #4
 8018348:	4a9f      	ldr	r2, [pc, #636]	; (80185c8 <problem_fetch+0x16c38>)
 801834a:	461c      	mov	r4, r3
 801834c:	4613      	mov	r3, r2
 801834e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018350:	6020      	str	r0, [r4, #0]
 8018352:	6061      	str	r1, [r4, #4]
 8018354:	60a2      	str	r2, [r4, #8]
 8018356:	881b      	ldrh	r3, [r3, #0]
 8018358:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018360:	499a      	ldr	r1, [pc, #616]	; (80185cc <problem_fetch+0x16c3c>)
 8018362:	461a      	mov	r2, r3
 8018364:	460b      	mov	r3, r1
 8018366:	cb03      	ldmia	r3!, {r0, r1}
 8018368:	6010      	str	r0, [r2, #0]
 801836a:	6051      	str	r1, [r2, #4]
 801836c:	881b      	ldrh	r3, [r3, #0]
 801836e:	8113      	strh	r3, [r2, #8]
			break;
 8018370:	f004 ba3e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 673 :
			strcpy(p->name,"JAGUAR SHARK");
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801837a:	4a95      	ldr	r2, [pc, #596]	; (80185d0 <problem_fetch+0x16c40>)
 801837c:	461c      	mov	r4, r3
 801837e:	4613      	mov	r3, r2
 8018380:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018382:	6020      	str	r0, [r4, #0]
 8018384:	6061      	str	r1, [r4, #4]
 8018386:	60a2      	str	r2, [r4, #8]
 8018388:	781b      	ldrb	r3, [r3, #0]
 801838a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018392:	4a8b      	ldr	r2, [pc, #556]	; (80185c0 <problem_fetch+0x16c30>)
 8018394:	6810      	ldr	r0, [r2, #0]
 8018396:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	2207      	movs	r2, #7
 801839c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,D,E,I");
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	33a4      	adds	r3, #164	; 0xa4
 80183a2:	4a8c      	ldr	r2, [pc, #560]	; (80185d4 <problem_fetch+0x16c44>)
 80183a4:	461c      	mov	r4, r3
 80183a6:	4613      	mov	r3, r2
 80183a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183aa:	6020      	str	r0, [r4, #0]
 80183ac:	6061      	str	r1, [r4, #4]
 80183ae:	60a2      	str	r2, [r4, #8]
 80183b0:	881b      	ldrh	r3, [r3, #0]
 80183b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,12,13,15,16,18");
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	3304      	adds	r3, #4
 80183b8:	4a87      	ldr	r2, [pc, #540]	; (80185d8 <problem_fetch+0x16c48>)
 80183ba:	461d      	mov	r5, r3
 80183bc:	4614      	mov	r4, r2
 80183be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80183c0:	6028      	str	r0, [r5, #0]
 80183c2:	6069      	str	r1, [r5, #4]
 80183c4:	60aa      	str	r2, [r5, #8]
 80183c6:	60eb      	str	r3, [r5, #12]
 80183c8:	6820      	ldr	r0, [r4, #0]
 80183ca:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80183d2:	4a82      	ldr	r2, [pc, #520]	; (80185dc <problem_fetch+0x16c4c>)
 80183d4:	461c      	mov	r4, r3
 80183d6:	4613      	mov	r3, r2
 80183d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183da:	6020      	str	r0, [r4, #0]
 80183dc:	6061      	str	r1, [r4, #4]
 80183de:	60a2      	str	r2, [r4, #8]
 80183e0:	881b      	ldrh	r3, [r3, #0]
 80183e2:	81a3      	strh	r3, [r4, #12]
			break;
 80183e4:	f004 ba04 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 674 :
			strcpy(p->name,"CEPPODE...");
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80183ee:	497c      	ldr	r1, [pc, #496]	; (80185e0 <problem_fetch+0x16c50>)
 80183f0:	461a      	mov	r2, r3
 80183f2:	460b      	mov	r3, r1
 80183f4:	cb03      	ldmia	r3!, {r0, r1}
 80183f6:	6010      	str	r0, [r2, #0]
 80183f8:	6051      	str	r1, [r2, #4]
 80183fa:	8819      	ldrh	r1, [r3, #0]
 80183fc:	789b      	ldrb	r3, [r3, #2]
 80183fe:	8111      	strh	r1, [r2, #8]
 8018400:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018408:	4a76      	ldr	r2, [pc, #472]	; (80185e4 <problem_fetch+0x16c54>)
 801840a:	8811      	ldrh	r1, [r2, #0]
 801840c:	7892      	ldrb	r2, [r2, #2]
 801840e:	8019      	strh	r1, [r3, #0]
 8018410:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	2207      	movs	r2, #7
 8018416:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,E,H,D,D");
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	33a4      	adds	r3, #164	; 0xa4
 801841c:	4a72      	ldr	r2, [pc, #456]	; (80185e8 <problem_fetch+0x16c58>)
 801841e:	461c      	mov	r4, r3
 8018420:	4613      	mov	r3, r2
 8018422:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018424:	6020      	str	r0, [r4, #0]
 8018426:	6061      	str	r1, [r4, #4]
 8018428:	60a2      	str	r2, [r4, #8]
 801842a:	881b      	ldrh	r3, [r3, #0]
 801842c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,9,12,15,18");
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	3304      	adds	r3, #4
 8018432:	4a6e      	ldr	r2, [pc, #440]	; (80185ec <problem_fetch+0x16c5c>)
 8018434:	461d      	mov	r5, r3
 8018436:	4614      	mov	r4, r2
 8018438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801843a:	6028      	str	r0, [r5, #0]
 801843c:	6069      	str	r1, [r5, #4]
 801843e:	60aa      	str	r2, [r5, #8]
 8018440:	60eb      	str	r3, [r5, #12]
 8018442:	7823      	ldrb	r3, [r4, #0]
 8018444:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801844c:	4a68      	ldr	r2, [pc, #416]	; (80185f0 <problem_fetch+0x16c60>)
 801844e:	461c      	mov	r4, r3
 8018450:	4613      	mov	r3, r2
 8018452:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018454:	6020      	str	r0, [r4, #0]
 8018456:	6061      	str	r1, [r4, #4]
 8018458:	60a2      	str	r2, [r4, #8]
 801845a:	881b      	ldrh	r3, [r3, #0]
 801845c:	81a3      	strh	r3, [r4, #12]
			break;
 801845e:	f004 b9c7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 675 :
			strcpy(p->name,"NITERÓI 01");
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018468:	4a62      	ldr	r2, [pc, #392]	; (80185f4 <problem_fetch+0x16c64>)
 801846a:	461c      	mov	r4, r3
 801846c:	4613      	mov	r3, r2
 801846e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018470:	6020      	str	r0, [r4, #0]
 8018472:	6061      	str	r1, [r4, #4]
 8018474:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801847c:	4a5e      	ldr	r2, [pc, #376]	; (80185f8 <problem_fetch+0x16c68>)
 801847e:	6810      	ldr	r0, [r2, #0]
 8018480:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2209      	movs	r2, #9
 8018486:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,C,E,D,G,G,I");
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	33a4      	adds	r3, #164	; 0xa4
 801848c:	4a5b      	ldr	r2, [pc, #364]	; (80185fc <problem_fetch+0x16c6c>)
 801848e:	461d      	mov	r5, r3
 8018490:	4614      	mov	r4, r2
 8018492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018494:	6028      	str	r0, [r5, #0]
 8018496:	6069      	str	r1, [r5, #4]
 8018498:	60aa      	str	r2, [r5, #8]
 801849a:	60eb      	str	r3, [r5, #12]
 801849c:	8823      	ldrh	r3, [r4, #0]
 801849e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,7,8,9,11,14,15,18");
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	3304      	adds	r3, #4
 80184a4:	4a56      	ldr	r2, [pc, #344]	; (8018600 <problem_fetch+0x16c70>)
 80184a6:	461d      	mov	r5, r3
 80184a8:	4614      	mov	r4, r2
 80184aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184ac:	6028      	str	r0, [r5, #0]
 80184ae:	6069      	str	r1, [r5, #4]
 80184b0:	60aa      	str	r2, [r5, #8]
 80184b2:	60eb      	str	r3, [r5, #12]
 80184b4:	6820      	ldr	r0, [r4, #0]
 80184b6:	6128      	str	r0, [r5, #16]
 80184b8:	88a3      	ldrh	r3, [r4, #4]
 80184ba:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80184c2:	4a50      	ldr	r2, [pc, #320]	; (8018604 <problem_fetch+0x16c74>)
 80184c4:	461d      	mov	r5, r3
 80184c6:	4614      	mov	r4, r2
 80184c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184ca:	6028      	str	r0, [r5, #0]
 80184cc:	6069      	str	r1, [r5, #4]
 80184ce:	60aa      	str	r2, [r5, #8]
 80184d0:	60eb      	str	r3, [r5, #12]
 80184d2:	8823      	ldrh	r3, [r4, #0]
 80184d4:	822b      	strh	r3, [r5, #16]
			break;
 80184d6:	f004 b98b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 676 :
			strcpy(p->name,"HAMPUS NEDERLAG");
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80184e0:	4a49      	ldr	r2, [pc, #292]	; (8018608 <problem_fetch+0x16c78>)
 80184e2:	461c      	mov	r4, r3
 80184e4:	4615      	mov	r5, r2
 80184e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184e8:	6020      	str	r0, [r4, #0]
 80184ea:	6061      	str	r1, [r4, #4]
 80184ec:	60a2      	str	r2, [r4, #8]
 80184ee:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80184f6:	4a45      	ldr	r2, [pc, #276]	; (801860c <problem_fetch+0x16c7c>)
 80184f8:	6810      	ldr	r0, [r2, #0]
 80184fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	2207      	movs	r2, #7
 8018500:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,D,E,B,D");
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	33a4      	adds	r3, #164	; 0xa4
 8018506:	4a42      	ldr	r2, [pc, #264]	; (8018610 <problem_fetch+0x16c80>)
 8018508:	461c      	mov	r4, r3
 801850a:	4613      	mov	r3, r2
 801850c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801850e:	6020      	str	r0, [r4, #0]
 8018510:	6061      	str	r1, [r4, #4]
 8018512:	60a2      	str	r2, [r4, #8]
 8018514:	881b      	ldrh	r3, [r3, #0]
 8018516:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,12,15,18");
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	3304      	adds	r3, #4
 801851c:	4a3d      	ldr	r2, [pc, #244]	; (8018614 <problem_fetch+0x16c84>)
 801851e:	461d      	mov	r5, r3
 8018520:	4614      	mov	r4, r2
 8018522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018524:	6028      	str	r0, [r5, #0]
 8018526:	6069      	str	r1, [r5, #4]
 8018528:	60aa      	str	r2, [r5, #8]
 801852a:	60eb      	str	r3, [r5, #12]
 801852c:	8823      	ldrh	r3, [r4, #0]
 801852e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018536:	4a2e      	ldr	r2, [pc, #184]	; (80185f0 <problem_fetch+0x16c60>)
 8018538:	461c      	mov	r4, r3
 801853a:	4613      	mov	r3, r2
 801853c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801853e:	6020      	str	r0, [r4, #0]
 8018540:	6061      	str	r1, [r4, #4]
 8018542:	60a2      	str	r2, [r4, #8]
 8018544:	881b      	ldrh	r3, [r3, #0]
 8018546:	81a3      	strh	r3, [r4, #12]
			break;
 8018548:	f004 b952 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 677 :
			strcpy(p->name,"GRAYLING");
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018552:	4931      	ldr	r1, [pc, #196]	; (8018618 <problem_fetch+0x16c88>)
 8018554:	461a      	mov	r2, r3
 8018556:	460b      	mov	r3, r1
 8018558:	cb03      	ldmia	r3!, {r0, r1}
 801855a:	6010      	str	r0, [r2, #0]
 801855c:	6051      	str	r1, [r2, #4]
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018568:	4a23      	ldr	r2, [pc, #140]	; (80185f8 <problem_fetch+0x16c68>)
 801856a:	6810      	ldr	r0, [r2, #0]
 801856c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	2208      	movs	r2, #8
 8018572:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,F,E,D,D");
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	33a4      	adds	r3, #164	; 0xa4
 8018578:	4a28      	ldr	r2, [pc, #160]	; (801861c <problem_fetch+0x16c8c>)
 801857a:	461c      	mov	r4, r3
 801857c:	4615      	mov	r5, r2
 801857e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018580:	6020      	str	r0, [r4, #0]
 8018582:	6061      	str	r1, [r4, #4]
 8018584:	60a2      	str	r2, [r4, #8]
 8018586:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,9,11,12,15,18");
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	3304      	adds	r3, #4
 801858c:	4a24      	ldr	r2, [pc, #144]	; (8018620 <problem_fetch+0x16c90>)
 801858e:	461d      	mov	r5, r3
 8018590:	4614      	mov	r4, r2
 8018592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018594:	6028      	str	r0, [r5, #0]
 8018596:	6069      	str	r1, [r5, #4]
 8018598:	60aa      	str	r2, [r5, #8]
 801859a:	60eb      	str	r3, [r5, #12]
 801859c:	6820      	ldr	r0, [r4, #0]
 801859e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80185a6:	4a1f      	ldr	r2, [pc, #124]	; (8018624 <problem_fetch+0x16c94>)
 80185a8:	461c      	mov	r4, r3
 80185aa:	4615      	mov	r5, r2
 80185ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185ae:	6020      	str	r0, [r4, #0]
 80185b0:	6061      	str	r1, [r4, #4]
 80185b2:	60a2      	str	r2, [r4, #8]
 80185b4:	60e3      	str	r3, [r4, #12]
			break;
 80185b6:	f004 b91b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80185ba:	bf00      	nop
 80185bc:	0802ba6c 	.word	0x0802ba6c
 80185c0:	08023d30 	.word	0x08023d30
 80185c4:	0802ba7c 	.word	0x0802ba7c
 80185c8:	08027990 	.word	0x08027990
 80185cc:	0802405c 	.word	0x0802405c
 80185d0:	0802ba88 	.word	0x0802ba88
 80185d4:	0802ba98 	.word	0x0802ba98
 80185d8:	0802baa8 	.word	0x0802baa8
 80185dc:	08023d18 	.word	0x08023d18
 80185e0:	0802babc 	.word	0x0802babc
 80185e4:	08023b50 	.word	0x08023b50
 80185e8:	0802bac8 	.word	0x0802bac8
 80185ec:	0802bad8 	.word	0x0802bad8
 80185f0:	08023c08 	.word	0x08023c08
 80185f4:	0802baec 	.word	0x0802baec
 80185f8:	08023c28 	.word	0x08023c28
 80185fc:	0802baf8 	.word	0x0802baf8
 8018600:	0802bb0c 	.word	0x0802bb0c
 8018604:	08024b74 	.word	0x08024b74
 8018608:	0802bb24 	.word	0x0802bb24
 801860c:	08023b90 	.word	0x08023b90
 8018610:	0802bb34 	.word	0x0802bb34
 8018614:	0802bb44 	.word	0x0802bb44
 8018618:	0802bb58 	.word	0x0802bb58
 801861c:	0802bb64 	.word	0x0802bb64
 8018620:	0802bb74 	.word	0x0802bb74
 8018624:	08023da0 	.word	0x08023da0
		case 678 :
			strcpy(p->name,"TAMAS DYNOMITE");
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801862e:	4aaa      	ldr	r2, [pc, #680]	; (80188d8 <problem_fetch+0x16f48>)
 8018630:	461c      	mov	r4, r3
 8018632:	4613      	mov	r3, r2
 8018634:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018636:	6020      	str	r0, [r4, #0]
 8018638:	6061      	str	r1, [r4, #4]
 801863a:	60a2      	str	r2, [r4, #8]
 801863c:	881a      	ldrh	r2, [r3, #0]
 801863e:	789b      	ldrb	r3, [r3, #2]
 8018640:	81a2      	strh	r2, [r4, #12]
 8018642:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801864a:	4aa4      	ldr	r2, [pc, #656]	; (80188dc <problem_fetch+0x16f4c>)
 801864c:	8811      	ldrh	r1, [r2, #0]
 801864e:	7892      	ldrb	r2, [r2, #2]
 8018650:	8019      	strh	r1, [r3, #0]
 8018652:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	2206      	movs	r2, #6
 8018658:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,D");
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	33a4      	adds	r3, #164	; 0xa4
 801865e:	4aa0      	ldr	r2, [pc, #640]	; (80188e0 <problem_fetch+0x16f50>)
 8018660:	461c      	mov	r4, r3
 8018662:	4613      	mov	r3, r2
 8018664:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018666:	6020      	str	r0, [r4, #0]
 8018668:	6061      	str	r1, [r4, #4]
 801866a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,15,18");
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	3304      	adds	r3, #4
 8018670:	4a9c      	ldr	r2, [pc, #624]	; (80188e4 <problem_fetch+0x16f54>)
 8018672:	461c      	mov	r4, r3
 8018674:	4615      	mov	r5, r2
 8018676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018678:	6020      	str	r0, [r4, #0]
 801867a:	6061      	str	r1, [r4, #4]
 801867c:	60a2      	str	r2, [r4, #8]
 801867e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018686:	4a98      	ldr	r2, [pc, #608]	; (80188e8 <problem_fetch+0x16f58>)
 8018688:	461c      	mov	r4, r3
 801868a:	4613      	mov	r3, r2
 801868c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801868e:	6020      	str	r0, [r4, #0]
 8018690:	6061      	str	r1, [r4, #4]
 8018692:	60a2      	str	r2, [r4, #8]
			break;
 8018694:	f004 b8ac 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 679 :
			strcpy(p->name,"SCHWERE LEITER");
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801869e:	4a93      	ldr	r2, [pc, #588]	; (80188ec <problem_fetch+0x16f5c>)
 80186a0:	461c      	mov	r4, r3
 80186a2:	4613      	mov	r3, r2
 80186a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186a6:	6020      	str	r0, [r4, #0]
 80186a8:	6061      	str	r1, [r4, #4]
 80186aa:	60a2      	str	r2, [r4, #8]
 80186ac:	881a      	ldrh	r2, [r3, #0]
 80186ae:	789b      	ldrb	r3, [r3, #2]
 80186b0:	81a2      	strh	r2, [r4, #12]
 80186b2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80186ba:	4a8d      	ldr	r2, [pc, #564]	; (80188f0 <problem_fetch+0x16f60>)
 80186bc:	8811      	ldrh	r1, [r2, #0]
 80186be:	7892      	ldrb	r2, [r2, #2]
 80186c0:	8019      	strh	r1, [r3, #0]
 80186c2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	2207      	movs	r2, #7
 80186c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,E,E,E,D");
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	33a4      	adds	r3, #164	; 0xa4
 80186ce:	4a89      	ldr	r2, [pc, #548]	; (80188f4 <problem_fetch+0x16f64>)
 80186d0:	461c      	mov	r4, r3
 80186d2:	4613      	mov	r3, r2
 80186d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80186d6:	6020      	str	r0, [r4, #0]
 80186d8:	6061      	str	r1, [r4, #4]
 80186da:	60a2      	str	r2, [r4, #8]
 80186dc:	881b      	ldrh	r3, [r3, #0]
 80186de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,12,14,16,18");
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	3304      	adds	r3, #4
 80186e4:	4a84      	ldr	r2, [pc, #528]	; (80188f8 <problem_fetch+0x16f68>)
 80186e6:	461d      	mov	r5, r3
 80186e8:	4614      	mov	r4, r2
 80186ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186ec:	6028      	str	r0, [r5, #0]
 80186ee:	6069      	str	r1, [r5, #4]
 80186f0:	60aa      	str	r2, [r5, #8]
 80186f2:	60eb      	str	r3, [r5, #12]
 80186f4:	8823      	ldrh	r3, [r4, #0]
 80186f6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80186fe:	4a7f      	ldr	r2, [pc, #508]	; (80188fc <problem_fetch+0x16f6c>)
 8018700:	461c      	mov	r4, r3
 8018702:	4613      	mov	r3, r2
 8018704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018706:	6020      	str	r0, [r4, #0]
 8018708:	6061      	str	r1, [r4, #4]
 801870a:	60a2      	str	r2, [r4, #8]
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	81a3      	strh	r3, [r4, #12]
			break;
 8018710:	f004 b86e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 680 :
			strcpy(p->name,"MARK'S FAVORITE PROBLEM");
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801871a:	4a79      	ldr	r2, [pc, #484]	; (8018900 <problem_fetch+0x16f70>)
 801871c:	461d      	mov	r5, r3
 801871e:	4614      	mov	r4, r2
 8018720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018722:	6028      	str	r0, [r5, #0]
 8018724:	6069      	str	r1, [r5, #4]
 8018726:	60aa      	str	r2, [r5, #8]
 8018728:	60eb      	str	r3, [r5, #12]
 801872a:	cc03      	ldmia	r4!, {r0, r1}
 801872c:	6128      	str	r0, [r5, #16]
 801872e:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018736:	4a73      	ldr	r2, [pc, #460]	; (8018904 <problem_fetch+0x16f74>)
 8018738:	8811      	ldrh	r1, [r2, #0]
 801873a:	7892      	ldrb	r2, [r2, #2]
 801873c:	8019      	strh	r1, [r3, #0]
 801873e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	2207      	movs	r2, #7
 8018744:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,F,F,G");
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	33a4      	adds	r3, #164	; 0xa4
 801874a:	4a6f      	ldr	r2, [pc, #444]	; (8018908 <problem_fetch+0x16f78>)
 801874c:	461c      	mov	r4, r3
 801874e:	4613      	mov	r3, r2
 8018750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018752:	6020      	str	r0, [r4, #0]
 8018754:	6061      	str	r1, [r4, #4]
 8018756:	60a2      	str	r2, [r4, #8]
 8018758:	881b      	ldrh	r3, [r3, #0]
 801875a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,5,18,6,13,11,15");
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	3304      	adds	r3, #4
 8018760:	4a6a      	ldr	r2, [pc, #424]	; (801890c <problem_fetch+0x16f7c>)
 8018762:	461d      	mov	r5, r3
 8018764:	4614      	mov	r4, r2
 8018766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018768:	6028      	str	r0, [r5, #0]
 801876a:	6069      	str	r1, [r5, #4]
 801876c:	60aa      	str	r2, [r5, #8]
 801876e:	60eb      	str	r3, [r5, #12]
 8018770:	8823      	ldrh	r3, [r4, #0]
 8018772:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,e,s,d,d,d");
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801877a:	4a65      	ldr	r2, [pc, #404]	; (8018910 <problem_fetch+0x16f80>)
 801877c:	461c      	mov	r4, r3
 801877e:	4613      	mov	r3, r2
 8018780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018782:	6020      	str	r0, [r4, #0]
 8018784:	6061      	str	r1, [r4, #4]
 8018786:	60a2      	str	r2, [r4, #8]
 8018788:	881b      	ldrh	r3, [r3, #0]
 801878a:	81a3      	strh	r3, [r4, #12]
			break;
 801878c:	f004 b830 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 681 :
			strcpy(p->name,"SUC");
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018796:	4a5f      	ldr	r2, [pc, #380]	; (8018914 <problem_fetch+0x16f84>)
 8018798:	6810      	ldr	r0, [r2, #0]
 801879a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80187a2:	4a5d      	ldr	r2, [pc, #372]	; (8018918 <problem_fetch+0x16f88>)
 80187a4:	6810      	ldr	r0, [r2, #0]
 80187a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	2206      	movs	r2, #6
 80187ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,B,G,I");
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	33a4      	adds	r3, #164	; 0xa4
 80187b2:	4a5a      	ldr	r2, [pc, #360]	; (801891c <problem_fetch+0x16f8c>)
 80187b4:	461c      	mov	r4, r3
 80187b6:	4613      	mov	r3, r2
 80187b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80187ba:	6020      	str	r0, [r4, #0]
 80187bc:	6061      	str	r1, [r4, #4]
 80187be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,15,17,18");
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	3304      	adds	r3, #4
 80187c4:	4a56      	ldr	r2, [pc, #344]	; (8018920 <problem_fetch+0x16f90>)
 80187c6:	461c      	mov	r4, r3
 80187c8:	4615      	mov	r5, r2
 80187ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187cc:	6020      	str	r0, [r4, #0]
 80187ce:	6061      	str	r1, [r4, #4]
 80187d0:	60a2      	str	r2, [r4, #8]
 80187d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80187da:	4a43      	ldr	r2, [pc, #268]	; (80188e8 <problem_fetch+0x16f58>)
 80187dc:	461c      	mov	r4, r3
 80187de:	4613      	mov	r3, r2
 80187e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80187e2:	6020      	str	r0, [r4, #0]
 80187e4:	6061      	str	r1, [r4, #4]
 80187e6:	60a2      	str	r2, [r4, #8]
			break;
 80187e8:	f004 b802 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 682 :
			strcpy(p->name,"ON OUR HEEL");
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80187f2:	4a4c      	ldr	r2, [pc, #304]	; (8018924 <problem_fetch+0x16f94>)
 80187f4:	461c      	mov	r4, r3
 80187f6:	4613      	mov	r3, r2
 80187f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80187fa:	6020      	str	r0, [r4, #0]
 80187fc:	6061      	str	r1, [r4, #4]
 80187fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018806:	4a35      	ldr	r2, [pc, #212]	; (80188dc <problem_fetch+0x16f4c>)
 8018808:	8811      	ldrh	r1, [r2, #0]
 801880a:	7892      	ldrb	r2, [r2, #2]
 801880c:	8019      	strh	r1, [r3, #0]
 801880e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	2207      	movs	r2, #7
 8018814:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,C,E,D");
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	33a4      	adds	r3, #164	; 0xa4
 801881a:	4a43      	ldr	r2, [pc, #268]	; (8018928 <problem_fetch+0x16f98>)
 801881c:	461c      	mov	r4, r3
 801881e:	4613      	mov	r3, r2
 8018820:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018822:	6020      	str	r0, [r4, #0]
 8018824:	6061      	str	r1, [r4, #4]
 8018826:	60a2      	str	r2, [r4, #8]
 8018828:	881b      	ldrh	r3, [r3, #0]
 801882a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,16,18");
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	3304      	adds	r3, #4
 8018830:	4a3e      	ldr	r2, [pc, #248]	; (801892c <problem_fetch+0x16f9c>)
 8018832:	461d      	mov	r5, r3
 8018834:	4614      	mov	r4, r2
 8018836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018838:	6028      	str	r0, [r5, #0]
 801883a:	6069      	str	r1, [r5, #4]
 801883c:	60aa      	str	r2, [r5, #8]
 801883e:	60eb      	str	r3, [r5, #12]
 8018840:	8823      	ldrh	r3, [r4, #0]
 8018842:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801884a:	4a39      	ldr	r2, [pc, #228]	; (8018930 <problem_fetch+0x16fa0>)
 801884c:	461c      	mov	r4, r3
 801884e:	4613      	mov	r3, r2
 8018850:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018852:	6020      	str	r0, [r4, #0]
 8018854:	6061      	str	r1, [r4, #4]
 8018856:	60a2      	str	r2, [r4, #8]
 8018858:	881b      	ldrh	r3, [r3, #0]
 801885a:	81a3      	strh	r3, [r4, #12]
			break;
 801885c:	f003 bfc8 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 683 :
			strcpy(p->name,"LOUDREIGN");
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018866:	4933      	ldr	r1, [pc, #204]	; (8018934 <problem_fetch+0x16fa4>)
 8018868:	461a      	mov	r2, r3
 801886a:	460b      	mov	r3, r1
 801886c:	cb03      	ldmia	r3!, {r0, r1}
 801886e:	6010      	str	r0, [r2, #0]
 8018870:	6051      	str	r1, [r2, #4]
 8018872:	881b      	ldrh	r3, [r3, #0]
 8018874:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801887c:	4a2e      	ldr	r2, [pc, #184]	; (8018938 <problem_fetch+0x16fa8>)
 801887e:	6810      	ldr	r0, [r2, #0]
 8018880:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	2207      	movs	r2, #7
 8018886:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,J,E,E,A");
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	33a4      	adds	r3, #164	; 0xa4
 801888c:	4a2b      	ldr	r2, [pc, #172]	; (801893c <problem_fetch+0x16fac>)
 801888e:	461c      	mov	r4, r3
 8018890:	4613      	mov	r3, r2
 8018892:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018894:	6020      	str	r0, [r4, #0]
 8018896:	6061      	str	r1, [r4, #4]
 8018898:	60a2      	str	r2, [r4, #8]
 801889a:	881b      	ldrh	r3, [r3, #0]
 801889c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,16,18");
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	3304      	adds	r3, #4
 80188a2:	4a27      	ldr	r2, [pc, #156]	; (8018940 <problem_fetch+0x16fb0>)
 80188a4:	461d      	mov	r5, r3
 80188a6:	4614      	mov	r4, r2
 80188a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188aa:	6028      	str	r0, [r5, #0]
 80188ac:	6069      	str	r1, [r5, #4]
 80188ae:	60aa      	str	r2, [r5, #8]
 80188b0:	60eb      	str	r3, [r5, #12]
 80188b2:	8823      	ldrh	r3, [r4, #0]
 80188b4:	78a2      	ldrb	r2, [r4, #2]
 80188b6:	822b      	strh	r3, [r5, #16]
 80188b8:	4613      	mov	r3, r2
 80188ba:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80188c2:	4a0e      	ldr	r2, [pc, #56]	; (80188fc <problem_fetch+0x16f6c>)
 80188c4:	461c      	mov	r4, r3
 80188c6:	4613      	mov	r3, r2
 80188c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188ca:	6020      	str	r0, [r4, #0]
 80188cc:	6061      	str	r1, [r4, #4]
 80188ce:	60a2      	str	r2, [r4, #8]
 80188d0:	881b      	ldrh	r3, [r3, #0]
 80188d2:	81a3      	strh	r3, [r4, #12]
			break;
 80188d4:	f003 bf8c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80188d8:	0802bb88 	.word	0x0802bb88
 80188dc:	08023c5c 	.word	0x08023c5c
 80188e0:	0802bb98 	.word	0x0802bb98
 80188e4:	0802bba4 	.word	0x0802bba4
 80188e8:	08023b70 	.word	0x08023b70
 80188ec:	0802bbb4 	.word	0x0802bbb4
 80188f0:	08023b50 	.word	0x08023b50
 80188f4:	0802bbc4 	.word	0x0802bbc4
 80188f8:	0802bbd4 	.word	0x0802bbd4
 80188fc:	08023d18 	.word	0x08023d18
 8018900:	0802bbe8 	.word	0x0802bbe8
 8018904:	08024288 	.word	0x08024288
 8018908:	0802bc00 	.word	0x0802bc00
 801890c:	0802bc10 	.word	0x0802bc10
 8018910:	0802bc24 	.word	0x0802bc24
 8018914:	0802bc34 	.word	0x0802bc34
 8018918:	08023d30 	.word	0x08023d30
 801891c:	0802bc38 	.word	0x0802bc38
 8018920:	0802bc44 	.word	0x0802bc44
 8018924:	0802bc54 	.word	0x0802bc54
 8018928:	0802bc60 	.word	0x0802bc60
 801892c:	0802bc70 	.word	0x0802bc70
 8018930:	08023c08 	.word	0x08023c08
 8018934:	0802bc84 	.word	0x0802bc84
 8018938:	08023b90 	.word	0x08023b90
 801893c:	0802bc90 	.word	0x0802bc90
 8018940:	0802bca0 	.word	0x0802bca0
		case 684 :
			strcpy(p->name,"AB4");
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801894a:	4ab8      	ldr	r2, [pc, #736]	; (8018c2c <problem_fetch+0x1729c>)
 801894c:	6810      	ldr	r0, [r2, #0]
 801894e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018956:	4ab6      	ldr	r2, [pc, #728]	; (8018c30 <problem_fetch+0x172a0>)
 8018958:	6810      	ldr	r0, [r2, #0]
 801895a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2209      	movs	r2, #9
 8018960:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,F,I,I,K,I");
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	33a4      	adds	r3, #164	; 0xa4
 8018966:	4ab3      	ldr	r2, [pc, #716]	; (8018c34 <problem_fetch+0x172a4>)
 8018968:	461d      	mov	r5, r3
 801896a:	4614      	mov	r4, r2
 801896c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801896e:	6028      	str	r0, [r5, #0]
 8018970:	6069      	str	r1, [r5, #4]
 8018972:	60aa      	str	r2, [r5, #8]
 8018974:	60eb      	str	r3, [r5, #12]
 8018976:	8823      	ldrh	r3, [r4, #0]
 8018978:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,13,14,15,16,18");
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	3304      	adds	r3, #4
 801897e:	4aae      	ldr	r2, [pc, #696]	; (8018c38 <problem_fetch+0x172a8>)
 8018980:	461d      	mov	r5, r3
 8018982:	4614      	mov	r4, r2
 8018984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018986:	6028      	str	r0, [r5, #0]
 8018988:	6069      	str	r1, [r5, #4]
 801898a:	60aa      	str	r2, [r5, #8]
 801898c:	60eb      	str	r3, [r5, #12]
 801898e:	cc03      	ldmia	r4!, {r0, r1}
 8018990:	6128      	str	r0, [r5, #16]
 8018992:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801899a:	4aa8      	ldr	r2, [pc, #672]	; (8018c3c <problem_fetch+0x172ac>)
 801899c:	461d      	mov	r5, r3
 801899e:	4614      	mov	r4, r2
 80189a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80189a2:	6028      	str	r0, [r5, #0]
 80189a4:	6069      	str	r1, [r5, #4]
 80189a6:	60aa      	str	r2, [r5, #8]
 80189a8:	60eb      	str	r3, [r5, #12]
 80189aa:	8823      	ldrh	r3, [r4, #0]
 80189ac:	822b      	strh	r3, [r5, #16]
			break;
 80189ae:	f003 bf1f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 685 :
			strcpy(p->name,"LACERQUA");
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80189b8:	49a1      	ldr	r1, [pc, #644]	; (8018c40 <problem_fetch+0x172b0>)
 80189ba:	461a      	mov	r2, r3
 80189bc:	460b      	mov	r3, r1
 80189be:	cb03      	ldmia	r3!, {r0, r1}
 80189c0:	6010      	str	r0, [r2, #0]
 80189c2:	6051      	str	r1, [r2, #4]
 80189c4:	781b      	ldrb	r3, [r3, #0]
 80189c6:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80189ce:	4a9d      	ldr	r2, [pc, #628]	; (8018c44 <problem_fetch+0x172b4>)
 80189d0:	6810      	ldr	r0, [r2, #0]
 80189d2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	2205      	movs	r2, #5
 80189d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,G,D");
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	33a4      	adds	r3, #164	; 0xa4
 80189de:	499a      	ldr	r1, [pc, #616]	; (8018c48 <problem_fetch+0x172b8>)
 80189e0:	461a      	mov	r2, r3
 80189e2:	460b      	mov	r3, r1
 80189e4:	cb03      	ldmia	r3!, {r0, r1}
 80189e6:	6010      	str	r0, [r2, #0]
 80189e8:	6051      	str	r1, [r2, #4]
 80189ea:	881b      	ldrh	r3, [r3, #0]
 80189ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,9,14,18");
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	3304      	adds	r3, #4
 80189f2:	4a96      	ldr	r2, [pc, #600]	; (8018c4c <problem_fetch+0x172bc>)
 80189f4:	461c      	mov	r4, r3
 80189f6:	4613      	mov	r3, r2
 80189f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80189fa:	6020      	str	r0, [r4, #0]
 80189fc:	6061      	str	r1, [r4, #4]
 80189fe:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018a06:	4992      	ldr	r1, [pc, #584]	; (8018c50 <problem_fetch+0x172c0>)
 8018a08:	461a      	mov	r2, r3
 8018a0a:	460b      	mov	r3, r1
 8018a0c:	cb03      	ldmia	r3!, {r0, r1}
 8018a0e:	6010      	str	r0, [r2, #0]
 8018a10:	6051      	str	r1, [r2, #4]
 8018a12:	881b      	ldrh	r3, [r3, #0]
 8018a14:	8113      	strh	r3, [r2, #8]
			break;
 8018a16:	f003 beeb 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 686 :
			strcpy(p->name,"ZEUS");
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a20:	4a8c      	ldr	r2, [pc, #560]	; (8018c54 <problem_fetch+0x172c4>)
 8018a22:	6810      	ldr	r0, [r2, #0]
 8018a24:	6018      	str	r0, [r3, #0]
 8018a26:	7912      	ldrb	r2, [r2, #4]
 8018a28:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a30:	4a89      	ldr	r2, [pc, #548]	; (8018c58 <problem_fetch+0x172c8>)
 8018a32:	8811      	ldrh	r1, [r2, #0]
 8018a34:	7892      	ldrb	r2, [r2, #2]
 8018a36:	8019      	strh	r1, [r3, #0]
 8018a38:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	2205      	movs	r2, #5
 8018a3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,B,D,D");
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	33a4      	adds	r3, #164	; 0xa4
 8018a44:	4985      	ldr	r1, [pc, #532]	; (8018c5c <problem_fetch+0x172cc>)
 8018a46:	461a      	mov	r2, r3
 8018a48:	460b      	mov	r3, r1
 8018a4a:	cb03      	ldmia	r3!, {r0, r1}
 8018a4c:	6010      	str	r0, [r2, #0]
 8018a4e:	6051      	str	r1, [r2, #4]
 8018a50:	881b      	ldrh	r3, [r3, #0]
 8018a52:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	3304      	adds	r3, #4
 8018a58:	4a81      	ldr	r2, [pc, #516]	; (8018c60 <problem_fetch+0x172d0>)
 8018a5a:	461c      	mov	r4, r3
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a60:	6020      	str	r0, [r4, #0]
 8018a62:	6061      	str	r1, [r4, #4]
 8018a64:	60a2      	str	r2, [r4, #8]
 8018a66:	881b      	ldrh	r3, [r3, #0]
 8018a68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018a70:	4977      	ldr	r1, [pc, #476]	; (8018c50 <problem_fetch+0x172c0>)
 8018a72:	461a      	mov	r2, r3
 8018a74:	460b      	mov	r3, r1
 8018a76:	cb03      	ldmia	r3!, {r0, r1}
 8018a78:	6010      	str	r0, [r2, #0]
 8018a7a:	6051      	str	r1, [r2, #4]
 8018a7c:	881b      	ldrh	r3, [r3, #0]
 8018a7e:	8113      	strh	r3, [r2, #8]
			break;
 8018a80:	f003 beb6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 687 :
			strcpy(p->name,"AB3");
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a8a:	4a76      	ldr	r2, [pc, #472]	; (8018c64 <problem_fetch+0x172d4>)
 8018a8c:	6810      	ldr	r0, [r2, #0]
 8018a8e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a96:	4a66      	ldr	r2, [pc, #408]	; (8018c30 <problem_fetch+0x172a0>)
 8018a98:	6810      	ldr	r0, [r2, #0]
 8018a9a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2208      	movs	r2, #8
 8018aa0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,G,E,I");
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	33a4      	adds	r3, #164	; 0xa4
 8018aa6:	4a70      	ldr	r2, [pc, #448]	; (8018c68 <problem_fetch+0x172d8>)
 8018aa8:	461c      	mov	r4, r3
 8018aaa:	4615      	mov	r5, r2
 8018aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018aae:	6020      	str	r0, [r4, #0]
 8018ab0:	6061      	str	r1, [r4, #4]
 8018ab2:	60a2      	str	r2, [r4, #8]
 8018ab4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,16,18");
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	3304      	adds	r3, #4
 8018aba:	4a6c      	ldr	r2, [pc, #432]	; (8018c6c <problem_fetch+0x172dc>)
 8018abc:	461d      	mov	r5, r3
 8018abe:	4614      	mov	r4, r2
 8018ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ac2:	6028      	str	r0, [r5, #0]
 8018ac4:	6069      	str	r1, [r5, #4]
 8018ac6:	60aa      	str	r2, [r5, #8]
 8018ac8:	60eb      	str	r3, [r5, #12]
 8018aca:	6820      	ldr	r0, [r4, #0]
 8018acc:	6128      	str	r0, [r5, #16]
 8018ace:	7923      	ldrb	r3, [r4, #4]
 8018ad0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018ad8:	4a65      	ldr	r2, [pc, #404]	; (8018c70 <problem_fetch+0x172e0>)
 8018ada:	461c      	mov	r4, r3
 8018adc:	4615      	mov	r5, r2
 8018ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ae0:	6020      	str	r0, [r4, #0]
 8018ae2:	6061      	str	r1, [r4, #4]
 8018ae4:	60a2      	str	r2, [r4, #8]
 8018ae6:	60e3      	str	r3, [r4, #12]
			break;
 8018ae8:	f003 be82 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 688 :
			strcpy(p->name,"SAREVOK");
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018af2:	4960      	ldr	r1, [pc, #384]	; (8018c74 <problem_fetch+0x172e4>)
 8018af4:	461a      	mov	r2, r3
 8018af6:	460b      	mov	r3, r1
 8018af8:	cb03      	ldmia	r3!, {r0, r1}
 8018afa:	6010      	str	r0, [r2, #0]
 8018afc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b04:	4a5c      	ldr	r2, [pc, #368]	; (8018c78 <problem_fetch+0x172e8>)
 8018b06:	8811      	ldrh	r1, [r2, #0]
 8018b08:	7892      	ldrb	r2, [r2, #2]
 8018b0a:	8019      	strh	r1, [r3, #0]
 8018b0c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2205      	movs	r2, #5
 8018b12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	33a4      	adds	r3, #164	; 0xa4
 8018b18:	4958      	ldr	r1, [pc, #352]	; (8018c7c <problem_fetch+0x172ec>)
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	cb03      	ldmia	r3!, {r0, r1}
 8018b20:	6010      	str	r0, [r2, #0]
 8018b22:	6051      	str	r1, [r2, #4]
 8018b24:	881b      	ldrh	r3, [r3, #0]
 8018b26:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	3304      	adds	r3, #4
 8018b2c:	4a54      	ldr	r2, [pc, #336]	; (8018c80 <problem_fetch+0x172f0>)
 8018b2e:	461c      	mov	r4, r3
 8018b30:	4613      	mov	r3, r2
 8018b32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b34:	6020      	str	r0, [r4, #0]
 8018b36:	6061      	str	r1, [r4, #4]
 8018b38:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018b40:	4943      	ldr	r1, [pc, #268]	; (8018c50 <problem_fetch+0x172c0>)
 8018b42:	461a      	mov	r2, r3
 8018b44:	460b      	mov	r3, r1
 8018b46:	cb03      	ldmia	r3!, {r0, r1}
 8018b48:	6010      	str	r0, [r2, #0]
 8018b4a:	6051      	str	r1, [r2, #4]
 8018b4c:	881b      	ldrh	r3, [r3, #0]
 8018b4e:	8113      	strh	r3, [r2, #8]
			break;
 8018b50:	f003 be4e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 689 :
			strcpy(p->name,"KEEP IT TIGHT, YO");
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018b5a:	4a4a      	ldr	r2, [pc, #296]	; (8018c84 <problem_fetch+0x172f4>)
 8018b5c:	461d      	mov	r5, r3
 8018b5e:	4614      	mov	r4, r2
 8018b60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b62:	6028      	str	r0, [r5, #0]
 8018b64:	6069      	str	r1, [r5, #4]
 8018b66:	60aa      	str	r2, [r5, #8]
 8018b68:	60eb      	str	r3, [r5, #12]
 8018b6a:	8823      	ldrh	r3, [r4, #0]
 8018b6c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b74:	4a44      	ldr	r2, [pc, #272]	; (8018c88 <problem_fetch+0x172f8>)
 8018b76:	6810      	ldr	r0, [r2, #0]
 8018b78:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	2206      	movs	r2, #6
 8018b7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,G,D");
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	33a4      	adds	r3, #164	; 0xa4
 8018b84:	4a41      	ldr	r2, [pc, #260]	; (8018c8c <problem_fetch+0x172fc>)
 8018b86:	461c      	mov	r4, r3
 8018b88:	4613      	mov	r3, r2
 8018b8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b8c:	6020      	str	r0, [r4, #0]
 8018b8e:	6061      	str	r1, [r4, #4]
 8018b90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	3304      	adds	r3, #4
 8018b96:	4a3e      	ldr	r2, [pc, #248]	; (8018c90 <problem_fetch+0x17300>)
 8018b98:	461c      	mov	r4, r3
 8018b9a:	4615      	mov	r5, r2
 8018b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018b9e:	6020      	str	r0, [r4, #0]
 8018ba0:	6061      	str	r1, [r4, #4]
 8018ba2:	60a2      	str	r2, [r4, #8]
 8018ba4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018bac:	4a39      	ldr	r2, [pc, #228]	; (8018c94 <problem_fetch+0x17304>)
 8018bae:	461c      	mov	r4, r3
 8018bb0:	4613      	mov	r3, r2
 8018bb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018bb4:	6020      	str	r0, [r4, #0]
 8018bb6:	6061      	str	r1, [r4, #4]
 8018bb8:	60a2      	str	r2, [r4, #8]
			break;
 8018bba:	f003 be19 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 690 :
			strcpy(p->name,"ACG49");
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018bc4:	4a34      	ldr	r2, [pc, #208]	; (8018c98 <problem_fetch+0x17308>)
 8018bc6:	6810      	ldr	r0, [r2, #0]
 8018bc8:	6018      	str	r0, [r3, #0]
 8018bca:	8892      	ldrh	r2, [r2, #4]
 8018bcc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018bd4:	4a31      	ldr	r2, [pc, #196]	; (8018c9c <problem_fetch+0x1730c>)
 8018bd6:	6810      	ldr	r0, [r2, #0]
 8018bd8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	2208      	movs	r2, #8
 8018bde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,D,E,I,D,B,I");
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	33a4      	adds	r3, #164	; 0xa4
 8018be4:	4a2e      	ldr	r2, [pc, #184]	; (8018ca0 <problem_fetch+0x17310>)
 8018be6:	461c      	mov	r4, r3
 8018be8:	4615      	mov	r5, r2
 8018bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bec:	6020      	str	r0, [r4, #0]
 8018bee:	6061      	str	r1, [r4, #4]
 8018bf0:	60a2      	str	r2, [r4, #8]
 8018bf2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,16,10,11,6,18");
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	3304      	adds	r3, #4
 8018bf8:	4a2a      	ldr	r2, [pc, #168]	; (8018ca4 <problem_fetch+0x17314>)
 8018bfa:	461d      	mov	r5, r3
 8018bfc:	4614      	mov	r4, r2
 8018bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c00:	6028      	str	r0, [r5, #0]
 8018c02:	6069      	str	r1, [r5, #4]
 8018c04:	60aa      	str	r2, [r5, #8]
 8018c06:	60eb      	str	r3, [r5, #12]
 8018c08:	6820      	ldr	r0, [r4, #0]
 8018c0a:	6128      	str	r0, [r5, #16]
 8018c0c:	7923      	ldrb	r3, [r4, #4]
 8018c0e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018c16:	4a16      	ldr	r2, [pc, #88]	; (8018c70 <problem_fetch+0x172e0>)
 8018c18:	461c      	mov	r4, r3
 8018c1a:	4615      	mov	r5, r2
 8018c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c1e:	6020      	str	r0, [r4, #0]
 8018c20:	6061      	str	r1, [r4, #4]
 8018c22:	60a2      	str	r2, [r4, #8]
 8018c24:	60e3      	str	r3, [r4, #12]
			break;
 8018c26:	f003 bde3 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8018c2a:	bf00      	nop
 8018c2c:	0802bcb4 	.word	0x0802bcb4
 8018c30:	08023b90 	.word	0x08023b90
 8018c34:	0802bcb8 	.word	0x0802bcb8
 8018c38:	0802bccc 	.word	0x0802bccc
 8018c3c:	08024b74 	.word	0x08024b74
 8018c40:	0802bce4 	.word	0x0802bce4
 8018c44:	08023ccc 	.word	0x08023ccc
 8018c48:	0802bcf0 	.word	0x0802bcf0
 8018c4c:	0802bcfc 	.word	0x0802bcfc
 8018c50:	0802405c 	.word	0x0802405c
 8018c54:	0802bd08 	.word	0x0802bd08
 8018c58:	08023c5c 	.word	0x08023c5c
 8018c5c:	0802bd10 	.word	0x0802bd10
 8018c60:	080286c8 	.word	0x080286c8
 8018c64:	0802bd1c 	.word	0x0802bd1c
 8018c68:	0802bd20 	.word	0x0802bd20
 8018c6c:	0802bd30 	.word	0x0802bd30
 8018c70:	08023cb4 	.word	0x08023cb4
 8018c74:	0802bd48 	.word	0x0802bd48
 8018c78:	080243c4 	.word	0x080243c4
 8018c7c:	080276ac 	.word	0x080276ac
 8018c80:	08029910 	.word	0x08029910
 8018c84:	0802bd50 	.word	0x0802bd50
 8018c88:	08023d30 	.word	0x08023d30
 8018c8c:	0802bd64 	.word	0x0802bd64
 8018c90:	08027d44 	.word	0x08027d44
 8018c94:	08023f2c 	.word	0x08023f2c
 8018c98:	0802bd70 	.word	0x0802bd70
 8018c9c:	08023c28 	.word	0x08023c28
 8018ca0:	0802bd78 	.word	0x0802bd78
 8018ca4:	0802bd88 	.word	0x0802bd88
		case 691 :
			strcpy(p->name,"FUNKED JAM");
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018cae:	49ae      	ldr	r1, [pc, #696]	; (8018f68 <problem_fetch+0x175d8>)
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	cb03      	ldmia	r3!, {r0, r1}
 8018cb6:	6010      	str	r0, [r2, #0]
 8018cb8:	6051      	str	r1, [r2, #4]
 8018cba:	8819      	ldrh	r1, [r3, #0]
 8018cbc:	789b      	ldrb	r3, [r3, #2]
 8018cbe:	8111      	strh	r1, [r2, #8]
 8018cc0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018cc8:	4aa8      	ldr	r2, [pc, #672]	; (8018f6c <problem_fetch+0x175dc>)
 8018cca:	8811      	ldrh	r1, [r2, #0]
 8018ccc:	7892      	ldrb	r2, [r2, #2]
 8018cce:	8019      	strh	r1, [r3, #0]
 8018cd0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	2208      	movs	r2, #8
 8018cd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,G,H,C,D");
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	33a4      	adds	r3, #164	; 0xa4
 8018cdc:	4aa4      	ldr	r2, [pc, #656]	; (8018f70 <problem_fetch+0x175e0>)
 8018cde:	461c      	mov	r4, r3
 8018ce0:	4615      	mov	r5, r2
 8018ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ce4:	6020      	str	r0, [r4, #0]
 8018ce6:	6061      	str	r1, [r4, #4]
 8018ce8:	60a2      	str	r2, [r4, #8]
 8018cea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,10,10,13,16,18");
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	3304      	adds	r3, #4
 8018cf0:	4aa0      	ldr	r2, [pc, #640]	; (8018f74 <problem_fetch+0x175e4>)
 8018cf2:	461d      	mov	r5, r3
 8018cf4:	4614      	mov	r4, r2
 8018cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cf8:	6028      	str	r0, [r5, #0]
 8018cfa:	6069      	str	r1, [r5, #4]
 8018cfc:	60aa      	str	r2, [r5, #8]
 8018cfe:	60eb      	str	r3, [r5, #12]
 8018d00:	6820      	ldr	r0, [r4, #0]
 8018d02:	6128      	str	r0, [r5, #16]
 8018d04:	7923      	ldrb	r3, [r4, #4]
 8018d06:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018d0e:	4a9a      	ldr	r2, [pc, #616]	; (8018f78 <problem_fetch+0x175e8>)
 8018d10:	461c      	mov	r4, r3
 8018d12:	4615      	mov	r5, r2
 8018d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d16:	6020      	str	r0, [r4, #0]
 8018d18:	6061      	str	r1, [r4, #4]
 8018d1a:	60a2      	str	r2, [r4, #8]
 8018d1c:	60e3      	str	r3, [r4, #12]
			break;
 8018d1e:	f003 bd67 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 692 :
			strcpy(p->name,"SNIFFING DOG");
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d28:	4a94      	ldr	r2, [pc, #592]	; (8018f7c <problem_fetch+0x175ec>)
 8018d2a:	461c      	mov	r4, r3
 8018d2c:	4613      	mov	r3, r2
 8018d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d30:	6020      	str	r0, [r4, #0]
 8018d32:	6061      	str	r1, [r4, #4]
 8018d34:	60a2      	str	r2, [r4, #8]
 8018d36:	781b      	ldrb	r3, [r3, #0]
 8018d38:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018d40:	4a8f      	ldr	r2, [pc, #572]	; (8018f80 <problem_fetch+0x175f0>)
 8018d42:	6810      	ldr	r0, [r2, #0]
 8018d44:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	2207      	movs	r2, #7
 8018d4a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,J,I");
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	33a4      	adds	r3, #164	; 0xa4
 8018d50:	4a8c      	ldr	r2, [pc, #560]	; (8018f84 <problem_fetch+0x175f4>)
 8018d52:	461c      	mov	r4, r3
 8018d54:	4613      	mov	r3, r2
 8018d56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d58:	6020      	str	r0, [r4, #0]
 8018d5a:	6061      	str	r1, [r4, #4]
 8018d5c:	60a2      	str	r2, [r4, #8]
 8018d5e:	881b      	ldrh	r3, [r3, #0]
 8018d60:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	3304      	adds	r3, #4
 8018d66:	4a88      	ldr	r2, [pc, #544]	; (8018f88 <problem_fetch+0x175f8>)
 8018d68:	461d      	mov	r5, r3
 8018d6a:	4614      	mov	r4, r2
 8018d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d6e:	6028      	str	r0, [r5, #0]
 8018d70:	6069      	str	r1, [r5, #4]
 8018d72:	60aa      	str	r2, [r5, #8]
 8018d74:	60eb      	str	r3, [r5, #12]
 8018d76:	8823      	ldrh	r3, [r4, #0]
 8018d78:	78a2      	ldrb	r2, [r4, #2]
 8018d7a:	822b      	strh	r3, [r5, #16]
 8018d7c:	4613      	mov	r3, r2
 8018d7e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018d86:	4a81      	ldr	r2, [pc, #516]	; (8018f8c <problem_fetch+0x175fc>)
 8018d88:	461c      	mov	r4, r3
 8018d8a:	4613      	mov	r3, r2
 8018d8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018d8e:	6020      	str	r0, [r4, #0]
 8018d90:	6061      	str	r1, [r4, #4]
 8018d92:	60a2      	str	r2, [r4, #8]
 8018d94:	881b      	ldrh	r3, [r3, #0]
 8018d96:	81a3      	strh	r3, [r4, #12]
			break;
 8018d98:	f003 bd2a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 693 :
			strcpy(p->name,"ACG48");
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018da2:	4a7b      	ldr	r2, [pc, #492]	; (8018f90 <problem_fetch+0x17600>)
 8018da4:	6810      	ldr	r0, [r2, #0]
 8018da6:	6018      	str	r0, [r3, #0]
 8018da8:	8892      	ldrh	r2, [r2, #4]
 8018daa:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018db2:	4a78      	ldr	r2, [pc, #480]	; (8018f94 <problem_fetch+0x17604>)
 8018db4:	8811      	ldrh	r1, [r2, #0]
 8018db6:	7892      	ldrb	r2, [r2, #2]
 8018db8:	8019      	strh	r1, [r3, #0]
 8018dba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	2207      	movs	r2, #7
 8018dc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,F,B,D,A");
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	33a4      	adds	r3, #164	; 0xa4
 8018dc6:	4a74      	ldr	r2, [pc, #464]	; (8018f98 <problem_fetch+0x17608>)
 8018dc8:	461c      	mov	r4, r3
 8018dca:	4613      	mov	r3, r2
 8018dcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dce:	6020      	str	r0, [r4, #0]
 8018dd0:	6061      	str	r1, [r4, #4]
 8018dd2:	60a2      	str	r2, [r4, #8]
 8018dd4:	881b      	ldrh	r3, [r3, #0]
 8018dd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,11,12,15,18");
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	3304      	adds	r3, #4
 8018ddc:	4a6f      	ldr	r2, [pc, #444]	; (8018f9c <problem_fetch+0x1760c>)
 8018dde:	461d      	mov	r5, r3
 8018de0:	4614      	mov	r4, r2
 8018de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018de4:	6028      	str	r0, [r5, #0]
 8018de6:	6069      	str	r1, [r5, #4]
 8018de8:	60aa      	str	r2, [r5, #8]
 8018dea:	60eb      	str	r3, [r5, #12]
 8018dec:	8823      	ldrh	r3, [r4, #0]
 8018dee:	78a2      	ldrb	r2, [r4, #2]
 8018df0:	822b      	strh	r3, [r5, #16]
 8018df2:	4613      	mov	r3, r2
 8018df4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018dfc:	4a63      	ldr	r2, [pc, #396]	; (8018f8c <problem_fetch+0x175fc>)
 8018dfe:	461c      	mov	r4, r3
 8018e00:	4613      	mov	r3, r2
 8018e02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e04:	6020      	str	r0, [r4, #0]
 8018e06:	6061      	str	r1, [r4, #4]
 8018e08:	60a2      	str	r2, [r4, #8]
 8018e0a:	881b      	ldrh	r3, [r3, #0]
 8018e0c:	81a3      	strh	r3, [r4, #12]
			break;
 8018e0e:	f003 bcef 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 694 :
			strcpy(p->name,"ROCK LOBSTER");
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e18:	4a61      	ldr	r2, [pc, #388]	; (8018fa0 <problem_fetch+0x17610>)
 8018e1a:	461c      	mov	r4, r3
 8018e1c:	4613      	mov	r3, r2
 8018e1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e20:	6020      	str	r0, [r4, #0]
 8018e22:	6061      	str	r1, [r4, #4]
 8018e24:	60a2      	str	r2, [r4, #8]
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e30:	4a5c      	ldr	r2, [pc, #368]	; (8018fa4 <problem_fetch+0x17614>)
 8018e32:	6810      	ldr	r0, [r2, #0]
 8018e34:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2208      	movs	r2, #8
 8018e3a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,E,A,E,I");
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	33a4      	adds	r3, #164	; 0xa4
 8018e40:	4a59      	ldr	r2, [pc, #356]	; (8018fa8 <problem_fetch+0x17618>)
 8018e42:	461c      	mov	r4, r3
 8018e44:	4615      	mov	r5, r2
 8018e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e48:	6020      	str	r0, [r4, #0]
 8018e4a:	6061      	str	r1, [r4, #4]
 8018e4c:	60a2      	str	r2, [r4, #8]
 8018e4e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,16,18");
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3304      	adds	r3, #4
 8018e54:	4a55      	ldr	r2, [pc, #340]	; (8018fac <problem_fetch+0x1761c>)
 8018e56:	461d      	mov	r5, r3
 8018e58:	4614      	mov	r4, r2
 8018e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e5c:	6028      	str	r0, [r5, #0]
 8018e5e:	6069      	str	r1, [r5, #4]
 8018e60:	60aa      	str	r2, [r5, #8]
 8018e62:	60eb      	str	r3, [r5, #12]
 8018e64:	6820      	ldr	r0, [r4, #0]
 8018e66:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018e6e:	4a42      	ldr	r2, [pc, #264]	; (8018f78 <problem_fetch+0x175e8>)
 8018e70:	461c      	mov	r4, r3
 8018e72:	4615      	mov	r5, r2
 8018e74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e76:	6020      	str	r0, [r4, #0]
 8018e78:	6061      	str	r1, [r4, #4]
 8018e7a:	60a2      	str	r2, [r4, #8]
 8018e7c:	60e3      	str	r3, [r4, #12]
			break;
 8018e7e:	f003 bcb7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 695 :
			strcpy(p->name,"UNKNOWN");
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e88:	4949      	ldr	r1, [pc, #292]	; (8018fb0 <problem_fetch+0x17620>)
 8018e8a:	461a      	mov	r2, r3
 8018e8c:	460b      	mov	r3, r1
 8018e8e:	cb03      	ldmia	r3!, {r0, r1}
 8018e90:	6010      	str	r0, [r2, #0]
 8018e92:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e9a:	4a42      	ldr	r2, [pc, #264]	; (8018fa4 <problem_fetch+0x17614>)
 8018e9c:	6810      	ldr	r0, [r2, #0]
 8018e9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2208      	movs	r2, #8
 8018ea4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,J,E,I,D,I");
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	33a4      	adds	r3, #164	; 0xa4
 8018eaa:	4a42      	ldr	r2, [pc, #264]	; (8018fb4 <problem_fetch+0x17624>)
 8018eac:	461c      	mov	r4, r3
 8018eae:	4615      	mov	r5, r2
 8018eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eb2:	6020      	str	r0, [r4, #0]
 8018eb4:	6061      	str	r1, [r4, #4]
 8018eb6:	60a2      	str	r2, [r4, #8]
 8018eb8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,7,12,15,18,18");
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	3304      	adds	r3, #4
 8018ebe:	4a3e      	ldr	r2, [pc, #248]	; (8018fb8 <problem_fetch+0x17628>)
 8018ec0:	461d      	mov	r5, r3
 8018ec2:	4614      	mov	r4, r2
 8018ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ec6:	6028      	str	r0, [r5, #0]
 8018ec8:	6069      	str	r1, [r5, #4]
 8018eca:	60aa      	str	r2, [r5, #8]
 8018ecc:	60eb      	str	r3, [r5, #12]
 8018ece:	6820      	ldr	r0, [r4, #0]
 8018ed0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,e");
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018ed8:	4a38      	ldr	r2, [pc, #224]	; (8018fbc <problem_fetch+0x1762c>)
 8018eda:	461c      	mov	r4, r3
 8018edc:	4615      	mov	r5, r2
 8018ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ee0:	6020      	str	r0, [r4, #0]
 8018ee2:	6061      	str	r1, [r4, #4]
 8018ee4:	60a2      	str	r2, [r4, #8]
 8018ee6:	60e3      	str	r3, [r4, #12]
			break;
 8018ee8:	f003 bc82 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 696 :
			strcpy(p->name,"ACG46");
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018ef2:	4a33      	ldr	r2, [pc, #204]	; (8018fc0 <problem_fetch+0x17630>)
 8018ef4:	6810      	ldr	r0, [r2, #0]
 8018ef6:	6018      	str	r0, [r3, #0]
 8018ef8:	8892      	ldrh	r2, [r2, #4]
 8018efa:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018f02:	4a30      	ldr	r2, [pc, #192]	; (8018fc4 <problem_fetch+0x17634>)
 8018f04:	8811      	ldrh	r1, [r2, #0]
 8018f06:	7892      	ldrb	r2, [r2, #2]
 8018f08:	8019      	strh	r1, [r3, #0]
 8018f0a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	220a      	movs	r2, #10
 8018f10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,B,G,F,I,E,I,D");
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	33a4      	adds	r3, #164	; 0xa4
 8018f16:	4a2c      	ldr	r2, [pc, #176]	; (8018fc8 <problem_fetch+0x17638>)
 8018f18:	461d      	mov	r5, r3
 8018f1a:	4614      	mov	r4, r2
 8018f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f1e:	6028      	str	r0, [r5, #0]
 8018f20:	6069      	str	r1, [r5, #4]
 8018f22:	60aa      	str	r2, [r5, #8]
 8018f24:	60eb      	str	r3, [r5, #12]
 8018f26:	6820      	ldr	r0, [r4, #0]
 8018f28:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,10,10,13,14,16,7,18");
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	3304      	adds	r3, #4
 8018f2e:	4a27      	ldr	r2, [pc, #156]	; (8018fcc <problem_fetch+0x1763c>)
 8018f30:	461d      	mov	r5, r3
 8018f32:	4614      	mov	r4, r2
 8018f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f36:	6028      	str	r0, [r5, #0]
 8018f38:	6069      	str	r1, [r5, #4]
 8018f3a:	60aa      	str	r2, [r5, #8]
 8018f3c:	60eb      	str	r3, [r5, #12]
 8018f3e:	cc03      	ldmia	r4!, {r0, r1}
 8018f40:	6128      	str	r0, [r5, #16]
 8018f42:	6169      	str	r1, [r5, #20]
 8018f44:	8823      	ldrh	r3, [r4, #0]
 8018f46:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018f4e:	4a20      	ldr	r2, [pc, #128]	; (8018fd0 <problem_fetch+0x17640>)
 8018f50:	461d      	mov	r5, r3
 8018f52:	4614      	mov	r4, r2
 8018f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f56:	6028      	str	r0, [r5, #0]
 8018f58:	6069      	str	r1, [r5, #4]
 8018f5a:	60aa      	str	r2, [r5, #8]
 8018f5c:	60eb      	str	r3, [r5, #12]
 8018f5e:	6820      	ldr	r0, [r4, #0]
 8018f60:	6128      	str	r0, [r5, #16]
			break;
 8018f62:	f003 bc45 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8018f66:	bf00      	nop
 8018f68:	0802bda0 	.word	0x0802bda0
 8018f6c:	08025ef4 	.word	0x08025ef4
 8018f70:	0802bdac 	.word	0x0802bdac
 8018f74:	0802bdbc 	.word	0x0802bdbc
 8018f78:	08023cb4 	.word	0x08023cb4
 8018f7c:	0802bdd4 	.word	0x0802bdd4
 8018f80:	08023b90 	.word	0x08023b90
 8018f84:	0802bde4 	.word	0x0802bde4
 8018f88:	0802bdf4 	.word	0x0802bdf4
 8018f8c:	08023d18 	.word	0x08023d18
 8018f90:	0802be08 	.word	0x0802be08
 8018f94:	08023b50 	.word	0x08023b50
 8018f98:	0802be10 	.word	0x0802be10
 8018f9c:	0802be20 	.word	0x0802be20
 8018fa0:	0802be34 	.word	0x0802be34
 8018fa4:	08023c28 	.word	0x08023c28
 8018fa8:	0802be44 	.word	0x0802be44
 8018fac:	0802be54 	.word	0x0802be54
 8018fb0:	0802be68 	.word	0x0802be68
 8018fb4:	0802be70 	.word	0x0802be70
 8018fb8:	0802be80 	.word	0x0802be80
 8018fbc:	0802be94 	.word	0x0802be94
 8018fc0:	0802bea4 	.word	0x0802bea4
 8018fc4:	08023c5c 	.word	0x08023c5c
 8018fc8:	0802beac 	.word	0x0802beac
 8018fcc:	0802bec0 	.word	0x0802bec0
 8018fd0:	08024438 	.word	0x08024438
		case 697 :
			strcpy(p->name,"GS VR #1");
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018fda:	49bf      	ldr	r1, [pc, #764]	; (80192d8 <problem_fetch+0x17948>)
 8018fdc:	461a      	mov	r2, r3
 8018fde:	460b      	mov	r3, r1
 8018fe0:	cb03      	ldmia	r3!, {r0, r1}
 8018fe2:	6010      	str	r0, [r2, #0]
 8018fe4:	6051      	str	r1, [r2, #4]
 8018fe6:	781b      	ldrb	r3, [r3, #0]
 8018fe8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018ff0:	4aba      	ldr	r2, [pc, #744]	; (80192dc <problem_fetch+0x1794c>)
 8018ff2:	6810      	ldr	r0, [r2, #0]
 8018ff4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	2208      	movs	r2, #8
 8018ffa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,E,D");
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	33a4      	adds	r3, #164	; 0xa4
 8019000:	4ab7      	ldr	r2, [pc, #732]	; (80192e0 <problem_fetch+0x17950>)
 8019002:	461c      	mov	r4, r3
 8019004:	4615      	mov	r5, r2
 8019006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019008:	6020      	str	r0, [r4, #0]
 801900a:	6061      	str	r1, [r4, #4]
 801900c:	60a2      	str	r2, [r4, #8]
 801900e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,16,18");
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	3304      	adds	r3, #4
 8019014:	4ab3      	ldr	r2, [pc, #716]	; (80192e4 <problem_fetch+0x17954>)
 8019016:	461d      	mov	r5, r3
 8019018:	4614      	mov	r4, r2
 801901a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801901c:	6028      	str	r0, [r5, #0]
 801901e:	6069      	str	r1, [r5, #4]
 8019020:	60aa      	str	r2, [r5, #8]
 8019022:	60eb      	str	r3, [r5, #12]
 8019024:	6820      	ldr	r0, [r4, #0]
 8019026:	6128      	str	r0, [r5, #16]
 8019028:	7923      	ldrb	r3, [r4, #4]
 801902a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019032:	4aad      	ldr	r2, [pc, #692]	; (80192e8 <problem_fetch+0x17958>)
 8019034:	461c      	mov	r4, r3
 8019036:	4615      	mov	r5, r2
 8019038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801903a:	6020      	str	r0, [r4, #0]
 801903c:	6061      	str	r1, [r4, #4]
 801903e:	60a2      	str	r2, [r4, #8]
 8019040:	60e3      	str	r3, [r4, #12]
			break;
 8019042:	f003 bbd5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 698 :
			strcpy(p->name,"COLPA DEL NONNO");
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801904c:	4aa7      	ldr	r2, [pc, #668]	; (80192ec <problem_fetch+0x1795c>)
 801904e:	461c      	mov	r4, r3
 8019050:	4615      	mov	r5, r2
 8019052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019054:	6020      	str	r0, [r4, #0]
 8019056:	6061      	str	r1, [r4, #4]
 8019058:	60a2      	str	r2, [r4, #8]
 801905a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019062:	4a9e      	ldr	r2, [pc, #632]	; (80192dc <problem_fetch+0x1794c>)
 8019064:	6810      	ldr	r0, [r2, #0]
 8019066:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	2207      	movs	r2, #7
 801906c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	33a4      	adds	r3, #164	; 0xa4
 8019072:	4a9f      	ldr	r2, [pc, #636]	; (80192f0 <problem_fetch+0x17960>)
 8019074:	461c      	mov	r4, r3
 8019076:	4613      	mov	r3, r2
 8019078:	cb07      	ldmia	r3!, {r0, r1, r2}
 801907a:	6020      	str	r0, [r4, #0]
 801907c:	6061      	str	r1, [r4, #4]
 801907e:	60a2      	str	r2, [r4, #8]
 8019080:	881b      	ldrh	r3, [r3, #0]
 8019082:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,14,15,18");
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	3304      	adds	r3, #4
 8019088:	4a9a      	ldr	r2, [pc, #616]	; (80192f4 <problem_fetch+0x17964>)
 801908a:	461d      	mov	r5, r3
 801908c:	4614      	mov	r4, r2
 801908e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019090:	6028      	str	r0, [r5, #0]
 8019092:	6069      	str	r1, [r5, #4]
 8019094:	60aa      	str	r2, [r5, #8]
 8019096:	60eb      	str	r3, [r5, #12]
 8019098:	8823      	ldrh	r3, [r4, #0]
 801909a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80190a2:	4a95      	ldr	r2, [pc, #596]	; (80192f8 <problem_fetch+0x17968>)
 80190a4:	461c      	mov	r4, r3
 80190a6:	4613      	mov	r3, r2
 80190a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190aa:	6020      	str	r0, [r4, #0]
 80190ac:	6061      	str	r1, [r4, #4]
 80190ae:	60a2      	str	r2, [r4, #8]
 80190b0:	881b      	ldrh	r3, [r3, #0]
 80190b2:	81a3      	strh	r3, [r4, #12]
			break;
 80190b4:	f003 bb9c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 699 :
			strcpy(p->name,"LIP GRIP");
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80190be:	498f      	ldr	r1, [pc, #572]	; (80192fc <problem_fetch+0x1796c>)
 80190c0:	461a      	mov	r2, r3
 80190c2:	460b      	mov	r3, r1
 80190c4:	cb03      	ldmia	r3!, {r0, r1}
 80190c6:	6010      	str	r0, [r2, #0]
 80190c8:	6051      	str	r1, [r2, #4]
 80190ca:	781b      	ldrb	r3, [r3, #0]
 80190cc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80190d4:	4a8a      	ldr	r2, [pc, #552]	; (8019300 <problem_fetch+0x17970>)
 80190d6:	6810      	ldr	r0, [r2, #0]
 80190d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2206      	movs	r2, #6
 80190de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,K,I");
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	33a4      	adds	r3, #164	; 0xa4
 80190e4:	4a87      	ldr	r2, [pc, #540]	; (8019304 <problem_fetch+0x17974>)
 80190e6:	461c      	mov	r4, r3
 80190e8:	4613      	mov	r3, r2
 80190ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190ec:	6020      	str	r0, [r4, #0]
 80190ee:	6061      	str	r1, [r4, #4]
 80190f0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,13,14,18");
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	3304      	adds	r3, #4
 80190f6:	4a84      	ldr	r2, [pc, #528]	; (8019308 <problem_fetch+0x17978>)
 80190f8:	461c      	mov	r4, r3
 80190fa:	4613      	mov	r3, r2
 80190fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190fe:	6020      	str	r0, [r4, #0]
 8019100:	6061      	str	r1, [r4, #4]
 8019102:	60a2      	str	r2, [r4, #8]
 8019104:	881a      	ldrh	r2, [r3, #0]
 8019106:	789b      	ldrb	r3, [r3, #2]
 8019108:	81a2      	strh	r2, [r4, #12]
 801910a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019112:	4a7e      	ldr	r2, [pc, #504]	; (801930c <problem_fetch+0x1797c>)
 8019114:	461c      	mov	r4, r3
 8019116:	4613      	mov	r3, r2
 8019118:	cb07      	ldmia	r3!, {r0, r1, r2}
 801911a:	6020      	str	r0, [r4, #0]
 801911c:	6061      	str	r1, [r4, #4]
 801911e:	60a2      	str	r2, [r4, #8]
			break;
 8019120:	f003 bb66 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 700 :
			strcpy(p->name,"ACG43");
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801912a:	4a79      	ldr	r2, [pc, #484]	; (8019310 <problem_fetch+0x17980>)
 801912c:	6810      	ldr	r0, [r2, #0]
 801912e:	6018      	str	r0, [r3, #0]
 8019130:	8892      	ldrh	r2, [r2, #4]
 8019132:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801913a:	4a76      	ldr	r2, [pc, #472]	; (8019314 <problem_fetch+0x17984>)
 801913c:	6810      	ldr	r0, [r2, #0]
 801913e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2208      	movs	r2, #8
 8019144:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,D,E,A,A,B,D");
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	33a4      	adds	r3, #164	; 0xa4
 801914a:	4a73      	ldr	r2, [pc, #460]	; (8019318 <problem_fetch+0x17988>)
 801914c:	461c      	mov	r4, r3
 801914e:	4615      	mov	r5, r2
 8019150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019152:	6020      	str	r0, [r4, #0]
 8019154:	6061      	str	r1, [r4, #4]
 8019156:	60a2      	str	r2, [r4, #8]
 8019158:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,14,14,9,6,18");
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	3304      	adds	r3, #4
 801915e:	4a6f      	ldr	r2, [pc, #444]	; (801931c <problem_fetch+0x1798c>)
 8019160:	461d      	mov	r5, r3
 8019162:	4614      	mov	r4, r2
 8019164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019166:	6028      	str	r0, [r5, #0]
 8019168:	6069      	str	r1, [r5, #4]
 801916a:	60aa      	str	r2, [r5, #8]
 801916c:	60eb      	str	r3, [r5, #12]
 801916e:	6820      	ldr	r0, [r4, #0]
 8019170:	6128      	str	r0, [r5, #16]
 8019172:	7923      	ldrb	r3, [r4, #4]
 8019174:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801917c:	4a68      	ldr	r2, [pc, #416]	; (8019320 <problem_fetch+0x17990>)
 801917e:	461c      	mov	r4, r3
 8019180:	4615      	mov	r5, r2
 8019182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019184:	6020      	str	r0, [r4, #0]
 8019186:	6061      	str	r1, [r4, #4]
 8019188:	60a2      	str	r2, [r4, #8]
 801918a:	60e3      	str	r3, [r4, #12]
			break;
 801918c:	f003 bb30 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 701 :
			strcpy(p->name,"AB1");
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019196:	4a63      	ldr	r2, [pc, #396]	; (8019324 <problem_fetch+0x17994>)
 8019198:	6810      	ldr	r0, [r2, #0]
 801919a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80191a2:	4a4e      	ldr	r2, [pc, #312]	; (80192dc <problem_fetch+0x1794c>)
 80191a4:	6810      	ldr	r0, [r2, #0]
 80191a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	2208      	movs	r2, #8
 80191ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D,A");
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	33a4      	adds	r3, #164	; 0xa4
 80191b2:	4a5d      	ldr	r2, [pc, #372]	; (8019328 <problem_fetch+0x17998>)
 80191b4:	461c      	mov	r4, r3
 80191b6:	4615      	mov	r5, r2
 80191b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191ba:	6020      	str	r0, [r4, #0]
 80191bc:	6061      	str	r1, [r4, #4]
 80191be:	60a2      	str	r2, [r4, #8]
 80191c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,15,18");
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	3304      	adds	r3, #4
 80191c6:	4a59      	ldr	r2, [pc, #356]	; (801932c <problem_fetch+0x1799c>)
 80191c8:	461d      	mov	r5, r3
 80191ca:	4614      	mov	r4, r2
 80191cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191ce:	6028      	str	r0, [r5, #0]
 80191d0:	6069      	str	r1, [r5, #4]
 80191d2:	60aa      	str	r2, [r5, #8]
 80191d4:	60eb      	str	r3, [r5, #12]
 80191d6:	6820      	ldr	r0, [r4, #0]
 80191d8:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80191e0:	4a41      	ldr	r2, [pc, #260]	; (80192e8 <problem_fetch+0x17958>)
 80191e2:	461c      	mov	r4, r3
 80191e4:	4615      	mov	r5, r2
 80191e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80191e8:	6020      	str	r0, [r4, #0]
 80191ea:	6061      	str	r1, [r4, #4]
 80191ec:	60a2      	str	r2, [r4, #8]
 80191ee:	60e3      	str	r3, [r4, #12]
			break;
 80191f0:	f003 bafe 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 702 :
			strcpy(p->name,"CAROLYN");
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80191fa:	494d      	ldr	r1, [pc, #308]	; (8019330 <problem_fetch+0x179a0>)
 80191fc:	461a      	mov	r2, r3
 80191fe:	460b      	mov	r3, r1
 8019200:	cb03      	ldmia	r3!, {r0, r1}
 8019202:	6010      	str	r0, [r2, #0]
 8019204:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801920c:	4a33      	ldr	r2, [pc, #204]	; (80192dc <problem_fetch+0x1794c>)
 801920e:	6810      	ldr	r0, [r2, #0]
 8019210:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2207      	movs	r2, #7
 8019216:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,I,G,I");
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	33a4      	adds	r3, #164	; 0xa4
 801921c:	4a45      	ldr	r2, [pc, #276]	; (8019334 <problem_fetch+0x179a4>)
 801921e:	461c      	mov	r4, r3
 8019220:	4613      	mov	r3, r2
 8019222:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019224:	6020      	str	r0, [r4, #0]
 8019226:	6061      	str	r1, [r4, #4]
 8019228:	60a2      	str	r2, [r4, #8]
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	3304      	adds	r3, #4
 8019232:	4a41      	ldr	r2, [pc, #260]	; (8019338 <problem_fetch+0x179a8>)
 8019234:	461d      	mov	r5, r3
 8019236:	4614      	mov	r4, r2
 8019238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801923a:	6028      	str	r0, [r5, #0]
 801923c:	6069      	str	r1, [r5, #4]
 801923e:	60aa      	str	r2, [r5, #8]
 8019240:	60eb      	str	r3, [r5, #12]
 8019242:	8823      	ldrh	r3, [r4, #0]
 8019244:	78a2      	ldrb	r2, [r4, #2]
 8019246:	822b      	strh	r3, [r5, #16]
 8019248:	4613      	mov	r3, r2
 801924a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019252:	4a3a      	ldr	r2, [pc, #232]	; (801933c <problem_fetch+0x179ac>)
 8019254:	461c      	mov	r4, r3
 8019256:	4613      	mov	r3, r2
 8019258:	cb07      	ldmia	r3!, {r0, r1, r2}
 801925a:	6020      	str	r0, [r4, #0]
 801925c:	6061      	str	r1, [r4, #4]
 801925e:	60a2      	str	r2, [r4, #8]
 8019260:	881b      	ldrh	r3, [r3, #0]
 8019262:	81a3      	strh	r3, [r4, #12]
			break;
 8019264:	f003 bac4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 703 :
			strcpy(p->name,"ACG37");
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801926e:	4a34      	ldr	r2, [pc, #208]	; (8019340 <problem_fetch+0x179b0>)
 8019270:	6810      	ldr	r0, [r2, #0]
 8019272:	6018      	str	r0, [r3, #0]
 8019274:	8892      	ldrh	r2, [r2, #4]
 8019276:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801927e:	4a31      	ldr	r2, [pc, #196]	; (8019344 <problem_fetch+0x179b4>)
 8019280:	8811      	ldrh	r1, [r2, #0]
 8019282:	7892      	ldrb	r2, [r2, #2]
 8019284:	8019      	strh	r1, [r3, #0]
 8019286:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	2208      	movs	r2, #8
 801928c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,C,C,A");
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	33a4      	adds	r3, #164	; 0xa4
 8019292:	4a2d      	ldr	r2, [pc, #180]	; (8019348 <problem_fetch+0x179b8>)
 8019294:	461c      	mov	r4, r3
 8019296:	4615      	mov	r5, r2
 8019298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801929a:	6020      	str	r0, [r4, #0]
 801929c:	6061      	str	r1, [r4, #4]
 801929e:	60a2      	str	r2, [r4, #8]
 80192a0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,14,16,13,18");
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	3304      	adds	r3, #4
 80192a6:	4a29      	ldr	r2, [pc, #164]	; (801934c <problem_fetch+0x179bc>)
 80192a8:	461d      	mov	r5, r3
 80192aa:	4614      	mov	r4, r2
 80192ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192ae:	6028      	str	r0, [r5, #0]
 80192b0:	6069      	str	r1, [r5, #4]
 80192b2:	60aa      	str	r2, [r5, #8]
 80192b4:	60eb      	str	r3, [r5, #12]
 80192b6:	6820      	ldr	r0, [r4, #0]
 80192b8:	6128      	str	r0, [r5, #16]
 80192ba:	88a3      	ldrh	r3, [r4, #4]
 80192bc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80192c4:	4a16      	ldr	r2, [pc, #88]	; (8019320 <problem_fetch+0x17990>)
 80192c6:	461c      	mov	r4, r3
 80192c8:	4615      	mov	r5, r2
 80192ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80192cc:	6020      	str	r0, [r4, #0]
 80192ce:	6061      	str	r1, [r4, #4]
 80192d0:	60a2      	str	r2, [r4, #8]
 80192d2:	60e3      	str	r3, [r4, #12]
			break;
 80192d4:	f003 ba8c 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80192d8:	0802bedc 	.word	0x0802bedc
 80192dc:	08023b90 	.word	0x08023b90
 80192e0:	0802bee8 	.word	0x0802bee8
 80192e4:	0802bef8 	.word	0x0802bef8
 80192e8:	08023cb4 	.word	0x08023cb4
 80192ec:	0802bf10 	.word	0x0802bf10
 80192f0:	08029e84 	.word	0x08029e84
 80192f4:	0802bf20 	.word	0x0802bf20
 80192f8:	08023c08 	.word	0x08023c08
 80192fc:	0802bf34 	.word	0x0802bf34
 8019300:	08023d30 	.word	0x08023d30
 8019304:	0802bf40 	.word	0x0802bf40
 8019308:	0802bf4c 	.word	0x0802bf4c
 801930c:	08023f2c 	.word	0x08023f2c
 8019310:	0802bf5c 	.word	0x0802bf5c
 8019314:	08023c28 	.word	0x08023c28
 8019318:	0802bf64 	.word	0x0802bf64
 801931c:	0802bf74 	.word	0x0802bf74
 8019320:	08023da0 	.word	0x08023da0
 8019324:	0802bf8c 	.word	0x0802bf8c
 8019328:	0802bf90 	.word	0x0802bf90
 801932c:	0802bfa0 	.word	0x0802bfa0
 8019330:	0802bfb4 	.word	0x0802bfb4
 8019334:	0802bfbc 	.word	0x0802bfbc
 8019338:	08026578 	.word	0x08026578
 801933c:	08023d18 	.word	0x08023d18
 8019340:	0802bfcc 	.word	0x0802bfcc
 8019344:	08023b50 	.word	0x08023b50
 8019348:	0802bfd4 	.word	0x0802bfd4
 801934c:	0802bfe4 	.word	0x0802bfe4
		case 704 :
			strcpy(p->name,"BATTLE OF THE PUDGE");
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019356:	4abc      	ldr	r2, [pc, #752]	; (8019648 <problem_fetch+0x17cb8>)
 8019358:	461d      	mov	r5, r3
 801935a:	4614      	mov	r4, r2
 801935c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801935e:	6028      	str	r0, [r5, #0]
 8019360:	6069      	str	r1, [r5, #4]
 8019362:	60aa      	str	r2, [r5, #8]
 8019364:	60eb      	str	r3, [r5, #12]
 8019366:	6820      	ldr	r0, [r4, #0]
 8019368:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019370:	4ab6      	ldr	r2, [pc, #728]	; (801964c <problem_fetch+0x17cbc>)
 8019372:	6810      	ldr	r0, [r2, #0]
 8019374:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	2207      	movs	r2, #7
 801937a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,H,I");
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	33a4      	adds	r3, #164	; 0xa4
 8019380:	4ab3      	ldr	r2, [pc, #716]	; (8019650 <problem_fetch+0x17cc0>)
 8019382:	461c      	mov	r4, r3
 8019384:	4613      	mov	r3, r2
 8019386:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019388:	6020      	str	r0, [r4, #0]
 801938a:	6061      	str	r1, [r4, #4]
 801938c:	60a2      	str	r2, [r4, #8]
 801938e:	881b      	ldrh	r3, [r3, #0]
 8019390:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,5,11,8,16,5,10");
 8019392:	687b      	ldr	r3, [r7, #4]
 8019394:	3304      	adds	r3, #4
 8019396:	4aaf      	ldr	r2, [pc, #700]	; (8019654 <problem_fetch+0x17cc4>)
 8019398:	461d      	mov	r5, r3
 801939a:	4614      	mov	r4, r2
 801939c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801939e:	6028      	str	r0, [r5, #0]
 80193a0:	6069      	str	r1, [r5, #4]
 80193a2:	60aa      	str	r2, [r5, #8]
 80193a4:	60eb      	str	r3, [r5, #12]
 80193a6:	8823      	ldrh	r3, [r4, #0]
 80193a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,s,d,d,d,s,d");
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80193b0:	4aa9      	ldr	r2, [pc, #676]	; (8019658 <problem_fetch+0x17cc8>)
 80193b2:	461c      	mov	r4, r3
 80193b4:	4613      	mov	r3, r2
 80193b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193b8:	6020      	str	r0, [r4, #0]
 80193ba:	6061      	str	r1, [r4, #4]
 80193bc:	60a2      	str	r2, [r4, #8]
 80193be:	881b      	ldrh	r3, [r3, #0]
 80193c0:	81a3      	strh	r3, [r4, #12]
			break;
 80193c2:	f003 ba15 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 705 :
			strcpy(p->name,"THIS IS NOW...");
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80193cc:	4aa3      	ldr	r2, [pc, #652]	; (801965c <problem_fetch+0x17ccc>)
 80193ce:	461c      	mov	r4, r3
 80193d0:	4613      	mov	r3, r2
 80193d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80193d4:	6020      	str	r0, [r4, #0]
 80193d6:	6061      	str	r1, [r4, #4]
 80193d8:	60a2      	str	r2, [r4, #8]
 80193da:	881a      	ldrh	r2, [r3, #0]
 80193dc:	789b      	ldrb	r3, [r3, #2]
 80193de:	81a2      	strh	r2, [r4, #12]
 80193e0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80193e8:	4a9d      	ldr	r2, [pc, #628]	; (8019660 <problem_fetch+0x17cd0>)
 80193ea:	6810      	ldr	r0, [r2, #0]
 80193ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	2206      	movs	r2, #6
 80193f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,B,D");
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	33a4      	adds	r3, #164	; 0xa4
 80193f8:	4a9a      	ldr	r2, [pc, #616]	; (8019664 <problem_fetch+0x17cd4>)
 80193fa:	461c      	mov	r4, r3
 80193fc:	4613      	mov	r3, r2
 80193fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019400:	6020      	str	r0, [r4, #0]
 8019402:	6061      	str	r1, [r4, #4]
 8019404:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,15,15,18");
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	3304      	adds	r3, #4
 801940a:	4a97      	ldr	r2, [pc, #604]	; (8019668 <problem_fetch+0x17cd8>)
 801940c:	461d      	mov	r5, r3
 801940e:	4614      	mov	r4, r2
 8019410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019412:	6028      	str	r0, [r5, #0]
 8019414:	6069      	str	r1, [r5, #4]
 8019416:	60aa      	str	r2, [r5, #8]
 8019418:	60eb      	str	r3, [r5, #12]
 801941a:	7823      	ldrb	r3, [r4, #0]
 801941c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019424:	4a91      	ldr	r2, [pc, #580]	; (801966c <problem_fetch+0x17cdc>)
 8019426:	461c      	mov	r4, r3
 8019428:	4613      	mov	r3, r2
 801942a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801942c:	6020      	str	r0, [r4, #0]
 801942e:	6061      	str	r1, [r4, #4]
 8019430:	60a2      	str	r2, [r4, #8]
			break;
 8019432:	f003 b9dd 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 706 :
			strcpy(p->name,"ACG31");
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801943c:	4a8c      	ldr	r2, [pc, #560]	; (8019670 <problem_fetch+0x17ce0>)
 801943e:	6810      	ldr	r0, [r2, #0]
 8019440:	6018      	str	r0, [r3, #0]
 8019442:	8892      	ldrh	r2, [r2, #4]
 8019444:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801944c:	4a84      	ldr	r2, [pc, #528]	; (8019660 <problem_fetch+0x17cd0>)
 801944e:	6810      	ldr	r0, [r2, #0]
 8019450:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2206      	movs	r2, #6
 8019456:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,C,E,A");
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	33a4      	adds	r3, #164	; 0xa4
 801945c:	4a85      	ldr	r2, [pc, #532]	; (8019674 <problem_fetch+0x17ce4>)
 801945e:	461c      	mov	r4, r3
 8019460:	4613      	mov	r3, r2
 8019462:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019464:	6020      	str	r0, [r4, #0]
 8019466:	6061      	str	r1, [r4, #4]
 8019468:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,13,16,18");
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	3304      	adds	r3, #4
 801946e:	4a82      	ldr	r2, [pc, #520]	; (8019678 <problem_fetch+0x17ce8>)
 8019470:	461d      	mov	r5, r3
 8019472:	4614      	mov	r4, r2
 8019474:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019476:	6028      	str	r0, [r5, #0]
 8019478:	6069      	str	r1, [r5, #4]
 801947a:	60aa      	str	r2, [r5, #8]
 801947c:	60eb      	str	r3, [r5, #12]
 801947e:	7823      	ldrb	r3, [r4, #0]
 8019480:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019488:	4a78      	ldr	r2, [pc, #480]	; (801966c <problem_fetch+0x17cdc>)
 801948a:	461c      	mov	r4, r3
 801948c:	4613      	mov	r3, r2
 801948e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019490:	6020      	str	r0, [r4, #0]
 8019492:	6061      	str	r1, [r4, #4]
 8019494:	60a2      	str	r2, [r4, #8]
			break;
 8019496:	f003 b9ab 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 707 :
			strcpy(p->name,"ACG30");
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80194a0:	4a76      	ldr	r2, [pc, #472]	; (801967c <problem_fetch+0x17cec>)
 80194a2:	6810      	ldr	r0, [r2, #0]
 80194a4:	6018      	str	r0, [r3, #0]
 80194a6:	8892      	ldrh	r2, [r2, #4]
 80194a8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80194b0:	4a73      	ldr	r2, [pc, #460]	; (8019680 <problem_fetch+0x17cf0>)
 80194b2:	8811      	ldrh	r1, [r2, #0]
 80194b4:	7892      	ldrb	r2, [r2, #2]
 80194b6:	8019      	strh	r1, [r3, #0]
 80194b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	2208      	movs	r2, #8
 80194be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,F,G,G,I,I");
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	33a4      	adds	r3, #164	; 0xa4
 80194c4:	4a6f      	ldr	r2, [pc, #444]	; (8019684 <problem_fetch+0x17cf4>)
 80194c6:	461c      	mov	r4, r3
 80194c8:	4615      	mov	r5, r2
 80194ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194cc:	6020      	str	r0, [r4, #0]
 80194ce:	6061      	str	r1, [r4, #4]
 80194d0:	60a2      	str	r2, [r4, #8]
 80194d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,11,8,11,6,15,14,18");
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	3304      	adds	r3, #4
 80194d8:	4a6b      	ldr	r2, [pc, #428]	; (8019688 <problem_fetch+0x17cf8>)
 80194da:	461d      	mov	r5, r3
 80194dc:	4614      	mov	r4, r2
 80194de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80194e0:	6028      	str	r0, [r5, #0]
 80194e2:	6069      	str	r1, [r5, #4]
 80194e4:	60aa      	str	r2, [r5, #8]
 80194e6:	60eb      	str	r3, [r5, #12]
 80194e8:	6820      	ldr	r0, [r4, #0]
 80194ea:	6128      	str	r0, [r5, #16]
 80194ec:	7923      	ldrb	r3, [r4, #4]
 80194ee:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80194f6:	4a65      	ldr	r2, [pc, #404]	; (801968c <problem_fetch+0x17cfc>)
 80194f8:	461c      	mov	r4, r3
 80194fa:	4615      	mov	r5, r2
 80194fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194fe:	6020      	str	r0, [r4, #0]
 8019500:	6061      	str	r1, [r4, #4]
 8019502:	60a2      	str	r2, [r4, #8]
 8019504:	60e3      	str	r3, [r4, #12]
			break;
 8019506:	f003 b973 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 708 :
			strcpy(p->name,"ACG29");
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019510:	4a5f      	ldr	r2, [pc, #380]	; (8019690 <problem_fetch+0x17d00>)
 8019512:	6810      	ldr	r0, [r2, #0]
 8019514:	6018      	str	r0, [r3, #0]
 8019516:	8892      	ldrh	r2, [r2, #4]
 8019518:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019520:	4a57      	ldr	r2, [pc, #348]	; (8019680 <problem_fetch+0x17cf0>)
 8019522:	8811      	ldrh	r1, [r2, #0]
 8019524:	7892      	ldrb	r2, [r2, #2]
 8019526:	8019      	strh	r1, [r3, #0]
 8019528:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	2207      	movs	r2, #7
 801952e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,H,D");
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	33a4      	adds	r3, #164	; 0xa4
 8019534:	4a57      	ldr	r2, [pc, #348]	; (8019694 <problem_fetch+0x17d04>)
 8019536:	461c      	mov	r4, r3
 8019538:	4613      	mov	r3, r2
 801953a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801953c:	6020      	str	r0, [r4, #0]
 801953e:	6061      	str	r1, [r4, #4]
 8019540:	60a2      	str	r2, [r4, #8]
 8019542:	881b      	ldrh	r3, [r3, #0]
 8019544:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18");
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	3304      	adds	r3, #4
 801954a:	4a53      	ldr	r2, [pc, #332]	; (8019698 <problem_fetch+0x17d08>)
 801954c:	461d      	mov	r5, r3
 801954e:	4614      	mov	r4, r2
 8019550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019552:	6028      	str	r0, [r5, #0]
 8019554:	6069      	str	r1, [r5, #4]
 8019556:	60aa      	str	r2, [r5, #8]
 8019558:	60eb      	str	r3, [r5, #12]
 801955a:	8823      	ldrh	r3, [r4, #0]
 801955c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019564:	4a4d      	ldr	r2, [pc, #308]	; (801969c <problem_fetch+0x17d0c>)
 8019566:	461c      	mov	r4, r3
 8019568:	4613      	mov	r3, r2
 801956a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801956c:	6020      	str	r0, [r4, #0]
 801956e:	6061      	str	r1, [r4, #4]
 8019570:	60a2      	str	r2, [r4, #8]
 8019572:	881b      	ldrh	r3, [r3, #0]
 8019574:	81a3      	strh	r3, [r4, #12]
			break;
 8019576:	f003 b93b 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 709 :
			strcpy(p->name,"L9");
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019580:	4a47      	ldr	r2, [pc, #284]	; (80196a0 <problem_fetch+0x17d10>)
 8019582:	8811      	ldrh	r1, [r2, #0]
 8019584:	7892      	ldrb	r2, [r2, #2]
 8019586:	8019      	strh	r1, [r3, #0]
 8019588:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019590:	4a44      	ldr	r2, [pc, #272]	; (80196a4 <problem_fetch+0x17d14>)
 8019592:	6810      	ldr	r0, [r2, #0]
 8019594:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	2206      	movs	r2, #6
 801959a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,C,D");
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	33a4      	adds	r3, #164	; 0xa4
 80195a0:	4a41      	ldr	r2, [pc, #260]	; (80196a8 <problem_fetch+0x17d18>)
 80195a2:	461c      	mov	r4, r3
 80195a4:	4613      	mov	r3, r2
 80195a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195a8:	6020      	str	r0, [r4, #0]
 80195aa:	6061      	str	r1, [r4, #4]
 80195ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,13,18");
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	3304      	adds	r3, #4
 80195b2:	4a3e      	ldr	r2, [pc, #248]	; (80196ac <problem_fetch+0x17d1c>)
 80195b4:	461c      	mov	r4, r3
 80195b6:	4613      	mov	r3, r2
 80195b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195ba:	6020      	str	r0, [r4, #0]
 80195bc:	6061      	str	r1, [r4, #4]
 80195be:	60a2      	str	r2, [r4, #8]
 80195c0:	881a      	ldrh	r2, [r3, #0]
 80195c2:	789b      	ldrb	r3, [r3, #2]
 80195c4:	81a2      	strh	r2, [r4, #12]
 80195c6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80195ce:	4a27      	ldr	r2, [pc, #156]	; (801966c <problem_fetch+0x17cdc>)
 80195d0:	461c      	mov	r4, r3
 80195d2:	4613      	mov	r3, r2
 80195d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195d6:	6020      	str	r0, [r4, #0]
 80195d8:	6061      	str	r1, [r4, #4]
 80195da:	60a2      	str	r2, [r4, #8]
			break;
 80195dc:	f003 b908 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 710 :
			strcpy(p->name,"FLAPODROM");
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80195e6:	4932      	ldr	r1, [pc, #200]	; (80196b0 <problem_fetch+0x17d20>)
 80195e8:	461a      	mov	r2, r3
 80195ea:	460b      	mov	r3, r1
 80195ec:	cb03      	ldmia	r3!, {r0, r1}
 80195ee:	6010      	str	r0, [r2, #0]
 80195f0:	6051      	str	r1, [r2, #4]
 80195f2:	881b      	ldrh	r3, [r3, #0]
 80195f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80195fc:	4a18      	ldr	r2, [pc, #96]	; (8019660 <problem_fetch+0x17cd0>)
 80195fe:	6810      	ldr	r0, [r2, #0]
 8019600:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	2206      	movs	r2, #6
 8019606:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,E,I,I");
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	33a4      	adds	r3, #164	; 0xa4
 801960c:	4a29      	ldr	r2, [pc, #164]	; (80196b4 <problem_fetch+0x17d24>)
 801960e:	461c      	mov	r4, r3
 8019610:	4613      	mov	r3, r2
 8019612:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019614:	6020      	str	r0, [r4, #0]
 8019616:	6061      	str	r1, [r4, #4]
 8019618:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	3304      	adds	r3, #4
 801961e:	4a26      	ldr	r2, [pc, #152]	; (80196b8 <problem_fetch+0x17d28>)
 8019620:	461c      	mov	r4, r3
 8019622:	4615      	mov	r5, r2
 8019624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019626:	6020      	str	r0, [r4, #0]
 8019628:	6061      	str	r1, [r4, #4]
 801962a:	60a2      	str	r2, [r4, #8]
 801962c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019634:	4a21      	ldr	r2, [pc, #132]	; (80196bc <problem_fetch+0x17d2c>)
 8019636:	461c      	mov	r4, r3
 8019638:	4613      	mov	r3, r2
 801963a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801963c:	6020      	str	r0, [r4, #0]
 801963e:	6061      	str	r1, [r4, #4]
 8019640:	60a2      	str	r2, [r4, #8]
			break;
 8019642:	f003 b8d5 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8019646:	bf00      	nop
 8019648:	0802bffc 	.word	0x0802bffc
 801964c:	08023d30 	.word	0x08023d30
 8019650:	0802c010 	.word	0x0802c010
 8019654:	0802c020 	.word	0x0802c020
 8019658:	0802c034 	.word	0x0802c034
 801965c:	0802c044 	.word	0x0802c044
 8019660:	08023c28 	.word	0x08023c28
 8019664:	0802c054 	.word	0x0802c054
 8019668:	0802c060 	.word	0x0802c060
 801966c:	08023f2c 	.word	0x08023f2c
 8019670:	0802c074 	.word	0x0802c074
 8019674:	0802c07c 	.word	0x0802c07c
 8019678:	0802c088 	.word	0x0802c088
 801967c:	0802c09c 	.word	0x0802c09c
 8019680:	08023c5c 	.word	0x08023c5c
 8019684:	0802c0a4 	.word	0x0802c0a4
 8019688:	0802c0b4 	.word	0x0802c0b4
 801968c:	08026e38 	.word	0x08026e38
 8019690:	0802c0cc 	.word	0x0802c0cc
 8019694:	0802c0d4 	.word	0x0802c0d4
 8019698:	0802c0e4 	.word	0x0802c0e4
 801969c:	08023c08 	.word	0x08023c08
 80196a0:	0802c0f8 	.word	0x0802c0f8
 80196a4:	08023b90 	.word	0x08023b90
 80196a8:	0802c0fc 	.word	0x0802c0fc
 80196ac:	0802c108 	.word	0x0802c108
 80196b0:	0802c118 	.word	0x0802c118
 80196b4:	0802c124 	.word	0x0802c124
 80196b8:	0802c130 	.word	0x0802c130
 80196bc:	08023b70 	.word	0x08023b70
		case 711 :
			strcpy(p->name,"SWIM AND GO");
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80196c6:	4ac0      	ldr	r2, [pc, #768]	; (80199c8 <problem_fetch+0x18038>)
 80196c8:	461c      	mov	r4, r3
 80196ca:	4613      	mov	r3, r2
 80196cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196ce:	6020      	str	r0, [r4, #0]
 80196d0:	6061      	str	r1, [r4, #4]
 80196d2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80196da:	4abc      	ldr	r2, [pc, #752]	; (80199cc <problem_fetch+0x1803c>)
 80196dc:	6810      	ldr	r0, [r2, #0]
 80196de:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	2206      	movs	r2, #6
 80196e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,D");
 80196e6:	687b      	ldr	r3, [r7, #4]
 80196e8:	33a4      	adds	r3, #164	; 0xa4
 80196ea:	4ab9      	ldr	r2, [pc, #740]	; (80199d0 <problem_fetch+0x18040>)
 80196ec:	461c      	mov	r4, r3
 80196ee:	4613      	mov	r3, r2
 80196f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196f2:	6020      	str	r0, [r4, #0]
 80196f4:	6061      	str	r1, [r4, #4]
 80196f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,14,18");
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	3304      	adds	r3, #4
 80196fc:	4ab5      	ldr	r2, [pc, #724]	; (80199d4 <problem_fetch+0x18044>)
 80196fe:	461c      	mov	r4, r3
 8019700:	4615      	mov	r5, r2
 8019702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019704:	6020      	str	r0, [r4, #0]
 8019706:	6061      	str	r1, [r4, #4]
 8019708:	60a2      	str	r2, [r4, #8]
 801970a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019712:	4ab1      	ldr	r2, [pc, #708]	; (80199d8 <problem_fetch+0x18048>)
 8019714:	461c      	mov	r4, r3
 8019716:	4613      	mov	r3, r2
 8019718:	cb07      	ldmia	r3!, {r0, r1, r2}
 801971a:	6020      	str	r0, [r4, #0]
 801971c:	6061      	str	r1, [r4, #4]
 801971e:	60a2      	str	r2, [r4, #8]
			break;
 8019720:	f003 b866 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 712 :
			strcpy(p->name,"SWIMMING GOAT");
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801972a:	4aac      	ldr	r2, [pc, #688]	; (80199dc <problem_fetch+0x1804c>)
 801972c:	461c      	mov	r4, r3
 801972e:	4613      	mov	r3, r2
 8019730:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019732:	6020      	str	r0, [r4, #0]
 8019734:	6061      	str	r1, [r4, #4]
 8019736:	60a2      	str	r2, [r4, #8]
 8019738:	881b      	ldrh	r3, [r3, #0]
 801973a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019742:	4aa2      	ldr	r2, [pc, #648]	; (80199cc <problem_fetch+0x1803c>)
 8019744:	6810      	ldr	r0, [r2, #0]
 8019746:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	2206      	movs	r2, #6
 801974c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I,I,D");
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	33a4      	adds	r3, #164	; 0xa4
 8019752:	4aa3      	ldr	r2, [pc, #652]	; (80199e0 <problem_fetch+0x18050>)
 8019754:	461c      	mov	r4, r3
 8019756:	4613      	mov	r3, r2
 8019758:	cb07      	ldmia	r3!, {r0, r1, r2}
 801975a:	6020      	str	r0, [r4, #0]
 801975c:	6061      	str	r1, [r4, #4]
 801975e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,7,18");
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	3304      	adds	r3, #4
 8019764:	4a9f      	ldr	r2, [pc, #636]	; (80199e4 <problem_fetch+0x18054>)
 8019766:	461c      	mov	r4, r3
 8019768:	4615      	mov	r5, r2
 801976a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801976c:	6020      	str	r0, [r4, #0]
 801976e:	6061      	str	r1, [r4, #4]
 8019770:	60a2      	str	r2, [r4, #8]
 8019772:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801977a:	4a9b      	ldr	r2, [pc, #620]	; (80199e8 <problem_fetch+0x18058>)
 801977c:	461c      	mov	r4, r3
 801977e:	4613      	mov	r3, r2
 8019780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019782:	6020      	str	r0, [r4, #0]
 8019784:	6061      	str	r1, [r4, #4]
 8019786:	60a2      	str	r2, [r4, #8]
			break;
 8019788:	f003 b832 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 713 :
			strcpy(p->name,"NORTHSIDE");
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019792:	4996      	ldr	r1, [pc, #600]	; (80199ec <problem_fetch+0x1805c>)
 8019794:	461a      	mov	r2, r3
 8019796:	460b      	mov	r3, r1
 8019798:	cb03      	ldmia	r3!, {r0, r1}
 801979a:	6010      	str	r0, [r2, #0]
 801979c:	6051      	str	r1, [r2, #4]
 801979e:	881b      	ldrh	r3, [r3, #0]
 80197a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80197a8:	4a91      	ldr	r2, [pc, #580]	; (80199f0 <problem_fetch+0x18060>)
 80197aa:	8811      	ldrh	r1, [r2, #0]
 80197ac:	7892      	ldrb	r2, [r2, #2]
 80197ae:	8019      	strh	r1, [r3, #0]
 80197b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	2206      	movs	r2, #6
 80197b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,J");
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	33a4      	adds	r3, #164	; 0xa4
 80197bc:	4a8d      	ldr	r2, [pc, #564]	; (80199f4 <problem_fetch+0x18064>)
 80197be:	461c      	mov	r4, r3
 80197c0:	4613      	mov	r3, r2
 80197c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197c4:	6020      	str	r0, [r4, #0]
 80197c6:	6061      	str	r1, [r4, #4]
 80197c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"15,18,8,12,5,5");
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	3304      	adds	r3, #4
 80197ce:	4a8a      	ldr	r2, [pc, #552]	; (80199f8 <problem_fetch+0x18068>)
 80197d0:	461c      	mov	r4, r3
 80197d2:	4613      	mov	r3, r2
 80197d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197d6:	6020      	str	r0, [r4, #0]
 80197d8:	6061      	str	r1, [r4, #4]
 80197da:	60a2      	str	r2, [r4, #8]
 80197dc:	881a      	ldrh	r2, [r3, #0]
 80197de:	789b      	ldrb	r3, [r3, #2]
 80197e0:	81a2      	strh	r2, [r4, #12]
 80197e2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,e,d,d,s,s");
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80197ea:	4a84      	ldr	r2, [pc, #528]	; (80199fc <problem_fetch+0x1806c>)
 80197ec:	461c      	mov	r4, r3
 80197ee:	4613      	mov	r3, r2
 80197f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197f2:	6020      	str	r0, [r4, #0]
 80197f4:	6061      	str	r1, [r4, #4]
 80197f6:	60a2      	str	r2, [r4, #8]
			break;
 80197f8:	f002 bffa 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 714 :
			strcpy(p->name,"DESTINY'S GRANDMA");
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019802:	4a7f      	ldr	r2, [pc, #508]	; (8019a00 <problem_fetch+0x18070>)
 8019804:	461d      	mov	r5, r3
 8019806:	4614      	mov	r4, r2
 8019808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801980a:	6028      	str	r0, [r5, #0]
 801980c:	6069      	str	r1, [r5, #4]
 801980e:	60aa      	str	r2, [r5, #8]
 8019810:	60eb      	str	r3, [r5, #12]
 8019812:	8823      	ldrh	r3, [r4, #0]
 8019814:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801981c:	4a6b      	ldr	r2, [pc, #428]	; (80199cc <problem_fetch+0x1803c>)
 801981e:	6810      	ldr	r0, [r2, #0]
 8019820:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2208      	movs	r2, #8
 8019826:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,I,G,I");
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	33a4      	adds	r3, #164	; 0xa4
 801982c:	4a75      	ldr	r2, [pc, #468]	; (8019a04 <problem_fetch+0x18074>)
 801982e:	461c      	mov	r4, r3
 8019830:	4615      	mov	r5, r2
 8019832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019834:	6020      	str	r0, [r4, #0]
 8019836:	6061      	str	r1, [r4, #4]
 8019838:	60a2      	str	r2, [r4, #8]
 801983a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,14,14,17,18");
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	3304      	adds	r3, #4
 8019840:	4a71      	ldr	r2, [pc, #452]	; (8019a08 <problem_fetch+0x18078>)
 8019842:	461d      	mov	r5, r3
 8019844:	4614      	mov	r4, r2
 8019846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019848:	6028      	str	r0, [r5, #0]
 801984a:	6069      	str	r1, [r5, #4]
 801984c:	60aa      	str	r2, [r5, #8]
 801984e:	60eb      	str	r3, [r5, #12]
 8019850:	6820      	ldr	r0, [r4, #0]
 8019852:	6128      	str	r0, [r5, #16]
 8019854:	7923      	ldrb	r3, [r4, #4]
 8019856:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801985e:	4a6b      	ldr	r2, [pc, #428]	; (8019a0c <problem_fetch+0x1807c>)
 8019860:	461c      	mov	r4, r3
 8019862:	4615      	mov	r5, r2
 8019864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019866:	6020      	str	r0, [r4, #0]
 8019868:	6061      	str	r1, [r4, #4]
 801986a:	60a2      	str	r2, [r4, #8]
 801986c:	60e3      	str	r3, [r4, #12]
			break;
 801986e:	f002 bfbf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 715 :
			strcpy(p->name,"3/5TH A MAN");
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019878:	4a65      	ldr	r2, [pc, #404]	; (8019a10 <problem_fetch+0x18080>)
 801987a:	461c      	mov	r4, r3
 801987c:	4613      	mov	r3, r2
 801987e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019880:	6020      	str	r0, [r4, #0]
 8019882:	6061      	str	r1, [r4, #4]
 8019884:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801988c:	4a61      	ldr	r2, [pc, #388]	; (8019a14 <problem_fetch+0x18084>)
 801988e:	6810      	ldr	r0, [r2, #0]
 8019890:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	2207      	movs	r2, #7
 8019896:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,E,I,H,I");
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	33a4      	adds	r3, #164	; 0xa4
 801989c:	4a5e      	ldr	r2, [pc, #376]	; (8019a18 <problem_fetch+0x18088>)
 801989e:	461c      	mov	r4, r3
 80198a0:	4613      	mov	r3, r2
 80198a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80198a4:	6020      	str	r0, [r4, #0]
 80198a6:	6061      	str	r1, [r4, #4]
 80198a8:	60a2      	str	r2, [r4, #8]
 80198aa:	881b      	ldrh	r3, [r3, #0]
 80198ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,12,14,8,9,16,18");
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	3304      	adds	r3, #4
 80198b2:	4a5a      	ldr	r2, [pc, #360]	; (8019a1c <problem_fetch+0x1808c>)
 80198b4:	461d      	mov	r5, r3
 80198b6:	4614      	mov	r4, r2
 80198b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198ba:	6028      	str	r0, [r5, #0]
 80198bc:	6069      	str	r1, [r5, #4]
 80198be:	60aa      	str	r2, [r5, #8]
 80198c0:	60eb      	str	r3, [r5, #12]
 80198c2:	8823      	ldrh	r3, [r4, #0]
 80198c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80198cc:	4a54      	ldr	r2, [pc, #336]	; (8019a20 <problem_fetch+0x18090>)
 80198ce:	461c      	mov	r4, r3
 80198d0:	4613      	mov	r3, r2
 80198d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80198d4:	6020      	str	r0, [r4, #0]
 80198d6:	6061      	str	r1, [r4, #4]
 80198d8:	60a2      	str	r2, [r4, #8]
 80198da:	881b      	ldrh	r3, [r3, #0]
 80198dc:	81a3      	strh	r3, [r4, #12]
			break;
 80198de:	f002 bf87 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 716 :
			strcpy(p->name,"5 FINGER DISCOUNT");
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80198e8:	4a4e      	ldr	r2, [pc, #312]	; (8019a24 <problem_fetch+0x18094>)
 80198ea:	461d      	mov	r5, r3
 80198ec:	4614      	mov	r4, r2
 80198ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198f0:	6028      	str	r0, [r5, #0]
 80198f2:	6069      	str	r1, [r5, #4]
 80198f4:	60aa      	str	r2, [r5, #8]
 80198f6:	60eb      	str	r3, [r5, #12]
 80198f8:	8823      	ldrh	r3, [r4, #0]
 80198fa:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019902:	4a44      	ldr	r2, [pc, #272]	; (8019a14 <problem_fetch+0x18084>)
 8019904:	6810      	ldr	r0, [r2, #0]
 8019906:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2208      	movs	r2, #8
 801990c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,D,E,E,E,G");
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	33a4      	adds	r3, #164	; 0xa4
 8019912:	4a45      	ldr	r2, [pc, #276]	; (8019a28 <problem_fetch+0x18098>)
 8019914:	461c      	mov	r4, r3
 8019916:	4615      	mov	r5, r2
 8019918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801991a:	6020      	str	r0, [r4, #0]
 801991c:	6061      	str	r1, [r4, #4]
 801991e:	60a2      	str	r2, [r4, #8]
 8019920:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,12,18,6,8,14,4");
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	3304      	adds	r3, #4
 8019926:	4a41      	ldr	r2, [pc, #260]	; (8019a2c <problem_fetch+0x1809c>)
 8019928:	461d      	mov	r5, r3
 801992a:	4614      	mov	r4, r2
 801992c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801992e:	6028      	str	r0, [r5, #0]
 8019930:	6069      	str	r1, [r5, #4]
 8019932:	60aa      	str	r2, [r5, #8]
 8019934:	60eb      	str	r3, [r5, #12]
 8019936:	6820      	ldr	r0, [r4, #0]
 8019938:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,e,d,d,d,s");
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019940:	4a3b      	ldr	r2, [pc, #236]	; (8019a30 <problem_fetch+0x180a0>)
 8019942:	461c      	mov	r4, r3
 8019944:	4615      	mov	r5, r2
 8019946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019948:	6020      	str	r0, [r4, #0]
 801994a:	6061      	str	r1, [r4, #4]
 801994c:	60a2      	str	r2, [r4, #8]
 801994e:	60e3      	str	r3, [r4, #12]
			break;
 8019950:	f002 bf4e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 717 :
			strcpy(p->name,"THE SENDTRAIN");
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801995a:	4a36      	ldr	r2, [pc, #216]	; (8019a34 <problem_fetch+0x180a4>)
 801995c:	461c      	mov	r4, r3
 801995e:	4613      	mov	r3, r2
 8019960:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019962:	6020      	str	r0, [r4, #0]
 8019964:	6061      	str	r1, [r4, #4]
 8019966:	60a2      	str	r2, [r4, #8]
 8019968:	881b      	ldrh	r3, [r3, #0]
 801996a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019972:	4a31      	ldr	r2, [pc, #196]	; (8019a38 <problem_fetch+0x180a8>)
 8019974:	8811      	ldrh	r1, [r2, #0]
 8019976:	7892      	ldrb	r2, [r2, #2]
 8019978:	8019      	strh	r1, [r3, #0]
 801997a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	2208      	movs	r2, #8
 8019980:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,G,G,I,I,J");
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	33a4      	adds	r3, #164	; 0xa4
 8019986:	4a2d      	ldr	r2, [pc, #180]	; (8019a3c <problem_fetch+0x180ac>)
 8019988:	461c      	mov	r4, r3
 801998a:	4615      	mov	r5, r2
 801998c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801998e:	6020      	str	r0, [r4, #0]
 8019990:	6061      	str	r1, [r4, #4]
 8019992:	60a2      	str	r2, [r4, #8]
 8019994:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,4,6,9,15,14,18,7");
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	3304      	adds	r3, #4
 801999a:	4a29      	ldr	r2, [pc, #164]	; (8019a40 <problem_fetch+0x180b0>)
 801999c:	461d      	mov	r5, r3
 801999e:	4614      	mov	r4, r2
 80199a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80199a2:	6028      	str	r0, [r5, #0]
 80199a4:	6069      	str	r1, [r5, #4]
 80199a6:	60aa      	str	r2, [r5, #8]
 80199a8:	60eb      	str	r3, [r5, #12]
 80199aa:	6820      	ldr	r0, [r4, #0]
 80199ac:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,s,d,d,d,d,e,d");
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80199b4:	4a23      	ldr	r2, [pc, #140]	; (8019a44 <problem_fetch+0x180b4>)
 80199b6:	461c      	mov	r4, r3
 80199b8:	4615      	mov	r5, r2
 80199ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80199bc:	6020      	str	r0, [r4, #0]
 80199be:	6061      	str	r1, [r4, #4]
 80199c0:	60a2      	str	r2, [r4, #8]
 80199c2:	60e3      	str	r3, [r4, #12]
			break;
 80199c4:	f002 bf14 	b.w	801c7f0 <problem_fetch+0x1ae60>
 80199c8:	0802c140 	.word	0x0802c140
 80199cc:	08023b90 	.word	0x08023b90
 80199d0:	0802c14c 	.word	0x0802c14c
 80199d4:	0802c158 	.word	0x0802c158
 80199d8:	08023b70 	.word	0x08023b70
 80199dc:	0802c168 	.word	0x0802c168
 80199e0:	0802c178 	.word	0x0802c178
 80199e4:	0802c184 	.word	0x0802c184
 80199e8:	08023f2c 	.word	0x08023f2c
 80199ec:	0802c194 	.word	0x0802c194
 80199f0:	08023b50 	.word	0x08023b50
 80199f4:	0802c1a0 	.word	0x0802c1a0
 80199f8:	0802c1ac 	.word	0x0802c1ac
 80199fc:	0802c1bc 	.word	0x0802c1bc
 8019a00:	0802c1c8 	.word	0x0802c1c8
 8019a04:	0802c1dc 	.word	0x0802c1dc
 8019a08:	0802c1ec 	.word	0x0802c1ec
 8019a0c:	08023da0 	.word	0x08023da0
 8019a10:	0802c204 	.word	0x0802c204
 8019a14:	08023d30 	.word	0x08023d30
 8019a18:	0802c210 	.word	0x0802c210
 8019a1c:	0802c220 	.word	0x0802c220
 8019a20:	08023d18 	.word	0x08023d18
 8019a24:	0802c234 	.word	0x0802c234
 8019a28:	0802c248 	.word	0x0802c248
 8019a2c:	0802c258 	.word	0x0802c258
 8019a30:	0802c26c 	.word	0x0802c26c
 8019a34:	0802c27c 	.word	0x0802c27c
 8019a38:	08023c5c 	.word	0x08023c5c
 8019a3c:	0802c28c 	.word	0x0802c28c
 8019a40:	0802c29c 	.word	0x0802c29c
 8019a44:	0802c2b0 	.word	0x0802c2b0
		case 718 :
			strcpy(p->name,"SANTOKU SNATCH");
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019a4e:	4aaf      	ldr	r2, [pc, #700]	; (8019d0c <problem_fetch+0x1837c>)
 8019a50:	461c      	mov	r4, r3
 8019a52:	4613      	mov	r3, r2
 8019a54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a56:	6020      	str	r0, [r4, #0]
 8019a58:	6061      	str	r1, [r4, #4]
 8019a5a:	60a2      	str	r2, [r4, #8]
 8019a5c:	881a      	ldrh	r2, [r3, #0]
 8019a5e:	789b      	ldrb	r3, [r3, #2]
 8019a60:	81a2      	strh	r2, [r4, #12]
 8019a62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019a6a:	4aa9      	ldr	r2, [pc, #676]	; (8019d10 <problem_fetch+0x18380>)
 8019a6c:	6810      	ldr	r0, [r2, #0]
 8019a6e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	2207      	movs	r2, #7
 8019a74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,F,J,I");
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	33a4      	adds	r3, #164	; 0xa4
 8019a7a:	4aa6      	ldr	r2, [pc, #664]	; (8019d14 <problem_fetch+0x18384>)
 8019a7c:	461c      	mov	r4, r3
 8019a7e:	4613      	mov	r3, r2
 8019a80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a82:	6020      	str	r0, [r4, #0]
 8019a84:	6061      	str	r1, [r4, #4]
 8019a86:	60a2      	str	r2, [r4, #8]
 8019a88:	881b      	ldrh	r3, [r3, #0]
 8019a8a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	3304      	adds	r3, #4
 8019a90:	4aa1      	ldr	r2, [pc, #644]	; (8019d18 <problem_fetch+0x18388>)
 8019a92:	461d      	mov	r5, r3
 8019a94:	4614      	mov	r4, r2
 8019a96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a98:	6028      	str	r0, [r5, #0]
 8019a9a:	6069      	str	r1, [r5, #4]
 8019a9c:	60aa      	str	r2, [r5, #8]
 8019a9e:	60eb      	str	r3, [r5, #12]
 8019aa0:	8823      	ldrh	r3, [r4, #0]
 8019aa2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019aaa:	4a9c      	ldr	r2, [pc, #624]	; (8019d1c <problem_fetch+0x1838c>)
 8019aac:	461c      	mov	r4, r3
 8019aae:	4613      	mov	r3, r2
 8019ab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ab2:	6020      	str	r0, [r4, #0]
 8019ab4:	6061      	str	r1, [r4, #4]
 8019ab6:	60a2      	str	r2, [r4, #8]
 8019ab8:	881b      	ldrh	r3, [r3, #0]
 8019aba:	81a3      	strh	r3, [r4, #12]
			break;
 8019abc:	f002 be98 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 719 :
			strcpy(p->name,"MY IDEA ?");
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ac6:	4996      	ldr	r1, [pc, #600]	; (8019d20 <problem_fetch+0x18390>)
 8019ac8:	461a      	mov	r2, r3
 8019aca:	460b      	mov	r3, r1
 8019acc:	cb03      	ldmia	r3!, {r0, r1}
 8019ace:	6010      	str	r0, [r2, #0]
 8019ad0:	6051      	str	r1, [r2, #4]
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019adc:	4a91      	ldr	r2, [pc, #580]	; (8019d24 <problem_fetch+0x18394>)
 8019ade:	8811      	ldrh	r1, [r2, #0]
 8019ae0:	7892      	ldrb	r2, [r2, #2]
 8019ae2:	8019      	strh	r1, [r3, #0]
 8019ae4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	2207      	movs	r2, #7
 8019aea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,H,C,C,A");
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	33a4      	adds	r3, #164	; 0xa4
 8019af0:	4a8d      	ldr	r2, [pc, #564]	; (8019d28 <problem_fetch+0x18398>)
 8019af2:	461c      	mov	r4, r3
 8019af4:	4613      	mov	r3, r2
 8019af6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019af8:	6020      	str	r0, [r4, #0]
 8019afa:	6061      	str	r1, [r4, #4]
 8019afc:	60a2      	str	r2, [r4, #8]
 8019afe:	881b      	ldrh	r3, [r3, #0]
 8019b00:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,16,18");
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	3304      	adds	r3, #4
 8019b06:	4a89      	ldr	r2, [pc, #548]	; (8019d2c <problem_fetch+0x1839c>)
 8019b08:	461d      	mov	r5, r3
 8019b0a:	4614      	mov	r4, r2
 8019b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b0e:	6028      	str	r0, [r5, #0]
 8019b10:	6069      	str	r1, [r5, #4]
 8019b12:	60aa      	str	r2, [r5, #8]
 8019b14:	60eb      	str	r3, [r5, #12]
 8019b16:	8823      	ldrh	r3, [r4, #0]
 8019b18:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019b20:	4a83      	ldr	r2, [pc, #524]	; (8019d30 <problem_fetch+0x183a0>)
 8019b22:	461c      	mov	r4, r3
 8019b24:	4613      	mov	r3, r2
 8019b26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b28:	6020      	str	r0, [r4, #0]
 8019b2a:	6061      	str	r1, [r4, #4]
 8019b2c:	60a2      	str	r2, [r4, #8]
 8019b2e:	881b      	ldrh	r3, [r3, #0]
 8019b30:	81a3      	strh	r3, [r4, #12]
			break;
 8019b32:	f002 be5d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 720 :
			strcpy(p->name,"RUSTY MORNING");
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b3c:	4a7d      	ldr	r2, [pc, #500]	; (8019d34 <problem_fetch+0x183a4>)
 8019b3e:	461c      	mov	r4, r3
 8019b40:	4613      	mov	r3, r2
 8019b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b44:	6020      	str	r0, [r4, #0]
 8019b46:	6061      	str	r1, [r4, #4]
 8019b48:	60a2      	str	r2, [r4, #8]
 8019b4a:	881b      	ldrh	r3, [r3, #0]
 8019b4c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019b54:	4a78      	ldr	r2, [pc, #480]	; (8019d38 <problem_fetch+0x183a8>)
 8019b56:	6810      	ldr	r0, [r2, #0]
 8019b58:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	2209      	movs	r2, #9
 8019b5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,I,H,I,E,E,A");
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	33a4      	adds	r3, #164	; 0xa4
 8019b64:	4a75      	ldr	r2, [pc, #468]	; (8019d3c <problem_fetch+0x183ac>)
 8019b66:	461d      	mov	r5, r3
 8019b68:	4614      	mov	r4, r2
 8019b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b6c:	6028      	str	r0, [r5, #0]
 8019b6e:	6069      	str	r1, [r5, #4]
 8019b70:	60aa      	str	r2, [r5, #8]
 8019b72:	60eb      	str	r3, [r5, #12]
 8019b74:	8823      	ldrh	r3, [r4, #0]
 8019b76:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	3304      	adds	r3, #4
 8019b7c:	4a70      	ldr	r2, [pc, #448]	; (8019d40 <problem_fetch+0x183b0>)
 8019b7e:	461d      	mov	r5, r3
 8019b80:	4614      	mov	r4, r2
 8019b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b84:	6028      	str	r0, [r5, #0]
 8019b86:	6069      	str	r1, [r5, #4]
 8019b88:	60aa      	str	r2, [r5, #8]
 8019b8a:	60eb      	str	r3, [r5, #12]
 8019b8c:	cc03      	ldmia	r4!, {r0, r1}
 8019b8e:	6128      	str	r0, [r5, #16]
 8019b90:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019b98:	4a6a      	ldr	r2, [pc, #424]	; (8019d44 <problem_fetch+0x183b4>)
 8019b9a:	461d      	mov	r5, r3
 8019b9c:	4614      	mov	r4, r2
 8019b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ba0:	6028      	str	r0, [r5, #0]
 8019ba2:	6069      	str	r1, [r5, #4]
 8019ba4:	60aa      	str	r2, [r5, #8]
 8019ba6:	60eb      	str	r3, [r5, #12]
 8019ba8:	8823      	ldrh	r3, [r4, #0]
 8019baa:	822b      	strh	r3, [r5, #16]
			break;
 8019bac:	f002 be20 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 721 :
			strcpy(p->name,"POMPOUS POMPADOUR");
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019bb6:	4a64      	ldr	r2, [pc, #400]	; (8019d48 <problem_fetch+0x183b8>)
 8019bb8:	461d      	mov	r5, r3
 8019bba:	4614      	mov	r4, r2
 8019bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019bbe:	6028      	str	r0, [r5, #0]
 8019bc0:	6069      	str	r1, [r5, #4]
 8019bc2:	60aa      	str	r2, [r5, #8]
 8019bc4:	60eb      	str	r3, [r5, #12]
 8019bc6:	8823      	ldrh	r3, [r4, #0]
 8019bc8:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019bd0:	4a54      	ldr	r2, [pc, #336]	; (8019d24 <problem_fetch+0x18394>)
 8019bd2:	8811      	ldrh	r1, [r2, #0]
 8019bd4:	7892      	ldrb	r2, [r2, #2]
 8019bd6:	8019      	strh	r1, [r3, #0]
 8019bd8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	2206      	movs	r2, #6
 8019bde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,E,A");
 8019be0:	687b      	ldr	r3, [r7, #4]
 8019be2:	33a4      	adds	r3, #164	; 0xa4
 8019be4:	4a59      	ldr	r2, [pc, #356]	; (8019d4c <problem_fetch+0x183bc>)
 8019be6:	461c      	mov	r4, r3
 8019be8:	4613      	mov	r3, r2
 8019bea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019bec:	6020      	str	r0, [r4, #0]
 8019bee:	6061      	str	r1, [r4, #4]
 8019bf0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	3304      	adds	r3, #4
 8019bf6:	4a56      	ldr	r2, [pc, #344]	; (8019d50 <problem_fetch+0x183c0>)
 8019bf8:	461c      	mov	r4, r3
 8019bfa:	4615      	mov	r5, r2
 8019bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019bfe:	6020      	str	r0, [r4, #0]
 8019c00:	6061      	str	r1, [r4, #4]
 8019c02:	60a2      	str	r2, [r4, #8]
 8019c04:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019c0c:	4a51      	ldr	r2, [pc, #324]	; (8019d54 <problem_fetch+0x183c4>)
 8019c0e:	461c      	mov	r4, r3
 8019c10:	4613      	mov	r3, r2
 8019c12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c14:	6020      	str	r0, [r4, #0]
 8019c16:	6061      	str	r1, [r4, #4]
 8019c18:	60a2      	str	r2, [r4, #8]
			break;
 8019c1a:	f002 bde9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 722 :
			strcpy(p->name,"KEEP YOUR FEET DRY");
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c24:	4a4c      	ldr	r2, [pc, #304]	; (8019d58 <problem_fetch+0x183c8>)
 8019c26:	461d      	mov	r5, r3
 8019c28:	4614      	mov	r4, r2
 8019c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c2c:	6028      	str	r0, [r5, #0]
 8019c2e:	6069      	str	r1, [r5, #4]
 8019c30:	60aa      	str	r2, [r5, #8]
 8019c32:	60eb      	str	r3, [r5, #12]
 8019c34:	8823      	ldrh	r3, [r4, #0]
 8019c36:	78a2      	ldrb	r2, [r4, #2]
 8019c38:	822b      	strh	r3, [r5, #16]
 8019c3a:	4613      	mov	r3, r2
 8019c3c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c44:	4a3c      	ldr	r2, [pc, #240]	; (8019d38 <problem_fetch+0x183a8>)
 8019c46:	6810      	ldr	r0, [r2, #0]
 8019c48:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2206      	movs	r2, #6
 8019c4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,D,D,D");
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	33a4      	adds	r3, #164	; 0xa4
 8019c54:	4a41      	ldr	r2, [pc, #260]	; (8019d5c <problem_fetch+0x183cc>)
 8019c56:	461c      	mov	r4, r3
 8019c58:	4613      	mov	r3, r2
 8019c5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c5c:	6020      	str	r0, [r4, #0]
 8019c5e:	6061      	str	r1, [r4, #4]
 8019c60:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,9,11,15,18");
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	3304      	adds	r3, #4
 8019c66:	4a3e      	ldr	r2, [pc, #248]	; (8019d60 <problem_fetch+0x183d0>)
 8019c68:	461c      	mov	r4, r3
 8019c6a:	4613      	mov	r3, r2
 8019c6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c6e:	6020      	str	r0, [r4, #0]
 8019c70:	6061      	str	r1, [r4, #4]
 8019c72:	60a2      	str	r2, [r4, #8]
 8019c74:	881a      	ldrh	r2, [r3, #0]
 8019c76:	789b      	ldrb	r3, [r3, #2]
 8019c78:	81a2      	strh	r2, [r4, #12]
 8019c7a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019c82:	4a38      	ldr	r2, [pc, #224]	; (8019d64 <problem_fetch+0x183d4>)
 8019c84:	461c      	mov	r4, r3
 8019c86:	4613      	mov	r3, r2
 8019c88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c8a:	6020      	str	r0, [r4, #0]
 8019c8c:	6061      	str	r1, [r4, #4]
 8019c8e:	60a2      	str	r2, [r4, #8]
			break;
 8019c90:	f002 bdae 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 723 :
			strcpy(p->name,"WARM UP A5");
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c9a:	4933      	ldr	r1, [pc, #204]	; (8019d68 <problem_fetch+0x183d8>)
 8019c9c:	461a      	mov	r2, r3
 8019c9e:	460b      	mov	r3, r1
 8019ca0:	cb03      	ldmia	r3!, {r0, r1}
 8019ca2:	6010      	str	r0, [r2, #0]
 8019ca4:	6051      	str	r1, [r2, #4]
 8019ca6:	8819      	ldrh	r1, [r3, #0]
 8019ca8:	789b      	ldrb	r3, [r3, #2]
 8019caa:	8111      	strh	r1, [r2, #8]
 8019cac:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019cb4:	4a20      	ldr	r2, [pc, #128]	; (8019d38 <problem_fetch+0x183a8>)
 8019cb6:	6810      	ldr	r0, [r2, #0]
 8019cb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	2207      	movs	r2, #7
 8019cbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,F,E,H,I");
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	33a4      	adds	r3, #164	; 0xa4
 8019cc4:	4a29      	ldr	r2, [pc, #164]	; (8019d6c <problem_fetch+0x183dc>)
 8019cc6:	461c      	mov	r4, r3
 8019cc8:	4613      	mov	r3, r2
 8019cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ccc:	6020      	str	r0, [r4, #0]
 8019cce:	6061      	str	r1, [r4, #4]
 8019cd0:	60a2      	str	r2, [r4, #8]
 8019cd2:	881b      	ldrh	r3, [r3, #0]
 8019cd4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	3304      	adds	r3, #4
 8019cda:	4a25      	ldr	r2, [pc, #148]	; (8019d70 <problem_fetch+0x183e0>)
 8019cdc:	461d      	mov	r5, r3
 8019cde:	4614      	mov	r4, r2
 8019ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ce2:	6028      	str	r0, [r5, #0]
 8019ce4:	6069      	str	r1, [r5, #4]
 8019ce6:	60aa      	str	r2, [r5, #8]
 8019ce8:	60eb      	str	r3, [r5, #12]
 8019cea:	8823      	ldrh	r3, [r4, #0]
 8019cec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019cf4:	4a0e      	ldr	r2, [pc, #56]	; (8019d30 <problem_fetch+0x183a0>)
 8019cf6:	461c      	mov	r4, r3
 8019cf8:	4613      	mov	r3, r2
 8019cfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019cfc:	6020      	str	r0, [r4, #0]
 8019cfe:	6061      	str	r1, [r4, #4]
 8019d00:	60a2      	str	r2, [r4, #8]
 8019d02:	881b      	ldrh	r3, [r3, #0]
 8019d04:	81a3      	strh	r3, [r4, #12]
			break;
 8019d06:	f002 bd73 	b.w	801c7f0 <problem_fetch+0x1ae60>
 8019d0a:	bf00      	nop
 8019d0c:	0802c2c0 	.word	0x0802c2c0
 8019d10:	08023d30 	.word	0x08023d30
 8019d14:	0802c2d0 	.word	0x0802c2d0
 8019d18:	08025120 	.word	0x08025120
 8019d1c:	08023d18 	.word	0x08023d18
 8019d20:	0802c2e0 	.word	0x0802c2e0
 8019d24:	08023c5c 	.word	0x08023c5c
 8019d28:	0802c2ec 	.word	0x0802c2ec
 8019d2c:	0802c2fc 	.word	0x0802c2fc
 8019d30:	08023c08 	.word	0x08023c08
 8019d34:	0802c310 	.word	0x0802c310
 8019d38:	08023b90 	.word	0x08023b90
 8019d3c:	0802c320 	.word	0x0802c320
 8019d40:	0802836c 	.word	0x0802836c
 8019d44:	08024b74 	.word	0x08024b74
 8019d48:	0802c334 	.word	0x0802c334
 8019d4c:	0802c348 	.word	0x0802c348
 8019d50:	08026264 	.word	0x08026264
 8019d54:	08023f2c 	.word	0x08023f2c
 8019d58:	0802c354 	.word	0x0802c354
 8019d5c:	0802c368 	.word	0x0802c368
 8019d60:	0802c374 	.word	0x0802c374
 8019d64:	08023b70 	.word	0x08023b70
 8019d68:	0802c384 	.word	0x0802c384
 8019d6c:	0802c390 	.word	0x0802c390
 8019d70:	080241dc 	.word	0x080241dc
		case 724 :
			strcpy(p->name,"WARM UP A3");
 8019d74:	687b      	ldr	r3, [r7, #4]
 8019d76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019d7a:	49a8      	ldr	r1, [pc, #672]	; (801a01c <problem_fetch+0x1868c>)
 8019d7c:	461a      	mov	r2, r3
 8019d7e:	460b      	mov	r3, r1
 8019d80:	cb03      	ldmia	r3!, {r0, r1}
 8019d82:	6010      	str	r0, [r2, #0]
 8019d84:	6051      	str	r1, [r2, #4]
 8019d86:	8819      	ldrh	r1, [r3, #0]
 8019d88:	789b      	ldrb	r3, [r3, #2]
 8019d8a:	8111      	strh	r1, [r2, #8]
 8019d8c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019d94:	4aa2      	ldr	r2, [pc, #648]	; (801a020 <problem_fetch+0x18690>)
 8019d96:	6810      	ldr	r0, [r2, #0]
 8019d98:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	2206      	movs	r2, #6
 8019d9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,I,I");
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	33a4      	adds	r3, #164	; 0xa4
 8019da4:	4a9f      	ldr	r2, [pc, #636]	; (801a024 <problem_fetch+0x18694>)
 8019da6:	461c      	mov	r4, r3
 8019da8:	4613      	mov	r3, r2
 8019daa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019dac:	6020      	str	r0, [r4, #0]
 8019dae:	6061      	str	r1, [r4, #4]
 8019db0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	3304      	adds	r3, #4
 8019db6:	4a9c      	ldr	r2, [pc, #624]	; (801a028 <problem_fetch+0x18698>)
 8019db8:	461c      	mov	r4, r3
 8019dba:	4615      	mov	r5, r2
 8019dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019dbe:	6020      	str	r0, [r4, #0]
 8019dc0:	6061      	str	r1, [r4, #4]
 8019dc2:	60a2      	str	r2, [r4, #8]
 8019dc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019dcc:	4a97      	ldr	r2, [pc, #604]	; (801a02c <problem_fetch+0x1869c>)
 8019dce:	461c      	mov	r4, r3
 8019dd0:	4613      	mov	r3, r2
 8019dd2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019dd4:	6020      	str	r0, [r4, #0]
 8019dd6:	6061      	str	r1, [r4, #4]
 8019dd8:	60a2      	str	r2, [r4, #8]
			break;
 8019dda:	f002 bd09 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 725 :
			strcpy(p->name,"WARM UP A2");
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019de4:	4992      	ldr	r1, [pc, #584]	; (801a030 <problem_fetch+0x186a0>)
 8019de6:	461a      	mov	r2, r3
 8019de8:	460b      	mov	r3, r1
 8019dea:	cb03      	ldmia	r3!, {r0, r1}
 8019dec:	6010      	str	r0, [r2, #0]
 8019dee:	6051      	str	r1, [r2, #4]
 8019df0:	8819      	ldrh	r1, [r3, #0]
 8019df2:	789b      	ldrb	r3, [r3, #2]
 8019df4:	8111      	strh	r1, [r2, #8]
 8019df6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019dfe:	4a88      	ldr	r2, [pc, #544]	; (801a020 <problem_fetch+0x18690>)
 8019e00:	6810      	ldr	r0, [r2, #0]
 8019e02:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	2207      	movs	r2, #7
 8019e08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,D,I,A");
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	33a4      	adds	r3, #164	; 0xa4
 8019e0e:	4a89      	ldr	r2, [pc, #548]	; (801a034 <problem_fetch+0x186a4>)
 8019e10:	461c      	mov	r4, r3
 8019e12:	4613      	mov	r3, r2
 8019e14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e16:	6020      	str	r0, [r4, #0]
 8019e18:	6061      	str	r1, [r4, #4]
 8019e1a:	60a2      	str	r2, [r4, #8]
 8019e1c:	881b      	ldrh	r3, [r3, #0]
 8019e1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,7,18");
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	3304      	adds	r3, #4
 8019e24:	4a84      	ldr	r2, [pc, #528]	; (801a038 <problem_fetch+0x186a8>)
 8019e26:	461d      	mov	r5, r3
 8019e28:	4614      	mov	r4, r2
 8019e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019e2c:	6028      	str	r0, [r5, #0]
 8019e2e:	6069      	str	r1, [r5, #4]
 8019e30:	60aa      	str	r2, [r5, #8]
 8019e32:	60eb      	str	r3, [r5, #12]
 8019e34:	7823      	ldrb	r3, [r4, #0]
 8019e36:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019e3e:	4a7f      	ldr	r2, [pc, #508]	; (801a03c <problem_fetch+0x186ac>)
 8019e40:	461c      	mov	r4, r3
 8019e42:	4613      	mov	r3, r2
 8019e44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e46:	6020      	str	r0, [r4, #0]
 8019e48:	6061      	str	r1, [r4, #4]
 8019e4a:	60a2      	str	r2, [r4, #8]
 8019e4c:	881b      	ldrh	r3, [r3, #0]
 8019e4e:	81a3      	strh	r3, [r4, #12]
			break;
 8019e50:	f002 bcce 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 726 :
			strcpy(p->name,"WARM UP A1");
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019e5a:	4979      	ldr	r1, [pc, #484]	; (801a040 <problem_fetch+0x186b0>)
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	460b      	mov	r3, r1
 8019e60:	cb03      	ldmia	r3!, {r0, r1}
 8019e62:	6010      	str	r0, [r2, #0]
 8019e64:	6051      	str	r1, [r2, #4]
 8019e66:	8819      	ldrh	r1, [r3, #0]
 8019e68:	789b      	ldrb	r3, [r3, #2]
 8019e6a:	8111      	strh	r1, [r2, #8]
 8019e6c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019e74:	4a6a      	ldr	r2, [pc, #424]	; (801a020 <problem_fetch+0x18690>)
 8019e76:	6810      	ldr	r0, [r2, #0]
 8019e78:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	2206      	movs	r2, #6
 8019e7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,D,D");
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	33a4      	adds	r3, #164	; 0xa4
 8019e84:	4a6f      	ldr	r2, [pc, #444]	; (801a044 <problem_fetch+0x186b4>)
 8019e86:	461c      	mov	r4, r3
 8019e88:	4613      	mov	r3, r2
 8019e8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e8c:	6020      	str	r0, [r4, #0]
 8019e8e:	6061      	str	r1, [r4, #4]
 8019e90:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,15,18");
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	3304      	adds	r3, #4
 8019e96:	4a6c      	ldr	r2, [pc, #432]	; (801a048 <problem_fetch+0x186b8>)
 8019e98:	461c      	mov	r4, r3
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e9e:	6020      	str	r0, [r4, #0]
 8019ea0:	6061      	str	r1, [r4, #4]
 8019ea2:	60a2      	str	r2, [r4, #8]
 8019ea4:	881a      	ldrh	r2, [r3, #0]
 8019ea6:	789b      	ldrb	r3, [r3, #2]
 8019ea8:	81a2      	strh	r2, [r4, #12]
 8019eaa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019eb2:	4a66      	ldr	r2, [pc, #408]	; (801a04c <problem_fetch+0x186bc>)
 8019eb4:	461c      	mov	r4, r3
 8019eb6:	4613      	mov	r3, r2
 8019eb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019eba:	6020      	str	r0, [r4, #0]
 8019ebc:	6061      	str	r1, [r4, #4]
 8019ebe:	60a2      	str	r2, [r4, #8]
			break;
 8019ec0:	f002 bc96 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 727 :
			strcpy(p->name,"MARYJANEFIGAROTTA");
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019eca:	4a61      	ldr	r2, [pc, #388]	; (801a050 <problem_fetch+0x186c0>)
 8019ecc:	461d      	mov	r5, r3
 8019ece:	4614      	mov	r4, r2
 8019ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019ed2:	6028      	str	r0, [r5, #0]
 8019ed4:	6069      	str	r1, [r5, #4]
 8019ed6:	60aa      	str	r2, [r5, #8]
 8019ed8:	60eb      	str	r3, [r5, #12]
 8019eda:	8823      	ldrh	r3, [r4, #0]
 8019edc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ee4:	4a5b      	ldr	r2, [pc, #364]	; (801a054 <problem_fetch+0x186c4>)
 8019ee6:	6810      	ldr	r0, [r2, #0]
 8019ee8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019eea:	687b      	ldr	r3, [r7, #4]
 8019eec:	2205      	movs	r2, #5
 8019eee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,I,I");
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	33a4      	adds	r3, #164	; 0xa4
 8019ef4:	4958      	ldr	r1, [pc, #352]	; (801a058 <problem_fetch+0x186c8>)
 8019ef6:	461a      	mov	r2, r3
 8019ef8:	460b      	mov	r3, r1
 8019efa:	cb03      	ldmia	r3!, {r0, r1}
 8019efc:	6010      	str	r0, [r2, #0]
 8019efe:	6051      	str	r1, [r2, #4]
 8019f00:	881b      	ldrh	r3, [r3, #0]
 8019f02:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,15,18");
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	3304      	adds	r3, #4
 8019f08:	4a54      	ldr	r2, [pc, #336]	; (801a05c <problem_fetch+0x186cc>)
 8019f0a:	461c      	mov	r4, r3
 8019f0c:	4613      	mov	r3, r2
 8019f0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f10:	6020      	str	r0, [r4, #0]
 8019f12:	6061      	str	r1, [r4, #4]
 8019f14:	60a2      	str	r2, [r4, #8]
 8019f16:	781b      	ldrb	r3, [r3, #0]
 8019f18:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019f20:	494f      	ldr	r1, [pc, #316]	; (801a060 <problem_fetch+0x186d0>)
 8019f22:	461a      	mov	r2, r3
 8019f24:	460b      	mov	r3, r1
 8019f26:	cb03      	ldmia	r3!, {r0, r1}
 8019f28:	6010      	str	r0, [r2, #0]
 8019f2a:	6051      	str	r1, [r2, #4]
 8019f2c:	881b      	ldrh	r3, [r3, #0]
 8019f2e:	8113      	strh	r3, [r2, #8]
			break;
 8019f30:	f002 bc5e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 728 :
			strcpy(p->name,"BROWN FROWN");
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f3a:	4a4a      	ldr	r2, [pc, #296]	; (801a064 <problem_fetch+0x186d4>)
 8019f3c:	461c      	mov	r4, r3
 8019f3e:	4613      	mov	r3, r2
 8019f40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f42:	6020      	str	r0, [r4, #0]
 8019f44:	6061      	str	r1, [r4, #4]
 8019f46:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019f4e:	4a34      	ldr	r2, [pc, #208]	; (801a020 <problem_fetch+0x18690>)
 8019f50:	6810      	ldr	r0, [r2, #0]
 8019f52:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	2208      	movs	r2, #8
 8019f58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,H,F,C,E,D");
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	33a4      	adds	r3, #164	; 0xa4
 8019f5e:	4a42      	ldr	r2, [pc, #264]	; (801a068 <problem_fetch+0x186d8>)
 8019f60:	461c      	mov	r4, r3
 8019f62:	4615      	mov	r5, r2
 8019f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f66:	6020      	str	r0, [r4, #0]
 8019f68:	6061      	str	r1, [r4, #4]
 8019f6a:	60a2      	str	r2, [r4, #8]
 8019f6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,11,13,16,18");
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	3304      	adds	r3, #4
 8019f72:	4a3e      	ldr	r2, [pc, #248]	; (801a06c <problem_fetch+0x186dc>)
 8019f74:	461d      	mov	r5, r3
 8019f76:	4614      	mov	r4, r2
 8019f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f7a:	6028      	str	r0, [r5, #0]
 8019f7c:	6069      	str	r1, [r5, #4]
 8019f7e:	60aa      	str	r2, [r5, #8]
 8019f80:	60eb      	str	r3, [r5, #12]
 8019f82:	6820      	ldr	r0, [r4, #0]
 8019f84:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019f8c:	4a38      	ldr	r2, [pc, #224]	; (801a070 <problem_fetch+0x186e0>)
 8019f8e:	461c      	mov	r4, r3
 8019f90:	4615      	mov	r5, r2
 8019f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019f94:	6020      	str	r0, [r4, #0]
 8019f96:	6061      	str	r1, [r4, #4]
 8019f98:	60a2      	str	r2, [r4, #8]
 8019f9a:	60e3      	str	r3, [r4, #12]
			break;
 8019f9c:	f002 bc28 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 729 :
			strcpy(p->name,"LU'S FINEST");
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019fa6:	4a33      	ldr	r2, [pc, #204]	; (801a074 <problem_fetch+0x186e4>)
 8019fa8:	461c      	mov	r4, r3
 8019faa:	4613      	mov	r3, r2
 8019fac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fae:	6020      	str	r0, [r4, #0]
 8019fb0:	6061      	str	r1, [r4, #4]
 8019fb2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019fba:	4a2f      	ldr	r2, [pc, #188]	; (801a078 <problem_fetch+0x186e8>)
 8019fbc:	8811      	ldrh	r1, [r2, #0]
 8019fbe:	7892      	ldrb	r2, [r2, #2]
 8019fc0:	8019      	strh	r1, [r3, #0]
 8019fc2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	2209      	movs	r2, #9
 8019fc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,G,E,F,J,H,I");
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	33a4      	adds	r3, #164	; 0xa4
 8019fce:	4a2b      	ldr	r2, [pc, #172]	; (801a07c <problem_fetch+0x186ec>)
 8019fd0:	461d      	mov	r5, r3
 8019fd2:	4614      	mov	r4, r2
 8019fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fd6:	6028      	str	r0, [r5, #0]
 8019fd8:	6069      	str	r1, [r5, #4]
 8019fda:	60aa      	str	r2, [r5, #8]
 8019fdc:	60eb      	str	r3, [r5, #12]
 8019fde:	8823      	ldrh	r3, [r4, #0]
 8019fe0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,4,12,13,13,16,18");
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	3304      	adds	r3, #4
 8019fe6:	4a26      	ldr	r2, [pc, #152]	; (801a080 <problem_fetch+0x186f0>)
 8019fe8:	461d      	mov	r5, r3
 8019fea:	4614      	mov	r4, r2
 8019fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fee:	6028      	str	r0, [r5, #0]
 8019ff0:	6069      	str	r1, [r5, #4]
 8019ff2:	60aa      	str	r2, [r5, #8]
 8019ff4:	60eb      	str	r3, [r5, #12]
 8019ff6:	cc03      	ldmia	r4!, {r0, r1}
 8019ff8:	6128      	str	r0, [r5, #16]
 8019ffa:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a002:	4a20      	ldr	r2, [pc, #128]	; (801a084 <problem_fetch+0x186f4>)
 801a004:	461d      	mov	r5, r3
 801a006:	4614      	mov	r4, r2
 801a008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a00a:	6028      	str	r0, [r5, #0]
 801a00c:	6069      	str	r1, [r5, #4]
 801a00e:	60aa      	str	r2, [r5, #8]
 801a010:	60eb      	str	r3, [r5, #12]
 801a012:	8823      	ldrh	r3, [r4, #0]
 801a014:	822b      	strh	r3, [r5, #16]
			break;
 801a016:	f002 bbeb 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801a01a:	bf00      	nop
 801a01c:	0802c3a0 	.word	0x0802c3a0
 801a020:	08023b90 	.word	0x08023b90
 801a024:	0802c3ac 	.word	0x0802c3ac
 801a028:	0802c130 	.word	0x0802c130
 801a02c:	08023b70 	.word	0x08023b70
 801a030:	0802c3b8 	.word	0x0802c3b8
 801a034:	0802c3c4 	.word	0x0802c3c4
 801a038:	0802c3d4 	.word	0x0802c3d4
 801a03c:	08023c08 	.word	0x08023c08
 801a040:	0802c3e8 	.word	0x0802c3e8
 801a044:	0802c3f4 	.word	0x0802c3f4
 801a048:	0802c400 	.word	0x0802c400
 801a04c:	08023f2c 	.word	0x08023f2c
 801a050:	0802c410 	.word	0x0802c410
 801a054:	08023d30 	.word	0x08023d30
 801a058:	0802c424 	.word	0x0802c424
 801a05c:	0802c430 	.word	0x0802c430
 801a060:	08024270 	.word	0x08024270
 801a064:	0802c440 	.word	0x0802c440
 801a068:	0802c44c 	.word	0x0802c44c
 801a06c:	0802c45c 	.word	0x0802c45c
 801a070:	08023da0 	.word	0x08023da0
 801a074:	0802c470 	.word	0x0802c470
 801a078:	08023b50 	.word	0x08023b50
 801a07c:	0802c47c 	.word	0x0802c47c
 801a080:	0802c490 	.word	0x0802c490
 801a084:	08025a48 	.word	0x08025a48
		case 730 :
			strcpy(p->name,"MADDEKÈ");
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a08e:	49c0      	ldr	r1, [pc, #768]	; (801a390 <problem_fetch+0x18a00>)
 801a090:	461a      	mov	r2, r3
 801a092:	460b      	mov	r3, r1
 801a094:	cb03      	ldmia	r3!, {r0, r1}
 801a096:	6010      	str	r0, [r2, #0]
 801a098:	6051      	str	r1, [r2, #4]
 801a09a:	781b      	ldrb	r3, [r3, #0]
 801a09c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a0a4:	4abb      	ldr	r2, [pc, #748]	; (801a394 <problem_fetch+0x18a04>)
 801a0a6:	6810      	ldr	r0, [r2, #0]
 801a0a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2205      	movs	r2, #5
 801a0ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,G,D");
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	33a4      	adds	r3, #164	; 0xa4
 801a0b4:	49b8      	ldr	r1, [pc, #736]	; (801a398 <problem_fetch+0x18a08>)
 801a0b6:	461a      	mov	r2, r3
 801a0b8:	460b      	mov	r3, r1
 801a0ba:	cb03      	ldmia	r3!, {r0, r1}
 801a0bc:	6010      	str	r0, [r2, #0]
 801a0be:	6051      	str	r1, [r2, #4]
 801a0c0:	881b      	ldrh	r3, [r3, #0]
 801a0c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,14,18");
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	3304      	adds	r3, #4
 801a0c8:	4ab4      	ldr	r2, [pc, #720]	; (801a39c <problem_fetch+0x18a0c>)
 801a0ca:	461c      	mov	r4, r3
 801a0cc:	4613      	mov	r3, r2
 801a0ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a0d0:	6020      	str	r0, [r4, #0]
 801a0d2:	6061      	str	r1, [r4, #4]
 801a0d4:	60a2      	str	r2, [r4, #8]
 801a0d6:	781b      	ldrb	r3, [r3, #0]
 801a0d8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a0e0:	49af      	ldr	r1, [pc, #700]	; (801a3a0 <problem_fetch+0x18a10>)
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	460b      	mov	r3, r1
 801a0e6:	cb03      	ldmia	r3!, {r0, r1}
 801a0e8:	6010      	str	r0, [r2, #0]
 801a0ea:	6051      	str	r1, [r2, #4]
 801a0ec:	881b      	ldrh	r3, [r3, #0]
 801a0ee:	8113      	strh	r3, [r2, #8]
			break;
 801a0f0:	f002 bb7e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 731 :
			strcpy(p->name,"MEZZIF");
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a0fa:	4aaa      	ldr	r2, [pc, #680]	; (801a3a4 <problem_fetch+0x18a14>)
 801a0fc:	6810      	ldr	r0, [r2, #0]
 801a0fe:	6018      	str	r0, [r3, #0]
 801a100:	8891      	ldrh	r1, [r2, #4]
 801a102:	7992      	ldrb	r2, [r2, #6]
 801a104:	8099      	strh	r1, [r3, #4]
 801a106:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C+");
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a10e:	4aa6      	ldr	r2, [pc, #664]	; (801a3a8 <problem_fetch+0x18a18>)
 801a110:	6810      	ldr	r0, [r2, #0]
 801a112:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	2206      	movs	r2, #6
 801a118:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,F,J,I");
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	33a4      	adds	r3, #164	; 0xa4
 801a11e:	4aa3      	ldr	r2, [pc, #652]	; (801a3ac <problem_fetch+0x18a1c>)
 801a120:	461c      	mov	r4, r3
 801a122:	4613      	mov	r3, r2
 801a124:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a126:	6020      	str	r0, [r4, #0]
 801a128:	6061      	str	r1, [r4, #4]
 801a12a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,12,18");
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	3304      	adds	r3, #4
 801a130:	4a9f      	ldr	r2, [pc, #636]	; (801a3b0 <problem_fetch+0x18a20>)
 801a132:	461c      	mov	r4, r3
 801a134:	4613      	mov	r3, r2
 801a136:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a138:	6020      	str	r0, [r4, #0]
 801a13a:	6061      	str	r1, [r4, #4]
 801a13c:	60a2      	str	r2, [r4, #8]
 801a13e:	881a      	ldrh	r2, [r3, #0]
 801a140:	789b      	ldrb	r3, [r3, #2]
 801a142:	81a2      	strh	r2, [r4, #12]
 801a144:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a14c:	4a99      	ldr	r2, [pc, #612]	; (801a3b4 <problem_fetch+0x18a24>)
 801a14e:	461c      	mov	r4, r3
 801a150:	4613      	mov	r3, r2
 801a152:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a154:	6020      	str	r0, [r4, #0]
 801a156:	6061      	str	r1, [r4, #4]
 801a158:	60a2      	str	r2, [r4, #8]
			break;
 801a15a:	f002 bb49 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 732 :
			strcpy(p->name,"BIG HOLDZ");
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a164:	4994      	ldr	r1, [pc, #592]	; (801a3b8 <problem_fetch+0x18a28>)
 801a166:	461a      	mov	r2, r3
 801a168:	460b      	mov	r3, r1
 801a16a:	cb03      	ldmia	r3!, {r0, r1}
 801a16c:	6010      	str	r0, [r2, #0]
 801a16e:	6051      	str	r1, [r2, #4]
 801a170:	881b      	ldrh	r3, [r3, #0]
 801a172:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a17a:	4a90      	ldr	r2, [pc, #576]	; (801a3bc <problem_fetch+0x18a2c>)
 801a17c:	6810      	ldr	r0, [r2, #0]
 801a17e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	2205      	movs	r2, #5
 801a184:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A");
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	33a4      	adds	r3, #164	; 0xa4
 801a18a:	498d      	ldr	r1, [pc, #564]	; (801a3c0 <problem_fetch+0x18a30>)
 801a18c:	461a      	mov	r2, r3
 801a18e:	460b      	mov	r3, r1
 801a190:	cb03      	ldmia	r3!, {r0, r1}
 801a192:	6010      	str	r0, [r2, #0]
 801a194:	6051      	str	r1, [r2, #4]
 801a196:	881b      	ldrh	r3, [r3, #0]
 801a198:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,13,16,18");
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	3304      	adds	r3, #4
 801a19e:	4a89      	ldr	r2, [pc, #548]	; (801a3c4 <problem_fetch+0x18a34>)
 801a1a0:	461c      	mov	r4, r3
 801a1a2:	4613      	mov	r3, r2
 801a1a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1a6:	6020      	str	r0, [r4, #0]
 801a1a8:	6061      	str	r1, [r4, #4]
 801a1aa:	60a2      	str	r2, [r4, #8]
 801a1ac:	881b      	ldrh	r3, [r3, #0]
 801a1ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a1b6:	497a      	ldr	r1, [pc, #488]	; (801a3a0 <problem_fetch+0x18a10>)
 801a1b8:	461a      	mov	r2, r3
 801a1ba:	460b      	mov	r3, r1
 801a1bc:	cb03      	ldmia	r3!, {r0, r1}
 801a1be:	6010      	str	r0, [r2, #0]
 801a1c0:	6051      	str	r1, [r2, #4]
 801a1c2:	881b      	ldrh	r3, [r3, #0]
 801a1c4:	8113      	strh	r3, [r2, #8]
			break;
 801a1c6:	f002 bb13 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 733 :
			strcpy(p->name,"TIA");
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a1d0:	4a7d      	ldr	r2, [pc, #500]	; (801a3c8 <problem_fetch+0x18a38>)
 801a1d2:	6810      	ldr	r0, [r2, #0]
 801a1d4:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a1dc:	4a77      	ldr	r2, [pc, #476]	; (801a3bc <problem_fetch+0x18a2c>)
 801a1de:	6810      	ldr	r0, [r2, #0]
 801a1e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	2207      	movs	r2, #7
 801a1e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,I,H,I");
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	33a4      	adds	r3, #164	; 0xa4
 801a1ec:	4a77      	ldr	r2, [pc, #476]	; (801a3cc <problem_fetch+0x18a3c>)
 801a1ee:	461c      	mov	r4, r3
 801a1f0:	4613      	mov	r3, r2
 801a1f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1f4:	6020      	str	r0, [r4, #0]
 801a1f6:	6061      	str	r1, [r4, #4]
 801a1f8:	60a2      	str	r2, [r4, #8]
 801a1fa:	881b      	ldrh	r3, [r3, #0]
 801a1fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,14,16,18");
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	3304      	adds	r3, #4
 801a202:	4a73      	ldr	r2, [pc, #460]	; (801a3d0 <problem_fetch+0x18a40>)
 801a204:	461d      	mov	r5, r3
 801a206:	4614      	mov	r4, r2
 801a208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a20a:	6028      	str	r0, [r5, #0]
 801a20c:	6069      	str	r1, [r5, #4]
 801a20e:	60aa      	str	r2, [r5, #8]
 801a210:	60eb      	str	r3, [r5, #12]
 801a212:	8823      	ldrh	r3, [r4, #0]
 801a214:	78a2      	ldrb	r2, [r4, #2]
 801a216:	822b      	strh	r3, [r5, #16]
 801a218:	4613      	mov	r3, r2
 801a21a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a222:	4a6c      	ldr	r2, [pc, #432]	; (801a3d4 <problem_fetch+0x18a44>)
 801a224:	461c      	mov	r4, r3
 801a226:	4613      	mov	r3, r2
 801a228:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a22a:	6020      	str	r0, [r4, #0]
 801a22c:	6061      	str	r1, [r4, #4]
 801a22e:	60a2      	str	r2, [r4, #8]
 801a230:	881b      	ldrh	r3, [r3, #0]
 801a232:	81a3      	strh	r3, [r4, #12]
			break;
 801a234:	f002 badc 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 734 :
			strcpy(p->name,"LEOCREMAFLANDERS");
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a23e:	4a66      	ldr	r2, [pc, #408]	; (801a3d8 <problem_fetch+0x18a48>)
 801a240:	461d      	mov	r5, r3
 801a242:	4614      	mov	r4, r2
 801a244:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a246:	6028      	str	r0, [r5, #0]
 801a248:	6069      	str	r1, [r5, #4]
 801a24a:	60aa      	str	r2, [r5, #8]
 801a24c:	60eb      	str	r3, [r5, #12]
 801a24e:	7823      	ldrb	r3, [r4, #0]
 801a250:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a258:	4a60      	ldr	r2, [pc, #384]	; (801a3dc <problem_fetch+0x18a4c>)
 801a25a:	8811      	ldrh	r1, [r2, #0]
 801a25c:	7892      	ldrb	r2, [r2, #2]
 801a25e:	8019      	strh	r1, [r3, #0]
 801a260:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	2207      	movs	r2, #7
 801a266:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,C,E,F,H,I");
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	33a4      	adds	r3, #164	; 0xa4
 801a26c:	4a5c      	ldr	r2, [pc, #368]	; (801a3e0 <problem_fetch+0x18a50>)
 801a26e:	461c      	mov	r4, r3
 801a270:	4613      	mov	r3, r2
 801a272:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a274:	6020      	str	r0, [r4, #0]
 801a276:	6061      	str	r1, [r4, #4]
 801a278:	60a2      	str	r2, [r4, #8]
 801a27a:	881b      	ldrh	r3, [r3, #0]
 801a27c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,6,5,9,13,12,18");
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	3304      	adds	r3, #4
 801a282:	4a58      	ldr	r2, [pc, #352]	; (801a3e4 <problem_fetch+0x18a54>)
 801a284:	461d      	mov	r5, r3
 801a286:	4614      	mov	r4, r2
 801a288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a28a:	6028      	str	r0, [r5, #0]
 801a28c:	6069      	str	r1, [r5, #4]
 801a28e:	60aa      	str	r2, [r5, #8]
 801a290:	60eb      	str	r3, [r5, #12]
 801a292:	8823      	ldrh	r3, [r4, #0]
 801a294:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a29c:	4a52      	ldr	r2, [pc, #328]	; (801a3e8 <problem_fetch+0x18a58>)
 801a29e:	461c      	mov	r4, r3
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a2a4:	6020      	str	r0, [r4, #0]
 801a2a6:	6061      	str	r1, [r4, #4]
 801a2a8:	60a2      	str	r2, [r4, #8]
 801a2aa:	881b      	ldrh	r3, [r3, #0]
 801a2ac:	81a3      	strh	r3, [r4, #12]
			break;
 801a2ae:	f002 ba9f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 735 :
			strcpy(p->name,"MAFFEI");
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a2b8:	4a4c      	ldr	r2, [pc, #304]	; (801a3ec <problem_fetch+0x18a5c>)
 801a2ba:	6810      	ldr	r0, [r2, #0]
 801a2bc:	6018      	str	r0, [r3, #0]
 801a2be:	8891      	ldrh	r1, [r2, #4]
 801a2c0:	7992      	ldrb	r2, [r2, #6]
 801a2c2:	8099      	strh	r1, [r3, #4]
 801a2c4:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a2cc:	4a48      	ldr	r2, [pc, #288]	; (801a3f0 <problem_fetch+0x18a60>)
 801a2ce:	8811      	ldrh	r1, [r2, #0]
 801a2d0:	7892      	ldrb	r2, [r2, #2]
 801a2d2:	8019      	strh	r1, [r3, #0]
 801a2d4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2205      	movs	r2, #5
 801a2da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,A,E,D");
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	33a4      	adds	r3, #164	; 0xa4
 801a2e0:	4944      	ldr	r1, [pc, #272]	; (801a3f4 <problem_fetch+0x18a64>)
 801a2e2:	461a      	mov	r2, r3
 801a2e4:	460b      	mov	r3, r1
 801a2e6:	cb03      	ldmia	r3!, {r0, r1}
 801a2e8:	6010      	str	r0, [r2, #0]
 801a2ea:	6051      	str	r1, [r2, #4]
 801a2ec:	881b      	ldrh	r3, [r3, #0]
 801a2ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,12,14,8,18");
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	3304      	adds	r3, #4
 801a2f4:	4a40      	ldr	r2, [pc, #256]	; (801a3f8 <problem_fetch+0x18a68>)
 801a2f6:	461c      	mov	r4, r3
 801a2f8:	4613      	mov	r3, r2
 801a2fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a2fc:	6020      	str	r0, [r4, #0]
 801a2fe:	6061      	str	r1, [r4, #4]
 801a300:	60a2      	str	r2, [r4, #8]
 801a302:	781b      	ldrb	r3, [r3, #0]
 801a304:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a30c:	4924      	ldr	r1, [pc, #144]	; (801a3a0 <problem_fetch+0x18a10>)
 801a30e:	461a      	mov	r2, r3
 801a310:	460b      	mov	r3, r1
 801a312:	cb03      	ldmia	r3!, {r0, r1}
 801a314:	6010      	str	r0, [r2, #0]
 801a316:	6051      	str	r1, [r2, #4]
 801a318:	881b      	ldrh	r3, [r3, #0]
 801a31a:	8113      	strh	r3, [r2, #8]
			break;
 801a31c:	f002 ba68 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 736 :
			strcpy(p->name,"BUIONE");
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a326:	4a35      	ldr	r2, [pc, #212]	; (801a3fc <problem_fetch+0x18a6c>)
 801a328:	6810      	ldr	r0, [r2, #0]
 801a32a:	6018      	str	r0, [r3, #0]
 801a32c:	8891      	ldrh	r1, [r2, #4]
 801a32e:	7992      	ldrb	r2, [r2, #6]
 801a330:	8099      	strh	r1, [r3, #4]
 801a332:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a33a:	4a31      	ldr	r2, [pc, #196]	; (801a400 <problem_fetch+0x18a70>)
 801a33c:	8811      	ldrh	r1, [r2, #0]
 801a33e:	7892      	ldrb	r2, [r2, #2]
 801a340:	8019      	strh	r1, [r3, #0]
 801a342:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	2206      	movs	r2, #6
 801a348:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,B,A");
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	33a4      	adds	r3, #164	; 0xa4
 801a34e:	4a2d      	ldr	r2, [pc, #180]	; (801a404 <problem_fetch+0x18a74>)
 801a350:	461c      	mov	r4, r3
 801a352:	4613      	mov	r3, r2
 801a354:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a356:	6020      	str	r0, [r4, #0]
 801a358:	6061      	str	r1, [r4, #4]
 801a35a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	3304      	adds	r3, #4
 801a360:	4a29      	ldr	r2, [pc, #164]	; (801a408 <problem_fetch+0x18a78>)
 801a362:	461c      	mov	r4, r3
 801a364:	4613      	mov	r3, r2
 801a366:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a368:	6020      	str	r0, [r4, #0]
 801a36a:	6061      	str	r1, [r4, #4]
 801a36c:	60a2      	str	r2, [r4, #8]
 801a36e:	881a      	ldrh	r2, [r3, #0]
 801a370:	789b      	ldrb	r3, [r3, #2]
 801a372:	81a2      	strh	r2, [r4, #12]
 801a374:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a37c:	4a23      	ldr	r2, [pc, #140]	; (801a40c <problem_fetch+0x18a7c>)
 801a37e:	461c      	mov	r4, r3
 801a380:	4613      	mov	r3, r2
 801a382:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a384:	6020      	str	r0, [r4, #0]
 801a386:	6061      	str	r1, [r4, #4]
 801a388:	60a2      	str	r2, [r4, #8]
			break;
 801a38a:	f002 ba31 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801a38e:	bf00      	nop
 801a390:	0802c4a8 	.word	0x0802c4a8
 801a394:	08023ccc 	.word	0x08023ccc
 801a398:	0802c4b4 	.word	0x0802c4b4
 801a39c:	0802c4c0 	.word	0x0802c4c0
 801a3a0:	0802405c 	.word	0x0802405c
 801a3a4:	0802c4d0 	.word	0x0802c4d0
 801a3a8:	0802419c 	.word	0x0802419c
 801a3ac:	0802c4d8 	.word	0x0802c4d8
 801a3b0:	0802c4e4 	.word	0x0802c4e4
 801a3b4:	08023b70 	.word	0x08023b70
 801a3b8:	0802c4f4 	.word	0x0802c4f4
 801a3bc:	08023b90 	.word	0x08023b90
 801a3c0:	0802c500 	.word	0x0802c500
 801a3c4:	0802c50c 	.word	0x0802c50c
 801a3c8:	0802c51c 	.word	0x0802c51c
 801a3cc:	0802c520 	.word	0x0802c520
 801a3d0:	0802c530 	.word	0x0802c530
 801a3d4:	08023d18 	.word	0x08023d18
 801a3d8:	0802c544 	.word	0x0802c544
 801a3dc:	080243c4 	.word	0x080243c4
 801a3e0:	0802c558 	.word	0x0802c558
 801a3e4:	0802c568 	.word	0x0802c568
 801a3e8:	0802c57c 	.word	0x0802c57c
 801a3ec:	0802c58c 	.word	0x0802c58c
 801a3f0:	08023c5c 	.word	0x08023c5c
 801a3f4:	0802c594 	.word	0x0802c594
 801a3f8:	0802c5a0 	.word	0x0802c5a0
 801a3fc:	0802c5b0 	.word	0x0802c5b0
 801a400:	08023b50 	.word	0x08023b50
 801a404:	0802c5b8 	.word	0x0802c5b8
 801a408:	08028114 	.word	0x08028114
 801a40c:	08023f2c 	.word	0x08023f2c
		case 737 :
			strcpy(p->name,"A'TRAZIONE");
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a416:	49ab      	ldr	r1, [pc, #684]	; (801a6c4 <problem_fetch+0x18d34>)
 801a418:	461a      	mov	r2, r3
 801a41a:	460b      	mov	r3, r1
 801a41c:	cb03      	ldmia	r3!, {r0, r1}
 801a41e:	6010      	str	r0, [r2, #0]
 801a420:	6051      	str	r1, [r2, #4]
 801a422:	8819      	ldrh	r1, [r3, #0]
 801a424:	789b      	ldrb	r3, [r3, #2]
 801a426:	8111      	strh	r1, [r2, #8]
 801a428:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a430:	4aa5      	ldr	r2, [pc, #660]	; (801a6c8 <problem_fetch+0x18d38>)
 801a432:	6810      	ldr	r0, [r2, #0]
 801a434:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	2206      	movs	r2, #6
 801a43a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,J,K,G,D");
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	33a4      	adds	r3, #164	; 0xa4
 801a440:	4aa2      	ldr	r2, [pc, #648]	; (801a6cc <problem_fetch+0x18d3c>)
 801a442:	461c      	mov	r4, r3
 801a444:	4613      	mov	r3, r2
 801a446:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a448:	6020      	str	r0, [r4, #0]
 801a44a:	6061      	str	r1, [r4, #4]
 801a44c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,13,14,17,18");
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	3304      	adds	r3, #4
 801a452:	4a9f      	ldr	r2, [pc, #636]	; (801a6d0 <problem_fetch+0x18d40>)
 801a454:	461d      	mov	r5, r3
 801a456:	4614      	mov	r4, r2
 801a458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a45a:	6028      	str	r0, [r5, #0]
 801a45c:	6069      	str	r1, [r5, #4]
 801a45e:	60aa      	str	r2, [r5, #8]
 801a460:	60eb      	str	r3, [r5, #12]
 801a462:	7823      	ldrb	r3, [r4, #0]
 801a464:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a46c:	4a99      	ldr	r2, [pc, #612]	; (801a6d4 <problem_fetch+0x18d44>)
 801a46e:	461c      	mov	r4, r3
 801a470:	4613      	mov	r3, r2
 801a472:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a474:	6020      	str	r0, [r4, #0]
 801a476:	6061      	str	r1, [r4, #4]
 801a478:	60a2      	str	r2, [r4, #8]
			break;
 801a47a:	f002 b9b9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 738 :
			strcpy(p->name,"FROM VALCHIUSELLAWITHLOVE");
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a484:	4a94      	ldr	r2, [pc, #592]	; (801a6d8 <problem_fetch+0x18d48>)
 801a486:	461d      	mov	r5, r3
 801a488:	4614      	mov	r4, r2
 801a48a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a48c:	6028      	str	r0, [r5, #0]
 801a48e:	6069      	str	r1, [r5, #4]
 801a490:	60aa      	str	r2, [r5, #8]
 801a492:	60eb      	str	r3, [r5, #12]
 801a494:	cc03      	ldmia	r4!, {r0, r1}
 801a496:	6128      	str	r0, [r5, #16]
 801a498:	6169      	str	r1, [r5, #20]
 801a49a:	8823      	ldrh	r3, [r4, #0]
 801a49c:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a4a4:	4a8d      	ldr	r2, [pc, #564]	; (801a6dc <problem_fetch+0x18d4c>)
 801a4a6:	6810      	ldr	r0, [r2, #0]
 801a4a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	2205      	movs	r2, #5
 801a4ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,I,E,D");
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	33a4      	adds	r3, #164	; 0xa4
 801a4b4:	498a      	ldr	r1, [pc, #552]	; (801a6e0 <problem_fetch+0x18d50>)
 801a4b6:	461a      	mov	r2, r3
 801a4b8:	460b      	mov	r3, r1
 801a4ba:	cb03      	ldmia	r3!, {r0, r1}
 801a4bc:	6010      	str	r0, [r2, #0]
 801a4be:	6051      	str	r1, [r2, #4]
 801a4c0:	881b      	ldrh	r3, [r3, #0]
 801a4c2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	3304      	adds	r3, #4
 801a4c8:	4a86      	ldr	r2, [pc, #536]	; (801a6e4 <problem_fetch+0x18d54>)
 801a4ca:	461c      	mov	r4, r3
 801a4cc:	4613      	mov	r3, r2
 801a4ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4d0:	6020      	str	r0, [r4, #0]
 801a4d2:	6061      	str	r1, [r4, #4]
 801a4d4:	60a2      	str	r2, [r4, #8]
 801a4d6:	781b      	ldrb	r3, [r3, #0]
 801a4d8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a4e0:	4981      	ldr	r1, [pc, #516]	; (801a6e8 <problem_fetch+0x18d58>)
 801a4e2:	461a      	mov	r2, r3
 801a4e4:	460b      	mov	r3, r1
 801a4e6:	cb03      	ldmia	r3!, {r0, r1}
 801a4e8:	6010      	str	r0, [r2, #0]
 801a4ea:	6051      	str	r1, [r2, #4]
 801a4ec:	881b      	ldrh	r3, [r3, #0]
 801a4ee:	8113      	strh	r3, [r2, #8]
			break;
 801a4f0:	f002 b97e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 739 :
			strcpy(p->name,"TIME TO PLAY");
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a4fa:	4a7c      	ldr	r2, [pc, #496]	; (801a6ec <problem_fetch+0x18d5c>)
 801a4fc:	461c      	mov	r4, r3
 801a4fe:	4613      	mov	r3, r2
 801a500:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a502:	6020      	str	r0, [r4, #0]
 801a504:	6061      	str	r1, [r4, #4]
 801a506:	60a2      	str	r2, [r4, #8]
 801a508:	781b      	ldrb	r3, [r3, #0]
 801a50a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a512:	4a77      	ldr	r2, [pc, #476]	; (801a6f0 <problem_fetch+0x18d60>)
 801a514:	6810      	ldr	r0, [r2, #0]
 801a516:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 801a518:	687b      	ldr	r3, [r7, #4]
 801a51a:	220b      	movs	r2, #11
 801a51c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,D,D,B,C,G,H,I");
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	33a4      	adds	r3, #164	; 0xa4
 801a522:	4a74      	ldr	r2, [pc, #464]	; (801a6f4 <problem_fetch+0x18d64>)
 801a524:	461d      	mov	r5, r3
 801a526:	4614      	mov	r4, r2
 801a528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a52a:	6028      	str	r0, [r5, #0]
 801a52c:	6069      	str	r1, [r5, #4]
 801a52e:	60aa      	str	r2, [r5, #8]
 801a530:	60eb      	str	r3, [r5, #12]
 801a532:	6820      	ldr	r0, [r4, #0]
 801a534:	6128      	str	r0, [r5, #16]
 801a536:	88a3      	ldrh	r3, [r4, #4]
 801a538:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,7,10,12,11,15,6,16,17,16,18");
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	3304      	adds	r3, #4
 801a53e:	4a6e      	ldr	r2, [pc, #440]	; (801a6f8 <problem_fetch+0x18d68>)
 801a540:	461d      	mov	r5, r3
 801a542:	4614      	mov	r4, r2
 801a544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a546:	6028      	str	r0, [r5, #0]
 801a548:	6069      	str	r1, [r5, #4]
 801a54a:	60aa      	str	r2, [r5, #8]
 801a54c:	60eb      	str	r3, [r5, #12]
 801a54e:	cc07      	ldmia	r4!, {r0, r1, r2}
 801a550:	6128      	str	r0, [r5, #16]
 801a552:	6169      	str	r1, [r5, #20]
 801a554:	61aa      	str	r2, [r5, #24]
 801a556:	8823      	ldrh	r3, [r4, #0]
 801a558:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,e");
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a560:	4a66      	ldr	r2, [pc, #408]	; (801a6fc <problem_fetch+0x18d6c>)
 801a562:	461d      	mov	r5, r3
 801a564:	4614      	mov	r4, r2
 801a566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a568:	6028      	str	r0, [r5, #0]
 801a56a:	6069      	str	r1, [r5, #4]
 801a56c:	60aa      	str	r2, [r5, #8]
 801a56e:	60eb      	str	r3, [r5, #12]
 801a570:	6820      	ldr	r0, [r4, #0]
 801a572:	6128      	str	r0, [r5, #16]
 801a574:	88a3      	ldrh	r3, [r4, #4]
 801a576:	82ab      	strh	r3, [r5, #20]
			break;
 801a578:	f002 b93a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 740 :
			strcpy(p->name,"KIDSPROBLEM");
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a582:	4a5f      	ldr	r2, [pc, #380]	; (801a700 <problem_fetch+0x18d70>)
 801a584:	461c      	mov	r4, r3
 801a586:	4613      	mov	r3, r2
 801a588:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a58a:	6020      	str	r0, [r4, #0]
 801a58c:	6061      	str	r1, [r4, #4]
 801a58e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a596:	4a5b      	ldr	r2, [pc, #364]	; (801a704 <problem_fetch+0x18d74>)
 801a598:	8811      	ldrh	r1, [r2, #0]
 801a59a:	7892      	ldrb	r2, [r2, #2]
 801a59c:	8019      	strh	r1, [r3, #0]
 801a59e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	2208      	movs	r2, #8
 801a5a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,B,C,H,E,D");
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	33a4      	adds	r3, #164	; 0xa4
 801a5aa:	4a57      	ldr	r2, [pc, #348]	; (801a708 <problem_fetch+0x18d78>)
 801a5ac:	461c      	mov	r4, r3
 801a5ae:	4615      	mov	r5, r2
 801a5b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a5b2:	6020      	str	r0, [r4, #0]
 801a5b4:	6061      	str	r1, [r4, #4]
 801a5b6:	60a2      	str	r2, [r4, #8]
 801a5b8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,10,13,13,16,18");
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	3304      	adds	r3, #4
 801a5be:	4a53      	ldr	r2, [pc, #332]	; (801a70c <problem_fetch+0x18d7c>)
 801a5c0:	461d      	mov	r5, r3
 801a5c2:	4614      	mov	r4, r2
 801a5c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5c6:	6028      	str	r0, [r5, #0]
 801a5c8:	6069      	str	r1, [r5, #4]
 801a5ca:	60aa      	str	r2, [r5, #8]
 801a5cc:	60eb      	str	r3, [r5, #12]
 801a5ce:	6820      	ldr	r0, [r4, #0]
 801a5d0:	6128      	str	r0, [r5, #16]
 801a5d2:	7923      	ldrb	r3, [r4, #4]
 801a5d4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a5dc:	4a4c      	ldr	r2, [pc, #304]	; (801a710 <problem_fetch+0x18d80>)
 801a5de:	461c      	mov	r4, r3
 801a5e0:	4615      	mov	r5, r2
 801a5e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a5e4:	6020      	str	r0, [r4, #0]
 801a5e6:	6061      	str	r1, [r4, #4]
 801a5e8:	60a2      	str	r2, [r4, #8]
 801a5ea:	60e3      	str	r3, [r4, #12]
			break;
 801a5ec:	f002 b900 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 741 :
			strcpy(p->name,"DUBUCHI");
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a5f6:	4947      	ldr	r1, [pc, #284]	; (801a714 <problem_fetch+0x18d84>)
 801a5f8:	461a      	mov	r2, r3
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	cb03      	ldmia	r3!, {r0, r1}
 801a5fe:	6010      	str	r0, [r2, #0]
 801a600:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a608:	4a34      	ldr	r2, [pc, #208]	; (801a6dc <problem_fetch+0x18d4c>)
 801a60a:	6810      	ldr	r0, [r2, #0]
 801a60c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	2206      	movs	r2, #6
 801a612:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,C,C,A");
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	33a4      	adds	r3, #164	; 0xa4
 801a618:	4a3f      	ldr	r2, [pc, #252]	; (801a718 <problem_fetch+0x18d88>)
 801a61a:	461c      	mov	r4, r3
 801a61c:	4613      	mov	r3, r2
 801a61e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a620:	6020      	str	r0, [r4, #0]
 801a622:	6061      	str	r1, [r4, #4]
 801a624:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	3304      	adds	r3, #4
 801a62a:	4a3c      	ldr	r2, [pc, #240]	; (801a71c <problem_fetch+0x18d8c>)
 801a62c:	461c      	mov	r4, r3
 801a62e:	4615      	mov	r5, r2
 801a630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a632:	6020      	str	r0, [r4, #0]
 801a634:	6061      	str	r1, [r4, #4]
 801a636:	60a2      	str	r2, [r4, #8]
 801a638:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a640:	4a24      	ldr	r2, [pc, #144]	; (801a6d4 <problem_fetch+0x18d44>)
 801a642:	461c      	mov	r4, r3
 801a644:	4613      	mov	r3, r2
 801a646:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a648:	6020      	str	r0, [r4, #0]
 801a64a:	6061      	str	r1, [r4, #4]
 801a64c:	60a2      	str	r2, [r4, #8]
			break;
 801a64e:	f002 b8cf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 742 :
			strcpy(p->name,"FULCO");
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a658:	4a31      	ldr	r2, [pc, #196]	; (801a720 <problem_fetch+0x18d90>)
 801a65a:	6810      	ldr	r0, [r2, #0]
 801a65c:	6018      	str	r0, [r3, #0]
 801a65e:	8892      	ldrh	r2, [r2, #4]
 801a660:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a668:	4a26      	ldr	r2, [pc, #152]	; (801a704 <problem_fetch+0x18d74>)
 801a66a:	8811      	ldrh	r1, [r2, #0]
 801a66c:	7892      	ldrb	r2, [r2, #2]
 801a66e:	8019      	strh	r1, [r3, #0]
 801a670:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2207      	movs	r2, #7
 801a676:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,G,E,D");
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	33a4      	adds	r3, #164	; 0xa4
 801a67c:	4a29      	ldr	r2, [pc, #164]	; (801a724 <problem_fetch+0x18d94>)
 801a67e:	461c      	mov	r4, r3
 801a680:	4613      	mov	r3, r2
 801a682:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a684:	6020      	str	r0, [r4, #0]
 801a686:	6061      	str	r1, [r4, #4]
 801a688:	60a2      	str	r2, [r4, #8]
 801a68a:	881b      	ldrh	r3, [r3, #0]
 801a68c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	3304      	adds	r3, #4
 801a692:	4a25      	ldr	r2, [pc, #148]	; (801a728 <problem_fetch+0x18d98>)
 801a694:	461d      	mov	r5, r3
 801a696:	4614      	mov	r4, r2
 801a698:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a69a:	6028      	str	r0, [r5, #0]
 801a69c:	6069      	str	r1, [r5, #4]
 801a69e:	60aa      	str	r2, [r5, #8]
 801a6a0:	60eb      	str	r3, [r5, #12]
 801a6a2:	8823      	ldrh	r3, [r4, #0]
 801a6a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a6ac:	4a1f      	ldr	r2, [pc, #124]	; (801a72c <problem_fetch+0x18d9c>)
 801a6ae:	461c      	mov	r4, r3
 801a6b0:	4613      	mov	r3, r2
 801a6b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6b4:	6020      	str	r0, [r4, #0]
 801a6b6:	6061      	str	r1, [r4, #4]
 801a6b8:	60a2      	str	r2, [r4, #8]
 801a6ba:	881b      	ldrh	r3, [r3, #0]
 801a6bc:	81a3      	strh	r3, [r4, #12]
			break;
 801a6be:	f002 b897 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801a6c2:	bf00      	nop
 801a6c4:	0802c5c4 	.word	0x0802c5c4
 801a6c8:	08023ccc 	.word	0x08023ccc
 801a6cc:	0802c5d0 	.word	0x0802c5d0
 801a6d0:	0802c5dc 	.word	0x0802c5dc
 801a6d4:	08023f2c 	.word	0x08023f2c
 801a6d8:	0802c5f0 	.word	0x0802c5f0
 801a6dc:	08023d30 	.word	0x08023d30
 801a6e0:	0802c60c 	.word	0x0802c60c
 801a6e4:	08024e98 	.word	0x08024e98
 801a6e8:	0802405c 	.word	0x0802405c
 801a6ec:	0802c618 	.word	0x0802c618
 801a6f0:	08023c28 	.word	0x08023c28
 801a6f4:	0802c628 	.word	0x0802c628
 801a6f8:	0802c640 	.word	0x0802c640
 801a6fc:	0802c660 	.word	0x0802c660
 801a700:	0802c678 	.word	0x0802c678
 801a704:	08023c5c 	.word	0x08023c5c
 801a708:	0802c684 	.word	0x0802c684
 801a70c:	0802c694 	.word	0x0802c694
 801a710:	08023cb4 	.word	0x08023cb4
 801a714:	0802c6ac 	.word	0x0802c6ac
 801a718:	0802c6b4 	.word	0x0802c6b4
 801a71c:	0802b560 	.word	0x0802b560
 801a720:	0802c6c0 	.word	0x0802c6c0
 801a724:	0802c6c8 	.word	0x0802c6c8
 801a728:	0802489c 	.word	0x0802489c
 801a72c:	08023c08 	.word	0x08023c08
		case 743 :
			strcpy(p->name,"KICKER 2");
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a736:	49c3      	ldr	r1, [pc, #780]	; (801aa44 <problem_fetch+0x190b4>)
 801a738:	461a      	mov	r2, r3
 801a73a:	460b      	mov	r3, r1
 801a73c:	cb03      	ldmia	r3!, {r0, r1}
 801a73e:	6010      	str	r0, [r2, #0]
 801a740:	6051      	str	r1, [r2, #4]
 801a742:	781b      	ldrb	r3, [r3, #0]
 801a744:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a74c:	4abe      	ldr	r2, [pc, #760]	; (801aa48 <problem_fetch+0x190b8>)
 801a74e:	8811      	ldrh	r1, [r2, #0]
 801a750:	7892      	ldrb	r2, [r2, #2]
 801a752:	8019      	strh	r1, [r3, #0]
 801a754:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	2207      	movs	r2, #7
 801a75a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,G,E,I");
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	33a4      	adds	r3, #164	; 0xa4
 801a760:	4aba      	ldr	r2, [pc, #744]	; (801aa4c <problem_fetch+0x190bc>)
 801a762:	461c      	mov	r4, r3
 801a764:	4613      	mov	r3, r2
 801a766:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a768:	6020      	str	r0, [r4, #0]
 801a76a:	6061      	str	r1, [r4, #4]
 801a76c:	60a2      	str	r2, [r4, #8]
 801a76e:	881b      	ldrh	r3, [r3, #0]
 801a770:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,12,14,14,18");
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	3304      	adds	r3, #4
 801a776:	4ab6      	ldr	r2, [pc, #728]	; (801aa50 <problem_fetch+0x190c0>)
 801a778:	461d      	mov	r5, r3
 801a77a:	4614      	mov	r4, r2
 801a77c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a77e:	6028      	str	r0, [r5, #0]
 801a780:	6069      	str	r1, [r5, #4]
 801a782:	60aa      	str	r2, [r5, #8]
 801a784:	60eb      	str	r3, [r5, #12]
 801a786:	8823      	ldrh	r3, [r4, #0]
 801a788:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a790:	4ab0      	ldr	r2, [pc, #704]	; (801aa54 <problem_fetch+0x190c4>)
 801a792:	461c      	mov	r4, r3
 801a794:	4613      	mov	r3, r2
 801a796:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a798:	6020      	str	r0, [r4, #0]
 801a79a:	6061      	str	r1, [r4, #4]
 801a79c:	60a2      	str	r2, [r4, #8]
 801a79e:	881b      	ldrh	r3, [r3, #0]
 801a7a0:	81a3      	strh	r3, [r4, #12]
			break;
 801a7a2:	f002 b825 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 744 :
			strcpy(p->name,"KICKER");
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a7ac:	4aaa      	ldr	r2, [pc, #680]	; (801aa58 <problem_fetch+0x190c8>)
 801a7ae:	6810      	ldr	r0, [r2, #0]
 801a7b0:	6018      	str	r0, [r3, #0]
 801a7b2:	8891      	ldrh	r1, [r2, #4]
 801a7b4:	7992      	ldrb	r2, [r2, #6]
 801a7b6:	8099      	strh	r1, [r3, #4]
 801a7b8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a7c0:	4aa6      	ldr	r2, [pc, #664]	; (801aa5c <problem_fetch+0x190cc>)
 801a7c2:	6810      	ldr	r0, [r2, #0]
 801a7c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	2206      	movs	r2, #6
 801a7ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,E,D");
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	33a4      	adds	r3, #164	; 0xa4
 801a7d0:	4aa3      	ldr	r2, [pc, #652]	; (801aa60 <problem_fetch+0x190d0>)
 801a7d2:	461c      	mov	r4, r3
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7d8:	6020      	str	r0, [r4, #0]
 801a7da:	6061      	str	r1, [r4, #4]
 801a7dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,14,18");
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	3304      	adds	r3, #4
 801a7e2:	4aa0      	ldr	r2, [pc, #640]	; (801aa64 <problem_fetch+0x190d4>)
 801a7e4:	461c      	mov	r4, r3
 801a7e6:	4613      	mov	r3, r2
 801a7e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a7ea:	6020      	str	r0, [r4, #0]
 801a7ec:	6061      	str	r1, [r4, #4]
 801a7ee:	60a2      	str	r2, [r4, #8]
 801a7f0:	881a      	ldrh	r2, [r3, #0]
 801a7f2:	789b      	ldrb	r3, [r3, #2]
 801a7f4:	81a2      	strh	r2, [r4, #12]
 801a7f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a7fe:	4a9a      	ldr	r2, [pc, #616]	; (801aa68 <problem_fetch+0x190d8>)
 801a800:	461c      	mov	r4, r3
 801a802:	4613      	mov	r3, r2
 801a804:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a806:	6020      	str	r0, [r4, #0]
 801a808:	6061      	str	r1, [r4, #4]
 801a80a:	60a2      	str	r2, [r4, #8]
			break;
 801a80c:	f001 bff0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 745 :
			strcpy(p->name,"GRÜMPU-TURNIER");
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a816:	4a95      	ldr	r2, [pc, #596]	; (801aa6c <problem_fetch+0x190dc>)
 801a818:	461c      	mov	r4, r3
 801a81a:	4615      	mov	r5, r2
 801a81c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a81e:	6020      	str	r0, [r4, #0]
 801a820:	6061      	str	r1, [r4, #4]
 801a822:	60a2      	str	r2, [r4, #8]
 801a824:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a82c:	4a90      	ldr	r2, [pc, #576]	; (801aa70 <problem_fetch+0x190e0>)
 801a82e:	6810      	ldr	r0, [r2, #0]
 801a830:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	2207      	movs	r2, #7
 801a836:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,E,A");
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	33a4      	adds	r3, #164	; 0xa4
 801a83c:	4a8d      	ldr	r2, [pc, #564]	; (801aa74 <problem_fetch+0x190e4>)
 801a83e:	461c      	mov	r4, r3
 801a840:	4613      	mov	r3, r2
 801a842:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a844:	6020      	str	r0, [r4, #0]
 801a846:	6061      	str	r1, [r4, #4]
 801a848:	60a2      	str	r2, [r4, #8]
 801a84a:	881b      	ldrh	r3, [r3, #0]
 801a84c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,9,12,14,16,18");
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	3304      	adds	r3, #4
 801a852:	4a89      	ldr	r2, [pc, #548]	; (801aa78 <problem_fetch+0x190e8>)
 801a854:	461d      	mov	r5, r3
 801a856:	4614      	mov	r4, r2
 801a858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a85a:	6028      	str	r0, [r5, #0]
 801a85c:	6069      	str	r1, [r5, #4]
 801a85e:	60aa      	str	r2, [r5, #8]
 801a860:	60eb      	str	r3, [r5, #12]
 801a862:	8823      	ldrh	r3, [r4, #0]
 801a864:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a86c:	4a79      	ldr	r2, [pc, #484]	; (801aa54 <problem_fetch+0x190c4>)
 801a86e:	461c      	mov	r4, r3
 801a870:	4613      	mov	r3, r2
 801a872:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a874:	6020      	str	r0, [r4, #0]
 801a876:	6061      	str	r1, [r4, #4]
 801a878:	60a2      	str	r2, [r4, #8]
 801a87a:	881b      	ldrh	r3, [r3, #0]
 801a87c:	81a3      	strh	r3, [r4, #12]
			break;
 801a87e:	f001 bfb7 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 746 :
			strcpy(p->name,"LADYBUG RIGHT VAR");
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a888:	4a7c      	ldr	r2, [pc, #496]	; (801aa7c <problem_fetch+0x190ec>)
 801a88a:	461d      	mov	r5, r3
 801a88c:	4614      	mov	r4, r2
 801a88e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a890:	6028      	str	r0, [r5, #0]
 801a892:	6069      	str	r1, [r5, #4]
 801a894:	60aa      	str	r2, [r5, #8]
 801a896:	60eb      	str	r3, [r5, #12]
 801a898:	8823      	ldrh	r3, [r4, #0]
 801a89a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a8a2:	4a6e      	ldr	r2, [pc, #440]	; (801aa5c <problem_fetch+0x190cc>)
 801a8a4:	6810      	ldr	r0, [r2, #0]
 801a8a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	2208      	movs	r2, #8
 801a8ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,E,I");
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	33a4      	adds	r3, #164	; 0xa4
 801a8b2:	4a73      	ldr	r2, [pc, #460]	; (801aa80 <problem_fetch+0x190f0>)
 801a8b4:	461c      	mov	r4, r3
 801a8b6:	4615      	mov	r5, r2
 801a8b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a8ba:	6020      	str	r0, [r4, #0]
 801a8bc:	6061      	str	r1, [r4, #4]
 801a8be:	60a2      	str	r2, [r4, #8]
 801a8c0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,11,9,16,18");
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	3304      	adds	r3, #4
 801a8c6:	4a6f      	ldr	r2, [pc, #444]	; (801aa84 <problem_fetch+0x190f4>)
 801a8c8:	461d      	mov	r5, r3
 801a8ca:	4614      	mov	r4, r2
 801a8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8ce:	6028      	str	r0, [r5, #0]
 801a8d0:	6069      	str	r1, [r5, #4]
 801a8d2:	60aa      	str	r2, [r5, #8]
 801a8d4:	60eb      	str	r3, [r5, #12]
 801a8d6:	6820      	ldr	r0, [r4, #0]
 801a8d8:	6128      	str	r0, [r5, #16]
 801a8da:	7923      	ldrb	r3, [r4, #4]
 801a8dc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a8e4:	4a68      	ldr	r2, [pc, #416]	; (801aa88 <problem_fetch+0x190f8>)
 801a8e6:	461c      	mov	r4, r3
 801a8e8:	4615      	mov	r5, r2
 801a8ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a8ec:	6020      	str	r0, [r4, #0]
 801a8ee:	6061      	str	r1, [r4, #4]
 801a8f0:	60a2      	str	r2, [r4, #8]
 801a8f2:	60e3      	str	r3, [r4, #12]
			break;
 801a8f4:	f001 bf7c 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 747 :
			strcpy(p->name,"NANO");
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a8fe:	4a63      	ldr	r2, [pc, #396]	; (801aa8c <problem_fetch+0x190fc>)
 801a900:	6810      	ldr	r0, [r2, #0]
 801a902:	6018      	str	r0, [r3, #0]
 801a904:	7912      	ldrb	r2, [r2, #4]
 801a906:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a90e:	4a53      	ldr	r2, [pc, #332]	; (801aa5c <problem_fetch+0x190cc>)
 801a910:	6810      	ldr	r0, [r2, #0]
 801a912:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2205      	movs	r2, #5
 801a918:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,H,K,I");
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	33a4      	adds	r3, #164	; 0xa4
 801a91e:	495c      	ldr	r1, [pc, #368]	; (801aa90 <problem_fetch+0x19100>)
 801a920:	461a      	mov	r2, r3
 801a922:	460b      	mov	r3, r1
 801a924:	cb03      	ldmia	r3!, {r0, r1}
 801a926:	6010      	str	r0, [r2, #0]
 801a928:	6051      	str	r1, [r2, #4]
 801a92a:	881b      	ldrh	r3, [r3, #0]
 801a92c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,14,18");
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	3304      	adds	r3, #4
 801a932:	4a58      	ldr	r2, [pc, #352]	; (801aa94 <problem_fetch+0x19104>)
 801a934:	461c      	mov	r4, r3
 801a936:	4613      	mov	r3, r2
 801a938:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a93a:	6020      	str	r0, [r4, #0]
 801a93c:	6061      	str	r1, [r4, #4]
 801a93e:	60a2      	str	r2, [r4, #8]
 801a940:	881b      	ldrh	r3, [r3, #0]
 801a942:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a94a:	4953      	ldr	r1, [pc, #332]	; (801aa98 <problem_fetch+0x19108>)
 801a94c:	461a      	mov	r2, r3
 801a94e:	460b      	mov	r3, r1
 801a950:	cb03      	ldmia	r3!, {r0, r1}
 801a952:	6010      	str	r0, [r2, #0]
 801a954:	6051      	str	r1, [r2, #4]
 801a956:	881b      	ldrh	r3, [r3, #0]
 801a958:	8113      	strh	r3, [r2, #8]
			break;
 801a95a:	f001 bf49 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 748 :
			strcpy(p->name,"REALE");
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a964:	4a4d      	ldr	r2, [pc, #308]	; (801aa9c <problem_fetch+0x1910c>)
 801a966:	6810      	ldr	r0, [r2, #0]
 801a968:	6018      	str	r0, [r3, #0]
 801a96a:	8892      	ldrh	r2, [r2, #4]
 801a96c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a974:	4a4a      	ldr	r2, [pc, #296]	; (801aaa0 <problem_fetch+0x19110>)
 801a976:	8811      	ldrh	r1, [r2, #0]
 801a978:	7892      	ldrb	r2, [r2, #2]
 801a97a:	8019      	strh	r1, [r3, #0]
 801a97c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2207      	movs	r2, #7
 801a982:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,G,K,I");
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	33a4      	adds	r3, #164	; 0xa4
 801a988:	4a46      	ldr	r2, [pc, #280]	; (801aaa4 <problem_fetch+0x19114>)
 801a98a:	461c      	mov	r4, r3
 801a98c:	4613      	mov	r3, r2
 801a98e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a990:	6020      	str	r0, [r4, #0]
 801a992:	6061      	str	r1, [r4, #4]
 801a994:	60a2      	str	r2, [r4, #8]
 801a996:	881b      	ldrh	r3, [r3, #0]
 801a998:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,14,16,18");
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	3304      	adds	r3, #4
 801a99e:	4a42      	ldr	r2, [pc, #264]	; (801aaa8 <problem_fetch+0x19118>)
 801a9a0:	461d      	mov	r5, r3
 801a9a2:	4614      	mov	r4, r2
 801a9a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a9a6:	6028      	str	r0, [r5, #0]
 801a9a8:	6069      	str	r1, [r5, #4]
 801a9aa:	60aa      	str	r2, [r5, #8]
 801a9ac:	60eb      	str	r3, [r5, #12]
 801a9ae:	8823      	ldrh	r3, [r4, #0]
 801a9b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a9b8:	4a3c      	ldr	r2, [pc, #240]	; (801aaac <problem_fetch+0x1911c>)
 801a9ba:	461c      	mov	r4, r3
 801a9bc:	4613      	mov	r3, r2
 801a9be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9c0:	6020      	str	r0, [r4, #0]
 801a9c2:	6061      	str	r1, [r4, #4]
 801a9c4:	60a2      	str	r2, [r4, #8]
 801a9c6:	881b      	ldrh	r3, [r3, #0]
 801a9c8:	81a3      	strh	r3, [r4, #12]
			break;
 801a9ca:	f001 bf11 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 749 :
			strcpy(p->name,"UNDERTAKER");
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a9d4:	4936      	ldr	r1, [pc, #216]	; (801aab0 <problem_fetch+0x19120>)
 801a9d6:	461a      	mov	r2, r3
 801a9d8:	460b      	mov	r3, r1
 801a9da:	cb03      	ldmia	r3!, {r0, r1}
 801a9dc:	6010      	str	r0, [r2, #0]
 801a9de:	6051      	str	r1, [r2, #4]
 801a9e0:	8819      	ldrh	r1, [r3, #0]
 801a9e2:	789b      	ldrb	r3, [r3, #2]
 801a9e4:	8111      	strh	r1, [r2, #8]
 801a9e6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a9ee:	4a31      	ldr	r2, [pc, #196]	; (801aab4 <problem_fetch+0x19124>)
 801a9f0:	8811      	ldrh	r1, [r2, #0]
 801a9f2:	7892      	ldrb	r2, [r2, #2]
 801a9f4:	8019      	strh	r1, [r3, #0]
 801a9f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	2205      	movs	r2, #5
 801a9fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,D");
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	33a4      	adds	r3, #164	; 0xa4
 801aa02:	492d      	ldr	r1, [pc, #180]	; (801aab8 <problem_fetch+0x19128>)
 801aa04:	461a      	mov	r2, r3
 801aa06:	460b      	mov	r3, r1
 801aa08:	cb03      	ldmia	r3!, {r0, r1}
 801aa0a:	6010      	str	r0, [r2, #0]
 801aa0c:	6051      	str	r1, [r2, #4]
 801aa0e:	881b      	ldrh	r3, [r3, #0]
 801aa10:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	3304      	adds	r3, #4
 801aa16:	4a29      	ldr	r2, [pc, #164]	; (801aabc <problem_fetch+0x1912c>)
 801aa18:	461c      	mov	r4, r3
 801aa1a:	4613      	mov	r3, r2
 801aa1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa1e:	6020      	str	r0, [r4, #0]
 801aa20:	6061      	str	r1, [r4, #4]
 801aa22:	60a2      	str	r2, [r4, #8]
 801aa24:	781b      	ldrb	r3, [r3, #0]
 801aa26:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801aa2e:	491a      	ldr	r1, [pc, #104]	; (801aa98 <problem_fetch+0x19108>)
 801aa30:	461a      	mov	r2, r3
 801aa32:	460b      	mov	r3, r1
 801aa34:	cb03      	ldmia	r3!, {r0, r1}
 801aa36:	6010      	str	r0, [r2, #0]
 801aa38:	6051      	str	r1, [r2, #4]
 801aa3a:	881b      	ldrh	r3, [r3, #0]
 801aa3c:	8113      	strh	r3, [r2, #8]
			break;
 801aa3e:	f001 bed7 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801aa42:	bf00      	nop
 801aa44:	0802c6d8 	.word	0x0802c6d8
 801aa48:	08023b50 	.word	0x08023b50
 801aa4c:	0802c6e4 	.word	0x0802c6e4
 801aa50:	0802c6f4 	.word	0x0802c6f4
 801aa54:	08023d18 	.word	0x08023d18
 801aa58:	0802c708 	.word	0x0802c708
 801aa5c:	08023d30 	.word	0x08023d30
 801aa60:	0802c710 	.word	0x0802c710
 801aa64:	0802c71c 	.word	0x0802c71c
 801aa68:	08023f2c 	.word	0x08023f2c
 801aa6c:	0802c72c 	.word	0x0802c72c
 801aa70:	08023b90 	.word	0x08023b90
 801aa74:	0802c73c 	.word	0x0802c73c
 801aa78:	0802c74c 	.word	0x0802c74c
 801aa7c:	0802c760 	.word	0x0802c760
 801aa80:	0802c774 	.word	0x0802c774
 801aa84:	0802c784 	.word	0x0802c784
 801aa88:	08023cb4 	.word	0x08023cb4
 801aa8c:	0802c79c 	.word	0x0802c79c
 801aa90:	0802c7a4 	.word	0x0802c7a4
 801aa94:	0802c7b0 	.word	0x0802c7b0
 801aa98:	0802405c 	.word	0x0802405c
 801aa9c:	0802c7c0 	.word	0x0802c7c0
 801aaa0:	08023c5c 	.word	0x08023c5c
 801aaa4:	0802c7c8 	.word	0x0802c7c8
 801aaa8:	0802c7d8 	.word	0x0802c7d8
 801aaac:	08023c08 	.word	0x08023c08
 801aab0:	0802c7ec 	.word	0x0802c7ec
 801aab4:	08024288 	.word	0x08024288
 801aab8:	0802c7f8 	.word	0x0802c7f8
 801aabc:	080241ac 	.word	0x080241ac
		case 750 :
			strcpy(p->name,"COGUARO");
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aac6:	49c0      	ldr	r1, [pc, #768]	; (801adc8 <problem_fetch+0x19438>)
 801aac8:	461a      	mov	r2, r3
 801aaca:	460b      	mov	r3, r1
 801aacc:	cb03      	ldmia	r3!, {r0, r1}
 801aace:	6010      	str	r0, [r2, #0]
 801aad0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aad8:	4abc      	ldr	r2, [pc, #752]	; (801adcc <problem_fetch+0x1943c>)
 801aada:	6810      	ldr	r0, [r2, #0]
 801aadc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	2205      	movs	r2, #5
 801aae2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,G,I");
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	33a4      	adds	r3, #164	; 0xa4
 801aae8:	49b9      	ldr	r1, [pc, #740]	; (801add0 <problem_fetch+0x19440>)
 801aaea:	461a      	mov	r2, r3
 801aaec:	460b      	mov	r3, r1
 801aaee:	cb03      	ldmia	r3!, {r0, r1}
 801aaf0:	6010      	str	r0, [r2, #0]
 801aaf2:	6051      	str	r1, [r2, #4]
 801aaf4:	881b      	ldrh	r3, [r3, #0]
 801aaf6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,8,14,18");
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	3304      	adds	r3, #4
 801aafc:	4ab5      	ldr	r2, [pc, #724]	; (801add4 <problem_fetch+0x19444>)
 801aafe:	461c      	mov	r4, r3
 801ab00:	4613      	mov	r3, r2
 801ab02:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab04:	6020      	str	r0, [r4, #0]
 801ab06:	6061      	str	r1, [r4, #4]
 801ab08:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ab10:	49b1      	ldr	r1, [pc, #708]	; (801add8 <problem_fetch+0x19448>)
 801ab12:	461a      	mov	r2, r3
 801ab14:	460b      	mov	r3, r1
 801ab16:	cb03      	ldmia	r3!, {r0, r1}
 801ab18:	6010      	str	r0, [r2, #0]
 801ab1a:	6051      	str	r1, [r2, #4]
 801ab1c:	881b      	ldrh	r3, [r3, #0]
 801ab1e:	8113      	strh	r3, [r2, #8]
			break;
 801ab20:	f001 be66 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 751 :
			strcpy(p->name,"SMOKING AREA");
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab2a:	4aac      	ldr	r2, [pc, #688]	; (801addc <problem_fetch+0x1944c>)
 801ab2c:	461c      	mov	r4, r3
 801ab2e:	4613      	mov	r3, r2
 801ab30:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab32:	6020      	str	r0, [r4, #0]
 801ab34:	6061      	str	r1, [r4, #4]
 801ab36:	60a2      	str	r2, [r4, #8]
 801ab38:	781b      	ldrb	r3, [r3, #0]
 801ab3a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ab42:	4aa7      	ldr	r2, [pc, #668]	; (801ade0 <problem_fetch+0x19450>)
 801ab44:	8811      	ldrh	r1, [r2, #0]
 801ab46:	7892      	ldrb	r2, [r2, #2]
 801ab48:	8019      	strh	r1, [r3, #0]
 801ab4a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	2206      	movs	r2, #6
 801ab50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,E,I");
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	33a4      	adds	r3, #164	; 0xa4
 801ab56:	4aa3      	ldr	r2, [pc, #652]	; (801ade4 <problem_fetch+0x19454>)
 801ab58:	461c      	mov	r4, r3
 801ab5a:	4613      	mov	r3, r2
 801ab5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab5e:	6020      	str	r0, [r4, #0]
 801ab60:	6061      	str	r1, [r4, #4]
 801ab62:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,16,18");
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	3304      	adds	r3, #4
 801ab68:	4a9f      	ldr	r2, [pc, #636]	; (801ade8 <problem_fetch+0x19458>)
 801ab6a:	461c      	mov	r4, r3
 801ab6c:	4613      	mov	r3, r2
 801ab6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab70:	6020      	str	r0, [r4, #0]
 801ab72:	6061      	str	r1, [r4, #4]
 801ab74:	60a2      	str	r2, [r4, #8]
 801ab76:	881a      	ldrh	r2, [r3, #0]
 801ab78:	789b      	ldrb	r3, [r3, #2]
 801ab7a:	81a2      	strh	r2, [r4, #12]
 801ab7c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ab84:	4a99      	ldr	r2, [pc, #612]	; (801adec <problem_fetch+0x1945c>)
 801ab86:	461c      	mov	r4, r3
 801ab88:	4613      	mov	r3, r2
 801ab8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab8c:	6020      	str	r0, [r4, #0]
 801ab8e:	6061      	str	r1, [r4, #4]
 801ab90:	60a2      	str	r2, [r4, #8]
			break;
 801ab92:	f001 be2d 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 752 :
			strcpy(p->name,"BOGLI FOR PRESIDENT");
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab9c:	4a94      	ldr	r2, [pc, #592]	; (801adf0 <problem_fetch+0x19460>)
 801ab9e:	461d      	mov	r5, r3
 801aba0:	4614      	mov	r4, r2
 801aba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aba4:	6028      	str	r0, [r5, #0]
 801aba6:	6069      	str	r1, [r5, #4]
 801aba8:	60aa      	str	r2, [r5, #8]
 801abaa:	60eb      	str	r3, [r5, #12]
 801abac:	6820      	ldr	r0, [r4, #0]
 801abae:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801abb6:	4a85      	ldr	r2, [pc, #532]	; (801adcc <problem_fetch+0x1943c>)
 801abb8:	6810      	ldr	r0, [r2, #0]
 801abba:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	2207      	movs	r2, #7
 801abc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,D,D,A,A");
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	33a4      	adds	r3, #164	; 0xa4
 801abc6:	4a8b      	ldr	r2, [pc, #556]	; (801adf4 <problem_fetch+0x19464>)
 801abc8:	461c      	mov	r4, r3
 801abca:	4613      	mov	r3, r2
 801abcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abce:	6020      	str	r0, [r4, #0]
 801abd0:	6061      	str	r1, [r4, #4]
 801abd2:	60a2      	str	r2, [r4, #8]
 801abd4:	881b      	ldrh	r3, [r3, #0]
 801abd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,15,14,18");
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	3304      	adds	r3, #4
 801abdc:	4a86      	ldr	r2, [pc, #536]	; (801adf8 <problem_fetch+0x19468>)
 801abde:	461d      	mov	r5, r3
 801abe0:	4614      	mov	r4, r2
 801abe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abe4:	6028      	str	r0, [r5, #0]
 801abe6:	6069      	str	r1, [r5, #4]
 801abe8:	60aa      	str	r2, [r5, #8]
 801abea:	60eb      	str	r3, [r5, #12]
 801abec:	8823      	ldrh	r3, [r4, #0]
 801abee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801abf6:	4a81      	ldr	r2, [pc, #516]	; (801adfc <problem_fetch+0x1946c>)
 801abf8:	461c      	mov	r4, r3
 801abfa:	4613      	mov	r3, r2
 801abfc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abfe:	6020      	str	r0, [r4, #0]
 801ac00:	6061      	str	r1, [r4, #4]
 801ac02:	60a2      	str	r2, [r4, #8]
 801ac04:	881b      	ldrh	r3, [r3, #0]
 801ac06:	81a3      	strh	r3, [r4, #12]
			break;
 801ac08:	f001 bdf2 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 753 :
			strcpy(p->name,"DU SPICCI");
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac12:	497b      	ldr	r1, [pc, #492]	; (801ae00 <problem_fetch+0x19470>)
 801ac14:	461a      	mov	r2, r3
 801ac16:	460b      	mov	r3, r1
 801ac18:	cb03      	ldmia	r3!, {r0, r1}
 801ac1a:	6010      	str	r0, [r2, #0]
 801ac1c:	6051      	str	r1, [r2, #4]
 801ac1e:	881b      	ldrh	r3, [r3, #0]
 801ac20:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac28:	4a76      	ldr	r2, [pc, #472]	; (801ae04 <problem_fetch+0x19474>)
 801ac2a:	6810      	ldr	r0, [r2, #0]
 801ac2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	2206      	movs	r2, #6
 801ac32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,I,D,E,D");
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	33a4      	adds	r3, #164	; 0xa4
 801ac38:	4a73      	ldr	r2, [pc, #460]	; (801ae08 <problem_fetch+0x19478>)
 801ac3a:	461c      	mov	r4, r3
 801ac3c:	4613      	mov	r3, r2
 801ac3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac40:	6020      	str	r0, [r4, #0]
 801ac42:	6061      	str	r1, [r4, #4]
 801ac44:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,14,18");
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	3304      	adds	r3, #4
 801ac4a:	4a70      	ldr	r2, [pc, #448]	; (801ae0c <problem_fetch+0x1947c>)
 801ac4c:	461c      	mov	r4, r3
 801ac4e:	4615      	mov	r5, r2
 801ac50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac52:	6020      	str	r0, [r4, #0]
 801ac54:	6061      	str	r1, [r4, #4]
 801ac56:	60a2      	str	r2, [r4, #8]
 801ac58:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ac60:	4a6b      	ldr	r2, [pc, #428]	; (801ae10 <problem_fetch+0x19480>)
 801ac62:	461c      	mov	r4, r3
 801ac64:	4613      	mov	r3, r2
 801ac66:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac68:	6020      	str	r0, [r4, #0]
 801ac6a:	6061      	str	r1, [r4, #4]
 801ac6c:	60a2      	str	r2, [r4, #8]
			break;
 801ac6e:	f001 bdbf 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 754 :
			strcpy(p->name,"CALLA");
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac78:	4a66      	ldr	r2, [pc, #408]	; (801ae14 <problem_fetch+0x19484>)
 801ac7a:	6810      	ldr	r0, [r2, #0]
 801ac7c:	6018      	str	r0, [r3, #0]
 801ac7e:	8892      	ldrh	r2, [r2, #4]
 801ac80:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac88:	4a63      	ldr	r2, [pc, #396]	; (801ae18 <problem_fetch+0x19488>)
 801ac8a:	6810      	ldr	r0, [r2, #0]
 801ac8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	2207      	movs	r2, #7
 801ac92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,G,E,I");
 801ac94:	687b      	ldr	r3, [r7, #4]
 801ac96:	33a4      	adds	r3, #164	; 0xa4
 801ac98:	4a60      	ldr	r2, [pc, #384]	; (801ae1c <problem_fetch+0x1948c>)
 801ac9a:	461c      	mov	r4, r3
 801ac9c:	4613      	mov	r3, r2
 801ac9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aca0:	6020      	str	r0, [r4, #0]
 801aca2:	6061      	str	r1, [r4, #4]
 801aca4:	60a2      	str	r2, [r4, #8]
 801aca6:	881b      	ldrh	r3, [r3, #0]
 801aca8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	3304      	adds	r3, #4
 801acae:	4a5c      	ldr	r2, [pc, #368]	; (801ae20 <problem_fetch+0x19490>)
 801acb0:	461d      	mov	r5, r3
 801acb2:	4614      	mov	r4, r2
 801acb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801acb6:	6028      	str	r0, [r5, #0]
 801acb8:	6069      	str	r1, [r5, #4]
 801acba:	60aa      	str	r2, [r5, #8]
 801acbc:	60eb      	str	r3, [r5, #12]
 801acbe:	8823      	ldrh	r3, [r4, #0]
 801acc0:	78a2      	ldrb	r2, [r4, #2]
 801acc2:	822b      	strh	r3, [r5, #16]
 801acc4:	4613      	mov	r3, r2
 801acc6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801acce:	4a55      	ldr	r2, [pc, #340]	; (801ae24 <problem_fetch+0x19494>)
 801acd0:	461c      	mov	r4, r3
 801acd2:	4613      	mov	r3, r2
 801acd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801acd6:	6020      	str	r0, [r4, #0]
 801acd8:	6061      	str	r1, [r4, #4]
 801acda:	60a2      	str	r2, [r4, #8]
 801acdc:	881b      	ldrh	r3, [r3, #0]
 801acde:	81a3      	strh	r3, [r4, #12]
			break;
 801ace0:	f001 bd86 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 755 :
			strcpy(p->name,"FA");
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801acea:	4a4f      	ldr	r2, [pc, #316]	; (801ae28 <problem_fetch+0x19498>)
 801acec:	8811      	ldrh	r1, [r2, #0]
 801acee:	7892      	ldrb	r2, [r2, #2]
 801acf0:	8019      	strh	r1, [r3, #0]
 801acf2:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801acfa:	4a47      	ldr	r2, [pc, #284]	; (801ae18 <problem_fetch+0x19488>)
 801acfc:	6810      	ldr	r0, [r2, #0]
 801acfe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2206      	movs	r2, #6
 801ad04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,E,D");
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	33a4      	adds	r3, #164	; 0xa4
 801ad0a:	4a48      	ldr	r2, [pc, #288]	; (801ae2c <problem_fetch+0x1949c>)
 801ad0c:	461c      	mov	r4, r3
 801ad0e:	4613      	mov	r3, r2
 801ad10:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad12:	6020      	str	r0, [r4, #0]
 801ad14:	6061      	str	r1, [r4, #4]
 801ad16:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	3304      	adds	r3, #4
 801ad1c:	4a44      	ldr	r2, [pc, #272]	; (801ae30 <problem_fetch+0x194a0>)
 801ad1e:	461c      	mov	r4, r3
 801ad20:	4613      	mov	r3, r2
 801ad22:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad24:	6020      	str	r0, [r4, #0]
 801ad26:	6061      	str	r1, [r4, #4]
 801ad28:	60a2      	str	r2, [r4, #8]
 801ad2a:	881a      	ldrh	r2, [r3, #0]
 801ad2c:	789b      	ldrb	r3, [r3, #2]
 801ad2e:	81a2      	strh	r2, [r4, #12]
 801ad30:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ad38:	4a2c      	ldr	r2, [pc, #176]	; (801adec <problem_fetch+0x1945c>)
 801ad3a:	461c      	mov	r4, r3
 801ad3c:	4613      	mov	r3, r2
 801ad3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad40:	6020      	str	r0, [r4, #0]
 801ad42:	6061      	str	r1, [r4, #4]
 801ad44:	60a2      	str	r2, [r4, #8]
			break;
 801ad46:	f001 bd53 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 756 :
			strcpy(p->name,"BLACK HOLE");
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ad50:	4938      	ldr	r1, [pc, #224]	; (801ae34 <problem_fetch+0x194a4>)
 801ad52:	461a      	mov	r2, r3
 801ad54:	460b      	mov	r3, r1
 801ad56:	cb03      	ldmia	r3!, {r0, r1}
 801ad58:	6010      	str	r0, [r2, #0]
 801ad5a:	6051      	str	r1, [r2, #4]
 801ad5c:	8819      	ldrh	r1, [r3, #0]
 801ad5e:	789b      	ldrb	r3, [r3, #2]
 801ad60:	8111      	strh	r1, [r2, #8]
 801ad62:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad6a:	4a2b      	ldr	r2, [pc, #172]	; (801ae18 <problem_fetch+0x19488>)
 801ad6c:	6810      	ldr	r0, [r2, #0]
 801ad6e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	2207      	movs	r2, #7
 801ad74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,G,G,D");
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	33a4      	adds	r3, #164	; 0xa4
 801ad7a:	4a2f      	ldr	r2, [pc, #188]	; (801ae38 <problem_fetch+0x194a8>)
 801ad7c:	461c      	mov	r4, r3
 801ad7e:	4613      	mov	r3, r2
 801ad80:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad82:	6020      	str	r0, [r4, #0]
 801ad84:	6061      	str	r1, [r4, #4]
 801ad86:	60a2      	str	r2, [r4, #8]
 801ad88:	881b      	ldrh	r3, [r3, #0]
 801ad8a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,17,18");
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	3304      	adds	r3, #4
 801ad90:	4a2a      	ldr	r2, [pc, #168]	; (801ae3c <problem_fetch+0x194ac>)
 801ad92:	461d      	mov	r5, r3
 801ad94:	4614      	mov	r4, r2
 801ad96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad98:	6028      	str	r0, [r5, #0]
 801ad9a:	6069      	str	r1, [r5, #4]
 801ad9c:	60aa      	str	r2, [r5, #8]
 801ad9e:	60eb      	str	r3, [r5, #12]
 801ada0:	8823      	ldrh	r3, [r4, #0]
 801ada2:	78a2      	ldrb	r2, [r4, #2]
 801ada4:	822b      	strh	r3, [r5, #16]
 801ada6:	4613      	mov	r3, r2
 801ada8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801adb0:	4a1c      	ldr	r2, [pc, #112]	; (801ae24 <problem_fetch+0x19494>)
 801adb2:	461c      	mov	r4, r3
 801adb4:	4613      	mov	r3, r2
 801adb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801adb8:	6020      	str	r0, [r4, #0]
 801adba:	6061      	str	r1, [r4, #4]
 801adbc:	60a2      	str	r2, [r4, #8]
 801adbe:	881b      	ldrh	r3, [r3, #0]
 801adc0:	81a3      	strh	r3, [r4, #12]
			break;
 801adc2:	f001 bd15 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801adc6:	bf00      	nop
 801adc8:	0802c804 	.word	0x0802c804
 801adcc:	08023d30 	.word	0x08023d30
 801add0:	0802c80c 	.word	0x0802c80c
 801add4:	0802c818 	.word	0x0802c818
 801add8:	0802405c 	.word	0x0802405c
 801addc:	0802c824 	.word	0x0802c824
 801ade0:	08023c5c 	.word	0x08023c5c
 801ade4:	0802c834 	.word	0x0802c834
 801ade8:	0802c840 	.word	0x0802c840
 801adec:	08023f2c 	.word	0x08023f2c
 801adf0:	0802c850 	.word	0x0802c850
 801adf4:	0802c864 	.word	0x0802c864
 801adf8:	0802c874 	.word	0x0802c874
 801adfc:	08023c08 	.word	0x08023c08
 801ae00:	0802c888 	.word	0x0802c888
 801ae04:	08023c28 	.word	0x08023c28
 801ae08:	0802c894 	.word	0x0802c894
 801ae0c:	0802c8a0 	.word	0x0802c8a0
 801ae10:	08023b70 	.word	0x08023b70
 801ae14:	0802c8b0 	.word	0x0802c8b0
 801ae18:	08023b90 	.word	0x08023b90
 801ae1c:	0802c8b8 	.word	0x0802c8b8
 801ae20:	08029d04 	.word	0x08029d04
 801ae24:	08023d18 	.word	0x08023d18
 801ae28:	0802c8c8 	.word	0x0802c8c8
 801ae2c:	0802c8cc 	.word	0x0802c8cc
 801ae30:	08028630 	.word	0x08028630
 801ae34:	0802c8d8 	.word	0x0802c8d8
 801ae38:	0802c8e4 	.word	0x0802c8e4
 801ae3c:	0802c8f4 	.word	0x0802c8f4
		case 757 :
			strcpy(p->name,"MATCH GAME");
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ae46:	49ad      	ldr	r1, [pc, #692]	; (801b0fc <problem_fetch+0x1976c>)
 801ae48:	461a      	mov	r2, r3
 801ae4a:	460b      	mov	r3, r1
 801ae4c:	cb03      	ldmia	r3!, {r0, r1}
 801ae4e:	6010      	str	r0, [r2, #0]
 801ae50:	6051      	str	r1, [r2, #4]
 801ae52:	8819      	ldrh	r1, [r3, #0]
 801ae54:	789b      	ldrb	r3, [r3, #2]
 801ae56:	8111      	strh	r1, [r2, #8]
 801ae58:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ae60:	4aa7      	ldr	r2, [pc, #668]	; (801b100 <problem_fetch+0x19770>)
 801ae62:	6810      	ldr	r0, [r2, #0]
 801ae64:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2205      	movs	r2, #5
 801ae6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,G,I");
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	33a4      	adds	r3, #164	; 0xa4
 801ae70:	49a4      	ldr	r1, [pc, #656]	; (801b104 <problem_fetch+0x19774>)
 801ae72:	461a      	mov	r2, r3
 801ae74:	460b      	mov	r3, r1
 801ae76:	cb03      	ldmia	r3!, {r0, r1}
 801ae78:	6010      	str	r0, [r2, #0]
 801ae7a:	6051      	str	r1, [r2, #4]
 801ae7c:	881b      	ldrh	r3, [r3, #0]
 801ae7e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,14,18");
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	3304      	adds	r3, #4
 801ae84:	4aa0      	ldr	r2, [pc, #640]	; (801b108 <problem_fetch+0x19778>)
 801ae86:	461c      	mov	r4, r3
 801ae88:	4613      	mov	r3, r2
 801ae8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ae8c:	6020      	str	r0, [r4, #0]
 801ae8e:	6061      	str	r1, [r4, #4]
 801ae90:	60a2      	str	r2, [r4, #8]
 801ae92:	781b      	ldrb	r3, [r3, #0]
 801ae94:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ae9c:	499b      	ldr	r1, [pc, #620]	; (801b10c <problem_fetch+0x1977c>)
 801ae9e:	461a      	mov	r2, r3
 801aea0:	460b      	mov	r3, r1
 801aea2:	cb03      	ldmia	r3!, {r0, r1}
 801aea4:	6010      	str	r0, [r2, #0]
 801aea6:	6051      	str	r1, [r2, #4]
 801aea8:	881b      	ldrh	r3, [r3, #0]
 801aeaa:	8113      	strh	r3, [r2, #8]
			break;
 801aeac:	f001 bca0 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 758 :
			strcpy(p->name,"USE THE BIG ONES");
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aeb6:	4a96      	ldr	r2, [pc, #600]	; (801b110 <problem_fetch+0x19780>)
 801aeb8:	461d      	mov	r5, r3
 801aeba:	4614      	mov	r4, r2
 801aebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aebe:	6028      	str	r0, [r5, #0]
 801aec0:	6069      	str	r1, [r5, #4]
 801aec2:	60aa      	str	r2, [r5, #8]
 801aec4:	60eb      	str	r3, [r5, #12]
 801aec6:	7823      	ldrb	r3, [r4, #0]
 801aec8:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aed0:	4a8b      	ldr	r2, [pc, #556]	; (801b100 <problem_fetch+0x19770>)
 801aed2:	6810      	ldr	r0, [r2, #0]
 801aed4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	2207      	movs	r2, #7
 801aeda:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,C,D,A");
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	33a4      	adds	r3, #164	; 0xa4
 801aee0:	4a8c      	ldr	r2, [pc, #560]	; (801b114 <problem_fetch+0x19784>)
 801aee2:	461c      	mov	r4, r3
 801aee4:	4613      	mov	r3, r2
 801aee6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aee8:	6020      	str	r0, [r4, #0]
 801aeea:	6061      	str	r1, [r4, #4]
 801aeec:	60a2      	str	r2, [r4, #8]
 801aeee:	881b      	ldrh	r3, [r3, #0]
 801aef0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,11,13,15,18");
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	3304      	adds	r3, #4
 801aef6:	4a88      	ldr	r2, [pc, #544]	; (801b118 <problem_fetch+0x19788>)
 801aef8:	461d      	mov	r5, r3
 801aefa:	4614      	mov	r4, r2
 801aefc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aefe:	6028      	str	r0, [r5, #0]
 801af00:	6069      	str	r1, [r5, #4]
 801af02:	60aa      	str	r2, [r5, #8]
 801af04:	60eb      	str	r3, [r5, #12]
 801af06:	8823      	ldrh	r3, [r4, #0]
 801af08:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801af10:	4a82      	ldr	r2, [pc, #520]	; (801b11c <problem_fetch+0x1978c>)
 801af12:	461c      	mov	r4, r3
 801af14:	4613      	mov	r3, r2
 801af16:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af18:	6020      	str	r0, [r4, #0]
 801af1a:	6061      	str	r1, [r4, #4]
 801af1c:	60a2      	str	r2, [r4, #8]
 801af1e:	881b      	ldrh	r3, [r3, #0]
 801af20:	81a3      	strh	r3, [r4, #12]
			break;
 801af22:	f001 bc65 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 759 :
			strcpy(p->name,"KANG MINA IOI");
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af2c:	4a7c      	ldr	r2, [pc, #496]	; (801b120 <problem_fetch+0x19790>)
 801af2e:	461c      	mov	r4, r3
 801af30:	4613      	mov	r3, r2
 801af32:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af34:	6020      	str	r0, [r4, #0]
 801af36:	6061      	str	r1, [r4, #4]
 801af38:	60a2      	str	r2, [r4, #8]
 801af3a:	881b      	ldrh	r3, [r3, #0]
 801af3c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af44:	4a77      	ldr	r2, [pc, #476]	; (801b124 <problem_fetch+0x19794>)
 801af46:	8811      	ldrh	r1, [r2, #0]
 801af48:	7892      	ldrb	r2, [r2, #2]
 801af4a:	8019      	strh	r1, [r3, #0]
 801af4c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2208      	movs	r2, #8
 801af52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,B,A,D,E,I");
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	33a4      	adds	r3, #164	; 0xa4
 801af58:	4a73      	ldr	r2, [pc, #460]	; (801b128 <problem_fetch+0x19798>)
 801af5a:	461c      	mov	r4, r3
 801af5c:	4615      	mov	r5, r2
 801af5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af60:	6020      	str	r0, [r4, #0]
 801af62:	6061      	str	r1, [r4, #4]
 801af64:	60a2      	str	r2, [r4, #8]
 801af66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,15,16,18");
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	3304      	adds	r3, #4
 801af6c:	4a6f      	ldr	r2, [pc, #444]	; (801b12c <problem_fetch+0x1979c>)
 801af6e:	461d      	mov	r5, r3
 801af70:	4614      	mov	r4, r2
 801af72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af74:	6028      	str	r0, [r5, #0]
 801af76:	6069      	str	r1, [r5, #4]
 801af78:	60aa      	str	r2, [r5, #8]
 801af7a:	60eb      	str	r3, [r5, #12]
 801af7c:	6820      	ldr	r0, [r4, #0]
 801af7e:	6128      	str	r0, [r5, #16]
 801af80:	88a3      	ldrh	r3, [r4, #4]
 801af82:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801af8a:	4a69      	ldr	r2, [pc, #420]	; (801b130 <problem_fetch+0x197a0>)
 801af8c:	461c      	mov	r4, r3
 801af8e:	4615      	mov	r5, r2
 801af90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af92:	6020      	str	r0, [r4, #0]
 801af94:	6061      	str	r1, [r4, #4]
 801af96:	60a2      	str	r2, [r4, #8]
 801af98:	60e3      	str	r3, [r4, #12]
			break;
 801af9a:	f001 bc29 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 760 :
			strcpy(p->name,"ACG21");
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801afa4:	4a63      	ldr	r2, [pc, #396]	; (801b134 <problem_fetch+0x197a4>)
 801afa6:	6810      	ldr	r0, [r2, #0]
 801afa8:	6018      	str	r0, [r3, #0]
 801afaa:	8892      	ldrh	r2, [r2, #4]
 801afac:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B");
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801afb4:	4a60      	ldr	r2, [pc, #384]	; (801b138 <problem_fetch+0x197a8>)
 801afb6:	8811      	ldrh	r1, [r2, #0]
 801afb8:	7892      	ldrb	r2, [r2, #2]
 801afba:	8019      	strh	r1, [r3, #0]
 801afbc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	2208      	movs	r2, #8
 801afc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,G,B,E,C,A");
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	33a4      	adds	r3, #164	; 0xa4
 801afc8:	4a5c      	ldr	r2, [pc, #368]	; (801b13c <problem_fetch+0x197ac>)
 801afca:	461c      	mov	r4, r3
 801afcc:	4615      	mov	r5, r2
 801afce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afd0:	6020      	str	r0, [r4, #0]
 801afd2:	6061      	str	r1, [r4, #4]
 801afd4:	60a2      	str	r2, [r4, #8]
 801afd6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,10,10,14,16,18");
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	3304      	adds	r3, #4
 801afdc:	4a58      	ldr	r2, [pc, #352]	; (801b140 <problem_fetch+0x197b0>)
 801afde:	461d      	mov	r5, r3
 801afe0:	4614      	mov	r4, r2
 801afe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801afe4:	6028      	str	r0, [r5, #0]
 801afe6:	6069      	str	r1, [r5, #4]
 801afe8:	60aa      	str	r2, [r5, #8]
 801afea:	60eb      	str	r3, [r5, #12]
 801afec:	6820      	ldr	r0, [r4, #0]
 801afee:	6128      	str	r0, [r5, #16]
 801aff0:	88a3      	ldrh	r3, [r4, #4]
 801aff2:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801affa:	4a4d      	ldr	r2, [pc, #308]	; (801b130 <problem_fetch+0x197a0>)
 801affc:	461c      	mov	r4, r3
 801affe:	4615      	mov	r5, r2
 801b000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b002:	6020      	str	r0, [r4, #0]
 801b004:	6061      	str	r1, [r4, #4]
 801b006:	60a2      	str	r2, [r4, #8]
 801b008:	60e3      	str	r3, [r4, #12]
			break;
 801b00a:	f001 bbf1 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 761 :
			strcpy(p->name,"LANKY BASTARD");
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b014:	4a4b      	ldr	r2, [pc, #300]	; (801b144 <problem_fetch+0x197b4>)
 801b016:	461c      	mov	r4, r3
 801b018:	4613      	mov	r3, r2
 801b01a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b01c:	6020      	str	r0, [r4, #0]
 801b01e:	6061      	str	r1, [r4, #4]
 801b020:	60a2      	str	r2, [r4, #8]
 801b022:	881b      	ldrh	r3, [r3, #0]
 801b024:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b02c:	4a46      	ldr	r2, [pc, #280]	; (801b148 <problem_fetch+0x197b8>)
 801b02e:	8811      	ldrh	r1, [r2, #0]
 801b030:	7892      	ldrb	r2, [r2, #2]
 801b032:	8019      	strh	r1, [r3, #0]
 801b034:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	2207      	movs	r2, #7
 801b03a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,E,D");
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	33a4      	adds	r3, #164	; 0xa4
 801b040:	4a42      	ldr	r2, [pc, #264]	; (801b14c <problem_fetch+0x197bc>)
 801b042:	461c      	mov	r4, r3
 801b044:	4613      	mov	r3, r2
 801b046:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b048:	6020      	str	r0, [r4, #0]
 801b04a:	6061      	str	r1, [r4, #4]
 801b04c:	60a2      	str	r2, [r4, #8]
 801b04e:	881b      	ldrh	r3, [r3, #0]
 801b050:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,16,18");
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	3304      	adds	r3, #4
 801b056:	4a3e      	ldr	r2, [pc, #248]	; (801b150 <problem_fetch+0x197c0>)
 801b058:	461d      	mov	r5, r3
 801b05a:	4614      	mov	r4, r2
 801b05c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b05e:	6028      	str	r0, [r5, #0]
 801b060:	6069      	str	r1, [r5, #4]
 801b062:	60aa      	str	r2, [r5, #8]
 801b064:	60eb      	str	r3, [r5, #12]
 801b066:	8823      	ldrh	r3, [r4, #0]
 801b068:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b070:	4a2a      	ldr	r2, [pc, #168]	; (801b11c <problem_fetch+0x1978c>)
 801b072:	461c      	mov	r4, r3
 801b074:	4613      	mov	r3, r2
 801b076:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b078:	6020      	str	r0, [r4, #0]
 801b07a:	6061      	str	r1, [r4, #4]
 801b07c:	60a2      	str	r2, [r4, #8]
 801b07e:	881b      	ldrh	r3, [r3, #0]
 801b080:	81a3      	strh	r3, [r4, #12]
			break;
 801b082:	f001 bbb5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 762 :
			strcpy(p->name,"TESS WIDE");
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b08c:	4931      	ldr	r1, [pc, #196]	; (801b154 <problem_fetch+0x197c4>)
 801b08e:	461a      	mov	r2, r3
 801b090:	460b      	mov	r3, r1
 801b092:	cb03      	ldmia	r3!, {r0, r1}
 801b094:	6010      	str	r0, [r2, #0]
 801b096:	6051      	str	r1, [r2, #4]
 801b098:	881b      	ldrh	r3, [r3, #0]
 801b09a:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b0a2:	4a29      	ldr	r2, [pc, #164]	; (801b148 <problem_fetch+0x197b8>)
 801b0a4:	8811      	ldrh	r1, [r2, #0]
 801b0a6:	7892      	ldrb	r2, [r2, #2]
 801b0a8:	8019      	strh	r1, [r3, #0]
 801b0aa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2207      	movs	r2, #7
 801b0b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,C,D,D");
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	33a4      	adds	r3, #164	; 0xa4
 801b0b6:	4a28      	ldr	r2, [pc, #160]	; (801b158 <problem_fetch+0x197c8>)
 801b0b8:	461c      	mov	r4, r3
 801b0ba:	4613      	mov	r3, r2
 801b0bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0be:	6020      	str	r0, [r4, #0]
 801b0c0:	6061      	str	r1, [r4, #4]
 801b0c2:	60a2      	str	r2, [r4, #8]
 801b0c4:	881b      	ldrh	r3, [r3, #0]
 801b0c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,15,18");
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	3304      	adds	r3, #4
 801b0cc:	4a23      	ldr	r2, [pc, #140]	; (801b15c <problem_fetch+0x197cc>)
 801b0ce:	461d      	mov	r5, r3
 801b0d0:	4614      	mov	r4, r2
 801b0d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0d4:	6028      	str	r0, [r5, #0]
 801b0d6:	6069      	str	r1, [r5, #4]
 801b0d8:	60aa      	str	r2, [r5, #8]
 801b0da:	60eb      	str	r3, [r5, #12]
 801b0dc:	8823      	ldrh	r3, [r4, #0]
 801b0de:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b0e6:	4a1e      	ldr	r2, [pc, #120]	; (801b160 <problem_fetch+0x197d0>)
 801b0e8:	461c      	mov	r4, r3
 801b0ea:	4613      	mov	r3, r2
 801b0ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b0ee:	6020      	str	r0, [r4, #0]
 801b0f0:	6061      	str	r1, [r4, #4]
 801b0f2:	60a2      	str	r2, [r4, #8]
 801b0f4:	881b      	ldrh	r3, [r3, #0]
 801b0f6:	81a3      	strh	r3, [r4, #12]
			break;
 801b0f8:	f001 bb7a 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801b0fc:	0802c908 	.word	0x0802c908
 801b100:	08023b90 	.word	0x08023b90
 801b104:	0802c914 	.word	0x0802c914
 801b108:	0802c920 	.word	0x0802c920
 801b10c:	08024270 	.word	0x08024270
 801b110:	0802c930 	.word	0x0802c930
 801b114:	0802c944 	.word	0x0802c944
 801b118:	0802c954 	.word	0x0802c954
 801b11c:	08023d18 	.word	0x08023d18
 801b120:	0802c968 	.word	0x0802c968
 801b124:	08023b50 	.word	0x08023b50
 801b128:	0802c978 	.word	0x0802c978
 801b12c:	0802c988 	.word	0x0802c988
 801b130:	08023da0 	.word	0x08023da0
 801b134:	0802c9a0 	.word	0x0802c9a0
 801b138:	08024288 	.word	0x08024288
 801b13c:	0802c9a8 	.word	0x0802c9a8
 801b140:	0802c9b8 	.word	0x0802c9b8
 801b144:	0802c9d0 	.word	0x0802c9d0
 801b148:	08023c5c 	.word	0x08023c5c
 801b14c:	0802c9e0 	.word	0x0802c9e0
 801b150:	0802c9f0 	.word	0x0802c9f0
 801b154:	0802ca04 	.word	0x0802ca04
 801b158:	0802ca10 	.word	0x0802ca10
 801b15c:	0802ca20 	.word	0x0802ca20
 801b160:	08023c08 	.word	0x08023c08
		case 763 :
			strcpy(p->name,"ACG19");
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b16a:	4abb      	ldr	r2, [pc, #748]	; (801b458 <problem_fetch+0x19ac8>)
 801b16c:	6810      	ldr	r0, [r2, #0]
 801b16e:	6018      	str	r0, [r3, #0]
 801b170:	8892      	ldrh	r2, [r2, #4]
 801b172:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b17a:	4ab8      	ldr	r2, [pc, #736]	; (801b45c <problem_fetch+0x19acc>)
 801b17c:	6810      	ldr	r0, [r2, #0]
 801b17e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	2208      	movs	r2, #8
 801b184:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,B,E,E,I,I");
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	33a4      	adds	r3, #164	; 0xa4
 801b18a:	4ab5      	ldr	r2, [pc, #724]	; (801b460 <problem_fetch+0x19ad0>)
 801b18c:	461c      	mov	r4, r3
 801b18e:	4615      	mov	r5, r2
 801b190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b192:	6020      	str	r0, [r4, #0]
 801b194:	6061      	str	r1, [r4, #4]
 801b196:	60a2      	str	r2, [r4, #8]
 801b198:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,12,14,14,18");
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	3304      	adds	r3, #4
 801b19e:	4ab1      	ldr	r2, [pc, #708]	; (801b464 <problem_fetch+0x19ad4>)
 801b1a0:	461d      	mov	r5, r3
 801b1a2:	4614      	mov	r4, r2
 801b1a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b1a6:	6028      	str	r0, [r5, #0]
 801b1a8:	6069      	str	r1, [r5, #4]
 801b1aa:	60aa      	str	r2, [r5, #8]
 801b1ac:	60eb      	str	r3, [r5, #12]
 801b1ae:	6820      	ldr	r0, [r4, #0]
 801b1b0:	6128      	str	r0, [r5, #16]
 801b1b2:	7923      	ldrb	r3, [r4, #4]
 801b1b4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b1bc:	4aaa      	ldr	r2, [pc, #680]	; (801b468 <problem_fetch+0x19ad8>)
 801b1be:	461c      	mov	r4, r3
 801b1c0:	4615      	mov	r5, r2
 801b1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1c4:	6020      	str	r0, [r4, #0]
 801b1c6:	6061      	str	r1, [r4, #4]
 801b1c8:	60a2      	str	r2, [r4, #8]
 801b1ca:	60e3      	str	r3, [r4, #12]
			break;
 801b1cc:	f001 bb10 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 764 :
			strcpy(p->name,"BLACK CAT'S");
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b1d6:	4aa5      	ldr	r2, [pc, #660]	; (801b46c <problem_fetch+0x19adc>)
 801b1d8:	461c      	mov	r4, r3
 801b1da:	4613      	mov	r3, r2
 801b1dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b1de:	6020      	str	r0, [r4, #0]
 801b1e0:	6061      	str	r1, [r4, #4]
 801b1e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b1ea:	4aa1      	ldr	r2, [pc, #644]	; (801b470 <problem_fetch+0x19ae0>)
 801b1ec:	6810      	ldr	r0, [r2, #0]
 801b1ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	2206      	movs	r2, #6
 801b1f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,J,I,I");
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	33a4      	adds	r3, #164	; 0xa4
 801b1fa:	4a9e      	ldr	r2, [pc, #632]	; (801b474 <problem_fetch+0x19ae4>)
 801b1fc:	461c      	mov	r4, r3
 801b1fe:	4613      	mov	r3, r2
 801b200:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b202:	6020      	str	r0, [r4, #0]
 801b204:	6061      	str	r1, [r4, #4]
 801b206:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	3304      	adds	r3, #4
 801b20c:	4a9a      	ldr	r2, [pc, #616]	; (801b478 <problem_fetch+0x19ae8>)
 801b20e:	461c      	mov	r4, r3
 801b210:	4615      	mov	r5, r2
 801b212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b214:	6020      	str	r0, [r4, #0]
 801b216:	6061      	str	r1, [r4, #4]
 801b218:	60a2      	str	r2, [r4, #8]
 801b21a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b222:	4a96      	ldr	r2, [pc, #600]	; (801b47c <problem_fetch+0x19aec>)
 801b224:	461c      	mov	r4, r3
 801b226:	4613      	mov	r3, r2
 801b228:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b22a:	6020      	str	r0, [r4, #0]
 801b22c:	6061      	str	r1, [r4, #4]
 801b22e:	60a2      	str	r2, [r4, #8]
			break;
 801b230:	f001 bade 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 765 :
			strcpy(p->name,"SUBMARINE");
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b23a:	4991      	ldr	r1, [pc, #580]	; (801b480 <problem_fetch+0x19af0>)
 801b23c:	461a      	mov	r2, r3
 801b23e:	460b      	mov	r3, r1
 801b240:	cb03      	ldmia	r3!, {r0, r1}
 801b242:	6010      	str	r0, [r2, #0]
 801b244:	6051      	str	r1, [r2, #4]
 801b246:	881b      	ldrh	r3, [r3, #0]
 801b248:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b250:	4a8c      	ldr	r2, [pc, #560]	; (801b484 <problem_fetch+0x19af4>)
 801b252:	6810      	ldr	r0, [r2, #0]
 801b254:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	2206      	movs	r2, #6
 801b25a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	33a4      	adds	r3, #164	; 0xa4
 801b260:	4a89      	ldr	r2, [pc, #548]	; (801b488 <problem_fetch+0x19af8>)
 801b262:	461c      	mov	r4, r3
 801b264:	4613      	mov	r3, r2
 801b266:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b268:	6020      	str	r0, [r4, #0]
 801b26a:	6061      	str	r1, [r4, #4]
 801b26c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,15,18");
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	3304      	adds	r3, #4
 801b272:	4a86      	ldr	r2, [pc, #536]	; (801b48c <problem_fetch+0x19afc>)
 801b274:	461c      	mov	r4, r3
 801b276:	4615      	mov	r5, r2
 801b278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b27a:	6020      	str	r0, [r4, #0]
 801b27c:	6061      	str	r1, [r4, #4]
 801b27e:	60a2      	str	r2, [r4, #8]
 801b280:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b288:	4a7c      	ldr	r2, [pc, #496]	; (801b47c <problem_fetch+0x19aec>)
 801b28a:	461c      	mov	r4, r3
 801b28c:	4613      	mov	r3, r2
 801b28e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b290:	6020      	str	r0, [r4, #0]
 801b292:	6061      	str	r1, [r4, #4]
 801b294:	60a2      	str	r2, [r4, #8]
			break;
 801b296:	f001 baab 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 766 :
			strcpy(p->name,"LINK TO THE PAST");
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b2a0:	4a7b      	ldr	r2, [pc, #492]	; (801b490 <problem_fetch+0x19b00>)
 801b2a2:	461d      	mov	r5, r3
 801b2a4:	4614      	mov	r4, r2
 801b2a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2a8:	6028      	str	r0, [r5, #0]
 801b2aa:	6069      	str	r1, [r5, #4]
 801b2ac:	60aa      	str	r2, [r5, #8]
 801b2ae:	60eb      	str	r3, [r5, #12]
 801b2b0:	7823      	ldrb	r3, [r4, #0]
 801b2b2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b2ba:	4a76      	ldr	r2, [pc, #472]	; (801b494 <problem_fetch+0x19b04>)
 801b2bc:	8811      	ldrh	r1, [r2, #0]
 801b2be:	7892      	ldrb	r2, [r2, #2]
 801b2c0:	8019      	strh	r1, [r3, #0]
 801b2c2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	2207      	movs	r2, #7
 801b2c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,E,E,H,D");
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	33a4      	adds	r3, #164	; 0xa4
 801b2ce:	4a72      	ldr	r2, [pc, #456]	; (801b498 <problem_fetch+0x19b08>)
 801b2d0:	461c      	mov	r4, r3
 801b2d2:	4613      	mov	r3, r2
 801b2d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b2d6:	6020      	str	r0, [r4, #0]
 801b2d8:	6061      	str	r1, [r4, #4]
 801b2da:	60a2      	str	r2, [r4, #8]
 801b2dc:	881b      	ldrh	r3, [r3, #0]
 801b2de:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	3304      	adds	r3, #4
 801b2e4:	4a6d      	ldr	r2, [pc, #436]	; (801b49c <problem_fetch+0x19b0c>)
 801b2e6:	461d      	mov	r5, r3
 801b2e8:	4614      	mov	r4, r2
 801b2ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2ec:	6028      	str	r0, [r5, #0]
 801b2ee:	6069      	str	r1, [r5, #4]
 801b2f0:	60aa      	str	r2, [r5, #8]
 801b2f2:	60eb      	str	r3, [r5, #12]
 801b2f4:	8823      	ldrh	r3, [r4, #0]
 801b2f6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b2fe:	4a68      	ldr	r2, [pc, #416]	; (801b4a0 <problem_fetch+0x19b10>)
 801b300:	461c      	mov	r4, r3
 801b302:	4613      	mov	r3, r2
 801b304:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b306:	6020      	str	r0, [r4, #0]
 801b308:	6061      	str	r1, [r4, #4]
 801b30a:	60a2      	str	r2, [r4, #8]
 801b30c:	881b      	ldrh	r3, [r3, #0]
 801b30e:	81a3      	strh	r3, [r4, #12]
			break;
 801b310:	f001 ba6e 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 767 :
			strcpy(p->name,"SALAD NIGHTS");
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b31a:	4a62      	ldr	r2, [pc, #392]	; (801b4a4 <problem_fetch+0x19b14>)
 801b31c:	461c      	mov	r4, r3
 801b31e:	4613      	mov	r3, r2
 801b320:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b322:	6020      	str	r0, [r4, #0]
 801b324:	6061      	str	r1, [r4, #4]
 801b326:	60a2      	str	r2, [r4, #8]
 801b328:	781b      	ldrb	r3, [r3, #0]
 801b32a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b332:	4a5d      	ldr	r2, [pc, #372]	; (801b4a8 <problem_fetch+0x19b18>)
 801b334:	6810      	ldr	r0, [r2, #0]
 801b336:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b338:	687b      	ldr	r3, [r7, #4]
 801b33a:	2208      	movs	r2, #8
 801b33c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,K,H,I,E,D");
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	33a4      	adds	r3, #164	; 0xa4
 801b342:	4a5a      	ldr	r2, [pc, #360]	; (801b4ac <problem_fetch+0x19b1c>)
 801b344:	461c      	mov	r4, r3
 801b346:	4615      	mov	r5, r2
 801b348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b34a:	6020      	str	r0, [r4, #0]
 801b34c:	6061      	str	r1, [r4, #4]
 801b34e:	60a2      	str	r2, [r4, #8]
 801b350:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,14,18");
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	3304      	adds	r3, #4
 801b356:	4a56      	ldr	r2, [pc, #344]	; (801b4b0 <problem_fetch+0x19b20>)
 801b358:	461d      	mov	r5, r3
 801b35a:	4614      	mov	r4, r2
 801b35c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b35e:	6028      	str	r0, [r5, #0]
 801b360:	6069      	str	r1, [r5, #4]
 801b362:	60aa      	str	r2, [r5, #8]
 801b364:	60eb      	str	r3, [r5, #12]
 801b366:	6820      	ldr	r0, [r4, #0]
 801b368:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b370:	4a3d      	ldr	r2, [pc, #244]	; (801b468 <problem_fetch+0x19ad8>)
 801b372:	461c      	mov	r4, r3
 801b374:	4615      	mov	r5, r2
 801b376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b378:	6020      	str	r0, [r4, #0]
 801b37a:	6061      	str	r1, [r4, #4]
 801b37c:	60a2      	str	r2, [r4, #8]
 801b37e:	60e3      	str	r3, [r4, #12]
			break;
 801b380:	f001 ba36 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 768 :
			strcpy(p->name,"ONE");
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b38a:	4a4a      	ldr	r2, [pc, #296]	; (801b4b4 <problem_fetch+0x19b24>)
 801b38c:	6810      	ldr	r0, [r2, #0]
 801b38e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b396:	4a31      	ldr	r2, [pc, #196]	; (801b45c <problem_fetch+0x19acc>)
 801b398:	6810      	ldr	r0, [r2, #0]
 801b39a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	2206      	movs	r2, #6
 801b3a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,I");
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	33a4      	adds	r3, #164	; 0xa4
 801b3a6:	4a44      	ldr	r2, [pc, #272]	; (801b4b8 <problem_fetch+0x19b28>)
 801b3a8:	461c      	mov	r4, r3
 801b3aa:	4613      	mov	r3, r2
 801b3ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3ae:	6020      	str	r0, [r4, #0]
 801b3b0:	6061      	str	r1, [r4, #4]
 801b3b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	3304      	adds	r3, #4
 801b3b8:	4a40      	ldr	r2, [pc, #256]	; (801b4bc <problem_fetch+0x19b2c>)
 801b3ba:	461c      	mov	r4, r3
 801b3bc:	4613      	mov	r3, r2
 801b3be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3c0:	6020      	str	r0, [r4, #0]
 801b3c2:	6061      	str	r1, [r4, #4]
 801b3c4:	60a2      	str	r2, [r4, #8]
 801b3c6:	881a      	ldrh	r2, [r3, #0]
 801b3c8:	789b      	ldrb	r3, [r3, #2]
 801b3ca:	81a2      	strh	r2, [r4, #12]
 801b3cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b3d4:	4a29      	ldr	r2, [pc, #164]	; (801b47c <problem_fetch+0x19aec>)
 801b3d6:	461c      	mov	r4, r3
 801b3d8:	4613      	mov	r3, r2
 801b3da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3dc:	6020      	str	r0, [r4, #0]
 801b3de:	6061      	str	r1, [r4, #4]
 801b3e0:	60a2      	str	r2, [r4, #8]
			break;
 801b3e2:	f001 ba05 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 769 :
			strcpy(p->name,"DRAGONS DEN");
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b3ec:	4a34      	ldr	r2, [pc, #208]	; (801b4c0 <problem_fetch+0x19b30>)
 801b3ee:	461c      	mov	r4, r3
 801b3f0:	4613      	mov	r3, r2
 801b3f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3f4:	6020      	str	r0, [r4, #0]
 801b3f6:	6061      	str	r1, [r4, #4]
 801b3f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b400:	4a16      	ldr	r2, [pc, #88]	; (801b45c <problem_fetch+0x19acc>)
 801b402:	6810      	ldr	r0, [r2, #0]
 801b404:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	2207      	movs	r2, #7
 801b40a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,J,G,I");
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	33a4      	adds	r3, #164	; 0xa4
 801b410:	4a2c      	ldr	r2, [pc, #176]	; (801b4c4 <problem_fetch+0x19b34>)
 801b412:	461c      	mov	r4, r3
 801b414:	4613      	mov	r3, r2
 801b416:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b418:	6020      	str	r0, [r4, #0]
 801b41a:	6061      	str	r1, [r4, #4]
 801b41c:	60a2      	str	r2, [r4, #8]
 801b41e:	881b      	ldrh	r3, [r3, #0]
 801b420:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,15,18");
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	3304      	adds	r3, #4
 801b426:	4a28      	ldr	r2, [pc, #160]	; (801b4c8 <problem_fetch+0x19b38>)
 801b428:	461d      	mov	r5, r3
 801b42a:	4614      	mov	r4, r2
 801b42c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b42e:	6028      	str	r0, [r5, #0]
 801b430:	6069      	str	r1, [r5, #4]
 801b432:	60aa      	str	r2, [r5, #8]
 801b434:	60eb      	str	r3, [r5, #12]
 801b436:	8823      	ldrh	r3, [r4, #0]
 801b438:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b440:	4a17      	ldr	r2, [pc, #92]	; (801b4a0 <problem_fetch+0x19b10>)
 801b442:	461c      	mov	r4, r3
 801b444:	4613      	mov	r3, r2
 801b446:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b448:	6020      	str	r0, [r4, #0]
 801b44a:	6061      	str	r1, [r4, #4]
 801b44c:	60a2      	str	r2, [r4, #8]
 801b44e:	881b      	ldrh	r3, [r3, #0]
 801b450:	81a3      	strh	r3, [r4, #12]
			break;
 801b452:	f001 b9cd 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801b456:	bf00      	nop
 801b458:	0802ca34 	.word	0x0802ca34
 801b45c:	08023b90 	.word	0x08023b90
 801b460:	0802ca3c 	.word	0x0802ca3c
 801b464:	0802ca4c 	.word	0x0802ca4c
 801b468:	08023cb4 	.word	0x08023cb4
 801b46c:	0802ca64 	.word	0x0802ca64
 801b470:	0802419c 	.word	0x0802419c
 801b474:	0802ca70 	.word	0x0802ca70
 801b478:	08029190 	.word	0x08029190
 801b47c:	08023f2c 	.word	0x08023f2c
 801b480:	0802ca7c 	.word	0x0802ca7c
 801b484:	08023ccc 	.word	0x08023ccc
 801b488:	0802b62c 	.word	0x0802b62c
 801b48c:	0802ca88 	.word	0x0802ca88
 801b490:	0802ca98 	.word	0x0802ca98
 801b494:	08023b50 	.word	0x08023b50
 801b498:	0802caac 	.word	0x0802caac
 801b49c:	08024dd0 	.word	0x08024dd0
 801b4a0:	08023c08 	.word	0x08023c08
 801b4a4:	0802cabc 	.word	0x0802cabc
 801b4a8:	08023d30 	.word	0x08023d30
 801b4ac:	0802cacc 	.word	0x0802cacc
 801b4b0:	0802cadc 	.word	0x0802cadc
 801b4b4:	0802caf0 	.word	0x0802caf0
 801b4b8:	0802caf4 	.word	0x0802caf4
 801b4bc:	08028630 	.word	0x08028630
 801b4c0:	0802cb00 	.word	0x0802cb00
 801b4c4:	0802cb0c 	.word	0x0802cb0c
 801b4c8:	0802cb1c 	.word	0x0802cb1c
		case 770 :
			strcpy(p->name,"GOOD TIMES");
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b4d2:	49c2      	ldr	r1, [pc, #776]	; (801b7dc <problem_fetch+0x19e4c>)
 801b4d4:	461a      	mov	r2, r3
 801b4d6:	460b      	mov	r3, r1
 801b4d8:	cb03      	ldmia	r3!, {r0, r1}
 801b4da:	6010      	str	r0, [r2, #0]
 801b4dc:	6051      	str	r1, [r2, #4]
 801b4de:	8819      	ldrh	r1, [r3, #0]
 801b4e0:	789b      	ldrb	r3, [r3, #2]
 801b4e2:	8111      	strh	r1, [r2, #8]
 801b4e4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b4ec:	4abc      	ldr	r2, [pc, #752]	; (801b7e0 <problem_fetch+0x19e50>)
 801b4ee:	6810      	ldr	r0, [r2, #0]
 801b4f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	2207      	movs	r2, #7
 801b4f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,C,D,A");
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	33a4      	adds	r3, #164	; 0xa4
 801b4fc:	4ab9      	ldr	r2, [pc, #740]	; (801b7e4 <problem_fetch+0x19e54>)
 801b4fe:	461c      	mov	r4, r3
 801b500:	4613      	mov	r3, r2
 801b502:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b504:	6020      	str	r0, [r4, #0]
 801b506:	6061      	str	r1, [r4, #4]
 801b508:	60a2      	str	r2, [r4, #8]
 801b50a:	881b      	ldrh	r3, [r3, #0]
 801b50c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18");
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	3304      	adds	r3, #4
 801b512:	4ab5      	ldr	r2, [pc, #724]	; (801b7e8 <problem_fetch+0x19e58>)
 801b514:	461d      	mov	r5, r3
 801b516:	4614      	mov	r4, r2
 801b518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b51a:	6028      	str	r0, [r5, #0]
 801b51c:	6069      	str	r1, [r5, #4]
 801b51e:	60aa      	str	r2, [r5, #8]
 801b520:	60eb      	str	r3, [r5, #12]
 801b522:	8823      	ldrh	r3, [r4, #0]
 801b524:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b52c:	4aaf      	ldr	r2, [pc, #700]	; (801b7ec <problem_fetch+0x19e5c>)
 801b52e:	461c      	mov	r4, r3
 801b530:	4613      	mov	r3, r2
 801b532:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b534:	6020      	str	r0, [r4, #0]
 801b536:	6061      	str	r1, [r4, #4]
 801b538:	60a2      	str	r2, [r4, #8]
 801b53a:	881b      	ldrh	r3, [r3, #0]
 801b53c:	81a3      	strh	r3, [r4, #12]
			break;
 801b53e:	f001 b957 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 771 :
			strcpy(p->name,"NOT TOO BAD");
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b548:	4aa9      	ldr	r2, [pc, #676]	; (801b7f0 <problem_fetch+0x19e60>)
 801b54a:	461c      	mov	r4, r3
 801b54c:	4613      	mov	r3, r2
 801b54e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b550:	6020      	str	r0, [r4, #0]
 801b552:	6061      	str	r1, [r4, #4]
 801b554:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b55c:	4aa0      	ldr	r2, [pc, #640]	; (801b7e0 <problem_fetch+0x19e50>)
 801b55e:	6810      	ldr	r0, [r2, #0]
 801b560:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	2208      	movs	r2, #8
 801b566:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,D,I,E,D");
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	33a4      	adds	r3, #164	; 0xa4
 801b56c:	4aa1      	ldr	r2, [pc, #644]	; (801b7f4 <problem_fetch+0x19e64>)
 801b56e:	461c      	mov	r4, r3
 801b570:	4615      	mov	r5, r2
 801b572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b574:	6020      	str	r0, [r4, #0]
 801b576:	6061      	str	r1, [r4, #4]
 801b578:	60a2      	str	r2, [r4, #8]
 801b57a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,11,14,16,18");
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	3304      	adds	r3, #4
 801b580:	4a9d      	ldr	r2, [pc, #628]	; (801b7f8 <problem_fetch+0x19e68>)
 801b582:	461d      	mov	r5, r3
 801b584:	4614      	mov	r4, r2
 801b586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b588:	6028      	str	r0, [r5, #0]
 801b58a:	6069      	str	r1, [r5, #4]
 801b58c:	60aa      	str	r2, [r5, #8]
 801b58e:	60eb      	str	r3, [r5, #12]
 801b590:	6820      	ldr	r0, [r4, #0]
 801b592:	6128      	str	r0, [r5, #16]
 801b594:	7923      	ldrb	r3, [r4, #4]
 801b596:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b59e:	4a97      	ldr	r2, [pc, #604]	; (801b7fc <problem_fetch+0x19e6c>)
 801b5a0:	461c      	mov	r4, r3
 801b5a2:	4615      	mov	r5, r2
 801b5a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5a6:	6020      	str	r0, [r4, #0]
 801b5a8:	6061      	str	r1, [r4, #4]
 801b5aa:	60a2      	str	r2, [r4, #8]
 801b5ac:	60e3      	str	r3, [r4, #12]
			break;
 801b5ae:	f001 b91f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 772 :
			strcpy(p->name,"VERITGO");
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b5b8:	4991      	ldr	r1, [pc, #580]	; (801b800 <problem_fetch+0x19e70>)
 801b5ba:	461a      	mov	r2, r3
 801b5bc:	460b      	mov	r3, r1
 801b5be:	cb03      	ldmia	r3!, {r0, r1}
 801b5c0:	6010      	str	r0, [r2, #0]
 801b5c2:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b5ca:	4a85      	ldr	r2, [pc, #532]	; (801b7e0 <problem_fetch+0x19e50>)
 801b5cc:	6810      	ldr	r0, [r2, #0]
 801b5ce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	2206      	movs	r2, #6
 801b5d4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,D");
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	33a4      	adds	r3, #164	; 0xa4
 801b5da:	4a8a      	ldr	r2, [pc, #552]	; (801b804 <problem_fetch+0x19e74>)
 801b5dc:	461c      	mov	r4, r3
 801b5de:	4613      	mov	r3, r2
 801b5e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b5e2:	6020      	str	r0, [r4, #0]
 801b5e4:	6061      	str	r1, [r4, #4]
 801b5e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	3304      	adds	r3, #4
 801b5ec:	4a86      	ldr	r2, [pc, #536]	; (801b808 <problem_fetch+0x19e78>)
 801b5ee:	461c      	mov	r4, r3
 801b5f0:	4615      	mov	r5, r2
 801b5f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5f4:	6020      	str	r0, [r4, #0]
 801b5f6:	6061      	str	r1, [r4, #4]
 801b5f8:	60a2      	str	r2, [r4, #8]
 801b5fa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b602:	4a82      	ldr	r2, [pc, #520]	; (801b80c <problem_fetch+0x19e7c>)
 801b604:	461c      	mov	r4, r3
 801b606:	4613      	mov	r3, r2
 801b608:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b60a:	6020      	str	r0, [r4, #0]
 801b60c:	6061      	str	r1, [r4, #4]
 801b60e:	60a2      	str	r2, [r4, #8]
			break;
 801b610:	f001 b8ee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 773 :
			strcpy(p->name,"MASTERFUL GAP");
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b61a:	4a7d      	ldr	r2, [pc, #500]	; (801b810 <problem_fetch+0x19e80>)
 801b61c:	461c      	mov	r4, r3
 801b61e:	4613      	mov	r3, r2
 801b620:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b622:	6020      	str	r0, [r4, #0]
 801b624:	6061      	str	r1, [r4, #4]
 801b626:	60a2      	str	r2, [r4, #8]
 801b628:	881b      	ldrh	r3, [r3, #0]
 801b62a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b632:	4a78      	ldr	r2, [pc, #480]	; (801b814 <problem_fetch+0x19e84>)
 801b634:	6810      	ldr	r0, [r2, #0]
 801b636:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	2207      	movs	r2, #7
 801b63c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,C,E,F,I");
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	33a4      	adds	r3, #164	; 0xa4
 801b642:	4a75      	ldr	r2, [pc, #468]	; (801b818 <problem_fetch+0x19e88>)
 801b644:	461c      	mov	r4, r3
 801b646:	4613      	mov	r3, r2
 801b648:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b64a:	6020      	str	r0, [r4, #0]
 801b64c:	6061      	str	r1, [r4, #4]
 801b64e:	60a2      	str	r2, [r4, #8]
 801b650:	881b      	ldrh	r3, [r3, #0]
 801b652:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,6,5,13,16,11,18");
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	3304      	adds	r3, #4
 801b658:	4a70      	ldr	r2, [pc, #448]	; (801b81c <problem_fetch+0x19e8c>)
 801b65a:	461d      	mov	r5, r3
 801b65c:	4614      	mov	r4, r2
 801b65e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b660:	6028      	str	r0, [r5, #0]
 801b662:	6069      	str	r1, [r5, #4]
 801b664:	60aa      	str	r2, [r5, #8]
 801b666:	60eb      	str	r3, [r5, #12]
 801b668:	8823      	ldrh	r3, [r4, #0]
 801b66a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b672:	4a6b      	ldr	r2, [pc, #428]	; (801b820 <problem_fetch+0x19e90>)
 801b674:	461c      	mov	r4, r3
 801b676:	4613      	mov	r3, r2
 801b678:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b67a:	6020      	str	r0, [r4, #0]
 801b67c:	6061      	str	r1, [r4, #4]
 801b67e:	60a2      	str	r2, [r4, #8]
 801b680:	881b      	ldrh	r3, [r3, #0]
 801b682:	81a3      	strh	r3, [r4, #12]
			break;
 801b684:	f001 b8b4 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 774 :
			strcpy(p->name,"SUPERNOVA");
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b68e:	4965      	ldr	r1, [pc, #404]	; (801b824 <problem_fetch+0x19e94>)
 801b690:	461a      	mov	r2, r3
 801b692:	460b      	mov	r3, r1
 801b694:	cb03      	ldmia	r3!, {r0, r1}
 801b696:	6010      	str	r0, [r2, #0]
 801b698:	6051      	str	r1, [r2, #4]
 801b69a:	881b      	ldrh	r3, [r3, #0]
 801b69c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b6a4:	4a60      	ldr	r2, [pc, #384]	; (801b828 <problem_fetch+0x19e98>)
 801b6a6:	8811      	ldrh	r1, [r2, #0]
 801b6a8:	7892      	ldrb	r2, [r2, #2]
 801b6aa:	8019      	strh	r1, [r3, #0]
 801b6ac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	2207      	movs	r2, #7
 801b6b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,F,H,D");
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	33a4      	adds	r3, #164	; 0xa4
 801b6b8:	4a5c      	ldr	r2, [pc, #368]	; (801b82c <problem_fetch+0x19e9c>)
 801b6ba:	461c      	mov	r4, r3
 801b6bc:	4613      	mov	r3, r2
 801b6be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6c0:	6020      	str	r0, [r4, #0]
 801b6c2:	6061      	str	r1, [r4, #4]
 801b6c4:	60a2      	str	r2, [r4, #8]
 801b6c6:	881b      	ldrh	r3, [r3, #0]
 801b6c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	3304      	adds	r3, #4
 801b6ce:	4a58      	ldr	r2, [pc, #352]	; (801b830 <problem_fetch+0x19ea0>)
 801b6d0:	461d      	mov	r5, r3
 801b6d2:	4614      	mov	r4, r2
 801b6d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6d6:	6028      	str	r0, [r5, #0]
 801b6d8:	6069      	str	r1, [r5, #4]
 801b6da:	60aa      	str	r2, [r5, #8]
 801b6dc:	60eb      	str	r3, [r5, #12]
 801b6de:	8823      	ldrh	r3, [r4, #0]
 801b6e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b6e8:	4a52      	ldr	r2, [pc, #328]	; (801b834 <problem_fetch+0x19ea4>)
 801b6ea:	461c      	mov	r4, r3
 801b6ec:	4613      	mov	r3, r2
 801b6ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6f0:	6020      	str	r0, [r4, #0]
 801b6f2:	6061      	str	r1, [r4, #4]
 801b6f4:	60a2      	str	r2, [r4, #8]
 801b6f6:	881b      	ldrh	r3, [r3, #0]
 801b6f8:	81a3      	strh	r3, [r4, #12]
			break;
 801b6fa:	f001 b879 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 775 :
			strcpy(p->name,"ACG10");
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b704:	4a4c      	ldr	r2, [pc, #304]	; (801b838 <problem_fetch+0x19ea8>)
 801b706:	6810      	ldr	r0, [r2, #0]
 801b708:	6018      	str	r0, [r3, #0]
 801b70a:	8892      	ldrh	r2, [r2, #4]
 801b70c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b714:	4a32      	ldr	r2, [pc, #200]	; (801b7e0 <problem_fetch+0x19e50>)
 801b716:	6810      	ldr	r0, [r2, #0]
 801b718:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	2207      	movs	r2, #7
 801b71e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,E,B,I");
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	33a4      	adds	r3, #164	; 0xa4
 801b724:	4a45      	ldr	r2, [pc, #276]	; (801b83c <problem_fetch+0x19eac>)
 801b726:	461c      	mov	r4, r3
 801b728:	4613      	mov	r3, r2
 801b72a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b72c:	6020      	str	r0, [r4, #0]
 801b72e:	6061      	str	r1, [r4, #4]
 801b730:	60a2      	str	r2, [r4, #8]
 801b732:	881b      	ldrh	r3, [r3, #0]
 801b734:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,15,14,12,10,18");
 801b736:	687b      	ldr	r3, [r7, #4]
 801b738:	3304      	adds	r3, #4
 801b73a:	4a41      	ldr	r2, [pc, #260]	; (801b840 <problem_fetch+0x19eb0>)
 801b73c:	461d      	mov	r5, r3
 801b73e:	4614      	mov	r4, r2
 801b740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b742:	6028      	str	r0, [r5, #0]
 801b744:	6069      	str	r1, [r5, #4]
 801b746:	60aa      	str	r2, [r5, #8]
 801b748:	60eb      	str	r3, [r5, #12]
 801b74a:	8823      	ldrh	r3, [r4, #0]
 801b74c:	78a2      	ldrb	r2, [r4, #2]
 801b74e:	822b      	strh	r3, [r5, #16]
 801b750:	4613      	mov	r3, r2
 801b752:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b75a:	4a36      	ldr	r2, [pc, #216]	; (801b834 <problem_fetch+0x19ea4>)
 801b75c:	461c      	mov	r4, r3
 801b75e:	4613      	mov	r3, r2
 801b760:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b762:	6020      	str	r0, [r4, #0]
 801b764:	6061      	str	r1, [r4, #4]
 801b766:	60a2      	str	r2, [r4, #8]
 801b768:	881b      	ldrh	r3, [r3, #0]
 801b76a:	81a3      	strh	r3, [r4, #12]
			break;
 801b76c:	f001 b840 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 776 :
			strcpy(p->name,"ACG8");
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b776:	4a33      	ldr	r2, [pc, #204]	; (801b844 <problem_fetch+0x19eb4>)
 801b778:	6810      	ldr	r0, [r2, #0]
 801b77a:	6018      	str	r0, [r3, #0]
 801b77c:	7912      	ldrb	r2, [r2, #4]
 801b77e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b786:	4a16      	ldr	r2, [pc, #88]	; (801b7e0 <problem_fetch+0x19e50>)
 801b788:	6810      	ldr	r0, [r2, #0]
 801b78a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	2207      	movs	r2, #7
 801b790:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,E,D");
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	33a4      	adds	r3, #164	; 0xa4
 801b796:	4a2c      	ldr	r2, [pc, #176]	; (801b848 <problem_fetch+0x19eb8>)
 801b798:	461c      	mov	r4, r3
 801b79a:	4613      	mov	r3, r2
 801b79c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b79e:	6020      	str	r0, [r4, #0]
 801b7a0:	6061      	str	r1, [r4, #4]
 801b7a2:	60a2      	str	r2, [r4, #8]
 801b7a4:	881b      	ldrh	r3, [r3, #0]
 801b7a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,14,14,18");
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	3304      	adds	r3, #4
 801b7ac:	4a27      	ldr	r2, [pc, #156]	; (801b84c <problem_fetch+0x19ebc>)
 801b7ae:	461d      	mov	r5, r3
 801b7b0:	4614      	mov	r4, r2
 801b7b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b7b4:	6028      	str	r0, [r5, #0]
 801b7b6:	6069      	str	r1, [r5, #4]
 801b7b8:	60aa      	str	r2, [r5, #8]
 801b7ba:	60eb      	str	r3, [r5, #12]
 801b7bc:	8823      	ldrh	r3, [r4, #0]
 801b7be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b7c6:	4a09      	ldr	r2, [pc, #36]	; (801b7ec <problem_fetch+0x19e5c>)
 801b7c8:	461c      	mov	r4, r3
 801b7ca:	4613      	mov	r3, r2
 801b7cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b7ce:	6020      	str	r0, [r4, #0]
 801b7d0:	6061      	str	r1, [r4, #4]
 801b7d2:	60a2      	str	r2, [r4, #8]
 801b7d4:	881b      	ldrh	r3, [r3, #0]
 801b7d6:	81a3      	strh	r3, [r4, #12]
			break;
 801b7d8:	f001 b80a 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801b7dc:	0802cb30 	.word	0x0802cb30
 801b7e0:	08023b90 	.word	0x08023b90
 801b7e4:	0802cb3c 	.word	0x0802cb3c
 801b7e8:	0802cb4c 	.word	0x0802cb4c
 801b7ec:	08023c08 	.word	0x08023c08
 801b7f0:	0802cb60 	.word	0x0802cb60
 801b7f4:	0802cb6c 	.word	0x0802cb6c
 801b7f8:	0802cb7c 	.word	0x0802cb7c
 801b7fc:	08023cb4 	.word	0x08023cb4
 801b800:	0802cb94 	.word	0x0802cb94
 801b804:	0802cb9c 	.word	0x0802cb9c
 801b808:	08026240 	.word	0x08026240
 801b80c:	08023b70 	.word	0x08023b70
 801b810:	0802cba8 	.word	0x0802cba8
 801b814:	08023d30 	.word	0x08023d30
 801b818:	0802cbb8 	.word	0x0802cbb8
 801b81c:	0802cbc8 	.word	0x0802cbc8
 801b820:	0802c57c 	.word	0x0802c57c
 801b824:	0802cbdc 	.word	0x0802cbdc
 801b828:	08023b50 	.word	0x08023b50
 801b82c:	0802cbe8 	.word	0x0802cbe8
 801b830:	08025120 	.word	0x08025120
 801b834:	08023d18 	.word	0x08023d18
 801b838:	0802cbf8 	.word	0x0802cbf8
 801b83c:	0802cc00 	.word	0x0802cc00
 801b840:	0802cc10 	.word	0x0802cc10
 801b844:	0802cc24 	.word	0x0802cc24
 801b848:	0802cc2c 	.word	0x0802cc2c
 801b84c:	0802cc3c 	.word	0x0802cc3c
		case 777 :
			strcpy(p->name,"ACG6");
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b856:	4ac1      	ldr	r2, [pc, #772]	; (801bb5c <problem_fetch+0x1a1cc>)
 801b858:	6810      	ldr	r0, [r2, #0]
 801b85a:	6018      	str	r0, [r3, #0]
 801b85c:	7912      	ldrb	r2, [r2, #4]
 801b85e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b866:	4abe      	ldr	r2, [pc, #760]	; (801bb60 <problem_fetch+0x1a1d0>)
 801b868:	8811      	ldrh	r1, [r2, #0]
 801b86a:	7892      	ldrb	r2, [r2, #2]
 801b86c:	8019      	strh	r1, [r3, #0]
 801b86e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	2208      	movs	r2, #8
 801b874:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,C,C,E,I");
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	33a4      	adds	r3, #164	; 0xa4
 801b87a:	4aba      	ldr	r2, [pc, #744]	; (801bb64 <problem_fetch+0x1a1d4>)
 801b87c:	461c      	mov	r4, r3
 801b87e:	4615      	mov	r5, r2
 801b880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b882:	6020      	str	r0, [r4, #0]
 801b884:	6061      	str	r1, [r4, #4]
 801b886:	60a2      	str	r2, [r4, #8]
 801b888:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,8,13,16,16,18");
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	3304      	adds	r3, #4
 801b88e:	4ab6      	ldr	r2, [pc, #728]	; (801bb68 <problem_fetch+0x1a1d8>)
 801b890:	461d      	mov	r5, r3
 801b892:	4614      	mov	r4, r2
 801b894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b896:	6028      	str	r0, [r5, #0]
 801b898:	6069      	str	r1, [r5, #4]
 801b89a:	60aa      	str	r2, [r5, #8]
 801b89c:	60eb      	str	r3, [r5, #12]
 801b89e:	6820      	ldr	r0, [r4, #0]
 801b8a0:	6128      	str	r0, [r5, #16]
 801b8a2:	88a3      	ldrh	r3, [r4, #4]
 801b8a4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b8ac:	4aaf      	ldr	r2, [pc, #700]	; (801bb6c <problem_fetch+0x1a1dc>)
 801b8ae:	461c      	mov	r4, r3
 801b8b0:	4615      	mov	r5, r2
 801b8b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b8b4:	6020      	str	r0, [r4, #0]
 801b8b6:	6061      	str	r1, [r4, #4]
 801b8b8:	60a2      	str	r2, [r4, #8]
 801b8ba:	60e3      	str	r3, [r4, #12]
			break;
 801b8bc:	f000 bf98 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 778 :
			strcpy(p->name,"ACG5");
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b8c6:	4aaa      	ldr	r2, [pc, #680]	; (801bb70 <problem_fetch+0x1a1e0>)
 801b8c8:	6810      	ldr	r0, [r2, #0]
 801b8ca:	6018      	str	r0, [r3, #0]
 801b8cc:	7912      	ldrb	r2, [r2, #4]
 801b8ce:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b8d6:	4aa7      	ldr	r2, [pc, #668]	; (801bb74 <problem_fetch+0x1a1e4>)
 801b8d8:	6810      	ldr	r0, [r2, #0]
 801b8da:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	2208      	movs	r2, #8
 801b8e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,E,E,H,D");
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	33a4      	adds	r3, #164	; 0xa4
 801b8e6:	4aa4      	ldr	r2, [pc, #656]	; (801bb78 <problem_fetch+0x1a1e8>)
 801b8e8:	461c      	mov	r4, r3
 801b8ea:	4615      	mov	r5, r2
 801b8ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b8ee:	6020      	str	r0, [r4, #0]
 801b8f0:	6061      	str	r1, [r4, #4]
 801b8f2:	60a2      	str	r2, [r4, #8]
 801b8f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,12,14,16,18");
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	3304      	adds	r3, #4
 801b8fa:	4aa0      	ldr	r2, [pc, #640]	; (801bb7c <problem_fetch+0x1a1ec>)
 801b8fc:	461d      	mov	r5, r3
 801b8fe:	4614      	mov	r4, r2
 801b900:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b902:	6028      	str	r0, [r5, #0]
 801b904:	6069      	str	r1, [r5, #4]
 801b906:	60aa      	str	r2, [r5, #8]
 801b908:	60eb      	str	r3, [r5, #12]
 801b90a:	6820      	ldr	r0, [r4, #0]
 801b90c:	6128      	str	r0, [r5, #16]
 801b90e:	7923      	ldrb	r3, [r4, #4]
 801b910:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b918:	4a99      	ldr	r2, [pc, #612]	; (801bb80 <problem_fetch+0x1a1f0>)
 801b91a:	461c      	mov	r4, r3
 801b91c:	4615      	mov	r5, r2
 801b91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b920:	6020      	str	r0, [r4, #0]
 801b922:	6061      	str	r1, [r4, #4]
 801b924:	60a2      	str	r2, [r4, #8]
 801b926:	60e3      	str	r3, [r4, #12]
			break;
 801b928:	f000 bf62 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 779 :
			strcpy(p->name,"E-16");
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b932:	4a94      	ldr	r2, [pc, #592]	; (801bb84 <problem_fetch+0x1a1f4>)
 801b934:	6810      	ldr	r0, [r2, #0]
 801b936:	6018      	str	r0, [r3, #0]
 801b938:	7912      	ldrb	r2, [r2, #4]
 801b93a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b942:	4a8c      	ldr	r2, [pc, #560]	; (801bb74 <problem_fetch+0x1a1e4>)
 801b944:	6810      	ldr	r0, [r2, #0]
 801b946:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	2206      	movs	r2, #6
 801b94c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,A");
 801b94e:	687b      	ldr	r3, [r7, #4]
 801b950:	33a4      	adds	r3, #164	; 0xa4
 801b952:	4a8d      	ldr	r2, [pc, #564]	; (801bb88 <problem_fetch+0x1a1f8>)
 801b954:	461c      	mov	r4, r3
 801b956:	4613      	mov	r3, r2
 801b958:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b95a:	6020      	str	r0, [r4, #0]
 801b95c:	6061      	str	r1, [r4, #4]
 801b95e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,9,13,16,18");
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	3304      	adds	r3, #4
 801b964:	4a89      	ldr	r2, [pc, #548]	; (801bb8c <problem_fetch+0x1a1fc>)
 801b966:	461c      	mov	r4, r3
 801b968:	4613      	mov	r3, r2
 801b96a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b96c:	6020      	str	r0, [r4, #0]
 801b96e:	6061      	str	r1, [r4, #4]
 801b970:	60a2      	str	r2, [r4, #8]
 801b972:	881a      	ldrh	r2, [r3, #0]
 801b974:	789b      	ldrb	r3, [r3, #2]
 801b976:	81a2      	strh	r2, [r4, #12]
 801b978:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b980:	4a83      	ldr	r2, [pc, #524]	; (801bb90 <problem_fetch+0x1a200>)
 801b982:	461c      	mov	r4, r3
 801b984:	4613      	mov	r3, r2
 801b986:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b988:	6020      	str	r0, [r4, #0]
 801b98a:	6061      	str	r1, [r4, #4]
 801b98c:	60a2      	str	r2, [r4, #8]
			break;
 801b98e:	f000 bf2f 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 780 :
			strcpy(p->name,"SCHWARTZ SCHNEIDER");
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b998:	4a7e      	ldr	r2, [pc, #504]	; (801bb94 <problem_fetch+0x1a204>)
 801b99a:	461d      	mov	r5, r3
 801b99c:	4614      	mov	r4, r2
 801b99e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b9a0:	6028      	str	r0, [r5, #0]
 801b9a2:	6069      	str	r1, [r5, #4]
 801b9a4:	60aa      	str	r2, [r5, #8]
 801b9a6:	60eb      	str	r3, [r5, #12]
 801b9a8:	8823      	ldrh	r3, [r4, #0]
 801b9aa:	78a2      	ldrb	r2, [r4, #2]
 801b9ac:	822b      	strh	r3, [r5, #16]
 801b9ae:	4613      	mov	r3, r2
 801b9b0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b9b8:	4a77      	ldr	r2, [pc, #476]	; (801bb98 <problem_fetch+0x1a208>)
 801b9ba:	6810      	ldr	r0, [r2, #0]
 801b9bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	2207      	movs	r2, #7
 801b9c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,B,D,E,I");
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	33a4      	adds	r3, #164	; 0xa4
 801b9c8:	4a74      	ldr	r2, [pc, #464]	; (801bb9c <problem_fetch+0x1a20c>)
 801b9ca:	461c      	mov	r4, r3
 801b9cc:	4613      	mov	r3, r2
 801b9ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9d0:	6020      	str	r0, [r4, #0]
 801b9d2:	6061      	str	r1, [r4, #4]
 801b9d4:	60a2      	str	r2, [r4, #8]
 801b9d6:	881b      	ldrh	r3, [r3, #0]
 801b9d8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,6,15,16,18");
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	3304      	adds	r3, #4
 801b9de:	4a70      	ldr	r2, [pc, #448]	; (801bba0 <problem_fetch+0x1a210>)
 801b9e0:	461d      	mov	r5, r3
 801b9e2:	4614      	mov	r4, r2
 801b9e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b9e6:	6028      	str	r0, [r5, #0]
 801b9e8:	6069      	str	r1, [r5, #4]
 801b9ea:	60aa      	str	r2, [r5, #8]
 801b9ec:	60eb      	str	r3, [r5, #12]
 801b9ee:	8823      	ldrh	r3, [r4, #0]
 801b9f0:	78a2      	ldrb	r2, [r4, #2]
 801b9f2:	822b      	strh	r3, [r5, #16]
 801b9f4:	4613      	mov	r3, r2
 801b9f6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b9fe:	4a69      	ldr	r2, [pc, #420]	; (801bba4 <problem_fetch+0x1a214>)
 801ba00:	461c      	mov	r4, r3
 801ba02:	4613      	mov	r3, r2
 801ba04:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba06:	6020      	str	r0, [r4, #0]
 801ba08:	6061      	str	r1, [r4, #4]
 801ba0a:	60a2      	str	r2, [r4, #8]
 801ba0c:	881b      	ldrh	r3, [r3, #0]
 801ba0e:	81a3      	strh	r3, [r4, #12]
			break;
 801ba10:	f000 beee 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 781 :
			strcpy(p->name,"MELET VAR");
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba1a:	4963      	ldr	r1, [pc, #396]	; (801bba8 <problem_fetch+0x1a218>)
 801ba1c:	461a      	mov	r2, r3
 801ba1e:	460b      	mov	r3, r1
 801ba20:	cb03      	ldmia	r3!, {r0, r1}
 801ba22:	6010      	str	r0, [r2, #0]
 801ba24:	6051      	str	r1, [r2, #4]
 801ba26:	881b      	ldrh	r3, [r3, #0]
 801ba28:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba30:	4a5e      	ldr	r2, [pc, #376]	; (801bbac <problem_fetch+0x1a21c>)
 801ba32:	8811      	ldrh	r1, [r2, #0]
 801ba34:	7892      	ldrb	r2, [r2, #2]
 801ba36:	8019      	strh	r1, [r3, #0]
 801ba38:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	2205      	movs	r2, #5
 801ba3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,A");
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	33a4      	adds	r3, #164	; 0xa4
 801ba44:	495a      	ldr	r1, [pc, #360]	; (801bbb0 <problem_fetch+0x1a220>)
 801ba46:	461a      	mov	r2, r3
 801ba48:	460b      	mov	r3, r1
 801ba4a:	cb03      	ldmia	r3!, {r0, r1}
 801ba4c:	6010      	str	r0, [r2, #0]
 801ba4e:	6051      	str	r1, [r2, #4]
 801ba50:	881b      	ldrh	r3, [r3, #0]
 801ba52:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	3304      	adds	r3, #4
 801ba58:	4a56      	ldr	r2, [pc, #344]	; (801bbb4 <problem_fetch+0x1a224>)
 801ba5a:	461c      	mov	r4, r3
 801ba5c:	4613      	mov	r3, r2
 801ba5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba60:	6020      	str	r0, [r4, #0]
 801ba62:	6061      	str	r1, [r4, #4]
 801ba64:	60a2      	str	r2, [r4, #8]
 801ba66:	881b      	ldrh	r3, [r3, #0]
 801ba68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ba70:	4951      	ldr	r1, [pc, #324]	; (801bbb8 <problem_fetch+0x1a228>)
 801ba72:	461a      	mov	r2, r3
 801ba74:	460b      	mov	r3, r1
 801ba76:	cb03      	ldmia	r3!, {r0, r1}
 801ba78:	6010      	str	r0, [r2, #0]
 801ba7a:	6051      	str	r1, [r2, #4]
 801ba7c:	881b      	ldrh	r3, [r3, #0]
 801ba7e:	8113      	strh	r3, [r2, #8]
			break;
 801ba80:	f000 beb6 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 782 :
			strcpy(p->name,"MELET");
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba8a:	4a4c      	ldr	r2, [pc, #304]	; (801bbbc <problem_fetch+0x1a22c>)
 801ba8c:	6810      	ldr	r0, [r2, #0]
 801ba8e:	6018      	str	r0, [r3, #0]
 801ba90:	8892      	ldrh	r2, [r2, #4]
 801ba92:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba9a:	4a3f      	ldr	r2, [pc, #252]	; (801bb98 <problem_fetch+0x1a208>)
 801ba9c:	6810      	ldr	r0, [r2, #0]
 801ba9e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	2205      	movs	r2, #5
 801baa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,I,J");
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	33a4      	adds	r3, #164	; 0xa4
 801baaa:	4945      	ldr	r1, [pc, #276]	; (801bbc0 <problem_fetch+0x1a230>)
 801baac:	461a      	mov	r2, r3
 801baae:	460b      	mov	r3, r1
 801bab0:	cb03      	ldmia	r3!, {r0, r1}
 801bab2:	6010      	str	r0, [r2, #0]
 801bab4:	6051      	str	r1, [r2, #4]
 801bab6:	881b      	ldrh	r3, [r3, #0]
 801bab8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"13,16,10,18,5");
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	3304      	adds	r3, #4
 801babe:	4a41      	ldr	r2, [pc, #260]	; (801bbc4 <problem_fetch+0x1a234>)
 801bac0:	461c      	mov	r4, r3
 801bac2:	4613      	mov	r3, r2
 801bac4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bac6:	6020      	str	r0, [r4, #0]
 801bac8:	6061      	str	r1, [r4, #4]
 801baca:	60a2      	str	r2, [r4, #8]
 801bacc:	881b      	ldrh	r3, [r3, #0]
 801bace:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bad6:	493c      	ldr	r1, [pc, #240]	; (801bbc8 <problem_fetch+0x1a238>)
 801bad8:	461a      	mov	r2, r3
 801bada:	460b      	mov	r3, r1
 801badc:	cb03      	ldmia	r3!, {r0, r1}
 801bade:	6010      	str	r0, [r2, #0]
 801bae0:	6051      	str	r1, [r2, #4]
 801bae2:	881b      	ldrh	r3, [r3, #0]
 801bae4:	8113      	strh	r3, [r2, #8]
			break;
 801bae6:	f000 be83 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 783 :
			strcpy(p->name,"LADYBUG'S HEEL");
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801baf0:	4a36      	ldr	r2, [pc, #216]	; (801bbcc <problem_fetch+0x1a23c>)
 801baf2:	461c      	mov	r4, r3
 801baf4:	4613      	mov	r3, r2
 801baf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801baf8:	6020      	str	r0, [r4, #0]
 801bafa:	6061      	str	r1, [r4, #4]
 801bafc:	60a2      	str	r2, [r4, #8]
 801bafe:	881a      	ldrh	r2, [r3, #0]
 801bb00:	789b      	ldrb	r3, [r3, #2]
 801bb02:	81a2      	strh	r2, [r4, #12]
 801bb04:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bb0c:	4a14      	ldr	r2, [pc, #80]	; (801bb60 <problem_fetch+0x1a1d0>)
 801bb0e:	8811      	ldrh	r1, [r2, #0]
 801bb10:	7892      	ldrb	r2, [r2, #2]
 801bb12:	8019      	strh	r1, [r3, #0]
 801bb14:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	2206      	movs	r2, #6
 801bb1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,H,D");
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	33a4      	adds	r3, #164	; 0xa4
 801bb20:	4a2b      	ldr	r2, [pc, #172]	; (801bbd0 <problem_fetch+0x1a240>)
 801bb22:	461c      	mov	r4, r3
 801bb24:	4613      	mov	r3, r2
 801bb26:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb28:	6020      	str	r0, [r4, #0]
 801bb2a:	6061      	str	r1, [r4, #4]
 801bb2c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,16,18");
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	3304      	adds	r3, #4
 801bb32:	4a28      	ldr	r2, [pc, #160]	; (801bbd4 <problem_fetch+0x1a244>)
 801bb34:	461c      	mov	r4, r3
 801bb36:	4615      	mov	r5, r2
 801bb38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bb3a:	6020      	str	r0, [r4, #0]
 801bb3c:	6061      	str	r1, [r4, #4]
 801bb3e:	60a2      	str	r2, [r4, #8]
 801bb40:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bb48:	4a23      	ldr	r2, [pc, #140]	; (801bbd8 <problem_fetch+0x1a248>)
 801bb4a:	461c      	mov	r4, r3
 801bb4c:	4613      	mov	r3, r2
 801bb4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb50:	6020      	str	r0, [r4, #0]
 801bb52:	6061      	str	r1, [r4, #4]
 801bb54:	60a2      	str	r2, [r4, #8]
			break;
 801bb56:	f000 be4b 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801bb5a:	bf00      	nop
 801bb5c:	0802cc50 	.word	0x0802cc50
 801bb60:	08023b50 	.word	0x08023b50
 801bb64:	0802cc58 	.word	0x0802cc58
 801bb68:	0802cc68 	.word	0x0802cc68
 801bb6c:	08023da0 	.word	0x08023da0
 801bb70:	0802cc80 	.word	0x0802cc80
 801bb74:	08023b90 	.word	0x08023b90
 801bb78:	0802cc88 	.word	0x0802cc88
 801bb7c:	0802cc98 	.word	0x0802cc98
 801bb80:	08023cb4 	.word	0x08023cb4
 801bb84:	0802ccb0 	.word	0x0802ccb0
 801bb88:	0802ccb8 	.word	0x0802ccb8
 801bb8c:	0802ccc4 	.word	0x0802ccc4
 801bb90:	08023f2c 	.word	0x08023f2c
 801bb94:	0802ccd4 	.word	0x0802ccd4
 801bb98:	08023d30 	.word	0x08023d30
 801bb9c:	0802cce8 	.word	0x0802cce8
 801bba0:	0802ccf8 	.word	0x0802ccf8
 801bba4:	08023d18 	.word	0x08023d18
 801bba8:	0802cd0c 	.word	0x0802cd0c
 801bbac:	08024288 	.word	0x08024288
 801bbb0:	0802cd18 	.word	0x0802cd18
 801bbb4:	08027d04 	.word	0x08027d04
 801bbb8:	0802405c 	.word	0x0802405c
 801bbbc:	0802cd24 	.word	0x0802cd24
 801bbc0:	0802cd2c 	.word	0x0802cd2c
 801bbc4:	0802cd38 	.word	0x0802cd38
 801bbc8:	0802529c 	.word	0x0802529c
 801bbcc:	0802cd48 	.word	0x0802cd48
 801bbd0:	0802cd58 	.word	0x0802cd58
 801bbd4:	0802cd64 	.word	0x0802cd64
 801bbd8:	08023b70 	.word	0x08023b70
		case 784 :
			strcpy(p->name,"LADYBUG");
 801bbdc:	687b      	ldr	r3, [r7, #4]
 801bbde:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bbe2:	49a5      	ldr	r1, [pc, #660]	; (801be78 <problem_fetch+0x1a4e8>)
 801bbe4:	461a      	mov	r2, r3
 801bbe6:	460b      	mov	r3, r1
 801bbe8:	cb03      	ldmia	r3!, {r0, r1}
 801bbea:	6010      	str	r0, [r2, #0]
 801bbec:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bbf4:	4aa1      	ldr	r2, [pc, #644]	; (801be7c <problem_fetch+0x1a4ec>)
 801bbf6:	6810      	ldr	r0, [r2, #0]
 801bbf8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	2208      	movs	r2, #8
 801bbfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,C,D,F,G,H,J");
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	33a4      	adds	r3, #164	; 0xa4
 801bc04:	4a9e      	ldr	r2, [pc, #632]	; (801be80 <problem_fetch+0x1a4f0>)
 801bc06:	461c      	mov	r4, r3
 801bc08:	4615      	mov	r5, r2
 801bc0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bc0c:	6020      	str	r0, [r4, #0]
 801bc0e:	6061      	str	r1, [r4, #4]
 801bc10:	60a2      	str	r2, [r4, #8]
 801bc12:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,13,18,11,6,10,5");
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	3304      	adds	r3, #4
 801bc18:	4a9a      	ldr	r2, [pc, #616]	; (801be84 <problem_fetch+0x1a4f4>)
 801bc1a:	461d      	mov	r5, r3
 801bc1c:	4614      	mov	r4, r2
 801bc1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc20:	6028      	str	r0, [r5, #0]
 801bc22:	6069      	str	r1, [r5, #4]
 801bc24:	60aa      	str	r2, [r5, #8]
 801bc26:	60eb      	str	r3, [r5, #12]
 801bc28:	6820      	ldr	r0, [r4, #0]
 801bc2a:	6128      	str	r0, [r5, #16]
 801bc2c:	7923      	ldrb	r3, [r4, #4]
 801bc2e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,e,d,s,d,s");
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bc36:	4a94      	ldr	r2, [pc, #592]	; (801be88 <problem_fetch+0x1a4f8>)
 801bc38:	461c      	mov	r4, r3
 801bc3a:	4615      	mov	r5, r2
 801bc3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bc3e:	6020      	str	r0, [r4, #0]
 801bc40:	6061      	str	r1, [r4, #4]
 801bc42:	60a2      	str	r2, [r4, #8]
 801bc44:	60e3      	str	r3, [r4, #12]
			break;
 801bc46:	f000 bdd3 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 785 :
			strcpy(p->name,"ANA");
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bc50:	4a8e      	ldr	r2, [pc, #568]	; (801be8c <problem_fetch+0x1a4fc>)
 801bc52:	6810      	ldr	r0, [r2, #0]
 801bc54:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bc5c:	4a8c      	ldr	r2, [pc, #560]	; (801be90 <problem_fetch+0x1a500>)
 801bc5e:	6810      	ldr	r0, [r2, #0]
 801bc60:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	2206      	movs	r2, #6
 801bc66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,H,E,D");
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	33a4      	adds	r3, #164	; 0xa4
 801bc6c:	4a89      	ldr	r2, [pc, #548]	; (801be94 <problem_fetch+0x1a504>)
 801bc6e:	461c      	mov	r4, r3
 801bc70:	4613      	mov	r3, r2
 801bc72:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc74:	6020      	str	r0, [r4, #0]
 801bc76:	6061      	str	r1, [r4, #4]
 801bc78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	3304      	adds	r3, #4
 801bc7e:	4a86      	ldr	r2, [pc, #536]	; (801be98 <problem_fetch+0x1a508>)
 801bc80:	461c      	mov	r4, r3
 801bc82:	4615      	mov	r5, r2
 801bc84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bc86:	6020      	str	r0, [r4, #0]
 801bc88:	6061      	str	r1, [r4, #4]
 801bc8a:	60a2      	str	r2, [r4, #8]
 801bc8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bc94:	4a81      	ldr	r2, [pc, #516]	; (801be9c <problem_fetch+0x1a50c>)
 801bc96:	461c      	mov	r4, r3
 801bc98:	4613      	mov	r3, r2
 801bc9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc9c:	6020      	str	r0, [r4, #0]
 801bc9e:	6061      	str	r1, [r4, #4]
 801bca0:	60a2      	str	r2, [r4, #8]
			break;
 801bca2:	f000 bda5 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 786 :
			strcpy(p->name,"CHEETAHSAURUS");
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bcac:	4a7c      	ldr	r2, [pc, #496]	; (801bea0 <problem_fetch+0x1a510>)
 801bcae:	461c      	mov	r4, r3
 801bcb0:	4613      	mov	r3, r2
 801bcb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bcb4:	6020      	str	r0, [r4, #0]
 801bcb6:	6061      	str	r1, [r4, #4]
 801bcb8:	60a2      	str	r2, [r4, #8]
 801bcba:	881b      	ldrh	r3, [r3, #0]
 801bcbc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bcc4:	4a77      	ldr	r2, [pc, #476]	; (801bea4 <problem_fetch+0x1a514>)
 801bcc6:	8811      	ldrh	r1, [r2, #0]
 801bcc8:	7892      	ldrb	r2, [r2, #2]
 801bcca:	8019      	strh	r1, [r3, #0]
 801bccc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2208      	movs	r2, #8
 801bcd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,H,G,I,G,I");
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	33a4      	adds	r3, #164	; 0xa4
 801bcd8:	4a73      	ldr	r2, [pc, #460]	; (801bea8 <problem_fetch+0x1a518>)
 801bcda:	461c      	mov	r4, r3
 801bcdc:	4615      	mov	r5, r2
 801bcde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bce0:	6020      	str	r0, [r4, #0]
 801bce2:	6061      	str	r1, [r4, #4]
 801bce4:	60a2      	str	r2, [r4, #8]
 801bce6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,15,17,18");
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	3304      	adds	r3, #4
 801bcec:	4a6f      	ldr	r2, [pc, #444]	; (801beac <problem_fetch+0x1a51c>)
 801bcee:	461d      	mov	r5, r3
 801bcf0:	4614      	mov	r4, r2
 801bcf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcf4:	6028      	str	r0, [r5, #0]
 801bcf6:	6069      	str	r1, [r5, #4]
 801bcf8:	60aa      	str	r2, [r5, #8]
 801bcfa:	60eb      	str	r3, [r5, #12]
 801bcfc:	6820      	ldr	r0, [r4, #0]
 801bcfe:	6128      	str	r0, [r5, #16]
 801bd00:	7923      	ldrb	r3, [r4, #4]
 801bd02:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bd0a:	4a69      	ldr	r2, [pc, #420]	; (801beb0 <problem_fetch+0x1a520>)
 801bd0c:	461c      	mov	r4, r3
 801bd0e:	4615      	mov	r5, r2
 801bd10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd12:	6020      	str	r0, [r4, #0]
 801bd14:	6061      	str	r1, [r4, #4]
 801bd16:	60a2      	str	r2, [r4, #8]
 801bd18:	60e3      	str	r3, [r4, #12]
			break;
 801bd1a:	f000 bd69 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 787 :
			strcpy(p->name,"WAR OF THE TODDS");
 801bd1e:	687b      	ldr	r3, [r7, #4]
 801bd20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bd24:	4a63      	ldr	r2, [pc, #396]	; (801beb4 <problem_fetch+0x1a524>)
 801bd26:	461d      	mov	r5, r3
 801bd28:	4614      	mov	r4, r2
 801bd2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd2c:	6028      	str	r0, [r5, #0]
 801bd2e:	6069      	str	r1, [r5, #4]
 801bd30:	60aa      	str	r2, [r5, #8]
 801bd32:	60eb      	str	r3, [r5, #12]
 801bd34:	7823      	ldrb	r3, [r4, #0]
 801bd36:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bd3e:	4a5e      	ldr	r2, [pc, #376]	; (801beb8 <problem_fetch+0x1a528>)
 801bd40:	6810      	ldr	r0, [r2, #0]
 801bd42:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	2206      	movs	r2, #6
 801bd48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,I,H,D");
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	33a4      	adds	r3, #164	; 0xa4
 801bd4e:	4a5b      	ldr	r2, [pc, #364]	; (801bebc <problem_fetch+0x1a52c>)
 801bd50:	461c      	mov	r4, r3
 801bd52:	4613      	mov	r3, r2
 801bd54:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd56:	6020      	str	r0, [r4, #0]
 801bd58:	6061      	str	r1, [r4, #4]
 801bd5a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,15,16,18");
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	3304      	adds	r3, #4
 801bd60:	4a57      	ldr	r2, [pc, #348]	; (801bec0 <problem_fetch+0x1a530>)
 801bd62:	461c      	mov	r4, r3
 801bd64:	4613      	mov	r3, r2
 801bd66:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd68:	6020      	str	r0, [r4, #0]
 801bd6a:	6061      	str	r1, [r4, #4]
 801bd6c:	60a2      	str	r2, [r4, #8]
 801bd6e:	881a      	ldrh	r2, [r3, #0]
 801bd70:	789b      	ldrb	r3, [r3, #2]
 801bd72:	81a2      	strh	r2, [r4, #12]
 801bd74:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bd7c:	4a47      	ldr	r2, [pc, #284]	; (801be9c <problem_fetch+0x1a50c>)
 801bd7e:	461c      	mov	r4, r3
 801bd80:	4613      	mov	r3, r2
 801bd82:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd84:	6020      	str	r0, [r4, #0]
 801bd86:	6061      	str	r1, [r4, #4]
 801bd88:	60a2      	str	r2, [r4, #8]
			break;
 801bd8a:	f000 bd31 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 788 :
			strcpy(p->name,"AMIT 1.1");
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bd94:	494b      	ldr	r1, [pc, #300]	; (801bec4 <problem_fetch+0x1a534>)
 801bd96:	461a      	mov	r2, r3
 801bd98:	460b      	mov	r3, r1
 801bd9a:	cb03      	ldmia	r3!, {r0, r1}
 801bd9c:	6010      	str	r0, [r2, #0]
 801bd9e:	6051      	str	r1, [r2, #4]
 801bda0:	781b      	ldrb	r3, [r3, #0]
 801bda2:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bdaa:	4a3e      	ldr	r2, [pc, #248]	; (801bea4 <problem_fetch+0x1a514>)
 801bdac:	8811      	ldrh	r1, [r2, #0]
 801bdae:	7892      	ldrb	r2, [r2, #2]
 801bdb0:	8019      	strh	r1, [r3, #0]
 801bdb2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	2206      	movs	r2, #6
 801bdb8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,D,D");
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	33a4      	adds	r3, #164	; 0xa4
 801bdbe:	4a42      	ldr	r2, [pc, #264]	; (801bec8 <problem_fetch+0x1a538>)
 801bdc0:	461c      	mov	r4, r3
 801bdc2:	4613      	mov	r3, r2
 801bdc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdc6:	6020      	str	r0, [r4, #0]
 801bdc8:	6061      	str	r1, [r4, #4]
 801bdca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	3304      	adds	r3, #4
 801bdd0:	4a3e      	ldr	r2, [pc, #248]	; (801becc <problem_fetch+0x1a53c>)
 801bdd2:	461c      	mov	r4, r3
 801bdd4:	4613      	mov	r3, r2
 801bdd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdd8:	6020      	str	r0, [r4, #0]
 801bdda:	6061      	str	r1, [r4, #4]
 801bddc:	60a2      	str	r2, [r4, #8]
 801bdde:	881a      	ldrh	r2, [r3, #0]
 801bde0:	789b      	ldrb	r3, [r3, #2]
 801bde2:	81a2      	strh	r2, [r4, #12]
 801bde4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bdec:	4a2b      	ldr	r2, [pc, #172]	; (801be9c <problem_fetch+0x1a50c>)
 801bdee:	461c      	mov	r4, r3
 801bdf0:	4613      	mov	r3, r2
 801bdf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdf4:	6020      	str	r0, [r4, #0]
 801bdf6:	6061      	str	r1, [r4, #4]
 801bdf8:	60a2      	str	r2, [r4, #8]
			break;
 801bdfa:	f000 bcf9 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 789 :
			strcpy(p->name,"CRANKSHAFT");
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801be04:	4932      	ldr	r1, [pc, #200]	; (801bed0 <problem_fetch+0x1a540>)
 801be06:	461a      	mov	r2, r3
 801be08:	460b      	mov	r3, r1
 801be0a:	cb03      	ldmia	r3!, {r0, r1}
 801be0c:	6010      	str	r0, [r2, #0]
 801be0e:	6051      	str	r1, [r2, #4]
 801be10:	8819      	ldrh	r1, [r3, #0]
 801be12:	789b      	ldrb	r3, [r3, #2]
 801be14:	8111      	strh	r1, [r2, #8]
 801be16:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801be1e:	4a21      	ldr	r2, [pc, #132]	; (801bea4 <problem_fetch+0x1a514>)
 801be20:	8811      	ldrh	r1, [r2, #0]
 801be22:	7892      	ldrb	r2, [r2, #2]
 801be24:	8019      	strh	r1, [r3, #0]
 801be26:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	2207      	movs	r2, #7
 801be2c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,F,E,B,D");
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	33a4      	adds	r3, #164	; 0xa4
 801be32:	4a28      	ldr	r2, [pc, #160]	; (801bed4 <problem_fetch+0x1a544>)
 801be34:	461c      	mov	r4, r3
 801be36:	4613      	mov	r3, r2
 801be38:	cb07      	ldmia	r3!, {r0, r1, r2}
 801be3a:	6020      	str	r0, [r4, #0]
 801be3c:	6061      	str	r1, [r4, #4]
 801be3e:	60a2      	str	r2, [r4, #8]
 801be40:	881b      	ldrh	r3, [r3, #0]
 801be42:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,12,15,18");
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	3304      	adds	r3, #4
 801be48:	4a23      	ldr	r2, [pc, #140]	; (801bed8 <problem_fetch+0x1a548>)
 801be4a:	461d      	mov	r5, r3
 801be4c:	4614      	mov	r4, r2
 801be4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be50:	6028      	str	r0, [r5, #0]
 801be52:	6069      	str	r1, [r5, #4]
 801be54:	60aa      	str	r2, [r5, #8]
 801be56:	60eb      	str	r3, [r5, #12]
 801be58:	8823      	ldrh	r3, [r4, #0]
 801be5a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801be62:	4a1e      	ldr	r2, [pc, #120]	; (801bedc <problem_fetch+0x1a54c>)
 801be64:	461c      	mov	r4, r3
 801be66:	4613      	mov	r3, r2
 801be68:	cb07      	ldmia	r3!, {r0, r1, r2}
 801be6a:	6020      	str	r0, [r4, #0]
 801be6c:	6061      	str	r1, [r4, #4]
 801be6e:	60a2      	str	r2, [r4, #8]
 801be70:	881b      	ldrh	r3, [r3, #0]
 801be72:	81a3      	strh	r3, [r4, #12]
			break;
 801be74:	f000 bcbc 	b.w	801c7f0 <problem_fetch+0x1ae60>
 801be78:	0802cd74 	.word	0x0802cd74
 801be7c:	08023d30 	.word	0x08023d30
 801be80:	0802cd7c 	.word	0x0802cd7c
 801be84:	0802cd8c 	.word	0x0802cd8c
 801be88:	0802cda4 	.word	0x0802cda4
 801be8c:	0802cdb4 	.word	0x0802cdb4
 801be90:	08023b90 	.word	0x08023b90
 801be94:	0802cdb8 	.word	0x0802cdb8
 801be98:	0802b560 	.word	0x0802b560
 801be9c:	08023f2c 	.word	0x08023f2c
 801bea0:	0802cdc4 	.word	0x0802cdc4
 801bea4:	08023c5c 	.word	0x08023c5c
 801bea8:	0802cdd4 	.word	0x0802cdd4
 801beac:	0802cde4 	.word	0x0802cde4
 801beb0:	08023da0 	.word	0x08023da0
 801beb4:	0802cdfc 	.word	0x0802cdfc
 801beb8:	08023ccc 	.word	0x08023ccc
 801bebc:	0802ce10 	.word	0x0802ce10
 801bec0:	0802ce1c 	.word	0x0802ce1c
 801bec4:	0802ce2c 	.word	0x0802ce2c
 801bec8:	0802ce38 	.word	0x0802ce38
 801becc:	08027ca0 	.word	0x08027ca0
 801bed0:	0802ce44 	.word	0x0802ce44
 801bed4:	0802ce50 	.word	0x0802ce50
 801bed8:	0802ce60 	.word	0x0802ce60
 801bedc:	08023c08 	.word	0x08023c08
		case 790 :
			strcpy(p->name,"THE LADDER");
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bee6:	49b6      	ldr	r1, [pc, #728]	; (801c1c0 <problem_fetch+0x1a830>)
 801bee8:	461a      	mov	r2, r3
 801beea:	460b      	mov	r3, r1
 801beec:	cb03      	ldmia	r3!, {r0, r1}
 801beee:	6010      	str	r0, [r2, #0]
 801bef0:	6051      	str	r1, [r2, #4]
 801bef2:	8819      	ldrh	r1, [r3, #0]
 801bef4:	789b      	ldrb	r3, [r3, #2]
 801bef6:	8111      	strh	r1, [r2, #8]
 801bef8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801befa:	687b      	ldr	r3, [r7, #4]
 801befc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf00:	4ab0      	ldr	r2, [pc, #704]	; (801c1c4 <problem_fetch+0x1a834>)
 801bf02:	6810      	ldr	r0, [r2, #0]
 801bf04:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	2207      	movs	r2, #7
 801bf0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,K,I");
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	33a4      	adds	r3, #164	; 0xa4
 801bf10:	4aad      	ldr	r2, [pc, #692]	; (801c1c8 <problem_fetch+0x1a838>)
 801bf12:	461c      	mov	r4, r3
 801bf14:	4613      	mov	r3, r2
 801bf16:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bf18:	6020      	str	r0, [r4, #0]
 801bf1a:	6061      	str	r1, [r4, #4]
 801bf1c:	60a2      	str	r2, [r4, #8]
 801bf1e:	881b      	ldrh	r3, [r3, #0]
 801bf20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	3304      	adds	r3, #4
 801bf26:	4aa9      	ldr	r2, [pc, #676]	; (801c1cc <problem_fetch+0x1a83c>)
 801bf28:	461d      	mov	r5, r3
 801bf2a:	4614      	mov	r4, r2
 801bf2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf2e:	6028      	str	r0, [r5, #0]
 801bf30:	6069      	str	r1, [r5, #4]
 801bf32:	60aa      	str	r2, [r5, #8]
 801bf34:	60eb      	str	r3, [r5, #12]
 801bf36:	8823      	ldrh	r3, [r4, #0]
 801bf38:	78a2      	ldrb	r2, [r4, #2]
 801bf3a:	822b      	strh	r3, [r5, #16]
 801bf3c:	4613      	mov	r3, r2
 801bf3e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bf46:	4aa2      	ldr	r2, [pc, #648]	; (801c1d0 <problem_fetch+0x1a840>)
 801bf48:	461c      	mov	r4, r3
 801bf4a:	4613      	mov	r3, r2
 801bf4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bf4e:	6020      	str	r0, [r4, #0]
 801bf50:	6061      	str	r1, [r4, #4]
 801bf52:	60a2      	str	r2, [r4, #8]
 801bf54:	881b      	ldrh	r3, [r3, #0]
 801bf56:	81a3      	strh	r3, [r4, #12]
			break;
 801bf58:	f000 bc4a 	b.w	801c7f0 <problem_fetch+0x1ae60>
		case 791 :
			strcpy(p->name,"SALAD DAYS");
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bf62:	499c      	ldr	r1, [pc, #624]	; (801c1d4 <problem_fetch+0x1a844>)
 801bf64:	461a      	mov	r2, r3
 801bf66:	460b      	mov	r3, r1
 801bf68:	cb03      	ldmia	r3!, {r0, r1}
 801bf6a:	6010      	str	r0, [r2, #0]
 801bf6c:	6051      	str	r1, [r2, #4]
 801bf6e:	8819      	ldrh	r1, [r3, #0]
 801bf70:	789b      	ldrb	r3, [r3, #2]
 801bf72:	8111      	strh	r1, [r2, #8]
 801bf74:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf7c:	4a96      	ldr	r2, [pc, #600]	; (801c1d8 <problem_fetch+0x1a848>)
 801bf7e:	8811      	ldrh	r1, [r2, #0]
 801bf80:	7892      	ldrb	r2, [r2, #2]
 801bf82:	8019      	strh	r1, [r3, #0]
 801bf84:	709a      	strb	r2, [r3, #2]
			p->moveSize = 12;
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	220c      	movs	r2, #12
 801bf8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,I,H,K,B,D,H,G,G,A");
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	33a4      	adds	r3, #164	; 0xa4
 801bf90:	4a92      	ldr	r2, [pc, #584]	; (801c1dc <problem_fetch+0x1a84c>)
 801bf92:	461d      	mov	r5, r3
 801bf94:	4614      	mov	r4, r2
 801bf96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bf98:	6028      	str	r0, [r5, #0]
 801bf9a:	6069      	str	r1, [r5, #4]
 801bf9c:	60aa      	str	r2, [r5, #8]
 801bf9e:	60eb      	str	r3, [r5, #12]
 801bfa0:	cc03      	ldmia	r4!, {r0, r1}
 801bfa2:	6128      	str	r0, [r5, #16]
 801bfa4:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,15,15,16,17,17,18");
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	3304      	adds	r3, #4
 801bfaa:	4a8d      	ldr	r2, [pc, #564]	; (801c1e0 <problem_fetch+0x1a850>)
 801bfac:	4614      	mov	r4, r2
 801bfae:	469c      	mov	ip, r3
 801bfb0:	f104 0e20 	add.w	lr, r4, #32
 801bfb4:	4665      	mov	r5, ip
 801bfb6:	4626      	mov	r6, r4
 801bfb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bfba:	6028      	str	r0, [r5, #0]
 801bfbc:	6069      	str	r1, [r5, #4]
 801bfbe:	60aa      	str	r2, [r5, #8]
 801bfc0:	60eb      	str	r3, [r5, #12]
 801bfc2:	3410      	adds	r4, #16
 801bfc4:	f10c 0c10 	add.w	ip, ip, #16
 801bfc8:	4574      	cmp	r4, lr
 801bfca:	d1f3      	bne.n	801bfb4 <problem_fetch+0x1a624>
 801bfcc:	4663      	mov	r3, ip
 801bfce:	4622      	mov	r2, r4
 801bfd0:	7812      	ldrb	r2, [r2, #0]
 801bfd2:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,e");
 801bfd4:	687b      	ldr	r3, [r7, #4]
 801bfd6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bfda:	4a82      	ldr	r2, [pc, #520]	; (801c1e4 <problem_fetch+0x1a854>)
 801bfdc:	461d      	mov	r5, r3
 801bfde:	4614      	mov	r4, r2
 801bfe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bfe2:	6028      	str	r0, [r5, #0]
 801bfe4:	6069      	str	r1, [r5, #4]
 801bfe6:	60aa      	str	r2, [r5, #8]
 801bfe8:	60eb      	str	r3, [r5, #12]
 801bfea:	cc03      	ldmia	r4!, {r0, r1}
 801bfec:	6128      	str	r0, [r5, #16]
 801bfee:	6169      	str	r1, [r5, #20]
			break;
 801bff0:	e3fe      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 792 :
			strcpy(p->name,"SHAKEN NOT STIRRED");
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bff8:	4a7b      	ldr	r2, [pc, #492]	; (801c1e8 <problem_fetch+0x1a858>)
 801bffa:	461d      	mov	r5, r3
 801bffc:	4614      	mov	r4, r2
 801bffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c000:	6028      	str	r0, [r5, #0]
 801c002:	6069      	str	r1, [r5, #4]
 801c004:	60aa      	str	r2, [r5, #8]
 801c006:	60eb      	str	r3, [r5, #12]
 801c008:	8823      	ldrh	r3, [r4, #0]
 801c00a:	78a2      	ldrb	r2, [r4, #2]
 801c00c:	822b      	strh	r3, [r5, #16]
 801c00e:	4613      	mov	r3, r2
 801c010:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c018:	4a6a      	ldr	r2, [pc, #424]	; (801c1c4 <problem_fetch+0x1a834>)
 801c01a:	6810      	ldr	r0, [r2, #0]
 801c01c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	2207      	movs	r2, #7
 801c022:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,F,E,A,D,A");
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	33a4      	adds	r3, #164	; 0xa4
 801c028:	4a70      	ldr	r2, [pc, #448]	; (801c1ec <problem_fetch+0x1a85c>)
 801c02a:	461c      	mov	r4, r3
 801c02c:	4613      	mov	r3, r2
 801c02e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c030:	6020      	str	r0, [r4, #0]
 801c032:	6061      	str	r1, [r4, #4]
 801c034:	60a2      	str	r2, [r4, #8]
 801c036:	881b      	ldrh	r3, [r3, #0]
 801c038:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,12,14,15,18");
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	3304      	adds	r3, #4
 801c03e:	4a6c      	ldr	r2, [pc, #432]	; (801c1f0 <problem_fetch+0x1a860>)
 801c040:	461d      	mov	r5, r3
 801c042:	4614      	mov	r4, r2
 801c044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c046:	6028      	str	r0, [r5, #0]
 801c048:	6069      	str	r1, [r5, #4]
 801c04a:	60aa      	str	r2, [r5, #8]
 801c04c:	60eb      	str	r3, [r5, #12]
 801c04e:	8823      	ldrh	r3, [r4, #0]
 801c050:	78a2      	ldrb	r2, [r4, #2]
 801c052:	822b      	strh	r3, [r5, #16]
 801c054:	4613      	mov	r3, r2
 801c056:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c05e:	4a5c      	ldr	r2, [pc, #368]	; (801c1d0 <problem_fetch+0x1a840>)
 801c060:	461c      	mov	r4, r3
 801c062:	4613      	mov	r3, r2
 801c064:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c066:	6020      	str	r0, [r4, #0]
 801c068:	6061      	str	r1, [r4, #4]
 801c06a:	60a2      	str	r2, [r4, #8]
 801c06c:	881b      	ldrh	r3, [r3, #0]
 801c06e:	81a3      	strh	r3, [r4, #12]
			break;
 801c070:	e3be      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 793 :
			strcpy(p->name,"SNAGGLEPUSS");
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c078:	4a5e      	ldr	r2, [pc, #376]	; (801c1f4 <problem_fetch+0x1a864>)
 801c07a:	461c      	mov	r4, r3
 801c07c:	4613      	mov	r3, r2
 801c07e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c080:	6020      	str	r0, [r4, #0]
 801c082:	6061      	str	r1, [r4, #4]
 801c084:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c08c:	4a4d      	ldr	r2, [pc, #308]	; (801c1c4 <problem_fetch+0x1a834>)
 801c08e:	6810      	ldr	r0, [r2, #0]
 801c090:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	2206      	movs	r2, #6
 801c096:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,I,H,I");
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	33a4      	adds	r3, #164	; 0xa4
 801c09c:	4a56      	ldr	r2, [pc, #344]	; (801c1f8 <problem_fetch+0x1a868>)
 801c09e:	461c      	mov	r4, r3
 801c0a0:	4613      	mov	r3, r2
 801c0a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c0a4:	6020      	str	r0, [r4, #0]
 801c0a6:	6061      	str	r1, [r4, #4]
 801c0a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	3304      	adds	r3, #4
 801c0ae:	4a53      	ldr	r2, [pc, #332]	; (801c1fc <problem_fetch+0x1a86c>)
 801c0b0:	461c      	mov	r4, r3
 801c0b2:	4615      	mov	r5, r2
 801c0b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c0b6:	6020      	str	r0, [r4, #0]
 801c0b8:	6061      	str	r1, [r4, #4]
 801c0ba:	60a2      	str	r2, [r4, #8]
 801c0bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c0be:	687b      	ldr	r3, [r7, #4]
 801c0c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c0c4:	4a4e      	ldr	r2, [pc, #312]	; (801c200 <problem_fetch+0x1a870>)
 801c0c6:	461c      	mov	r4, r3
 801c0c8:	4613      	mov	r3, r2
 801c0ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c0cc:	6020      	str	r0, [r4, #0]
 801c0ce:	6061      	str	r1, [r4, #4]
 801c0d0:	60a2      	str	r2, [r4, #8]
			break;
 801c0d2:	e38d      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 794 :
			strcpy(p->name,"E-Z CHEESE");
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c0da:	494a      	ldr	r1, [pc, #296]	; (801c204 <problem_fetch+0x1a874>)
 801c0dc:	461a      	mov	r2, r3
 801c0de:	460b      	mov	r3, r1
 801c0e0:	cb03      	ldmia	r3!, {r0, r1}
 801c0e2:	6010      	str	r0, [r2, #0]
 801c0e4:	6051      	str	r1, [r2, #4]
 801c0e6:	8819      	ldrh	r1, [r3, #0]
 801c0e8:	789b      	ldrb	r3, [r3, #2]
 801c0ea:	8111      	strh	r1, [r2, #8]
 801c0ec:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c0f4:	4a33      	ldr	r2, [pc, #204]	; (801c1c4 <problem_fetch+0x1a834>)
 801c0f6:	6810      	ldr	r0, [r2, #0]
 801c0f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	2208      	movs	r2, #8
 801c0fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,J,G,H,D");
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	33a4      	adds	r3, #164	; 0xa4
 801c104:	4a40      	ldr	r2, [pc, #256]	; (801c208 <problem_fetch+0x1a878>)
 801c106:	461c      	mov	r4, r3
 801c108:	4615      	mov	r5, r2
 801c10a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c10c:	6020      	str	r0, [r4, #0]
 801c10e:	6061      	str	r1, [r4, #4]
 801c110:	60a2      	str	r2, [r4, #8]
 801c112:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,15,16,18");
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	3304      	adds	r3, #4
 801c118:	4a3c      	ldr	r2, [pc, #240]	; (801c20c <problem_fetch+0x1a87c>)
 801c11a:	461d      	mov	r5, r3
 801c11c:	4614      	mov	r4, r2
 801c11e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c120:	6028      	str	r0, [r5, #0]
 801c122:	6069      	str	r1, [r5, #4]
 801c124:	60aa      	str	r2, [r5, #8]
 801c126:	60eb      	str	r3, [r5, #12]
 801c128:	6820      	ldr	r0, [r4, #0]
 801c12a:	6128      	str	r0, [r5, #16]
 801c12c:	88a3      	ldrh	r3, [r4, #4]
 801c12e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c136:	4a36      	ldr	r2, [pc, #216]	; (801c210 <problem_fetch+0x1a880>)
 801c138:	461c      	mov	r4, r3
 801c13a:	4615      	mov	r5, r2
 801c13c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c13e:	6020      	str	r0, [r4, #0]
 801c140:	6061      	str	r1, [r4, #4]
 801c142:	60a2      	str	r2, [r4, #8]
 801c144:	60e3      	str	r3, [r4, #12]
			break;
 801c146:	e353      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 795 :
			strcpy(p->name,"TODD, DARK AND HANDSOME");
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c14e:	4a31      	ldr	r2, [pc, #196]	; (801c214 <problem_fetch+0x1a884>)
 801c150:	461d      	mov	r5, r3
 801c152:	4614      	mov	r4, r2
 801c154:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c156:	6028      	str	r0, [r5, #0]
 801c158:	6069      	str	r1, [r5, #4]
 801c15a:	60aa      	str	r2, [r5, #8]
 801c15c:	60eb      	str	r3, [r5, #12]
 801c15e:	cc03      	ldmia	r4!, {r0, r1}
 801c160:	6128      	str	r0, [r5, #16]
 801c162:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7C");
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c16a:	4a2b      	ldr	r2, [pc, #172]	; (801c218 <problem_fetch+0x1a888>)
 801c16c:	8811      	ldrh	r1, [r2, #0]
 801c16e:	7892      	ldrb	r2, [r2, #2]
 801c170:	8019      	strh	r1, [r3, #0]
 801c172:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	2208      	movs	r2, #8
 801c178:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,C,H,G,I");
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	33a4      	adds	r3, #164	; 0xa4
 801c17e:	4a27      	ldr	r2, [pc, #156]	; (801c21c <problem_fetch+0x1a88c>)
 801c180:	461c      	mov	r4, r3
 801c182:	4615      	mov	r5, r2
 801c184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c186:	6020      	str	r0, [r4, #0]
 801c188:	6061      	str	r1, [r4, #4]
 801c18a:	60a2      	str	r2, [r4, #8]
 801c18c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,13,16,17,18");
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	3304      	adds	r3, #4
 801c192:	4a23      	ldr	r2, [pc, #140]	; (801c220 <problem_fetch+0x1a890>)
 801c194:	461d      	mov	r5, r3
 801c196:	4614      	mov	r4, r2
 801c198:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c19a:	6028      	str	r0, [r5, #0]
 801c19c:	6069      	str	r1, [r5, #4]
 801c19e:	60aa      	str	r2, [r5, #8]
 801c1a0:	60eb      	str	r3, [r5, #12]
 801c1a2:	6820      	ldr	r0, [r4, #0]
 801c1a4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c1ac:	4a1d      	ldr	r2, [pc, #116]	; (801c224 <problem_fetch+0x1a894>)
 801c1ae:	461c      	mov	r4, r3
 801c1b0:	4615      	mov	r5, r2
 801c1b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c1b4:	6020      	str	r0, [r4, #0]
 801c1b6:	6061      	str	r1, [r4, #4]
 801c1b8:	60a2      	str	r2, [r4, #8]
 801c1ba:	60e3      	str	r3, [r4, #12]
			break;
 801c1bc:	e318      	b.n	801c7f0 <problem_fetch+0x1ae60>
 801c1be:	bf00      	nop
 801c1c0:	0802ce74 	.word	0x0802ce74
 801c1c4:	08023b90 	.word	0x08023b90
 801c1c8:	0802ce80 	.word	0x0802ce80
 801c1cc:	0802bdf4 	.word	0x0802bdf4
 801c1d0:	08023d18 	.word	0x08023d18
 801c1d4:	0802ce90 	.word	0x0802ce90
 801c1d8:	08023b50 	.word	0x08023b50
 801c1dc:	0802ce9c 	.word	0x0802ce9c
 801c1e0:	0802ceb4 	.word	0x0802ceb4
 801c1e4:	0802ced8 	.word	0x0802ced8
 801c1e8:	0802cef0 	.word	0x0802cef0
 801c1ec:	0802cf04 	.word	0x0802cf04
 801c1f0:	0802cf14 	.word	0x0802cf14
 801c1f4:	0802cf28 	.word	0x0802cf28
 801c1f8:	0802cf34 	.word	0x0802cf34
 801c1fc:	08028c64 	.word	0x08028c64
 801c200:	08023f2c 	.word	0x08023f2c
 801c204:	0802cf40 	.word	0x0802cf40
 801c208:	0802cf4c 	.word	0x0802cf4c
 801c20c:	0802cf5c 	.word	0x0802cf5c
 801c210:	08023da0 	.word	0x08023da0
 801c214:	0802cf74 	.word	0x0802cf74
 801c218:	080243c4 	.word	0x080243c4
 801c21c:	0802cf8c 	.word	0x0802cf8c
 801c220:	0802cf9c 	.word	0x0802cf9c
 801c224:	08023cb4 	.word	0x08023cb4
		case 796 :
			strcpy(p->name,"HAN DUO");
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c22e:	49a4      	ldr	r1, [pc, #656]	; (801c4c0 <problem_fetch+0x1ab30>)
 801c230:	461a      	mov	r2, r3
 801c232:	460b      	mov	r3, r1
 801c234:	cb03      	ldmia	r3!, {r0, r1}
 801c236:	6010      	str	r0, [r2, #0]
 801c238:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c240:	4aa0      	ldr	r2, [pc, #640]	; (801c4c4 <problem_fetch+0x1ab34>)
 801c242:	8811      	ldrh	r1, [r2, #0]
 801c244:	7892      	ldrb	r2, [r2, #2]
 801c246:	8019      	strh	r1, [r3, #0]
 801c248:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	2205      	movs	r2, #5
 801c24e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,H,I");
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	33a4      	adds	r3, #164	; 0xa4
 801c254:	499c      	ldr	r1, [pc, #624]	; (801c4c8 <problem_fetch+0x1ab38>)
 801c256:	461a      	mov	r2, r3
 801c258:	460b      	mov	r3, r1
 801c25a:	cb03      	ldmia	r3!, {r0, r1}
 801c25c:	6010      	str	r0, [r2, #0]
 801c25e:	6051      	str	r1, [r2, #4]
 801c260:	881b      	ldrh	r3, [r3, #0]
 801c262:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,14,13,18");
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	3304      	adds	r3, #4
 801c268:	4a98      	ldr	r2, [pc, #608]	; (801c4cc <problem_fetch+0x1ab3c>)
 801c26a:	461c      	mov	r4, r3
 801c26c:	4613      	mov	r3, r2
 801c26e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c270:	6020      	str	r0, [r4, #0]
 801c272:	6061      	str	r1, [r4, #4]
 801c274:	60a2      	str	r2, [r4, #8]
 801c276:	881b      	ldrh	r3, [r3, #0]
 801c278:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c280:	4993      	ldr	r1, [pc, #588]	; (801c4d0 <problem_fetch+0x1ab40>)
 801c282:	461a      	mov	r2, r3
 801c284:	460b      	mov	r3, r1
 801c286:	cb03      	ldmia	r3!, {r0, r1}
 801c288:	6010      	str	r0, [r2, #0]
 801c28a:	6051      	str	r1, [r2, #4]
 801c28c:	881b      	ldrh	r3, [r3, #0]
 801c28e:	8113      	strh	r3, [r2, #8]
			break;
 801c290:	e2ae      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 797 :
			strcpy(p->name,"SINGLE DURA");
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c298:	4a8e      	ldr	r2, [pc, #568]	; (801c4d4 <problem_fetch+0x1ab44>)
 801c29a:	461c      	mov	r4, r3
 801c29c:	4613      	mov	r3, r2
 801c29e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2a0:	6020      	str	r0, [r4, #0]
 801c2a2:	6061      	str	r1, [r4, #4]
 801c2a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c2ac:	4a8a      	ldr	r2, [pc, #552]	; (801c4d8 <problem_fetch+0x1ab48>)
 801c2ae:	8811      	ldrh	r1, [r2, #0]
 801c2b0:	7892      	ldrb	r2, [r2, #2]
 801c2b2:	8019      	strh	r1, [r3, #0]
 801c2b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	2205      	movs	r2, #5
 801c2ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,D,D,A");
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	33a4      	adds	r3, #164	; 0xa4
 801c2c0:	4986      	ldr	r1, [pc, #536]	; (801c4dc <problem_fetch+0x1ab4c>)
 801c2c2:	461a      	mov	r2, r3
 801c2c4:	460b      	mov	r3, r1
 801c2c6:	cb03      	ldmia	r3!, {r0, r1}
 801c2c8:	6010      	str	r0, [r2, #0]
 801c2ca:	6051      	str	r1, [r2, #4]
 801c2cc:	881b      	ldrh	r3, [r3, #0]
 801c2ce:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,15,18");
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	3304      	adds	r3, #4
 801c2d4:	4a82      	ldr	r2, [pc, #520]	; (801c4e0 <problem_fetch+0x1ab50>)
 801c2d6:	461c      	mov	r4, r3
 801c2d8:	4613      	mov	r3, r2
 801c2da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2dc:	6020      	str	r0, [r4, #0]
 801c2de:	6061      	str	r1, [r4, #4]
 801c2e0:	60a2      	str	r2, [r4, #8]
 801c2e2:	781b      	ldrb	r3, [r3, #0]
 801c2e4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c2ec:	4978      	ldr	r1, [pc, #480]	; (801c4d0 <problem_fetch+0x1ab40>)
 801c2ee:	461a      	mov	r2, r3
 801c2f0:	460b      	mov	r3, r1
 801c2f2:	cb03      	ldmia	r3!, {r0, r1}
 801c2f4:	6010      	str	r0, [r2, #0]
 801c2f6:	6051      	str	r1, [r2, #4]
 801c2f8:	881b      	ldrh	r3, [r3, #0]
 801c2fa:	8113      	strh	r3, [r2, #8]
			break;
 801c2fc:	e278      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 798 :
			strcpy(p->name,"GUNTER");
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c304:	4a77      	ldr	r2, [pc, #476]	; (801c4e4 <problem_fetch+0x1ab54>)
 801c306:	6810      	ldr	r0, [r2, #0]
 801c308:	6018      	str	r0, [r3, #0]
 801c30a:	8891      	ldrh	r1, [r2, #4]
 801c30c:	7992      	ldrb	r2, [r2, #6]
 801c30e:	8099      	strh	r1, [r3, #4]
 801c310:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c318:	4a73      	ldr	r2, [pc, #460]	; (801c4e8 <problem_fetch+0x1ab58>)
 801c31a:	8811      	ldrh	r1, [r2, #0]
 801c31c:	7892      	ldrb	r2, [r2, #2]
 801c31e:	8019      	strh	r1, [r3, #0]
 801c320:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	2206      	movs	r2, #6
 801c326:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,E,B,D");
 801c328:	687b      	ldr	r3, [r7, #4]
 801c32a:	33a4      	adds	r3, #164	; 0xa4
 801c32c:	4a6f      	ldr	r2, [pc, #444]	; (801c4ec <problem_fetch+0x1ab5c>)
 801c32e:	461c      	mov	r4, r3
 801c330:	4613      	mov	r3, r2
 801c332:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c334:	6020      	str	r0, [r4, #0]
 801c336:	6061      	str	r1, [r4, #4]
 801c338:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,12,15,18");
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	3304      	adds	r3, #4
 801c33e:	4a6c      	ldr	r2, [pc, #432]	; (801c4f0 <problem_fetch+0x1ab60>)
 801c340:	461c      	mov	r4, r3
 801c342:	4615      	mov	r5, r2
 801c344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c346:	6020      	str	r0, [r4, #0]
 801c348:	6061      	str	r1, [r4, #4]
 801c34a:	60a2      	str	r2, [r4, #8]
 801c34c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c354:	4a67      	ldr	r2, [pc, #412]	; (801c4f4 <problem_fetch+0x1ab64>)
 801c356:	461c      	mov	r4, r3
 801c358:	4613      	mov	r3, r2
 801c35a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c35c:	6020      	str	r0, [r4, #0]
 801c35e:	6061      	str	r1, [r4, #4]
 801c360:	60a2      	str	r2, [r4, #8]
			break;
 801c362:	e245      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 799 :
			strcpy(p->name,"MAN WALKS DOWN THE STREET");
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c36a:	4a63      	ldr	r2, [pc, #396]	; (801c4f8 <problem_fetch+0x1ab68>)
 801c36c:	461d      	mov	r5, r3
 801c36e:	4614      	mov	r4, r2
 801c370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c372:	6028      	str	r0, [r5, #0]
 801c374:	6069      	str	r1, [r5, #4]
 801c376:	60aa      	str	r2, [r5, #8]
 801c378:	60eb      	str	r3, [r5, #12]
 801c37a:	cc03      	ldmia	r4!, {r0, r1}
 801c37c:	6128      	str	r0, [r5, #16]
 801c37e:	6169      	str	r1, [r5, #20]
 801c380:	8823      	ldrh	r3, [r4, #0]
 801c382:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c38a:	4a5c      	ldr	r2, [pc, #368]	; (801c4fc <problem_fetch+0x1ab6c>)
 801c38c:	6810      	ldr	r0, [r2, #0]
 801c38e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	2208      	movs	r2, #8
 801c394:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,E,B,E,B,E,A");
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	33a4      	adds	r3, #164	; 0xa4
 801c39a:	4a59      	ldr	r2, [pc, #356]	; (801c500 <problem_fetch+0x1ab70>)
 801c39c:	461c      	mov	r4, r3
 801c39e:	4615      	mov	r5, r2
 801c3a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3a2:	6020      	str	r0, [r4, #0]
 801c3a4:	6061      	str	r1, [r4, #4]
 801c3a6:	60a2      	str	r2, [r4, #8]
 801c3a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,16,18");
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	3304      	adds	r3, #4
 801c3ae:	4a55      	ldr	r2, [pc, #340]	; (801c504 <problem_fetch+0x1ab74>)
 801c3b0:	461d      	mov	r5, r3
 801c3b2:	4614      	mov	r4, r2
 801c3b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3b6:	6028      	str	r0, [r5, #0]
 801c3b8:	6069      	str	r1, [r5, #4]
 801c3ba:	60aa      	str	r2, [r5, #8]
 801c3bc:	60eb      	str	r3, [r5, #12]
 801c3be:	6820      	ldr	r0, [r4, #0]
 801c3c0:	6128      	str	r0, [r5, #16]
 801c3c2:	7923      	ldrb	r3, [r4, #4]
 801c3c4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c3cc:	4a4e      	ldr	r2, [pc, #312]	; (801c508 <problem_fetch+0x1ab78>)
 801c3ce:	461c      	mov	r4, r3
 801c3d0:	4615      	mov	r5, r2
 801c3d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c3d4:	6020      	str	r0, [r4, #0]
 801c3d6:	6061      	str	r1, [r4, #4]
 801c3d8:	60a2      	str	r2, [r4, #8]
 801c3da:	60e3      	str	r3, [r4, #12]
			break;
 801c3dc:	e208      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 800 :
			strcpy(p->name,"CHAD");
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c3e4:	4a49      	ldr	r2, [pc, #292]	; (801c50c <problem_fetch+0x1ab7c>)
 801c3e6:	6810      	ldr	r0, [r2, #0]
 801c3e8:	6018      	str	r0, [r3, #0]
 801c3ea:	7912      	ldrb	r2, [r2, #4]
 801c3ec:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c3f4:	4a46      	ldr	r2, [pc, #280]	; (801c510 <problem_fetch+0x1ab80>)
 801c3f6:	6810      	ldr	r0, [r2, #0]
 801c3f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	2207      	movs	r2, #7
 801c3fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,E,D");
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	33a4      	adds	r3, #164	; 0xa4
 801c404:	4a43      	ldr	r2, [pc, #268]	; (801c514 <problem_fetch+0x1ab84>)
 801c406:	461c      	mov	r4, r3
 801c408:	4613      	mov	r3, r2
 801c40a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c40c:	6020      	str	r0, [r4, #0]
 801c40e:	6061      	str	r1, [r4, #4]
 801c410:	60a2      	str	r2, [r4, #8]
 801c412:	881b      	ldrh	r3, [r3, #0]
 801c414:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,16,18");
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	3304      	adds	r3, #4
 801c41a:	4a3f      	ldr	r2, [pc, #252]	; (801c518 <problem_fetch+0x1ab88>)
 801c41c:	461d      	mov	r5, r3
 801c41e:	4614      	mov	r4, r2
 801c420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c422:	6028      	str	r0, [r5, #0]
 801c424:	6069      	str	r1, [r5, #4]
 801c426:	60aa      	str	r2, [r5, #8]
 801c428:	60eb      	str	r3, [r5, #12]
 801c42a:	8823      	ldrh	r3, [r4, #0]
 801c42c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c434:	4a39      	ldr	r2, [pc, #228]	; (801c51c <problem_fetch+0x1ab8c>)
 801c436:	461c      	mov	r4, r3
 801c438:	4613      	mov	r3, r2
 801c43a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c43c:	6020      	str	r0, [r4, #0]
 801c43e:	6061      	str	r1, [r4, #4]
 801c440:	60a2      	str	r2, [r4, #8]
 801c442:	881b      	ldrh	r3, [r3, #0]
 801c444:	81a3      	strh	r3, [r4, #12]
			break;
 801c446:	e1d3      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 801 :
			strcpy(p->name,"PROBLEM 19");
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c44e:	4934      	ldr	r1, [pc, #208]	; (801c520 <problem_fetch+0x1ab90>)
 801c450:	461a      	mov	r2, r3
 801c452:	460b      	mov	r3, r1
 801c454:	cb03      	ldmia	r3!, {r0, r1}
 801c456:	6010      	str	r0, [r2, #0]
 801c458:	6051      	str	r1, [r2, #4]
 801c45a:	8819      	ldrh	r1, [r3, #0]
 801c45c:	789b      	ldrb	r3, [r3, #2]
 801c45e:	8111      	strh	r1, [r2, #8]
 801c460:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c468:	4a2e      	ldr	r2, [pc, #184]	; (801c524 <problem_fetch+0x1ab94>)
 801c46a:	8811      	ldrh	r1, [r2, #0]
 801c46c:	7892      	ldrb	r2, [r2, #2]
 801c46e:	8019      	strh	r1, [r3, #0]
 801c470:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	2207      	movs	r2, #7
 801c476:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,E,F,G,H,A");
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	33a4      	adds	r3, #164	; 0xa4
 801c47c:	4a2a      	ldr	r2, [pc, #168]	; (801c528 <problem_fetch+0x1ab98>)
 801c47e:	461c      	mov	r4, r3
 801c480:	4613      	mov	r3, r2
 801c482:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c484:	6020      	str	r0, [r4, #0]
 801c486:	6061      	str	r1, [r4, #4]
 801c488:	60a2      	str	r2, [r4, #8]
 801c48a:	881b      	ldrh	r3, [r3, #0]
 801c48c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,12,11,9,8,18");
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	3304      	adds	r3, #4
 801c492:	4a26      	ldr	r2, [pc, #152]	; (801c52c <problem_fetch+0x1ab9c>)
 801c494:	461d      	mov	r5, r3
 801c496:	4614      	mov	r4, r2
 801c498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c49a:	6028      	str	r0, [r5, #0]
 801c49c:	6069      	str	r1, [r5, #4]
 801c49e:	60aa      	str	r2, [r5, #8]
 801c4a0:	60eb      	str	r3, [r5, #12]
 801c4a2:	8823      	ldrh	r3, [r4, #0]
 801c4a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c4ac:	4a1b      	ldr	r2, [pc, #108]	; (801c51c <problem_fetch+0x1ab8c>)
 801c4ae:	461c      	mov	r4, r3
 801c4b0:	4613      	mov	r3, r2
 801c4b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c4b4:	6020      	str	r0, [r4, #0]
 801c4b6:	6061      	str	r1, [r4, #4]
 801c4b8:	60a2      	str	r2, [r4, #8]
 801c4ba:	881b      	ldrh	r3, [r3, #0]
 801c4bc:	81a3      	strh	r3, [r4, #12]
			break;
 801c4be:	e197      	b.n	801c7f0 <problem_fetch+0x1ae60>
 801c4c0:	0802cfb0 	.word	0x0802cfb0
 801c4c4:	080243c4 	.word	0x080243c4
 801c4c8:	0802cfb8 	.word	0x0802cfb8
 801c4cc:	0802cfc4 	.word	0x0802cfc4
 801c4d0:	0802405c 	.word	0x0802405c
 801c4d4:	0802cfd4 	.word	0x0802cfd4
 801c4d8:	08024288 	.word	0x08024288
 801c4dc:	0802cfe0 	.word	0x0802cfe0
 801c4e0:	0802cfec 	.word	0x0802cfec
 801c4e4:	0802cffc 	.word	0x0802cffc
 801c4e8:	08023b50 	.word	0x08023b50
 801c4ec:	0802d004 	.word	0x0802d004
 801c4f0:	0802d010 	.word	0x0802d010
 801c4f4:	08023f2c 	.word	0x08023f2c
 801c4f8:	0802d020 	.word	0x0802d020
 801c4fc:	08023b90 	.word	0x08023b90
 801c500:	0802d03c 	.word	0x0802d03c
 801c504:	0802d04c 	.word	0x0802d04c
 801c508:	08023cb4 	.word	0x08023cb4
 801c50c:	0802d064 	.word	0x0802d064
 801c510:	08023ccc 	.word	0x08023ccc
 801c514:	0802d06c 	.word	0x0802d06c
 801c518:	0802d07c 	.word	0x0802d07c
 801c51c:	08023d18 	.word	0x08023d18
 801c520:	0802d090 	.word	0x0802d090
 801c524:	08023c5c 	.word	0x08023c5c
 801c528:	0802d09c 	.word	0x0802d09c
 801c52c:	0802d0ac 	.word	0x0802d0ac
		case 802 :
			strcpy(p->name,"PROBLEM 17");
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c536:	49b0      	ldr	r1, [pc, #704]	; (801c7f8 <problem_fetch+0x1ae68>)
 801c538:	461a      	mov	r2, r3
 801c53a:	460b      	mov	r3, r1
 801c53c:	cb03      	ldmia	r3!, {r0, r1}
 801c53e:	6010      	str	r0, [r2, #0]
 801c540:	6051      	str	r1, [r2, #4]
 801c542:	8819      	ldrh	r1, [r3, #0]
 801c544:	789b      	ldrb	r3, [r3, #2]
 801c546:	8111      	strh	r1, [r2, #8]
 801c548:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c550:	4aaa      	ldr	r2, [pc, #680]	; (801c7fc <problem_fetch+0x1ae6c>)
 801c552:	8811      	ldrh	r1, [r2, #0]
 801c554:	7892      	ldrb	r2, [r2, #2]
 801c556:	8019      	strh	r1, [r3, #0]
 801c558:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	2207      	movs	r2, #7
 801c55e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,E,G,C,A");
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	33a4      	adds	r3, #164	; 0xa4
 801c564:	4aa6      	ldr	r2, [pc, #664]	; (801c800 <problem_fetch+0x1ae70>)
 801c566:	461c      	mov	r4, r3
 801c568:	4613      	mov	r3, r2
 801c56a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c56c:	6020      	str	r0, [r4, #0]
 801c56e:	6061      	str	r1, [r4, #4]
 801c570:	60a2      	str	r2, [r4, #8]
 801c572:	881b      	ldrh	r3, [r3, #0]
 801c574:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,16,18");
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	3304      	adds	r3, #4
 801c57a:	4aa2      	ldr	r2, [pc, #648]	; (801c804 <problem_fetch+0x1ae74>)
 801c57c:	461d      	mov	r5, r3
 801c57e:	4614      	mov	r4, r2
 801c580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c582:	6028      	str	r0, [r5, #0]
 801c584:	6069      	str	r1, [r5, #4]
 801c586:	60aa      	str	r2, [r5, #8]
 801c588:	60eb      	str	r3, [r5, #12]
 801c58a:	8823      	ldrh	r3, [r4, #0]
 801c58c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c594:	4a9c      	ldr	r2, [pc, #624]	; (801c808 <problem_fetch+0x1ae78>)
 801c596:	461c      	mov	r4, r3
 801c598:	4613      	mov	r3, r2
 801c59a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c59c:	6020      	str	r0, [r4, #0]
 801c59e:	6061      	str	r1, [r4, #4]
 801c5a0:	60a2      	str	r2, [r4, #8]
 801c5a2:	881b      	ldrh	r3, [r3, #0]
 801c5a4:	81a3      	strh	r3, [r4, #12]
			break;
 801c5a6:	e123      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 803 :
			strcpy(p->name,"PROBLEM 12");
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c5ae:	4997      	ldr	r1, [pc, #604]	; (801c80c <problem_fetch+0x1ae7c>)
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	460b      	mov	r3, r1
 801c5b4:	cb03      	ldmia	r3!, {r0, r1}
 801c5b6:	6010      	str	r0, [r2, #0]
 801c5b8:	6051      	str	r1, [r2, #4]
 801c5ba:	8819      	ldrh	r1, [r3, #0]
 801c5bc:	789b      	ldrb	r3, [r3, #2]
 801c5be:	8111      	strh	r1, [r2, #8]
 801c5c0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c5c8:	4a91      	ldr	r2, [pc, #580]	; (801c810 <problem_fetch+0x1ae80>)
 801c5ca:	6810      	ldr	r0, [r2, #0]
 801c5cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	2206      	movs	r2, #6
 801c5d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,H,G,B,A");
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	33a4      	adds	r3, #164	; 0xa4
 801c5d8:	4a8e      	ldr	r2, [pc, #568]	; (801c814 <problem_fetch+0x1ae84>)
 801c5da:	461c      	mov	r4, r3
 801c5dc:	4613      	mov	r3, r2
 801c5de:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c5e0:	6020      	str	r0, [r4, #0]
 801c5e2:	6061      	str	r1, [r4, #4]
 801c5e4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,12,14,15,18");
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	3304      	adds	r3, #4
 801c5ea:	4a8b      	ldr	r2, [pc, #556]	; (801c818 <problem_fetch+0x1ae88>)
 801c5ec:	461c      	mov	r4, r3
 801c5ee:	4615      	mov	r5, r2
 801c5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c5f2:	6020      	str	r0, [r4, #0]
 801c5f4:	6061      	str	r1, [r4, #4]
 801c5f6:	60a2      	str	r2, [r4, #8]
 801c5f8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c600:	4a86      	ldr	r2, [pc, #536]	; (801c81c <problem_fetch+0x1ae8c>)
 801c602:	461c      	mov	r4, r3
 801c604:	4613      	mov	r3, r2
 801c606:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c608:	6020      	str	r0, [r4, #0]
 801c60a:	6061      	str	r1, [r4, #4]
 801c60c:	60a2      	str	r2, [r4, #8]
			break;
 801c60e:	e0ef      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 804 :
			strcpy(p->name,"PROBLEM 11");
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c616:	4982      	ldr	r1, [pc, #520]	; (801c820 <problem_fetch+0x1ae90>)
 801c618:	461a      	mov	r2, r3
 801c61a:	460b      	mov	r3, r1
 801c61c:	cb03      	ldmia	r3!, {r0, r1}
 801c61e:	6010      	str	r0, [r2, #0]
 801c620:	6051      	str	r1, [r2, #4]
 801c622:	8819      	ldrh	r1, [r3, #0]
 801c624:	789b      	ldrb	r3, [r3, #2]
 801c626:	8111      	strh	r1, [r2, #8]
 801c628:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c630:	4a72      	ldr	r2, [pc, #456]	; (801c7fc <problem_fetch+0x1ae6c>)
 801c632:	8811      	ldrh	r1, [r2, #0]
 801c634:	7892      	ldrb	r2, [r2, #2]
 801c636:	8019      	strh	r1, [r3, #0]
 801c638:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c63a:	687b      	ldr	r3, [r7, #4]
 801c63c:	2207      	movs	r2, #7
 801c63e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	33a4      	adds	r3, #164	; 0xa4
 801c644:	4a77      	ldr	r2, [pc, #476]	; (801c824 <problem_fetch+0x1ae94>)
 801c646:	461c      	mov	r4, r3
 801c648:	4613      	mov	r3, r2
 801c64a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c64c:	6020      	str	r0, [r4, #0]
 801c64e:	6061      	str	r1, [r4, #4]
 801c650:	60a2      	str	r2, [r4, #8]
 801c652:	881b      	ldrh	r3, [r3, #0]
 801c654:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,14,16,18");
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	3304      	adds	r3, #4
 801c65a:	4a73      	ldr	r2, [pc, #460]	; (801c828 <problem_fetch+0x1ae98>)
 801c65c:	461d      	mov	r5, r3
 801c65e:	4614      	mov	r4, r2
 801c660:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c662:	6028      	str	r0, [r5, #0]
 801c664:	6069      	str	r1, [r5, #4]
 801c666:	60aa      	str	r2, [r5, #8]
 801c668:	60eb      	str	r3, [r5, #12]
 801c66a:	8823      	ldrh	r3, [r4, #0]
 801c66c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c674:	4a6d      	ldr	r2, [pc, #436]	; (801c82c <problem_fetch+0x1ae9c>)
 801c676:	461c      	mov	r4, r3
 801c678:	4613      	mov	r3, r2
 801c67a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c67c:	6020      	str	r0, [r4, #0]
 801c67e:	6061      	str	r1, [r4, #4]
 801c680:	60a2      	str	r2, [r4, #8]
 801c682:	881b      	ldrh	r3, [r3, #0]
 801c684:	81a3      	strh	r3, [r4, #12]
			break;
 801c686:	e0b3      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 805 :
			strcpy(p->name,"PROBLEM 5");
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c68e:	4968      	ldr	r1, [pc, #416]	; (801c830 <problem_fetch+0x1aea0>)
 801c690:	461a      	mov	r2, r3
 801c692:	460b      	mov	r3, r1
 801c694:	cb03      	ldmia	r3!, {r0, r1}
 801c696:	6010      	str	r0, [r2, #0]
 801c698:	6051      	str	r1, [r2, #4]
 801c69a:	881b      	ldrh	r3, [r3, #0]
 801c69c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c6a4:	4a55      	ldr	r2, [pc, #340]	; (801c7fc <problem_fetch+0x1ae6c>)
 801c6a6:	8811      	ldrh	r1, [r2, #0]
 801c6a8:	7892      	ldrb	r2, [r2, #2]
 801c6aa:	8019      	strh	r1, [r3, #0]
 801c6ac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	2208      	movs	r2, #8
 801c6b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,I,E,D");
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	33a4      	adds	r3, #164	; 0xa4
 801c6b8:	4a5e      	ldr	r2, [pc, #376]	; (801c834 <problem_fetch+0x1aea4>)
 801c6ba:	461c      	mov	r4, r3
 801c6bc:	4615      	mov	r5, r2
 801c6be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c6c0:	6020      	str	r0, [r4, #0]
 801c6c2:	6061      	str	r1, [r4, #4]
 801c6c4:	60a2      	str	r2, [r4, #8]
 801c6c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,14,16,18");
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	3304      	adds	r3, #4
 801c6cc:	4a5a      	ldr	r2, [pc, #360]	; (801c838 <problem_fetch+0x1aea8>)
 801c6ce:	461d      	mov	r5, r3
 801c6d0:	4614      	mov	r4, r2
 801c6d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c6d4:	6028      	str	r0, [r5, #0]
 801c6d6:	6069      	str	r1, [r5, #4]
 801c6d8:	60aa      	str	r2, [r5, #8]
 801c6da:	60eb      	str	r3, [r5, #12]
 801c6dc:	6820      	ldr	r0, [r4, #0]
 801c6de:	6128      	str	r0, [r5, #16]
 801c6e0:	7923      	ldrb	r3, [r4, #4]
 801c6e2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c6ea:	4a54      	ldr	r2, [pc, #336]	; (801c83c <problem_fetch+0x1aeac>)
 801c6ec:	461c      	mov	r4, r3
 801c6ee:	4615      	mov	r5, r2
 801c6f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c6f2:	6020      	str	r0, [r4, #0]
 801c6f4:	6061      	str	r1, [r4, #4]
 801c6f6:	60a2      	str	r2, [r4, #8]
 801c6f8:	60e3      	str	r3, [r4, #12]
			break;
 801c6fa:	e079      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 806 :
			strcpy(p->name,"HARD TIMES");
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c702:	494f      	ldr	r1, [pc, #316]	; (801c840 <problem_fetch+0x1aeb0>)
 801c704:	461a      	mov	r2, r3
 801c706:	460b      	mov	r3, r1
 801c708:	cb03      	ldmia	r3!, {r0, r1}
 801c70a:	6010      	str	r0, [r2, #0]
 801c70c:	6051      	str	r1, [r2, #4]
 801c70e:	8819      	ldrh	r1, [r3, #0]
 801c710:	789b      	ldrb	r3, [r3, #2]
 801c712:	8111      	strh	r1, [r2, #8]
 801c714:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c716:	687b      	ldr	r3, [r7, #4]
 801c718:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c71c:	4a37      	ldr	r2, [pc, #220]	; (801c7fc <problem_fetch+0x1ae6c>)
 801c71e:	8811      	ldrh	r1, [r2, #0]
 801c720:	7892      	ldrb	r2, [r2, #2]
 801c722:	8019      	strh	r1, [r3, #0]
 801c724:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	2208      	movs	r2, #8
 801c72a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,E,E,G,I,J");
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	33a4      	adds	r3, #164	; 0xa4
 801c730:	4a44      	ldr	r2, [pc, #272]	; (801c844 <problem_fetch+0x1aeb4>)
 801c732:	461c      	mov	r4, r3
 801c734:	4615      	mov	r5, r2
 801c736:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c738:	6020      	str	r0, [r4, #0]
 801c73a:	6061      	str	r1, [r4, #4]
 801c73c:	60a2      	str	r2, [r4, #8]
 801c73e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,6,8,12,16,4,18,5");
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	3304      	adds	r3, #4
 801c744:	4a40      	ldr	r2, [pc, #256]	; (801c848 <problem_fetch+0x1aeb8>)
 801c746:	461d      	mov	r5, r3
 801c748:	4614      	mov	r4, r2
 801c74a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c74c:	6028      	str	r0, [r5, #0]
 801c74e:	6069      	str	r1, [r5, #4]
 801c750:	60aa      	str	r2, [r5, #8]
 801c752:	60eb      	str	r3, [r5, #12]
 801c754:	6820      	ldr	r0, [r4, #0]
 801c756:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e,s");
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c75e:	4a3b      	ldr	r2, [pc, #236]	; (801c84c <problem_fetch+0x1aebc>)
 801c760:	461c      	mov	r4, r3
 801c762:	4615      	mov	r5, r2
 801c764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c766:	6020      	str	r0, [r4, #0]
 801c768:	6061      	str	r1, [r4, #4]
 801c76a:	60a2      	str	r2, [r4, #8]
 801c76c:	60e3      	str	r3, [r4, #12]
			break;
 801c76e:	e03f      	b.n	801c7f0 <problem_fetch+0x1ae60>
		case 807 :
			strcpy(p->name,"FAR FROM THE MADDING CROWD");
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c776:	4a36      	ldr	r2, [pc, #216]	; (801c850 <problem_fetch+0x1aec0>)
 801c778:	461d      	mov	r5, r3
 801c77a:	4614      	mov	r4, r2
 801c77c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c77e:	6028      	str	r0, [r5, #0]
 801c780:	6069      	str	r1, [r5, #4]
 801c782:	60aa      	str	r2, [r5, #8]
 801c784:	60eb      	str	r3, [r5, #12]
 801c786:	cc03      	ldmia	r4!, {r0, r1}
 801c788:	6128      	str	r0, [r5, #16]
 801c78a:	6169      	str	r1, [r5, #20]
 801c78c:	8823      	ldrh	r3, [r4, #0]
 801c78e:	78a2      	ldrb	r2, [r4, #2]
 801c790:	832b      	strh	r3, [r5, #24]
 801c792:	4613      	mov	r3, r2
 801c794:	76ab      	strb	r3, [r5, #26]
			strcpy(p->grade,"6B+");
 801c796:	687b      	ldr	r3, [r7, #4]
 801c798:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c79c:	4a2d      	ldr	r2, [pc, #180]	; (801c854 <problem_fetch+0x1aec4>)
 801c79e:	6810      	ldr	r0, [r2, #0]
 801c7a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c7a2:	687b      	ldr	r3, [r7, #4]
 801c7a4:	2207      	movs	r2, #7
 801c7a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,D,D");
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	33a4      	adds	r3, #164	; 0xa4
 801c7ac:	4a2a      	ldr	r2, [pc, #168]	; (801c858 <problem_fetch+0x1aec8>)
 801c7ae:	461c      	mov	r4, r3
 801c7b0:	4613      	mov	r3, r2
 801c7b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c7b4:	6020      	str	r0, [r4, #0]
 801c7b6:	6061      	str	r1, [r4, #4]
 801c7b8:	60a2      	str	r2, [r4, #8]
 801c7ba:	881b      	ldrh	r3, [r3, #0]
 801c7bc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,15,18");
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	3304      	adds	r3, #4
 801c7c2:	4a26      	ldr	r2, [pc, #152]	; (801c85c <problem_fetch+0x1aecc>)
 801c7c4:	461d      	mov	r5, r3
 801c7c6:	4614      	mov	r4, r2
 801c7c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c7ca:	6028      	str	r0, [r5, #0]
 801c7cc:	6069      	str	r1, [r5, #4]
 801c7ce:	60aa      	str	r2, [r5, #8]
 801c7d0:	60eb      	str	r3, [r5, #12]
 801c7d2:	8823      	ldrh	r3, [r4, #0]
 801c7d4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c7dc:	4a13      	ldr	r2, [pc, #76]	; (801c82c <problem_fetch+0x1ae9c>)
 801c7de:	461c      	mov	r4, r3
 801c7e0:	4613      	mov	r3, r2
 801c7e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c7e4:	6020      	str	r0, [r4, #0]
 801c7e6:	6061      	str	r1, [r4, #4]
 801c7e8:	60a2      	str	r2, [r4, #8]
 801c7ea:	881b      	ldrh	r3, [r3, #0]
 801c7ec:	81a3      	strh	r3, [r4, #12]
			break;
 801c7ee:	bf00      	nop
	}
}
 801c7f0:	bf00      	nop
 801c7f2:	370c      	adds	r7, #12
 801c7f4:	46bd      	mov	sp, r7
 801c7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7f8:	0802d0c0 	.word	0x0802d0c0
 801c7fc:	08023b50 	.word	0x08023b50
 801c800:	0802d0cc 	.word	0x0802d0cc
 801c804:	0802d0dc 	.word	0x0802d0dc
 801c808:	08023d18 	.word	0x08023d18
 801c80c:	0802d0f0 	.word	0x0802d0f0
 801c810:	08023d30 	.word	0x08023d30
 801c814:	0802d0fc 	.word	0x0802d0fc
 801c818:	0802d108 	.word	0x0802d108
 801c81c:	08023f2c 	.word	0x08023f2c
 801c820:	0802d118 	.word	0x0802d118
 801c824:	08028964 	.word	0x08028964
 801c828:	0802d124 	.word	0x0802d124
 801c82c:	08023c08 	.word	0x08023c08
 801c830:	0802d138 	.word	0x0802d138
 801c834:	0802d144 	.word	0x0802d144
 801c838:	0802d154 	.word	0x0802d154
 801c83c:	08023da0 	.word	0x08023da0
 801c840:	0802d16c 	.word	0x0802d16c
 801c844:	0802d178 	.word	0x0802d178
 801c848:	0802d188 	.word	0x0802d188
 801c84c:	0802d19c 	.word	0x0802d19c
 801c850:	0802d1ac 	.word	0x0802d1ac
 801c854:	08023b90 	.word	0x08023b90
 801c858:	0802d1c8 	.word	0x0802d1c8
 801c85c:	0802d1d8 	.word	0x0802d1d8

0801c860 <PRINTF>:
#include <string.h>
#include <stdio.h>



void PRINTF(char str[50]){
 801c860:	b580      	push	{r7, lr}
 801c862:	b090      	sub	sp, #64	; 0x40
 801c864:	af00      	add	r7, sp, #0
 801c866:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 801c868:	f107 0308 	add.w	r3, r7, #8
 801c86c:	6879      	ldr	r1, [r7, #4]
 801c86e:	4618      	mov	r0, r3
 801c870:	f005 fc14 	bl	802209c <siprintf>
 801c874:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 801c876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c878:	b29a      	uxth	r2, r3
 801c87a:	f107 0108 	add.w	r1, r7, #8
 801c87e:	f241 3388 	movw	r3, #5000	; 0x1388
 801c882:	4803      	ldr	r0, [pc, #12]	; (801c890 <PRINTF+0x30>)
 801c884:	f004 fc53 	bl	802112e <HAL_UART_Transmit>
}
 801c888:	bf00      	nop
 801c88a:	3740      	adds	r7, #64	; 0x40
 801c88c:	46bd      	mov	sp, r7
 801c88e:	bd80      	pop	{r7, pc}
 801c890:	200054b8 	.word	0x200054b8

0801c894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b082      	sub	sp, #8
 801c898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801c89a:	2300      	movs	r3, #0
 801c89c:	607b      	str	r3, [r7, #4]
 801c89e:	4b10      	ldr	r3, [pc, #64]	; (801c8e0 <MX_DMA_Init+0x4c>)
 801c8a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8a2:	4a0f      	ldr	r2, [pc, #60]	; (801c8e0 <MX_DMA_Init+0x4c>)
 801c8a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c8a8:	6313      	str	r3, [r2, #48]	; 0x30
 801c8aa:	4b0d      	ldr	r3, [pc, #52]	; (801c8e0 <MX_DMA_Init+0x4c>)
 801c8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c8b2:	607b      	str	r3, [r7, #4]
 801c8b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	2100      	movs	r1, #0
 801c8ba:	200f      	movs	r0, #15
 801c8bc:	f001 fbe9 	bl	801e092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 801c8c0:	200f      	movs	r0, #15
 801c8c2:	f001 fc02 	bl	801e0ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801c8c6:	2200      	movs	r2, #0
 801c8c8:	2100      	movs	r1, #0
 801c8ca:	2010      	movs	r0, #16
 801c8cc:	f001 fbe1 	bl	801e092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 801c8d0:	2010      	movs	r0, #16
 801c8d2:	f001 fbfa 	bl	801e0ca <HAL_NVIC_EnableIRQ>

}
 801c8d6:	bf00      	nop
 801c8d8:	3708      	adds	r7, #8
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	40023800 	.word	0x40023800

0801c8e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b08a      	sub	sp, #40	; 0x28
 801c8e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c8ea:	f107 0314 	add.w	r3, r7, #20
 801c8ee:	2200      	movs	r2, #0
 801c8f0:	601a      	str	r2, [r3, #0]
 801c8f2:	605a      	str	r2, [r3, #4]
 801c8f4:	609a      	str	r2, [r3, #8]
 801c8f6:	60da      	str	r2, [r3, #12]
 801c8f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801c8fa:	2300      	movs	r3, #0
 801c8fc:	613b      	str	r3, [r7, #16]
 801c8fe:	4b52      	ldr	r3, [pc, #328]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c902:	4a51      	ldr	r2, [pc, #324]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c904:	f043 0304 	orr.w	r3, r3, #4
 801c908:	6313      	str	r3, [r2, #48]	; 0x30
 801c90a:	4b4f      	ldr	r3, [pc, #316]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c90e:	f003 0304 	and.w	r3, r3, #4
 801c912:	613b      	str	r3, [r7, #16]
 801c914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801c916:	2300      	movs	r3, #0
 801c918:	60fb      	str	r3, [r7, #12]
 801c91a:	4b4b      	ldr	r3, [pc, #300]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c91c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c91e:	4a4a      	ldr	r2, [pc, #296]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c924:	6313      	str	r3, [r2, #48]	; 0x30
 801c926:	4b48      	ldr	r3, [pc, #288]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c92a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c92e:	60fb      	str	r3, [r7, #12]
 801c930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c932:	2300      	movs	r3, #0
 801c934:	60bb      	str	r3, [r7, #8]
 801c936:	4b44      	ldr	r3, [pc, #272]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c93a:	4a43      	ldr	r2, [pc, #268]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c93c:	f043 0301 	orr.w	r3, r3, #1
 801c940:	6313      	str	r3, [r2, #48]	; 0x30
 801c942:	4b41      	ldr	r3, [pc, #260]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c946:	f003 0301 	and.w	r3, r3, #1
 801c94a:	60bb      	str	r3, [r7, #8]
 801c94c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801c94e:	2300      	movs	r3, #0
 801c950:	607b      	str	r3, [r7, #4]
 801c952:	4b3d      	ldr	r3, [pc, #244]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c956:	4a3c      	ldr	r2, [pc, #240]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c958:	f043 0302 	orr.w	r3, r3, #2
 801c95c:	6313      	str	r3, [r2, #48]	; 0x30
 801c95e:	4b3a      	ldr	r3, [pc, #232]	; (801ca48 <MX_GPIO_Init+0x164>)
 801c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c962:	f003 0302 	and.w	r3, r3, #2
 801c966:	607b      	str	r3, [r7, #4]
 801c968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 801c96a:	2200      	movs	r2, #0
 801c96c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c970:	4836      	ldr	r0, [pc, #216]	; (801ca4c <MX_GPIO_Init+0x168>)
 801c972:	f002 f8ef 	bl	801eb54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801c976:	2200      	movs	r2, #0
 801c978:	2180      	movs	r1, #128	; 0x80
 801c97a:	4835      	ldr	r0, [pc, #212]	; (801ca50 <MX_GPIO_Init+0x16c>)
 801c97c:	f002 f8ea 	bl	801eb54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801c980:	2200      	movs	r2, #0
 801c982:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c986:	4833      	ldr	r0, [pc, #204]	; (801ca54 <MX_GPIO_Init+0x170>)
 801c988:	f002 f8e4 	bl	801eb54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801c98c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801c992:	4b31      	ldr	r3, [pc, #196]	; (801ca58 <MX_GPIO_Init+0x174>)
 801c994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c996:	2300      	movs	r3, #0
 801c998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801c99a:	f107 0314 	add.w	r3, r7, #20
 801c99e:	4619      	mov	r1, r3
 801c9a0:	482b      	ldr	r0, [pc, #172]	; (801ca50 <MX_GPIO_Init+0x16c>)
 801c9a2:	f001 ff3d 	bl	801e820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 801c9a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801c9aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c9ac:	2301      	movs	r3, #1
 801c9ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9b0:	2300      	movs	r3, #0
 801c9b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c9b8:	f107 0314 	add.w	r3, r7, #20
 801c9bc:	4619      	mov	r1, r3
 801c9be:	4823      	ldr	r0, [pc, #140]	; (801ca4c <MX_GPIO_Init+0x168>)
 801c9c0:	f001 ff2e 	bl	801e820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801c9c4:	2380      	movs	r3, #128	; 0x80
 801c9c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c9c8:	2301      	movs	r3, #1
 801c9ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9cc:	2300      	movs	r3, #0
 801c9ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c9d4:	f107 0314 	add.w	r3, r7, #20
 801c9d8:	4619      	mov	r1, r3
 801c9da:	481d      	ldr	r0, [pc, #116]	; (801ca50 <MX_GPIO_Init+0x16c>)
 801c9dc:	f001 ff20 	bl	801e820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801c9e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 801c9e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c9e6:	2301      	movs	r3, #1
 801c9e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c9ee:	2300      	movs	r3, #0
 801c9f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c9f2:	f107 0314 	add.w	r3, r7, #20
 801c9f6:	4619      	mov	r1, r3
 801c9f8:	4816      	ldr	r0, [pc, #88]	; (801ca54 <MX_GPIO_Init+0x170>)
 801c9fa:	f001 ff11 	bl	801e820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801c9fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ca04:	2300      	movs	r3, #0
 801ca06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801ca08:	2301      	movs	r3, #1
 801ca0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801ca0c:	f107 0314 	add.w	r3, r7, #20
 801ca10:	4619      	mov	r1, r3
 801ca12:	4810      	ldr	r0, [pc, #64]	; (801ca54 <MX_GPIO_Init+0x170>)
 801ca14:	f001 ff04 	bl	801e820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801ca18:	2338      	movs	r3, #56	; 0x38
 801ca1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801ca20:	2301      	movs	r3, #1
 801ca22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801ca24:	f107 0314 	add.w	r3, r7, #20
 801ca28:	4619      	mov	r1, r3
 801ca2a:	4808      	ldr	r0, [pc, #32]	; (801ca4c <MX_GPIO_Init+0x168>)
 801ca2c:	f001 fef8 	bl	801e820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801ca30:	2200      	movs	r2, #0
 801ca32:	2100      	movs	r1, #0
 801ca34:	2028      	movs	r0, #40	; 0x28
 801ca36:	f001 fb2c 	bl	801e092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801ca3a:	2028      	movs	r0, #40	; 0x28
 801ca3c:	f001 fb45 	bl	801e0ca <HAL_NVIC_EnableIRQ>

}
 801ca40:	bf00      	nop
 801ca42:	3728      	adds	r7, #40	; 0x28
 801ca44:	46bd      	mov	sp, r7
 801ca46:	bd80      	pop	{r7, pc}
 801ca48:	40023800 	.word	0x40023800
 801ca4c:	40020400 	.word	0x40020400
 801ca50:	40020800 	.word	0x40020800
 801ca54:	40020000 	.word	0x40020000
 801ca58:	10210000 	.word	0x10210000

0801ca5c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801ca60:	4b12      	ldr	r3, [pc, #72]	; (801caac <MX_I2C1_Init+0x50>)
 801ca62:	4a13      	ldr	r2, [pc, #76]	; (801cab0 <MX_I2C1_Init+0x54>)
 801ca64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801ca66:	4b11      	ldr	r3, [pc, #68]	; (801caac <MX_I2C1_Init+0x50>)
 801ca68:	4a12      	ldr	r2, [pc, #72]	; (801cab4 <MX_I2C1_Init+0x58>)
 801ca6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801ca6c:	4b0f      	ldr	r3, [pc, #60]	; (801caac <MX_I2C1_Init+0x50>)
 801ca6e:	2200      	movs	r2, #0
 801ca70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801ca72:	4b0e      	ldr	r3, [pc, #56]	; (801caac <MX_I2C1_Init+0x50>)
 801ca74:	2200      	movs	r2, #0
 801ca76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801ca78:	4b0c      	ldr	r3, [pc, #48]	; (801caac <MX_I2C1_Init+0x50>)
 801ca7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801ca7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801ca80:	4b0a      	ldr	r3, [pc, #40]	; (801caac <MX_I2C1_Init+0x50>)
 801ca82:	2200      	movs	r2, #0
 801ca84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801ca86:	4b09      	ldr	r3, [pc, #36]	; (801caac <MX_I2C1_Init+0x50>)
 801ca88:	2200      	movs	r2, #0
 801ca8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801ca8c:	4b07      	ldr	r3, [pc, #28]	; (801caac <MX_I2C1_Init+0x50>)
 801ca8e:	2200      	movs	r2, #0
 801ca90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801ca92:	4b06      	ldr	r3, [pc, #24]	; (801caac <MX_I2C1_Init+0x50>)
 801ca94:	2200      	movs	r2, #0
 801ca96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801ca98:	4804      	ldr	r0, [pc, #16]	; (801caac <MX_I2C1_Init+0x50>)
 801ca9a:	f002 f88d 	bl	801ebb8 <HAL_I2C_Init>
 801ca9e:	4603      	mov	r3, r0
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d001      	beq.n	801caa8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801caa4:	f000 fd74 	bl	801d590 <Error_Handler>
  }

}
 801caa8:	bf00      	nop
 801caaa:	bd80      	pop	{r7, pc}
 801caac:	200052e4 	.word	0x200052e4
 801cab0:	40005400 	.word	0x40005400
 801cab4:	000186a0 	.word	0x000186a0

0801cab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	b08a      	sub	sp, #40	; 0x28
 801cabc:	af00      	add	r7, sp, #0
 801cabe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cac0:	f107 0314 	add.w	r3, r7, #20
 801cac4:	2200      	movs	r2, #0
 801cac6:	601a      	str	r2, [r3, #0]
 801cac8:	605a      	str	r2, [r3, #4]
 801caca:	609a      	str	r2, [r3, #8]
 801cacc:	60da      	str	r2, [r3, #12]
 801cace:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	4a19      	ldr	r2, [pc, #100]	; (801cb3c <HAL_I2C_MspInit+0x84>)
 801cad6:	4293      	cmp	r3, r2
 801cad8:	d12b      	bne.n	801cb32 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801cada:	2300      	movs	r3, #0
 801cadc:	613b      	str	r3, [r7, #16]
 801cade:	4b18      	ldr	r3, [pc, #96]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801cae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cae2:	4a17      	ldr	r2, [pc, #92]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801cae4:	f043 0302 	orr.w	r3, r3, #2
 801cae8:	6313      	str	r3, [r2, #48]	; 0x30
 801caea:	4b15      	ldr	r3, [pc, #84]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caee:	f003 0302 	and.w	r3, r3, #2
 801caf2:	613b      	str	r3, [r7, #16]
 801caf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801caf6:	23c0      	movs	r3, #192	; 0xc0
 801caf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801cafa:	2312      	movs	r3, #18
 801cafc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801cafe:	2301      	movs	r3, #1
 801cb00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cb02:	2303      	movs	r3, #3
 801cb04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801cb06:	2304      	movs	r3, #4
 801cb08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801cb0a:	f107 0314 	add.w	r3, r7, #20
 801cb0e:	4619      	mov	r1, r3
 801cb10:	480c      	ldr	r0, [pc, #48]	; (801cb44 <HAL_I2C_MspInit+0x8c>)
 801cb12:	f001 fe85 	bl	801e820 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801cb16:	2300      	movs	r3, #0
 801cb18:	60fb      	str	r3, [r7, #12]
 801cb1a:	4b09      	ldr	r3, [pc, #36]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801cb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb1e:	4a08      	ldr	r2, [pc, #32]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801cb20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801cb24:	6413      	str	r3, [r2, #64]	; 0x40
 801cb26:	4b06      	ldr	r3, [pc, #24]	; (801cb40 <HAL_I2C_MspInit+0x88>)
 801cb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801cb2e:	60fb      	str	r3, [r7, #12]
 801cb30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801cb32:	bf00      	nop
 801cb34:	3728      	adds	r7, #40	; 0x28
 801cb36:	46bd      	mov	sp, r7
 801cb38:	bd80      	pop	{r7, pc}
 801cb3a:	bf00      	nop
 801cb3c:	40005400 	.word	0x40005400
 801cb40:	40023800 	.word	0x40023800
 801cb44:	40020400 	.word	0x40020400

0801cb48 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 801cb48:	b580      	push	{r7, lr}
 801cb4a:	b086      	sub	sp, #24
 801cb4c:	af02      	add	r7, sp, #8
 801cb4e:	4603      	mov	r3, r0
 801cb50:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 801cb52:	79fb      	ldrb	r3, [r7, #7]
 801cb54:	011b      	lsls	r3, r3, #4
 801cb56:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 801cb58:	79fb      	ldrb	r3, [r7, #7]
 801cb5a:	f023 030f 	bic.w	r3, r3, #15
 801cb5e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cb60:	7bbb      	ldrb	r3, [r7, #14]
 801cb62:	f043 030c 	orr.w	r3, r3, #12
 801cb66:	b2db      	uxtb	r3, r3
 801cb68:	723b      	strb	r3, [r7, #8]
 801cb6a:	7bbb      	ldrb	r3, [r7, #14]
 801cb6c:	f043 0308 	orr.w	r3, r3, #8
 801cb70:	b2db      	uxtb	r3, r3
 801cb72:	727b      	strb	r3, [r7, #9]
 801cb74:	7bfb      	ldrb	r3, [r7, #15]
 801cb76:	f043 030c 	orr.w	r3, r3, #12
 801cb7a:	b2db      	uxtb	r3, r3
 801cb7c:	72bb      	strb	r3, [r7, #10]
 801cb7e:	7bfb      	ldrb	r3, [r7, #15]
 801cb80:	f043 0308 	orr.w	r3, r3, #8
 801cb84:	b2db      	uxtb	r3, r3
 801cb86:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cb88:	4b07      	ldr	r3, [pc, #28]	; (801cba8 <lcd16x2_i2c_sendCommand+0x60>)
 801cb8a:	6818      	ldr	r0, [r3, #0]
 801cb8c:	4b07      	ldr	r3, [pc, #28]	; (801cbac <lcd16x2_i2c_sendCommand+0x64>)
 801cb8e:	781b      	ldrb	r3, [r3, #0]
 801cb90:	b299      	uxth	r1, r3
 801cb92:	f107 0208 	add.w	r2, r7, #8
 801cb96:	23c8      	movs	r3, #200	; 0xc8
 801cb98:	9300      	str	r3, [sp, #0]
 801cb9a:	2304      	movs	r3, #4
 801cb9c:	f002 f944 	bl	801ee28 <HAL_I2C_Master_Transmit>
}
 801cba0:	bf00      	nop
 801cba2:	3710      	adds	r7, #16
 801cba4:	46bd      	mov	sp, r7
 801cba6:	bd80      	pop	{r7, pc}
 801cba8:	200000a4 	.word	0x200000a4
 801cbac:	200000a8 	.word	0x200000a8

0801cbb0 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 801cbb0:	b580      	push	{r7, lr}
 801cbb2:	b086      	sub	sp, #24
 801cbb4:	af02      	add	r7, sp, #8
 801cbb6:	4603      	mov	r3, r0
 801cbb8:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 801cbba:	79fb      	ldrb	r3, [r7, #7]
 801cbbc:	011b      	lsls	r3, r3, #4
 801cbbe:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 801cbc0:	79fb      	ldrb	r3, [r7, #7]
 801cbc2:	f023 030f 	bic.w	r3, r3, #15
 801cbc6:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cbc8:	7bbb      	ldrb	r3, [r7, #14]
 801cbca:	f043 030d 	orr.w	r3, r3, #13
 801cbce:	b2db      	uxtb	r3, r3
 801cbd0:	723b      	strb	r3, [r7, #8]
 801cbd2:	7bbb      	ldrb	r3, [r7, #14]
 801cbd4:	f043 0309 	orr.w	r3, r3, #9
 801cbd8:	b2db      	uxtb	r3, r3
 801cbda:	727b      	strb	r3, [r7, #9]
 801cbdc:	7bfb      	ldrb	r3, [r7, #15]
 801cbde:	f043 030d 	orr.w	r3, r3, #13
 801cbe2:	b2db      	uxtb	r3, r3
 801cbe4:	72bb      	strb	r3, [r7, #10]
 801cbe6:	7bfb      	ldrb	r3, [r7, #15]
 801cbe8:	f043 0309 	orr.w	r3, r3, #9
 801cbec:	b2db      	uxtb	r3, r3
 801cbee:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cbf0:	4b07      	ldr	r3, [pc, #28]	; (801cc10 <lcd16x2_i2c_sendData+0x60>)
 801cbf2:	6818      	ldr	r0, [r3, #0]
 801cbf4:	4b07      	ldr	r3, [pc, #28]	; (801cc14 <lcd16x2_i2c_sendData+0x64>)
 801cbf6:	781b      	ldrb	r3, [r3, #0]
 801cbf8:	b299      	uxth	r1, r3
 801cbfa:	f107 0208 	add.w	r2, r7, #8
 801cbfe:	23c8      	movs	r3, #200	; 0xc8
 801cc00:	9300      	str	r3, [sp, #0]
 801cc02:	2304      	movs	r3, #4
 801cc04:	f002 f910 	bl	801ee28 <HAL_I2C_Master_Transmit>
}
 801cc08:	bf00      	nop
 801cc0a:	3710      	adds	r7, #16
 801cc0c:	46bd      	mov	sp, r7
 801cc0e:	bd80      	pop	{r7, pc}
 801cc10:	200000a4 	.word	0x200000a4
 801cc14:	200000a8 	.word	0x200000a8

0801cc18 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 801cc20:	2032      	movs	r0, #50	; 0x32
 801cc22:	f001 f939 	bl	801de98 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 801cc26:	4a30      	ldr	r2, [pc, #192]	; (801cce8 <lcd16x2_i2c_init+0xd0>)
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 801cc2c:	4b2e      	ldr	r3, [pc, #184]	; (801cce8 <lcd16x2_i2c_init+0xd0>)
 801cc2e:	6818      	ldr	r0, [r3, #0]
 801cc30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801cc34:	2205      	movs	r2, #5
 801cc36:	214e      	movs	r1, #78	; 0x4e
 801cc38:	f002 f9f4 	bl	801f024 <HAL_I2C_IsDeviceReady>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d010      	beq.n	801cc64 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 801cc42:	4b29      	ldr	r3, [pc, #164]	; (801cce8 <lcd16x2_i2c_init+0xd0>)
 801cc44:	6818      	ldr	r0, [r3, #0]
 801cc46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801cc4a:	2205      	movs	r2, #5
 801cc4c:	217e      	movs	r1, #126	; 0x7e
 801cc4e:	f002 f9e9 	bl	801f024 <HAL_I2C_IsDeviceReady>
 801cc52:	4603      	mov	r3, r0
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d001      	beq.n	801cc5c <lcd16x2_i2c_init+0x44>
    {
      return false;
 801cc58:	2300      	movs	r3, #0
 801cc5a:	e040      	b.n	801ccde <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 801cc5c:	4b23      	ldr	r3, [pc, #140]	; (801ccec <lcd16x2_i2c_init+0xd4>)
 801cc5e:	227e      	movs	r2, #126	; 0x7e
 801cc60:	701a      	strb	r2, [r3, #0]
 801cc62:	e002      	b.n	801cc6a <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 801cc64:	4b21      	ldr	r3, [pc, #132]	; (801ccec <lcd16x2_i2c_init+0xd4>)
 801cc66:	224e      	movs	r2, #78	; 0x4e
 801cc68:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 801cc6a:	202d      	movs	r0, #45	; 0x2d
 801cc6c:	f001 f914 	bl	801de98 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 801cc70:	2030      	movs	r0, #48	; 0x30
 801cc72:	f7ff ff69 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 801cc76:	2005      	movs	r0, #5
 801cc78:	f001 f90e 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801cc7c:	2030      	movs	r0, #48	; 0x30
 801cc7e:	f7ff ff63 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801cc82:	2001      	movs	r0, #1
 801cc84:	f001 f908 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801cc88:	2030      	movs	r0, #48	; 0x30
 801cc8a:	f7ff ff5d 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801cc8e:	2008      	movs	r0, #8
 801cc90:	f001 f902 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 801cc94:	2020      	movs	r0, #32
 801cc96:	f7ff ff57 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801cc9a:	2008      	movs	r0, #8
 801cc9c:	f001 f8fc 	bl	801de98 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 801cca0:	2028      	movs	r0, #40	; 0x28
 801cca2:	f7ff ff51 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801cca6:	2001      	movs	r0, #1
 801cca8:	f001 f8f6 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 801ccac:	2008      	movs	r0, #8
 801ccae:	f7ff ff4b 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ccb2:	2001      	movs	r0, #1
 801ccb4:	f001 f8f0 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801ccb8:	2001      	movs	r0, #1
 801ccba:	f7ff ff45 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ccbe:	2003      	movs	r0, #3
 801ccc0:	f001 f8ea 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 801ccc4:	2006      	movs	r0, #6
 801ccc6:	f7ff ff3f 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ccca:	2001      	movs	r0, #1
 801cccc:	f001 f8e4 	bl	801de98 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 801ccd0:	200c      	movs	r0, #12
 801ccd2:	f7ff ff39 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ccd6:	2003      	movs	r0, #3
 801ccd8:	f001 f8de 	bl	801de98 <HAL_Delay>

  return true;
 801ccdc:	2301      	movs	r3, #1
}
 801ccde:	4618      	mov	r0, r3
 801cce0:	3708      	adds	r7, #8
 801cce2:	46bd      	mov	sp, r7
 801cce4:	bd80      	pop	{r7, pc}
 801cce6:	bf00      	nop
 801cce8:	200000a4 	.word	0x200000a4
 801ccec:	200000a8 	.word	0x200000a8

0801ccf0 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	b084      	sub	sp, #16
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	4603      	mov	r3, r0
 801ccf8:	460a      	mov	r2, r1
 801ccfa:	71fb      	strb	r3, [r7, #7]
 801ccfc:	4613      	mov	r3, r2
 801ccfe:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 801cd00:	79bb      	ldrb	r3, [r7, #6]
 801cd02:	f003 030f 	and.w	r3, r3, #15
 801cd06:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 801cd08:	79fb      	ldrb	r3, [r7, #7]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d108      	bne.n	801cd20 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 801cd0e:	7bfb      	ldrb	r3, [r7, #15]
 801cd10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cd14:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cd16:	7bfb      	ldrb	r3, [r7, #15]
 801cd18:	4618      	mov	r0, r3
 801cd1a:	f7ff ff15 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 801cd1e:	e007      	b.n	801cd30 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 801cd20:	7bfb      	ldrb	r3, [r7, #15]
 801cd22:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801cd26:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cd28:	7bfb      	ldrb	r3, [r7, #15]
 801cd2a:	4618      	mov	r0, r3
 801cd2c:	f7ff ff0c 	bl	801cb48 <lcd16x2_i2c_sendCommand>
}
 801cd30:	bf00      	nop
 801cd32:	3710      	adds	r7, #16
 801cd34:	46bd      	mov	sp, r7
 801cd36:	bd80      	pop	{r7, pc}

0801cd38 <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 801cd3c:	2100      	movs	r1, #0
 801cd3e:	2001      	movs	r0, #1
 801cd40:	f7ff ffd6 	bl	801ccf0 <lcd16x2_i2c_setCursor>
}
 801cd44:	bf00      	nop
 801cd46:	bd80      	pop	{r7, pc}

0801cd48 <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801cd4c:	2001      	movs	r0, #1
 801cd4e:	f7ff fefb 	bl	801cb48 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801cd52:	2003      	movs	r0, #3
 801cd54:	f001 f8a0 	bl	801de98 <HAL_Delay>
}
 801cd58:	bf00      	nop
 801cd5a:	bd80      	pop	{r7, pc}

0801cd5c <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 801cd5c:	b40f      	push	{r0, r1, r2, r3}
 801cd5e:	b590      	push	{r4, r7, lr}
 801cd60:	b089      	sub	sp, #36	; 0x24
 801cd62:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 801cd64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cd68:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 801cd6a:	f107 0308 	add.w	r3, r7, #8
 801cd6e:	687a      	ldr	r2, [r7, #4]
 801cd70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cd72:	4618      	mov	r0, r3
 801cd74:	f005 f9d0 	bl	8022118 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cd78:	2300      	movs	r3, #0
 801cd7a:	77fb      	strb	r3, [r7, #31]
 801cd7c:	e00b      	b.n	801cd96 <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 801cd7e:	7ffb      	ldrb	r3, [r7, #31]
 801cd80:	f107 0220 	add.w	r2, r7, #32
 801cd84:	4413      	add	r3, r2
 801cd86:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7ff ff10 	bl	801cbb0 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cd90:	7ffb      	ldrb	r3, [r7, #31]
 801cd92:	3301      	adds	r3, #1
 801cd94:	77fb      	strb	r3, [r7, #31]
 801cd96:	7ffc      	ldrb	r4, [r7, #31]
 801cd98:	f107 0308 	add.w	r3, r7, #8
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f7e3 fa1f 	bl	80001e0 <strlen>
 801cda2:	4603      	mov	r3, r0
 801cda4:	429c      	cmp	r4, r3
 801cda6:	d202      	bcs.n	801cdae <lcd16x2_i2c_printf+0x52>
 801cda8:	7ffb      	ldrb	r3, [r7, #31]
 801cdaa:	2b0f      	cmp	r3, #15
 801cdac:	d9e7      	bls.n	801cd7e <lcd16x2_i2c_printf+0x22>
  }
}
 801cdae:	bf00      	nop
 801cdb0:	3724      	adds	r7, #36	; 0x24
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801cdb8:	b004      	add	sp, #16
 801cdba:	4770      	bx	lr

0801cdbc <read_GPIO>:

//#define debug_output



uint8_t read_GPIO(){
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){			// if GPIO is low
 801cdc0:	2110      	movs	r1, #16
 801cdc2:	4824      	ldr	r0, [pc, #144]	; (801ce54 <read_GPIO+0x98>)
 801cdc4:	f001 feae 	bl	801eb24 <HAL_GPIO_ReadPin>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d109      	bne.n	801cde2 <read_GPIO+0x26>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));	// wait till GPIO return high
 801cdce:	bf00      	nop
 801cdd0:	2110      	movs	r1, #16
 801cdd2:	4820      	ldr	r0, [pc, #128]	; (801ce54 <read_GPIO+0x98>)
 801cdd4:	f001 fea6 	bl	801eb24 <HAL_GPIO_ReadPin>
 801cdd8:	4603      	mov	r3, r0
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	d0f8      	beq.n	801cdd0 <read_GPIO+0x14>
		return 1;
 801cdde:	2301      	movs	r3, #1
 801cde0:	e035      	b.n	801ce4e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 801cde2:	2120      	movs	r1, #32
 801cde4:	481b      	ldr	r0, [pc, #108]	; (801ce54 <read_GPIO+0x98>)
 801cde6:	f001 fe9d 	bl	801eb24 <HAL_GPIO_ReadPin>
 801cdea:	4603      	mov	r3, r0
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d109      	bne.n	801ce04 <read_GPIO+0x48>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 801cdf0:	bf00      	nop
 801cdf2:	2120      	movs	r1, #32
 801cdf4:	4817      	ldr	r0, [pc, #92]	; (801ce54 <read_GPIO+0x98>)
 801cdf6:	f001 fe95 	bl	801eb24 <HAL_GPIO_ReadPin>
 801cdfa:	4603      	mov	r3, r0
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d0f8      	beq.n	801cdf2 <read_GPIO+0x36>
		return 2;
 801ce00:	2302      	movs	r3, #2
 801ce02:	e024      	b.n	801ce4e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 801ce04:	2108      	movs	r1, #8
 801ce06:	4813      	ldr	r0, [pc, #76]	; (801ce54 <read_GPIO+0x98>)
 801ce08:	f001 fe8c 	bl	801eb24 <HAL_GPIO_ReadPin>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d109      	bne.n	801ce26 <read_GPIO+0x6a>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3));
 801ce12:	bf00      	nop
 801ce14:	2108      	movs	r1, #8
 801ce16:	480f      	ldr	r0, [pc, #60]	; (801ce54 <read_GPIO+0x98>)
 801ce18:	f001 fe84 	bl	801eb24 <HAL_GPIO_ReadPin>
 801ce1c:	4603      	mov	r3, r0
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d0f8      	beq.n	801ce14 <read_GPIO+0x58>
		return 3;
 801ce22:	2303      	movs	r3, #3
 801ce24:	e013      	b.n	801ce4e <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 801ce26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ce2a:	480b      	ldr	r0, [pc, #44]	; (801ce58 <read_GPIO+0x9c>)
 801ce2c:	f001 fe7a 	bl	801eb24 <HAL_GPIO_ReadPin>
 801ce30:	4603      	mov	r3, r0
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d10a      	bne.n	801ce4c <read_GPIO+0x90>
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 801ce36:	bf00      	nop
 801ce38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ce3c:	4806      	ldr	r0, [pc, #24]	; (801ce58 <read_GPIO+0x9c>)
 801ce3e:	f001 fe71 	bl	801eb24 <HAL_GPIO_ReadPin>
 801ce42:	4603      	mov	r3, r0
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d0f7      	beq.n	801ce38 <read_GPIO+0x7c>
		return 4;
 801ce48:	2304      	movs	r3, #4
 801ce4a:	e000      	b.n	801ce4e <read_GPIO+0x92>
	}

	return 99;
 801ce4c:	2363      	movs	r3, #99	; 0x63
}
 801ce4e:	4618      	mov	r0, r3
 801ce50:	bd80      	pop	{r7, pc}
 801ce52:	bf00      	nop
 801ce54:	40020400 	.word	0x40020400
 801ce58:	40020000 	.word	0x40020000

0801ce5c <write_GPIO>:



void write_GPIO(uint8_t riga){
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b084      	sub	sp, #16
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	4603      	mov	r3, r0
 801ce64:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 801ce66:	2301      	movs	r3, #1
 801ce68:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 801ce6a:	2301      	movs	r3, #1
 801ce6c:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 801ce6e:	2301      	movs	r3, #1
 801ce70:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 801ce72:	2301      	movs	r3, #1
 801ce74:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 801ce76:	79fb      	ldrb	r3, [r7, #7]
 801ce78:	2b01      	cmp	r3, #1
 801ce7a:	d102      	bne.n	801ce82 <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 801ce7c:	2300      	movs	r3, #0
 801ce7e:	73fb      	strb	r3, [r7, #15]
 801ce80:	e010      	b.n	801cea4 <write_GPIO+0x48>
	}else if(riga==2){
 801ce82:	79fb      	ldrb	r3, [r7, #7]
 801ce84:	2b02      	cmp	r3, #2
 801ce86:	d102      	bne.n	801ce8e <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 801ce88:	2300      	movs	r3, #0
 801ce8a:	73bb      	strb	r3, [r7, #14]
 801ce8c:	e00a      	b.n	801cea4 <write_GPIO+0x48>
	}else if(riga==3){
 801ce8e:	79fb      	ldrb	r3, [r7, #7]
 801ce90:	2b03      	cmp	r3, #3
 801ce92:	d102      	bne.n	801ce9a <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 801ce94:	2300      	movs	r3, #0
 801ce96:	737b      	strb	r3, [r7, #13]
 801ce98:	e004      	b.n	801cea4 <write_GPIO+0x48>
	}else if(riga==4){
 801ce9a:	79fb      	ldrb	r3, [r7, #7]
 801ce9c:	2b04      	cmp	r3, #4
 801ce9e:	d101      	bne.n	801cea4 <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 801cea0:	2300      	movs	r3, #0
 801cea2:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row1);
 801cea4:	7bfb      	ldrb	r3, [r7, #15]
 801cea6:	461a      	mov	r2, r3
 801cea8:	2180      	movs	r1, #128	; 0x80
 801ceaa:	480e      	ldr	r0, [pc, #56]	; (801cee4 <write_GPIO+0x88>)
 801ceac:	f001 fe52 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state_row2);
 801ceb0:	7bbb      	ldrb	r3, [r7, #14]
 801ceb2:	461a      	mov	r2, r3
 801ceb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ceb8:	480b      	ldr	r0, [pc, #44]	; (801cee8 <write_GPIO+0x8c>)
 801ceba:	f001 fe4b 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 801cebe:	7b7b      	ldrb	r3, [r7, #13]
 801cec0:	461a      	mov	r2, r3
 801cec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cec6:	4808      	ldr	r0, [pc, #32]	; (801cee8 <write_GPIO+0x8c>)
 801cec8:	f001 fe44 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 801cecc:	7b3b      	ldrb	r3, [r7, #12]
 801cece:	461a      	mov	r2, r3
 801ced0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ced4:	4805      	ldr	r0, [pc, #20]	; (801ceec <write_GPIO+0x90>)
 801ced6:	f001 fe3d 	bl	801eb54 <HAL_GPIO_WritePin>
}
 801ceda:	bf00      	nop
 801cedc:	3710      	adds	r7, #16
 801cede:	46bd      	mov	sp, r7
 801cee0:	bd80      	pop	{r7, pc}
 801cee2:	bf00      	nop
 801cee4:	40020800 	.word	0x40020800
 801cee8:	40020000 	.word	0x40020000
 801ceec:	40020400 	.word	0x40020400

0801cef0 <decode_key>:



uint8_t decode_key(uint8_t row, uint8_t col){
 801cef0:	b480      	push	{r7}
 801cef2:	b085      	sub	sp, #20
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	4603      	mov	r3, r0
 801cef8:	460a      	mov	r2, r1
 801cefa:	71fb      	strb	r3, [r7, #7]
 801cefc:	4613      	mov	r3, r2
 801cefe:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 801cf00:	79fb      	ldrb	r3, [r7, #7]
 801cf02:	3b01      	subs	r3, #1
 801cf04:	2b03      	cmp	r3, #3
 801cf06:	d85f      	bhi.n	801cfc8 <decode_key+0xd8>
 801cf08:	a201      	add	r2, pc, #4	; (adr r2, 801cf10 <decode_key+0x20>)
 801cf0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf0e:	bf00      	nop
 801cf10:	0801cf21 	.word	0x0801cf21
 801cf14:	0801cf4b 	.word	0x0801cf4b
 801cf18:	0801cf75 	.word	0x0801cf75
 801cf1c:	0801cf9f 	.word	0x0801cf9f
		case(1):
			if (col==1) key=1;
 801cf20:	79bb      	ldrb	r3, [r7, #6]
 801cf22:	2b01      	cmp	r3, #1
 801cf24:	d101      	bne.n	801cf2a <decode_key+0x3a>
 801cf26:	2301      	movs	r3, #1
 801cf28:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 801cf2a:	79bb      	ldrb	r3, [r7, #6]
 801cf2c:	2b02      	cmp	r3, #2
 801cf2e:	d101      	bne.n	801cf34 <decode_key+0x44>
 801cf30:	2302      	movs	r3, #2
 801cf32:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 801cf34:	79bb      	ldrb	r3, [r7, #6]
 801cf36:	2b03      	cmp	r3, #3
 801cf38:	d101      	bne.n	801cf3e <decode_key+0x4e>
 801cf3a:	2303      	movs	r3, #3
 801cf3c:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 801cf3e:	79bb      	ldrb	r3, [r7, #6]
 801cf40:	2b04      	cmp	r3, #4
 801cf42:	d144      	bne.n	801cfce <decode_key+0xde>
 801cf44:	230a      	movs	r3, #10
 801cf46:	73fb      	strb	r3, [r7, #15]
			break;
 801cf48:	e041      	b.n	801cfce <decode_key+0xde>
		case(2):
			if (col==1) key=4;
 801cf4a:	79bb      	ldrb	r3, [r7, #6]
 801cf4c:	2b01      	cmp	r3, #1
 801cf4e:	d101      	bne.n	801cf54 <decode_key+0x64>
 801cf50:	2304      	movs	r3, #4
 801cf52:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 801cf54:	79bb      	ldrb	r3, [r7, #6]
 801cf56:	2b02      	cmp	r3, #2
 801cf58:	d101      	bne.n	801cf5e <decode_key+0x6e>
 801cf5a:	2305      	movs	r3, #5
 801cf5c:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 801cf5e:	79bb      	ldrb	r3, [r7, #6]
 801cf60:	2b03      	cmp	r3, #3
 801cf62:	d101      	bne.n	801cf68 <decode_key+0x78>
 801cf64:	2306      	movs	r3, #6
 801cf66:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 801cf68:	79bb      	ldrb	r3, [r7, #6]
 801cf6a:	2b04      	cmp	r3, #4
 801cf6c:	d131      	bne.n	801cfd2 <decode_key+0xe2>
 801cf6e:	2314      	movs	r3, #20
 801cf70:	73fb      	strb	r3, [r7, #15]
			break;
 801cf72:	e02e      	b.n	801cfd2 <decode_key+0xe2>
		case(3):
			if (col==1) key=7;
 801cf74:	79bb      	ldrb	r3, [r7, #6]
 801cf76:	2b01      	cmp	r3, #1
 801cf78:	d101      	bne.n	801cf7e <decode_key+0x8e>
 801cf7a:	2307      	movs	r3, #7
 801cf7c:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 801cf7e:	79bb      	ldrb	r3, [r7, #6]
 801cf80:	2b02      	cmp	r3, #2
 801cf82:	d101      	bne.n	801cf88 <decode_key+0x98>
 801cf84:	2308      	movs	r3, #8
 801cf86:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 801cf88:	79bb      	ldrb	r3, [r7, #6]
 801cf8a:	2b03      	cmp	r3, #3
 801cf8c:	d101      	bne.n	801cf92 <decode_key+0xa2>
 801cf8e:	2309      	movs	r3, #9
 801cf90:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 801cf92:	79bb      	ldrb	r3, [r7, #6]
 801cf94:	2b04      	cmp	r3, #4
 801cf96:	d11e      	bne.n	801cfd6 <decode_key+0xe6>
 801cf98:	231e      	movs	r3, #30
 801cf9a:	73fb      	strb	r3, [r7, #15]
			break;
 801cf9c:	e01b      	b.n	801cfd6 <decode_key+0xe6>
		case(4):
			if (col==1) key=40;
 801cf9e:	79bb      	ldrb	r3, [r7, #6]
 801cfa0:	2b01      	cmp	r3, #1
 801cfa2:	d101      	bne.n	801cfa8 <decode_key+0xb8>
 801cfa4:	2328      	movs	r3, #40	; 0x28
 801cfa6:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 801cfa8:	79bb      	ldrb	r3, [r7, #6]
 801cfaa:	2b02      	cmp	r3, #2
 801cfac:	d101      	bne.n	801cfb2 <decode_key+0xc2>
 801cfae:	2300      	movs	r3, #0
 801cfb0:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 801cfb2:	79bb      	ldrb	r3, [r7, #6]
 801cfb4:	2b03      	cmp	r3, #3
 801cfb6:	d101      	bne.n	801cfbc <decode_key+0xcc>
 801cfb8:	2332      	movs	r3, #50	; 0x32
 801cfba:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 801cfbc:	79bb      	ldrb	r3, [r7, #6]
 801cfbe:	2b04      	cmp	r3, #4
 801cfc0:	d10b      	bne.n	801cfda <decode_key+0xea>
 801cfc2:	233c      	movs	r3, #60	; 0x3c
 801cfc4:	73fb      	strb	r3, [r7, #15]
			break;
 801cfc6:	e008      	b.n	801cfda <decode_key+0xea>
		default:
			key=99;
 801cfc8:	2363      	movs	r3, #99	; 0x63
 801cfca:	73fb      	strb	r3, [r7, #15]
			break;
 801cfcc:	e006      	b.n	801cfdc <decode_key+0xec>
			break;
 801cfce:	bf00      	nop
 801cfd0:	e004      	b.n	801cfdc <decode_key+0xec>
			break;
 801cfd2:	bf00      	nop
 801cfd4:	e002      	b.n	801cfdc <decode_key+0xec>
			break;
 801cfd6:	bf00      	nop
 801cfd8:	e000      	b.n	801cfdc <decode_key+0xec>
			break;
 801cfda:	bf00      	nop
	}

	return key;
 801cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfde:	4618      	mov	r0, r3
 801cfe0:	3714      	adds	r7, #20
 801cfe2:	46bd      	mov	sp, r7
 801cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfe8:	4770      	bx	lr
 801cfea:	bf00      	nop

0801cfec <read_key>:



// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key(){
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b082      	sub	sp, #8
 801cff0:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 99 is the DISCARD number
 801cff2:	2363      	movs	r3, #99	; 0x63
 801cff4:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 801cff6:	2363      	movs	r3, #99	; 0x63
 801cff8:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);								// write 4 status of row GPIO (enable GPIO of row1)
 801cffa:	2001      	movs	r0, #1
 801cffc:	f7ff ff2e 	bl	801ce5c <write_GPIO>
		col_read = read_GPIO();						// read 4 status of col GPIO
 801d000:	f7ff fedc 	bl	801cdbc <read_GPIO>
 801d004:	4603      	mov	r3, r0
 801d006:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) {
 801d008:	79bb      	ldrb	r3, [r7, #6]
 801d00a:	2b63      	cmp	r3, #99	; 0x63
 801d00c:	d008      	beq.n	801d020 <read_key+0x34>
			key = decode_key(1, col_read);		// decode which button has been pressed
 801d00e:	79bb      	ldrb	r3, [r7, #6]
 801d010:	4619      	mov	r1, r3
 801d012:	2001      	movs	r0, #1
 801d014:	f7ff ff6c 	bl	801cef0 <decode_key>
 801d018:	4603      	mov	r3, r0
 801d01a:	71fb      	strb	r3, [r7, #7]
			return key;
 801d01c:	79fb      	ldrb	r3, [r7, #7]
 801d01e:	e037      	b.n	801d090 <read_key+0xa4>
		}

		// *** SECOND row
		write_GPIO(2);
 801d020:	2002      	movs	r0, #2
 801d022:	f7ff ff1b 	bl	801ce5c <write_GPIO>
		col_read = read_GPIO();
 801d026:	f7ff fec9 	bl	801cdbc <read_GPIO>
 801d02a:	4603      	mov	r3, r0
 801d02c:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801d02e:	79bb      	ldrb	r3, [r7, #6]
 801d030:	2b63      	cmp	r3, #99	; 0x63
 801d032:	d008      	beq.n	801d046 <read_key+0x5a>
			key = decode_key(2, col_read);
 801d034:	79bb      	ldrb	r3, [r7, #6]
 801d036:	4619      	mov	r1, r3
 801d038:	2002      	movs	r0, #2
 801d03a:	f7ff ff59 	bl	801cef0 <decode_key>
 801d03e:	4603      	mov	r3, r0
 801d040:	71fb      	strb	r3, [r7, #7]
			return key;
 801d042:	79fb      	ldrb	r3, [r7, #7]
 801d044:	e024      	b.n	801d090 <read_key+0xa4>
		}

		// *** THIRD row
		write_GPIO(3);
 801d046:	2003      	movs	r0, #3
 801d048:	f7ff ff08 	bl	801ce5c <write_GPIO>
		col_read = read_GPIO();
 801d04c:	f7ff feb6 	bl	801cdbc <read_GPIO>
 801d050:	4603      	mov	r3, r0
 801d052:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801d054:	79bb      	ldrb	r3, [r7, #6]
 801d056:	2b63      	cmp	r3, #99	; 0x63
 801d058:	d008      	beq.n	801d06c <read_key+0x80>
			key = decode_key(3, col_read);
 801d05a:	79bb      	ldrb	r3, [r7, #6]
 801d05c:	4619      	mov	r1, r3
 801d05e:	2003      	movs	r0, #3
 801d060:	f7ff ff46 	bl	801cef0 <decode_key>
 801d064:	4603      	mov	r3, r0
 801d066:	71fb      	strb	r3, [r7, #7]
			return key;
 801d068:	79fb      	ldrb	r3, [r7, #7]
 801d06a:	e011      	b.n	801d090 <read_key+0xa4>
		}

		// *** FORTH row
		write_GPIO(4);
 801d06c:	2004      	movs	r0, #4
 801d06e:	f7ff fef5 	bl	801ce5c <write_GPIO>
		col_read = read_GPIO();
 801d072:	f7ff fea3 	bl	801cdbc <read_GPIO>
 801d076:	4603      	mov	r3, r0
 801d078:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801d07a:	79bb      	ldrb	r3, [r7, #6]
 801d07c:	2b63      	cmp	r3, #99	; 0x63
 801d07e:	d0bc      	beq.n	801cffa <read_key+0xe>
			key = decode_key(4, col_read);
 801d080:	79bb      	ldrb	r3, [r7, #6]
 801d082:	4619      	mov	r1, r3
 801d084:	2004      	movs	r0, #4
 801d086:	f7ff ff33 	bl	801cef0 <decode_key>
 801d08a:	4603      	mov	r3, r0
 801d08c:	71fb      	strb	r3, [r7, #7]
			return key;
 801d08e:	79fb      	ldrb	r3, [r7, #7]
		}
	}

	return 99;
}
 801d090:	4618      	mov	r0, r3
 801d092:	3708      	adds	r7, #8
 801d094:	46bd      	mov	sp, r7
 801d096:	bd80      	pop	{r7, pc}

0801d098 <keypad_getNumber>:



uint32_t keypad_getNumber(){
 801d098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d09a:	b0a1      	sub	sp, #132	; 0x84
 801d09c:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 801d09e:	2300      	movs	r3, #0
 801d0a0:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t key;
	uint8_t i=0;
 801d0a2:	2300      	movs	r3, #0
 801d0a4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

#ifdef debug_output
	PRINTF("\n\r The digits selected are: ");
#endif

	lcd16x2_i2c_printf("-> A to select");
 801d0a8:	4869      	ldr	r0, [pc, #420]	; (801d250 <keypad_getNumber+0x1b8>)
 801d0aa:	f7ff fe57 	bl	801cd5c <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 801d0ae:	f7ff fe43 	bl	801cd38 <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("ID:  ");
 801d0b2:	4868      	ldr	r0, [pc, #416]	; (801d254 <keypad_getNumber+0x1bc>)
 801d0b4:	f7ff fe52 	bl	801cd5c <lcd16x2_i2c_printf>
	// until I press the ENTER button do:
	while(true){

		key = read_key();		// returns the digit input
 801d0b8:	f7ff ff98 	bl	801cfec <read_key>
 801d0bc:	4603      	mov	r3, r0
 801d0be:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(key==99){
 801d0c2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d0c6:	2b63      	cmp	r3, #99	; 0x63
 801d0c8:	d103      	bne.n	801d0d2 <keypad_getNumber+0x3a>
			lcd16x2_i2c_printf("Error...");
 801d0ca:	4863      	ldr	r0, [pc, #396]	; (801d258 <keypad_getNumber+0x1c0>)
 801d0cc:	f7ff fe46 	bl	801cd5c <lcd16x2_i2c_printf>
 801d0d0:	e059      	b.n	801d186 <keypad_getNumber+0xee>
		}else if(key==10){			// A, exit insertion number
 801d0d2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d0d6:	2b0a      	cmp	r3, #10
 801d0d8:	d107      	bne.n	801d0ea <keypad_getNumber+0x52>
			lcd16x2_i2c_printf(";");
 801d0da:	4860      	ldr	r0, [pc, #384]	; (801d25c <keypad_getNumber+0x1c4>)
 801d0dc:	f7ff fe3e 	bl	801cd5c <lcd16x2_i2c_printf>
			break;
 801d0e0:	bf00      	nop

		key=99;
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 801d0e2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d0e6:	677b      	str	r3, [r7, #116]	; 0x74
 801d0e8:	e08c      	b.n	801d204 <keypad_getNumber+0x16c>
		}else if(key==20){		// B, nothing
 801d0ea:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d0ee:	2b14      	cmp	r3, #20
 801d0f0:	d103      	bne.n	801d0fa <keypad_getNumber+0x62>
			lcd16x2_i2c_printf("B");
 801d0f2:	485b      	ldr	r0, [pc, #364]	; (801d260 <keypad_getNumber+0x1c8>)
 801d0f4:	f7ff fe32 	bl	801cd5c <lcd16x2_i2c_printf>
 801d0f8:	e045      	b.n	801d186 <keypad_getNumber+0xee>
		}else if(key==30){		// C, easter egg
 801d0fa:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d0fe:	2b1e      	cmp	r3, #30
 801d100:	d104      	bne.n	801d10c <keypad_getNumber+0x74>
			lcd16x2_i2c_printf("C");
 801d102:	4858      	ldr	r0, [pc, #352]	; (801d264 <keypad_getNumber+0x1cc>)
 801d104:	f7ff fe2a 	bl	801cd5c <lcd16x2_i2c_printf>
			return 0;
 801d108:	2300      	movs	r3, #0
 801d10a:	e096      	b.n	801d23a <keypad_getNumber+0x1a2>
		}else if(key==40){		// *, nothing
 801d10c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d110:	2b28      	cmp	r3, #40	; 0x28
 801d112:	d106      	bne.n	801d122 <keypad_getNumber+0x8a>
			lcd16x2_i2c_printf("*");
 801d114:	4854      	ldr	r0, [pc, #336]	; (801d268 <keypad_getNumber+0x1d0>)
 801d116:	f7ff fe21 	bl	801cd5c <lcd16x2_i2c_printf>
			PRINTF("* ");
 801d11a:	4854      	ldr	r0, [pc, #336]	; (801d26c <keypad_getNumber+0x1d4>)
 801d11c:	f7ff fba0 	bl	801c860 <PRINTF>
 801d120:	e031      	b.n	801d186 <keypad_getNumber+0xee>
		}else if(key==50){		// #, nothing
 801d122:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d126:	2b32      	cmp	r3, #50	; 0x32
 801d128:	d106      	bne.n	801d138 <keypad_getNumber+0xa0>
			lcd16x2_i2c_printf("#");
 801d12a:	4851      	ldr	r0, [pc, #324]	; (801d270 <keypad_getNumber+0x1d8>)
 801d12c:	f7ff fe16 	bl	801cd5c <lcd16x2_i2c_printf>
			PRINTF("# ");
 801d130:	4850      	ldr	r0, [pc, #320]	; (801d274 <keypad_getNumber+0x1dc>)
 801d132:	f7ff fb95 	bl	801c860 <PRINTF>
 801d136:	e026      	b.n	801d186 <keypad_getNumber+0xee>
		}else if(key==60){		// D, disco mode
 801d138:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d13c:	2b3c      	cmp	r3, #60	; 0x3c
 801d13e:	d105      	bne.n	801d14c <keypad_getNumber+0xb4>
			lcd16x2_i2c_printf("D");
 801d140:	484d      	ldr	r0, [pc, #308]	; (801d278 <keypad_getNumber+0x1e0>)
 801d142:	f7ff fe0b 	bl	801cd5c <lcd16x2_i2c_printf>
			return 10000;
 801d146:	f242 7310 	movw	r3, #10000	; 0x2710
 801d14a:	e076      	b.n	801d23a <keypad_getNumber+0x1a2>
		}else if(key>=0 && key<=9){	// number keys
 801d14c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801d150:	2b09      	cmp	r3, #9
 801d152:	d818      	bhi.n	801d186 <keypad_getNumber+0xee>
			inputDigit[i] = key;
 801d154:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d158:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d15c:	4413      	add	r3, r2
 801d15e:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 801d162:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("%d", inputDigit[i]);
 801d166:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d16a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d16e:	4413      	add	r3, r2
 801d170:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801d174:	4619      	mov	r1, r3
 801d176:	4841      	ldr	r0, [pc, #260]	; (801d27c <keypad_getNumber+0x1e4>)
 801d178:	f7ff fdf0 	bl	801cd5c <lcd16x2_i2c_printf>
			i+=1;
 801d17c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 801d180:	3301      	adds	r3, #1
 801d182:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		key=99;
 801d186:	2363      	movs	r3, #99	; 0x63
 801d188:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		key = read_key();		// returns the digit input
 801d18c:	e794      	b.n	801d0b8 <keypad_getNumber+0x20>
		number += pow(10, j-1)*inputDigit[i-j];
 801d18e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d190:	3b01      	subs	r3, #1
 801d192:	4618      	mov	r0, r3
 801d194:	f7e3 f9ce 	bl	8000534 <__aeabi_i2d>
 801d198:	4603      	mov	r3, r0
 801d19a:	460c      	mov	r4, r1
 801d19c:	ec44 3b11 	vmov	d1, r3, r4
 801d1a0:	ed9f 0b29 	vldr	d0, [pc, #164]	; 801d248 <keypad_getNumber+0x1b0>
 801d1a4:	f005 fba6 	bl	80228f4 <pow>
 801d1a8:	ec56 5b10 	vmov	r5, r6, d0
 801d1ac:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 801d1b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1b2:	1ad3      	subs	r3, r2, r3
 801d1b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801d1b8:	4413      	add	r3, r2
 801d1ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801d1be:	4618      	mov	r0, r3
 801d1c0:	f7e3 f9b8 	bl	8000534 <__aeabi_i2d>
 801d1c4:	4603      	mov	r3, r0
 801d1c6:	460c      	mov	r4, r1
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	4623      	mov	r3, r4
 801d1cc:	4628      	mov	r0, r5
 801d1ce:	4631      	mov	r1, r6
 801d1d0:	f7e3 fa1a 	bl	8000608 <__aeabi_dmul>
 801d1d4:	4603      	mov	r3, r0
 801d1d6:	460c      	mov	r4, r1
 801d1d8:	4625      	mov	r5, r4
 801d1da:	461c      	mov	r4, r3
 801d1dc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801d1de:	f7e3 f999 	bl	8000514 <__aeabi_ui2d>
 801d1e2:	4602      	mov	r2, r0
 801d1e4:	460b      	mov	r3, r1
 801d1e6:	4620      	mov	r0, r4
 801d1e8:	4629      	mov	r1, r5
 801d1ea:	f7e3 f857 	bl	800029c <__adddf3>
 801d1ee:	4603      	mov	r3, r0
 801d1f0:	460c      	mov	r4, r1
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	4621      	mov	r1, r4
 801d1f6:	f7e3 fcb7 	bl	8000b68 <__aeabi_d2uiz>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int j=i; j>0; j--){
 801d1fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d200:	3b01      	subs	r3, #1
 801d202:	677b      	str	r3, [r7, #116]	; 0x74
 801d204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d206:	2b00      	cmp	r3, #0
 801d208:	dcc1      	bgt.n	801d18e <keypad_getNumber+0xf6>
	}

#ifdef debug_output
	PRINTF32("\n\r     Final number obtained is: %d", number);
#endif
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801d20a:	2200      	movs	r2, #0
 801d20c:	2180      	movs	r1, #128	; 0x80
 801d20e:	481c      	ldr	r0, [pc, #112]	; (801d280 <keypad_getNumber+0x1e8>)
 801d210:	f001 fca0 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 801d214:	2200      	movs	r2, #0
 801d216:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d21a:	481a      	ldr	r0, [pc, #104]	; (801d284 <keypad_getNumber+0x1ec>)
 801d21c:	f001 fc9a 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 801d220:	2200      	movs	r2, #0
 801d222:	f44f 7180 	mov.w	r1, #256	; 0x100
 801d226:	4817      	ldr	r0, [pc, #92]	; (801d284 <keypad_getNumber+0x1ec>)
 801d228:	f001 fc94 	bl	801eb54 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801d22c:	2200      	movs	r2, #0
 801d22e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801d232:	4815      	ldr	r0, [pc, #84]	; (801d288 <keypad_getNumber+0x1f0>)
 801d234:	f001 fc8e 	bl	801eb54 <HAL_GPIO_WritePin>
	return number;
 801d238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 801d23a:	4618      	mov	r0, r3
 801d23c:	3784      	adds	r7, #132	; 0x84
 801d23e:	46bd      	mov	sp, r7
 801d240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d242:	bf00      	nop
 801d244:	f3af 8000 	nop.w
 801d248:	00000000 	.word	0x00000000
 801d24c:	40240000 	.word	0x40240000
 801d250:	0802d1ec 	.word	0x0802d1ec
 801d254:	0802d1fc 	.word	0x0802d1fc
 801d258:	0802d204 	.word	0x0802d204
 801d25c:	0802d210 	.word	0x0802d210
 801d260:	0802d214 	.word	0x0802d214
 801d264:	0802d218 	.word	0x0802d218
 801d268:	0802d21c 	.word	0x0802d21c
 801d26c:	0802d220 	.word	0x0802d220
 801d270:	0802d224 	.word	0x0802d224
 801d274:	0802d228 	.word	0x0802d228
 801d278:	0802d22c 	.word	0x0802d22c
 801d27c:	0802d230 	.word	0x0802d230
 801d280:	40020800 	.word	0x40020800
 801d284:	40020000 	.word	0x40020000
 801d288:	40020400 	.word	0x40020400

0801d28c <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801d28c:	b580      	push	{r7, lr}
 801d28e:	b082      	sub	sp, #8
 801d290:	af00      	add	r7, sp, #0
 801d292:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	4a0b      	ldr	r2, [pc, #44]	; (801d2c4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801d298:	4293      	cmp	r3, r2
 801d29a:	d103      	bne.n	801d2a4 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 801d29c:	2100      	movs	r1, #0
 801d29e:	4809      	ldr	r0, [pc, #36]	; (801d2c4 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801d2a0:	f002 ffc0 	bl	8020224 <HAL_TIM_PWM_Stop_DMA>
	}

	if(htim == &htim3){
 801d2a4:	687b      	ldr	r3, [r7, #4]
 801d2a6:	4a08      	ldr	r2, [pc, #32]	; (801d2c8 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801d2a8:	4293      	cmp	r3, r2
 801d2aa:	d103      	bne.n	801d2b4 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 801d2ac:	2100      	movs	r1, #0
 801d2ae:	4806      	ldr	r0, [pc, #24]	; (801d2c8 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801d2b0:	f002 ffb8 	bl	8020224 <HAL_TIM_PWM_Stop_DMA>
	}

	datasentflag = 1;
 801d2b4:	4b05      	ldr	r3, [pc, #20]	; (801d2cc <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 801d2b6:	2201      	movs	r2, #1
 801d2b8:	601a      	str	r2, [r3, #0]
}
 801d2ba:	bf00      	nop
 801d2bc:	3708      	adds	r7, #8
 801d2be:	46bd      	mov	sp, r7
 801d2c0:	bd80      	pop	{r7, pc}
 801d2c2:	bf00      	nop
 801d2c4:	20005438 	.word	0x20005438
 801d2c8:	20005398 	.word	0x20005398
 801d2cc:	20000090 	.word	0x20000090

0801d2d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801d2d0:	b580      	push	{r7, lr}
 801d2d2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801d2d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801d2d8:	f000 fd6c 	bl	801ddb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801d2dc:	f000 f8da 	bl	801d494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801d2e0:	f7ff fb00 	bl	801c8e4 <MX_GPIO_Init>
  MX_DMA_Init();
 801d2e4:	f7ff fad6 	bl	801c894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 801d2e8:	f000 fc42 	bl	801db70 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 801d2ec:	f000 fa4c 	bl	801d788 <MX_TIM2_Init>
  MX_I2C1_Init();
 801d2f0:	f7ff fbb4 	bl	801ca5c <MX_I2C1_Init>
  MX_TIM3_Init();
 801d2f4:	f000 fabc 	bl	801d870 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 801d2f8:	f000 fc64 	bl	801dbc4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // *********************************************
  // 			LCD initialization
  // *********************************************
  if(lcd16x2_i2c_init(&hi2c1)){
 801d2fc:	4858      	ldr	r0, [pc, #352]	; (801d460 <main+0x190>)
 801d2fe:	f7ff fc8b 	bl	801cc18 <lcd16x2_i2c_init>
 801d302:	4603      	mov	r3, r0
 801d304:	2b00      	cmp	r3, #0
 801d306:	d004      	beq.n	801d312 <main+0x42>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801d308:	2201      	movs	r2, #1
 801d30a:	2120      	movs	r1, #32
 801d30c:	4855      	ldr	r0, [pc, #340]	; (801d464 <main+0x194>)
 801d30e:	f001 fc21 	bl	801eb54 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 801d312:	f7ff fd19 	bl	801cd48 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d316:	f7ff fd0f 	bl	801cd38 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d31a:	f7ff fd15 	bl	801cd48 <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("      RESET       ");
 801d31e:	4852      	ldr	r0, [pc, #328]	; (801d468 <main+0x198>)
 801d320:	f7ff fd1c 	bl	801cd5c <lcd16x2_i2c_printf>

  HAL_Delay(1000);
 801d324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d328:	f000 fdb6 	bl	801de98 <HAL_Delay>

  // Enable HC 05 module
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801d32c:	2201      	movs	r2, #1
 801d32e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d332:	484e      	ldr	r0, [pc, #312]	; (801d46c <main+0x19c>)
 801d334:	f001 fc0e 	bl	801eb54 <HAL_GPIO_WritePin>

  // enable interrupt for the UART
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 801d338:	4b4d      	ldr	r3, [pc, #308]	; (801d470 <main+0x1a0>)
 801d33a:	681b      	ldr	r3, [r3, #0]
 801d33c:	68da      	ldr	r2, [r3, #12]
 801d33e:	4b4c      	ldr	r3, [pc, #304]	; (801d470 <main+0x1a0>)
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	f042 0220 	orr.w	r2, r2, #32
 801d346:	60da      	str	r2, [r3, #12]

  lcd16x2_i2c_clear();
 801d348:	f7ff fcfe 	bl	801cd48 <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d34c:	f7ff fcf4 	bl	801cd38 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d350:	f7ff fcfa 	bl	801cd48 <lcd16x2_i2c_clear>

  lcd16x2_i2c_printf("><>   FISH   <><");
 801d354:	4847      	ldr	r0, [pc, #284]	; (801d474 <main+0x1a4>)
 801d356:	f7ff fd01 	bl	801cd5c <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 801d35a:	f7ff fced 	bl	801cd38 <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 801d35e:	4846      	ldr	r0, [pc, #280]	; (801d478 <main+0x1a8>)
 801d360:	f7ff fcfc 	bl	801cd5c <lcd16x2_i2c_printf>

  // *********************************************
  // 			Data definition
  // *********************************************
  Problem p;			    // struct that contains the info related to the problem
  uint32_t problemID = 0;	// ID that reppresents the number of the problem
 801d364:	2300      	movs	r3, #0
 801d366:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

  passProlemPtr(&p);
 801d36a:	1d3b      	adds	r3, r7, #4
 801d36c:	4618      	mov	r0, r3
 801d36e:	f7e4 faff 	bl	8001970 <passProlemPtr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BLUE_BUTTON){
 801d372:	4b42      	ldr	r3, [pc, #264]	; (801d47c <main+0x1ac>)
 801d374:	781b      	ldrb	r3, [r3, #0]
 801d376:	2b00      	cmp	r3, #0
 801d378:	d0fb      	beq.n	801d372 <main+0xa2>
		  lcd16x2_i2c_clear();	// clear the LCD display
 801d37a:	f7ff fce5 	bl	801cd48 <lcd16x2_i2c_clear>

		  // Listen for the key pressed on the keypad
		  problemID = keypad_getNumber();
 801d37e:	f7ff fe8b 	bl	801d098 <keypad_getNumber>
 801d382:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250

		  if(problemID==10000){
 801d386:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801d38a:	f242 7210 	movw	r2, #10000	; 0x2710
 801d38e:	4293      	cmp	r3, r2
 801d390:	d13e      	bne.n	801d410 <main+0x140>
			  uint8_t mode=0;
 801d392:	2300      	movs	r3, #0
 801d394:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

			  while(1){

				  if(mode==0){
 801d398:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d10f      	bne.n	801d3c0 <main+0xf0>
					  lcd16x2_i2c_clear();
 801d3a0:	f7ff fcd2 	bl	801cd48 <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d3a4:	4836      	ldr	r0, [pc, #216]	; (801d480 <main+0x1b0>)
 801d3a6:	f7ff fcd9 	bl	801cd5c <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d3aa:	f7ff fcc5 	bl	801cd38 <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    /(^-^)/ ");
 801d3ae:	4835      	ldr	r0, [pc, #212]	; (801d484 <main+0x1b4>)
 801d3b0:	f7ff fcd4 	bl	801cd5c <lcd16x2_i2c_printf>
					  mode +=1;
 801d3b4:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d3b8:	3301      	adds	r3, #1
 801d3ba:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 801d3be:	e01f      	b.n	801d400 <main+0x130>
				  }else if(mode==2){
 801d3c0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d3c4:	2b02      	cmp	r3, #2
 801d3c6:	d10f      	bne.n	801d3e8 <main+0x118>
					  lcd16x2_i2c_clear();
 801d3c8:	f7ff fcbe 	bl	801cd48 <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d3cc:	482c      	ldr	r0, [pc, #176]	; (801d480 <main+0x1b0>)
 801d3ce:	f7ff fcc5 	bl	801cd5c <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d3d2:	f7ff fcb1 	bl	801cd38 <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    -(^-^)-  ");
 801d3d6:	482c      	ldr	r0, [pc, #176]	; (801d488 <main+0x1b8>)
 801d3d8:	f7ff fcc0 	bl	801cd5c <lcd16x2_i2c_printf>
					  mode +=1;
 801d3dc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d3e0:	3301      	adds	r3, #1
 801d3e2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 801d3e6:	e00b      	b.n	801d400 <main+0x130>
				  }else{
					  mode +=1;
 801d3e8:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d3ec:	3301      	adds	r3, #1
 801d3ee:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					  if(mode==4) mode=0;
 801d3f2:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d3f6:	2b04      	cmp	r3, #4
 801d3f8:	d102      	bne.n	801d400 <main+0x130>
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				  }
				  LED_randSetRand();
 801d400:	f7e3 ffa0 	bl	8001344 <LED_randSetRand>

				  // Sends to LED strip signal
				  WS2811_Send();
 801d404:	f7e3 ffda 	bl	80013bc <WS2811_Send>

				  HAL_Delay(250);
 801d408:	20fa      	movs	r0, #250	; 0xfa
 801d40a:	f000 fd45 	bl	801de98 <HAL_Delay>
				  if(mode==0){
 801d40e:	e7c3      	b.n	801d398 <main+0xc8>

		  }else{


			  // Search and update the struct depending on the ID obtained
			  problem_fetch(&p,problemID);
 801d410:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801d414:	1d3b      	adds	r3, r7, #4
 801d416:	4611      	mov	r1, r2
 801d418:	4618      	mov	r0, r3
 801d41a:	f7e4 fab9 	bl	8001990 <problem_fetch>
			  // Generate a matrix containing colors for each LED according to problem
			  problem_genArray(&p);
 801d41e:	1d3b      	adds	r3, r7, #4
 801d420:	4618      	mov	r0, r3
 801d422:	f7e3 fe1b 	bl	800105c <problem_genArray>

			  // Display on led boulder info
			  lcd16x2_i2c_clear();
 801d426:	f7ff fc8f 	bl	801cd48 <lcd16x2_i2c_clear>
			  lcd16x2_i2c_printf("Name:");
 801d42a:	4818      	ldr	r0, [pc, #96]	; (801d48c <main+0x1bc>)
 801d42c:	f7ff fc96 	bl	801cd5c <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.name);
 801d430:	1d3b      	adds	r3, r7, #4
 801d432:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d436:	4618      	mov	r0, r3
 801d438:	f7ff fc90 	bl	801cd5c <lcd16x2_i2c_printf>
			  lcd16x2_i2c_2ndLine();
 801d43c:	f7ff fc7c 	bl	801cd38 <lcd16x2_i2c_2ndLine>
			  lcd16x2_i2c_printf("Grad:");
 801d440:	4813      	ldr	r0, [pc, #76]	; (801d490 <main+0x1c0>)
 801d442:	f7ff fc8b 	bl	801cd5c <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.grade);
 801d446:	1d3b      	adds	r3, r7, #4
 801d448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d44c:	4618      	mov	r0, r3
 801d44e:	f7ff fc85 	bl	801cd5c <lcd16x2_i2c_printf>

			  // Sends to LED strip signal
			  WS2811_Send();
 801d452:	f7e3 ffb3 	bl	80013bc <WS2811_Send>

			  // Reset button state
			  BLUE_BUTTON = false;
 801d456:	4b09      	ldr	r3, [pc, #36]	; (801d47c <main+0x1ac>)
 801d458:	2200      	movs	r2, #0
 801d45a:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 801d45c:	e789      	b.n	801d372 <main+0xa2>
 801d45e:	bf00      	nop
 801d460:	200052e4 	.word	0x200052e4
 801d464:	40020000 	.word	0x40020000
 801d468:	0802d234 	.word	0x0802d234
 801d46c:	40020400 	.word	0x40020400
 801d470:	20005478 	.word	0x20005478
 801d474:	0802d248 	.word	0x0802d248
 801d478:	0802d25c 	.word	0x0802d25c
 801d47c:	200000a9 	.word	0x200000a9
 801d480:	0802d270 	.word	0x0802d270
 801d484:	0802d27c 	.word	0x0802d27c
 801d488:	0802d28c 	.word	0x0802d28c
 801d48c:	0802d29c 	.word	0x0802d29c
 801d490:	0802d2a4 	.word	0x0802d2a4

0801d494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801d494:	b580      	push	{r7, lr}
 801d496:	b094      	sub	sp, #80	; 0x50
 801d498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d49a:	f107 0320 	add.w	r3, r7, #32
 801d49e:	2230      	movs	r2, #48	; 0x30
 801d4a0:	2100      	movs	r1, #0
 801d4a2:	4618      	mov	r0, r3
 801d4a4:	f004 fdbd 	bl	8022022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d4a8:	f107 030c 	add.w	r3, r7, #12
 801d4ac:	2200      	movs	r2, #0
 801d4ae:	601a      	str	r2, [r3, #0]
 801d4b0:	605a      	str	r2, [r3, #4]
 801d4b2:	609a      	str	r2, [r3, #8]
 801d4b4:	60da      	str	r2, [r3, #12]
 801d4b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801d4b8:	2300      	movs	r3, #0
 801d4ba:	60bb      	str	r3, [r7, #8]
 801d4bc:	4b28      	ldr	r3, [pc, #160]	; (801d560 <SystemClock_Config+0xcc>)
 801d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4c0:	4a27      	ldr	r2, [pc, #156]	; (801d560 <SystemClock_Config+0xcc>)
 801d4c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d4c6:	6413      	str	r3, [r2, #64]	; 0x40
 801d4c8:	4b25      	ldr	r3, [pc, #148]	; (801d560 <SystemClock_Config+0xcc>)
 801d4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d4d0:	60bb      	str	r3, [r7, #8]
 801d4d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801d4d4:	2300      	movs	r3, #0
 801d4d6:	607b      	str	r3, [r7, #4]
 801d4d8:	4b22      	ldr	r3, [pc, #136]	; (801d564 <SystemClock_Config+0xd0>)
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801d4e0:	4a20      	ldr	r2, [pc, #128]	; (801d564 <SystemClock_Config+0xd0>)
 801d4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d4e6:	6013      	str	r3, [r2, #0]
 801d4e8:	4b1e      	ldr	r3, [pc, #120]	; (801d564 <SystemClock_Config+0xd0>)
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801d4f0:	607b      	str	r3, [r7, #4]
 801d4f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801d4f4:	2302      	movs	r3, #2
 801d4f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d4f8:	2301      	movs	r3, #1
 801d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801d4fc:	2310      	movs	r3, #16
 801d4fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d500:	2302      	movs	r3, #2
 801d502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801d504:	2300      	movs	r3, #0
 801d506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801d508:	2308      	movs	r3, #8
 801d50a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801d50c:	2348      	movs	r3, #72	; 0x48
 801d50e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801d510:	2302      	movs	r3, #2
 801d512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801d514:	2307      	movs	r3, #7
 801d516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d518:	f107 0320 	add.w	r3, r7, #32
 801d51c:	4618      	mov	r0, r3
 801d51e:	f002 f8b9 	bl	801f694 <HAL_RCC_OscConfig>
 801d522:	4603      	mov	r3, r0
 801d524:	2b00      	cmp	r3, #0
 801d526:	d001      	beq.n	801d52c <SystemClock_Config+0x98>
  {
    Error_Handler();
 801d528:	f000 f832 	bl	801d590 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d52c:	230f      	movs	r3, #15
 801d52e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d530:	2302      	movs	r3, #2
 801d532:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d534:	2300      	movs	r3, #0
 801d536:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801d538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d53c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d53e:	2300      	movs	r3, #0
 801d540:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d542:	f107 030c 	add.w	r3, r7, #12
 801d546:	2102      	movs	r1, #2
 801d548:	4618      	mov	r0, r3
 801d54a:	f002 fb13 	bl	801fb74 <HAL_RCC_ClockConfig>
 801d54e:	4603      	mov	r3, r0
 801d550:	2b00      	cmp	r3, #0
 801d552:	d001      	beq.n	801d558 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 801d554:	f000 f81c 	bl	801d590 <Error_Handler>
  }
}
 801d558:	bf00      	nop
 801d55a:	3750      	adds	r7, #80	; 0x50
 801d55c:	46bd      	mov	sp, r7
 801d55e:	bd80      	pop	{r7, pc}
 801d560:	40023800 	.word	0x40023800
 801d564:	40007000 	.word	0x40007000

0801d568 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801d568:	b480      	push	{r7}
 801d56a:	b083      	sub	sp, #12
 801d56c:	af00      	add	r7, sp, #0
 801d56e:	4603      	mov	r3, r0
 801d570:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 801d572:	88fb      	ldrh	r3, [r7, #6]
 801d574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d578:	d102      	bne.n	801d580 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 801d57a:	4b04      	ldr	r3, [pc, #16]	; (801d58c <HAL_GPIO_EXTI_Callback+0x24>)
 801d57c:	2201      	movs	r2, #1
 801d57e:	701a      	strb	r2, [r3, #0]
	}
}
 801d580:	bf00      	nop
 801d582:	370c      	adds	r7, #12
 801d584:	46bd      	mov	sp, r7
 801d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d58a:	4770      	bx	lr
 801d58c:	200000a9 	.word	0x200000a9

0801d590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801d590:	b480      	push	{r7}
 801d592:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801d594:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801d596:	e7fe      	b.n	801d596 <Error_Handler+0x6>

0801d598 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801d598:	b580      	push	{r7, lr}
 801d59a:	b082      	sub	sp, #8
 801d59c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d59e:	2300      	movs	r3, #0
 801d5a0:	607b      	str	r3, [r7, #4]
 801d5a2:	4b14      	ldr	r3, [pc, #80]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d5a6:	4a13      	ldr	r2, [pc, #76]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d5ac:	6453      	str	r3, [r2, #68]	; 0x44
 801d5ae:	4b11      	ldr	r3, [pc, #68]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d5b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d5b6:	607b      	str	r3, [r7, #4]
 801d5b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801d5ba:	2300      	movs	r3, #0
 801d5bc:	603b      	str	r3, [r7, #0]
 801d5be:	4b0d      	ldr	r3, [pc, #52]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5c2:	4a0c      	ldr	r2, [pc, #48]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d5c8:	6413      	str	r3, [r2, #64]	; 0x40
 801d5ca:	4b0a      	ldr	r3, [pc, #40]	; (801d5f4 <HAL_MspInit+0x5c>)
 801d5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d5d2:	603b      	str	r3, [r7, #0]
 801d5d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801d5d6:	2007      	movs	r0, #7
 801d5d8:	f000 fd50 	bl	801e07c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 801d5dc:	2200      	movs	r2, #0
 801d5de:	2100      	movs	r1, #0
 801d5e0:	2051      	movs	r0, #81	; 0x51
 801d5e2:	f000 fd56 	bl	801e092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 801d5e6:	2051      	movs	r0, #81	; 0x51
 801d5e8:	f000 fd6f 	bl	801e0ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801d5ec:	bf00      	nop
 801d5ee:	3708      	adds	r7, #8
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	bd80      	pop	{r7, pc}
 801d5f4:	40023800 	.word	0x40023800

0801d5f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801d5f8:	b480      	push	{r7}
 801d5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801d5fc:	e7fe      	b.n	801d5fc <NMI_Handler+0x4>

0801d5fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801d5fe:	b480      	push	{r7}
 801d600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801d602:	e7fe      	b.n	801d602 <HardFault_Handler+0x4>

0801d604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801d604:	b480      	push	{r7}
 801d606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801d608:	e7fe      	b.n	801d608 <MemManage_Handler+0x4>

0801d60a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801d60a:	b480      	push	{r7}
 801d60c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801d60e:	e7fe      	b.n	801d60e <BusFault_Handler+0x4>

0801d610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801d610:	b480      	push	{r7}
 801d612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801d614:	e7fe      	b.n	801d614 <UsageFault_Handler+0x4>

0801d616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801d616:	b480      	push	{r7}
 801d618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801d61a:	bf00      	nop
 801d61c:	46bd      	mov	sp, r7
 801d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d622:	4770      	bx	lr

0801d624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801d624:	b480      	push	{r7}
 801d626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801d628:	bf00      	nop
 801d62a:	46bd      	mov	sp, r7
 801d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d630:	4770      	bx	lr

0801d632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801d632:	b480      	push	{r7}
 801d634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801d636:	bf00      	nop
 801d638:	46bd      	mov	sp, r7
 801d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d63e:	4770      	bx	lr

0801d640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801d640:	b580      	push	{r7, lr}
 801d642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801d644:	f000 fc08 	bl	801de58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801d648:	bf00      	nop
 801d64a:	bd80      	pop	{r7, pc}

0801d64c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 801d64c:	b580      	push	{r7, lr}
 801d64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 801d650:	4802      	ldr	r0, [pc, #8]	; (801d65c <DMA1_Stream4_IRQHandler+0x10>)
 801d652:	f000 fe7d 	bl	801e350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 801d656:	bf00      	nop
 801d658:	bd80      	pop	{r7, pc}
 801d65a:	bf00      	nop
 801d65c:	200053d8 	.word	0x200053d8

0801d660 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801d660:	b580      	push	{r7, lr}
 801d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 801d664:	4802      	ldr	r0, [pc, #8]	; (801d670 <DMA1_Stream5_IRQHandler+0x10>)
 801d666:	f000 fe73 	bl	801e350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801d66a:	bf00      	nop
 801d66c:	bd80      	pop	{r7, pc}
 801d66e:	bf00      	nop
 801d670:	20005338 	.word	0x20005338

0801d674 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801d674:	b580      	push	{r7, lr}
 801d676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801d678:	4802      	ldr	r0, [pc, #8]	; (801d684 <TIM2_IRQHandler+0x10>)
 801d67a:	f002 fe79 	bl	8020370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801d67e:	bf00      	nop
 801d680:	bd80      	pop	{r7, pc}
 801d682:	bf00      	nop
 801d684:	20005438 	.word	0x20005438

0801d688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801d688:	b580      	push	{r7, lr}
 801d68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801d68c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d690:	f001 fa7a 	bl	801eb88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801d694:	bf00      	nop
 801d696:	bd80      	pop	{r7, pc}

0801d698 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 801d698:	b580      	push	{r7, lr}
 801d69a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

	// Receive one character at a time and save it insode the container buffer
	HAL_UART_Receive(&huart6, (uint8_t*)&buffer[buffer_index++], 1, 5);
 801d69c:	4b0d      	ldr	r3, [pc, #52]	; (801d6d4 <USART6_IRQHandler+0x3c>)
 801d69e:	781b      	ldrb	r3, [r3, #0]
 801d6a0:	1c5a      	adds	r2, r3, #1
 801d6a2:	b2d1      	uxtb	r1, r2
 801d6a4:	4a0b      	ldr	r2, [pc, #44]	; (801d6d4 <USART6_IRQHandler+0x3c>)
 801d6a6:	7011      	strb	r1, [r2, #0]
 801d6a8:	461a      	mov	r2, r3
 801d6aa:	4b0b      	ldr	r3, [pc, #44]	; (801d6d8 <USART6_IRQHandler+0x40>)
 801d6ac:	18d1      	adds	r1, r2, r3
 801d6ae:	2305      	movs	r3, #5
 801d6b0:	2201      	movs	r2, #1
 801d6b2:	480a      	ldr	r0, [pc, #40]	; (801d6dc <USART6_IRQHandler+0x44>)
 801d6b4:	f003 fdd4 	bl	8021260 <HAL_UART_Receive>

	// If the buffer contains the \n character, save the message and begin again
	if(buffer[buffer_index-1] == '\n'){
 801d6b8:	4b06      	ldr	r3, [pc, #24]	; (801d6d4 <USART6_IRQHandler+0x3c>)
 801d6ba:	781b      	ldrb	r3, [r3, #0]
 801d6bc:	3b01      	subs	r3, #1
 801d6be:	4a06      	ldr	r2, [pc, #24]	; (801d6d8 <USART6_IRQHandler+0x40>)
 801d6c0:	5cd3      	ldrb	r3, [r2, r3]
 801d6c2:	2b0a      	cmp	r3, #10
 801d6c4:	d101      	bne.n	801d6ca <USART6_IRQHandler+0x32>
		MessageHandler();
 801d6c6:	f7e3 ff35 	bl	8001534 <MessageHandler>
	}

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801d6ca:	4804      	ldr	r0, [pc, #16]	; (801d6dc <USART6_IRQHandler+0x44>)
 801d6cc:	f003 fe6e 	bl	80213ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801d6d0:	bf00      	nop
 801d6d2:	bd80      	pop	{r7, pc}
 801d6d4:	20000094 	.word	0x20000094
 801d6d8:	20002b84 	.word	0x20002b84
 801d6dc:	20005478 	.word	0x20005478

0801d6e0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 801d6e0:	b480      	push	{r7}
 801d6e2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 801d6e4:	bf00      	nop
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6ec:	4770      	bx	lr
	...

0801d6f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801d6f0:	b580      	push	{r7, lr}
 801d6f2:	b086      	sub	sp, #24
 801d6f4:	af00      	add	r7, sp, #0
 801d6f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801d6f8:	4a14      	ldr	r2, [pc, #80]	; (801d74c <_sbrk+0x5c>)
 801d6fa:	4b15      	ldr	r3, [pc, #84]	; (801d750 <_sbrk+0x60>)
 801d6fc:	1ad3      	subs	r3, r2, r3
 801d6fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801d700:	697b      	ldr	r3, [r7, #20]
 801d702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801d704:	4b13      	ldr	r3, [pc, #76]	; (801d754 <_sbrk+0x64>)
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	2b00      	cmp	r3, #0
 801d70a:	d102      	bne.n	801d712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801d70c:	4b11      	ldr	r3, [pc, #68]	; (801d754 <_sbrk+0x64>)
 801d70e:	4a12      	ldr	r2, [pc, #72]	; (801d758 <_sbrk+0x68>)
 801d710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801d712:	4b10      	ldr	r3, [pc, #64]	; (801d754 <_sbrk+0x64>)
 801d714:	681a      	ldr	r2, [r3, #0]
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	4413      	add	r3, r2
 801d71a:	693a      	ldr	r2, [r7, #16]
 801d71c:	429a      	cmp	r2, r3
 801d71e:	d207      	bcs.n	801d730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 801d720:	f004 fc4a 	bl	8021fb8 <__errno>
 801d724:	4602      	mov	r2, r0
 801d726:	230c      	movs	r3, #12
 801d728:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801d72a:	f04f 33ff 	mov.w	r3, #4294967295
 801d72e:	e009      	b.n	801d744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801d730:	4b08      	ldr	r3, [pc, #32]	; (801d754 <_sbrk+0x64>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801d736:	4b07      	ldr	r3, [pc, #28]	; (801d754 <_sbrk+0x64>)
 801d738:	681a      	ldr	r2, [r3, #0]
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	4413      	add	r3, r2
 801d73e:	4a05      	ldr	r2, [pc, #20]	; (801d754 <_sbrk+0x64>)
 801d740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801d742:	68fb      	ldr	r3, [r7, #12]
}
 801d744:	4618      	mov	r0, r3
 801d746:	3718      	adds	r7, #24
 801d748:	46bd      	mov	sp, r7
 801d74a:	bd80      	pop	{r7, pc}
 801d74c:	20018000 	.word	0x20018000
 801d750:	00000400 	.word	0x00000400
 801d754:	200000ac 	.word	0x200000ac
 801d758:	20005500 	.word	0x20005500

0801d75c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801d75c:	b480      	push	{r7}
 801d75e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d760:	4b08      	ldr	r3, [pc, #32]	; (801d784 <SystemInit+0x28>)
 801d762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d766:	4a07      	ldr	r2, [pc, #28]	; (801d784 <SystemInit+0x28>)
 801d768:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d76c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d770:	4b04      	ldr	r3, [pc, #16]	; (801d784 <SystemInit+0x28>)
 801d772:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801d776:	609a      	str	r2, [r3, #8]
#endif
}
 801d778:	bf00      	nop
 801d77a:	46bd      	mov	sp, r7
 801d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d780:	4770      	bx	lr
 801d782:	bf00      	nop
 801d784:	e000ed00 	.word	0xe000ed00

0801d788 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b08e      	sub	sp, #56	; 0x38
 801d78c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d78e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d792:	2200      	movs	r2, #0
 801d794:	601a      	str	r2, [r3, #0]
 801d796:	605a      	str	r2, [r3, #4]
 801d798:	609a      	str	r2, [r3, #8]
 801d79a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d79c:	f107 0320 	add.w	r3, r7, #32
 801d7a0:	2200      	movs	r2, #0
 801d7a2:	601a      	str	r2, [r3, #0]
 801d7a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d7a6:	1d3b      	adds	r3, r7, #4
 801d7a8:	2200      	movs	r2, #0
 801d7aa:	601a      	str	r2, [r3, #0]
 801d7ac:	605a      	str	r2, [r3, #4]
 801d7ae:	609a      	str	r2, [r3, #8]
 801d7b0:	60da      	str	r2, [r3, #12]
 801d7b2:	611a      	str	r2, [r3, #16]
 801d7b4:	615a      	str	r2, [r3, #20]
 801d7b6:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 801d7b8:	4b2c      	ldr	r3, [pc, #176]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d7be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 801d7c0:	4b2a      	ldr	r3, [pc, #168]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d7c6:	4b29      	ldr	r3, [pc, #164]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 801d7cc:	4b27      	ldr	r3, [pc, #156]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7ce:	2259      	movs	r2, #89	; 0x59
 801d7d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d7d2:	4b26      	ldr	r3, [pc, #152]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7d4:	2200      	movs	r2, #0
 801d7d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d7d8:	4b24      	ldr	r3, [pc, #144]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7da:	2280      	movs	r2, #128	; 0x80
 801d7dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d7de:	4823      	ldr	r0, [pc, #140]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7e0:	f002 fbba 	bl	801ff58 <HAL_TIM_Base_Init>
 801d7e4:	4603      	mov	r3, r0
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d001      	beq.n	801d7ee <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801d7ea:	f7ff fed1 	bl	801d590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d7f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d7f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d7f8:	4619      	mov	r1, r3
 801d7fa:	481c      	ldr	r0, [pc, #112]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d7fc:	f002 ff86 	bl	802070c <HAL_TIM_ConfigClockSource>
 801d800:	4603      	mov	r3, r0
 801d802:	2b00      	cmp	r3, #0
 801d804:	d001      	beq.n	801d80a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 801d806:	f7ff fec3 	bl	801d590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801d80a:	4818      	ldr	r0, [pc, #96]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d80c:	f002 fbcf 	bl	801ffae <HAL_TIM_PWM_Init>
 801d810:	4603      	mov	r3, r0
 801d812:	2b00      	cmp	r3, #0
 801d814:	d001      	beq.n	801d81a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 801d816:	f7ff febb 	bl	801d590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d81a:	2300      	movs	r3, #0
 801d81c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d81e:	2300      	movs	r3, #0
 801d820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d822:	f107 0320 	add.w	r3, r7, #32
 801d826:	4619      	mov	r1, r3
 801d828:	4810      	ldr	r0, [pc, #64]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d82a:	f003 fbb1 	bl	8020f90 <HAL_TIMEx_MasterConfigSynchronization>
 801d82e:	4603      	mov	r3, r0
 801d830:	2b00      	cmp	r3, #0
 801d832:	d001      	beq.n	801d838 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 801d834:	f7ff feac 	bl	801d590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d838:	2360      	movs	r3, #96	; 0x60
 801d83a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d83c:	2301      	movs	r3, #1
 801d83e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d840:	2300      	movs	r3, #0
 801d842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d844:	2300      	movs	r3, #0
 801d846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d848:	1d3b      	adds	r3, r7, #4
 801d84a:	2200      	movs	r2, #0
 801d84c:	4619      	mov	r1, r3
 801d84e:	4807      	ldr	r0, [pc, #28]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d850:	f002 fe96 	bl	8020580 <HAL_TIM_PWM_ConfigChannel>
 801d854:	4603      	mov	r3, r0
 801d856:	2b00      	cmp	r3, #0
 801d858:	d001      	beq.n	801d85e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 801d85a:	f7ff fe99 	bl	801d590 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 801d85e:	4803      	ldr	r0, [pc, #12]	; (801d86c <MX_TIM2_Init+0xe4>)
 801d860:	f000 f928 	bl	801dab4 <HAL_TIM_MspPostInit>

}
 801d864:	bf00      	nop
 801d866:	3738      	adds	r7, #56	; 0x38
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd80      	pop	{r7, pc}
 801d86c:	20005438 	.word	0x20005438

0801d870 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	b08e      	sub	sp, #56	; 0x38
 801d874:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d87a:	2200      	movs	r2, #0
 801d87c:	601a      	str	r2, [r3, #0]
 801d87e:	605a      	str	r2, [r3, #4]
 801d880:	609a      	str	r2, [r3, #8]
 801d882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d884:	f107 0320 	add.w	r3, r7, #32
 801d888:	2200      	movs	r2, #0
 801d88a:	601a      	str	r2, [r3, #0]
 801d88c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d88e:	1d3b      	adds	r3, r7, #4
 801d890:	2200      	movs	r2, #0
 801d892:	601a      	str	r2, [r3, #0]
 801d894:	605a      	str	r2, [r3, #4]
 801d896:	609a      	str	r2, [r3, #8]
 801d898:	60da      	str	r2, [r3, #12]
 801d89a:	611a      	str	r2, [r3, #16]
 801d89c:	615a      	str	r2, [r3, #20]
 801d89e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 801d8a0:	4b2c      	ldr	r3, [pc, #176]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8a2:	4a2d      	ldr	r2, [pc, #180]	; (801d958 <MX_TIM3_Init+0xe8>)
 801d8a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 801d8a6:	4b2b      	ldr	r3, [pc, #172]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8a8:	2200      	movs	r2, #0
 801d8aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d8ac:	4b29      	ldr	r3, [pc, #164]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8ae:	2200      	movs	r2, #0
 801d8b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 801d8b2:	4b28      	ldr	r3, [pc, #160]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8b4:	2259      	movs	r2, #89	; 0x59
 801d8b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d8b8:	4b26      	ldr	r3, [pc, #152]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d8be:	4b25      	ldr	r3, [pc, #148]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8c0:	2280      	movs	r2, #128	; 0x80
 801d8c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801d8c4:	4823      	ldr	r0, [pc, #140]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8c6:	f002 fb47 	bl	801ff58 <HAL_TIM_Base_Init>
 801d8ca:	4603      	mov	r3, r0
 801d8cc:	2b00      	cmp	r3, #0
 801d8ce:	d001      	beq.n	801d8d4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 801d8d0:	f7ff fe5e 	bl	801d590 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d8d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801d8da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d8de:	4619      	mov	r1, r3
 801d8e0:	481c      	ldr	r0, [pc, #112]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8e2:	f002 ff13 	bl	802070c <HAL_TIM_ConfigClockSource>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d001      	beq.n	801d8f0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 801d8ec:	f7ff fe50 	bl	801d590 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801d8f0:	4818      	ldr	r0, [pc, #96]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d8f2:	f002 fb5c 	bl	801ffae <HAL_TIM_PWM_Init>
 801d8f6:	4603      	mov	r3, r0
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d001      	beq.n	801d900 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 801d8fc:	f7ff fe48 	bl	801d590 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d900:	2300      	movs	r3, #0
 801d902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d904:	2300      	movs	r3, #0
 801d906:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801d908:	f107 0320 	add.w	r3, r7, #32
 801d90c:	4619      	mov	r1, r3
 801d90e:	4811      	ldr	r0, [pc, #68]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d910:	f003 fb3e 	bl	8020f90 <HAL_TIMEx_MasterConfigSynchronization>
 801d914:	4603      	mov	r3, r0
 801d916:	2b00      	cmp	r3, #0
 801d918:	d001      	beq.n	801d91e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 801d91a:	f7ff fe39 	bl	801d590 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d91e:	2360      	movs	r3, #96	; 0x60
 801d920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d922:	2301      	movs	r3, #1
 801d924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d926:	2300      	movs	r3, #0
 801d928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d92a:	2300      	movs	r3, #0
 801d92c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d92e:	1d3b      	adds	r3, r7, #4
 801d930:	2200      	movs	r2, #0
 801d932:	4619      	mov	r1, r3
 801d934:	4807      	ldr	r0, [pc, #28]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d936:	f002 fe23 	bl	8020580 <HAL_TIM_PWM_ConfigChannel>
 801d93a:	4603      	mov	r3, r0
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d001      	beq.n	801d944 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 801d940:	f7ff fe26 	bl	801d590 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 801d944:	4803      	ldr	r0, [pc, #12]	; (801d954 <MX_TIM3_Init+0xe4>)
 801d946:	f000 f8b5 	bl	801dab4 <HAL_TIM_MspPostInit>

}
 801d94a:	bf00      	nop
 801d94c:	3738      	adds	r7, #56	; 0x38
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}
 801d952:	bf00      	nop
 801d954:	20005398 	.word	0x20005398
 801d958:	40000400 	.word	0x40000400

0801d95c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801d95c:	b580      	push	{r7, lr}
 801d95e:	b084      	sub	sp, #16
 801d960:	af00      	add	r7, sp, #0
 801d962:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801d964:	687b      	ldr	r3, [r7, #4]
 801d966:	681b      	ldr	r3, [r3, #0]
 801d968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d96c:	d147      	bne.n	801d9fe <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801d96e:	2300      	movs	r3, #0
 801d970:	60fb      	str	r3, [r7, #12]
 801d972:	4b4a      	ldr	r3, [pc, #296]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d976:	4a49      	ldr	r2, [pc, #292]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801d978:	f043 0301 	orr.w	r3, r3, #1
 801d97c:	6413      	str	r3, [r2, #64]	; 0x40
 801d97e:	4b47      	ldr	r3, [pc, #284]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d982:	f003 0301 	and.w	r3, r3, #1
 801d986:	60fb      	str	r3, [r7, #12]
 801d988:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801d98a:	4b45      	ldr	r3, [pc, #276]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d98c:	4a45      	ldr	r2, [pc, #276]	; (801daa4 <HAL_TIM_Base_MspInit+0x148>)
 801d98e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 801d990:	4b43      	ldr	r3, [pc, #268]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d992:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801d996:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d998:	4b41      	ldr	r3, [pc, #260]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d99a:	2240      	movs	r2, #64	; 0x40
 801d99c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801d99e:	4b40      	ldr	r3, [pc, #256]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9a0:	2200      	movs	r2, #0
 801d9a2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801d9a4:	4b3e      	ldr	r3, [pc, #248]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d9aa:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d9ac:	4b3c      	ldr	r3, [pc, #240]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d9b2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d9b4:	4b3a      	ldr	r3, [pc, #232]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d9ba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801d9bc:	4b38      	ldr	r3, [pc, #224]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9be:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d9c2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 801d9c4:	4b36      	ldr	r3, [pc, #216]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d9ca:	4b35      	ldr	r3, [pc, #212]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9cc:	2200      	movs	r2, #0
 801d9ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 801d9d0:	4833      	ldr	r0, [pc, #204]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9d2:	f000 fb95 	bl	801e100 <HAL_DMA_Init>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d001      	beq.n	801d9e0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 801d9dc:	f7ff fdd8 	bl	801d590 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801d9e0:	687b      	ldr	r3, [r7, #4]
 801d9e2:	4a2f      	ldr	r2, [pc, #188]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9e4:	625a      	str	r2, [r3, #36]	; 0x24
 801d9e6:	4a2e      	ldr	r2, [pc, #184]	; (801daa0 <HAL_TIM_Base_MspInit+0x144>)
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801d9ec:	2200      	movs	r2, #0
 801d9ee:	2100      	movs	r1, #0
 801d9f0:	201c      	movs	r0, #28
 801d9f2:	f000 fb4e 	bl	801e092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801d9f6:	201c      	movs	r0, #28
 801d9f8:	f000 fb67 	bl	801e0ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801d9fc:	e049      	b.n	801da92 <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	681b      	ldr	r3, [r3, #0]
 801da02:	4a29      	ldr	r2, [pc, #164]	; (801daa8 <HAL_TIM_Base_MspInit+0x14c>)
 801da04:	4293      	cmp	r3, r2
 801da06:	d144      	bne.n	801da92 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801da08:	2300      	movs	r3, #0
 801da0a:	60bb      	str	r3, [r7, #8]
 801da0c:	4b23      	ldr	r3, [pc, #140]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801da0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da10:	4a22      	ldr	r2, [pc, #136]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801da12:	f043 0302 	orr.w	r3, r3, #2
 801da16:	6413      	str	r3, [r2, #64]	; 0x40
 801da18:	4b20      	ldr	r3, [pc, #128]	; (801da9c <HAL_TIM_Base_MspInit+0x140>)
 801da1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801da1c:	f003 0302 	and.w	r3, r3, #2
 801da20:	60bb      	str	r3, [r7, #8]
 801da22:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 801da24:	4b21      	ldr	r3, [pc, #132]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da26:	4a22      	ldr	r2, [pc, #136]	; (801dab0 <HAL_TIM_Base_MspInit+0x154>)
 801da28:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 801da2a:	4b20      	ldr	r3, [pc, #128]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da2c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801da30:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801da32:	4b1e      	ldr	r3, [pc, #120]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da34:	2240      	movs	r2, #64	; 0x40
 801da36:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 801da38:	4b1c      	ldr	r3, [pc, #112]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da3a:	2200      	movs	r2, #0
 801da3c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 801da3e:	4b1b      	ldr	r3, [pc, #108]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801da44:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801da46:	4b19      	ldr	r3, [pc, #100]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801da4c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801da4e:	4b17      	ldr	r3, [pc, #92]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801da54:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 801da56:	4b15      	ldr	r3, [pc, #84]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da58:	f44f 7280 	mov.w	r2, #256	; 0x100
 801da5c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 801da5e:	4b13      	ldr	r3, [pc, #76]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da60:	2200      	movs	r2, #0
 801da62:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801da64:	4b11      	ldr	r3, [pc, #68]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da66:	2200      	movs	r2, #0
 801da68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 801da6a:	4810      	ldr	r0, [pc, #64]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da6c:	f000 fb48 	bl	801e100 <HAL_DMA_Init>
 801da70:	4603      	mov	r3, r0
 801da72:	2b00      	cmp	r3, #0
 801da74:	d001      	beq.n	801da7a <HAL_TIM_Base_MspInit+0x11e>
      Error_Handler();
 801da76:	f7ff fd8b 	bl	801d590 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	4a0b      	ldr	r2, [pc, #44]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da7e:	625a      	str	r2, [r3, #36]	; 0x24
 801da80:	4a0a      	ldr	r2, [pc, #40]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 801da86:	687b      	ldr	r3, [r7, #4]
 801da88:	4a08      	ldr	r2, [pc, #32]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da8a:	639a      	str	r2, [r3, #56]	; 0x38
 801da8c:	4a07      	ldr	r2, [pc, #28]	; (801daac <HAL_TIM_Base_MspInit+0x150>)
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	6393      	str	r3, [r2, #56]	; 0x38
}
 801da92:	bf00      	nop
 801da94:	3710      	adds	r7, #16
 801da96:	46bd      	mov	sp, r7
 801da98:	bd80      	pop	{r7, pc}
 801da9a:	bf00      	nop
 801da9c:	40023800 	.word	0x40023800
 801daa0:	20005338 	.word	0x20005338
 801daa4:	40026088 	.word	0x40026088
 801daa8:	40000400 	.word	0x40000400
 801daac:	200053d8 	.word	0x200053d8
 801dab0:	40026070 	.word	0x40026070

0801dab4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801dab4:	b580      	push	{r7, lr}
 801dab6:	b08a      	sub	sp, #40	; 0x28
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dabc:	f107 0314 	add.w	r3, r7, #20
 801dac0:	2200      	movs	r2, #0
 801dac2:	601a      	str	r2, [r3, #0]
 801dac4:	605a      	str	r2, [r3, #4]
 801dac6:	609a      	str	r2, [r3, #8]
 801dac8:	60da      	str	r2, [r3, #12]
 801daca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dad4:	d11e      	bne.n	801db14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dad6:	2300      	movs	r3, #0
 801dad8:	613b      	str	r3, [r7, #16]
 801dada:	4b22      	ldr	r3, [pc, #136]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801dadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dade:	4a21      	ldr	r2, [pc, #132]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801dae0:	f043 0301 	orr.w	r3, r3, #1
 801dae4:	6313      	str	r3, [r2, #48]	; 0x30
 801dae6:	4b1f      	ldr	r3, [pc, #124]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801dae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801daea:	f003 0301 	and.w	r3, r3, #1
 801daee:	613b      	str	r3, [r7, #16]
 801daf0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801daf2:	2301      	movs	r3, #1
 801daf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801daf6:	2302      	movs	r3, #2
 801daf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dafa:	2300      	movs	r3, #0
 801dafc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dafe:	2300      	movs	r3, #0
 801db00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801db02:	2301      	movs	r3, #1
 801db04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801db06:	f107 0314 	add.w	r3, r7, #20
 801db0a:	4619      	mov	r1, r3
 801db0c:	4816      	ldr	r0, [pc, #88]	; (801db68 <HAL_TIM_MspPostInit+0xb4>)
 801db0e:	f000 fe87 	bl	801e820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801db12:	e022      	b.n	801db5a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	681b      	ldr	r3, [r3, #0]
 801db18:	4a14      	ldr	r2, [pc, #80]	; (801db6c <HAL_TIM_MspPostInit+0xb8>)
 801db1a:	4293      	cmp	r3, r2
 801db1c:	d11d      	bne.n	801db5a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801db1e:	2300      	movs	r3, #0
 801db20:	60fb      	str	r3, [r7, #12]
 801db22:	4b10      	ldr	r3, [pc, #64]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801db24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db26:	4a0f      	ldr	r2, [pc, #60]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801db28:	f043 0301 	orr.w	r3, r3, #1
 801db2c:	6313      	str	r3, [r2, #48]	; 0x30
 801db2e:	4b0d      	ldr	r3, [pc, #52]	; (801db64 <HAL_TIM_MspPostInit+0xb0>)
 801db30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db32:	f003 0301 	and.w	r3, r3, #1
 801db36:	60fb      	str	r3, [r7, #12]
 801db38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801db3a:	2340      	movs	r3, #64	; 0x40
 801db3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801db3e:	2302      	movs	r3, #2
 801db40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db42:	2300      	movs	r3, #0
 801db44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db46:	2300      	movs	r3, #0
 801db48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801db4a:	2302      	movs	r3, #2
 801db4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801db4e:	f107 0314 	add.w	r3, r7, #20
 801db52:	4619      	mov	r1, r3
 801db54:	4804      	ldr	r0, [pc, #16]	; (801db68 <HAL_TIM_MspPostInit+0xb4>)
 801db56:	f000 fe63 	bl	801e820 <HAL_GPIO_Init>
}
 801db5a:	bf00      	nop
 801db5c:	3728      	adds	r7, #40	; 0x28
 801db5e:	46bd      	mov	sp, r7
 801db60:	bd80      	pop	{r7, pc}
 801db62:	bf00      	nop
 801db64:	40023800 	.word	0x40023800
 801db68:	40020000 	.word	0x40020000
 801db6c:	40000400 	.word	0x40000400

0801db70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801db70:	b580      	push	{r7, lr}
 801db72:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801db74:	4b11      	ldr	r3, [pc, #68]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db76:	4a12      	ldr	r2, [pc, #72]	; (801dbc0 <MX_USART2_UART_Init+0x50>)
 801db78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801db7a:	4b10      	ldr	r3, [pc, #64]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801db80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801db82:	4b0e      	ldr	r3, [pc, #56]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db84:	2200      	movs	r2, #0
 801db86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801db88:	4b0c      	ldr	r3, [pc, #48]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db8a:	2200      	movs	r2, #0
 801db8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801db8e:	4b0b      	ldr	r3, [pc, #44]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db90:	2200      	movs	r2, #0
 801db92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801db94:	4b09      	ldr	r3, [pc, #36]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db96:	220c      	movs	r2, #12
 801db98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801db9a:	4b08      	ldr	r3, [pc, #32]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801db9c:	2200      	movs	r2, #0
 801db9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801dba0:	4b06      	ldr	r3, [pc, #24]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801dba2:	2200      	movs	r2, #0
 801dba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801dba6:	4805      	ldr	r0, [pc, #20]	; (801dbbc <MX_USART2_UART_Init+0x4c>)
 801dba8:	f003 fa74 	bl	8021094 <HAL_UART_Init>
 801dbac:	4603      	mov	r3, r0
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d001      	beq.n	801dbb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801dbb2:	f7ff fced 	bl	801d590 <Error_Handler>
  }

}
 801dbb6:	bf00      	nop
 801dbb8:	bd80      	pop	{r7, pc}
 801dbba:	bf00      	nop
 801dbbc:	200054b8 	.word	0x200054b8
 801dbc0:	40004400 	.word	0x40004400

0801dbc4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 801dbc4:	b580      	push	{r7, lr}
 801dbc6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 801dbc8:	4b11      	ldr	r3, [pc, #68]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbca:	4a12      	ldr	r2, [pc, #72]	; (801dc14 <MX_USART6_UART_Init+0x50>)
 801dbcc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 801dbce:	4b10      	ldr	r3, [pc, #64]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801dbd4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801dbd6:	4b0e      	ldr	r3, [pc, #56]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbd8:	2200      	movs	r2, #0
 801dbda:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801dbdc:	4b0c      	ldr	r3, [pc, #48]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbde:	2200      	movs	r2, #0
 801dbe0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801dbe2:	4b0b      	ldr	r3, [pc, #44]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbe4:	2200      	movs	r2, #0
 801dbe6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801dbe8:	4b09      	ldr	r3, [pc, #36]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbea:	220c      	movs	r2, #12
 801dbec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801dbee:	4b08      	ldr	r3, [pc, #32]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801dbf4:	4b06      	ldr	r3, [pc, #24]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbf6:	2200      	movs	r2, #0
 801dbf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801dbfa:	4805      	ldr	r0, [pc, #20]	; (801dc10 <MX_USART6_UART_Init+0x4c>)
 801dbfc:	f003 fa4a 	bl	8021094 <HAL_UART_Init>
 801dc00:	4603      	mov	r3, r0
 801dc02:	2b00      	cmp	r3, #0
 801dc04:	d001      	beq.n	801dc0a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 801dc06:	f7ff fcc3 	bl	801d590 <Error_Handler>
  }

}
 801dc0a:	bf00      	nop
 801dc0c:	bd80      	pop	{r7, pc}
 801dc0e:	bf00      	nop
 801dc10:	20005478 	.word	0x20005478
 801dc14:	40011400 	.word	0x40011400

0801dc18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801dc18:	b580      	push	{r7, lr}
 801dc1a:	b08c      	sub	sp, #48	; 0x30
 801dc1c:	af00      	add	r7, sp, #0
 801dc1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dc20:	f107 031c 	add.w	r3, r7, #28
 801dc24:	2200      	movs	r2, #0
 801dc26:	601a      	str	r2, [r3, #0]
 801dc28:	605a      	str	r2, [r3, #4]
 801dc2a:	609a      	str	r2, [r3, #8]
 801dc2c:	60da      	str	r2, [r3, #12]
 801dc2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801dc30:	687b      	ldr	r3, [r7, #4]
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	4a45      	ldr	r2, [pc, #276]	; (801dd4c <HAL_UART_MspInit+0x134>)
 801dc36:	4293      	cmp	r3, r2
 801dc38:	d12c      	bne.n	801dc94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	61bb      	str	r3, [r7, #24]
 801dc3e:	4b44      	ldr	r3, [pc, #272]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc42:	4a43      	ldr	r2, [pc, #268]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801dc48:	6413      	str	r3, [r2, #64]	; 0x40
 801dc4a:	4b41      	ldr	r3, [pc, #260]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dc52:	61bb      	str	r3, [r7, #24]
 801dc54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dc56:	2300      	movs	r3, #0
 801dc58:	617b      	str	r3, [r7, #20]
 801dc5a:	4b3d      	ldr	r3, [pc, #244]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc5e:	4a3c      	ldr	r2, [pc, #240]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc60:	f043 0301 	orr.w	r3, r3, #1
 801dc64:	6313      	str	r3, [r2, #48]	; 0x30
 801dc66:	4b3a      	ldr	r3, [pc, #232]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dc6a:	f003 0301 	and.w	r3, r3, #1
 801dc6e:	617b      	str	r3, [r7, #20]
 801dc70:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801dc72:	230c      	movs	r3, #12
 801dc74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dc76:	2302      	movs	r3, #2
 801dc78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dc7e:	2300      	movs	r3, #0
 801dc80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801dc82:	2307      	movs	r3, #7
 801dc84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dc86:	f107 031c 	add.w	r3, r7, #28
 801dc8a:	4619      	mov	r1, r3
 801dc8c:	4831      	ldr	r0, [pc, #196]	; (801dd54 <HAL_UART_MspInit+0x13c>)
 801dc8e:	f000 fdc7 	bl	801e820 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801dc92:	e057      	b.n	801dd44 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART6)
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	681b      	ldr	r3, [r3, #0]
 801dc98:	4a2f      	ldr	r2, [pc, #188]	; (801dd58 <HAL_UART_MspInit+0x140>)
 801dc9a:	4293      	cmp	r3, r2
 801dc9c:	d152      	bne.n	801dd44 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 801dc9e:	2300      	movs	r3, #0
 801dca0:	613b      	str	r3, [r7, #16]
 801dca2:	4b2b      	ldr	r3, [pc, #172]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dca6:	4a2a      	ldr	r2, [pc, #168]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dca8:	f043 0320 	orr.w	r3, r3, #32
 801dcac:	6453      	str	r3, [r2, #68]	; 0x44
 801dcae:	4b28      	ldr	r3, [pc, #160]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dcb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dcb2:	f003 0320 	and.w	r3, r3, #32
 801dcb6:	613b      	str	r3, [r7, #16]
 801dcb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801dcba:	2300      	movs	r3, #0
 801dcbc:	60fb      	str	r3, [r7, #12]
 801dcbe:	4b24      	ldr	r3, [pc, #144]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcc2:	4a23      	ldr	r2, [pc, #140]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dcc4:	f043 0304 	orr.w	r3, r3, #4
 801dcc8:	6313      	str	r3, [r2, #48]	; 0x30
 801dcca:	4b21      	ldr	r3, [pc, #132]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcce:	f003 0304 	and.w	r3, r3, #4
 801dcd2:	60fb      	str	r3, [r7, #12]
 801dcd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dcd6:	2300      	movs	r3, #0
 801dcd8:	60bb      	str	r3, [r7, #8]
 801dcda:	4b1d      	ldr	r3, [pc, #116]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dcdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcde:	4a1c      	ldr	r2, [pc, #112]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dce0:	f043 0301 	orr.w	r3, r3, #1
 801dce4:	6313      	str	r3, [r2, #48]	; 0x30
 801dce6:	4b1a      	ldr	r3, [pc, #104]	; (801dd50 <HAL_UART_MspInit+0x138>)
 801dce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dcea:	f003 0301 	and.w	r3, r3, #1
 801dcee:	60bb      	str	r3, [r7, #8]
 801dcf0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801dcf2:	2340      	movs	r3, #64	; 0x40
 801dcf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dcf6:	2302      	movs	r3, #2
 801dcf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dcfe:	2303      	movs	r3, #3
 801dd00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801dd02:	2308      	movs	r3, #8
 801dd04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801dd06:	f107 031c 	add.w	r3, r7, #28
 801dd0a:	4619      	mov	r1, r3
 801dd0c:	4813      	ldr	r0, [pc, #76]	; (801dd5c <HAL_UART_MspInit+0x144>)
 801dd0e:	f000 fd87 	bl	801e820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801dd12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dd16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dd18:	2302      	movs	r3, #2
 801dd1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dd1c:	2300      	movs	r3, #0
 801dd1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dd20:	2303      	movs	r3, #3
 801dd22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801dd24:	2308      	movs	r3, #8
 801dd26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dd28:	f107 031c 	add.w	r3, r7, #28
 801dd2c:	4619      	mov	r1, r3
 801dd2e:	4809      	ldr	r0, [pc, #36]	; (801dd54 <HAL_UART_MspInit+0x13c>)
 801dd30:	f000 fd76 	bl	801e820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801dd34:	2200      	movs	r2, #0
 801dd36:	2100      	movs	r1, #0
 801dd38:	2047      	movs	r0, #71	; 0x47
 801dd3a:	f000 f9aa 	bl	801e092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801dd3e:	2047      	movs	r0, #71	; 0x47
 801dd40:	f000 f9c3 	bl	801e0ca <HAL_NVIC_EnableIRQ>
}
 801dd44:	bf00      	nop
 801dd46:	3730      	adds	r7, #48	; 0x30
 801dd48:	46bd      	mov	sp, r7
 801dd4a:	bd80      	pop	{r7, pc}
 801dd4c:	40004400 	.word	0x40004400
 801dd50:	40023800 	.word	0x40023800
 801dd54:	40020000 	.word	0x40020000
 801dd58:	40011400 	.word	0x40011400
 801dd5c:	40020800 	.word	0x40020800

0801dd60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801dd60:	f8df d034 	ldr.w	sp, [pc, #52]	; 801dd98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801dd64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801dd66:	e003      	b.n	801dd70 <LoopCopyDataInit>

0801dd68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801dd68:	4b0c      	ldr	r3, [pc, #48]	; (801dd9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801dd6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801dd6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801dd6e:	3104      	adds	r1, #4

0801dd70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801dd70:	480b      	ldr	r0, [pc, #44]	; (801dda0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801dd72:	4b0c      	ldr	r3, [pc, #48]	; (801dda4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801dd74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801dd76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801dd78:	d3f6      	bcc.n	801dd68 <CopyDataInit>
  ldr  r2, =_sbss
 801dd7a:	4a0b      	ldr	r2, [pc, #44]	; (801dda8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801dd7c:	e002      	b.n	801dd84 <LoopFillZerobss>

0801dd7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801dd7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801dd80:	f842 3b04 	str.w	r3, [r2], #4

0801dd84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801dd84:	4b09      	ldr	r3, [pc, #36]	; (801ddac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801dd86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801dd88:	d3f9      	bcc.n	801dd7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801dd8a:	f7ff fce7 	bl	801d75c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801dd8e:	f004 f919 	bl	8021fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801dd92:	f7ff fa9d 	bl	801d2d0 <main>
  bx  lr    
 801dd96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801dd98:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 801dd9c:	0802d358 	.word	0x0802d358
  ldr  r0, =_sdata
 801dda0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801dda4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 801dda8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801ddac:	20005500 	.word	0x20005500

0801ddb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801ddb0:	e7fe      	b.n	801ddb0 <ADC_IRQHandler>
	...

0801ddb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801ddb8:	4b0e      	ldr	r3, [pc, #56]	; (801ddf4 <HAL_Init+0x40>)
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	4a0d      	ldr	r2, [pc, #52]	; (801ddf4 <HAL_Init+0x40>)
 801ddbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ddc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801ddc4:	4b0b      	ldr	r3, [pc, #44]	; (801ddf4 <HAL_Init+0x40>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	4a0a      	ldr	r2, [pc, #40]	; (801ddf4 <HAL_Init+0x40>)
 801ddca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ddce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801ddd0:	4b08      	ldr	r3, [pc, #32]	; (801ddf4 <HAL_Init+0x40>)
 801ddd2:	681b      	ldr	r3, [r3, #0]
 801ddd4:	4a07      	ldr	r2, [pc, #28]	; (801ddf4 <HAL_Init+0x40>)
 801ddd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ddda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801dddc:	2003      	movs	r0, #3
 801ddde:	f000 f94d 	bl	801e07c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801dde2:	2000      	movs	r0, #0
 801dde4:	f000 f808 	bl	801ddf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801dde8:	f7ff fbd6 	bl	801d598 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801ddec:	2300      	movs	r3, #0
}
 801ddee:	4618      	mov	r0, r3
 801ddf0:	bd80      	pop	{r7, pc}
 801ddf2:	bf00      	nop
 801ddf4:	40023c00 	.word	0x40023c00

0801ddf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b082      	sub	sp, #8
 801ddfc:	af00      	add	r7, sp, #0
 801ddfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801de00:	4b12      	ldr	r3, [pc, #72]	; (801de4c <HAL_InitTick+0x54>)
 801de02:	681a      	ldr	r2, [r3, #0]
 801de04:	4b12      	ldr	r3, [pc, #72]	; (801de50 <HAL_InitTick+0x58>)
 801de06:	781b      	ldrb	r3, [r3, #0]
 801de08:	4619      	mov	r1, r3
 801de0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801de0e:	fbb3 f3f1 	udiv	r3, r3, r1
 801de12:	fbb2 f3f3 	udiv	r3, r2, r3
 801de16:	4618      	mov	r0, r3
 801de18:	f000 f965 	bl	801e0e6 <HAL_SYSTICK_Config>
 801de1c:	4603      	mov	r3, r0
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d001      	beq.n	801de26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801de22:	2301      	movs	r3, #1
 801de24:	e00e      	b.n	801de44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801de26:	687b      	ldr	r3, [r7, #4]
 801de28:	2b0f      	cmp	r3, #15
 801de2a:	d80a      	bhi.n	801de42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801de2c:	2200      	movs	r2, #0
 801de2e:	6879      	ldr	r1, [r7, #4]
 801de30:	f04f 30ff 	mov.w	r0, #4294967295
 801de34:	f000 f92d 	bl	801e092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801de38:	4a06      	ldr	r2, [pc, #24]	; (801de54 <HAL_InitTick+0x5c>)
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801de3e:	2300      	movs	r3, #0
 801de40:	e000      	b.n	801de44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801de42:	2301      	movs	r3, #1
}
 801de44:	4618      	mov	r0, r3
 801de46:	3708      	adds	r7, #8
 801de48:	46bd      	mov	sp, r7
 801de4a:	bd80      	pop	{r7, pc}
 801de4c:	20000000 	.word	0x20000000
 801de50:	20000008 	.word	0x20000008
 801de54:	20000004 	.word	0x20000004

0801de58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801de58:	b480      	push	{r7}
 801de5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801de5c:	4b06      	ldr	r3, [pc, #24]	; (801de78 <HAL_IncTick+0x20>)
 801de5e:	781b      	ldrb	r3, [r3, #0]
 801de60:	461a      	mov	r2, r3
 801de62:	4b06      	ldr	r3, [pc, #24]	; (801de7c <HAL_IncTick+0x24>)
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	4413      	add	r3, r2
 801de68:	4a04      	ldr	r2, [pc, #16]	; (801de7c <HAL_IncTick+0x24>)
 801de6a:	6013      	str	r3, [r2, #0]
}
 801de6c:	bf00      	nop
 801de6e:	46bd      	mov	sp, r7
 801de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de74:	4770      	bx	lr
 801de76:	bf00      	nop
 801de78:	20000008 	.word	0x20000008
 801de7c:	200054f8 	.word	0x200054f8

0801de80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801de80:	b480      	push	{r7}
 801de82:	af00      	add	r7, sp, #0
  return uwTick;
 801de84:	4b03      	ldr	r3, [pc, #12]	; (801de94 <HAL_GetTick+0x14>)
 801de86:	681b      	ldr	r3, [r3, #0]
}
 801de88:	4618      	mov	r0, r3
 801de8a:	46bd      	mov	sp, r7
 801de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de90:	4770      	bx	lr
 801de92:	bf00      	nop
 801de94:	200054f8 	.word	0x200054f8

0801de98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b084      	sub	sp, #16
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801dea0:	f7ff ffee 	bl	801de80 <HAL_GetTick>
 801dea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801dea6:	687b      	ldr	r3, [r7, #4]
 801dea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	f1b3 3fff 	cmp.w	r3, #4294967295
 801deb0:	d005      	beq.n	801debe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801deb2:	4b09      	ldr	r3, [pc, #36]	; (801ded8 <HAL_Delay+0x40>)
 801deb4:	781b      	ldrb	r3, [r3, #0]
 801deb6:	461a      	mov	r2, r3
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	4413      	add	r3, r2
 801debc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801debe:	bf00      	nop
 801dec0:	f7ff ffde 	bl	801de80 <HAL_GetTick>
 801dec4:	4602      	mov	r2, r0
 801dec6:	68bb      	ldr	r3, [r7, #8]
 801dec8:	1ad3      	subs	r3, r2, r3
 801deca:	68fa      	ldr	r2, [r7, #12]
 801decc:	429a      	cmp	r2, r3
 801dece:	d8f7      	bhi.n	801dec0 <HAL_Delay+0x28>
  {
  }
}
 801ded0:	bf00      	nop
 801ded2:	3710      	adds	r7, #16
 801ded4:	46bd      	mov	sp, r7
 801ded6:	bd80      	pop	{r7, pc}
 801ded8:	20000008 	.word	0x20000008

0801dedc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801dedc:	b480      	push	{r7}
 801dede:	b085      	sub	sp, #20
 801dee0:	af00      	add	r7, sp, #0
 801dee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	f003 0307 	and.w	r3, r3, #7
 801deea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801deec:	4b0c      	ldr	r3, [pc, #48]	; (801df20 <__NVIC_SetPriorityGrouping+0x44>)
 801deee:	68db      	ldr	r3, [r3, #12]
 801def0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801def2:	68ba      	ldr	r2, [r7, #8]
 801def4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801def8:	4013      	ands	r3, r2
 801defa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801df00:	68bb      	ldr	r3, [r7, #8]
 801df02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801df04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801df08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801df0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801df0e:	4a04      	ldr	r2, [pc, #16]	; (801df20 <__NVIC_SetPriorityGrouping+0x44>)
 801df10:	68bb      	ldr	r3, [r7, #8]
 801df12:	60d3      	str	r3, [r2, #12]
}
 801df14:	bf00      	nop
 801df16:	3714      	adds	r7, #20
 801df18:	46bd      	mov	sp, r7
 801df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df1e:	4770      	bx	lr
 801df20:	e000ed00 	.word	0xe000ed00

0801df24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801df24:	b480      	push	{r7}
 801df26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801df28:	4b04      	ldr	r3, [pc, #16]	; (801df3c <__NVIC_GetPriorityGrouping+0x18>)
 801df2a:	68db      	ldr	r3, [r3, #12]
 801df2c:	0a1b      	lsrs	r3, r3, #8
 801df2e:	f003 0307 	and.w	r3, r3, #7
}
 801df32:	4618      	mov	r0, r3
 801df34:	46bd      	mov	sp, r7
 801df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df3a:	4770      	bx	lr
 801df3c:	e000ed00 	.word	0xe000ed00

0801df40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801df40:	b480      	push	{r7}
 801df42:	b083      	sub	sp, #12
 801df44:	af00      	add	r7, sp, #0
 801df46:	4603      	mov	r3, r0
 801df48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801df4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df4e:	2b00      	cmp	r3, #0
 801df50:	db0b      	blt.n	801df6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801df52:	79fb      	ldrb	r3, [r7, #7]
 801df54:	f003 021f 	and.w	r2, r3, #31
 801df58:	4907      	ldr	r1, [pc, #28]	; (801df78 <__NVIC_EnableIRQ+0x38>)
 801df5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df5e:	095b      	lsrs	r3, r3, #5
 801df60:	2001      	movs	r0, #1
 801df62:	fa00 f202 	lsl.w	r2, r0, r2
 801df66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801df6a:	bf00      	nop
 801df6c:	370c      	adds	r7, #12
 801df6e:	46bd      	mov	sp, r7
 801df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df74:	4770      	bx	lr
 801df76:	bf00      	nop
 801df78:	e000e100 	.word	0xe000e100

0801df7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801df7c:	b480      	push	{r7}
 801df7e:	b083      	sub	sp, #12
 801df80:	af00      	add	r7, sp, #0
 801df82:	4603      	mov	r3, r0
 801df84:	6039      	str	r1, [r7, #0]
 801df86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801df88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	db0a      	blt.n	801dfa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801df90:	683b      	ldr	r3, [r7, #0]
 801df92:	b2da      	uxtb	r2, r3
 801df94:	490c      	ldr	r1, [pc, #48]	; (801dfc8 <__NVIC_SetPriority+0x4c>)
 801df96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df9a:	0112      	lsls	r2, r2, #4
 801df9c:	b2d2      	uxtb	r2, r2
 801df9e:	440b      	add	r3, r1
 801dfa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801dfa4:	e00a      	b.n	801dfbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	b2da      	uxtb	r2, r3
 801dfaa:	4908      	ldr	r1, [pc, #32]	; (801dfcc <__NVIC_SetPriority+0x50>)
 801dfac:	79fb      	ldrb	r3, [r7, #7]
 801dfae:	f003 030f 	and.w	r3, r3, #15
 801dfb2:	3b04      	subs	r3, #4
 801dfb4:	0112      	lsls	r2, r2, #4
 801dfb6:	b2d2      	uxtb	r2, r2
 801dfb8:	440b      	add	r3, r1
 801dfba:	761a      	strb	r2, [r3, #24]
}
 801dfbc:	bf00      	nop
 801dfbe:	370c      	adds	r7, #12
 801dfc0:	46bd      	mov	sp, r7
 801dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfc6:	4770      	bx	lr
 801dfc8:	e000e100 	.word	0xe000e100
 801dfcc:	e000ed00 	.word	0xe000ed00

0801dfd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801dfd0:	b480      	push	{r7}
 801dfd2:	b089      	sub	sp, #36	; 0x24
 801dfd4:	af00      	add	r7, sp, #0
 801dfd6:	60f8      	str	r0, [r7, #12]
 801dfd8:	60b9      	str	r1, [r7, #8]
 801dfda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	f003 0307 	and.w	r3, r3, #7
 801dfe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801dfe4:	69fb      	ldr	r3, [r7, #28]
 801dfe6:	f1c3 0307 	rsb	r3, r3, #7
 801dfea:	2b04      	cmp	r3, #4
 801dfec:	bf28      	it	cs
 801dfee:	2304      	movcs	r3, #4
 801dff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801dff2:	69fb      	ldr	r3, [r7, #28]
 801dff4:	3304      	adds	r3, #4
 801dff6:	2b06      	cmp	r3, #6
 801dff8:	d902      	bls.n	801e000 <NVIC_EncodePriority+0x30>
 801dffa:	69fb      	ldr	r3, [r7, #28]
 801dffc:	3b03      	subs	r3, #3
 801dffe:	e000      	b.n	801e002 <NVIC_EncodePriority+0x32>
 801e000:	2300      	movs	r3, #0
 801e002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e004:	f04f 32ff 	mov.w	r2, #4294967295
 801e008:	69bb      	ldr	r3, [r7, #24]
 801e00a:	fa02 f303 	lsl.w	r3, r2, r3
 801e00e:	43da      	mvns	r2, r3
 801e010:	68bb      	ldr	r3, [r7, #8]
 801e012:	401a      	ands	r2, r3
 801e014:	697b      	ldr	r3, [r7, #20]
 801e016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801e018:	f04f 31ff 	mov.w	r1, #4294967295
 801e01c:	697b      	ldr	r3, [r7, #20]
 801e01e:	fa01 f303 	lsl.w	r3, r1, r3
 801e022:	43d9      	mvns	r1, r3
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801e028:	4313      	orrs	r3, r2
         );
}
 801e02a:	4618      	mov	r0, r3
 801e02c:	3724      	adds	r7, #36	; 0x24
 801e02e:	46bd      	mov	sp, r7
 801e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e034:	4770      	bx	lr
	...

0801e038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801e038:	b580      	push	{r7, lr}
 801e03a:	b082      	sub	sp, #8
 801e03c:	af00      	add	r7, sp, #0
 801e03e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	3b01      	subs	r3, #1
 801e044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801e048:	d301      	bcc.n	801e04e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801e04a:	2301      	movs	r3, #1
 801e04c:	e00f      	b.n	801e06e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801e04e:	4a0a      	ldr	r2, [pc, #40]	; (801e078 <SysTick_Config+0x40>)
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	3b01      	subs	r3, #1
 801e054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801e056:	210f      	movs	r1, #15
 801e058:	f04f 30ff 	mov.w	r0, #4294967295
 801e05c:	f7ff ff8e 	bl	801df7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801e060:	4b05      	ldr	r3, [pc, #20]	; (801e078 <SysTick_Config+0x40>)
 801e062:	2200      	movs	r2, #0
 801e064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801e066:	4b04      	ldr	r3, [pc, #16]	; (801e078 <SysTick_Config+0x40>)
 801e068:	2207      	movs	r2, #7
 801e06a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801e06c:	2300      	movs	r3, #0
}
 801e06e:	4618      	mov	r0, r3
 801e070:	3708      	adds	r7, #8
 801e072:	46bd      	mov	sp, r7
 801e074:	bd80      	pop	{r7, pc}
 801e076:	bf00      	nop
 801e078:	e000e010 	.word	0xe000e010

0801e07c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b082      	sub	sp, #8
 801e080:	af00      	add	r7, sp, #0
 801e082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801e084:	6878      	ldr	r0, [r7, #4]
 801e086:	f7ff ff29 	bl	801dedc <__NVIC_SetPriorityGrouping>
}
 801e08a:	bf00      	nop
 801e08c:	3708      	adds	r7, #8
 801e08e:	46bd      	mov	sp, r7
 801e090:	bd80      	pop	{r7, pc}

0801e092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801e092:	b580      	push	{r7, lr}
 801e094:	b086      	sub	sp, #24
 801e096:	af00      	add	r7, sp, #0
 801e098:	4603      	mov	r3, r0
 801e09a:	60b9      	str	r1, [r7, #8]
 801e09c:	607a      	str	r2, [r7, #4]
 801e09e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801e0a0:	2300      	movs	r3, #0
 801e0a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801e0a4:	f7ff ff3e 	bl	801df24 <__NVIC_GetPriorityGrouping>
 801e0a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801e0aa:	687a      	ldr	r2, [r7, #4]
 801e0ac:	68b9      	ldr	r1, [r7, #8]
 801e0ae:	6978      	ldr	r0, [r7, #20]
 801e0b0:	f7ff ff8e 	bl	801dfd0 <NVIC_EncodePriority>
 801e0b4:	4602      	mov	r2, r0
 801e0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e0ba:	4611      	mov	r1, r2
 801e0bc:	4618      	mov	r0, r3
 801e0be:	f7ff ff5d 	bl	801df7c <__NVIC_SetPriority>
}
 801e0c2:	bf00      	nop
 801e0c4:	3718      	adds	r7, #24
 801e0c6:	46bd      	mov	sp, r7
 801e0c8:	bd80      	pop	{r7, pc}

0801e0ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801e0ca:	b580      	push	{r7, lr}
 801e0cc:	b082      	sub	sp, #8
 801e0ce:	af00      	add	r7, sp, #0
 801e0d0:	4603      	mov	r3, r0
 801e0d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801e0d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f7ff ff31 	bl	801df40 <__NVIC_EnableIRQ>
}
 801e0de:	bf00      	nop
 801e0e0:	3708      	adds	r7, #8
 801e0e2:	46bd      	mov	sp, r7
 801e0e4:	bd80      	pop	{r7, pc}

0801e0e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801e0e6:	b580      	push	{r7, lr}
 801e0e8:	b082      	sub	sp, #8
 801e0ea:	af00      	add	r7, sp, #0
 801e0ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801e0ee:	6878      	ldr	r0, [r7, #4]
 801e0f0:	f7ff ffa2 	bl	801e038 <SysTick_Config>
 801e0f4:	4603      	mov	r3, r0
}
 801e0f6:	4618      	mov	r0, r3
 801e0f8:	3708      	adds	r7, #8
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	bd80      	pop	{r7, pc}
	...

0801e100 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801e100:	b580      	push	{r7, lr}
 801e102:	b086      	sub	sp, #24
 801e104:	af00      	add	r7, sp, #0
 801e106:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801e108:	2300      	movs	r3, #0
 801e10a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801e10c:	f7ff feb8 	bl	801de80 <HAL_GetTick>
 801e110:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801e112:	687b      	ldr	r3, [r7, #4]
 801e114:	2b00      	cmp	r3, #0
 801e116:	d101      	bne.n	801e11c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801e118:	2301      	movs	r3, #1
 801e11a:	e099      	b.n	801e250 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	2200      	movs	r2, #0
 801e120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801e124:	687b      	ldr	r3, [r7, #4]
 801e126:	2202      	movs	r2, #2
 801e128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	681a      	ldr	r2, [r3, #0]
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	f022 0201 	bic.w	r2, r2, #1
 801e13a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e13c:	e00f      	b.n	801e15e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801e13e:	f7ff fe9f 	bl	801de80 <HAL_GetTick>
 801e142:	4602      	mov	r2, r0
 801e144:	693b      	ldr	r3, [r7, #16]
 801e146:	1ad3      	subs	r3, r2, r3
 801e148:	2b05      	cmp	r3, #5
 801e14a:	d908      	bls.n	801e15e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	2220      	movs	r2, #32
 801e150:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	2203      	movs	r2, #3
 801e156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801e15a:	2303      	movs	r3, #3
 801e15c:	e078      	b.n	801e250 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	f003 0301 	and.w	r3, r3, #1
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d1e8      	bne.n	801e13e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801e174:	697a      	ldr	r2, [r7, #20]
 801e176:	4b38      	ldr	r3, [pc, #224]	; (801e258 <HAL_DMA_Init+0x158>)
 801e178:	4013      	ands	r3, r2
 801e17a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	685a      	ldr	r2, [r3, #4]
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	689b      	ldr	r3, [r3, #8]
 801e184:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e18a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	691b      	ldr	r3, [r3, #16]
 801e190:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e196:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	699b      	ldr	r3, [r3, #24]
 801e19c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e1a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	6a1b      	ldr	r3, [r3, #32]
 801e1a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e1aa:	697a      	ldr	r2, [r7, #20]
 801e1ac:	4313      	orrs	r3, r2
 801e1ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1b4:	2b04      	cmp	r3, #4
 801e1b6:	d107      	bne.n	801e1c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1c0:	4313      	orrs	r3, r2
 801e1c2:	697a      	ldr	r2, [r7, #20]
 801e1c4:	4313      	orrs	r3, r2
 801e1c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	681b      	ldr	r3, [r3, #0]
 801e1cc:	697a      	ldr	r2, [r7, #20]
 801e1ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	695b      	ldr	r3, [r3, #20]
 801e1d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801e1d8:	697b      	ldr	r3, [r7, #20]
 801e1da:	f023 0307 	bic.w	r3, r3, #7
 801e1de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1e4:	697a      	ldr	r2, [r7, #20]
 801e1e6:	4313      	orrs	r3, r2
 801e1e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1ee:	2b04      	cmp	r3, #4
 801e1f0:	d117      	bne.n	801e222 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801e1f2:	687b      	ldr	r3, [r7, #4]
 801e1f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1f6:	697a      	ldr	r2, [r7, #20]
 801e1f8:	4313      	orrs	r3, r2
 801e1fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e200:	2b00      	cmp	r3, #0
 801e202:	d00e      	beq.n	801e222 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f000 fa91 	bl	801e72c <DMA_CheckFifoParam>
 801e20a:	4603      	mov	r3, r0
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d008      	beq.n	801e222 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	2240      	movs	r2, #64	; 0x40
 801e214:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	2201      	movs	r2, #1
 801e21a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801e21e:	2301      	movs	r3, #1
 801e220:	e016      	b.n	801e250 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	681b      	ldr	r3, [r3, #0]
 801e226:	697a      	ldr	r2, [r7, #20]
 801e228:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e22a:	6878      	ldr	r0, [r7, #4]
 801e22c:	f000 fa48 	bl	801e6c0 <DMA_CalcBaseAndBitshift>
 801e230:	4603      	mov	r3, r0
 801e232:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e238:	223f      	movs	r2, #63	; 0x3f
 801e23a:	409a      	lsls	r2, r3
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	2200      	movs	r2, #0
 801e244:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	2201      	movs	r2, #1
 801e24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801e24e:	2300      	movs	r3, #0
}
 801e250:	4618      	mov	r0, r3
 801e252:	3718      	adds	r7, #24
 801e254:	46bd      	mov	sp, r7
 801e256:	bd80      	pop	{r7, pc}
 801e258:	f010803f 	.word	0xf010803f

0801e25c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b086      	sub	sp, #24
 801e260:	af00      	add	r7, sp, #0
 801e262:	60f8      	str	r0, [r7, #12]
 801e264:	60b9      	str	r1, [r7, #8]
 801e266:	607a      	str	r2, [r7, #4]
 801e268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e26a:	2300      	movs	r3, #0
 801e26c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e272:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e27a:	2b01      	cmp	r3, #1
 801e27c:	d101      	bne.n	801e282 <HAL_DMA_Start_IT+0x26>
 801e27e:	2302      	movs	r3, #2
 801e280:	e040      	b.n	801e304 <HAL_DMA_Start_IT+0xa8>
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	2201      	movs	r2, #1
 801e286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e290:	b2db      	uxtb	r3, r3
 801e292:	2b01      	cmp	r3, #1
 801e294:	d12f      	bne.n	801e2f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e296:	68fb      	ldr	r3, [r7, #12]
 801e298:	2202      	movs	r2, #2
 801e29a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e29e:	68fb      	ldr	r3, [r7, #12]
 801e2a0:	2200      	movs	r2, #0
 801e2a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e2a4:	683b      	ldr	r3, [r7, #0]
 801e2a6:	687a      	ldr	r2, [r7, #4]
 801e2a8:	68b9      	ldr	r1, [r7, #8]
 801e2aa:	68f8      	ldr	r0, [r7, #12]
 801e2ac:	f000 f9da 	bl	801e664 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2b4:	223f      	movs	r2, #63	; 0x3f
 801e2b6:	409a      	lsls	r2, r3
 801e2b8:	693b      	ldr	r3, [r7, #16]
 801e2ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	681a      	ldr	r2, [r3, #0]
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	f042 0216 	orr.w	r2, r2, #22
 801e2ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e2cc:	68fb      	ldr	r3, [r7, #12]
 801e2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d007      	beq.n	801e2e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e2d4:	68fb      	ldr	r3, [r7, #12]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	681a      	ldr	r2, [r3, #0]
 801e2da:	68fb      	ldr	r3, [r7, #12]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	f042 0208 	orr.w	r2, r2, #8
 801e2e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	681a      	ldr	r2, [r3, #0]
 801e2ea:	68fb      	ldr	r3, [r7, #12]
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	f042 0201 	orr.w	r2, r2, #1
 801e2f2:	601a      	str	r2, [r3, #0]
 801e2f4:	e005      	b.n	801e302 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e2f6:	68fb      	ldr	r3, [r7, #12]
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e2fe:	2302      	movs	r3, #2
 801e300:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e302:	7dfb      	ldrb	r3, [r7, #23]
}
 801e304:	4618      	mov	r0, r3
 801e306:	3718      	adds	r7, #24
 801e308:	46bd      	mov	sp, r7
 801e30a:	bd80      	pop	{r7, pc}

0801e30c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e30c:	b480      	push	{r7}
 801e30e:	b083      	sub	sp, #12
 801e310:	af00      	add	r7, sp, #0
 801e312:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e314:	687b      	ldr	r3, [r7, #4]
 801e316:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e31a:	b2db      	uxtb	r3, r3
 801e31c:	2b02      	cmp	r3, #2
 801e31e:	d004      	beq.n	801e32a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	2280      	movs	r2, #128	; 0x80
 801e324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e326:	2301      	movs	r3, #1
 801e328:	e00c      	b.n	801e344 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e32a:	687b      	ldr	r3, [r7, #4]
 801e32c:	2205      	movs	r2, #5
 801e32e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e332:	687b      	ldr	r3, [r7, #4]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	681a      	ldr	r2, [r3, #0]
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	f022 0201 	bic.w	r2, r2, #1
 801e340:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e342:	2300      	movs	r3, #0
}
 801e344:	4618      	mov	r0, r3
 801e346:	370c      	adds	r7, #12
 801e348:	46bd      	mov	sp, r7
 801e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e34e:	4770      	bx	lr

0801e350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e350:	b580      	push	{r7, lr}
 801e352:	b086      	sub	sp, #24
 801e354:	af00      	add	r7, sp, #0
 801e356:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e358:	2300      	movs	r3, #0
 801e35a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e35c:	4b92      	ldr	r3, [pc, #584]	; (801e5a8 <HAL_DMA_IRQHandler+0x258>)
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	4a92      	ldr	r2, [pc, #584]	; (801e5ac <HAL_DMA_IRQHandler+0x25c>)
 801e362:	fba2 2303 	umull	r2, r3, r2, r3
 801e366:	0a9b      	lsrs	r3, r3, #10
 801e368:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e36e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e370:	693b      	ldr	r3, [r7, #16]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e37a:	2208      	movs	r2, #8
 801e37c:	409a      	lsls	r2, r3
 801e37e:	68fb      	ldr	r3, [r7, #12]
 801e380:	4013      	ands	r3, r2
 801e382:	2b00      	cmp	r3, #0
 801e384:	d01a      	beq.n	801e3bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	681b      	ldr	r3, [r3, #0]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	f003 0304 	and.w	r3, r3, #4
 801e390:	2b00      	cmp	r3, #0
 801e392:	d013      	beq.n	801e3bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	681a      	ldr	r2, [r3, #0]
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	681b      	ldr	r3, [r3, #0]
 801e39e:	f022 0204 	bic.w	r2, r2, #4
 801e3a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3a8:	2208      	movs	r2, #8
 801e3aa:	409a      	lsls	r2, r3
 801e3ac:	693b      	ldr	r3, [r7, #16]
 801e3ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e3b4:	f043 0201 	orr.w	r2, r3, #1
 801e3b8:	687b      	ldr	r3, [r7, #4]
 801e3ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3c0:	2201      	movs	r2, #1
 801e3c2:	409a      	lsls	r2, r3
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	4013      	ands	r3, r2
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d012      	beq.n	801e3f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	695b      	ldr	r3, [r3, #20]
 801e3d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d00b      	beq.n	801e3f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3de:	2201      	movs	r2, #1
 801e3e0:	409a      	lsls	r2, r3
 801e3e2:	693b      	ldr	r3, [r7, #16]
 801e3e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e3ea:	f043 0202 	orr.w	r2, r3, #2
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3f6:	2204      	movs	r2, #4
 801e3f8:	409a      	lsls	r2, r3
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	4013      	ands	r3, r2
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d012      	beq.n	801e428 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	f003 0302 	and.w	r3, r3, #2
 801e40c:	2b00      	cmp	r3, #0
 801e40e:	d00b      	beq.n	801e428 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e414:	2204      	movs	r2, #4
 801e416:	409a      	lsls	r2, r3
 801e418:	693b      	ldr	r3, [r7, #16]
 801e41a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e41c:	687b      	ldr	r3, [r7, #4]
 801e41e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e420:	f043 0204 	orr.w	r2, r3, #4
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e42c:	2210      	movs	r2, #16
 801e42e:	409a      	lsls	r2, r3
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	4013      	ands	r3, r2
 801e434:	2b00      	cmp	r3, #0
 801e436:	d043      	beq.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	681b      	ldr	r3, [r3, #0]
 801e43e:	f003 0308 	and.w	r3, r3, #8
 801e442:	2b00      	cmp	r3, #0
 801e444:	d03c      	beq.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e44a:	2210      	movs	r2, #16
 801e44c:	409a      	lsls	r2, r3
 801e44e:	693b      	ldr	r3, [r7, #16]
 801e450:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d018      	beq.n	801e492 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	d108      	bne.n	801e480 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e472:	2b00      	cmp	r3, #0
 801e474:	d024      	beq.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e47a:	6878      	ldr	r0, [r7, #4]
 801e47c:	4798      	blx	r3
 801e47e:	e01f      	b.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e484:	2b00      	cmp	r3, #0
 801e486:	d01b      	beq.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e48c:	6878      	ldr	r0, [r7, #4]
 801e48e:	4798      	blx	r3
 801e490:	e016      	b.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d107      	bne.n	801e4b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	681a      	ldr	r2, [r3, #0]
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	681b      	ldr	r3, [r3, #0]
 801e4aa:	f022 0208 	bic.w	r2, r2, #8
 801e4ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	d003      	beq.n	801e4c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e4bc:	6878      	ldr	r0, [r7, #4]
 801e4be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e4c4:	2220      	movs	r2, #32
 801e4c6:	409a      	lsls	r2, r3
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	4013      	ands	r3, r2
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	f000 808e 	beq.w	801e5ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	f003 0310 	and.w	r3, r3, #16
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	f000 8086 	beq.w	801e5ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e4e6:	2220      	movs	r2, #32
 801e4e8:	409a      	lsls	r2, r3
 801e4ea:	693b      	ldr	r3, [r7, #16]
 801e4ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e4ee:	687b      	ldr	r3, [r7, #4]
 801e4f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e4f4:	b2db      	uxtb	r3, r3
 801e4f6:	2b05      	cmp	r3, #5
 801e4f8:	d136      	bne.n	801e568 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	681b      	ldr	r3, [r3, #0]
 801e4fe:	681a      	ldr	r2, [r3, #0]
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	f022 0216 	bic.w	r2, r2, #22
 801e508:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	695a      	ldr	r2, [r3, #20]
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e518:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e51e:	2b00      	cmp	r3, #0
 801e520:	d103      	bne.n	801e52a <HAL_DMA_IRQHandler+0x1da>
 801e522:	687b      	ldr	r3, [r7, #4]
 801e524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e526:	2b00      	cmp	r3, #0
 801e528:	d007      	beq.n	801e53a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	681b      	ldr	r3, [r3, #0]
 801e52e:	681a      	ldr	r2, [r3, #0]
 801e530:	687b      	ldr	r3, [r7, #4]
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	f022 0208 	bic.w	r2, r2, #8
 801e538:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e53e:	223f      	movs	r2, #63	; 0x3f
 801e540:	409a      	lsls	r2, r3
 801e542:	693b      	ldr	r3, [r7, #16]
 801e544:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	2200      	movs	r2, #0
 801e54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	2201      	movs	r2, #1
 801e552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e55a:	2b00      	cmp	r3, #0
 801e55c:	d07d      	beq.n	801e65a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801e55e:	687b      	ldr	r3, [r7, #4]
 801e560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e562:	6878      	ldr	r0, [r7, #4]
 801e564:	4798      	blx	r3
        }
        return;
 801e566:	e078      	b.n	801e65a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	681b      	ldr	r3, [r3, #0]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e572:	2b00      	cmp	r3, #0
 801e574:	d01c      	beq.n	801e5b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e576:	687b      	ldr	r3, [r7, #4]
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e580:	2b00      	cmp	r3, #0
 801e582:	d108      	bne.n	801e596 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e584:	687b      	ldr	r3, [r7, #4]
 801e586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d030      	beq.n	801e5ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e590:	6878      	ldr	r0, [r7, #4]
 801e592:	4798      	blx	r3
 801e594:	e02b      	b.n	801e5ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	d027      	beq.n	801e5ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5a2:	6878      	ldr	r0, [r7, #4]
 801e5a4:	4798      	blx	r3
 801e5a6:	e022      	b.n	801e5ee <HAL_DMA_IRQHandler+0x29e>
 801e5a8:	20000000 	.word	0x20000000
 801e5ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d10f      	bne.n	801e5de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	681a      	ldr	r2, [r3, #0]
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	f022 0210 	bic.w	r2, r2, #16
 801e5cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e5ce:	687b      	ldr	r3, [r7, #4]
 801e5d0:	2200      	movs	r2, #0
 801e5d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	2201      	movs	r2, #1
 801e5da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d003      	beq.n	801e5ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d032      	beq.n	801e65c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e5fa:	f003 0301 	and.w	r3, r3, #1
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d022      	beq.n	801e648 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	2205      	movs	r2, #5
 801e606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	681a      	ldr	r2, [r3, #0]
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	f022 0201 	bic.w	r2, r2, #1
 801e618:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e61a:	68bb      	ldr	r3, [r7, #8]
 801e61c:	3301      	adds	r3, #1
 801e61e:	60bb      	str	r3, [r7, #8]
 801e620:	697a      	ldr	r2, [r7, #20]
 801e622:	429a      	cmp	r2, r3
 801e624:	d307      	bcc.n	801e636 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	681b      	ldr	r3, [r3, #0]
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	f003 0301 	and.w	r3, r3, #1
 801e630:	2b00      	cmp	r3, #0
 801e632:	d1f2      	bne.n	801e61a <HAL_DMA_IRQHandler+0x2ca>
 801e634:	e000      	b.n	801e638 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801e636:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	2200      	movs	r2, #0
 801e63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	2201      	movs	r2, #1
 801e644:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d005      	beq.n	801e65c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e654:	6878      	ldr	r0, [r7, #4]
 801e656:	4798      	blx	r3
 801e658:	e000      	b.n	801e65c <HAL_DMA_IRQHandler+0x30c>
        return;
 801e65a:	bf00      	nop
    }
  }
}
 801e65c:	3718      	adds	r7, #24
 801e65e:	46bd      	mov	sp, r7
 801e660:	bd80      	pop	{r7, pc}
 801e662:	bf00      	nop

0801e664 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e664:	b480      	push	{r7}
 801e666:	b085      	sub	sp, #20
 801e668:	af00      	add	r7, sp, #0
 801e66a:	60f8      	str	r0, [r7, #12]
 801e66c:	60b9      	str	r1, [r7, #8]
 801e66e:	607a      	str	r2, [r7, #4]
 801e670:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801e672:	68fb      	ldr	r3, [r7, #12]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	681a      	ldr	r2, [r3, #0]
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	681b      	ldr	r3, [r3, #0]
 801e67c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e680:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	681b      	ldr	r3, [r3, #0]
 801e686:	683a      	ldr	r2, [r7, #0]
 801e688:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	689b      	ldr	r3, [r3, #8]
 801e68e:	2b40      	cmp	r3, #64	; 0x40
 801e690:	d108      	bne.n	801e6a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	687a      	ldr	r2, [r7, #4]
 801e698:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	68ba      	ldr	r2, [r7, #8]
 801e6a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801e6a2:	e007      	b.n	801e6b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801e6a4:	68fb      	ldr	r3, [r7, #12]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	68ba      	ldr	r2, [r7, #8]
 801e6aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	687a      	ldr	r2, [r7, #4]
 801e6b2:	60da      	str	r2, [r3, #12]
}
 801e6b4:	bf00      	nop
 801e6b6:	3714      	adds	r7, #20
 801e6b8:	46bd      	mov	sp, r7
 801e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6be:	4770      	bx	lr

0801e6c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801e6c0:	b480      	push	{r7}
 801e6c2:	b085      	sub	sp, #20
 801e6c4:	af00      	add	r7, sp, #0
 801e6c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	b2db      	uxtb	r3, r3
 801e6ce:	3b10      	subs	r3, #16
 801e6d0:	4a14      	ldr	r2, [pc, #80]	; (801e724 <DMA_CalcBaseAndBitshift+0x64>)
 801e6d2:	fba2 2303 	umull	r2, r3, r2, r3
 801e6d6:	091b      	lsrs	r3, r3, #4
 801e6d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801e6da:	4a13      	ldr	r2, [pc, #76]	; (801e728 <DMA_CalcBaseAndBitshift+0x68>)
 801e6dc:	68fb      	ldr	r3, [r7, #12]
 801e6de:	4413      	add	r3, r2
 801e6e0:	781b      	ldrb	r3, [r3, #0]
 801e6e2:	461a      	mov	r2, r3
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	2b03      	cmp	r3, #3
 801e6ec:	d909      	bls.n	801e702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e6f6:	f023 0303 	bic.w	r3, r3, #3
 801e6fa:	1d1a      	adds	r2, r3, #4
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	659a      	str	r2, [r3, #88]	; 0x58
 801e700:	e007      	b.n	801e712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	681b      	ldr	r3, [r3, #0]
 801e706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e70a:	f023 0303 	bic.w	r3, r3, #3
 801e70e:	687a      	ldr	r2, [r7, #4]
 801e710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801e712:	687b      	ldr	r3, [r7, #4]
 801e714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801e716:	4618      	mov	r0, r3
 801e718:	3714      	adds	r7, #20
 801e71a:	46bd      	mov	sp, r7
 801e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e720:	4770      	bx	lr
 801e722:	bf00      	nop
 801e724:	aaaaaaab 	.word	0xaaaaaaab
 801e728:	0802d2c4 	.word	0x0802d2c4

0801e72c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801e72c:	b480      	push	{r7}
 801e72e:	b085      	sub	sp, #20
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e734:	2300      	movs	r3, #0
 801e736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e73c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	699b      	ldr	r3, [r3, #24]
 801e742:	2b00      	cmp	r3, #0
 801e744:	d11f      	bne.n	801e786 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801e746:	68bb      	ldr	r3, [r7, #8]
 801e748:	2b03      	cmp	r3, #3
 801e74a:	d855      	bhi.n	801e7f8 <DMA_CheckFifoParam+0xcc>
 801e74c:	a201      	add	r2, pc, #4	; (adr r2, 801e754 <DMA_CheckFifoParam+0x28>)
 801e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e752:	bf00      	nop
 801e754:	0801e765 	.word	0x0801e765
 801e758:	0801e777 	.word	0x0801e777
 801e75c:	0801e765 	.word	0x0801e765
 801e760:	0801e7f9 	.word	0x0801e7f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e764:	687b      	ldr	r3, [r7, #4]
 801e766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d045      	beq.n	801e7fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 801e770:	2301      	movs	r3, #1
 801e772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e774:	e042      	b.n	801e7fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e77a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e77e:	d13f      	bne.n	801e800 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 801e780:	2301      	movs	r3, #1
 801e782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e784:	e03c      	b.n	801e800 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	699b      	ldr	r3, [r3, #24]
 801e78a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e78e:	d121      	bne.n	801e7d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801e790:	68bb      	ldr	r3, [r7, #8]
 801e792:	2b03      	cmp	r3, #3
 801e794:	d836      	bhi.n	801e804 <DMA_CheckFifoParam+0xd8>
 801e796:	a201      	add	r2, pc, #4	; (adr r2, 801e79c <DMA_CheckFifoParam+0x70>)
 801e798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e79c:	0801e7ad 	.word	0x0801e7ad
 801e7a0:	0801e7b3 	.word	0x0801e7b3
 801e7a4:	0801e7ad 	.word	0x0801e7ad
 801e7a8:	0801e7c5 	.word	0x0801e7c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801e7ac:	2301      	movs	r3, #1
 801e7ae:	73fb      	strb	r3, [r7, #15]
      break;
 801e7b0:	e02f      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e7b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	d024      	beq.n	801e808 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801e7be:	2301      	movs	r3, #1
 801e7c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e7c2:	e021      	b.n	801e808 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e7c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e7cc:	d11e      	bne.n	801e80c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 801e7ce:	2301      	movs	r3, #1
 801e7d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801e7d2:	e01b      	b.n	801e80c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801e7d4:	68bb      	ldr	r3, [r7, #8]
 801e7d6:	2b02      	cmp	r3, #2
 801e7d8:	d902      	bls.n	801e7e0 <DMA_CheckFifoParam+0xb4>
 801e7da:	2b03      	cmp	r3, #3
 801e7dc:	d003      	beq.n	801e7e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801e7de:	e018      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	73fb      	strb	r3, [r7, #15]
      break;
 801e7e4:	e015      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e7ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d00e      	beq.n	801e810 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801e7f2:	2301      	movs	r3, #1
 801e7f4:	73fb      	strb	r3, [r7, #15]
      break;
 801e7f6:	e00b      	b.n	801e810 <DMA_CheckFifoParam+0xe4>
      break;
 801e7f8:	bf00      	nop
 801e7fa:	e00a      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;
 801e7fc:	bf00      	nop
 801e7fe:	e008      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;
 801e800:	bf00      	nop
 801e802:	e006      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;
 801e804:	bf00      	nop
 801e806:	e004      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;
 801e808:	bf00      	nop
 801e80a:	e002      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;   
 801e80c:	bf00      	nop
 801e80e:	e000      	b.n	801e812 <DMA_CheckFifoParam+0xe6>
      break;
 801e810:	bf00      	nop
    }
  } 
  
  return status; 
 801e812:	7bfb      	ldrb	r3, [r7, #15]
}
 801e814:	4618      	mov	r0, r3
 801e816:	3714      	adds	r7, #20
 801e818:	46bd      	mov	sp, r7
 801e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e81e:	4770      	bx	lr

0801e820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e820:	b480      	push	{r7}
 801e822:	b089      	sub	sp, #36	; 0x24
 801e824:	af00      	add	r7, sp, #0
 801e826:	6078      	str	r0, [r7, #4]
 801e828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801e82a:	2300      	movs	r3, #0
 801e82c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e82e:	2300      	movs	r3, #0
 801e830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e832:	2300      	movs	r3, #0
 801e834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e836:	2300      	movs	r3, #0
 801e838:	61fb      	str	r3, [r7, #28]
 801e83a:	e159      	b.n	801eaf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801e83c:	2201      	movs	r2, #1
 801e83e:	69fb      	ldr	r3, [r7, #28]
 801e840:	fa02 f303 	lsl.w	r3, r2, r3
 801e844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801e846:	683b      	ldr	r3, [r7, #0]
 801e848:	681b      	ldr	r3, [r3, #0]
 801e84a:	697a      	ldr	r2, [r7, #20]
 801e84c:	4013      	ands	r3, r2
 801e84e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801e850:	693a      	ldr	r2, [r7, #16]
 801e852:	697b      	ldr	r3, [r7, #20]
 801e854:	429a      	cmp	r2, r3
 801e856:	f040 8148 	bne.w	801eaea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e85a:	683b      	ldr	r3, [r7, #0]
 801e85c:	685b      	ldr	r3, [r3, #4]
 801e85e:	2b01      	cmp	r3, #1
 801e860:	d00b      	beq.n	801e87a <HAL_GPIO_Init+0x5a>
 801e862:	683b      	ldr	r3, [r7, #0]
 801e864:	685b      	ldr	r3, [r3, #4]
 801e866:	2b02      	cmp	r3, #2
 801e868:	d007      	beq.n	801e87a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e86a:	683b      	ldr	r3, [r7, #0]
 801e86c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e86e:	2b11      	cmp	r3, #17
 801e870:	d003      	beq.n	801e87a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e872:	683b      	ldr	r3, [r7, #0]
 801e874:	685b      	ldr	r3, [r3, #4]
 801e876:	2b12      	cmp	r3, #18
 801e878:	d130      	bne.n	801e8dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	689b      	ldr	r3, [r3, #8]
 801e87e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801e880:	69fb      	ldr	r3, [r7, #28]
 801e882:	005b      	lsls	r3, r3, #1
 801e884:	2203      	movs	r2, #3
 801e886:	fa02 f303 	lsl.w	r3, r2, r3
 801e88a:	43db      	mvns	r3, r3
 801e88c:	69ba      	ldr	r2, [r7, #24]
 801e88e:	4013      	ands	r3, r2
 801e890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e892:	683b      	ldr	r3, [r7, #0]
 801e894:	68da      	ldr	r2, [r3, #12]
 801e896:	69fb      	ldr	r3, [r7, #28]
 801e898:	005b      	lsls	r3, r3, #1
 801e89a:	fa02 f303 	lsl.w	r3, r2, r3
 801e89e:	69ba      	ldr	r2, [r7, #24]
 801e8a0:	4313      	orrs	r3, r2
 801e8a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e8a4:	687b      	ldr	r3, [r7, #4]
 801e8a6:	69ba      	ldr	r2, [r7, #24]
 801e8a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	685b      	ldr	r3, [r3, #4]
 801e8ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801e8b0:	2201      	movs	r2, #1
 801e8b2:	69fb      	ldr	r3, [r7, #28]
 801e8b4:	fa02 f303 	lsl.w	r3, r2, r3
 801e8b8:	43db      	mvns	r3, r3
 801e8ba:	69ba      	ldr	r2, [r7, #24]
 801e8bc:	4013      	ands	r3, r2
 801e8be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	685b      	ldr	r3, [r3, #4]
 801e8c4:	091b      	lsrs	r3, r3, #4
 801e8c6:	f003 0201 	and.w	r2, r3, #1
 801e8ca:	69fb      	ldr	r3, [r7, #28]
 801e8cc:	fa02 f303 	lsl.w	r3, r2, r3
 801e8d0:	69ba      	ldr	r2, [r7, #24]
 801e8d2:	4313      	orrs	r3, r2
 801e8d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	69ba      	ldr	r2, [r7, #24]
 801e8da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	68db      	ldr	r3, [r3, #12]
 801e8e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801e8e2:	69fb      	ldr	r3, [r7, #28]
 801e8e4:	005b      	lsls	r3, r3, #1
 801e8e6:	2203      	movs	r2, #3
 801e8e8:	fa02 f303 	lsl.w	r3, r2, r3
 801e8ec:	43db      	mvns	r3, r3
 801e8ee:	69ba      	ldr	r2, [r7, #24]
 801e8f0:	4013      	ands	r3, r2
 801e8f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e8f4:	683b      	ldr	r3, [r7, #0]
 801e8f6:	689a      	ldr	r2, [r3, #8]
 801e8f8:	69fb      	ldr	r3, [r7, #28]
 801e8fa:	005b      	lsls	r3, r3, #1
 801e8fc:	fa02 f303 	lsl.w	r3, r2, r3
 801e900:	69ba      	ldr	r2, [r7, #24]
 801e902:	4313      	orrs	r3, r2
 801e904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e906:	687b      	ldr	r3, [r7, #4]
 801e908:	69ba      	ldr	r2, [r7, #24]
 801e90a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e90c:	683b      	ldr	r3, [r7, #0]
 801e90e:	685b      	ldr	r3, [r3, #4]
 801e910:	2b02      	cmp	r3, #2
 801e912:	d003      	beq.n	801e91c <HAL_GPIO_Init+0xfc>
 801e914:	683b      	ldr	r3, [r7, #0]
 801e916:	685b      	ldr	r3, [r3, #4]
 801e918:	2b12      	cmp	r3, #18
 801e91a:	d123      	bne.n	801e964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e91c:	69fb      	ldr	r3, [r7, #28]
 801e91e:	08da      	lsrs	r2, r3, #3
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	3208      	adds	r2, #8
 801e924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801e92a:	69fb      	ldr	r3, [r7, #28]
 801e92c:	f003 0307 	and.w	r3, r3, #7
 801e930:	009b      	lsls	r3, r3, #2
 801e932:	220f      	movs	r2, #15
 801e934:	fa02 f303 	lsl.w	r3, r2, r3
 801e938:	43db      	mvns	r3, r3
 801e93a:	69ba      	ldr	r2, [r7, #24]
 801e93c:	4013      	ands	r3, r2
 801e93e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801e940:	683b      	ldr	r3, [r7, #0]
 801e942:	691a      	ldr	r2, [r3, #16]
 801e944:	69fb      	ldr	r3, [r7, #28]
 801e946:	f003 0307 	and.w	r3, r3, #7
 801e94a:	009b      	lsls	r3, r3, #2
 801e94c:	fa02 f303 	lsl.w	r3, r2, r3
 801e950:	69ba      	ldr	r2, [r7, #24]
 801e952:	4313      	orrs	r3, r2
 801e954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e956:	69fb      	ldr	r3, [r7, #28]
 801e958:	08da      	lsrs	r2, r3, #3
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	3208      	adds	r2, #8
 801e95e:	69b9      	ldr	r1, [r7, #24]
 801e960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801e96a:	69fb      	ldr	r3, [r7, #28]
 801e96c:	005b      	lsls	r3, r3, #1
 801e96e:	2203      	movs	r2, #3
 801e970:	fa02 f303 	lsl.w	r3, r2, r3
 801e974:	43db      	mvns	r3, r3
 801e976:	69ba      	ldr	r2, [r7, #24]
 801e978:	4013      	ands	r3, r2
 801e97a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e97c:	683b      	ldr	r3, [r7, #0]
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	f003 0203 	and.w	r2, r3, #3
 801e984:	69fb      	ldr	r3, [r7, #28]
 801e986:	005b      	lsls	r3, r3, #1
 801e988:	fa02 f303 	lsl.w	r3, r2, r3
 801e98c:	69ba      	ldr	r2, [r7, #24]
 801e98e:	4313      	orrs	r3, r2
 801e990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	69ba      	ldr	r2, [r7, #24]
 801e996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801e998:	683b      	ldr	r3, [r7, #0]
 801e99a:	685b      	ldr	r3, [r3, #4]
 801e99c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	f000 80a2 	beq.w	801eaea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e9a6:	2300      	movs	r3, #0
 801e9a8:	60fb      	str	r3, [r7, #12]
 801e9aa:	4b56      	ldr	r3, [pc, #344]	; (801eb04 <HAL_GPIO_Init+0x2e4>)
 801e9ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9ae:	4a55      	ldr	r2, [pc, #340]	; (801eb04 <HAL_GPIO_Init+0x2e4>)
 801e9b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e9b4:	6453      	str	r3, [r2, #68]	; 0x44
 801e9b6:	4b53      	ldr	r3, [pc, #332]	; (801eb04 <HAL_GPIO_Init+0x2e4>)
 801e9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e9ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e9be:	60fb      	str	r3, [r7, #12]
 801e9c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e9c2:	4a51      	ldr	r2, [pc, #324]	; (801eb08 <HAL_GPIO_Init+0x2e8>)
 801e9c4:	69fb      	ldr	r3, [r7, #28]
 801e9c6:	089b      	lsrs	r3, r3, #2
 801e9c8:	3302      	adds	r3, #2
 801e9ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e9ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801e9d0:	69fb      	ldr	r3, [r7, #28]
 801e9d2:	f003 0303 	and.w	r3, r3, #3
 801e9d6:	009b      	lsls	r3, r3, #2
 801e9d8:	220f      	movs	r2, #15
 801e9da:	fa02 f303 	lsl.w	r3, r2, r3
 801e9de:	43db      	mvns	r3, r3
 801e9e0:	69ba      	ldr	r2, [r7, #24]
 801e9e2:	4013      	ands	r3, r2
 801e9e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	4a48      	ldr	r2, [pc, #288]	; (801eb0c <HAL_GPIO_Init+0x2ec>)
 801e9ea:	4293      	cmp	r3, r2
 801e9ec:	d019      	beq.n	801ea22 <HAL_GPIO_Init+0x202>
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	4a47      	ldr	r2, [pc, #284]	; (801eb10 <HAL_GPIO_Init+0x2f0>)
 801e9f2:	4293      	cmp	r3, r2
 801e9f4:	d013      	beq.n	801ea1e <HAL_GPIO_Init+0x1fe>
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	4a46      	ldr	r2, [pc, #280]	; (801eb14 <HAL_GPIO_Init+0x2f4>)
 801e9fa:	4293      	cmp	r3, r2
 801e9fc:	d00d      	beq.n	801ea1a <HAL_GPIO_Init+0x1fa>
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	4a45      	ldr	r2, [pc, #276]	; (801eb18 <HAL_GPIO_Init+0x2f8>)
 801ea02:	4293      	cmp	r3, r2
 801ea04:	d007      	beq.n	801ea16 <HAL_GPIO_Init+0x1f6>
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	4a44      	ldr	r2, [pc, #272]	; (801eb1c <HAL_GPIO_Init+0x2fc>)
 801ea0a:	4293      	cmp	r3, r2
 801ea0c:	d101      	bne.n	801ea12 <HAL_GPIO_Init+0x1f2>
 801ea0e:	2304      	movs	r3, #4
 801ea10:	e008      	b.n	801ea24 <HAL_GPIO_Init+0x204>
 801ea12:	2307      	movs	r3, #7
 801ea14:	e006      	b.n	801ea24 <HAL_GPIO_Init+0x204>
 801ea16:	2303      	movs	r3, #3
 801ea18:	e004      	b.n	801ea24 <HAL_GPIO_Init+0x204>
 801ea1a:	2302      	movs	r3, #2
 801ea1c:	e002      	b.n	801ea24 <HAL_GPIO_Init+0x204>
 801ea1e:	2301      	movs	r3, #1
 801ea20:	e000      	b.n	801ea24 <HAL_GPIO_Init+0x204>
 801ea22:	2300      	movs	r3, #0
 801ea24:	69fa      	ldr	r2, [r7, #28]
 801ea26:	f002 0203 	and.w	r2, r2, #3
 801ea2a:	0092      	lsls	r2, r2, #2
 801ea2c:	4093      	lsls	r3, r2
 801ea2e:	69ba      	ldr	r2, [r7, #24]
 801ea30:	4313      	orrs	r3, r2
 801ea32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ea34:	4934      	ldr	r1, [pc, #208]	; (801eb08 <HAL_GPIO_Init+0x2e8>)
 801ea36:	69fb      	ldr	r3, [r7, #28]
 801ea38:	089b      	lsrs	r3, r3, #2
 801ea3a:	3302      	adds	r3, #2
 801ea3c:	69ba      	ldr	r2, [r7, #24]
 801ea3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801ea42:	4b37      	ldr	r3, [pc, #220]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ea48:	693b      	ldr	r3, [r7, #16]
 801ea4a:	43db      	mvns	r3, r3
 801ea4c:	69ba      	ldr	r2, [r7, #24]
 801ea4e:	4013      	ands	r3, r2
 801ea50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801ea52:	683b      	ldr	r3, [r7, #0]
 801ea54:	685b      	ldr	r3, [r3, #4]
 801ea56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d003      	beq.n	801ea66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801ea5e:	69ba      	ldr	r2, [r7, #24]
 801ea60:	693b      	ldr	r3, [r7, #16]
 801ea62:	4313      	orrs	r3, r2
 801ea64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801ea66:	4a2e      	ldr	r2, [pc, #184]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801ea68:	69bb      	ldr	r3, [r7, #24]
 801ea6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801ea6c:	4b2c      	ldr	r3, [pc, #176]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801ea6e:	685b      	ldr	r3, [r3, #4]
 801ea70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ea72:	693b      	ldr	r3, [r7, #16]
 801ea74:	43db      	mvns	r3, r3
 801ea76:	69ba      	ldr	r2, [r7, #24]
 801ea78:	4013      	ands	r3, r2
 801ea7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801ea7c:	683b      	ldr	r3, [r7, #0]
 801ea7e:	685b      	ldr	r3, [r3, #4]
 801ea80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d003      	beq.n	801ea90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801ea88:	69ba      	ldr	r2, [r7, #24]
 801ea8a:	693b      	ldr	r3, [r7, #16]
 801ea8c:	4313      	orrs	r3, r2
 801ea8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801ea90:	4a23      	ldr	r2, [pc, #140]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801ea92:	69bb      	ldr	r3, [r7, #24]
 801ea94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801ea96:	4b22      	ldr	r3, [pc, #136]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801ea98:	689b      	ldr	r3, [r3, #8]
 801ea9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801ea9c:	693b      	ldr	r3, [r7, #16]
 801ea9e:	43db      	mvns	r3, r3
 801eaa0:	69ba      	ldr	r2, [r7, #24]
 801eaa2:	4013      	ands	r3, r2
 801eaa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801eaa6:	683b      	ldr	r3, [r7, #0]
 801eaa8:	685b      	ldr	r3, [r3, #4]
 801eaaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d003      	beq.n	801eaba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801eab2:	69ba      	ldr	r2, [r7, #24]
 801eab4:	693b      	ldr	r3, [r7, #16]
 801eab6:	4313      	orrs	r3, r2
 801eab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801eaba:	4a19      	ldr	r2, [pc, #100]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801eabc:	69bb      	ldr	r3, [r7, #24]
 801eabe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801eac0:	4b17      	ldr	r3, [pc, #92]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801eac2:	68db      	ldr	r3, [r3, #12]
 801eac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801eac6:	693b      	ldr	r3, [r7, #16]
 801eac8:	43db      	mvns	r3, r3
 801eaca:	69ba      	ldr	r2, [r7, #24]
 801eacc:	4013      	ands	r3, r2
 801eace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801ead0:	683b      	ldr	r3, [r7, #0]
 801ead2:	685b      	ldr	r3, [r3, #4]
 801ead4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d003      	beq.n	801eae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801eadc:	69ba      	ldr	r2, [r7, #24]
 801eade:	693b      	ldr	r3, [r7, #16]
 801eae0:	4313      	orrs	r3, r2
 801eae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801eae4:	4a0e      	ldr	r2, [pc, #56]	; (801eb20 <HAL_GPIO_Init+0x300>)
 801eae6:	69bb      	ldr	r3, [r7, #24]
 801eae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801eaea:	69fb      	ldr	r3, [r7, #28]
 801eaec:	3301      	adds	r3, #1
 801eaee:	61fb      	str	r3, [r7, #28]
 801eaf0:	69fb      	ldr	r3, [r7, #28]
 801eaf2:	2b0f      	cmp	r3, #15
 801eaf4:	f67f aea2 	bls.w	801e83c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801eaf8:	bf00      	nop
 801eafa:	3724      	adds	r7, #36	; 0x24
 801eafc:	46bd      	mov	sp, r7
 801eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb02:	4770      	bx	lr
 801eb04:	40023800 	.word	0x40023800
 801eb08:	40013800 	.word	0x40013800
 801eb0c:	40020000 	.word	0x40020000
 801eb10:	40020400 	.word	0x40020400
 801eb14:	40020800 	.word	0x40020800
 801eb18:	40020c00 	.word	0x40020c00
 801eb1c:	40021000 	.word	0x40021000
 801eb20:	40013c00 	.word	0x40013c00

0801eb24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801eb24:	b480      	push	{r7}
 801eb26:	b085      	sub	sp, #20
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
 801eb2c:	460b      	mov	r3, r1
 801eb2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	691a      	ldr	r2, [r3, #16]
 801eb34:	887b      	ldrh	r3, [r7, #2]
 801eb36:	4013      	ands	r3, r2
 801eb38:	2b00      	cmp	r3, #0
 801eb3a:	d002      	beq.n	801eb42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801eb3c:	2301      	movs	r3, #1
 801eb3e:	73fb      	strb	r3, [r7, #15]
 801eb40:	e001      	b.n	801eb46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801eb42:	2300      	movs	r3, #0
 801eb44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801eb46:	7bfb      	ldrb	r3, [r7, #15]
}
 801eb48:	4618      	mov	r0, r3
 801eb4a:	3714      	adds	r7, #20
 801eb4c:	46bd      	mov	sp, r7
 801eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb52:	4770      	bx	lr

0801eb54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801eb54:	b480      	push	{r7}
 801eb56:	b083      	sub	sp, #12
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6078      	str	r0, [r7, #4]
 801eb5c:	460b      	mov	r3, r1
 801eb5e:	807b      	strh	r3, [r7, #2]
 801eb60:	4613      	mov	r3, r2
 801eb62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801eb64:	787b      	ldrb	r3, [r7, #1]
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d003      	beq.n	801eb72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801eb6a:	887a      	ldrh	r2, [r7, #2]
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801eb70:	e003      	b.n	801eb7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801eb72:	887b      	ldrh	r3, [r7, #2]
 801eb74:	041a      	lsls	r2, r3, #16
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	619a      	str	r2, [r3, #24]
}
 801eb7a:	bf00      	nop
 801eb7c:	370c      	adds	r7, #12
 801eb7e:	46bd      	mov	sp, r7
 801eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb84:	4770      	bx	lr
	...

0801eb88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801eb88:	b580      	push	{r7, lr}
 801eb8a:	b082      	sub	sp, #8
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	4603      	mov	r3, r0
 801eb90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801eb92:	4b08      	ldr	r3, [pc, #32]	; (801ebb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801eb94:	695a      	ldr	r2, [r3, #20]
 801eb96:	88fb      	ldrh	r3, [r7, #6]
 801eb98:	4013      	ands	r3, r2
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d006      	beq.n	801ebac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801eb9e:	4a05      	ldr	r2, [pc, #20]	; (801ebb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801eba0:	88fb      	ldrh	r3, [r7, #6]
 801eba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801eba4:	88fb      	ldrh	r3, [r7, #6]
 801eba6:	4618      	mov	r0, r3
 801eba8:	f7fe fcde 	bl	801d568 <HAL_GPIO_EXTI_Callback>
  }
}
 801ebac:	bf00      	nop
 801ebae:	3708      	adds	r7, #8
 801ebb0:	46bd      	mov	sp, r7
 801ebb2:	bd80      	pop	{r7, pc}
 801ebb4:	40013c00 	.word	0x40013c00

0801ebb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ebb8:	b580      	push	{r7, lr}
 801ebba:	b084      	sub	sp, #16
 801ebbc:	af00      	add	r7, sp, #0
 801ebbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	2b00      	cmp	r3, #0
 801ebc4:	d101      	bne.n	801ebca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ebc6:	2301      	movs	r3, #1
 801ebc8:	e11f      	b.n	801ee0a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebd0:	b2db      	uxtb	r3, r3
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d106      	bne.n	801ebe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	2200      	movs	r2, #0
 801ebda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801ebde:	6878      	ldr	r0, [r7, #4]
 801ebe0:	f7fd ff6a 	bl	801cab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	2224      	movs	r2, #36	; 0x24
 801ebe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	681b      	ldr	r3, [r3, #0]
 801ebf0:	681a      	ldr	r2, [r3, #0]
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	f022 0201 	bic.w	r2, r2, #1
 801ebfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	681a      	ldr	r2, [r3, #0]
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ec0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	681b      	ldr	r3, [r3, #0]
 801ec10:	681a      	ldr	r2, [r3, #0]
 801ec12:	687b      	ldr	r3, [r7, #4]
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801ec1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801ec1c:	f001 f974 	bl	801ff08 <HAL_RCC_GetPCLK1Freq>
 801ec20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	685b      	ldr	r3, [r3, #4]
 801ec26:	4a7b      	ldr	r2, [pc, #492]	; (801ee14 <HAL_I2C_Init+0x25c>)
 801ec28:	4293      	cmp	r3, r2
 801ec2a:	d807      	bhi.n	801ec3c <HAL_I2C_Init+0x84>
 801ec2c:	68fb      	ldr	r3, [r7, #12]
 801ec2e:	4a7a      	ldr	r2, [pc, #488]	; (801ee18 <HAL_I2C_Init+0x260>)
 801ec30:	4293      	cmp	r3, r2
 801ec32:	bf94      	ite	ls
 801ec34:	2301      	movls	r3, #1
 801ec36:	2300      	movhi	r3, #0
 801ec38:	b2db      	uxtb	r3, r3
 801ec3a:	e006      	b.n	801ec4a <HAL_I2C_Init+0x92>
 801ec3c:	68fb      	ldr	r3, [r7, #12]
 801ec3e:	4a77      	ldr	r2, [pc, #476]	; (801ee1c <HAL_I2C_Init+0x264>)
 801ec40:	4293      	cmp	r3, r2
 801ec42:	bf94      	ite	ls
 801ec44:	2301      	movls	r3, #1
 801ec46:	2300      	movhi	r3, #0
 801ec48:	b2db      	uxtb	r3, r3
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d001      	beq.n	801ec52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801ec4e:	2301      	movs	r3, #1
 801ec50:	e0db      	b.n	801ee0a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	4a72      	ldr	r2, [pc, #456]	; (801ee20 <HAL_I2C_Init+0x268>)
 801ec56:	fba2 2303 	umull	r2, r3, r2, r3
 801ec5a:	0c9b      	lsrs	r3, r3, #18
 801ec5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	681b      	ldr	r3, [r3, #0]
 801ec62:	685b      	ldr	r3, [r3, #4]
 801ec64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	68ba      	ldr	r2, [r7, #8]
 801ec6e:	430a      	orrs	r2, r1
 801ec70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801ec72:	687b      	ldr	r3, [r7, #4]
 801ec74:	681b      	ldr	r3, [r3, #0]
 801ec76:	6a1b      	ldr	r3, [r3, #32]
 801ec78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	685b      	ldr	r3, [r3, #4]
 801ec80:	4a64      	ldr	r2, [pc, #400]	; (801ee14 <HAL_I2C_Init+0x25c>)
 801ec82:	4293      	cmp	r3, r2
 801ec84:	d802      	bhi.n	801ec8c <HAL_I2C_Init+0xd4>
 801ec86:	68bb      	ldr	r3, [r7, #8]
 801ec88:	3301      	adds	r3, #1
 801ec8a:	e009      	b.n	801eca0 <HAL_I2C_Init+0xe8>
 801ec8c:	68bb      	ldr	r3, [r7, #8]
 801ec8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801ec92:	fb02 f303 	mul.w	r3, r2, r3
 801ec96:	4a63      	ldr	r2, [pc, #396]	; (801ee24 <HAL_I2C_Init+0x26c>)
 801ec98:	fba2 2303 	umull	r2, r3, r2, r3
 801ec9c:	099b      	lsrs	r3, r3, #6
 801ec9e:	3301      	adds	r3, #1
 801eca0:	687a      	ldr	r2, [r7, #4]
 801eca2:	6812      	ldr	r2, [r2, #0]
 801eca4:	430b      	orrs	r3, r1
 801eca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	681b      	ldr	r3, [r3, #0]
 801ecac:	69db      	ldr	r3, [r3, #28]
 801ecae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801ecb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	685b      	ldr	r3, [r3, #4]
 801ecba:	4956      	ldr	r1, [pc, #344]	; (801ee14 <HAL_I2C_Init+0x25c>)
 801ecbc:	428b      	cmp	r3, r1
 801ecbe:	d80d      	bhi.n	801ecdc <HAL_I2C_Init+0x124>
 801ecc0:	68fb      	ldr	r3, [r7, #12]
 801ecc2:	1e59      	subs	r1, r3, #1
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	685b      	ldr	r3, [r3, #4]
 801ecc8:	005b      	lsls	r3, r3, #1
 801ecca:	fbb1 f3f3 	udiv	r3, r1, r3
 801ecce:	3301      	adds	r3, #1
 801ecd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ecd4:	2b04      	cmp	r3, #4
 801ecd6:	bf38      	it	cc
 801ecd8:	2304      	movcc	r3, #4
 801ecda:	e04f      	b.n	801ed7c <HAL_I2C_Init+0x1c4>
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	689b      	ldr	r3, [r3, #8]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d111      	bne.n	801ed08 <HAL_I2C_Init+0x150>
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	1e58      	subs	r0, r3, #1
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	6859      	ldr	r1, [r3, #4]
 801ecec:	460b      	mov	r3, r1
 801ecee:	005b      	lsls	r3, r3, #1
 801ecf0:	440b      	add	r3, r1
 801ecf2:	fbb0 f3f3 	udiv	r3, r0, r3
 801ecf6:	3301      	adds	r3, #1
 801ecf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	bf0c      	ite	eq
 801ed00:	2301      	moveq	r3, #1
 801ed02:	2300      	movne	r3, #0
 801ed04:	b2db      	uxtb	r3, r3
 801ed06:	e012      	b.n	801ed2e <HAL_I2C_Init+0x176>
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	1e58      	subs	r0, r3, #1
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	6859      	ldr	r1, [r3, #4]
 801ed10:	460b      	mov	r3, r1
 801ed12:	009b      	lsls	r3, r3, #2
 801ed14:	440b      	add	r3, r1
 801ed16:	0099      	lsls	r1, r3, #2
 801ed18:	440b      	add	r3, r1
 801ed1a:	fbb0 f3f3 	udiv	r3, r0, r3
 801ed1e:	3301      	adds	r3, #1
 801ed20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	bf0c      	ite	eq
 801ed28:	2301      	moveq	r3, #1
 801ed2a:	2300      	movne	r3, #0
 801ed2c:	b2db      	uxtb	r3, r3
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d001      	beq.n	801ed36 <HAL_I2C_Init+0x17e>
 801ed32:	2301      	movs	r3, #1
 801ed34:	e022      	b.n	801ed7c <HAL_I2C_Init+0x1c4>
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	689b      	ldr	r3, [r3, #8]
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d10e      	bne.n	801ed5c <HAL_I2C_Init+0x1a4>
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	1e58      	subs	r0, r3, #1
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	6859      	ldr	r1, [r3, #4]
 801ed46:	460b      	mov	r3, r1
 801ed48:	005b      	lsls	r3, r3, #1
 801ed4a:	440b      	add	r3, r1
 801ed4c:	fbb0 f3f3 	udiv	r3, r0, r3
 801ed50:	3301      	adds	r3, #1
 801ed52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ed56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ed5a:	e00f      	b.n	801ed7c <HAL_I2C_Init+0x1c4>
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	1e58      	subs	r0, r3, #1
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	6859      	ldr	r1, [r3, #4]
 801ed64:	460b      	mov	r3, r1
 801ed66:	009b      	lsls	r3, r3, #2
 801ed68:	440b      	add	r3, r1
 801ed6a:	0099      	lsls	r1, r3, #2
 801ed6c:	440b      	add	r3, r1
 801ed6e:	fbb0 f3f3 	udiv	r3, r0, r3
 801ed72:	3301      	adds	r3, #1
 801ed74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ed78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ed7c:	6879      	ldr	r1, [r7, #4]
 801ed7e:	6809      	ldr	r1, [r1, #0]
 801ed80:	4313      	orrs	r3, r2
 801ed82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	69da      	ldr	r2, [r3, #28]
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	6a1b      	ldr	r3, [r3, #32]
 801ed96:	431a      	orrs	r2, r3
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	681b      	ldr	r3, [r3, #0]
 801ed9c:	430a      	orrs	r2, r1
 801ed9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	681b      	ldr	r3, [r3, #0]
 801eda4:	689b      	ldr	r3, [r3, #8]
 801eda6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801edaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801edae:	687a      	ldr	r2, [r7, #4]
 801edb0:	6911      	ldr	r1, [r2, #16]
 801edb2:	687a      	ldr	r2, [r7, #4]
 801edb4:	68d2      	ldr	r2, [r2, #12]
 801edb6:	4311      	orrs	r1, r2
 801edb8:	687a      	ldr	r2, [r7, #4]
 801edba:	6812      	ldr	r2, [r2, #0]
 801edbc:	430b      	orrs	r3, r1
 801edbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	681b      	ldr	r3, [r3, #0]
 801edc4:	68db      	ldr	r3, [r3, #12]
 801edc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801edca:	687b      	ldr	r3, [r7, #4]
 801edcc:	695a      	ldr	r2, [r3, #20]
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	699b      	ldr	r3, [r3, #24]
 801edd2:	431a      	orrs	r2, r3
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681b      	ldr	r3, [r3, #0]
 801edd8:	430a      	orrs	r2, r1
 801edda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801eddc:	687b      	ldr	r3, [r7, #4]
 801edde:	681b      	ldr	r3, [r3, #0]
 801ede0:	681a      	ldr	r2, [r3, #0]
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	f042 0201 	orr.w	r2, r2, #1
 801edea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	2200      	movs	r2, #0
 801edf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	2220      	movs	r2, #32
 801edf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	2200      	movs	r2, #0
 801edfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	2200      	movs	r2, #0
 801ee04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801ee08:	2300      	movs	r3, #0
}
 801ee0a:	4618      	mov	r0, r3
 801ee0c:	3710      	adds	r7, #16
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	bd80      	pop	{r7, pc}
 801ee12:	bf00      	nop
 801ee14:	000186a0 	.word	0x000186a0
 801ee18:	001e847f 	.word	0x001e847f
 801ee1c:	003d08ff 	.word	0x003d08ff
 801ee20:	431bde83 	.word	0x431bde83
 801ee24:	10624dd3 	.word	0x10624dd3

0801ee28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ee28:	b580      	push	{r7, lr}
 801ee2a:	b088      	sub	sp, #32
 801ee2c:	af02      	add	r7, sp, #8
 801ee2e:	60f8      	str	r0, [r7, #12]
 801ee30:	607a      	str	r2, [r7, #4]
 801ee32:	461a      	mov	r2, r3
 801ee34:	460b      	mov	r3, r1
 801ee36:	817b      	strh	r3, [r7, #10]
 801ee38:	4613      	mov	r3, r2
 801ee3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ee3c:	f7ff f820 	bl	801de80 <HAL_GetTick>
 801ee40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ee48:	b2db      	uxtb	r3, r3
 801ee4a:	2b20      	cmp	r3, #32
 801ee4c:	f040 80e0 	bne.w	801f010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ee50:	697b      	ldr	r3, [r7, #20]
 801ee52:	9300      	str	r3, [sp, #0]
 801ee54:	2319      	movs	r3, #25
 801ee56:	2201      	movs	r2, #1
 801ee58:	4970      	ldr	r1, [pc, #448]	; (801f01c <HAL_I2C_Master_Transmit+0x1f4>)
 801ee5a:	68f8      	ldr	r0, [r7, #12]
 801ee5c:	f000 fa92 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801ee60:	4603      	mov	r3, r0
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d001      	beq.n	801ee6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801ee66:	2302      	movs	r3, #2
 801ee68:	e0d3      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ee70:	2b01      	cmp	r3, #1
 801ee72:	d101      	bne.n	801ee78 <HAL_I2C_Master_Transmit+0x50>
 801ee74:	2302      	movs	r3, #2
 801ee76:	e0cc      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
 801ee78:	68fb      	ldr	r3, [r7, #12]
 801ee7a:	2201      	movs	r2, #1
 801ee7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ee80:	68fb      	ldr	r3, [r7, #12]
 801ee82:	681b      	ldr	r3, [r3, #0]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	f003 0301 	and.w	r3, r3, #1
 801ee8a:	2b01      	cmp	r3, #1
 801ee8c:	d007      	beq.n	801ee9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ee8e:	68fb      	ldr	r3, [r7, #12]
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	681a      	ldr	r2, [r3, #0]
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	681b      	ldr	r3, [r3, #0]
 801ee98:	f042 0201 	orr.w	r2, r2, #1
 801ee9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	681b      	ldr	r3, [r3, #0]
 801eea2:	681a      	ldr	r2, [r3, #0]
 801eea4:	68fb      	ldr	r3, [r7, #12]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801eeac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801eeae:	68fb      	ldr	r3, [r7, #12]
 801eeb0:	2221      	movs	r2, #33	; 0x21
 801eeb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801eeb6:	68fb      	ldr	r3, [r7, #12]
 801eeb8:	2210      	movs	r2, #16
 801eeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801eebe:	68fb      	ldr	r3, [r7, #12]
 801eec0:	2200      	movs	r2, #0
 801eec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801eec4:	68fb      	ldr	r3, [r7, #12]
 801eec6:	687a      	ldr	r2, [r7, #4]
 801eec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801eeca:	68fb      	ldr	r3, [r7, #12]
 801eecc:	893a      	ldrh	r2, [r7, #8]
 801eece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801eed0:	68fb      	ldr	r3, [r7, #12]
 801eed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801eed4:	b29a      	uxth	r2, r3
 801eed6:	68fb      	ldr	r3, [r7, #12]
 801eed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801eeda:	68fb      	ldr	r3, [r7, #12]
 801eedc:	4a50      	ldr	r2, [pc, #320]	; (801f020 <HAL_I2C_Master_Transmit+0x1f8>)
 801eede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801eee0:	8979      	ldrh	r1, [r7, #10]
 801eee2:	697b      	ldr	r3, [r7, #20]
 801eee4:	6a3a      	ldr	r2, [r7, #32]
 801eee6:	68f8      	ldr	r0, [r7, #12]
 801eee8:	f000 f9ca 	bl	801f280 <I2C_MasterRequestWrite>
 801eeec:	4603      	mov	r3, r0
 801eeee:	2b00      	cmp	r3, #0
 801eef0:	d001      	beq.n	801eef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801eef2:	2301      	movs	r3, #1
 801eef4:	e08d      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eef6:	2300      	movs	r3, #0
 801eef8:	613b      	str	r3, [r7, #16]
 801eefa:	68fb      	ldr	r3, [r7, #12]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	695b      	ldr	r3, [r3, #20]
 801ef00:	613b      	str	r3, [r7, #16]
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	699b      	ldr	r3, [r3, #24]
 801ef08:	613b      	str	r3, [r7, #16]
 801ef0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801ef0c:	e066      	b.n	801efdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ef0e:	697a      	ldr	r2, [r7, #20]
 801ef10:	6a39      	ldr	r1, [r7, #32]
 801ef12:	68f8      	ldr	r0, [r7, #12]
 801ef14:	f000 fb0c 	bl	801f530 <I2C_WaitOnTXEFlagUntilTimeout>
 801ef18:	4603      	mov	r3, r0
 801ef1a:	2b00      	cmp	r3, #0
 801ef1c:	d00d      	beq.n	801ef3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef22:	2b04      	cmp	r3, #4
 801ef24:	d107      	bne.n	801ef36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ef26:	68fb      	ldr	r3, [r7, #12]
 801ef28:	681b      	ldr	r3, [r3, #0]
 801ef2a:	681a      	ldr	r2, [r3, #0]
 801ef2c:	68fb      	ldr	r3, [r7, #12]
 801ef2e:	681b      	ldr	r3, [r3, #0]
 801ef30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ef34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ef36:	2301      	movs	r3, #1
 801ef38:	e06b      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ef3a:	68fb      	ldr	r3, [r7, #12]
 801ef3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef3e:	781a      	ldrb	r2, [r3, #0]
 801ef40:	68fb      	ldr	r3, [r7, #12]
 801ef42:	681b      	ldr	r3, [r3, #0]
 801ef44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef4a:	1c5a      	adds	r2, r3, #1
 801ef4c:	68fb      	ldr	r3, [r7, #12]
 801ef4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef54:	b29b      	uxth	r3, r3
 801ef56:	3b01      	subs	r3, #1
 801ef58:	b29a      	uxth	r2, r3
 801ef5a:	68fb      	ldr	r3, [r7, #12]
 801ef5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef62:	3b01      	subs	r3, #1
 801ef64:	b29a      	uxth	r2, r3
 801ef66:	68fb      	ldr	r3, [r7, #12]
 801ef68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	695b      	ldr	r3, [r3, #20]
 801ef70:	f003 0304 	and.w	r3, r3, #4
 801ef74:	2b04      	cmp	r3, #4
 801ef76:	d11b      	bne.n	801efb0 <HAL_I2C_Master_Transmit+0x188>
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ef7c:	2b00      	cmp	r3, #0
 801ef7e:	d017      	beq.n	801efb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef84:	781a      	ldrb	r2, [r3, #0]
 801ef86:	68fb      	ldr	r3, [r7, #12]
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801ef8c:	68fb      	ldr	r3, [r7, #12]
 801ef8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef90:	1c5a      	adds	r2, r3, #1
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ef9a:	b29b      	uxth	r3, r3
 801ef9c:	3b01      	subs	r3, #1
 801ef9e:	b29a      	uxth	r2, r3
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801efa4:	68fb      	ldr	r3, [r7, #12]
 801efa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801efa8:	3b01      	subs	r3, #1
 801efaa:	b29a      	uxth	r2, r3
 801efac:	68fb      	ldr	r3, [r7, #12]
 801efae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801efb0:	697a      	ldr	r2, [r7, #20]
 801efb2:	6a39      	ldr	r1, [r7, #32]
 801efb4:	68f8      	ldr	r0, [r7, #12]
 801efb6:	f000 fafc 	bl	801f5b2 <I2C_WaitOnBTFFlagUntilTimeout>
 801efba:	4603      	mov	r3, r0
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d00d      	beq.n	801efdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801efc0:	68fb      	ldr	r3, [r7, #12]
 801efc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801efc4:	2b04      	cmp	r3, #4
 801efc6:	d107      	bne.n	801efd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efc8:	68fb      	ldr	r3, [r7, #12]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	681a      	ldr	r2, [r3, #0]
 801efce:	68fb      	ldr	r3, [r7, #12]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801efd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801efd8:	2301      	movs	r3, #1
 801efda:	e01a      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801efdc:	68fb      	ldr	r3, [r7, #12]
 801efde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d194      	bne.n	801ef0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801efe4:	68fb      	ldr	r3, [r7, #12]
 801efe6:	681b      	ldr	r3, [r3, #0]
 801efe8:	681a      	ldr	r2, [r3, #0]
 801efea:	68fb      	ldr	r3, [r7, #12]
 801efec:	681b      	ldr	r3, [r3, #0]
 801efee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801eff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801eff4:	68fb      	ldr	r3, [r7, #12]
 801eff6:	2220      	movs	r2, #32
 801eff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801effc:	68fb      	ldr	r3, [r7, #12]
 801effe:	2200      	movs	r2, #0
 801f000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f004:	68fb      	ldr	r3, [r7, #12]
 801f006:	2200      	movs	r2, #0
 801f008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801f00c:	2300      	movs	r3, #0
 801f00e:	e000      	b.n	801f012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801f010:	2302      	movs	r3, #2
  }
}
 801f012:	4618      	mov	r0, r3
 801f014:	3718      	adds	r7, #24
 801f016:	46bd      	mov	sp, r7
 801f018:	bd80      	pop	{r7, pc}
 801f01a:	bf00      	nop
 801f01c:	00100002 	.word	0x00100002
 801f020:	ffff0000 	.word	0xffff0000

0801f024 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801f024:	b580      	push	{r7, lr}
 801f026:	b08a      	sub	sp, #40	; 0x28
 801f028:	af02      	add	r7, sp, #8
 801f02a:	60f8      	str	r0, [r7, #12]
 801f02c:	607a      	str	r2, [r7, #4]
 801f02e:	603b      	str	r3, [r7, #0]
 801f030:	460b      	mov	r3, r1
 801f032:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801f034:	f7fe ff24 	bl	801de80 <HAL_GetTick>
 801f038:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 801f03a:	2301      	movs	r3, #1
 801f03c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801f03e:	68fb      	ldr	r3, [r7, #12]
 801f040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f044:	b2db      	uxtb	r3, r3
 801f046:	2b20      	cmp	r3, #32
 801f048:	f040 8111 	bne.w	801f26e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801f04c:	69fb      	ldr	r3, [r7, #28]
 801f04e:	9300      	str	r3, [sp, #0]
 801f050:	2319      	movs	r3, #25
 801f052:	2201      	movs	r2, #1
 801f054:	4988      	ldr	r1, [pc, #544]	; (801f278 <HAL_I2C_IsDeviceReady+0x254>)
 801f056:	68f8      	ldr	r0, [r7, #12]
 801f058:	f000 f994 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801f05c:	4603      	mov	r3, r0
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d001      	beq.n	801f066 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801f062:	2302      	movs	r3, #2
 801f064:	e104      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801f066:	68fb      	ldr	r3, [r7, #12]
 801f068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f06c:	2b01      	cmp	r3, #1
 801f06e:	d101      	bne.n	801f074 <HAL_I2C_IsDeviceReady+0x50>
 801f070:	2302      	movs	r3, #2
 801f072:	e0fd      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	2201      	movs	r2, #1
 801f078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801f07c:	68fb      	ldr	r3, [r7, #12]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	f003 0301 	and.w	r3, r3, #1
 801f086:	2b01      	cmp	r3, #1
 801f088:	d007      	beq.n	801f09a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	681a      	ldr	r2, [r3, #0]
 801f090:	68fb      	ldr	r3, [r7, #12]
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	f042 0201 	orr.w	r2, r2, #1
 801f098:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801f09a:	68fb      	ldr	r3, [r7, #12]
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	681a      	ldr	r2, [r3, #0]
 801f0a0:	68fb      	ldr	r3, [r7, #12]
 801f0a2:	681b      	ldr	r3, [r3, #0]
 801f0a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801f0a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	2224      	movs	r2, #36	; 0x24
 801f0ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801f0b2:	68fb      	ldr	r3, [r7, #12]
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801f0b8:	68fb      	ldr	r3, [r7, #12]
 801f0ba:	4a70      	ldr	r2, [pc, #448]	; (801f27c <HAL_I2C_IsDeviceReady+0x258>)
 801f0bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	681a      	ldr	r2, [r3, #0]
 801f0c4:	68fb      	ldr	r3, [r7, #12]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f0cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801f0ce:	69fb      	ldr	r3, [r7, #28]
 801f0d0:	9300      	str	r3, [sp, #0]
 801f0d2:	683b      	ldr	r3, [r7, #0]
 801f0d4:	2200      	movs	r2, #0
 801f0d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f0da:	68f8      	ldr	r0, [r7, #12]
 801f0dc:	f000 f952 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801f0e0:	4603      	mov	r3, r0
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d00d      	beq.n	801f102 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f0e6:	68fb      	ldr	r3, [r7, #12]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	681b      	ldr	r3, [r3, #0]
 801f0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f0f4:	d103      	bne.n	801f0fe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f0fc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801f0fe:	2303      	movs	r3, #3
 801f100:	e0b6      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f102:	897b      	ldrh	r3, [r7, #10]
 801f104:	b2db      	uxtb	r3, r3
 801f106:	461a      	mov	r2, r3
 801f108:	68fb      	ldr	r3, [r7, #12]
 801f10a:	681b      	ldr	r3, [r3, #0]
 801f10c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f110:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801f112:	f7fe feb5 	bl	801de80 <HAL_GetTick>
 801f116:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801f118:	68fb      	ldr	r3, [r7, #12]
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	695b      	ldr	r3, [r3, #20]
 801f11e:	f003 0302 	and.w	r3, r3, #2
 801f122:	2b02      	cmp	r3, #2
 801f124:	bf0c      	ite	eq
 801f126:	2301      	moveq	r3, #1
 801f128:	2300      	movne	r3, #0
 801f12a:	b2db      	uxtb	r3, r3
 801f12c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801f12e:	68fb      	ldr	r3, [r7, #12]
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	695b      	ldr	r3, [r3, #20]
 801f134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f13c:	bf0c      	ite	eq
 801f13e:	2301      	moveq	r3, #1
 801f140:	2300      	movne	r3, #0
 801f142:	b2db      	uxtb	r3, r3
 801f144:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801f146:	e025      	b.n	801f194 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801f148:	f7fe fe9a 	bl	801de80 <HAL_GetTick>
 801f14c:	4602      	mov	r2, r0
 801f14e:	69fb      	ldr	r3, [r7, #28]
 801f150:	1ad3      	subs	r3, r2, r3
 801f152:	683a      	ldr	r2, [r7, #0]
 801f154:	429a      	cmp	r2, r3
 801f156:	d302      	bcc.n	801f15e <HAL_I2C_IsDeviceReady+0x13a>
 801f158:	683b      	ldr	r3, [r7, #0]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d103      	bne.n	801f166 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801f15e:	68fb      	ldr	r3, [r7, #12]
 801f160:	22a0      	movs	r2, #160	; 0xa0
 801f162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801f166:	68fb      	ldr	r3, [r7, #12]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	695b      	ldr	r3, [r3, #20]
 801f16c:	f003 0302 	and.w	r3, r3, #2
 801f170:	2b02      	cmp	r3, #2
 801f172:	bf0c      	ite	eq
 801f174:	2301      	moveq	r3, #1
 801f176:	2300      	movne	r3, #0
 801f178:	b2db      	uxtb	r3, r3
 801f17a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801f17c:	68fb      	ldr	r3, [r7, #12]
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	695b      	ldr	r3, [r3, #20]
 801f182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f18a:	bf0c      	ite	eq
 801f18c:	2301      	moveq	r3, #1
 801f18e:	2300      	movne	r3, #0
 801f190:	b2db      	uxtb	r3, r3
 801f192:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801f194:	68fb      	ldr	r3, [r7, #12]
 801f196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f19a:	b2db      	uxtb	r3, r3
 801f19c:	2ba0      	cmp	r3, #160	; 0xa0
 801f19e:	d005      	beq.n	801f1ac <HAL_I2C_IsDeviceReady+0x188>
 801f1a0:	7dfb      	ldrb	r3, [r7, #23]
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d102      	bne.n	801f1ac <HAL_I2C_IsDeviceReady+0x188>
 801f1a6:	7dbb      	ldrb	r3, [r7, #22]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d0cd      	beq.n	801f148 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	2220      	movs	r2, #32
 801f1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	695b      	ldr	r3, [r3, #20]
 801f1ba:	f003 0302 	and.w	r3, r3, #2
 801f1be:	2b02      	cmp	r3, #2
 801f1c0:	d129      	bne.n	801f216 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	681a      	ldr	r2, [r3, #0]
 801f1c8:	68fb      	ldr	r3, [r7, #12]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f1d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	613b      	str	r3, [r7, #16]
 801f1d6:	68fb      	ldr	r3, [r7, #12]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	695b      	ldr	r3, [r3, #20]
 801f1dc:	613b      	str	r3, [r7, #16]
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	699b      	ldr	r3, [r3, #24]
 801f1e4:	613b      	str	r3, [r7, #16]
 801f1e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801f1e8:	69fb      	ldr	r3, [r7, #28]
 801f1ea:	9300      	str	r3, [sp, #0]
 801f1ec:	2319      	movs	r3, #25
 801f1ee:	2201      	movs	r2, #1
 801f1f0:	4921      	ldr	r1, [pc, #132]	; (801f278 <HAL_I2C_IsDeviceReady+0x254>)
 801f1f2:	68f8      	ldr	r0, [r7, #12]
 801f1f4:	f000 f8c6 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801f1f8:	4603      	mov	r3, r0
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d001      	beq.n	801f202 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801f1fe:	2301      	movs	r3, #1
 801f200:	e036      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801f202:	68fb      	ldr	r3, [r7, #12]
 801f204:	2220      	movs	r2, #32
 801f206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f20a:	68fb      	ldr	r3, [r7, #12]
 801f20c:	2200      	movs	r2, #0
 801f20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801f212:	2300      	movs	r3, #0
 801f214:	e02c      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	681a      	ldr	r2, [r3, #0]
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f224:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f226:	68fb      	ldr	r3, [r7, #12]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f22e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801f230:	69fb      	ldr	r3, [r7, #28]
 801f232:	9300      	str	r3, [sp, #0]
 801f234:	2319      	movs	r3, #25
 801f236:	2201      	movs	r2, #1
 801f238:	490f      	ldr	r1, [pc, #60]	; (801f278 <HAL_I2C_IsDeviceReady+0x254>)
 801f23a:	68f8      	ldr	r0, [r7, #12]
 801f23c:	f000 f8a2 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801f240:	4603      	mov	r3, r0
 801f242:	2b00      	cmp	r3, #0
 801f244:	d001      	beq.n	801f24a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801f246:	2301      	movs	r3, #1
 801f248:	e012      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801f24a:	69bb      	ldr	r3, [r7, #24]
 801f24c:	3301      	adds	r3, #1
 801f24e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801f250:	69ba      	ldr	r2, [r7, #24]
 801f252:	687b      	ldr	r3, [r7, #4]
 801f254:	429a      	cmp	r2, r3
 801f256:	f4ff af32 	bcc.w	801f0be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	2220      	movs	r2, #32
 801f25e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	2200      	movs	r2, #0
 801f266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f26a:	2301      	movs	r3, #1
 801f26c:	e000      	b.n	801f270 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801f26e:	2302      	movs	r3, #2
  }
}
 801f270:	4618      	mov	r0, r3
 801f272:	3720      	adds	r7, #32
 801f274:	46bd      	mov	sp, r7
 801f276:	bd80      	pop	{r7, pc}
 801f278:	00100002 	.word	0x00100002
 801f27c:	ffff0000 	.word	0xffff0000

0801f280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801f280:	b580      	push	{r7, lr}
 801f282:	b088      	sub	sp, #32
 801f284:	af02      	add	r7, sp, #8
 801f286:	60f8      	str	r0, [r7, #12]
 801f288:	607a      	str	r2, [r7, #4]
 801f28a:	603b      	str	r3, [r7, #0]
 801f28c:	460b      	mov	r3, r1
 801f28e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801f296:	697b      	ldr	r3, [r7, #20]
 801f298:	2b08      	cmp	r3, #8
 801f29a:	d006      	beq.n	801f2aa <I2C_MasterRequestWrite+0x2a>
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	2b01      	cmp	r3, #1
 801f2a0:	d003      	beq.n	801f2aa <I2C_MasterRequestWrite+0x2a>
 801f2a2:	697b      	ldr	r3, [r7, #20]
 801f2a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f2a8:	d108      	bne.n	801f2bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	681a      	ldr	r2, [r3, #0]
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f2b8:	601a      	str	r2, [r3, #0]
 801f2ba:	e00b      	b.n	801f2d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801f2bc:	68fb      	ldr	r3, [r7, #12]
 801f2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f2c0:	2b12      	cmp	r3, #18
 801f2c2:	d107      	bne.n	801f2d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	681a      	ldr	r2, [r3, #0]
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f2d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f2d4:	683b      	ldr	r3, [r7, #0]
 801f2d6:	9300      	str	r3, [sp, #0]
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	2200      	movs	r2, #0
 801f2dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f2e0:	68f8      	ldr	r0, [r7, #12]
 801f2e2:	f000 f84f 	bl	801f384 <I2C_WaitOnFlagUntilTimeout>
 801f2e6:	4603      	mov	r3, r0
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	d00d      	beq.n	801f308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f2f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f2fa:	d103      	bne.n	801f304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f2fc:	68fb      	ldr	r3, [r7, #12]
 801f2fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f302:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f304:	2303      	movs	r3, #3
 801f306:	e035      	b.n	801f374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	691b      	ldr	r3, [r3, #16]
 801f30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f310:	d108      	bne.n	801f324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f312:	897b      	ldrh	r3, [r7, #10]
 801f314:	b2db      	uxtb	r3, r3
 801f316:	461a      	mov	r2, r3
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	681b      	ldr	r3, [r3, #0]
 801f31c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f320:	611a      	str	r2, [r3, #16]
 801f322:	e01b      	b.n	801f35c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801f324:	897b      	ldrh	r3, [r7, #10]
 801f326:	11db      	asrs	r3, r3, #7
 801f328:	b2db      	uxtb	r3, r3
 801f32a:	f003 0306 	and.w	r3, r3, #6
 801f32e:	b2db      	uxtb	r3, r3
 801f330:	f063 030f 	orn	r3, r3, #15
 801f334:	b2da      	uxtb	r2, r3
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801f33c:	683b      	ldr	r3, [r7, #0]
 801f33e:	687a      	ldr	r2, [r7, #4]
 801f340:	490e      	ldr	r1, [pc, #56]	; (801f37c <I2C_MasterRequestWrite+0xfc>)
 801f342:	68f8      	ldr	r0, [r7, #12]
 801f344:	f000 f875 	bl	801f432 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f348:	4603      	mov	r3, r0
 801f34a:	2b00      	cmp	r3, #0
 801f34c:	d001      	beq.n	801f352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801f34e:	2301      	movs	r3, #1
 801f350:	e010      	b.n	801f374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801f352:	897b      	ldrh	r3, [r7, #10]
 801f354:	b2da      	uxtb	r2, r3
 801f356:	68fb      	ldr	r3, [r7, #12]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f35c:	683b      	ldr	r3, [r7, #0]
 801f35e:	687a      	ldr	r2, [r7, #4]
 801f360:	4907      	ldr	r1, [pc, #28]	; (801f380 <I2C_MasterRequestWrite+0x100>)
 801f362:	68f8      	ldr	r0, [r7, #12]
 801f364:	f000 f865 	bl	801f432 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f368:	4603      	mov	r3, r0
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d001      	beq.n	801f372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801f36e:	2301      	movs	r3, #1
 801f370:	e000      	b.n	801f374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801f372:	2300      	movs	r3, #0
}
 801f374:	4618      	mov	r0, r3
 801f376:	3718      	adds	r7, #24
 801f378:	46bd      	mov	sp, r7
 801f37a:	bd80      	pop	{r7, pc}
 801f37c:	00010008 	.word	0x00010008
 801f380:	00010002 	.word	0x00010002

0801f384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f384:	b580      	push	{r7, lr}
 801f386:	b084      	sub	sp, #16
 801f388:	af00      	add	r7, sp, #0
 801f38a:	60f8      	str	r0, [r7, #12]
 801f38c:	60b9      	str	r1, [r7, #8]
 801f38e:	603b      	str	r3, [r7, #0]
 801f390:	4613      	mov	r3, r2
 801f392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f394:	e025      	b.n	801f3e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f396:	683b      	ldr	r3, [r7, #0]
 801f398:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f39c:	d021      	beq.n	801f3e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f39e:	f7fe fd6f 	bl	801de80 <HAL_GetTick>
 801f3a2:	4602      	mov	r2, r0
 801f3a4:	69bb      	ldr	r3, [r7, #24]
 801f3a6:	1ad3      	subs	r3, r2, r3
 801f3a8:	683a      	ldr	r2, [r7, #0]
 801f3aa:	429a      	cmp	r2, r3
 801f3ac:	d302      	bcc.n	801f3b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 801f3ae:	683b      	ldr	r3, [r7, #0]
 801f3b0:	2b00      	cmp	r3, #0
 801f3b2:	d116      	bne.n	801f3e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	2200      	movs	r2, #0
 801f3b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	2220      	movs	r2, #32
 801f3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	2200      	movs	r2, #0
 801f3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ce:	f043 0220 	orr.w	r2, r3, #32
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	2200      	movs	r2, #0
 801f3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f3de:	2301      	movs	r3, #1
 801f3e0:	e023      	b.n	801f42a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f3e2:	68bb      	ldr	r3, [r7, #8]
 801f3e4:	0c1b      	lsrs	r3, r3, #16
 801f3e6:	b2db      	uxtb	r3, r3
 801f3e8:	2b01      	cmp	r3, #1
 801f3ea:	d10d      	bne.n	801f408 <I2C_WaitOnFlagUntilTimeout+0x84>
 801f3ec:	68fb      	ldr	r3, [r7, #12]
 801f3ee:	681b      	ldr	r3, [r3, #0]
 801f3f0:	695b      	ldr	r3, [r3, #20]
 801f3f2:	43da      	mvns	r2, r3
 801f3f4:	68bb      	ldr	r3, [r7, #8]
 801f3f6:	4013      	ands	r3, r2
 801f3f8:	b29b      	uxth	r3, r3
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	bf0c      	ite	eq
 801f3fe:	2301      	moveq	r3, #1
 801f400:	2300      	movne	r3, #0
 801f402:	b2db      	uxtb	r3, r3
 801f404:	461a      	mov	r2, r3
 801f406:	e00c      	b.n	801f422 <I2C_WaitOnFlagUntilTimeout+0x9e>
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	699b      	ldr	r3, [r3, #24]
 801f40e:	43da      	mvns	r2, r3
 801f410:	68bb      	ldr	r3, [r7, #8]
 801f412:	4013      	ands	r3, r2
 801f414:	b29b      	uxth	r3, r3
 801f416:	2b00      	cmp	r3, #0
 801f418:	bf0c      	ite	eq
 801f41a:	2301      	moveq	r3, #1
 801f41c:	2300      	movne	r3, #0
 801f41e:	b2db      	uxtb	r3, r3
 801f420:	461a      	mov	r2, r3
 801f422:	79fb      	ldrb	r3, [r7, #7]
 801f424:	429a      	cmp	r2, r3
 801f426:	d0b6      	beq.n	801f396 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801f428:	2300      	movs	r3, #0
}
 801f42a:	4618      	mov	r0, r3
 801f42c:	3710      	adds	r7, #16
 801f42e:	46bd      	mov	sp, r7
 801f430:	bd80      	pop	{r7, pc}

0801f432 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801f432:	b580      	push	{r7, lr}
 801f434:	b084      	sub	sp, #16
 801f436:	af00      	add	r7, sp, #0
 801f438:	60f8      	str	r0, [r7, #12]
 801f43a:	60b9      	str	r1, [r7, #8]
 801f43c:	607a      	str	r2, [r7, #4]
 801f43e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f440:	e051      	b.n	801f4e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	695b      	ldr	r3, [r3, #20]
 801f448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f44c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f450:	d123      	bne.n	801f49a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	681a      	ldr	r2, [r3, #0]
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f460:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f462:	68fb      	ldr	r3, [r7, #12]
 801f464:	681b      	ldr	r3, [r3, #0]
 801f466:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f46a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	2200      	movs	r2, #0
 801f470:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	2220      	movs	r2, #32
 801f476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f47a:	68fb      	ldr	r3, [r7, #12]
 801f47c:	2200      	movs	r2, #0
 801f47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f482:	68fb      	ldr	r3, [r7, #12]
 801f484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f486:	f043 0204 	orr.w	r2, r3, #4
 801f48a:	68fb      	ldr	r3, [r7, #12]
 801f48c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801f48e:	68fb      	ldr	r3, [r7, #12]
 801f490:	2200      	movs	r2, #0
 801f492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801f496:	2301      	movs	r3, #1
 801f498:	e046      	b.n	801f528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f4a0:	d021      	beq.n	801f4e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f4a2:	f7fe fced 	bl	801de80 <HAL_GetTick>
 801f4a6:	4602      	mov	r2, r0
 801f4a8:	683b      	ldr	r3, [r7, #0]
 801f4aa:	1ad3      	subs	r3, r2, r3
 801f4ac:	687a      	ldr	r2, [r7, #4]
 801f4ae:	429a      	cmp	r2, r3
 801f4b0:	d302      	bcc.n	801f4b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	2b00      	cmp	r3, #0
 801f4b6:	d116      	bne.n	801f4e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f4b8:	68fb      	ldr	r3, [r7, #12]
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	2220      	movs	r2, #32
 801f4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f4c6:	68fb      	ldr	r3, [r7, #12]
 801f4c8:	2200      	movs	r2, #0
 801f4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4d2:	f043 0220 	orr.w	r2, r3, #32
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	2200      	movs	r2, #0
 801f4de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f4e2:	2301      	movs	r3, #1
 801f4e4:	e020      	b.n	801f528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f4e6:	68bb      	ldr	r3, [r7, #8]
 801f4e8:	0c1b      	lsrs	r3, r3, #16
 801f4ea:	b2db      	uxtb	r3, r3
 801f4ec:	2b01      	cmp	r3, #1
 801f4ee:	d10c      	bne.n	801f50a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	695b      	ldr	r3, [r3, #20]
 801f4f6:	43da      	mvns	r2, r3
 801f4f8:	68bb      	ldr	r3, [r7, #8]
 801f4fa:	4013      	ands	r3, r2
 801f4fc:	b29b      	uxth	r3, r3
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	bf14      	ite	ne
 801f502:	2301      	movne	r3, #1
 801f504:	2300      	moveq	r3, #0
 801f506:	b2db      	uxtb	r3, r3
 801f508:	e00b      	b.n	801f522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801f50a:	68fb      	ldr	r3, [r7, #12]
 801f50c:	681b      	ldr	r3, [r3, #0]
 801f50e:	699b      	ldr	r3, [r3, #24]
 801f510:	43da      	mvns	r2, r3
 801f512:	68bb      	ldr	r3, [r7, #8]
 801f514:	4013      	ands	r3, r2
 801f516:	b29b      	uxth	r3, r3
 801f518:	2b00      	cmp	r3, #0
 801f51a:	bf14      	ite	ne
 801f51c:	2301      	movne	r3, #1
 801f51e:	2300      	moveq	r3, #0
 801f520:	b2db      	uxtb	r3, r3
 801f522:	2b00      	cmp	r3, #0
 801f524:	d18d      	bne.n	801f442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801f526:	2300      	movs	r3, #0
}
 801f528:	4618      	mov	r0, r3
 801f52a:	3710      	adds	r7, #16
 801f52c:	46bd      	mov	sp, r7
 801f52e:	bd80      	pop	{r7, pc}

0801f530 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f530:	b580      	push	{r7, lr}
 801f532:	b084      	sub	sp, #16
 801f534:	af00      	add	r7, sp, #0
 801f536:	60f8      	str	r0, [r7, #12]
 801f538:	60b9      	str	r1, [r7, #8]
 801f53a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f53c:	e02d      	b.n	801f59a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f53e:	68f8      	ldr	r0, [r7, #12]
 801f540:	f000 f878 	bl	801f634 <I2C_IsAcknowledgeFailed>
 801f544:	4603      	mov	r3, r0
 801f546:	2b00      	cmp	r3, #0
 801f548:	d001      	beq.n	801f54e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f54a:	2301      	movs	r3, #1
 801f54c:	e02d      	b.n	801f5aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f54e:	68bb      	ldr	r3, [r7, #8]
 801f550:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f554:	d021      	beq.n	801f59a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f556:	f7fe fc93 	bl	801de80 <HAL_GetTick>
 801f55a:	4602      	mov	r2, r0
 801f55c:	687b      	ldr	r3, [r7, #4]
 801f55e:	1ad3      	subs	r3, r2, r3
 801f560:	68ba      	ldr	r2, [r7, #8]
 801f562:	429a      	cmp	r2, r3
 801f564:	d302      	bcc.n	801f56c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f566:	68bb      	ldr	r3, [r7, #8]
 801f568:	2b00      	cmp	r3, #0
 801f56a:	d116      	bne.n	801f59a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f56c:	68fb      	ldr	r3, [r7, #12]
 801f56e:	2200      	movs	r2, #0
 801f570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	2220      	movs	r2, #32
 801f576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f57a:	68fb      	ldr	r3, [r7, #12]
 801f57c:	2200      	movs	r2, #0
 801f57e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f586:	f043 0220 	orr.w	r2, r3, #32
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f58e:	68fb      	ldr	r3, [r7, #12]
 801f590:	2200      	movs	r2, #0
 801f592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f596:	2301      	movs	r3, #1
 801f598:	e007      	b.n	801f5aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	695b      	ldr	r3, [r3, #20]
 801f5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f5a4:	2b80      	cmp	r3, #128	; 0x80
 801f5a6:	d1ca      	bne.n	801f53e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f5a8:	2300      	movs	r3, #0
}
 801f5aa:	4618      	mov	r0, r3
 801f5ac:	3710      	adds	r7, #16
 801f5ae:	46bd      	mov	sp, r7
 801f5b0:	bd80      	pop	{r7, pc}

0801f5b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f5b2:	b580      	push	{r7, lr}
 801f5b4:	b084      	sub	sp, #16
 801f5b6:	af00      	add	r7, sp, #0
 801f5b8:	60f8      	str	r0, [r7, #12]
 801f5ba:	60b9      	str	r1, [r7, #8]
 801f5bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f5be:	e02d      	b.n	801f61c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f5c0:	68f8      	ldr	r0, [r7, #12]
 801f5c2:	f000 f837 	bl	801f634 <I2C_IsAcknowledgeFailed>
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d001      	beq.n	801f5d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f5cc:	2301      	movs	r3, #1
 801f5ce:	e02d      	b.n	801f62c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f5d0:	68bb      	ldr	r3, [r7, #8]
 801f5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5d6:	d021      	beq.n	801f61c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f5d8:	f7fe fc52 	bl	801de80 <HAL_GetTick>
 801f5dc:	4602      	mov	r2, r0
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	1ad3      	subs	r3, r2, r3
 801f5e2:	68ba      	ldr	r2, [r7, #8]
 801f5e4:	429a      	cmp	r2, r3
 801f5e6:	d302      	bcc.n	801f5ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801f5e8:	68bb      	ldr	r3, [r7, #8]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d116      	bne.n	801f61c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f5ee:	68fb      	ldr	r3, [r7, #12]
 801f5f0:	2200      	movs	r2, #0
 801f5f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f5f4:	68fb      	ldr	r3, [r7, #12]
 801f5f6:	2220      	movs	r2, #32
 801f5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f5fc:	68fb      	ldr	r3, [r7, #12]
 801f5fe:	2200      	movs	r2, #0
 801f600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f608:	f043 0220 	orr.w	r2, r3, #32
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f610:	68fb      	ldr	r3, [r7, #12]
 801f612:	2200      	movs	r2, #0
 801f614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f618:	2301      	movs	r3, #1
 801f61a:	e007      	b.n	801f62c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	695b      	ldr	r3, [r3, #20]
 801f622:	f003 0304 	and.w	r3, r3, #4
 801f626:	2b04      	cmp	r3, #4
 801f628:	d1ca      	bne.n	801f5c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f62a:	2300      	movs	r3, #0
}
 801f62c:	4618      	mov	r0, r3
 801f62e:	3710      	adds	r7, #16
 801f630:	46bd      	mov	sp, r7
 801f632:	bd80      	pop	{r7, pc}

0801f634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801f634:	b480      	push	{r7}
 801f636:	b083      	sub	sp, #12
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	681b      	ldr	r3, [r3, #0]
 801f640:	695b      	ldr	r3, [r3, #20]
 801f642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f64a:	d11b      	bne.n	801f684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	2200      	movs	r2, #0
 801f65a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801f65c:	687b      	ldr	r3, [r7, #4]
 801f65e:	2220      	movs	r2, #32
 801f660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	2200      	movs	r2, #0
 801f668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f670:	f043 0204 	orr.w	r2, r3, #4
 801f674:	687b      	ldr	r3, [r7, #4]
 801f676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	2200      	movs	r2, #0
 801f67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f680:	2301      	movs	r3, #1
 801f682:	e000      	b.n	801f686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f684:	2300      	movs	r3, #0
}
 801f686:	4618      	mov	r0, r3
 801f688:	370c      	adds	r7, #12
 801f68a:	46bd      	mov	sp, r7
 801f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f690:	4770      	bx	lr
	...

0801f694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f694:	b580      	push	{r7, lr}
 801f696:	b086      	sub	sp, #24
 801f698:	af00      	add	r7, sp, #0
 801f69a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d101      	bne.n	801f6a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f6a2:	2301      	movs	r3, #1
 801f6a4:	e25b      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	f003 0301 	and.w	r3, r3, #1
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d075      	beq.n	801f79e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f6b2:	4ba3      	ldr	r3, [pc, #652]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f6b4:	689b      	ldr	r3, [r3, #8]
 801f6b6:	f003 030c 	and.w	r3, r3, #12
 801f6ba:	2b04      	cmp	r3, #4
 801f6bc:	d00c      	beq.n	801f6d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f6be:	4ba0      	ldr	r3, [pc, #640]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f6c0:	689b      	ldr	r3, [r3, #8]
 801f6c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f6c6:	2b08      	cmp	r3, #8
 801f6c8:	d112      	bne.n	801f6f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f6ca:	4b9d      	ldr	r3, [pc, #628]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f6cc:	685b      	ldr	r3, [r3, #4]
 801f6ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f6d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f6d6:	d10b      	bne.n	801f6f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f6d8:	4b99      	ldr	r3, [pc, #612]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f6da:	681b      	ldr	r3, [r3, #0]
 801f6dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d05b      	beq.n	801f79c <HAL_RCC_OscConfig+0x108>
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	685b      	ldr	r3, [r3, #4]
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d157      	bne.n	801f79c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f6ec:	2301      	movs	r3, #1
 801f6ee:	e236      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f6f0:	687b      	ldr	r3, [r7, #4]
 801f6f2:	685b      	ldr	r3, [r3, #4]
 801f6f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f6f8:	d106      	bne.n	801f708 <HAL_RCC_OscConfig+0x74>
 801f6fa:	4b91      	ldr	r3, [pc, #580]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f6fc:	681b      	ldr	r3, [r3, #0]
 801f6fe:	4a90      	ldr	r2, [pc, #576]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f704:	6013      	str	r3, [r2, #0]
 801f706:	e01d      	b.n	801f744 <HAL_RCC_OscConfig+0xb0>
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	685b      	ldr	r3, [r3, #4]
 801f70c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f710:	d10c      	bne.n	801f72c <HAL_RCC_OscConfig+0x98>
 801f712:	4b8b      	ldr	r3, [pc, #556]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	4a8a      	ldr	r2, [pc, #552]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f71c:	6013      	str	r3, [r2, #0]
 801f71e:	4b88      	ldr	r3, [pc, #544]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	4a87      	ldr	r2, [pc, #540]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f728:	6013      	str	r3, [r2, #0]
 801f72a:	e00b      	b.n	801f744 <HAL_RCC_OscConfig+0xb0>
 801f72c:	4b84      	ldr	r3, [pc, #528]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f72e:	681b      	ldr	r3, [r3, #0]
 801f730:	4a83      	ldr	r2, [pc, #524]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f736:	6013      	str	r3, [r2, #0]
 801f738:	4b81      	ldr	r3, [pc, #516]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	4a80      	ldr	r2, [pc, #512]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f73e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	685b      	ldr	r3, [r3, #4]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d013      	beq.n	801f774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f74c:	f7fe fb98 	bl	801de80 <HAL_GetTick>
 801f750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f752:	e008      	b.n	801f766 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f754:	f7fe fb94 	bl	801de80 <HAL_GetTick>
 801f758:	4602      	mov	r2, r0
 801f75a:	693b      	ldr	r3, [r7, #16]
 801f75c:	1ad3      	subs	r3, r2, r3
 801f75e:	2b64      	cmp	r3, #100	; 0x64
 801f760:	d901      	bls.n	801f766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f762:	2303      	movs	r3, #3
 801f764:	e1fb      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f766:	4b76      	ldr	r3, [pc, #472]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f76e:	2b00      	cmp	r3, #0
 801f770:	d0f0      	beq.n	801f754 <HAL_RCC_OscConfig+0xc0>
 801f772:	e014      	b.n	801f79e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f774:	f7fe fb84 	bl	801de80 <HAL_GetTick>
 801f778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f77a:	e008      	b.n	801f78e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f77c:	f7fe fb80 	bl	801de80 <HAL_GetTick>
 801f780:	4602      	mov	r2, r0
 801f782:	693b      	ldr	r3, [r7, #16]
 801f784:	1ad3      	subs	r3, r2, r3
 801f786:	2b64      	cmp	r3, #100	; 0x64
 801f788:	d901      	bls.n	801f78e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f78a:	2303      	movs	r3, #3
 801f78c:	e1e7      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f78e:	4b6c      	ldr	r3, [pc, #432]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f796:	2b00      	cmp	r3, #0
 801f798:	d1f0      	bne.n	801f77c <HAL_RCC_OscConfig+0xe8>
 801f79a:	e000      	b.n	801f79e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f79c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	f003 0302 	and.w	r3, r3, #2
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d063      	beq.n	801f872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f7aa:	4b65      	ldr	r3, [pc, #404]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7ac:	689b      	ldr	r3, [r3, #8]
 801f7ae:	f003 030c 	and.w	r3, r3, #12
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d00b      	beq.n	801f7ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f7b6:	4b62      	ldr	r3, [pc, #392]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7b8:	689b      	ldr	r3, [r3, #8]
 801f7ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f7be:	2b08      	cmp	r3, #8
 801f7c0:	d11c      	bne.n	801f7fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f7c2:	4b5f      	ldr	r3, [pc, #380]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7c4:	685b      	ldr	r3, [r3, #4]
 801f7c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f7ca:	2b00      	cmp	r3, #0
 801f7cc:	d116      	bne.n	801f7fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f7ce:	4b5c      	ldr	r3, [pc, #368]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	f003 0302 	and.w	r3, r3, #2
 801f7d6:	2b00      	cmp	r3, #0
 801f7d8:	d005      	beq.n	801f7e6 <HAL_RCC_OscConfig+0x152>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	68db      	ldr	r3, [r3, #12]
 801f7de:	2b01      	cmp	r3, #1
 801f7e0:	d001      	beq.n	801f7e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f7e2:	2301      	movs	r3, #1
 801f7e4:	e1bb      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f7e6:	4b56      	ldr	r3, [pc, #344]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f7ee:	687b      	ldr	r3, [r7, #4]
 801f7f0:	691b      	ldr	r3, [r3, #16]
 801f7f2:	00db      	lsls	r3, r3, #3
 801f7f4:	4952      	ldr	r1, [pc, #328]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f7f6:	4313      	orrs	r3, r2
 801f7f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f7fa:	e03a      	b.n	801f872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f7fc:	687b      	ldr	r3, [r7, #4]
 801f7fe:	68db      	ldr	r3, [r3, #12]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d020      	beq.n	801f846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f804:	4b4f      	ldr	r3, [pc, #316]	; (801f944 <HAL_RCC_OscConfig+0x2b0>)
 801f806:	2201      	movs	r2, #1
 801f808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f80a:	f7fe fb39 	bl	801de80 <HAL_GetTick>
 801f80e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f810:	e008      	b.n	801f824 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f812:	f7fe fb35 	bl	801de80 <HAL_GetTick>
 801f816:	4602      	mov	r2, r0
 801f818:	693b      	ldr	r3, [r7, #16]
 801f81a:	1ad3      	subs	r3, r2, r3
 801f81c:	2b02      	cmp	r3, #2
 801f81e:	d901      	bls.n	801f824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f820:	2303      	movs	r3, #3
 801f822:	e19c      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f824:	4b46      	ldr	r3, [pc, #280]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f826:	681b      	ldr	r3, [r3, #0]
 801f828:	f003 0302 	and.w	r3, r3, #2
 801f82c:	2b00      	cmp	r3, #0
 801f82e:	d0f0      	beq.n	801f812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f830:	4b43      	ldr	r3, [pc, #268]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	691b      	ldr	r3, [r3, #16]
 801f83c:	00db      	lsls	r3, r3, #3
 801f83e:	4940      	ldr	r1, [pc, #256]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f840:	4313      	orrs	r3, r2
 801f842:	600b      	str	r3, [r1, #0]
 801f844:	e015      	b.n	801f872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f846:	4b3f      	ldr	r3, [pc, #252]	; (801f944 <HAL_RCC_OscConfig+0x2b0>)
 801f848:	2200      	movs	r2, #0
 801f84a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f84c:	f7fe fb18 	bl	801de80 <HAL_GetTick>
 801f850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f852:	e008      	b.n	801f866 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f854:	f7fe fb14 	bl	801de80 <HAL_GetTick>
 801f858:	4602      	mov	r2, r0
 801f85a:	693b      	ldr	r3, [r7, #16]
 801f85c:	1ad3      	subs	r3, r2, r3
 801f85e:	2b02      	cmp	r3, #2
 801f860:	d901      	bls.n	801f866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f862:	2303      	movs	r3, #3
 801f864:	e17b      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f866:	4b36      	ldr	r3, [pc, #216]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f868:	681b      	ldr	r3, [r3, #0]
 801f86a:	f003 0302 	and.w	r3, r3, #2
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d1f0      	bne.n	801f854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	f003 0308 	and.w	r3, r3, #8
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d030      	beq.n	801f8e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	695b      	ldr	r3, [r3, #20]
 801f882:	2b00      	cmp	r3, #0
 801f884:	d016      	beq.n	801f8b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f886:	4b30      	ldr	r3, [pc, #192]	; (801f948 <HAL_RCC_OscConfig+0x2b4>)
 801f888:	2201      	movs	r2, #1
 801f88a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f88c:	f7fe faf8 	bl	801de80 <HAL_GetTick>
 801f890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f892:	e008      	b.n	801f8a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f894:	f7fe faf4 	bl	801de80 <HAL_GetTick>
 801f898:	4602      	mov	r2, r0
 801f89a:	693b      	ldr	r3, [r7, #16]
 801f89c:	1ad3      	subs	r3, r2, r3
 801f89e:	2b02      	cmp	r3, #2
 801f8a0:	d901      	bls.n	801f8a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f8a2:	2303      	movs	r3, #3
 801f8a4:	e15b      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f8a6:	4b26      	ldr	r3, [pc, #152]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f8aa:	f003 0302 	and.w	r3, r3, #2
 801f8ae:	2b00      	cmp	r3, #0
 801f8b0:	d0f0      	beq.n	801f894 <HAL_RCC_OscConfig+0x200>
 801f8b2:	e015      	b.n	801f8e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f8b4:	4b24      	ldr	r3, [pc, #144]	; (801f948 <HAL_RCC_OscConfig+0x2b4>)
 801f8b6:	2200      	movs	r2, #0
 801f8b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f8ba:	f7fe fae1 	bl	801de80 <HAL_GetTick>
 801f8be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f8c0:	e008      	b.n	801f8d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f8c2:	f7fe fadd 	bl	801de80 <HAL_GetTick>
 801f8c6:	4602      	mov	r2, r0
 801f8c8:	693b      	ldr	r3, [r7, #16]
 801f8ca:	1ad3      	subs	r3, r2, r3
 801f8cc:	2b02      	cmp	r3, #2
 801f8ce:	d901      	bls.n	801f8d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801f8d0:	2303      	movs	r3, #3
 801f8d2:	e144      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f8d4:	4b1a      	ldr	r3, [pc, #104]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f8d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f8d8:	f003 0302 	and.w	r3, r3, #2
 801f8dc:	2b00      	cmp	r3, #0
 801f8de:	d1f0      	bne.n	801f8c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	f003 0304 	and.w	r3, r3, #4
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	f000 80a0 	beq.w	801fa2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f8ee:	2300      	movs	r3, #0
 801f8f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f8f2:	4b13      	ldr	r3, [pc, #76]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f8fa:	2b00      	cmp	r3, #0
 801f8fc:	d10f      	bne.n	801f91e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f8fe:	2300      	movs	r3, #0
 801f900:	60bb      	str	r3, [r7, #8]
 801f902:	4b0f      	ldr	r3, [pc, #60]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f906:	4a0e      	ldr	r2, [pc, #56]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f90c:	6413      	str	r3, [r2, #64]	; 0x40
 801f90e:	4b0c      	ldr	r3, [pc, #48]	; (801f940 <HAL_RCC_OscConfig+0x2ac>)
 801f910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f916:	60bb      	str	r3, [r7, #8]
 801f918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f91a:	2301      	movs	r3, #1
 801f91c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f91e:	4b0b      	ldr	r3, [pc, #44]	; (801f94c <HAL_RCC_OscConfig+0x2b8>)
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f926:	2b00      	cmp	r3, #0
 801f928:	d121      	bne.n	801f96e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f92a:	4b08      	ldr	r3, [pc, #32]	; (801f94c <HAL_RCC_OscConfig+0x2b8>)
 801f92c:	681b      	ldr	r3, [r3, #0]
 801f92e:	4a07      	ldr	r2, [pc, #28]	; (801f94c <HAL_RCC_OscConfig+0x2b8>)
 801f930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f936:	f7fe faa3 	bl	801de80 <HAL_GetTick>
 801f93a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f93c:	e011      	b.n	801f962 <HAL_RCC_OscConfig+0x2ce>
 801f93e:	bf00      	nop
 801f940:	40023800 	.word	0x40023800
 801f944:	42470000 	.word	0x42470000
 801f948:	42470e80 	.word	0x42470e80
 801f94c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f950:	f7fe fa96 	bl	801de80 <HAL_GetTick>
 801f954:	4602      	mov	r2, r0
 801f956:	693b      	ldr	r3, [r7, #16]
 801f958:	1ad3      	subs	r3, r2, r3
 801f95a:	2b02      	cmp	r3, #2
 801f95c:	d901      	bls.n	801f962 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801f95e:	2303      	movs	r3, #3
 801f960:	e0fd      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f962:	4b81      	ldr	r3, [pc, #516]	; (801fb68 <HAL_RCC_OscConfig+0x4d4>)
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d0f0      	beq.n	801f950 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	689b      	ldr	r3, [r3, #8]
 801f972:	2b01      	cmp	r3, #1
 801f974:	d106      	bne.n	801f984 <HAL_RCC_OscConfig+0x2f0>
 801f976:	4b7d      	ldr	r3, [pc, #500]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f97a:	4a7c      	ldr	r2, [pc, #496]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f97c:	f043 0301 	orr.w	r3, r3, #1
 801f980:	6713      	str	r3, [r2, #112]	; 0x70
 801f982:	e01c      	b.n	801f9be <HAL_RCC_OscConfig+0x32a>
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	689b      	ldr	r3, [r3, #8]
 801f988:	2b05      	cmp	r3, #5
 801f98a:	d10c      	bne.n	801f9a6 <HAL_RCC_OscConfig+0x312>
 801f98c:	4b77      	ldr	r3, [pc, #476]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f98e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f990:	4a76      	ldr	r2, [pc, #472]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f992:	f043 0304 	orr.w	r3, r3, #4
 801f996:	6713      	str	r3, [r2, #112]	; 0x70
 801f998:	4b74      	ldr	r3, [pc, #464]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f99a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f99c:	4a73      	ldr	r2, [pc, #460]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f99e:	f043 0301 	orr.w	r3, r3, #1
 801f9a2:	6713      	str	r3, [r2, #112]	; 0x70
 801f9a4:	e00b      	b.n	801f9be <HAL_RCC_OscConfig+0x32a>
 801f9a6:	4b71      	ldr	r3, [pc, #452]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9aa:	4a70      	ldr	r2, [pc, #448]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f9ac:	f023 0301 	bic.w	r3, r3, #1
 801f9b0:	6713      	str	r3, [r2, #112]	; 0x70
 801f9b2:	4b6e      	ldr	r3, [pc, #440]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f9b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9b6:	4a6d      	ldr	r2, [pc, #436]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f9b8:	f023 0304 	bic.w	r3, r3, #4
 801f9bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	689b      	ldr	r3, [r3, #8]
 801f9c2:	2b00      	cmp	r3, #0
 801f9c4:	d015      	beq.n	801f9f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f9c6:	f7fe fa5b 	bl	801de80 <HAL_GetTick>
 801f9ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f9cc:	e00a      	b.n	801f9e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f9ce:	f7fe fa57 	bl	801de80 <HAL_GetTick>
 801f9d2:	4602      	mov	r2, r0
 801f9d4:	693b      	ldr	r3, [r7, #16]
 801f9d6:	1ad3      	subs	r3, r2, r3
 801f9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 801f9dc:	4293      	cmp	r3, r2
 801f9de:	d901      	bls.n	801f9e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801f9e0:	2303      	movs	r3, #3
 801f9e2:	e0bc      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f9e4:	4b61      	ldr	r3, [pc, #388]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801f9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f9e8:	f003 0302 	and.w	r3, r3, #2
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d0ee      	beq.n	801f9ce <HAL_RCC_OscConfig+0x33a>
 801f9f0:	e014      	b.n	801fa1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f9f2:	f7fe fa45 	bl	801de80 <HAL_GetTick>
 801f9f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f9f8:	e00a      	b.n	801fa10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f9fa:	f7fe fa41 	bl	801de80 <HAL_GetTick>
 801f9fe:	4602      	mov	r2, r0
 801fa00:	693b      	ldr	r3, [r7, #16]
 801fa02:	1ad3      	subs	r3, r2, r3
 801fa04:	f241 3288 	movw	r2, #5000	; 0x1388
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	d901      	bls.n	801fa10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801fa0c:	2303      	movs	r3, #3
 801fa0e:	e0a6      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801fa10:	4b56      	ldr	r3, [pc, #344]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fa14:	f003 0302 	and.w	r3, r3, #2
 801fa18:	2b00      	cmp	r3, #0
 801fa1a:	d1ee      	bne.n	801f9fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801fa1c:	7dfb      	ldrb	r3, [r7, #23]
 801fa1e:	2b01      	cmp	r3, #1
 801fa20:	d105      	bne.n	801fa2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801fa22:	4b52      	ldr	r3, [pc, #328]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801fa26:	4a51      	ldr	r2, [pc, #324]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801fa2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	699b      	ldr	r3, [r3, #24]
 801fa32:	2b00      	cmp	r3, #0
 801fa34:	f000 8092 	beq.w	801fb5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801fa38:	4b4c      	ldr	r3, [pc, #304]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa3a:	689b      	ldr	r3, [r3, #8]
 801fa3c:	f003 030c 	and.w	r3, r3, #12
 801fa40:	2b08      	cmp	r3, #8
 801fa42:	d05c      	beq.n	801fafe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801fa44:	687b      	ldr	r3, [r7, #4]
 801fa46:	699b      	ldr	r3, [r3, #24]
 801fa48:	2b02      	cmp	r3, #2
 801fa4a:	d141      	bne.n	801fad0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801fa4c:	4b48      	ldr	r3, [pc, #288]	; (801fb70 <HAL_RCC_OscConfig+0x4dc>)
 801fa4e:	2200      	movs	r2, #0
 801fa50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fa52:	f7fe fa15 	bl	801de80 <HAL_GetTick>
 801fa56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801fa58:	e008      	b.n	801fa6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fa5a:	f7fe fa11 	bl	801de80 <HAL_GetTick>
 801fa5e:	4602      	mov	r2, r0
 801fa60:	693b      	ldr	r3, [r7, #16]
 801fa62:	1ad3      	subs	r3, r2, r3
 801fa64:	2b02      	cmp	r3, #2
 801fa66:	d901      	bls.n	801fa6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801fa68:	2303      	movs	r3, #3
 801fa6a:	e078      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801fa6c:	4b3f      	ldr	r3, [pc, #252]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa6e:	681b      	ldr	r3, [r3, #0]
 801fa70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	d1f0      	bne.n	801fa5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	69da      	ldr	r2, [r3, #28]
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	6a1b      	ldr	r3, [r3, #32]
 801fa80:	431a      	orrs	r2, r3
 801fa82:	687b      	ldr	r3, [r7, #4]
 801fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa86:	019b      	lsls	r3, r3, #6
 801fa88:	431a      	orrs	r2, r3
 801fa8a:	687b      	ldr	r3, [r7, #4]
 801fa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa8e:	085b      	lsrs	r3, r3, #1
 801fa90:	3b01      	subs	r3, #1
 801fa92:	041b      	lsls	r3, r3, #16
 801fa94:	431a      	orrs	r2, r3
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fa9a:	061b      	lsls	r3, r3, #24
 801fa9c:	4933      	ldr	r1, [pc, #204]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fa9e:	4313      	orrs	r3, r2
 801faa0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801faa2:	4b33      	ldr	r3, [pc, #204]	; (801fb70 <HAL_RCC_OscConfig+0x4dc>)
 801faa4:	2201      	movs	r2, #1
 801faa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801faa8:	f7fe f9ea 	bl	801de80 <HAL_GetTick>
 801faac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801faae:	e008      	b.n	801fac2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fab0:	f7fe f9e6 	bl	801de80 <HAL_GetTick>
 801fab4:	4602      	mov	r2, r0
 801fab6:	693b      	ldr	r3, [r7, #16]
 801fab8:	1ad3      	subs	r3, r2, r3
 801faba:	2b02      	cmp	r3, #2
 801fabc:	d901      	bls.n	801fac2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801fabe:	2303      	movs	r3, #3
 801fac0:	e04d      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fac2:	4b2a      	ldr	r3, [pc, #168]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801faca:	2b00      	cmp	r3, #0
 801facc:	d0f0      	beq.n	801fab0 <HAL_RCC_OscConfig+0x41c>
 801face:	e045      	b.n	801fb5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801fad0:	4b27      	ldr	r3, [pc, #156]	; (801fb70 <HAL_RCC_OscConfig+0x4dc>)
 801fad2:	2200      	movs	r2, #0
 801fad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801fad6:	f7fe f9d3 	bl	801de80 <HAL_GetTick>
 801fada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801fadc:	e008      	b.n	801faf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801fade:	f7fe f9cf 	bl	801de80 <HAL_GetTick>
 801fae2:	4602      	mov	r2, r0
 801fae4:	693b      	ldr	r3, [r7, #16]
 801fae6:	1ad3      	subs	r3, r2, r3
 801fae8:	2b02      	cmp	r3, #2
 801faea:	d901      	bls.n	801faf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801faec:	2303      	movs	r3, #3
 801faee:	e036      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801faf0:	4b1e      	ldr	r3, [pc, #120]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801faf2:	681b      	ldr	r3, [r3, #0]
 801faf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d1f0      	bne.n	801fade <HAL_RCC_OscConfig+0x44a>
 801fafc:	e02e      	b.n	801fb5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801fafe:	687b      	ldr	r3, [r7, #4]
 801fb00:	699b      	ldr	r3, [r3, #24]
 801fb02:	2b01      	cmp	r3, #1
 801fb04:	d101      	bne.n	801fb0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801fb06:	2301      	movs	r3, #1
 801fb08:	e029      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801fb0a:	4b18      	ldr	r3, [pc, #96]	; (801fb6c <HAL_RCC_OscConfig+0x4d8>)
 801fb0c:	685b      	ldr	r3, [r3, #4]
 801fb0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801fb16:	687b      	ldr	r3, [r7, #4]
 801fb18:	69db      	ldr	r3, [r3, #28]
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	d11c      	bne.n	801fb58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801fb24:	687b      	ldr	r3, [r7, #4]
 801fb26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801fb28:	429a      	cmp	r2, r3
 801fb2a:	d115      	bne.n	801fb58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801fb2c:	68fa      	ldr	r2, [r7, #12]
 801fb2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801fb32:	4013      	ands	r3, r2
 801fb34:	687a      	ldr	r2, [r7, #4]
 801fb36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801fb38:	4293      	cmp	r3, r2
 801fb3a:	d10d      	bne.n	801fb58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801fb46:	429a      	cmp	r2, r3
 801fb48:	d106      	bne.n	801fb58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801fb4a:	68fb      	ldr	r3, [r7, #12]
 801fb4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801fb50:	687b      	ldr	r3, [r7, #4]
 801fb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801fb54:	429a      	cmp	r2, r3
 801fb56:	d001      	beq.n	801fb5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801fb58:	2301      	movs	r3, #1
 801fb5a:	e000      	b.n	801fb5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801fb5c:	2300      	movs	r3, #0
}
 801fb5e:	4618      	mov	r0, r3
 801fb60:	3718      	adds	r7, #24
 801fb62:	46bd      	mov	sp, r7
 801fb64:	bd80      	pop	{r7, pc}
 801fb66:	bf00      	nop
 801fb68:	40007000 	.word	0x40007000
 801fb6c:	40023800 	.word	0x40023800
 801fb70:	42470060 	.word	0x42470060

0801fb74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801fb74:	b580      	push	{r7, lr}
 801fb76:	b084      	sub	sp, #16
 801fb78:	af00      	add	r7, sp, #0
 801fb7a:	6078      	str	r0, [r7, #4]
 801fb7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801fb7e:	687b      	ldr	r3, [r7, #4]
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d101      	bne.n	801fb88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801fb84:	2301      	movs	r3, #1
 801fb86:	e0cc      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801fb88:	4b68      	ldr	r3, [pc, #416]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	f003 030f 	and.w	r3, r3, #15
 801fb90:	683a      	ldr	r2, [r7, #0]
 801fb92:	429a      	cmp	r2, r3
 801fb94:	d90c      	bls.n	801fbb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fb96:	4b65      	ldr	r3, [pc, #404]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fb98:	683a      	ldr	r2, [r7, #0]
 801fb9a:	b2d2      	uxtb	r2, r2
 801fb9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fb9e:	4b63      	ldr	r3, [pc, #396]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	f003 030f 	and.w	r3, r3, #15
 801fba6:	683a      	ldr	r2, [r7, #0]
 801fba8:	429a      	cmp	r2, r3
 801fbaa:	d001      	beq.n	801fbb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801fbac:	2301      	movs	r3, #1
 801fbae:	e0b8      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	f003 0302 	and.w	r3, r3, #2
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d020      	beq.n	801fbfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	f003 0304 	and.w	r3, r3, #4
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	d005      	beq.n	801fbd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801fbc8:	4b59      	ldr	r3, [pc, #356]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbca:	689b      	ldr	r3, [r3, #8]
 801fbcc:	4a58      	ldr	r2, [pc, #352]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801fbd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	f003 0308 	and.w	r3, r3, #8
 801fbdc:	2b00      	cmp	r3, #0
 801fbde:	d005      	beq.n	801fbec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801fbe0:	4b53      	ldr	r3, [pc, #332]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbe2:	689b      	ldr	r3, [r3, #8]
 801fbe4:	4a52      	ldr	r2, [pc, #328]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801fbea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801fbec:	4b50      	ldr	r3, [pc, #320]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbee:	689b      	ldr	r3, [r3, #8]
 801fbf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801fbf4:	687b      	ldr	r3, [r7, #4]
 801fbf6:	689b      	ldr	r3, [r3, #8]
 801fbf8:	494d      	ldr	r1, [pc, #308]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fbfa:	4313      	orrs	r3, r2
 801fbfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	681b      	ldr	r3, [r3, #0]
 801fc02:	f003 0301 	and.w	r3, r3, #1
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d044      	beq.n	801fc94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	685b      	ldr	r3, [r3, #4]
 801fc0e:	2b01      	cmp	r3, #1
 801fc10:	d107      	bne.n	801fc22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fc12:	4b47      	ldr	r3, [pc, #284]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc14:	681b      	ldr	r3, [r3, #0]
 801fc16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	d119      	bne.n	801fc52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fc1e:	2301      	movs	r3, #1
 801fc20:	e07f      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801fc22:	687b      	ldr	r3, [r7, #4]
 801fc24:	685b      	ldr	r3, [r3, #4]
 801fc26:	2b02      	cmp	r3, #2
 801fc28:	d003      	beq.n	801fc32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801fc2e:	2b03      	cmp	r3, #3
 801fc30:	d107      	bne.n	801fc42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fc32:	4b3f      	ldr	r3, [pc, #252]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d109      	bne.n	801fc52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fc3e:	2301      	movs	r3, #1
 801fc40:	e06f      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801fc42:	4b3b      	ldr	r3, [pc, #236]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	f003 0302 	and.w	r3, r3, #2
 801fc4a:	2b00      	cmp	r3, #0
 801fc4c:	d101      	bne.n	801fc52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fc4e:	2301      	movs	r3, #1
 801fc50:	e067      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801fc52:	4b37      	ldr	r3, [pc, #220]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc54:	689b      	ldr	r3, [r3, #8]
 801fc56:	f023 0203 	bic.w	r2, r3, #3
 801fc5a:	687b      	ldr	r3, [r7, #4]
 801fc5c:	685b      	ldr	r3, [r3, #4]
 801fc5e:	4934      	ldr	r1, [pc, #208]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc60:	4313      	orrs	r3, r2
 801fc62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801fc64:	f7fe f90c 	bl	801de80 <HAL_GetTick>
 801fc68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fc6a:	e00a      	b.n	801fc82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801fc6c:	f7fe f908 	bl	801de80 <HAL_GetTick>
 801fc70:	4602      	mov	r2, r0
 801fc72:	68fb      	ldr	r3, [r7, #12]
 801fc74:	1ad3      	subs	r3, r2, r3
 801fc76:	f241 3288 	movw	r2, #5000	; 0x1388
 801fc7a:	4293      	cmp	r3, r2
 801fc7c:	d901      	bls.n	801fc82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801fc7e:	2303      	movs	r3, #3
 801fc80:	e04f      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fc82:	4b2b      	ldr	r3, [pc, #172]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fc84:	689b      	ldr	r3, [r3, #8]
 801fc86:	f003 020c 	and.w	r2, r3, #12
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	685b      	ldr	r3, [r3, #4]
 801fc8e:	009b      	lsls	r3, r3, #2
 801fc90:	429a      	cmp	r2, r3
 801fc92:	d1eb      	bne.n	801fc6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801fc94:	4b25      	ldr	r3, [pc, #148]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fc96:	681b      	ldr	r3, [r3, #0]
 801fc98:	f003 030f 	and.w	r3, r3, #15
 801fc9c:	683a      	ldr	r2, [r7, #0]
 801fc9e:	429a      	cmp	r2, r3
 801fca0:	d20c      	bcs.n	801fcbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fca2:	4b22      	ldr	r3, [pc, #136]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fca4:	683a      	ldr	r2, [r7, #0]
 801fca6:	b2d2      	uxtb	r2, r2
 801fca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fcaa:	4b20      	ldr	r3, [pc, #128]	; (801fd2c <HAL_RCC_ClockConfig+0x1b8>)
 801fcac:	681b      	ldr	r3, [r3, #0]
 801fcae:	f003 030f 	and.w	r3, r3, #15
 801fcb2:	683a      	ldr	r2, [r7, #0]
 801fcb4:	429a      	cmp	r2, r3
 801fcb6:	d001      	beq.n	801fcbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fcb8:	2301      	movs	r3, #1
 801fcba:	e032      	b.n	801fd22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	f003 0304 	and.w	r3, r3, #4
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d008      	beq.n	801fcda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fcc8:	4b19      	ldr	r3, [pc, #100]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fcca:	689b      	ldr	r3, [r3, #8]
 801fccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fcd0:	687b      	ldr	r3, [r7, #4]
 801fcd2:	68db      	ldr	r3, [r3, #12]
 801fcd4:	4916      	ldr	r1, [pc, #88]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fcd6:	4313      	orrs	r3, r2
 801fcd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	681b      	ldr	r3, [r3, #0]
 801fcde:	f003 0308 	and.w	r3, r3, #8
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d009      	beq.n	801fcfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801fce6:	4b12      	ldr	r3, [pc, #72]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fce8:	689b      	ldr	r3, [r3, #8]
 801fcea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fcee:	687b      	ldr	r3, [r7, #4]
 801fcf0:	691b      	ldr	r3, [r3, #16]
 801fcf2:	00db      	lsls	r3, r3, #3
 801fcf4:	490e      	ldr	r1, [pc, #56]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fcf6:	4313      	orrs	r3, r2
 801fcf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fcfa:	f000 f821 	bl	801fd40 <HAL_RCC_GetSysClockFreq>
 801fcfe:	4601      	mov	r1, r0
 801fd00:	4b0b      	ldr	r3, [pc, #44]	; (801fd30 <HAL_RCC_ClockConfig+0x1bc>)
 801fd02:	689b      	ldr	r3, [r3, #8]
 801fd04:	091b      	lsrs	r3, r3, #4
 801fd06:	f003 030f 	and.w	r3, r3, #15
 801fd0a:	4a0a      	ldr	r2, [pc, #40]	; (801fd34 <HAL_RCC_ClockConfig+0x1c0>)
 801fd0c:	5cd3      	ldrb	r3, [r2, r3]
 801fd0e:	fa21 f303 	lsr.w	r3, r1, r3
 801fd12:	4a09      	ldr	r2, [pc, #36]	; (801fd38 <HAL_RCC_ClockConfig+0x1c4>)
 801fd14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801fd16:	4b09      	ldr	r3, [pc, #36]	; (801fd3c <HAL_RCC_ClockConfig+0x1c8>)
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	4618      	mov	r0, r3
 801fd1c:	f7fe f86c 	bl	801ddf8 <HAL_InitTick>

  return HAL_OK;
 801fd20:	2300      	movs	r3, #0
}
 801fd22:	4618      	mov	r0, r3
 801fd24:	3710      	adds	r7, #16
 801fd26:	46bd      	mov	sp, r7
 801fd28:	bd80      	pop	{r7, pc}
 801fd2a:	bf00      	nop
 801fd2c:	40023c00 	.word	0x40023c00
 801fd30:	40023800 	.word	0x40023800
 801fd34:	0802d2ac 	.word	0x0802d2ac
 801fd38:	20000000 	.word	0x20000000
 801fd3c:	20000004 	.word	0x20000004

0801fd40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801fd40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd42:	b085      	sub	sp, #20
 801fd44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fd46:	2300      	movs	r3, #0
 801fd48:	607b      	str	r3, [r7, #4]
 801fd4a:	2300      	movs	r3, #0
 801fd4c:	60fb      	str	r3, [r7, #12]
 801fd4e:	2300      	movs	r3, #0
 801fd50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801fd52:	2300      	movs	r3, #0
 801fd54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801fd56:	4b63      	ldr	r3, [pc, #396]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fd58:	689b      	ldr	r3, [r3, #8]
 801fd5a:	f003 030c 	and.w	r3, r3, #12
 801fd5e:	2b04      	cmp	r3, #4
 801fd60:	d007      	beq.n	801fd72 <HAL_RCC_GetSysClockFreq+0x32>
 801fd62:	2b08      	cmp	r3, #8
 801fd64:	d008      	beq.n	801fd78 <HAL_RCC_GetSysClockFreq+0x38>
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	f040 80b4 	bne.w	801fed4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801fd6c:	4b5e      	ldr	r3, [pc, #376]	; (801fee8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fd6e:	60bb      	str	r3, [r7, #8]
       break;
 801fd70:	e0b3      	b.n	801feda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fd72:	4b5e      	ldr	r3, [pc, #376]	; (801feec <HAL_RCC_GetSysClockFreq+0x1ac>)
 801fd74:	60bb      	str	r3, [r7, #8]
      break;
 801fd76:	e0b0      	b.n	801feda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801fd78:	4b5a      	ldr	r3, [pc, #360]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fd7a:	685b      	ldr	r3, [r3, #4]
 801fd7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fd80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fd82:	4b58      	ldr	r3, [pc, #352]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fd84:	685b      	ldr	r3, [r3, #4]
 801fd86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fd8a:	2b00      	cmp	r3, #0
 801fd8c:	d04a      	beq.n	801fe24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fd8e:	4b55      	ldr	r3, [pc, #340]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fd90:	685b      	ldr	r3, [r3, #4]
 801fd92:	099b      	lsrs	r3, r3, #6
 801fd94:	f04f 0400 	mov.w	r4, #0
 801fd98:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fd9c:	f04f 0200 	mov.w	r2, #0
 801fda0:	ea03 0501 	and.w	r5, r3, r1
 801fda4:	ea04 0602 	and.w	r6, r4, r2
 801fda8:	4629      	mov	r1, r5
 801fdaa:	4632      	mov	r2, r6
 801fdac:	f04f 0300 	mov.w	r3, #0
 801fdb0:	f04f 0400 	mov.w	r4, #0
 801fdb4:	0154      	lsls	r4, r2, #5
 801fdb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fdba:	014b      	lsls	r3, r1, #5
 801fdbc:	4619      	mov	r1, r3
 801fdbe:	4622      	mov	r2, r4
 801fdc0:	1b49      	subs	r1, r1, r5
 801fdc2:	eb62 0206 	sbc.w	r2, r2, r6
 801fdc6:	f04f 0300 	mov.w	r3, #0
 801fdca:	f04f 0400 	mov.w	r4, #0
 801fdce:	0194      	lsls	r4, r2, #6
 801fdd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fdd4:	018b      	lsls	r3, r1, #6
 801fdd6:	1a5b      	subs	r3, r3, r1
 801fdd8:	eb64 0402 	sbc.w	r4, r4, r2
 801fddc:	f04f 0100 	mov.w	r1, #0
 801fde0:	f04f 0200 	mov.w	r2, #0
 801fde4:	00e2      	lsls	r2, r4, #3
 801fde6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fdea:	00d9      	lsls	r1, r3, #3
 801fdec:	460b      	mov	r3, r1
 801fdee:	4614      	mov	r4, r2
 801fdf0:	195b      	adds	r3, r3, r5
 801fdf2:	eb44 0406 	adc.w	r4, r4, r6
 801fdf6:	f04f 0100 	mov.w	r1, #0
 801fdfa:	f04f 0200 	mov.w	r2, #0
 801fdfe:	0262      	lsls	r2, r4, #9
 801fe00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801fe04:	0259      	lsls	r1, r3, #9
 801fe06:	460b      	mov	r3, r1
 801fe08:	4614      	mov	r4, r2
 801fe0a:	4618      	mov	r0, r3
 801fe0c:	4621      	mov	r1, r4
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	f04f 0400 	mov.w	r4, #0
 801fe14:	461a      	mov	r2, r3
 801fe16:	4623      	mov	r3, r4
 801fe18:	f7e0 fec6 	bl	8000ba8 <__aeabi_uldivmod>
 801fe1c:	4603      	mov	r3, r0
 801fe1e:	460c      	mov	r4, r1
 801fe20:	60fb      	str	r3, [r7, #12]
 801fe22:	e049      	b.n	801feb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fe24:	4b2f      	ldr	r3, [pc, #188]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fe26:	685b      	ldr	r3, [r3, #4]
 801fe28:	099b      	lsrs	r3, r3, #6
 801fe2a:	f04f 0400 	mov.w	r4, #0
 801fe2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fe32:	f04f 0200 	mov.w	r2, #0
 801fe36:	ea03 0501 	and.w	r5, r3, r1
 801fe3a:	ea04 0602 	and.w	r6, r4, r2
 801fe3e:	4629      	mov	r1, r5
 801fe40:	4632      	mov	r2, r6
 801fe42:	f04f 0300 	mov.w	r3, #0
 801fe46:	f04f 0400 	mov.w	r4, #0
 801fe4a:	0154      	lsls	r4, r2, #5
 801fe4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fe50:	014b      	lsls	r3, r1, #5
 801fe52:	4619      	mov	r1, r3
 801fe54:	4622      	mov	r2, r4
 801fe56:	1b49      	subs	r1, r1, r5
 801fe58:	eb62 0206 	sbc.w	r2, r2, r6
 801fe5c:	f04f 0300 	mov.w	r3, #0
 801fe60:	f04f 0400 	mov.w	r4, #0
 801fe64:	0194      	lsls	r4, r2, #6
 801fe66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fe6a:	018b      	lsls	r3, r1, #6
 801fe6c:	1a5b      	subs	r3, r3, r1
 801fe6e:	eb64 0402 	sbc.w	r4, r4, r2
 801fe72:	f04f 0100 	mov.w	r1, #0
 801fe76:	f04f 0200 	mov.w	r2, #0
 801fe7a:	00e2      	lsls	r2, r4, #3
 801fe7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fe80:	00d9      	lsls	r1, r3, #3
 801fe82:	460b      	mov	r3, r1
 801fe84:	4614      	mov	r4, r2
 801fe86:	195b      	adds	r3, r3, r5
 801fe88:	eb44 0406 	adc.w	r4, r4, r6
 801fe8c:	f04f 0100 	mov.w	r1, #0
 801fe90:	f04f 0200 	mov.w	r2, #0
 801fe94:	02a2      	lsls	r2, r4, #10
 801fe96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801fe9a:	0299      	lsls	r1, r3, #10
 801fe9c:	460b      	mov	r3, r1
 801fe9e:	4614      	mov	r4, r2
 801fea0:	4618      	mov	r0, r3
 801fea2:	4621      	mov	r1, r4
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	f04f 0400 	mov.w	r4, #0
 801feaa:	461a      	mov	r2, r3
 801feac:	4623      	mov	r3, r4
 801feae:	f7e0 fe7b 	bl	8000ba8 <__aeabi_uldivmod>
 801feb2:	4603      	mov	r3, r0
 801feb4:	460c      	mov	r4, r1
 801feb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801feb8:	4b0a      	ldr	r3, [pc, #40]	; (801fee4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801feba:	685b      	ldr	r3, [r3, #4]
 801febc:	0c1b      	lsrs	r3, r3, #16
 801febe:	f003 0303 	and.w	r3, r3, #3
 801fec2:	3301      	adds	r3, #1
 801fec4:	005b      	lsls	r3, r3, #1
 801fec6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801fec8:	68fa      	ldr	r2, [r7, #12]
 801feca:	683b      	ldr	r3, [r7, #0]
 801fecc:	fbb2 f3f3 	udiv	r3, r2, r3
 801fed0:	60bb      	str	r3, [r7, #8]
      break;
 801fed2:	e002      	b.n	801feda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fed4:	4b04      	ldr	r3, [pc, #16]	; (801fee8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fed6:	60bb      	str	r3, [r7, #8]
      break;
 801fed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801feda:	68bb      	ldr	r3, [r7, #8]
}
 801fedc:	4618      	mov	r0, r3
 801fede:	3714      	adds	r7, #20
 801fee0:	46bd      	mov	sp, r7
 801fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fee4:	40023800 	.word	0x40023800
 801fee8:	00f42400 	.word	0x00f42400
 801feec:	007a1200 	.word	0x007a1200

0801fef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fef0:	b480      	push	{r7}
 801fef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fef4:	4b03      	ldr	r3, [pc, #12]	; (801ff04 <HAL_RCC_GetHCLKFreq+0x14>)
 801fef6:	681b      	ldr	r3, [r3, #0]
}
 801fef8:	4618      	mov	r0, r3
 801fefa:	46bd      	mov	sp, r7
 801fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff00:	4770      	bx	lr
 801ff02:	bf00      	nop
 801ff04:	20000000 	.word	0x20000000

0801ff08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ff08:	b580      	push	{r7, lr}
 801ff0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801ff0c:	f7ff fff0 	bl	801fef0 <HAL_RCC_GetHCLKFreq>
 801ff10:	4601      	mov	r1, r0
 801ff12:	4b05      	ldr	r3, [pc, #20]	; (801ff28 <HAL_RCC_GetPCLK1Freq+0x20>)
 801ff14:	689b      	ldr	r3, [r3, #8]
 801ff16:	0a9b      	lsrs	r3, r3, #10
 801ff18:	f003 0307 	and.w	r3, r3, #7
 801ff1c:	4a03      	ldr	r2, [pc, #12]	; (801ff2c <HAL_RCC_GetPCLK1Freq+0x24>)
 801ff1e:	5cd3      	ldrb	r3, [r2, r3]
 801ff20:	fa21 f303 	lsr.w	r3, r1, r3
}
 801ff24:	4618      	mov	r0, r3
 801ff26:	bd80      	pop	{r7, pc}
 801ff28:	40023800 	.word	0x40023800
 801ff2c:	0802d2bc 	.word	0x0802d2bc

0801ff30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ff30:	b580      	push	{r7, lr}
 801ff32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801ff34:	f7ff ffdc 	bl	801fef0 <HAL_RCC_GetHCLKFreq>
 801ff38:	4601      	mov	r1, r0
 801ff3a:	4b05      	ldr	r3, [pc, #20]	; (801ff50 <HAL_RCC_GetPCLK2Freq+0x20>)
 801ff3c:	689b      	ldr	r3, [r3, #8]
 801ff3e:	0b5b      	lsrs	r3, r3, #13
 801ff40:	f003 0307 	and.w	r3, r3, #7
 801ff44:	4a03      	ldr	r2, [pc, #12]	; (801ff54 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ff46:	5cd3      	ldrb	r3, [r2, r3]
 801ff48:	fa21 f303 	lsr.w	r3, r1, r3
}
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	bd80      	pop	{r7, pc}
 801ff50:	40023800 	.word	0x40023800
 801ff54:	0802d2bc 	.word	0x0802d2bc

0801ff58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ff58:	b580      	push	{r7, lr}
 801ff5a:	b082      	sub	sp, #8
 801ff5c:	af00      	add	r7, sp, #0
 801ff5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ff60:	687b      	ldr	r3, [r7, #4]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	d101      	bne.n	801ff6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ff66:	2301      	movs	r3, #1
 801ff68:	e01d      	b.n	801ffa6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ff70:	b2db      	uxtb	r3, r3
 801ff72:	2b00      	cmp	r3, #0
 801ff74:	d106      	bne.n	801ff84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	2200      	movs	r2, #0
 801ff7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ff7e:	6878      	ldr	r0, [r7, #4]
 801ff80:	f7fd fcec 	bl	801d95c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ff84:	687b      	ldr	r3, [r7, #4]
 801ff86:	2202      	movs	r2, #2
 801ff88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	681a      	ldr	r2, [r3, #0]
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	3304      	adds	r3, #4
 801ff94:	4619      	mov	r1, r3
 801ff96:	4610      	mov	r0, r2
 801ff98:	f000 fd2e 	bl	80209f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	2201      	movs	r2, #1
 801ffa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ffa4:	2300      	movs	r3, #0
}
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	3708      	adds	r7, #8
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	bd80      	pop	{r7, pc}

0801ffae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ffae:	b580      	push	{r7, lr}
 801ffb0:	b082      	sub	sp, #8
 801ffb2:	af00      	add	r7, sp, #0
 801ffb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	2b00      	cmp	r3, #0
 801ffba:	d101      	bne.n	801ffc0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ffbc:	2301      	movs	r3, #1
 801ffbe:	e01d      	b.n	801fffc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ffc6:	b2db      	uxtb	r3, r3
 801ffc8:	2b00      	cmp	r3, #0
 801ffca:	d106      	bne.n	801ffda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	2200      	movs	r2, #0
 801ffd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ffd4:	6878      	ldr	r0, [r7, #4]
 801ffd6:	f000 f815 	bl	8020004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	2202      	movs	r2, #2
 801ffde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	681a      	ldr	r2, [r3, #0]
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	3304      	adds	r3, #4
 801ffea:	4619      	mov	r1, r3
 801ffec:	4610      	mov	r0, r2
 801ffee:	f000 fd03 	bl	80209f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	2201      	movs	r2, #1
 801fff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fffa:	2300      	movs	r3, #0
}
 801fffc:	4618      	mov	r0, r3
 801fffe:	3708      	adds	r7, #8
 8020000:	46bd      	mov	sp, r7
 8020002:	bd80      	pop	{r7, pc}

08020004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8020004:	b480      	push	{r7}
 8020006:	b083      	sub	sp, #12
 8020008:	af00      	add	r7, sp, #0
 802000a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 802000c:	bf00      	nop
 802000e:	370c      	adds	r7, #12
 8020010:	46bd      	mov	sp, r7
 8020012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020016:	4770      	bx	lr

08020018 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8020018:	b580      	push	{r7, lr}
 802001a:	b086      	sub	sp, #24
 802001c:	af00      	add	r7, sp, #0
 802001e:	60f8      	str	r0, [r7, #12]
 8020020:	60b9      	str	r1, [r7, #8]
 8020022:	607a      	str	r2, [r7, #4]
 8020024:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8020026:	68fb      	ldr	r3, [r7, #12]
 8020028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802002c:	b2db      	uxtb	r3, r3
 802002e:	2b02      	cmp	r3, #2
 8020030:	d101      	bne.n	8020036 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8020032:	2302      	movs	r3, #2
 8020034:	e0e9      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8020036:	68fb      	ldr	r3, [r7, #12]
 8020038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 802003c:	b2db      	uxtb	r3, r3
 802003e:	2b01      	cmp	r3, #1
 8020040:	d10b      	bne.n	802005a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8020042:	687b      	ldr	r3, [r7, #4]
 8020044:	2b00      	cmp	r3, #0
 8020046:	d104      	bne.n	8020052 <HAL_TIM_PWM_Start_DMA+0x3a>
 8020048:	887b      	ldrh	r3, [r7, #2]
 802004a:	2b00      	cmp	r3, #0
 802004c:	d001      	beq.n	8020052 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 802004e:	2301      	movs	r3, #1
 8020050:	e0db      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	2202      	movs	r2, #2
 8020056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 802005a:	68bb      	ldr	r3, [r7, #8]
 802005c:	2b0c      	cmp	r3, #12
 802005e:	f200 80ad 	bhi.w	80201bc <HAL_TIM_PWM_Start_DMA+0x1a4>
 8020062:	a201      	add	r2, pc, #4	; (adr r2, 8020068 <HAL_TIM_PWM_Start_DMA+0x50>)
 8020064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020068:	0802009d 	.word	0x0802009d
 802006c:	080201bd 	.word	0x080201bd
 8020070:	080201bd 	.word	0x080201bd
 8020074:	080201bd 	.word	0x080201bd
 8020078:	080200e5 	.word	0x080200e5
 802007c:	080201bd 	.word	0x080201bd
 8020080:	080201bd 	.word	0x080201bd
 8020084:	080201bd 	.word	0x080201bd
 8020088:	0802012d 	.word	0x0802012d
 802008c:	080201bd 	.word	0x080201bd
 8020090:	080201bd 	.word	0x080201bd
 8020094:	080201bd 	.word	0x080201bd
 8020098:	08020175 	.word	0x08020175
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200a0:	4a5c      	ldr	r2, [pc, #368]	; (8020214 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80200a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200a8:	4a5b      	ldr	r2, [pc, #364]	; (8020218 <HAL_TIM_PWM_Start_DMA+0x200>)
 80200aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80200ac:	68fb      	ldr	r3, [r7, #12]
 80200ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80200b0:	4a5a      	ldr	r2, [pc, #360]	; (802021c <HAL_TIM_PWM_Start_DMA+0x204>)
 80200b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80200b4:	68fb      	ldr	r3, [r7, #12]
 80200b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80200b8:	6879      	ldr	r1, [r7, #4]
 80200ba:	68fb      	ldr	r3, [r7, #12]
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	3334      	adds	r3, #52	; 0x34
 80200c0:	461a      	mov	r2, r3
 80200c2:	887b      	ldrh	r3, [r7, #2]
 80200c4:	f7fe f8ca 	bl	801e25c <HAL_DMA_Start_IT>
 80200c8:	4603      	mov	r3, r0
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d001      	beq.n	80200d2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80200ce:	2301      	movs	r3, #1
 80200d0:	e09b      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	68da      	ldr	r2, [r3, #12]
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80200e0:	60da      	str	r2, [r3, #12]
      break;
 80200e2:	e06c      	b.n	80201be <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200e8:	4a4a      	ldr	r2, [pc, #296]	; (8020214 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80200ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80200ec:	68fb      	ldr	r3, [r7, #12]
 80200ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200f0:	4a49      	ldr	r2, [pc, #292]	; (8020218 <HAL_TIM_PWM_Start_DMA+0x200>)
 80200f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200f8:	4a48      	ldr	r2, [pc, #288]	; (802021c <HAL_TIM_PWM_Start_DMA+0x204>)
 80200fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80200fc:	68fb      	ldr	r3, [r7, #12]
 80200fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8020100:	6879      	ldr	r1, [r7, #4]
 8020102:	68fb      	ldr	r3, [r7, #12]
 8020104:	681b      	ldr	r3, [r3, #0]
 8020106:	3338      	adds	r3, #56	; 0x38
 8020108:	461a      	mov	r2, r3
 802010a:	887b      	ldrh	r3, [r7, #2]
 802010c:	f7fe f8a6 	bl	801e25c <HAL_DMA_Start_IT>
 8020110:	4603      	mov	r3, r0
 8020112:	2b00      	cmp	r3, #0
 8020114:	d001      	beq.n	802011a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8020116:	2301      	movs	r3, #1
 8020118:	e077      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 802011a:	68fb      	ldr	r3, [r7, #12]
 802011c:	681b      	ldr	r3, [r3, #0]
 802011e:	68da      	ldr	r2, [r3, #12]
 8020120:	68fb      	ldr	r3, [r7, #12]
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8020128:	60da      	str	r2, [r3, #12]
      break;
 802012a:	e048      	b.n	80201be <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020130:	4a38      	ldr	r2, [pc, #224]	; (8020214 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8020132:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020138:	4a37      	ldr	r2, [pc, #220]	; (8020218 <HAL_TIM_PWM_Start_DMA+0x200>)
 802013a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 802013c:	68fb      	ldr	r3, [r7, #12]
 802013e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020140:	4a36      	ldr	r2, [pc, #216]	; (802021c <HAL_TIM_PWM_Start_DMA+0x204>)
 8020142:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8020144:	68fb      	ldr	r3, [r7, #12]
 8020146:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8020148:	6879      	ldr	r1, [r7, #4]
 802014a:	68fb      	ldr	r3, [r7, #12]
 802014c:	681b      	ldr	r3, [r3, #0]
 802014e:	333c      	adds	r3, #60	; 0x3c
 8020150:	461a      	mov	r2, r3
 8020152:	887b      	ldrh	r3, [r7, #2]
 8020154:	f7fe f882 	bl	801e25c <HAL_DMA_Start_IT>
 8020158:	4603      	mov	r3, r0
 802015a:	2b00      	cmp	r3, #0
 802015c:	d001      	beq.n	8020162 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 802015e:	2301      	movs	r3, #1
 8020160:	e053      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	68da      	ldr	r2, [r3, #12]
 8020168:	68fb      	ldr	r3, [r7, #12]
 802016a:	681b      	ldr	r3, [r3, #0]
 802016c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020170:	60da      	str	r2, [r3, #12]
      break;
 8020172:	e024      	b.n	80201be <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8020174:	68fb      	ldr	r3, [r7, #12]
 8020176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020178:	4a26      	ldr	r2, [pc, #152]	; (8020214 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 802017a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 802017c:	68fb      	ldr	r3, [r7, #12]
 802017e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020180:	4a25      	ldr	r2, [pc, #148]	; (8020218 <HAL_TIM_PWM_Start_DMA+0x200>)
 8020182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020188:	4a24      	ldr	r2, [pc, #144]	; (802021c <HAL_TIM_PWM_Start_DMA+0x204>)
 802018a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8020190:	6879      	ldr	r1, [r7, #4]
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	3340      	adds	r3, #64	; 0x40
 8020198:	461a      	mov	r2, r3
 802019a:	887b      	ldrh	r3, [r7, #2]
 802019c:	f7fe f85e 	bl	801e25c <HAL_DMA_Start_IT>
 80201a0:	4603      	mov	r3, r0
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d001      	beq.n	80201aa <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80201a6:	2301      	movs	r3, #1
 80201a8:	e02f      	b.n	802020a <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80201aa:	68fb      	ldr	r3, [r7, #12]
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	68da      	ldr	r2, [r3, #12]
 80201b0:	68fb      	ldr	r3, [r7, #12]
 80201b2:	681b      	ldr	r3, [r3, #0]
 80201b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80201b8:	60da      	str	r2, [r3, #12]
      break;
 80201ba:	e000      	b.n	80201be <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80201bc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	681b      	ldr	r3, [r3, #0]
 80201c2:	2201      	movs	r2, #1
 80201c4:	68b9      	ldr	r1, [r7, #8]
 80201c6:	4618      	mov	r0, r3
 80201c8:	f000 febc 	bl	8020f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	4a13      	ldr	r2, [pc, #76]	; (8020220 <HAL_TIM_PWM_Start_DMA+0x208>)
 80201d2:	4293      	cmp	r3, r2
 80201d4:	d107      	bne.n	80201e6 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80201d6:	68fb      	ldr	r3, [r7, #12]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80201dc:	68fb      	ldr	r3, [r7, #12]
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80201e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80201e6:	68fb      	ldr	r3, [r7, #12]
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	689b      	ldr	r3, [r3, #8]
 80201ec:	f003 0307 	and.w	r3, r3, #7
 80201f0:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80201f2:	697b      	ldr	r3, [r7, #20]
 80201f4:	2b06      	cmp	r3, #6
 80201f6:	d007      	beq.n	8020208 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80201f8:	68fb      	ldr	r3, [r7, #12]
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	681a      	ldr	r2, [r3, #0]
 80201fe:	68fb      	ldr	r3, [r7, #12]
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	f042 0201 	orr.w	r2, r2, #1
 8020206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8020208:	2300      	movs	r3, #0
}
 802020a:	4618      	mov	r0, r3
 802020c:	3718      	adds	r7, #24
 802020e:	46bd      	mov	sp, r7
 8020210:	bd80      	pop	{r7, pc}
 8020212:	bf00      	nop
 8020214:	08020917 	.word	0x08020917
 8020218:	08020987 	.word	0x08020987
 802021c:	080208f3 	.word	0x080208f3
 8020220:	40010000 	.word	0x40010000

08020224 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8020224:	b580      	push	{r7, lr}
 8020226:	b082      	sub	sp, #8
 8020228:	af00      	add	r7, sp, #0
 802022a:	6078      	str	r0, [r7, #4]
 802022c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 802022e:	683b      	ldr	r3, [r7, #0]
 8020230:	2b0c      	cmp	r3, #12
 8020232:	d855      	bhi.n	80202e0 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8020234:	a201      	add	r2, pc, #4	; (adr r2, 802023c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8020236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802023a:	bf00      	nop
 802023c:	08020271 	.word	0x08020271
 8020240:	080202e1 	.word	0x080202e1
 8020244:	080202e1 	.word	0x080202e1
 8020248:	080202e1 	.word	0x080202e1
 802024c:	0802028d 	.word	0x0802028d
 8020250:	080202e1 	.word	0x080202e1
 8020254:	080202e1 	.word	0x080202e1
 8020258:	080202e1 	.word	0x080202e1
 802025c:	080202a9 	.word	0x080202a9
 8020260:	080202e1 	.word	0x080202e1
 8020264:	080202e1 	.word	0x080202e1
 8020268:	080202e1 	.word	0x080202e1
 802026c:	080202c5 	.word	0x080202c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	68da      	ldr	r2, [r3, #12]
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802027e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020284:	4618      	mov	r0, r3
 8020286:	f7fe f841 	bl	801e30c <HAL_DMA_Abort_IT>
      break;
 802028a:	e02a      	b.n	80202e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	681b      	ldr	r3, [r3, #0]
 8020290:	68da      	ldr	r2, [r3, #12]
 8020292:	687b      	ldr	r3, [r7, #4]
 8020294:	681b      	ldr	r3, [r3, #0]
 8020296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 802029a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 802029c:	687b      	ldr	r3, [r7, #4]
 802029e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80202a0:	4618      	mov	r0, r3
 80202a2:	f7fe f833 	bl	801e30c <HAL_DMA_Abort_IT>
      break;
 80202a6:	e01c      	b.n	80202e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	68da      	ldr	r2, [r3, #12]
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80202b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80202bc:	4618      	mov	r0, r3
 80202be:	f7fe f825 	bl	801e30c <HAL_DMA_Abort_IT>
      break;
 80202c2:	e00e      	b.n	80202e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80202c4:	687b      	ldr	r3, [r7, #4]
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	68da      	ldr	r2, [r3, #12]
 80202ca:	687b      	ldr	r3, [r7, #4]
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80202d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80202d4:	687b      	ldr	r3, [r7, #4]
 80202d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202d8:	4618      	mov	r0, r3
 80202da:	f7fe f817 	bl	801e30c <HAL_DMA_Abort_IT>
      break;
 80202de:	e000      	b.n	80202e2 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80202e0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80202e2:	687b      	ldr	r3, [r7, #4]
 80202e4:	681b      	ldr	r3, [r3, #0]
 80202e6:	2200      	movs	r2, #0
 80202e8:	6839      	ldr	r1, [r7, #0]
 80202ea:	4618      	mov	r0, r3
 80202ec:	f000 fe2a 	bl	8020f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	4a1d      	ldr	r2, [pc, #116]	; (802036c <HAL_TIM_PWM_Stop_DMA+0x148>)
 80202f6:	4293      	cmp	r3, r2
 80202f8:	d117      	bne.n	802032a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	681b      	ldr	r3, [r3, #0]
 80202fe:	6a1a      	ldr	r2, [r3, #32]
 8020300:	f241 1311 	movw	r3, #4369	; 0x1111
 8020304:	4013      	ands	r3, r2
 8020306:	2b00      	cmp	r3, #0
 8020308:	d10f      	bne.n	802032a <HAL_TIM_PWM_Stop_DMA+0x106>
 802030a:	687b      	ldr	r3, [r7, #4]
 802030c:	681b      	ldr	r3, [r3, #0]
 802030e:	6a1a      	ldr	r2, [r3, #32]
 8020310:	f240 4344 	movw	r3, #1092	; 0x444
 8020314:	4013      	ands	r3, r2
 8020316:	2b00      	cmp	r3, #0
 8020318:	d107      	bne.n	802032a <HAL_TIM_PWM_Stop_DMA+0x106>
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8020328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	681b      	ldr	r3, [r3, #0]
 802032e:	6a1a      	ldr	r2, [r3, #32]
 8020330:	f241 1311 	movw	r3, #4369	; 0x1111
 8020334:	4013      	ands	r3, r2
 8020336:	2b00      	cmp	r3, #0
 8020338:	d10f      	bne.n	802035a <HAL_TIM_PWM_Stop_DMA+0x136>
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	6a1a      	ldr	r2, [r3, #32]
 8020340:	f240 4344 	movw	r3, #1092	; 0x444
 8020344:	4013      	ands	r3, r2
 8020346:	2b00      	cmp	r3, #0
 8020348:	d107      	bne.n	802035a <HAL_TIM_PWM_Stop_DMA+0x136>
 802034a:	687b      	ldr	r3, [r7, #4]
 802034c:	681b      	ldr	r3, [r3, #0]
 802034e:	681a      	ldr	r2, [r3, #0]
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	f022 0201 	bic.w	r2, r2, #1
 8020358:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802035a:	687b      	ldr	r3, [r7, #4]
 802035c:	2201      	movs	r2, #1
 802035e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8020362:	2300      	movs	r3, #0
}
 8020364:	4618      	mov	r0, r3
 8020366:	3708      	adds	r7, #8
 8020368:	46bd      	mov	sp, r7
 802036a:	bd80      	pop	{r7, pc}
 802036c:	40010000 	.word	0x40010000

08020370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8020370:	b580      	push	{r7, lr}
 8020372:	b082      	sub	sp, #8
 8020374:	af00      	add	r7, sp, #0
 8020376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020378:	687b      	ldr	r3, [r7, #4]
 802037a:	681b      	ldr	r3, [r3, #0]
 802037c:	691b      	ldr	r3, [r3, #16]
 802037e:	f003 0302 	and.w	r3, r3, #2
 8020382:	2b02      	cmp	r3, #2
 8020384:	d122      	bne.n	80203cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	681b      	ldr	r3, [r3, #0]
 802038a:	68db      	ldr	r3, [r3, #12]
 802038c:	f003 0302 	and.w	r3, r3, #2
 8020390:	2b02      	cmp	r3, #2
 8020392:	d11b      	bne.n	80203cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	681b      	ldr	r3, [r3, #0]
 8020398:	f06f 0202 	mvn.w	r2, #2
 802039c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802039e:	687b      	ldr	r3, [r7, #4]
 80203a0:	2201      	movs	r2, #1
 80203a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80203a4:	687b      	ldr	r3, [r7, #4]
 80203a6:	681b      	ldr	r3, [r3, #0]
 80203a8:	699b      	ldr	r3, [r3, #24]
 80203aa:	f003 0303 	and.w	r3, r3, #3
 80203ae:	2b00      	cmp	r3, #0
 80203b0:	d003      	beq.n	80203ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80203b2:	6878      	ldr	r0, [r7, #4]
 80203b4:	f000 fa75 	bl	80208a2 <HAL_TIM_IC_CaptureCallback>
 80203b8:	e005      	b.n	80203c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80203ba:	6878      	ldr	r0, [r7, #4]
 80203bc:	f000 fa67 	bl	802088e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80203c0:	6878      	ldr	r0, [r7, #4]
 80203c2:	f7fc ff63 	bl	801d28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	2200      	movs	r2, #0
 80203ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	691b      	ldr	r3, [r3, #16]
 80203d2:	f003 0304 	and.w	r3, r3, #4
 80203d6:	2b04      	cmp	r3, #4
 80203d8:	d122      	bne.n	8020420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	68db      	ldr	r3, [r3, #12]
 80203e0:	f003 0304 	and.w	r3, r3, #4
 80203e4:	2b04      	cmp	r3, #4
 80203e6:	d11b      	bne.n	8020420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	f06f 0204 	mvn.w	r2, #4
 80203f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80203f2:	687b      	ldr	r3, [r7, #4]
 80203f4:	2202      	movs	r2, #2
 80203f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	681b      	ldr	r3, [r3, #0]
 80203fc:	699b      	ldr	r3, [r3, #24]
 80203fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020402:	2b00      	cmp	r3, #0
 8020404:	d003      	beq.n	802040e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020406:	6878      	ldr	r0, [r7, #4]
 8020408:	f000 fa4b 	bl	80208a2 <HAL_TIM_IC_CaptureCallback>
 802040c:	e005      	b.n	802041a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802040e:	6878      	ldr	r0, [r7, #4]
 8020410:	f000 fa3d 	bl	802088e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020414:	6878      	ldr	r0, [r7, #4]
 8020416:	f7fc ff39 	bl	801d28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802041a:	687b      	ldr	r3, [r7, #4]
 802041c:	2200      	movs	r2, #0
 802041e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	691b      	ldr	r3, [r3, #16]
 8020426:	f003 0308 	and.w	r3, r3, #8
 802042a:	2b08      	cmp	r3, #8
 802042c:	d122      	bne.n	8020474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 802042e:	687b      	ldr	r3, [r7, #4]
 8020430:	681b      	ldr	r3, [r3, #0]
 8020432:	68db      	ldr	r3, [r3, #12]
 8020434:	f003 0308 	and.w	r3, r3, #8
 8020438:	2b08      	cmp	r3, #8
 802043a:	d11b      	bne.n	8020474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	f06f 0208 	mvn.w	r2, #8
 8020444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2204      	movs	r2, #4
 802044a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	69db      	ldr	r3, [r3, #28]
 8020452:	f003 0303 	and.w	r3, r3, #3
 8020456:	2b00      	cmp	r3, #0
 8020458:	d003      	beq.n	8020462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802045a:	6878      	ldr	r0, [r7, #4]
 802045c:	f000 fa21 	bl	80208a2 <HAL_TIM_IC_CaptureCallback>
 8020460:	e005      	b.n	802046e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020462:	6878      	ldr	r0, [r7, #4]
 8020464:	f000 fa13 	bl	802088e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020468:	6878      	ldr	r0, [r7, #4]
 802046a:	f7fc ff0f 	bl	801d28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	2200      	movs	r2, #0
 8020472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	681b      	ldr	r3, [r3, #0]
 8020478:	691b      	ldr	r3, [r3, #16]
 802047a:	f003 0310 	and.w	r3, r3, #16
 802047e:	2b10      	cmp	r3, #16
 8020480:	d122      	bne.n	80204c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8020482:	687b      	ldr	r3, [r7, #4]
 8020484:	681b      	ldr	r3, [r3, #0]
 8020486:	68db      	ldr	r3, [r3, #12]
 8020488:	f003 0310 	and.w	r3, r3, #16
 802048c:	2b10      	cmp	r3, #16
 802048e:	d11b      	bne.n	80204c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	681b      	ldr	r3, [r3, #0]
 8020494:	f06f 0210 	mvn.w	r2, #16
 8020498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802049a:	687b      	ldr	r3, [r7, #4]
 802049c:	2208      	movs	r2, #8
 802049e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	69db      	ldr	r3, [r3, #28]
 80204a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	d003      	beq.n	80204b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80204ae:	6878      	ldr	r0, [r7, #4]
 80204b0:	f000 f9f7 	bl	80208a2 <HAL_TIM_IC_CaptureCallback>
 80204b4:	e005      	b.n	80204c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80204b6:	6878      	ldr	r0, [r7, #4]
 80204b8:	f000 f9e9 	bl	802088e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80204bc:	6878      	ldr	r0, [r7, #4]
 80204be:	f7fc fee5 	bl	801d28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	2200      	movs	r2, #0
 80204c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	691b      	ldr	r3, [r3, #16]
 80204ce:	f003 0301 	and.w	r3, r3, #1
 80204d2:	2b01      	cmp	r3, #1
 80204d4:	d10e      	bne.n	80204f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	681b      	ldr	r3, [r3, #0]
 80204da:	68db      	ldr	r3, [r3, #12]
 80204dc:	f003 0301 	and.w	r3, r3, #1
 80204e0:	2b01      	cmp	r3, #1
 80204e2:	d107      	bne.n	80204f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80204e4:	687b      	ldr	r3, [r7, #4]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	f06f 0201 	mvn.w	r2, #1
 80204ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80204ee:	6878      	ldr	r0, [r7, #4]
 80204f0:	f000 f9c3 	bl	802087a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	691b      	ldr	r3, [r3, #16]
 80204fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80204fe:	2b80      	cmp	r3, #128	; 0x80
 8020500:	d10e      	bne.n	8020520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	68db      	ldr	r3, [r3, #12]
 8020508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802050c:	2b80      	cmp	r3, #128	; 0x80
 802050e:	d107      	bne.n	8020520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8020518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 802051a:	6878      	ldr	r0, [r7, #4]
 802051c:	f000 fdb0 	bl	8021080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	681b      	ldr	r3, [r3, #0]
 8020524:	691b      	ldr	r3, [r3, #16]
 8020526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802052a:	2b40      	cmp	r3, #64	; 0x40
 802052c:	d10e      	bne.n	802054c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	68db      	ldr	r3, [r3, #12]
 8020534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020538:	2b40      	cmp	r3, #64	; 0x40
 802053a:	d107      	bne.n	802054c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 802053c:	687b      	ldr	r3, [r7, #4]
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8020544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8020546:	6878      	ldr	r0, [r7, #4]
 8020548:	f000 f9bf 	bl	80208ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	681b      	ldr	r3, [r3, #0]
 8020550:	691b      	ldr	r3, [r3, #16]
 8020552:	f003 0320 	and.w	r3, r3, #32
 8020556:	2b20      	cmp	r3, #32
 8020558:	d10e      	bne.n	8020578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	68db      	ldr	r3, [r3, #12]
 8020560:	f003 0320 	and.w	r3, r3, #32
 8020564:	2b20      	cmp	r3, #32
 8020566:	d107      	bne.n	8020578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	f06f 0220 	mvn.w	r2, #32
 8020570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8020572:	6878      	ldr	r0, [r7, #4]
 8020574:	f000 fd7a 	bl	802106c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020578:	bf00      	nop
 802057a:	3708      	adds	r7, #8
 802057c:	46bd      	mov	sp, r7
 802057e:	bd80      	pop	{r7, pc}

08020580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8020580:	b580      	push	{r7, lr}
 8020582:	b084      	sub	sp, #16
 8020584:	af00      	add	r7, sp, #0
 8020586:	60f8      	str	r0, [r7, #12]
 8020588:	60b9      	str	r1, [r7, #8]
 802058a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 802058c:	68fb      	ldr	r3, [r7, #12]
 802058e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020592:	2b01      	cmp	r3, #1
 8020594:	d101      	bne.n	802059a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8020596:	2302      	movs	r3, #2
 8020598:	e0b4      	b.n	8020704 <HAL_TIM_PWM_ConfigChannel+0x184>
 802059a:	68fb      	ldr	r3, [r7, #12]
 802059c:	2201      	movs	r2, #1
 802059e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80205a2:	68fb      	ldr	r3, [r7, #12]
 80205a4:	2202      	movs	r2, #2
 80205a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	2b0c      	cmp	r3, #12
 80205ae:	f200 809f 	bhi.w	80206f0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80205b2:	a201      	add	r2, pc, #4	; (adr r2, 80205b8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80205b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205b8:	080205ed 	.word	0x080205ed
 80205bc:	080206f1 	.word	0x080206f1
 80205c0:	080206f1 	.word	0x080206f1
 80205c4:	080206f1 	.word	0x080206f1
 80205c8:	0802062d 	.word	0x0802062d
 80205cc:	080206f1 	.word	0x080206f1
 80205d0:	080206f1 	.word	0x080206f1
 80205d4:	080206f1 	.word	0x080206f1
 80205d8:	0802066f 	.word	0x0802066f
 80205dc:	080206f1 	.word	0x080206f1
 80205e0:	080206f1 	.word	0x080206f1
 80205e4:	080206f1 	.word	0x080206f1
 80205e8:	080206af 	.word	0x080206af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	681b      	ldr	r3, [r3, #0]
 80205f0:	68b9      	ldr	r1, [r7, #8]
 80205f2:	4618      	mov	r0, r3
 80205f4:	f000 fa80 	bl	8020af8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80205f8:	68fb      	ldr	r3, [r7, #12]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	699a      	ldr	r2, [r3, #24]
 80205fe:	68fb      	ldr	r3, [r7, #12]
 8020600:	681b      	ldr	r3, [r3, #0]
 8020602:	f042 0208 	orr.w	r2, r2, #8
 8020606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020608:	68fb      	ldr	r3, [r7, #12]
 802060a:	681b      	ldr	r3, [r3, #0]
 802060c:	699a      	ldr	r2, [r3, #24]
 802060e:	68fb      	ldr	r3, [r7, #12]
 8020610:	681b      	ldr	r3, [r3, #0]
 8020612:	f022 0204 	bic.w	r2, r2, #4
 8020616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020618:	68fb      	ldr	r3, [r7, #12]
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	6999      	ldr	r1, [r3, #24]
 802061e:	68bb      	ldr	r3, [r7, #8]
 8020620:	691a      	ldr	r2, [r3, #16]
 8020622:	68fb      	ldr	r3, [r7, #12]
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	430a      	orrs	r2, r1
 8020628:	619a      	str	r2, [r3, #24]
      break;
 802062a:	e062      	b.n	80206f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 802062c:	68fb      	ldr	r3, [r7, #12]
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	68b9      	ldr	r1, [r7, #8]
 8020632:	4618      	mov	r0, r3
 8020634:	f000 fac6 	bl	8020bc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8020638:	68fb      	ldr	r3, [r7, #12]
 802063a:	681b      	ldr	r3, [r3, #0]
 802063c:	699a      	ldr	r2, [r3, #24]
 802063e:	68fb      	ldr	r3, [r7, #12]
 8020640:	681b      	ldr	r3, [r3, #0]
 8020642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8020648:	68fb      	ldr	r3, [r7, #12]
 802064a:	681b      	ldr	r3, [r3, #0]
 802064c:	699a      	ldr	r2, [r3, #24]
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	681b      	ldr	r3, [r3, #0]
 8020652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	6999      	ldr	r1, [r3, #24]
 802065e:	68bb      	ldr	r3, [r7, #8]
 8020660:	691b      	ldr	r3, [r3, #16]
 8020662:	021a      	lsls	r2, r3, #8
 8020664:	68fb      	ldr	r3, [r7, #12]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	430a      	orrs	r2, r1
 802066a:	619a      	str	r2, [r3, #24]
      break;
 802066c:	e041      	b.n	80206f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	681b      	ldr	r3, [r3, #0]
 8020672:	68b9      	ldr	r1, [r7, #8]
 8020674:	4618      	mov	r0, r3
 8020676:	f000 fb11 	bl	8020c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	681b      	ldr	r3, [r3, #0]
 802067e:	69da      	ldr	r2, [r3, #28]
 8020680:	68fb      	ldr	r3, [r7, #12]
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	f042 0208 	orr.w	r2, r2, #8
 8020688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 802068a:	68fb      	ldr	r3, [r7, #12]
 802068c:	681b      	ldr	r3, [r3, #0]
 802068e:	69da      	ldr	r2, [r3, #28]
 8020690:	68fb      	ldr	r3, [r7, #12]
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	f022 0204 	bic.w	r2, r2, #4
 8020698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	69d9      	ldr	r1, [r3, #28]
 80206a0:	68bb      	ldr	r3, [r7, #8]
 80206a2:	691a      	ldr	r2, [r3, #16]
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	430a      	orrs	r2, r1
 80206aa:	61da      	str	r2, [r3, #28]
      break;
 80206ac:	e021      	b.n	80206f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	68b9      	ldr	r1, [r7, #8]
 80206b4:	4618      	mov	r0, r3
 80206b6:	f000 fb5b 	bl	8020d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80206ba:	68fb      	ldr	r3, [r7, #12]
 80206bc:	681b      	ldr	r3, [r3, #0]
 80206be:	69da      	ldr	r2, [r3, #28]
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80206c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	69da      	ldr	r2, [r3, #28]
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80206d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80206da:	68fb      	ldr	r3, [r7, #12]
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	69d9      	ldr	r1, [r3, #28]
 80206e0:	68bb      	ldr	r3, [r7, #8]
 80206e2:	691b      	ldr	r3, [r3, #16]
 80206e4:	021a      	lsls	r2, r3, #8
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	430a      	orrs	r2, r1
 80206ec:	61da      	str	r2, [r3, #28]
      break;
 80206ee:	e000      	b.n	80206f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80206f0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	2201      	movs	r2, #1
 80206f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80206fa:	68fb      	ldr	r3, [r7, #12]
 80206fc:	2200      	movs	r2, #0
 80206fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020702:	2300      	movs	r3, #0
}
 8020704:	4618      	mov	r0, r3
 8020706:	3710      	adds	r7, #16
 8020708:	46bd      	mov	sp, r7
 802070a:	bd80      	pop	{r7, pc}

0802070c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 802070c:	b580      	push	{r7, lr}
 802070e:	b084      	sub	sp, #16
 8020710:	af00      	add	r7, sp, #0
 8020712:	6078      	str	r0, [r7, #4]
 8020714:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802071c:	2b01      	cmp	r3, #1
 802071e:	d101      	bne.n	8020724 <HAL_TIM_ConfigClockSource+0x18>
 8020720:	2302      	movs	r3, #2
 8020722:	e0a6      	b.n	8020872 <HAL_TIM_ConfigClockSource+0x166>
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	2201      	movs	r2, #1
 8020728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802072c:	687b      	ldr	r3, [r7, #4]
 802072e:	2202      	movs	r2, #2
 8020730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	689b      	ldr	r3, [r3, #8]
 802073a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 802073c:	68fb      	ldr	r3, [r7, #12]
 802073e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8020742:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020744:	68fb      	ldr	r3, [r7, #12]
 8020746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802074a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 802074c:	687b      	ldr	r3, [r7, #4]
 802074e:	681b      	ldr	r3, [r3, #0]
 8020750:	68fa      	ldr	r2, [r7, #12]
 8020752:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020754:	683b      	ldr	r3, [r7, #0]
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	2b40      	cmp	r3, #64	; 0x40
 802075a:	d067      	beq.n	802082c <HAL_TIM_ConfigClockSource+0x120>
 802075c:	2b40      	cmp	r3, #64	; 0x40
 802075e:	d80b      	bhi.n	8020778 <HAL_TIM_ConfigClockSource+0x6c>
 8020760:	2b10      	cmp	r3, #16
 8020762:	d073      	beq.n	802084c <HAL_TIM_ConfigClockSource+0x140>
 8020764:	2b10      	cmp	r3, #16
 8020766:	d802      	bhi.n	802076e <HAL_TIM_ConfigClockSource+0x62>
 8020768:	2b00      	cmp	r3, #0
 802076a:	d06f      	beq.n	802084c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 802076c:	e078      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802076e:	2b20      	cmp	r3, #32
 8020770:	d06c      	beq.n	802084c <HAL_TIM_ConfigClockSource+0x140>
 8020772:	2b30      	cmp	r3, #48	; 0x30
 8020774:	d06a      	beq.n	802084c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8020776:	e073      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8020778:	2b70      	cmp	r3, #112	; 0x70
 802077a:	d00d      	beq.n	8020798 <HAL_TIM_ConfigClockSource+0x8c>
 802077c:	2b70      	cmp	r3, #112	; 0x70
 802077e:	d804      	bhi.n	802078a <HAL_TIM_ConfigClockSource+0x7e>
 8020780:	2b50      	cmp	r3, #80	; 0x50
 8020782:	d033      	beq.n	80207ec <HAL_TIM_ConfigClockSource+0xe0>
 8020784:	2b60      	cmp	r3, #96	; 0x60
 8020786:	d041      	beq.n	802080c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8020788:	e06a      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802078a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802078e:	d066      	beq.n	802085e <HAL_TIM_ConfigClockSource+0x152>
 8020790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020794:	d017      	beq.n	80207c6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8020796:	e063      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8020798:	687b      	ldr	r3, [r7, #4]
 802079a:	6818      	ldr	r0, [r3, #0]
 802079c:	683b      	ldr	r3, [r7, #0]
 802079e:	6899      	ldr	r1, [r3, #8]
 80207a0:	683b      	ldr	r3, [r7, #0]
 80207a2:	685a      	ldr	r2, [r3, #4]
 80207a4:	683b      	ldr	r3, [r7, #0]
 80207a6:	68db      	ldr	r3, [r3, #12]
 80207a8:	f000 fbac 	bl	8020f04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	689b      	ldr	r3, [r3, #8]
 80207b2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80207ba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80207bc:	687b      	ldr	r3, [r7, #4]
 80207be:	681b      	ldr	r3, [r3, #0]
 80207c0:	68fa      	ldr	r2, [r7, #12]
 80207c2:	609a      	str	r2, [r3, #8]
      break;
 80207c4:	e04c      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	6818      	ldr	r0, [r3, #0]
 80207ca:	683b      	ldr	r3, [r7, #0]
 80207cc:	6899      	ldr	r1, [r3, #8]
 80207ce:	683b      	ldr	r3, [r7, #0]
 80207d0:	685a      	ldr	r2, [r3, #4]
 80207d2:	683b      	ldr	r3, [r7, #0]
 80207d4:	68db      	ldr	r3, [r3, #12]
 80207d6:	f000 fb95 	bl	8020f04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	681b      	ldr	r3, [r3, #0]
 80207de:	689a      	ldr	r2, [r3, #8]
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80207e8:	609a      	str	r2, [r3, #8]
      break;
 80207ea:	e039      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80207ec:	687b      	ldr	r3, [r7, #4]
 80207ee:	6818      	ldr	r0, [r3, #0]
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	6859      	ldr	r1, [r3, #4]
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	68db      	ldr	r3, [r3, #12]
 80207f8:	461a      	mov	r2, r3
 80207fa:	f000 fb09 	bl	8020e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	681b      	ldr	r3, [r3, #0]
 8020802:	2150      	movs	r1, #80	; 0x50
 8020804:	4618      	mov	r0, r3
 8020806:	f000 fb62 	bl	8020ece <TIM_ITRx_SetConfig>
      break;
 802080a:	e029      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 802080c:	687b      	ldr	r3, [r7, #4]
 802080e:	6818      	ldr	r0, [r3, #0]
 8020810:	683b      	ldr	r3, [r7, #0]
 8020812:	6859      	ldr	r1, [r3, #4]
 8020814:	683b      	ldr	r3, [r7, #0]
 8020816:	68db      	ldr	r3, [r3, #12]
 8020818:	461a      	mov	r2, r3
 802081a:	f000 fb28 	bl	8020e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 802081e:	687b      	ldr	r3, [r7, #4]
 8020820:	681b      	ldr	r3, [r3, #0]
 8020822:	2160      	movs	r1, #96	; 0x60
 8020824:	4618      	mov	r0, r3
 8020826:	f000 fb52 	bl	8020ece <TIM_ITRx_SetConfig>
      break;
 802082a:	e019      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	6818      	ldr	r0, [r3, #0]
 8020830:	683b      	ldr	r3, [r7, #0]
 8020832:	6859      	ldr	r1, [r3, #4]
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	68db      	ldr	r3, [r3, #12]
 8020838:	461a      	mov	r2, r3
 802083a:	f000 fae9 	bl	8020e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	2140      	movs	r1, #64	; 0x40
 8020844:	4618      	mov	r0, r3
 8020846:	f000 fb42 	bl	8020ece <TIM_ITRx_SetConfig>
      break;
 802084a:	e009      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	681a      	ldr	r2, [r3, #0]
 8020850:	683b      	ldr	r3, [r7, #0]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	4619      	mov	r1, r3
 8020856:	4610      	mov	r0, r2
 8020858:	f000 fb39 	bl	8020ece <TIM_ITRx_SetConfig>
      break;
 802085c:	e000      	b.n	8020860 <HAL_TIM_ConfigClockSource+0x154>
      break;
 802085e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	2201      	movs	r2, #1
 8020864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020868:	687b      	ldr	r3, [r7, #4]
 802086a:	2200      	movs	r2, #0
 802086c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020870:	2300      	movs	r3, #0
}
 8020872:	4618      	mov	r0, r3
 8020874:	3710      	adds	r7, #16
 8020876:	46bd      	mov	sp, r7
 8020878:	bd80      	pop	{r7, pc}

0802087a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 802087a:	b480      	push	{r7}
 802087c:	b083      	sub	sp, #12
 802087e:	af00      	add	r7, sp, #0
 8020880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8020882:	bf00      	nop
 8020884:	370c      	adds	r7, #12
 8020886:	46bd      	mov	sp, r7
 8020888:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088c:	4770      	bx	lr

0802088e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802088e:	b480      	push	{r7}
 8020890:	b083      	sub	sp, #12
 8020892:	af00      	add	r7, sp, #0
 8020894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020896:	bf00      	nop
 8020898:	370c      	adds	r7, #12
 802089a:	46bd      	mov	sp, r7
 802089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a0:	4770      	bx	lr

080208a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80208a2:	b480      	push	{r7}
 80208a4:	b083      	sub	sp, #12
 80208a6:	af00      	add	r7, sp, #0
 80208a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80208aa:	bf00      	nop
 80208ac:	370c      	adds	r7, #12
 80208ae:	46bd      	mov	sp, r7
 80208b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208b4:	4770      	bx	lr

080208b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80208b6:	b480      	push	{r7}
 80208b8:	b083      	sub	sp, #12
 80208ba:	af00      	add	r7, sp, #0
 80208bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80208be:	bf00      	nop
 80208c0:	370c      	adds	r7, #12
 80208c2:	46bd      	mov	sp, r7
 80208c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c8:	4770      	bx	lr

080208ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80208ca:	b480      	push	{r7}
 80208cc:	b083      	sub	sp, #12
 80208ce:	af00      	add	r7, sp, #0
 80208d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80208d2:	bf00      	nop
 80208d4:	370c      	adds	r7, #12
 80208d6:	46bd      	mov	sp, r7
 80208d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208dc:	4770      	bx	lr

080208de <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80208de:	b480      	push	{r7}
 80208e0:	b083      	sub	sp, #12
 80208e2:	af00      	add	r7, sp, #0
 80208e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80208e6:	bf00      	nop
 80208e8:	370c      	adds	r7, #12
 80208ea:	46bd      	mov	sp, r7
 80208ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f0:	4770      	bx	lr

080208f2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80208f2:	b580      	push	{r7, lr}
 80208f4:	b084      	sub	sp, #16
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208fe:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	2201      	movs	r2, #1
 8020904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8020908:	68f8      	ldr	r0, [r7, #12]
 802090a:	f7ff ffe8 	bl	80208de <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 802090e:	bf00      	nop
 8020910:	3710      	adds	r7, #16
 8020912:	46bd      	mov	sp, r7
 8020914:	bd80      	pop	{r7, pc}

08020916 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8020916:	b580      	push	{r7, lr}
 8020918:	b084      	sub	sp, #16
 802091a:	af00      	add	r7, sp, #0
 802091c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020922:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8020924:	68fb      	ldr	r3, [r7, #12]
 8020926:	2201      	movs	r2, #1
 8020928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 802092c:	68fb      	ldr	r3, [r7, #12]
 802092e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020930:	687a      	ldr	r2, [r7, #4]
 8020932:	429a      	cmp	r2, r3
 8020934:	d103      	bne.n	802093e <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020936:	68fb      	ldr	r3, [r7, #12]
 8020938:	2201      	movs	r2, #1
 802093a:	771a      	strb	r2, [r3, #28]
 802093c:	e019      	b.n	8020972 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 802093e:	68fb      	ldr	r3, [r7, #12]
 8020940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020942:	687a      	ldr	r2, [r7, #4]
 8020944:	429a      	cmp	r2, r3
 8020946:	d103      	bne.n	8020950 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	2202      	movs	r2, #2
 802094c:	771a      	strb	r2, [r3, #28]
 802094e:	e010      	b.n	8020972 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020954:	687a      	ldr	r2, [r7, #4]
 8020956:	429a      	cmp	r2, r3
 8020958:	d103      	bne.n	8020962 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	2204      	movs	r2, #4
 802095e:	771a      	strb	r2, [r3, #28]
 8020960:	e007      	b.n	8020972 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020966:	687a      	ldr	r2, [r7, #4]
 8020968:	429a      	cmp	r2, r3
 802096a:	d102      	bne.n	8020972 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	2208      	movs	r2, #8
 8020970:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020972:	68f8      	ldr	r0, [r7, #12]
 8020974:	f7fc fc8a 	bl	801d28c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020978:	68fb      	ldr	r3, [r7, #12]
 802097a:	2200      	movs	r2, #0
 802097c:	771a      	strb	r2, [r3, #28]
}
 802097e:	bf00      	nop
 8020980:	3710      	adds	r7, #16
 8020982:	46bd      	mov	sp, r7
 8020984:	bd80      	pop	{r7, pc}

08020986 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8020986:	b580      	push	{r7, lr}
 8020988:	b084      	sub	sp, #16
 802098a:	af00      	add	r7, sp, #0
 802098c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020992:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8020994:	68fb      	ldr	r3, [r7, #12]
 8020996:	2201      	movs	r2, #1
 8020998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 802099c:	68fb      	ldr	r3, [r7, #12]
 802099e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80209a0:	687a      	ldr	r2, [r7, #4]
 80209a2:	429a      	cmp	r2, r3
 80209a4:	d103      	bne.n	80209ae <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80209a6:	68fb      	ldr	r3, [r7, #12]
 80209a8:	2201      	movs	r2, #1
 80209aa:	771a      	strb	r2, [r3, #28]
 80209ac:	e019      	b.n	80209e2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80209ae:	68fb      	ldr	r3, [r7, #12]
 80209b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80209b2:	687a      	ldr	r2, [r7, #4]
 80209b4:	429a      	cmp	r2, r3
 80209b6:	d103      	bne.n	80209c0 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80209b8:	68fb      	ldr	r3, [r7, #12]
 80209ba:	2202      	movs	r2, #2
 80209bc:	771a      	strb	r2, [r3, #28]
 80209be:	e010      	b.n	80209e2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80209c0:	68fb      	ldr	r3, [r7, #12]
 80209c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209c4:	687a      	ldr	r2, [r7, #4]
 80209c6:	429a      	cmp	r2, r3
 80209c8:	d103      	bne.n	80209d2 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80209ca:	68fb      	ldr	r3, [r7, #12]
 80209cc:	2204      	movs	r2, #4
 80209ce:	771a      	strb	r2, [r3, #28]
 80209d0:	e007      	b.n	80209e2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80209d2:	68fb      	ldr	r3, [r7, #12]
 80209d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209d6:	687a      	ldr	r2, [r7, #4]
 80209d8:	429a      	cmp	r2, r3
 80209da:	d102      	bne.n	80209e2 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80209dc:	68fb      	ldr	r3, [r7, #12]
 80209de:	2208      	movs	r2, #8
 80209e0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80209e2:	68f8      	ldr	r0, [r7, #12]
 80209e4:	f7ff ff67 	bl	80208b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80209e8:	68fb      	ldr	r3, [r7, #12]
 80209ea:	2200      	movs	r2, #0
 80209ec:	771a      	strb	r2, [r3, #28]
}
 80209ee:	bf00      	nop
 80209f0:	3710      	adds	r7, #16
 80209f2:	46bd      	mov	sp, r7
 80209f4:	bd80      	pop	{r7, pc}
	...

080209f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80209f8:	b480      	push	{r7}
 80209fa:	b085      	sub	sp, #20
 80209fc:	af00      	add	r7, sp, #0
 80209fe:	6078      	str	r0, [r7, #4]
 8020a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8020a02:	687b      	ldr	r3, [r7, #4]
 8020a04:	681b      	ldr	r3, [r3, #0]
 8020a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020a08:	687b      	ldr	r3, [r7, #4]
 8020a0a:	4a34      	ldr	r2, [pc, #208]	; (8020adc <TIM_Base_SetConfig+0xe4>)
 8020a0c:	4293      	cmp	r3, r2
 8020a0e:	d00f      	beq.n	8020a30 <TIM_Base_SetConfig+0x38>
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020a16:	d00b      	beq.n	8020a30 <TIM_Base_SetConfig+0x38>
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	4a31      	ldr	r2, [pc, #196]	; (8020ae0 <TIM_Base_SetConfig+0xe8>)
 8020a1c:	4293      	cmp	r3, r2
 8020a1e:	d007      	beq.n	8020a30 <TIM_Base_SetConfig+0x38>
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	4a30      	ldr	r2, [pc, #192]	; (8020ae4 <TIM_Base_SetConfig+0xec>)
 8020a24:	4293      	cmp	r3, r2
 8020a26:	d003      	beq.n	8020a30 <TIM_Base_SetConfig+0x38>
 8020a28:	687b      	ldr	r3, [r7, #4]
 8020a2a:	4a2f      	ldr	r2, [pc, #188]	; (8020ae8 <TIM_Base_SetConfig+0xf0>)
 8020a2c:	4293      	cmp	r3, r2
 8020a2e:	d108      	bne.n	8020a42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020a38:	683b      	ldr	r3, [r7, #0]
 8020a3a:	685b      	ldr	r3, [r3, #4]
 8020a3c:	68fa      	ldr	r2, [r7, #12]
 8020a3e:	4313      	orrs	r3, r2
 8020a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	4a25      	ldr	r2, [pc, #148]	; (8020adc <TIM_Base_SetConfig+0xe4>)
 8020a46:	4293      	cmp	r3, r2
 8020a48:	d01b      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020a50:	d017      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a52:	687b      	ldr	r3, [r7, #4]
 8020a54:	4a22      	ldr	r2, [pc, #136]	; (8020ae0 <TIM_Base_SetConfig+0xe8>)
 8020a56:	4293      	cmp	r3, r2
 8020a58:	d013      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a5a:	687b      	ldr	r3, [r7, #4]
 8020a5c:	4a21      	ldr	r2, [pc, #132]	; (8020ae4 <TIM_Base_SetConfig+0xec>)
 8020a5e:	4293      	cmp	r3, r2
 8020a60:	d00f      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	4a20      	ldr	r2, [pc, #128]	; (8020ae8 <TIM_Base_SetConfig+0xf0>)
 8020a66:	4293      	cmp	r3, r2
 8020a68:	d00b      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	4a1f      	ldr	r2, [pc, #124]	; (8020aec <TIM_Base_SetConfig+0xf4>)
 8020a6e:	4293      	cmp	r3, r2
 8020a70:	d007      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a72:	687b      	ldr	r3, [r7, #4]
 8020a74:	4a1e      	ldr	r2, [pc, #120]	; (8020af0 <TIM_Base_SetConfig+0xf8>)
 8020a76:	4293      	cmp	r3, r2
 8020a78:	d003      	beq.n	8020a82 <TIM_Base_SetConfig+0x8a>
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	4a1d      	ldr	r2, [pc, #116]	; (8020af4 <TIM_Base_SetConfig+0xfc>)
 8020a7e:	4293      	cmp	r3, r2
 8020a80:	d108      	bne.n	8020a94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020a82:	68fb      	ldr	r3, [r7, #12]
 8020a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020a8a:	683b      	ldr	r3, [r7, #0]
 8020a8c:	68db      	ldr	r3, [r3, #12]
 8020a8e:	68fa      	ldr	r2, [r7, #12]
 8020a90:	4313      	orrs	r3, r2
 8020a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020a94:	68fb      	ldr	r3, [r7, #12]
 8020a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020a9a:	683b      	ldr	r3, [r7, #0]
 8020a9c:	695b      	ldr	r3, [r3, #20]
 8020a9e:	4313      	orrs	r3, r2
 8020aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020aa2:	687b      	ldr	r3, [r7, #4]
 8020aa4:	68fa      	ldr	r2, [r7, #12]
 8020aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020aa8:	683b      	ldr	r3, [r7, #0]
 8020aaa:	689a      	ldr	r2, [r3, #8]
 8020aac:	687b      	ldr	r3, [r7, #4]
 8020aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020ab0:	683b      	ldr	r3, [r7, #0]
 8020ab2:	681a      	ldr	r2, [r3, #0]
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	4a08      	ldr	r2, [pc, #32]	; (8020adc <TIM_Base_SetConfig+0xe4>)
 8020abc:	4293      	cmp	r3, r2
 8020abe:	d103      	bne.n	8020ac8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020ac0:	683b      	ldr	r3, [r7, #0]
 8020ac2:	691a      	ldr	r2, [r3, #16]
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	2201      	movs	r2, #1
 8020acc:	615a      	str	r2, [r3, #20]
}
 8020ace:	bf00      	nop
 8020ad0:	3714      	adds	r7, #20
 8020ad2:	46bd      	mov	sp, r7
 8020ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ad8:	4770      	bx	lr
 8020ada:	bf00      	nop
 8020adc:	40010000 	.word	0x40010000
 8020ae0:	40000400 	.word	0x40000400
 8020ae4:	40000800 	.word	0x40000800
 8020ae8:	40000c00 	.word	0x40000c00
 8020aec:	40014000 	.word	0x40014000
 8020af0:	40014400 	.word	0x40014400
 8020af4:	40014800 	.word	0x40014800

08020af8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020af8:	b480      	push	{r7}
 8020afa:	b087      	sub	sp, #28
 8020afc:	af00      	add	r7, sp, #0
 8020afe:	6078      	str	r0, [r7, #4]
 8020b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	6a1b      	ldr	r3, [r3, #32]
 8020b06:	f023 0201 	bic.w	r2, r3, #1
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	6a1b      	ldr	r3, [r3, #32]
 8020b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b14:	687b      	ldr	r3, [r7, #4]
 8020b16:	685b      	ldr	r3, [r3, #4]
 8020b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	699b      	ldr	r3, [r3, #24]
 8020b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020b20:	68fb      	ldr	r3, [r7, #12]
 8020b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020b28:	68fb      	ldr	r3, [r7, #12]
 8020b2a:	f023 0303 	bic.w	r3, r3, #3
 8020b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020b30:	683b      	ldr	r3, [r7, #0]
 8020b32:	681b      	ldr	r3, [r3, #0]
 8020b34:	68fa      	ldr	r2, [r7, #12]
 8020b36:	4313      	orrs	r3, r2
 8020b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020b3a:	697b      	ldr	r3, [r7, #20]
 8020b3c:	f023 0302 	bic.w	r3, r3, #2
 8020b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020b42:	683b      	ldr	r3, [r7, #0]
 8020b44:	689b      	ldr	r3, [r3, #8]
 8020b46:	697a      	ldr	r2, [r7, #20]
 8020b48:	4313      	orrs	r3, r2
 8020b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020b4c:	687b      	ldr	r3, [r7, #4]
 8020b4e:	4a1c      	ldr	r2, [pc, #112]	; (8020bc0 <TIM_OC1_SetConfig+0xc8>)
 8020b50:	4293      	cmp	r3, r2
 8020b52:	d10c      	bne.n	8020b6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020b54:	697b      	ldr	r3, [r7, #20]
 8020b56:	f023 0308 	bic.w	r3, r3, #8
 8020b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020b5c:	683b      	ldr	r3, [r7, #0]
 8020b5e:	68db      	ldr	r3, [r3, #12]
 8020b60:	697a      	ldr	r2, [r7, #20]
 8020b62:	4313      	orrs	r3, r2
 8020b64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020b66:	697b      	ldr	r3, [r7, #20]
 8020b68:	f023 0304 	bic.w	r3, r3, #4
 8020b6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	4a13      	ldr	r2, [pc, #76]	; (8020bc0 <TIM_OC1_SetConfig+0xc8>)
 8020b72:	4293      	cmp	r3, r2
 8020b74:	d111      	bne.n	8020b9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020b76:	693b      	ldr	r3, [r7, #16]
 8020b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020b7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020b7e:	693b      	ldr	r3, [r7, #16]
 8020b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020b84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020b86:	683b      	ldr	r3, [r7, #0]
 8020b88:	695b      	ldr	r3, [r3, #20]
 8020b8a:	693a      	ldr	r2, [r7, #16]
 8020b8c:	4313      	orrs	r3, r2
 8020b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020b90:	683b      	ldr	r3, [r7, #0]
 8020b92:	699b      	ldr	r3, [r3, #24]
 8020b94:	693a      	ldr	r2, [r7, #16]
 8020b96:	4313      	orrs	r3, r2
 8020b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020b9a:	687b      	ldr	r3, [r7, #4]
 8020b9c:	693a      	ldr	r2, [r7, #16]
 8020b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020ba0:	687b      	ldr	r3, [r7, #4]
 8020ba2:	68fa      	ldr	r2, [r7, #12]
 8020ba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020ba6:	683b      	ldr	r3, [r7, #0]
 8020ba8:	685a      	ldr	r2, [r3, #4]
 8020baa:	687b      	ldr	r3, [r7, #4]
 8020bac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020bae:	687b      	ldr	r3, [r7, #4]
 8020bb0:	697a      	ldr	r2, [r7, #20]
 8020bb2:	621a      	str	r2, [r3, #32]
}
 8020bb4:	bf00      	nop
 8020bb6:	371c      	adds	r7, #28
 8020bb8:	46bd      	mov	sp, r7
 8020bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bbe:	4770      	bx	lr
 8020bc0:	40010000 	.word	0x40010000

08020bc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020bc4:	b480      	push	{r7}
 8020bc6:	b087      	sub	sp, #28
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
 8020bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020bce:	687b      	ldr	r3, [r7, #4]
 8020bd0:	6a1b      	ldr	r3, [r3, #32]
 8020bd2:	f023 0210 	bic.w	r2, r3, #16
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020bda:	687b      	ldr	r3, [r7, #4]
 8020bdc:	6a1b      	ldr	r3, [r3, #32]
 8020bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	685b      	ldr	r3, [r3, #4]
 8020be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	699b      	ldr	r3, [r3, #24]
 8020bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020bec:	68fb      	ldr	r3, [r7, #12]
 8020bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020bf4:	68fb      	ldr	r3, [r7, #12]
 8020bf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020bfc:	683b      	ldr	r3, [r7, #0]
 8020bfe:	681b      	ldr	r3, [r3, #0]
 8020c00:	021b      	lsls	r3, r3, #8
 8020c02:	68fa      	ldr	r2, [r7, #12]
 8020c04:	4313      	orrs	r3, r2
 8020c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	f023 0320 	bic.w	r3, r3, #32
 8020c0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020c10:	683b      	ldr	r3, [r7, #0]
 8020c12:	689b      	ldr	r3, [r3, #8]
 8020c14:	011b      	lsls	r3, r3, #4
 8020c16:	697a      	ldr	r2, [r7, #20]
 8020c18:	4313      	orrs	r3, r2
 8020c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	4a1e      	ldr	r2, [pc, #120]	; (8020c98 <TIM_OC2_SetConfig+0xd4>)
 8020c20:	4293      	cmp	r3, r2
 8020c22:	d10d      	bne.n	8020c40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020c24:	697b      	ldr	r3, [r7, #20]
 8020c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020c2c:	683b      	ldr	r3, [r7, #0]
 8020c2e:	68db      	ldr	r3, [r3, #12]
 8020c30:	011b      	lsls	r3, r3, #4
 8020c32:	697a      	ldr	r2, [r7, #20]
 8020c34:	4313      	orrs	r3, r2
 8020c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020c38:	697b      	ldr	r3, [r7, #20]
 8020c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	4a15      	ldr	r2, [pc, #84]	; (8020c98 <TIM_OC2_SetConfig+0xd4>)
 8020c44:	4293      	cmp	r3, r2
 8020c46:	d113      	bne.n	8020c70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020c48:	693b      	ldr	r3, [r7, #16]
 8020c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020c50:	693b      	ldr	r3, [r7, #16]
 8020c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020c58:	683b      	ldr	r3, [r7, #0]
 8020c5a:	695b      	ldr	r3, [r3, #20]
 8020c5c:	009b      	lsls	r3, r3, #2
 8020c5e:	693a      	ldr	r2, [r7, #16]
 8020c60:	4313      	orrs	r3, r2
 8020c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020c64:	683b      	ldr	r3, [r7, #0]
 8020c66:	699b      	ldr	r3, [r3, #24]
 8020c68:	009b      	lsls	r3, r3, #2
 8020c6a:	693a      	ldr	r2, [r7, #16]
 8020c6c:	4313      	orrs	r3, r2
 8020c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	693a      	ldr	r2, [r7, #16]
 8020c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c76:	687b      	ldr	r3, [r7, #4]
 8020c78:	68fa      	ldr	r2, [r7, #12]
 8020c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020c7c:	683b      	ldr	r3, [r7, #0]
 8020c7e:	685a      	ldr	r2, [r3, #4]
 8020c80:	687b      	ldr	r3, [r7, #4]
 8020c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c84:	687b      	ldr	r3, [r7, #4]
 8020c86:	697a      	ldr	r2, [r7, #20]
 8020c88:	621a      	str	r2, [r3, #32]
}
 8020c8a:	bf00      	nop
 8020c8c:	371c      	adds	r7, #28
 8020c8e:	46bd      	mov	sp, r7
 8020c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c94:	4770      	bx	lr
 8020c96:	bf00      	nop
 8020c98:	40010000 	.word	0x40010000

08020c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020c9c:	b480      	push	{r7}
 8020c9e:	b087      	sub	sp, #28
 8020ca0:	af00      	add	r7, sp, #0
 8020ca2:	6078      	str	r0, [r7, #4]
 8020ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020ca6:	687b      	ldr	r3, [r7, #4]
 8020ca8:	6a1b      	ldr	r3, [r3, #32]
 8020caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020cae:	687b      	ldr	r3, [r7, #4]
 8020cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020cb2:	687b      	ldr	r3, [r7, #4]
 8020cb4:	6a1b      	ldr	r3, [r3, #32]
 8020cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	685b      	ldr	r3, [r3, #4]
 8020cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	69db      	ldr	r3, [r3, #28]
 8020cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020ccc:	68fb      	ldr	r3, [r7, #12]
 8020cce:	f023 0303 	bic.w	r3, r3, #3
 8020cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020cd4:	683b      	ldr	r3, [r7, #0]
 8020cd6:	681b      	ldr	r3, [r3, #0]
 8020cd8:	68fa      	ldr	r2, [r7, #12]
 8020cda:	4313      	orrs	r3, r2
 8020cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020cde:	697b      	ldr	r3, [r7, #20]
 8020ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020ce6:	683b      	ldr	r3, [r7, #0]
 8020ce8:	689b      	ldr	r3, [r3, #8]
 8020cea:	021b      	lsls	r3, r3, #8
 8020cec:	697a      	ldr	r2, [r7, #20]
 8020cee:	4313      	orrs	r3, r2
 8020cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	4a1d      	ldr	r2, [pc, #116]	; (8020d6c <TIM_OC3_SetConfig+0xd0>)
 8020cf6:	4293      	cmp	r3, r2
 8020cf8:	d10d      	bne.n	8020d16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020cfa:	697b      	ldr	r3, [r7, #20]
 8020cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020d02:	683b      	ldr	r3, [r7, #0]
 8020d04:	68db      	ldr	r3, [r3, #12]
 8020d06:	021b      	lsls	r3, r3, #8
 8020d08:	697a      	ldr	r2, [r7, #20]
 8020d0a:	4313      	orrs	r3, r2
 8020d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020d0e:	697b      	ldr	r3, [r7, #20]
 8020d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020d16:	687b      	ldr	r3, [r7, #4]
 8020d18:	4a14      	ldr	r2, [pc, #80]	; (8020d6c <TIM_OC3_SetConfig+0xd0>)
 8020d1a:	4293      	cmp	r3, r2
 8020d1c:	d113      	bne.n	8020d46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020d1e:	693b      	ldr	r3, [r7, #16]
 8020d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020d26:	693b      	ldr	r3, [r7, #16]
 8020d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020d2e:	683b      	ldr	r3, [r7, #0]
 8020d30:	695b      	ldr	r3, [r3, #20]
 8020d32:	011b      	lsls	r3, r3, #4
 8020d34:	693a      	ldr	r2, [r7, #16]
 8020d36:	4313      	orrs	r3, r2
 8020d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020d3a:	683b      	ldr	r3, [r7, #0]
 8020d3c:	699b      	ldr	r3, [r3, #24]
 8020d3e:	011b      	lsls	r3, r3, #4
 8020d40:	693a      	ldr	r2, [r7, #16]
 8020d42:	4313      	orrs	r3, r2
 8020d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	693a      	ldr	r2, [r7, #16]
 8020d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020d4c:	687b      	ldr	r3, [r7, #4]
 8020d4e:	68fa      	ldr	r2, [r7, #12]
 8020d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020d52:	683b      	ldr	r3, [r7, #0]
 8020d54:	685a      	ldr	r2, [r3, #4]
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	697a      	ldr	r2, [r7, #20]
 8020d5e:	621a      	str	r2, [r3, #32]
}
 8020d60:	bf00      	nop
 8020d62:	371c      	adds	r7, #28
 8020d64:	46bd      	mov	sp, r7
 8020d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d6a:	4770      	bx	lr
 8020d6c:	40010000 	.word	0x40010000

08020d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020d70:	b480      	push	{r7}
 8020d72:	b087      	sub	sp, #28
 8020d74:	af00      	add	r7, sp, #0
 8020d76:	6078      	str	r0, [r7, #4]
 8020d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020d7a:	687b      	ldr	r3, [r7, #4]
 8020d7c:	6a1b      	ldr	r3, [r3, #32]
 8020d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020d82:	687b      	ldr	r3, [r7, #4]
 8020d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	6a1b      	ldr	r3, [r3, #32]
 8020d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	685b      	ldr	r3, [r3, #4]
 8020d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020d92:	687b      	ldr	r3, [r7, #4]
 8020d94:	69db      	ldr	r3, [r3, #28]
 8020d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020d98:	68fb      	ldr	r3, [r7, #12]
 8020d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020da0:	68fb      	ldr	r3, [r7, #12]
 8020da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020da8:	683b      	ldr	r3, [r7, #0]
 8020daa:	681b      	ldr	r3, [r3, #0]
 8020dac:	021b      	lsls	r3, r3, #8
 8020dae:	68fa      	ldr	r2, [r7, #12]
 8020db0:	4313      	orrs	r3, r2
 8020db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020db4:	693b      	ldr	r3, [r7, #16]
 8020db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020dbc:	683b      	ldr	r3, [r7, #0]
 8020dbe:	689b      	ldr	r3, [r3, #8]
 8020dc0:	031b      	lsls	r3, r3, #12
 8020dc2:	693a      	ldr	r2, [r7, #16]
 8020dc4:	4313      	orrs	r3, r2
 8020dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020dc8:	687b      	ldr	r3, [r7, #4]
 8020dca:	4a10      	ldr	r2, [pc, #64]	; (8020e0c <TIM_OC4_SetConfig+0x9c>)
 8020dcc:	4293      	cmp	r3, r2
 8020dce:	d109      	bne.n	8020de4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020dd0:	697b      	ldr	r3, [r7, #20]
 8020dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020dd8:	683b      	ldr	r3, [r7, #0]
 8020dda:	695b      	ldr	r3, [r3, #20]
 8020ddc:	019b      	lsls	r3, r3, #6
 8020dde:	697a      	ldr	r2, [r7, #20]
 8020de0:	4313      	orrs	r3, r2
 8020de2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	697a      	ldr	r2, [r7, #20]
 8020de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	68fa      	ldr	r2, [r7, #12]
 8020dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020df0:	683b      	ldr	r3, [r7, #0]
 8020df2:	685a      	ldr	r2, [r3, #4]
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020df8:	687b      	ldr	r3, [r7, #4]
 8020dfa:	693a      	ldr	r2, [r7, #16]
 8020dfc:	621a      	str	r2, [r3, #32]
}
 8020dfe:	bf00      	nop
 8020e00:	371c      	adds	r7, #28
 8020e02:	46bd      	mov	sp, r7
 8020e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e08:	4770      	bx	lr
 8020e0a:	bf00      	nop
 8020e0c:	40010000 	.word	0x40010000

08020e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020e10:	b480      	push	{r7}
 8020e12:	b087      	sub	sp, #28
 8020e14:	af00      	add	r7, sp, #0
 8020e16:	60f8      	str	r0, [r7, #12]
 8020e18:	60b9      	str	r1, [r7, #8]
 8020e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020e1c:	68fb      	ldr	r3, [r7, #12]
 8020e1e:	6a1b      	ldr	r3, [r3, #32]
 8020e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020e22:	68fb      	ldr	r3, [r7, #12]
 8020e24:	6a1b      	ldr	r3, [r3, #32]
 8020e26:	f023 0201 	bic.w	r2, r3, #1
 8020e2a:	68fb      	ldr	r3, [r7, #12]
 8020e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	699b      	ldr	r3, [r3, #24]
 8020e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020e34:	693b      	ldr	r3, [r7, #16]
 8020e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020e3c:	687b      	ldr	r3, [r7, #4]
 8020e3e:	011b      	lsls	r3, r3, #4
 8020e40:	693a      	ldr	r2, [r7, #16]
 8020e42:	4313      	orrs	r3, r2
 8020e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020e46:	697b      	ldr	r3, [r7, #20]
 8020e48:	f023 030a 	bic.w	r3, r3, #10
 8020e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020e4e:	697a      	ldr	r2, [r7, #20]
 8020e50:	68bb      	ldr	r3, [r7, #8]
 8020e52:	4313      	orrs	r3, r2
 8020e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020e56:	68fb      	ldr	r3, [r7, #12]
 8020e58:	693a      	ldr	r2, [r7, #16]
 8020e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020e5c:	68fb      	ldr	r3, [r7, #12]
 8020e5e:	697a      	ldr	r2, [r7, #20]
 8020e60:	621a      	str	r2, [r3, #32]
}
 8020e62:	bf00      	nop
 8020e64:	371c      	adds	r7, #28
 8020e66:	46bd      	mov	sp, r7
 8020e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e6c:	4770      	bx	lr

08020e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020e6e:	b480      	push	{r7}
 8020e70:	b087      	sub	sp, #28
 8020e72:	af00      	add	r7, sp, #0
 8020e74:	60f8      	str	r0, [r7, #12]
 8020e76:	60b9      	str	r1, [r7, #8]
 8020e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	6a1b      	ldr	r3, [r3, #32]
 8020e7e:	f023 0210 	bic.w	r2, r3, #16
 8020e82:	68fb      	ldr	r3, [r7, #12]
 8020e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	699b      	ldr	r3, [r3, #24]
 8020e8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020e8c:	68fb      	ldr	r3, [r7, #12]
 8020e8e:	6a1b      	ldr	r3, [r3, #32]
 8020e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020e92:	697b      	ldr	r3, [r7, #20]
 8020e94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020e98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020e9a:	687b      	ldr	r3, [r7, #4]
 8020e9c:	031b      	lsls	r3, r3, #12
 8020e9e:	697a      	ldr	r2, [r7, #20]
 8020ea0:	4313      	orrs	r3, r2
 8020ea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020ea4:	693b      	ldr	r3, [r7, #16]
 8020ea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020eaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020eac:	68bb      	ldr	r3, [r7, #8]
 8020eae:	011b      	lsls	r3, r3, #4
 8020eb0:	693a      	ldr	r2, [r7, #16]
 8020eb2:	4313      	orrs	r3, r2
 8020eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020eb6:	68fb      	ldr	r3, [r7, #12]
 8020eb8:	697a      	ldr	r2, [r7, #20]
 8020eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020ebc:	68fb      	ldr	r3, [r7, #12]
 8020ebe:	693a      	ldr	r2, [r7, #16]
 8020ec0:	621a      	str	r2, [r3, #32]
}
 8020ec2:	bf00      	nop
 8020ec4:	371c      	adds	r7, #28
 8020ec6:	46bd      	mov	sp, r7
 8020ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ecc:	4770      	bx	lr

08020ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020ece:	b480      	push	{r7}
 8020ed0:	b085      	sub	sp, #20
 8020ed2:	af00      	add	r7, sp, #0
 8020ed4:	6078      	str	r0, [r7, #4]
 8020ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	689b      	ldr	r3, [r3, #8]
 8020edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020ee6:	683a      	ldr	r2, [r7, #0]
 8020ee8:	68fb      	ldr	r3, [r7, #12]
 8020eea:	4313      	orrs	r3, r2
 8020eec:	f043 0307 	orr.w	r3, r3, #7
 8020ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020ef2:	687b      	ldr	r3, [r7, #4]
 8020ef4:	68fa      	ldr	r2, [r7, #12]
 8020ef6:	609a      	str	r2, [r3, #8]
}
 8020ef8:	bf00      	nop
 8020efa:	3714      	adds	r7, #20
 8020efc:	46bd      	mov	sp, r7
 8020efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f02:	4770      	bx	lr

08020f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020f04:	b480      	push	{r7}
 8020f06:	b087      	sub	sp, #28
 8020f08:	af00      	add	r7, sp, #0
 8020f0a:	60f8      	str	r0, [r7, #12]
 8020f0c:	60b9      	str	r1, [r7, #8]
 8020f0e:	607a      	str	r2, [r7, #4]
 8020f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020f12:	68fb      	ldr	r3, [r7, #12]
 8020f14:	689b      	ldr	r3, [r3, #8]
 8020f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020f18:	697b      	ldr	r3, [r7, #20]
 8020f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020f20:	683b      	ldr	r3, [r7, #0]
 8020f22:	021a      	lsls	r2, r3, #8
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	431a      	orrs	r2, r3
 8020f28:	68bb      	ldr	r3, [r7, #8]
 8020f2a:	4313      	orrs	r3, r2
 8020f2c:	697a      	ldr	r2, [r7, #20]
 8020f2e:	4313      	orrs	r3, r2
 8020f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020f32:	68fb      	ldr	r3, [r7, #12]
 8020f34:	697a      	ldr	r2, [r7, #20]
 8020f36:	609a      	str	r2, [r3, #8]
}
 8020f38:	bf00      	nop
 8020f3a:	371c      	adds	r7, #28
 8020f3c:	46bd      	mov	sp, r7
 8020f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f42:	4770      	bx	lr

08020f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020f44:	b480      	push	{r7}
 8020f46:	b087      	sub	sp, #28
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	60f8      	str	r0, [r7, #12]
 8020f4c:	60b9      	str	r1, [r7, #8]
 8020f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020f50:	68bb      	ldr	r3, [r7, #8]
 8020f52:	f003 031f 	and.w	r3, r3, #31
 8020f56:	2201      	movs	r2, #1
 8020f58:	fa02 f303 	lsl.w	r3, r2, r3
 8020f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020f5e:	68fb      	ldr	r3, [r7, #12]
 8020f60:	6a1a      	ldr	r2, [r3, #32]
 8020f62:	697b      	ldr	r3, [r7, #20]
 8020f64:	43db      	mvns	r3, r3
 8020f66:	401a      	ands	r2, r3
 8020f68:	68fb      	ldr	r3, [r7, #12]
 8020f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020f6c:	68fb      	ldr	r3, [r7, #12]
 8020f6e:	6a1a      	ldr	r2, [r3, #32]
 8020f70:	68bb      	ldr	r3, [r7, #8]
 8020f72:	f003 031f 	and.w	r3, r3, #31
 8020f76:	6879      	ldr	r1, [r7, #4]
 8020f78:	fa01 f303 	lsl.w	r3, r1, r3
 8020f7c:	431a      	orrs	r2, r3
 8020f7e:	68fb      	ldr	r3, [r7, #12]
 8020f80:	621a      	str	r2, [r3, #32]
}
 8020f82:	bf00      	nop
 8020f84:	371c      	adds	r7, #28
 8020f86:	46bd      	mov	sp, r7
 8020f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f8c:	4770      	bx	lr
	...

08020f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020f90:	b480      	push	{r7}
 8020f92:	b085      	sub	sp, #20
 8020f94:	af00      	add	r7, sp, #0
 8020f96:	6078      	str	r0, [r7, #4]
 8020f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020fa0:	2b01      	cmp	r3, #1
 8020fa2:	d101      	bne.n	8020fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020fa4:	2302      	movs	r3, #2
 8020fa6:	e050      	b.n	802104a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8020fa8:	687b      	ldr	r3, [r7, #4]
 8020faa:	2201      	movs	r2, #1
 8020fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	2202      	movs	r2, #2
 8020fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	685b      	ldr	r3, [r3, #4]
 8020fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	681b      	ldr	r3, [r3, #0]
 8020fc4:	689b      	ldr	r3, [r3, #8]
 8020fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020fc8:	68fb      	ldr	r3, [r7, #12]
 8020fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020fd0:	683b      	ldr	r3, [r7, #0]
 8020fd2:	681b      	ldr	r3, [r3, #0]
 8020fd4:	68fa      	ldr	r2, [r7, #12]
 8020fd6:	4313      	orrs	r3, r2
 8020fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	68fa      	ldr	r2, [r7, #12]
 8020fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	681b      	ldr	r3, [r3, #0]
 8020fe6:	4a1c      	ldr	r2, [pc, #112]	; (8021058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8020fe8:	4293      	cmp	r3, r2
 8020fea:	d018      	beq.n	802101e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	681b      	ldr	r3, [r3, #0]
 8020ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020ff4:	d013      	beq.n	802101e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	681b      	ldr	r3, [r3, #0]
 8020ffa:	4a18      	ldr	r2, [pc, #96]	; (802105c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8020ffc:	4293      	cmp	r3, r2
 8020ffe:	d00e      	beq.n	802101e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021000:	687b      	ldr	r3, [r7, #4]
 8021002:	681b      	ldr	r3, [r3, #0]
 8021004:	4a16      	ldr	r2, [pc, #88]	; (8021060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8021006:	4293      	cmp	r3, r2
 8021008:	d009      	beq.n	802101e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	681b      	ldr	r3, [r3, #0]
 802100e:	4a15      	ldr	r2, [pc, #84]	; (8021064 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8021010:	4293      	cmp	r3, r2
 8021012:	d004      	beq.n	802101e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	681b      	ldr	r3, [r3, #0]
 8021018:	4a13      	ldr	r2, [pc, #76]	; (8021068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 802101a:	4293      	cmp	r3, r2
 802101c:	d10c      	bne.n	8021038 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802101e:	68bb      	ldr	r3, [r7, #8]
 8021020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8021024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8021026:	683b      	ldr	r3, [r7, #0]
 8021028:	685b      	ldr	r3, [r3, #4]
 802102a:	68ba      	ldr	r2, [r7, #8]
 802102c:	4313      	orrs	r3, r2
 802102e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	68ba      	ldr	r2, [r7, #8]
 8021036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	2201      	movs	r2, #1
 802103c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8021040:	687b      	ldr	r3, [r7, #4]
 8021042:	2200      	movs	r2, #0
 8021044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8021048:	2300      	movs	r3, #0
}
 802104a:	4618      	mov	r0, r3
 802104c:	3714      	adds	r7, #20
 802104e:	46bd      	mov	sp, r7
 8021050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021054:	4770      	bx	lr
 8021056:	bf00      	nop
 8021058:	40010000 	.word	0x40010000
 802105c:	40000400 	.word	0x40000400
 8021060:	40000800 	.word	0x40000800
 8021064:	40000c00 	.word	0x40000c00
 8021068:	40014000 	.word	0x40014000

0802106c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802106c:	b480      	push	{r7}
 802106e:	b083      	sub	sp, #12
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8021074:	bf00      	nop
 8021076:	370c      	adds	r7, #12
 8021078:	46bd      	mov	sp, r7
 802107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802107e:	4770      	bx	lr

08021080 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8021080:	b480      	push	{r7}
 8021082:	b083      	sub	sp, #12
 8021084:	af00      	add	r7, sp, #0
 8021086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8021088:	bf00      	nop
 802108a:	370c      	adds	r7, #12
 802108c:	46bd      	mov	sp, r7
 802108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021092:	4770      	bx	lr

08021094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021094:	b580      	push	{r7, lr}
 8021096:	b082      	sub	sp, #8
 8021098:	af00      	add	r7, sp, #0
 802109a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d101      	bne.n	80210a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80210a2:	2301      	movs	r3, #1
 80210a4:	e03f      	b.n	8021126 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80210ac:	b2db      	uxtb	r3, r3
 80210ae:	2b00      	cmp	r3, #0
 80210b0:	d106      	bne.n	80210c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	2200      	movs	r2, #0
 80210b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80210ba:	6878      	ldr	r0, [r7, #4]
 80210bc:	f7fc fdac 	bl	801dc18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	2224      	movs	r2, #36	; 0x24
 80210c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80210c8:	687b      	ldr	r3, [r7, #4]
 80210ca:	681b      	ldr	r3, [r3, #0]
 80210cc:	68da      	ldr	r2, [r3, #12]
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	681b      	ldr	r3, [r3, #0]
 80210d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80210d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80210d8:	6878      	ldr	r0, [r7, #4]
 80210da:	f000 fbf1 	bl	80218c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80210de:	687b      	ldr	r3, [r7, #4]
 80210e0:	681b      	ldr	r3, [r3, #0]
 80210e2:	691a      	ldr	r2, [r3, #16]
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	681b      	ldr	r3, [r3, #0]
 80210e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80210ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80210ee:	687b      	ldr	r3, [r7, #4]
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	695a      	ldr	r2, [r3, #20]
 80210f4:	687b      	ldr	r3, [r7, #4]
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80210fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80210fe:	687b      	ldr	r3, [r7, #4]
 8021100:	681b      	ldr	r3, [r3, #0]
 8021102:	68da      	ldr	r2, [r3, #12]
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802110c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802110e:	687b      	ldr	r3, [r7, #4]
 8021110:	2200      	movs	r2, #0
 8021112:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	2220      	movs	r2, #32
 8021118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	2220      	movs	r2, #32
 8021120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8021124:	2300      	movs	r3, #0
}
 8021126:	4618      	mov	r0, r3
 8021128:	3708      	adds	r7, #8
 802112a:	46bd      	mov	sp, r7
 802112c:	bd80      	pop	{r7, pc}

0802112e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802112e:	b580      	push	{r7, lr}
 8021130:	b088      	sub	sp, #32
 8021132:	af02      	add	r7, sp, #8
 8021134:	60f8      	str	r0, [r7, #12]
 8021136:	60b9      	str	r1, [r7, #8]
 8021138:	603b      	str	r3, [r7, #0]
 802113a:	4613      	mov	r3, r2
 802113c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 802113e:	2300      	movs	r3, #0
 8021140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8021142:	68fb      	ldr	r3, [r7, #12]
 8021144:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8021148:	b2db      	uxtb	r3, r3
 802114a:	2b20      	cmp	r3, #32
 802114c:	f040 8083 	bne.w	8021256 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8021150:	68bb      	ldr	r3, [r7, #8]
 8021152:	2b00      	cmp	r3, #0
 8021154:	d002      	beq.n	802115c <HAL_UART_Transmit+0x2e>
 8021156:	88fb      	ldrh	r3, [r7, #6]
 8021158:	2b00      	cmp	r3, #0
 802115a:	d101      	bne.n	8021160 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 802115c:	2301      	movs	r3, #1
 802115e:	e07b      	b.n	8021258 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021160:	68fb      	ldr	r3, [r7, #12]
 8021162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021166:	2b01      	cmp	r3, #1
 8021168:	d101      	bne.n	802116e <HAL_UART_Transmit+0x40>
 802116a:	2302      	movs	r3, #2
 802116c:	e074      	b.n	8021258 <HAL_UART_Transmit+0x12a>
 802116e:	68fb      	ldr	r3, [r7, #12]
 8021170:	2201      	movs	r2, #1
 8021172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021176:	68fb      	ldr	r3, [r7, #12]
 8021178:	2200      	movs	r2, #0
 802117a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 802117c:	68fb      	ldr	r3, [r7, #12]
 802117e:	2221      	movs	r2, #33	; 0x21
 8021180:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8021184:	f7fc fe7c 	bl	801de80 <HAL_GetTick>
 8021188:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	88fa      	ldrh	r2, [r7, #6]
 802118e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8021190:	68fb      	ldr	r3, [r7, #12]
 8021192:	88fa      	ldrh	r2, [r7, #6]
 8021194:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021196:	68fb      	ldr	r3, [r7, #12]
 8021198:	2200      	movs	r2, #0
 802119a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 802119e:	e042      	b.n	8021226 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80211a0:	68fb      	ldr	r3, [r7, #12]
 80211a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80211a4:	b29b      	uxth	r3, r3
 80211a6:	3b01      	subs	r3, #1
 80211a8:	b29a      	uxth	r2, r3
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	689b      	ldr	r3, [r3, #8]
 80211b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80211b6:	d122      	bne.n	80211fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80211b8:	683b      	ldr	r3, [r7, #0]
 80211ba:	9300      	str	r3, [sp, #0]
 80211bc:	697b      	ldr	r3, [r7, #20]
 80211be:	2200      	movs	r2, #0
 80211c0:	2180      	movs	r1, #128	; 0x80
 80211c2:	68f8      	ldr	r0, [r7, #12]
 80211c4:	f000 fa10 	bl	80215e8 <UART_WaitOnFlagUntilTimeout>
 80211c8:	4603      	mov	r3, r0
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d001      	beq.n	80211d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80211ce:	2303      	movs	r3, #3
 80211d0:	e042      	b.n	8021258 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80211d2:	68bb      	ldr	r3, [r7, #8]
 80211d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80211d6:	693b      	ldr	r3, [r7, #16]
 80211d8:	881b      	ldrh	r3, [r3, #0]
 80211da:	461a      	mov	r2, r3
 80211dc:	68fb      	ldr	r3, [r7, #12]
 80211de:	681b      	ldr	r3, [r3, #0]
 80211e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80211e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	691b      	ldr	r3, [r3, #16]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d103      	bne.n	80211f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80211ee:	68bb      	ldr	r3, [r7, #8]
 80211f0:	3302      	adds	r3, #2
 80211f2:	60bb      	str	r3, [r7, #8]
 80211f4:	e017      	b.n	8021226 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80211f6:	68bb      	ldr	r3, [r7, #8]
 80211f8:	3301      	adds	r3, #1
 80211fa:	60bb      	str	r3, [r7, #8]
 80211fc:	e013      	b.n	8021226 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80211fe:	683b      	ldr	r3, [r7, #0]
 8021200:	9300      	str	r3, [sp, #0]
 8021202:	697b      	ldr	r3, [r7, #20]
 8021204:	2200      	movs	r2, #0
 8021206:	2180      	movs	r1, #128	; 0x80
 8021208:	68f8      	ldr	r0, [r7, #12]
 802120a:	f000 f9ed 	bl	80215e8 <UART_WaitOnFlagUntilTimeout>
 802120e:	4603      	mov	r3, r0
 8021210:	2b00      	cmp	r3, #0
 8021212:	d001      	beq.n	8021218 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8021214:	2303      	movs	r3, #3
 8021216:	e01f      	b.n	8021258 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8021218:	68bb      	ldr	r3, [r7, #8]
 802121a:	1c5a      	adds	r2, r3, #1
 802121c:	60ba      	str	r2, [r7, #8]
 802121e:	781a      	ldrb	r2, [r3, #0]
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	681b      	ldr	r3, [r3, #0]
 8021224:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8021226:	68fb      	ldr	r3, [r7, #12]
 8021228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802122a:	b29b      	uxth	r3, r3
 802122c:	2b00      	cmp	r3, #0
 802122e:	d1b7      	bne.n	80211a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8021230:	683b      	ldr	r3, [r7, #0]
 8021232:	9300      	str	r3, [sp, #0]
 8021234:	697b      	ldr	r3, [r7, #20]
 8021236:	2200      	movs	r2, #0
 8021238:	2140      	movs	r1, #64	; 0x40
 802123a:	68f8      	ldr	r0, [r7, #12]
 802123c:	f000 f9d4 	bl	80215e8 <UART_WaitOnFlagUntilTimeout>
 8021240:	4603      	mov	r3, r0
 8021242:	2b00      	cmp	r3, #0
 8021244:	d001      	beq.n	802124a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8021246:	2303      	movs	r3, #3
 8021248:	e006      	b.n	8021258 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 802124a:	68fb      	ldr	r3, [r7, #12]
 802124c:	2220      	movs	r2, #32
 802124e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8021252:	2300      	movs	r3, #0
 8021254:	e000      	b.n	8021258 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8021256:	2302      	movs	r3, #2
  }
}
 8021258:	4618      	mov	r0, r3
 802125a:	3718      	adds	r7, #24
 802125c:	46bd      	mov	sp, r7
 802125e:	bd80      	pop	{r7, pc}

08021260 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8021260:	b580      	push	{r7, lr}
 8021262:	b088      	sub	sp, #32
 8021264:	af02      	add	r7, sp, #8
 8021266:	60f8      	str	r0, [r7, #12]
 8021268:	60b9      	str	r1, [r7, #8]
 802126a:	603b      	str	r3, [r7, #0]
 802126c:	4613      	mov	r3, r2
 802126e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8021270:	2300      	movs	r3, #0
 8021272:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8021274:	68fb      	ldr	r3, [r7, #12]
 8021276:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 802127a:	b2db      	uxtb	r3, r3
 802127c:	2b20      	cmp	r3, #32
 802127e:	f040 8090 	bne.w	80213a2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8021282:	68bb      	ldr	r3, [r7, #8]
 8021284:	2b00      	cmp	r3, #0
 8021286:	d002      	beq.n	802128e <HAL_UART_Receive+0x2e>
 8021288:	88fb      	ldrh	r3, [r7, #6]
 802128a:	2b00      	cmp	r3, #0
 802128c:	d101      	bne.n	8021292 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 802128e:	2301      	movs	r3, #1
 8021290:	e088      	b.n	80213a4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021292:	68fb      	ldr	r3, [r7, #12]
 8021294:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021298:	2b01      	cmp	r3, #1
 802129a:	d101      	bne.n	80212a0 <HAL_UART_Receive+0x40>
 802129c:	2302      	movs	r3, #2
 802129e:	e081      	b.n	80213a4 <HAL_UART_Receive+0x144>
 80212a0:	68fb      	ldr	r3, [r7, #12]
 80212a2:	2201      	movs	r2, #1
 80212a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	2200      	movs	r2, #0
 80212ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80212ae:	68fb      	ldr	r3, [r7, #12]
 80212b0:	2222      	movs	r2, #34	; 0x22
 80212b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80212b6:	f7fc fde3 	bl	801de80 <HAL_GetTick>
 80212ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80212bc:	68fb      	ldr	r3, [r7, #12]
 80212be:	88fa      	ldrh	r2, [r7, #6]
 80212c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80212c2:	68fb      	ldr	r3, [r7, #12]
 80212c4:	88fa      	ldrh	r2, [r7, #6]
 80212c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80212c8:	68fb      	ldr	r3, [r7, #12]
 80212ca:	2200      	movs	r2, #0
 80212cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80212d0:	e05c      	b.n	802138c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80212d2:	68fb      	ldr	r3, [r7, #12]
 80212d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80212d6:	b29b      	uxth	r3, r3
 80212d8:	3b01      	subs	r3, #1
 80212da:	b29a      	uxth	r2, r3
 80212dc:	68fb      	ldr	r3, [r7, #12]
 80212de:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80212e0:	68fb      	ldr	r3, [r7, #12]
 80212e2:	689b      	ldr	r3, [r3, #8]
 80212e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80212e8:	d12b      	bne.n	8021342 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80212ea:	683b      	ldr	r3, [r7, #0]
 80212ec:	9300      	str	r3, [sp, #0]
 80212ee:	697b      	ldr	r3, [r7, #20]
 80212f0:	2200      	movs	r2, #0
 80212f2:	2120      	movs	r1, #32
 80212f4:	68f8      	ldr	r0, [r7, #12]
 80212f6:	f000 f977 	bl	80215e8 <UART_WaitOnFlagUntilTimeout>
 80212fa:	4603      	mov	r3, r0
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d001      	beq.n	8021304 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8021300:	2303      	movs	r3, #3
 8021302:	e04f      	b.n	80213a4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8021304:	68bb      	ldr	r3, [r7, #8]
 8021306:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8021308:	68fb      	ldr	r3, [r7, #12]
 802130a:	691b      	ldr	r3, [r3, #16]
 802130c:	2b00      	cmp	r3, #0
 802130e:	d10c      	bne.n	802132a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8021310:	68fb      	ldr	r3, [r7, #12]
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	685b      	ldr	r3, [r3, #4]
 8021316:	b29b      	uxth	r3, r3
 8021318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 802131c:	b29a      	uxth	r2, r3
 802131e:	693b      	ldr	r3, [r7, #16]
 8021320:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8021322:	68bb      	ldr	r3, [r7, #8]
 8021324:	3302      	adds	r3, #2
 8021326:	60bb      	str	r3, [r7, #8]
 8021328:	e030      	b.n	802138c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 802132a:	68fb      	ldr	r3, [r7, #12]
 802132c:	681b      	ldr	r3, [r3, #0]
 802132e:	685b      	ldr	r3, [r3, #4]
 8021330:	b29b      	uxth	r3, r3
 8021332:	b2db      	uxtb	r3, r3
 8021334:	b29a      	uxth	r2, r3
 8021336:	693b      	ldr	r3, [r7, #16]
 8021338:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 802133a:	68bb      	ldr	r3, [r7, #8]
 802133c:	3301      	adds	r3, #1
 802133e:	60bb      	str	r3, [r7, #8]
 8021340:	e024      	b.n	802138c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8021342:	683b      	ldr	r3, [r7, #0]
 8021344:	9300      	str	r3, [sp, #0]
 8021346:	697b      	ldr	r3, [r7, #20]
 8021348:	2200      	movs	r2, #0
 802134a:	2120      	movs	r1, #32
 802134c:	68f8      	ldr	r0, [r7, #12]
 802134e:	f000 f94b 	bl	80215e8 <UART_WaitOnFlagUntilTimeout>
 8021352:	4603      	mov	r3, r0
 8021354:	2b00      	cmp	r3, #0
 8021356:	d001      	beq.n	802135c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8021358:	2303      	movs	r3, #3
 802135a:	e023      	b.n	80213a4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 802135c:	68fb      	ldr	r3, [r7, #12]
 802135e:	691b      	ldr	r3, [r3, #16]
 8021360:	2b00      	cmp	r3, #0
 8021362:	d108      	bne.n	8021376 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021364:	68fb      	ldr	r3, [r7, #12]
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	6859      	ldr	r1, [r3, #4]
 802136a:	68bb      	ldr	r3, [r7, #8]
 802136c:	1c5a      	adds	r2, r3, #1
 802136e:	60ba      	str	r2, [r7, #8]
 8021370:	b2ca      	uxtb	r2, r1
 8021372:	701a      	strb	r2, [r3, #0]
 8021374:	e00a      	b.n	802138c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021376:	68fb      	ldr	r3, [r7, #12]
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	685b      	ldr	r3, [r3, #4]
 802137c:	b2da      	uxtb	r2, r3
 802137e:	68bb      	ldr	r3, [r7, #8]
 8021380:	1c59      	adds	r1, r3, #1
 8021382:	60b9      	str	r1, [r7, #8]
 8021384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021388:	b2d2      	uxtb	r2, r2
 802138a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 802138c:	68fb      	ldr	r3, [r7, #12]
 802138e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021390:	b29b      	uxth	r3, r3
 8021392:	2b00      	cmp	r3, #0
 8021394:	d19d      	bne.n	80212d2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8021396:	68fb      	ldr	r3, [r7, #12]
 8021398:	2220      	movs	r2, #32
 802139a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 802139e:	2300      	movs	r3, #0
 80213a0:	e000      	b.n	80213a4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80213a2:	2302      	movs	r3, #2
  }
}
 80213a4:	4618      	mov	r0, r3
 80213a6:	3718      	adds	r7, #24
 80213a8:	46bd      	mov	sp, r7
 80213aa:	bd80      	pop	{r7, pc}

080213ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80213ac:	b580      	push	{r7, lr}
 80213ae:	b088      	sub	sp, #32
 80213b0:	af00      	add	r7, sp, #0
 80213b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80213bc:	687b      	ldr	r3, [r7, #4]
 80213be:	681b      	ldr	r3, [r3, #0]
 80213c0:	68db      	ldr	r3, [r3, #12]
 80213c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	695b      	ldr	r3, [r3, #20]
 80213ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80213cc:	2300      	movs	r3, #0
 80213ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80213d0:	2300      	movs	r3, #0
 80213d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80213d4:	69fb      	ldr	r3, [r7, #28]
 80213d6:	f003 030f 	and.w	r3, r3, #15
 80213da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80213dc:	693b      	ldr	r3, [r7, #16]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d10d      	bne.n	80213fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80213e2:	69fb      	ldr	r3, [r7, #28]
 80213e4:	f003 0320 	and.w	r3, r3, #32
 80213e8:	2b00      	cmp	r3, #0
 80213ea:	d008      	beq.n	80213fe <HAL_UART_IRQHandler+0x52>
 80213ec:	69bb      	ldr	r3, [r7, #24]
 80213ee:	f003 0320 	and.w	r3, r3, #32
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d003      	beq.n	80213fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80213f6:	6878      	ldr	r0, [r7, #4]
 80213f8:	f000 f9e0 	bl	80217bc <UART_Receive_IT>
      return;
 80213fc:	e0d1      	b.n	80215a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80213fe:	693b      	ldr	r3, [r7, #16]
 8021400:	2b00      	cmp	r3, #0
 8021402:	f000 80b0 	beq.w	8021566 <HAL_UART_IRQHandler+0x1ba>
 8021406:	697b      	ldr	r3, [r7, #20]
 8021408:	f003 0301 	and.w	r3, r3, #1
 802140c:	2b00      	cmp	r3, #0
 802140e:	d105      	bne.n	802141c <HAL_UART_IRQHandler+0x70>
 8021410:	69bb      	ldr	r3, [r7, #24]
 8021412:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021416:	2b00      	cmp	r3, #0
 8021418:	f000 80a5 	beq.w	8021566 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 802141c:	69fb      	ldr	r3, [r7, #28]
 802141e:	f003 0301 	and.w	r3, r3, #1
 8021422:	2b00      	cmp	r3, #0
 8021424:	d00a      	beq.n	802143c <HAL_UART_IRQHandler+0x90>
 8021426:	69bb      	ldr	r3, [r7, #24]
 8021428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 802142c:	2b00      	cmp	r3, #0
 802142e:	d005      	beq.n	802143c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021434:	f043 0201 	orr.w	r2, r3, #1
 8021438:	687b      	ldr	r3, [r7, #4]
 802143a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802143c:	69fb      	ldr	r3, [r7, #28]
 802143e:	f003 0304 	and.w	r3, r3, #4
 8021442:	2b00      	cmp	r3, #0
 8021444:	d00a      	beq.n	802145c <HAL_UART_IRQHandler+0xb0>
 8021446:	697b      	ldr	r3, [r7, #20]
 8021448:	f003 0301 	and.w	r3, r3, #1
 802144c:	2b00      	cmp	r3, #0
 802144e:	d005      	beq.n	802145c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021454:	f043 0202 	orr.w	r2, r3, #2
 8021458:	687b      	ldr	r3, [r7, #4]
 802145a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 802145c:	69fb      	ldr	r3, [r7, #28]
 802145e:	f003 0302 	and.w	r3, r3, #2
 8021462:	2b00      	cmp	r3, #0
 8021464:	d00a      	beq.n	802147c <HAL_UART_IRQHandler+0xd0>
 8021466:	697b      	ldr	r3, [r7, #20]
 8021468:	f003 0301 	and.w	r3, r3, #1
 802146c:	2b00      	cmp	r3, #0
 802146e:	d005      	beq.n	802147c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021474:	f043 0204 	orr.w	r2, r3, #4
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 802147c:	69fb      	ldr	r3, [r7, #28]
 802147e:	f003 0308 	and.w	r3, r3, #8
 8021482:	2b00      	cmp	r3, #0
 8021484:	d00f      	beq.n	80214a6 <HAL_UART_IRQHandler+0xfa>
 8021486:	69bb      	ldr	r3, [r7, #24]
 8021488:	f003 0320 	and.w	r3, r3, #32
 802148c:	2b00      	cmp	r3, #0
 802148e:	d104      	bne.n	802149a <HAL_UART_IRQHandler+0xee>
 8021490:	697b      	ldr	r3, [r7, #20]
 8021492:	f003 0301 	and.w	r3, r3, #1
 8021496:	2b00      	cmp	r3, #0
 8021498:	d005      	beq.n	80214a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 802149a:	687b      	ldr	r3, [r7, #4]
 802149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802149e:	f043 0208 	orr.w	r2, r3, #8
 80214a2:	687b      	ldr	r3, [r7, #4]
 80214a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80214a6:	687b      	ldr	r3, [r7, #4]
 80214a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d078      	beq.n	80215a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80214ae:	69fb      	ldr	r3, [r7, #28]
 80214b0:	f003 0320 	and.w	r3, r3, #32
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	d007      	beq.n	80214c8 <HAL_UART_IRQHandler+0x11c>
 80214b8:	69bb      	ldr	r3, [r7, #24]
 80214ba:	f003 0320 	and.w	r3, r3, #32
 80214be:	2b00      	cmp	r3, #0
 80214c0:	d002      	beq.n	80214c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80214c2:	6878      	ldr	r0, [r7, #4]
 80214c4:	f000 f97a 	bl	80217bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80214c8:	687b      	ldr	r3, [r7, #4]
 80214ca:	681b      	ldr	r3, [r3, #0]
 80214cc:	695b      	ldr	r3, [r3, #20]
 80214ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80214d2:	2b40      	cmp	r3, #64	; 0x40
 80214d4:	bf0c      	ite	eq
 80214d6:	2301      	moveq	r3, #1
 80214d8:	2300      	movne	r3, #0
 80214da:	b2db      	uxtb	r3, r3
 80214dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80214de:	687b      	ldr	r3, [r7, #4]
 80214e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80214e2:	f003 0308 	and.w	r3, r3, #8
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	d102      	bne.n	80214f0 <HAL_UART_IRQHandler+0x144>
 80214ea:	68fb      	ldr	r3, [r7, #12]
 80214ec:	2b00      	cmp	r3, #0
 80214ee:	d031      	beq.n	8021554 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80214f0:	6878      	ldr	r0, [r7, #4]
 80214f2:	f000 f8c3 	bl	802167c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	681b      	ldr	r3, [r3, #0]
 80214fa:	695b      	ldr	r3, [r3, #20]
 80214fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021500:	2b40      	cmp	r3, #64	; 0x40
 8021502:	d123      	bne.n	802154c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021504:	687b      	ldr	r3, [r7, #4]
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	695a      	ldr	r2, [r3, #20]
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8021512:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021518:	2b00      	cmp	r3, #0
 802151a:	d013      	beq.n	8021544 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 802151c:	687b      	ldr	r3, [r7, #4]
 802151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021520:	4a21      	ldr	r2, [pc, #132]	; (80215a8 <HAL_UART_IRQHandler+0x1fc>)
 8021522:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021524:	687b      	ldr	r3, [r7, #4]
 8021526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021528:	4618      	mov	r0, r3
 802152a:	f7fc feef 	bl	801e30c <HAL_DMA_Abort_IT>
 802152e:	4603      	mov	r3, r0
 8021530:	2b00      	cmp	r3, #0
 8021532:	d016      	beq.n	8021562 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802153a:	687a      	ldr	r2, [r7, #4]
 802153c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802153e:	4610      	mov	r0, r2
 8021540:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021542:	e00e      	b.n	8021562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021544:	6878      	ldr	r0, [r7, #4]
 8021546:	f000 f845 	bl	80215d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802154a:	e00a      	b.n	8021562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 802154c:	6878      	ldr	r0, [r7, #4]
 802154e:	f000 f841 	bl	80215d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021552:	e006      	b.n	8021562 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021554:	6878      	ldr	r0, [r7, #4]
 8021556:	f000 f83d 	bl	80215d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	2200      	movs	r2, #0
 802155e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8021560:	e01e      	b.n	80215a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021562:	bf00      	nop
    return;
 8021564:	e01c      	b.n	80215a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021566:	69fb      	ldr	r3, [r7, #28]
 8021568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802156c:	2b00      	cmp	r3, #0
 802156e:	d008      	beq.n	8021582 <HAL_UART_IRQHandler+0x1d6>
 8021570:	69bb      	ldr	r3, [r7, #24]
 8021572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021576:	2b00      	cmp	r3, #0
 8021578:	d003      	beq.n	8021582 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 802157a:	6878      	ldr	r0, [r7, #4]
 802157c:	f000 f8b0 	bl	80216e0 <UART_Transmit_IT>
    return;
 8021580:	e00f      	b.n	80215a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8021582:	69fb      	ldr	r3, [r7, #28]
 8021584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021588:	2b00      	cmp	r3, #0
 802158a:	d00a      	beq.n	80215a2 <HAL_UART_IRQHandler+0x1f6>
 802158c:	69bb      	ldr	r3, [r7, #24]
 802158e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021592:	2b00      	cmp	r3, #0
 8021594:	d005      	beq.n	80215a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8021596:	6878      	ldr	r0, [r7, #4]
 8021598:	f000 f8f8 	bl	802178c <UART_EndTransmit_IT>
    return;
 802159c:	bf00      	nop
 802159e:	e000      	b.n	80215a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80215a0:	bf00      	nop
  }
}
 80215a2:	3720      	adds	r7, #32
 80215a4:	46bd      	mov	sp, r7
 80215a6:	bd80      	pop	{r7, pc}
 80215a8:	080216b9 	.word	0x080216b9

080215ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80215ac:	b480      	push	{r7}
 80215ae:	b083      	sub	sp, #12
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80215b4:	bf00      	nop
 80215b6:	370c      	adds	r7, #12
 80215b8:	46bd      	mov	sp, r7
 80215ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215be:	4770      	bx	lr

080215c0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80215c0:	b480      	push	{r7}
 80215c2:	b083      	sub	sp, #12
 80215c4:	af00      	add	r7, sp, #0
 80215c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80215c8:	bf00      	nop
 80215ca:	370c      	adds	r7, #12
 80215cc:	46bd      	mov	sp, r7
 80215ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215d2:	4770      	bx	lr

080215d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80215d4:	b480      	push	{r7}
 80215d6:	b083      	sub	sp, #12
 80215d8:	af00      	add	r7, sp, #0
 80215da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80215dc:	bf00      	nop
 80215de:	370c      	adds	r7, #12
 80215e0:	46bd      	mov	sp, r7
 80215e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80215e6:	4770      	bx	lr

080215e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80215e8:	b580      	push	{r7, lr}
 80215ea:	b084      	sub	sp, #16
 80215ec:	af00      	add	r7, sp, #0
 80215ee:	60f8      	str	r0, [r7, #12]
 80215f0:	60b9      	str	r1, [r7, #8]
 80215f2:	603b      	str	r3, [r7, #0]
 80215f4:	4613      	mov	r3, r2
 80215f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80215f8:	e02c      	b.n	8021654 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80215fa:	69bb      	ldr	r3, [r7, #24]
 80215fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021600:	d028      	beq.n	8021654 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8021602:	69bb      	ldr	r3, [r7, #24]
 8021604:	2b00      	cmp	r3, #0
 8021606:	d007      	beq.n	8021618 <UART_WaitOnFlagUntilTimeout+0x30>
 8021608:	f7fc fc3a 	bl	801de80 <HAL_GetTick>
 802160c:	4602      	mov	r2, r0
 802160e:	683b      	ldr	r3, [r7, #0]
 8021610:	1ad3      	subs	r3, r2, r3
 8021612:	69ba      	ldr	r2, [r7, #24]
 8021614:	429a      	cmp	r2, r3
 8021616:	d21d      	bcs.n	8021654 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8021618:	68fb      	ldr	r3, [r7, #12]
 802161a:	681b      	ldr	r3, [r3, #0]
 802161c:	68da      	ldr	r2, [r3, #12]
 802161e:	68fb      	ldr	r3, [r7, #12]
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8021626:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	681b      	ldr	r3, [r3, #0]
 802162c:	695a      	ldr	r2, [r3, #20]
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	681b      	ldr	r3, [r3, #0]
 8021632:	f022 0201 	bic.w	r2, r2, #1
 8021636:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8021638:	68fb      	ldr	r3, [r7, #12]
 802163a:	2220      	movs	r2, #32
 802163c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8021640:	68fb      	ldr	r3, [r7, #12]
 8021642:	2220      	movs	r2, #32
 8021644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	2200      	movs	r2, #0
 802164c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8021650:	2303      	movs	r3, #3
 8021652:	e00f      	b.n	8021674 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	681b      	ldr	r3, [r3, #0]
 8021658:	681a      	ldr	r2, [r3, #0]
 802165a:	68bb      	ldr	r3, [r7, #8]
 802165c:	4013      	ands	r3, r2
 802165e:	68ba      	ldr	r2, [r7, #8]
 8021660:	429a      	cmp	r2, r3
 8021662:	bf0c      	ite	eq
 8021664:	2301      	moveq	r3, #1
 8021666:	2300      	movne	r3, #0
 8021668:	b2db      	uxtb	r3, r3
 802166a:	461a      	mov	r2, r3
 802166c:	79fb      	ldrb	r3, [r7, #7]
 802166e:	429a      	cmp	r2, r3
 8021670:	d0c3      	beq.n	80215fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8021672:	2300      	movs	r3, #0
}
 8021674:	4618      	mov	r0, r3
 8021676:	3710      	adds	r7, #16
 8021678:	46bd      	mov	sp, r7
 802167a:	bd80      	pop	{r7, pc}

0802167c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 802167c:	b480      	push	{r7}
 802167e:	b083      	sub	sp, #12
 8021680:	af00      	add	r7, sp, #0
 8021682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	681b      	ldr	r3, [r3, #0]
 8021688:	68da      	ldr	r2, [r3, #12]
 802168a:	687b      	ldr	r3, [r7, #4]
 802168c:	681b      	ldr	r3, [r3, #0]
 802168e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8021692:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021694:	687b      	ldr	r3, [r7, #4]
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	695a      	ldr	r2, [r3, #20]
 802169a:	687b      	ldr	r3, [r7, #4]
 802169c:	681b      	ldr	r3, [r3, #0]
 802169e:	f022 0201 	bic.w	r2, r2, #1
 80216a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	2220      	movs	r2, #32
 80216a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80216ac:	bf00      	nop
 80216ae:	370c      	adds	r7, #12
 80216b0:	46bd      	mov	sp, r7
 80216b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216b6:	4770      	bx	lr

080216b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b084      	sub	sp, #16
 80216bc:	af00      	add	r7, sp, #0
 80216be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80216c6:	68fb      	ldr	r3, [r7, #12]
 80216c8:	2200      	movs	r2, #0
 80216ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80216cc:	68fb      	ldr	r3, [r7, #12]
 80216ce:	2200      	movs	r2, #0
 80216d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80216d2:	68f8      	ldr	r0, [r7, #12]
 80216d4:	f7ff ff7e 	bl	80215d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80216d8:	bf00      	nop
 80216da:	3710      	adds	r7, #16
 80216dc:	46bd      	mov	sp, r7
 80216de:	bd80      	pop	{r7, pc}

080216e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80216e0:	b480      	push	{r7}
 80216e2:	b085      	sub	sp, #20
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80216ee:	b2db      	uxtb	r3, r3
 80216f0:	2b21      	cmp	r3, #33	; 0x21
 80216f2:	d144      	bne.n	802177e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	689b      	ldr	r3, [r3, #8]
 80216f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80216fc:	d11a      	bne.n	8021734 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	6a1b      	ldr	r3, [r3, #32]
 8021702:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	881b      	ldrh	r3, [r3, #0]
 8021708:	461a      	mov	r2, r3
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021712:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8021714:	687b      	ldr	r3, [r7, #4]
 8021716:	691b      	ldr	r3, [r3, #16]
 8021718:	2b00      	cmp	r3, #0
 802171a:	d105      	bne.n	8021728 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 802171c:	687b      	ldr	r3, [r7, #4]
 802171e:	6a1b      	ldr	r3, [r3, #32]
 8021720:	1c9a      	adds	r2, r3, #2
 8021722:	687b      	ldr	r3, [r7, #4]
 8021724:	621a      	str	r2, [r3, #32]
 8021726:	e00e      	b.n	8021746 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	6a1b      	ldr	r3, [r3, #32]
 802172c:	1c5a      	adds	r2, r3, #1
 802172e:	687b      	ldr	r3, [r7, #4]
 8021730:	621a      	str	r2, [r3, #32]
 8021732:	e008      	b.n	8021746 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	6a1b      	ldr	r3, [r3, #32]
 8021738:	1c59      	adds	r1, r3, #1
 802173a:	687a      	ldr	r2, [r7, #4]
 802173c:	6211      	str	r1, [r2, #32]
 802173e:	781a      	ldrb	r2, [r3, #0]
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	681b      	ldr	r3, [r3, #0]
 8021744:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802174a:	b29b      	uxth	r3, r3
 802174c:	3b01      	subs	r3, #1
 802174e:	b29b      	uxth	r3, r3
 8021750:	687a      	ldr	r2, [r7, #4]
 8021752:	4619      	mov	r1, r3
 8021754:	84d1      	strh	r1, [r2, #38]	; 0x26
 8021756:	2b00      	cmp	r3, #0
 8021758:	d10f      	bne.n	802177a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 802175a:	687b      	ldr	r3, [r7, #4]
 802175c:	681b      	ldr	r3, [r3, #0]
 802175e:	68da      	ldr	r2, [r3, #12]
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021768:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 802176a:	687b      	ldr	r3, [r7, #4]
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	68da      	ldr	r2, [r3, #12]
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	681b      	ldr	r3, [r3, #0]
 8021774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021778:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 802177a:	2300      	movs	r3, #0
 802177c:	e000      	b.n	8021780 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 802177e:	2302      	movs	r3, #2
  }
}
 8021780:	4618      	mov	r0, r3
 8021782:	3714      	adds	r7, #20
 8021784:	46bd      	mov	sp, r7
 8021786:	f85d 7b04 	ldr.w	r7, [sp], #4
 802178a:	4770      	bx	lr

0802178c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 802178c:	b580      	push	{r7, lr}
 802178e:	b082      	sub	sp, #8
 8021790:	af00      	add	r7, sp, #0
 8021792:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8021794:	687b      	ldr	r3, [r7, #4]
 8021796:	681b      	ldr	r3, [r3, #0]
 8021798:	68da      	ldr	r2, [r3, #12]
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	681b      	ldr	r3, [r3, #0]
 802179e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80217a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	2220      	movs	r2, #32
 80217a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80217ac:	6878      	ldr	r0, [r7, #4]
 80217ae:	f7ff fefd 	bl	80215ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80217b2:	2300      	movs	r3, #0
}
 80217b4:	4618      	mov	r0, r3
 80217b6:	3708      	adds	r7, #8
 80217b8:	46bd      	mov	sp, r7
 80217ba:	bd80      	pop	{r7, pc}

080217bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80217bc:	b580      	push	{r7, lr}
 80217be:	b084      	sub	sp, #16
 80217c0:	af00      	add	r7, sp, #0
 80217c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80217c4:	687b      	ldr	r3, [r7, #4]
 80217c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80217ca:	b2db      	uxtb	r3, r3
 80217cc:	2b22      	cmp	r3, #34	; 0x22
 80217ce:	d171      	bne.n	80218b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	689b      	ldr	r3, [r3, #8]
 80217d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80217d8:	d123      	bne.n	8021822 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80217de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	691b      	ldr	r3, [r3, #16]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d10e      	bne.n	8021806 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80217e8:	687b      	ldr	r3, [r7, #4]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	685b      	ldr	r3, [r3, #4]
 80217ee:	b29b      	uxth	r3, r3
 80217f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80217f4:	b29a      	uxth	r2, r3
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80217fa:	687b      	ldr	r3, [r7, #4]
 80217fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80217fe:	1c9a      	adds	r2, r3, #2
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	629a      	str	r2, [r3, #40]	; 0x28
 8021804:	e029      	b.n	802185a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8021806:	687b      	ldr	r3, [r7, #4]
 8021808:	681b      	ldr	r3, [r3, #0]
 802180a:	685b      	ldr	r3, [r3, #4]
 802180c:	b29b      	uxth	r3, r3
 802180e:	b2db      	uxtb	r3, r3
 8021810:	b29a      	uxth	r2, r3
 8021812:	68fb      	ldr	r3, [r7, #12]
 8021814:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8021816:	687b      	ldr	r3, [r7, #4]
 8021818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802181a:	1c5a      	adds	r2, r3, #1
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	629a      	str	r2, [r3, #40]	; 0x28
 8021820:	e01b      	b.n	802185a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	691b      	ldr	r3, [r3, #16]
 8021826:	2b00      	cmp	r3, #0
 8021828:	d10a      	bne.n	8021840 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	6858      	ldr	r0, [r3, #4]
 8021830:	687b      	ldr	r3, [r7, #4]
 8021832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021834:	1c59      	adds	r1, r3, #1
 8021836:	687a      	ldr	r2, [r7, #4]
 8021838:	6291      	str	r1, [r2, #40]	; 0x28
 802183a:	b2c2      	uxtb	r2, r0
 802183c:	701a      	strb	r2, [r3, #0]
 802183e:	e00c      	b.n	802185a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	685b      	ldr	r3, [r3, #4]
 8021846:	b2da      	uxtb	r2, r3
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802184c:	1c58      	adds	r0, r3, #1
 802184e:	6879      	ldr	r1, [r7, #4]
 8021850:	6288      	str	r0, [r1, #40]	; 0x28
 8021852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8021856:	b2d2      	uxtb	r2, r2
 8021858:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 802185a:	687b      	ldr	r3, [r7, #4]
 802185c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 802185e:	b29b      	uxth	r3, r3
 8021860:	3b01      	subs	r3, #1
 8021862:	b29b      	uxth	r3, r3
 8021864:	687a      	ldr	r2, [r7, #4]
 8021866:	4619      	mov	r1, r3
 8021868:	85d1      	strh	r1, [r2, #46]	; 0x2e
 802186a:	2b00      	cmp	r3, #0
 802186c:	d120      	bne.n	80218b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 802186e:	687b      	ldr	r3, [r7, #4]
 8021870:	681b      	ldr	r3, [r3, #0]
 8021872:	68da      	ldr	r2, [r3, #12]
 8021874:	687b      	ldr	r3, [r7, #4]
 8021876:	681b      	ldr	r3, [r3, #0]
 8021878:	f022 0220 	bic.w	r2, r2, #32
 802187c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 802187e:	687b      	ldr	r3, [r7, #4]
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	68da      	ldr	r2, [r3, #12]
 8021884:	687b      	ldr	r3, [r7, #4]
 8021886:	681b      	ldr	r3, [r3, #0]
 8021888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 802188c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 802188e:	687b      	ldr	r3, [r7, #4]
 8021890:	681b      	ldr	r3, [r3, #0]
 8021892:	695a      	ldr	r2, [r3, #20]
 8021894:	687b      	ldr	r3, [r7, #4]
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	f022 0201 	bic.w	r2, r2, #1
 802189c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	2220      	movs	r2, #32
 80218a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80218a6:	6878      	ldr	r0, [r7, #4]
 80218a8:	f7ff fe8a 	bl	80215c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80218ac:	2300      	movs	r3, #0
 80218ae:	e002      	b.n	80218b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80218b0:	2300      	movs	r3, #0
 80218b2:	e000      	b.n	80218b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80218b4:	2302      	movs	r3, #2
  }
}
 80218b6:	4618      	mov	r0, r3
 80218b8:	3710      	adds	r7, #16
 80218ba:	46bd      	mov	sp, r7
 80218bc:	bd80      	pop	{r7, pc}
	...

080218c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80218c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218c4:	b085      	sub	sp, #20
 80218c6:	af00      	add	r7, sp, #0
 80218c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	681b      	ldr	r3, [r3, #0]
 80218ce:	691b      	ldr	r3, [r3, #16]
 80218d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80218d4:	687b      	ldr	r3, [r7, #4]
 80218d6:	68da      	ldr	r2, [r3, #12]
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	681b      	ldr	r3, [r3, #0]
 80218dc:	430a      	orrs	r2, r1
 80218de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80218e0:	687b      	ldr	r3, [r7, #4]
 80218e2:	689a      	ldr	r2, [r3, #8]
 80218e4:	687b      	ldr	r3, [r7, #4]
 80218e6:	691b      	ldr	r3, [r3, #16]
 80218e8:	431a      	orrs	r2, r3
 80218ea:	687b      	ldr	r3, [r7, #4]
 80218ec:	695b      	ldr	r3, [r3, #20]
 80218ee:	431a      	orrs	r2, r3
 80218f0:	687b      	ldr	r3, [r7, #4]
 80218f2:	69db      	ldr	r3, [r3, #28]
 80218f4:	4313      	orrs	r3, r2
 80218f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	68db      	ldr	r3, [r3, #12]
 80218fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8021902:	f023 030c 	bic.w	r3, r3, #12
 8021906:	687a      	ldr	r2, [r7, #4]
 8021908:	6812      	ldr	r2, [r2, #0]
 802190a:	68f9      	ldr	r1, [r7, #12]
 802190c:	430b      	orrs	r3, r1
 802190e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	681b      	ldr	r3, [r3, #0]
 8021914:	695b      	ldr	r3, [r3, #20]
 8021916:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	699a      	ldr	r2, [r3, #24]
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	681b      	ldr	r3, [r3, #0]
 8021922:	430a      	orrs	r2, r1
 8021924:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021926:	687b      	ldr	r3, [r7, #4]
 8021928:	69db      	ldr	r3, [r3, #28]
 802192a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 802192e:	f040 818b 	bne.w	8021c48 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	681b      	ldr	r3, [r3, #0]
 8021936:	4ac1      	ldr	r2, [pc, #772]	; (8021c3c <UART_SetConfig+0x37c>)
 8021938:	4293      	cmp	r3, r2
 802193a:	d005      	beq.n	8021948 <UART_SetConfig+0x88>
 802193c:	687b      	ldr	r3, [r7, #4]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	4abf      	ldr	r2, [pc, #764]	; (8021c40 <UART_SetConfig+0x380>)
 8021942:	4293      	cmp	r3, r2
 8021944:	f040 80bd 	bne.w	8021ac2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021948:	f7fe faf2 	bl	801ff30 <HAL_RCC_GetPCLK2Freq>
 802194c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 802194e:	68bb      	ldr	r3, [r7, #8]
 8021950:	461d      	mov	r5, r3
 8021952:	f04f 0600 	mov.w	r6, #0
 8021956:	46a8      	mov	r8, r5
 8021958:	46b1      	mov	r9, r6
 802195a:	eb18 0308 	adds.w	r3, r8, r8
 802195e:	eb49 0409 	adc.w	r4, r9, r9
 8021962:	4698      	mov	r8, r3
 8021964:	46a1      	mov	r9, r4
 8021966:	eb18 0805 	adds.w	r8, r8, r5
 802196a:	eb49 0906 	adc.w	r9, r9, r6
 802196e:	f04f 0100 	mov.w	r1, #0
 8021972:	f04f 0200 	mov.w	r2, #0
 8021976:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 802197a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 802197e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021982:	4688      	mov	r8, r1
 8021984:	4691      	mov	r9, r2
 8021986:	eb18 0005 	adds.w	r0, r8, r5
 802198a:	eb49 0106 	adc.w	r1, r9, r6
 802198e:	687b      	ldr	r3, [r7, #4]
 8021990:	685b      	ldr	r3, [r3, #4]
 8021992:	461d      	mov	r5, r3
 8021994:	f04f 0600 	mov.w	r6, #0
 8021998:	196b      	adds	r3, r5, r5
 802199a:	eb46 0406 	adc.w	r4, r6, r6
 802199e:	461a      	mov	r2, r3
 80219a0:	4623      	mov	r3, r4
 80219a2:	f7df f901 	bl	8000ba8 <__aeabi_uldivmod>
 80219a6:	4603      	mov	r3, r0
 80219a8:	460c      	mov	r4, r1
 80219aa:	461a      	mov	r2, r3
 80219ac:	4ba5      	ldr	r3, [pc, #660]	; (8021c44 <UART_SetConfig+0x384>)
 80219ae:	fba3 2302 	umull	r2, r3, r3, r2
 80219b2:	095b      	lsrs	r3, r3, #5
 80219b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80219b8:	68bb      	ldr	r3, [r7, #8]
 80219ba:	461d      	mov	r5, r3
 80219bc:	f04f 0600 	mov.w	r6, #0
 80219c0:	46a9      	mov	r9, r5
 80219c2:	46b2      	mov	sl, r6
 80219c4:	eb19 0309 	adds.w	r3, r9, r9
 80219c8:	eb4a 040a 	adc.w	r4, sl, sl
 80219cc:	4699      	mov	r9, r3
 80219ce:	46a2      	mov	sl, r4
 80219d0:	eb19 0905 	adds.w	r9, r9, r5
 80219d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80219d8:	f04f 0100 	mov.w	r1, #0
 80219dc:	f04f 0200 	mov.w	r2, #0
 80219e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80219e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80219e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80219ec:	4689      	mov	r9, r1
 80219ee:	4692      	mov	sl, r2
 80219f0:	eb19 0005 	adds.w	r0, r9, r5
 80219f4:	eb4a 0106 	adc.w	r1, sl, r6
 80219f8:	687b      	ldr	r3, [r7, #4]
 80219fa:	685b      	ldr	r3, [r3, #4]
 80219fc:	461d      	mov	r5, r3
 80219fe:	f04f 0600 	mov.w	r6, #0
 8021a02:	196b      	adds	r3, r5, r5
 8021a04:	eb46 0406 	adc.w	r4, r6, r6
 8021a08:	461a      	mov	r2, r3
 8021a0a:	4623      	mov	r3, r4
 8021a0c:	f7df f8cc 	bl	8000ba8 <__aeabi_uldivmod>
 8021a10:	4603      	mov	r3, r0
 8021a12:	460c      	mov	r4, r1
 8021a14:	461a      	mov	r2, r3
 8021a16:	4b8b      	ldr	r3, [pc, #556]	; (8021c44 <UART_SetConfig+0x384>)
 8021a18:	fba3 1302 	umull	r1, r3, r3, r2
 8021a1c:	095b      	lsrs	r3, r3, #5
 8021a1e:	2164      	movs	r1, #100	; 0x64
 8021a20:	fb01 f303 	mul.w	r3, r1, r3
 8021a24:	1ad3      	subs	r3, r2, r3
 8021a26:	00db      	lsls	r3, r3, #3
 8021a28:	3332      	adds	r3, #50	; 0x32
 8021a2a:	4a86      	ldr	r2, [pc, #536]	; (8021c44 <UART_SetConfig+0x384>)
 8021a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8021a30:	095b      	lsrs	r3, r3, #5
 8021a32:	005b      	lsls	r3, r3, #1
 8021a34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021a38:	4498      	add	r8, r3
 8021a3a:	68bb      	ldr	r3, [r7, #8]
 8021a3c:	461d      	mov	r5, r3
 8021a3e:	f04f 0600 	mov.w	r6, #0
 8021a42:	46a9      	mov	r9, r5
 8021a44:	46b2      	mov	sl, r6
 8021a46:	eb19 0309 	adds.w	r3, r9, r9
 8021a4a:	eb4a 040a 	adc.w	r4, sl, sl
 8021a4e:	4699      	mov	r9, r3
 8021a50:	46a2      	mov	sl, r4
 8021a52:	eb19 0905 	adds.w	r9, r9, r5
 8021a56:	eb4a 0a06 	adc.w	sl, sl, r6
 8021a5a:	f04f 0100 	mov.w	r1, #0
 8021a5e:	f04f 0200 	mov.w	r2, #0
 8021a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021a66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021a6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021a6e:	4689      	mov	r9, r1
 8021a70:	4692      	mov	sl, r2
 8021a72:	eb19 0005 	adds.w	r0, r9, r5
 8021a76:	eb4a 0106 	adc.w	r1, sl, r6
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	685b      	ldr	r3, [r3, #4]
 8021a7e:	461d      	mov	r5, r3
 8021a80:	f04f 0600 	mov.w	r6, #0
 8021a84:	196b      	adds	r3, r5, r5
 8021a86:	eb46 0406 	adc.w	r4, r6, r6
 8021a8a:	461a      	mov	r2, r3
 8021a8c:	4623      	mov	r3, r4
 8021a8e:	f7df f88b 	bl	8000ba8 <__aeabi_uldivmod>
 8021a92:	4603      	mov	r3, r0
 8021a94:	460c      	mov	r4, r1
 8021a96:	461a      	mov	r2, r3
 8021a98:	4b6a      	ldr	r3, [pc, #424]	; (8021c44 <UART_SetConfig+0x384>)
 8021a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8021a9e:	095b      	lsrs	r3, r3, #5
 8021aa0:	2164      	movs	r1, #100	; 0x64
 8021aa2:	fb01 f303 	mul.w	r3, r1, r3
 8021aa6:	1ad3      	subs	r3, r2, r3
 8021aa8:	00db      	lsls	r3, r3, #3
 8021aaa:	3332      	adds	r3, #50	; 0x32
 8021aac:	4a65      	ldr	r2, [pc, #404]	; (8021c44 <UART_SetConfig+0x384>)
 8021aae:	fba2 2303 	umull	r2, r3, r2, r3
 8021ab2:	095b      	lsrs	r3, r3, #5
 8021ab4:	f003 0207 	and.w	r2, r3, #7
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	681b      	ldr	r3, [r3, #0]
 8021abc:	4442      	add	r2, r8
 8021abe:	609a      	str	r2, [r3, #8]
 8021ac0:	e26f      	b.n	8021fa2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8021ac2:	f7fe fa21 	bl	801ff08 <HAL_RCC_GetPCLK1Freq>
 8021ac6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021ac8:	68bb      	ldr	r3, [r7, #8]
 8021aca:	461d      	mov	r5, r3
 8021acc:	f04f 0600 	mov.w	r6, #0
 8021ad0:	46a8      	mov	r8, r5
 8021ad2:	46b1      	mov	r9, r6
 8021ad4:	eb18 0308 	adds.w	r3, r8, r8
 8021ad8:	eb49 0409 	adc.w	r4, r9, r9
 8021adc:	4698      	mov	r8, r3
 8021ade:	46a1      	mov	r9, r4
 8021ae0:	eb18 0805 	adds.w	r8, r8, r5
 8021ae4:	eb49 0906 	adc.w	r9, r9, r6
 8021ae8:	f04f 0100 	mov.w	r1, #0
 8021aec:	f04f 0200 	mov.w	r2, #0
 8021af0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021af4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021af8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021afc:	4688      	mov	r8, r1
 8021afe:	4691      	mov	r9, r2
 8021b00:	eb18 0005 	adds.w	r0, r8, r5
 8021b04:	eb49 0106 	adc.w	r1, r9, r6
 8021b08:	687b      	ldr	r3, [r7, #4]
 8021b0a:	685b      	ldr	r3, [r3, #4]
 8021b0c:	461d      	mov	r5, r3
 8021b0e:	f04f 0600 	mov.w	r6, #0
 8021b12:	196b      	adds	r3, r5, r5
 8021b14:	eb46 0406 	adc.w	r4, r6, r6
 8021b18:	461a      	mov	r2, r3
 8021b1a:	4623      	mov	r3, r4
 8021b1c:	f7df f844 	bl	8000ba8 <__aeabi_uldivmod>
 8021b20:	4603      	mov	r3, r0
 8021b22:	460c      	mov	r4, r1
 8021b24:	461a      	mov	r2, r3
 8021b26:	4b47      	ldr	r3, [pc, #284]	; (8021c44 <UART_SetConfig+0x384>)
 8021b28:	fba3 2302 	umull	r2, r3, r3, r2
 8021b2c:	095b      	lsrs	r3, r3, #5
 8021b2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021b32:	68bb      	ldr	r3, [r7, #8]
 8021b34:	461d      	mov	r5, r3
 8021b36:	f04f 0600 	mov.w	r6, #0
 8021b3a:	46a9      	mov	r9, r5
 8021b3c:	46b2      	mov	sl, r6
 8021b3e:	eb19 0309 	adds.w	r3, r9, r9
 8021b42:	eb4a 040a 	adc.w	r4, sl, sl
 8021b46:	4699      	mov	r9, r3
 8021b48:	46a2      	mov	sl, r4
 8021b4a:	eb19 0905 	adds.w	r9, r9, r5
 8021b4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8021b52:	f04f 0100 	mov.w	r1, #0
 8021b56:	f04f 0200 	mov.w	r2, #0
 8021b5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021b62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021b66:	4689      	mov	r9, r1
 8021b68:	4692      	mov	sl, r2
 8021b6a:	eb19 0005 	adds.w	r0, r9, r5
 8021b6e:	eb4a 0106 	adc.w	r1, sl, r6
 8021b72:	687b      	ldr	r3, [r7, #4]
 8021b74:	685b      	ldr	r3, [r3, #4]
 8021b76:	461d      	mov	r5, r3
 8021b78:	f04f 0600 	mov.w	r6, #0
 8021b7c:	196b      	adds	r3, r5, r5
 8021b7e:	eb46 0406 	adc.w	r4, r6, r6
 8021b82:	461a      	mov	r2, r3
 8021b84:	4623      	mov	r3, r4
 8021b86:	f7df f80f 	bl	8000ba8 <__aeabi_uldivmod>
 8021b8a:	4603      	mov	r3, r0
 8021b8c:	460c      	mov	r4, r1
 8021b8e:	461a      	mov	r2, r3
 8021b90:	4b2c      	ldr	r3, [pc, #176]	; (8021c44 <UART_SetConfig+0x384>)
 8021b92:	fba3 1302 	umull	r1, r3, r3, r2
 8021b96:	095b      	lsrs	r3, r3, #5
 8021b98:	2164      	movs	r1, #100	; 0x64
 8021b9a:	fb01 f303 	mul.w	r3, r1, r3
 8021b9e:	1ad3      	subs	r3, r2, r3
 8021ba0:	00db      	lsls	r3, r3, #3
 8021ba2:	3332      	adds	r3, #50	; 0x32
 8021ba4:	4a27      	ldr	r2, [pc, #156]	; (8021c44 <UART_SetConfig+0x384>)
 8021ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8021baa:	095b      	lsrs	r3, r3, #5
 8021bac:	005b      	lsls	r3, r3, #1
 8021bae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021bb2:	4498      	add	r8, r3
 8021bb4:	68bb      	ldr	r3, [r7, #8]
 8021bb6:	461d      	mov	r5, r3
 8021bb8:	f04f 0600 	mov.w	r6, #0
 8021bbc:	46a9      	mov	r9, r5
 8021bbe:	46b2      	mov	sl, r6
 8021bc0:	eb19 0309 	adds.w	r3, r9, r9
 8021bc4:	eb4a 040a 	adc.w	r4, sl, sl
 8021bc8:	4699      	mov	r9, r3
 8021bca:	46a2      	mov	sl, r4
 8021bcc:	eb19 0905 	adds.w	r9, r9, r5
 8021bd0:	eb4a 0a06 	adc.w	sl, sl, r6
 8021bd4:	f04f 0100 	mov.w	r1, #0
 8021bd8:	f04f 0200 	mov.w	r2, #0
 8021bdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021be0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021be4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021be8:	4689      	mov	r9, r1
 8021bea:	4692      	mov	sl, r2
 8021bec:	eb19 0005 	adds.w	r0, r9, r5
 8021bf0:	eb4a 0106 	adc.w	r1, sl, r6
 8021bf4:	687b      	ldr	r3, [r7, #4]
 8021bf6:	685b      	ldr	r3, [r3, #4]
 8021bf8:	461d      	mov	r5, r3
 8021bfa:	f04f 0600 	mov.w	r6, #0
 8021bfe:	196b      	adds	r3, r5, r5
 8021c00:	eb46 0406 	adc.w	r4, r6, r6
 8021c04:	461a      	mov	r2, r3
 8021c06:	4623      	mov	r3, r4
 8021c08:	f7de ffce 	bl	8000ba8 <__aeabi_uldivmod>
 8021c0c:	4603      	mov	r3, r0
 8021c0e:	460c      	mov	r4, r1
 8021c10:	461a      	mov	r2, r3
 8021c12:	4b0c      	ldr	r3, [pc, #48]	; (8021c44 <UART_SetConfig+0x384>)
 8021c14:	fba3 1302 	umull	r1, r3, r3, r2
 8021c18:	095b      	lsrs	r3, r3, #5
 8021c1a:	2164      	movs	r1, #100	; 0x64
 8021c1c:	fb01 f303 	mul.w	r3, r1, r3
 8021c20:	1ad3      	subs	r3, r2, r3
 8021c22:	00db      	lsls	r3, r3, #3
 8021c24:	3332      	adds	r3, #50	; 0x32
 8021c26:	4a07      	ldr	r2, [pc, #28]	; (8021c44 <UART_SetConfig+0x384>)
 8021c28:	fba2 2303 	umull	r2, r3, r2, r3
 8021c2c:	095b      	lsrs	r3, r3, #5
 8021c2e:	f003 0207 	and.w	r2, r3, #7
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	681b      	ldr	r3, [r3, #0]
 8021c36:	4442      	add	r2, r8
 8021c38:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8021c3a:	e1b2      	b.n	8021fa2 <UART_SetConfig+0x6e2>
 8021c3c:	40011000 	.word	0x40011000
 8021c40:	40011400 	.word	0x40011400
 8021c44:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021c48:	687b      	ldr	r3, [r7, #4]
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	4ad7      	ldr	r2, [pc, #860]	; (8021fac <UART_SetConfig+0x6ec>)
 8021c4e:	4293      	cmp	r3, r2
 8021c50:	d005      	beq.n	8021c5e <UART_SetConfig+0x39e>
 8021c52:	687b      	ldr	r3, [r7, #4]
 8021c54:	681b      	ldr	r3, [r3, #0]
 8021c56:	4ad6      	ldr	r2, [pc, #856]	; (8021fb0 <UART_SetConfig+0x6f0>)
 8021c58:	4293      	cmp	r3, r2
 8021c5a:	f040 80d1 	bne.w	8021e00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8021c5e:	f7fe f967 	bl	801ff30 <HAL_RCC_GetPCLK2Freq>
 8021c62:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021c64:	68bb      	ldr	r3, [r7, #8]
 8021c66:	469a      	mov	sl, r3
 8021c68:	f04f 0b00 	mov.w	fp, #0
 8021c6c:	46d0      	mov	r8, sl
 8021c6e:	46d9      	mov	r9, fp
 8021c70:	eb18 0308 	adds.w	r3, r8, r8
 8021c74:	eb49 0409 	adc.w	r4, r9, r9
 8021c78:	4698      	mov	r8, r3
 8021c7a:	46a1      	mov	r9, r4
 8021c7c:	eb18 080a 	adds.w	r8, r8, sl
 8021c80:	eb49 090b 	adc.w	r9, r9, fp
 8021c84:	f04f 0100 	mov.w	r1, #0
 8021c88:	f04f 0200 	mov.w	r2, #0
 8021c8c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021c90:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021c94:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021c98:	4688      	mov	r8, r1
 8021c9a:	4691      	mov	r9, r2
 8021c9c:	eb1a 0508 	adds.w	r5, sl, r8
 8021ca0:	eb4b 0609 	adc.w	r6, fp, r9
 8021ca4:	687b      	ldr	r3, [r7, #4]
 8021ca6:	685b      	ldr	r3, [r3, #4]
 8021ca8:	4619      	mov	r1, r3
 8021caa:	f04f 0200 	mov.w	r2, #0
 8021cae:	f04f 0300 	mov.w	r3, #0
 8021cb2:	f04f 0400 	mov.w	r4, #0
 8021cb6:	0094      	lsls	r4, r2, #2
 8021cb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021cbc:	008b      	lsls	r3, r1, #2
 8021cbe:	461a      	mov	r2, r3
 8021cc0:	4623      	mov	r3, r4
 8021cc2:	4628      	mov	r0, r5
 8021cc4:	4631      	mov	r1, r6
 8021cc6:	f7de ff6f 	bl	8000ba8 <__aeabi_uldivmod>
 8021cca:	4603      	mov	r3, r0
 8021ccc:	460c      	mov	r4, r1
 8021cce:	461a      	mov	r2, r3
 8021cd0:	4bb8      	ldr	r3, [pc, #736]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021cd2:	fba3 2302 	umull	r2, r3, r3, r2
 8021cd6:	095b      	lsrs	r3, r3, #5
 8021cd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021cdc:	68bb      	ldr	r3, [r7, #8]
 8021cde:	469b      	mov	fp, r3
 8021ce0:	f04f 0c00 	mov.w	ip, #0
 8021ce4:	46d9      	mov	r9, fp
 8021ce6:	46e2      	mov	sl, ip
 8021ce8:	eb19 0309 	adds.w	r3, r9, r9
 8021cec:	eb4a 040a 	adc.w	r4, sl, sl
 8021cf0:	4699      	mov	r9, r3
 8021cf2:	46a2      	mov	sl, r4
 8021cf4:	eb19 090b 	adds.w	r9, r9, fp
 8021cf8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021cfc:	f04f 0100 	mov.w	r1, #0
 8021d00:	f04f 0200 	mov.w	r2, #0
 8021d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021d08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021d0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021d10:	4689      	mov	r9, r1
 8021d12:	4692      	mov	sl, r2
 8021d14:	eb1b 0509 	adds.w	r5, fp, r9
 8021d18:	eb4c 060a 	adc.w	r6, ip, sl
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	685b      	ldr	r3, [r3, #4]
 8021d20:	4619      	mov	r1, r3
 8021d22:	f04f 0200 	mov.w	r2, #0
 8021d26:	f04f 0300 	mov.w	r3, #0
 8021d2a:	f04f 0400 	mov.w	r4, #0
 8021d2e:	0094      	lsls	r4, r2, #2
 8021d30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021d34:	008b      	lsls	r3, r1, #2
 8021d36:	461a      	mov	r2, r3
 8021d38:	4623      	mov	r3, r4
 8021d3a:	4628      	mov	r0, r5
 8021d3c:	4631      	mov	r1, r6
 8021d3e:	f7de ff33 	bl	8000ba8 <__aeabi_uldivmod>
 8021d42:	4603      	mov	r3, r0
 8021d44:	460c      	mov	r4, r1
 8021d46:	461a      	mov	r2, r3
 8021d48:	4b9a      	ldr	r3, [pc, #616]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021d4a:	fba3 1302 	umull	r1, r3, r3, r2
 8021d4e:	095b      	lsrs	r3, r3, #5
 8021d50:	2164      	movs	r1, #100	; 0x64
 8021d52:	fb01 f303 	mul.w	r3, r1, r3
 8021d56:	1ad3      	subs	r3, r2, r3
 8021d58:	011b      	lsls	r3, r3, #4
 8021d5a:	3332      	adds	r3, #50	; 0x32
 8021d5c:	4a95      	ldr	r2, [pc, #596]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8021d62:	095b      	lsrs	r3, r3, #5
 8021d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d68:	4498      	add	r8, r3
 8021d6a:	68bb      	ldr	r3, [r7, #8]
 8021d6c:	469b      	mov	fp, r3
 8021d6e:	f04f 0c00 	mov.w	ip, #0
 8021d72:	46d9      	mov	r9, fp
 8021d74:	46e2      	mov	sl, ip
 8021d76:	eb19 0309 	adds.w	r3, r9, r9
 8021d7a:	eb4a 040a 	adc.w	r4, sl, sl
 8021d7e:	4699      	mov	r9, r3
 8021d80:	46a2      	mov	sl, r4
 8021d82:	eb19 090b 	adds.w	r9, r9, fp
 8021d86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021d8a:	f04f 0100 	mov.w	r1, #0
 8021d8e:	f04f 0200 	mov.w	r2, #0
 8021d92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021d96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021d9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021d9e:	4689      	mov	r9, r1
 8021da0:	4692      	mov	sl, r2
 8021da2:	eb1b 0509 	adds.w	r5, fp, r9
 8021da6:	eb4c 060a 	adc.w	r6, ip, sl
 8021daa:	687b      	ldr	r3, [r7, #4]
 8021dac:	685b      	ldr	r3, [r3, #4]
 8021dae:	4619      	mov	r1, r3
 8021db0:	f04f 0200 	mov.w	r2, #0
 8021db4:	f04f 0300 	mov.w	r3, #0
 8021db8:	f04f 0400 	mov.w	r4, #0
 8021dbc:	0094      	lsls	r4, r2, #2
 8021dbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021dc2:	008b      	lsls	r3, r1, #2
 8021dc4:	461a      	mov	r2, r3
 8021dc6:	4623      	mov	r3, r4
 8021dc8:	4628      	mov	r0, r5
 8021dca:	4631      	mov	r1, r6
 8021dcc:	f7de feec 	bl	8000ba8 <__aeabi_uldivmod>
 8021dd0:	4603      	mov	r3, r0
 8021dd2:	460c      	mov	r4, r1
 8021dd4:	461a      	mov	r2, r3
 8021dd6:	4b77      	ldr	r3, [pc, #476]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8021ddc:	095b      	lsrs	r3, r3, #5
 8021dde:	2164      	movs	r1, #100	; 0x64
 8021de0:	fb01 f303 	mul.w	r3, r1, r3
 8021de4:	1ad3      	subs	r3, r2, r3
 8021de6:	011b      	lsls	r3, r3, #4
 8021de8:	3332      	adds	r3, #50	; 0x32
 8021dea:	4a72      	ldr	r2, [pc, #456]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021dec:	fba2 2303 	umull	r2, r3, r2, r3
 8021df0:	095b      	lsrs	r3, r3, #5
 8021df2:	f003 020f 	and.w	r2, r3, #15
 8021df6:	687b      	ldr	r3, [r7, #4]
 8021df8:	681b      	ldr	r3, [r3, #0]
 8021dfa:	4442      	add	r2, r8
 8021dfc:	609a      	str	r2, [r3, #8]
 8021dfe:	e0d0      	b.n	8021fa2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8021e00:	f7fe f882 	bl	801ff08 <HAL_RCC_GetPCLK1Freq>
 8021e04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021e06:	68bb      	ldr	r3, [r7, #8]
 8021e08:	469a      	mov	sl, r3
 8021e0a:	f04f 0b00 	mov.w	fp, #0
 8021e0e:	46d0      	mov	r8, sl
 8021e10:	46d9      	mov	r9, fp
 8021e12:	eb18 0308 	adds.w	r3, r8, r8
 8021e16:	eb49 0409 	adc.w	r4, r9, r9
 8021e1a:	4698      	mov	r8, r3
 8021e1c:	46a1      	mov	r9, r4
 8021e1e:	eb18 080a 	adds.w	r8, r8, sl
 8021e22:	eb49 090b 	adc.w	r9, r9, fp
 8021e26:	f04f 0100 	mov.w	r1, #0
 8021e2a:	f04f 0200 	mov.w	r2, #0
 8021e2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021e32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021e36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021e3a:	4688      	mov	r8, r1
 8021e3c:	4691      	mov	r9, r2
 8021e3e:	eb1a 0508 	adds.w	r5, sl, r8
 8021e42:	eb4b 0609 	adc.w	r6, fp, r9
 8021e46:	687b      	ldr	r3, [r7, #4]
 8021e48:	685b      	ldr	r3, [r3, #4]
 8021e4a:	4619      	mov	r1, r3
 8021e4c:	f04f 0200 	mov.w	r2, #0
 8021e50:	f04f 0300 	mov.w	r3, #0
 8021e54:	f04f 0400 	mov.w	r4, #0
 8021e58:	0094      	lsls	r4, r2, #2
 8021e5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021e5e:	008b      	lsls	r3, r1, #2
 8021e60:	461a      	mov	r2, r3
 8021e62:	4623      	mov	r3, r4
 8021e64:	4628      	mov	r0, r5
 8021e66:	4631      	mov	r1, r6
 8021e68:	f7de fe9e 	bl	8000ba8 <__aeabi_uldivmod>
 8021e6c:	4603      	mov	r3, r0
 8021e6e:	460c      	mov	r4, r1
 8021e70:	461a      	mov	r2, r3
 8021e72:	4b50      	ldr	r3, [pc, #320]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021e74:	fba3 2302 	umull	r2, r3, r3, r2
 8021e78:	095b      	lsrs	r3, r3, #5
 8021e7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021e7e:	68bb      	ldr	r3, [r7, #8]
 8021e80:	469b      	mov	fp, r3
 8021e82:	f04f 0c00 	mov.w	ip, #0
 8021e86:	46d9      	mov	r9, fp
 8021e88:	46e2      	mov	sl, ip
 8021e8a:	eb19 0309 	adds.w	r3, r9, r9
 8021e8e:	eb4a 040a 	adc.w	r4, sl, sl
 8021e92:	4699      	mov	r9, r3
 8021e94:	46a2      	mov	sl, r4
 8021e96:	eb19 090b 	adds.w	r9, r9, fp
 8021e9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021e9e:	f04f 0100 	mov.w	r1, #0
 8021ea2:	f04f 0200 	mov.w	r2, #0
 8021ea6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021eaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021eae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021eb2:	4689      	mov	r9, r1
 8021eb4:	4692      	mov	sl, r2
 8021eb6:	eb1b 0509 	adds.w	r5, fp, r9
 8021eba:	eb4c 060a 	adc.w	r6, ip, sl
 8021ebe:	687b      	ldr	r3, [r7, #4]
 8021ec0:	685b      	ldr	r3, [r3, #4]
 8021ec2:	4619      	mov	r1, r3
 8021ec4:	f04f 0200 	mov.w	r2, #0
 8021ec8:	f04f 0300 	mov.w	r3, #0
 8021ecc:	f04f 0400 	mov.w	r4, #0
 8021ed0:	0094      	lsls	r4, r2, #2
 8021ed2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021ed6:	008b      	lsls	r3, r1, #2
 8021ed8:	461a      	mov	r2, r3
 8021eda:	4623      	mov	r3, r4
 8021edc:	4628      	mov	r0, r5
 8021ede:	4631      	mov	r1, r6
 8021ee0:	f7de fe62 	bl	8000ba8 <__aeabi_uldivmod>
 8021ee4:	4603      	mov	r3, r0
 8021ee6:	460c      	mov	r4, r1
 8021ee8:	461a      	mov	r2, r3
 8021eea:	4b32      	ldr	r3, [pc, #200]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021eec:	fba3 1302 	umull	r1, r3, r3, r2
 8021ef0:	095b      	lsrs	r3, r3, #5
 8021ef2:	2164      	movs	r1, #100	; 0x64
 8021ef4:	fb01 f303 	mul.w	r3, r1, r3
 8021ef8:	1ad3      	subs	r3, r2, r3
 8021efa:	011b      	lsls	r3, r3, #4
 8021efc:	3332      	adds	r3, #50	; 0x32
 8021efe:	4a2d      	ldr	r2, [pc, #180]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021f00:	fba2 2303 	umull	r2, r3, r2, r3
 8021f04:	095b      	lsrs	r3, r3, #5
 8021f06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021f0a:	4498      	add	r8, r3
 8021f0c:	68bb      	ldr	r3, [r7, #8]
 8021f0e:	469b      	mov	fp, r3
 8021f10:	f04f 0c00 	mov.w	ip, #0
 8021f14:	46d9      	mov	r9, fp
 8021f16:	46e2      	mov	sl, ip
 8021f18:	eb19 0309 	adds.w	r3, r9, r9
 8021f1c:	eb4a 040a 	adc.w	r4, sl, sl
 8021f20:	4699      	mov	r9, r3
 8021f22:	46a2      	mov	sl, r4
 8021f24:	eb19 090b 	adds.w	r9, r9, fp
 8021f28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021f2c:	f04f 0100 	mov.w	r1, #0
 8021f30:	f04f 0200 	mov.w	r2, #0
 8021f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021f38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021f3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021f40:	4689      	mov	r9, r1
 8021f42:	4692      	mov	sl, r2
 8021f44:	eb1b 0509 	adds.w	r5, fp, r9
 8021f48:	eb4c 060a 	adc.w	r6, ip, sl
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	685b      	ldr	r3, [r3, #4]
 8021f50:	4619      	mov	r1, r3
 8021f52:	f04f 0200 	mov.w	r2, #0
 8021f56:	f04f 0300 	mov.w	r3, #0
 8021f5a:	f04f 0400 	mov.w	r4, #0
 8021f5e:	0094      	lsls	r4, r2, #2
 8021f60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021f64:	008b      	lsls	r3, r1, #2
 8021f66:	461a      	mov	r2, r3
 8021f68:	4623      	mov	r3, r4
 8021f6a:	4628      	mov	r0, r5
 8021f6c:	4631      	mov	r1, r6
 8021f6e:	f7de fe1b 	bl	8000ba8 <__aeabi_uldivmod>
 8021f72:	4603      	mov	r3, r0
 8021f74:	460c      	mov	r4, r1
 8021f76:	461a      	mov	r2, r3
 8021f78:	4b0e      	ldr	r3, [pc, #56]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8021f7e:	095b      	lsrs	r3, r3, #5
 8021f80:	2164      	movs	r1, #100	; 0x64
 8021f82:	fb01 f303 	mul.w	r3, r1, r3
 8021f86:	1ad3      	subs	r3, r2, r3
 8021f88:	011b      	lsls	r3, r3, #4
 8021f8a:	3332      	adds	r3, #50	; 0x32
 8021f8c:	4a09      	ldr	r2, [pc, #36]	; (8021fb4 <UART_SetConfig+0x6f4>)
 8021f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8021f92:	095b      	lsrs	r3, r3, #5
 8021f94:	f003 020f 	and.w	r2, r3, #15
 8021f98:	687b      	ldr	r3, [r7, #4]
 8021f9a:	681b      	ldr	r3, [r3, #0]
 8021f9c:	4442      	add	r2, r8
 8021f9e:	609a      	str	r2, [r3, #8]
}
 8021fa0:	e7ff      	b.n	8021fa2 <UART_SetConfig+0x6e2>
 8021fa2:	bf00      	nop
 8021fa4:	3714      	adds	r7, #20
 8021fa6:	46bd      	mov	sp, r7
 8021fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fac:	40011000 	.word	0x40011000
 8021fb0:	40011400 	.word	0x40011400
 8021fb4:	51eb851f 	.word	0x51eb851f

08021fb8 <__errno>:
 8021fb8:	4b01      	ldr	r3, [pc, #4]	; (8021fc0 <__errno+0x8>)
 8021fba:	6818      	ldr	r0, [r3, #0]
 8021fbc:	4770      	bx	lr
 8021fbe:	bf00      	nop
 8021fc0:	2000000c 	.word	0x2000000c

08021fc4 <__libc_init_array>:
 8021fc4:	b570      	push	{r4, r5, r6, lr}
 8021fc6:	4e0d      	ldr	r6, [pc, #52]	; (8021ffc <__libc_init_array+0x38>)
 8021fc8:	4c0d      	ldr	r4, [pc, #52]	; (8022000 <__libc_init_array+0x3c>)
 8021fca:	1ba4      	subs	r4, r4, r6
 8021fcc:	10a4      	asrs	r4, r4, #2
 8021fce:	2500      	movs	r5, #0
 8021fd0:	42a5      	cmp	r5, r4
 8021fd2:	d109      	bne.n	8021fe8 <__libc_init_array+0x24>
 8021fd4:	4e0b      	ldr	r6, [pc, #44]	; (8022004 <__libc_init_array+0x40>)
 8021fd6:	4c0c      	ldr	r4, [pc, #48]	; (8022008 <__libc_init_array+0x44>)
 8021fd8:	f001 fce4 	bl	80239a4 <_init>
 8021fdc:	1ba4      	subs	r4, r4, r6
 8021fde:	10a4      	asrs	r4, r4, #2
 8021fe0:	2500      	movs	r5, #0
 8021fe2:	42a5      	cmp	r5, r4
 8021fe4:	d105      	bne.n	8021ff2 <__libc_init_array+0x2e>
 8021fe6:	bd70      	pop	{r4, r5, r6, pc}
 8021fe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021fec:	4798      	blx	r3
 8021fee:	3501      	adds	r5, #1
 8021ff0:	e7ee      	b.n	8021fd0 <__libc_init_array+0xc>
 8021ff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021ff6:	4798      	blx	r3
 8021ff8:	3501      	adds	r5, #1
 8021ffa:	e7f2      	b.n	8021fe2 <__libc_init_array+0x1e>
 8021ffc:	0802d350 	.word	0x0802d350
 8022000:	0802d350 	.word	0x0802d350
 8022004:	0802d350 	.word	0x0802d350
 8022008:	0802d354 	.word	0x0802d354

0802200c <memcpy>:
 802200c:	b510      	push	{r4, lr}
 802200e:	1e43      	subs	r3, r0, #1
 8022010:	440a      	add	r2, r1
 8022012:	4291      	cmp	r1, r2
 8022014:	d100      	bne.n	8022018 <memcpy+0xc>
 8022016:	bd10      	pop	{r4, pc}
 8022018:	f811 4b01 	ldrb.w	r4, [r1], #1
 802201c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022020:	e7f7      	b.n	8022012 <memcpy+0x6>

08022022 <memset>:
 8022022:	4402      	add	r2, r0
 8022024:	4603      	mov	r3, r0
 8022026:	4293      	cmp	r3, r2
 8022028:	d100      	bne.n	802202c <memset+0xa>
 802202a:	4770      	bx	lr
 802202c:	f803 1b01 	strb.w	r1, [r3], #1
 8022030:	e7f9      	b.n	8022026 <memset+0x4>
	...

08022034 <rand>:
 8022034:	b538      	push	{r3, r4, r5, lr}
 8022036:	4b13      	ldr	r3, [pc, #76]	; (8022084 <rand+0x50>)
 8022038:	681c      	ldr	r4, [r3, #0]
 802203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802203c:	b97b      	cbnz	r3, 802205e <rand+0x2a>
 802203e:	2018      	movs	r0, #24
 8022040:	f000 f874 	bl	802212c <malloc>
 8022044:	4a10      	ldr	r2, [pc, #64]	; (8022088 <rand+0x54>)
 8022046:	4b11      	ldr	r3, [pc, #68]	; (802208c <rand+0x58>)
 8022048:	63a0      	str	r0, [r4, #56]	; 0x38
 802204a:	e9c0 2300 	strd	r2, r3, [r0]
 802204e:	4b10      	ldr	r3, [pc, #64]	; (8022090 <rand+0x5c>)
 8022050:	6083      	str	r3, [r0, #8]
 8022052:	230b      	movs	r3, #11
 8022054:	8183      	strh	r3, [r0, #12]
 8022056:	2201      	movs	r2, #1
 8022058:	2300      	movs	r3, #0
 802205a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802205e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022060:	480c      	ldr	r0, [pc, #48]	; (8022094 <rand+0x60>)
 8022062:	690a      	ldr	r2, [r1, #16]
 8022064:	694b      	ldr	r3, [r1, #20]
 8022066:	4c0c      	ldr	r4, [pc, #48]	; (8022098 <rand+0x64>)
 8022068:	4350      	muls	r0, r2
 802206a:	fb04 0003 	mla	r0, r4, r3, r0
 802206e:	fba2 2304 	umull	r2, r3, r2, r4
 8022072:	4403      	add	r3, r0
 8022074:	1c54      	adds	r4, r2, #1
 8022076:	f143 0500 	adc.w	r5, r3, #0
 802207a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 802207e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8022082:	bd38      	pop	{r3, r4, r5, pc}
 8022084:	2000000c 	.word	0x2000000c
 8022088:	abcd330e 	.word	0xabcd330e
 802208c:	e66d1234 	.word	0xe66d1234
 8022090:	0005deec 	.word	0x0005deec
 8022094:	5851f42d 	.word	0x5851f42d
 8022098:	4c957f2d 	.word	0x4c957f2d

0802209c <siprintf>:
 802209c:	b40e      	push	{r1, r2, r3}
 802209e:	b500      	push	{lr}
 80220a0:	b09c      	sub	sp, #112	; 0x70
 80220a2:	ab1d      	add	r3, sp, #116	; 0x74
 80220a4:	9002      	str	r0, [sp, #8]
 80220a6:	9006      	str	r0, [sp, #24]
 80220a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220ac:	4809      	ldr	r0, [pc, #36]	; (80220d4 <siprintf+0x38>)
 80220ae:	9107      	str	r1, [sp, #28]
 80220b0:	9104      	str	r1, [sp, #16]
 80220b2:	4909      	ldr	r1, [pc, #36]	; (80220d8 <siprintf+0x3c>)
 80220b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80220b8:	9105      	str	r1, [sp, #20]
 80220ba:	6800      	ldr	r0, [r0, #0]
 80220bc:	9301      	str	r3, [sp, #4]
 80220be:	a902      	add	r1, sp, #8
 80220c0:	f000 f93e 	bl	8022340 <_svfiprintf_r>
 80220c4:	9b02      	ldr	r3, [sp, #8]
 80220c6:	2200      	movs	r2, #0
 80220c8:	701a      	strb	r2, [r3, #0]
 80220ca:	b01c      	add	sp, #112	; 0x70
 80220cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80220d0:	b003      	add	sp, #12
 80220d2:	4770      	bx	lr
 80220d4:	2000000c 	.word	0x2000000c
 80220d8:	ffff0208 	.word	0xffff0208

080220dc <strcpy>:
 80220dc:	4603      	mov	r3, r0
 80220de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80220e2:	f803 2b01 	strb.w	r2, [r3], #1
 80220e6:	2a00      	cmp	r2, #0
 80220e8:	d1f9      	bne.n	80220de <strcpy+0x2>
 80220ea:	4770      	bx	lr

080220ec <_vsiprintf_r>:
 80220ec:	b500      	push	{lr}
 80220ee:	b09b      	sub	sp, #108	; 0x6c
 80220f0:	9100      	str	r1, [sp, #0]
 80220f2:	9104      	str	r1, [sp, #16]
 80220f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80220f8:	9105      	str	r1, [sp, #20]
 80220fa:	9102      	str	r1, [sp, #8]
 80220fc:	4905      	ldr	r1, [pc, #20]	; (8022114 <_vsiprintf_r+0x28>)
 80220fe:	9103      	str	r1, [sp, #12]
 8022100:	4669      	mov	r1, sp
 8022102:	f000 f91d 	bl	8022340 <_svfiprintf_r>
 8022106:	9b00      	ldr	r3, [sp, #0]
 8022108:	2200      	movs	r2, #0
 802210a:	701a      	strb	r2, [r3, #0]
 802210c:	b01b      	add	sp, #108	; 0x6c
 802210e:	f85d fb04 	ldr.w	pc, [sp], #4
 8022112:	bf00      	nop
 8022114:	ffff0208 	.word	0xffff0208

08022118 <vsiprintf>:
 8022118:	4613      	mov	r3, r2
 802211a:	460a      	mov	r2, r1
 802211c:	4601      	mov	r1, r0
 802211e:	4802      	ldr	r0, [pc, #8]	; (8022128 <vsiprintf+0x10>)
 8022120:	6800      	ldr	r0, [r0, #0]
 8022122:	f7ff bfe3 	b.w	80220ec <_vsiprintf_r>
 8022126:	bf00      	nop
 8022128:	2000000c 	.word	0x2000000c

0802212c <malloc>:
 802212c:	4b02      	ldr	r3, [pc, #8]	; (8022138 <malloc+0xc>)
 802212e:	4601      	mov	r1, r0
 8022130:	6818      	ldr	r0, [r3, #0]
 8022132:	f000 b851 	b.w	80221d8 <_malloc_r>
 8022136:	bf00      	nop
 8022138:	2000000c 	.word	0x2000000c

0802213c <_free_r>:
 802213c:	b538      	push	{r3, r4, r5, lr}
 802213e:	4605      	mov	r5, r0
 8022140:	2900      	cmp	r1, #0
 8022142:	d045      	beq.n	80221d0 <_free_r+0x94>
 8022144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022148:	1f0c      	subs	r4, r1, #4
 802214a:	2b00      	cmp	r3, #0
 802214c:	bfb8      	it	lt
 802214e:	18e4      	addlt	r4, r4, r3
 8022150:	f000 fb9f 	bl	8022892 <__malloc_lock>
 8022154:	4a1f      	ldr	r2, [pc, #124]	; (80221d4 <_free_r+0x98>)
 8022156:	6813      	ldr	r3, [r2, #0]
 8022158:	4610      	mov	r0, r2
 802215a:	b933      	cbnz	r3, 802216a <_free_r+0x2e>
 802215c:	6063      	str	r3, [r4, #4]
 802215e:	6014      	str	r4, [r2, #0]
 8022160:	4628      	mov	r0, r5
 8022162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022166:	f000 bb95 	b.w	8022894 <__malloc_unlock>
 802216a:	42a3      	cmp	r3, r4
 802216c:	d90c      	bls.n	8022188 <_free_r+0x4c>
 802216e:	6821      	ldr	r1, [r4, #0]
 8022170:	1862      	adds	r2, r4, r1
 8022172:	4293      	cmp	r3, r2
 8022174:	bf04      	itt	eq
 8022176:	681a      	ldreq	r2, [r3, #0]
 8022178:	685b      	ldreq	r3, [r3, #4]
 802217a:	6063      	str	r3, [r4, #4]
 802217c:	bf04      	itt	eq
 802217e:	1852      	addeq	r2, r2, r1
 8022180:	6022      	streq	r2, [r4, #0]
 8022182:	6004      	str	r4, [r0, #0]
 8022184:	e7ec      	b.n	8022160 <_free_r+0x24>
 8022186:	4613      	mov	r3, r2
 8022188:	685a      	ldr	r2, [r3, #4]
 802218a:	b10a      	cbz	r2, 8022190 <_free_r+0x54>
 802218c:	42a2      	cmp	r2, r4
 802218e:	d9fa      	bls.n	8022186 <_free_r+0x4a>
 8022190:	6819      	ldr	r1, [r3, #0]
 8022192:	1858      	adds	r0, r3, r1
 8022194:	42a0      	cmp	r0, r4
 8022196:	d10b      	bne.n	80221b0 <_free_r+0x74>
 8022198:	6820      	ldr	r0, [r4, #0]
 802219a:	4401      	add	r1, r0
 802219c:	1858      	adds	r0, r3, r1
 802219e:	4282      	cmp	r2, r0
 80221a0:	6019      	str	r1, [r3, #0]
 80221a2:	d1dd      	bne.n	8022160 <_free_r+0x24>
 80221a4:	6810      	ldr	r0, [r2, #0]
 80221a6:	6852      	ldr	r2, [r2, #4]
 80221a8:	605a      	str	r2, [r3, #4]
 80221aa:	4401      	add	r1, r0
 80221ac:	6019      	str	r1, [r3, #0]
 80221ae:	e7d7      	b.n	8022160 <_free_r+0x24>
 80221b0:	d902      	bls.n	80221b8 <_free_r+0x7c>
 80221b2:	230c      	movs	r3, #12
 80221b4:	602b      	str	r3, [r5, #0]
 80221b6:	e7d3      	b.n	8022160 <_free_r+0x24>
 80221b8:	6820      	ldr	r0, [r4, #0]
 80221ba:	1821      	adds	r1, r4, r0
 80221bc:	428a      	cmp	r2, r1
 80221be:	bf04      	itt	eq
 80221c0:	6811      	ldreq	r1, [r2, #0]
 80221c2:	6852      	ldreq	r2, [r2, #4]
 80221c4:	6062      	str	r2, [r4, #4]
 80221c6:	bf04      	itt	eq
 80221c8:	1809      	addeq	r1, r1, r0
 80221ca:	6021      	streq	r1, [r4, #0]
 80221cc:	605c      	str	r4, [r3, #4]
 80221ce:	e7c7      	b.n	8022160 <_free_r+0x24>
 80221d0:	bd38      	pop	{r3, r4, r5, pc}
 80221d2:	bf00      	nop
 80221d4:	200000b0 	.word	0x200000b0

080221d8 <_malloc_r>:
 80221d8:	b570      	push	{r4, r5, r6, lr}
 80221da:	1ccd      	adds	r5, r1, #3
 80221dc:	f025 0503 	bic.w	r5, r5, #3
 80221e0:	3508      	adds	r5, #8
 80221e2:	2d0c      	cmp	r5, #12
 80221e4:	bf38      	it	cc
 80221e6:	250c      	movcc	r5, #12
 80221e8:	2d00      	cmp	r5, #0
 80221ea:	4606      	mov	r6, r0
 80221ec:	db01      	blt.n	80221f2 <_malloc_r+0x1a>
 80221ee:	42a9      	cmp	r1, r5
 80221f0:	d903      	bls.n	80221fa <_malloc_r+0x22>
 80221f2:	230c      	movs	r3, #12
 80221f4:	6033      	str	r3, [r6, #0]
 80221f6:	2000      	movs	r0, #0
 80221f8:	bd70      	pop	{r4, r5, r6, pc}
 80221fa:	f000 fb4a 	bl	8022892 <__malloc_lock>
 80221fe:	4a21      	ldr	r2, [pc, #132]	; (8022284 <_malloc_r+0xac>)
 8022200:	6814      	ldr	r4, [r2, #0]
 8022202:	4621      	mov	r1, r4
 8022204:	b991      	cbnz	r1, 802222c <_malloc_r+0x54>
 8022206:	4c20      	ldr	r4, [pc, #128]	; (8022288 <_malloc_r+0xb0>)
 8022208:	6823      	ldr	r3, [r4, #0]
 802220a:	b91b      	cbnz	r3, 8022214 <_malloc_r+0x3c>
 802220c:	4630      	mov	r0, r6
 802220e:	f000 fb17 	bl	8022840 <_sbrk_r>
 8022212:	6020      	str	r0, [r4, #0]
 8022214:	4629      	mov	r1, r5
 8022216:	4630      	mov	r0, r6
 8022218:	f000 fb12 	bl	8022840 <_sbrk_r>
 802221c:	1c43      	adds	r3, r0, #1
 802221e:	d124      	bne.n	802226a <_malloc_r+0x92>
 8022220:	230c      	movs	r3, #12
 8022222:	6033      	str	r3, [r6, #0]
 8022224:	4630      	mov	r0, r6
 8022226:	f000 fb35 	bl	8022894 <__malloc_unlock>
 802222a:	e7e4      	b.n	80221f6 <_malloc_r+0x1e>
 802222c:	680b      	ldr	r3, [r1, #0]
 802222e:	1b5b      	subs	r3, r3, r5
 8022230:	d418      	bmi.n	8022264 <_malloc_r+0x8c>
 8022232:	2b0b      	cmp	r3, #11
 8022234:	d90f      	bls.n	8022256 <_malloc_r+0x7e>
 8022236:	600b      	str	r3, [r1, #0]
 8022238:	50cd      	str	r5, [r1, r3]
 802223a:	18cc      	adds	r4, r1, r3
 802223c:	4630      	mov	r0, r6
 802223e:	f000 fb29 	bl	8022894 <__malloc_unlock>
 8022242:	f104 000b 	add.w	r0, r4, #11
 8022246:	1d23      	adds	r3, r4, #4
 8022248:	f020 0007 	bic.w	r0, r0, #7
 802224c:	1ac3      	subs	r3, r0, r3
 802224e:	d0d3      	beq.n	80221f8 <_malloc_r+0x20>
 8022250:	425a      	negs	r2, r3
 8022252:	50e2      	str	r2, [r4, r3]
 8022254:	e7d0      	b.n	80221f8 <_malloc_r+0x20>
 8022256:	428c      	cmp	r4, r1
 8022258:	684b      	ldr	r3, [r1, #4]
 802225a:	bf16      	itet	ne
 802225c:	6063      	strne	r3, [r4, #4]
 802225e:	6013      	streq	r3, [r2, #0]
 8022260:	460c      	movne	r4, r1
 8022262:	e7eb      	b.n	802223c <_malloc_r+0x64>
 8022264:	460c      	mov	r4, r1
 8022266:	6849      	ldr	r1, [r1, #4]
 8022268:	e7cc      	b.n	8022204 <_malloc_r+0x2c>
 802226a:	1cc4      	adds	r4, r0, #3
 802226c:	f024 0403 	bic.w	r4, r4, #3
 8022270:	42a0      	cmp	r0, r4
 8022272:	d005      	beq.n	8022280 <_malloc_r+0xa8>
 8022274:	1a21      	subs	r1, r4, r0
 8022276:	4630      	mov	r0, r6
 8022278:	f000 fae2 	bl	8022840 <_sbrk_r>
 802227c:	3001      	adds	r0, #1
 802227e:	d0cf      	beq.n	8022220 <_malloc_r+0x48>
 8022280:	6025      	str	r5, [r4, #0]
 8022282:	e7db      	b.n	802223c <_malloc_r+0x64>
 8022284:	200000b0 	.word	0x200000b0
 8022288:	200000b4 	.word	0x200000b4

0802228c <__ssputs_r>:
 802228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022290:	688e      	ldr	r6, [r1, #8]
 8022292:	429e      	cmp	r6, r3
 8022294:	4682      	mov	sl, r0
 8022296:	460c      	mov	r4, r1
 8022298:	4690      	mov	r8, r2
 802229a:	4699      	mov	r9, r3
 802229c:	d837      	bhi.n	802230e <__ssputs_r+0x82>
 802229e:	898a      	ldrh	r2, [r1, #12]
 80222a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80222a4:	d031      	beq.n	802230a <__ssputs_r+0x7e>
 80222a6:	6825      	ldr	r5, [r4, #0]
 80222a8:	6909      	ldr	r1, [r1, #16]
 80222aa:	1a6f      	subs	r7, r5, r1
 80222ac:	6965      	ldr	r5, [r4, #20]
 80222ae:	2302      	movs	r3, #2
 80222b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80222b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80222b8:	f109 0301 	add.w	r3, r9, #1
 80222bc:	443b      	add	r3, r7
 80222be:	429d      	cmp	r5, r3
 80222c0:	bf38      	it	cc
 80222c2:	461d      	movcc	r5, r3
 80222c4:	0553      	lsls	r3, r2, #21
 80222c6:	d530      	bpl.n	802232a <__ssputs_r+0x9e>
 80222c8:	4629      	mov	r1, r5
 80222ca:	f7ff ff85 	bl	80221d8 <_malloc_r>
 80222ce:	4606      	mov	r6, r0
 80222d0:	b950      	cbnz	r0, 80222e8 <__ssputs_r+0x5c>
 80222d2:	230c      	movs	r3, #12
 80222d4:	f8ca 3000 	str.w	r3, [sl]
 80222d8:	89a3      	ldrh	r3, [r4, #12]
 80222da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80222de:	81a3      	strh	r3, [r4, #12]
 80222e0:	f04f 30ff 	mov.w	r0, #4294967295
 80222e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222e8:	463a      	mov	r2, r7
 80222ea:	6921      	ldr	r1, [r4, #16]
 80222ec:	f7ff fe8e 	bl	802200c <memcpy>
 80222f0:	89a3      	ldrh	r3, [r4, #12]
 80222f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80222f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80222fa:	81a3      	strh	r3, [r4, #12]
 80222fc:	6126      	str	r6, [r4, #16]
 80222fe:	6165      	str	r5, [r4, #20]
 8022300:	443e      	add	r6, r7
 8022302:	1bed      	subs	r5, r5, r7
 8022304:	6026      	str	r6, [r4, #0]
 8022306:	60a5      	str	r5, [r4, #8]
 8022308:	464e      	mov	r6, r9
 802230a:	454e      	cmp	r6, r9
 802230c:	d900      	bls.n	8022310 <__ssputs_r+0x84>
 802230e:	464e      	mov	r6, r9
 8022310:	4632      	mov	r2, r6
 8022312:	4641      	mov	r1, r8
 8022314:	6820      	ldr	r0, [r4, #0]
 8022316:	f000 faa3 	bl	8022860 <memmove>
 802231a:	68a3      	ldr	r3, [r4, #8]
 802231c:	1b9b      	subs	r3, r3, r6
 802231e:	60a3      	str	r3, [r4, #8]
 8022320:	6823      	ldr	r3, [r4, #0]
 8022322:	441e      	add	r6, r3
 8022324:	6026      	str	r6, [r4, #0]
 8022326:	2000      	movs	r0, #0
 8022328:	e7dc      	b.n	80222e4 <__ssputs_r+0x58>
 802232a:	462a      	mov	r2, r5
 802232c:	f000 fab3 	bl	8022896 <_realloc_r>
 8022330:	4606      	mov	r6, r0
 8022332:	2800      	cmp	r0, #0
 8022334:	d1e2      	bne.n	80222fc <__ssputs_r+0x70>
 8022336:	6921      	ldr	r1, [r4, #16]
 8022338:	4650      	mov	r0, sl
 802233a:	f7ff feff 	bl	802213c <_free_r>
 802233e:	e7c8      	b.n	80222d2 <__ssputs_r+0x46>

08022340 <_svfiprintf_r>:
 8022340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022344:	461d      	mov	r5, r3
 8022346:	898b      	ldrh	r3, [r1, #12]
 8022348:	061f      	lsls	r7, r3, #24
 802234a:	b09d      	sub	sp, #116	; 0x74
 802234c:	4680      	mov	r8, r0
 802234e:	460c      	mov	r4, r1
 8022350:	4616      	mov	r6, r2
 8022352:	d50f      	bpl.n	8022374 <_svfiprintf_r+0x34>
 8022354:	690b      	ldr	r3, [r1, #16]
 8022356:	b96b      	cbnz	r3, 8022374 <_svfiprintf_r+0x34>
 8022358:	2140      	movs	r1, #64	; 0x40
 802235a:	f7ff ff3d 	bl	80221d8 <_malloc_r>
 802235e:	6020      	str	r0, [r4, #0]
 8022360:	6120      	str	r0, [r4, #16]
 8022362:	b928      	cbnz	r0, 8022370 <_svfiprintf_r+0x30>
 8022364:	230c      	movs	r3, #12
 8022366:	f8c8 3000 	str.w	r3, [r8]
 802236a:	f04f 30ff 	mov.w	r0, #4294967295
 802236e:	e0c8      	b.n	8022502 <_svfiprintf_r+0x1c2>
 8022370:	2340      	movs	r3, #64	; 0x40
 8022372:	6163      	str	r3, [r4, #20]
 8022374:	2300      	movs	r3, #0
 8022376:	9309      	str	r3, [sp, #36]	; 0x24
 8022378:	2320      	movs	r3, #32
 802237a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802237e:	2330      	movs	r3, #48	; 0x30
 8022380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022384:	9503      	str	r5, [sp, #12]
 8022386:	f04f 0b01 	mov.w	fp, #1
 802238a:	4637      	mov	r7, r6
 802238c:	463d      	mov	r5, r7
 802238e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022392:	b10b      	cbz	r3, 8022398 <_svfiprintf_r+0x58>
 8022394:	2b25      	cmp	r3, #37	; 0x25
 8022396:	d13e      	bne.n	8022416 <_svfiprintf_r+0xd6>
 8022398:	ebb7 0a06 	subs.w	sl, r7, r6
 802239c:	d00b      	beq.n	80223b6 <_svfiprintf_r+0x76>
 802239e:	4653      	mov	r3, sl
 80223a0:	4632      	mov	r2, r6
 80223a2:	4621      	mov	r1, r4
 80223a4:	4640      	mov	r0, r8
 80223a6:	f7ff ff71 	bl	802228c <__ssputs_r>
 80223aa:	3001      	adds	r0, #1
 80223ac:	f000 80a4 	beq.w	80224f8 <_svfiprintf_r+0x1b8>
 80223b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80223b2:	4453      	add	r3, sl
 80223b4:	9309      	str	r3, [sp, #36]	; 0x24
 80223b6:	783b      	ldrb	r3, [r7, #0]
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	f000 809d 	beq.w	80224f8 <_svfiprintf_r+0x1b8>
 80223be:	2300      	movs	r3, #0
 80223c0:	f04f 32ff 	mov.w	r2, #4294967295
 80223c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80223c8:	9304      	str	r3, [sp, #16]
 80223ca:	9307      	str	r3, [sp, #28]
 80223cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80223d0:	931a      	str	r3, [sp, #104]	; 0x68
 80223d2:	462f      	mov	r7, r5
 80223d4:	2205      	movs	r2, #5
 80223d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80223da:	4850      	ldr	r0, [pc, #320]	; (802251c <_svfiprintf_r+0x1dc>)
 80223dc:	f7dd ff08 	bl	80001f0 <memchr>
 80223e0:	9b04      	ldr	r3, [sp, #16]
 80223e2:	b9d0      	cbnz	r0, 802241a <_svfiprintf_r+0xda>
 80223e4:	06d9      	lsls	r1, r3, #27
 80223e6:	bf44      	itt	mi
 80223e8:	2220      	movmi	r2, #32
 80223ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80223ee:	071a      	lsls	r2, r3, #28
 80223f0:	bf44      	itt	mi
 80223f2:	222b      	movmi	r2, #43	; 0x2b
 80223f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80223f8:	782a      	ldrb	r2, [r5, #0]
 80223fa:	2a2a      	cmp	r2, #42	; 0x2a
 80223fc:	d015      	beq.n	802242a <_svfiprintf_r+0xea>
 80223fe:	9a07      	ldr	r2, [sp, #28]
 8022400:	462f      	mov	r7, r5
 8022402:	2000      	movs	r0, #0
 8022404:	250a      	movs	r5, #10
 8022406:	4639      	mov	r1, r7
 8022408:	f811 3b01 	ldrb.w	r3, [r1], #1
 802240c:	3b30      	subs	r3, #48	; 0x30
 802240e:	2b09      	cmp	r3, #9
 8022410:	d94d      	bls.n	80224ae <_svfiprintf_r+0x16e>
 8022412:	b1b8      	cbz	r0, 8022444 <_svfiprintf_r+0x104>
 8022414:	e00f      	b.n	8022436 <_svfiprintf_r+0xf6>
 8022416:	462f      	mov	r7, r5
 8022418:	e7b8      	b.n	802238c <_svfiprintf_r+0x4c>
 802241a:	4a40      	ldr	r2, [pc, #256]	; (802251c <_svfiprintf_r+0x1dc>)
 802241c:	1a80      	subs	r0, r0, r2
 802241e:	fa0b f000 	lsl.w	r0, fp, r0
 8022422:	4318      	orrs	r0, r3
 8022424:	9004      	str	r0, [sp, #16]
 8022426:	463d      	mov	r5, r7
 8022428:	e7d3      	b.n	80223d2 <_svfiprintf_r+0x92>
 802242a:	9a03      	ldr	r2, [sp, #12]
 802242c:	1d11      	adds	r1, r2, #4
 802242e:	6812      	ldr	r2, [r2, #0]
 8022430:	9103      	str	r1, [sp, #12]
 8022432:	2a00      	cmp	r2, #0
 8022434:	db01      	blt.n	802243a <_svfiprintf_r+0xfa>
 8022436:	9207      	str	r2, [sp, #28]
 8022438:	e004      	b.n	8022444 <_svfiprintf_r+0x104>
 802243a:	4252      	negs	r2, r2
 802243c:	f043 0302 	orr.w	r3, r3, #2
 8022440:	9207      	str	r2, [sp, #28]
 8022442:	9304      	str	r3, [sp, #16]
 8022444:	783b      	ldrb	r3, [r7, #0]
 8022446:	2b2e      	cmp	r3, #46	; 0x2e
 8022448:	d10c      	bne.n	8022464 <_svfiprintf_r+0x124>
 802244a:	787b      	ldrb	r3, [r7, #1]
 802244c:	2b2a      	cmp	r3, #42	; 0x2a
 802244e:	d133      	bne.n	80224b8 <_svfiprintf_r+0x178>
 8022450:	9b03      	ldr	r3, [sp, #12]
 8022452:	1d1a      	adds	r2, r3, #4
 8022454:	681b      	ldr	r3, [r3, #0]
 8022456:	9203      	str	r2, [sp, #12]
 8022458:	2b00      	cmp	r3, #0
 802245a:	bfb8      	it	lt
 802245c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022460:	3702      	adds	r7, #2
 8022462:	9305      	str	r3, [sp, #20]
 8022464:	4d2e      	ldr	r5, [pc, #184]	; (8022520 <_svfiprintf_r+0x1e0>)
 8022466:	7839      	ldrb	r1, [r7, #0]
 8022468:	2203      	movs	r2, #3
 802246a:	4628      	mov	r0, r5
 802246c:	f7dd fec0 	bl	80001f0 <memchr>
 8022470:	b138      	cbz	r0, 8022482 <_svfiprintf_r+0x142>
 8022472:	2340      	movs	r3, #64	; 0x40
 8022474:	1b40      	subs	r0, r0, r5
 8022476:	fa03 f000 	lsl.w	r0, r3, r0
 802247a:	9b04      	ldr	r3, [sp, #16]
 802247c:	4303      	orrs	r3, r0
 802247e:	3701      	adds	r7, #1
 8022480:	9304      	str	r3, [sp, #16]
 8022482:	7839      	ldrb	r1, [r7, #0]
 8022484:	4827      	ldr	r0, [pc, #156]	; (8022524 <_svfiprintf_r+0x1e4>)
 8022486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802248a:	2206      	movs	r2, #6
 802248c:	1c7e      	adds	r6, r7, #1
 802248e:	f7dd feaf 	bl	80001f0 <memchr>
 8022492:	2800      	cmp	r0, #0
 8022494:	d038      	beq.n	8022508 <_svfiprintf_r+0x1c8>
 8022496:	4b24      	ldr	r3, [pc, #144]	; (8022528 <_svfiprintf_r+0x1e8>)
 8022498:	bb13      	cbnz	r3, 80224e0 <_svfiprintf_r+0x1a0>
 802249a:	9b03      	ldr	r3, [sp, #12]
 802249c:	3307      	adds	r3, #7
 802249e:	f023 0307 	bic.w	r3, r3, #7
 80224a2:	3308      	adds	r3, #8
 80224a4:	9303      	str	r3, [sp, #12]
 80224a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224a8:	444b      	add	r3, r9
 80224aa:	9309      	str	r3, [sp, #36]	; 0x24
 80224ac:	e76d      	b.n	802238a <_svfiprintf_r+0x4a>
 80224ae:	fb05 3202 	mla	r2, r5, r2, r3
 80224b2:	2001      	movs	r0, #1
 80224b4:	460f      	mov	r7, r1
 80224b6:	e7a6      	b.n	8022406 <_svfiprintf_r+0xc6>
 80224b8:	2300      	movs	r3, #0
 80224ba:	3701      	adds	r7, #1
 80224bc:	9305      	str	r3, [sp, #20]
 80224be:	4619      	mov	r1, r3
 80224c0:	250a      	movs	r5, #10
 80224c2:	4638      	mov	r0, r7
 80224c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80224c8:	3a30      	subs	r2, #48	; 0x30
 80224ca:	2a09      	cmp	r2, #9
 80224cc:	d903      	bls.n	80224d6 <_svfiprintf_r+0x196>
 80224ce:	2b00      	cmp	r3, #0
 80224d0:	d0c8      	beq.n	8022464 <_svfiprintf_r+0x124>
 80224d2:	9105      	str	r1, [sp, #20]
 80224d4:	e7c6      	b.n	8022464 <_svfiprintf_r+0x124>
 80224d6:	fb05 2101 	mla	r1, r5, r1, r2
 80224da:	2301      	movs	r3, #1
 80224dc:	4607      	mov	r7, r0
 80224de:	e7f0      	b.n	80224c2 <_svfiprintf_r+0x182>
 80224e0:	ab03      	add	r3, sp, #12
 80224e2:	9300      	str	r3, [sp, #0]
 80224e4:	4622      	mov	r2, r4
 80224e6:	4b11      	ldr	r3, [pc, #68]	; (802252c <_svfiprintf_r+0x1ec>)
 80224e8:	a904      	add	r1, sp, #16
 80224ea:	4640      	mov	r0, r8
 80224ec:	f3af 8000 	nop.w
 80224f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80224f4:	4681      	mov	r9, r0
 80224f6:	d1d6      	bne.n	80224a6 <_svfiprintf_r+0x166>
 80224f8:	89a3      	ldrh	r3, [r4, #12]
 80224fa:	065b      	lsls	r3, r3, #25
 80224fc:	f53f af35 	bmi.w	802236a <_svfiprintf_r+0x2a>
 8022500:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022502:	b01d      	add	sp, #116	; 0x74
 8022504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022508:	ab03      	add	r3, sp, #12
 802250a:	9300      	str	r3, [sp, #0]
 802250c:	4622      	mov	r2, r4
 802250e:	4b07      	ldr	r3, [pc, #28]	; (802252c <_svfiprintf_r+0x1ec>)
 8022510:	a904      	add	r1, sp, #16
 8022512:	4640      	mov	r0, r8
 8022514:	f000 f882 	bl	802261c <_printf_i>
 8022518:	e7ea      	b.n	80224f0 <_svfiprintf_r+0x1b0>
 802251a:	bf00      	nop
 802251c:	0802d2cc 	.word	0x0802d2cc
 8022520:	0802d2d2 	.word	0x0802d2d2
 8022524:	0802d2d6 	.word	0x0802d2d6
 8022528:	00000000 	.word	0x00000000
 802252c:	0802228d 	.word	0x0802228d

08022530 <_printf_common>:
 8022530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022534:	4691      	mov	r9, r2
 8022536:	461f      	mov	r7, r3
 8022538:	688a      	ldr	r2, [r1, #8]
 802253a:	690b      	ldr	r3, [r1, #16]
 802253c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022540:	4293      	cmp	r3, r2
 8022542:	bfb8      	it	lt
 8022544:	4613      	movlt	r3, r2
 8022546:	f8c9 3000 	str.w	r3, [r9]
 802254a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802254e:	4606      	mov	r6, r0
 8022550:	460c      	mov	r4, r1
 8022552:	b112      	cbz	r2, 802255a <_printf_common+0x2a>
 8022554:	3301      	adds	r3, #1
 8022556:	f8c9 3000 	str.w	r3, [r9]
 802255a:	6823      	ldr	r3, [r4, #0]
 802255c:	0699      	lsls	r1, r3, #26
 802255e:	bf42      	ittt	mi
 8022560:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022564:	3302      	addmi	r3, #2
 8022566:	f8c9 3000 	strmi.w	r3, [r9]
 802256a:	6825      	ldr	r5, [r4, #0]
 802256c:	f015 0506 	ands.w	r5, r5, #6
 8022570:	d107      	bne.n	8022582 <_printf_common+0x52>
 8022572:	f104 0a19 	add.w	sl, r4, #25
 8022576:	68e3      	ldr	r3, [r4, #12]
 8022578:	f8d9 2000 	ldr.w	r2, [r9]
 802257c:	1a9b      	subs	r3, r3, r2
 802257e:	42ab      	cmp	r3, r5
 8022580:	dc28      	bgt.n	80225d4 <_printf_common+0xa4>
 8022582:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8022586:	6822      	ldr	r2, [r4, #0]
 8022588:	3300      	adds	r3, #0
 802258a:	bf18      	it	ne
 802258c:	2301      	movne	r3, #1
 802258e:	0692      	lsls	r2, r2, #26
 8022590:	d42d      	bmi.n	80225ee <_printf_common+0xbe>
 8022592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022596:	4639      	mov	r1, r7
 8022598:	4630      	mov	r0, r6
 802259a:	47c0      	blx	r8
 802259c:	3001      	adds	r0, #1
 802259e:	d020      	beq.n	80225e2 <_printf_common+0xb2>
 80225a0:	6823      	ldr	r3, [r4, #0]
 80225a2:	68e5      	ldr	r5, [r4, #12]
 80225a4:	f8d9 2000 	ldr.w	r2, [r9]
 80225a8:	f003 0306 	and.w	r3, r3, #6
 80225ac:	2b04      	cmp	r3, #4
 80225ae:	bf08      	it	eq
 80225b0:	1aad      	subeq	r5, r5, r2
 80225b2:	68a3      	ldr	r3, [r4, #8]
 80225b4:	6922      	ldr	r2, [r4, #16]
 80225b6:	bf0c      	ite	eq
 80225b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80225bc:	2500      	movne	r5, #0
 80225be:	4293      	cmp	r3, r2
 80225c0:	bfc4      	itt	gt
 80225c2:	1a9b      	subgt	r3, r3, r2
 80225c4:	18ed      	addgt	r5, r5, r3
 80225c6:	f04f 0900 	mov.w	r9, #0
 80225ca:	341a      	adds	r4, #26
 80225cc:	454d      	cmp	r5, r9
 80225ce:	d11a      	bne.n	8022606 <_printf_common+0xd6>
 80225d0:	2000      	movs	r0, #0
 80225d2:	e008      	b.n	80225e6 <_printf_common+0xb6>
 80225d4:	2301      	movs	r3, #1
 80225d6:	4652      	mov	r2, sl
 80225d8:	4639      	mov	r1, r7
 80225da:	4630      	mov	r0, r6
 80225dc:	47c0      	blx	r8
 80225de:	3001      	adds	r0, #1
 80225e0:	d103      	bne.n	80225ea <_printf_common+0xba>
 80225e2:	f04f 30ff 	mov.w	r0, #4294967295
 80225e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80225ea:	3501      	adds	r5, #1
 80225ec:	e7c3      	b.n	8022576 <_printf_common+0x46>
 80225ee:	18e1      	adds	r1, r4, r3
 80225f0:	1c5a      	adds	r2, r3, #1
 80225f2:	2030      	movs	r0, #48	; 0x30
 80225f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80225f8:	4422      	add	r2, r4
 80225fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80225fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022602:	3302      	adds	r3, #2
 8022604:	e7c5      	b.n	8022592 <_printf_common+0x62>
 8022606:	2301      	movs	r3, #1
 8022608:	4622      	mov	r2, r4
 802260a:	4639      	mov	r1, r7
 802260c:	4630      	mov	r0, r6
 802260e:	47c0      	blx	r8
 8022610:	3001      	adds	r0, #1
 8022612:	d0e6      	beq.n	80225e2 <_printf_common+0xb2>
 8022614:	f109 0901 	add.w	r9, r9, #1
 8022618:	e7d8      	b.n	80225cc <_printf_common+0x9c>
	...

0802261c <_printf_i>:
 802261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022620:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022624:	460c      	mov	r4, r1
 8022626:	7e09      	ldrb	r1, [r1, #24]
 8022628:	b085      	sub	sp, #20
 802262a:	296e      	cmp	r1, #110	; 0x6e
 802262c:	4617      	mov	r7, r2
 802262e:	4606      	mov	r6, r0
 8022630:	4698      	mov	r8, r3
 8022632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022634:	f000 80b3 	beq.w	802279e <_printf_i+0x182>
 8022638:	d822      	bhi.n	8022680 <_printf_i+0x64>
 802263a:	2963      	cmp	r1, #99	; 0x63
 802263c:	d036      	beq.n	80226ac <_printf_i+0x90>
 802263e:	d80a      	bhi.n	8022656 <_printf_i+0x3a>
 8022640:	2900      	cmp	r1, #0
 8022642:	f000 80b9 	beq.w	80227b8 <_printf_i+0x19c>
 8022646:	2958      	cmp	r1, #88	; 0x58
 8022648:	f000 8083 	beq.w	8022752 <_printf_i+0x136>
 802264c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022650:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022654:	e032      	b.n	80226bc <_printf_i+0xa0>
 8022656:	2964      	cmp	r1, #100	; 0x64
 8022658:	d001      	beq.n	802265e <_printf_i+0x42>
 802265a:	2969      	cmp	r1, #105	; 0x69
 802265c:	d1f6      	bne.n	802264c <_printf_i+0x30>
 802265e:	6820      	ldr	r0, [r4, #0]
 8022660:	6813      	ldr	r3, [r2, #0]
 8022662:	0605      	lsls	r5, r0, #24
 8022664:	f103 0104 	add.w	r1, r3, #4
 8022668:	d52a      	bpl.n	80226c0 <_printf_i+0xa4>
 802266a:	681b      	ldr	r3, [r3, #0]
 802266c:	6011      	str	r1, [r2, #0]
 802266e:	2b00      	cmp	r3, #0
 8022670:	da03      	bge.n	802267a <_printf_i+0x5e>
 8022672:	222d      	movs	r2, #45	; 0x2d
 8022674:	425b      	negs	r3, r3
 8022676:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 802267a:	486f      	ldr	r0, [pc, #444]	; (8022838 <_printf_i+0x21c>)
 802267c:	220a      	movs	r2, #10
 802267e:	e039      	b.n	80226f4 <_printf_i+0xd8>
 8022680:	2973      	cmp	r1, #115	; 0x73
 8022682:	f000 809d 	beq.w	80227c0 <_printf_i+0x1a4>
 8022686:	d808      	bhi.n	802269a <_printf_i+0x7e>
 8022688:	296f      	cmp	r1, #111	; 0x6f
 802268a:	d020      	beq.n	80226ce <_printf_i+0xb2>
 802268c:	2970      	cmp	r1, #112	; 0x70
 802268e:	d1dd      	bne.n	802264c <_printf_i+0x30>
 8022690:	6823      	ldr	r3, [r4, #0]
 8022692:	f043 0320 	orr.w	r3, r3, #32
 8022696:	6023      	str	r3, [r4, #0]
 8022698:	e003      	b.n	80226a2 <_printf_i+0x86>
 802269a:	2975      	cmp	r1, #117	; 0x75
 802269c:	d017      	beq.n	80226ce <_printf_i+0xb2>
 802269e:	2978      	cmp	r1, #120	; 0x78
 80226a0:	d1d4      	bne.n	802264c <_printf_i+0x30>
 80226a2:	2378      	movs	r3, #120	; 0x78
 80226a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80226a8:	4864      	ldr	r0, [pc, #400]	; (802283c <_printf_i+0x220>)
 80226aa:	e055      	b.n	8022758 <_printf_i+0x13c>
 80226ac:	6813      	ldr	r3, [r2, #0]
 80226ae:	1d19      	adds	r1, r3, #4
 80226b0:	681b      	ldr	r3, [r3, #0]
 80226b2:	6011      	str	r1, [r2, #0]
 80226b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80226b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80226bc:	2301      	movs	r3, #1
 80226be:	e08c      	b.n	80227da <_printf_i+0x1be>
 80226c0:	681b      	ldr	r3, [r3, #0]
 80226c2:	6011      	str	r1, [r2, #0]
 80226c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80226c8:	bf18      	it	ne
 80226ca:	b21b      	sxthne	r3, r3
 80226cc:	e7cf      	b.n	802266e <_printf_i+0x52>
 80226ce:	6813      	ldr	r3, [r2, #0]
 80226d0:	6825      	ldr	r5, [r4, #0]
 80226d2:	1d18      	adds	r0, r3, #4
 80226d4:	6010      	str	r0, [r2, #0]
 80226d6:	0628      	lsls	r0, r5, #24
 80226d8:	d501      	bpl.n	80226de <_printf_i+0xc2>
 80226da:	681b      	ldr	r3, [r3, #0]
 80226dc:	e002      	b.n	80226e4 <_printf_i+0xc8>
 80226de:	0668      	lsls	r0, r5, #25
 80226e0:	d5fb      	bpl.n	80226da <_printf_i+0xbe>
 80226e2:	881b      	ldrh	r3, [r3, #0]
 80226e4:	4854      	ldr	r0, [pc, #336]	; (8022838 <_printf_i+0x21c>)
 80226e6:	296f      	cmp	r1, #111	; 0x6f
 80226e8:	bf14      	ite	ne
 80226ea:	220a      	movne	r2, #10
 80226ec:	2208      	moveq	r2, #8
 80226ee:	2100      	movs	r1, #0
 80226f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80226f4:	6865      	ldr	r5, [r4, #4]
 80226f6:	60a5      	str	r5, [r4, #8]
 80226f8:	2d00      	cmp	r5, #0
 80226fa:	f2c0 8095 	blt.w	8022828 <_printf_i+0x20c>
 80226fe:	6821      	ldr	r1, [r4, #0]
 8022700:	f021 0104 	bic.w	r1, r1, #4
 8022704:	6021      	str	r1, [r4, #0]
 8022706:	2b00      	cmp	r3, #0
 8022708:	d13d      	bne.n	8022786 <_printf_i+0x16a>
 802270a:	2d00      	cmp	r5, #0
 802270c:	f040 808e 	bne.w	802282c <_printf_i+0x210>
 8022710:	4665      	mov	r5, ip
 8022712:	2a08      	cmp	r2, #8
 8022714:	d10b      	bne.n	802272e <_printf_i+0x112>
 8022716:	6823      	ldr	r3, [r4, #0]
 8022718:	07db      	lsls	r3, r3, #31
 802271a:	d508      	bpl.n	802272e <_printf_i+0x112>
 802271c:	6923      	ldr	r3, [r4, #16]
 802271e:	6862      	ldr	r2, [r4, #4]
 8022720:	429a      	cmp	r2, r3
 8022722:	bfde      	ittt	le
 8022724:	2330      	movle	r3, #48	; 0x30
 8022726:	f805 3c01 	strble.w	r3, [r5, #-1]
 802272a:	f105 35ff 	addle.w	r5, r5, #4294967295
 802272e:	ebac 0305 	sub.w	r3, ip, r5
 8022732:	6123      	str	r3, [r4, #16]
 8022734:	f8cd 8000 	str.w	r8, [sp]
 8022738:	463b      	mov	r3, r7
 802273a:	aa03      	add	r2, sp, #12
 802273c:	4621      	mov	r1, r4
 802273e:	4630      	mov	r0, r6
 8022740:	f7ff fef6 	bl	8022530 <_printf_common>
 8022744:	3001      	adds	r0, #1
 8022746:	d14d      	bne.n	80227e4 <_printf_i+0x1c8>
 8022748:	f04f 30ff 	mov.w	r0, #4294967295
 802274c:	b005      	add	sp, #20
 802274e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022752:	4839      	ldr	r0, [pc, #228]	; (8022838 <_printf_i+0x21c>)
 8022754:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022758:	6813      	ldr	r3, [r2, #0]
 802275a:	6821      	ldr	r1, [r4, #0]
 802275c:	1d1d      	adds	r5, r3, #4
 802275e:	681b      	ldr	r3, [r3, #0]
 8022760:	6015      	str	r5, [r2, #0]
 8022762:	060a      	lsls	r2, r1, #24
 8022764:	d50b      	bpl.n	802277e <_printf_i+0x162>
 8022766:	07ca      	lsls	r2, r1, #31
 8022768:	bf44      	itt	mi
 802276a:	f041 0120 	orrmi.w	r1, r1, #32
 802276e:	6021      	strmi	r1, [r4, #0]
 8022770:	b91b      	cbnz	r3, 802277a <_printf_i+0x15e>
 8022772:	6822      	ldr	r2, [r4, #0]
 8022774:	f022 0220 	bic.w	r2, r2, #32
 8022778:	6022      	str	r2, [r4, #0]
 802277a:	2210      	movs	r2, #16
 802277c:	e7b7      	b.n	80226ee <_printf_i+0xd2>
 802277e:	064d      	lsls	r5, r1, #25
 8022780:	bf48      	it	mi
 8022782:	b29b      	uxthmi	r3, r3
 8022784:	e7ef      	b.n	8022766 <_printf_i+0x14a>
 8022786:	4665      	mov	r5, ip
 8022788:	fbb3 f1f2 	udiv	r1, r3, r2
 802278c:	fb02 3311 	mls	r3, r2, r1, r3
 8022790:	5cc3      	ldrb	r3, [r0, r3]
 8022792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022796:	460b      	mov	r3, r1
 8022798:	2900      	cmp	r1, #0
 802279a:	d1f5      	bne.n	8022788 <_printf_i+0x16c>
 802279c:	e7b9      	b.n	8022712 <_printf_i+0xf6>
 802279e:	6813      	ldr	r3, [r2, #0]
 80227a0:	6825      	ldr	r5, [r4, #0]
 80227a2:	6961      	ldr	r1, [r4, #20]
 80227a4:	1d18      	adds	r0, r3, #4
 80227a6:	6010      	str	r0, [r2, #0]
 80227a8:	0628      	lsls	r0, r5, #24
 80227aa:	681b      	ldr	r3, [r3, #0]
 80227ac:	d501      	bpl.n	80227b2 <_printf_i+0x196>
 80227ae:	6019      	str	r1, [r3, #0]
 80227b0:	e002      	b.n	80227b8 <_printf_i+0x19c>
 80227b2:	066a      	lsls	r2, r5, #25
 80227b4:	d5fb      	bpl.n	80227ae <_printf_i+0x192>
 80227b6:	8019      	strh	r1, [r3, #0]
 80227b8:	2300      	movs	r3, #0
 80227ba:	6123      	str	r3, [r4, #16]
 80227bc:	4665      	mov	r5, ip
 80227be:	e7b9      	b.n	8022734 <_printf_i+0x118>
 80227c0:	6813      	ldr	r3, [r2, #0]
 80227c2:	1d19      	adds	r1, r3, #4
 80227c4:	6011      	str	r1, [r2, #0]
 80227c6:	681d      	ldr	r5, [r3, #0]
 80227c8:	6862      	ldr	r2, [r4, #4]
 80227ca:	2100      	movs	r1, #0
 80227cc:	4628      	mov	r0, r5
 80227ce:	f7dd fd0f 	bl	80001f0 <memchr>
 80227d2:	b108      	cbz	r0, 80227d8 <_printf_i+0x1bc>
 80227d4:	1b40      	subs	r0, r0, r5
 80227d6:	6060      	str	r0, [r4, #4]
 80227d8:	6863      	ldr	r3, [r4, #4]
 80227da:	6123      	str	r3, [r4, #16]
 80227dc:	2300      	movs	r3, #0
 80227de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80227e2:	e7a7      	b.n	8022734 <_printf_i+0x118>
 80227e4:	6923      	ldr	r3, [r4, #16]
 80227e6:	462a      	mov	r2, r5
 80227e8:	4639      	mov	r1, r7
 80227ea:	4630      	mov	r0, r6
 80227ec:	47c0      	blx	r8
 80227ee:	3001      	adds	r0, #1
 80227f0:	d0aa      	beq.n	8022748 <_printf_i+0x12c>
 80227f2:	6823      	ldr	r3, [r4, #0]
 80227f4:	079b      	lsls	r3, r3, #30
 80227f6:	d413      	bmi.n	8022820 <_printf_i+0x204>
 80227f8:	68e0      	ldr	r0, [r4, #12]
 80227fa:	9b03      	ldr	r3, [sp, #12]
 80227fc:	4298      	cmp	r0, r3
 80227fe:	bfb8      	it	lt
 8022800:	4618      	movlt	r0, r3
 8022802:	e7a3      	b.n	802274c <_printf_i+0x130>
 8022804:	2301      	movs	r3, #1
 8022806:	464a      	mov	r2, r9
 8022808:	4639      	mov	r1, r7
 802280a:	4630      	mov	r0, r6
 802280c:	47c0      	blx	r8
 802280e:	3001      	adds	r0, #1
 8022810:	d09a      	beq.n	8022748 <_printf_i+0x12c>
 8022812:	3501      	adds	r5, #1
 8022814:	68e3      	ldr	r3, [r4, #12]
 8022816:	9a03      	ldr	r2, [sp, #12]
 8022818:	1a9b      	subs	r3, r3, r2
 802281a:	42ab      	cmp	r3, r5
 802281c:	dcf2      	bgt.n	8022804 <_printf_i+0x1e8>
 802281e:	e7eb      	b.n	80227f8 <_printf_i+0x1dc>
 8022820:	2500      	movs	r5, #0
 8022822:	f104 0919 	add.w	r9, r4, #25
 8022826:	e7f5      	b.n	8022814 <_printf_i+0x1f8>
 8022828:	2b00      	cmp	r3, #0
 802282a:	d1ac      	bne.n	8022786 <_printf_i+0x16a>
 802282c:	7803      	ldrb	r3, [r0, #0]
 802282e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022836:	e76c      	b.n	8022712 <_printf_i+0xf6>
 8022838:	0802d2dd 	.word	0x0802d2dd
 802283c:	0802d2ee 	.word	0x0802d2ee

08022840 <_sbrk_r>:
 8022840:	b538      	push	{r3, r4, r5, lr}
 8022842:	4c06      	ldr	r4, [pc, #24]	; (802285c <_sbrk_r+0x1c>)
 8022844:	2300      	movs	r3, #0
 8022846:	4605      	mov	r5, r0
 8022848:	4608      	mov	r0, r1
 802284a:	6023      	str	r3, [r4, #0]
 802284c:	f7fa ff50 	bl	801d6f0 <_sbrk>
 8022850:	1c43      	adds	r3, r0, #1
 8022852:	d102      	bne.n	802285a <_sbrk_r+0x1a>
 8022854:	6823      	ldr	r3, [r4, #0]
 8022856:	b103      	cbz	r3, 802285a <_sbrk_r+0x1a>
 8022858:	602b      	str	r3, [r5, #0]
 802285a:	bd38      	pop	{r3, r4, r5, pc}
 802285c:	200054fc 	.word	0x200054fc

08022860 <memmove>:
 8022860:	4288      	cmp	r0, r1
 8022862:	b510      	push	{r4, lr}
 8022864:	eb01 0302 	add.w	r3, r1, r2
 8022868:	d807      	bhi.n	802287a <memmove+0x1a>
 802286a:	1e42      	subs	r2, r0, #1
 802286c:	4299      	cmp	r1, r3
 802286e:	d00a      	beq.n	8022886 <memmove+0x26>
 8022870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022874:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022878:	e7f8      	b.n	802286c <memmove+0xc>
 802287a:	4283      	cmp	r3, r0
 802287c:	d9f5      	bls.n	802286a <memmove+0xa>
 802287e:	1881      	adds	r1, r0, r2
 8022880:	1ad2      	subs	r2, r2, r3
 8022882:	42d3      	cmn	r3, r2
 8022884:	d100      	bne.n	8022888 <memmove+0x28>
 8022886:	bd10      	pop	{r4, pc}
 8022888:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802288c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022890:	e7f7      	b.n	8022882 <memmove+0x22>

08022892 <__malloc_lock>:
 8022892:	4770      	bx	lr

08022894 <__malloc_unlock>:
 8022894:	4770      	bx	lr

08022896 <_realloc_r>:
 8022896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022898:	4607      	mov	r7, r0
 802289a:	4614      	mov	r4, r2
 802289c:	460e      	mov	r6, r1
 802289e:	b921      	cbnz	r1, 80228aa <_realloc_r+0x14>
 80228a0:	4611      	mov	r1, r2
 80228a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80228a6:	f7ff bc97 	b.w	80221d8 <_malloc_r>
 80228aa:	b922      	cbnz	r2, 80228b6 <_realloc_r+0x20>
 80228ac:	f7ff fc46 	bl	802213c <_free_r>
 80228b0:	4625      	mov	r5, r4
 80228b2:	4628      	mov	r0, r5
 80228b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80228b6:	f000 f814 	bl	80228e2 <_malloc_usable_size_r>
 80228ba:	42a0      	cmp	r0, r4
 80228bc:	d20f      	bcs.n	80228de <_realloc_r+0x48>
 80228be:	4621      	mov	r1, r4
 80228c0:	4638      	mov	r0, r7
 80228c2:	f7ff fc89 	bl	80221d8 <_malloc_r>
 80228c6:	4605      	mov	r5, r0
 80228c8:	2800      	cmp	r0, #0
 80228ca:	d0f2      	beq.n	80228b2 <_realloc_r+0x1c>
 80228cc:	4631      	mov	r1, r6
 80228ce:	4622      	mov	r2, r4
 80228d0:	f7ff fb9c 	bl	802200c <memcpy>
 80228d4:	4631      	mov	r1, r6
 80228d6:	4638      	mov	r0, r7
 80228d8:	f7ff fc30 	bl	802213c <_free_r>
 80228dc:	e7e9      	b.n	80228b2 <_realloc_r+0x1c>
 80228de:	4635      	mov	r5, r6
 80228e0:	e7e7      	b.n	80228b2 <_realloc_r+0x1c>

080228e2 <_malloc_usable_size_r>:
 80228e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228e6:	1f18      	subs	r0, r3, #4
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	bfbc      	itt	lt
 80228ec:	580b      	ldrlt	r3, [r1, r0]
 80228ee:	18c0      	addlt	r0, r0, r3
 80228f0:	4770      	bx	lr
	...

080228f4 <pow>:
 80228f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228f8:	ed2d 8b04 	vpush	{d8-d9}
 80228fc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8022bd0 <pow+0x2dc>
 8022900:	b08d      	sub	sp, #52	; 0x34
 8022902:	ec57 6b10 	vmov	r6, r7, d0
 8022906:	ec55 4b11 	vmov	r4, r5, d1
 802290a:	f000 f965 	bl	8022bd8 <__ieee754_pow>
 802290e:	f999 3000 	ldrsb.w	r3, [r9]
 8022912:	9300      	str	r3, [sp, #0]
 8022914:	3301      	adds	r3, #1
 8022916:	eeb0 8a40 	vmov.f32	s16, s0
 802291a:	eef0 8a60 	vmov.f32	s17, s1
 802291e:	46c8      	mov	r8, r9
 8022920:	d05f      	beq.n	80229e2 <pow+0xee>
 8022922:	4622      	mov	r2, r4
 8022924:	462b      	mov	r3, r5
 8022926:	4620      	mov	r0, r4
 8022928:	4629      	mov	r1, r5
 802292a:	f7de f907 	bl	8000b3c <__aeabi_dcmpun>
 802292e:	4683      	mov	fp, r0
 8022930:	2800      	cmp	r0, #0
 8022932:	d156      	bne.n	80229e2 <pow+0xee>
 8022934:	4632      	mov	r2, r6
 8022936:	463b      	mov	r3, r7
 8022938:	4630      	mov	r0, r6
 802293a:	4639      	mov	r1, r7
 802293c:	f7de f8fe 	bl	8000b3c <__aeabi_dcmpun>
 8022940:	9001      	str	r0, [sp, #4]
 8022942:	b1e8      	cbz	r0, 8022980 <pow+0x8c>
 8022944:	2200      	movs	r2, #0
 8022946:	2300      	movs	r3, #0
 8022948:	4620      	mov	r0, r4
 802294a:	4629      	mov	r1, r5
 802294c:	f7de f8c4 	bl	8000ad8 <__aeabi_dcmpeq>
 8022950:	2800      	cmp	r0, #0
 8022952:	d046      	beq.n	80229e2 <pow+0xee>
 8022954:	2301      	movs	r3, #1
 8022956:	9302      	str	r3, [sp, #8]
 8022958:	4b96      	ldr	r3, [pc, #600]	; (8022bb4 <pow+0x2c0>)
 802295a:	9303      	str	r3, [sp, #12]
 802295c:	4b96      	ldr	r3, [pc, #600]	; (8022bb8 <pow+0x2c4>)
 802295e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8022962:	2200      	movs	r2, #0
 8022964:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022968:	9b00      	ldr	r3, [sp, #0]
 802296a:	2b02      	cmp	r3, #2
 802296c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022970:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022974:	d033      	beq.n	80229de <pow+0xea>
 8022976:	a802      	add	r0, sp, #8
 8022978:	f000 fefd 	bl	8023776 <matherr>
 802297c:	bb48      	cbnz	r0, 80229d2 <pow+0xde>
 802297e:	e05d      	b.n	8022a3c <pow+0x148>
 8022980:	f04f 0a00 	mov.w	sl, #0
 8022984:	f04f 0b00 	mov.w	fp, #0
 8022988:	4652      	mov	r2, sl
 802298a:	465b      	mov	r3, fp
 802298c:	4630      	mov	r0, r6
 802298e:	4639      	mov	r1, r7
 8022990:	f7de f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8022994:	ec4b ab19 	vmov	d9, sl, fp
 8022998:	2800      	cmp	r0, #0
 802299a:	d054      	beq.n	8022a46 <pow+0x152>
 802299c:	4652      	mov	r2, sl
 802299e:	465b      	mov	r3, fp
 80229a0:	4620      	mov	r0, r4
 80229a2:	4629      	mov	r1, r5
 80229a4:	f7de f898 	bl	8000ad8 <__aeabi_dcmpeq>
 80229a8:	4680      	mov	r8, r0
 80229aa:	b318      	cbz	r0, 80229f4 <pow+0x100>
 80229ac:	2301      	movs	r3, #1
 80229ae:	9302      	str	r3, [sp, #8]
 80229b0:	4b80      	ldr	r3, [pc, #512]	; (8022bb4 <pow+0x2c0>)
 80229b2:	9303      	str	r3, [sp, #12]
 80229b4:	9b01      	ldr	r3, [sp, #4]
 80229b6:	930a      	str	r3, [sp, #40]	; 0x28
 80229b8:	9b00      	ldr	r3, [sp, #0]
 80229ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80229be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80229c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80229c6:	2b00      	cmp	r3, #0
 80229c8:	d0d5      	beq.n	8022976 <pow+0x82>
 80229ca:	4b7b      	ldr	r3, [pc, #492]	; (8022bb8 <pow+0x2c4>)
 80229cc:	2200      	movs	r2, #0
 80229ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80229d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229d4:	b11b      	cbz	r3, 80229de <pow+0xea>
 80229d6:	f7ff faef 	bl	8021fb8 <__errno>
 80229da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80229dc:	6003      	str	r3, [r0, #0]
 80229de:	ed9d 8b08 	vldr	d8, [sp, #32]
 80229e2:	eeb0 0a48 	vmov.f32	s0, s16
 80229e6:	eef0 0a68 	vmov.f32	s1, s17
 80229ea:	b00d      	add	sp, #52	; 0x34
 80229ec:	ecbd 8b04 	vpop	{d8-d9}
 80229f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229f4:	ec45 4b10 	vmov	d0, r4, r5
 80229f8:	f000 feb5 	bl	8023766 <finite>
 80229fc:	2800      	cmp	r0, #0
 80229fe:	d0f0      	beq.n	80229e2 <pow+0xee>
 8022a00:	4652      	mov	r2, sl
 8022a02:	465b      	mov	r3, fp
 8022a04:	4620      	mov	r0, r4
 8022a06:	4629      	mov	r1, r5
 8022a08:	f7de f870 	bl	8000aec <__aeabi_dcmplt>
 8022a0c:	2800      	cmp	r0, #0
 8022a0e:	d0e8      	beq.n	80229e2 <pow+0xee>
 8022a10:	2301      	movs	r3, #1
 8022a12:	9302      	str	r3, [sp, #8]
 8022a14:	4b67      	ldr	r3, [pc, #412]	; (8022bb4 <pow+0x2c0>)
 8022a16:	9303      	str	r3, [sp, #12]
 8022a18:	f999 3000 	ldrsb.w	r3, [r9]
 8022a1c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8022a20:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022a24:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022a28:	b913      	cbnz	r3, 8022a30 <pow+0x13c>
 8022a2a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022a2e:	e7a2      	b.n	8022976 <pow+0x82>
 8022a30:	4962      	ldr	r1, [pc, #392]	; (8022bbc <pow+0x2c8>)
 8022a32:	2000      	movs	r0, #0
 8022a34:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022a38:	2b02      	cmp	r3, #2
 8022a3a:	d19c      	bne.n	8022976 <pow+0x82>
 8022a3c:	f7ff fabc 	bl	8021fb8 <__errno>
 8022a40:	2321      	movs	r3, #33	; 0x21
 8022a42:	6003      	str	r3, [r0, #0]
 8022a44:	e7c5      	b.n	80229d2 <pow+0xde>
 8022a46:	eeb0 0a48 	vmov.f32	s0, s16
 8022a4a:	eef0 0a68 	vmov.f32	s1, s17
 8022a4e:	f000 fe8a 	bl	8023766 <finite>
 8022a52:	9000      	str	r0, [sp, #0]
 8022a54:	2800      	cmp	r0, #0
 8022a56:	f040 8081 	bne.w	8022b5c <pow+0x268>
 8022a5a:	ec47 6b10 	vmov	d0, r6, r7
 8022a5e:	f000 fe82 	bl	8023766 <finite>
 8022a62:	2800      	cmp	r0, #0
 8022a64:	d07a      	beq.n	8022b5c <pow+0x268>
 8022a66:	ec45 4b10 	vmov	d0, r4, r5
 8022a6a:	f000 fe7c 	bl	8023766 <finite>
 8022a6e:	2800      	cmp	r0, #0
 8022a70:	d074      	beq.n	8022b5c <pow+0x268>
 8022a72:	ec53 2b18 	vmov	r2, r3, d8
 8022a76:	ee18 0a10 	vmov	r0, s16
 8022a7a:	4619      	mov	r1, r3
 8022a7c:	f7de f85e 	bl	8000b3c <__aeabi_dcmpun>
 8022a80:	f999 9000 	ldrsb.w	r9, [r9]
 8022a84:	4b4b      	ldr	r3, [pc, #300]	; (8022bb4 <pow+0x2c0>)
 8022a86:	b1b0      	cbz	r0, 8022ab6 <pow+0x1c2>
 8022a88:	2201      	movs	r2, #1
 8022a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022a8e:	9b00      	ldr	r3, [sp, #0]
 8022a90:	930a      	str	r3, [sp, #40]	; 0x28
 8022a92:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022a96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022a9a:	f1b9 0f00 	cmp.w	r9, #0
 8022a9e:	d0c4      	beq.n	8022a2a <pow+0x136>
 8022aa0:	4652      	mov	r2, sl
 8022aa2:	465b      	mov	r3, fp
 8022aa4:	4650      	mov	r0, sl
 8022aa6:	4659      	mov	r1, fp
 8022aa8:	f7dd fed8 	bl	800085c <__aeabi_ddiv>
 8022aac:	f1b9 0f02 	cmp.w	r9, #2
 8022ab0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022ab4:	e7c1      	b.n	8022a3a <pow+0x146>
 8022ab6:	2203      	movs	r2, #3
 8022ab8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022abc:	900a      	str	r0, [sp, #40]	; 0x28
 8022abe:	4629      	mov	r1, r5
 8022ac0:	4620      	mov	r0, r4
 8022ac2:	2200      	movs	r2, #0
 8022ac4:	4b3e      	ldr	r3, [pc, #248]	; (8022bc0 <pow+0x2cc>)
 8022ac6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022aca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022ace:	f7dd fd9b 	bl	8000608 <__aeabi_dmul>
 8022ad2:	4604      	mov	r4, r0
 8022ad4:	460d      	mov	r5, r1
 8022ad6:	f1b9 0f00 	cmp.w	r9, #0
 8022ada:	d124      	bne.n	8022b26 <pow+0x232>
 8022adc:	4b39      	ldr	r3, [pc, #228]	; (8022bc4 <pow+0x2d0>)
 8022ade:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022ae2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022ae6:	4630      	mov	r0, r6
 8022ae8:	4652      	mov	r2, sl
 8022aea:	465b      	mov	r3, fp
 8022aec:	4639      	mov	r1, r7
 8022aee:	f7dd fffd 	bl	8000aec <__aeabi_dcmplt>
 8022af2:	2800      	cmp	r0, #0
 8022af4:	d056      	beq.n	8022ba4 <pow+0x2b0>
 8022af6:	ec45 4b10 	vmov	d0, r4, r5
 8022afa:	f000 fe49 	bl	8023790 <rint>
 8022afe:	4622      	mov	r2, r4
 8022b00:	462b      	mov	r3, r5
 8022b02:	ec51 0b10 	vmov	r0, r1, d0
 8022b06:	f7dd ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 8022b0a:	b920      	cbnz	r0, 8022b16 <pow+0x222>
 8022b0c:	4b2e      	ldr	r3, [pc, #184]	; (8022bc8 <pow+0x2d4>)
 8022b0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022b12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022b16:	f998 3000 	ldrsb.w	r3, [r8]
 8022b1a:	2b02      	cmp	r3, #2
 8022b1c:	d142      	bne.n	8022ba4 <pow+0x2b0>
 8022b1e:	f7ff fa4b 	bl	8021fb8 <__errno>
 8022b22:	2322      	movs	r3, #34	; 0x22
 8022b24:	e78d      	b.n	8022a42 <pow+0x14e>
 8022b26:	4b29      	ldr	r3, [pc, #164]	; (8022bcc <pow+0x2d8>)
 8022b28:	2200      	movs	r2, #0
 8022b2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022b2e:	4630      	mov	r0, r6
 8022b30:	4652      	mov	r2, sl
 8022b32:	465b      	mov	r3, fp
 8022b34:	4639      	mov	r1, r7
 8022b36:	f7dd ffd9 	bl	8000aec <__aeabi_dcmplt>
 8022b3a:	2800      	cmp	r0, #0
 8022b3c:	d0eb      	beq.n	8022b16 <pow+0x222>
 8022b3e:	ec45 4b10 	vmov	d0, r4, r5
 8022b42:	f000 fe25 	bl	8023790 <rint>
 8022b46:	4622      	mov	r2, r4
 8022b48:	462b      	mov	r3, r5
 8022b4a:	ec51 0b10 	vmov	r0, r1, d0
 8022b4e:	f7dd ffc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8022b52:	2800      	cmp	r0, #0
 8022b54:	d1df      	bne.n	8022b16 <pow+0x222>
 8022b56:	2200      	movs	r2, #0
 8022b58:	4b18      	ldr	r3, [pc, #96]	; (8022bbc <pow+0x2c8>)
 8022b5a:	e7da      	b.n	8022b12 <pow+0x21e>
 8022b5c:	2200      	movs	r2, #0
 8022b5e:	2300      	movs	r3, #0
 8022b60:	ec51 0b18 	vmov	r0, r1, d8
 8022b64:	f7dd ffb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8022b68:	2800      	cmp	r0, #0
 8022b6a:	f43f af3a 	beq.w	80229e2 <pow+0xee>
 8022b6e:	ec47 6b10 	vmov	d0, r6, r7
 8022b72:	f000 fdf8 	bl	8023766 <finite>
 8022b76:	2800      	cmp	r0, #0
 8022b78:	f43f af33 	beq.w	80229e2 <pow+0xee>
 8022b7c:	ec45 4b10 	vmov	d0, r4, r5
 8022b80:	f000 fdf1 	bl	8023766 <finite>
 8022b84:	2800      	cmp	r0, #0
 8022b86:	f43f af2c 	beq.w	80229e2 <pow+0xee>
 8022b8a:	2304      	movs	r3, #4
 8022b8c:	9302      	str	r3, [sp, #8]
 8022b8e:	4b09      	ldr	r3, [pc, #36]	; (8022bb4 <pow+0x2c0>)
 8022b90:	9303      	str	r3, [sp, #12]
 8022b92:	2300      	movs	r3, #0
 8022b94:	930a      	str	r3, [sp, #40]	; 0x28
 8022b96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022b9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022b9e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8022ba2:	e7b8      	b.n	8022b16 <pow+0x222>
 8022ba4:	a802      	add	r0, sp, #8
 8022ba6:	f000 fde6 	bl	8023776 <matherr>
 8022baa:	2800      	cmp	r0, #0
 8022bac:	f47f af11 	bne.w	80229d2 <pow+0xde>
 8022bb0:	e7b5      	b.n	8022b1e <pow+0x22a>
 8022bb2:	bf00      	nop
 8022bb4:	0802d2ff 	.word	0x0802d2ff
 8022bb8:	3ff00000 	.word	0x3ff00000
 8022bbc:	fff00000 	.word	0xfff00000
 8022bc0:	3fe00000 	.word	0x3fe00000
 8022bc4:	47efffff 	.word	0x47efffff
 8022bc8:	c7efffff 	.word	0xc7efffff
 8022bcc:	7ff00000 	.word	0x7ff00000
 8022bd0:	20000070 	.word	0x20000070
 8022bd4:	00000000 	.word	0x00000000

08022bd8 <__ieee754_pow>:
 8022bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bdc:	b091      	sub	sp, #68	; 0x44
 8022bde:	ed8d 1b00 	vstr	d1, [sp]
 8022be2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8022be6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8022bea:	ea58 0302 	orrs.w	r3, r8, r2
 8022bee:	ec57 6b10 	vmov	r6, r7, d0
 8022bf2:	f000 84be 	beq.w	8023572 <__ieee754_pow+0x99a>
 8022bf6:	4b7a      	ldr	r3, [pc, #488]	; (8022de0 <__ieee754_pow+0x208>)
 8022bf8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8022bfc:	429c      	cmp	r4, r3
 8022bfe:	463d      	mov	r5, r7
 8022c00:	ee10 aa10 	vmov	sl, s0
 8022c04:	dc09      	bgt.n	8022c1a <__ieee754_pow+0x42>
 8022c06:	d103      	bne.n	8022c10 <__ieee754_pow+0x38>
 8022c08:	b93e      	cbnz	r6, 8022c1a <__ieee754_pow+0x42>
 8022c0a:	45a0      	cmp	r8, r4
 8022c0c:	dc0d      	bgt.n	8022c2a <__ieee754_pow+0x52>
 8022c0e:	e001      	b.n	8022c14 <__ieee754_pow+0x3c>
 8022c10:	4598      	cmp	r8, r3
 8022c12:	dc02      	bgt.n	8022c1a <__ieee754_pow+0x42>
 8022c14:	4598      	cmp	r8, r3
 8022c16:	d10e      	bne.n	8022c36 <__ieee754_pow+0x5e>
 8022c18:	b16a      	cbz	r2, 8022c36 <__ieee754_pow+0x5e>
 8022c1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022c1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022c22:	ea54 030a 	orrs.w	r3, r4, sl
 8022c26:	f000 84a4 	beq.w	8023572 <__ieee754_pow+0x99a>
 8022c2a:	486e      	ldr	r0, [pc, #440]	; (8022de4 <__ieee754_pow+0x20c>)
 8022c2c:	b011      	add	sp, #68	; 0x44
 8022c2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c32:	f000 bda5 	b.w	8023780 <nan>
 8022c36:	2d00      	cmp	r5, #0
 8022c38:	da53      	bge.n	8022ce2 <__ieee754_pow+0x10a>
 8022c3a:	4b6b      	ldr	r3, [pc, #428]	; (8022de8 <__ieee754_pow+0x210>)
 8022c3c:	4598      	cmp	r8, r3
 8022c3e:	dc4d      	bgt.n	8022cdc <__ieee754_pow+0x104>
 8022c40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8022c44:	4598      	cmp	r8, r3
 8022c46:	dd4c      	ble.n	8022ce2 <__ieee754_pow+0x10a>
 8022c48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022c4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022c50:	2b14      	cmp	r3, #20
 8022c52:	dd26      	ble.n	8022ca2 <__ieee754_pow+0xca>
 8022c54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8022c58:	fa22 f103 	lsr.w	r1, r2, r3
 8022c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8022c60:	4293      	cmp	r3, r2
 8022c62:	d13e      	bne.n	8022ce2 <__ieee754_pow+0x10a>
 8022c64:	f001 0101 	and.w	r1, r1, #1
 8022c68:	f1c1 0b02 	rsb	fp, r1, #2
 8022c6c:	2a00      	cmp	r2, #0
 8022c6e:	d15b      	bne.n	8022d28 <__ieee754_pow+0x150>
 8022c70:	4b5b      	ldr	r3, [pc, #364]	; (8022de0 <__ieee754_pow+0x208>)
 8022c72:	4598      	cmp	r8, r3
 8022c74:	d124      	bne.n	8022cc0 <__ieee754_pow+0xe8>
 8022c76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022c7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022c7e:	ea53 030a 	orrs.w	r3, r3, sl
 8022c82:	f000 8476 	beq.w	8023572 <__ieee754_pow+0x99a>
 8022c86:	4b59      	ldr	r3, [pc, #356]	; (8022dec <__ieee754_pow+0x214>)
 8022c88:	429c      	cmp	r4, r3
 8022c8a:	dd2d      	ble.n	8022ce8 <__ieee754_pow+0x110>
 8022c8c:	f1b9 0f00 	cmp.w	r9, #0
 8022c90:	f280 8473 	bge.w	802357a <__ieee754_pow+0x9a2>
 8022c94:	2000      	movs	r0, #0
 8022c96:	2100      	movs	r1, #0
 8022c98:	ec41 0b10 	vmov	d0, r0, r1
 8022c9c:	b011      	add	sp, #68	; 0x44
 8022c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ca2:	2a00      	cmp	r2, #0
 8022ca4:	d13e      	bne.n	8022d24 <__ieee754_pow+0x14c>
 8022ca6:	f1c3 0314 	rsb	r3, r3, #20
 8022caa:	fa48 f103 	asr.w	r1, r8, r3
 8022cae:	fa01 f303 	lsl.w	r3, r1, r3
 8022cb2:	4543      	cmp	r3, r8
 8022cb4:	f040 8469 	bne.w	802358a <__ieee754_pow+0x9b2>
 8022cb8:	f001 0101 	and.w	r1, r1, #1
 8022cbc:	f1c1 0b02 	rsb	fp, r1, #2
 8022cc0:	4b4b      	ldr	r3, [pc, #300]	; (8022df0 <__ieee754_pow+0x218>)
 8022cc2:	4598      	cmp	r8, r3
 8022cc4:	d118      	bne.n	8022cf8 <__ieee754_pow+0x120>
 8022cc6:	f1b9 0f00 	cmp.w	r9, #0
 8022cca:	f280 845a 	bge.w	8023582 <__ieee754_pow+0x9aa>
 8022cce:	4948      	ldr	r1, [pc, #288]	; (8022df0 <__ieee754_pow+0x218>)
 8022cd0:	4632      	mov	r2, r6
 8022cd2:	463b      	mov	r3, r7
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	f7dd fdc1 	bl	800085c <__aeabi_ddiv>
 8022cda:	e7dd      	b.n	8022c98 <__ieee754_pow+0xc0>
 8022cdc:	f04f 0b02 	mov.w	fp, #2
 8022ce0:	e7c4      	b.n	8022c6c <__ieee754_pow+0x94>
 8022ce2:	f04f 0b00 	mov.w	fp, #0
 8022ce6:	e7c1      	b.n	8022c6c <__ieee754_pow+0x94>
 8022ce8:	f1b9 0f00 	cmp.w	r9, #0
 8022cec:	dad2      	bge.n	8022c94 <__ieee754_pow+0xbc>
 8022cee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8022cf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022cf6:	e7cf      	b.n	8022c98 <__ieee754_pow+0xc0>
 8022cf8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8022cfc:	d106      	bne.n	8022d0c <__ieee754_pow+0x134>
 8022cfe:	4632      	mov	r2, r6
 8022d00:	463b      	mov	r3, r7
 8022d02:	4610      	mov	r0, r2
 8022d04:	4619      	mov	r1, r3
 8022d06:	f7dd fc7f 	bl	8000608 <__aeabi_dmul>
 8022d0a:	e7c5      	b.n	8022c98 <__ieee754_pow+0xc0>
 8022d0c:	4b39      	ldr	r3, [pc, #228]	; (8022df4 <__ieee754_pow+0x21c>)
 8022d0e:	4599      	cmp	r9, r3
 8022d10:	d10a      	bne.n	8022d28 <__ieee754_pow+0x150>
 8022d12:	2d00      	cmp	r5, #0
 8022d14:	db08      	blt.n	8022d28 <__ieee754_pow+0x150>
 8022d16:	ec47 6b10 	vmov	d0, r6, r7
 8022d1a:	b011      	add	sp, #68	; 0x44
 8022d1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d20:	f000 bc68 	b.w	80235f4 <__ieee754_sqrt>
 8022d24:	f04f 0b00 	mov.w	fp, #0
 8022d28:	ec47 6b10 	vmov	d0, r6, r7
 8022d2c:	f000 fd12 	bl	8023754 <fabs>
 8022d30:	ec51 0b10 	vmov	r0, r1, d0
 8022d34:	f1ba 0f00 	cmp.w	sl, #0
 8022d38:	d127      	bne.n	8022d8a <__ieee754_pow+0x1b2>
 8022d3a:	b124      	cbz	r4, 8022d46 <__ieee754_pow+0x16e>
 8022d3c:	4b2c      	ldr	r3, [pc, #176]	; (8022df0 <__ieee754_pow+0x218>)
 8022d3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8022d42:	429a      	cmp	r2, r3
 8022d44:	d121      	bne.n	8022d8a <__ieee754_pow+0x1b2>
 8022d46:	f1b9 0f00 	cmp.w	r9, #0
 8022d4a:	da05      	bge.n	8022d58 <__ieee754_pow+0x180>
 8022d4c:	4602      	mov	r2, r0
 8022d4e:	460b      	mov	r3, r1
 8022d50:	2000      	movs	r0, #0
 8022d52:	4927      	ldr	r1, [pc, #156]	; (8022df0 <__ieee754_pow+0x218>)
 8022d54:	f7dd fd82 	bl	800085c <__aeabi_ddiv>
 8022d58:	2d00      	cmp	r5, #0
 8022d5a:	da9d      	bge.n	8022c98 <__ieee754_pow+0xc0>
 8022d5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022d60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022d64:	ea54 030b 	orrs.w	r3, r4, fp
 8022d68:	d108      	bne.n	8022d7c <__ieee754_pow+0x1a4>
 8022d6a:	4602      	mov	r2, r0
 8022d6c:	460b      	mov	r3, r1
 8022d6e:	4610      	mov	r0, r2
 8022d70:	4619      	mov	r1, r3
 8022d72:	f7dd fa91 	bl	8000298 <__aeabi_dsub>
 8022d76:	4602      	mov	r2, r0
 8022d78:	460b      	mov	r3, r1
 8022d7a:	e7ac      	b.n	8022cd6 <__ieee754_pow+0xfe>
 8022d7c:	f1bb 0f01 	cmp.w	fp, #1
 8022d80:	d18a      	bne.n	8022c98 <__ieee754_pow+0xc0>
 8022d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022d86:	4619      	mov	r1, r3
 8022d88:	e786      	b.n	8022c98 <__ieee754_pow+0xc0>
 8022d8a:	0fed      	lsrs	r5, r5, #31
 8022d8c:	1e6b      	subs	r3, r5, #1
 8022d8e:	930d      	str	r3, [sp, #52]	; 0x34
 8022d90:	ea5b 0303 	orrs.w	r3, fp, r3
 8022d94:	d102      	bne.n	8022d9c <__ieee754_pow+0x1c4>
 8022d96:	4632      	mov	r2, r6
 8022d98:	463b      	mov	r3, r7
 8022d9a:	e7e8      	b.n	8022d6e <__ieee754_pow+0x196>
 8022d9c:	4b16      	ldr	r3, [pc, #88]	; (8022df8 <__ieee754_pow+0x220>)
 8022d9e:	4598      	cmp	r8, r3
 8022da0:	f340 80fe 	ble.w	8022fa0 <__ieee754_pow+0x3c8>
 8022da4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022da8:	4598      	cmp	r8, r3
 8022daa:	dd0a      	ble.n	8022dc2 <__ieee754_pow+0x1ea>
 8022dac:	4b0f      	ldr	r3, [pc, #60]	; (8022dec <__ieee754_pow+0x214>)
 8022dae:	429c      	cmp	r4, r3
 8022db0:	dc0d      	bgt.n	8022dce <__ieee754_pow+0x1f6>
 8022db2:	f1b9 0f00 	cmp.w	r9, #0
 8022db6:	f6bf af6d 	bge.w	8022c94 <__ieee754_pow+0xbc>
 8022dba:	a307      	add	r3, pc, #28	; (adr r3, 8022dd8 <__ieee754_pow+0x200>)
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	e79f      	b.n	8022d02 <__ieee754_pow+0x12a>
 8022dc2:	4b0e      	ldr	r3, [pc, #56]	; (8022dfc <__ieee754_pow+0x224>)
 8022dc4:	429c      	cmp	r4, r3
 8022dc6:	ddf4      	ble.n	8022db2 <__ieee754_pow+0x1da>
 8022dc8:	4b09      	ldr	r3, [pc, #36]	; (8022df0 <__ieee754_pow+0x218>)
 8022dca:	429c      	cmp	r4, r3
 8022dcc:	dd18      	ble.n	8022e00 <__ieee754_pow+0x228>
 8022dce:	f1b9 0f00 	cmp.w	r9, #0
 8022dd2:	dcf2      	bgt.n	8022dba <__ieee754_pow+0x1e2>
 8022dd4:	e75e      	b.n	8022c94 <__ieee754_pow+0xbc>
 8022dd6:	bf00      	nop
 8022dd8:	8800759c 	.word	0x8800759c
 8022ddc:	7e37e43c 	.word	0x7e37e43c
 8022de0:	7ff00000 	.word	0x7ff00000
 8022de4:	0802d2d1 	.word	0x0802d2d1
 8022de8:	433fffff 	.word	0x433fffff
 8022dec:	3fefffff 	.word	0x3fefffff
 8022df0:	3ff00000 	.word	0x3ff00000
 8022df4:	3fe00000 	.word	0x3fe00000
 8022df8:	41e00000 	.word	0x41e00000
 8022dfc:	3feffffe 	.word	0x3feffffe
 8022e00:	2200      	movs	r2, #0
 8022e02:	4b63      	ldr	r3, [pc, #396]	; (8022f90 <__ieee754_pow+0x3b8>)
 8022e04:	f7dd fa48 	bl	8000298 <__aeabi_dsub>
 8022e08:	a355      	add	r3, pc, #340	; (adr r3, 8022f60 <__ieee754_pow+0x388>)
 8022e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e0e:	4604      	mov	r4, r0
 8022e10:	460d      	mov	r5, r1
 8022e12:	f7dd fbf9 	bl	8000608 <__aeabi_dmul>
 8022e16:	a354      	add	r3, pc, #336	; (adr r3, 8022f68 <__ieee754_pow+0x390>)
 8022e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e1c:	4606      	mov	r6, r0
 8022e1e:	460f      	mov	r7, r1
 8022e20:	4620      	mov	r0, r4
 8022e22:	4629      	mov	r1, r5
 8022e24:	f7dd fbf0 	bl	8000608 <__aeabi_dmul>
 8022e28:	2200      	movs	r2, #0
 8022e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e2e:	4b59      	ldr	r3, [pc, #356]	; (8022f94 <__ieee754_pow+0x3bc>)
 8022e30:	4620      	mov	r0, r4
 8022e32:	4629      	mov	r1, r5
 8022e34:	f7dd fbe8 	bl	8000608 <__aeabi_dmul>
 8022e38:	4602      	mov	r2, r0
 8022e3a:	460b      	mov	r3, r1
 8022e3c:	a14c      	add	r1, pc, #304	; (adr r1, 8022f70 <__ieee754_pow+0x398>)
 8022e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022e42:	f7dd fa29 	bl	8000298 <__aeabi_dsub>
 8022e46:	4622      	mov	r2, r4
 8022e48:	462b      	mov	r3, r5
 8022e4a:	f7dd fbdd 	bl	8000608 <__aeabi_dmul>
 8022e4e:	4602      	mov	r2, r0
 8022e50:	460b      	mov	r3, r1
 8022e52:	2000      	movs	r0, #0
 8022e54:	4950      	ldr	r1, [pc, #320]	; (8022f98 <__ieee754_pow+0x3c0>)
 8022e56:	f7dd fa1f 	bl	8000298 <__aeabi_dsub>
 8022e5a:	4622      	mov	r2, r4
 8022e5c:	462b      	mov	r3, r5
 8022e5e:	4680      	mov	r8, r0
 8022e60:	4689      	mov	r9, r1
 8022e62:	4620      	mov	r0, r4
 8022e64:	4629      	mov	r1, r5
 8022e66:	f7dd fbcf 	bl	8000608 <__aeabi_dmul>
 8022e6a:	4602      	mov	r2, r0
 8022e6c:	460b      	mov	r3, r1
 8022e6e:	4640      	mov	r0, r8
 8022e70:	4649      	mov	r1, r9
 8022e72:	f7dd fbc9 	bl	8000608 <__aeabi_dmul>
 8022e76:	a340      	add	r3, pc, #256	; (adr r3, 8022f78 <__ieee754_pow+0x3a0>)
 8022e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e7c:	f7dd fbc4 	bl	8000608 <__aeabi_dmul>
 8022e80:	4602      	mov	r2, r0
 8022e82:	460b      	mov	r3, r1
 8022e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022e88:	f7dd fa06 	bl	8000298 <__aeabi_dsub>
 8022e8c:	4602      	mov	r2, r0
 8022e8e:	460b      	mov	r3, r1
 8022e90:	4604      	mov	r4, r0
 8022e92:	460d      	mov	r5, r1
 8022e94:	4630      	mov	r0, r6
 8022e96:	4639      	mov	r1, r7
 8022e98:	f7dd fa00 	bl	800029c <__adddf3>
 8022e9c:	2000      	movs	r0, #0
 8022e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022ea2:	4632      	mov	r2, r6
 8022ea4:	463b      	mov	r3, r7
 8022ea6:	f7dd f9f7 	bl	8000298 <__aeabi_dsub>
 8022eaa:	4602      	mov	r2, r0
 8022eac:	460b      	mov	r3, r1
 8022eae:	4620      	mov	r0, r4
 8022eb0:	4629      	mov	r1, r5
 8022eb2:	f7dd f9f1 	bl	8000298 <__aeabi_dsub>
 8022eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022eb8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8022ebc:	4313      	orrs	r3, r2
 8022ebe:	4606      	mov	r6, r0
 8022ec0:	460f      	mov	r7, r1
 8022ec2:	f040 81eb 	bne.w	802329c <__ieee754_pow+0x6c4>
 8022ec6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022f80 <__ieee754_pow+0x3a8>
 8022eca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8022ece:	2400      	movs	r4, #0
 8022ed0:	4622      	mov	r2, r4
 8022ed2:	462b      	mov	r3, r5
 8022ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022ed8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022edc:	f7dd f9dc 	bl	8000298 <__aeabi_dsub>
 8022ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022ee4:	f7dd fb90 	bl	8000608 <__aeabi_dmul>
 8022ee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022eec:	4680      	mov	r8, r0
 8022eee:	4689      	mov	r9, r1
 8022ef0:	4630      	mov	r0, r6
 8022ef2:	4639      	mov	r1, r7
 8022ef4:	f7dd fb88 	bl	8000608 <__aeabi_dmul>
 8022ef8:	4602      	mov	r2, r0
 8022efa:	460b      	mov	r3, r1
 8022efc:	4640      	mov	r0, r8
 8022efe:	4649      	mov	r1, r9
 8022f00:	f7dd f9cc 	bl	800029c <__adddf3>
 8022f04:	4622      	mov	r2, r4
 8022f06:	462b      	mov	r3, r5
 8022f08:	4680      	mov	r8, r0
 8022f0a:	4689      	mov	r9, r1
 8022f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022f10:	f7dd fb7a 	bl	8000608 <__aeabi_dmul>
 8022f14:	460b      	mov	r3, r1
 8022f16:	4604      	mov	r4, r0
 8022f18:	460d      	mov	r5, r1
 8022f1a:	4602      	mov	r2, r0
 8022f1c:	4649      	mov	r1, r9
 8022f1e:	4640      	mov	r0, r8
 8022f20:	e9cd 4500 	strd	r4, r5, [sp]
 8022f24:	f7dd f9ba 	bl	800029c <__adddf3>
 8022f28:	4b1c      	ldr	r3, [pc, #112]	; (8022f9c <__ieee754_pow+0x3c4>)
 8022f2a:	4299      	cmp	r1, r3
 8022f2c:	4606      	mov	r6, r0
 8022f2e:	460f      	mov	r7, r1
 8022f30:	468b      	mov	fp, r1
 8022f32:	f340 82f7 	ble.w	8023524 <__ieee754_pow+0x94c>
 8022f36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022f3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022f3e:	4303      	orrs	r3, r0
 8022f40:	f000 81ea 	beq.w	8023318 <__ieee754_pow+0x740>
 8022f44:	a310      	add	r3, pc, #64	; (adr r3, 8022f88 <__ieee754_pow+0x3b0>)
 8022f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022f4e:	f7dd fb5b 	bl	8000608 <__aeabi_dmul>
 8022f52:	a30d      	add	r3, pc, #52	; (adr r3, 8022f88 <__ieee754_pow+0x3b0>)
 8022f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f58:	e6d5      	b.n	8022d06 <__ieee754_pow+0x12e>
 8022f5a:	bf00      	nop
 8022f5c:	f3af 8000 	nop.w
 8022f60:	60000000 	.word	0x60000000
 8022f64:	3ff71547 	.word	0x3ff71547
 8022f68:	f85ddf44 	.word	0xf85ddf44
 8022f6c:	3e54ae0b 	.word	0x3e54ae0b
 8022f70:	55555555 	.word	0x55555555
 8022f74:	3fd55555 	.word	0x3fd55555
 8022f78:	652b82fe 	.word	0x652b82fe
 8022f7c:	3ff71547 	.word	0x3ff71547
 8022f80:	00000000 	.word	0x00000000
 8022f84:	bff00000 	.word	0xbff00000
 8022f88:	8800759c 	.word	0x8800759c
 8022f8c:	7e37e43c 	.word	0x7e37e43c
 8022f90:	3ff00000 	.word	0x3ff00000
 8022f94:	3fd00000 	.word	0x3fd00000
 8022f98:	3fe00000 	.word	0x3fe00000
 8022f9c:	408fffff 	.word	0x408fffff
 8022fa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8022fa4:	f04f 0200 	mov.w	r2, #0
 8022fa8:	da05      	bge.n	8022fb6 <__ieee754_pow+0x3de>
 8022faa:	4bd3      	ldr	r3, [pc, #844]	; (80232f8 <__ieee754_pow+0x720>)
 8022fac:	f7dd fb2c 	bl	8000608 <__aeabi_dmul>
 8022fb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022fb4:	460c      	mov	r4, r1
 8022fb6:	1523      	asrs	r3, r4, #20
 8022fb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022fbc:	4413      	add	r3, r2
 8022fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8022fc0:	4bce      	ldr	r3, [pc, #824]	; (80232fc <__ieee754_pow+0x724>)
 8022fc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022fc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022fca:	429c      	cmp	r4, r3
 8022fcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022fd0:	dd08      	ble.n	8022fe4 <__ieee754_pow+0x40c>
 8022fd2:	4bcb      	ldr	r3, [pc, #812]	; (8023300 <__ieee754_pow+0x728>)
 8022fd4:	429c      	cmp	r4, r3
 8022fd6:	f340 815e 	ble.w	8023296 <__ieee754_pow+0x6be>
 8022fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022fdc:	3301      	adds	r3, #1
 8022fde:	9309      	str	r3, [sp, #36]	; 0x24
 8022fe0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022fe4:	f04f 0a00 	mov.w	sl, #0
 8022fe8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8022fec:	930c      	str	r3, [sp, #48]	; 0x30
 8022fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022ff0:	4bc4      	ldr	r3, [pc, #784]	; (8023304 <__ieee754_pow+0x72c>)
 8022ff2:	4413      	add	r3, r2
 8022ff4:	ed93 7b00 	vldr	d7, [r3]
 8022ff8:	4629      	mov	r1, r5
 8022ffa:	ec53 2b17 	vmov	r2, r3, d7
 8022ffe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8023002:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8023006:	f7dd f947 	bl	8000298 <__aeabi_dsub>
 802300a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802300e:	4606      	mov	r6, r0
 8023010:	460f      	mov	r7, r1
 8023012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023016:	f7dd f941 	bl	800029c <__adddf3>
 802301a:	4602      	mov	r2, r0
 802301c:	460b      	mov	r3, r1
 802301e:	2000      	movs	r0, #0
 8023020:	49b9      	ldr	r1, [pc, #740]	; (8023308 <__ieee754_pow+0x730>)
 8023022:	f7dd fc1b 	bl	800085c <__aeabi_ddiv>
 8023026:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802302a:	4602      	mov	r2, r0
 802302c:	460b      	mov	r3, r1
 802302e:	4630      	mov	r0, r6
 8023030:	4639      	mov	r1, r7
 8023032:	f7dd fae9 	bl	8000608 <__aeabi_dmul>
 8023036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802303a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 802303e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8023042:	2300      	movs	r3, #0
 8023044:	9302      	str	r3, [sp, #8]
 8023046:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802304a:	106d      	asrs	r5, r5, #1
 802304c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8023050:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023054:	2200      	movs	r2, #0
 8023056:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802305a:	4640      	mov	r0, r8
 802305c:	4649      	mov	r1, r9
 802305e:	4614      	mov	r4, r2
 8023060:	461d      	mov	r5, r3
 8023062:	f7dd fad1 	bl	8000608 <__aeabi_dmul>
 8023066:	4602      	mov	r2, r0
 8023068:	460b      	mov	r3, r1
 802306a:	4630      	mov	r0, r6
 802306c:	4639      	mov	r1, r7
 802306e:	f7dd f913 	bl	8000298 <__aeabi_dsub>
 8023072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023076:	4606      	mov	r6, r0
 8023078:	460f      	mov	r7, r1
 802307a:	4620      	mov	r0, r4
 802307c:	4629      	mov	r1, r5
 802307e:	f7dd f90b 	bl	8000298 <__aeabi_dsub>
 8023082:	4602      	mov	r2, r0
 8023084:	460b      	mov	r3, r1
 8023086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 802308a:	f7dd f905 	bl	8000298 <__aeabi_dsub>
 802308e:	4642      	mov	r2, r8
 8023090:	464b      	mov	r3, r9
 8023092:	f7dd fab9 	bl	8000608 <__aeabi_dmul>
 8023096:	4602      	mov	r2, r0
 8023098:	460b      	mov	r3, r1
 802309a:	4630      	mov	r0, r6
 802309c:	4639      	mov	r1, r7
 802309e:	f7dd f8fb 	bl	8000298 <__aeabi_dsub>
 80230a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80230a6:	f7dd faaf 	bl	8000608 <__aeabi_dmul>
 80230aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80230ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80230b2:	4610      	mov	r0, r2
 80230b4:	4619      	mov	r1, r3
 80230b6:	f7dd faa7 	bl	8000608 <__aeabi_dmul>
 80230ba:	a37b      	add	r3, pc, #492	; (adr r3, 80232a8 <__ieee754_pow+0x6d0>)
 80230bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230c0:	4604      	mov	r4, r0
 80230c2:	460d      	mov	r5, r1
 80230c4:	f7dd faa0 	bl	8000608 <__aeabi_dmul>
 80230c8:	a379      	add	r3, pc, #484	; (adr r3, 80232b0 <__ieee754_pow+0x6d8>)
 80230ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230ce:	f7dd f8e5 	bl	800029c <__adddf3>
 80230d2:	4622      	mov	r2, r4
 80230d4:	462b      	mov	r3, r5
 80230d6:	f7dd fa97 	bl	8000608 <__aeabi_dmul>
 80230da:	a377      	add	r3, pc, #476	; (adr r3, 80232b8 <__ieee754_pow+0x6e0>)
 80230dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230e0:	f7dd f8dc 	bl	800029c <__adddf3>
 80230e4:	4622      	mov	r2, r4
 80230e6:	462b      	mov	r3, r5
 80230e8:	f7dd fa8e 	bl	8000608 <__aeabi_dmul>
 80230ec:	a374      	add	r3, pc, #464	; (adr r3, 80232c0 <__ieee754_pow+0x6e8>)
 80230ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230f2:	f7dd f8d3 	bl	800029c <__adddf3>
 80230f6:	4622      	mov	r2, r4
 80230f8:	462b      	mov	r3, r5
 80230fa:	f7dd fa85 	bl	8000608 <__aeabi_dmul>
 80230fe:	a372      	add	r3, pc, #456	; (adr r3, 80232c8 <__ieee754_pow+0x6f0>)
 8023100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023104:	f7dd f8ca 	bl	800029c <__adddf3>
 8023108:	4622      	mov	r2, r4
 802310a:	462b      	mov	r3, r5
 802310c:	f7dd fa7c 	bl	8000608 <__aeabi_dmul>
 8023110:	a36f      	add	r3, pc, #444	; (adr r3, 80232d0 <__ieee754_pow+0x6f8>)
 8023112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023116:	f7dd f8c1 	bl	800029c <__adddf3>
 802311a:	4622      	mov	r2, r4
 802311c:	4606      	mov	r6, r0
 802311e:	460f      	mov	r7, r1
 8023120:	462b      	mov	r3, r5
 8023122:	4620      	mov	r0, r4
 8023124:	4629      	mov	r1, r5
 8023126:	f7dd fa6f 	bl	8000608 <__aeabi_dmul>
 802312a:	4602      	mov	r2, r0
 802312c:	460b      	mov	r3, r1
 802312e:	4630      	mov	r0, r6
 8023130:	4639      	mov	r1, r7
 8023132:	f7dd fa69 	bl	8000608 <__aeabi_dmul>
 8023136:	4642      	mov	r2, r8
 8023138:	4604      	mov	r4, r0
 802313a:	460d      	mov	r5, r1
 802313c:	464b      	mov	r3, r9
 802313e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023142:	f7dd f8ab 	bl	800029c <__adddf3>
 8023146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802314a:	f7dd fa5d 	bl	8000608 <__aeabi_dmul>
 802314e:	4622      	mov	r2, r4
 8023150:	462b      	mov	r3, r5
 8023152:	f7dd f8a3 	bl	800029c <__adddf3>
 8023156:	4642      	mov	r2, r8
 8023158:	4606      	mov	r6, r0
 802315a:	460f      	mov	r7, r1
 802315c:	464b      	mov	r3, r9
 802315e:	4640      	mov	r0, r8
 8023160:	4649      	mov	r1, r9
 8023162:	f7dd fa51 	bl	8000608 <__aeabi_dmul>
 8023166:	2200      	movs	r2, #0
 8023168:	4b68      	ldr	r3, [pc, #416]	; (802330c <__ieee754_pow+0x734>)
 802316a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802316e:	f7dd f895 	bl	800029c <__adddf3>
 8023172:	4632      	mov	r2, r6
 8023174:	463b      	mov	r3, r7
 8023176:	f7dd f891 	bl	800029c <__adddf3>
 802317a:	9802      	ldr	r0, [sp, #8]
 802317c:	460d      	mov	r5, r1
 802317e:	4604      	mov	r4, r0
 8023180:	4602      	mov	r2, r0
 8023182:	460b      	mov	r3, r1
 8023184:	4640      	mov	r0, r8
 8023186:	4649      	mov	r1, r9
 8023188:	f7dd fa3e 	bl	8000608 <__aeabi_dmul>
 802318c:	2200      	movs	r2, #0
 802318e:	4680      	mov	r8, r0
 8023190:	4689      	mov	r9, r1
 8023192:	4b5e      	ldr	r3, [pc, #376]	; (802330c <__ieee754_pow+0x734>)
 8023194:	4620      	mov	r0, r4
 8023196:	4629      	mov	r1, r5
 8023198:	f7dd f87e 	bl	8000298 <__aeabi_dsub>
 802319c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80231a0:	f7dd f87a 	bl	8000298 <__aeabi_dsub>
 80231a4:	4602      	mov	r2, r0
 80231a6:	460b      	mov	r3, r1
 80231a8:	4630      	mov	r0, r6
 80231aa:	4639      	mov	r1, r7
 80231ac:	f7dd f874 	bl	8000298 <__aeabi_dsub>
 80231b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80231b4:	f7dd fa28 	bl	8000608 <__aeabi_dmul>
 80231b8:	4622      	mov	r2, r4
 80231ba:	4606      	mov	r6, r0
 80231bc:	460f      	mov	r7, r1
 80231be:	462b      	mov	r3, r5
 80231c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80231c4:	f7dd fa20 	bl	8000608 <__aeabi_dmul>
 80231c8:	4602      	mov	r2, r0
 80231ca:	460b      	mov	r3, r1
 80231cc:	4630      	mov	r0, r6
 80231ce:	4639      	mov	r1, r7
 80231d0:	f7dd f864 	bl	800029c <__adddf3>
 80231d4:	4606      	mov	r6, r0
 80231d6:	460f      	mov	r7, r1
 80231d8:	4602      	mov	r2, r0
 80231da:	460b      	mov	r3, r1
 80231dc:	4640      	mov	r0, r8
 80231de:	4649      	mov	r1, r9
 80231e0:	f7dd f85c 	bl	800029c <__adddf3>
 80231e4:	9802      	ldr	r0, [sp, #8]
 80231e6:	a33c      	add	r3, pc, #240	; (adr r3, 80232d8 <__ieee754_pow+0x700>)
 80231e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ec:	4604      	mov	r4, r0
 80231ee:	460d      	mov	r5, r1
 80231f0:	f7dd fa0a 	bl	8000608 <__aeabi_dmul>
 80231f4:	4642      	mov	r2, r8
 80231f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80231fa:	464b      	mov	r3, r9
 80231fc:	4620      	mov	r0, r4
 80231fe:	4629      	mov	r1, r5
 8023200:	f7dd f84a 	bl	8000298 <__aeabi_dsub>
 8023204:	4602      	mov	r2, r0
 8023206:	460b      	mov	r3, r1
 8023208:	4630      	mov	r0, r6
 802320a:	4639      	mov	r1, r7
 802320c:	f7dd f844 	bl	8000298 <__aeabi_dsub>
 8023210:	a333      	add	r3, pc, #204	; (adr r3, 80232e0 <__ieee754_pow+0x708>)
 8023212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023216:	f7dd f9f7 	bl	8000608 <__aeabi_dmul>
 802321a:	a333      	add	r3, pc, #204	; (adr r3, 80232e8 <__ieee754_pow+0x710>)
 802321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023220:	4606      	mov	r6, r0
 8023222:	460f      	mov	r7, r1
 8023224:	4620      	mov	r0, r4
 8023226:	4629      	mov	r1, r5
 8023228:	f7dd f9ee 	bl	8000608 <__aeabi_dmul>
 802322c:	4602      	mov	r2, r0
 802322e:	460b      	mov	r3, r1
 8023230:	4630      	mov	r0, r6
 8023232:	4639      	mov	r1, r7
 8023234:	f7dd f832 	bl	800029c <__adddf3>
 8023238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802323a:	4b35      	ldr	r3, [pc, #212]	; (8023310 <__ieee754_pow+0x738>)
 802323c:	4413      	add	r3, r2
 802323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023242:	f7dd f82b 	bl	800029c <__adddf3>
 8023246:	4604      	mov	r4, r0
 8023248:	9809      	ldr	r0, [sp, #36]	; 0x24
 802324a:	460d      	mov	r5, r1
 802324c:	f7dd f972 	bl	8000534 <__aeabi_i2d>
 8023250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023252:	4b30      	ldr	r3, [pc, #192]	; (8023314 <__ieee754_pow+0x73c>)
 8023254:	4413      	add	r3, r2
 8023256:	e9d3 8900 	ldrd	r8, r9, [r3]
 802325a:	4606      	mov	r6, r0
 802325c:	460f      	mov	r7, r1
 802325e:	4622      	mov	r2, r4
 8023260:	462b      	mov	r3, r5
 8023262:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023266:	f7dd f819 	bl	800029c <__adddf3>
 802326a:	4642      	mov	r2, r8
 802326c:	464b      	mov	r3, r9
 802326e:	f7dd f815 	bl	800029c <__adddf3>
 8023272:	4632      	mov	r2, r6
 8023274:	463b      	mov	r3, r7
 8023276:	f7dd f811 	bl	800029c <__adddf3>
 802327a:	9802      	ldr	r0, [sp, #8]
 802327c:	4632      	mov	r2, r6
 802327e:	463b      	mov	r3, r7
 8023280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023284:	f7dd f808 	bl	8000298 <__aeabi_dsub>
 8023288:	4642      	mov	r2, r8
 802328a:	464b      	mov	r3, r9
 802328c:	f7dd f804 	bl	8000298 <__aeabi_dsub>
 8023290:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023294:	e607      	b.n	8022ea6 <__ieee754_pow+0x2ce>
 8023296:	f04f 0a01 	mov.w	sl, #1
 802329a:	e6a5      	b.n	8022fe8 <__ieee754_pow+0x410>
 802329c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80232f0 <__ieee754_pow+0x718>
 80232a0:	e613      	b.n	8022eca <__ieee754_pow+0x2f2>
 80232a2:	bf00      	nop
 80232a4:	f3af 8000 	nop.w
 80232a8:	4a454eef 	.word	0x4a454eef
 80232ac:	3fca7e28 	.word	0x3fca7e28
 80232b0:	93c9db65 	.word	0x93c9db65
 80232b4:	3fcd864a 	.word	0x3fcd864a
 80232b8:	a91d4101 	.word	0xa91d4101
 80232bc:	3fd17460 	.word	0x3fd17460
 80232c0:	518f264d 	.word	0x518f264d
 80232c4:	3fd55555 	.word	0x3fd55555
 80232c8:	db6fabff 	.word	0xdb6fabff
 80232cc:	3fdb6db6 	.word	0x3fdb6db6
 80232d0:	33333303 	.word	0x33333303
 80232d4:	3fe33333 	.word	0x3fe33333
 80232d8:	e0000000 	.word	0xe0000000
 80232dc:	3feec709 	.word	0x3feec709
 80232e0:	dc3a03fd 	.word	0xdc3a03fd
 80232e4:	3feec709 	.word	0x3feec709
 80232e8:	145b01f5 	.word	0x145b01f5
 80232ec:	be3e2fe0 	.word	0xbe3e2fe0
 80232f0:	00000000 	.word	0x00000000
 80232f4:	3ff00000 	.word	0x3ff00000
 80232f8:	43400000 	.word	0x43400000
 80232fc:	0003988e 	.word	0x0003988e
 8023300:	000bb679 	.word	0x000bb679
 8023304:	0802d308 	.word	0x0802d308
 8023308:	3ff00000 	.word	0x3ff00000
 802330c:	40080000 	.word	0x40080000
 8023310:	0802d328 	.word	0x0802d328
 8023314:	0802d318 	.word	0x0802d318
 8023318:	a3b4      	add	r3, pc, #720	; (adr r3, 80235ec <__ieee754_pow+0xa14>)
 802331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802331e:	4640      	mov	r0, r8
 8023320:	4649      	mov	r1, r9
 8023322:	f7dc ffbb 	bl	800029c <__adddf3>
 8023326:	4622      	mov	r2, r4
 8023328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802332c:	462b      	mov	r3, r5
 802332e:	4630      	mov	r0, r6
 8023330:	4639      	mov	r1, r7
 8023332:	f7dc ffb1 	bl	8000298 <__aeabi_dsub>
 8023336:	4602      	mov	r2, r0
 8023338:	460b      	mov	r3, r1
 802333a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802333e:	f7dd fbf3 	bl	8000b28 <__aeabi_dcmpgt>
 8023342:	2800      	cmp	r0, #0
 8023344:	f47f adfe 	bne.w	8022f44 <__ieee754_pow+0x36c>
 8023348:	4aa3      	ldr	r2, [pc, #652]	; (80235d8 <__ieee754_pow+0xa00>)
 802334a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802334e:	4293      	cmp	r3, r2
 8023350:	f340 810a 	ble.w	8023568 <__ieee754_pow+0x990>
 8023354:	151b      	asrs	r3, r3, #20
 8023356:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802335a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802335e:	fa4a f303 	asr.w	r3, sl, r3
 8023362:	445b      	add	r3, fp
 8023364:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023368:	4e9c      	ldr	r6, [pc, #624]	; (80235dc <__ieee754_pow+0xa04>)
 802336a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802336e:	4116      	asrs	r6, r2
 8023370:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023374:	2000      	movs	r0, #0
 8023376:	ea23 0106 	bic.w	r1, r3, r6
 802337a:	f1c2 0214 	rsb	r2, r2, #20
 802337e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023382:	fa4a fa02 	asr.w	sl, sl, r2
 8023386:	f1bb 0f00 	cmp.w	fp, #0
 802338a:	4602      	mov	r2, r0
 802338c:	460b      	mov	r3, r1
 802338e:	4620      	mov	r0, r4
 8023390:	4629      	mov	r1, r5
 8023392:	bfb8      	it	lt
 8023394:	f1ca 0a00 	rsblt	sl, sl, #0
 8023398:	f7dc ff7e 	bl	8000298 <__aeabi_dsub>
 802339c:	e9cd 0100 	strd	r0, r1, [sp]
 80233a0:	4642      	mov	r2, r8
 80233a2:	464b      	mov	r3, r9
 80233a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80233a8:	f7dc ff78 	bl	800029c <__adddf3>
 80233ac:	2000      	movs	r0, #0
 80233ae:	a378      	add	r3, pc, #480	; (adr r3, 8023590 <__ieee754_pow+0x9b8>)
 80233b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b4:	4604      	mov	r4, r0
 80233b6:	460d      	mov	r5, r1
 80233b8:	f7dd f926 	bl	8000608 <__aeabi_dmul>
 80233bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233c0:	4606      	mov	r6, r0
 80233c2:	460f      	mov	r7, r1
 80233c4:	4620      	mov	r0, r4
 80233c6:	4629      	mov	r1, r5
 80233c8:	f7dc ff66 	bl	8000298 <__aeabi_dsub>
 80233cc:	4602      	mov	r2, r0
 80233ce:	460b      	mov	r3, r1
 80233d0:	4640      	mov	r0, r8
 80233d2:	4649      	mov	r1, r9
 80233d4:	f7dc ff60 	bl	8000298 <__aeabi_dsub>
 80233d8:	a36f      	add	r3, pc, #444	; (adr r3, 8023598 <__ieee754_pow+0x9c0>)
 80233da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233de:	f7dd f913 	bl	8000608 <__aeabi_dmul>
 80233e2:	a36f      	add	r3, pc, #444	; (adr r3, 80235a0 <__ieee754_pow+0x9c8>)
 80233e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233e8:	4680      	mov	r8, r0
 80233ea:	4689      	mov	r9, r1
 80233ec:	4620      	mov	r0, r4
 80233ee:	4629      	mov	r1, r5
 80233f0:	f7dd f90a 	bl	8000608 <__aeabi_dmul>
 80233f4:	4602      	mov	r2, r0
 80233f6:	460b      	mov	r3, r1
 80233f8:	4640      	mov	r0, r8
 80233fa:	4649      	mov	r1, r9
 80233fc:	f7dc ff4e 	bl	800029c <__adddf3>
 8023400:	4604      	mov	r4, r0
 8023402:	460d      	mov	r5, r1
 8023404:	4602      	mov	r2, r0
 8023406:	460b      	mov	r3, r1
 8023408:	4630      	mov	r0, r6
 802340a:	4639      	mov	r1, r7
 802340c:	f7dc ff46 	bl	800029c <__adddf3>
 8023410:	4632      	mov	r2, r6
 8023412:	463b      	mov	r3, r7
 8023414:	4680      	mov	r8, r0
 8023416:	4689      	mov	r9, r1
 8023418:	f7dc ff3e 	bl	8000298 <__aeabi_dsub>
 802341c:	4602      	mov	r2, r0
 802341e:	460b      	mov	r3, r1
 8023420:	4620      	mov	r0, r4
 8023422:	4629      	mov	r1, r5
 8023424:	f7dc ff38 	bl	8000298 <__aeabi_dsub>
 8023428:	4642      	mov	r2, r8
 802342a:	4606      	mov	r6, r0
 802342c:	460f      	mov	r7, r1
 802342e:	464b      	mov	r3, r9
 8023430:	4640      	mov	r0, r8
 8023432:	4649      	mov	r1, r9
 8023434:	f7dd f8e8 	bl	8000608 <__aeabi_dmul>
 8023438:	a35b      	add	r3, pc, #364	; (adr r3, 80235a8 <__ieee754_pow+0x9d0>)
 802343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802343e:	4604      	mov	r4, r0
 8023440:	460d      	mov	r5, r1
 8023442:	f7dd f8e1 	bl	8000608 <__aeabi_dmul>
 8023446:	a35a      	add	r3, pc, #360	; (adr r3, 80235b0 <__ieee754_pow+0x9d8>)
 8023448:	e9d3 2300 	ldrd	r2, r3, [r3]
 802344c:	f7dc ff24 	bl	8000298 <__aeabi_dsub>
 8023450:	4622      	mov	r2, r4
 8023452:	462b      	mov	r3, r5
 8023454:	f7dd f8d8 	bl	8000608 <__aeabi_dmul>
 8023458:	a357      	add	r3, pc, #348	; (adr r3, 80235b8 <__ieee754_pow+0x9e0>)
 802345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802345e:	f7dc ff1d 	bl	800029c <__adddf3>
 8023462:	4622      	mov	r2, r4
 8023464:	462b      	mov	r3, r5
 8023466:	f7dd f8cf 	bl	8000608 <__aeabi_dmul>
 802346a:	a355      	add	r3, pc, #340	; (adr r3, 80235c0 <__ieee754_pow+0x9e8>)
 802346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023470:	f7dc ff12 	bl	8000298 <__aeabi_dsub>
 8023474:	4622      	mov	r2, r4
 8023476:	462b      	mov	r3, r5
 8023478:	f7dd f8c6 	bl	8000608 <__aeabi_dmul>
 802347c:	a352      	add	r3, pc, #328	; (adr r3, 80235c8 <__ieee754_pow+0x9f0>)
 802347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023482:	f7dc ff0b 	bl	800029c <__adddf3>
 8023486:	4622      	mov	r2, r4
 8023488:	462b      	mov	r3, r5
 802348a:	f7dd f8bd 	bl	8000608 <__aeabi_dmul>
 802348e:	4602      	mov	r2, r0
 8023490:	460b      	mov	r3, r1
 8023492:	4640      	mov	r0, r8
 8023494:	4649      	mov	r1, r9
 8023496:	f7dc feff 	bl	8000298 <__aeabi_dsub>
 802349a:	4604      	mov	r4, r0
 802349c:	460d      	mov	r5, r1
 802349e:	4602      	mov	r2, r0
 80234a0:	460b      	mov	r3, r1
 80234a2:	4640      	mov	r0, r8
 80234a4:	4649      	mov	r1, r9
 80234a6:	f7dd f8af 	bl	8000608 <__aeabi_dmul>
 80234aa:	2200      	movs	r2, #0
 80234ac:	e9cd 0100 	strd	r0, r1, [sp]
 80234b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80234b4:	4620      	mov	r0, r4
 80234b6:	4629      	mov	r1, r5
 80234b8:	f7dc feee 	bl	8000298 <__aeabi_dsub>
 80234bc:	4602      	mov	r2, r0
 80234be:	460b      	mov	r3, r1
 80234c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80234c4:	f7dd f9ca 	bl	800085c <__aeabi_ddiv>
 80234c8:	4632      	mov	r2, r6
 80234ca:	4604      	mov	r4, r0
 80234cc:	460d      	mov	r5, r1
 80234ce:	463b      	mov	r3, r7
 80234d0:	4640      	mov	r0, r8
 80234d2:	4649      	mov	r1, r9
 80234d4:	f7dd f898 	bl	8000608 <__aeabi_dmul>
 80234d8:	4632      	mov	r2, r6
 80234da:	463b      	mov	r3, r7
 80234dc:	f7dc fede 	bl	800029c <__adddf3>
 80234e0:	4602      	mov	r2, r0
 80234e2:	460b      	mov	r3, r1
 80234e4:	4620      	mov	r0, r4
 80234e6:	4629      	mov	r1, r5
 80234e8:	f7dc fed6 	bl	8000298 <__aeabi_dsub>
 80234ec:	4642      	mov	r2, r8
 80234ee:	464b      	mov	r3, r9
 80234f0:	f7dc fed2 	bl	8000298 <__aeabi_dsub>
 80234f4:	4602      	mov	r2, r0
 80234f6:	460b      	mov	r3, r1
 80234f8:	2000      	movs	r0, #0
 80234fa:	4939      	ldr	r1, [pc, #228]	; (80235e0 <__ieee754_pow+0xa08>)
 80234fc:	f7dc fecc 	bl	8000298 <__aeabi_dsub>
 8023500:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8023504:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023508:	4602      	mov	r2, r0
 802350a:	460b      	mov	r3, r1
 802350c:	da2f      	bge.n	802356e <__ieee754_pow+0x996>
 802350e:	4650      	mov	r0, sl
 8023510:	ec43 2b10 	vmov	d0, r2, r3
 8023514:	f000 f9c0 	bl	8023898 <scalbn>
 8023518:	ec51 0b10 	vmov	r0, r1, d0
 802351c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023520:	f7ff bbf1 	b.w	8022d06 <__ieee754_pow+0x12e>
 8023524:	4b2f      	ldr	r3, [pc, #188]	; (80235e4 <__ieee754_pow+0xa0c>)
 8023526:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802352a:	429e      	cmp	r6, r3
 802352c:	f77f af0c 	ble.w	8023348 <__ieee754_pow+0x770>
 8023530:	4b2d      	ldr	r3, [pc, #180]	; (80235e8 <__ieee754_pow+0xa10>)
 8023532:	440b      	add	r3, r1
 8023534:	4303      	orrs	r3, r0
 8023536:	d00b      	beq.n	8023550 <__ieee754_pow+0x978>
 8023538:	a325      	add	r3, pc, #148	; (adr r3, 80235d0 <__ieee754_pow+0x9f8>)
 802353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802353e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023542:	f7dd f861 	bl	8000608 <__aeabi_dmul>
 8023546:	a322      	add	r3, pc, #136	; (adr r3, 80235d0 <__ieee754_pow+0x9f8>)
 8023548:	e9d3 2300 	ldrd	r2, r3, [r3]
 802354c:	f7ff bbdb 	b.w	8022d06 <__ieee754_pow+0x12e>
 8023550:	4622      	mov	r2, r4
 8023552:	462b      	mov	r3, r5
 8023554:	f7dc fea0 	bl	8000298 <__aeabi_dsub>
 8023558:	4642      	mov	r2, r8
 802355a:	464b      	mov	r3, r9
 802355c:	f7dd fada 	bl	8000b14 <__aeabi_dcmpge>
 8023560:	2800      	cmp	r0, #0
 8023562:	f43f aef1 	beq.w	8023348 <__ieee754_pow+0x770>
 8023566:	e7e7      	b.n	8023538 <__ieee754_pow+0x960>
 8023568:	f04f 0a00 	mov.w	sl, #0
 802356c:	e718      	b.n	80233a0 <__ieee754_pow+0x7c8>
 802356e:	4621      	mov	r1, r4
 8023570:	e7d4      	b.n	802351c <__ieee754_pow+0x944>
 8023572:	2000      	movs	r0, #0
 8023574:	491a      	ldr	r1, [pc, #104]	; (80235e0 <__ieee754_pow+0xa08>)
 8023576:	f7ff bb8f 	b.w	8022c98 <__ieee754_pow+0xc0>
 802357a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802357e:	f7ff bb8b 	b.w	8022c98 <__ieee754_pow+0xc0>
 8023582:	4630      	mov	r0, r6
 8023584:	4639      	mov	r1, r7
 8023586:	f7ff bb87 	b.w	8022c98 <__ieee754_pow+0xc0>
 802358a:	4693      	mov	fp, r2
 802358c:	f7ff bb98 	b.w	8022cc0 <__ieee754_pow+0xe8>
 8023590:	00000000 	.word	0x00000000
 8023594:	3fe62e43 	.word	0x3fe62e43
 8023598:	fefa39ef 	.word	0xfefa39ef
 802359c:	3fe62e42 	.word	0x3fe62e42
 80235a0:	0ca86c39 	.word	0x0ca86c39
 80235a4:	be205c61 	.word	0xbe205c61
 80235a8:	72bea4d0 	.word	0x72bea4d0
 80235ac:	3e663769 	.word	0x3e663769
 80235b0:	c5d26bf1 	.word	0xc5d26bf1
 80235b4:	3ebbbd41 	.word	0x3ebbbd41
 80235b8:	af25de2c 	.word	0xaf25de2c
 80235bc:	3f11566a 	.word	0x3f11566a
 80235c0:	16bebd93 	.word	0x16bebd93
 80235c4:	3f66c16c 	.word	0x3f66c16c
 80235c8:	5555553e 	.word	0x5555553e
 80235cc:	3fc55555 	.word	0x3fc55555
 80235d0:	c2f8f359 	.word	0xc2f8f359
 80235d4:	01a56e1f 	.word	0x01a56e1f
 80235d8:	3fe00000 	.word	0x3fe00000
 80235dc:	000fffff 	.word	0x000fffff
 80235e0:	3ff00000 	.word	0x3ff00000
 80235e4:	4090cbff 	.word	0x4090cbff
 80235e8:	3f6f3400 	.word	0x3f6f3400
 80235ec:	652b82fe 	.word	0x652b82fe
 80235f0:	3c971547 	.word	0x3c971547

080235f4 <__ieee754_sqrt>:
 80235f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235f8:	4955      	ldr	r1, [pc, #340]	; (8023750 <__ieee754_sqrt+0x15c>)
 80235fa:	ec55 4b10 	vmov	r4, r5, d0
 80235fe:	43a9      	bics	r1, r5
 8023600:	462b      	mov	r3, r5
 8023602:	462a      	mov	r2, r5
 8023604:	d112      	bne.n	802362c <__ieee754_sqrt+0x38>
 8023606:	ee10 2a10 	vmov	r2, s0
 802360a:	ee10 0a10 	vmov	r0, s0
 802360e:	4629      	mov	r1, r5
 8023610:	f7dc fffa 	bl	8000608 <__aeabi_dmul>
 8023614:	4602      	mov	r2, r0
 8023616:	460b      	mov	r3, r1
 8023618:	4620      	mov	r0, r4
 802361a:	4629      	mov	r1, r5
 802361c:	f7dc fe3e 	bl	800029c <__adddf3>
 8023620:	4604      	mov	r4, r0
 8023622:	460d      	mov	r5, r1
 8023624:	ec45 4b10 	vmov	d0, r4, r5
 8023628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802362c:	2d00      	cmp	r5, #0
 802362e:	ee10 0a10 	vmov	r0, s0
 8023632:	4621      	mov	r1, r4
 8023634:	dc0f      	bgt.n	8023656 <__ieee754_sqrt+0x62>
 8023636:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802363a:	4330      	orrs	r0, r6
 802363c:	d0f2      	beq.n	8023624 <__ieee754_sqrt+0x30>
 802363e:	b155      	cbz	r5, 8023656 <__ieee754_sqrt+0x62>
 8023640:	ee10 2a10 	vmov	r2, s0
 8023644:	4620      	mov	r0, r4
 8023646:	4629      	mov	r1, r5
 8023648:	f7dc fe26 	bl	8000298 <__aeabi_dsub>
 802364c:	4602      	mov	r2, r0
 802364e:	460b      	mov	r3, r1
 8023650:	f7dd f904 	bl	800085c <__aeabi_ddiv>
 8023654:	e7e4      	b.n	8023620 <__ieee754_sqrt+0x2c>
 8023656:	151b      	asrs	r3, r3, #20
 8023658:	d073      	beq.n	8023742 <__ieee754_sqrt+0x14e>
 802365a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802365e:	07dd      	lsls	r5, r3, #31
 8023660:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8023664:	bf48      	it	mi
 8023666:	0fc8      	lsrmi	r0, r1, #31
 8023668:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 802366c:	bf44      	itt	mi
 802366e:	0049      	lslmi	r1, r1, #1
 8023670:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8023674:	2500      	movs	r5, #0
 8023676:	1058      	asrs	r0, r3, #1
 8023678:	0fcb      	lsrs	r3, r1, #31
 802367a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 802367e:	0049      	lsls	r1, r1, #1
 8023680:	2316      	movs	r3, #22
 8023682:	462c      	mov	r4, r5
 8023684:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8023688:	19a7      	adds	r7, r4, r6
 802368a:	4297      	cmp	r7, r2
 802368c:	bfde      	ittt	le
 802368e:	19bc      	addle	r4, r7, r6
 8023690:	1bd2      	suble	r2, r2, r7
 8023692:	19ad      	addle	r5, r5, r6
 8023694:	0fcf      	lsrs	r7, r1, #31
 8023696:	3b01      	subs	r3, #1
 8023698:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 802369c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80236a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80236a4:	d1f0      	bne.n	8023688 <__ieee754_sqrt+0x94>
 80236a6:	f04f 0c20 	mov.w	ip, #32
 80236aa:	469e      	mov	lr, r3
 80236ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80236b0:	42a2      	cmp	r2, r4
 80236b2:	eb06 070e 	add.w	r7, r6, lr
 80236b6:	dc02      	bgt.n	80236be <__ieee754_sqrt+0xca>
 80236b8:	d112      	bne.n	80236e0 <__ieee754_sqrt+0xec>
 80236ba:	428f      	cmp	r7, r1
 80236bc:	d810      	bhi.n	80236e0 <__ieee754_sqrt+0xec>
 80236be:	2f00      	cmp	r7, #0
 80236c0:	eb07 0e06 	add.w	lr, r7, r6
 80236c4:	da42      	bge.n	802374c <__ieee754_sqrt+0x158>
 80236c6:	f1be 0f00 	cmp.w	lr, #0
 80236ca:	db3f      	blt.n	802374c <__ieee754_sqrt+0x158>
 80236cc:	f104 0801 	add.w	r8, r4, #1
 80236d0:	1b12      	subs	r2, r2, r4
 80236d2:	428f      	cmp	r7, r1
 80236d4:	bf88      	it	hi
 80236d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80236da:	1bc9      	subs	r1, r1, r7
 80236dc:	4433      	add	r3, r6
 80236de:	4644      	mov	r4, r8
 80236e0:	0052      	lsls	r2, r2, #1
 80236e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80236e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80236ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80236ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80236f2:	d1dd      	bne.n	80236b0 <__ieee754_sqrt+0xbc>
 80236f4:	430a      	orrs	r2, r1
 80236f6:	d006      	beq.n	8023706 <__ieee754_sqrt+0x112>
 80236f8:	1c5c      	adds	r4, r3, #1
 80236fa:	bf13      	iteet	ne
 80236fc:	3301      	addne	r3, #1
 80236fe:	3501      	addeq	r5, #1
 8023700:	4663      	moveq	r3, ip
 8023702:	f023 0301 	bicne.w	r3, r3, #1
 8023706:	106a      	asrs	r2, r5, #1
 8023708:	085b      	lsrs	r3, r3, #1
 802370a:	07e9      	lsls	r1, r5, #31
 802370c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8023710:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8023714:	bf48      	it	mi
 8023716:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802371a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 802371e:	461c      	mov	r4, r3
 8023720:	e780      	b.n	8023624 <__ieee754_sqrt+0x30>
 8023722:	0aca      	lsrs	r2, r1, #11
 8023724:	3815      	subs	r0, #21
 8023726:	0549      	lsls	r1, r1, #21
 8023728:	2a00      	cmp	r2, #0
 802372a:	d0fa      	beq.n	8023722 <__ieee754_sqrt+0x12e>
 802372c:	02d6      	lsls	r6, r2, #11
 802372e:	d50a      	bpl.n	8023746 <__ieee754_sqrt+0x152>
 8023730:	f1c3 0420 	rsb	r4, r3, #32
 8023734:	fa21 f404 	lsr.w	r4, r1, r4
 8023738:	1e5d      	subs	r5, r3, #1
 802373a:	4099      	lsls	r1, r3
 802373c:	4322      	orrs	r2, r4
 802373e:	1b43      	subs	r3, r0, r5
 8023740:	e78b      	b.n	802365a <__ieee754_sqrt+0x66>
 8023742:	4618      	mov	r0, r3
 8023744:	e7f0      	b.n	8023728 <__ieee754_sqrt+0x134>
 8023746:	0052      	lsls	r2, r2, #1
 8023748:	3301      	adds	r3, #1
 802374a:	e7ef      	b.n	802372c <__ieee754_sqrt+0x138>
 802374c:	46a0      	mov	r8, r4
 802374e:	e7bf      	b.n	80236d0 <__ieee754_sqrt+0xdc>
 8023750:	7ff00000 	.word	0x7ff00000

08023754 <fabs>:
 8023754:	ec51 0b10 	vmov	r0, r1, d0
 8023758:	ee10 2a10 	vmov	r2, s0
 802375c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023760:	ec43 2b10 	vmov	d0, r2, r3
 8023764:	4770      	bx	lr

08023766 <finite>:
 8023766:	ee10 3a90 	vmov	r3, s1
 802376a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 802376e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8023772:	0fc0      	lsrs	r0, r0, #31
 8023774:	4770      	bx	lr

08023776 <matherr>:
 8023776:	2000      	movs	r0, #0
 8023778:	4770      	bx	lr
 802377a:	0000      	movs	r0, r0
 802377c:	0000      	movs	r0, r0
	...

08023780 <nan>:
 8023780:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023788 <nan+0x8>
 8023784:	4770      	bx	lr
 8023786:	bf00      	nop
 8023788:	00000000 	.word	0x00000000
 802378c:	7ff80000 	.word	0x7ff80000

08023790 <rint>:
 8023790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023792:	ec51 0b10 	vmov	r0, r1, d0
 8023796:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802379a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 802379e:	2e13      	cmp	r6, #19
 80237a0:	460b      	mov	r3, r1
 80237a2:	ee10 4a10 	vmov	r4, s0
 80237a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80237aa:	dc56      	bgt.n	802385a <rint+0xca>
 80237ac:	2e00      	cmp	r6, #0
 80237ae:	da2b      	bge.n	8023808 <rint+0x78>
 80237b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80237b4:	4302      	orrs	r2, r0
 80237b6:	d023      	beq.n	8023800 <rint+0x70>
 80237b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80237bc:	4302      	orrs	r2, r0
 80237be:	4254      	negs	r4, r2
 80237c0:	4314      	orrs	r4, r2
 80237c2:	0c4b      	lsrs	r3, r1, #17
 80237c4:	0b24      	lsrs	r4, r4, #12
 80237c6:	045b      	lsls	r3, r3, #17
 80237c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80237cc:	ea44 0103 	orr.w	r1, r4, r3
 80237d0:	460b      	mov	r3, r1
 80237d2:	492f      	ldr	r1, [pc, #188]	; (8023890 <rint+0x100>)
 80237d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80237d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80237dc:	4602      	mov	r2, r0
 80237de:	4639      	mov	r1, r7
 80237e0:	4630      	mov	r0, r6
 80237e2:	f7dc fd5b 	bl	800029c <__adddf3>
 80237e6:	e9cd 0100 	strd	r0, r1, [sp]
 80237ea:	463b      	mov	r3, r7
 80237ec:	4632      	mov	r2, r6
 80237ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80237f2:	f7dc fd51 	bl	8000298 <__aeabi_dsub>
 80237f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80237fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80237fe:	4639      	mov	r1, r7
 8023800:	ec41 0b10 	vmov	d0, r0, r1
 8023804:	b003      	add	sp, #12
 8023806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023808:	4a22      	ldr	r2, [pc, #136]	; (8023894 <rint+0x104>)
 802380a:	4132      	asrs	r2, r6
 802380c:	ea01 0702 	and.w	r7, r1, r2
 8023810:	4307      	orrs	r7, r0
 8023812:	d0f5      	beq.n	8023800 <rint+0x70>
 8023814:	0852      	lsrs	r2, r2, #1
 8023816:	4011      	ands	r1, r2
 8023818:	430c      	orrs	r4, r1
 802381a:	d00b      	beq.n	8023834 <rint+0xa4>
 802381c:	ea23 0202 	bic.w	r2, r3, r2
 8023820:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8023824:	2e13      	cmp	r6, #19
 8023826:	fa43 f306 	asr.w	r3, r3, r6
 802382a:	bf0c      	ite	eq
 802382c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8023830:	2400      	movne	r4, #0
 8023832:	4313      	orrs	r3, r2
 8023834:	4916      	ldr	r1, [pc, #88]	; (8023890 <rint+0x100>)
 8023836:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 802383a:	4622      	mov	r2, r4
 802383c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023840:	4620      	mov	r0, r4
 8023842:	4629      	mov	r1, r5
 8023844:	f7dc fd2a 	bl	800029c <__adddf3>
 8023848:	e9cd 0100 	strd	r0, r1, [sp]
 802384c:	4622      	mov	r2, r4
 802384e:	462b      	mov	r3, r5
 8023850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023854:	f7dc fd20 	bl	8000298 <__aeabi_dsub>
 8023858:	e7d2      	b.n	8023800 <rint+0x70>
 802385a:	2e33      	cmp	r6, #51	; 0x33
 802385c:	dd07      	ble.n	802386e <rint+0xde>
 802385e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023862:	d1cd      	bne.n	8023800 <rint+0x70>
 8023864:	ee10 2a10 	vmov	r2, s0
 8023868:	f7dc fd18 	bl	800029c <__adddf3>
 802386c:	e7c8      	b.n	8023800 <rint+0x70>
 802386e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8023872:	f04f 32ff 	mov.w	r2, #4294967295
 8023876:	40f2      	lsrs	r2, r6
 8023878:	4210      	tst	r0, r2
 802387a:	d0c1      	beq.n	8023800 <rint+0x70>
 802387c:	0852      	lsrs	r2, r2, #1
 802387e:	4210      	tst	r0, r2
 8023880:	bf1f      	itttt	ne
 8023882:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8023886:	ea20 0202 	bicne.w	r2, r0, r2
 802388a:	4134      	asrne	r4, r6
 802388c:	4314      	orrne	r4, r2
 802388e:	e7d1      	b.n	8023834 <rint+0xa4>
 8023890:	0802d338 	.word	0x0802d338
 8023894:	000fffff 	.word	0x000fffff

08023898 <scalbn>:
 8023898:	b570      	push	{r4, r5, r6, lr}
 802389a:	ec55 4b10 	vmov	r4, r5, d0
 802389e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80238a2:	4606      	mov	r6, r0
 80238a4:	462b      	mov	r3, r5
 80238a6:	b9aa      	cbnz	r2, 80238d4 <scalbn+0x3c>
 80238a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80238ac:	4323      	orrs	r3, r4
 80238ae:	d03b      	beq.n	8023928 <scalbn+0x90>
 80238b0:	4b31      	ldr	r3, [pc, #196]	; (8023978 <scalbn+0xe0>)
 80238b2:	4629      	mov	r1, r5
 80238b4:	2200      	movs	r2, #0
 80238b6:	ee10 0a10 	vmov	r0, s0
 80238ba:	f7dc fea5 	bl	8000608 <__aeabi_dmul>
 80238be:	4b2f      	ldr	r3, [pc, #188]	; (802397c <scalbn+0xe4>)
 80238c0:	429e      	cmp	r6, r3
 80238c2:	4604      	mov	r4, r0
 80238c4:	460d      	mov	r5, r1
 80238c6:	da12      	bge.n	80238ee <scalbn+0x56>
 80238c8:	a327      	add	r3, pc, #156	; (adr r3, 8023968 <scalbn+0xd0>)
 80238ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ce:	f7dc fe9b 	bl	8000608 <__aeabi_dmul>
 80238d2:	e009      	b.n	80238e8 <scalbn+0x50>
 80238d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80238d8:	428a      	cmp	r2, r1
 80238da:	d10c      	bne.n	80238f6 <scalbn+0x5e>
 80238dc:	ee10 2a10 	vmov	r2, s0
 80238e0:	4620      	mov	r0, r4
 80238e2:	4629      	mov	r1, r5
 80238e4:	f7dc fcda 	bl	800029c <__adddf3>
 80238e8:	4604      	mov	r4, r0
 80238ea:	460d      	mov	r5, r1
 80238ec:	e01c      	b.n	8023928 <scalbn+0x90>
 80238ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80238f2:	460b      	mov	r3, r1
 80238f4:	3a36      	subs	r2, #54	; 0x36
 80238f6:	4432      	add	r2, r6
 80238f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80238fc:	428a      	cmp	r2, r1
 80238fe:	dd0b      	ble.n	8023918 <scalbn+0x80>
 8023900:	ec45 4b11 	vmov	d1, r4, r5
 8023904:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8023970 <scalbn+0xd8>
 8023908:	f000 f83c 	bl	8023984 <copysign>
 802390c:	a318      	add	r3, pc, #96	; (adr r3, 8023970 <scalbn+0xd8>)
 802390e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023912:	ec51 0b10 	vmov	r0, r1, d0
 8023916:	e7da      	b.n	80238ce <scalbn+0x36>
 8023918:	2a00      	cmp	r2, #0
 802391a:	dd08      	ble.n	802392e <scalbn+0x96>
 802391c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023924:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023928:	ec45 4b10 	vmov	d0, r4, r5
 802392c:	bd70      	pop	{r4, r5, r6, pc}
 802392e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023932:	da0d      	bge.n	8023950 <scalbn+0xb8>
 8023934:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023938:	429e      	cmp	r6, r3
 802393a:	ec45 4b11 	vmov	d1, r4, r5
 802393e:	dce1      	bgt.n	8023904 <scalbn+0x6c>
 8023940:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8023968 <scalbn+0xd0>
 8023944:	f000 f81e 	bl	8023984 <copysign>
 8023948:	a307      	add	r3, pc, #28	; (adr r3, 8023968 <scalbn+0xd0>)
 802394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802394e:	e7e0      	b.n	8023912 <scalbn+0x7a>
 8023950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023954:	3236      	adds	r2, #54	; 0x36
 8023956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802395a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802395e:	4620      	mov	r0, r4
 8023960:	4629      	mov	r1, r5
 8023962:	2200      	movs	r2, #0
 8023964:	4b06      	ldr	r3, [pc, #24]	; (8023980 <scalbn+0xe8>)
 8023966:	e7b2      	b.n	80238ce <scalbn+0x36>
 8023968:	c2f8f359 	.word	0xc2f8f359
 802396c:	01a56e1f 	.word	0x01a56e1f
 8023970:	8800759c 	.word	0x8800759c
 8023974:	7e37e43c 	.word	0x7e37e43c
 8023978:	43500000 	.word	0x43500000
 802397c:	ffff3cb0 	.word	0xffff3cb0
 8023980:	3c900000 	.word	0x3c900000

08023984 <copysign>:
 8023984:	ec51 0b10 	vmov	r0, r1, d0
 8023988:	ee11 0a90 	vmov	r0, s3
 802398c:	ee10 2a10 	vmov	r2, s0
 8023990:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8023994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8023998:	ea41 0300 	orr.w	r3, r1, r0
 802399c:	ec43 2b10 	vmov	d0, r2, r3
 80239a0:	4770      	bx	lr
	...

080239a4 <_init>:
 80239a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239a6:	bf00      	nop
 80239a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239aa:	bc08      	pop	{r3}
 80239ac:	469e      	mov	lr, r3
 80239ae:	4770      	bx	lr

080239b0 <_fini>:
 80239b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80239b2:	bf00      	nop
 80239b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80239b6:	bc08      	pop	{r3}
 80239b8:	469e      	mov	lr, r3
 80239ba:	4770      	bx	lr
