
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005d48  08005d48  00015d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e98  08005e98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ea0  08005ea0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08005f1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08005f1c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d825  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228e  00000000  00000000  0002d8c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002fb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  00030818  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002929  00000000  00000000  000313b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b50e  00000000  00000000  00033ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cf79  00000000  00000000  0003f1ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc168  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a98  00000000  00000000  000cc1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d2c 	.word	0x08005d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005d2c 	.word	0x08005d2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b972 	b.w	8000e94 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9e08      	ldr	r6, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	4688      	mov	r8, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14b      	bne.n	8000c6e <__udivmoddi4+0xa6>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4615      	mov	r5, r2
 8000bda:	d967      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b14a      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be2:	f1c2 0720 	rsb	r7, r2, #32
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	fa20 f707 	lsr.w	r7, r0, r7
 8000bee:	4095      	lsls	r5, r2
 8000bf0:	ea47 0803 	orr.w	r8, r7, r3
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c00:	fa1f fc85 	uxth.w	ip, r5
 8000c04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18eb      	adds	r3, r5, r3
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	f080 811b 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8118 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c24:	3f02      	subs	r7, #2
 8000c26:	442b      	add	r3, r5
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3c:	45a4      	cmp	ip, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	192c      	adds	r4, r5, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8107 	bcs.w	8000e58 <__udivmoddi4+0x290>
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	f240 8104 	bls.w	8000e58 <__udivmoddi4+0x290>
 8000c50:	3802      	subs	r0, #2
 8000c52:	442c      	add	r4, r5
 8000c54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c58:	eba4 040c 	sub.w	r4, r4, ip
 8000c5c:	2700      	movs	r7, #0
 8000c5e:	b11e      	cbz	r6, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c6 4300 	strd	r4, r3, [r6]
 8000c68:	4639      	mov	r1, r7
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0xbe>
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f000 80eb 	beq.w	8000e4e <__udivmoddi4+0x286>
 8000c78:	2700      	movs	r7, #0
 8000c7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c7e:	4638      	mov	r0, r7
 8000c80:	4639      	mov	r1, r7
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	fab3 f783 	clz	r7, r3
 8000c8a:	2f00      	cmp	r7, #0
 8000c8c:	d147      	bne.n	8000d1e <__udivmoddi4+0x156>
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xd0>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 80fa 	bhi.w	8000e8c <__udivmoddi4+0x2c4>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4698      	mov	r8, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d0e0      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000ca6:	e9c6 4800 	strd	r4, r8, [r6]
 8000caa:	e7dd      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000cac:	b902      	cbnz	r2, 8000cb0 <__udivmoddi4+0xe8>
 8000cae:	deff      	udf	#255	; 0xff
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f040 808f 	bne.w	8000dd8 <__udivmoddi4+0x210>
 8000cba:	1b49      	subs	r1, r1, r5
 8000cbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc0:	fa1f f885 	uxth.w	r8, r5
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cca:	0c23      	lsrs	r3, r4, #16
 8000ccc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0x124>
 8000cdc:	18eb      	adds	r3, r5, r3
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x122>
 8000ce4:	4299      	cmp	r1, r3
 8000ce6:	f200 80cd 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cf8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x14c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x14a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80b6 	bhi.w	8000e7e <__udivmoddi4+0x2b6>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e79f      	b.n	8000c5e <__udivmoddi4+0x96>
 8000d1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d22:	40bb      	lsls	r3, r7
 8000d24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d3c:	4325      	orrs	r5, r4
 8000d3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d42:	0c2c      	lsrs	r4, r5, #16
 8000d44:	fb08 3319 	mls	r3, r8, r9, r3
 8000d48:	fa1f fa8e 	uxth.w	sl, lr
 8000d4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d50:	fb09 f40a 	mul.w	r4, r9, sl
 8000d54:	429c      	cmp	r4, r3
 8000d56:	fa02 f207 	lsl.w	r2, r2, r7
 8000d5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b0>
 8000d60:	eb1e 0303 	adds.w	r3, lr, r3
 8000d64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d68:	f080 8087 	bcs.w	8000e7a <__udivmoddi4+0x2b2>
 8000d6c:	429c      	cmp	r4, r3
 8000d6e:	f240 8084 	bls.w	8000e7a <__udivmoddi4+0x2b2>
 8000d72:	f1a9 0902 	sub.w	r9, r9, #2
 8000d76:	4473      	add	r3, lr
 8000d78:	1b1b      	subs	r3, r3, r4
 8000d7a:	b2ad      	uxth	r5, r5
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d8c:	45a2      	cmp	sl, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1da>
 8000d90:	eb1e 0404 	adds.w	r4, lr, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	d26b      	bcs.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9a:	45a2      	cmp	sl, r4
 8000d9c:	d969      	bls.n	8000e72 <__udivmoddi4+0x2aa>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4474      	add	r4, lr
 8000da2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000da6:	fba0 8902 	umull	r8, r9, r0, r2
 8000daa:	eba4 040a 	sub.w	r4, r4, sl
 8000dae:	454c      	cmp	r4, r9
 8000db0:	46c2      	mov	sl, r8
 8000db2:	464b      	mov	r3, r9
 8000db4:	d354      	bcc.n	8000e60 <__udivmoddi4+0x298>
 8000db6:	d051      	beq.n	8000e5c <__udivmoddi4+0x294>
 8000db8:	2e00      	cmp	r6, #0
 8000dba:	d069      	beq.n	8000e90 <__udivmoddi4+0x2c8>
 8000dbc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dc4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dc8:	40fd      	lsrs	r5, r7
 8000dca:	40fc      	lsrs	r4, r7
 8000dcc:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd0:	e9c6 5400 	strd	r5, r4, [r6]
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	e747      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000dd8:	f1c2 0320 	rsb	r3, r2, #32
 8000ddc:	fa20 f703 	lsr.w	r7, r0, r3
 8000de0:	4095      	lsls	r5, r2
 8000de2:	fa01 f002 	lsl.w	r0, r1, r2
 8000de6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dee:	4338      	orrs	r0, r7
 8000df0:	0c01      	lsrs	r1, r0, #16
 8000df2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000df6:	fa1f f885 	uxth.w	r8, r5
 8000dfa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e02:	fb07 f308 	mul.w	r3, r7, r8
 8000e06:	428b      	cmp	r3, r1
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x256>
 8000e0e:	1869      	adds	r1, r5, r1
 8000e10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e14:	d22f      	bcs.n	8000e76 <__udivmoddi4+0x2ae>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d92d      	bls.n	8000e76 <__udivmoddi4+0x2ae>
 8000e1a:	3f02      	subs	r7, #2
 8000e1c:	4429      	add	r1, r5
 8000e1e:	1acb      	subs	r3, r1, r3
 8000e20:	b281      	uxth	r1, r0
 8000e22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2e:	fb00 f308 	mul.w	r3, r0, r8
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x27e>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e3c:	d217      	bcs.n	8000e6e <__udivmoddi4+0x2a6>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d915      	bls.n	8000e6e <__udivmoddi4+0x2a6>
 8000e42:	3802      	subs	r0, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1ac9      	subs	r1, r1, r3
 8000e48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e4c:	e73b      	b.n	8000cc6 <__udivmoddi4+0xfe>
 8000e4e:	4637      	mov	r7, r6
 8000e50:	4630      	mov	r0, r6
 8000e52:	e709      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e54:	4607      	mov	r7, r0
 8000e56:	e6e7      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e58:	4618      	mov	r0, r3
 8000e5a:	e6fb      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e5c:	4541      	cmp	r1, r8
 8000e5e:	d2ab      	bcs.n	8000db8 <__udivmoddi4+0x1f0>
 8000e60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e64:	eb69 020e 	sbc.w	r2, r9, lr
 8000e68:	3801      	subs	r0, #1
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	e7a4      	b.n	8000db8 <__udivmoddi4+0x1f0>
 8000e6e:	4660      	mov	r0, ip
 8000e70:	e7e9      	b.n	8000e46 <__udivmoddi4+0x27e>
 8000e72:	4618      	mov	r0, r3
 8000e74:	e795      	b.n	8000da2 <__udivmoddi4+0x1da>
 8000e76:	4667      	mov	r7, ip
 8000e78:	e7d1      	b.n	8000e1e <__udivmoddi4+0x256>
 8000e7a:	4681      	mov	r9, r0
 8000e7c:	e77c      	b.n	8000d78 <__udivmoddi4+0x1b0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	442c      	add	r4, r5
 8000e82:	e747      	b.n	8000d14 <__udivmoddi4+0x14c>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	442b      	add	r3, r5
 8000e8a:	e72f      	b.n	8000cec <__udivmoddi4+0x124>
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	e708      	b.n	8000ca2 <__udivmoddi4+0xda>
 8000e90:	4637      	mov	r7, r6
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0xa0>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <PRINTF>:
#include "usart.h"
#include "debug.h"



void PRINTF(char str[50]){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b090      	sub	sp, #64	; 0x40
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f003 fae2 	bl	8004470 <siprintf>
 8000eac:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	f107 0108 	add.w	r1, r7, #8
 8000eb6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <PRINTF+0x30>)
 8000ebc:	f002 fe47 	bl	8003b4e <HAL_UART_Transmit>
}
 8000ec0:	bf00      	nop
 8000ec2:	3740      	adds	r7, #64	; 0x40
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000140 	.word	0x20000140

08000ecc <PRINTF8>:


void PRINTF8(char str[50], uint8_t val){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b090      	sub	sp, #64	; 0x40
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str,val);
 8000ed8:	78fa      	ldrb	r2, [r7, #3]
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fac5 	bl	8004470 <siprintf>
 8000ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f107 0108 	add.w	r1, r7, #8
 8000ef0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <PRINTF8+0x38>)
 8000ef6:	f002 fe2a 	bl	8003b4e <HAL_UART_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3740      	adds	r7, #64	; 0x40
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000140 	.word	0x20000140

08000f08 <PRINTF32>:
  msg_len = sprintf(msg, str,val);
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
}


void PRINTF32(char str[50], uint32_t val){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str,val);
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	683a      	ldr	r2, [r7, #0]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 faa8 	bl	8004470 <siprintf>
 8000f20:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 8000f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	f107 0108 	add.w	r1, r7, #8
 8000f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <PRINTF32+0x34>)
 8000f30:	f002 fe0d 	bl	8003b4e <HAL_UART_Transmit>
}
 8000f34:	bf00      	nop
 8000f36:	3740      	adds	r7, #64	; 0x40
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000140 	.word	0x20000140

08000f40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_DMA_Init+0x3c>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	2010      	movs	r0, #16
 8000f68:	f000 ff65 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f6c:	2010      	movs	r0, #16
 8000f6e:	f000 ff7e 	bl	8001e6e <HAL_NVIC_EnableIRQ>

}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
 8000f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b52      	ldr	r3, [pc, #328]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a51      	ldr	r2, [pc, #324]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b4f      	ldr	r3, [pc, #316]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b4b      	ldr	r3, [pc, #300]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a4a      	ldr	r2, [pc, #296]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b44      	ldr	r3, [pc, #272]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000ff4:	f043 0302 	orr.w	r3, r3, #2
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b3a      	ldr	r3, [pc, #232]	; (80010e4 <MX_GPIO_Init+0x164>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4836      	ldr	r0, [pc, #216]	; (80010e8 <MX_GPIO_Init+0x168>)
 800100e:	f001 fbcb 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	4835      	ldr	r0, [pc, #212]	; (80010ec <MX_GPIO_Init+0x16c>)
 8001018:	f001 fbc6 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001022:	4833      	ldr	r0, [pc, #204]	; (80010f0 <MX_GPIO_Init+0x170>)
 8001024:	f001 fbc0 	bl	80027a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800102e:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <MX_GPIO_Init+0x174>)
 8001030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	482b      	ldr	r0, [pc, #172]	; (80010ec <MX_GPIO_Init+0x16c>)
 800103e:	f001 fa19 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4823      	ldr	r0, [pc, #140]	; (80010e8 <MX_GPIO_Init+0x168>)
 800105c:	f001 fa0a 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	481d      	ldr	r0, [pc, #116]	; (80010ec <MX_GPIO_Init+0x16c>)
 8001078:	f001 f9fc 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4816      	ldr	r0, [pc, #88]	; (80010f0 <MX_GPIO_Init+0x170>)
 8001096:	f001 f9ed 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	4810      	ldr	r0, [pc, #64]	; (80010f0 <MX_GPIO_Init+0x170>)
 80010b0:	f001 f9e0 	bl	8002474 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80010b4:	2338      	movs	r3, #56	; 0x38
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x168>)
 80010c8:	f001 f9d4 	bl	8002474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2028      	movs	r0, #40	; 0x28
 80010d2:	f000 feb0 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010d6:	2028      	movs	r0, #40	; 0x28
 80010d8:	f000 fec9 	bl	8001e6e <HAL_NVIC_EnableIRQ>

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020800 	.word	0x40020800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	10210000 	.word	0x10210000

080010f8 <read_GPIO>:
// ********************************************************




uint8_t read_GPIO(){
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)) return 1;
 80010fc:	2110      	movs	r1, #16
 80010fe:	4813      	ldr	r0, [pc, #76]	; (800114c <read_GPIO+0x54>)
 8001100:	f001 fb3a 	bl	8002778 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <read_GPIO+0x16>
 800110a:	2301      	movs	r3, #1
 800110c:	e01c      	b.n	8001148 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)) return 2;
 800110e:	2120      	movs	r1, #32
 8001110:	480e      	ldr	r0, [pc, #56]	; (800114c <read_GPIO+0x54>)
 8001112:	f001 fb31 	bl	8002778 <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <read_GPIO+0x28>
 800111c:	2302      	movs	r3, #2
 800111e:	e013      	b.n	8001148 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)) return 3;
 8001120:	2108      	movs	r1, #8
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <read_GPIO+0x54>)
 8001124:	f001 fb28 	bl	8002778 <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <read_GPIO+0x3a>
 800112e:	2303      	movs	r3, #3
 8001130:	e00a      	b.n	8001148 <read_GPIO+0x50>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) return 4;
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <read_GPIO+0x58>)
 8001138:	f001 fb1e 	bl	8002778 <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <read_GPIO+0x4e>
 8001142:	2304      	movs	r3, #4
 8001144:	e000      	b.n	8001148 <read_GPIO+0x50>

	return 99;
 8001146:	2363      	movs	r3, #99	; 0x63
}
 8001148:	4618      	mov	r0, r3
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020400 	.word	0x40020400
 8001150:	40020000 	.word	0x40020000

08001154 <write_GPIO>:

void write_GPIO(uint8_t riga){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 800115e:	2301      	movs	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 8001162:	2301      	movs	r3, #1
 8001164:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 8001166:	2301      	movs	r3, #1
 8001168:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 800116a:	2301      	movs	r3, #1
 800116c:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	73fb      	strb	r3, [r7, #15]
 8001178:	e010      	b.n	800119c <write_GPIO+0x48>
	}else if(riga==2){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d102      	bne.n	8001186 <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	73bb      	strb	r3, [r7, #14]
 8001184:	e00a      	b.n	800119c <write_GPIO+0x48>
	}else if(riga==3){
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d102      	bne.n	8001192 <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	737b      	strb	r3, [r7, #13]
 8001190:	e004      	b.n	800119c <write_GPIO+0x48>
	}else if(riga==4){
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b04      	cmp	r3, #4
 8001196:	d101      	bne.n	800119c <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, state_row1);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	461a      	mov	r2, r3
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <write_GPIO+0x84>)
 80011a4:	f001 fb00 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row2);
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	461a      	mov	r2, r3
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <write_GPIO+0x88>)
 80011b0:	f001 fafa 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	461a      	mov	r2, r3
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <write_GPIO+0x8c>)
 80011be:	f001 faf3 	bl	80027a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 80011c2:	7b3b      	ldrb	r3, [r7, #12]
 80011c4:	461a      	mov	r2, r3
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4803      	ldr	r0, [pc, #12]	; (80011d8 <write_GPIO+0x84>)
 80011cc:	f001 faec 	bl	80027a8 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020400 	.word	0x40020400
 80011dc:	40020800 	.word	0x40020800
 80011e0:	40020000 	.word	0x40020000

080011e4 <decode_key_v2>:


uint8_t decode_key_v2(uint8_t row, uint8_t col){
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d85f      	bhi.n	80012bc <decode_key_v2+0xd8>
 80011fc:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <decode_key_v2+0x20>)
 80011fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001202:	bf00      	nop
 8001204:	08001215 	.word	0x08001215
 8001208:	0800123f 	.word	0x0800123f
 800120c:	08001269 	.word	0x08001269
 8001210:	08001293 	.word	0x08001293
		case(1):
			if (col==1) key=1;
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d101      	bne.n	800121e <decode_key_v2+0x3a>
 800121a:	2301      	movs	r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	2b02      	cmp	r3, #2
 8001222:	d101      	bne.n	8001228 <decode_key_v2+0x44>
 8001224:	2302      	movs	r3, #2
 8001226:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	2b03      	cmp	r3, #3
 800122c:	d101      	bne.n	8001232 <decode_key_v2+0x4e>
 800122e:	2303      	movs	r3, #3
 8001230:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 8001232:	79bb      	ldrb	r3, [r7, #6]
 8001234:	2b04      	cmp	r3, #4
 8001236:	d144      	bne.n	80012c2 <decode_key_v2+0xde>
 8001238:	230a      	movs	r3, #10
 800123a:	73fb      	strb	r3, [r7, #15]
			break;
 800123c:	e041      	b.n	80012c2 <decode_key_v2+0xde>
		case(2):
			if (col==1) key=4;
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <decode_key_v2+0x64>
 8001244:	2304      	movs	r3, #4
 8001246:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 8001248:	79bb      	ldrb	r3, [r7, #6]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d101      	bne.n	8001252 <decode_key_v2+0x6e>
 800124e:	2305      	movs	r3, #5
 8001250:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 8001252:	79bb      	ldrb	r3, [r7, #6]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d101      	bne.n	800125c <decode_key_v2+0x78>
 8001258:	2306      	movs	r3, #6
 800125a:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d131      	bne.n	80012c6 <decode_key_v2+0xe2>
 8001262:	2314      	movs	r3, #20
 8001264:	73fb      	strb	r3, [r7, #15]
			break;
 8001266:	e02e      	b.n	80012c6 <decode_key_v2+0xe2>
		case(3):
			if (col==1) key=7;
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <decode_key_v2+0x8e>
 800126e:	2307      	movs	r3, #7
 8001270:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d101      	bne.n	800127c <decode_key_v2+0x98>
 8001278:	2308      	movs	r3, #8
 800127a:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b03      	cmp	r3, #3
 8001280:	d101      	bne.n	8001286 <decode_key_v2+0xa2>
 8001282:	2309      	movs	r3, #9
 8001284:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d11e      	bne.n	80012ca <decode_key_v2+0xe6>
 800128c:	231e      	movs	r3, #30
 800128e:	73fb      	strb	r3, [r7, #15]
			break;
 8001290:	e01b      	b.n	80012ca <decode_key_v2+0xe6>
		case(4):
			if (col==1) key=40;
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <decode_key_v2+0xb8>
 8001298:	2328      	movs	r3, #40	; 0x28
 800129a:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d101      	bne.n	80012a6 <decode_key_v2+0xc2>
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d101      	bne.n	80012b0 <decode_key_v2+0xcc>
 80012ac:	2332      	movs	r3, #50	; 0x32
 80012ae:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d10b      	bne.n	80012ce <decode_key_v2+0xea>
 80012b6:	233c      	movs	r3, #60	; 0x3c
 80012b8:	73fb      	strb	r3, [r7, #15]
			break;
 80012ba:	e008      	b.n	80012ce <decode_key_v2+0xea>
		default:
			key=99;
 80012bc:	2363      	movs	r3, #99	; 0x63
 80012be:	73fb      	strb	r3, [r7, #15]
			break;
 80012c0:	e006      	b.n	80012d0 <decode_key_v2+0xec>
			break;
 80012c2:	bf00      	nop
 80012c4:	e004      	b.n	80012d0 <decode_key_v2+0xec>
			break;
 80012c6:	bf00      	nop
 80012c8:	e002      	b.n	80012d0 <decode_key_v2+0xec>
			break;
 80012ca:	bf00      	nop
 80012cc:	e000      	b.n	80012d0 <decode_key_v2+0xec>
			break;
 80012ce:	bf00      	nop
	}

	return key;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <read_key_v2>:


// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key_v2(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 22 is the no key number
 80012e6:	2363      	movs	r3, #99	; 0x63
 80012e8:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 80012ea:	2363      	movs	r3, #99	; 0x63
 80012ec:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);						// write 4 status of row GPIO (enable GPIO of row1)
 80012ee:	2001      	movs	r0, #1
 80012f0:	f7ff ff30 	bl	8001154 <write_GPIO>
		col_read = read_GPIO();				// read 4 status of col GPIO
 80012f4:	f7ff ff00 	bl	80010f8 <read_GPIO>
 80012f8:	4603      	mov	r3, r0
 80012fa:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) key = decode_key_v2(1, col_read);		// decode which button has been pressed
 80012fc:	79bb      	ldrb	r3, [r7, #6]
 80012fe:	2b63      	cmp	r3, #99	; 0x63
 8001300:	d006      	beq.n	8001310 <read_key_v2+0x30>
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	4619      	mov	r1, r3
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ff6c 	bl	80011e4 <decode_key_v2>
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
		if(key!=99) return key;
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d001      	beq.n	800131a <read_key_v2+0x3a>
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	e040      	b.n	800139c <read_key_v2+0xbc>

		// *** SECOND row
		write_GPIO(2);
 800131a:	2002      	movs	r0, #2
 800131c:	f7ff ff1a 	bl	8001154 <write_GPIO>
		col_read = read_GPIO();
 8001320:	f7ff feea 	bl	80010f8 <read_GPIO>
 8001324:	4603      	mov	r3, r0
 8001326:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) key = decode_key_v2(2, col_read);
 8001328:	79bb      	ldrb	r3, [r7, #6]
 800132a:	2b63      	cmp	r3, #99	; 0x63
 800132c:	d006      	beq.n	800133c <read_key_v2+0x5c>
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	4619      	mov	r1, r3
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff ff56 	bl	80011e4 <decode_key_v2>
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
		if(key!=99) return key;
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b63      	cmp	r3, #99	; 0x63
 8001340:	d001      	beq.n	8001346 <read_key_v2+0x66>
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	e02a      	b.n	800139c <read_key_v2+0xbc>

		// *** THIRD row
		write_GPIO(3);
 8001346:	2003      	movs	r0, #3
 8001348:	f7ff ff04 	bl	8001154 <write_GPIO>
		col_read = read_GPIO();
 800134c:	f7ff fed4 	bl	80010f8 <read_GPIO>
 8001350:	4603      	mov	r3, r0
 8001352:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) key = decode_key_v2(3, col_read);
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	2b63      	cmp	r3, #99	; 0x63
 8001358:	d006      	beq.n	8001368 <read_key_v2+0x88>
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	4619      	mov	r1, r3
 800135e:	2003      	movs	r0, #3
 8001360:	f7ff ff40 	bl	80011e4 <decode_key_v2>
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
		if(key!=99) return key;
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2b63      	cmp	r3, #99	; 0x63
 800136c:	d001      	beq.n	8001372 <read_key_v2+0x92>
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	e014      	b.n	800139c <read_key_v2+0xbc>

		// *** FORTH row
		write_GPIO(4);
 8001372:	2004      	movs	r0, #4
 8001374:	f7ff feee 	bl	8001154 <write_GPIO>
		col_read = read_GPIO();
 8001378:	f7ff febe 	bl	80010f8 <read_GPIO>
 800137c:	4603      	mov	r3, r0
 800137e:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) key = decode_key_v2(4, col_read);
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	2b63      	cmp	r3, #99	; 0x63
 8001384:	d006      	beq.n	8001394 <read_key_v2+0xb4>
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	4619      	mov	r1, r3
 800138a:	2004      	movs	r0, #4
 800138c:	f7ff ff2a 	bl	80011e4 <decode_key_v2>
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
		if(key!=99) return key;
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b63      	cmp	r3, #99	; 0x63
 8001398:	d0a9      	beq.n	80012ee <read_key_v2+0xe>
 800139a:	79fb      	ldrb	r3, [r7, #7]
	}

	return 99;
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0000      	movs	r0, r0
	...

080013a8 <keypad_getNumber_v2>:


uint32_t keypad_getNumber_v2(){
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013aa:	b0a1      	sub	sp, #132	; 0x84
 80013ac:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint8_t key;
	uint8_t i=0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

	char msg[100];
	int msg_len;

	PRINTF("\n\r The digits selected are: ");
 80013b8:	485f      	ldr	r0, [pc, #380]	; (8001538 <keypad_getNumber_v2+0x190>)
 80013ba:	f7ff fd6d 	bl	8000e98 <PRINTF>

	// until I press the ENTER button do:
	while(true){

		key = read_key_v2();		// returns the digit input
 80013be:	f7ff ff8f 	bl	80012e0 <read_key_v2>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

		if(key==99){
 80013c8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013cc:	2b63      	cmp	r3, #99	; 0x63
 80013ce:	d103      	bne.n	80013d8 <keypad_getNumber_v2+0x30>
			PRINTF("\n\r     Something went wrong");
 80013d0:	485a      	ldr	r0, [pc, #360]	; (800153c <keypad_getNumber_v2+0x194>)
 80013d2:	f7ff fd61 	bl	8000e98 <PRINTF>
 80013d6:	e05b      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key==10){			// A, exit insertion number
 80013d8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013dc:	2b0a      	cmp	r3, #10
 80013de:	d107      	bne.n	80013f0 <keypad_getNumber_v2+0x48>
			PRINTF("\n\r     End of input mode");
 80013e0:	4857      	ldr	r0, [pc, #348]	; (8001540 <keypad_getNumber_v2+0x198>)
 80013e2:	f7ff fd59 	bl	8000e98 <PRINTF>
			break;
 80013e6:	bf00      	nop

		HAL_Delay(1000);		// To avoid long press error
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 80013e8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80013ec:	677b      	str	r3, [r7, #116]	; 0x74
 80013ee:	e092      	b.n	8001516 <keypad_getNumber_v2+0x16e>
		}else if(key==20){		// B, nothing
 80013f0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80013f4:	2b14      	cmp	r3, #20
 80013f6:	d103      	bne.n	8001400 <keypad_getNumber_v2+0x58>
			PRINTF("B ");
 80013f8:	4852      	ldr	r0, [pc, #328]	; (8001544 <keypad_getNumber_v2+0x19c>)
 80013fa:	f7ff fd4d 	bl	8000e98 <PRINTF>
 80013fe:	e047      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key==30){		// C, nothing
 8001400:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001404:	2b1e      	cmp	r3, #30
 8001406:	d103      	bne.n	8001410 <keypad_getNumber_v2+0x68>
			PRINTF("C ");
 8001408:	484f      	ldr	r0, [pc, #316]	; (8001548 <keypad_getNumber_v2+0x1a0>)
 800140a:	f7ff fd45 	bl	8000e98 <PRINTF>
 800140e:	e03f      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key==40){		// *, nothing
 8001410:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001414:	2b28      	cmp	r3, #40	; 0x28
 8001416:	d103      	bne.n	8001420 <keypad_getNumber_v2+0x78>
			PRINTF("* ");
 8001418:	484c      	ldr	r0, [pc, #304]	; (800154c <keypad_getNumber_v2+0x1a4>)
 800141a:	f7ff fd3d 	bl	8000e98 <PRINTF>
 800141e:	e037      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key==50){		// #, nothing
 8001420:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001424:	2b32      	cmp	r3, #50	; 0x32
 8001426:	d103      	bne.n	8001430 <keypad_getNumber_v2+0x88>
			PRINTF("# ");
 8001428:	4849      	ldr	r0, [pc, #292]	; (8001550 <keypad_getNumber_v2+0x1a8>)
 800142a:	f7ff fd35 	bl	8000e98 <PRINTF>
 800142e:	e02f      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key==60){		// D, delete last digit
 8001430:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001434:	2b3c      	cmp	r3, #60	; 0x3c
 8001436:	d10e      	bne.n	8001456 <keypad_getNumber_v2+0xae>
			i=-1;
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			inputDigit[i] = 0;
 800143e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001442:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001446:	4413      	add	r3, r2
 8001448:	2200      	movs	r2, #0
 800144a:	f803 2c18 	strb.w	r2, [r3, #-24]
			PRINTF("DEL ");
 800144e:	4841      	ldr	r0, [pc, #260]	; (8001554 <keypad_getNumber_v2+0x1ac>)
 8001450:	f7ff fd22 	bl	8000e98 <PRINTF>
 8001454:	e01c      	b.n	8001490 <keypad_getNumber_v2+0xe8>
		}else if(key>=0 && key<=9){	// number keys
 8001456:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800145a:	2b09      	cmp	r3, #9
 800145c:	d818      	bhi.n	8001490 <keypad_getNumber_v2+0xe8>
			inputDigit[i] = key;
 800145e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001462:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001466:	4413      	add	r3, r2
 8001468:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 800146c:	f803 2c18 	strb.w	r2, [r3, #-24]
			PRINTF8("%d ", inputDigit[i]);
 8001470:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001474:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001478:	4413      	add	r3, r2
 800147a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800147e:	4619      	mov	r1, r3
 8001480:	4835      	ldr	r0, [pc, #212]	; (8001558 <keypad_getNumber_v2+0x1b0>)
 8001482:	f7ff fd23 	bl	8000ecc <PRINTF8>
			i+=1;
 8001486:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800148a:	3301      	adds	r3, #1
 800148c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		key=99;
 8001490:	2363      	movs	r3, #99	; 0x63
 8001492:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		HAL_Delay(1000);		// To avoid long press error
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f000 fbcf 	bl	8001c3c <HAL_Delay>
		key = read_key_v2();		// returns the digit input
 800149e:	e78e      	b.n	80013be <keypad_getNumber_v2+0x16>
		number += pow(10, j-1)*inputDigit[i-j];
 80014a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014a2:	3b01      	subs	r3, #1
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f83d 	bl	8000524 <__aeabi_i2d>
 80014aa:	4603      	mov	r3, r0
 80014ac:	460c      	mov	r4, r1
 80014ae:	ec44 3b11 	vmov	d1, r3, r4
 80014b2:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001530 <keypad_getNumber_v2+0x188>
 80014b6:	f003 fbe1 	bl	8004c7c <pow>
 80014ba:	ec56 5b10 	vmov	r5, r6, d0
 80014be:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80014c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80014ca:	4413      	add	r3, r2
 80014cc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f827 	bl	8000524 <__aeabi_i2d>
 80014d6:	4603      	mov	r3, r0
 80014d8:	460c      	mov	r4, r1
 80014da:	461a      	mov	r2, r3
 80014dc:	4623      	mov	r3, r4
 80014de:	4628      	mov	r0, r5
 80014e0:	4631      	mov	r1, r6
 80014e2:	f7ff f889 	bl	80005f8 <__aeabi_dmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	460c      	mov	r4, r1
 80014ea:	4625      	mov	r5, r4
 80014ec:	461c      	mov	r4, r3
 80014ee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80014f0:	f7ff f808 	bl	8000504 <__aeabi_ui2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7fe fec6 	bl	800028c <__adddf3>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f7ff fb26 	bl	8000b58 <__aeabi_d2uiz>
 800150c:	4603      	mov	r3, r0
 800150e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int j=i; j>0; j--){
 8001510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001512:	3b01      	subs	r3, #1
 8001514:	677b      	str	r3, [r7, #116]	; 0x74
 8001516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001518:	2b00      	cmp	r3, #0
 800151a:	dcc1      	bgt.n	80014a0 <keypad_getNumber_v2+0xf8>
	}
	PRINTF32("\n\r     Final number obtained is: %d", number);
 800151c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800151e:	480f      	ldr	r0, [pc, #60]	; (800155c <keypad_getNumber_v2+0x1b4>)
 8001520:	f7ff fcf2 	bl	8000f08 <PRINTF32>

	return number;
 8001524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8001526:	4618      	mov	r0, r3
 8001528:	3784      	adds	r7, #132	; 0x84
 800152a:	46bd      	mov	sp, r7
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	40240000 	.word	0x40240000
 8001538:	08005d48 	.word	0x08005d48
 800153c:	08005d94 	.word	0x08005d94
 8001540:	08005db0 	.word	0x08005db0
 8001544:	08005dcc 	.word	0x08005dcc
 8001548:	08005dd0 	.word	0x08005dd0
 800154c:	08005dd4 	.word	0x08005dd4
 8001550:	08005dd8 	.word	0x08005dd8
 8001554:	08005d68 	.word	0x08005d68
 8001558:	08005d70 	.word	0x08005d70
 800155c:	08005ddc 	.word	0x08005ddc

08001560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b0c0      	sub	sp, #256	; 0x100
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001566:	f000 faf7 	bl	8001b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156a:	f000 f819 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800156e:	f7ff fd07 	bl	8000f80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001572:	f7ff fce5 	bl	8000f40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001576:	f000 fa53 	bl	8001a20 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800157a:	f000 f953 	bl	8001824 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  struct ProblemInfo problem;
  uint32_t problemID = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(BLUE_BUTTON){
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <main+0x3c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0fb      	beq.n	8001584 <main+0x24>

		  problemID = keypad_getNumber_v2();
 800158c:	f7ff ff0c 	bl	80013a8 <keypad_getNumber_v2>
 8001590:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
		  //problem_genArray(problemID, &problem);

		  //WS2811_Send();

		  BLUE_BUTTON = false;
 8001594:	4b01      	ldr	r3, [pc, #4]	; (800159c <main+0x3c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	  if(BLUE_BUTTON){
 800159a:	e7f3      	b.n	8001584 <main+0x24>
 800159c:	20000090 	.word	0x20000090

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	; 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2230      	movs	r2, #48	; 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 ff56 	bl	8004460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <SystemClock_Config+0xcc>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	4a27      	ldr	r2, [pc, #156]	; (800166c <SystemClock_Config+0xcc>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	; 0x40
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <SystemClock_Config+0xcc>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b22      	ldr	r3, [pc, #136]	; (8001670 <SystemClock_Config+0xd0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ec:	4a20      	ldr	r2, [pc, #128]	; (8001670 <SystemClock_Config+0xd0>)
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001614:	2308      	movs	r3, #8
 8001616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001618:	2348      	movs	r3, #72	; 0x48
 800161a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800161c:	2302      	movs	r3, #2
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001620:	2307      	movs	r3, #7
 8001622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	4618      	mov	r0, r3
 800162a:	f001 f8ef 	bl	800280c <HAL_RCC_OscConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001634:	f000 f832 	bl	800169c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	230f      	movs	r3, #15
 800163a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163c:	2302      	movs	r3, #2
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001648:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2102      	movs	r1, #2
 8001654:	4618      	mov	r0, r3
 8001656:	f001 fb49 	bl	8002cec <HAL_RCC_ClockConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001660:	f000 f81c 	bl	800169c <Error_Handler>
  }
}
 8001664:	bf00      	nop
 8001666:	3750      	adds	r7, #80	; 0x50
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40007000 	.word	0x40007000

08001674 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001684:	d102      	bne.n	800168c <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <HAL_GPIO_EXTI_Callback+0x24>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
	}
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	20000090 	.word	0x20000090

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <Error_Handler+0x6>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_MspInit+0x5c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a13      	ldr	r2, [pc, #76]	; (8001700 <HAL_MspInit+0x5c>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_MspInit+0x5c>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	603b      	str	r3, [r7, #0]
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_MspInit+0x5c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_MspInit+0x5c>)
 80016d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_MspInit+0x5c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016e2:	2007      	movs	r0, #7
 80016e4:	f000 fb9c 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2051      	movs	r0, #81	; 0x51
 80016ee:	f000 fba2 	bl	8001e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80016f2:	2051      	movs	r0, #81	; 0x51
 80016f4:	f000 fbbb 	bl	8001e6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 fa54 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <DMA1_Stream5_IRQHandler+0x10>)
 800175e:	f000 fc4f 	bl	8002000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200000a0 	.word	0x200000a0

0800176c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001770:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001774:	f001 f832 	bl	80027dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f002 fe26 	bl	800440c <__errno>
 80017c0:	4602      	mov	r2, r0
 80017c2:	230c      	movs	r3, #12
 80017c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20018000 	.word	0x20018000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	20000094 	.word	0x20000094
 80017f4:	20000188 	.word	0x20000188

080017f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SystemInit+0x28>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <SystemInit+0x28>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <SystemInit+0x28>)
 800180e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001812:	609a      	str	r2, [r3, #8]
#endif
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	; 0x38
 8001828:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
 8001850:	615a      	str	r2, [r3, #20]
 8001852:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8001854:	4b2c      	ldr	r3, [pc, #176]	; (8001908 <MX_TIM2_Init+0xe4>)
 8001856:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <MX_TIM2_Init+0xe4>)
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <MX_TIM2_Init+0xe4>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <MX_TIM2_Init+0xe4>)
 800186a:	2259      	movs	r2, #89	; 0x59
 800186c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186e:	4b26      	ldr	r3, [pc, #152]	; (8001908 <MX_TIM2_Init+0xe4>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <MX_TIM2_Init+0xe4>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800187a:	4823      	ldr	r0, [pc, #140]	; (8001908 <MX_TIM2_Init+0xe4>)
 800187c:	f001 fc28 	bl	80030d0 <HAL_TIM_Base_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001886:	f7ff ff09 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001890:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001894:	4619      	mov	r1, r3
 8001896:	481c      	ldr	r0, [pc, #112]	; (8001908 <MX_TIM2_Init+0xe4>)
 8001898:	f001 fd40 	bl	800331c <HAL_TIM_ConfigClockSource>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80018a2:	f7ff fefb 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018a6:	4818      	ldr	r0, [pc, #96]	; (8001908 <MX_TIM2_Init+0xe4>)
 80018a8:	f001 fc3d 	bl	8003126 <HAL_TIM_PWM_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018b2:	f7ff fef3 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	4619      	mov	r1, r3
 80018c4:	4810      	ldr	r0, [pc, #64]	; (8001908 <MX_TIM2_Init+0xe4>)
 80018c6:	f002 f887 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80018d0:	f7ff fee4 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d4:	2360      	movs	r3, #96	; 0x60
 80018d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 67;
 80018d8:	2343      	movs	r3, #67	; 0x43
 80018da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018e4:	1d3b      	adds	r3, r7, #4
 80018e6:	2200      	movs	r2, #0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <MX_TIM2_Init+0xe4>)
 80018ec:	f001 fc50 	bl	8003190 <HAL_TIM_PWM_ConfigChannel>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80018f6:	f7ff fed1 	bl	800169c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <MX_TIM2_Init+0xe4>)
 80018fc:	f000 f858 	bl	80019b0 <HAL_TIM_MspPostInit>

}
 8001900:	bf00      	nop
 8001902:	3738      	adds	r7, #56	; 0x38
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000100 	.word	0x20000100

0800190c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d13d      	bne.n	800199a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_TIM_Base_MspInit+0x98>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 800193c:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <HAL_TIM_Base_MspInit+0xa0>)
 800193e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001942:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001946:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 800195e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001962:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001966:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800196a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800197e:	480a      	ldr	r0, [pc, #40]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001980:	f000 fa90 	bl	8001ea4 <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800198a:	f7ff fe87 	bl	800169c <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_TIM_Base_MspInit+0x9c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	200000a0 	.word	0x200000a0
 80019ac:	40026088 	.word	0x40026088

080019b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d11d      	bne.n	8001a0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_TIM_MspPostInit+0x68>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_TIM_MspPostInit+0x68>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_TIM_MspPostInit+0x68>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019ee:	2320      	movs	r3, #32
 80019f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f2:	2302      	movs	r3, #2
 80019f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4619      	mov	r1, r3
 8001a08:	4804      	ldr	r0, [pc, #16]	; (8001a1c <HAL_TIM_MspPostInit+0x6c>)
 8001a0a:	f000 fd33 	bl	8002474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3720      	adds	r7, #32
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000

08001a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001a24:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	; (8001a70 <MX_USART2_UART_Init+0x50>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a56:	4805      	ldr	r0, [pc, #20]	; (8001a6c <MX_USART2_UART_Init+0x4c>)
 8001a58:	f002 f82c 	bl	8003ab4 <HAL_UART_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a62:	f7ff fe1b 	bl	800169c <Error_Handler>
  }

}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000140 	.word	0x20000140
 8001a70:	40004400 	.word	0x40004400

08001a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	; (8001af8 <HAL_UART_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a10      	ldr	r2, [pc, #64]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_UART_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_UART_MspInit+0x8c>)
 8001aea:	f000 fcc3 	bl	8002474 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	; 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020000 	.word	0x40020000

08001b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b0a:	e003      	b.n	8001b14 <LoopCopyDataInit>

08001b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b12:	3104      	adds	r1, #4

08001b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b14:	480b      	ldr	r0, [pc, #44]	; (8001b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b16:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b1c:	d3f6      	bcc.n	8001b0c <CopyDataInit>
  ldr  r2, =_sbss
 8001b1e:	4a0b      	ldr	r2, [pc, #44]	; (8001b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b20:	e002      	b.n	8001b28 <LoopFillZerobss>

08001b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b24:	f842 3b04 	str.w	r3, [r2], #4

08001b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b2c:	d3f9      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b2e:	f7ff fe63 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b32:	f002 fc71 	bl	8004418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b36:	f7ff fd13 	bl	8001560 <main>
  bx  lr    
 8001b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b3c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001b40:	08005ea8 	.word	0x08005ea8
  ldr  r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b48:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001b4c:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001b50:	20000188 	.word	0x20000188

08001b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b54:	e7fe      	b.n	8001b54 <ADC_IRQHandler>
	...

08001b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_Init+0x40>)
 8001b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <HAL_Init+0x40>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <HAL_Init+0x40>)
 8001b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	2003      	movs	r0, #3
 8001b82:	f000 f94d 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f000 f808 	bl	8001b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8c:	f7ff fd8a 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023c00 	.word	0x40023c00

08001b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_InitTick+0x54>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_InitTick+0x58>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f965 	bl	8001e8a <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 f92d 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_InitTick+0x5c>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	20000004 	.word	0x20000004

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000008 	.word	0x20000008
 8001c20:	20000180 	.word	0x20000180

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000180 	.word	0x20000180

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <HAL_Delay+0x40>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000008 	.word	0x20000008

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e48:	f7ff ff3e 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	6978      	ldr	r0, [r7, #20]
 8001e54:	f7ff ff8e 	bl	8001d74 <NVIC_EncodePriority>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff5d 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff31 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ffa2 	bl	8001ddc <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eb0:	f7ff feb8 	bl	8001c24 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e099      	b.n	8001ff4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	e00f      	b.n	8001f02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ee2:	f7ff fe9f 	bl	8001c24 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d908      	bls.n	8001f02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2203      	movs	r2, #3
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e078      	b.n	8001ff4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1e8      	bne.n	8001ee2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_DMA_Init+0x158>)
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d107      	bne.n	8001f6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	4313      	orrs	r3, r2
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d117      	bne.n	8001fc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f9e9 	bl	8002380 <DMA_CheckFifoParam>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e016      	b.n	8001ff4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f9a0 	bl	8002314 <DMA_CalcBaseAndBitshift>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fdc:	223f      	movs	r2, #63	; 0x3f
 8001fde:	409a      	lsls	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	f010803f 	.word	0xf010803f

08002000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800200c:	4b92      	ldr	r3, [pc, #584]	; (8002258 <HAL_DMA_IRQHandler+0x258>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a92      	ldr	r2, [pc, #584]	; (800225c <HAL_DMA_IRQHandler+0x25c>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202a:	2208      	movs	r2, #8
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01a      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0204 	bic.w	r2, r2, #4
 8002052:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002058:	2208      	movs	r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002064:	f043 0201 	orr.w	r2, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d012      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00b      	beq.n	80020a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208e:	2201      	movs	r2, #1
 8002090:	409a      	lsls	r2, r3
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f043 0202 	orr.w	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2204      	movs	r2, #4
 80020a8:	409a      	lsls	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d012      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c4:	2204      	movs	r2, #4
 80020c6:	409a      	lsls	r2, r3
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	f043 0204 	orr.w	r2, r3, #4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	2210      	movs	r2, #16
 80020de:	409a      	lsls	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d043      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d03c      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fa:	2210      	movs	r2, #16
 80020fc:	409a      	lsls	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d018      	beq.n	8002142 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	4798      	blx	r3
 800212e:	e01f      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01b      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	4798      	blx	r3
 8002140:	e016      	b.n	8002170 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0208 	bic.w	r2, r2, #8
 800215e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2220      	movs	r2, #32
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 808e 	beq.w	800229e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 8086 	beq.w	800229e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2220      	movs	r2, #32
 8002198:	409a      	lsls	r2, r3
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d136      	bne.n	8002218 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_IRQHandler+0x1da>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	223f      	movs	r2, #63	; 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800220a:	2b00      	cmp	r3, #0
 800220c:	d07d      	beq.n	800230a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	4798      	blx	r3
        }
        return;
 8002216:	e078      	b.n	800230a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01c      	beq.n	8002260 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d108      	bne.n	8002246 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002238:	2b00      	cmp	r3, #0
 800223a:	d030      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e02b      	b.n	800229e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d027      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4798      	blx	r3
 8002256:	e022      	b.n	800229e <HAL_DMA_IRQHandler+0x29e>
 8002258:	20000000 	.word	0x20000000
 800225c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0210 	bic.w	r2, r2, #16
 800227c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d032      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d022      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2205      	movs	r2, #5
 80022b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	3301      	adds	r3, #1
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d307      	bcc.n	80022e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f2      	bne.n	80022ca <HAL_DMA_IRQHandler+0x2ca>
 80022e4:	e000      	b.n	80022e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80022e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
 8002308:	e000      	b.n	800230c <HAL_DMA_IRQHandler+0x30c>
        return;
 800230a:	bf00      	nop
    }
  }
}
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop

08002314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	3b10      	subs	r3, #16
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <DMA_CalcBaseAndBitshift+0x64>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <DMA_CalcBaseAndBitshift+0x68>)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	461a      	mov	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d909      	bls.n	8002356 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	1d1a      	adds	r2, r3, #4
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	659a      	str	r2, [r3, #88]	; 0x58
 8002354:	e007      	b.n	8002366 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800235e:	f023 0303 	bic.w	r3, r3, #3
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	aaaaaaab 	.word	0xaaaaaaab
 800237c:	08005e18 	.word	0x08005e18

08002380 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002390:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d11f      	bne.n	80023da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d855      	bhi.n	800244c <DMA_CheckFifoParam+0xcc>
 80023a0:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <DMA_CheckFifoParam+0x28>)
 80023a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a6:	bf00      	nop
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023cb 	.word	0x080023cb
 80023b0:	080023b9 	.word	0x080023b9
 80023b4:	0800244d 	.word	0x0800244d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d045      	beq.n	8002450 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c8:	e042      	b.n	8002450 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023d2:	d13f      	bne.n	8002454 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023d8:	e03c      	b.n	8002454 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e2:	d121      	bne.n	8002428 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d836      	bhi.n	8002458 <DMA_CheckFifoParam+0xd8>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <DMA_CheckFifoParam+0x70>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002407 	.word	0x08002407
 80023f8:	08002401 	.word	0x08002401
 80023fc:	08002419 	.word	0x08002419
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
      break;
 8002404:	e02f      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d024      	beq.n	800245c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002416:	e021      	b.n	800245c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002420:	d11e      	bne.n	8002460 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002426:	e01b      	b.n	8002460 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d902      	bls.n	8002434 <DMA_CheckFifoParam+0xb4>
 800242e:	2b03      	cmp	r3, #3
 8002430:	d003      	beq.n	800243a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002432:	e018      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e015      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00e      	beq.n	8002464 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      break;
 800244a:	e00b      	b.n	8002464 <DMA_CheckFifoParam+0xe4>
      break;
 800244c:	bf00      	nop
 800244e:	e00a      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;
 8002450:	bf00      	nop
 8002452:	e008      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;
 8002454:	bf00      	nop
 8002456:	e006      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;
 8002458:	bf00      	nop
 800245a:	e004      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;
 800245c:	bf00      	nop
 800245e:	e002      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;   
 8002460:	bf00      	nop
 8002462:	e000      	b.n	8002466 <DMA_CheckFifoParam+0xe6>
      break;
 8002464:	bf00      	nop
    }
  } 
  
  return status; 
 8002466:	7bfb      	ldrb	r3, [r7, #15]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002474:	b480      	push	{r7}
 8002476:	b089      	sub	sp, #36	; 0x24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	e159      	b.n	8002744 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	f040 8148 	bne.w	800273e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00b      	beq.n	80024ce <HAL_GPIO_Init+0x5a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024c2:	2b11      	cmp	r3, #17
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2203      	movs	r2, #3
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0xfc>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b12      	cmp	r3, #18
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	69b9      	ldr	r1, [r7, #24]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a2 	beq.w	800273e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_GPIO_Init+0x2e4>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	4a55      	ldr	r2, [pc, #340]	; (8002758 <HAL_GPIO_Init+0x2e4>)
 8002604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002608:	6453      	str	r3, [r2, #68]	; 0x44
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_GPIO_Init+0x2e4>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002616:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_GPIO_Init+0x2e8>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a48      	ldr	r2, [pc, #288]	; (8002760 <HAL_GPIO_Init+0x2ec>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d019      	beq.n	8002676 <HAL_GPIO_Init+0x202>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_GPIO_Init+0x2f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_GPIO_Init+0x1fe>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <HAL_GPIO_Init+0x2f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00d      	beq.n	800266e <HAL_GPIO_Init+0x1fa>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a45      	ldr	r2, [pc, #276]	; (800276c <HAL_GPIO_Init+0x2f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x1f6>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a44      	ldr	r2, [pc, #272]	; (8002770 <HAL_GPIO_Init+0x2fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_GPIO_Init+0x1f2>
 8002662:	2304      	movs	r3, #4
 8002664:	e008      	b.n	8002678 <HAL_GPIO_Init+0x204>
 8002666:	2307      	movs	r3, #7
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x204>
 800266a:	2303      	movs	r3, #3
 800266c:	e004      	b.n	8002678 <HAL_GPIO_Init+0x204>
 800266e:	2302      	movs	r3, #2
 8002670:	e002      	b.n	8002678 <HAL_GPIO_Init+0x204>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_GPIO_Init+0x204>
 8002676:	2300      	movs	r3, #0
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	f002 0203 	and.w	r2, r2, #3
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4093      	lsls	r3, r2
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002688:	4934      	ldr	r1, [pc, #208]	; (800275c <HAL_GPIO_Init+0x2e8>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	089b      	lsrs	r3, r3, #2
 800268e:	3302      	adds	r3, #2
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002696:	4b37      	ldr	r3, [pc, #220]	; (8002774 <HAL_GPIO_Init+0x300>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ba:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_GPIO_Init+0x300>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026c0:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_GPIO_Init+0x300>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <HAL_GPIO_Init+0x300>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ea:	4b22      	ldr	r3, [pc, #136]	; (8002774 <HAL_GPIO_Init+0x300>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4013      	ands	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800270e:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_GPIO_Init+0x300>)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_GPIO_Init+0x300>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002738:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_GPIO_Init+0x300>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3301      	adds	r3, #1
 8002742:	61fb      	str	r3, [r7, #28]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b0f      	cmp	r3, #15
 8002748:	f67f aea2 	bls.w	8002490 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800274c:	bf00      	nop
 800274e:	3724      	adds	r7, #36	; 0x24
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40023800 	.word	0x40023800
 800275c:	40013800 	.word	0x40013800
 8002760:	40020000 	.word	0x40020000
 8002764:	40020400 	.word	0x40020400
 8002768:	40020800 	.word	0x40020800
 800276c:	40020c00 	.word	0x40020c00
 8002770:	40021000 	.word	0x40021000
 8002774:	40013c00 	.word	0x40013c00

08002778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	887b      	ldrh	r3, [r7, #2]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002790:	2301      	movs	r3, #1
 8002792:	73fb      	strb	r3, [r7, #15]
 8002794:	e001      	b.n	800279a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	807b      	strh	r3, [r7, #2]
 80027b4:	4613      	mov	r3, r2
 80027b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b8:	787b      	ldrb	r3, [r7, #1]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027be:	887a      	ldrh	r2, [r7, #2]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027c4:	e003      	b.n	80027ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027c6:	887b      	ldrh	r3, [r7, #2]
 80027c8:	041a      	lsls	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
	...

080027dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027e6:	4b08      	ldr	r3, [pc, #32]	; (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4013      	ands	r3, r2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d006      	beq.n	8002800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fe ff3a 	bl	8001674 <HAL_GPIO_EXTI_Callback>
  }
}
 8002800:	bf00      	nop
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40013c00 	.word	0x40013c00

0800280c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e25b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d075      	beq.n	8002916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800282a:	4ba3      	ldr	r3, [pc, #652]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b04      	cmp	r3, #4
 8002834:	d00c      	beq.n	8002850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002836:	4ba0      	ldr	r3, [pc, #640]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800283e:	2b08      	cmp	r3, #8
 8002840:	d112      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002842:	4b9d      	ldr	r3, [pc, #628]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800284e:	d10b      	bne.n	8002868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002850:	4b99      	ldr	r3, [pc, #612]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d05b      	beq.n	8002914 <HAL_RCC_OscConfig+0x108>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d157      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e236      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b91      	ldr	r3, [pc, #580]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a90      	ldr	r2, [pc, #576]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e01d      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x98>
 800288a:	4b8b      	ldr	r3, [pc, #556]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a8a      	ldr	r2, [pc, #552]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	4b88      	ldr	r3, [pc, #544]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a87      	ldr	r2, [pc, #540]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0xb0>
 80028a4:	4b84      	ldr	r3, [pc, #528]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a83      	ldr	r2, [pc, #524]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b81      	ldr	r3, [pc, #516]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a80      	ldr	r2, [pc, #512]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff f9ae 	bl	8001c24 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff f9aa 	bl	8001c24 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1fb      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0xc0>
 80028ea:	e014      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ec:	f7ff f99a 	bl	8001c24 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028f4:	f7ff f996 	bl	8001c24 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b64      	cmp	r3, #100	; 0x64
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e1e7      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	4b6c      	ldr	r3, [pc, #432]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f0      	bne.n	80028f4 <HAL_RCC_OscConfig+0xe8>
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d063      	beq.n	80029ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00b      	beq.n	8002946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800292e:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002936:	2b08      	cmp	r3, #8
 8002938:	d11c      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800293a:	4b5f      	ldr	r3, [pc, #380]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d116      	bne.n	8002974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002946:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d001      	beq.n	800295e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e1bb      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295e:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	4952      	ldr	r1, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	e03a      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d020      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_OscConfig+0x2b0>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7ff f94f 	bl	8001c24 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800298a:	f7ff f94b 	bl	8001c24 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e19c      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4940      	ldr	r1, [pc, #256]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	600b      	str	r3, [r1, #0]
 80029bc:	e015      	b.n	80029ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <HAL_RCC_OscConfig+0x2b0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7ff f92e 	bl	8001c24 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029cc:	f7ff f92a 	bl	8001c24 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e17b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d030      	beq.n	8002a58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fe:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <HAL_RCC_OscConfig+0x2b4>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a04:	f7ff f90e 	bl	8001c24 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0c:	f7ff f90a 	bl	8001c24 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e15b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x200>
 8002a2a:	e015      	b.n	8002a58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_OscConfig+0x2b4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a32:	f7ff f8f7 	bl	8001c24 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7ff f8f3 	bl	8001c24 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e144      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	4b1a      	ldr	r3, [pc, #104]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f0      	bne.n	8002a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80a0 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10f      	bne.n	8002a96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a92:	2301      	movs	r3, #1
 8002a94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x2b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d121      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <HAL_RCC_OscConfig+0x2b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <HAL_RCC_OscConfig+0x2b8>)
 8002aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aae:	f7ff f8b9 	bl	8001c24 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab4:	e011      	b.n	8002ada <HAL_RCC_OscConfig+0x2ce>
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470000 	.word	0x42470000
 8002ac0:	42470e80 	.word	0x42470e80
 8002ac4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac8:	f7ff f8ac 	bl	8001c24 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0fd      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_RCC_OscConfig+0x4d4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d106      	bne.n	8002afc <HAL_RCC_OscConfig+0x2f0>
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a7c      	ldr	r2, [pc, #496]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x32a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x312>
 8002b04:	4b77      	ldr	r3, [pc, #476]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a76      	ldr	r2, [pc, #472]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b74      	ldr	r3, [pc, #464]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a73      	ldr	r2, [pc, #460]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x32a>
 8002b1e:	4b71      	ldr	r3, [pc, #452]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a70      	ldr	r2, [pc, #448]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b6e      	ldr	r3, [pc, #440]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a6d      	ldr	r2, [pc, #436]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f871 	bl	8001c24 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7ff f86d 	bl	8001c24 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0bc      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <HAL_RCC_OscConfig+0x33a>
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f85b 	bl	8001c24 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7ff f857 	bl	8001c24 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0a6      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a51      	ldr	r2, [pc, #324]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8092 	beq.w	8002cd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb0:	4b4c      	ldr	r3, [pc, #304]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d05c      	beq.n	8002c76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d141      	bne.n	8002c48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x4dc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bca:	f7ff f82b 	bl	8001c24 <HAL_GetTick>
 8002bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd2:	f7ff f827 	bl	8001c24 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e078      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be4:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f0      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69da      	ldr	r2, [r3, #28]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	019b      	lsls	r3, r3, #6
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	061b      	lsls	r3, r3, #24
 8002c14:	4933      	ldr	r1, [pc, #204]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_OscConfig+0x4dc>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff f800 	bl	8001c24 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7fe fffc 	bl	8001c24 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04d      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x41c>
 8002c46:	e045      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x4dc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4e:	f7fe ffe9 	bl	8001c24 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fe ffe5 	bl	8001c24 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e036      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x44a>
 8002c74:	e02e      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e029      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c82:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <HAL_RCC_OscConfig+0x4d8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69db      	ldr	r3, [r3, #28]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d11c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d115      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002caa:	4013      	ands	r3, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	42470060 	.word	0x42470060

08002cec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cc      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d00:	4b68      	ldr	r3, [pc, #416]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d90c      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 030f 	and.w	r3, r3, #15
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d044      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d119      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dba:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e067      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dca:	4b37      	ldr	r3, [pc, #220]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f023 0203 	bic.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4934      	ldr	r1, [pc, #208]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe ff22 	bl	8001c24 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	e00a      	b.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe ff1e 	bl	8001c24 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e04f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 020c 	and.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d1eb      	bne.n	8002de4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d20c      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4601      	mov	r1, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1c0>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe fe82 	bl	8001b9c <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40023c00 	.word	0x40023c00
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	08005e00 	.word	0x08005e00
 8002eb0:	20000000 	.word	0x20000000
 8002eb4:	20000004 	.word	0x20000004

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ece:	4b63      	ldr	r3, [pc, #396]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d007      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x32>
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x38>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f040 80b4 	bne.w	800304c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ee6:	60bb      	str	r3, [r7, #8]
       break;
 8002ee8:	e0b3      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eea:	4b5e      	ldr	r3, [pc, #376]	; (8003064 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002eec:	60bb      	str	r3, [r7, #8]
      break;
 8002eee:	e0b0      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef0:	4b5a      	ldr	r3, [pc, #360]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04a      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f06:	4b55      	ldr	r3, [pc, #340]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	099b      	lsrs	r3, r3, #6
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	ea03 0501 	and.w	r5, r3, r1
 8002f1c:	ea04 0602 	and.w	r6, r4, r2
 8002f20:	4629      	mov	r1, r5
 8002f22:	4632      	mov	r2, r6
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	0154      	lsls	r4, r2, #5
 8002f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f32:	014b      	lsls	r3, r1, #5
 8002f34:	4619      	mov	r1, r3
 8002f36:	4622      	mov	r2, r4
 8002f38:	1b49      	subs	r1, r1, r5
 8002f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	f04f 0400 	mov.w	r4, #0
 8002f46:	0194      	lsls	r4, r2, #6
 8002f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f4c:	018b      	lsls	r3, r1, #6
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	eb64 0402 	sbc.w	r4, r4, r2
 8002f54:	f04f 0100 	mov.w	r1, #0
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	00e2      	lsls	r2, r4, #3
 8002f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f62:	00d9      	lsls	r1, r3, #3
 8002f64:	460b      	mov	r3, r1
 8002f66:	4614      	mov	r4, r2
 8002f68:	195b      	adds	r3, r3, r5
 8002f6a:	eb44 0406 	adc.w	r4, r4, r6
 8002f6e:	f04f 0100 	mov.w	r1, #0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	0262      	lsls	r2, r4, #9
 8002f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f7c:	0259      	lsls	r1, r3, #9
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4614      	mov	r4, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	4621      	mov	r1, r4
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f04f 0400 	mov.w	r4, #0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4623      	mov	r3, r4
 8002f90:	f7fd fe02 	bl	8000b98 <__aeabi_uldivmod>
 8002f94:	4603      	mov	r3, r0
 8002f96:	460c      	mov	r4, r1
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e049      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	f04f 0400 	mov.w	r4, #0
 8002fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	ea03 0501 	and.w	r5, r3, r1
 8002fb2:	ea04 0602 	and.w	r6, r4, r2
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	4632      	mov	r2, r6
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	f04f 0400 	mov.w	r4, #0
 8002fc2:	0154      	lsls	r4, r2, #5
 8002fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fc8:	014b      	lsls	r3, r1, #5
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4622      	mov	r2, r4
 8002fce:	1b49      	subs	r1, r1, r5
 8002fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f04f 0400 	mov.w	r4, #0
 8002fdc:	0194      	lsls	r4, r2, #6
 8002fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002fe2:	018b      	lsls	r3, r1, #6
 8002fe4:	1a5b      	subs	r3, r3, r1
 8002fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8002fea:	f04f 0100 	mov.w	r1, #0
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	00e2      	lsls	r2, r4, #3
 8002ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ff8:	00d9      	lsls	r1, r3, #3
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	195b      	adds	r3, r3, r5
 8003000:	eb44 0406 	adc.w	r4, r4, r6
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	02a2      	lsls	r2, r4, #10
 800300e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003012:	0299      	lsls	r1, r3, #10
 8003014:	460b      	mov	r3, r1
 8003016:	4614      	mov	r4, r2
 8003018:	4618      	mov	r0, r3
 800301a:	4621      	mov	r1, r4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f04f 0400 	mov.w	r4, #0
 8003022:	461a      	mov	r2, r3
 8003024:	4623      	mov	r3, r4
 8003026:	f7fd fdb7 	bl	8000b98 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003030:	4b0a      	ldr	r3, [pc, #40]	; (800305c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	3301      	adds	r3, #1
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	fbb2 f3f3 	udiv	r3, r2, r3
 8003048:	60bb      	str	r3, [r7, #8]
      break;
 800304a:	e002      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800304e:	60bb      	str	r3, [r7, #8]
      break;
 8003050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003052:	68bb      	ldr	r3, [r7, #8]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000000 	.word	0x20000000

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4601      	mov	r1, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a9b      	lsrs	r3, r3, #10
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4a03      	ldr	r2, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003096:	5cd3      	ldrb	r3, [r2, r3]
 8003098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08005e10 	.word	0x08005e10

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff ffdc 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b0:	4601      	mov	r1, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0b5b      	lsrs	r3, r3, #13
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4a03      	ldr	r2, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08005e10 	.word	0x08005e10

080030d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e01d      	b.n	800311e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fc08 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 f9bc 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e01d      	b.n	8003174 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f815 	bl	800317c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3304      	adds	r3, #4
 8003162:	4619      	mov	r1, r3
 8003164:	4610      	mov	r0, r2
 8003166:	f000 f991 	bl	800348c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0b4      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x184>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b0c      	cmp	r3, #12
 80031be:	f200 809f 	bhi.w	8003300 <HAL_TIM_PWM_ConfigChannel+0x170>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	08003301 	.word	0x08003301
 80031d0:	08003301 	.word	0x08003301
 80031d4:	08003301 	.word	0x08003301
 80031d8:	0800323d 	.word	0x0800323d
 80031dc:	08003301 	.word	0x08003301
 80031e0:	08003301 	.word	0x08003301
 80031e4:	08003301 	.word	0x08003301
 80031e8:	0800327f 	.word	0x0800327f
 80031ec:	08003301 	.word	0x08003301
 80031f0:	08003301 	.word	0x08003301
 80031f4:	08003301 	.word	0x08003301
 80031f8:	080032bf 	.word	0x080032bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	4618      	mov	r0, r3
 8003204:	f000 f9c2 	bl	800358c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0208 	orr.w	r2, r2, #8
 8003216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0204 	bic.w	r2, r2, #4
 8003226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6999      	ldr	r1, [r3, #24]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	619a      	str	r2, [r3, #24]
      break;
 800323a:	e062      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fa08 	bl	8003658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	021a      	lsls	r2, r3, #8
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	619a      	str	r2, [r3, #24]
      break;
 800327c:	e041      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fa53 	bl	8003730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f042 0208 	orr.w	r2, r2, #8
 8003298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0204 	bic.w	r2, r2, #4
 80032a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69d9      	ldr	r1, [r3, #28]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	61da      	str	r2, [r3, #28]
      break;
 80032bc:	e021      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa9d 	bl	8003804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	61da      	str	r2, [r3, #28]
      break;
 80032fe:	e000      	b.n	8003302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003300:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_TIM_ConfigClockSource+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e0a6      	b.n	8003482 <HAL_TIM_ConfigClockSource+0x166>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800335a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b40      	cmp	r3, #64	; 0x40
 800336a:	d067      	beq.n	800343c <HAL_TIM_ConfigClockSource+0x120>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d80b      	bhi.n	8003388 <HAL_TIM_ConfigClockSource+0x6c>
 8003370:	2b10      	cmp	r3, #16
 8003372:	d073      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x140>
 8003374:	2b10      	cmp	r3, #16
 8003376:	d802      	bhi.n	800337e <HAL_TIM_ConfigClockSource+0x62>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d06f      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800337c:	e078      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800337e:	2b20      	cmp	r3, #32
 8003380:	d06c      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x140>
 8003382:	2b30      	cmp	r3, #48	; 0x30
 8003384:	d06a      	beq.n	800345c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003386:	e073      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003388:	2b70      	cmp	r3, #112	; 0x70
 800338a:	d00d      	beq.n	80033a8 <HAL_TIM_ConfigClockSource+0x8c>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	d804      	bhi.n	800339a <HAL_TIM_ConfigClockSource+0x7e>
 8003390:	2b50      	cmp	r3, #80	; 0x50
 8003392:	d033      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0xe0>
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	d041      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003398:	e06a      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d066      	beq.n	800346e <HAL_TIM_ConfigClockSource+0x152>
 80033a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a4:	d017      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80033a6:	e063      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f000 faee 	bl	8003998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	609a      	str	r2, [r3, #8]
      break;
 80033d4:	e04c      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6899      	ldr	r1, [r3, #8]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f000 fad7 	bl	8003998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033f8:	609a      	str	r2, [r3, #8]
      break;
 80033fa:	e039      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	461a      	mov	r2, r3
 800340a:	f000 fa4b 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2150      	movs	r1, #80	; 0x50
 8003414:	4618      	mov	r0, r3
 8003416:	f000 faa4 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 800341a:	e029      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6859      	ldr	r1, [r3, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	461a      	mov	r2, r3
 800342a:	f000 fa6a 	bl	8003902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2160      	movs	r1, #96	; 0x60
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fa94 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 800343a:	e019      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6859      	ldr	r1, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	461a      	mov	r2, r3
 800344a:	f000 fa2b 	bl	80038a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa84 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 800345a:	e009      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fa7b 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 800346c:	e000      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800346e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a34      	ldr	r2, [pc, #208]	; (8003570 <TIM_Base_SetConfig+0xe4>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d00f      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a31      	ldr	r2, [pc, #196]	; (8003574 <TIM_Base_SetConfig+0xe8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a30      	ldr	r2, [pc, #192]	; (8003578 <TIM_Base_SetConfig+0xec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x38>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a2f      	ldr	r2, [pc, #188]	; (800357c <TIM_Base_SetConfig+0xf0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a25      	ldr	r2, [pc, #148]	; (8003570 <TIM_Base_SetConfig+0xe4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01b      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d017      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a22      	ldr	r2, [pc, #136]	; (8003574 <TIM_Base_SetConfig+0xe8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a21      	ldr	r2, [pc, #132]	; (8003578 <TIM_Base_SetConfig+0xec>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <TIM_Base_SetConfig+0xf0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <TIM_Base_SetConfig+0xf4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1e      	ldr	r2, [pc, #120]	; (8003584 <TIM_Base_SetConfig+0xf8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1d      	ldr	r2, [pc, #116]	; (8003588 <TIM_Base_SetConfig+0xfc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <TIM_Base_SetConfig+0xe4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	615a      	str	r2, [r3, #20]
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	40010000 	.word	0x40010000
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40014000 	.word	0x40014000
 8003584:	40014400 	.word	0x40014400
 8003588:	40014800 	.word	0x40014800

0800358c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0303 	bic.w	r3, r3, #3
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f023 0302 	bic.w	r3, r3, #2
 80035d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1c      	ldr	r2, [pc, #112]	; (8003654 <TIM_OC1_SetConfig+0xc8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d10c      	bne.n	8003602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0308 	bic.w	r3, r3, #8
 80035ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a13      	ldr	r2, [pc, #76]	; (8003654 <TIM_OC1_SetConfig+0xc8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d111      	bne.n	800362e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	621a      	str	r2, [r3, #32]
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40010000 	.word	0x40010000

08003658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0210 	bic.w	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0320 	bic.w	r3, r3, #32
 80036a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a1e      	ldr	r2, [pc, #120]	; (800372c <TIM_OC2_SetConfig+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10d      	bne.n	80036d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a15      	ldr	r2, [pc, #84]	; (800372c <TIM_OC2_SetConfig+0xd4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d113      	bne.n	8003704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40010000 	.word	0x40010000

08003730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <TIM_OC3_SetConfig+0xd0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <TIM_OC3_SetConfig+0xd0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d113      	bne.n	80037da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	40010000 	.word	0x40010000

08003804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800384e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	031b      	lsls	r3, r3, #12
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <TIM_OC4_SetConfig+0x9c>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d109      	bne.n	8003878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	019b      	lsls	r3, r3, #6
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000

080038a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f023 0201 	bic.w	r2, r3, #1
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 030a 	bic.w	r3, r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003902:	b480      	push	{r7}
 8003904:	b087      	sub	sp, #28
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0210 	bic.w	r2, r3, #16
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800392c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	031b      	lsls	r3, r3, #12
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800393e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	bf00      	nop
 8003958:	371c      	adds	r7, #28
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 0307 	orr.w	r3, r3, #7
 8003984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	609a      	str	r2, [r3, #8]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003998:	b480      	push	{r7}
 800399a:	b087      	sub	sp, #28
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	021a      	lsls	r2, r3, #8
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e050      	b.n	8003a92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d018      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3c:	d013      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a18      	ldr	r2, [pc, #96]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00e      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d009      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a13      	ldr	r2, [pc, #76]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10c      	bne.n	8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40014000 	.word	0x40014000

08003ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e03f      	b.n	8003b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd ffca 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f90b 	bl	8003d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b088      	sub	sp, #32
 8003b52:	af02      	add	r7, sp, #8
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b20      	cmp	r3, #32
 8003b6c:	f040 8083 	bne.w	8003c76 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d002      	beq.n	8003b7c <HAL_UART_Transmit+0x2e>
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e07b      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Transmit+0x40>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e074      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2221      	movs	r2, #33	; 0x21
 8003ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe f83e 	bl	8001c24 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003bbe:	e042      	b.n	8003c46 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd6:	d122      	bne.n	8003c1e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2200      	movs	r2, #0
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f84c 	bl	8003c80 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e042      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c04:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3302      	adds	r3, #2
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	e017      	b.n	8003c46 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	e013      	b.n	8003c46 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2200      	movs	r2, #0
 8003c26:	2180      	movs	r1, #128	; 0x80
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 f829 	bl	8003c80 <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e01f      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	60ba      	str	r2, [r7, #8]
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1b7      	bne.n	8003bc0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2200      	movs	r2, #0
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f810 	bl	8003c80 <UART_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e006      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	e000      	b.n	8003c78 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c76:	2302      	movs	r3, #2
  }
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	603b      	str	r3, [r7, #0]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	e02c      	b.n	8003cec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c98:	d028      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ca0:	f7fd ffc0 	bl	8001c24 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d21d      	bcs.n	8003cec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cbe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0201 	bic.w	r2, r2, #1
 8003cce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e00f      	b.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d0c3      	beq.n	8003c92 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d56:	f023 030c 	bic.w	r3, r3, #12
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	68f9      	ldr	r1, [r7, #12]
 8003d60:	430b      	orrs	r3, r1
 8003d62:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	f040 818b 	bne.w	800409c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4ac1      	ldr	r2, [pc, #772]	; (8004090 <UART_SetConfig+0x37c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d005      	beq.n	8003d9c <UART_SetConfig+0x88>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4abf      	ldr	r2, [pc, #764]	; (8004094 <UART_SetConfig+0x380>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	f040 80bd 	bne.w	8003f16 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d9c:	f7ff f984 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8003da0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	461d      	mov	r5, r3
 8003da6:	f04f 0600 	mov.w	r6, #0
 8003daa:	46a8      	mov	r8, r5
 8003dac:	46b1      	mov	r9, r6
 8003dae:	eb18 0308 	adds.w	r3, r8, r8
 8003db2:	eb49 0409 	adc.w	r4, r9, r9
 8003db6:	4698      	mov	r8, r3
 8003db8:	46a1      	mov	r9, r4
 8003dba:	eb18 0805 	adds.w	r8, r8, r5
 8003dbe:	eb49 0906 	adc.w	r9, r9, r6
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003dce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dd6:	4688      	mov	r8, r1
 8003dd8:	4691      	mov	r9, r2
 8003dda:	eb18 0005 	adds.w	r0, r8, r5
 8003dde:	eb49 0106 	adc.w	r1, r9, r6
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	461d      	mov	r5, r3
 8003de8:	f04f 0600 	mov.w	r6, #0
 8003dec:	196b      	adds	r3, r5, r5
 8003dee:	eb46 0406 	adc.w	r4, r6, r6
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	f7fc fecf 	bl	8000b98 <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4ba5      	ldr	r3, [pc, #660]	; (8004098 <UART_SetConfig+0x384>)
 8003e02:	fba3 2302 	umull	r2, r3, r3, r2
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	461d      	mov	r5, r3
 8003e10:	f04f 0600 	mov.w	r6, #0
 8003e14:	46a9      	mov	r9, r5
 8003e16:	46b2      	mov	sl, r6
 8003e18:	eb19 0309 	adds.w	r3, r9, r9
 8003e1c:	eb4a 040a 	adc.w	r4, sl, sl
 8003e20:	4699      	mov	r9, r3
 8003e22:	46a2      	mov	sl, r4
 8003e24:	eb19 0905 	adds.w	r9, r9, r5
 8003e28:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e2c:	f04f 0100 	mov.w	r1, #0
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e40:	4689      	mov	r9, r1
 8003e42:	4692      	mov	sl, r2
 8003e44:	eb19 0005 	adds.w	r0, r9, r5
 8003e48:	eb4a 0106 	adc.w	r1, sl, r6
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	461d      	mov	r5, r3
 8003e52:	f04f 0600 	mov.w	r6, #0
 8003e56:	196b      	adds	r3, r5, r5
 8003e58:	eb46 0406 	adc.w	r4, r6, r6
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	f7fc fe9a 	bl	8000b98 <__aeabi_uldivmod>
 8003e64:	4603      	mov	r3, r0
 8003e66:	460c      	mov	r4, r1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <UART_SetConfig+0x384>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a86      	ldr	r2, [pc, #536]	; (8004098 <UART_SetConfig+0x384>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e8c:	4498      	add	r8, r3
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	461d      	mov	r5, r3
 8003e92:	f04f 0600 	mov.w	r6, #0
 8003e96:	46a9      	mov	r9, r5
 8003e98:	46b2      	mov	sl, r6
 8003e9a:	eb19 0309 	adds.w	r3, r9, r9
 8003e9e:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	46a2      	mov	sl, r4
 8003ea6:	eb19 0905 	adds.w	r9, r9, r5
 8003eaa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003eae:	f04f 0100 	mov.w	r1, #0
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ebe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec2:	4689      	mov	r9, r1
 8003ec4:	4692      	mov	sl, r2
 8003ec6:	eb19 0005 	adds.w	r0, r9, r5
 8003eca:	eb4a 0106 	adc.w	r1, sl, r6
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	f04f 0600 	mov.w	r6, #0
 8003ed8:	196b      	adds	r3, r5, r5
 8003eda:	eb46 0406 	adc.w	r4, r6, r6
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4623      	mov	r3, r4
 8003ee2:	f7fc fe59 	bl	8000b98 <__aeabi_uldivmod>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	461a      	mov	r2, r3
 8003eec:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <UART_SetConfig+0x384>)
 8003eee:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2164      	movs	r1, #100	; 0x64
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	3332      	adds	r3, #50	; 0x32
 8003f00:	4a65      	ldr	r2, [pc, #404]	; (8004098 <UART_SetConfig+0x384>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	f003 0207 	and.w	r2, r3, #7
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4442      	add	r2, r8
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	e26f      	b.n	80043f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f16:	f7ff f8b3 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8003f1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	461d      	mov	r5, r3
 8003f20:	f04f 0600 	mov.w	r6, #0
 8003f24:	46a8      	mov	r8, r5
 8003f26:	46b1      	mov	r9, r6
 8003f28:	eb18 0308 	adds.w	r3, r8, r8
 8003f2c:	eb49 0409 	adc.w	r4, r9, r9
 8003f30:	4698      	mov	r8, r3
 8003f32:	46a1      	mov	r9, r4
 8003f34:	eb18 0805 	adds.w	r8, r8, r5
 8003f38:	eb49 0906 	adc.w	r9, r9, r6
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f50:	4688      	mov	r8, r1
 8003f52:	4691      	mov	r9, r2
 8003f54:	eb18 0005 	adds.w	r0, r8, r5
 8003f58:	eb49 0106 	adc.w	r1, r9, r6
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	461d      	mov	r5, r3
 8003f62:	f04f 0600 	mov.w	r6, #0
 8003f66:	196b      	adds	r3, r5, r5
 8003f68:	eb46 0406 	adc.w	r4, r6, r6
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4623      	mov	r3, r4
 8003f70:	f7fc fe12 	bl	8000b98 <__aeabi_uldivmod>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <UART_SetConfig+0x384>)
 8003f7c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	461d      	mov	r5, r3
 8003f8a:	f04f 0600 	mov.w	r6, #0
 8003f8e:	46a9      	mov	r9, r5
 8003f90:	46b2      	mov	sl, r6
 8003f92:	eb19 0309 	adds.w	r3, r9, r9
 8003f96:	eb4a 040a 	adc.w	r4, sl, sl
 8003f9a:	4699      	mov	r9, r3
 8003f9c:	46a2      	mov	sl, r4
 8003f9e:	eb19 0905 	adds.w	r9, r9, r5
 8003fa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fa6:	f04f 0100 	mov.w	r1, #0
 8003faa:	f04f 0200 	mov.w	r2, #0
 8003fae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fb2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fb6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fba:	4689      	mov	r9, r1
 8003fbc:	4692      	mov	sl, r2
 8003fbe:	eb19 0005 	adds.w	r0, r9, r5
 8003fc2:	eb4a 0106 	adc.w	r1, sl, r6
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	461d      	mov	r5, r3
 8003fcc:	f04f 0600 	mov.w	r6, #0
 8003fd0:	196b      	adds	r3, r5, r5
 8003fd2:	eb46 0406 	adc.w	r4, r6, r6
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4623      	mov	r3, r4
 8003fda:	f7fc fddd 	bl	8000b98 <__aeabi_uldivmod>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <UART_SetConfig+0x384>)
 8003fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fea:	095b      	lsrs	r3, r3, #5
 8003fec:	2164      	movs	r1, #100	; 0x64
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	3332      	adds	r3, #50	; 0x32
 8003ff8:	4a27      	ldr	r2, [pc, #156]	; (8004098 <UART_SetConfig+0x384>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004006:	4498      	add	r8, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	461d      	mov	r5, r3
 800400c:	f04f 0600 	mov.w	r6, #0
 8004010:	46a9      	mov	r9, r5
 8004012:	46b2      	mov	sl, r6
 8004014:	eb19 0309 	adds.w	r3, r9, r9
 8004018:	eb4a 040a 	adc.w	r4, sl, sl
 800401c:	4699      	mov	r9, r3
 800401e:	46a2      	mov	sl, r4
 8004020:	eb19 0905 	adds.w	r9, r9, r5
 8004024:	eb4a 0a06 	adc.w	sl, sl, r6
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800403c:	4689      	mov	r9, r1
 800403e:	4692      	mov	sl, r2
 8004040:	eb19 0005 	adds.w	r0, r9, r5
 8004044:	eb4a 0106 	adc.w	r1, sl, r6
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	461d      	mov	r5, r3
 800404e:	f04f 0600 	mov.w	r6, #0
 8004052:	196b      	adds	r3, r5, r5
 8004054:	eb46 0406 	adc.w	r4, r6, r6
 8004058:	461a      	mov	r2, r3
 800405a:	4623      	mov	r3, r4
 800405c:	f7fc fd9c 	bl	8000b98 <__aeabi_uldivmod>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <UART_SetConfig+0x384>)
 8004068:	fba3 1302 	umull	r1, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	2164      	movs	r1, #100	; 0x64
 8004070:	fb01 f303 	mul.w	r3, r1, r3
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	3332      	adds	r3, #50	; 0x32
 800407a:	4a07      	ldr	r2, [pc, #28]	; (8004098 <UART_SetConfig+0x384>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f003 0207 	and.w	r2, r3, #7
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4442      	add	r2, r8
 800408c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800408e:	e1b2      	b.n	80043f6 <UART_SetConfig+0x6e2>
 8004090:	40011000 	.word	0x40011000
 8004094:	40011400 	.word	0x40011400
 8004098:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4ad7      	ldr	r2, [pc, #860]	; (8004400 <UART_SetConfig+0x6ec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d005      	beq.n	80040b2 <UART_SetConfig+0x39e>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4ad6      	ldr	r2, [pc, #856]	; (8004404 <UART_SetConfig+0x6f0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	f040 80d1 	bne.w	8004254 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040b2:	f7fe fff9 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 80040b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	469a      	mov	sl, r3
 80040bc:	f04f 0b00 	mov.w	fp, #0
 80040c0:	46d0      	mov	r8, sl
 80040c2:	46d9      	mov	r9, fp
 80040c4:	eb18 0308 	adds.w	r3, r8, r8
 80040c8:	eb49 0409 	adc.w	r4, r9, r9
 80040cc:	4698      	mov	r8, r3
 80040ce:	46a1      	mov	r9, r4
 80040d0:	eb18 080a 	adds.w	r8, r8, sl
 80040d4:	eb49 090b 	adc.w	r9, r9, fp
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ec:	4688      	mov	r8, r1
 80040ee:	4691      	mov	r9, r2
 80040f0:	eb1a 0508 	adds.w	r5, sl, r8
 80040f4:	eb4b 0609 	adc.w	r6, fp, r9
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	0094      	lsls	r4, r2, #2
 800410c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004110:	008b      	lsls	r3, r1, #2
 8004112:	461a      	mov	r2, r3
 8004114:	4623      	mov	r3, r4
 8004116:	4628      	mov	r0, r5
 8004118:	4631      	mov	r1, r6
 800411a:	f7fc fd3d 	bl	8000b98 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	461a      	mov	r2, r3
 8004124:	4bb8      	ldr	r3, [pc, #736]	; (8004408 <UART_SetConfig+0x6f4>)
 8004126:	fba3 2302 	umull	r2, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	469b      	mov	fp, r3
 8004134:	f04f 0c00 	mov.w	ip, #0
 8004138:	46d9      	mov	r9, fp
 800413a:	46e2      	mov	sl, ip
 800413c:	eb19 0309 	adds.w	r3, r9, r9
 8004140:	eb4a 040a 	adc.w	r4, sl, sl
 8004144:	4699      	mov	r9, r3
 8004146:	46a2      	mov	sl, r4
 8004148:	eb19 090b 	adds.w	r9, r9, fp
 800414c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004150:	f04f 0100 	mov.w	r1, #0
 8004154:	f04f 0200 	mov.w	r2, #0
 8004158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800415c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004160:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004164:	4689      	mov	r9, r1
 8004166:	4692      	mov	sl, r2
 8004168:	eb1b 0509 	adds.w	r5, fp, r9
 800416c:	eb4c 060a 	adc.w	r6, ip, sl
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	f04f 0400 	mov.w	r4, #0
 8004182:	0094      	lsls	r4, r2, #2
 8004184:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004188:	008b      	lsls	r3, r1, #2
 800418a:	461a      	mov	r2, r3
 800418c:	4623      	mov	r3, r4
 800418e:	4628      	mov	r0, r5
 8004190:	4631      	mov	r1, r6
 8004192:	f7fc fd01 	bl	8000b98 <__aeabi_uldivmod>
 8004196:	4603      	mov	r3, r0
 8004198:	460c      	mov	r4, r1
 800419a:	461a      	mov	r2, r3
 800419c:	4b9a      	ldr	r3, [pc, #616]	; (8004408 <UART_SetConfig+0x6f4>)
 800419e:	fba3 1302 	umull	r1, r3, r3, r2
 80041a2:	095b      	lsrs	r3, r3, #5
 80041a4:	2164      	movs	r1, #100	; 0x64
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	3332      	adds	r3, #50	; 0x32
 80041b0:	4a95      	ldr	r2, [pc, #596]	; (8004408 <UART_SetConfig+0x6f4>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041bc:	4498      	add	r8, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	469b      	mov	fp, r3
 80041c2:	f04f 0c00 	mov.w	ip, #0
 80041c6:	46d9      	mov	r9, fp
 80041c8:	46e2      	mov	sl, ip
 80041ca:	eb19 0309 	adds.w	r3, r9, r9
 80041ce:	eb4a 040a 	adc.w	r4, sl, sl
 80041d2:	4699      	mov	r9, r3
 80041d4:	46a2      	mov	sl, r4
 80041d6:	eb19 090b 	adds.w	r9, r9, fp
 80041da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041de:	f04f 0100 	mov.w	r1, #0
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041f2:	4689      	mov	r9, r1
 80041f4:	4692      	mov	sl, r2
 80041f6:	eb1b 0509 	adds.w	r5, fp, r9
 80041fa:	eb4c 060a 	adc.w	r6, ip, sl
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4619      	mov	r1, r3
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	0094      	lsls	r4, r2, #2
 8004212:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004216:	008b      	lsls	r3, r1, #2
 8004218:	461a      	mov	r2, r3
 800421a:	4623      	mov	r3, r4
 800421c:	4628      	mov	r0, r5
 800421e:	4631      	mov	r1, r6
 8004220:	f7fc fcba 	bl	8000b98 <__aeabi_uldivmod>
 8004224:	4603      	mov	r3, r0
 8004226:	460c      	mov	r4, r1
 8004228:	461a      	mov	r2, r3
 800422a:	4b77      	ldr	r3, [pc, #476]	; (8004408 <UART_SetConfig+0x6f4>)
 800422c:	fba3 1302 	umull	r1, r3, r3, r2
 8004230:	095b      	lsrs	r3, r3, #5
 8004232:	2164      	movs	r1, #100	; 0x64
 8004234:	fb01 f303 	mul.w	r3, r1, r3
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	3332      	adds	r3, #50	; 0x32
 800423e:	4a72      	ldr	r2, [pc, #456]	; (8004408 <UART_SetConfig+0x6f4>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	f003 020f 	and.w	r2, r3, #15
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4442      	add	r2, r8
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	e0d0      	b.n	80043f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe ff14 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8004258:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	469a      	mov	sl, r3
 800425e:	f04f 0b00 	mov.w	fp, #0
 8004262:	46d0      	mov	r8, sl
 8004264:	46d9      	mov	r9, fp
 8004266:	eb18 0308 	adds.w	r3, r8, r8
 800426a:	eb49 0409 	adc.w	r4, r9, r9
 800426e:	4698      	mov	r8, r3
 8004270:	46a1      	mov	r9, r4
 8004272:	eb18 080a 	adds.w	r8, r8, sl
 8004276:	eb49 090b 	adc.w	r9, r9, fp
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004286:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800428a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800428e:	4688      	mov	r8, r1
 8004290:	4691      	mov	r9, r2
 8004292:	eb1a 0508 	adds.w	r5, sl, r8
 8004296:	eb4b 0609 	adc.w	r6, fp, r9
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4619      	mov	r1, r3
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f04f 0400 	mov.w	r4, #0
 80042ac:	0094      	lsls	r4, r2, #2
 80042ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b2:	008b      	lsls	r3, r1, #2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	4631      	mov	r1, r6
 80042bc:	f7fc fc6c 	bl	8000b98 <__aeabi_uldivmod>
 80042c0:	4603      	mov	r3, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b50      	ldr	r3, [pc, #320]	; (8004408 <UART_SetConfig+0x6f4>)
 80042c8:	fba3 2302 	umull	r2, r3, r3, r2
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	469b      	mov	fp, r3
 80042d6:	f04f 0c00 	mov.w	ip, #0
 80042da:	46d9      	mov	r9, fp
 80042dc:	46e2      	mov	sl, ip
 80042de:	eb19 0309 	adds.w	r3, r9, r9
 80042e2:	eb4a 040a 	adc.w	r4, sl, sl
 80042e6:	4699      	mov	r9, r3
 80042e8:	46a2      	mov	sl, r4
 80042ea:	eb19 090b 	adds.w	r9, r9, fp
 80042ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004302:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004306:	4689      	mov	r9, r1
 8004308:	4692      	mov	sl, r2
 800430a:	eb1b 0509 	adds.w	r5, fp, r9
 800430e:	eb4c 060a 	adc.w	r6, ip, sl
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	4619      	mov	r1, r3
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	f04f 0400 	mov.w	r4, #0
 8004324:	0094      	lsls	r4, r2, #2
 8004326:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800432a:	008b      	lsls	r3, r1, #2
 800432c:	461a      	mov	r2, r3
 800432e:	4623      	mov	r3, r4
 8004330:	4628      	mov	r0, r5
 8004332:	4631      	mov	r1, r6
 8004334:	f7fc fc30 	bl	8000b98 <__aeabi_uldivmod>
 8004338:	4603      	mov	r3, r0
 800433a:	460c      	mov	r4, r1
 800433c:	461a      	mov	r2, r3
 800433e:	4b32      	ldr	r3, [pc, #200]	; (8004408 <UART_SetConfig+0x6f4>)
 8004340:	fba3 1302 	umull	r1, r3, r3, r2
 8004344:	095b      	lsrs	r3, r3, #5
 8004346:	2164      	movs	r1, #100	; 0x64
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	3332      	adds	r3, #50	; 0x32
 8004352:	4a2d      	ldr	r2, [pc, #180]	; (8004408 <UART_SetConfig+0x6f4>)
 8004354:	fba2 2303 	umull	r2, r3, r2, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800435e:	4498      	add	r8, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	469b      	mov	fp, r3
 8004364:	f04f 0c00 	mov.w	ip, #0
 8004368:	46d9      	mov	r9, fp
 800436a:	46e2      	mov	sl, ip
 800436c:	eb19 0309 	adds.w	r3, r9, r9
 8004370:	eb4a 040a 	adc.w	r4, sl, sl
 8004374:	4699      	mov	r9, r3
 8004376:	46a2      	mov	sl, r4
 8004378:	eb19 090b 	adds.w	r9, r9, fp
 800437c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004380:	f04f 0100 	mov.w	r1, #0
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004390:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004394:	4689      	mov	r9, r1
 8004396:	4692      	mov	sl, r2
 8004398:	eb1b 0509 	adds.w	r5, fp, r9
 800439c:	eb4c 060a 	adc.w	r6, ip, sl
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f04f 0400 	mov.w	r4, #0
 80043b2:	0094      	lsls	r4, r2, #2
 80043b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043b8:	008b      	lsls	r3, r1, #2
 80043ba:	461a      	mov	r2, r3
 80043bc:	4623      	mov	r3, r4
 80043be:	4628      	mov	r0, r5
 80043c0:	4631      	mov	r1, r6
 80043c2:	f7fc fbe9 	bl	8000b98 <__aeabi_uldivmod>
 80043c6:	4603      	mov	r3, r0
 80043c8:	460c      	mov	r4, r1
 80043ca:	461a      	mov	r2, r3
 80043cc:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <UART_SetConfig+0x6f4>)
 80043ce:	fba3 1302 	umull	r1, r3, r3, r2
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	2164      	movs	r1, #100	; 0x64
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	3332      	adds	r3, #50	; 0x32
 80043e0:	4a09      	ldr	r2, [pc, #36]	; (8004408 <UART_SetConfig+0x6f4>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	095b      	lsrs	r3, r3, #5
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4442      	add	r2, r8
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	e7ff      	b.n	80043f6 <UART_SetConfig+0x6e2>
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004400:	40011000 	.word	0x40011000
 8004404:	40011400 	.word	0x40011400
 8004408:	51eb851f 	.word	0x51eb851f

0800440c <__errno>:
 800440c:	4b01      	ldr	r3, [pc, #4]	; (8004414 <__errno+0x8>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000000c 	.word	0x2000000c

08004418 <__libc_init_array>:
 8004418:	b570      	push	{r4, r5, r6, lr}
 800441a:	4e0d      	ldr	r6, [pc, #52]	; (8004450 <__libc_init_array+0x38>)
 800441c:	4c0d      	ldr	r4, [pc, #52]	; (8004454 <__libc_init_array+0x3c>)
 800441e:	1ba4      	subs	r4, r4, r6
 8004420:	10a4      	asrs	r4, r4, #2
 8004422:	2500      	movs	r5, #0
 8004424:	42a5      	cmp	r5, r4
 8004426:	d109      	bne.n	800443c <__libc_init_array+0x24>
 8004428:	4e0b      	ldr	r6, [pc, #44]	; (8004458 <__libc_init_array+0x40>)
 800442a:	4c0c      	ldr	r4, [pc, #48]	; (800445c <__libc_init_array+0x44>)
 800442c:	f001 fc7e 	bl	8005d2c <_init>
 8004430:	1ba4      	subs	r4, r4, r6
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	2500      	movs	r5, #0
 8004436:	42a5      	cmp	r5, r4
 8004438:	d105      	bne.n	8004446 <__libc_init_array+0x2e>
 800443a:	bd70      	pop	{r4, r5, r6, pc}
 800443c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004440:	4798      	blx	r3
 8004442:	3501      	adds	r5, #1
 8004444:	e7ee      	b.n	8004424 <__libc_init_array+0xc>
 8004446:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800444a:	4798      	blx	r3
 800444c:	3501      	adds	r5, #1
 800444e:	e7f2      	b.n	8004436 <__libc_init_array+0x1e>
 8004450:	08005ea0 	.word	0x08005ea0
 8004454:	08005ea0 	.word	0x08005ea0
 8004458:	08005ea0 	.word	0x08005ea0
 800445c:	08005ea4 	.word	0x08005ea4

08004460 <memset>:
 8004460:	4402      	add	r2, r0
 8004462:	4603      	mov	r3, r0
 8004464:	4293      	cmp	r3, r2
 8004466:	d100      	bne.n	800446a <memset+0xa>
 8004468:	4770      	bx	lr
 800446a:	f803 1b01 	strb.w	r1, [r3], #1
 800446e:	e7f9      	b.n	8004464 <memset+0x4>

08004470 <siprintf>:
 8004470:	b40e      	push	{r1, r2, r3}
 8004472:	b500      	push	{lr}
 8004474:	b09c      	sub	sp, #112	; 0x70
 8004476:	ab1d      	add	r3, sp, #116	; 0x74
 8004478:	9002      	str	r0, [sp, #8]
 800447a:	9006      	str	r0, [sp, #24]
 800447c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <siprintf+0x38>)
 8004482:	9107      	str	r1, [sp, #28]
 8004484:	9104      	str	r1, [sp, #16]
 8004486:	4909      	ldr	r1, [pc, #36]	; (80044ac <siprintf+0x3c>)
 8004488:	f853 2b04 	ldr.w	r2, [r3], #4
 800448c:	9105      	str	r1, [sp, #20]
 800448e:	6800      	ldr	r0, [r0, #0]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	a902      	add	r1, sp, #8
 8004494:	f000 f866 	bl	8004564 <_svfiprintf_r>
 8004498:	9b02      	ldr	r3, [sp, #8]
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	b01c      	add	sp, #112	; 0x70
 80044a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a4:	b003      	add	sp, #12
 80044a6:	4770      	bx	lr
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	ffff0208 	.word	0xffff0208

080044b0 <__ssputs_r>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	688e      	ldr	r6, [r1, #8]
 80044b6:	429e      	cmp	r6, r3
 80044b8:	4682      	mov	sl, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	4690      	mov	r8, r2
 80044be:	4699      	mov	r9, r3
 80044c0:	d837      	bhi.n	8004532 <__ssputs_r+0x82>
 80044c2:	898a      	ldrh	r2, [r1, #12]
 80044c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044c8:	d031      	beq.n	800452e <__ssputs_r+0x7e>
 80044ca:	6825      	ldr	r5, [r4, #0]
 80044cc:	6909      	ldr	r1, [r1, #16]
 80044ce:	1a6f      	subs	r7, r5, r1
 80044d0:	6965      	ldr	r5, [r4, #20]
 80044d2:	2302      	movs	r3, #2
 80044d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80044dc:	f109 0301 	add.w	r3, r9, #1
 80044e0:	443b      	add	r3, r7
 80044e2:	429d      	cmp	r5, r3
 80044e4:	bf38      	it	cc
 80044e6:	461d      	movcc	r5, r3
 80044e8:	0553      	lsls	r3, r2, #21
 80044ea:	d530      	bpl.n	800454e <__ssputs_r+0x9e>
 80044ec:	4629      	mov	r1, r5
 80044ee:	f000 fb2b 	bl	8004b48 <_malloc_r>
 80044f2:	4606      	mov	r6, r0
 80044f4:	b950      	cbnz	r0, 800450c <__ssputs_r+0x5c>
 80044f6:	230c      	movs	r3, #12
 80044f8:	f8ca 3000 	str.w	r3, [sl]
 80044fc:	89a3      	ldrh	r3, [r4, #12]
 80044fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004502:	81a3      	strh	r3, [r4, #12]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295
 8004508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450c:	463a      	mov	r2, r7
 800450e:	6921      	ldr	r1, [r4, #16]
 8004510:	f000 faa8 	bl	8004a64 <memcpy>
 8004514:	89a3      	ldrh	r3, [r4, #12]
 8004516:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	81a3      	strh	r3, [r4, #12]
 8004520:	6126      	str	r6, [r4, #16]
 8004522:	6165      	str	r5, [r4, #20]
 8004524:	443e      	add	r6, r7
 8004526:	1bed      	subs	r5, r5, r7
 8004528:	6026      	str	r6, [r4, #0]
 800452a:	60a5      	str	r5, [r4, #8]
 800452c:	464e      	mov	r6, r9
 800452e:	454e      	cmp	r6, r9
 8004530:	d900      	bls.n	8004534 <__ssputs_r+0x84>
 8004532:	464e      	mov	r6, r9
 8004534:	4632      	mov	r2, r6
 8004536:	4641      	mov	r1, r8
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	f000 fa9e 	bl	8004a7a <memmove>
 800453e:	68a3      	ldr	r3, [r4, #8]
 8004540:	1b9b      	subs	r3, r3, r6
 8004542:	60a3      	str	r3, [r4, #8]
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	441e      	add	r6, r3
 8004548:	6026      	str	r6, [r4, #0]
 800454a:	2000      	movs	r0, #0
 800454c:	e7dc      	b.n	8004508 <__ssputs_r+0x58>
 800454e:	462a      	mov	r2, r5
 8004550:	f000 fb54 	bl	8004bfc <_realloc_r>
 8004554:	4606      	mov	r6, r0
 8004556:	2800      	cmp	r0, #0
 8004558:	d1e2      	bne.n	8004520 <__ssputs_r+0x70>
 800455a:	6921      	ldr	r1, [r4, #16]
 800455c:	4650      	mov	r0, sl
 800455e:	f000 faa5 	bl	8004aac <_free_r>
 8004562:	e7c8      	b.n	80044f6 <__ssputs_r+0x46>

08004564 <_svfiprintf_r>:
 8004564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004568:	461d      	mov	r5, r3
 800456a:	898b      	ldrh	r3, [r1, #12]
 800456c:	061f      	lsls	r7, r3, #24
 800456e:	b09d      	sub	sp, #116	; 0x74
 8004570:	4680      	mov	r8, r0
 8004572:	460c      	mov	r4, r1
 8004574:	4616      	mov	r6, r2
 8004576:	d50f      	bpl.n	8004598 <_svfiprintf_r+0x34>
 8004578:	690b      	ldr	r3, [r1, #16]
 800457a:	b96b      	cbnz	r3, 8004598 <_svfiprintf_r+0x34>
 800457c:	2140      	movs	r1, #64	; 0x40
 800457e:	f000 fae3 	bl	8004b48 <_malloc_r>
 8004582:	6020      	str	r0, [r4, #0]
 8004584:	6120      	str	r0, [r4, #16]
 8004586:	b928      	cbnz	r0, 8004594 <_svfiprintf_r+0x30>
 8004588:	230c      	movs	r3, #12
 800458a:	f8c8 3000 	str.w	r3, [r8]
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	e0c8      	b.n	8004726 <_svfiprintf_r+0x1c2>
 8004594:	2340      	movs	r3, #64	; 0x40
 8004596:	6163      	str	r3, [r4, #20]
 8004598:	2300      	movs	r3, #0
 800459a:	9309      	str	r3, [sp, #36]	; 0x24
 800459c:	2320      	movs	r3, #32
 800459e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045a2:	2330      	movs	r3, #48	; 0x30
 80045a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045a8:	9503      	str	r5, [sp, #12]
 80045aa:	f04f 0b01 	mov.w	fp, #1
 80045ae:	4637      	mov	r7, r6
 80045b0:	463d      	mov	r5, r7
 80045b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045b6:	b10b      	cbz	r3, 80045bc <_svfiprintf_r+0x58>
 80045b8:	2b25      	cmp	r3, #37	; 0x25
 80045ba:	d13e      	bne.n	800463a <_svfiprintf_r+0xd6>
 80045bc:	ebb7 0a06 	subs.w	sl, r7, r6
 80045c0:	d00b      	beq.n	80045da <_svfiprintf_r+0x76>
 80045c2:	4653      	mov	r3, sl
 80045c4:	4632      	mov	r2, r6
 80045c6:	4621      	mov	r1, r4
 80045c8:	4640      	mov	r0, r8
 80045ca:	f7ff ff71 	bl	80044b0 <__ssputs_r>
 80045ce:	3001      	adds	r0, #1
 80045d0:	f000 80a4 	beq.w	800471c <_svfiprintf_r+0x1b8>
 80045d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d6:	4453      	add	r3, sl
 80045d8:	9309      	str	r3, [sp, #36]	; 0x24
 80045da:	783b      	ldrb	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 809d 	beq.w	800471c <_svfiprintf_r+0x1b8>
 80045e2:	2300      	movs	r3, #0
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045ec:	9304      	str	r3, [sp, #16]
 80045ee:	9307      	str	r3, [sp, #28]
 80045f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045f4:	931a      	str	r3, [sp, #104]	; 0x68
 80045f6:	462f      	mov	r7, r5
 80045f8:	2205      	movs	r2, #5
 80045fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045fe:	4850      	ldr	r0, [pc, #320]	; (8004740 <_svfiprintf_r+0x1dc>)
 8004600:	f7fb fdee 	bl	80001e0 <memchr>
 8004604:	9b04      	ldr	r3, [sp, #16]
 8004606:	b9d0      	cbnz	r0, 800463e <_svfiprintf_r+0xda>
 8004608:	06d9      	lsls	r1, r3, #27
 800460a:	bf44      	itt	mi
 800460c:	2220      	movmi	r2, #32
 800460e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004612:	071a      	lsls	r2, r3, #28
 8004614:	bf44      	itt	mi
 8004616:	222b      	movmi	r2, #43	; 0x2b
 8004618:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800461c:	782a      	ldrb	r2, [r5, #0]
 800461e:	2a2a      	cmp	r2, #42	; 0x2a
 8004620:	d015      	beq.n	800464e <_svfiprintf_r+0xea>
 8004622:	9a07      	ldr	r2, [sp, #28]
 8004624:	462f      	mov	r7, r5
 8004626:	2000      	movs	r0, #0
 8004628:	250a      	movs	r5, #10
 800462a:	4639      	mov	r1, r7
 800462c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004630:	3b30      	subs	r3, #48	; 0x30
 8004632:	2b09      	cmp	r3, #9
 8004634:	d94d      	bls.n	80046d2 <_svfiprintf_r+0x16e>
 8004636:	b1b8      	cbz	r0, 8004668 <_svfiprintf_r+0x104>
 8004638:	e00f      	b.n	800465a <_svfiprintf_r+0xf6>
 800463a:	462f      	mov	r7, r5
 800463c:	e7b8      	b.n	80045b0 <_svfiprintf_r+0x4c>
 800463e:	4a40      	ldr	r2, [pc, #256]	; (8004740 <_svfiprintf_r+0x1dc>)
 8004640:	1a80      	subs	r0, r0, r2
 8004642:	fa0b f000 	lsl.w	r0, fp, r0
 8004646:	4318      	orrs	r0, r3
 8004648:	9004      	str	r0, [sp, #16]
 800464a:	463d      	mov	r5, r7
 800464c:	e7d3      	b.n	80045f6 <_svfiprintf_r+0x92>
 800464e:	9a03      	ldr	r2, [sp, #12]
 8004650:	1d11      	adds	r1, r2, #4
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	9103      	str	r1, [sp, #12]
 8004656:	2a00      	cmp	r2, #0
 8004658:	db01      	blt.n	800465e <_svfiprintf_r+0xfa>
 800465a:	9207      	str	r2, [sp, #28]
 800465c:	e004      	b.n	8004668 <_svfiprintf_r+0x104>
 800465e:	4252      	negs	r2, r2
 8004660:	f043 0302 	orr.w	r3, r3, #2
 8004664:	9207      	str	r2, [sp, #28]
 8004666:	9304      	str	r3, [sp, #16]
 8004668:	783b      	ldrb	r3, [r7, #0]
 800466a:	2b2e      	cmp	r3, #46	; 0x2e
 800466c:	d10c      	bne.n	8004688 <_svfiprintf_r+0x124>
 800466e:	787b      	ldrb	r3, [r7, #1]
 8004670:	2b2a      	cmp	r3, #42	; 0x2a
 8004672:	d133      	bne.n	80046dc <_svfiprintf_r+0x178>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	1d1a      	adds	r2, r3, #4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	9203      	str	r2, [sp, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	bfb8      	it	lt
 8004680:	f04f 33ff 	movlt.w	r3, #4294967295
 8004684:	3702      	adds	r7, #2
 8004686:	9305      	str	r3, [sp, #20]
 8004688:	4d2e      	ldr	r5, [pc, #184]	; (8004744 <_svfiprintf_r+0x1e0>)
 800468a:	7839      	ldrb	r1, [r7, #0]
 800468c:	2203      	movs	r2, #3
 800468e:	4628      	mov	r0, r5
 8004690:	f7fb fda6 	bl	80001e0 <memchr>
 8004694:	b138      	cbz	r0, 80046a6 <_svfiprintf_r+0x142>
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	1b40      	subs	r0, r0, r5
 800469a:	fa03 f000 	lsl.w	r0, r3, r0
 800469e:	9b04      	ldr	r3, [sp, #16]
 80046a0:	4303      	orrs	r3, r0
 80046a2:	3701      	adds	r7, #1
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	7839      	ldrb	r1, [r7, #0]
 80046a8:	4827      	ldr	r0, [pc, #156]	; (8004748 <_svfiprintf_r+0x1e4>)
 80046aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046ae:	2206      	movs	r2, #6
 80046b0:	1c7e      	adds	r6, r7, #1
 80046b2:	f7fb fd95 	bl	80001e0 <memchr>
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d038      	beq.n	800472c <_svfiprintf_r+0x1c8>
 80046ba:	4b24      	ldr	r3, [pc, #144]	; (800474c <_svfiprintf_r+0x1e8>)
 80046bc:	bb13      	cbnz	r3, 8004704 <_svfiprintf_r+0x1a0>
 80046be:	9b03      	ldr	r3, [sp, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	3308      	adds	r3, #8
 80046c8:	9303      	str	r3, [sp, #12]
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	444b      	add	r3, r9
 80046ce:	9309      	str	r3, [sp, #36]	; 0x24
 80046d0:	e76d      	b.n	80045ae <_svfiprintf_r+0x4a>
 80046d2:	fb05 3202 	mla	r2, r5, r2, r3
 80046d6:	2001      	movs	r0, #1
 80046d8:	460f      	mov	r7, r1
 80046da:	e7a6      	b.n	800462a <_svfiprintf_r+0xc6>
 80046dc:	2300      	movs	r3, #0
 80046de:	3701      	adds	r7, #1
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	4619      	mov	r1, r3
 80046e4:	250a      	movs	r5, #10
 80046e6:	4638      	mov	r0, r7
 80046e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046ec:	3a30      	subs	r2, #48	; 0x30
 80046ee:	2a09      	cmp	r2, #9
 80046f0:	d903      	bls.n	80046fa <_svfiprintf_r+0x196>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0c8      	beq.n	8004688 <_svfiprintf_r+0x124>
 80046f6:	9105      	str	r1, [sp, #20]
 80046f8:	e7c6      	b.n	8004688 <_svfiprintf_r+0x124>
 80046fa:	fb05 2101 	mla	r1, r5, r1, r2
 80046fe:	2301      	movs	r3, #1
 8004700:	4607      	mov	r7, r0
 8004702:	e7f0      	b.n	80046e6 <_svfiprintf_r+0x182>
 8004704:	ab03      	add	r3, sp, #12
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	4622      	mov	r2, r4
 800470a:	4b11      	ldr	r3, [pc, #68]	; (8004750 <_svfiprintf_r+0x1ec>)
 800470c:	a904      	add	r1, sp, #16
 800470e:	4640      	mov	r0, r8
 8004710:	f3af 8000 	nop.w
 8004714:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004718:	4681      	mov	r9, r0
 800471a:	d1d6      	bne.n	80046ca <_svfiprintf_r+0x166>
 800471c:	89a3      	ldrh	r3, [r4, #12]
 800471e:	065b      	lsls	r3, r3, #25
 8004720:	f53f af35 	bmi.w	800458e <_svfiprintf_r+0x2a>
 8004724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004726:	b01d      	add	sp, #116	; 0x74
 8004728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	4622      	mov	r2, r4
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <_svfiprintf_r+0x1ec>)
 8004734:	a904      	add	r1, sp, #16
 8004736:	4640      	mov	r0, r8
 8004738:	f000 f882 	bl	8004840 <_printf_i>
 800473c:	e7ea      	b.n	8004714 <_svfiprintf_r+0x1b0>
 800473e:	bf00      	nop
 8004740:	08005e20 	.word	0x08005e20
 8004744:	08005e26 	.word	0x08005e26
 8004748:	08005e2a 	.word	0x08005e2a
 800474c:	00000000 	.word	0x00000000
 8004750:	080044b1 	.word	0x080044b1

08004754 <_printf_common>:
 8004754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004758:	4691      	mov	r9, r2
 800475a:	461f      	mov	r7, r3
 800475c:	688a      	ldr	r2, [r1, #8]
 800475e:	690b      	ldr	r3, [r1, #16]
 8004760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004764:	4293      	cmp	r3, r2
 8004766:	bfb8      	it	lt
 8004768:	4613      	movlt	r3, r2
 800476a:	f8c9 3000 	str.w	r3, [r9]
 800476e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004772:	4606      	mov	r6, r0
 8004774:	460c      	mov	r4, r1
 8004776:	b112      	cbz	r2, 800477e <_printf_common+0x2a>
 8004778:	3301      	adds	r3, #1
 800477a:	f8c9 3000 	str.w	r3, [r9]
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	0699      	lsls	r1, r3, #26
 8004782:	bf42      	ittt	mi
 8004784:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004788:	3302      	addmi	r3, #2
 800478a:	f8c9 3000 	strmi.w	r3, [r9]
 800478e:	6825      	ldr	r5, [r4, #0]
 8004790:	f015 0506 	ands.w	r5, r5, #6
 8004794:	d107      	bne.n	80047a6 <_printf_common+0x52>
 8004796:	f104 0a19 	add.w	sl, r4, #25
 800479a:	68e3      	ldr	r3, [r4, #12]
 800479c:	f8d9 2000 	ldr.w	r2, [r9]
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	42ab      	cmp	r3, r5
 80047a4:	dc28      	bgt.n	80047f8 <_printf_common+0xa4>
 80047a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047aa:	6822      	ldr	r2, [r4, #0]
 80047ac:	3300      	adds	r3, #0
 80047ae:	bf18      	it	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	0692      	lsls	r2, r2, #26
 80047b4:	d42d      	bmi.n	8004812 <_printf_common+0xbe>
 80047b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047ba:	4639      	mov	r1, r7
 80047bc:	4630      	mov	r0, r6
 80047be:	47c0      	blx	r8
 80047c0:	3001      	adds	r0, #1
 80047c2:	d020      	beq.n	8004806 <_printf_common+0xb2>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	68e5      	ldr	r5, [r4, #12]
 80047c8:	f8d9 2000 	ldr.w	r2, [r9]
 80047cc:	f003 0306 	and.w	r3, r3, #6
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	bf08      	it	eq
 80047d4:	1aad      	subeq	r5, r5, r2
 80047d6:	68a3      	ldr	r3, [r4, #8]
 80047d8:	6922      	ldr	r2, [r4, #16]
 80047da:	bf0c      	ite	eq
 80047dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047e0:	2500      	movne	r5, #0
 80047e2:	4293      	cmp	r3, r2
 80047e4:	bfc4      	itt	gt
 80047e6:	1a9b      	subgt	r3, r3, r2
 80047e8:	18ed      	addgt	r5, r5, r3
 80047ea:	f04f 0900 	mov.w	r9, #0
 80047ee:	341a      	adds	r4, #26
 80047f0:	454d      	cmp	r5, r9
 80047f2:	d11a      	bne.n	800482a <_printf_common+0xd6>
 80047f4:	2000      	movs	r0, #0
 80047f6:	e008      	b.n	800480a <_printf_common+0xb6>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4652      	mov	r2, sl
 80047fc:	4639      	mov	r1, r7
 80047fe:	4630      	mov	r0, r6
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d103      	bne.n	800480e <_printf_common+0xba>
 8004806:	f04f 30ff 	mov.w	r0, #4294967295
 800480a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800480e:	3501      	adds	r5, #1
 8004810:	e7c3      	b.n	800479a <_printf_common+0x46>
 8004812:	18e1      	adds	r1, r4, r3
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	2030      	movs	r0, #48	; 0x30
 8004818:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800481c:	4422      	add	r2, r4
 800481e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004822:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004826:	3302      	adds	r3, #2
 8004828:	e7c5      	b.n	80047b6 <_printf_common+0x62>
 800482a:	2301      	movs	r3, #1
 800482c:	4622      	mov	r2, r4
 800482e:	4639      	mov	r1, r7
 8004830:	4630      	mov	r0, r6
 8004832:	47c0      	blx	r8
 8004834:	3001      	adds	r0, #1
 8004836:	d0e6      	beq.n	8004806 <_printf_common+0xb2>
 8004838:	f109 0901 	add.w	r9, r9, #1
 800483c:	e7d8      	b.n	80047f0 <_printf_common+0x9c>
	...

08004840 <_printf_i>:
 8004840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004844:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004848:	460c      	mov	r4, r1
 800484a:	7e09      	ldrb	r1, [r1, #24]
 800484c:	b085      	sub	sp, #20
 800484e:	296e      	cmp	r1, #110	; 0x6e
 8004850:	4617      	mov	r7, r2
 8004852:	4606      	mov	r6, r0
 8004854:	4698      	mov	r8, r3
 8004856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004858:	f000 80b3 	beq.w	80049c2 <_printf_i+0x182>
 800485c:	d822      	bhi.n	80048a4 <_printf_i+0x64>
 800485e:	2963      	cmp	r1, #99	; 0x63
 8004860:	d036      	beq.n	80048d0 <_printf_i+0x90>
 8004862:	d80a      	bhi.n	800487a <_printf_i+0x3a>
 8004864:	2900      	cmp	r1, #0
 8004866:	f000 80b9 	beq.w	80049dc <_printf_i+0x19c>
 800486a:	2958      	cmp	r1, #88	; 0x58
 800486c:	f000 8083 	beq.w	8004976 <_printf_i+0x136>
 8004870:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004874:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004878:	e032      	b.n	80048e0 <_printf_i+0xa0>
 800487a:	2964      	cmp	r1, #100	; 0x64
 800487c:	d001      	beq.n	8004882 <_printf_i+0x42>
 800487e:	2969      	cmp	r1, #105	; 0x69
 8004880:	d1f6      	bne.n	8004870 <_printf_i+0x30>
 8004882:	6820      	ldr	r0, [r4, #0]
 8004884:	6813      	ldr	r3, [r2, #0]
 8004886:	0605      	lsls	r5, r0, #24
 8004888:	f103 0104 	add.w	r1, r3, #4
 800488c:	d52a      	bpl.n	80048e4 <_printf_i+0xa4>
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6011      	str	r1, [r2, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	da03      	bge.n	800489e <_printf_i+0x5e>
 8004896:	222d      	movs	r2, #45	; 0x2d
 8004898:	425b      	negs	r3, r3
 800489a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800489e:	486f      	ldr	r0, [pc, #444]	; (8004a5c <_printf_i+0x21c>)
 80048a0:	220a      	movs	r2, #10
 80048a2:	e039      	b.n	8004918 <_printf_i+0xd8>
 80048a4:	2973      	cmp	r1, #115	; 0x73
 80048a6:	f000 809d 	beq.w	80049e4 <_printf_i+0x1a4>
 80048aa:	d808      	bhi.n	80048be <_printf_i+0x7e>
 80048ac:	296f      	cmp	r1, #111	; 0x6f
 80048ae:	d020      	beq.n	80048f2 <_printf_i+0xb2>
 80048b0:	2970      	cmp	r1, #112	; 0x70
 80048b2:	d1dd      	bne.n	8004870 <_printf_i+0x30>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	f043 0320 	orr.w	r3, r3, #32
 80048ba:	6023      	str	r3, [r4, #0]
 80048bc:	e003      	b.n	80048c6 <_printf_i+0x86>
 80048be:	2975      	cmp	r1, #117	; 0x75
 80048c0:	d017      	beq.n	80048f2 <_printf_i+0xb2>
 80048c2:	2978      	cmp	r1, #120	; 0x78
 80048c4:	d1d4      	bne.n	8004870 <_printf_i+0x30>
 80048c6:	2378      	movs	r3, #120	; 0x78
 80048c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048cc:	4864      	ldr	r0, [pc, #400]	; (8004a60 <_printf_i+0x220>)
 80048ce:	e055      	b.n	800497c <_printf_i+0x13c>
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	1d19      	adds	r1, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6011      	str	r1, [r2, #0]
 80048d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048e0:	2301      	movs	r3, #1
 80048e2:	e08c      	b.n	80049fe <_printf_i+0x1be>
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6011      	str	r1, [r2, #0]
 80048e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048ec:	bf18      	it	ne
 80048ee:	b21b      	sxthne	r3, r3
 80048f0:	e7cf      	b.n	8004892 <_printf_i+0x52>
 80048f2:	6813      	ldr	r3, [r2, #0]
 80048f4:	6825      	ldr	r5, [r4, #0]
 80048f6:	1d18      	adds	r0, r3, #4
 80048f8:	6010      	str	r0, [r2, #0]
 80048fa:	0628      	lsls	r0, r5, #24
 80048fc:	d501      	bpl.n	8004902 <_printf_i+0xc2>
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	e002      	b.n	8004908 <_printf_i+0xc8>
 8004902:	0668      	lsls	r0, r5, #25
 8004904:	d5fb      	bpl.n	80048fe <_printf_i+0xbe>
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	4854      	ldr	r0, [pc, #336]	; (8004a5c <_printf_i+0x21c>)
 800490a:	296f      	cmp	r1, #111	; 0x6f
 800490c:	bf14      	ite	ne
 800490e:	220a      	movne	r2, #10
 8004910:	2208      	moveq	r2, #8
 8004912:	2100      	movs	r1, #0
 8004914:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004918:	6865      	ldr	r5, [r4, #4]
 800491a:	60a5      	str	r5, [r4, #8]
 800491c:	2d00      	cmp	r5, #0
 800491e:	f2c0 8095 	blt.w	8004a4c <_printf_i+0x20c>
 8004922:	6821      	ldr	r1, [r4, #0]
 8004924:	f021 0104 	bic.w	r1, r1, #4
 8004928:	6021      	str	r1, [r4, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d13d      	bne.n	80049aa <_printf_i+0x16a>
 800492e:	2d00      	cmp	r5, #0
 8004930:	f040 808e 	bne.w	8004a50 <_printf_i+0x210>
 8004934:	4665      	mov	r5, ip
 8004936:	2a08      	cmp	r2, #8
 8004938:	d10b      	bne.n	8004952 <_printf_i+0x112>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	07db      	lsls	r3, r3, #31
 800493e:	d508      	bpl.n	8004952 <_printf_i+0x112>
 8004940:	6923      	ldr	r3, [r4, #16]
 8004942:	6862      	ldr	r2, [r4, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	bfde      	ittt	le
 8004948:	2330      	movle	r3, #48	; 0x30
 800494a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800494e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004952:	ebac 0305 	sub.w	r3, ip, r5
 8004956:	6123      	str	r3, [r4, #16]
 8004958:	f8cd 8000 	str.w	r8, [sp]
 800495c:	463b      	mov	r3, r7
 800495e:	aa03      	add	r2, sp, #12
 8004960:	4621      	mov	r1, r4
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff fef6 	bl	8004754 <_printf_common>
 8004968:	3001      	adds	r0, #1
 800496a:	d14d      	bne.n	8004a08 <_printf_i+0x1c8>
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	b005      	add	sp, #20
 8004972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004976:	4839      	ldr	r0, [pc, #228]	; (8004a5c <_printf_i+0x21c>)
 8004978:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	6821      	ldr	r1, [r4, #0]
 8004980:	1d1d      	adds	r5, r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6015      	str	r5, [r2, #0]
 8004986:	060a      	lsls	r2, r1, #24
 8004988:	d50b      	bpl.n	80049a2 <_printf_i+0x162>
 800498a:	07ca      	lsls	r2, r1, #31
 800498c:	bf44      	itt	mi
 800498e:	f041 0120 	orrmi.w	r1, r1, #32
 8004992:	6021      	strmi	r1, [r4, #0]
 8004994:	b91b      	cbnz	r3, 800499e <_printf_i+0x15e>
 8004996:	6822      	ldr	r2, [r4, #0]
 8004998:	f022 0220 	bic.w	r2, r2, #32
 800499c:	6022      	str	r2, [r4, #0]
 800499e:	2210      	movs	r2, #16
 80049a0:	e7b7      	b.n	8004912 <_printf_i+0xd2>
 80049a2:	064d      	lsls	r5, r1, #25
 80049a4:	bf48      	it	mi
 80049a6:	b29b      	uxthmi	r3, r3
 80049a8:	e7ef      	b.n	800498a <_printf_i+0x14a>
 80049aa:	4665      	mov	r5, ip
 80049ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80049b0:	fb02 3311 	mls	r3, r2, r1, r3
 80049b4:	5cc3      	ldrb	r3, [r0, r3]
 80049b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049ba:	460b      	mov	r3, r1
 80049bc:	2900      	cmp	r1, #0
 80049be:	d1f5      	bne.n	80049ac <_printf_i+0x16c>
 80049c0:	e7b9      	b.n	8004936 <_printf_i+0xf6>
 80049c2:	6813      	ldr	r3, [r2, #0]
 80049c4:	6825      	ldr	r5, [r4, #0]
 80049c6:	6961      	ldr	r1, [r4, #20]
 80049c8:	1d18      	adds	r0, r3, #4
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	0628      	lsls	r0, r5, #24
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	d501      	bpl.n	80049d6 <_printf_i+0x196>
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	e002      	b.n	80049dc <_printf_i+0x19c>
 80049d6:	066a      	lsls	r2, r5, #25
 80049d8:	d5fb      	bpl.n	80049d2 <_printf_i+0x192>
 80049da:	8019      	strh	r1, [r3, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	4665      	mov	r5, ip
 80049e2:	e7b9      	b.n	8004958 <_printf_i+0x118>
 80049e4:	6813      	ldr	r3, [r2, #0]
 80049e6:	1d19      	adds	r1, r3, #4
 80049e8:	6011      	str	r1, [r2, #0]
 80049ea:	681d      	ldr	r5, [r3, #0]
 80049ec:	6862      	ldr	r2, [r4, #4]
 80049ee:	2100      	movs	r1, #0
 80049f0:	4628      	mov	r0, r5
 80049f2:	f7fb fbf5 	bl	80001e0 <memchr>
 80049f6:	b108      	cbz	r0, 80049fc <_printf_i+0x1bc>
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2300      	movs	r3, #0
 8004a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a06:	e7a7      	b.n	8004958 <_printf_i+0x118>
 8004a08:	6923      	ldr	r3, [r4, #16]
 8004a0a:	462a      	mov	r2, r5
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	4630      	mov	r0, r6
 8004a10:	47c0      	blx	r8
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0aa      	beq.n	800496c <_printf_i+0x12c>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	d413      	bmi.n	8004a44 <_printf_i+0x204>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e7a3      	b.n	8004970 <_printf_i+0x130>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	464a      	mov	r2, r9
 8004a2c:	4639      	mov	r1, r7
 8004a2e:	4630      	mov	r0, r6
 8004a30:	47c0      	blx	r8
 8004a32:	3001      	adds	r0, #1
 8004a34:	d09a      	beq.n	800496c <_printf_i+0x12c>
 8004a36:	3501      	adds	r5, #1
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	9a03      	ldr	r2, [sp, #12]
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	dcf2      	bgt.n	8004a28 <_printf_i+0x1e8>
 8004a42:	e7eb      	b.n	8004a1c <_printf_i+0x1dc>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f104 0919 	add.w	r9, r4, #25
 8004a4a:	e7f5      	b.n	8004a38 <_printf_i+0x1f8>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1ac      	bne.n	80049aa <_printf_i+0x16a>
 8004a50:	7803      	ldrb	r3, [r0, #0]
 8004a52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5a:	e76c      	b.n	8004936 <_printf_i+0xf6>
 8004a5c:	08005e31 	.word	0x08005e31
 8004a60:	08005e42 	.word	0x08005e42

08004a64 <memcpy>:
 8004a64:	b510      	push	{r4, lr}
 8004a66:	1e43      	subs	r3, r0, #1
 8004a68:	440a      	add	r2, r1
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	d100      	bne.n	8004a70 <memcpy+0xc>
 8004a6e:	bd10      	pop	{r4, pc}
 8004a70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a78:	e7f7      	b.n	8004a6a <memcpy+0x6>

08004a7a <memmove>:
 8004a7a:	4288      	cmp	r0, r1
 8004a7c:	b510      	push	{r4, lr}
 8004a7e:	eb01 0302 	add.w	r3, r1, r2
 8004a82:	d807      	bhi.n	8004a94 <memmove+0x1a>
 8004a84:	1e42      	subs	r2, r0, #1
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d00a      	beq.n	8004aa0 <memmove+0x26>
 8004a8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a92:	e7f8      	b.n	8004a86 <memmove+0xc>
 8004a94:	4283      	cmp	r3, r0
 8004a96:	d9f5      	bls.n	8004a84 <memmove+0xa>
 8004a98:	1881      	adds	r1, r0, r2
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	42d3      	cmn	r3, r2
 8004a9e:	d100      	bne.n	8004aa2 <memmove+0x28>
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aa6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004aaa:	e7f7      	b.n	8004a9c <memmove+0x22>

08004aac <_free_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	4605      	mov	r5, r0
 8004ab0:	2900      	cmp	r1, #0
 8004ab2:	d045      	beq.n	8004b40 <_free_r+0x94>
 8004ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ab8:	1f0c      	subs	r4, r1, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bfb8      	it	lt
 8004abe:	18e4      	addlt	r4, r4, r3
 8004ac0:	f000 f8d2 	bl	8004c68 <__malloc_lock>
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <_free_r+0x98>)
 8004ac6:	6813      	ldr	r3, [r2, #0]
 8004ac8:	4610      	mov	r0, r2
 8004aca:	b933      	cbnz	r3, 8004ada <_free_r+0x2e>
 8004acc:	6063      	str	r3, [r4, #4]
 8004ace:	6014      	str	r4, [r2, #0]
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ad6:	f000 b8c8 	b.w	8004c6a <__malloc_unlock>
 8004ada:	42a3      	cmp	r3, r4
 8004adc:	d90c      	bls.n	8004af8 <_free_r+0x4c>
 8004ade:	6821      	ldr	r1, [r4, #0]
 8004ae0:	1862      	adds	r2, r4, r1
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	bf04      	itt	eq
 8004ae6:	681a      	ldreq	r2, [r3, #0]
 8004ae8:	685b      	ldreq	r3, [r3, #4]
 8004aea:	6063      	str	r3, [r4, #4]
 8004aec:	bf04      	itt	eq
 8004aee:	1852      	addeq	r2, r2, r1
 8004af0:	6022      	streq	r2, [r4, #0]
 8004af2:	6004      	str	r4, [r0, #0]
 8004af4:	e7ec      	b.n	8004ad0 <_free_r+0x24>
 8004af6:	4613      	mov	r3, r2
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	b10a      	cbz	r2, 8004b00 <_free_r+0x54>
 8004afc:	42a2      	cmp	r2, r4
 8004afe:	d9fa      	bls.n	8004af6 <_free_r+0x4a>
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	1858      	adds	r0, r3, r1
 8004b04:	42a0      	cmp	r0, r4
 8004b06:	d10b      	bne.n	8004b20 <_free_r+0x74>
 8004b08:	6820      	ldr	r0, [r4, #0]
 8004b0a:	4401      	add	r1, r0
 8004b0c:	1858      	adds	r0, r3, r1
 8004b0e:	4282      	cmp	r2, r0
 8004b10:	6019      	str	r1, [r3, #0]
 8004b12:	d1dd      	bne.n	8004ad0 <_free_r+0x24>
 8004b14:	6810      	ldr	r0, [r2, #0]
 8004b16:	6852      	ldr	r2, [r2, #4]
 8004b18:	605a      	str	r2, [r3, #4]
 8004b1a:	4401      	add	r1, r0
 8004b1c:	6019      	str	r1, [r3, #0]
 8004b1e:	e7d7      	b.n	8004ad0 <_free_r+0x24>
 8004b20:	d902      	bls.n	8004b28 <_free_r+0x7c>
 8004b22:	230c      	movs	r3, #12
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	e7d3      	b.n	8004ad0 <_free_r+0x24>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	1821      	adds	r1, r4, r0
 8004b2c:	428a      	cmp	r2, r1
 8004b2e:	bf04      	itt	eq
 8004b30:	6811      	ldreq	r1, [r2, #0]
 8004b32:	6852      	ldreq	r2, [r2, #4]
 8004b34:	6062      	str	r2, [r4, #4]
 8004b36:	bf04      	itt	eq
 8004b38:	1809      	addeq	r1, r1, r0
 8004b3a:	6021      	streq	r1, [r4, #0]
 8004b3c:	605c      	str	r4, [r3, #4]
 8004b3e:	e7c7      	b.n	8004ad0 <_free_r+0x24>
 8004b40:	bd38      	pop	{r3, r4, r5, pc}
 8004b42:	bf00      	nop
 8004b44:	20000098 	.word	0x20000098

08004b48 <_malloc_r>:
 8004b48:	b570      	push	{r4, r5, r6, lr}
 8004b4a:	1ccd      	adds	r5, r1, #3
 8004b4c:	f025 0503 	bic.w	r5, r5, #3
 8004b50:	3508      	adds	r5, #8
 8004b52:	2d0c      	cmp	r5, #12
 8004b54:	bf38      	it	cc
 8004b56:	250c      	movcc	r5, #12
 8004b58:	2d00      	cmp	r5, #0
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	db01      	blt.n	8004b62 <_malloc_r+0x1a>
 8004b5e:	42a9      	cmp	r1, r5
 8004b60:	d903      	bls.n	8004b6a <_malloc_r+0x22>
 8004b62:	230c      	movs	r3, #12
 8004b64:	6033      	str	r3, [r6, #0]
 8004b66:	2000      	movs	r0, #0
 8004b68:	bd70      	pop	{r4, r5, r6, pc}
 8004b6a:	f000 f87d 	bl	8004c68 <__malloc_lock>
 8004b6e:	4a21      	ldr	r2, [pc, #132]	; (8004bf4 <_malloc_r+0xac>)
 8004b70:	6814      	ldr	r4, [r2, #0]
 8004b72:	4621      	mov	r1, r4
 8004b74:	b991      	cbnz	r1, 8004b9c <_malloc_r+0x54>
 8004b76:	4c20      	ldr	r4, [pc, #128]	; (8004bf8 <_malloc_r+0xb0>)
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	b91b      	cbnz	r3, 8004b84 <_malloc_r+0x3c>
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 f863 	bl	8004c48 <_sbrk_r>
 8004b82:	6020      	str	r0, [r4, #0]
 8004b84:	4629      	mov	r1, r5
 8004b86:	4630      	mov	r0, r6
 8004b88:	f000 f85e 	bl	8004c48 <_sbrk_r>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d124      	bne.n	8004bda <_malloc_r+0x92>
 8004b90:	230c      	movs	r3, #12
 8004b92:	6033      	str	r3, [r6, #0]
 8004b94:	4630      	mov	r0, r6
 8004b96:	f000 f868 	bl	8004c6a <__malloc_unlock>
 8004b9a:	e7e4      	b.n	8004b66 <_malloc_r+0x1e>
 8004b9c:	680b      	ldr	r3, [r1, #0]
 8004b9e:	1b5b      	subs	r3, r3, r5
 8004ba0:	d418      	bmi.n	8004bd4 <_malloc_r+0x8c>
 8004ba2:	2b0b      	cmp	r3, #11
 8004ba4:	d90f      	bls.n	8004bc6 <_malloc_r+0x7e>
 8004ba6:	600b      	str	r3, [r1, #0]
 8004ba8:	50cd      	str	r5, [r1, r3]
 8004baa:	18cc      	adds	r4, r1, r3
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 f85c 	bl	8004c6a <__malloc_unlock>
 8004bb2:	f104 000b 	add.w	r0, r4, #11
 8004bb6:	1d23      	adds	r3, r4, #4
 8004bb8:	f020 0007 	bic.w	r0, r0, #7
 8004bbc:	1ac3      	subs	r3, r0, r3
 8004bbe:	d0d3      	beq.n	8004b68 <_malloc_r+0x20>
 8004bc0:	425a      	negs	r2, r3
 8004bc2:	50e2      	str	r2, [r4, r3]
 8004bc4:	e7d0      	b.n	8004b68 <_malloc_r+0x20>
 8004bc6:	428c      	cmp	r4, r1
 8004bc8:	684b      	ldr	r3, [r1, #4]
 8004bca:	bf16      	itet	ne
 8004bcc:	6063      	strne	r3, [r4, #4]
 8004bce:	6013      	streq	r3, [r2, #0]
 8004bd0:	460c      	movne	r4, r1
 8004bd2:	e7eb      	b.n	8004bac <_malloc_r+0x64>
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	6849      	ldr	r1, [r1, #4]
 8004bd8:	e7cc      	b.n	8004b74 <_malloc_r+0x2c>
 8004bda:	1cc4      	adds	r4, r0, #3
 8004bdc:	f024 0403 	bic.w	r4, r4, #3
 8004be0:	42a0      	cmp	r0, r4
 8004be2:	d005      	beq.n	8004bf0 <_malloc_r+0xa8>
 8004be4:	1a21      	subs	r1, r4, r0
 8004be6:	4630      	mov	r0, r6
 8004be8:	f000 f82e 	bl	8004c48 <_sbrk_r>
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0cf      	beq.n	8004b90 <_malloc_r+0x48>
 8004bf0:	6025      	str	r5, [r4, #0]
 8004bf2:	e7db      	b.n	8004bac <_malloc_r+0x64>
 8004bf4:	20000098 	.word	0x20000098
 8004bf8:	2000009c 	.word	0x2000009c

08004bfc <_realloc_r>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	4607      	mov	r7, r0
 8004c00:	4614      	mov	r4, r2
 8004c02:	460e      	mov	r6, r1
 8004c04:	b921      	cbnz	r1, 8004c10 <_realloc_r+0x14>
 8004c06:	4611      	mov	r1, r2
 8004c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c0c:	f7ff bf9c 	b.w	8004b48 <_malloc_r>
 8004c10:	b922      	cbnz	r2, 8004c1c <_realloc_r+0x20>
 8004c12:	f7ff ff4b 	bl	8004aac <_free_r>
 8004c16:	4625      	mov	r5, r4
 8004c18:	4628      	mov	r0, r5
 8004c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c1c:	f000 f826 	bl	8004c6c <_malloc_usable_size_r>
 8004c20:	42a0      	cmp	r0, r4
 8004c22:	d20f      	bcs.n	8004c44 <_realloc_r+0x48>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4638      	mov	r0, r7
 8004c28:	f7ff ff8e 	bl	8004b48 <_malloc_r>
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	d0f2      	beq.n	8004c18 <_realloc_r+0x1c>
 8004c32:	4631      	mov	r1, r6
 8004c34:	4622      	mov	r2, r4
 8004c36:	f7ff ff15 	bl	8004a64 <memcpy>
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	f7ff ff35 	bl	8004aac <_free_r>
 8004c42:	e7e9      	b.n	8004c18 <_realloc_r+0x1c>
 8004c44:	4635      	mov	r5, r6
 8004c46:	e7e7      	b.n	8004c18 <_realloc_r+0x1c>

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4c06      	ldr	r4, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4605      	mov	r5, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	f7fc fd9a 	bl	800178c <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	20000184 	.word	0x20000184

08004c68 <__malloc_lock>:
 8004c68:	4770      	bx	lr

08004c6a <__malloc_unlock>:
 8004c6a:	4770      	bx	lr

08004c6c <_malloc_usable_size_r>:
 8004c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c70:	1f18      	subs	r0, r3, #4
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbc      	itt	lt
 8004c76:	580b      	ldrlt	r3, [r1, r0]
 8004c78:	18c0      	addlt	r0, r0, r3
 8004c7a:	4770      	bx	lr

08004c7c <pow>:
 8004c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c80:	ed2d 8b04 	vpush	{d8-d9}
 8004c84:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004f58 <pow+0x2dc>
 8004c88:	b08d      	sub	sp, #52	; 0x34
 8004c8a:	ec57 6b10 	vmov	r6, r7, d0
 8004c8e:	ec55 4b11 	vmov	r4, r5, d1
 8004c92:	f000 f965 	bl	8004f60 <__ieee754_pow>
 8004c96:	f999 3000 	ldrsb.w	r3, [r9]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8004ca2:	eef0 8a60 	vmov.f32	s17, s1
 8004ca6:	46c8      	mov	r8, r9
 8004ca8:	d05f      	beq.n	8004d6a <pow+0xee>
 8004caa:	4622      	mov	r2, r4
 8004cac:	462b      	mov	r3, r5
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fb ff3b 	bl	8000b2c <__aeabi_dcmpun>
 8004cb6:	4683      	mov	fp, r0
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	d156      	bne.n	8004d6a <pow+0xee>
 8004cbc:	4632      	mov	r2, r6
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb ff32 	bl	8000b2c <__aeabi_dcmpun>
 8004cc8:	9001      	str	r0, [sp, #4]
 8004cca:	b1e8      	cbz	r0, 8004d08 <pow+0x8c>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	f7fb fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d046      	beq.n	8004d6a <pow+0xee>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	9302      	str	r3, [sp, #8]
 8004ce0:	4b96      	ldr	r3, [pc, #600]	; (8004f3c <pow+0x2c0>)
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	4b96      	ldr	r3, [pc, #600]	; (8004f40 <pow+0x2c4>)
 8004ce6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004cea:	2200      	movs	r2, #0
 8004cec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cf0:	9b00      	ldr	r3, [sp, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cf8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004cfc:	d033      	beq.n	8004d66 <pow+0xea>
 8004cfe:	a802      	add	r0, sp, #8
 8004d00:	f000 fefd 	bl	8005afe <matherr>
 8004d04:	bb48      	cbnz	r0, 8004d5a <pow+0xde>
 8004d06:	e05d      	b.n	8004dc4 <pow+0x148>
 8004d08:	f04f 0a00 	mov.w	sl, #0
 8004d0c:	f04f 0b00 	mov.w	fp, #0
 8004d10:	4652      	mov	r2, sl
 8004d12:	465b      	mov	r3, fp
 8004d14:	4630      	mov	r0, r6
 8004d16:	4639      	mov	r1, r7
 8004d18:	f7fb fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1c:	ec4b ab19 	vmov	d9, sl, fp
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d054      	beq.n	8004dce <pow+0x152>
 8004d24:	4652      	mov	r2, sl
 8004d26:	465b      	mov	r3, fp
 8004d28:	4620      	mov	r0, r4
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	f7fb fecc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d30:	4680      	mov	r8, r0
 8004d32:	b318      	cbz	r0, 8004d7c <pow+0x100>
 8004d34:	2301      	movs	r3, #1
 8004d36:	9302      	str	r3, [sp, #8]
 8004d38:	4b80      	ldr	r3, [pc, #512]	; (8004f3c <pow+0x2c0>)
 8004d3a:	9303      	str	r3, [sp, #12]
 8004d3c:	9b01      	ldr	r3, [sp, #4]
 8004d3e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d40:	9b00      	ldr	r3, [sp, #0]
 8004d42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d4a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d0d5      	beq.n	8004cfe <pow+0x82>
 8004d52:	4b7b      	ldr	r3, [pc, #492]	; (8004f40 <pow+0x2c4>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d5c:	b11b      	cbz	r3, 8004d66 <pow+0xea>
 8004d5e:	f7ff fb55 	bl	800440c <__errno>
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	6003      	str	r3, [r0, #0]
 8004d66:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004d6a:	eeb0 0a48 	vmov.f32	s0, s16
 8004d6e:	eef0 0a68 	vmov.f32	s1, s17
 8004d72:	b00d      	add	sp, #52	; 0x34
 8004d74:	ecbd 8b04 	vpop	{d8-d9}
 8004d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d7c:	ec45 4b10 	vmov	d0, r4, r5
 8004d80:	f000 feb5 	bl	8005aee <finite>
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d0f0      	beq.n	8004d6a <pow+0xee>
 8004d88:	4652      	mov	r2, sl
 8004d8a:	465b      	mov	r3, fp
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f7fb fea4 	bl	8000adc <__aeabi_dcmplt>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d0e8      	beq.n	8004d6a <pow+0xee>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	9302      	str	r3, [sp, #8]
 8004d9c:	4b67      	ldr	r3, [pc, #412]	; (8004f3c <pow+0x2c0>)
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	f999 3000 	ldrsb.w	r3, [r9]
 8004da4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004da8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004dac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004db0:	b913      	cbnz	r3, 8004db8 <pow+0x13c>
 8004db2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004db6:	e7a2      	b.n	8004cfe <pow+0x82>
 8004db8:	4962      	ldr	r1, [pc, #392]	; (8004f44 <pow+0x2c8>)
 8004dba:	2000      	movs	r0, #0
 8004dbc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d19c      	bne.n	8004cfe <pow+0x82>
 8004dc4:	f7ff fb22 	bl	800440c <__errno>
 8004dc8:	2321      	movs	r3, #33	; 0x21
 8004dca:	6003      	str	r3, [r0, #0]
 8004dcc:	e7c5      	b.n	8004d5a <pow+0xde>
 8004dce:	eeb0 0a48 	vmov.f32	s0, s16
 8004dd2:	eef0 0a68 	vmov.f32	s1, s17
 8004dd6:	f000 fe8a 	bl	8005aee <finite>
 8004dda:	9000      	str	r0, [sp, #0]
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	f040 8081 	bne.w	8004ee4 <pow+0x268>
 8004de2:	ec47 6b10 	vmov	d0, r6, r7
 8004de6:	f000 fe82 	bl	8005aee <finite>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d07a      	beq.n	8004ee4 <pow+0x268>
 8004dee:	ec45 4b10 	vmov	d0, r4, r5
 8004df2:	f000 fe7c 	bl	8005aee <finite>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d074      	beq.n	8004ee4 <pow+0x268>
 8004dfa:	ec53 2b18 	vmov	r2, r3, d8
 8004dfe:	ee18 0a10 	vmov	r0, s16
 8004e02:	4619      	mov	r1, r3
 8004e04:	f7fb fe92 	bl	8000b2c <__aeabi_dcmpun>
 8004e08:	f999 9000 	ldrsb.w	r9, [r9]
 8004e0c:	4b4b      	ldr	r3, [pc, #300]	; (8004f3c <pow+0x2c0>)
 8004e0e:	b1b0      	cbz	r0, 8004e3e <pow+0x1c2>
 8004e10:	2201      	movs	r2, #1
 8004e12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e16:	9b00      	ldr	r3, [sp, #0]
 8004e18:	930a      	str	r3, [sp, #40]	; 0x28
 8004e1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e22:	f1b9 0f00 	cmp.w	r9, #0
 8004e26:	d0c4      	beq.n	8004db2 <pow+0x136>
 8004e28:	4652      	mov	r2, sl
 8004e2a:	465b      	mov	r3, fp
 8004e2c:	4650      	mov	r0, sl
 8004e2e:	4659      	mov	r1, fp
 8004e30:	f7fb fd0c 	bl	800084c <__aeabi_ddiv>
 8004e34:	f1b9 0f02 	cmp.w	r9, #2
 8004e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004e3c:	e7c1      	b.n	8004dc2 <pow+0x146>
 8004e3e:	2203      	movs	r2, #3
 8004e40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e44:	900a      	str	r0, [sp, #40]	; 0x28
 8004e46:	4629      	mov	r1, r5
 8004e48:	4620      	mov	r0, r4
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <pow+0x2cc>)
 8004e4e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004e52:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004e56:	f7fb fbcf 	bl	80005f8 <__aeabi_dmul>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	460d      	mov	r5, r1
 8004e5e:	f1b9 0f00 	cmp.w	r9, #0
 8004e62:	d124      	bne.n	8004eae <pow+0x232>
 8004e64:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <pow+0x2d0>)
 8004e66:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004e6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4652      	mov	r2, sl
 8004e72:	465b      	mov	r3, fp
 8004e74:	4639      	mov	r1, r7
 8004e76:	f7fb fe31 	bl	8000adc <__aeabi_dcmplt>
 8004e7a:	2800      	cmp	r0, #0
 8004e7c:	d056      	beq.n	8004f2c <pow+0x2b0>
 8004e7e:	ec45 4b10 	vmov	d0, r4, r5
 8004e82:	f000 fe49 	bl	8005b18 <rint>
 8004e86:	4622      	mov	r2, r4
 8004e88:	462b      	mov	r3, r5
 8004e8a:	ec51 0b10 	vmov	r0, r1, d0
 8004e8e:	f7fb fe1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e92:	b920      	cbnz	r0, 8004e9e <pow+0x222>
 8004e94:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <pow+0x2d4>)
 8004e96:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004e9e:	f998 3000 	ldrsb.w	r3, [r8]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d142      	bne.n	8004f2c <pow+0x2b0>
 8004ea6:	f7ff fab1 	bl	800440c <__errno>
 8004eaa:	2322      	movs	r3, #34	; 0x22
 8004eac:	e78d      	b.n	8004dca <pow+0x14e>
 8004eae:	4b29      	ldr	r3, [pc, #164]	; (8004f54 <pow+0x2d8>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4652      	mov	r2, sl
 8004eba:	465b      	mov	r3, fp
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fe0d 	bl	8000adc <__aeabi_dcmplt>
 8004ec2:	2800      	cmp	r0, #0
 8004ec4:	d0eb      	beq.n	8004e9e <pow+0x222>
 8004ec6:	ec45 4b10 	vmov	d0, r4, r5
 8004eca:	f000 fe25 	bl	8005b18 <rint>
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	ec51 0b10 	vmov	r0, r1, d0
 8004ed6:	f7fb fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d1df      	bne.n	8004e9e <pow+0x222>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <pow+0x2c8>)
 8004ee2:	e7da      	b.n	8004e9a <pow+0x21e>
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	ec51 0b18 	vmov	r0, r1, d8
 8004eec:	f7fb fdec 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	f43f af3a 	beq.w	8004d6a <pow+0xee>
 8004ef6:	ec47 6b10 	vmov	d0, r6, r7
 8004efa:	f000 fdf8 	bl	8005aee <finite>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f43f af33 	beq.w	8004d6a <pow+0xee>
 8004f04:	ec45 4b10 	vmov	d0, r4, r5
 8004f08:	f000 fdf1 	bl	8005aee <finite>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	f43f af2c 	beq.w	8004d6a <pow+0xee>
 8004f12:	2304      	movs	r3, #4
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <pow+0x2c0>)
 8004f18:	9303      	str	r3, [sp, #12]
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	930a      	str	r3, [sp, #40]	; 0x28
 8004f1e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004f22:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004f26:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004f2a:	e7b8      	b.n	8004e9e <pow+0x222>
 8004f2c:	a802      	add	r0, sp, #8
 8004f2e:	f000 fde6 	bl	8005afe <matherr>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f47f af11 	bne.w	8004d5a <pow+0xde>
 8004f38:	e7b5      	b.n	8004ea6 <pow+0x22a>
 8004f3a:	bf00      	nop
 8004f3c:	08005e53 	.word	0x08005e53
 8004f40:	3ff00000 	.word	0x3ff00000
 8004f44:	fff00000 	.word	0xfff00000
 8004f48:	3fe00000 	.word	0x3fe00000
 8004f4c:	47efffff 	.word	0x47efffff
 8004f50:	c7efffff 	.word	0xc7efffff
 8004f54:	7ff00000 	.word	0x7ff00000
 8004f58:	20000070 	.word	0x20000070
 8004f5c:	00000000 	.word	0x00000000

08004f60 <__ieee754_pow>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b091      	sub	sp, #68	; 0x44
 8004f66:	ed8d 1b00 	vstr	d1, [sp]
 8004f6a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004f6e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004f72:	ea58 0302 	orrs.w	r3, r8, r2
 8004f76:	ec57 6b10 	vmov	r6, r7, d0
 8004f7a:	f000 84be 	beq.w	80058fa <__ieee754_pow+0x99a>
 8004f7e:	4b7a      	ldr	r3, [pc, #488]	; (8005168 <__ieee754_pow+0x208>)
 8004f80:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004f84:	429c      	cmp	r4, r3
 8004f86:	463d      	mov	r5, r7
 8004f88:	ee10 aa10 	vmov	sl, s0
 8004f8c:	dc09      	bgt.n	8004fa2 <__ieee754_pow+0x42>
 8004f8e:	d103      	bne.n	8004f98 <__ieee754_pow+0x38>
 8004f90:	b93e      	cbnz	r6, 8004fa2 <__ieee754_pow+0x42>
 8004f92:	45a0      	cmp	r8, r4
 8004f94:	dc0d      	bgt.n	8004fb2 <__ieee754_pow+0x52>
 8004f96:	e001      	b.n	8004f9c <__ieee754_pow+0x3c>
 8004f98:	4598      	cmp	r8, r3
 8004f9a:	dc02      	bgt.n	8004fa2 <__ieee754_pow+0x42>
 8004f9c:	4598      	cmp	r8, r3
 8004f9e:	d10e      	bne.n	8004fbe <__ieee754_pow+0x5e>
 8004fa0:	b16a      	cbz	r2, 8004fbe <__ieee754_pow+0x5e>
 8004fa2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004fa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004faa:	ea54 030a 	orrs.w	r3, r4, sl
 8004fae:	f000 84a4 	beq.w	80058fa <__ieee754_pow+0x99a>
 8004fb2:	486e      	ldr	r0, [pc, #440]	; (800516c <__ieee754_pow+0x20c>)
 8004fb4:	b011      	add	sp, #68	; 0x44
 8004fb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f000 bda5 	b.w	8005b08 <nan>
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	da53      	bge.n	800506a <__ieee754_pow+0x10a>
 8004fc2:	4b6b      	ldr	r3, [pc, #428]	; (8005170 <__ieee754_pow+0x210>)
 8004fc4:	4598      	cmp	r8, r3
 8004fc6:	dc4d      	bgt.n	8005064 <__ieee754_pow+0x104>
 8004fc8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004fcc:	4598      	cmp	r8, r3
 8004fce:	dd4c      	ble.n	800506a <__ieee754_pow+0x10a>
 8004fd0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004fd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004fd8:	2b14      	cmp	r3, #20
 8004fda:	dd26      	ble.n	800502a <__ieee754_pow+0xca>
 8004fdc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004fe0:	fa22 f103 	lsr.w	r1, r2, r3
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d13e      	bne.n	800506a <__ieee754_pow+0x10a>
 8004fec:	f001 0101 	and.w	r1, r1, #1
 8004ff0:	f1c1 0b02 	rsb	fp, r1, #2
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	d15b      	bne.n	80050b0 <__ieee754_pow+0x150>
 8004ff8:	4b5b      	ldr	r3, [pc, #364]	; (8005168 <__ieee754_pow+0x208>)
 8004ffa:	4598      	cmp	r8, r3
 8004ffc:	d124      	bne.n	8005048 <__ieee754_pow+0xe8>
 8004ffe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005002:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005006:	ea53 030a 	orrs.w	r3, r3, sl
 800500a:	f000 8476 	beq.w	80058fa <__ieee754_pow+0x99a>
 800500e:	4b59      	ldr	r3, [pc, #356]	; (8005174 <__ieee754_pow+0x214>)
 8005010:	429c      	cmp	r4, r3
 8005012:	dd2d      	ble.n	8005070 <__ieee754_pow+0x110>
 8005014:	f1b9 0f00 	cmp.w	r9, #0
 8005018:	f280 8473 	bge.w	8005902 <__ieee754_pow+0x9a2>
 800501c:	2000      	movs	r0, #0
 800501e:	2100      	movs	r1, #0
 8005020:	ec41 0b10 	vmov	d0, r0, r1
 8005024:	b011      	add	sp, #68	; 0x44
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	2a00      	cmp	r2, #0
 800502c:	d13e      	bne.n	80050ac <__ieee754_pow+0x14c>
 800502e:	f1c3 0314 	rsb	r3, r3, #20
 8005032:	fa48 f103 	asr.w	r1, r8, r3
 8005036:	fa01 f303 	lsl.w	r3, r1, r3
 800503a:	4543      	cmp	r3, r8
 800503c:	f040 8469 	bne.w	8005912 <__ieee754_pow+0x9b2>
 8005040:	f001 0101 	and.w	r1, r1, #1
 8005044:	f1c1 0b02 	rsb	fp, r1, #2
 8005048:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <__ieee754_pow+0x218>)
 800504a:	4598      	cmp	r8, r3
 800504c:	d118      	bne.n	8005080 <__ieee754_pow+0x120>
 800504e:	f1b9 0f00 	cmp.w	r9, #0
 8005052:	f280 845a 	bge.w	800590a <__ieee754_pow+0x9aa>
 8005056:	4948      	ldr	r1, [pc, #288]	; (8005178 <__ieee754_pow+0x218>)
 8005058:	4632      	mov	r2, r6
 800505a:	463b      	mov	r3, r7
 800505c:	2000      	movs	r0, #0
 800505e:	f7fb fbf5 	bl	800084c <__aeabi_ddiv>
 8005062:	e7dd      	b.n	8005020 <__ieee754_pow+0xc0>
 8005064:	f04f 0b02 	mov.w	fp, #2
 8005068:	e7c4      	b.n	8004ff4 <__ieee754_pow+0x94>
 800506a:	f04f 0b00 	mov.w	fp, #0
 800506e:	e7c1      	b.n	8004ff4 <__ieee754_pow+0x94>
 8005070:	f1b9 0f00 	cmp.w	r9, #0
 8005074:	dad2      	bge.n	800501c <__ieee754_pow+0xbc>
 8005076:	e9dd 0300 	ldrd	r0, r3, [sp]
 800507a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800507e:	e7cf      	b.n	8005020 <__ieee754_pow+0xc0>
 8005080:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005084:	d106      	bne.n	8005094 <__ieee754_pow+0x134>
 8005086:	4632      	mov	r2, r6
 8005088:	463b      	mov	r3, r7
 800508a:	4610      	mov	r0, r2
 800508c:	4619      	mov	r1, r3
 800508e:	f7fb fab3 	bl	80005f8 <__aeabi_dmul>
 8005092:	e7c5      	b.n	8005020 <__ieee754_pow+0xc0>
 8005094:	4b39      	ldr	r3, [pc, #228]	; (800517c <__ieee754_pow+0x21c>)
 8005096:	4599      	cmp	r9, r3
 8005098:	d10a      	bne.n	80050b0 <__ieee754_pow+0x150>
 800509a:	2d00      	cmp	r5, #0
 800509c:	db08      	blt.n	80050b0 <__ieee754_pow+0x150>
 800509e:	ec47 6b10 	vmov	d0, r6, r7
 80050a2:	b011      	add	sp, #68	; 0x44
 80050a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a8:	f000 bc68 	b.w	800597c <__ieee754_sqrt>
 80050ac:	f04f 0b00 	mov.w	fp, #0
 80050b0:	ec47 6b10 	vmov	d0, r6, r7
 80050b4:	f000 fd12 	bl	8005adc <fabs>
 80050b8:	ec51 0b10 	vmov	r0, r1, d0
 80050bc:	f1ba 0f00 	cmp.w	sl, #0
 80050c0:	d127      	bne.n	8005112 <__ieee754_pow+0x1b2>
 80050c2:	b124      	cbz	r4, 80050ce <__ieee754_pow+0x16e>
 80050c4:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <__ieee754_pow+0x218>)
 80050c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d121      	bne.n	8005112 <__ieee754_pow+0x1b2>
 80050ce:	f1b9 0f00 	cmp.w	r9, #0
 80050d2:	da05      	bge.n	80050e0 <__ieee754_pow+0x180>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	2000      	movs	r0, #0
 80050da:	4927      	ldr	r1, [pc, #156]	; (8005178 <__ieee754_pow+0x218>)
 80050dc:	f7fb fbb6 	bl	800084c <__aeabi_ddiv>
 80050e0:	2d00      	cmp	r5, #0
 80050e2:	da9d      	bge.n	8005020 <__ieee754_pow+0xc0>
 80050e4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050e8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050ec:	ea54 030b 	orrs.w	r3, r4, fp
 80050f0:	d108      	bne.n	8005104 <__ieee754_pow+0x1a4>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	f7fb f8c5 	bl	8000288 <__aeabi_dsub>
 80050fe:	4602      	mov	r2, r0
 8005100:	460b      	mov	r3, r1
 8005102:	e7ac      	b.n	800505e <__ieee754_pow+0xfe>
 8005104:	f1bb 0f01 	cmp.w	fp, #1
 8005108:	d18a      	bne.n	8005020 <__ieee754_pow+0xc0>
 800510a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800510e:	4619      	mov	r1, r3
 8005110:	e786      	b.n	8005020 <__ieee754_pow+0xc0>
 8005112:	0fed      	lsrs	r5, r5, #31
 8005114:	1e6b      	subs	r3, r5, #1
 8005116:	930d      	str	r3, [sp, #52]	; 0x34
 8005118:	ea5b 0303 	orrs.w	r3, fp, r3
 800511c:	d102      	bne.n	8005124 <__ieee754_pow+0x1c4>
 800511e:	4632      	mov	r2, r6
 8005120:	463b      	mov	r3, r7
 8005122:	e7e8      	b.n	80050f6 <__ieee754_pow+0x196>
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <__ieee754_pow+0x220>)
 8005126:	4598      	cmp	r8, r3
 8005128:	f340 80fe 	ble.w	8005328 <__ieee754_pow+0x3c8>
 800512c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005130:	4598      	cmp	r8, r3
 8005132:	dd0a      	ble.n	800514a <__ieee754_pow+0x1ea>
 8005134:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <__ieee754_pow+0x214>)
 8005136:	429c      	cmp	r4, r3
 8005138:	dc0d      	bgt.n	8005156 <__ieee754_pow+0x1f6>
 800513a:	f1b9 0f00 	cmp.w	r9, #0
 800513e:	f6bf af6d 	bge.w	800501c <__ieee754_pow+0xbc>
 8005142:	a307      	add	r3, pc, #28	; (adr r3, 8005160 <__ieee754_pow+0x200>)
 8005144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005148:	e79f      	b.n	800508a <__ieee754_pow+0x12a>
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <__ieee754_pow+0x224>)
 800514c:	429c      	cmp	r4, r3
 800514e:	ddf4      	ble.n	800513a <__ieee754_pow+0x1da>
 8005150:	4b09      	ldr	r3, [pc, #36]	; (8005178 <__ieee754_pow+0x218>)
 8005152:	429c      	cmp	r4, r3
 8005154:	dd18      	ble.n	8005188 <__ieee754_pow+0x228>
 8005156:	f1b9 0f00 	cmp.w	r9, #0
 800515a:	dcf2      	bgt.n	8005142 <__ieee754_pow+0x1e2>
 800515c:	e75e      	b.n	800501c <__ieee754_pow+0xbc>
 800515e:	bf00      	nop
 8005160:	8800759c 	.word	0x8800759c
 8005164:	7e37e43c 	.word	0x7e37e43c
 8005168:	7ff00000 	.word	0x7ff00000
 800516c:	08005e25 	.word	0x08005e25
 8005170:	433fffff 	.word	0x433fffff
 8005174:	3fefffff 	.word	0x3fefffff
 8005178:	3ff00000 	.word	0x3ff00000
 800517c:	3fe00000 	.word	0x3fe00000
 8005180:	41e00000 	.word	0x41e00000
 8005184:	3feffffe 	.word	0x3feffffe
 8005188:	2200      	movs	r2, #0
 800518a:	4b63      	ldr	r3, [pc, #396]	; (8005318 <__ieee754_pow+0x3b8>)
 800518c:	f7fb f87c 	bl	8000288 <__aeabi_dsub>
 8005190:	a355      	add	r3, pc, #340	; (adr r3, 80052e8 <__ieee754_pow+0x388>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	f7fb fa2d 	bl	80005f8 <__aeabi_dmul>
 800519e:	a354      	add	r3, pc, #336	; (adr r3, 80052f0 <__ieee754_pow+0x390>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	4606      	mov	r6, r0
 80051a6:	460f      	mov	r7, r1
 80051a8:	4620      	mov	r0, r4
 80051aa:	4629      	mov	r1, r5
 80051ac:	f7fb fa24 	bl	80005f8 <__aeabi_dmul>
 80051b0:	2200      	movs	r2, #0
 80051b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b6:	4b59      	ldr	r3, [pc, #356]	; (800531c <__ieee754_pow+0x3bc>)
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb fa1c 	bl	80005f8 <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	a14c      	add	r1, pc, #304	; (adr r1, 80052f8 <__ieee754_pow+0x398>)
 80051c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ca:	f7fb f85d 	bl	8000288 <__aeabi_dsub>
 80051ce:	4622      	mov	r2, r4
 80051d0:	462b      	mov	r3, r5
 80051d2:	f7fb fa11 	bl	80005f8 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	2000      	movs	r0, #0
 80051dc:	4950      	ldr	r1, [pc, #320]	; (8005320 <__ieee754_pow+0x3c0>)
 80051de:	f7fb f853 	bl	8000288 <__aeabi_dsub>
 80051e2:	4622      	mov	r2, r4
 80051e4:	462b      	mov	r3, r5
 80051e6:	4680      	mov	r8, r0
 80051e8:	4689      	mov	r9, r1
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fb fa03 	bl	80005f8 <__aeabi_dmul>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4640      	mov	r0, r8
 80051f8:	4649      	mov	r1, r9
 80051fa:	f7fb f9fd 	bl	80005f8 <__aeabi_dmul>
 80051fe:	a340      	add	r3, pc, #256	; (adr r3, 8005300 <__ieee754_pow+0x3a0>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb f9f8 	bl	80005f8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005210:	f7fb f83a 	bl	8000288 <__aeabi_dsub>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4604      	mov	r4, r0
 800521a:	460d      	mov	r5, r1
 800521c:	4630      	mov	r0, r6
 800521e:	4639      	mov	r1, r7
 8005220:	f7fb f834 	bl	800028c <__adddf3>
 8005224:	2000      	movs	r0, #0
 8005226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800522a:	4632      	mov	r2, r6
 800522c:	463b      	mov	r3, r7
 800522e:	f7fb f82b 	bl	8000288 <__aeabi_dsub>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4620      	mov	r0, r4
 8005238:	4629      	mov	r1, r5
 800523a:	f7fb f825 	bl	8000288 <__aeabi_dsub>
 800523e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005240:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005244:	4313      	orrs	r3, r2
 8005246:	4606      	mov	r6, r0
 8005248:	460f      	mov	r7, r1
 800524a:	f040 81eb 	bne.w	8005624 <__ieee754_pow+0x6c4>
 800524e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005308 <__ieee754_pow+0x3a8>
 8005252:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005256:	2400      	movs	r4, #0
 8005258:	4622      	mov	r2, r4
 800525a:	462b      	mov	r3, r5
 800525c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005260:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005264:	f7fb f810 	bl	8000288 <__aeabi_dsub>
 8005268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800526c:	f7fb f9c4 	bl	80005f8 <__aeabi_dmul>
 8005270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005274:	4680      	mov	r8, r0
 8005276:	4689      	mov	r9, r1
 8005278:	4630      	mov	r0, r6
 800527a:	4639      	mov	r1, r7
 800527c:	f7fb f9bc 	bl	80005f8 <__aeabi_dmul>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4640      	mov	r0, r8
 8005286:	4649      	mov	r1, r9
 8005288:	f7fb f800 	bl	800028c <__adddf3>
 800528c:	4622      	mov	r2, r4
 800528e:	462b      	mov	r3, r5
 8005290:	4680      	mov	r8, r0
 8005292:	4689      	mov	r9, r1
 8005294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005298:	f7fb f9ae 	bl	80005f8 <__aeabi_dmul>
 800529c:	460b      	mov	r3, r1
 800529e:	4604      	mov	r4, r0
 80052a0:	460d      	mov	r5, r1
 80052a2:	4602      	mov	r2, r0
 80052a4:	4649      	mov	r1, r9
 80052a6:	4640      	mov	r0, r8
 80052a8:	e9cd 4500 	strd	r4, r5, [sp]
 80052ac:	f7fa ffee 	bl	800028c <__adddf3>
 80052b0:	4b1c      	ldr	r3, [pc, #112]	; (8005324 <__ieee754_pow+0x3c4>)
 80052b2:	4299      	cmp	r1, r3
 80052b4:	4606      	mov	r6, r0
 80052b6:	460f      	mov	r7, r1
 80052b8:	468b      	mov	fp, r1
 80052ba:	f340 82f7 	ble.w	80058ac <__ieee754_pow+0x94c>
 80052be:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80052c2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80052c6:	4303      	orrs	r3, r0
 80052c8:	f000 81ea 	beq.w	80056a0 <__ieee754_pow+0x740>
 80052cc:	a310      	add	r3, pc, #64	; (adr r3, 8005310 <__ieee754_pow+0x3b0>)
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d6:	f7fb f98f 	bl	80005f8 <__aeabi_dmul>
 80052da:	a30d      	add	r3, pc, #52	; (adr r3, 8005310 <__ieee754_pow+0x3b0>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	e6d5      	b.n	800508e <__ieee754_pow+0x12e>
 80052e2:	bf00      	nop
 80052e4:	f3af 8000 	nop.w
 80052e8:	60000000 	.word	0x60000000
 80052ec:	3ff71547 	.word	0x3ff71547
 80052f0:	f85ddf44 	.word	0xf85ddf44
 80052f4:	3e54ae0b 	.word	0x3e54ae0b
 80052f8:	55555555 	.word	0x55555555
 80052fc:	3fd55555 	.word	0x3fd55555
 8005300:	652b82fe 	.word	0x652b82fe
 8005304:	3ff71547 	.word	0x3ff71547
 8005308:	00000000 	.word	0x00000000
 800530c:	bff00000 	.word	0xbff00000
 8005310:	8800759c 	.word	0x8800759c
 8005314:	7e37e43c 	.word	0x7e37e43c
 8005318:	3ff00000 	.word	0x3ff00000
 800531c:	3fd00000 	.word	0x3fd00000
 8005320:	3fe00000 	.word	0x3fe00000
 8005324:	408fffff 	.word	0x408fffff
 8005328:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	da05      	bge.n	800533e <__ieee754_pow+0x3de>
 8005332:	4bd3      	ldr	r3, [pc, #844]	; (8005680 <__ieee754_pow+0x720>)
 8005334:	f7fb f960 	bl	80005f8 <__aeabi_dmul>
 8005338:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800533c:	460c      	mov	r4, r1
 800533e:	1523      	asrs	r3, r4, #20
 8005340:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005344:	4413      	add	r3, r2
 8005346:	9309      	str	r3, [sp, #36]	; 0x24
 8005348:	4bce      	ldr	r3, [pc, #824]	; (8005684 <__ieee754_pow+0x724>)
 800534a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800534e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005352:	429c      	cmp	r4, r3
 8005354:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005358:	dd08      	ble.n	800536c <__ieee754_pow+0x40c>
 800535a:	4bcb      	ldr	r3, [pc, #812]	; (8005688 <__ieee754_pow+0x728>)
 800535c:	429c      	cmp	r4, r3
 800535e:	f340 815e 	ble.w	800561e <__ieee754_pow+0x6be>
 8005362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	9309      	str	r3, [sp, #36]	; 0x24
 8005368:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800536c:	f04f 0a00 	mov.w	sl, #0
 8005370:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005374:	930c      	str	r3, [sp, #48]	; 0x30
 8005376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005378:	4bc4      	ldr	r3, [pc, #784]	; (800568c <__ieee754_pow+0x72c>)
 800537a:	4413      	add	r3, r2
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	4629      	mov	r1, r5
 8005382:	ec53 2b17 	vmov	r2, r3, d7
 8005386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800538a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800538e:	f7fa ff7b 	bl	8000288 <__aeabi_dsub>
 8005392:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005396:	4606      	mov	r6, r0
 8005398:	460f      	mov	r7, r1
 800539a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800539e:	f7fa ff75 	bl	800028c <__adddf3>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	2000      	movs	r0, #0
 80053a8:	49b9      	ldr	r1, [pc, #740]	; (8005690 <__ieee754_pow+0x730>)
 80053aa:	f7fb fa4f 	bl	800084c <__aeabi_ddiv>
 80053ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4630      	mov	r0, r6
 80053b8:	4639      	mov	r1, r7
 80053ba:	f7fb f91d 	bl	80005f8 <__aeabi_dmul>
 80053be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053c2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80053ca:	2300      	movs	r3, #0
 80053cc:	9302      	str	r3, [sp, #8]
 80053ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053d2:	106d      	asrs	r5, r5, #1
 80053d4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80053d8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80053dc:	2200      	movs	r2, #0
 80053de:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80053e2:	4640      	mov	r0, r8
 80053e4:	4649      	mov	r1, r9
 80053e6:	4614      	mov	r4, r2
 80053e8:	461d      	mov	r5, r3
 80053ea:	f7fb f905 	bl	80005f8 <__aeabi_dmul>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4630      	mov	r0, r6
 80053f4:	4639      	mov	r1, r7
 80053f6:	f7fa ff47 	bl	8000288 <__aeabi_dsub>
 80053fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	4620      	mov	r0, r4
 8005404:	4629      	mov	r1, r5
 8005406:	f7fa ff3f 	bl	8000288 <__aeabi_dsub>
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005412:	f7fa ff39 	bl	8000288 <__aeabi_dsub>
 8005416:	4642      	mov	r2, r8
 8005418:	464b      	mov	r3, r9
 800541a:	f7fb f8ed 	bl	80005f8 <__aeabi_dmul>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4630      	mov	r0, r6
 8005424:	4639      	mov	r1, r7
 8005426:	f7fa ff2f 	bl	8000288 <__aeabi_dsub>
 800542a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800542e:	f7fb f8e3 	bl	80005f8 <__aeabi_dmul>
 8005432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005436:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800543a:	4610      	mov	r0, r2
 800543c:	4619      	mov	r1, r3
 800543e:	f7fb f8db 	bl	80005f8 <__aeabi_dmul>
 8005442:	a37b      	add	r3, pc, #492	; (adr r3, 8005630 <__ieee754_pow+0x6d0>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	4604      	mov	r4, r0
 800544a:	460d      	mov	r5, r1
 800544c:	f7fb f8d4 	bl	80005f8 <__aeabi_dmul>
 8005450:	a379      	add	r3, pc, #484	; (adr r3, 8005638 <__ieee754_pow+0x6d8>)
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fa ff19 	bl	800028c <__adddf3>
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	f7fb f8cb 	bl	80005f8 <__aeabi_dmul>
 8005462:	a377      	add	r3, pc, #476	; (adr r3, 8005640 <__ieee754_pow+0x6e0>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fa ff10 	bl	800028c <__adddf3>
 800546c:	4622      	mov	r2, r4
 800546e:	462b      	mov	r3, r5
 8005470:	f7fb f8c2 	bl	80005f8 <__aeabi_dmul>
 8005474:	a374      	add	r3, pc, #464	; (adr r3, 8005648 <__ieee754_pow+0x6e8>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fa ff07 	bl	800028c <__adddf3>
 800547e:	4622      	mov	r2, r4
 8005480:	462b      	mov	r3, r5
 8005482:	f7fb f8b9 	bl	80005f8 <__aeabi_dmul>
 8005486:	a372      	add	r3, pc, #456	; (adr r3, 8005650 <__ieee754_pow+0x6f0>)
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f7fa fefe 	bl	800028c <__adddf3>
 8005490:	4622      	mov	r2, r4
 8005492:	462b      	mov	r3, r5
 8005494:	f7fb f8b0 	bl	80005f8 <__aeabi_dmul>
 8005498:	a36f      	add	r3, pc, #444	; (adr r3, 8005658 <__ieee754_pow+0x6f8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fa fef5 	bl	800028c <__adddf3>
 80054a2:	4622      	mov	r2, r4
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	462b      	mov	r3, r5
 80054aa:	4620      	mov	r0, r4
 80054ac:	4629      	mov	r1, r5
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_dmul>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4630      	mov	r0, r6
 80054b8:	4639      	mov	r1, r7
 80054ba:	f7fb f89d 	bl	80005f8 <__aeabi_dmul>
 80054be:	4642      	mov	r2, r8
 80054c0:	4604      	mov	r4, r0
 80054c2:	460d      	mov	r5, r1
 80054c4:	464b      	mov	r3, r9
 80054c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ca:	f7fa fedf 	bl	800028c <__adddf3>
 80054ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80054d2:	f7fb f891 	bl	80005f8 <__aeabi_dmul>
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	f7fa fed7 	bl	800028c <__adddf3>
 80054de:	4642      	mov	r2, r8
 80054e0:	4606      	mov	r6, r0
 80054e2:	460f      	mov	r7, r1
 80054e4:	464b      	mov	r3, r9
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fb f885 	bl	80005f8 <__aeabi_dmul>
 80054ee:	2200      	movs	r2, #0
 80054f0:	4b68      	ldr	r3, [pc, #416]	; (8005694 <__ieee754_pow+0x734>)
 80054f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054f6:	f7fa fec9 	bl	800028c <__adddf3>
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	f7fa fec5 	bl	800028c <__adddf3>
 8005502:	9802      	ldr	r0, [sp, #8]
 8005504:	460d      	mov	r5, r1
 8005506:	4604      	mov	r4, r0
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fb f872 	bl	80005f8 <__aeabi_dmul>
 8005514:	2200      	movs	r2, #0
 8005516:	4680      	mov	r8, r0
 8005518:	4689      	mov	r9, r1
 800551a:	4b5e      	ldr	r3, [pc, #376]	; (8005694 <__ieee754_pow+0x734>)
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fa feb2 	bl	8000288 <__aeabi_dsub>
 8005524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005528:	f7fa feae 	bl	8000288 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fa fea8 	bl	8000288 <__aeabi_dsub>
 8005538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553c:	f7fb f85c 	bl	80005f8 <__aeabi_dmul>
 8005540:	4622      	mov	r2, r4
 8005542:	4606      	mov	r6, r0
 8005544:	460f      	mov	r7, r1
 8005546:	462b      	mov	r3, r5
 8005548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800554c:	f7fb f854 	bl	80005f8 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fa fe98 	bl	800028c <__adddf3>
 800555c:	4606      	mov	r6, r0
 800555e:	460f      	mov	r7, r1
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4640      	mov	r0, r8
 8005566:	4649      	mov	r1, r9
 8005568:	f7fa fe90 	bl	800028c <__adddf3>
 800556c:	9802      	ldr	r0, [sp, #8]
 800556e:	a33c      	add	r3, pc, #240	; (adr r3, 8005660 <__ieee754_pow+0x700>)
 8005570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005574:	4604      	mov	r4, r0
 8005576:	460d      	mov	r5, r1
 8005578:	f7fb f83e 	bl	80005f8 <__aeabi_dmul>
 800557c:	4642      	mov	r2, r8
 800557e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005582:	464b      	mov	r3, r9
 8005584:	4620      	mov	r0, r4
 8005586:	4629      	mov	r1, r5
 8005588:	f7fa fe7e 	bl	8000288 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fa fe78 	bl	8000288 <__aeabi_dsub>
 8005598:	a333      	add	r3, pc, #204	; (adr r3, 8005668 <__ieee754_pow+0x708>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb f82b 	bl	80005f8 <__aeabi_dmul>
 80055a2:	a333      	add	r3, pc, #204	; (adr r3, 8005670 <__ieee754_pow+0x710>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	4606      	mov	r6, r0
 80055aa:	460f      	mov	r7, r1
 80055ac:	4620      	mov	r0, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	f7fb f822 	bl	80005f8 <__aeabi_dmul>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4630      	mov	r0, r6
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fa fe66 	bl	800028c <__adddf3>
 80055c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055c2:	4b35      	ldr	r3, [pc, #212]	; (8005698 <__ieee754_pow+0x738>)
 80055c4:	4413      	add	r3, r2
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fa fe5f 	bl	800028c <__adddf3>
 80055ce:	4604      	mov	r4, r0
 80055d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d2:	460d      	mov	r5, r1
 80055d4:	f7fa ffa6 	bl	8000524 <__aeabi_i2d>
 80055d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80055da:	4b30      	ldr	r3, [pc, #192]	; (800569c <__ieee754_pow+0x73c>)
 80055dc:	4413      	add	r3, r2
 80055de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ee:	f7fa fe4d 	bl	800028c <__adddf3>
 80055f2:	4642      	mov	r2, r8
 80055f4:	464b      	mov	r3, r9
 80055f6:	f7fa fe49 	bl	800028c <__adddf3>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	f7fa fe45 	bl	800028c <__adddf3>
 8005602:	9802      	ldr	r0, [sp, #8]
 8005604:	4632      	mov	r2, r6
 8005606:	463b      	mov	r3, r7
 8005608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800560c:	f7fa fe3c 	bl	8000288 <__aeabi_dsub>
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	f7fa fe38 	bl	8000288 <__aeabi_dsub>
 8005618:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800561c:	e607      	b.n	800522e <__ieee754_pow+0x2ce>
 800561e:	f04f 0a01 	mov.w	sl, #1
 8005622:	e6a5      	b.n	8005370 <__ieee754_pow+0x410>
 8005624:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005678 <__ieee754_pow+0x718>
 8005628:	e613      	b.n	8005252 <__ieee754_pow+0x2f2>
 800562a:	bf00      	nop
 800562c:	f3af 8000 	nop.w
 8005630:	4a454eef 	.word	0x4a454eef
 8005634:	3fca7e28 	.word	0x3fca7e28
 8005638:	93c9db65 	.word	0x93c9db65
 800563c:	3fcd864a 	.word	0x3fcd864a
 8005640:	a91d4101 	.word	0xa91d4101
 8005644:	3fd17460 	.word	0x3fd17460
 8005648:	518f264d 	.word	0x518f264d
 800564c:	3fd55555 	.word	0x3fd55555
 8005650:	db6fabff 	.word	0xdb6fabff
 8005654:	3fdb6db6 	.word	0x3fdb6db6
 8005658:	33333303 	.word	0x33333303
 800565c:	3fe33333 	.word	0x3fe33333
 8005660:	e0000000 	.word	0xe0000000
 8005664:	3feec709 	.word	0x3feec709
 8005668:	dc3a03fd 	.word	0xdc3a03fd
 800566c:	3feec709 	.word	0x3feec709
 8005670:	145b01f5 	.word	0x145b01f5
 8005674:	be3e2fe0 	.word	0xbe3e2fe0
 8005678:	00000000 	.word	0x00000000
 800567c:	3ff00000 	.word	0x3ff00000
 8005680:	43400000 	.word	0x43400000
 8005684:	0003988e 	.word	0x0003988e
 8005688:	000bb679 	.word	0x000bb679
 800568c:	08005e58 	.word	0x08005e58
 8005690:	3ff00000 	.word	0x3ff00000
 8005694:	40080000 	.word	0x40080000
 8005698:	08005e78 	.word	0x08005e78
 800569c:	08005e68 	.word	0x08005e68
 80056a0:	a3b4      	add	r3, pc, #720	; (adr r3, 8005974 <__ieee754_pow+0xa14>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fdef 	bl	800028c <__adddf3>
 80056ae:	4622      	mov	r2, r4
 80056b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b4:	462b      	mov	r3, r5
 80056b6:	4630      	mov	r0, r6
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fa fde5 	bl	8000288 <__aeabi_dsub>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c6:	f7fb fa27 	bl	8000b18 <__aeabi_dcmpgt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f47f adfe 	bne.w	80052cc <__ieee754_pow+0x36c>
 80056d0:	4aa3      	ldr	r2, [pc, #652]	; (8005960 <__ieee754_pow+0xa00>)
 80056d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f340 810a 	ble.w	80058f0 <__ieee754_pow+0x990>
 80056dc:	151b      	asrs	r3, r3, #20
 80056de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80056e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80056e6:	fa4a f303 	asr.w	r3, sl, r3
 80056ea:	445b      	add	r3, fp
 80056ec:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80056f0:	4e9c      	ldr	r6, [pc, #624]	; (8005964 <__ieee754_pow+0xa04>)
 80056f2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80056f6:	4116      	asrs	r6, r2
 80056f8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80056fc:	2000      	movs	r0, #0
 80056fe:	ea23 0106 	bic.w	r1, r3, r6
 8005702:	f1c2 0214 	rsb	r2, r2, #20
 8005706:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800570a:	fa4a fa02 	asr.w	sl, sl, r2
 800570e:	f1bb 0f00 	cmp.w	fp, #0
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	4620      	mov	r0, r4
 8005718:	4629      	mov	r1, r5
 800571a:	bfb8      	it	lt
 800571c:	f1ca 0a00 	rsblt	sl, sl, #0
 8005720:	f7fa fdb2 	bl	8000288 <__aeabi_dsub>
 8005724:	e9cd 0100 	strd	r0, r1, [sp]
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005730:	f7fa fdac 	bl	800028c <__adddf3>
 8005734:	2000      	movs	r0, #0
 8005736:	a378      	add	r3, pc, #480	; (adr r3, 8005918 <__ieee754_pow+0x9b8>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	4604      	mov	r4, r0
 800573e:	460d      	mov	r5, r1
 8005740:	f7fa ff5a 	bl	80005f8 <__aeabi_dmul>
 8005744:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005748:	4606      	mov	r6, r0
 800574a:	460f      	mov	r7, r1
 800574c:	4620      	mov	r0, r4
 800574e:	4629      	mov	r1, r5
 8005750:	f7fa fd9a 	bl	8000288 <__aeabi_dsub>
 8005754:	4602      	mov	r2, r0
 8005756:	460b      	mov	r3, r1
 8005758:	4640      	mov	r0, r8
 800575a:	4649      	mov	r1, r9
 800575c:	f7fa fd94 	bl	8000288 <__aeabi_dsub>
 8005760:	a36f      	add	r3, pc, #444	; (adr r3, 8005920 <__ieee754_pow+0x9c0>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa ff47 	bl	80005f8 <__aeabi_dmul>
 800576a:	a36f      	add	r3, pc, #444	; (adr r3, 8005928 <__ieee754_pow+0x9c8>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	4680      	mov	r8, r0
 8005772:	4689      	mov	r9, r1
 8005774:	4620      	mov	r0, r4
 8005776:	4629      	mov	r1, r5
 8005778:	f7fa ff3e 	bl	80005f8 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4640      	mov	r0, r8
 8005782:	4649      	mov	r1, r9
 8005784:	f7fa fd82 	bl	800028c <__adddf3>
 8005788:	4604      	mov	r4, r0
 800578a:	460d      	mov	r5, r1
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	4630      	mov	r0, r6
 8005792:	4639      	mov	r1, r7
 8005794:	f7fa fd7a 	bl	800028c <__adddf3>
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4680      	mov	r8, r0
 800579e:	4689      	mov	r9, r1
 80057a0:	f7fa fd72 	bl	8000288 <__aeabi_dsub>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fa fd6c 	bl	8000288 <__aeabi_dsub>
 80057b0:	4642      	mov	r2, r8
 80057b2:	4606      	mov	r6, r0
 80057b4:	460f      	mov	r7, r1
 80057b6:	464b      	mov	r3, r9
 80057b8:	4640      	mov	r0, r8
 80057ba:	4649      	mov	r1, r9
 80057bc:	f7fa ff1c 	bl	80005f8 <__aeabi_dmul>
 80057c0:	a35b      	add	r3, pc, #364	; (adr r3, 8005930 <__ieee754_pow+0x9d0>)
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	f7fa ff15 	bl	80005f8 <__aeabi_dmul>
 80057ce:	a35a      	add	r3, pc, #360	; (adr r3, 8005938 <__ieee754_pow+0x9d8>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f7fa fd58 	bl	8000288 <__aeabi_dsub>
 80057d8:	4622      	mov	r2, r4
 80057da:	462b      	mov	r3, r5
 80057dc:	f7fa ff0c 	bl	80005f8 <__aeabi_dmul>
 80057e0:	a357      	add	r3, pc, #348	; (adr r3, 8005940 <__ieee754_pow+0x9e0>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f7fa fd51 	bl	800028c <__adddf3>
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	f7fa ff03 	bl	80005f8 <__aeabi_dmul>
 80057f2:	a355      	add	r3, pc, #340	; (adr r3, 8005948 <__ieee754_pow+0x9e8>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa fd46 	bl	8000288 <__aeabi_dsub>
 80057fc:	4622      	mov	r2, r4
 80057fe:	462b      	mov	r3, r5
 8005800:	f7fa fefa 	bl	80005f8 <__aeabi_dmul>
 8005804:	a352      	add	r3, pc, #328	; (adr r3, 8005950 <__ieee754_pow+0x9f0>)
 8005806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580a:	f7fa fd3f 	bl	800028c <__adddf3>
 800580e:	4622      	mov	r2, r4
 8005810:	462b      	mov	r3, r5
 8005812:	f7fa fef1 	bl	80005f8 <__aeabi_dmul>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4640      	mov	r0, r8
 800581c:	4649      	mov	r1, r9
 800581e:	f7fa fd33 	bl	8000288 <__aeabi_dsub>
 8005822:	4604      	mov	r4, r0
 8005824:	460d      	mov	r5, r1
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4640      	mov	r0, r8
 800582c:	4649      	mov	r1, r9
 800582e:	f7fa fee3 	bl	80005f8 <__aeabi_dmul>
 8005832:	2200      	movs	r2, #0
 8005834:	e9cd 0100 	strd	r0, r1, [sp]
 8005838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800583c:	4620      	mov	r0, r4
 800583e:	4629      	mov	r1, r5
 8005840:	f7fa fd22 	bl	8000288 <__aeabi_dsub>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584c:	f7fa fffe 	bl	800084c <__aeabi_ddiv>
 8005850:	4632      	mov	r2, r6
 8005852:	4604      	mov	r4, r0
 8005854:	460d      	mov	r5, r1
 8005856:	463b      	mov	r3, r7
 8005858:	4640      	mov	r0, r8
 800585a:	4649      	mov	r1, r9
 800585c:	f7fa fecc 	bl	80005f8 <__aeabi_dmul>
 8005860:	4632      	mov	r2, r6
 8005862:	463b      	mov	r3, r7
 8005864:	f7fa fd12 	bl	800028c <__adddf3>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	f7fa fd0a 	bl	8000288 <__aeabi_dsub>
 8005874:	4642      	mov	r2, r8
 8005876:	464b      	mov	r3, r9
 8005878:	f7fa fd06 	bl	8000288 <__aeabi_dsub>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	2000      	movs	r0, #0
 8005882:	4939      	ldr	r1, [pc, #228]	; (8005968 <__ieee754_pow+0xa08>)
 8005884:	f7fa fd00 	bl	8000288 <__aeabi_dsub>
 8005888:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800588c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	da2f      	bge.n	80058f6 <__ieee754_pow+0x996>
 8005896:	4650      	mov	r0, sl
 8005898:	ec43 2b10 	vmov	d0, r2, r3
 800589c:	f000 f9c0 	bl	8005c20 <scalbn>
 80058a0:	ec51 0b10 	vmov	r0, r1, d0
 80058a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80058a8:	f7ff bbf1 	b.w	800508e <__ieee754_pow+0x12e>
 80058ac:	4b2f      	ldr	r3, [pc, #188]	; (800596c <__ieee754_pow+0xa0c>)
 80058ae:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80058b2:	429e      	cmp	r6, r3
 80058b4:	f77f af0c 	ble.w	80056d0 <__ieee754_pow+0x770>
 80058b8:	4b2d      	ldr	r3, [pc, #180]	; (8005970 <__ieee754_pow+0xa10>)
 80058ba:	440b      	add	r3, r1
 80058bc:	4303      	orrs	r3, r0
 80058be:	d00b      	beq.n	80058d8 <__ieee754_pow+0x978>
 80058c0:	a325      	add	r3, pc, #148	; (adr r3, 8005958 <__ieee754_pow+0x9f8>)
 80058c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ca:	f7fa fe95 	bl	80005f8 <__aeabi_dmul>
 80058ce:	a322      	add	r3, pc, #136	; (adr r3, 8005958 <__ieee754_pow+0x9f8>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7ff bbdb 	b.w	800508e <__ieee754_pow+0x12e>
 80058d8:	4622      	mov	r2, r4
 80058da:	462b      	mov	r3, r5
 80058dc:	f7fa fcd4 	bl	8000288 <__aeabi_dsub>
 80058e0:	4642      	mov	r2, r8
 80058e2:	464b      	mov	r3, r9
 80058e4:	f7fb f90e 	bl	8000b04 <__aeabi_dcmpge>
 80058e8:	2800      	cmp	r0, #0
 80058ea:	f43f aef1 	beq.w	80056d0 <__ieee754_pow+0x770>
 80058ee:	e7e7      	b.n	80058c0 <__ieee754_pow+0x960>
 80058f0:	f04f 0a00 	mov.w	sl, #0
 80058f4:	e718      	b.n	8005728 <__ieee754_pow+0x7c8>
 80058f6:	4621      	mov	r1, r4
 80058f8:	e7d4      	b.n	80058a4 <__ieee754_pow+0x944>
 80058fa:	2000      	movs	r0, #0
 80058fc:	491a      	ldr	r1, [pc, #104]	; (8005968 <__ieee754_pow+0xa08>)
 80058fe:	f7ff bb8f 	b.w	8005020 <__ieee754_pow+0xc0>
 8005902:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005906:	f7ff bb8b 	b.w	8005020 <__ieee754_pow+0xc0>
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7ff bb87 	b.w	8005020 <__ieee754_pow+0xc0>
 8005912:	4693      	mov	fp, r2
 8005914:	f7ff bb98 	b.w	8005048 <__ieee754_pow+0xe8>
 8005918:	00000000 	.word	0x00000000
 800591c:	3fe62e43 	.word	0x3fe62e43
 8005920:	fefa39ef 	.word	0xfefa39ef
 8005924:	3fe62e42 	.word	0x3fe62e42
 8005928:	0ca86c39 	.word	0x0ca86c39
 800592c:	be205c61 	.word	0xbe205c61
 8005930:	72bea4d0 	.word	0x72bea4d0
 8005934:	3e663769 	.word	0x3e663769
 8005938:	c5d26bf1 	.word	0xc5d26bf1
 800593c:	3ebbbd41 	.word	0x3ebbbd41
 8005940:	af25de2c 	.word	0xaf25de2c
 8005944:	3f11566a 	.word	0x3f11566a
 8005948:	16bebd93 	.word	0x16bebd93
 800594c:	3f66c16c 	.word	0x3f66c16c
 8005950:	5555553e 	.word	0x5555553e
 8005954:	3fc55555 	.word	0x3fc55555
 8005958:	c2f8f359 	.word	0xc2f8f359
 800595c:	01a56e1f 	.word	0x01a56e1f
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	000fffff 	.word	0x000fffff
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	4090cbff 	.word	0x4090cbff
 8005970:	3f6f3400 	.word	0x3f6f3400
 8005974:	652b82fe 	.word	0x652b82fe
 8005978:	3c971547 	.word	0x3c971547

0800597c <__ieee754_sqrt>:
 800597c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005980:	4955      	ldr	r1, [pc, #340]	; (8005ad8 <__ieee754_sqrt+0x15c>)
 8005982:	ec55 4b10 	vmov	r4, r5, d0
 8005986:	43a9      	bics	r1, r5
 8005988:	462b      	mov	r3, r5
 800598a:	462a      	mov	r2, r5
 800598c:	d112      	bne.n	80059b4 <__ieee754_sqrt+0x38>
 800598e:	ee10 2a10 	vmov	r2, s0
 8005992:	ee10 0a10 	vmov	r0, s0
 8005996:	4629      	mov	r1, r5
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4620      	mov	r0, r4
 80059a2:	4629      	mov	r1, r5
 80059a4:	f7fa fc72 	bl	800028c <__adddf3>
 80059a8:	4604      	mov	r4, r0
 80059aa:	460d      	mov	r5, r1
 80059ac:	ec45 4b10 	vmov	d0, r4, r5
 80059b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	ee10 0a10 	vmov	r0, s0
 80059ba:	4621      	mov	r1, r4
 80059bc:	dc0f      	bgt.n	80059de <__ieee754_sqrt+0x62>
 80059be:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80059c2:	4330      	orrs	r0, r6
 80059c4:	d0f2      	beq.n	80059ac <__ieee754_sqrt+0x30>
 80059c6:	b155      	cbz	r5, 80059de <__ieee754_sqrt+0x62>
 80059c8:	ee10 2a10 	vmov	r2, s0
 80059cc:	4620      	mov	r0, r4
 80059ce:	4629      	mov	r1, r5
 80059d0:	f7fa fc5a 	bl	8000288 <__aeabi_dsub>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	f7fa ff38 	bl	800084c <__aeabi_ddiv>
 80059dc:	e7e4      	b.n	80059a8 <__ieee754_sqrt+0x2c>
 80059de:	151b      	asrs	r3, r3, #20
 80059e0:	d073      	beq.n	8005aca <__ieee754_sqrt+0x14e>
 80059e2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059e6:	07dd      	lsls	r5, r3, #31
 80059e8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80059ec:	bf48      	it	mi
 80059ee:	0fc8      	lsrmi	r0, r1, #31
 80059f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059f4:	bf44      	itt	mi
 80059f6:	0049      	lslmi	r1, r1, #1
 80059f8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80059fc:	2500      	movs	r5, #0
 80059fe:	1058      	asrs	r0, r3, #1
 8005a00:	0fcb      	lsrs	r3, r1, #31
 8005a02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005a06:	0049      	lsls	r1, r1, #1
 8005a08:	2316      	movs	r3, #22
 8005a0a:	462c      	mov	r4, r5
 8005a0c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005a10:	19a7      	adds	r7, r4, r6
 8005a12:	4297      	cmp	r7, r2
 8005a14:	bfde      	ittt	le
 8005a16:	19bc      	addle	r4, r7, r6
 8005a18:	1bd2      	suble	r2, r2, r7
 8005a1a:	19ad      	addle	r5, r5, r6
 8005a1c:	0fcf      	lsrs	r7, r1, #31
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005a24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a2c:	d1f0      	bne.n	8005a10 <__ieee754_sqrt+0x94>
 8005a2e:	f04f 0c20 	mov.w	ip, #32
 8005a32:	469e      	mov	lr, r3
 8005a34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a38:	42a2      	cmp	r2, r4
 8005a3a:	eb06 070e 	add.w	r7, r6, lr
 8005a3e:	dc02      	bgt.n	8005a46 <__ieee754_sqrt+0xca>
 8005a40:	d112      	bne.n	8005a68 <__ieee754_sqrt+0xec>
 8005a42:	428f      	cmp	r7, r1
 8005a44:	d810      	bhi.n	8005a68 <__ieee754_sqrt+0xec>
 8005a46:	2f00      	cmp	r7, #0
 8005a48:	eb07 0e06 	add.w	lr, r7, r6
 8005a4c:	da42      	bge.n	8005ad4 <__ieee754_sqrt+0x158>
 8005a4e:	f1be 0f00 	cmp.w	lr, #0
 8005a52:	db3f      	blt.n	8005ad4 <__ieee754_sqrt+0x158>
 8005a54:	f104 0801 	add.w	r8, r4, #1
 8005a58:	1b12      	subs	r2, r2, r4
 8005a5a:	428f      	cmp	r7, r1
 8005a5c:	bf88      	it	hi
 8005a5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005a62:	1bc9      	subs	r1, r1, r7
 8005a64:	4433      	add	r3, r6
 8005a66:	4644      	mov	r4, r8
 8005a68:	0052      	lsls	r2, r2, #1
 8005a6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8005a6e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005a72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a7a:	d1dd      	bne.n	8005a38 <__ieee754_sqrt+0xbc>
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	d006      	beq.n	8005a8e <__ieee754_sqrt+0x112>
 8005a80:	1c5c      	adds	r4, r3, #1
 8005a82:	bf13      	iteet	ne
 8005a84:	3301      	addne	r3, #1
 8005a86:	3501      	addeq	r5, #1
 8005a88:	4663      	moveq	r3, ip
 8005a8a:	f023 0301 	bicne.w	r3, r3, #1
 8005a8e:	106a      	asrs	r2, r5, #1
 8005a90:	085b      	lsrs	r3, r3, #1
 8005a92:	07e9      	lsls	r1, r5, #31
 8005a94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005a98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005a9c:	bf48      	it	mi
 8005a9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005aa2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005aa6:	461c      	mov	r4, r3
 8005aa8:	e780      	b.n	80059ac <__ieee754_sqrt+0x30>
 8005aaa:	0aca      	lsrs	r2, r1, #11
 8005aac:	3815      	subs	r0, #21
 8005aae:	0549      	lsls	r1, r1, #21
 8005ab0:	2a00      	cmp	r2, #0
 8005ab2:	d0fa      	beq.n	8005aaa <__ieee754_sqrt+0x12e>
 8005ab4:	02d6      	lsls	r6, r2, #11
 8005ab6:	d50a      	bpl.n	8005ace <__ieee754_sqrt+0x152>
 8005ab8:	f1c3 0420 	rsb	r4, r3, #32
 8005abc:	fa21 f404 	lsr.w	r4, r1, r4
 8005ac0:	1e5d      	subs	r5, r3, #1
 8005ac2:	4099      	lsls	r1, r3
 8005ac4:	4322      	orrs	r2, r4
 8005ac6:	1b43      	subs	r3, r0, r5
 8005ac8:	e78b      	b.n	80059e2 <__ieee754_sqrt+0x66>
 8005aca:	4618      	mov	r0, r3
 8005acc:	e7f0      	b.n	8005ab0 <__ieee754_sqrt+0x134>
 8005ace:	0052      	lsls	r2, r2, #1
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	e7ef      	b.n	8005ab4 <__ieee754_sqrt+0x138>
 8005ad4:	46a0      	mov	r8, r4
 8005ad6:	e7bf      	b.n	8005a58 <__ieee754_sqrt+0xdc>
 8005ad8:	7ff00000 	.word	0x7ff00000

08005adc <fabs>:
 8005adc:	ec51 0b10 	vmov	r0, r1, d0
 8005ae0:	ee10 2a10 	vmov	r2, s0
 8005ae4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ae8:	ec43 2b10 	vmov	d0, r2, r3
 8005aec:	4770      	bx	lr

08005aee <finite>:
 8005aee:	ee10 3a90 	vmov	r3, s1
 8005af2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005af6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005afa:	0fc0      	lsrs	r0, r0, #31
 8005afc:	4770      	bx	lr

08005afe <matherr>:
 8005afe:	2000      	movs	r0, #0
 8005b00:	4770      	bx	lr
 8005b02:	0000      	movs	r0, r0
 8005b04:	0000      	movs	r0, r0
	...

08005b08 <nan>:
 8005b08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b10 <nan+0x8>
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	00000000 	.word	0x00000000
 8005b14:	7ff80000 	.word	0x7ff80000

08005b18 <rint>:
 8005b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b1a:	ec51 0b10 	vmov	r0, r1, d0
 8005b1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b22:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005b26:	2e13      	cmp	r6, #19
 8005b28:	460b      	mov	r3, r1
 8005b2a:	ee10 4a10 	vmov	r4, s0
 8005b2e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005b32:	dc56      	bgt.n	8005be2 <rint+0xca>
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	da2b      	bge.n	8005b90 <rint+0x78>
 8005b38:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005b3c:	4302      	orrs	r2, r0
 8005b3e:	d023      	beq.n	8005b88 <rint+0x70>
 8005b40:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005b44:	4302      	orrs	r2, r0
 8005b46:	4254      	negs	r4, r2
 8005b48:	4314      	orrs	r4, r2
 8005b4a:	0c4b      	lsrs	r3, r1, #17
 8005b4c:	0b24      	lsrs	r4, r4, #12
 8005b4e:	045b      	lsls	r3, r3, #17
 8005b50:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005b54:	ea44 0103 	orr.w	r1, r4, r3
 8005b58:	460b      	mov	r3, r1
 8005b5a:	492f      	ldr	r1, [pc, #188]	; (8005c18 <rint+0x100>)
 8005b5c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005b60:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005b64:	4602      	mov	r2, r0
 8005b66:	4639      	mov	r1, r7
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f7fa fb8f 	bl	800028c <__adddf3>
 8005b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b72:	463b      	mov	r3, r7
 8005b74:	4632      	mov	r2, r6
 8005b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b7a:	f7fa fb85 	bl	8000288 <__aeabi_dsub>
 8005b7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b82:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005b86:	4639      	mov	r1, r7
 8005b88:	ec41 0b10 	vmov	d0, r0, r1
 8005b8c:	b003      	add	sp, #12
 8005b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b90:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <rint+0x104>)
 8005b92:	4132      	asrs	r2, r6
 8005b94:	ea01 0702 	and.w	r7, r1, r2
 8005b98:	4307      	orrs	r7, r0
 8005b9a:	d0f5      	beq.n	8005b88 <rint+0x70>
 8005b9c:	0852      	lsrs	r2, r2, #1
 8005b9e:	4011      	ands	r1, r2
 8005ba0:	430c      	orrs	r4, r1
 8005ba2:	d00b      	beq.n	8005bbc <rint+0xa4>
 8005ba4:	ea23 0202 	bic.w	r2, r3, r2
 8005ba8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bac:	2e13      	cmp	r6, #19
 8005bae:	fa43 f306 	asr.w	r3, r3, r6
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005bb8:	2400      	movne	r4, #0
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	4916      	ldr	r1, [pc, #88]	; (8005c18 <rint+0x100>)
 8005bbe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005bc2:	4622      	mov	r2, r4
 8005bc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005bc8:	4620      	mov	r0, r4
 8005bca:	4629      	mov	r1, r5
 8005bcc:	f7fa fb5e 	bl	800028c <__adddf3>
 8005bd0:	e9cd 0100 	strd	r0, r1, [sp]
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	462b      	mov	r3, r5
 8005bd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bdc:	f7fa fb54 	bl	8000288 <__aeabi_dsub>
 8005be0:	e7d2      	b.n	8005b88 <rint+0x70>
 8005be2:	2e33      	cmp	r6, #51	; 0x33
 8005be4:	dd07      	ble.n	8005bf6 <rint+0xde>
 8005be6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005bea:	d1cd      	bne.n	8005b88 <rint+0x70>
 8005bec:	ee10 2a10 	vmov	r2, s0
 8005bf0:	f7fa fb4c 	bl	800028c <__adddf3>
 8005bf4:	e7c8      	b.n	8005b88 <rint+0x70>
 8005bf6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfe:	40f2      	lsrs	r2, r6
 8005c00:	4210      	tst	r0, r2
 8005c02:	d0c1      	beq.n	8005b88 <rint+0x70>
 8005c04:	0852      	lsrs	r2, r2, #1
 8005c06:	4210      	tst	r0, r2
 8005c08:	bf1f      	itttt	ne
 8005c0a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005c0e:	ea20 0202 	bicne.w	r2, r0, r2
 8005c12:	4134      	asrne	r4, r6
 8005c14:	4314      	orrne	r4, r2
 8005c16:	e7d1      	b.n	8005bbc <rint+0xa4>
 8005c18:	08005e88 	.word	0x08005e88
 8005c1c:	000fffff 	.word	0x000fffff

08005c20 <scalbn>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	ec55 4b10 	vmov	r4, r5, d0
 8005c26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	462b      	mov	r3, r5
 8005c2e:	b9aa      	cbnz	r2, 8005c5c <scalbn+0x3c>
 8005c30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c34:	4323      	orrs	r3, r4
 8005c36:	d03b      	beq.n	8005cb0 <scalbn+0x90>
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <scalbn+0xe0>)
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	ee10 0a10 	vmov	r0, s0
 8005c42:	f7fa fcd9 	bl	80005f8 <__aeabi_dmul>
 8005c46:	4b2f      	ldr	r3, [pc, #188]	; (8005d04 <scalbn+0xe4>)
 8005c48:	429e      	cmp	r6, r3
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	da12      	bge.n	8005c76 <scalbn+0x56>
 8005c50:	a327      	add	r3, pc, #156	; (adr r3, 8005cf0 <scalbn+0xd0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fccf 	bl	80005f8 <__aeabi_dmul>
 8005c5a:	e009      	b.n	8005c70 <scalbn+0x50>
 8005c5c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005c60:	428a      	cmp	r2, r1
 8005c62:	d10c      	bne.n	8005c7e <scalbn+0x5e>
 8005c64:	ee10 2a10 	vmov	r2, s0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	f7fa fb0e 	bl	800028c <__adddf3>
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	e01c      	b.n	8005cb0 <scalbn+0x90>
 8005c76:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	3a36      	subs	r2, #54	; 0x36
 8005c7e:	4432      	add	r2, r6
 8005c80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c84:	428a      	cmp	r2, r1
 8005c86:	dd0b      	ble.n	8005ca0 <scalbn+0x80>
 8005c88:	ec45 4b11 	vmov	d1, r4, r5
 8005c8c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005cf8 <scalbn+0xd8>
 8005c90:	f000 f83c 	bl	8005d0c <copysign>
 8005c94:	a318      	add	r3, pc, #96	; (adr r3, 8005cf8 <scalbn+0xd8>)
 8005c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c9a:	ec51 0b10 	vmov	r0, r1, d0
 8005c9e:	e7da      	b.n	8005c56 <scalbn+0x36>
 8005ca0:	2a00      	cmp	r2, #0
 8005ca2:	dd08      	ble.n	8005cb6 <scalbn+0x96>
 8005ca4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ca8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cb0:	ec45 4b10 	vmov	d0, r4, r5
 8005cb4:	bd70      	pop	{r4, r5, r6, pc}
 8005cb6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005cba:	da0d      	bge.n	8005cd8 <scalbn+0xb8>
 8005cbc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005cc0:	429e      	cmp	r6, r3
 8005cc2:	ec45 4b11 	vmov	d1, r4, r5
 8005cc6:	dce1      	bgt.n	8005c8c <scalbn+0x6c>
 8005cc8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005cf0 <scalbn+0xd0>
 8005ccc:	f000 f81e 	bl	8005d0c <copysign>
 8005cd0:	a307      	add	r3, pc, #28	; (adr r3, 8005cf0 <scalbn+0xd0>)
 8005cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd6:	e7e0      	b.n	8005c9a <scalbn+0x7a>
 8005cd8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cdc:	3236      	adds	r2, #54	; 0x36
 8005cde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	4629      	mov	r1, r5
 8005cea:	2200      	movs	r2, #0
 8005cec:	4b06      	ldr	r3, [pc, #24]	; (8005d08 <scalbn+0xe8>)
 8005cee:	e7b2      	b.n	8005c56 <scalbn+0x36>
 8005cf0:	c2f8f359 	.word	0xc2f8f359
 8005cf4:	01a56e1f 	.word	0x01a56e1f
 8005cf8:	8800759c 	.word	0x8800759c
 8005cfc:	7e37e43c 	.word	0x7e37e43c
 8005d00:	43500000 	.word	0x43500000
 8005d04:	ffff3cb0 	.word	0xffff3cb0
 8005d08:	3c900000 	.word	0x3c900000

08005d0c <copysign>:
 8005d0c:	ec51 0b10 	vmov	r0, r1, d0
 8005d10:	ee11 0a90 	vmov	r0, s3
 8005d14:	ee10 2a10 	vmov	r2, s0
 8005d18:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005d1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005d20:	ea41 0300 	orr.w	r3, r1, r0
 8005d24:	ec43 2b10 	vmov	d0, r2, r3
 8005d28:	4770      	bx	lr
	...

08005d2c <_init>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	bf00      	nop
 8005d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d32:	bc08      	pop	{r3}
 8005d34:	469e      	mov	lr, r3
 8005d36:	4770      	bx	lr

08005d38 <_fini>:
 8005d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3a:	bf00      	nop
 8005d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3e:	bc08      	pop	{r3}
 8005d40:	469e      	mov	lr, r3
 8005d42:	4770      	bx	lr
