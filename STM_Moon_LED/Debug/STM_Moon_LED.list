
STM_Moon_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023614  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009970  080237b8  080237b8  000337b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d128  0802d128  00040074  2**0
                  CONTENTS
  4 .ARM          00000008  0802d128  0802d128  0003d128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d130  0802d130  00040074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d130  0802d130  0003d130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d134  0802d134  0003d134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0802d138  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000054ec  20000074  0802d1ac  00040074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005560  0802d1ac  00045560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168b3  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f58  00000000  00000000  00056957  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c8  00000000  00000000  000598b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  0005a978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001940b  00000000  00000000  0005b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000119cd  00000000  00000000  00074d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000906e4  00000000  00000000  000866d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116db4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  00116e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0802379c 	.word	0x0802379c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0802379c 	.word	0x0802379c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <LED_findPos>:
// *******************************************************************
// 					MANIPULATION OF THE LED MATRIX
// *******************************************************************


uint8_t LED_findPos(char letter, uint8_t number){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]

	uint8_t position;

	if (number==1){
 8000eb8:	79bb      	ldrb	r3, [r7, #6]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <LED_findPos+0x1a>
		return 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e06d      	b.n	8000f9e <LED_findPos+0xf6>
	}

	switch(letter){
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	3b41      	subs	r3, #65	; 0x41
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d865      	bhi.n	8000f96 <LED_findPos+0xee>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <LED_findPos+0x28>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000efd 	.word	0x08000efd
 8000ed4:	08000f05 	.word	0x08000f05
 8000ed8:	08000f0f 	.word	0x08000f0f
 8000edc:	08000f25 	.word	0x08000f25
 8000ee0:	08000f2f 	.word	0x08000f2f
 8000ee4:	08000f37 	.word	0x08000f37
 8000ee8:	08000f51 	.word	0x08000f51
 8000eec:	08000f59 	.word	0x08000f59
 8000ef0:	08000f69 	.word	0x08000f69
 8000ef4:	08000f7f 	.word	0x08000f7f
 8000ef8:	08000f8f 	.word	0x08000f8f
	case('A'):
		position = number-1;
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	73fb      	strb	r3, [r7, #15]
		break;
 8000f02:	e04b      	b.n	8000f9c <LED_findPos+0xf4>
	case('B'):
		position = 36-number;
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8000f0a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f0c:	e046      	b.n	8000f9c <LED_findPos+0xf4>
	case('C'):
		if(number < 17){
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d803      	bhi.n	8000f1c <LED_findPos+0x74>
			position = 34+number-1;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
 8000f16:	3321      	adds	r3, #33	; 0x21
 8000f18:	73fb      	strb	r3, [r7, #15]
		} else {
			position = 34+number;
		}
		break;
 8000f1a:	e03f      	b.n	8000f9c <LED_findPos+0xf4>
			position = 34+number;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	3322      	adds	r3, #34	; 0x22
 8000f20:	73fb      	strb	r3, [r7, #15]
		break;
 8000f22:	e03b      	b.n	8000f9c <LED_findPos+0xf4>
	case('D'):
		position = 71-number;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	f1c3 0347 	rsb	r3, r3, #71	; 0x47
 8000f2a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f2c:	e036      	b.n	8000f9c <LED_findPos+0xf4>
	case('E'):
		position = 69+number;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	3345      	adds	r3, #69	; 0x45
 8000f32:	73fb      	strb	r3, [r7, #15]
		break;
 8000f34:	e032      	b.n	8000f9c <LED_findPos+0xf4>
	case('F'):
		if(number>11){
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	2b0b      	cmp	r3, #11
 8000f3a:	d904      	bls.n	8000f46 <LED_findPos+0x9e>
			position = 106-number;
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	f1c3 036a 	rsb	r3, r3, #106	; 0x6a
 8000f42:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 107-number;
		}
		break;
 8000f44:	e02a      	b.n	8000f9c <LED_findPos+0xf4>
			position = 107-number;
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8000f4c:	73fb      	strb	r3, [r7, #15]
		break;
 8000f4e:	e025      	b.n	8000f9c <LED_findPos+0xf4>
	case('G'):
		position = 104+number;
 8000f50:	79bb      	ldrb	r3, [r7, #6]
 8000f52:	3368      	adds	r3, #104	; 0x68
 8000f54:	73fb      	strb	r3, [r7, #15]
		break;
 8000f56:	e021      	b.n	8000f9c <LED_findPos+0xf4>
	case('H'):
		position = 142-number;
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f5e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f62:	338e      	adds	r3, #142	; 0x8e
 8000f64:	73fb      	strb	r3, [r7, #15]
		break;
 8000f66:	e019      	b.n	8000f9c <LED_findPos+0xf4>
	case('I'):
		if(number>5){
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	2b05      	cmp	r3, #5
 8000f6c:	d903      	bls.n	8000f76 <LED_findPos+0xce>
			position = 140+number;
 8000f6e:	79bb      	ldrb	r3, [r7, #6]
 8000f70:	3b74      	subs	r3, #116	; 0x74
 8000f72:	73fb      	strb	r3, [r7, #15]
		}else{
			position = 139+number;
		}
		break;
 8000f74:	e012      	b.n	8000f9c <LED_findPos+0xf4>
			position = 139+number;
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	3b75      	subs	r3, #117	; 0x75
 8000f7a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f7c:	e00e      	b.n	8000f9c <LED_findPos+0xf4>
	case('J'):
		position = 177-number;
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8000f84:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8000f88:	33b1      	adds	r3, #177	; 0xb1
 8000f8a:	73fb      	strb	r3, [r7, #15]
		break;
 8000f8c:	e006      	b.n	8000f9c <LED_findPos+0xf4>
	case('K'):
		position = 174+number;
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	3b52      	subs	r3, #82	; 0x52
 8000f92:	73fb      	strb	r3, [r7, #15]
		break;
 8000f94:	e002      	b.n	8000f9c <LED_findPos+0xf4>
	default:
		position=0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	73fb      	strb	r3, [r7, #15]
		break;
 8000f9a:	bf00      	nop
	}


	return position;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3714      	adds	r7, #20
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <convert_digit>:


uint8_t convert_digit(char dig1, char dig2){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	71fb      	strb	r3, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71bb      	strb	r3, [r7, #6]

	uint8_t res=0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

	if(dig1 == '1'){
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	2b31      	cmp	r3, #49	; 0x31
 8000fc4:	d101      	bne.n	8000fca <convert_digit+0x1e>
		res = 10;
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	if(dig2 == '1'){
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b31      	cmp	r3, #49	; 0x31
 8000fce:	d103      	bne.n	8000fd8 <convert_digit+0x2c>
		res += 1;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73fb      	strb	r3, [r7, #15]
 8000fd6:	e039      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '2'){
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b32      	cmp	r3, #50	; 0x32
 8000fdc:	d103      	bne.n	8000fe6 <convert_digit+0x3a>
		res += 2;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e032      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '3'){
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	2b33      	cmp	r3, #51	; 0x33
 8000fea:	d103      	bne.n	8000ff4 <convert_digit+0x48>
		res += 3;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	3303      	adds	r3, #3
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e02b      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '4'){
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	2b34      	cmp	r3, #52	; 0x34
 8000ff8:	d103      	bne.n	8001002 <convert_digit+0x56>
		res += 4;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e024      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '5'){
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	2b35      	cmp	r3, #53	; 0x35
 8001006:	d103      	bne.n	8001010 <convert_digit+0x64>
		res += 5;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3305      	adds	r3, #5
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e01d      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '6'){
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	2b36      	cmp	r3, #54	; 0x36
 8001014:	d103      	bne.n	800101e <convert_digit+0x72>
		res += 6;
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3306      	adds	r3, #6
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e016      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '7'){
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	2b37      	cmp	r3, #55	; 0x37
 8001022:	d103      	bne.n	800102c <convert_digit+0x80>
		res += 7;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3307      	adds	r3, #7
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e00f      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '8'){
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b38      	cmp	r3, #56	; 0x38
 8001030:	d103      	bne.n	800103a <convert_digit+0x8e>
		res += 8;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	3308      	adds	r3, #8
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e008      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '9'){
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	2b39      	cmp	r3, #57	; 0x39
 800103e:	d103      	bne.n	8001048 <convert_digit+0x9c>
		res += 9;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	3309      	adds	r3, #9
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <convert_digit+0xa0>
	}else if(dig2 == '0'){
 8001048:	79bb      	ldrb	r3, [r7, #6]
 800104a:	2b30      	cmp	r3, #48	; 0x30
		res += 0;
	}

	return res;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <problem_genArray>:

void problem_genArray(Problem * p){
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	466b      	mov	r3, sp
 8001066:	461d      	mov	r5, r3

	uint16_t LedPos = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	857b      	strh	r3, [r7, #42]	; 0x2a
	char     lettArr[p->moveSize];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	1e43      	subs	r3, r0, #1
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	4603      	mov	r3, r0
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	f04f 0400 	mov.w	r4, #0
 8001084:	00d4      	lsls	r4, r2, #3
 8001086:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800108a:	00cb      	lsls	r3, r1, #3
 800108c:	4603      	mov	r3, r0
 800108e:	4619      	mov	r1, r3
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	f04f 0400 	mov.w	r4, #0
 800109c:	00d4      	lsls	r4, r2, #3
 800109e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010a2:	00cb      	lsls	r3, r1, #3
 80010a4:	4603      	mov	r3, r0
 80010a6:	3307      	adds	r3, #7
 80010a8:	08db      	lsrs	r3, r3, #3
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	ebad 0d03 	sub.w	sp, sp, r3
 80010b0:	466b      	mov	r3, sp
 80010b2:	3300      	adds	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
	uint8_t  numArr[p->moveSize];
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	1e43      	subs	r3, r0, #1
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f04f 0300 	mov.w	r3, #0
 80010ca:	f04f 0400 	mov.w	r4, #0
 80010ce:	00d4      	lsls	r4, r2, #3
 80010d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010d4:	00cb      	lsls	r3, r1, #3
 80010d6:	4603      	mov	r3, r0
 80010d8:	4619      	mov	r1, r3
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	f04f 0400 	mov.w	r4, #0
 80010e6:	00d4      	lsls	r4, r2, #3
 80010e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80010ec:	00cb      	lsls	r3, r1, #3
 80010ee:	4603      	mov	r3, r0
 80010f0:	3307      	adds	r3, #7
 80010f2:	08db      	lsrs	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	ebad 0d03 	sub.w	sp, sp, r3
 80010fa:	466b      	mov	r3, sp
 80010fc:	3300      	adds	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
	uint8_t  typeArr[p->moveSize];
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	1e43      	subs	r3, r0, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4603      	mov	r3, r0
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f04f 0400 	mov.w	r4, #0
 8001118:	00d4      	lsls	r4, r2, #3
 800111a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800111e:	00cb      	lsls	r3, r1, #3
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f04f 0400 	mov.w	r4, #0
 8001130:	00d4      	lsls	r4, r2, #3
 8001132:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001136:	00cb      	lsls	r3, r1, #3
 8001138:	4603      	mov	r3, r0
 800113a:	3307      	adds	r3, #7
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	ebad 0d03 	sub.w	sp, sp, r3
 8001144:	466b      	mov	r3, sp
 8001146:	3300      	adds	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]

	uint8_t number_iter=0;
 800114a:	2300      	movs	r3, #0
 800114c:	77fb      	strb	r3, [r7, #31]

	LED_setAllBlack();	// put to 0 all the colors for each LED
 800114e:	f000 f8d3 	bl	80012f8 <LED_setAllBlack>

	for(int j=0; j<p->moveSize; j++){
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
 8001156:	e048      	b.n	80011ea <problem_genArray+0x18e>
		lettArr[j] = p->moveLetters[j*2];	// extract letter of hold
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	4413      	add	r3, r2
 8001160:	f893 10a4 	ldrb.w	r1, [r3, #164]	; 0xa4
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	6a3b      	ldr	r3, [r7, #32]
 8001168:	4413      	add	r3, r2
 800116a:	460a      	mov	r2, r1
 800116c:	701a      	strb	r2, [r3, #0]
		typeArr[j] = p->startFinish[j*2];	// extract type of hold
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	f893 11ac 	ldrb.w	r1, [r3, #428]	; 0x1ac
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	4413      	add	r3, r2
 8001180:	460a      	mov	r2, r1
 8001182:	701a      	strb	r2, [r3, #0]

		if(p->moveNumbers[number_iter+1] != ','){
 8001184:	7ffb      	ldrb	r3, [r7, #31]
 8001186:	3301      	adds	r3, #1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4413      	add	r3, r2
 800118c:	791b      	ldrb	r3, [r3, #4]
 800118e:	2b2c      	cmp	r3, #44	; 0x2c
 8001190:	d016      	beq.n	80011c0 <problem_genArray+0x164>
			numArr[j] = convert_digit(p->moveNumbers[number_iter], p->moveNumbers[number_iter+1]);
 8001192:	7ffb      	ldrb	r3, [r7, #31]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4413      	add	r3, r2
 8001198:	7918      	ldrb	r0, [r3, #4]
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	791b      	ldrb	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff ff01 	bl	8000fac <convert_digit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4619      	mov	r1, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	6a3b      	ldr	r3, [r7, #32]
 80011b2:	4413      	add	r3, r2
 80011b4:	460a      	mov	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]
			number_iter += 3;
 80011b8:	7ffb      	ldrb	r3, [r7, #31]
 80011ba:	3303      	adds	r3, #3
 80011bc:	77fb      	strb	r3, [r7, #31]
 80011be:	e011      	b.n	80011e4 <problem_genArray+0x188>
		} else {
			numArr[j] = convert_digit('0', p->moveNumbers[number_iter]);
 80011c0:	7ffb      	ldrb	r3, [r7, #31]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	791b      	ldrb	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	2030      	movs	r0, #48	; 0x30
 80011cc:	f7ff feee 	bl	8000fac <convert_digit>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
			number_iter += 2;
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	3302      	adds	r3, #2
 80011e2:	77fb      	strb	r3, [r7, #31]
	for(int j=0; j<p->moveSize; j++){
 80011e4:	6a3b      	ldr	r3, [r7, #32]
 80011e6:	3301      	adds	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbb1      	blt.n	8001158 <problem_genArray+0xfc>
		}
	}


	// for each move define the color of the corresponding LED
	for(int i=0; i<p->moveSize; i++){
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	e072      	b.n	80012e0 <problem_genArray+0x284>

		// transform letter and number in the led position
		LedPos = LED_findPos(lettArr[i], numArr[i]);
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	4413      	add	r3, r2
 8001200:	7818      	ldrb	r0, [r3, #0]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fe4c 	bl	8000ea8 <LED_findPos>
 8001210:	4603      	mov	r3, r0
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

		// light the led depending if it's start, top or else
		if(typeArr[i]=='s'){			// START, color green
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b73      	cmp	r3, #115	; 0x73
 800121e:	d112      	bne.n	8001246 <problem_genArray+0x1ea>
			LED_Data[LedPos][1] = 0;
 8001220:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001222:	4a34      	ldr	r2, [pc, #208]	; (80012f4 <problem_genArray+0x298>)
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	2200      	movs	r2, #0
 800122a:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 250;
 800122c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800122e:	4a31      	ldr	r2, [pc, #196]	; (80012f4 <problem_genArray+0x298>)
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	22fa      	movs	r2, #250	; 0xfa
 8001236:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 8001238:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <problem_genArray+0x298>)
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	2200      	movs	r2, #0
 8001242:	70da      	strb	r2, [r3, #3]
 8001244:	e049      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='e'){		// TOP, color red
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b65      	cmp	r3, #101	; 0x65
 8001250:	d112      	bne.n	8001278 <problem_genArray+0x21c>
			LED_Data[LedPos][1] = 250;
 8001252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <problem_genArray+0x298>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	22fa      	movs	r2, #250	; 0xfa
 800125c:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 800125e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <problem_genArray+0x298>)
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	2200      	movs	r2, #0
 8001268:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 0;
 800126a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <problem_genArray+0x298>)
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	70da      	strb	r2, [r3, #3]
 8001276:	e030      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='d'){		// DEFAULT, color blue
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b64      	cmp	r3, #100	; 0x64
 8001282:	d112      	bne.n	80012aa <problem_genArray+0x24e>
			LED_Data[LedPos][1] = 0;
 8001284:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <problem_genArray+0x298>)
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 0;
 8001290:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <problem_genArray+0x298>)
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	2200      	movs	r2, #0
 800129a:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 250;
 800129c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <problem_genArray+0x298>)
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	4413      	add	r3, r2
 80012a4:	22fa      	movs	r2, #250	; 0xfa
 80012a6:	70da      	strb	r2, [r3, #3]
 80012a8:	e017      	b.n	80012da <problem_genArray+0x27e>
		}else if(typeArr[i]=='c'){		// easter egg, color pink
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b63      	cmp	r3, #99	; 0x63
 80012b4:	d111      	bne.n	80012da <problem_genArray+0x27e>
			LED_Data[LedPos][1] = 250;
 80012b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <problem_genArray+0x298>)
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	22fa      	movs	r2, #250	; 0xfa
 80012c0:	705a      	strb	r2, [r3, #1]
			LED_Data[LedPos][2] = 192;
 80012c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <problem_genArray+0x298>)
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	22c0      	movs	r2, #192	; 0xc0
 80012cc:	709a      	strb	r2, [r3, #2]
			LED_Data[LedPos][3] = 203;
 80012ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <problem_genArray+0x298>)
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	22cb      	movs	r2, #203	; 0xcb
 80012d8:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<p->moveSize; i++){
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	3301      	adds	r3, #1
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	db87      	blt.n	80011fa <problem_genArray+0x19e>
 80012ea:	46ad      	mov	sp, r5
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	3730      	adds	r7, #48	; 0x30
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bdb0      	pop	{r4, r5, r7, pc}
 80012f4:	2000011c 	.word	0x2000011c

080012f8 <LED_setAllBlack>:



void LED_setAllBlack(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

	for(int i=0; i<MAX_LED; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e014      	b.n	800132e <LED_setAllBlack+0x36>
		LED_Data[i][1]=0;
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <LED_setAllBlack+0x48>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	2200      	movs	r2, #0
 800130e:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2]=0;
 8001310:	4a0b      	ldr	r2, [pc, #44]	; (8001340 <LED_setAllBlack+0x48>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	2200      	movs	r2, #0
 800131a:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3]=0;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <LED_setAllBlack+0x48>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	2200      	movs	r2, #0
 8001326:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3301      	adds	r3, #1
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2bc5      	cmp	r3, #197	; 0xc5
 8001332:	dde7      	ble.n	8001304 <LED_setAllBlack+0xc>
	}
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	2000011c 	.word	0x2000011c

08001344 <LED_randSetRand>:
	LED_Data[LedPos][2] = 250;
	LED_Data[LedPos][3] = 250;
}


void LED_randSetRand(){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0

	LED_setAllBlack();
 800134a:	f7ff ffd5 	bl	80012f8 <LED_setAllBlack>

	int n1, n2;

	for(int i=0; i<MAX_LED; i++){
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	e02a      	b.n	80013aa <LED_randSetRand+0x66>
		n1 = rand();
 8001354:	f020 fd6a 	bl	8021e2c <rand>
 8001358:	60b8      	str	r0, [r7, #8]
		n2 = rand();
 800135a:	f020 fd67 	bl	8021e2c <rand>
 800135e:	6078      	str	r0, [r7, #4]

		if(n1 > n2){
 8001360:	68ba      	ldr	r2, [r7, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dd1d      	ble.n	80013a4 <LED_randSetRand+0x60>
			LED_Data[i][1]=rand();
 8001368:	f020 fd60 	bl	8021e2c <rand>
 800136c:	4603      	mov	r3, r0
 800136e:	b2d9      	uxtb	r1, r3
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <LED_randSetRand+0x74>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	460a      	mov	r2, r1
 800137a:	705a      	strb	r2, [r3, #1]
			LED_Data[i][2]=rand();
 800137c:	f020 fd56 	bl	8021e2c <rand>
 8001380:	4603      	mov	r3, r0
 8001382:	b2d9      	uxtb	r1, r3
 8001384:	4a0c      	ldr	r2, [pc, #48]	; (80013b8 <LED_randSetRand+0x74>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	709a      	strb	r2, [r3, #2]
			LED_Data[i][3]=rand();
 8001390:	f020 fd4c 	bl	8021e2c <rand>
 8001394:	4603      	mov	r3, r0
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	4a07      	ldr	r2, [pc, #28]	; (80013b8 <LED_randSetRand+0x74>)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	70da      	strb	r2, [r3, #3]
	for(int i=0; i<MAX_LED; i++){
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2bc5      	cmp	r3, #197	; 0xc5
 80013ae:	ddd1      	ble.n	8001354 <LED_randSetRand+0x10>
		}
	}
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000011c 	.word	0x2000011c

080013bc <WS2811_Send>:
// *******************************************************************
// 						GENERATION OF PWM
// *******************************************************************


void WS2811_Send(void){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0

	uint16_t indx_low = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	83fb      	strh	r3, [r7, #30]
	uint16_t indx_high = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	83bb      	strh	r3, [r7, #28]
	uint32_t color;

	// wait 50 PWM pulses as a RESET before lighting all LED
	for(int i=0; i<40; i++){
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	e012      	b.n	80013f6 <WS2811_Send+0x3a>
		pwmData_low[indx_low] = 0;
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	4a52      	ldr	r2, [pc, #328]	; (800151c <WS2811_Send+0x160>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80013da:	8bbb      	ldrh	r3, [r7, #28]
 80013dc:	4a50      	ldr	r2, [pc, #320]	; (8001520 <WS2811_Send+0x164>)
 80013de:	2100      	movs	r1, #0
 80013e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80013e4:	8bfb      	ldrh	r3, [r7, #30]
 80013e6:	3301      	adds	r3, #1
 80013e8:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80013ea:	8bbb      	ldrh	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b27      	cmp	r3, #39	; 0x27
 80013fa:	dde9      	ble.n	80013d0 <WS2811_Send+0x14>
	}

	// read from the color matrix each RGB color for each LED
	for(int i=0; i<MAX_LED; i++){
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e05a      	b.n	80014b8 <WS2811_Send+0xfc>
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | LED_Data[i][3]);
 8001402:	4a48      	ldr	r2, [pc, #288]	; (8001524 <WS2811_Send+0x168>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	785b      	ldrb	r3, [r3, #1]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	4945      	ldr	r1, [pc, #276]	; (8001524 <WS2811_Send+0x168>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	440b      	add	r3, r1
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	431a      	orrs	r2, r3
 800141c:	4941      	ldr	r1, [pc, #260]	; (8001524 <WS2811_Send+0x168>)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	78db      	ldrb	r3, [r3, #3]
 8001426:	4313      	orrs	r3, r2
 8001428:	607b      	str	r3, [r7, #4]

		if(i <= 94){	// LOW PWM DATA
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b5e      	cmp	r3, #94	; 0x5e
 800142e:	dc20      	bgt.n	8001472 <WS2811_Send+0xb6>

			for(int i=23; i>=0; i--){
 8001430:	2317      	movs	r3, #23
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	e019      	b.n	800146a <WS2811_Send+0xae>
				if(color & (1<<i)){
 8001436:	2201      	movs	r2, #1
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <WS2811_Send+0x98>
					pwmData_low[indx_low]=43;
 8001448:	8bfb      	ldrh	r3, [r7, #30]
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <WS2811_Send+0x160>)
 800144c:	212b      	movs	r1, #43	; 0x2b
 800144e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001452:	e004      	b.n	800145e <WS2811_Send+0xa2>
				}else{
					pwmData_low[indx_low]=18;
 8001454:	8bfb      	ldrh	r3, [r7, #30]
 8001456:	4a31      	ldr	r2, [pc, #196]	; (800151c <WS2811_Send+0x160>)
 8001458:	2112      	movs	r1, #18
 800145a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_low++;
 800145e:	8bfb      	ldrh	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	83fb      	strh	r3, [r7, #30]
			for(int i=23; i>=0; i--){
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	3b01      	subs	r3, #1
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dae2      	bge.n	8001436 <WS2811_Send+0x7a>
 8001470:	e01f      	b.n	80014b2 <WS2811_Send+0xf6>
			}

		} else {		// HIGH PWM DATA

			for(int i=23; i>=0; i--){
 8001472:	2317      	movs	r3, #23
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	e019      	b.n	80014ac <WS2811_Send+0xf0>
				if(color & (1<<i)){
 8001478:	2201      	movs	r2, #1
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	461a      	mov	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <WS2811_Send+0xda>
					pwmData_high[indx_high]=43;
 800148a:	8bbb      	ldrh	r3, [r7, #28]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <WS2811_Send+0x164>)
 800148e:	212b      	movs	r1, #43	; 0x2b
 8001490:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001494:	e004      	b.n	80014a0 <WS2811_Send+0xe4>
				}else{
					pwmData_high[indx_high]=18;
 8001496:	8bbb      	ldrh	r3, [r7, #28]
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <WS2811_Send+0x164>)
 800149a:	2112      	movs	r1, #18
 800149c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				}
				indx_high++;
 80014a0:	8bbb      	ldrh	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	83bb      	strh	r3, [r7, #28]
			for(int i=23; i>=0; i--){
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	dae2      	bge.n	8001478 <WS2811_Send+0xbc>
	for(int i=0; i<MAX_LED; i++){
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2bc5      	cmp	r3, #197	; 0xc5
 80014bc:	dda1      	ble.n	8001402 <WS2811_Send+0x46>


	}

	// wait 50 PWM pulses as a RESET after lighting all LED
	for(int i=0; i<40; i++){
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e012      	b.n	80014ea <WS2811_Send+0x12e>
		pwmData_low[indx_low] = 0;
 80014c4:	8bfb      	ldrh	r3, [r7, #30]
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <WS2811_Send+0x160>)
 80014c8:	2100      	movs	r1, #0
 80014ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pwmData_high[indx_high] = 0;
 80014ce:	8bbb      	ldrh	r3, [r7, #28]
 80014d0:	4a13      	ldr	r2, [pc, #76]	; (8001520 <WS2811_Send+0x164>)
 80014d2:	2100      	movs	r1, #0
 80014d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		indx_low++;
 80014d8:	8bfb      	ldrh	r3, [r7, #30]
 80014da:	3301      	adds	r3, #1
 80014dc:	83fb      	strh	r3, [r7, #30]
		indx_high++;
 80014de:	8bbb      	ldrh	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	83bb      	strh	r3, [r7, #28]
	for(int i=0; i<40; i++){
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b27      	cmp	r3, #39	; 0x27
 80014ee:	dde9      	ble.n	80014c4 <WS2811_Send+0x108>
	}

	// start the transmission of the data just created
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t *)pwmData_low, indx_low);
 80014f0:	8bfb      	ldrh	r3, [r7, #30]
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <WS2811_Send+0x160>)
 80014f4:	2100      	movs	r1, #0
 80014f6:	480c      	ldr	r0, [pc, #48]	; (8001528 <WS2811_Send+0x16c>)
 80014f8:	f01e fce4 	bl	801fec4 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t *)pwmData_high, indx_high);
 80014fc:	8bbb      	ldrh	r3, [r7, #28]
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <WS2811_Send+0x164>)
 8001500:	2100      	movs	r1, #0
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <WS2811_Send+0x170>)
 8001504:	f01e fcde 	bl	801fec4 <HAL_TIM_PWM_Start_DMA>


	//while(!datasentflag){};
	datasentflag=0;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <WS2811_Send+0x174>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

	HAL_Delay(250);
 800150e:	20fa      	movs	r0, #250	; 0xfa
 8001510:	f01c fc18 	bl	801dd44 <HAL_Delay>

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20002c50 	.word	0x20002c50
 8001520:	20000434 	.word	0x20000434
 8001524:	2000011c 	.word	0x2000011c
 8001528:	20005498 	.word	0x20005498
 800152c:	200053f8 	.word	0x200053f8
 8001530:	20000090 	.word	0x20000090

08001534 <MessageHandler>:

// *******************************************************************
// 						BLUETOOTH RECEIVER
// *******************************************************************

void MessageHandler(Problem * p){
 8001534:	b580      	push	{r7, lr}
 8001536:	b096      	sub	sp, #88	; 0x58
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

	char tmp_buff[50];
	int size_buff = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	643b      	str	r3, [r7, #64]	; 0x40

	// Move to the left of 3 steps the name
	size_buff = convert_digit(name_buff[1], name_buff[2]);
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <MessageHandler+0x19c>)
 8001542:	785a      	ldrb	r2, [r3, #1]
 8001544:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <MessageHandler+0x19c>)
 8001546:	789b      	ldrb	r3, [r3, #2]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff fd2e 	bl	8000fac <convert_digit>
 8001550:	4603      	mov	r3, r0
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
	memset(p->name, ' ', size_buff);									// reset string with spaces
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800155a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800155c:	2120      	movs	r1, #32
 800155e:	4618      	mov	r0, r3
 8001560:	f020 fc5b 	bl	8021e1a <memset>
	for(int i=0; i<size_buff; i++){
 8001564:	2300      	movs	r3, #0
 8001566:	657b      	str	r3, [r7, #84]	; 0x54
 8001568:	e00d      	b.n	8001586 <MessageHandler+0x52>
		p->name[i] = name_buff[i+3];
 800156a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156c:	3303      	adds	r3, #3
 800156e:	4a58      	ldr	r2, [pc, #352]	; (80016d0 <MessageHandler+0x19c>)
 8001570:	5cd1      	ldrb	r1, [r2, r3]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001576:	4413      	add	r3, r2
 8001578:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800157c:	460a      	mov	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size_buff; i++){
 8001580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001582:	3301      	adds	r3, #1
 8001584:	657b      	str	r3, [r7, #84]	; 0x54
 8001586:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800158a:	429a      	cmp	r2, r3
 800158c:	dbed      	blt.n	800156a <MessageHandler+0x36>
	}


	// Move to the left of 3 steps the grade
	size_buff = convert_digit(grade_buff[1], grade_buff[2]);
 800158e:	4b51      	ldr	r3, [pc, #324]	; (80016d4 <MessageHandler+0x1a0>)
 8001590:	785a      	ldrb	r2, [r3, #1]
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <MessageHandler+0x1a0>)
 8001594:	789b      	ldrb	r3, [r3, #2]
 8001596:	4619      	mov	r1, r3
 8001598:	4610      	mov	r0, r2
 800159a:	f7ff fd07 	bl	8000fac <convert_digit>
 800159e:	4603      	mov	r3, r0
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
	memset(p->grade, ' ', size_buff);									// reset string with spaces
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80015aa:	2120      	movs	r1, #32
 80015ac:	4618      	mov	r0, r3
 80015ae:	f020 fc34 	bl	8021e1a <memset>
	for(int i=0; i<size_buff; i++){
 80015b2:	2300      	movs	r3, #0
 80015b4:	653b      	str	r3, [r7, #80]	; 0x50
 80015b6:	e00d      	b.n	80015d4 <MessageHandler+0xa0>
		p->grade[i] = grade_buff[i+3];
 80015b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ba:	3303      	adds	r3, #3
 80015bc:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <MessageHandler+0x1a0>)
 80015be:	5cd1      	ldrb	r1, [r2, r3]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015ca:	460a      	mov	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<size_buff; i++){
 80015ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d0:	3301      	adds	r3, #1
 80015d2:	653b      	str	r3, [r7, #80]	; 0x50
 80015d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80015d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbed      	blt.n	80015b8 <MessageHandler+0x84>
	}
	strcpy(p->grade, tmp_buff);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015e2:	f107 020c 	add.w	r2, r7, #12
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f020 fc73 	bl	8021ed4 <strcpy>


	p->moveSize = convert_digit(nHolds_buff[1], nHolds_buff[2]);
 80015ee:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <MessageHandler+0x1a4>)
 80015f0:	785a      	ldrb	r2, [r3, #1]
 80015f2:	4b39      	ldr	r3, [pc, #228]	; (80016d8 <MessageHandler+0x1a4>)
 80015f4:	789b      	ldrb	r3, [r3, #2]
 80015f6:	4619      	mov	r1, r3
 80015f8:	4610      	mov	r0, r2
 80015fa:	f7ff fcd7 	bl	8000fac <convert_digit>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]


	memset(p->moveNumbers, ' ', p->moveSize*2);							// temporary save
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	1d18      	adds	r0, r3, #4
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	461a      	mov	r2, r3
 8001612:	2120      	movs	r1, #32
 8001614:	f020 fc01 	bl	8021e1a <memset>
	for(int i=0; i<p->moveSize*2; i++){
 8001618:	2300      	movs	r3, #0
 800161a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800161c:	e00c      	b.n	8001638 <MessageHandler+0x104>
		p->moveNumbers[i] = moveNumber_buff[i+1];
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001620:	3301      	adds	r3, #1
 8001622:	4a2e      	ldr	r2, [pc, #184]	; (80016dc <MessageHandler+0x1a8>)
 8001624:	5cd1      	ldrb	r1, [r2, r3]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162a:	4413      	add	r3, r2
 800162c:	3304      	adds	r3, #4
 800162e:	460a      	mov	r2, r1
 8001630:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 8001632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001634:	3301      	adds	r3, #1
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001640:	429a      	cmp	r2, r3
 8001642:	dbec      	blt.n	800161e <MessageHandler+0xea>
	}

	memset(p->moveLetters, ' ', p->moveSize*2);	// reset string with spaces
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	461a      	mov	r2, r3
 8001652:	2120      	movs	r1, #32
 8001654:	f020 fbe1 	bl	8021e1a <memset>
	for(int i=0; i<p->moveSize*2; i++){
 8001658:	2300      	movs	r3, #0
 800165a:	64bb      	str	r3, [r7, #72]	; 0x48
 800165c:	e00c      	b.n	8001678 <MessageHandler+0x144>
		p->moveLetters[i] = moveLetter_buff[i+1];
 800165e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001660:	3301      	adds	r3, #1
 8001662:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <MessageHandler+0x1ac>)
 8001664:	5cd1      	ldrb	r1, [r2, r3]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800166a:	4413      	add	r3, r2
 800166c:	33a4      	adds	r3, #164	; 0xa4
 800166e:	460a      	mov	r2, r1
 8001670:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 8001672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001674:	3301      	adds	r3, #1
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001680:	429a      	cmp	r2, r3
 8001682:	dbec      	blt.n	800165e <MessageHandler+0x12a>
	}

	memset(p->startFinish, ',', p->moveSize*2);	// reset string with spaces
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f503 70d6 	add.w	r0, r3, #428	; 0x1ac
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	461a      	mov	r2, r3
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	f020 fbc1 	bl	8021e1a <memset>
	for(int i=0; i<p->moveSize*2; i++){
 8001698:	2300      	movs	r3, #0
 800169a:	647b      	str	r3, [r7, #68]	; 0x44
 800169c:	e00d      	b.n	80016ba <MessageHandler+0x186>
		p->startFinish[i] = startFinish_buff[i+1];
 800169e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a0:	3301      	adds	r3, #1
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <MessageHandler+0x1b0>)
 80016a4:	5cd1      	ldrb	r1, [r2, r3]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016aa:	4413      	add	r3, r2
 80016ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80016b0:	460a      	mov	r2, r1
 80016b2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<p->moveSize*2; i++){
 80016b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016b6:	3301      	adds	r3, #1
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbeb      	blt.n	800169e <MessageHandler+0x16a>
	}


}
 80016c6:	bf00      	nop
 80016c8:	3758      	adds	r7, #88	; 0x58
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20002c18 	.word	0x20002c18
 80016d4:	200000e8 	.word	0x200000e8
 80016d8:	20005310 	.word	0x20005310
 80016dc:	200000b4 	.word	0x200000b4
 80016e0:	20002b30 	.word	0x20002b30
 80016e4:	20002af4 	.word	0x20002af4

080016e8 <problem_fetch>:
            break;
        default : break;
    }
}
*/
void problem_fetch(Problem* p, int id){
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	switch(id){
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f240 3227 	movw	r2, #807	; 0x327
 80016f8:	4293      	cmp	r3, r2
 80016fa:	f21a 8725 	bhi.w	801c548 <problem_fetch+0x1ae60>
 80016fe:	a101      	add	r1, pc, #4	; (adr r1, 8001704 <problem_fetch+0x1c>)
 8001700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001704:	080023a5 	.word	0x080023a5
 8001708:	08002405 	.word	0x08002405
 800170c:	0800246b 	.word	0x0800246b
 8001710:	080024e1 	.word	0x080024e1
 8001714:	08002561 	.word	0x08002561
 8001718:	080025cf 	.word	0x080025cf
 800171c:	08002649 	.word	0x08002649
 8001720:	08002735 	.word	0x08002735
 8001724:	08002797 	.word	0x08002797
 8001728:	08002809 	.word	0x08002809
 800172c:	08002883 	.word	0x08002883
 8001730:	080028f3 	.word	0x080028f3
 8001734:	0800296d 	.word	0x0800296d
 8001738:	08002a59 	.word	0x08002a59
 800173c:	08002acb 	.word	0x08002acb
 8001740:	08002b47 	.word	0x08002b47
 8001744:	08002bb9 	.word	0x08002bb9
 8001748:	08002c1b 	.word	0x08002c1b
 800174c:	08002c89 	.word	0x08002c89
 8001750:	08002cf3 	.word	0x08002cf3
 8001754:	08002dd9 	.word	0x08002dd9
 8001758:	08002e43 	.word	0x08002e43
 800175c:	08002ebb 	.word	0x08002ebb
 8001760:	08002f2f 	.word	0x08002f2f
 8001764:	08002fa5 	.word	0x08002fa5
 8001768:	08003015 	.word	0x08003015
 800176c:	080030f1 	.word	0x080030f1
 8001770:	08003159 	.word	0x08003159
 8001774:	080031cf 	.word	0x080031cf
 8001778:	08003247 	.word	0x08003247
 800177c:	080032b3 	.word	0x080032b3
 8001780:	08003321 	.word	0x08003321
 8001784:	080033fd 	.word	0x080033fd
 8001788:	0800347f 	.word	0x0800347f
 800178c:	080034f1 	.word	0x080034f1
 8001790:	0800355d 	.word	0x0800355d
 8001794:	080035cd 	.word	0x080035cd
 8001798:	08003651 	.word	0x08003651
 800179c:	08003739 	.word	0x08003739
 80017a0:	080037b5 	.word	0x080037b5
 80017a4:	08003829 	.word	0x08003829
 80017a8:	080038ab 	.word	0x080038ab
 80017ac:	0800391f 	.word	0x0800391f
 80017b0:	08003991 	.word	0x08003991
 80017b4:	08003a75 	.word	0x08003a75
 80017b8:	08003ae1 	.word	0x08003ae1
 80017bc:	08003b5f 	.word	0x08003b5f
 80017c0:	08003bd9 	.word	0x08003bd9
 80017c4:	08003c57 	.word	0x08003c57
 80017c8:	08003cd1 	.word	0x08003cd1
 80017cc:	08003dad 	.word	0x08003dad
 80017d0:	08003e17 	.word	0x08003e17
 80017d4:	08003e85 	.word	0x08003e85
 80017d8:	08003eed 	.word	0x08003eed
 80017dc:	08003f5d 	.word	0x08003f5d
 80017e0:	08003fd1 	.word	0x08003fd1
 80017e4:	08004039 	.word	0x08004039
 80017e8:	08004125 	.word	0x08004125
 80017ec:	08004199 	.word	0x08004199
 80017f0:	0800420d 	.word	0x0800420d
 80017f4:	0800428f 	.word	0x0800428f
 80017f8:	08004303 	.word	0x08004303
 80017fc:	0800436d 	.word	0x0800436d
 8001800:	0800444d 	.word	0x0800444d
 8001804:	080044bb 	.word	0x080044bb
 8001808:	0800452d 	.word	0x0800452d
 800180c:	0800458d 	.word	0x0800458d
 8001810:	08004607 	.word	0x08004607
 8001814:	08004681 	.word	0x08004681
 8001818:	0800475d 	.word	0x0800475d
 800181c:	080047d5 	.word	0x080047d5
 8001820:	0800483d 	.word	0x0800483d
 8001824:	080048b7 	.word	0x080048b7
 8001828:	0800491d 	.word	0x0800491d
 800182c:	08004981 	.word	0x08004981
 8001830:	080049fd 	.word	0x080049fd
 8001834:	08004ae1 	.word	0x08004ae1
 8001838:	08004b4f 	.word	0x08004b4f
 800183c:	08004bcf 	.word	0x08004bcf
 8001840:	08004c3b 	.word	0x08004c3b
 8001844:	08004cb3 	.word	0x08004cb3
 8001848:	08004d29 	.word	0x08004d29
 800184c:	08004e19 	.word	0x08004e19
 8001850:	08004e89 	.word	0x08004e89
 8001854:	08004efd 	.word	0x08004efd
 8001858:	08004f73 	.word	0x08004f73
 800185c:	08004fe9 	.word	0x08004fe9
 8001860:	08005057 	.word	0x08005057
 8001864:	08005149 	.word	0x08005149
 8001868:	080051bb 	.word	0x080051bb
 800186c:	08005235 	.word	0x08005235
 8001870:	080052a9 	.word	0x080052a9
 8001874:	0800530f 	.word	0x0800530f
 8001878:	08005389 	.word	0x08005389
 800187c:	08005469 	.word	0x08005469
 8001880:	080054e7 	.word	0x080054e7
 8001884:	0800555d 	.word	0x0800555d
 8001888:	080055cf 	.word	0x080055cf
 800188c:	0800563b 	.word	0x0800563b
 8001890:	080056c5 	.word	0x080056c5
 8001894:	08005799 	.word	0x08005799
 8001898:	0800580b 	.word	0x0800580b
 800189c:	0800587d 	.word	0x0800587d
 80018a0:	080058e1 	.word	0x080058e1
 80018a4:	08005949 	.word	0x08005949
 80018a8:	080059b7 	.word	0x080059b7
 80018ac:	08005a21 	.word	0x08005a21
 80018b0:	08005b15 	.word	0x08005b15
 80018b4:	08005b91 	.word	0x08005b91
 80018b8:	08005c03 	.word	0x08005c03
 80018bc:	08005c79 	.word	0x08005c79
 80018c0:	08005cef 	.word	0x08005cef
 80018c4:	08005d71 	.word	0x08005d71
 80018c8:	08005e51 	.word	0x08005e51
 80018cc:	08005ec1 	.word	0x08005ec1
 80018d0:	08005f31 	.word	0x08005f31
 80018d4:	08005fa3 	.word	0x08005fa3
 80018d8:	08006025 	.word	0x08006025
 80018dc:	080060a1 	.word	0x080060a1
 80018e0:	08006191 	.word	0x08006191
 80018e4:	080061ff 	.word	0x080061ff
 80018e8:	08006275 	.word	0x08006275
 80018ec:	080062f9 	.word	0x080062f9
 80018f0:	08006373 	.word	0x08006373
 80018f4:	080063e7 	.word	0x080063e7
 80018f8:	080064cd 	.word	0x080064cd
 80018fc:	08006533 	.word	0x08006533
 8001900:	080065a1 	.word	0x080065a1
 8001904:	0800660d 	.word	0x0800660d
 8001908:	08006679 	.word	0x08006679
 800190c:	080066e3 	.word	0x080066e3
 8001910:	08006759 	.word	0x08006759
 8001914:	08006855 	.word	0x08006855
 8001918:	080068c9 	.word	0x080068c9
 800191c:	0800692f 	.word	0x0800692f
 8001920:	080069a1 	.word	0x080069a1
 8001924:	08006a17 	.word	0x08006a17
 8001928:	08006a87 	.word	0x08006a87
 800192c:	08006af5 	.word	0x08006af5
 8001930:	08006be5 	.word	0x08006be5
 8001934:	08006c4b 	.word	0x08006c4b
 8001938:	08006cb5 	.word	0x08006cb5
 800193c:	08006d29 	.word	0x08006d29
 8001940:	08006d8f 	.word	0x08006d8f
 8001944:	08006e09 	.word	0x08006e09
 8001948:	08006e87 	.word	0x08006e87
 800194c:	08006f7d 	.word	0x08006f7d
 8001950:	08006fe9 	.word	0x08006fe9
 8001954:	08007063 	.word	0x08007063
 8001958:	080070cf 	.word	0x080070cf
 800195c:	08007143 	.word	0x08007143
 8001960:	080071b7 	.word	0x080071b7
 8001964:	080072a9 	.word	0x080072a9
 8001968:	08007317 	.word	0x08007317
 800196c:	08007393 	.word	0x08007393
 8001970:	08007409 	.word	0x08007409
 8001974:	08007475 	.word	0x08007475
 8001978:	080074eb 	.word	0x080074eb
 800197c:	080075d5 	.word	0x080075d5
 8001980:	0800765b 	.word	0x0800765b
 8001984:	080076cd 	.word	0x080076cd
 8001988:	08007737 	.word	0x08007737
 800198c:	080077a7 	.word	0x080077a7
 8001990:	08007811 	.word	0x08007811
 8001994:	080078fd 	.word	0x080078fd
 8001998:	0800796f 	.word	0x0800796f
 800199c:	080079cf 	.word	0x080079cf
 80019a0:	08007a3d 	.word	0x08007a3d
 80019a4:	08007aaf 	.word	0x08007aaf
 80019a8:	08007b2f 	.word	0x08007b2f
 80019ac:	08007c11 	.word	0x08007c11
 80019b0:	08007c85 	.word	0x08007c85
 80019b4:	08007d13 	.word	0x08007d13
 80019b8:	08007d7d 	.word	0x08007d7d
 80019bc:	08007deb 	.word	0x08007deb
 80019c0:	08007e55 	.word	0x08007e55
 80019c4:	08007f41 	.word	0x08007f41
 80019c8:	08007fb7 	.word	0x08007fb7
 80019cc:	08008037 	.word	0x08008037
 80019d0:	080080a7 	.word	0x080080a7
 80019d4:	08008119 	.word	0x08008119
 80019d8:	08008193 	.word	0x08008193
 80019dc:	0800826d 	.word	0x0800826d
 80019e0:	080082d9 	.word	0x080082d9
 80019e4:	08008345 	.word	0x08008345
 80019e8:	080083af 	.word	0x080083af
 80019ec:	0800841b 	.word	0x0800841b
 80019f0:	08008483 	.word	0x08008483
 80019f4:	080084ff 	.word	0x080084ff
 80019f8:	080085f1 	.word	0x080085f1
 80019fc:	08008669 	.word	0x08008669
 8001a00:	080086dd 	.word	0x080086dd
 8001a04:	08008747 	.word	0x08008747
 8001a08:	080087a7 	.word	0x080087a7
 8001a0c:	0800880b 	.word	0x0800880b
 8001a10:	08008885 	.word	0x08008885
 8001a14:	08008975 	.word	0x08008975
 8001a18:	080089dd 	.word	0x080089dd
 8001a1c:	08008a55 	.word	0x08008a55
 8001a20:	08008ad1 	.word	0x08008ad1
 8001a24:	08008b41 	.word	0x08008b41
 8001a28:	08008ba1 	.word	0x08008ba1
 8001a2c:	08008c05 	.word	0x08008c05
 8001a30:	08008ce5 	.word	0x08008ce5
 8001a34:	08008d51 	.word	0x08008d51
 8001a38:	08008dd1 	.word	0x08008dd1
 8001a3c:	08008e3f 	.word	0x08008e3f
 8001a40:	08008eaf 	.word	0x08008eaf
 8001a44:	08008f1b 	.word	0x08008f1b
 8001a48:	08008ffd 	.word	0x08008ffd
 8001a4c:	08009071 	.word	0x08009071
 8001a50:	080090dd 	.word	0x080090dd
 8001a54:	08009151 	.word	0x08009151
 8001a58:	080091cd 	.word	0x080091cd
 8001a5c:	08009235 	.word	0x08009235
 8001a60:	08009321 	.word	0x08009321
 8001a64:	080093ab 	.word	0x080093ab
 8001a68:	08009439 	.word	0x08009439
 8001a6c:	080094c3 	.word	0x080094c3
 8001a70:	0800953b 	.word	0x0800953b
 8001a74:	080095a7 	.word	0x080095a7
 8001a78:	0800967d 	.word	0x0800967d
 8001a7c:	080096ed 	.word	0x080096ed
 8001a80:	0800976d 	.word	0x0800976d
 8001a84:	080097db 	.word	0x080097db
 8001a88:	08009853 	.word	0x08009853
 8001a8c:	080098cd 	.word	0x080098cd
 8001a90:	080099a5 	.word	0x080099a5
 8001a94:	08009a1b 	.word	0x08009a1b
 8001a98:	08009a8d 	.word	0x08009a8d
 8001a9c:	08009af7 	.word	0x08009af7
 8001aa0:	08009b65 	.word	0x08009b65
 8001aa4:	08009be5 	.word	0x08009be5
 8001aa8:	08009cc1 	.word	0x08009cc1
 8001aac:	08009d43 	.word	0x08009d43
 8001ab0:	08009dbb 	.word	0x08009dbb
 8001ab4:	08009e31 	.word	0x08009e31
 8001ab8:	08009ec3 	.word	0x08009ec3
 8001abc:	08009f2b 	.word	0x08009f2b
 8001ac0:	0800a00d 	.word	0x0800a00d
 8001ac4:	0800a081 	.word	0x0800a081
 8001ac8:	0800a0f7 	.word	0x0800a0f7
 8001acc:	0800a177 	.word	0x0800a177
 8001ad0:	0800a1f1 	.word	0x0800a1f1
 8001ad4:	0800a267 	.word	0x0800a267
 8001ad8:	0800a34d 	.word	0x0800a34d
 8001adc:	0800a3c9 	.word	0x0800a3c9
 8001ae0:	0800a447 	.word	0x0800a447
 8001ae4:	0800a4bd 	.word	0x0800a4bd
 8001ae8:	0800a525 	.word	0x0800a525
 8001aec:	0800a58d 	.word	0x0800a58d
 8001af0:	0800a66d 	.word	0x0800a66d
 8001af4:	0800a6e5 	.word	0x0800a6e5
 8001af8:	0800a753 	.word	0x0800a753
 8001afc:	0800a7cd 	.word	0x0800a7cd
 8001b00:	0800a835 	.word	0x0800a835
 8001b04:	0800a8a1 	.word	0x0800a8a1
 8001b08:	0800a90b 	.word	0x0800a90b
 8001b0c:	0800a9f9 	.word	0x0800a9f9
 8001b10:	0800aa6b 	.word	0x0800aa6b
 8001b14:	0800aadf 	.word	0x0800aadf
 8001b18:	0800ab4f 	.word	0x0800ab4f
 8001b1c:	0800abc1 	.word	0x0800abc1
 8001b20:	0800ac45 	.word	0x0800ac45
 8001b24:	0800ad35 	.word	0x0800ad35
 8001b28:	0800adb5 	.word	0x0800adb5
 8001b2c:	0800ae1f 	.word	0x0800ae1f
 8001b30:	0800ae87 	.word	0x0800ae87
 8001b34:	0800aef5 	.word	0x0800aef5
 8001b38:	0800af61 	.word	0x0800af61
 8001b3c:	0800afdf 	.word	0x0800afdf
 8001b40:	0800b0c5 	.word	0x0800b0c5
 8001b44:	0800b133 	.word	0x0800b133
 8001b48:	0800b1ad 	.word	0x0800b1ad
 8001b4c:	0800b21d 	.word	0x0800b21d
 8001b50:	0800b28f 	.word	0x0800b28f
 8001b54:	0800b303 	.word	0x0800b303
 8001b58:	0800b3dd 	.word	0x0800b3dd
 8001b5c:	0800b453 	.word	0x0800b453
 8001b60:	0800b4cd 	.word	0x0800b4cd
 8001b64:	0800b541 	.word	0x0800b541
 8001b68:	0800b5a9 	.word	0x0800b5a9
 8001b6c:	0800b613 	.word	0x0800b613
 8001b70:	0800b701 	.word	0x0800b701
 8001b74:	0800b789 	.word	0x0800b789
 8001b78:	0800b801 	.word	0x0800b801
 8001b7c:	0800b87f 	.word	0x0800b87f
 8001b80:	0800b8f3 	.word	0x0800b8f3
 8001b84:	0800b96b 	.word	0x0800b96b
 8001b88:	0800ba3d 	.word	0x0800ba3d
 8001b8c:	0800bab3 	.word	0x0800bab3
 8001b90:	0800bb29 	.word	0x0800bb29
 8001b94:	0800bb93 	.word	0x0800bb93
 8001b98:	0800bbf9 	.word	0x0800bbf9
 8001b9c:	0800bc51 	.word	0x0800bc51
 8001ba0:	0800bccb 	.word	0x0800bccb
 8001ba4:	0800bdc1 	.word	0x0800bdc1
 8001ba8:	0800be33 	.word	0x0800be33
 8001bac:	0800beb3 	.word	0x0800beb3
 8001bb0:	0800bf23 	.word	0x0800bf23
 8001bb4:	0800bf89 	.word	0x0800bf89
 8001bb8:	0800bff9 	.word	0x0800bff9
 8001bbc:	0800c06d 	.word	0x0800c06d
 8001bc0:	0800c151 	.word	0x0800c151
 8001bc4:	0800c1b9 	.word	0x0800c1b9
 8001bc8:	0800c229 	.word	0x0800c229
 8001bcc:	0800c297 	.word	0x0800c297
 8001bd0:	0800c307 	.word	0x0800c307
 8001bd4:	0800c373 	.word	0x0800c373
 8001bd8:	0800c3e5 	.word	0x0800c3e5
 8001bdc:	0800c4c9 	.word	0x0800c4c9
 8001be0:	0800c52f 	.word	0x0800c52f
 8001be4:	0800c595 	.word	0x0800c595
 8001be8:	0800c607 	.word	0x0800c607
 8001bec:	0800c67b 	.word	0x0800c67b
 8001bf0:	0800c6e1 	.word	0x0800c6e1
 8001bf4:	0800c74b 	.word	0x0800c74b
 8001bf8:	0800c831 	.word	0x0800c831
 8001bfc:	0800c8a7 	.word	0x0800c8a7
 8001c00:	0800c917 	.word	0x0800c917
 8001c04:	0800c987 	.word	0x0800c987
 8001c08:	0800c9f7 	.word	0x0800c9f7
 8001c0c:	0800ca67 	.word	0x0800ca67
 8001c10:	0800cb41 	.word	0x0800cb41
 8001c14:	0800cbb5 	.word	0x0800cbb5
 8001c18:	0800cc1f 	.word	0x0800cc1f
 8001c1c:	0800cc8b 	.word	0x0800cc8b
 8001c20:	0800ccf7 	.word	0x0800ccf7
 8001c24:	0800cd69 	.word	0x0800cd69
 8001c28:	0800cdd7 	.word	0x0800cdd7
 8001c2c:	0800cec1 	.word	0x0800cec1
 8001c30:	0800cf37 	.word	0x0800cf37
 8001c34:	0800cf9b 	.word	0x0800cf9b
 8001c38:	0800d003 	.word	0x0800d003
 8001c3c:	0800d083 	.word	0x0800d083
 8001c40:	0800d0f9 	.word	0x0800d0f9
 8001c44:	0800d1dd 	.word	0x0800d1dd
 8001c48:	0800d24d 	.word	0x0800d24d
 8001c4c:	0800d2cb 	.word	0x0800d2cb
 8001c50:	0800d337 	.word	0x0800d337
 8001c54:	0800d3ad 	.word	0x0800d3ad
 8001c58:	0800d417 	.word	0x0800d417
 8001c5c:	0800d501 	.word	0x0800d501
 8001c60:	0800d57b 	.word	0x0800d57b
 8001c64:	0800d5ed 	.word	0x0800d5ed
 8001c68:	0800d65f 	.word	0x0800d65f
 8001c6c:	0800d6d1 	.word	0x0800d6d1
 8001c70:	0800d73f 	.word	0x0800d73f
 8001c74:	0800d819 	.word	0x0800d819
 8001c78:	0800d891 	.word	0x0800d891
 8001c7c:	0800d903 	.word	0x0800d903
 8001c80:	0800d967 	.word	0x0800d967
 8001c84:	0800d9f3 	.word	0x0800d9f3
 8001c88:	0800da5d 	.word	0x0800da5d
 8001c8c:	0800db45 	.word	0x0800db45
 8001c90:	0800dba9 	.word	0x0800dba9
 8001c94:	0800dc17 	.word	0x0800dc17
 8001c98:	0800dc85 	.word	0x0800dc85
 8001c9c:	0800dced 	.word	0x0800dced
 8001ca0:	0800dd59 	.word	0x0800dd59
 8001ca4:	0800ddd3 	.word	0x0800ddd3
 8001ca8:	0800deb5 	.word	0x0800deb5
 8001cac:	0800df33 	.word	0x0800df33
 8001cb0:	0800dfa7 	.word	0x0800dfa7
 8001cb4:	0800e00d 	.word	0x0800e00d
 8001cb8:	0800e07f 	.word	0x0800e07f
 8001cbc:	0800e0f9 	.word	0x0800e0f9
 8001cc0:	0800e1d5 	.word	0x0800e1d5
 8001cc4:	0800e239 	.word	0x0800e239
 8001cc8:	0800e29f 	.word	0x0800e29f
 8001ccc:	0800e313 	.word	0x0800e313
 8001cd0:	0800e387 	.word	0x0800e387
 8001cd4:	0800e403 	.word	0x0800e403
 8001cd8:	0800e4e5 	.word	0x0800e4e5
 8001cdc:	0800e567 	.word	0x0800e567
 8001ce0:	0800e5cb 	.word	0x0800e5cb
 8001ce4:	0800e633 	.word	0x0800e633
 8001ce8:	0800e69f 	.word	0x0800e69f
 8001cec:	0800e70f 	.word	0x0800e70f
 8001cf0:	0800e773 	.word	0x0800e773
 8001cf4:	0800e871 	.word	0x0800e871
 8001cf8:	0800e8e1 	.word	0x0800e8e1
 8001cfc:	0800e951 	.word	0x0800e951
 8001d00:	0800e9eb 	.word	0x0800e9eb
 8001d04:	0800ea59 	.word	0x0800ea59
 8001d08:	0800eac1 	.word	0x0800eac1
 8001d0c:	0800eb8d 	.word	0x0800eb8d
 8001d10:	0800ebfd 	.word	0x0800ebfd
 8001d14:	0800ec63 	.word	0x0800ec63
 8001d18:	0800eccd 	.word	0x0800eccd
 8001d1c:	0800ed2d 	.word	0x0800ed2d
 8001d20:	0800ed9d 	.word	0x0800ed9d
 8001d24:	0800ee05 	.word	0x0800ee05
 8001d28:	0800eee9 	.word	0x0800eee9
 8001d2c:	0800ef59 	.word	0x0800ef59
 8001d30:	0800efd3 	.word	0x0800efd3
 8001d34:	0800f047 	.word	0x0800f047
 8001d38:	0800f0bb 	.word	0x0800f0bb
 8001d3c:	0800f12d 	.word	0x0800f12d
 8001d40:	0800f209 	.word	0x0800f209
 8001d44:	0800f28b 	.word	0x0800f28b
 8001d48:	0800f301 	.word	0x0800f301
 8001d4c:	0800f373 	.word	0x0800f373
 8001d50:	0800f3e7 	.word	0x0800f3e7
 8001d54:	0800f453 	.word	0x0800f453
 8001d58:	0800f52d 	.word	0x0800f52d
 8001d5c:	0800f5a5 	.word	0x0800f5a5
 8001d60:	0800f611 	.word	0x0800f611
 8001d64:	0800f67b 	.word	0x0800f67b
 8001d68:	0800f6e7 	.word	0x0800f6e7
 8001d6c:	0800f753 	.word	0x0800f753
 8001d70:	0800f839 	.word	0x0800f839
 8001d74:	0800f8a9 	.word	0x0800f8a9
 8001d78:	0800f91f 	.word	0x0800f91f
 8001d7c:	0800f999 	.word	0x0800f999
 8001d80:	0800fa17 	.word	0x0800fa17
 8001d84:	0800fa8b 	.word	0x0800fa8b
 8001d88:	0800fb71 	.word	0x0800fb71
 8001d8c:	0800fbd7 	.word	0x0800fbd7
 8001d90:	0800fc47 	.word	0x0800fc47
 8001d94:	0800fcbf 	.word	0x0800fcbf
 8001d98:	0800fd29 	.word	0x0800fd29
 8001d9c:	0800fda1 	.word	0x0800fda1
 8001da0:	0800fe85 	.word	0x0800fe85
 8001da4:	0800feef 	.word	0x0800feef
 8001da8:	0800ff63 	.word	0x0800ff63
 8001dac:	0800ffcf 	.word	0x0800ffcf
 8001db0:	0801003d 	.word	0x0801003d
 8001db4:	080100b3 	.word	0x080100b3
 8001db8:	0801011d 	.word	0x0801011d
 8001dbc:	08010205 	.word	0x08010205
 8001dc0:	08010271 	.word	0x08010271
 8001dc4:	080102e5 	.word	0x080102e5
 8001dc8:	0801034f 	.word	0x0801034f
 8001dcc:	080103bb 	.word	0x080103bb
 8001dd0:	0801042d 	.word	0x0801042d
 8001dd4:	080104a7 	.word	0x080104a7
 8001dd8:	0801058d 	.word	0x0801058d
 8001ddc:	08010605 	.word	0x08010605
 8001de0:	08010681 	.word	0x08010681
 8001de4:	080106f5 	.word	0x080106f5
 8001de8:	08010771 	.word	0x08010771
 8001dec:	080107d7 	.word	0x080107d7
 8001df0:	080108ad 	.word	0x080108ad
 8001df4:	08010921 	.word	0x08010921
 8001df8:	08010997 	.word	0x08010997
 8001dfc:	08010a0d 	.word	0x08010a0d
 8001e00:	08010a79 	.word	0x08010a79
 8001e04:	08010ae9 	.word	0x08010ae9
 8001e08:	08010bc9 	.word	0x08010bc9
 8001e0c:	08010c3d 	.word	0x08010c3d
 8001e10:	08010cab 	.word	0x08010cab
 8001e14:	08010d1d 	.word	0x08010d1d
 8001e18:	08010d8d 	.word	0x08010d8d
 8001e1c:	08010e01 	.word	0x08010e01
 8001e20:	08010ee5 	.word	0x08010ee5
 8001e24:	08010f5b 	.word	0x08010f5b
 8001e28:	08010fe3 	.word	0x08010fe3
 8001e2c:	08011059 	.word	0x08011059
 8001e30:	080110c9 	.word	0x080110c9
 8001e34:	0801112f 	.word	0x0801112f
 8001e38:	08011215 	.word	0x08011215
 8001e3c:	0801128b 	.word	0x0801128b
 8001e40:	08011311 	.word	0x08011311
 8001e44:	0801138b 	.word	0x0801138b
 8001e48:	08011419 	.word	0x08011419
 8001e4c:	0801148f 	.word	0x0801148f
 8001e50:	0801156d 	.word	0x0801156d
 8001e54:	080115dd 	.word	0x080115dd
 8001e58:	0801164d 	.word	0x0801164d
 8001e5c:	080116d1 	.word	0x080116d1
 8001e60:	08011743 	.word	0x08011743
 8001e64:	080117b7 	.word	0x080117b7
 8001e68:	08011895 	.word	0x08011895
 8001e6c:	08011911 	.word	0x08011911
 8001e70:	0801198d 	.word	0x0801198d
 8001e74:	080119ff 	.word	0x080119ff
 8001e78:	08011a79 	.word	0x08011a79
 8001e7c:	08011aeb 	.word	0x08011aeb
 8001e80:	08011bbd 	.word	0x08011bbd
 8001e84:	08011c31 	.word	0x08011c31
 8001e88:	08011ca1 	.word	0x08011ca1
 8001e8c:	08011d23 	.word	0x08011d23
 8001e90:	08011d93 	.word	0x08011d93
 8001e94:	08011e01 	.word	0x08011e01
 8001e98:	08011ee5 	.word	0x08011ee5
 8001e9c:	08011f45 	.word	0x08011f45
 8001ea0:	08011fad 	.word	0x08011fad
 8001ea4:	08012029 	.word	0x08012029
 8001ea8:	080120af 	.word	0x080120af
 8001eac:	0801212f 	.word	0x0801212f
 8001eb0:	08012215 	.word	0x08012215
 8001eb4:	08012293 	.word	0x08012293
 8001eb8:	08012303 	.word	0x08012303
 8001ebc:	0801236f 	.word	0x0801236f
 8001ec0:	080123df 	.word	0x080123df
 8001ec4:	0801244d 	.word	0x0801244d
 8001ec8:	08012531 	.word	0x08012531
 8001ecc:	080125af 	.word	0x080125af
 8001ed0:	0801263b 	.word	0x0801263b
 8001ed4:	080126bb 	.word	0x080126bb
 8001ed8:	0801272d 	.word	0x0801272d
 8001edc:	080127a1 	.word	0x080127a1
 8001ee0:	08012881 	.word	0x08012881
 8001ee4:	080128ef 	.word	0x080128ef
 8001ee8:	08012967 	.word	0x08012967
 8001eec:	080129f1 	.word	0x080129f1
 8001ef0:	08012a6b 	.word	0x08012a6b
 8001ef4:	08012ae1 	.word	0x08012ae1
 8001ef8:	08012bb5 	.word	0x08012bb5
 8001efc:	08012c2b 	.word	0x08012c2b
 8001f00:	08012c95 	.word	0x08012c95
 8001f04:	08012d03 	.word	0x08012d03
 8001f08:	08012d71 	.word	0x08012d71
 8001f0c:	08012de7 	.word	0x08012de7
 8001f10:	08012ec1 	.word	0x08012ec1
 8001f14:	08012f39 	.word	0x08012f39
 8001f18:	08012f99 	.word	0x08012f99
 8001f1c:	08013005 	.word	0x08013005
 8001f20:	08013075 	.word	0x08013075
 8001f24:	080130f1 	.word	0x080130f1
 8001f28:	080131d9 	.word	0x080131d9
 8001f2c:	08013253 	.word	0x08013253
 8001f30:	080132c7 	.word	0x080132c7
 8001f34:	0801333f 	.word	0x0801333f
 8001f38:	080133af 	.word	0x080133af
 8001f3c:	08013413 	.word	0x08013413
 8001f40:	08013485 	.word	0x08013485
 8001f44:	08013571 	.word	0x08013571
 8001f48:	080135f5 	.word	0x080135f5
 8001f4c:	08013667 	.word	0x08013667
 8001f50:	080136fd 	.word	0x080136fd
 8001f54:	08013795 	.word	0x08013795
 8001f58:	080137ff 	.word	0x080137ff
 8001f5c:	080138e5 	.word	0x080138e5
 8001f60:	08013967 	.word	0x08013967
 8001f64:	080139df 	.word	0x080139df
 8001f68:	08013a55 	.word	0x08013a55
 8001f6c:	08013abb 	.word	0x08013abb
 8001f70:	08013b2b 	.word	0x08013b2b
 8001f74:	08013c19 	.word	0x08013c19
 8001f78:	08013c87 	.word	0x08013c87
 8001f7c:	08013cf9 	.word	0x08013cf9
 8001f80:	08013d71 	.word	0x08013d71
 8001f84:	08013de9 	.word	0x08013de9
 8001f88:	08013e55 	.word	0x08013e55
 8001f8c:	08013f39 	.word	0x08013f39
 8001f90:	08013fb3 	.word	0x08013fb3
 8001f94:	08014033 	.word	0x08014033
 8001f98:	080140a1 	.word	0x080140a1
 8001f9c:	08014111 	.word	0x08014111
 8001fa0:	08014181 	.word	0x08014181
 8001fa4:	08014269 	.word	0x08014269
 8001fa8:	080142ef 	.word	0x080142ef
 8001fac:	08014363 	.word	0x08014363
 8001fb0:	080143e9 	.word	0x080143e9
 8001fb4:	08014457 	.word	0x08014457
 8001fb8:	080144cd 	.word	0x080144cd
 8001fbc:	080145bd 	.word	0x080145bd
 8001fc0:	08014635 	.word	0x08014635
 8001fc4:	080146a3 	.word	0x080146a3
 8001fc8:	0801471f 	.word	0x0801471f
 8001fcc:	0801478f 	.word	0x0801478f
 8001fd0:	08014805 	.word	0x08014805
 8001fd4:	080148e5 	.word	0x080148e5
 8001fd8:	08014953 	.word	0x08014953
 8001fdc:	080149bf 	.word	0x080149bf
 8001fe0:	08014a53 	.word	0x08014a53
 8001fe4:	08014ac7 	.word	0x08014ac7
 8001fe8:	08014b41 	.word	0x08014b41
 8001fec:	08014c21 	.word	0x08014c21
 8001ff0:	08014c8d 	.word	0x08014c8d
 8001ff4:	08014cfb 	.word	0x08014cfb
 8001ff8:	08014d6d 	.word	0x08014d6d
 8001ffc:	08014ddb 	.word	0x08014ddb
 8002000:	08014e55 	.word	0x08014e55
 8002004:	08014f29 	.word	0x08014f29
 8002008:	08014f97 	.word	0x08014f97
 800200c:	0801500d 	.word	0x0801500d
 8002010:	08015077 	.word	0x08015077
 8002014:	080150fb 	.word	0x080150fb
 8002018:	08015173 	.word	0x08015173
 800201c:	08015259 	.word	0x08015259
 8002020:	080152c3 	.word	0x080152c3
 8002024:	08015329 	.word	0x08015329
 8002028:	08015393 	.word	0x08015393
 800202c:	08015407 	.word	0x08015407
 8002030:	0801548d 	.word	0x0801548d
 8002034:	080154f1 	.word	0x080154f1
 8002038:	080155dd 	.word	0x080155dd
 800203c:	0801564b 	.word	0x0801564b
 8002040:	080156af 	.word	0x080156af
 8002044:	08015729 	.word	0x08015729
 8002048:	0801579d 	.word	0x0801579d
 800204c:	080157ff 	.word	0x080157ff
 8002050:	080158f1 	.word	0x080158f1
 8002054:	08015975 	.word	0x08015975
 8002058:	080159e3 	.word	0x080159e3
 800205c:	08015a53 	.word	0x08015a53
 8002060:	08015ac3 	.word	0x08015ac3
 8002064:	08015b33 	.word	0x08015b33
 8002068:	08015c1d 	.word	0x08015c1d
 800206c:	08015ca3 	.word	0x08015ca3
 8002070:	08015d0f 	.word	0x08015d0f
 8002074:	08015d91 	.word	0x08015d91
 8002078:	08015df9 	.word	0x08015df9
 800207c:	08015e6f 	.word	0x08015e6f
 8002080:	08015f41 	.word	0x08015f41
 8002084:	08015fb9 	.word	0x08015fb9
 8002088:	0801602d 	.word	0x0801602d
 800208c:	0801608d 	.word	0x0801608d
 8002090:	08016103 	.word	0x08016103
 8002094:	08016173 	.word	0x08016173
 8002098:	080161e1 	.word	0x080161e1
 800209c:	080162d5 	.word	0x080162d5
 80020a0:	08016341 	.word	0x08016341
 80020a4:	080163af 	.word	0x080163af
 80020a8:	08016429 	.word	0x08016429
 80020ac:	08016491 	.word	0x08016491
 80020b0:	08016501 	.word	0x08016501
 80020b4:	0801656d 	.word	0x0801656d
 80020b8:	08016659 	.word	0x08016659
 80020bc:	080166cd 	.word	0x080166cd
 80020c0:	08016735 	.word	0x08016735
 80020c4:	080167a9 	.word	0x080167a9
 80020c8:	08016823 	.word	0x08016823
 80020cc:	0801689f 	.word	0x0801689f
 80020d0:	08016961 	.word	0x08016961
 80020d4:	080169d3 	.word	0x080169d3
 80020d8:	08016a53 	.word	0x08016a53
 80020dc:	08016abf 	.word	0x08016abf
 80020e0:	08016b2f 	.word	0x08016b2f
 80020e4:	08016b9f 	.word	0x08016b9f
 80020e8:	08016c79 	.word	0x08016c79
 80020ec:	08016ce1 	.word	0x08016ce1
 80020f0:	08016d5d 	.word	0x08016d5d
 80020f4:	08016dcd 	.word	0x08016dcd
 80020f8:	08016e45 	.word	0x08016e45
 80020fc:	08016ea7 	.word	0x08016ea7
 8002100:	08016f19 	.word	0x08016f19
 8002104:	08017001 	.word	0x08017001
 8002108:	0801706f 	.word	0x0801706f
 800210c:	080170db 	.word	0x080170db
 8002110:	0801714b 	.word	0x0801714b
 8002114:	080171b7 	.word	0x080171b7
 8002118:	08017225 	.word	0x08017225
 800211c:	08017289 	.word	0x08017289
 8002120:	08017361 	.word	0x08017361
 8002124:	080173d1 	.word	0x080173d1
 8002128:	0801743b 	.word	0x0801743b
 800212c:	0801749d 	.word	0x0801749d
 8002130:	08017507 	.word	0x08017507
 8002134:	08017579 	.word	0x08017579
 8002138:	08017681 	.word	0x08017681
 800213c:	080176fd 	.word	0x080176fd
 8002140:	08017775 	.word	0x08017775
 8002144:	080177eb 	.word	0x080177eb
 8002148:	0801785b 	.word	0x0801785b
 800214c:	080178c5 	.word	0x080178c5
 8002150:	08017999 	.word	0x08017999
 8002154:	08017a11 	.word	0x08017a11
 8002158:	08017a93 	.word	0x08017a93
 800215c:	08017b07 	.word	0x08017b07
 8002160:	08017b77 	.word	0x08017b77
 8002164:	08017bf3 	.word	0x08017bf3
 8002168:	08017cd1 	.word	0x08017cd1
 800216c:	08017d41 	.word	0x08017d41
 8002170:	08017db1 	.word	0x08017db1
 8002174:	08017e23 	.word	0x08017e23
 8002178:	08017e9d 	.word	0x08017e9d
 800217c:	08017f0b 	.word	0x08017f0b
 8002180:	08017f7d 	.word	0x08017f7d
 8002184:	08018061 	.word	0x08018061
 8002188:	080180cd 	.word	0x080180cd
 800218c:	08018141 	.word	0x08018141
 8002190:	080181bb 	.word	0x080181bb
 8002194:	08018233 	.word	0x08018233
 8002198:	080182a5 	.word	0x080182a5
 800219c:	08018381 	.word	0x08018381
 80021a0:	080183f1 	.word	0x080183f1
 80021a4:	0801846d 	.word	0x0801846d
 80021a8:	080184e9 	.word	0x080184e9
 80021ac:	08018545 	.word	0x08018545
 80021b0:	080185b9 	.word	0x080185b9
 80021b4:	0801869d 	.word	0x0801869d
 80021b8:	0801870b 	.word	0x0801870b
 80021bc:	08018773 	.word	0x08018773
 80021c0:	080187dd 	.word	0x080187dd
 80021c4:	08018845 	.word	0x08018845
 80021c8:	080188ad 	.word	0x080188ad
 80021cc:	08018917 	.word	0x08018917
 80021d0:	08018a01 	.word	0x08018a01
 80021d4:	08018a7b 	.word	0x08018a7b
 80021d8:	08018af5 	.word	0x08018af5
 80021dc:	08018b6b 	.word	0x08018b6b
 80021e0:	08018bdb 	.word	0x08018bdb
 80021e4:	08018c45 	.word	0x08018c45
 80021e8:	08018d2d 	.word	0x08018d2d
 80021ec:	08018d9f 	.word	0x08018d9f
 80021f0:	08018e11 	.word	0x08018e11
 80021f4:	08018e7d 	.word	0x08018e7d
 80021f8:	08018ee9 	.word	0x08018ee9
 80021fc:	08018f4d 	.word	0x08018f4d
 8002200:	08018fc1 	.word	0x08018fc1
 8002204:	080190a9 	.word	0x080190a9
 8002208:	0801911f 	.word	0x0801911f
 800220c:	0801918f 	.word	0x0801918f
 8002210:	080191f3 	.word	0x080191f3
 8002214:	08019263 	.word	0x08019263
 8002218:	080192d3 	.word	0x080192d3
 800221c:	08019339 	.word	0x08019339
 8002220:	08019419 	.word	0x08019419
 8002224:	0801947d 	.word	0x0801947d
 8002228:	080194e5 	.word	0x080194e5
 800222c:	08019555 	.word	0x08019555
 8002230:	080195cb 	.word	0x080195cb
 8002234:	0801963b 	.word	0x0801963b
 8002238:	080196ad 	.word	0x080196ad
 800223c:	080197a1 	.word	0x080197a1
 8002240:	08019819 	.word	0x08019819
 8002244:	0801988f 	.word	0x0801988f
 8002248:	08019909 	.word	0x08019909
 800224c:	08019977 	.word	0x08019977
 8002250:	080199ed 	.word	0x080199ed
 8002254:	08019acd 	.word	0x08019acd
 8002258:	08019b37 	.word	0x08019b37
 800225c:	08019bad 	.word	0x08019bad
 8002260:	08019c1d 	.word	0x08019c1d
 8002264:	08019c8d 	.word	0x08019c8d
 8002268:	08019cf9 	.word	0x08019cf9
 800226c:	08019de1 	.word	0x08019de1
 8002270:	08019e4d 	.word	0x08019e4d
 8002274:	08019eb7 	.word	0x08019eb7
 8002278:	08019f23 	.word	0x08019f23
 800227c:	08019f91 	.word	0x08019f91
 8002280:	0801a00b 	.word	0x0801a00b
 8002284:	0801a079 	.word	0x0801a079
 8002288:	0801a169 	.word	0x0801a169
 800228c:	0801a1d7 	.word	0x0801a1d7
 8002290:	0801a24d 	.word	0x0801a24d
 8002294:	0801a2d5 	.word	0x0801a2d5
 8002298:	0801a349 	.word	0x0801a349
 800229c:	0801a3ab 	.word	0x0801a3ab
 80022a0:	0801a489 	.word	0x0801a489
 80022a4:	0801a4ff 	.word	0x0801a4ff
 80022a8:	0801a569 	.word	0x0801a569
 80022ac:	0801a5db 	.word	0x0801a5db
 80022b0:	0801a651 	.word	0x0801a651
 80022b4:	0801a6b7 	.word	0x0801a6b7
 80022b8:	0801a727 	.word	0x0801a727
 80022bc:	0801a819 	.word	0x0801a819
 80022c0:	0801a87d 	.word	0x0801a87d
 80022c4:	0801a8ef 	.word	0x0801a8ef
 80022c8:	0801a965 	.word	0x0801a965
 80022cc:	0801a9cb 	.word	0x0801a9cb
 80022d0:	0801aa3d 	.word	0x0801aa3d
 80022d4:	0801aaa3 	.word	0x0801aaa3
 80022d8:	0801ab99 	.word	0x0801ab99
 80022dc:	0801ac09 	.word	0x0801ac09
 80022e0:	0801ac7f 	.word	0x0801ac7f
 80022e4:	0801acf7 	.word	0x0801acf7
 80022e8:	0801ad67 	.word	0x0801ad67
 80022ec:	0801addf 	.word	0x0801addf
 80022f0:	0801aebd 	.word	0x0801aebd
 80022f4:	0801af29 	.word	0x0801af29
 80022f8:	0801af8d 	.word	0x0801af8d
 80022fc:	0801aff3 	.word	0x0801aff3
 8002300:	0801b06d 	.word	0x0801b06d
 8002304:	0801b0dd 	.word	0x0801b0dd
 8002308:	0801b13f 	.word	0x0801b13f
 800230c:	0801b225 	.word	0x0801b225
 8002310:	0801b29b 	.word	0x0801b29b
 8002314:	0801b30b 	.word	0x0801b30b
 8002318:	0801b36d 	.word	0x0801b36d
 800231c:	0801b3e1 	.word	0x0801b3e1
 8002320:	0801b457 	.word	0x0801b457
 8002324:	0801b4c9 	.word	0x0801b4c9
 8002328:	0801b5a9 	.word	0x0801b5a9
 800232c:	0801b619 	.word	0x0801b619
 8002330:	0801b685 	.word	0x0801b685
 8002334:	0801b6eb 	.word	0x0801b6eb
 8002338:	0801b76d 	.word	0x0801b76d
 800233c:	0801b7dd 	.word	0x0801b7dd
 8002340:	0801b843 	.word	0x0801b843
 8002344:	0801b935 	.word	0x0801b935
 8002348:	0801b9a3 	.word	0x0801b9a3
 800234c:	0801b9ff 	.word	0x0801b9ff
 8002350:	0801ba77 	.word	0x0801ba77
 8002354:	0801bae7 	.word	0x0801bae7
 8002358:	0801bb57 	.word	0x0801bb57
 800235c:	0801bc39 	.word	0x0801bc39
 8002360:	0801bcb5 	.word	0x0801bcb5
 8002364:	0801bd4b 	.word	0x0801bd4b
 8002368:	0801bdcb 	.word	0x0801bdcb
 800236c:	0801be2d 	.word	0x0801be2d
 8002370:	0801bea1 	.word	0x0801bea1
 8002374:	0801bf81 	.word	0x0801bf81
 8002378:	0801bfeb 	.word	0x0801bfeb
 800237c:	0801c057 	.word	0x0801c057
 8002380:	0801c0bd 	.word	0x0801c0bd
 8002384:	0801c137 	.word	0x0801c137
 8002388:	0801c1a1 	.word	0x0801c1a1
 800238c:	0801c289 	.word	0x0801c289
 8002390:	0801c301 	.word	0x0801c301
 8002394:	0801c369 	.word	0x0801c369
 8002398:	0801c3e1 	.word	0x0801c3e1
 800239c:	0801c455 	.word	0x0801c455
 80023a0:	0801c4c9 	.word	0x0801c4c9
		case 0 :
			strcpy(p->name,"CAZZONE");
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80023aa:	49c3      	ldr	r1, [pc, #780]	; (80026b8 <problem_fetch+0xfd0>)
 80023ac:	461a      	mov	r2, r3
 80023ae:	460b      	mov	r3, r1
 80023b0:	cb03      	ldmia	r3!, {r0, r1}
 80023b2:	6010      	str	r0, [r2, #0]
 80023b4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"8=D");
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80023bc:	4abf      	ldr	r2, [pc, #764]	; (80026bc <problem_fetch+0xfd4>)
 80023be:	6810      	ldr	r0, [r2, #0]
 80023c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 50;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2232      	movs	r2, #50	; 0x32
 80023c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,B,B,B,C,C,E,E,E,E,E,E,E,E,E,E,E,E,E,F,F,F,F,G,G,G,G,H,H,H,H,H,H,H,H,H,H,H,H,H,I,I,J,J,J,J,K,K");
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	33a4      	adds	r3, #164	; 0xa4
 80023cc:	4abc      	ldr	r2, [pc, #752]	; (80026c0 <problem_fetch+0xfd8>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	4611      	mov	r1, r2
 80023d2:	2364      	movs	r3, #100	; 0x64
 80023d4:	461a      	mov	r2, r3
 80023d6:	f01f fd15 	bl	8021e04 <memcpy>
			strcpy(p->moveNumbers,"16,15,18,17,14,13,18,13,18,17,14,13,12,11,10,9,8,7,6,5,4,16,15,5,3,16,15,5,3,18,17,14,13,12,11,10,9,8,7,6,5,4,18,13,18,17,14,13,16,15");
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3304      	adds	r3, #4
 80023de:	4ab9      	ldr	r2, [pc, #740]	; (80026c4 <problem_fetch+0xfdc>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	4611      	mov	r1, r2
 80023e4:	2386      	movs	r3, #134	; 0x86
 80023e6:	461a      	mov	r2, r3
 80023e8:	f01f fd0c 	bl	8021e04 <memcpy>
			strcpy(p->startFinish,"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c");
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80023f2:	4ab5      	ldr	r2, [pc, #724]	; (80026c8 <problem_fetch+0xfe0>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	4611      	mov	r1, r2
 80023f8:	2364      	movs	r3, #100	; 0x64
 80023fa:	461a      	mov	r2, r3
 80023fc:	f01f fd02 	bl	8021e04 <memcpy>
			break;
 8002400:	f01a b8a2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 1 :
			strcpy(p->name,"JUMPBUG");
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800240a:	49b0      	ldr	r1, [pc, #704]	; (80026cc <problem_fetch+0xfe4>)
 800240c:	461a      	mov	r2, r3
 800240e:	460b      	mov	r3, r1
 8002410:	cb03      	ldmia	r3!, {r0, r1}
 8002412:	6010      	str	r0, [r2, #0]
 8002414:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800241c:	4aac      	ldr	r2, [pc, #688]	; (80026d0 <problem_fetch+0xfe8>)
 800241e:	8811      	ldrh	r1, [r2, #0]
 8002420:	7892      	ldrb	r2, [r2, #2]
 8002422:	8019      	strh	r1, [r3, #0]
 8002424:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2206      	movs	r2, #6
 800242a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,F,C,D");
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	33a4      	adds	r3, #164	; 0xa4
 8002430:	4aa8      	ldr	r2, [pc, #672]	; (80026d4 <problem_fetch+0xfec>)
 8002432:	461c      	mov	r4, r3
 8002434:	4613      	mov	r3, r2
 8002436:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002438:	6020      	str	r0, [r4, #0]
 800243a:	6061      	str	r1, [r4, #4]
 800243c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,13,18");
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	4aa5      	ldr	r2, [pc, #660]	; (80026d8 <problem_fetch+0xff0>)
 8002444:	461c      	mov	r4, r3
 8002446:	4615      	mov	r5, r2
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	6020      	str	r0, [r4, #0]
 800244c:	6061      	str	r1, [r4, #4]
 800244e:	60a2      	str	r2, [r4, #8]
 8002450:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002458:	4aa0      	ldr	r2, [pc, #640]	; (80026dc <problem_fetch+0xff4>)
 800245a:	461c      	mov	r4, r3
 800245c:	4613      	mov	r3, r2
 800245e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002460:	6020      	str	r0, [r4, #0]
 8002462:	6061      	str	r1, [r4, #4]
 8002464:	60a2      	str	r2, [r4, #8]
			break;
 8002466:	f01a b86f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 2 :
			strcpy(p->name,"JINJA TEMPLATE 2");
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002470:	4a9b      	ldr	r2, [pc, #620]	; (80026e0 <problem_fetch+0xff8>)
 8002472:	461d      	mov	r5, r3
 8002474:	4614      	mov	r4, r2
 8002476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002478:	6028      	str	r0, [r5, #0]
 800247a:	6069      	str	r1, [r5, #4]
 800247c:	60aa      	str	r2, [r5, #8]
 800247e:	60eb      	str	r3, [r5, #12]
 8002480:	7823      	ldrb	r3, [r4, #0]
 8002482:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800248a:	4a96      	ldr	r2, [pc, #600]	; (80026e4 <problem_fetch+0xffc>)
 800248c:	6810      	ldr	r0, [r2, #0]
 800248e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2207      	movs	r2, #7
 8002494:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,I,J,G,I,G");
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	33a4      	adds	r3, #164	; 0xa4
 800249a:	4a93      	ldr	r2, [pc, #588]	; (80026e8 <problem_fetch+0x1000>)
 800249c:	461c      	mov	r4, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024a2:	6020      	str	r0, [r4, #0]
 80024a4:	6061      	str	r1, [r4, #4]
 80024a6:	60a2      	str	r2, [r4, #8]
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,9,13,14,18,4");
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3304      	adds	r3, #4
 80024b0:	4a8e      	ldr	r2, [pc, #568]	; (80026ec <problem_fetch+0x1004>)
 80024b2:	461d      	mov	r5, r3
 80024b4:	4614      	mov	r4, r2
 80024b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024b8:	6028      	str	r0, [r5, #0]
 80024ba:	6069      	str	r1, [r5, #4]
 80024bc:	60aa      	str	r2, [r5, #8]
 80024be:	60eb      	str	r3, [r5, #12]
 80024c0:	7823      	ldrb	r3, [r4, #0]
 80024c2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,s");
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80024ca:	4a89      	ldr	r2, [pc, #548]	; (80026f0 <problem_fetch+0x1008>)
 80024cc:	461c      	mov	r4, r3
 80024ce:	4613      	mov	r3, r2
 80024d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024d2:	6020      	str	r0, [r4, #0]
 80024d4:	6061      	str	r1, [r4, #4]
 80024d6:	60a2      	str	r2, [r4, #8]
 80024d8:	881b      	ldrh	r3, [r3, #0]
 80024da:	81a3      	strh	r3, [r4, #12]
			break;
 80024dc:	f01a b834 	b.w	801c548 <problem_fetch+0x1ae60>
		case 3 :
			strcpy(p->name,"BATTLE OF THE PUDGE SHORT");
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80024e6:	4a83      	ldr	r2, [pc, #524]	; (80026f4 <problem_fetch+0x100c>)
 80024e8:	461d      	mov	r5, r3
 80024ea:	4614      	mov	r4, r2
 80024ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ee:	6028      	str	r0, [r5, #0]
 80024f0:	6069      	str	r1, [r5, #4]
 80024f2:	60aa      	str	r2, [r5, #8]
 80024f4:	60eb      	str	r3, [r5, #12]
 80024f6:	cc03      	ldmia	r4!, {r0, r1}
 80024f8:	6128      	str	r0, [r5, #16]
 80024fa:	6169      	str	r1, [r5, #20]
 80024fc:	8823      	ldrh	r3, [r4, #0]
 80024fe:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002506:	4a72      	ldr	r2, [pc, #456]	; (80026d0 <problem_fetch+0xfe8>)
 8002508:	8811      	ldrh	r1, [r2, #0]
 800250a:	7892      	ldrb	r2, [r2, #2]
 800250c:	8019      	strh	r1, [r3, #0]
 800250e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2207      	movs	r2, #7
 8002514:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,I,D,D,D");
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	33a4      	adds	r3, #164	; 0xa4
 800251a:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <problem_fetch+0x1010>)
 800251c:	461c      	mov	r4, r3
 800251e:	4613      	mov	r3, r2
 8002520:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002522:	6020      	str	r0, [r4, #0]
 8002524:	6061      	str	r1, [r4, #4]
 8002526:	60a2      	str	r2, [r4, #8]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,11,15,18");
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	4a72      	ldr	r2, [pc, #456]	; (80026fc <problem_fetch+0x1014>)
 8002532:	461d      	mov	r5, r3
 8002534:	4614      	mov	r4, r2
 8002536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002538:	6028      	str	r0, [r5, #0]
 800253a:	6069      	str	r1, [r5, #4]
 800253c:	60aa      	str	r2, [r5, #8]
 800253e:	60eb      	str	r3, [r5, #12]
 8002540:	8823      	ldrh	r3, [r4, #0]
 8002542:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800254a:	4a6d      	ldr	r2, [pc, #436]	; (8002700 <problem_fetch+0x1018>)
 800254c:	461c      	mov	r4, r3
 800254e:	4613      	mov	r3, r2
 8002550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002552:	6020      	str	r0, [r4, #0]
 8002554:	6061      	str	r1, [r4, #4]
 8002556:	60a2      	str	r2, [r4, #8]
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	81a3      	strh	r3, [r4, #12]
			break;
 800255c:	f019 bff4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 4 :
			strcpy(p->name,"BLACK PSYCHO");
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002566:	4a67      	ldr	r2, [pc, #412]	; (8002704 <problem_fetch+0x101c>)
 8002568:	461c      	mov	r4, r3
 800256a:	4613      	mov	r3, r2
 800256c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800256e:	6020      	str	r0, [r4, #0]
 8002570:	6061      	str	r1, [r4, #4]
 8002572:	60a2      	str	r2, [r4, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800257e:	4a62      	ldr	r2, [pc, #392]	; (8002708 <problem_fetch+0x1020>)
 8002580:	6810      	ldr	r0, [r2, #0]
 8002582:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2206      	movs	r2, #6
 8002588:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,D,G,D");
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	33a4      	adds	r3, #164	; 0xa4
 800258e:	4a5f      	ldr	r2, [pc, #380]	; (800270c <problem_fetch+0x1024>)
 8002590:	461c      	mov	r4, r3
 8002592:	4613      	mov	r3, r2
 8002594:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002596:	6020      	str	r0, [r4, #0]
 8002598:	6061      	str	r1, [r4, #4]
 800259a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3304      	adds	r3, #4
 80025a0:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <problem_fetch+0x1028>)
 80025a2:	461c      	mov	r4, r3
 80025a4:	4613      	mov	r3, r2
 80025a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025a8:	6020      	str	r0, [r4, #0]
 80025aa:	6061      	str	r1, [r4, #4]
 80025ac:	60a2      	str	r2, [r4, #8]
 80025ae:	881a      	ldrh	r2, [r3, #0]
 80025b0:	789b      	ldrb	r3, [r3, #2]
 80025b2:	81a2      	strh	r2, [r4, #12]
 80025b4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80025bc:	4a47      	ldr	r2, [pc, #284]	; (80026dc <problem_fetch+0xff4>)
 80025be:	461c      	mov	r4, r3
 80025c0:	4613      	mov	r3, r2
 80025c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025c4:	6020      	str	r0, [r4, #0]
 80025c6:	6061      	str	r1, [r4, #4]
 80025c8:	60a2      	str	r2, [r4, #8]
			break;
 80025ca:	f019 bfbd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 5 :
			strcpy(p->name,"TRIAL ‘N’ ERROR");
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80025d4:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <problem_fetch+0x102c>)
 80025d6:	461d      	mov	r5, r3
 80025d8:	4614      	mov	r4, r2
 80025da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025dc:	6028      	str	r0, [r5, #0]
 80025de:	6069      	str	r1, [r5, #4]
 80025e0:	60aa      	str	r2, [r5, #8]
 80025e2:	60eb      	str	r3, [r5, #12]
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C");
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <problem_fetch+0x1030>)
 80025f0:	8811      	ldrh	r1, [r2, #0]
 80025f2:	7892      	ldrb	r2, [r2, #2]
 80025f4:	8019      	strh	r1, [r3, #0]
 80025f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2207      	movs	r2, #7
 80025fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,G,E,J,D");
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	33a4      	adds	r3, #164	; 0xa4
 8002602:	4a46      	ldr	r2, [pc, #280]	; (800271c <problem_fetch+0x1034>)
 8002604:	461c      	mov	r4, r3
 8002606:	4613      	mov	r3, r2
 8002608:	cb07      	ldmia	r3!, {r0, r1, r2}
 800260a:	6020      	str	r0, [r4, #0]
 800260c:	6061      	str	r1, [r4, #4]
 800260e:	60a2      	str	r2, [r4, #8]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,9,10,14,16,18");
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4a41      	ldr	r2, [pc, #260]	; (8002720 <problem_fetch+0x1038>)
 800261a:	461d      	mov	r5, r3
 800261c:	4614      	mov	r4, r2
 800261e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002620:	6028      	str	r0, [r5, #0]
 8002622:	6069      	str	r1, [r5, #4]
 8002624:	60aa      	str	r2, [r5, #8]
 8002626:	60eb      	str	r3, [r5, #12]
 8002628:	8823      	ldrh	r3, [r4, #0]
 800262a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002632:	4a33      	ldr	r2, [pc, #204]	; (8002700 <problem_fetch+0x1018>)
 8002634:	461c      	mov	r4, r3
 8002636:	4613      	mov	r3, r2
 8002638:	cb07      	ldmia	r3!, {r0, r1, r2}
 800263a:	6020      	str	r0, [r4, #0]
 800263c:	6061      	str	r1, [r4, #4]
 800263e:	60a2      	str	r2, [r4, #8]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	81a3      	strh	r3, [r4, #12]
			break;
 8002644:	f019 bf80 	b.w	801c548 <problem_fetch+0x1ae60>
		case 6 :
			strcpy(p->name,"1985-54");
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800264e:	4935      	ldr	r1, [pc, #212]	; (8002724 <problem_fetch+0x103c>)
 8002650:	461a      	mov	r2, r3
 8002652:	460b      	mov	r3, r1
 8002654:	cb03      	ldmia	r3!, {r0, r1}
 8002656:	6010      	str	r0, [r2, #0]
 8002658:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002660:	4a20      	ldr	r2, [pc, #128]	; (80026e4 <problem_fetch+0xffc>)
 8002662:	6810      	ldr	r0, [r2, #0]
 8002664:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2208      	movs	r2, #8
 800266a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,I,H,J,G,H,D");
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	33a4      	adds	r3, #164	; 0xa4
 8002670:	4a2d      	ldr	r2, [pc, #180]	; (8002728 <problem_fetch+0x1040>)
 8002672:	461c      	mov	r4, r3
 8002674:	4615      	mov	r5, r2
 8002676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002678:	6020      	str	r0, [r4, #0]
 800267a:	6061      	str	r1, [r4, #4]
 800267c:	60a2      	str	r2, [r4, #8]
 800267e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,10,13,15,16,18");
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4a29      	ldr	r2, [pc, #164]	; (800272c <problem_fetch+0x1044>)
 8002686:	461d      	mov	r5, r3
 8002688:	4614      	mov	r4, r2
 800268a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800268c:	6028      	str	r0, [r5, #0]
 800268e:	6069      	str	r1, [r5, #4]
 8002690:	60aa      	str	r2, [r5, #8]
 8002692:	60eb      	str	r3, [r5, #12]
 8002694:	6820      	ldr	r0, [r4, #0]
 8002696:	6128      	str	r0, [r5, #16]
 8002698:	88a3      	ldrh	r3, [r4, #4]
 800269a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <problem_fetch+0x1048>)
 80026a4:	461c      	mov	r4, r3
 80026a6:	4615      	mov	r5, r2
 80026a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026aa:	6020      	str	r0, [r4, #0]
 80026ac:	6061      	str	r1, [r4, #4]
 80026ae:	60a2      	str	r2, [r4, #8]
 80026b0:	60e3      	str	r3, [r4, #12]
			break;
 80026b2:	f019 bf49 	b.w	801c548 <problem_fetch+0x1ae60>
 80026b6:	bf00      	nop
 80026b8:	080237b8 	.word	0x080237b8
 80026bc:	080237c0 	.word	0x080237c0
 80026c0:	080237c4 	.word	0x080237c4
 80026c4:	08023828 	.word	0x08023828
 80026c8:	080238b0 	.word	0x080238b0
 80026cc:	08023914 	.word	0x08023914
 80026d0:	0802391c 	.word	0x0802391c
 80026d4:	08023920 	.word	0x08023920
 80026d8:	0802392c 	.word	0x0802392c
 80026dc:	0802393c 	.word	0x0802393c
 80026e0:	08023948 	.word	0x08023948
 80026e4:	0802395c 	.word	0x0802395c
 80026e8:	08023960 	.word	0x08023960
 80026ec:	08023970 	.word	0x08023970
 80026f0:	08023984 	.word	0x08023984
 80026f4:	08023994 	.word	0x08023994
 80026f8:	080239b0 	.word	0x080239b0
 80026fc:	080239c0 	.word	0x080239c0
 8002700:	080239d4 	.word	0x080239d4
 8002704:	080239e4 	.word	0x080239e4
 8002708:	080239f4 	.word	0x080239f4
 800270c:	080239f8 	.word	0x080239f8
 8002710:	08023a04 	.word	0x08023a04
 8002714:	08023a14 	.word	0x08023a14
 8002718:	08023a28 	.word	0x08023a28
 800271c:	08023a2c 	.word	0x08023a2c
 8002720:	08023a3c 	.word	0x08023a3c
 8002724:	08023a50 	.word	0x08023a50
 8002728:	08023a58 	.word	0x08023a58
 800272c:	08023a68 	.word	0x08023a68
 8002730:	08023a80 	.word	0x08023a80
		case 7 :
			strcpy(p->name,"PANTHER");
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800273a:	49ab      	ldr	r1, [pc, #684]	; (80029e8 <problem_fetch+0x1300>)
 800273c:	461a      	mov	r2, r3
 800273e:	460b      	mov	r3, r1
 8002740:	cb03      	ldmia	r3!, {r0, r1}
 8002742:	6010      	str	r0, [r2, #0]
 8002744:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800274c:	4aa7      	ldr	r2, [pc, #668]	; (80029ec <problem_fetch+0x1304>)
 800274e:	6810      	ldr	r0, [r2, #0]
 8002750:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2204      	movs	r2, #4
 8002756:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	33a4      	adds	r3, #164	; 0xa4
 800275c:	49a4      	ldr	r1, [pc, #656]	; (80029f0 <problem_fetch+0x1308>)
 800275e:	461a      	mov	r2, r3
 8002760:	460b      	mov	r3, r1
 8002762:	cb03      	ldmia	r3!, {r0, r1}
 8002764:	6010      	str	r0, [r2, #0]
 8002766:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3304      	adds	r3, #4
 800276c:	49a1      	ldr	r1, [pc, #644]	; (80029f4 <problem_fetch+0x130c>)
 800276e:	461a      	mov	r2, r3
 8002770:	460b      	mov	r3, r1
 8002772:	cb03      	ldmia	r3!, {r0, r1}
 8002774:	6010      	str	r0, [r2, #0]
 8002776:	6051      	str	r1, [r2, #4]
 8002778:	8819      	ldrh	r1, [r3, #0]
 800277a:	789b      	ldrb	r3, [r3, #2]
 800277c:	8111      	strh	r1, [r2, #8]
 800277e:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002786:	499c      	ldr	r1, [pc, #624]	; (80029f8 <problem_fetch+0x1310>)
 8002788:	461a      	mov	r2, r3
 800278a:	460b      	mov	r3, r1
 800278c:	cb03      	ldmia	r3!, {r0, r1}
 800278e:	6010      	str	r0, [r2, #0]
 8002790:	6051      	str	r1, [r2, #4]
			break;
 8002792:	f019 bed9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 8 :
			strcpy(p->name,"CHOSS 7");
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800279c:	4997      	ldr	r1, [pc, #604]	; (80029fc <problem_fetch+0x1314>)
 800279e:	461a      	mov	r2, r3
 80027a0:	460b      	mov	r3, r1
 80027a2:	cb03      	ldmia	r3!, {r0, r1}
 80027a4:	6010      	str	r0, [r2, #0]
 80027a6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80027ae:	4a94      	ldr	r2, [pc, #592]	; (8002a00 <problem_fetch+0x1318>)
 80027b0:	8811      	ldrh	r1, [r2, #0]
 80027b2:	7892      	ldrb	r2, [r2, #2]
 80027b4:	8019      	strh	r1, [r3, #0]
 80027b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2207      	movs	r2, #7
 80027bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,E,A,D");
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	33a4      	adds	r3, #164	; 0xa4
 80027c2:	4a90      	ldr	r2, [pc, #576]	; (8002a04 <problem_fetch+0x131c>)
 80027c4:	461c      	mov	r4, r3
 80027c6:	4613      	mov	r3, r2
 80027c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	6061      	str	r1, [r4, #4]
 80027ce:	60a2      	str	r2, [r4, #8]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,8,12,14,18");
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	4a8b      	ldr	r2, [pc, #556]	; (8002a08 <problem_fetch+0x1320>)
 80027da:	461d      	mov	r5, r3
 80027dc:	4614      	mov	r4, r2
 80027de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e0:	6028      	str	r0, [r5, #0]
 80027e2:	6069      	str	r1, [r5, #4]
 80027e4:	60aa      	str	r2, [r5, #8]
 80027e6:	60eb      	str	r3, [r5, #12]
 80027e8:	7823      	ldrb	r3, [r4, #0]
 80027ea:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80027f2:	4a86      	ldr	r2, [pc, #536]	; (8002a0c <problem_fetch+0x1324>)
 80027f4:	461c      	mov	r4, r3
 80027f6:	4613      	mov	r3, r2
 80027f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027fa:	6020      	str	r0, [r4, #0]
 80027fc:	6061      	str	r1, [r4, #4]
 80027fe:	60a2      	str	r2, [r4, #8]
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	81a3      	strh	r3, [r4, #12]
			break;
 8002804:	f019 bea0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 9 :
			strcpy(p->name,"ASHES");
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800280e:	4a80      	ldr	r2, [pc, #512]	; (8002a10 <problem_fetch+0x1328>)
 8002810:	6810      	ldr	r0, [r2, #0]
 8002812:	6018      	str	r0, [r3, #0]
 8002814:	8892      	ldrh	r2, [r2, #4]
 8002816:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800281e:	4a7d      	ldr	r2, [pc, #500]	; (8002a14 <problem_fetch+0x132c>)
 8002820:	6810      	ldr	r0, [r2, #0]
 8002822:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2209      	movs	r2, #9
 8002828:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,C,B,E,E,I,J,D");
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	33a4      	adds	r3, #164	; 0xa4
 800282e:	4a7a      	ldr	r2, [pc, #488]	; (8002a18 <problem_fetch+0x1330>)
 8002830:	461d      	mov	r5, r3
 8002832:	4614      	mov	r4, r2
 8002834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002836:	6028      	str	r0, [r5, #0]
 8002838:	6069      	str	r1, [r5, #4]
 800283a:	60aa      	str	r2, [r5, #8]
 800283c:	60eb      	str	r3, [r5, #12]
 800283e:	8823      	ldrh	r3, [r4, #0]
 8002840:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,14,16,18,13,7");
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3304      	adds	r3, #4
 8002846:	4a75      	ldr	r2, [pc, #468]	; (8002a1c <problem_fetch+0x1334>)
 8002848:	461c      	mov	r4, r3
 800284a:	4615      	mov	r5, r2
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	6020      	str	r0, [r4, #0]
 8002850:	6061      	str	r1, [r4, #4]
 8002852:	60a2      	str	r2, [r4, #8]
 8002854:	60e3      	str	r3, [r4, #12]
 8002856:	6828      	ldr	r0, [r5, #0]
 8002858:	6120      	str	r0, [r4, #16]
 800285a:	88ab      	ldrh	r3, [r5, #4]
 800285c:	79aa      	ldrb	r2, [r5, #6]
 800285e:	82a3      	strh	r3, [r4, #20]
 8002860:	4613      	mov	r3, r2
 8002862:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,d");
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800286a:	4a6d      	ldr	r2, [pc, #436]	; (8002a20 <problem_fetch+0x1338>)
 800286c:	461d      	mov	r5, r3
 800286e:	4614      	mov	r4, r2
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	6028      	str	r0, [r5, #0]
 8002874:	6069      	str	r1, [r5, #4]
 8002876:	60aa      	str	r2, [r5, #8]
 8002878:	60eb      	str	r3, [r5, #12]
 800287a:	8823      	ldrh	r3, [r4, #0]
 800287c:	822b      	strh	r3, [r5, #16]
			break;
 800287e:	f019 be63 	b.w	801c548 <problem_fetch+0x1ae60>
		case 10 :
			strcpy(p->name,"BURNED");
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002888:	4a66      	ldr	r2, [pc, #408]	; (8002a24 <problem_fetch+0x133c>)
 800288a:	6810      	ldr	r0, [r2, #0]
 800288c:	6018      	str	r0, [r3, #0]
 800288e:	8891      	ldrh	r1, [r2, #4]
 8002890:	7992      	ldrb	r2, [r2, #6]
 8002892:	8099      	strh	r1, [r3, #4]
 8002894:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800289c:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <problem_fetch+0x1318>)
 800289e:	8811      	ldrh	r1, [r2, #0]
 80028a0:	7892      	ldrb	r2, [r2, #2]
 80028a2:	8019      	strh	r1, [r3, #0]
 80028a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2208      	movs	r2, #8
 80028aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,J,J,G,E,I");
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	33a4      	adds	r3, #164	; 0xa4
 80028b0:	4a5d      	ldr	r2, [pc, #372]	; (8002a28 <problem_fetch+0x1340>)
 80028b2:	461c      	mov	r4, r3
 80028b4:	4615      	mov	r5, r2
 80028b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028b8:	6020      	str	r0, [r4, #0]
 80028ba:	6061      	str	r1, [r4, #4]
 80028bc:	60a2      	str	r2, [r4, #8]
 80028be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,5,12,14,16,18");
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3304      	adds	r3, #4
 80028c4:	4a59      	ldr	r2, [pc, #356]	; (8002a2c <problem_fetch+0x1344>)
 80028c6:	461d      	mov	r5, r3
 80028c8:	4614      	mov	r4, r2
 80028ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028cc:	6028      	str	r0, [r5, #0]
 80028ce:	6069      	str	r1, [r5, #4]
 80028d0:	60aa      	str	r2, [r5, #8]
 80028d2:	60eb      	str	r3, [r5, #12]
 80028d4:	6820      	ldr	r0, [r4, #0]
 80028d6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80028de:	4a54      	ldr	r2, [pc, #336]	; (8002a30 <problem_fetch+0x1348>)
 80028e0:	461c      	mov	r4, r3
 80028e2:	4615      	mov	r5, r2
 80028e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028e6:	6020      	str	r0, [r4, #0]
 80028e8:	6061      	str	r1, [r4, #4]
 80028ea:	60a2      	str	r2, [r4, #8]
 80028ec:	60e3      	str	r3, [r4, #12]
			break;
 80028ee:	f019 be2b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 11 :
			strcpy(p->name,"DER SCHWÄCHLING");
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80028f8:	4a4e      	ldr	r2, [pc, #312]	; (8002a34 <problem_fetch+0x134c>)
 80028fa:	461d      	mov	r5, r3
 80028fc:	4614      	mov	r4, r2
 80028fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002900:	6028      	str	r0, [r5, #0]
 8002902:	6069      	str	r1, [r5, #4]
 8002904:	60aa      	str	r2, [r5, #8]
 8002906:	60eb      	str	r3, [r5, #12]
 8002908:	7823      	ldrb	r3, [r4, #0]
 800290a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002912:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <problem_fetch+0x1350>)
 8002914:	8811      	ldrh	r1, [r2, #0]
 8002916:	7892      	ldrb	r2, [r2, #2]
 8002918:	8019      	strh	r1, [r3, #0]
 800291a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2208      	movs	r2, #8
 8002920:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,I,J,G,G,D");
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	33a4      	adds	r3, #164	; 0xa4
 8002926:	4a45      	ldr	r2, [pc, #276]	; (8002a3c <problem_fetch+0x1354>)
 8002928:	461c      	mov	r4, r3
 800292a:	4615      	mov	r5, r2
 800292c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800292e:	6020      	str	r0, [r4, #0]
 8002930:	6061      	str	r1, [r4, #4]
 8002932:	60a2      	str	r2, [r4, #8]
 8002934:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,17,18");
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <problem_fetch+0x1358>)
 800293c:	461d      	mov	r5, r3
 800293e:	4614      	mov	r4, r2
 8002940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002942:	6028      	str	r0, [r5, #0]
 8002944:	6069      	str	r1, [r5, #4]
 8002946:	60aa      	str	r2, [r5, #8]
 8002948:	60eb      	str	r3, [r5, #12]
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	6128      	str	r0, [r5, #16]
 800294e:	7923      	ldrb	r3, [r4, #4]
 8002950:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002958:	4a35      	ldr	r2, [pc, #212]	; (8002a30 <problem_fetch+0x1348>)
 800295a:	461c      	mov	r4, r3
 800295c:	4615      	mov	r5, r2
 800295e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002960:	6020      	str	r0, [r4, #0]
 8002962:	6061      	str	r1, [r4, #4]
 8002964:	60a2      	str	r2, [r4, #8]
 8002966:	60e3      	str	r3, [r4, #12]
			break;
 8002968:	f019 bdee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 12 :
			strcpy(p->name,"CAMPUSING WITH A BACKPACK");
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002972:	4a34      	ldr	r2, [pc, #208]	; (8002a44 <problem_fetch+0x135c>)
 8002974:	461d      	mov	r5, r3
 8002976:	4614      	mov	r4, r2
 8002978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800297a:	6028      	str	r0, [r5, #0]
 800297c:	6069      	str	r1, [r5, #4]
 800297e:	60aa      	str	r2, [r5, #8]
 8002980:	60eb      	str	r3, [r5, #12]
 8002982:	cc03      	ldmia	r4!, {r0, r1}
 8002984:	6128      	str	r0, [r5, #16]
 8002986:	6169      	str	r1, [r5, #20]
 8002988:	8823      	ldrh	r3, [r4, #0]
 800298a:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002992:	4a2d      	ldr	r2, [pc, #180]	; (8002a48 <problem_fetch+0x1360>)
 8002994:	6810      	ldr	r0, [r2, #0]
 8002996:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2207      	movs	r2, #7
 800299c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,H,C,D,D");
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	33a4      	adds	r3, #164	; 0xa4
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <problem_fetch+0x1364>)
 80029a4:	461c      	mov	r4, r3
 80029a6:	4613      	mov	r3, r2
 80029a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80029aa:	6020      	str	r0, [r4, #0]
 80029ac:	6061      	str	r1, [r4, #4]
 80029ae:	60a2      	str	r2, [r4, #8]
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,15,18");
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <problem_fetch+0x1368>)
 80029ba:	461d      	mov	r5, r3
 80029bc:	4614      	mov	r4, r2
 80029be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c0:	6028      	str	r0, [r5, #0]
 80029c2:	6069      	str	r1, [r5, #4]
 80029c4:	60aa      	str	r2, [r5, #8]
 80029c6:	60eb      	str	r3, [r5, #12]
 80029c8:	8823      	ldrh	r3, [r4, #0]
 80029ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80029d2:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <problem_fetch+0x136c>)
 80029d4:	461c      	mov	r4, r3
 80029d6:	4613      	mov	r3, r2
 80029d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80029da:	6020      	str	r0, [r4, #0]
 80029dc:	6061      	str	r1, [r4, #4]
 80029de:	60a2      	str	r2, [r4, #8]
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	81a3      	strh	r3, [r4, #12]
			break;
 80029e4:	f019 bdb0 	b.w	801c548 <problem_fetch+0x1ae60>
 80029e8:	08023a90 	.word	0x08023a90
 80029ec:	08023a98 	.word	0x08023a98
 80029f0:	08023a9c 	.word	0x08023a9c
 80029f4:	08023aa4 	.word	0x08023aa4
 80029f8:	08023ab0 	.word	0x08023ab0
 80029fc:	08023ab8 	.word	0x08023ab8
 8002a00:	0802391c 	.word	0x0802391c
 8002a04:	08023ac0 	.word	0x08023ac0
 8002a08:	08023ad0 	.word	0x08023ad0
 8002a0c:	08023ae4 	.word	0x08023ae4
 8002a10:	08023af4 	.word	0x08023af4
 8002a14:	08023afc 	.word	0x08023afc
 8002a18:	08023b00 	.word	0x08023b00
 8002a1c:	08023b14 	.word	0x08023b14
 8002a20:	08023b2c 	.word	0x08023b2c
 8002a24:	08023b40 	.word	0x08023b40
 8002a28:	08023b48 	.word	0x08023b48
 8002a2c:	08023b58 	.word	0x08023b58
 8002a30:	08023b6c 	.word	0x08023b6c
 8002a34:	08023b7c 	.word	0x08023b7c
 8002a38:	08023a28 	.word	0x08023a28
 8002a3c:	08023b90 	.word	0x08023b90
 8002a40:	08023ba0 	.word	0x08023ba0
 8002a44:	08023bb8 	.word	0x08023bb8
 8002a48:	0802395c 	.word	0x0802395c
 8002a4c:	08023bd4 	.word	0x08023bd4
 8002a50:	08023be4 	.word	0x08023be4
 8002a54:	080239d4 	.word	0x080239d4
		case 13 :
			strcpy(p->name,"DEAD FISH");
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002a5e:	49bf      	ldr	r1, [pc, #764]	; (8002d5c <problem_fetch+0x1674>)
 8002a60:	461a      	mov	r2, r3
 8002a62:	460b      	mov	r3, r1
 8002a64:	cb03      	ldmia	r3!, {r0, r1}
 8002a66:	6010      	str	r0, [r2, #0]
 8002a68:	6051      	str	r1, [r2, #4]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002a74:	4aba      	ldr	r2, [pc, #744]	; (8002d60 <problem_fetch+0x1678>)
 8002a76:	6810      	ldr	r0, [r2, #0]
 8002a78:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,F,I,E,D");
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	33a4      	adds	r3, #164	; 0xa4
 8002a84:	4ab7      	ldr	r2, [pc, #732]	; (8002d64 <problem_fetch+0x167c>)
 8002a86:	461c      	mov	r4, r3
 8002a88:	4613      	mov	r3, r2
 8002a8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002a8c:	6020      	str	r0, [r4, #0]
 8002a8e:	6061      	str	r1, [r4, #4]
 8002a90:	60a2      	str	r2, [r4, #8]
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,14,16,18");
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	4ab3      	ldr	r2, [pc, #716]	; (8002d68 <problem_fetch+0x1680>)
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	4614      	mov	r4, r2
 8002aa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aa2:	6028      	str	r0, [r5, #0]
 8002aa4:	6069      	str	r1, [r5, #4]
 8002aa6:	60aa      	str	r2, [r5, #8]
 8002aa8:	60eb      	str	r3, [r5, #12]
 8002aaa:	8823      	ldrh	r3, [r4, #0]
 8002aac:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002ab4:	4aad      	ldr	r2, [pc, #692]	; (8002d6c <problem_fetch+0x1684>)
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	4613      	mov	r3, r2
 8002aba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002abc:	6020      	str	r0, [r4, #0]
 8002abe:	6061      	str	r1, [r4, #4]
 8002ac0:	60a2      	str	r2, [r4, #8]
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	81a3      	strh	r3, [r4, #12]
			break;
 8002ac6:	f019 bd3f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 14 :
			strcpy(p->name,"SUSHI ROLL");
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ad0:	49a7      	ldr	r1, [pc, #668]	; (8002d70 <problem_fetch+0x1688>)
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	cb03      	ldmia	r3!, {r0, r1}
 8002ad8:	6010      	str	r0, [r2, #0]
 8002ada:	6051      	str	r1, [r2, #4]
 8002adc:	8819      	ldrh	r1, [r3, #0]
 8002ade:	789b      	ldrb	r3, [r3, #2]
 8002ae0:	8111      	strh	r1, [r2, #8]
 8002ae2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002aea:	4aa2      	ldr	r2, [pc, #648]	; (8002d74 <problem_fetch+0x168c>)
 8002aec:	6810      	ldr	r0, [r2, #0]
 8002aee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2207      	movs	r2, #7
 8002af4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A,D");
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	33a4      	adds	r3, #164	; 0xa4
 8002afa:	4a9f      	ldr	r2, [pc, #636]	; (8002d78 <problem_fetch+0x1690>)
 8002afc:	461c      	mov	r4, r3
 8002afe:	4613      	mov	r3, r2
 8002b00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b02:	6020      	str	r0, [r4, #0]
 8002b04:	6061      	str	r1, [r4, #4]
 8002b06:	60a2      	str	r2, [r4, #8]
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,18,18,15");
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4a9a      	ldr	r2, [pc, #616]	; (8002d7c <problem_fetch+0x1694>)
 8002b12:	461d      	mov	r5, r3
 8002b14:	4614      	mov	r4, r2
 8002b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b18:	6028      	str	r0, [r5, #0]
 8002b1a:	6069      	str	r1, [r5, #4]
 8002b1c:	60aa      	str	r2, [r5, #8]
 8002b1e:	60eb      	str	r3, [r5, #12]
 8002b20:	8823      	ldrh	r3, [r4, #0]
 8002b22:	78a2      	ldrb	r2, [r4, #2]
 8002b24:	822b      	strh	r3, [r5, #16]
 8002b26:	4613      	mov	r3, r2
 8002b28:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,e,e,d");
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002b30:	4a93      	ldr	r2, [pc, #588]	; (8002d80 <problem_fetch+0x1698>)
 8002b32:	461c      	mov	r4, r3
 8002b34:	4613      	mov	r3, r2
 8002b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b38:	6020      	str	r0, [r4, #0]
 8002b3a:	6061      	str	r1, [r4, #4]
 8002b3c:	60a2      	str	r2, [r4, #8]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	81a3      	strh	r3, [r4, #12]
			break;
 8002b42:	f019 bd01 	b.w	801c548 <problem_fetch+0x1ae60>
		case 15 :
			strcpy(p->name,"INTERNAL ROTATION");
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002b4c:	4a8d      	ldr	r2, [pc, #564]	; (8002d84 <problem_fetch+0x169c>)
 8002b4e:	461d      	mov	r5, r3
 8002b50:	4614      	mov	r4, r2
 8002b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b54:	6028      	str	r0, [r5, #0]
 8002b56:	6069      	str	r1, [r5, #4]
 8002b58:	60aa      	str	r2, [r5, #8]
 8002b5a:	60eb      	str	r3, [r5, #12]
 8002b5c:	8823      	ldrh	r3, [r4, #0]
 8002b5e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b66:	4a88      	ldr	r2, [pc, #544]	; (8002d88 <problem_fetch+0x16a0>)
 8002b68:	6810      	ldr	r0, [r2, #0]
 8002b6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2208      	movs	r2, #8
 8002b70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,H,D,G,D,C");
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	33a4      	adds	r3, #164	; 0xa4
 8002b76:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <problem_fetch+0x16a4>)
 8002b78:	461c      	mov	r4, r3
 8002b7a:	4615      	mov	r5, r2
 8002b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b7e:	6020      	str	r0, [r4, #0]
 8002b80:	6061      	str	r1, [r4, #4]
 8002b82:	60a2      	str	r2, [r4, #8]
 8002b84:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,9,12,5,15,15,18,5");
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4a81      	ldr	r2, [pc, #516]	; (8002d90 <problem_fetch+0x16a8>)
 8002b8c:	461d      	mov	r5, r3
 8002b8e:	4614      	mov	r4, r2
 8002b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b92:	6028      	str	r0, [r5, #0]
 8002b94:	6069      	str	r1, [r5, #4]
 8002b96:	60aa      	str	r2, [r5, #8]
 8002b98:	60eb      	str	r3, [r5, #12]
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,d,e,s");
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002ba4:	4a7b      	ldr	r2, [pc, #492]	; (8002d94 <problem_fetch+0x16ac>)
 8002ba6:	461c      	mov	r4, r3
 8002ba8:	4615      	mov	r5, r2
 8002baa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bac:	6020      	str	r0, [r4, #0]
 8002bae:	6061      	str	r1, [r4, #4]
 8002bb0:	60a2      	str	r2, [r4, #8]
 8002bb2:	60e3      	str	r3, [r4, #12]
			break;
 8002bb4:	f019 bcc8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 16 :
			strcpy(p->name,"SIM");
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002bbe:	4a76      	ldr	r2, [pc, #472]	; (8002d98 <problem_fetch+0x16b0>)
 8002bc0:	6810      	ldr	r0, [r2, #0]
 8002bc2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002bca:	4a6f      	ldr	r2, [pc, #444]	; (8002d88 <problem_fetch+0x16a0>)
 8002bcc:	6810      	ldr	r0, [r2, #0]
 8002bce:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2206      	movs	r2, #6
 8002bd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,D,E,A");
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	33a4      	adds	r3, #164	; 0xa4
 8002bda:	4a70      	ldr	r2, [pc, #448]	; (8002d9c <problem_fetch+0x16b4>)
 8002bdc:	461c      	mov	r4, r3
 8002bde:	4613      	mov	r3, r2
 8002be0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002be2:	6020      	str	r0, [r4, #0]
 8002be4:	6061      	str	r1, [r4, #4]
 8002be6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4a6c      	ldr	r2, [pc, #432]	; (8002da0 <problem_fetch+0x16b8>)
 8002bee:	461c      	mov	r4, r3
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002bf4:	6020      	str	r0, [r4, #0]
 8002bf6:	6061      	str	r1, [r4, #4]
 8002bf8:	60a2      	str	r2, [r4, #8]
 8002bfa:	881a      	ldrh	r2, [r3, #0]
 8002bfc:	789b      	ldrb	r3, [r3, #2]
 8002bfe:	81a2      	strh	r2, [r4, #12]
 8002c00:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002c08:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <problem_fetch+0x16bc>)
 8002c0a:	461c      	mov	r4, r3
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c10:	6020      	str	r0, [r4, #0]
 8002c12:	6061      	str	r1, [r4, #4]
 8002c14:	60a2      	str	r2, [r4, #8]
			break;
 8002c16:	f019 bc97 	b.w	801c548 <problem_fetch+0x1ae60>
		case 17 :
			strcpy(p->name,"TURBO CALLA");
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c20:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <problem_fetch+0x16c0>)
 8002c22:	461c      	mov	r4, r3
 8002c24:	4613      	mov	r3, r2
 8002c26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c28:	6020      	str	r0, [r4, #0]
 8002c2a:	6061      	str	r1, [r4, #4]
 8002c2c:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002c34:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <problem_fetch+0x16c4>)
 8002c36:	8811      	ldrh	r1, [r2, #0]
 8002c38:	7892      	ldrb	r2, [r2, #2]
 8002c3a:	8019      	strh	r1, [r3, #0]
 8002c3c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2206      	movs	r2, #6
 8002c42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,C,D,A");
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	33a4      	adds	r3, #164	; 0xa4
 8002c48:	4a59      	ldr	r2, [pc, #356]	; (8002db0 <problem_fetch+0x16c8>)
 8002c4a:	461c      	mov	r4, r3
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c50:	6020      	str	r0, [r4, #0]
 8002c52:	6061      	str	r1, [r4, #4]
 8002c54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,13,15,18");
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4a56      	ldr	r2, [pc, #344]	; (8002db4 <problem_fetch+0x16cc>)
 8002c5c:	461c      	mov	r4, r3
 8002c5e:	4613      	mov	r3, r2
 8002c60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c62:	6020      	str	r0, [r4, #0]
 8002c64:	6061      	str	r1, [r4, #4]
 8002c66:	60a2      	str	r2, [r4, #8]
 8002c68:	881a      	ldrh	r2, [r3, #0]
 8002c6a:	789b      	ldrb	r3, [r3, #2]
 8002c6c:	81a2      	strh	r2, [r4, #12]
 8002c6e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002c76:	4a50      	ldr	r2, [pc, #320]	; (8002db8 <problem_fetch+0x16d0>)
 8002c78:	461c      	mov	r4, r3
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002c7e:	6020      	str	r0, [r4, #0]
 8002c80:	6061      	str	r1, [r4, #4]
 8002c82:	60a2      	str	r2, [r4, #8]
			break;
 8002c84:	f019 bc60 	b.w	801c548 <problem_fetch+0x1ae60>
		case 18 :
			strcpy(p->name,"BARRET");
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002c8e:	4a4b      	ldr	r2, [pc, #300]	; (8002dbc <problem_fetch+0x16d4>)
 8002c90:	6810      	ldr	r0, [r2, #0]
 8002c92:	6018      	str	r0, [r3, #0]
 8002c94:	8891      	ldrh	r1, [r2, #4]
 8002c96:	7992      	ldrb	r2, [r2, #6]
 8002c98:	8099      	strh	r1, [r3, #4]
 8002c9a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ca2:	4a2f      	ldr	r2, [pc, #188]	; (8002d60 <problem_fetch+0x1678>)
 8002ca4:	6810      	ldr	r0, [r2, #0]
 8002ca6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2206      	movs	r2, #6
 8002cac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,D,A,B,A,D");
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	33a4      	adds	r3, #164	; 0xa4
 8002cb2:	4a43      	ldr	r2, [pc, #268]	; (8002dc0 <problem_fetch+0x16d8>)
 8002cb4:	461c      	mov	r4, r3
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002cba:	6020      	str	r0, [r4, #0]
 8002cbc:	6061      	str	r1, [r4, #4]
 8002cbe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,9,12,14,18");
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <problem_fetch+0x16dc>)
 8002cc6:	461c      	mov	r4, r3
 8002cc8:	4613      	mov	r3, r2
 8002cca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ccc:	6020      	str	r0, [r4, #0]
 8002cce:	6061      	str	r1, [r4, #4]
 8002cd0:	60a2      	str	r2, [r4, #8]
 8002cd2:	881a      	ldrh	r2, [r3, #0]
 8002cd4:	789b      	ldrb	r3, [r3, #2]
 8002cd6:	81a2      	strh	r2, [r4, #12]
 8002cd8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002ce0:	4a35      	ldr	r2, [pc, #212]	; (8002db8 <problem_fetch+0x16d0>)
 8002ce2:	461c      	mov	r4, r3
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ce8:	6020      	str	r0, [r4, #0]
 8002cea:	6061      	str	r1, [r4, #4]
 8002cec:	60a2      	str	r2, [r4, #8]
			break;
 8002cee:	f019 bc2b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 19 :
			strcpy(p->name,"BLACK LAMP");
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002cf8:	4933      	ldr	r1, [pc, #204]	; (8002dc8 <problem_fetch+0x16e0>)
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	cb03      	ldmia	r3!, {r0, r1}
 8002d00:	6010      	str	r0, [r2, #0]
 8002d02:	6051      	str	r1, [r2, #4]
 8002d04:	8819      	ldrh	r1, [r3, #0]
 8002d06:	789b      	ldrb	r3, [r3, #2]
 8002d08:	8111      	strh	r1, [r2, #8]
 8002d0a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <problem_fetch+0x1678>)
 8002d14:	6810      	ldr	r0, [r2, #0]
 8002d16:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2206      	movs	r2, #6
 8002d1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,I,D,J,E");
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	33a4      	adds	r3, #164	; 0xa4
 8002d22:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <problem_fetch+0x16e4>)
 8002d24:	461c      	mov	r4, r3
 8002d26:	4613      	mov	r3, r2
 8002d28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d2a:	6020      	str	r0, [r4, #0]
 8002d2c:	6061      	str	r1, [r4, #4]
 8002d2e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"10,14,14,18,5,6");
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3304      	adds	r3, #4
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <problem_fetch+0x16e8>)
 8002d36:	461c      	mov	r4, r3
 8002d38:	4615      	mov	r5, r2
 8002d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3c:	6020      	str	r0, [r4, #0]
 8002d3e:	6061      	str	r1, [r4, #4]
 8002d40:	60a2      	str	r2, [r4, #8]
 8002d42:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s,s");
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <problem_fetch+0x16ec>)
 8002d4c:	461c      	mov	r4, r3
 8002d4e:	4613      	mov	r3, r2
 8002d50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002d52:	6020      	str	r0, [r4, #0]
 8002d54:	6061      	str	r1, [r4, #4]
 8002d56:	60a2      	str	r2, [r4, #8]
			break;
 8002d58:	f019 bbf6 	b.w	801c548 <problem_fetch+0x1ae60>
 8002d5c:	08023bf8 	.word	0x08023bf8
 8002d60:	080239f4 	.word	0x080239f4
 8002d64:	08023c04 	.word	0x08023c04
 8002d68:	08023c14 	.word	0x08023c14
 8002d6c:	080239d4 	.word	0x080239d4
 8002d70:	08023c28 	.word	0x08023c28
 8002d74:	0802395c 	.word	0x0802395c
 8002d78:	08023c34 	.word	0x08023c34
 8002d7c:	08023c44 	.word	0x08023c44
 8002d80:	08023c58 	.word	0x08023c58
 8002d84:	08023c68 	.word	0x08023c68
 8002d88:	08023afc 	.word	0x08023afc
 8002d8c:	08023c7c 	.word	0x08023c7c
 8002d90:	08023c8c 	.word	0x08023c8c
 8002d94:	08023ca0 	.word	0x08023ca0
 8002d98:	08023cb0 	.word	0x08023cb0
 8002d9c:	08023cb4 	.word	0x08023cb4
 8002da0:	08023cc0 	.word	0x08023cc0
 8002da4:	0802393c 	.word	0x0802393c
 8002da8:	08023cd0 	.word	0x08023cd0
 8002dac:	0802391c 	.word	0x0802391c
 8002db0:	08023cdc 	.word	0x08023cdc
 8002db4:	08023ce8 	.word	0x08023ce8
 8002db8:	08023cf8 	.word	0x08023cf8
 8002dbc:	08023d04 	.word	0x08023d04
 8002dc0:	08023d0c 	.word	0x08023d0c
 8002dc4:	08023d18 	.word	0x08023d18
 8002dc8:	08023d28 	.word	0x08023d28
 8002dcc:	08023d34 	.word	0x08023d34
 8002dd0:	08023d40 	.word	0x08023d40
 8002dd4:	08023d50 	.word	0x08023d50
		case 20 :
			strcpy(p->name,"ALLBLACKS");
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002dde:	49a9      	ldr	r1, [pc, #676]	; (8003084 <problem_fetch+0x199c>)
 8002de0:	461a      	mov	r2, r3
 8002de2:	460b      	mov	r3, r1
 8002de4:	cb03      	ldmia	r3!, {r0, r1}
 8002de6:	6010      	str	r0, [r2, #0]
 8002de8:	6051      	str	r1, [r2, #4]
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002df4:	4aa4      	ldr	r2, [pc, #656]	; (8003088 <problem_fetch+0x19a0>)
 8002df6:	8811      	ldrh	r1, [r2, #0]
 8002df8:	7892      	ldrb	r2, [r2, #2]
 8002dfa:	8019      	strh	r1, [r3, #0]
 8002dfc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2206      	movs	r2, #6
 8002e02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,D,A");
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	33a4      	adds	r3, #164	; 0xa4
 8002e08:	4aa0      	ldr	r2, [pc, #640]	; (800308c <problem_fetch+0x19a4>)
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e10:	6020      	str	r0, [r4, #0]
 8002e12:	6061      	str	r1, [r4, #4]
 8002e14:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,10,13,15,18");
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	4a9d      	ldr	r2, [pc, #628]	; (8003090 <problem_fetch+0x19a8>)
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	4615      	mov	r5, r2
 8002e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e22:	6020      	str	r0, [r4, #0]
 8002e24:	6061      	str	r1, [r4, #4]
 8002e26:	60a2      	str	r2, [r4, #8]
 8002e28:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002e30:	4a98      	ldr	r2, [pc, #608]	; (8003094 <problem_fetch+0x19ac>)
 8002e32:	461c      	mov	r4, r3
 8002e34:	4613      	mov	r3, r2
 8002e36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002e38:	6020      	str	r0, [r4, #0]
 8002e3a:	6061      	str	r1, [r4, #4]
 8002e3c:	60a2      	str	r2, [r4, #8]
			break;
 8002e3e:	f019 bb83 	b.w	801c548 <problem_fetch+0x1ae60>
		case 21 :
			strcpy(p->name,"FLEMMING THE BEAST");
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002e48:	4a93      	ldr	r2, [pc, #588]	; (8003098 <problem_fetch+0x19b0>)
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e50:	6028      	str	r0, [r5, #0]
 8002e52:	6069      	str	r1, [r5, #4]
 8002e54:	60aa      	str	r2, [r5, #8]
 8002e56:	60eb      	str	r3, [r5, #12]
 8002e58:	8823      	ldrh	r3, [r4, #0]
 8002e5a:	78a2      	ldrb	r2, [r4, #2]
 8002e5c:	822b      	strh	r3, [r5, #16]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e68:	4a8c      	ldr	r2, [pc, #560]	; (800309c <problem_fetch+0x19b4>)
 8002e6a:	6810      	ldr	r0, [r2, #0]
 8002e6c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,E,H,A,E,D");
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	33a4      	adds	r3, #164	; 0xa4
 8002e78:	4a89      	ldr	r2, [pc, #548]	; (80030a0 <problem_fetch+0x19b8>)
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	4615      	mov	r5, r2
 8002e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e80:	6020      	str	r0, [r4, #0]
 8002e82:	6061      	str	r1, [r4, #4]
 8002e84:	60a2      	str	r2, [r4, #8]
 8002e86:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,12,8,14,16,18");
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4a85      	ldr	r2, [pc, #532]	; (80030a4 <problem_fetch+0x19bc>)
 8002e8e:	461d      	mov	r5, r3
 8002e90:	4614      	mov	r4, r2
 8002e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e94:	6028      	str	r0, [r5, #0]
 8002e96:	6069      	str	r1, [r5, #4]
 8002e98:	60aa      	str	r2, [r5, #8]
 8002e9a:	60eb      	str	r3, [r5, #12]
 8002e9c:	6820      	ldr	r0, [r4, #0]
 8002e9e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002ea6:	4a80      	ldr	r2, [pc, #512]	; (80030a8 <problem_fetch+0x19c0>)
 8002ea8:	461c      	mov	r4, r3
 8002eaa:	4615      	mov	r5, r2
 8002eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eae:	6020      	str	r0, [r4, #0]
 8002eb0:	6061      	str	r1, [r4, #4]
 8002eb2:	60a2      	str	r2, [r4, #8]
 8002eb4:	60e3      	str	r3, [r4, #12]
			break;
 8002eb6:	f019 bb47 	b.w	801c548 <problem_fetch+0x1ae60>
		case 22 :
			strcpy(p->name,"BIG LE MOVIES");
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002ec0:	4a7a      	ldr	r2, [pc, #488]	; (80030ac <problem_fetch+0x19c4>)
 8002ec2:	461c      	mov	r4, r3
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ec8:	6020      	str	r0, [r4, #0]
 8002eca:	6061      	str	r1, [r4, #4]
 8002ecc:	60a2      	str	r2, [r4, #8]
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ed8:	4a75      	ldr	r2, [pc, #468]	; (80030b0 <problem_fetch+0x19c8>)
 8002eda:	6810      	ldr	r0, [r2, #0]
 8002edc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2207      	movs	r2, #7
 8002ee2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,H,G,G,I");
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	33a4      	adds	r3, #164	; 0xa4
 8002ee8:	4a72      	ldr	r2, [pc, #456]	; (80030b4 <problem_fetch+0x19cc>)
 8002eea:	461c      	mov	r4, r3
 8002eec:	4613      	mov	r3, r2
 8002eee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002ef0:	6020      	str	r0, [r4, #0]
 8002ef2:	6061      	str	r1, [r4, #4]
 8002ef4:	60a2      	str	r2, [r4, #8]
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,10,14,17,18");
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <problem_fetch+0x19d0>)
 8002f00:	461d      	mov	r5, r3
 8002f02:	4614      	mov	r4, r2
 8002f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f06:	6028      	str	r0, [r5, #0]
 8002f08:	6069      	str	r1, [r5, #4]
 8002f0a:	60aa      	str	r2, [r5, #8]
 8002f0c:	60eb      	str	r3, [r5, #12]
 8002f0e:	8823      	ldrh	r3, [r4, #0]
 8002f10:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002f18:	4a68      	ldr	r2, [pc, #416]	; (80030bc <problem_fetch+0x19d4>)
 8002f1a:	461c      	mov	r4, r3
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f20:	6020      	str	r0, [r4, #0]
 8002f22:	6061      	str	r1, [r4, #4]
 8002f24:	60a2      	str	r2, [r4, #8]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	81a3      	strh	r3, [r4, #12]
			break;
 8002f2a:	f019 bb0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 23 :
			strcpy(p->name,"FIRST COME, FIRST SERVED");
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002f34:	4a62      	ldr	r2, [pc, #392]	; (80030c0 <problem_fetch+0x19d8>)
 8002f36:	461d      	mov	r5, r3
 8002f38:	4614      	mov	r4, r2
 8002f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f3c:	6028      	str	r0, [r5, #0]
 8002f3e:	6069      	str	r1, [r5, #4]
 8002f40:	60aa      	str	r2, [r5, #8]
 8002f42:	60eb      	str	r3, [r5, #12]
 8002f44:	cc03      	ldmia	r4!, {r0, r1}
 8002f46:	6128      	str	r0, [r5, #16]
 8002f48:	6169      	str	r1, [r5, #20]
 8002f4a:	7823      	ldrb	r3, [r4, #0]
 8002f4c:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f54:	4a5b      	ldr	r2, [pc, #364]	; (80030c4 <problem_fetch+0x19dc>)
 8002f56:	6810      	ldr	r0, [r2, #0]
 8002f58:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D");
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	33a4      	adds	r3, #164	; 0xa4
 8002f64:	4958      	ldr	r1, [pc, #352]	; (80030c8 <problem_fetch+0x19e0>)
 8002f66:	461a      	mov	r2, r3
 8002f68:	460b      	mov	r3, r1
 8002f6a:	cb03      	ldmia	r3!, {r0, r1}
 8002f6c:	6010      	str	r0, [r2, #0]
 8002f6e:	6051      	str	r1, [r2, #4]
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,11,14,18");
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4a54      	ldr	r2, [pc, #336]	; (80030cc <problem_fetch+0x19e4>)
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002f80:	6020      	str	r0, [r4, #0]
 8002f82:	6061      	str	r1, [r4, #4]
 8002f84:	60a2      	str	r2, [r4, #8]
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8002f90:	494f      	ldr	r1, [pc, #316]	; (80030d0 <problem_fetch+0x19e8>)
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	cb03      	ldmia	r3!, {r0, r1}
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	6051      	str	r1, [r2, #4]
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	8113      	strh	r3, [r2, #8]
			break;
 8002fa0:	f019 bad2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 24 :
			strcpy(p->name,"SALAD APOCALYPSE");
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002faa:	4a4a      	ldr	r2, [pc, #296]	; (80030d4 <problem_fetch+0x19ec>)
 8002fac:	461d      	mov	r5, r3
 8002fae:	4614      	mov	r4, r2
 8002fb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb2:	6028      	str	r0, [r5, #0]
 8002fb4:	6069      	str	r1, [r5, #4]
 8002fb6:	60aa      	str	r2, [r5, #8]
 8002fb8:	60eb      	str	r3, [r5, #12]
 8002fba:	7823      	ldrb	r3, [r4, #0]
 8002fbc:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002fc4:	4a3f      	ldr	r2, [pc, #252]	; (80030c4 <problem_fetch+0x19dc>)
 8002fc6:	6810      	ldr	r0, [r2, #0]
 8002fc8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2206      	movs	r2, #6
 8002fce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,H,D,A");
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	33a4      	adds	r3, #164	; 0xa4
 8002fd4:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <problem_fetch+0x19f0>)
 8002fd6:	461c      	mov	r4, r3
 8002fd8:	4613      	mov	r3, r2
 8002fda:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fdc:	6020      	str	r0, [r4, #0]
 8002fde:	6061      	str	r1, [r4, #4]
 8002fe0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,15,18");
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	4a3d      	ldr	r2, [pc, #244]	; (80030dc <problem_fetch+0x19f4>)
 8002fe8:	461c      	mov	r4, r3
 8002fea:	4613      	mov	r3, r2
 8002fec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002fee:	6020      	str	r0, [r4, #0]
 8002ff0:	6061      	str	r1, [r4, #4]
 8002ff2:	60a2      	str	r2, [r4, #8]
 8002ff4:	881a      	ldrh	r2, [r3, #0]
 8002ff6:	789b      	ldrb	r3, [r3, #2]
 8002ff8:	81a2      	strh	r2, [r4, #12]
 8002ffa:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003002:	4a24      	ldr	r2, [pc, #144]	; (8003094 <problem_fetch+0x19ac>)
 8003004:	461c      	mov	r4, r3
 8003006:	4613      	mov	r3, r2
 8003008:	cb07      	ldmia	r3!, {r0, r1, r2}
 800300a:	6020      	str	r0, [r4, #0]
 800300c:	6061      	str	r1, [r4, #4]
 800300e:	60a2      	str	r2, [r4, #8]
			break;
 8003010:	f019 ba9a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 25 :
			strcpy(p->name,"VISUALIZZA VERS2");
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800301a:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <problem_fetch+0x19f8>)
 800301c:	461d      	mov	r5, r3
 800301e:	4614      	mov	r4, r2
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	6028      	str	r0, [r5, #0]
 8003024:	6069      	str	r1, [r5, #4]
 8003026:	60aa      	str	r2, [r5, #8]
 8003028:	60eb      	str	r3, [r5, #12]
 800302a:	7823      	ldrb	r3, [r4, #0]
 800302c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <problem_fetch+0x19dc>)
 8003036:	6810      	ldr	r0, [r2, #0]
 8003038:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2206      	movs	r2, #6
 800303e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,E,D");
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	33a4      	adds	r3, #164	; 0xa4
 8003044:	4a27      	ldr	r2, [pc, #156]	; (80030e4 <problem_fetch+0x19fc>)
 8003046:	461c      	mov	r4, r3
 8003048:	4613      	mov	r3, r2
 800304a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800304c:	6020      	str	r0, [r4, #0]
 800304e:	6061      	str	r1, [r4, #4]
 8003050:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	4a24      	ldr	r2, [pc, #144]	; (80030e8 <problem_fetch+0x1a00>)
 8003058:	461c      	mov	r4, r3
 800305a:	4613      	mov	r3, r2
 800305c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800305e:	6020      	str	r0, [r4, #0]
 8003060:	6061      	str	r1, [r4, #4]
 8003062:	60a2      	str	r2, [r4, #8]
 8003064:	881a      	ldrh	r2, [r3, #0]
 8003066:	789b      	ldrb	r3, [r3, #2]
 8003068:	81a2      	strh	r2, [r4, #12]
 800306a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <problem_fetch+0x1a04>)
 8003074:	461c      	mov	r4, r3
 8003076:	4613      	mov	r3, r2
 8003078:	cb07      	ldmia	r3!, {r0, r1, r2}
 800307a:	6020      	str	r0, [r4, #0]
 800307c:	6061      	str	r1, [r4, #4]
 800307e:	60a2      	str	r2, [r4, #8]
			break;
 8003080:	f019 ba62 	b.w	801c548 <problem_fetch+0x1ae60>
 8003084:	08023d5c 	.word	0x08023d5c
 8003088:	0802391c 	.word	0x0802391c
 800308c:	08023d68 	.word	0x08023d68
 8003090:	08023d74 	.word	0x08023d74
 8003094:	0802393c 	.word	0x0802393c
 8003098:	08023d84 	.word	0x08023d84
 800309c:	080239f4 	.word	0x080239f4
 80030a0:	08023d98 	.word	0x08023d98
 80030a4:	08023da8 	.word	0x08023da8
 80030a8:	08023b6c 	.word	0x08023b6c
 80030ac:	08023dbc 	.word	0x08023dbc
 80030b0:	0802395c 	.word	0x0802395c
 80030b4:	08023dcc 	.word	0x08023dcc
 80030b8:	08023ddc 	.word	0x08023ddc
 80030bc:	08023ae4 	.word	0x08023ae4
 80030c0:	08023df0 	.word	0x08023df0
 80030c4:	08023a98 	.word	0x08023a98
 80030c8:	08023e0c 	.word	0x08023e0c
 80030cc:	08023e18 	.word	0x08023e18
 80030d0:	08023e28 	.word	0x08023e28
 80030d4:	08023e34 	.word	0x08023e34
 80030d8:	08023e48 	.word	0x08023e48
 80030dc:	08023e54 	.word	0x08023e54
 80030e0:	08023e64 	.word	0x08023e64
 80030e4:	08023e78 	.word	0x08023e78
 80030e8:	08023e84 	.word	0x08023e84
 80030ec:	08023cf8 	.word	0x08023cf8
		case 26 :
			strcpy(p->name,"PSYCHO MANTIS");
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80030f6:	4aa7      	ldr	r2, [pc, #668]	; (8003394 <problem_fetch+0x1cac>)
 80030f8:	461c      	mov	r4, r3
 80030fa:	4613      	mov	r3, r2
 80030fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030fe:	6020      	str	r0, [r4, #0]
 8003100:	6061      	str	r1, [r4, #4]
 8003102:	60a2      	str	r2, [r4, #8]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800310e:	4aa2      	ldr	r2, [pc, #648]	; (8003398 <problem_fetch+0x1cb0>)
 8003110:	6810      	ldr	r0, [r2, #0]
 8003112:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2206      	movs	r2, #6
 8003118:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,B,E,D");
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	33a4      	adds	r3, #164	; 0xa4
 800311e:	4a9f      	ldr	r2, [pc, #636]	; (800339c <problem_fetch+0x1cb4>)
 8003120:	461c      	mov	r4, r3
 8003122:	4613      	mov	r3, r2
 8003124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003126:	6020      	str	r0, [r4, #0]
 8003128:	6061      	str	r1, [r4, #4]
 800312a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,10,14,18");
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4a9b      	ldr	r2, [pc, #620]	; (80033a0 <problem_fetch+0x1cb8>)
 8003132:	461c      	mov	r4, r3
 8003134:	4615      	mov	r5, r2
 8003136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003138:	6020      	str	r0, [r4, #0]
 800313a:	6061      	str	r1, [r4, #4]
 800313c:	60a2      	str	r2, [r4, #8]
 800313e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003146:	4a97      	ldr	r2, [pc, #604]	; (80033a4 <problem_fetch+0x1cbc>)
 8003148:	461c      	mov	r4, r3
 800314a:	4613      	mov	r3, r2
 800314c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800314e:	6020      	str	r0, [r4, #0]
 8003150:	6061      	str	r1, [r4, #4]
 8003152:	60a2      	str	r2, [r4, #8]
			break;
 8003154:	f019 b9f8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 27 :
			strcpy(p->name,"STOUT LITE");
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800315e:	4992      	ldr	r1, [pc, #584]	; (80033a8 <problem_fetch+0x1cc0>)
 8003160:	461a      	mov	r2, r3
 8003162:	460b      	mov	r3, r1
 8003164:	cb03      	ldmia	r3!, {r0, r1}
 8003166:	6010      	str	r0, [r2, #0]
 8003168:	6051      	str	r1, [r2, #4]
 800316a:	8819      	ldrh	r1, [r3, #0]
 800316c:	789b      	ldrb	r3, [r3, #2]
 800316e:	8111      	strh	r1, [r2, #8]
 8003170:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003178:	4a87      	ldr	r2, [pc, #540]	; (8003398 <problem_fetch+0x1cb0>)
 800317a:	6810      	ldr	r0, [r2, #0]
 800317c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,G,I");
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	33a4      	adds	r3, #164	; 0xa4
 8003188:	4a88      	ldr	r2, [pc, #544]	; (80033ac <problem_fetch+0x1cc4>)
 800318a:	461c      	mov	r4, r3
 800318c:	4613      	mov	r3, r2
 800318e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003190:	6020      	str	r0, [r4, #0]
 8003192:	6061      	str	r1, [r4, #4]
 8003194:	60a2      	str	r2, [r4, #8]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,11,14,15,18");
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	3304      	adds	r3, #4
 800319e:	4a84      	ldr	r2, [pc, #528]	; (80033b0 <problem_fetch+0x1cc8>)
 80031a0:	461d      	mov	r5, r3
 80031a2:	4614      	mov	r4, r2
 80031a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a6:	6028      	str	r0, [r5, #0]
 80031a8:	6069      	str	r1, [r5, #4]
 80031aa:	60aa      	str	r2, [r5, #8]
 80031ac:	60eb      	str	r3, [r5, #12]
 80031ae:	8823      	ldrh	r3, [r4, #0]
 80031b0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80031b8:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <problem_fetch+0x1ccc>)
 80031ba:	461c      	mov	r4, r3
 80031bc:	4613      	mov	r3, r2
 80031be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031c0:	6020      	str	r0, [r4, #0]
 80031c2:	6061      	str	r1, [r4, #4]
 80031c4:	60a2      	str	r2, [r4, #8]
 80031c6:	881b      	ldrh	r3, [r3, #0]
 80031c8:	81a3      	strh	r3, [r4, #12]
			break;
 80031ca:	f019 b9bd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 28 :
			strcpy(p->name,"BLACKROCK");
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80031d4:	4978      	ldr	r1, [pc, #480]	; (80033b8 <problem_fetch+0x1cd0>)
 80031d6:	461a      	mov	r2, r3
 80031d8:	460b      	mov	r3, r1
 80031da:	cb03      	ldmia	r3!, {r0, r1}
 80031dc:	6010      	str	r0, [r2, #0]
 80031de:	6051      	str	r1, [r2, #4]
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80031ea:	4a6b      	ldr	r2, [pc, #428]	; (8003398 <problem_fetch+0x1cb0>)
 80031ec:	6810      	ldr	r0, [r2, #0]
 80031ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2207      	movs	r2, #7
 80031f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,B,D");
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	33a4      	adds	r3, #164	; 0xa4
 80031fa:	4a70      	ldr	r2, [pc, #448]	; (80033bc <problem_fetch+0x1cd4>)
 80031fc:	461c      	mov	r4, r3
 80031fe:	4613      	mov	r3, r2
 8003200:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003202:	6020      	str	r0, [r4, #0]
 8003204:	6061      	str	r1, [r4, #4]
 8003206:	60a2      	str	r2, [r4, #8]
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,12,15,18");
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3304      	adds	r3, #4
 8003210:	4a6b      	ldr	r2, [pc, #428]	; (80033c0 <problem_fetch+0x1cd8>)
 8003212:	461d      	mov	r5, r3
 8003214:	4614      	mov	r4, r2
 8003216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003218:	6028      	str	r0, [r5, #0]
 800321a:	6069      	str	r1, [r5, #4]
 800321c:	60aa      	str	r2, [r5, #8]
 800321e:	60eb      	str	r3, [r5, #12]
 8003220:	8823      	ldrh	r3, [r4, #0]
 8003222:	78a2      	ldrb	r2, [r4, #2]
 8003224:	822b      	strh	r3, [r5, #16]
 8003226:	4613      	mov	r3, r2
 8003228:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003230:	4a60      	ldr	r2, [pc, #384]	; (80033b4 <problem_fetch+0x1ccc>)
 8003232:	461c      	mov	r4, r3
 8003234:	4613      	mov	r3, r2
 8003236:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003238:	6020      	str	r0, [r4, #0]
 800323a:	6061      	str	r1, [r4, #4]
 800323c:	60a2      	str	r2, [r4, #8]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	81a3      	strh	r3, [r4, #12]
			break;
 8003242:	f019 b981 	b.w	801c548 <problem_fetch+0x1ae60>
		case 29 :
			strcpy(p->name,"BO4");
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800324c:	4a5d      	ldr	r2, [pc, #372]	; (80033c4 <problem_fetch+0x1cdc>)
 800324e:	6810      	ldr	r0, [r2, #0]
 8003250:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003258:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <problem_fetch+0x1ce0>)
 800325a:	8811      	ldrh	r1, [r2, #0]
 800325c:	7892      	ldrb	r2, [r2, #2]
 800325e:	8019      	strh	r1, [r3, #0]
 8003260:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,H,G,I,H");
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	33a4      	adds	r3, #164	; 0xa4
 800326c:	4a57      	ldr	r2, [pc, #348]	; (80033cc <problem_fetch+0x1ce4>)
 800326e:	461c      	mov	r4, r3
 8003270:	4613      	mov	r3, r2
 8003272:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003274:	6020      	str	r0, [r4, #0]
 8003276:	6061      	str	r1, [r4, #4]
 8003278:	60a2      	str	r2, [r4, #8]
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,5,15,18,12");
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4a53      	ldr	r2, [pc, #332]	; (80033d0 <problem_fetch+0x1ce8>)
 8003284:	461d      	mov	r5, r3
 8003286:	4614      	mov	r4, r2
 8003288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800328a:	6028      	str	r0, [r5, #0]
 800328c:	6069      	str	r1, [r5, #4]
 800328e:	60aa      	str	r2, [r5, #8]
 8003290:	60eb      	str	r3, [r5, #12]
 8003292:	8823      	ldrh	r3, [r4, #0]
 8003294:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,e,d");
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800329c:	4a4d      	ldr	r2, [pc, #308]	; (80033d4 <problem_fetch+0x1cec>)
 800329e:	461c      	mov	r4, r3
 80032a0:	4613      	mov	r3, r2
 80032a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032a4:	6020      	str	r0, [r4, #0]
 80032a6:	6061      	str	r1, [r4, #4]
 80032a8:	60a2      	str	r2, [r4, #8]
 80032aa:	881b      	ldrh	r3, [r3, #0]
 80032ac:	81a3      	strh	r3, [r4, #12]
			break;
 80032ae:	f019 b94b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 30 :
			strcpy(p->name,"UP MY SLEEVES");
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80032b8:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <problem_fetch+0x1cf0>)
 80032ba:	461c      	mov	r4, r3
 80032bc:	4613      	mov	r3, r2
 80032be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032c0:	6020      	str	r0, [r4, #0]
 80032c2:	6061      	str	r1, [r4, #4]
 80032c4:	60a2      	str	r2, [r4, #8]
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C+");
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <problem_fetch+0x1cf4>)
 80032d2:	6810      	ldr	r0, [r2, #0]
 80032d4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2205      	movs	r2, #5
 80032da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,J,E,A");
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	33a4      	adds	r3, #164	; 0xa4
 80032e0:	493f      	ldr	r1, [pc, #252]	; (80033e0 <problem_fetch+0x1cf8>)
 80032e2:	461a      	mov	r2, r3
 80032e4:	460b      	mov	r3, r1
 80032e6:	cb03      	ldmia	r3!, {r0, r1}
 80032e8:	6010      	str	r0, [r2, #0]
 80032ea:	6051      	str	r1, [r2, #4]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <problem_fetch+0x1cfc>)
 80032f6:	461c      	mov	r4, r3
 80032f8:	4613      	mov	r3, r2
 80032fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80032fc:	6020      	str	r0, [r4, #0]
 80032fe:	6061      	str	r1, [r4, #4]
 8003300:	60a2      	str	r2, [r4, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800330c:	4936      	ldr	r1, [pc, #216]	; (80033e8 <problem_fetch+0x1d00>)
 800330e:	461a      	mov	r2, r3
 8003310:	460b      	mov	r3, r1
 8003312:	cb03      	ldmia	r3!, {r0, r1}
 8003314:	6010      	str	r0, [r2, #0]
 8003316:	6051      	str	r1, [r2, #4]
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	8113      	strh	r3, [r2, #8]
			break;
 800331c:	f019 b914 	b.w	801c548 <problem_fetch+0x1ae60>
		case 31 :
			strcpy(p->name,"ULTRAVIOLENCE");
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003326:	4a31      	ldr	r2, [pc, #196]	; (80033ec <problem_fetch+0x1d04>)
 8003328:	461c      	mov	r4, r3
 800332a:	4613      	mov	r3, r2
 800332c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800332e:	6020      	str	r0, [r4, #0]
 8003330:	6061      	str	r1, [r4, #4]
 8003332:	60a2      	str	r2, [r4, #8]
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800333e:	4a16      	ldr	r2, [pc, #88]	; (8003398 <problem_fetch+0x1cb0>)
 8003340:	6810      	ldr	r0, [r2, #0]
 8003342:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2207      	movs	r2, #7
 8003348:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,F,E,J,D");
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	33a4      	adds	r3, #164	; 0xa4
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <problem_fetch+0x1d08>)
 8003350:	461c      	mov	r4, r3
 8003352:	4613      	mov	r3, r2
 8003354:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003356:	6020      	str	r0, [r4, #0]
 8003358:	6061      	str	r1, [r4, #4]
 800335a:	60a2      	str	r2, [r4, #8]
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3304      	adds	r3, #4
 8003364:	4a23      	ldr	r2, [pc, #140]	; (80033f4 <problem_fetch+0x1d0c>)
 8003366:	461d      	mov	r5, r3
 8003368:	4614      	mov	r4, r2
 800336a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800336c:	6028      	str	r0, [r5, #0]
 800336e:	6069      	str	r1, [r5, #4]
 8003370:	60aa      	str	r2, [r5, #8]
 8003372:	60eb      	str	r3, [r5, #12]
 8003374:	8823      	ldrh	r3, [r4, #0]
 8003376:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <problem_fetch+0x1d10>)
 8003380:	461c      	mov	r4, r3
 8003382:	4613      	mov	r3, r2
 8003384:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003386:	6020      	str	r0, [r4, #0]
 8003388:	6061      	str	r1, [r4, #4]
 800338a:	60a2      	str	r2, [r4, #8]
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	81a3      	strh	r3, [r4, #12]
			break;
 8003390:	f019 b8da 	b.w	801c548 <problem_fetch+0x1ae60>
 8003394:	08023e94 	.word	0x08023e94
 8003398:	080239f4 	.word	0x080239f4
 800339c:	08023ea4 	.word	0x08023ea4
 80033a0:	08023eb0 	.word	0x08023eb0
 80033a4:	08023cf8 	.word	0x08023cf8
 80033a8:	08023ec0 	.word	0x08023ec0
 80033ac:	08023ecc 	.word	0x08023ecc
 80033b0:	08023edc 	.word	0x08023edc
 80033b4:	08023ae4 	.word	0x08023ae4
 80033b8:	08023ef0 	.word	0x08023ef0
 80033bc:	08023efc 	.word	0x08023efc
 80033c0:	08023f0c 	.word	0x08023f0c
 80033c4:	08023f20 	.word	0x08023f20
 80033c8:	0802391c 	.word	0x0802391c
 80033cc:	08023f24 	.word	0x08023f24
 80033d0:	08023f34 	.word	0x08023f34
 80033d4:	08023f48 	.word	0x08023f48
 80033d8:	08023f58 	.word	0x08023f58
 80033dc:	08023f68 	.word	0x08023f68
 80033e0:	08023f6c 	.word	0x08023f6c
 80033e4:	08023f78 	.word	0x08023f78
 80033e8:	08023e28 	.word	0x08023e28
 80033ec:	08023f88 	.word	0x08023f88
 80033f0:	08023f98 	.word	0x08023f98
 80033f4:	08023fa8 	.word	0x08023fa8
 80033f8:	080239d4 	.word	0x080239d4
		case 32 :
			strcpy(p->name,"DJWUDHDJWJCJDJE");
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003402:	4ab0      	ldr	r2, [pc, #704]	; (80036c4 <problem_fetch+0x1fdc>)
 8003404:	461c      	mov	r4, r3
 8003406:	4615      	mov	r5, r2
 8003408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800340a:	6020      	str	r0, [r4, #0]
 800340c:	6061      	str	r1, [r4, #4]
 800340e:	60a2      	str	r2, [r4, #8]
 8003410:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003418:	4aab      	ldr	r2, [pc, #684]	; (80036c8 <problem_fetch+0x1fe0>)
 800341a:	6810      	ldr	r0, [r2, #0]
 800341c:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	220a      	movs	r2, #10
 8003422:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,E,D,B,A,D");
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	33a4      	adds	r3, #164	; 0xa4
 8003428:	4aa8      	ldr	r2, [pc, #672]	; (80036cc <problem_fetch+0x1fe4>)
 800342a:	461d      	mov	r5, r3
 800342c:	4614      	mov	r4, r2
 800342e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003430:	6028      	str	r0, [r5, #0]
 8003432:	6069      	str	r1, [r5, #4]
 8003434:	60aa      	str	r2, [r5, #8]
 8003436:	60eb      	str	r3, [r5, #12]
 8003438:	6820      	ldr	r0, [r4, #0]
 800343a:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,13,12,15,15,18,18");
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	4aa3      	ldr	r2, [pc, #652]	; (80036d0 <problem_fetch+0x1fe8>)
 8003442:	461d      	mov	r5, r3
 8003444:	4614      	mov	r4, r2
 8003446:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003448:	6028      	str	r0, [r5, #0]
 800344a:	6069      	str	r1, [r5, #4]
 800344c:	60aa      	str	r2, [r5, #8]
 800344e:	60eb      	str	r3, [r5, #12]
 8003450:	cc03      	ldmia	r4!, {r0, r1}
 8003452:	6128      	str	r0, [r5, #16]
 8003454:	6169      	str	r1, [r5, #20]
 8003456:	8823      	ldrh	r3, [r4, #0]
 8003458:	78a2      	ldrb	r2, [r4, #2]
 800345a:	832b      	strh	r3, [r5, #24]
 800345c:	4613      	mov	r3, r2
 800345e:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e,e");
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003466:	4a9b      	ldr	r2, [pc, #620]	; (80036d4 <problem_fetch+0x1fec>)
 8003468:	461d      	mov	r5, r3
 800346a:	4614      	mov	r4, r2
 800346c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800346e:	6028      	str	r0, [r5, #0]
 8003470:	6069      	str	r1, [r5, #4]
 8003472:	60aa      	str	r2, [r5, #8]
 8003474:	60eb      	str	r3, [r5, #12]
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	6128      	str	r0, [r5, #16]
			break;
 800347a:	f019 b865 	b.w	801c548 <problem_fetch+0x1ae60>
		case 33 :
			strcpy(p->name,"I ❤️ ELLIA");
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003484:	4a94      	ldr	r2, [pc, #592]	; (80036d8 <problem_fetch+0x1ff0>)
 8003486:	461c      	mov	r4, r3
 8003488:	4613      	mov	r3, r2
 800348a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800348c:	6020      	str	r0, [r4, #0]
 800348e:	6061      	str	r1, [r4, #4]
 8003490:	60a2      	str	r2, [r4, #8]
 8003492:	881a      	ldrh	r2, [r3, #0]
 8003494:	789b      	ldrb	r3, [r3, #2]
 8003496:	81a2      	strh	r2, [r4, #12]
 8003498:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80034a0:	4a8e      	ldr	r2, [pc, #568]	; (80036dc <problem_fetch+0x1ff4>)
 80034a2:	6810      	ldr	r0, [r2, #0]
 80034a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2205      	movs	r2, #5
 80034aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,D");
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	33a4      	adds	r3, #164	; 0xa4
 80034b0:	498b      	ldr	r1, [pc, #556]	; (80036e0 <problem_fetch+0x1ff8>)
 80034b2:	461a      	mov	r2, r3
 80034b4:	460b      	mov	r3, r1
 80034b6:	cb03      	ldmia	r3!, {r0, r1}
 80034b8:	6010      	str	r0, [r2, #0]
 80034ba:	6051      	str	r1, [r2, #4]
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,13,18");
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4a87      	ldr	r2, [pc, #540]	; (80036e4 <problem_fetch+0x1ffc>)
 80034c6:	461c      	mov	r4, r3
 80034c8:	4613      	mov	r3, r2
 80034ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034cc:	6020      	str	r0, [r4, #0]
 80034ce:	6061      	str	r1, [r4, #4]
 80034d0:	60a2      	str	r2, [r4, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80034dc:	4982      	ldr	r1, [pc, #520]	; (80036e8 <problem_fetch+0x2000>)
 80034de:	461a      	mov	r2, r3
 80034e0:	460b      	mov	r3, r1
 80034e2:	cb03      	ldmia	r3!, {r0, r1}
 80034e4:	6010      	str	r0, [r2, #0]
 80034e6:	6051      	str	r1, [r2, #4]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	8113      	strh	r3, [r2, #8]
			break;
 80034ec:	f019 b82c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 34 :
			strcpy(p->name,"LIZZY BLACK");
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80034f6:	4a7d      	ldr	r2, [pc, #500]	; (80036ec <problem_fetch+0x2004>)
 80034f8:	461c      	mov	r4, r3
 80034fa:	4613      	mov	r3, r2
 80034fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80034fe:	6020      	str	r0, [r4, #0]
 8003500:	6061      	str	r1, [r4, #4]
 8003502:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800350a:	4a79      	ldr	r2, [pc, #484]	; (80036f0 <problem_fetch+0x2008>)
 800350c:	8811      	ldrh	r1, [r2, #0]
 800350e:	7892      	ldrb	r2, [r2, #2]
 8003510:	8019      	strh	r1, [r3, #0]
 8003512:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2206      	movs	r2, #6
 8003518:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,E,D,I");
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	33a4      	adds	r3, #164	; 0xa4
 800351e:	4a75      	ldr	r2, [pc, #468]	; (80036f4 <problem_fetch+0x200c>)
 8003520:	461c      	mov	r4, r3
 8003522:	4613      	mov	r3, r2
 8003524:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003526:	6020      	str	r0, [r4, #0]
 8003528:	6061      	str	r1, [r4, #4]
 800352a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,12,15,18");
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4a71      	ldr	r2, [pc, #452]	; (80036f8 <problem_fetch+0x2010>)
 8003532:	461d      	mov	r5, r3
 8003534:	4614      	mov	r4, r2
 8003536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003538:	6028      	str	r0, [r5, #0]
 800353a:	6069      	str	r1, [r5, #4]
 800353c:	60aa      	str	r2, [r5, #8]
 800353e:	60eb      	str	r3, [r5, #12]
 8003540:	7823      	ldrb	r3, [r4, #0]
 8003542:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800354a:	4a6c      	ldr	r2, [pc, #432]	; (80036fc <problem_fetch+0x2014>)
 800354c:	461c      	mov	r4, r3
 800354e:	4613      	mov	r3, r2
 8003550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003552:	6020      	str	r0, [r4, #0]
 8003554:	6061      	str	r1, [r4, #4]
 8003556:	60a2      	str	r2, [r4, #8]
			break;
 8003558:	f018 bff6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 35 :
			strcpy(p->name,"NOT FOR HOONY");
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003562:	4a67      	ldr	r2, [pc, #412]	; (8003700 <problem_fetch+0x2018>)
 8003564:	461c      	mov	r4, r3
 8003566:	4613      	mov	r3, r2
 8003568:	cb07      	ldmia	r3!, {r0, r1, r2}
 800356a:	6020      	str	r0, [r4, #0]
 800356c:	6061      	str	r1, [r4, #4]
 800356e:	60a2      	str	r2, [r4, #8]
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800357a:	4a58      	ldr	r2, [pc, #352]	; (80036dc <problem_fetch+0x1ff4>)
 800357c:	6810      	ldr	r0, [r2, #0]
 800357e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2208      	movs	r2, #8
 8003584:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,G,A,I,H");
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	33a4      	adds	r3, #164	; 0xa4
 800358a:	4a5e      	ldr	r2, [pc, #376]	; (8003704 <problem_fetch+0x201c>)
 800358c:	461c      	mov	r4, r3
 800358e:	4615      	mov	r5, r2
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	6020      	str	r0, [r4, #0]
 8003594:	6061      	str	r1, [r4, #4]
 8003596:	60a2      	str	r2, [r4, #8]
 8003598:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,13,17,9,18,16");
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3304      	adds	r3, #4
 800359e:	4a5a      	ldr	r2, [pc, #360]	; (8003708 <problem_fetch+0x2020>)
 80035a0:	461d      	mov	r5, r3
 80035a2:	4614      	mov	r4, r2
 80035a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035a6:	6028      	str	r0, [r5, #0]
 80035a8:	6069      	str	r1, [r5, #4]
 80035aa:	60aa      	str	r2, [r5, #8]
 80035ac:	60eb      	str	r3, [r5, #12]
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80035b8:	4a54      	ldr	r2, [pc, #336]	; (800370c <problem_fetch+0x2024>)
 80035ba:	461c      	mov	r4, r3
 80035bc:	4615      	mov	r5, r2
 80035be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035c0:	6020      	str	r0, [r4, #0]
 80035c2:	6061      	str	r1, [r4, #4]
 80035c4:	60a2      	str	r2, [r4, #8]
 80035c6:	60e3      	str	r3, [r4, #12]
			break;
 80035c8:	f018 bfbe 	b.w	801c548 <problem_fetch+0x1ae60>
		case 36 :
			strcpy(p->name,"L’HEURE SOMBRE");
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80035d2:	4a4f      	ldr	r2, [pc, #316]	; (8003710 <problem_fetch+0x2028>)
 80035d4:	461d      	mov	r5, r3
 80035d6:	4614      	mov	r4, r2
 80035d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035da:	6028      	str	r0, [r5, #0]
 80035dc:	6069      	str	r1, [r5, #4]
 80035de:	60aa      	str	r2, [r5, #8]
 80035e0:	60eb      	str	r3, [r5, #12]
 80035e2:	7823      	ldrb	r3, [r4, #0]
 80035e4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80035ec:	4a49      	ldr	r2, [pc, #292]	; (8003714 <problem_fetch+0x202c>)
 80035ee:	6810      	ldr	r0, [r2, #0]
 80035f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2209      	movs	r2, #9
 80035f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,D,E,B,C,A,B");
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	33a4      	adds	r3, #164	; 0xa4
 80035fc:	4a46      	ldr	r2, [pc, #280]	; (8003718 <problem_fetch+0x2030>)
 80035fe:	461d      	mov	r5, r3
 8003600:	4614      	mov	r4, r2
 8003602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003604:	6028      	str	r0, [r5, #0]
 8003606:	6069      	str	r1, [r5, #4]
 8003608:	60aa      	str	r2, [r5, #8]
 800360a:	60eb      	str	r3, [r5, #12]
 800360c:	8823      	ldrh	r3, [r4, #0]
 800360e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,14,12,16,18,6");
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3304      	adds	r3, #4
 8003614:	4a41      	ldr	r2, [pc, #260]	; (800371c <problem_fetch+0x2034>)
 8003616:	461c      	mov	r4, r3
 8003618:	4615      	mov	r5, r2
 800361a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361c:	6020      	str	r0, [r4, #0]
 800361e:	6061      	str	r1, [r4, #4]
 8003620:	60a2      	str	r2, [r4, #8]
 8003622:	60e3      	str	r3, [r4, #12]
 8003624:	6828      	ldr	r0, [r5, #0]
 8003626:	6120      	str	r0, [r4, #16]
 8003628:	88ab      	ldrh	r3, [r5, #4]
 800362a:	79aa      	ldrb	r2, [r5, #6]
 800362c:	82a3      	strh	r3, [r4, #20]
 800362e:	4613      	mov	r3, r2
 8003630:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003638:	4a39      	ldr	r2, [pc, #228]	; (8003720 <problem_fetch+0x2038>)
 800363a:	461d      	mov	r5, r3
 800363c:	4614      	mov	r4, r2
 800363e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003640:	6028      	str	r0, [r5, #0]
 8003642:	6069      	str	r1, [r5, #4]
 8003644:	60aa      	str	r2, [r5, #8]
 8003646:	60eb      	str	r3, [r5, #12]
 8003648:	8823      	ldrh	r3, [r4, #0]
 800364a:	822b      	strh	r3, [r5, #16]
			break;
 800364c:	f018 bf7c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 37 :
			strcpy(p->name,"MOMMSEN'S#2");
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003656:	4a33      	ldr	r2, [pc, #204]	; (8003724 <problem_fetch+0x203c>)
 8003658:	461c      	mov	r4, r3
 800365a:	4613      	mov	r3, r2
 800365c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800365e:	6020      	str	r0, [r4, #0]
 8003660:	6061      	str	r1, [r4, #4]
 8003662:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800366a:	4a2f      	ldr	r2, [pc, #188]	; (8003728 <problem_fetch+0x2040>)
 800366c:	8811      	ldrh	r1, [r2, #0]
 800366e:	7892      	ldrb	r2, [r2, #2]
 8003670:	8019      	strh	r1, [r3, #0]
 8003672:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2207      	movs	r2, #7
 8003678:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,I,G,I");
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	33a4      	adds	r3, #164	; 0xa4
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <problem_fetch+0x2044>)
 8003680:	461c      	mov	r4, r3
 8003682:	4613      	mov	r3, r2
 8003684:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003686:	6020      	str	r0, [r4, #0]
 8003688:	6061      	str	r1, [r4, #4]
 800368a:	60a2      	str	r2, [r4, #8]
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <problem_fetch+0x2048>)
 8003696:	461d      	mov	r5, r3
 8003698:	4614      	mov	r4, r2
 800369a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800369c:	6028      	str	r0, [r5, #0]
 800369e:	6069      	str	r1, [r5, #4]
 80036a0:	60aa      	str	r2, [r5, #8]
 80036a2:	60eb      	str	r3, [r5, #12]
 80036a4:	8823      	ldrh	r3, [r4, #0]
 80036a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80036ae:	4a21      	ldr	r2, [pc, #132]	; (8003734 <problem_fetch+0x204c>)
 80036b0:	461c      	mov	r4, r3
 80036b2:	4613      	mov	r3, r2
 80036b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80036b6:	6020      	str	r0, [r4, #0]
 80036b8:	6061      	str	r1, [r4, #4]
 80036ba:	60a2      	str	r2, [r4, #8]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	81a3      	strh	r3, [r4, #12]
			break;
 80036c0:	f018 bf42 	b.w	801c548 <problem_fetch+0x1ae60>
 80036c4:	08023fbc 	.word	0x08023fbc
 80036c8:	0802395c 	.word	0x0802395c
 80036cc:	08023fcc 	.word	0x08023fcc
 80036d0:	08023fe0 	.word	0x08023fe0
 80036d4:	08023ffc 	.word	0x08023ffc
 80036d8:	08024010 	.word	0x08024010
 80036dc:	08023afc 	.word	0x08023afc
 80036e0:	08024020 	.word	0x08024020
 80036e4:	0802402c 	.word	0x0802402c
 80036e8:	0802403c 	.word	0x0802403c
 80036ec:	08024048 	.word	0x08024048
 80036f0:	08024054 	.word	0x08024054
 80036f4:	08024058 	.word	0x08024058
 80036f8:	08024064 	.word	0x08024064
 80036fc:	08023cf8 	.word	0x08023cf8
 8003700:	08024078 	.word	0x08024078
 8003704:	08024088 	.word	0x08024088
 8003708:	08024098 	.word	0x08024098
 800370c:	080240ac 	.word	0x080240ac
 8003710:	080240bc 	.word	0x080240bc
 8003714:	08023a98 	.word	0x08023a98
 8003718:	080240d0 	.word	0x080240d0
 800371c:	080240e4 	.word	0x080240e4
 8003720:	080240fc 	.word	0x080240fc
 8003724:	08024110 	.word	0x08024110
 8003728:	08023a28 	.word	0x08023a28
 800372c:	0802411c 	.word	0x0802411c
 8003730:	0802412c 	.word	0x0802412c
 8003734:	08023ae4 	.word	0x08023ae4
		case 38 :
			strcpy(p->name,"GGGGGGH");
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800373e:	49af      	ldr	r1, [pc, #700]	; (80039fc <problem_fetch+0x2314>)
 8003740:	461a      	mov	r2, r3
 8003742:	460b      	mov	r3, r1
 8003744:	cb03      	ldmia	r3!, {r0, r1}
 8003746:	6010      	str	r0, [r2, #0]
 8003748:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003750:	4aab      	ldr	r2, [pc, #684]	; (8003a00 <problem_fetch+0x2318>)
 8003752:	6810      	ldr	r0, [r2, #0]
 8003754:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2209      	movs	r2, #9
 800375a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,K,H,J,I,J,K");
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	33a4      	adds	r3, #164	; 0xa4
 8003760:	4aa8      	ldr	r2, [pc, #672]	; (8003a04 <problem_fetch+0x231c>)
 8003762:	461d      	mov	r5, r3
 8003764:	4614      	mov	r4, r2
 8003766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003768:	6028      	str	r0, [r5, #0]
 800376a:	6069      	str	r1, [r5, #4]
 800376c:	60aa      	str	r2, [r5, #8]
 800376e:	60eb      	str	r3, [r5, #12]
 8003770:	8823      	ldrh	r3, [r4, #0]
 8003772:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,9,10,13,18,16,16");
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3304      	adds	r3, #4
 8003778:	4aa3      	ldr	r2, [pc, #652]	; (8003a08 <problem_fetch+0x2320>)
 800377a:	461c      	mov	r4, r3
 800377c:	4615      	mov	r5, r2
 800377e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003780:	6020      	str	r0, [r4, #0]
 8003782:	6061      	str	r1, [r4, #4]
 8003784:	60a2      	str	r2, [r4, #8]
 8003786:	60e3      	str	r3, [r4, #12]
 8003788:	6828      	ldr	r0, [r5, #0]
 800378a:	6120      	str	r0, [r4, #16]
 800378c:	88ab      	ldrh	r3, [r5, #4]
 800378e:	79aa      	ldrb	r2, [r5, #6]
 8003790:	82a3      	strh	r3, [r4, #20]
 8003792:	4613      	mov	r3, r2
 8003794:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d,d");
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800379c:	4a9b      	ldr	r2, [pc, #620]	; (8003a0c <problem_fetch+0x2324>)
 800379e:	461d      	mov	r5, r3
 80037a0:	4614      	mov	r4, r2
 80037a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a4:	6028      	str	r0, [r5, #0]
 80037a6:	6069      	str	r1, [r5, #4]
 80037a8:	60aa      	str	r2, [r5, #8]
 80037aa:	60eb      	str	r3, [r5, #12]
 80037ac:	8823      	ldrh	r3, [r4, #0]
 80037ae:	822b      	strh	r3, [r5, #16]
			break;
 80037b0:	f018 beca 	b.w	801c548 <problem_fetch+0x1ae60>
		case 39 :
			strcpy(p->name,"19-1.2");
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80037ba:	4a95      	ldr	r2, [pc, #596]	; (8003a10 <problem_fetch+0x2328>)
 80037bc:	6810      	ldr	r0, [r2, #0]
 80037be:	6018      	str	r0, [r3, #0]
 80037c0:	8891      	ldrh	r1, [r2, #4]
 80037c2:	7992      	ldrb	r2, [r2, #6]
 80037c4:	8099      	strh	r1, [r3, #4]
 80037c6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037ce:	4a91      	ldr	r2, [pc, #580]	; (8003a14 <problem_fetch+0x232c>)
 80037d0:	8811      	ldrh	r1, [r2, #0]
 80037d2:	7892      	ldrb	r2, [r2, #2]
 80037d4:	8019      	strh	r1, [r3, #0]
 80037d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2208      	movs	r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,B,C,G,I,J");
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	33a4      	adds	r3, #164	; 0xa4
 80037e2:	4a8d      	ldr	r2, [pc, #564]	; (8003a18 <problem_fetch+0x2330>)
 80037e4:	461c      	mov	r4, r3
 80037e6:	4615      	mov	r5, r2
 80037e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037ea:	6020      	str	r0, [r4, #0]
 80037ec:	6061      	str	r1, [r4, #4]
 80037ee:	60a2      	str	r2, [r4, #8]
 80037f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,7,10,13,14,18,16");
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4a89      	ldr	r2, [pc, #548]	; (8003a1c <problem_fetch+0x2334>)
 80037f8:	461d      	mov	r5, r3
 80037fa:	4614      	mov	r4, r2
 80037fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fe:	6028      	str	r0, [r5, #0]
 8003800:	6069      	str	r1, [r5, #4]
 8003802:	60aa      	str	r2, [r5, #8]
 8003804:	60eb      	str	r3, [r5, #12]
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	6128      	str	r0, [r5, #16]
 800380a:	7923      	ldrb	r3, [r4, #4]
 800380c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003814:	4a82      	ldr	r2, [pc, #520]	; (8003a20 <problem_fetch+0x2338>)
 8003816:	461c      	mov	r4, r3
 8003818:	4615      	mov	r5, r2
 800381a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800381c:	6020      	str	r0, [r4, #0]
 800381e:	6061      	str	r1, [r4, #4]
 8003820:	60a2      	str	r2, [r4, #8]
 8003822:	60e3      	str	r3, [r4, #12]
			break;
 8003824:	f018 be90 	b.w	801c548 <problem_fetch+0x1ae60>
		case 40 :
			strcpy(p->name,"BASTION");
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800382e:	497d      	ldr	r1, [pc, #500]	; (8003a24 <problem_fetch+0x233c>)
 8003830:	461a      	mov	r2, r3
 8003832:	460b      	mov	r3, r1
 8003834:	cb03      	ldmia	r3!, {r0, r1}
 8003836:	6010      	str	r0, [r2, #0]
 8003838:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003840:	4a79      	ldr	r2, [pc, #484]	; (8003a28 <problem_fetch+0x2340>)
 8003842:	8811      	ldrh	r1, [r2, #0]
 8003844:	7892      	ldrb	r2, [r2, #2]
 8003846:	8019      	strh	r1, [r3, #0]
 8003848:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	220a      	movs	r2, #10
 800384e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,F,B,E,B,G,E,I");
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	33a4      	adds	r3, #164	; 0xa4
 8003854:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <problem_fetch+0x2344>)
 8003856:	461d      	mov	r5, r3
 8003858:	4614      	mov	r4, r2
 800385a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800385c:	6028      	str	r0, [r5, #0]
 800385e:	6069      	str	r1, [r5, #4]
 8003860:	60aa      	str	r2, [r5, #8]
 8003862:	60eb      	str	r3, [r5, #12]
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,12,12,15,17,16,18");
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4a70      	ldr	r2, [pc, #448]	; (8003a30 <problem_fetch+0x2348>)
 800386e:	461d      	mov	r5, r3
 8003870:	4614      	mov	r4, r2
 8003872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003874:	6028      	str	r0, [r5, #0]
 8003876:	6069      	str	r1, [r5, #4]
 8003878:	60aa      	str	r2, [r5, #8]
 800387a:	60eb      	str	r3, [r5, #12]
 800387c:	cc03      	ldmia	r4!, {r0, r1}
 800387e:	6128      	str	r0, [r5, #16]
 8003880:	6169      	str	r1, [r5, #20]
 8003882:	8823      	ldrh	r3, [r4, #0]
 8003884:	78a2      	ldrb	r2, [r4, #2]
 8003886:	832b      	strh	r3, [r5, #24]
 8003888:	4613      	mov	r3, r2
 800388a:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003892:	4a68      	ldr	r2, [pc, #416]	; (8003a34 <problem_fetch+0x234c>)
 8003894:	461d      	mov	r5, r3
 8003896:	4614      	mov	r4, r2
 8003898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800389a:	6028      	str	r0, [r5, #0]
 800389c:	6069      	str	r1, [r5, #4]
 800389e:	60aa      	str	r2, [r5, #8]
 80038a0:	60eb      	str	r3, [r5, #12]
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	6128      	str	r0, [r5, #16]
			break;
 80038a6:	f018 be4f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 41 :
			strcpy(p->name,"GOBRIGHT SPECIAL");
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80038b0:	4a61      	ldr	r2, [pc, #388]	; (8003a38 <problem_fetch+0x2350>)
 80038b2:	461d      	mov	r5, r3
 80038b4:	4614      	mov	r4, r2
 80038b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038b8:	6028      	str	r0, [r5, #0]
 80038ba:	6069      	str	r1, [r5, #4]
 80038bc:	60aa      	str	r2, [r5, #8]
 80038be:	60eb      	str	r3, [r5, #12]
 80038c0:	7823      	ldrb	r3, [r4, #0]
 80038c2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80038ca:	4a5c      	ldr	r2, [pc, #368]	; (8003a3c <problem_fetch+0x2354>)
 80038cc:	8811      	ldrh	r1, [r2, #0]
 80038ce:	7892      	ldrb	r2, [r2, #2]
 80038d0:	8019      	strh	r1, [r3, #0]
 80038d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2205      	movs	r2, #5
 80038d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,H,H,C,D");
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	33a4      	adds	r3, #164	; 0xa4
 80038de:	4958      	ldr	r1, [pc, #352]	; (8003a40 <problem_fetch+0x2358>)
 80038e0:	461a      	mov	r2, r3
 80038e2:	460b      	mov	r3, r1
 80038e4:	cb03      	ldmia	r3!, {r0, r1}
 80038e6:	6010      	str	r0, [r2, #0]
 80038e8:	6051      	str	r1, [r2, #4]
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4a54      	ldr	r2, [pc, #336]	; (8003a44 <problem_fetch+0x235c>)
 80038f4:	461c      	mov	r4, r3
 80038f6:	4613      	mov	r3, r2
 80038f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80038fa:	6020      	str	r0, [r4, #0]
 80038fc:	6061      	str	r1, [r4, #4]
 80038fe:	60a2      	str	r2, [r4, #8]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800390a:	494f      	ldr	r1, [pc, #316]	; (8003a48 <problem_fetch+0x2360>)
 800390c:	461a      	mov	r2, r3
 800390e:	460b      	mov	r3, r1
 8003910:	cb03      	ldmia	r3!, {r0, r1}
 8003912:	6010      	str	r0, [r2, #0]
 8003914:	6051      	str	r1, [r2, #4]
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	8113      	strh	r3, [r2, #8]
			break;
 800391a:	f018 be15 	b.w	801c548 <problem_fetch+0x1ae60>
		case 42 :
			strcpy(p->name,"BLACK CAT");
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003924:	4949      	ldr	r1, [pc, #292]	; (8003a4c <problem_fetch+0x2364>)
 8003926:	461a      	mov	r2, r3
 8003928:	460b      	mov	r3, r1
 800392a:	cb03      	ldmia	r3!, {r0, r1}
 800392c:	6010      	str	r0, [r2, #0]
 800392e:	6051      	str	r1, [r2, #4]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800393a:	4a45      	ldr	r2, [pc, #276]	; (8003a50 <problem_fetch+0x2368>)
 800393c:	6810      	ldr	r0, [r2, #0]
 800393e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2207      	movs	r2, #7
 8003944:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,J,I");
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	33a4      	adds	r3, #164	; 0xa4
 800394a:	4a42      	ldr	r2, [pc, #264]	; (8003a54 <problem_fetch+0x236c>)
 800394c:	461c      	mov	r4, r3
 800394e:	4613      	mov	r3, r2
 8003950:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003952:	6020      	str	r0, [r4, #0]
 8003954:	6061      	str	r1, [r4, #4]
 8003956:	60a2      	str	r2, [r4, #8]
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,16,18");
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <problem_fetch+0x2370>)
 8003962:	461d      	mov	r5, r3
 8003964:	4614      	mov	r4, r2
 8003966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003968:	6028      	str	r0, [r5, #0]
 800396a:	6069      	str	r1, [r5, #4]
 800396c:	60aa      	str	r2, [r5, #8]
 800396e:	60eb      	str	r3, [r5, #12]
 8003970:	8823      	ldrh	r3, [r4, #0]
 8003972:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800397a:	4a38      	ldr	r2, [pc, #224]	; (8003a5c <problem_fetch+0x2374>)
 800397c:	461c      	mov	r4, r3
 800397e:	4613      	mov	r3, r2
 8003980:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003982:	6020      	str	r0, [r4, #0]
 8003984:	6061      	str	r1, [r4, #4]
 8003986:	60a2      	str	r2, [r4, #8]
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	81a3      	strh	r3, [r4, #12]
			break;
 800398c:	f018 bddc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 43 :
			strcpy(p->name,"WING SPANDEX");
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003996:	4a32      	ldr	r2, [pc, #200]	; (8003a60 <problem_fetch+0x2378>)
 8003998:	461c      	mov	r4, r3
 800399a:	4613      	mov	r3, r2
 800399c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800399e:	6020      	str	r0, [r4, #0]
 80039a0:	6061      	str	r1, [r4, #4]
 80039a2:	60a2      	str	r2, [r4, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80039ae:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <problem_fetch+0x237c>)
 80039b0:	8811      	ldrh	r1, [r2, #0]
 80039b2:	7892      	ldrb	r2, [r2, #2]
 80039b4:	8019      	strh	r1, [r3, #0]
 80039b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2206      	movs	r2, #6
 80039bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,C,G,A");
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	33a4      	adds	r3, #164	; 0xa4
 80039c2:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <problem_fetch+0x2380>)
 80039c4:	461c      	mov	r4, r3
 80039c6:	4613      	mov	r3, r2
 80039c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039ca:	6020      	str	r0, [r4, #0]
 80039cc:	6061      	str	r1, [r4, #4]
 80039ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,13,17,18");
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4a25      	ldr	r2, [pc, #148]	; (8003a6c <problem_fetch+0x2384>)
 80039d6:	461c      	mov	r4, r3
 80039d8:	4615      	mov	r5, r2
 80039da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80039dc:	6020      	str	r0, [r4, #0]
 80039de:	6061      	str	r1, [r4, #4]
 80039e0:	60a2      	str	r2, [r4, #8]
 80039e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80039ea:	4a21      	ldr	r2, [pc, #132]	; (8003a70 <problem_fetch+0x2388>)
 80039ec:	461c      	mov	r4, r3
 80039ee:	4613      	mov	r3, r2
 80039f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80039f2:	6020      	str	r0, [r4, #0]
 80039f4:	6061      	str	r1, [r4, #4]
 80039f6:	60a2      	str	r2, [r4, #8]
			break;
 80039f8:	f018 bda6 	b.w	801c548 <problem_fetch+0x1ae60>
 80039fc:	08024140 	.word	0x08024140
 8003a00:	0802395c 	.word	0x0802395c
 8003a04:	08024148 	.word	0x08024148
 8003a08:	0802415c 	.word	0x0802415c
 8003a0c:	08024174 	.word	0x08024174
 8003a10:	08024188 	.word	0x08024188
 8003a14:	08024190 	.word	0x08024190
 8003a18:	08024194 	.word	0x08024194
 8003a1c:	080241a4 	.word	0x080241a4
 8003a20:	080241bc 	.word	0x080241bc
 8003a24:	080241cc 	.word	0x080241cc
 8003a28:	08023a28 	.word	0x08023a28
 8003a2c:	080241d4 	.word	0x080241d4
 8003a30:	080241e8 	.word	0x080241e8
 8003a34:	08024204 	.word	0x08024204
 8003a38:	08024218 	.word	0x08024218
 8003a3c:	0802391c 	.word	0x0802391c
 8003a40:	0802422c 	.word	0x0802422c
 8003a44:	08024238 	.word	0x08024238
 8003a48:	0802403c 	.word	0x0802403c
 8003a4c:	08024248 	.word	0x08024248
 8003a50:	08023a98 	.word	0x08023a98
 8003a54:	08024254 	.word	0x08024254
 8003a58:	08024264 	.word	0x08024264
 8003a5c:	08023ae4 	.word	0x08023ae4
 8003a60:	08024278 	.word	0x08024278
 8003a64:	08024054 	.word	0x08024054
 8003a68:	08024288 	.word	0x08024288
 8003a6c:	08024294 	.word	0x08024294
 8003a70:	08023cf8 	.word	0x08023cf8
		case 44 :
			strcpy(p->name,"CAVATELLI");
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003a7a:	49b2      	ldr	r1, [pc, #712]	; (8003d44 <problem_fetch+0x265c>)
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	460b      	mov	r3, r1
 8003a80:	cb03      	ldmia	r3!, {r0, r1}
 8003a82:	6010      	str	r0, [r2, #0]
 8003a84:	6051      	str	r1, [r2, #4]
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a90:	4aad      	ldr	r2, [pc, #692]	; (8003d48 <problem_fetch+0x2660>)
 8003a92:	6810      	ldr	r0, [r2, #0]
 8003a94:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2205      	movs	r2, #5
 8003a9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,J,D");
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	33a4      	adds	r3, #164	; 0xa4
 8003aa0:	49aa      	ldr	r1, [pc, #680]	; (8003d4c <problem_fetch+0x2664>)
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	cb03      	ldmia	r3!, {r0, r1}
 8003aa8:	6010      	str	r0, [r2, #0]
 8003aaa:	6051      	str	r1, [r2, #4]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,16,18");
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4aa6      	ldr	r2, [pc, #664]	; (8003d50 <problem_fetch+0x2668>)
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4613      	mov	r3, r2
 8003aba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003abc:	6020      	str	r0, [r4, #0]
 8003abe:	6061      	str	r1, [r4, #4]
 8003ac0:	60a2      	str	r2, [r4, #8]
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003acc:	49a1      	ldr	r1, [pc, #644]	; (8003d54 <problem_fetch+0x266c>)
 8003ace:	461a      	mov	r2, r3
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	cb03      	ldmia	r3!, {r0, r1}
 8003ad4:	6010      	str	r0, [r2, #0]
 8003ad6:	6051      	str	r1, [r2, #4]
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	8113      	strh	r3, [r2, #8]
			break;
 8003adc:	f018 bd34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 45 :
			strcpy(p->name,"THE BIRTH OF TRAGEDY");
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ae6:	4a9c      	ldr	r2, [pc, #624]	; (8003d58 <problem_fetch+0x2670>)
 8003ae8:	461d      	mov	r5, r3
 8003aea:	4614      	mov	r4, r2
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	6028      	str	r0, [r5, #0]
 8003af0:	6069      	str	r1, [r5, #4]
 8003af2:	60aa      	str	r2, [r5, #8]
 8003af4:	60eb      	str	r3, [r5, #12]
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	6128      	str	r0, [r5, #16]
 8003afa:	7923      	ldrb	r3, [r4, #4]
 8003afc:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b04:	4a95      	ldr	r2, [pc, #596]	; (8003d5c <problem_fetch+0x2674>)
 8003b06:	8811      	ldrh	r1, [r2, #0]
 8003b08:	7892      	ldrb	r2, [r2, #2]
 8003b0a:	8019      	strh	r1, [r3, #0]
 8003b0c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2207      	movs	r2, #7
 8003b12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,A");
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	33a4      	adds	r3, #164	; 0xa4
 8003b18:	4a91      	ldr	r2, [pc, #580]	; (8003d60 <problem_fetch+0x2678>)
 8003b1a:	461c      	mov	r4, r3
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b20:	6020      	str	r0, [r4, #0]
 8003b22:	6061      	str	r1, [r4, #4]
 8003b24:	60a2      	str	r2, [r4, #8]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,18");
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4a8d      	ldr	r2, [pc, #564]	; (8003d64 <problem_fetch+0x267c>)
 8003b30:	461d      	mov	r5, r3
 8003b32:	4614      	mov	r4, r2
 8003b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b36:	6028      	str	r0, [r5, #0]
 8003b38:	6069      	str	r1, [r5, #4]
 8003b3a:	60aa      	str	r2, [r5, #8]
 8003b3c:	60eb      	str	r3, [r5, #12]
 8003b3e:	8823      	ldrh	r3, [r4, #0]
 8003b40:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003b48:	4a87      	ldr	r2, [pc, #540]	; (8003d68 <problem_fetch+0x2680>)
 8003b4a:	461c      	mov	r4, r3
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b50:	6020      	str	r0, [r4, #0]
 8003b52:	6061      	str	r1, [r4, #4]
 8003b54:	60a2      	str	r2, [r4, #8]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	81a3      	strh	r3, [r4, #12]
			break;
 8003b5a:	f018 bcf5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 46 :
			strcpy(p->name,"THE WILL TO POWER");
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003b64:	4a81      	ldr	r2, [pc, #516]	; (8003d6c <problem_fetch+0x2684>)
 8003b66:	461d      	mov	r5, r3
 8003b68:	4614      	mov	r4, r2
 8003b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6c:	6028      	str	r0, [r5, #0]
 8003b6e:	6069      	str	r1, [r5, #4]
 8003b70:	60aa      	str	r2, [r5, #8]
 8003b72:	60eb      	str	r3, [r5, #12]
 8003b74:	8823      	ldrh	r3, [r4, #0]
 8003b76:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003b7e:	4a77      	ldr	r2, [pc, #476]	; (8003d5c <problem_fetch+0x2674>)
 8003b80:	8811      	ldrh	r1, [r2, #0]
 8003b82:	7892      	ldrb	r2, [r2, #2]
 8003b84:	8019      	strh	r1, [r3, #0]
 8003b86:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,H,K,G,H,D");
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	33a4      	adds	r3, #164	; 0xa4
 8003b92:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <problem_fetch+0x2688>)
 8003b94:	461c      	mov	r4, r3
 8003b96:	4615      	mov	r5, r2
 8003b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b9a:	6020      	str	r0, [r4, #0]
 8003b9c:	6061      	str	r1, [r4, #4]
 8003b9e:	60a2      	str	r2, [r4, #8]
 8003ba0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,17,16,18");
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	4a73      	ldr	r2, [pc, #460]	; (8003d74 <problem_fetch+0x268c>)
 8003ba8:	461d      	mov	r5, r3
 8003baa:	4614      	mov	r4, r2
 8003bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bae:	6028      	str	r0, [r5, #0]
 8003bb0:	6069      	str	r1, [r5, #4]
 8003bb2:	60aa      	str	r2, [r5, #8]
 8003bb4:	60eb      	str	r3, [r5, #12]
 8003bb6:	6820      	ldr	r0, [r4, #0]
 8003bb8:	6128      	str	r0, [r5, #16]
 8003bba:	7923      	ldrb	r3, [r4, #4]
 8003bbc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003bc4:	4a6c      	ldr	r2, [pc, #432]	; (8003d78 <problem_fetch+0x2690>)
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	4615      	mov	r5, r2
 8003bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bcc:	6020      	str	r0, [r4, #0]
 8003bce:	6061      	str	r1, [r4, #4]
 8003bd0:	60a2      	str	r2, [r4, #8]
 8003bd2:	60e3      	str	r3, [r4, #12]
			break;
 8003bd4:	f018 bcb8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 47 :
			strcpy(p->name,"BEYOND GOOD AND EVIL");
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003bde:	4a67      	ldr	r2, [pc, #412]	; (8003d7c <problem_fetch+0x2694>)
 8003be0:	461d      	mov	r5, r3
 8003be2:	4614      	mov	r4, r2
 8003be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be6:	6028      	str	r0, [r5, #0]
 8003be8:	6069      	str	r1, [r5, #4]
 8003bea:	60aa      	str	r2, [r5, #8]
 8003bec:	60eb      	str	r3, [r5, #12]
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	6128      	str	r0, [r5, #16]
 8003bf2:	7923      	ldrb	r3, [r4, #4]
 8003bf4:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <problem_fetch+0x2674>)
 8003bfe:	8811      	ldrh	r1, [r2, #0]
 8003c00:	7892      	ldrb	r2, [r2, #2]
 8003c02:	8019      	strh	r1, [r3, #0]
 8003c04:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,B,G,E,I");
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	33a4      	adds	r3, #164	; 0xa4
 8003c10:	4a5b      	ldr	r2, [pc, #364]	; (8003d80 <problem_fetch+0x2698>)
 8003c12:	461c      	mov	r4, r3
 8003c14:	4615      	mov	r5, r2
 8003c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c18:	6020      	str	r0, [r4, #0]
 8003c1a:	6061      	str	r1, [r4, #4]
 8003c1c:	60a2      	str	r2, [r4, #8]
 8003c1e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,6,12,15,17,16,18");
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4a57      	ldr	r2, [pc, #348]	; (8003d84 <problem_fetch+0x269c>)
 8003c26:	461d      	mov	r5, r3
 8003c28:	4614      	mov	r4, r2
 8003c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c2c:	6028      	str	r0, [r5, #0]
 8003c2e:	6069      	str	r1, [r5, #4]
 8003c30:	60aa      	str	r2, [r5, #8]
 8003c32:	60eb      	str	r3, [r5, #12]
 8003c34:	6820      	ldr	r0, [r4, #0]
 8003c36:	6128      	str	r0, [r5, #16]
 8003c38:	7923      	ldrb	r3, [r4, #4]
 8003c3a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,s,d,d,d,d,e");
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003c42:	4a51      	ldr	r2, [pc, #324]	; (8003d88 <problem_fetch+0x26a0>)
 8003c44:	461c      	mov	r4, r3
 8003c46:	4615      	mov	r5, r2
 8003c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c4a:	6020      	str	r0, [r4, #0]
 8003c4c:	6061      	str	r1, [r4, #4]
 8003c4e:	60a2      	str	r2, [r4, #8]
 8003c50:	60e3      	str	r3, [r4, #12]
			break;
 8003c52:	f018 bc79 	b.w	801c548 <problem_fetch+0x1ae60>
		case 48 :
			strcpy(p->name,"BLACK CHAMBER ORDER");
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003c5c:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <problem_fetch+0x26a4>)
 8003c5e:	461d      	mov	r5, r3
 8003c60:	4614      	mov	r4, r2
 8003c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c64:	6028      	str	r0, [r5, #0]
 8003c66:	6069      	str	r1, [r5, #4]
 8003c68:	60aa      	str	r2, [r5, #8]
 8003c6a:	60eb      	str	r3, [r5, #12]
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c76:	4a46      	ldr	r2, [pc, #280]	; (8003d90 <problem_fetch+0x26a8>)
 8003c78:	8811      	ldrh	r1, [r2, #0]
 8003c7a:	7892      	ldrb	r2, [r2, #2]
 8003c7c:	8019      	strh	r1, [r3, #0]
 8003c7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2207      	movs	r2, #7
 8003c84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,B,D,A");
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	33a4      	adds	r3, #164	; 0xa4
 8003c8a:	4a42      	ldr	r2, [pc, #264]	; (8003d94 <problem_fetch+0x26ac>)
 8003c8c:	461c      	mov	r4, r3
 8003c8e:	4613      	mov	r3, r2
 8003c90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003c92:	6020      	str	r0, [r4, #0]
 8003c94:	6061      	str	r1, [r4, #4]
 8003c96:	60a2      	str	r2, [r4, #8]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,15,18");
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4a3d      	ldr	r2, [pc, #244]	; (8003d98 <problem_fetch+0x26b0>)
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca8:	6028      	str	r0, [r5, #0]
 8003caa:	6069      	str	r1, [r5, #4]
 8003cac:	60aa      	str	r2, [r5, #8]
 8003cae:	60eb      	str	r3, [r5, #12]
 8003cb0:	7823      	ldrb	r3, [r4, #0]
 8003cb2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003cba:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <problem_fetch+0x26b4>)
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cc2:	6020      	str	r0, [r4, #0]
 8003cc4:	6061      	str	r1, [r4, #4]
 8003cc6:	60a2      	str	r2, [r4, #8]
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	81a3      	strh	r3, [r4, #12]
			break;
 8003ccc:	f018 bc3c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 49 :
			strcpy(p->name,"CALCULO");
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003cd6:	4932      	ldr	r1, [pc, #200]	; (8003da0 <problem_fetch+0x26b8>)
 8003cd8:	461a      	mov	r2, r3
 8003cda:	460b      	mov	r3, r1
 8003cdc:	cb03      	ldmia	r3!, {r0, r1}
 8003cde:	6010      	str	r0, [r2, #0]
 8003ce0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	; (8003d5c <problem_fetch+0x2674>)
 8003cea:	8811      	ldrh	r1, [r2, #0]
 8003cec:	7892      	ldrb	r2, [r2, #2]
 8003cee:	8019      	strh	r1, [r3, #0]
 8003cf0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,F,G,I");
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	33a4      	adds	r3, #164	; 0xa4
 8003cfc:	4a29      	ldr	r2, [pc, #164]	; (8003da4 <problem_fetch+0x26bc>)
 8003cfe:	461c      	mov	r4, r3
 8003d00:	4613      	mov	r3, r2
 8003d02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d04:	6020      	str	r0, [r4, #0]
 8003d06:	6061      	str	r1, [r4, #4]
 8003d08:	60a2      	str	r2, [r4, #8]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,13,15,18");
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4a25      	ldr	r2, [pc, #148]	; (8003da8 <problem_fetch+0x26c0>)
 8003d14:	461d      	mov	r5, r3
 8003d16:	4614      	mov	r4, r2
 8003d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d1a:	6028      	str	r0, [r5, #0]
 8003d1c:	6069      	str	r1, [r5, #4]
 8003d1e:	60aa      	str	r2, [r5, #8]
 8003d20:	60eb      	str	r3, [r5, #12]
 8003d22:	8823      	ldrh	r3, [r4, #0]
 8003d24:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <problem_fetch+0x2680>)
 8003d2e:	461c      	mov	r4, r3
 8003d30:	4613      	mov	r3, r2
 8003d32:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003d34:	6020      	str	r0, [r4, #0]
 8003d36:	6061      	str	r1, [r4, #4]
 8003d38:	60a2      	str	r2, [r4, #8]
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	81a3      	strh	r3, [r4, #12]
			break;
 8003d3e:	f018 bc03 	b.w	801c548 <problem_fetch+0x1ae60>
 8003d42:	bf00      	nop
 8003d44:	080242a4 	.word	0x080242a4
 8003d48:	080239f4 	.word	0x080239f4
 8003d4c:	080242b0 	.word	0x080242b0
 8003d50:	080242bc 	.word	0x080242bc
 8003d54:	08023e28 	.word	0x08023e28
 8003d58:	080242cc 	.word	0x080242cc
 8003d5c:	08023a28 	.word	0x08023a28
 8003d60:	080242e4 	.word	0x080242e4
 8003d64:	080242f4 	.word	0x080242f4
 8003d68:	08023ae4 	.word	0x08023ae4
 8003d6c:	08024308 	.word	0x08024308
 8003d70:	0802431c 	.word	0x0802431c
 8003d74:	0802432c 	.word	0x0802432c
 8003d78:	08023a80 	.word	0x08023a80
 8003d7c:	08024344 	.word	0x08024344
 8003d80:	0802435c 	.word	0x0802435c
 8003d84:	0802436c 	.word	0x0802436c
 8003d88:	08024384 	.word	0x08024384
 8003d8c:	08024394 	.word	0x08024394
 8003d90:	0802391c 	.word	0x0802391c
 8003d94:	080243a8 	.word	0x080243a8
 8003d98:	080243b8 	.word	0x080243b8
 8003d9c:	080239d4 	.word	0x080239d4
 8003da0:	080243cc 	.word	0x080243cc
 8003da4:	080243d4 	.word	0x080243d4
 8003da8:	080243e4 	.word	0x080243e4
		case 50 :
			strcpy(p->name,"LONG BLACK");
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003db2:	49bd      	ldr	r1, [pc, #756]	; (80040a8 <problem_fetch+0x29c0>)
 8003db4:	461a      	mov	r2, r3
 8003db6:	460b      	mov	r3, r1
 8003db8:	cb03      	ldmia	r3!, {r0, r1}
 8003dba:	6010      	str	r0, [r2, #0]
 8003dbc:	6051      	str	r1, [r2, #4]
 8003dbe:	8819      	ldrh	r1, [r3, #0]
 8003dc0:	789b      	ldrb	r3, [r3, #2]
 8003dc2:	8111      	strh	r1, [r2, #8]
 8003dc4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003dcc:	4ab7      	ldr	r2, [pc, #732]	; (80040ac <problem_fetch+0x29c4>)
 8003dce:	6810      	ldr	r0, [r2, #0]
 8003dd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2206      	movs	r2, #6
 8003dd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,E,E,D");
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	33a4      	adds	r3, #164	; 0xa4
 8003ddc:	4ab4      	ldr	r2, [pc, #720]	; (80040b0 <problem_fetch+0x29c8>)
 8003dde:	461c      	mov	r4, r3
 8003de0:	4613      	mov	r3, r2
 8003de2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003de4:	6020      	str	r0, [r4, #0]
 8003de6:	6061      	str	r1, [r4, #4]
 8003de8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,14,16,18");
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4ab1      	ldr	r2, [pc, #708]	; (80040b4 <problem_fetch+0x29cc>)
 8003df0:	461c      	mov	r4, r3
 8003df2:	4615      	mov	r5, r2
 8003df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003df6:	6020      	str	r0, [r4, #0]
 8003df8:	6061      	str	r1, [r4, #4]
 8003dfa:	60a2      	str	r2, [r4, #8]
 8003dfc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003e04:	4aac      	ldr	r2, [pc, #688]	; (80040b8 <problem_fetch+0x29d0>)
 8003e06:	461c      	mov	r4, r3
 8003e08:	4613      	mov	r3, r2
 8003e0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e0c:	6020      	str	r0, [r4, #0]
 8003e0e:	6061      	str	r1, [r4, #4]
 8003e10:	60a2      	str	r2, [r4, #8]
			break;
 8003e12:	f018 bb99 	b.w	801c548 <problem_fetch+0x1ae60>
		case 51 :
			strcpy(p->name,"BLACK JACK");
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e1c:	49a7      	ldr	r1, [pc, #668]	; (80040bc <problem_fetch+0x29d4>)
 8003e1e:	461a      	mov	r2, r3
 8003e20:	460b      	mov	r3, r1
 8003e22:	cb03      	ldmia	r3!, {r0, r1}
 8003e24:	6010      	str	r0, [r2, #0]
 8003e26:	6051      	str	r1, [r2, #4]
 8003e28:	8819      	ldrh	r1, [r3, #0]
 8003e2a:	789b      	ldrb	r3, [r3, #2]
 8003e2c:	8111      	strh	r1, [r2, #8]
 8003e2e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003e36:	4aa2      	ldr	r2, [pc, #648]	; (80040c0 <problem_fetch+0x29d8>)
 8003e38:	8811      	ldrh	r1, [r2, #0]
 8003e3a:	7892      	ldrb	r2, [r2, #2]
 8003e3c:	8019      	strh	r1, [r3, #0]
 8003e3e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2206      	movs	r2, #6
 8003e44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,D");
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	33a4      	adds	r3, #164	; 0xa4
 8003e4a:	4a9e      	ldr	r2, [pc, #632]	; (80040c4 <problem_fetch+0x29dc>)
 8003e4c:	461c      	mov	r4, r3
 8003e4e:	4613      	mov	r3, r2
 8003e50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e52:	6020      	str	r0, [r4, #0]
 8003e54:	6061      	str	r1, [r4, #4]
 8003e56:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,13,14,18");
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4a9a      	ldr	r2, [pc, #616]	; (80040c8 <problem_fetch+0x29e0>)
 8003e5e:	461c      	mov	r4, r3
 8003e60:	4615      	mov	r5, r2
 8003e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e64:	6020      	str	r0, [r4, #0]
 8003e66:	6061      	str	r1, [r4, #4]
 8003e68:	60a2      	str	r2, [r4, #8]
 8003e6a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003e72:	4a96      	ldr	r2, [pc, #600]	; (80040cc <problem_fetch+0x29e4>)
 8003e74:	461c      	mov	r4, r3
 8003e76:	4613      	mov	r3, r2
 8003e78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e7a:	6020      	str	r0, [r4, #0]
 8003e7c:	6061      	str	r1, [r4, #4]
 8003e7e:	60a2      	str	r2, [r4, #8]
			break;
 8003e80:	f018 bb62 	b.w	801c548 <problem_fetch+0x1ae60>
		case 52 :
			strcpy(p->name,"DITA DI BURRO");
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003e8a:	4a91      	ldr	r2, [pc, #580]	; (80040d0 <problem_fetch+0x29e8>)
 8003e8c:	461c      	mov	r4, r3
 8003e8e:	4613      	mov	r3, r2
 8003e90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e92:	6020      	str	r0, [r4, #0]
 8003e94:	6061      	str	r1, [r4, #4]
 8003e96:	60a2      	str	r2, [r4, #8]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003ea2:	4a87      	ldr	r2, [pc, #540]	; (80040c0 <problem_fetch+0x29d8>)
 8003ea4:	8811      	ldrh	r1, [r2, #0]
 8003ea6:	7892      	ldrb	r2, [r2, #2]
 8003ea8:	8019      	strh	r1, [r3, #0]
 8003eaa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2204      	movs	r2, #4
 8003eb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,C,D");
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	33a4      	adds	r3, #164	; 0xa4
 8003eb6:	4987      	ldr	r1, [pc, #540]	; (80040d4 <problem_fetch+0x29ec>)
 8003eb8:	461a      	mov	r2, r3
 8003eba:	460b      	mov	r3, r1
 8003ebc:	cb03      	ldmia	r3!, {r0, r1}
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"9,5,13,18");
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4984      	ldr	r1, [pc, #528]	; (80040d8 <problem_fetch+0x29f0>)
 8003ec8:	461a      	mov	r2, r3
 8003eca:	460b      	mov	r3, r1
 8003ecc:	cb03      	ldmia	r3!, {r0, r1}
 8003ece:	6010      	str	r0, [r2, #0]
 8003ed0:	6051      	str	r1, [r2, #4]
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"d,s,d,e");
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003edc:	497f      	ldr	r1, [pc, #508]	; (80040dc <problem_fetch+0x29f4>)
 8003ede:	461a      	mov	r2, r3
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	cb03      	ldmia	r3!, {r0, r1}
 8003ee4:	6010      	str	r0, [r2, #0]
 8003ee6:	6051      	str	r1, [r2, #4]
			break;
 8003ee8:	f018 bb2e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 53 :
			strcpy(p->name,"ELBOW GREASE VAR");
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003ef2:	4a7b      	ldr	r2, [pc, #492]	; (80040e0 <problem_fetch+0x29f8>)
 8003ef4:	461d      	mov	r5, r3
 8003ef6:	4614      	mov	r4, r2
 8003ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efa:	6028      	str	r0, [r5, #0]
 8003efc:	6069      	str	r1, [r5, #4]
 8003efe:	60aa      	str	r2, [r5, #8]
 8003f00:	60eb      	str	r3, [r5, #12]
 8003f02:	7823      	ldrb	r3, [r4, #0]
 8003f04:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f0c:	4a75      	ldr	r2, [pc, #468]	; (80040e4 <problem_fetch+0x29fc>)
 8003f0e:	6810      	ldr	r0, [r2, #0]
 8003f10:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2206      	movs	r2, #6
 8003f16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,A");
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	33a4      	adds	r3, #164	; 0xa4
 8003f1c:	4a72      	ldr	r2, [pc, #456]	; (80040e8 <problem_fetch+0x2a00>)
 8003f1e:	461c      	mov	r4, r3
 8003f20:	4613      	mov	r3, r2
 8003f22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f24:	6020      	str	r0, [r4, #0]
 8003f26:	6061      	str	r1, [r4, #4]
 8003f28:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,11,15,18");
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4a6f      	ldr	r2, [pc, #444]	; (80040ec <problem_fetch+0x2a04>)
 8003f30:	461c      	mov	r4, r3
 8003f32:	4613      	mov	r3, r2
 8003f34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f36:	6020      	str	r0, [r4, #0]
 8003f38:	6061      	str	r1, [r4, #4]
 8003f3a:	60a2      	str	r2, [r4, #8]
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	789b      	ldrb	r3, [r3, #2]
 8003f40:	81a2      	strh	r2, [r4, #12]
 8003f42:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003f4a:	4a60      	ldr	r2, [pc, #384]	; (80040cc <problem_fetch+0x29e4>)
 8003f4c:	461c      	mov	r4, r3
 8003f4e:	4613      	mov	r3, r2
 8003f50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	6061      	str	r1, [r4, #4]
 8003f56:	60a2      	str	r2, [r4, #8]
			break;
 8003f58:	f018 baf6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 54 :
			strcpy(p->name,"ELBOW GREASE");
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003f62:	4a63      	ldr	r2, [pc, #396]	; (80040f0 <problem_fetch+0x2a08>)
 8003f64:	461c      	mov	r4, r3
 8003f66:	4613      	mov	r3, r2
 8003f68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	6061      	str	r1, [r4, #4]
 8003f6e:	60a2      	str	r2, [r4, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	; (80040f4 <problem_fetch+0x2a0c>)
 8003f7c:	6810      	ldr	r0, [r2, #0]
 8003f7e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2207      	movs	r2, #7
 8003f84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D,C,A");
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	33a4      	adds	r3, #164	; 0xa4
 8003f8a:	4a5b      	ldr	r2, [pc, #364]	; (80040f8 <problem_fetch+0x2a10>)
 8003f8c:	461c      	mov	r4, r3
 8003f8e:	4613      	mov	r3, r2
 8003f90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f92:	6020      	str	r0, [r4, #0]
 8003f94:	6061      	str	r1, [r4, #4]
 8003f96:	60a2      	str	r2, [r4, #8]
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,15,5,18");
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4a56      	ldr	r2, [pc, #344]	; (80040fc <problem_fetch+0x2a14>)
 8003fa2:	461d      	mov	r5, r3
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fa8:	6028      	str	r0, [r5, #0]
 8003faa:	6069      	str	r1, [r5, #4]
 8003fac:	60aa      	str	r2, [r5, #8]
 8003fae:	60eb      	str	r3, [r5, #12]
 8003fb0:	7823      	ldrb	r3, [r4, #0]
 8003fb2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8003fba:	4a51      	ldr	r2, [pc, #324]	; (8004100 <problem_fetch+0x2a18>)
 8003fbc:	461c      	mov	r4, r3
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fc2:	6020      	str	r0, [r4, #0]
 8003fc4:	6061      	str	r1, [r4, #4]
 8003fc6:	60a2      	str	r2, [r4, #8]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	81a3      	strh	r3, [r4, #12]
			break;
 8003fcc:	f018 babc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 55 :
			strcpy(p->name,"MY FLOW");
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8003fd6:	494b      	ldr	r1, [pc, #300]	; (8004104 <problem_fetch+0x2a1c>)
 8003fd8:	461a      	mov	r2, r3
 8003fda:	460b      	mov	r3, r1
 8003fdc:	cb03      	ldmia	r3!, {r0, r1}
 8003fde:	6010      	str	r0, [r2, #0]
 8003fe0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003fe8:	4a47      	ldr	r2, [pc, #284]	; (8004108 <problem_fetch+0x2a20>)
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	33a4      	adds	r3, #164	; 0xa4
 8003ff8:	4a44      	ldr	r2, [pc, #272]	; (800410c <problem_fetch+0x2a24>)
 8003ffa:	461c      	mov	r4, r3
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004000:	6020      	str	r0, [r4, #0]
 8004002:	6061      	str	r1, [r4, #4]
 8004004:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3304      	adds	r3, #4
 800400a:	4a41      	ldr	r2, [pc, #260]	; (8004110 <problem_fetch+0x2a28>)
 800400c:	461c      	mov	r4, r3
 800400e:	4613      	mov	r3, r2
 8004010:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004012:	6020      	str	r0, [r4, #0]
 8004014:	6061      	str	r1, [r4, #4]
 8004016:	60a2      	str	r2, [r4, #8]
 8004018:	881a      	ldrh	r2, [r3, #0]
 800401a:	789b      	ldrb	r3, [r3, #2]
 800401c:	81a2      	strh	r2, [r4, #12]
 800401e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <problem_fetch+0x29e4>)
 8004028:	461c      	mov	r4, r3
 800402a:	4613      	mov	r3, r2
 800402c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800402e:	6020      	str	r0, [r4, #0]
 8004030:	6061      	str	r1, [r4, #4]
 8004032:	60a2      	str	r2, [r4, #8]
			break;
 8004034:	f018 ba88 	b.w	801c548 <problem_fetch+0x1ae60>
		case 56 :
			strcpy(p->name,"BLACK ARE GOOD");
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800403e:	4a35      	ldr	r2, [pc, #212]	; (8004114 <problem_fetch+0x2a2c>)
 8004040:	461c      	mov	r4, r3
 8004042:	4613      	mov	r3, r2
 8004044:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	6061      	str	r1, [r4, #4]
 800404a:	60a2      	str	r2, [r4, #8]
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	789b      	ldrb	r3, [r3, #2]
 8004050:	81a2      	strh	r2, [r4, #12]
 8004052:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <problem_fetch+0x2a30>)
 800405c:	8811      	ldrh	r1, [r2, #0]
 800405e:	7892      	ldrb	r2, [r2, #2]
 8004060:	8019      	strh	r1, [r3, #0]
 8004062:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2206      	movs	r2, #6
 8004068:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,I,J,G,I");
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	33a4      	adds	r3, #164	; 0xa4
 800406e:	4a2b      	ldr	r2, [pc, #172]	; (800411c <problem_fetch+0x2a34>)
 8004070:	461c      	mov	r4, r3
 8004072:	4613      	mov	r3, r2
 8004074:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004076:	6020      	str	r0, [r4, #0]
 8004078:	6061      	str	r1, [r4, #4]
 800407a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,12,15,18");
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3304      	adds	r3, #4
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <problem_fetch+0x2a38>)
 8004082:	461c      	mov	r4, r3
 8004084:	4615      	mov	r5, r2
 8004086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004088:	6020      	str	r0, [r4, #0]
 800408a:	6061      	str	r1, [r4, #4]
 800408c:	60a2      	str	r2, [r4, #8]
 800408e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004096:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <problem_fetch+0x29e4>)
 8004098:	461c      	mov	r4, r3
 800409a:	4613      	mov	r3, r2
 800409c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800409e:	6020      	str	r0, [r4, #0]
 80040a0:	6061      	str	r1, [r4, #4]
 80040a2:	60a2      	str	r2, [r4, #8]
			break;
 80040a4:	f018 ba50 	b.w	801c548 <problem_fetch+0x1ae60>
 80040a8:	080243f8 	.word	0x080243f8
 80040ac:	0802395c 	.word	0x0802395c
 80040b0:	08024404 	.word	0x08024404
 80040b4:	08024410 	.word	0x08024410
 80040b8:	0802393c 	.word	0x0802393c
 80040bc:	08024420 	.word	0x08024420
 80040c0:	0802391c 	.word	0x0802391c
 80040c4:	0802442c 	.word	0x0802442c
 80040c8:	08024438 	.word	0x08024438
 80040cc:	08023cf8 	.word	0x08023cf8
 80040d0:	08024448 	.word	0x08024448
 80040d4:	08024458 	.word	0x08024458
 80040d8:	08024460 	.word	0x08024460
 80040dc:	0802446c 	.word	0x0802446c
 80040e0:	08024474 	.word	0x08024474
 80040e4:	08023f68 	.word	0x08023f68
 80040e8:	08024488 	.word	0x08024488
 80040ec:	08024494 	.word	0x08024494
 80040f0:	080244a4 	.word	0x080244a4
 80040f4:	08023a98 	.word	0x08023a98
 80040f8:	080244b4 	.word	0x080244b4
 80040fc:	080244c4 	.word	0x080244c4
 8004100:	08023ae4 	.word	0x08023ae4
 8004104:	080244d8 	.word	0x080244d8
 8004108:	08023afc 	.word	0x08023afc
 800410c:	080244e0 	.word	0x080244e0
 8004110:	08023e84 	.word	0x08023e84
 8004114:	080244ec 	.word	0x080244ec
 8004118:	08023a28 	.word	0x08023a28
 800411c:	080244fc 	.word	0x080244fc
 8004120:	08024508 	.word	0x08024508
		case 57 :
			strcpy(p->name,"THE DARK ARTS DIRECT");
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800412a:	4aad      	ldr	r2, [pc, #692]	; (80043e0 <problem_fetch+0x2cf8>)
 800412c:	461d      	mov	r5, r3
 800412e:	4614      	mov	r4, r2
 8004130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004132:	6028      	str	r0, [r5, #0]
 8004134:	6069      	str	r1, [r5, #4]
 8004136:	60aa      	str	r2, [r5, #8]
 8004138:	60eb      	str	r3, [r5, #12]
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	6128      	str	r0, [r5, #16]
 800413e:	7923      	ldrb	r3, [r4, #4]
 8004140:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7C+");
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004148:	4aa6      	ldr	r2, [pc, #664]	; (80043e4 <problem_fetch+0x2cfc>)
 800414a:	6810      	ldr	r0, [r2, #0]
 800414c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2206      	movs	r2, #6
 8004152:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,G,I");
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	33a4      	adds	r3, #164	; 0xa4
 8004158:	4aa3      	ldr	r2, [pc, #652]	; (80043e8 <problem_fetch+0x2d00>)
 800415a:	461c      	mov	r4, r3
 800415c:	4613      	mov	r3, r2
 800415e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004160:	6020      	str	r0, [r4, #0]
 8004162:	6061      	str	r1, [r4, #4]
 8004164:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,13,17,18");
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3304      	adds	r3, #4
 800416a:	4aa0      	ldr	r2, [pc, #640]	; (80043ec <problem_fetch+0x2d04>)
 800416c:	461c      	mov	r4, r3
 800416e:	4613      	mov	r3, r2
 8004170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004172:	6020      	str	r0, [r4, #0]
 8004174:	6061      	str	r1, [r4, #4]
 8004176:	60a2      	str	r2, [r4, #8]
 8004178:	881a      	ldrh	r2, [r3, #0]
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	81a2      	strh	r2, [r4, #12]
 800417e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004186:	4a9a      	ldr	r2, [pc, #616]	; (80043f0 <problem_fetch+0x2d08>)
 8004188:	461c      	mov	r4, r3
 800418a:	4613      	mov	r3, r2
 800418c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800418e:	6020      	str	r0, [r4, #0]
 8004190:	6061      	str	r1, [r4, #4]
 8004192:	60a2      	str	r2, [r4, #8]
			break;
 8004194:	f018 b9d8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 58 :
			strcpy(p->name,"THE MOST HIGH");
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800419e:	4a95      	ldr	r2, [pc, #596]	; (80043f4 <problem_fetch+0x2d0c>)
 80041a0:	461c      	mov	r4, r3
 80041a2:	4613      	mov	r3, r2
 80041a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041a6:	6020      	str	r0, [r4, #0]
 80041a8:	6061      	str	r1, [r4, #4]
 80041aa:	60a2      	str	r2, [r4, #8]
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80041b6:	4a90      	ldr	r2, [pc, #576]	; (80043f8 <problem_fetch+0x2d10>)
 80041b8:	6810      	ldr	r0, [r2, #0]
 80041ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2207      	movs	r2, #7
 80041c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,G,E,I");
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	33a4      	adds	r3, #164	; 0xa4
 80041c6:	4a8d      	ldr	r2, [pc, #564]	; (80043fc <problem_fetch+0x2d14>)
 80041c8:	461c      	mov	r4, r3
 80041ca:	4613      	mov	r3, r2
 80041cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041ce:	6020      	str	r0, [r4, #0]
 80041d0:	6061      	str	r1, [r4, #4]
 80041d2:	60a2      	str	r2, [r4, #8]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3304      	adds	r3, #4
 80041dc:	4a88      	ldr	r2, [pc, #544]	; (8004400 <problem_fetch+0x2d18>)
 80041de:	461d      	mov	r5, r3
 80041e0:	4614      	mov	r4, r2
 80041e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041e4:	6028      	str	r0, [r5, #0]
 80041e6:	6069      	str	r1, [r5, #4]
 80041e8:	60aa      	str	r2, [r5, #8]
 80041ea:	60eb      	str	r3, [r5, #12]
 80041ec:	8823      	ldrh	r3, [r4, #0]
 80041ee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80041f6:	4a83      	ldr	r2, [pc, #524]	; (8004404 <problem_fetch+0x2d1c>)
 80041f8:	461c      	mov	r4, r3
 80041fa:	4613      	mov	r3, r2
 80041fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041fe:	6020      	str	r0, [r4, #0]
 8004200:	6061      	str	r1, [r4, #4]
 8004202:	60a2      	str	r2, [r4, #8]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	81a3      	strh	r3, [r4, #12]
			break;
 8004208:	f018 b99e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 59 :
			strcpy(p->name,"MAN IN BLACK");
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004212:	4a7d      	ldr	r2, [pc, #500]	; (8004408 <problem_fetch+0x2d20>)
 8004214:	461c      	mov	r4, r3
 8004216:	4613      	mov	r3, r2
 8004218:	cb07      	ldmia	r3!, {r0, r1, r2}
 800421a:	6020      	str	r0, [r4, #0]
 800421c:	6061      	str	r1, [r4, #4]
 800421e:	60a2      	str	r2, [r4, #8]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800422a:	4a78      	ldr	r2, [pc, #480]	; (800440c <problem_fetch+0x2d24>)
 800422c:	6810      	ldr	r0, [r2, #0]
 800422e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2209      	movs	r2, #9
 8004234:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,I,I,K,I,G");
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	33a4      	adds	r3, #164	; 0xa4
 800423a:	4a75      	ldr	r2, [pc, #468]	; (8004410 <problem_fetch+0x2d28>)
 800423c:	461d      	mov	r5, r3
 800423e:	4614      	mov	r4, r2
 8004240:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004242:	6028      	str	r0, [r5, #0]
 8004244:	6069      	str	r1, [r5, #4]
 8004246:	60aa      	str	r2, [r5, #8]
 8004248:	60eb      	str	r3, [r5, #12]
 800424a:	8823      	ldrh	r3, [r4, #0]
 800424c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,12,14,15,16,18,4");
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	4a70      	ldr	r2, [pc, #448]	; (8004414 <problem_fetch+0x2d2c>)
 8004254:	461c      	mov	r4, r3
 8004256:	4615      	mov	r5, r2
 8004258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800425a:	6020      	str	r0, [r4, #0]
 800425c:	6061      	str	r1, [r4, #4]
 800425e:	60a2      	str	r2, [r4, #8]
 8004260:	60e3      	str	r3, [r4, #12]
 8004262:	6828      	ldr	r0, [r5, #0]
 8004264:	6120      	str	r0, [r4, #16]
 8004266:	88ab      	ldrh	r3, [r5, #4]
 8004268:	79aa      	ldrb	r2, [r5, #6]
 800426a:	82a3      	strh	r3, [r4, #20]
 800426c:	4613      	mov	r3, r2
 800426e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004276:	4a68      	ldr	r2, [pc, #416]	; (8004418 <problem_fetch+0x2d30>)
 8004278:	461d      	mov	r5, r3
 800427a:	4614      	mov	r4, r2
 800427c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800427e:	6028      	str	r0, [r5, #0]
 8004280:	6069      	str	r1, [r5, #4]
 8004282:	60aa      	str	r2, [r5, #8]
 8004284:	60eb      	str	r3, [r5, #12]
 8004286:	8823      	ldrh	r3, [r4, #0]
 8004288:	822b      	strh	r3, [r5, #16]
			break;
 800428a:	f018 b95d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 60 :
			strcpy(p->name,"STRIZZANGELES");
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004294:	4a61      	ldr	r2, [pc, #388]	; (800441c <problem_fetch+0x2d34>)
 8004296:	461c      	mov	r4, r3
 8004298:	4613      	mov	r3, r2
 800429a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800429c:	6020      	str	r0, [r4, #0]
 800429e:	6061      	str	r1, [r4, #4]
 80042a0:	60a2      	str	r2, [r4, #8]
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80042ac:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <problem_fetch+0x2d10>)
 80042ae:	6810      	ldr	r0, [r2, #0]
 80042b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,J,E,I");
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	33a4      	adds	r3, #164	; 0xa4
 80042bc:	4a58      	ldr	r2, [pc, #352]	; (8004420 <problem_fetch+0x2d38>)
 80042be:	461c      	mov	r4, r3
 80042c0:	4613      	mov	r3, r2
 80042c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042c4:	6020      	str	r0, [r4, #0]
 80042c6:	6061      	str	r1, [r4, #4]
 80042c8:	60a2      	str	r2, [r4, #8]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,14,7,16,18");
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4a54      	ldr	r2, [pc, #336]	; (8004424 <problem_fetch+0x2d3c>)
 80042d4:	461d      	mov	r5, r3
 80042d6:	4614      	mov	r4, r2
 80042d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042da:	6028      	str	r0, [r5, #0]
 80042dc:	6069      	str	r1, [r5, #4]
 80042de:	60aa      	str	r2, [r5, #8]
 80042e0:	60eb      	str	r3, [r5, #12]
 80042e2:	8823      	ldrh	r3, [r4, #0]
 80042e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80042ec:	4a4e      	ldr	r2, [pc, #312]	; (8004428 <problem_fetch+0x2d40>)
 80042ee:	461c      	mov	r4, r3
 80042f0:	4613      	mov	r3, r2
 80042f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80042f4:	6020      	str	r0, [r4, #0]
 80042f6:	6061      	str	r1, [r4, #4]
 80042f8:	60a2      	str	r2, [r4, #8]
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	81a3      	strh	r3, [r4, #12]
			break;
 80042fe:	f018 b923 	b.w	801c548 <problem_fetch+0x1ae60>
		case 61 :
			strcpy(p->name,"BOARDMEETING 3.0");
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004308:	4a48      	ldr	r2, [pc, #288]	; (800442c <problem_fetch+0x2d44>)
 800430a:	461d      	mov	r5, r3
 800430c:	4614      	mov	r4, r2
 800430e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004310:	6028      	str	r0, [r5, #0]
 8004312:	6069      	str	r1, [r5, #4]
 8004314:	60aa      	str	r2, [r5, #8]
 8004316:	60eb      	str	r3, [r5, #12]
 8004318:	7823      	ldrb	r3, [r4, #0]
 800431a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004322:	4a35      	ldr	r2, [pc, #212]	; (80043f8 <problem_fetch+0x2d10>)
 8004324:	6810      	ldr	r0, [r2, #0]
 8004326:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2206      	movs	r2, #6
 800432c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,G,H,D");
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	33a4      	adds	r3, #164	; 0xa4
 8004332:	4a3f      	ldr	r2, [pc, #252]	; (8004430 <problem_fetch+0x2d48>)
 8004334:	461c      	mov	r4, r3
 8004336:	4613      	mov	r3, r2
 8004338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800433a:	6020      	str	r0, [r4, #0]
 800433c:	6061      	str	r1, [r4, #4]
 800433e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,16,18");
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3304      	adds	r3, #4
 8004344:	4a3b      	ldr	r2, [pc, #236]	; (8004434 <problem_fetch+0x2d4c>)
 8004346:	461c      	mov	r4, r3
 8004348:	4615      	mov	r5, r2
 800434a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800434c:	6020      	str	r0, [r4, #0]
 800434e:	6061      	str	r1, [r4, #4]
 8004350:	60a2      	str	r2, [r4, #8]
 8004352:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800435a:	4a25      	ldr	r2, [pc, #148]	; (80043f0 <problem_fetch+0x2d08>)
 800435c:	461c      	mov	r4, r3
 800435e:	4613      	mov	r3, r2
 8004360:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004362:	6020      	str	r0, [r4, #0]
 8004364:	6061      	str	r1, [r4, #4]
 8004366:	60a2      	str	r2, [r4, #8]
			break;
 8004368:	f018 b8ee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 62 :
			strcpy(p->name,"CANIGAN");
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004372:	4931      	ldr	r1, [pc, #196]	; (8004438 <problem_fetch+0x2d50>)
 8004374:	461a      	mov	r2, r3
 8004376:	460b      	mov	r3, r1
 8004378:	cb03      	ldmia	r3!, {r0, r1}
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004384:	4a2d      	ldr	r2, [pc, #180]	; (800443c <problem_fetch+0x2d54>)
 8004386:	8811      	ldrh	r1, [r2, #0]
 8004388:	7892      	ldrb	r2, [r2, #2]
 800438a:	8019      	strh	r1, [r3, #0]
 800438c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2208      	movs	r2, #8
 8004392:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,G,I,F,K,H,I");
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	33a4      	adds	r3, #164	; 0xa4
 8004398:	4a29      	ldr	r2, [pc, #164]	; (8004440 <problem_fetch+0x2d58>)
 800439a:	461c      	mov	r4, r3
 800439c:	4615      	mov	r5, r2
 800439e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043a0:	6020      	str	r0, [r4, #0]
 80043a2:	6061      	str	r1, [r4, #4]
 80043a4:	60a2      	str	r2, [r4, #8]
 80043a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,10,13,14,16,18");
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <problem_fetch+0x2d5c>)
 80043ae:	461d      	mov	r5, r3
 80043b0:	4614      	mov	r4, r2
 80043b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b4:	6028      	str	r0, [r5, #0]
 80043b6:	6069      	str	r1, [r5, #4]
 80043b8:	60aa      	str	r2, [r5, #8]
 80043ba:	60eb      	str	r3, [r5, #12]
 80043bc:	6820      	ldr	r0, [r4, #0]
 80043be:	6128      	str	r0, [r5, #16]
 80043c0:	7923      	ldrb	r3, [r4, #4]
 80043c2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80043ca:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <problem_fetch+0x2d60>)
 80043cc:	461c      	mov	r4, r3
 80043ce:	4615      	mov	r5, r2
 80043d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043d2:	6020      	str	r0, [r4, #0]
 80043d4:	6061      	str	r1, [r4, #4]
 80043d6:	60a2      	str	r2, [r4, #8]
 80043d8:	60e3      	str	r3, [r4, #12]
			break;
 80043da:	f018 b8b5 	b.w	801c548 <problem_fetch+0x1ae60>
 80043de:	bf00      	nop
 80043e0:	08024518 	.word	0x08024518
 80043e4:	08023f68 	.word	0x08023f68
 80043e8:	08024530 	.word	0x08024530
 80043ec:	0802453c 	.word	0x0802453c
 80043f0:	0802393c 	.word	0x0802393c
 80043f4:	0802454c 	.word	0x0802454c
 80043f8:	080239f4 	.word	0x080239f4
 80043fc:	0802455c 	.word	0x0802455c
 8004400:	0802456c 	.word	0x0802456c
 8004404:	080239d4 	.word	0x080239d4
 8004408:	08024580 	.word	0x08024580
 800440c:	0802395c 	.word	0x0802395c
 8004410:	08024590 	.word	0x08024590
 8004414:	080245a4 	.word	0x080245a4
 8004418:	080240fc 	.word	0x080240fc
 800441c:	080245bc 	.word	0x080245bc
 8004420:	080245cc 	.word	0x080245cc
 8004424:	080245dc 	.word	0x080245dc
 8004428:	08023ae4 	.word	0x08023ae4
 800442c:	080245f0 	.word	0x080245f0
 8004430:	08024604 	.word	0x08024604
 8004434:	08024610 	.word	0x08024610
 8004438:	08024620 	.word	0x08024620
 800443c:	0802391c 	.word	0x0802391c
 8004440:	08024628 	.word	0x08024628
 8004444:	08024638 	.word	0x08024638
 8004448:	08023b6c 	.word	0x08023b6c
		case 63 :
			strcpy(p->name,"KOKURYU");
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004452:	49a6      	ldr	r1, [pc, #664]	; (80046ec <problem_fetch+0x3004>)
 8004454:	461a      	mov	r2, r3
 8004456:	460b      	mov	r3, r1
 8004458:	cb03      	ldmia	r3!, {r0, r1}
 800445a:	6010      	str	r0, [r2, #0]
 800445c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004464:	4aa2      	ldr	r2, [pc, #648]	; (80046f0 <problem_fetch+0x3008>)
 8004466:	6810      	ldr	r0, [r2, #0]
 8004468:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2207      	movs	r2, #7
 800446e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,G,E,I");
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	33a4      	adds	r3, #164	; 0xa4
 8004474:	4a9f      	ldr	r2, [pc, #636]	; (80046f4 <problem_fetch+0x300c>)
 8004476:	461c      	mov	r4, r3
 8004478:	4613      	mov	r3, r2
 800447a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800447c:	6020      	str	r0, [r4, #0]
 800447e:	6061      	str	r1, [r4, #4]
 8004480:	60a2      	str	r2, [r4, #8]
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	4a9b      	ldr	r2, [pc, #620]	; (80046f8 <problem_fetch+0x3010>)
 800448c:	461d      	mov	r5, r3
 800448e:	4614      	mov	r4, r2
 8004490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004492:	6028      	str	r0, [r5, #0]
 8004494:	6069      	str	r1, [r5, #4]
 8004496:	60aa      	str	r2, [r5, #8]
 8004498:	60eb      	str	r3, [r5, #12]
 800449a:	8823      	ldrh	r3, [r4, #0]
 800449c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80044a4:	4a95      	ldr	r2, [pc, #596]	; (80046fc <problem_fetch+0x3014>)
 80044a6:	461c      	mov	r4, r3
 80044a8:	4613      	mov	r3, r2
 80044aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044ac:	6020      	str	r0, [r4, #0]
 80044ae:	6061      	str	r1, [r4, #4]
 80044b0:	60a2      	str	r2, [r4, #8]
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	81a3      	strh	r3, [r4, #12]
			break;
 80044b6:	f018 b847 	b.w	801c548 <problem_fetch+0x1ae60>
		case 64 :
			strcpy(p->name,"V7 ANOS DE AEP");
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80044c0:	4a8f      	ldr	r2, [pc, #572]	; (8004700 <problem_fetch+0x3018>)
 80044c2:	461c      	mov	r4, r3
 80044c4:	4613      	mov	r3, r2
 80044c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044c8:	6020      	str	r0, [r4, #0]
 80044ca:	6061      	str	r1, [r4, #4]
 80044cc:	60a2      	str	r2, [r4, #8]
 80044ce:	881a      	ldrh	r2, [r3, #0]
 80044d0:	789b      	ldrb	r3, [r3, #2]
 80044d2:	81a2      	strh	r2, [r4, #12]
 80044d4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044dc:	4a89      	ldr	r2, [pc, #548]	; (8004704 <problem_fetch+0x301c>)
 80044de:	6810      	ldr	r0, [r2, #0]
 80044e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2206      	movs	r2, #6
 80044e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,J,G,I");
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	33a4      	adds	r3, #164	; 0xa4
 80044ec:	4a86      	ldr	r2, [pc, #536]	; (8004708 <problem_fetch+0x3020>)
 80044ee:	461c      	mov	r4, r3
 80044f0:	4613      	mov	r3, r2
 80044f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80044f4:	6020      	str	r0, [r4, #0]
 80044f6:	6061      	str	r1, [r4, #4]
 80044f8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,12,15,18");
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4a83      	ldr	r2, [pc, #524]	; (800470c <problem_fetch+0x3024>)
 8004500:	461c      	mov	r4, r3
 8004502:	4613      	mov	r3, r2
 8004504:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004506:	6020      	str	r0, [r4, #0]
 8004508:	6061      	str	r1, [r4, #4]
 800450a:	60a2      	str	r2, [r4, #8]
 800450c:	881a      	ldrh	r2, [r3, #0]
 800450e:	789b      	ldrb	r3, [r3, #2]
 8004510:	81a2      	strh	r2, [r4, #12]
 8004512:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800451a:	4a7d      	ldr	r2, [pc, #500]	; (8004710 <problem_fetch+0x3028>)
 800451c:	461c      	mov	r4, r3
 800451e:	4613      	mov	r3, r2
 8004520:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004522:	6020      	str	r0, [r4, #0]
 8004524:	6061      	str	r1, [r4, #4]
 8004526:	60a2      	str	r2, [r4, #8]
			break;
 8004528:	f018 b80e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 65 :
			strcpy(p->name,"YURP");
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004532:	4a78      	ldr	r2, [pc, #480]	; (8004714 <problem_fetch+0x302c>)
 8004534:	6810      	ldr	r0, [r2, #0]
 8004536:	6018      	str	r0, [r3, #0]
 8004538:	7912      	ldrb	r2, [r2, #4]
 800453a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004542:	4a6b      	ldr	r2, [pc, #428]	; (80046f0 <problem_fetch+0x3008>)
 8004544:	6810      	ldr	r0, [r2, #0]
 8004546:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2206      	movs	r2, #6
 800454c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,G,I");
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	33a4      	adds	r3, #164	; 0xa4
 8004552:	4a71      	ldr	r2, [pc, #452]	; (8004718 <problem_fetch+0x3030>)
 8004554:	461c      	mov	r4, r3
 8004556:	4613      	mov	r3, r2
 8004558:	cb07      	ldmia	r3!, {r0, r1, r2}
 800455a:	6020      	str	r0, [r4, #0]
 800455c:	6061      	str	r1, [r4, #4]
 800455e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,12,14,18");
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	4a6d      	ldr	r2, [pc, #436]	; (800471c <problem_fetch+0x3034>)
 8004566:	461c      	mov	r4, r3
 8004568:	4615      	mov	r5, r2
 800456a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800456c:	6020      	str	r0, [r4, #0]
 800456e:	6061      	str	r1, [r4, #4]
 8004570:	60a2      	str	r2, [r4, #8]
 8004572:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800457a:	4a65      	ldr	r2, [pc, #404]	; (8004710 <problem_fetch+0x3028>)
 800457c:	461c      	mov	r4, r3
 800457e:	4613      	mov	r3, r2
 8004580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004582:	6020      	str	r0, [r4, #0]
 8004584:	6061      	str	r1, [r4, #4]
 8004586:	60a2      	str	r2, [r4, #8]
			break;
 8004588:	f017 bfde 	b.w	801c548 <problem_fetch+0x1ae60>
		case 66 :
			strcpy(p->name,"POALET");
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004592:	4a63      	ldr	r2, [pc, #396]	; (8004720 <problem_fetch+0x3038>)
 8004594:	6810      	ldr	r0, [r2, #0]
 8004596:	6018      	str	r0, [r3, #0]
 8004598:	8891      	ldrh	r1, [r2, #4]
 800459a:	7992      	ldrb	r2, [r2, #6]
 800459c:	8099      	strh	r1, [r3, #4]
 800459e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80045a6:	4a5f      	ldr	r2, [pc, #380]	; (8004724 <problem_fetch+0x303c>)
 80045a8:	8811      	ldrh	r1, [r2, #0]
 80045aa:	7892      	ldrb	r2, [r2, #2]
 80045ac:	8019      	strh	r1, [r3, #0]
 80045ae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2207      	movs	r2, #7
 80045b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,I,E,I,J,G");
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	33a4      	adds	r3, #164	; 0xa4
 80045ba:	4a5b      	ldr	r2, [pc, #364]	; (8004728 <problem_fetch+0x3040>)
 80045bc:	461c      	mov	r4, r3
 80045be:	4613      	mov	r3, r2
 80045c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045c2:	6020      	str	r0, [r4, #0]
 80045c4:	6061      	str	r1, [r4, #4]
 80045c6:	60a2      	str	r2, [r4, #8]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,11,14,16,18,7,6");
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <problem_fetch+0x3044>)
 80045d2:	461d      	mov	r5, r3
 80045d4:	4614      	mov	r4, r2
 80045d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d8:	6028      	str	r0, [r5, #0]
 80045da:	6069      	str	r1, [r5, #4]
 80045dc:	60aa      	str	r2, [r5, #8]
 80045de:	60eb      	str	r3, [r5, #12]
 80045e0:	8823      	ldrh	r3, [r4, #0]
 80045e2:	78a2      	ldrb	r2, [r4, #2]
 80045e4:	822b      	strh	r3, [r5, #16]
 80045e6:	4613      	mov	r3, r2
 80045e8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80045f0:	4a4f      	ldr	r2, [pc, #316]	; (8004730 <problem_fetch+0x3048>)
 80045f2:	461c      	mov	r4, r3
 80045f4:	4613      	mov	r3, r2
 80045f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80045f8:	6020      	str	r0, [r4, #0]
 80045fa:	6061      	str	r1, [r4, #4]
 80045fc:	60a2      	str	r2, [r4, #8]
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	81a3      	strh	r3, [r4, #12]
			break;
 8004602:	f017 bfa1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 67 :
			strcpy(p->name,"TORCI SPALLA");
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800460c:	4a49      	ldr	r2, [pc, #292]	; (8004734 <problem_fetch+0x304c>)
 800460e:	461c      	mov	r4, r3
 8004610:	4613      	mov	r3, r2
 8004612:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004614:	6020      	str	r0, [r4, #0]
 8004616:	6061      	str	r1, [r4, #4]
 8004618:	60a2      	str	r2, [r4, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004624:	4a44      	ldr	r2, [pc, #272]	; (8004738 <problem_fetch+0x3050>)
 8004626:	6810      	ldr	r0, [r2, #0]
 8004628:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2208      	movs	r2, #8
 800462e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,A,B,G,I");
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	33a4      	adds	r3, #164	; 0xa4
 8004634:	4a41      	ldr	r2, [pc, #260]	; (800473c <problem_fetch+0x3054>)
 8004636:	461c      	mov	r4, r3
 8004638:	4615      	mov	r5, r2
 800463a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800463c:	6020      	str	r0, [r4, #0]
 800463e:	6061      	str	r1, [r4, #4]
 8004640:	60a2      	str	r2, [r4, #8]
 8004642:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,11,12,14,15,17,18");
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3304      	adds	r3, #4
 8004648:	4a3d      	ldr	r2, [pc, #244]	; (8004740 <problem_fetch+0x3058>)
 800464a:	461c      	mov	r4, r3
 800464c:	4615      	mov	r5, r2
 800464e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004650:	6020      	str	r0, [r4, #0]
 8004652:	6061      	str	r1, [r4, #4]
 8004654:	60a2      	str	r2, [r4, #8]
 8004656:	60e3      	str	r3, [r4, #12]
 8004658:	6828      	ldr	r0, [r5, #0]
 800465a:	6120      	str	r0, [r4, #16]
 800465c:	88ab      	ldrh	r3, [r5, #4]
 800465e:	79aa      	ldrb	r2, [r5, #6]
 8004660:	82a3      	strh	r3, [r4, #20]
 8004662:	4613      	mov	r3, r2
 8004664:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800466c:	4a35      	ldr	r2, [pc, #212]	; (8004744 <problem_fetch+0x305c>)
 800466e:	461c      	mov	r4, r3
 8004670:	4615      	mov	r5, r2
 8004672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004674:	6020      	str	r0, [r4, #0]
 8004676:	6061      	str	r1, [r4, #4]
 8004678:	60a2      	str	r2, [r4, #8]
 800467a:	60e3      	str	r3, [r4, #12]
			break;
 800467c:	f017 bf64 	b.w	801c548 <problem_fetch+0x1ae60>
		case 68 :
			strcpy(p->name,"INVERTIDOSO");
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004686:	4a30      	ldr	r2, [pc, #192]	; (8004748 <problem_fetch+0x3060>)
 8004688:	461c      	mov	r4, r3
 800468a:	4613      	mov	r3, r2
 800468c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800468e:	6020      	str	r0, [r4, #0]
 8004690:	6061      	str	r1, [r4, #4]
 8004692:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800469a:	4a2c      	ldr	r2, [pc, #176]	; (800474c <problem_fetch+0x3064>)
 800469c:	8811      	ldrh	r1, [r2, #0]
 800469e:	7892      	ldrb	r2, [r2, #2]
 80046a0:	8019      	strh	r1, [r3, #0]
 80046a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2205      	movs	r2, #5
 80046a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,F,I");
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	33a4      	adds	r3, #164	; 0xa4
 80046ae:	4928      	ldr	r1, [pc, #160]	; (8004750 <problem_fetch+0x3068>)
 80046b0:	461a      	mov	r2, r3
 80046b2:	460b      	mov	r3, r1
 80046b4:	cb03      	ldmia	r3!, {r0, r1}
 80046b6:	6010      	str	r0, [r2, #0]
 80046b8:	6051      	str	r1, [r2, #4]
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <problem_fetch+0x306c>)
 80046c4:	461c      	mov	r4, r3
 80046c6:	4613      	mov	r3, r2
 80046c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046ca:	6020      	str	r0, [r4, #0]
 80046cc:	6061      	str	r1, [r4, #4]
 80046ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80046d6:	4920      	ldr	r1, [pc, #128]	; (8004758 <problem_fetch+0x3070>)
 80046d8:	461a      	mov	r2, r3
 80046da:	460b      	mov	r3, r1
 80046dc:	cb03      	ldmia	r3!, {r0, r1}
 80046de:	6010      	str	r0, [r2, #0]
 80046e0:	6051      	str	r1, [r2, #4]
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	8113      	strh	r3, [r2, #8]
			break;
 80046e6:	f017 bf2f 	b.w	801c548 <problem_fetch+0x1ae60>
 80046ea:	bf00      	nop
 80046ec:	08024650 	.word	0x08024650
 80046f0:	0802395c 	.word	0x0802395c
 80046f4:	08024658 	.word	0x08024658
 80046f8:	08024668 	.word	0x08024668
 80046fc:	080239d4 	.word	0x080239d4
 8004700:	0802467c 	.word	0x0802467c
 8004704:	08023afc 	.word	0x08023afc
 8004708:	0802468c 	.word	0x0802468c
 800470c:	08024698 	.word	0x08024698
 8004710:	08023cf8 	.word	0x08023cf8
 8004714:	080246a8 	.word	0x080246a8
 8004718:	080246b0 	.word	0x080246b0
 800471c:	080246bc 	.word	0x080246bc
 8004720:	080246cc 	.word	0x080246cc
 8004724:	08023a28 	.word	0x08023a28
 8004728:	080246d4 	.word	0x080246d4
 800472c:	080246e4 	.word	0x080246e4
 8004730:	080246f8 	.word	0x080246f8
 8004734:	08024708 	.word	0x08024708
 8004738:	08023a98 	.word	0x08023a98
 800473c:	08024718 	.word	0x08024718
 8004740:	08024728 	.word	0x08024728
 8004744:	08023b6c 	.word	0x08023b6c
 8004748:	08024740 	.word	0x08024740
 800474c:	08024054 	.word	0x08024054
 8004750:	0802474c 	.word	0x0802474c
 8004754:	08024758 	.word	0x08024758
 8004758:	08023e28 	.word	0x08023e28
		case 69 :
			strcpy(p->name,"BLACK BLOCK X");
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004762:	4ac0      	ldr	r2, [pc, #768]	; (8004a64 <problem_fetch+0x337c>)
 8004764:	461c      	mov	r4, r3
 8004766:	4613      	mov	r3, r2
 8004768:	cb07      	ldmia	r3!, {r0, r1, r2}
 800476a:	6020      	str	r0, [r4, #0]
 800476c:	6061      	str	r1, [r4, #4]
 800476e:	60a2      	str	r2, [r4, #8]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800477a:	4abb      	ldr	r2, [pc, #748]	; (8004a68 <problem_fetch+0x3380>)
 800477c:	8811      	ldrh	r1, [r2, #0]
 800477e:	7892      	ldrb	r2, [r2, #2]
 8004780:	8019      	strh	r1, [r3, #0]
 8004782:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2208      	movs	r2, #8
 8004788:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I,G,I,E");
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	33a4      	adds	r3, #164	; 0xa4
 800478e:	4ab7      	ldr	r2, [pc, #732]	; (8004a6c <problem_fetch+0x3384>)
 8004790:	461c      	mov	r4, r3
 8004792:	4615      	mov	r5, r2
 8004794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004796:	6020      	str	r0, [r4, #0]
 8004798:	6061      	str	r1, [r4, #4]
 800479a:	60a2      	str	r2, [r4, #8]
 800479c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,17,18,6");
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4ab3      	ldr	r2, [pc, #716]	; (8004a70 <problem_fetch+0x3388>)
 80047a4:	461d      	mov	r5, r3
 80047a6:	4614      	mov	r4, r2
 80047a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047aa:	6028      	str	r0, [r5, #0]
 80047ac:	6069      	str	r1, [r5, #4]
 80047ae:	60aa      	str	r2, [r5, #8]
 80047b0:	60eb      	str	r3, [r5, #12]
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	6128      	str	r0, [r5, #16]
 80047b6:	7923      	ldrb	r3, [r4, #4]
 80047b8:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s");
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80047c0:	4aac      	ldr	r2, [pc, #688]	; (8004a74 <problem_fetch+0x338c>)
 80047c2:	461c      	mov	r4, r3
 80047c4:	4615      	mov	r5, r2
 80047c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047c8:	6020      	str	r0, [r4, #0]
 80047ca:	6061      	str	r1, [r4, #4]
 80047cc:	60a2      	str	r2, [r4, #8]
 80047ce:	60e3      	str	r3, [r4, #12]
			break;
 80047d0:	f017 beba 	b.w	801c548 <problem_fetch+0x1ae60>
		case 70 :
			strcpy(p->name,"LADYBUG CLEAN");
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80047da:	4aa7      	ldr	r2, [pc, #668]	; (8004a78 <problem_fetch+0x3390>)
 80047dc:	461c      	mov	r4, r3
 80047de:	4613      	mov	r3, r2
 80047e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80047e2:	6020      	str	r0, [r4, #0]
 80047e4:	6061      	str	r1, [r4, #4]
 80047e6:	60a2      	str	r2, [r4, #8]
 80047e8:	881b      	ldrh	r3, [r3, #0]
 80047ea:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047f2:	4aa2      	ldr	r2, [pc, #648]	; (8004a7c <problem_fetch+0x3394>)
 80047f4:	6810      	ldr	r0, [r2, #0]
 80047f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2206      	movs	r2, #6
 80047fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,F,C,D");
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	33a4      	adds	r3, #164	; 0xa4
 8004802:	4a9f      	ldr	r2, [pc, #636]	; (8004a80 <problem_fetch+0x3398>)
 8004804:	461c      	mov	r4, r3
 8004806:	4613      	mov	r3, r2
 8004808:	cb07      	ldmia	r3!, {r0, r1, r2}
 800480a:	6020      	str	r0, [r4, #0]
 800480c:	6061      	str	r1, [r4, #4]
 800480e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,11,13,18");
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4a9b      	ldr	r2, [pc, #620]	; (8004a84 <problem_fetch+0x339c>)
 8004816:	461c      	mov	r4, r3
 8004818:	4615      	mov	r5, r2
 800481a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800481c:	6020      	str	r0, [r4, #0]
 800481e:	6061      	str	r1, [r4, #4]
 8004820:	60a2      	str	r2, [r4, #8]
 8004822:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800482a:	4a97      	ldr	r2, [pc, #604]	; (8004a88 <problem_fetch+0x33a0>)
 800482c:	461c      	mov	r4, r3
 800482e:	4613      	mov	r3, r2
 8004830:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004832:	6020      	str	r0, [r4, #0]
 8004834:	6061      	str	r1, [r4, #4]
 8004836:	60a2      	str	r2, [r4, #8]
			break;
 8004838:	f017 be86 	b.w	801c548 <problem_fetch+0x1ae60>
		case 71 :
			strcpy(p->name,"POCKET FULL OF DREAMS");
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004842:	4a92      	ldr	r2, [pc, #584]	; (8004a8c <problem_fetch+0x33a4>)
 8004844:	461d      	mov	r5, r3
 8004846:	4614      	mov	r4, r2
 8004848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484a:	6028      	str	r0, [r5, #0]
 800484c:	6069      	str	r1, [r5, #4]
 800484e:	60aa      	str	r2, [r5, #8]
 8004850:	60eb      	str	r3, [r5, #12]
 8004852:	6820      	ldr	r0, [r4, #0]
 8004854:	6128      	str	r0, [r5, #16]
 8004856:	88a3      	ldrh	r3, [r4, #4]
 8004858:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004860:	4a8b      	ldr	r2, [pc, #556]	; (8004a90 <problem_fetch+0x33a8>)
 8004862:	6810      	ldr	r0, [r2, #0]
 8004864:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2208      	movs	r2, #8
 800486a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,B,A,E,D");
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	33a4      	adds	r3, #164	; 0xa4
 8004870:	4a88      	ldr	r2, [pc, #544]	; (8004a94 <problem_fetch+0x33ac>)
 8004872:	461c      	mov	r4, r3
 8004874:	4615      	mov	r5, r2
 8004876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004878:	6020      	str	r0, [r4, #0]
 800487a:	6061      	str	r1, [r4, #4]
 800487c:	60a2      	str	r2, [r4, #8]
 800487e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,12,14,14,18");
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3304      	adds	r3, #4
 8004884:	4a84      	ldr	r2, [pc, #528]	; (8004a98 <problem_fetch+0x33b0>)
 8004886:	461d      	mov	r5, r3
 8004888:	4614      	mov	r4, r2
 800488a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488c:	6028      	str	r0, [r5, #0]
 800488e:	6069      	str	r1, [r5, #4]
 8004890:	60aa      	str	r2, [r5, #8]
 8004892:	60eb      	str	r3, [r5, #12]
 8004894:	6820      	ldr	r0, [r4, #0]
 8004896:	6128      	str	r0, [r5, #16]
 8004898:	7923      	ldrb	r3, [r4, #4]
 800489a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80048a2:	4a7e      	ldr	r2, [pc, #504]	; (8004a9c <problem_fetch+0x33b4>)
 80048a4:	461c      	mov	r4, r3
 80048a6:	4615      	mov	r5, r2
 80048a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048aa:	6020      	str	r0, [r4, #0]
 80048ac:	6061      	str	r1, [r4, #4]
 80048ae:	60a2      	str	r2, [r4, #8]
 80048b0:	60e3      	str	r3, [r4, #12]
			break;
 80048b2:	f017 be49 	b.w	801c548 <problem_fetch+0x1ae60>
		case 72 :
			strcpy(p->name,"TAFFO");
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80048bc:	4a78      	ldr	r2, [pc, #480]	; (8004aa0 <problem_fetch+0x33b8>)
 80048be:	6810      	ldr	r0, [r2, #0]
 80048c0:	6018      	str	r0, [r3, #0]
 80048c2:	8892      	ldrh	r2, [r2, #4]
 80048c4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048cc:	4a70      	ldr	r2, [pc, #448]	; (8004a90 <problem_fetch+0x33a8>)
 80048ce:	6810      	ldr	r0, [r2, #0]
 80048d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2206      	movs	r2, #6
 80048d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,C,D,A");
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	33a4      	adds	r3, #164	; 0xa4
 80048dc:	4a71      	ldr	r2, [pc, #452]	; (8004aa4 <problem_fetch+0x33bc>)
 80048de:	461c      	mov	r4, r3
 80048e0:	4613      	mov	r3, r2
 80048e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048e4:	6020      	str	r0, [r4, #0]
 80048e6:	6061      	str	r1, [r4, #4]
 80048e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,8,13,15,18");
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4a6e      	ldr	r2, [pc, #440]	; (8004aa8 <problem_fetch+0x33c0>)
 80048f0:	461c      	mov	r4, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80048f6:	6020      	str	r0, [r4, #0]
 80048f8:	6061      	str	r1, [r4, #4]
 80048fa:	60a2      	str	r2, [r4, #8]
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	789b      	ldrb	r3, [r3, #2]
 8004900:	81a2      	strh	r2, [r4, #12]
 8004902:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800490a:	4a68      	ldr	r2, [pc, #416]	; (8004aac <problem_fetch+0x33c4>)
 800490c:	461c      	mov	r4, r3
 800490e:	4613      	mov	r3, r2
 8004910:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004912:	6020      	str	r0, [r4, #0]
 8004914:	6061      	str	r1, [r4, #4]
 8004916:	60a2      	str	r2, [r4, #8]
			break;
 8004918:	f017 be16 	b.w	801c548 <problem_fetch+0x1ae60>
		case 73 :
			strcpy(p->name,"BLACK GECKO");
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004922:	4a63      	ldr	r2, [pc, #396]	; (8004ab0 <problem_fetch+0x33c8>)
 8004924:	461c      	mov	r4, r3
 8004926:	4613      	mov	r3, r2
 8004928:	cb07      	ldmia	r3!, {r0, r1, r2}
 800492a:	6020      	str	r0, [r4, #0]
 800492c:	6061      	str	r1, [r4, #4]
 800492e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004936:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <problem_fetch+0x33cc>)
 8004938:	6810      	ldr	r0, [r2, #0]
 800493a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2206      	movs	r2, #6
 8004940:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,C,E,D");
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	33a4      	adds	r3, #164	; 0xa4
 8004946:	4a5c      	ldr	r2, [pc, #368]	; (8004ab8 <problem_fetch+0x33d0>)
 8004948:	461c      	mov	r4, r3
 800494a:	4613      	mov	r3, r2
 800494c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800494e:	6020      	str	r0, [r4, #0]
 8004950:	6061      	str	r1, [r4, #4]
 8004952:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,14,18");
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4a58      	ldr	r2, [pc, #352]	; (8004abc <problem_fetch+0x33d4>)
 800495a:	461c      	mov	r4, r3
 800495c:	4615      	mov	r5, r2
 800495e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004960:	6020      	str	r0, [r4, #0]
 8004962:	6061      	str	r1, [r4, #4]
 8004964:	60a2      	str	r2, [r4, #8]
 8004966:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800496e:	4a46      	ldr	r2, [pc, #280]	; (8004a88 <problem_fetch+0x33a0>)
 8004970:	461c      	mov	r4, r3
 8004972:	4613      	mov	r3, r2
 8004974:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004976:	6020      	str	r0, [r4, #0]
 8004978:	6061      	str	r1, [r4, #4]
 800497a:	60a2      	str	r2, [r4, #8]
			break;
 800497c:	f017 bde4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 74 :
			strcpy(p->name,"BREATHE");
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004986:	494e      	ldr	r1, [pc, #312]	; (8004ac0 <problem_fetch+0x33d8>)
 8004988:	461a      	mov	r2, r3
 800498a:	460b      	mov	r3, r1
 800498c:	cb03      	ldmia	r3!, {r0, r1}
 800498e:	6010      	str	r0, [r2, #0]
 8004990:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004998:	4a4a      	ldr	r2, [pc, #296]	; (8004ac4 <problem_fetch+0x33dc>)
 800499a:	8811      	ldrh	r1, [r2, #0]
 800499c:	7892      	ldrb	r2, [r2, #2]
 800499e:	8019      	strh	r1, [r3, #0]
 80049a0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	220a      	movs	r2, #10
 80049a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,H,C,B,F,G,I,J");
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	33a4      	adds	r3, #164	; 0xa4
 80049ac:	4a46      	ldr	r2, [pc, #280]	; (8004ac8 <problem_fetch+0x33e0>)
 80049ae:	461d      	mov	r5, r3
 80049b0:	4614      	mov	r4, r2
 80049b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049b4:	6028      	str	r0, [r5, #0]
 80049b6:	6069      	str	r1, [r5, #4]
 80049b8:	60aa      	str	r2, [r5, #8]
 80049ba:	60eb      	str	r3, [r5, #12]
 80049bc:	6820      	ldr	r0, [r4, #0]
 80049be:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"8,9,12,5,5,6,13,15,18,12");
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	4a41      	ldr	r2, [pc, #260]	; (8004acc <problem_fetch+0x33e4>)
 80049c6:	461d      	mov	r5, r3
 80049c8:	4614      	mov	r4, r2
 80049ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049cc:	6028      	str	r0, [r5, #0]
 80049ce:	6069      	str	r1, [r5, #4]
 80049d0:	60aa      	str	r2, [r5, #8]
 80049d2:	60eb      	str	r3, [r5, #12]
 80049d4:	cc03      	ldmia	r4!, {r0, r1}
 80049d6:	6128      	str	r0, [r5, #16]
 80049d8:	6169      	str	r1, [r5, #20]
 80049da:	7823      	ldrb	r3, [r4, #0]
 80049dc:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"d,d,d,d,s,s,d,d,e,d");
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80049e4:	4a3a      	ldr	r2, [pc, #232]	; (8004ad0 <problem_fetch+0x33e8>)
 80049e6:	461d      	mov	r5, r3
 80049e8:	4614      	mov	r4, r2
 80049ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049ec:	6028      	str	r0, [r5, #0]
 80049ee:	6069      	str	r1, [r5, #4]
 80049f0:	60aa      	str	r2, [r5, #8]
 80049f2:	60eb      	str	r3, [r5, #12]
 80049f4:	6820      	ldr	r0, [r4, #0]
 80049f6:	6128      	str	r0, [r5, #16]
			break;
 80049f8:	f017 bda6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 75 :
			strcpy(p->name,"THE GRANARY");
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a02:	4a34      	ldr	r2, [pc, #208]	; (8004ad4 <problem_fetch+0x33ec>)
 8004a04:	461c      	mov	r4, r3
 8004a06:	4613      	mov	r3, r2
 8004a08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	6061      	str	r1, [r4, #4]
 8004a0e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a16:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <problem_fetch+0x33dc>)
 8004a18:	8811      	ldrh	r1, [r2, #0]
 8004a1a:	7892      	ldrb	r2, [r2, #2]
 8004a1c:	8019      	strh	r1, [r3, #0]
 8004a1e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2206      	movs	r2, #6
 8004a24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,C,D,D");
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	33a4      	adds	r3, #164	; 0xa4
 8004a2a:	4a2b      	ldr	r2, [pc, #172]	; (8004ad8 <problem_fetch+0x33f0>)
 8004a2c:	461c      	mov	r4, r3
 8004a2e:	4613      	mov	r3, r2
 8004a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a32:	6020      	str	r0, [r4, #0]
 8004a34:	6061      	str	r1, [r4, #4]
 8004a36:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,15,18");
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	3304      	adds	r3, #4
 8004a3c:	4a27      	ldr	r2, [pc, #156]	; (8004adc <problem_fetch+0x33f4>)
 8004a3e:	461c      	mov	r4, r3
 8004a40:	4615      	mov	r5, r2
 8004a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a44:	6020      	str	r0, [r4, #0]
 8004a46:	6061      	str	r1, [r4, #4]
 8004a48:	60a2      	str	r2, [r4, #8]
 8004a4a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004a52:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <problem_fetch+0x33a0>)
 8004a54:	461c      	mov	r4, r3
 8004a56:	4613      	mov	r3, r2
 8004a58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004a5a:	6020      	str	r0, [r4, #0]
 8004a5c:	6061      	str	r1, [r4, #4]
 8004a5e:	60a2      	str	r2, [r4, #8]
			break;
 8004a60:	f017 bd72 	b.w	801c548 <problem_fetch+0x1ae60>
 8004a64:	08024764 	.word	0x08024764
 8004a68:	08023a28 	.word	0x08023a28
 8004a6c:	08024774 	.word	0x08024774
 8004a70:	08024784 	.word	0x08024784
 8004a74:	0802479c 	.word	0x0802479c
 8004a78:	080247ac 	.word	0x080247ac
 8004a7c:	08023afc 	.word	0x08023afc
 8004a80:	080247bc 	.word	0x080247bc
 8004a84:	080247c8 	.word	0x080247c8
 8004a88:	0802393c 	.word	0x0802393c
 8004a8c:	080247d8 	.word	0x080247d8
 8004a90:	0802395c 	.word	0x0802395c
 8004a94:	080247f0 	.word	0x080247f0
 8004a98:	08024800 	.word	0x08024800
 8004a9c:	08023b6c 	.word	0x08023b6c
 8004aa0:	08024818 	.word	0x08024818
 8004aa4:	08024820 	.word	0x08024820
 8004aa8:	0802482c 	.word	0x0802482c
 8004aac:	08023cf8 	.word	0x08023cf8
 8004ab0:	0802483c 	.word	0x0802483c
 8004ab4:	080239f4 	.word	0x080239f4
 8004ab8:	08024848 	.word	0x08024848
 8004abc:	08024854 	.word	0x08024854
 8004ac0:	08024864 	.word	0x08024864
 8004ac4:	0802391c 	.word	0x0802391c
 8004ac8:	0802486c 	.word	0x0802486c
 8004acc:	08024880 	.word	0x08024880
 8004ad0:	0802489c 	.word	0x0802489c
 8004ad4:	080248b0 	.word	0x080248b0
 8004ad8:	080248bc 	.word	0x080248bc
 8004adc:	080248c8 	.word	0x080248c8
		case 76 :
			strcpy(p->name,"SMALL HOT 3 SPLENDA");
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004ae6:	4aaf      	ldr	r2, [pc, #700]	; (8004da4 <problem_fetch+0x36bc>)
 8004ae8:	461d      	mov	r5, r3
 8004aea:	4614      	mov	r4, r2
 8004aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aee:	6028      	str	r0, [r5, #0]
 8004af0:	6069      	str	r1, [r5, #4]
 8004af2:	60aa      	str	r2, [r5, #8]
 8004af4:	60eb      	str	r3, [r5, #12]
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b00:	4aa9      	ldr	r2, [pc, #676]	; (8004da8 <problem_fetch+0x36c0>)
 8004b02:	6810      	ldr	r0, [r2, #0]
 8004b04:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2206      	movs	r2, #6
 8004b0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,I,E,D");
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	33a4      	adds	r3, #164	; 0xa4
 8004b10:	4aa6      	ldr	r2, [pc, #664]	; (8004dac <problem_fetch+0x36c4>)
 8004b12:	461c      	mov	r4, r3
 8004b14:	4613      	mov	r3, r2
 8004b16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b18:	6020      	str	r0, [r4, #0]
 8004b1a:	6061      	str	r1, [r4, #4]
 8004b1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	4aa3      	ldr	r2, [pc, #652]	; (8004db0 <problem_fetch+0x36c8>)
 8004b24:	461d      	mov	r5, r3
 8004b26:	4614      	mov	r4, r2
 8004b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b2a:	6028      	str	r0, [r5, #0]
 8004b2c:	6069      	str	r1, [r5, #4]
 8004b2e:	60aa      	str	r2, [r5, #8]
 8004b30:	60eb      	str	r3, [r5, #12]
 8004b32:	7823      	ldrb	r3, [r4, #0]
 8004b34:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004b3c:	4a9d      	ldr	r2, [pc, #628]	; (8004db4 <problem_fetch+0x36cc>)
 8004b3e:	461c      	mov	r4, r3
 8004b40:	4613      	mov	r3, r2
 8004b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004b44:	6020      	str	r0, [r4, #0]
 8004b46:	6061      	str	r1, [r4, #4]
 8004b48:	60a2      	str	r2, [r4, #8]
			break;
 8004b4a:	f017 bcfd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 77 :
			strcpy(p->name,"WALLABY");
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b54:	4998      	ldr	r1, [pc, #608]	; (8004db8 <problem_fetch+0x36d0>)
 8004b56:	461a      	mov	r2, r3
 8004b58:	460b      	mov	r3, r1
 8004b5a:	cb03      	ldmia	r3!, {r0, r1}
 8004b5c:	6010      	str	r0, [r2, #0]
 8004b5e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b66:	4a95      	ldr	r2, [pc, #596]	; (8004dbc <problem_fetch+0x36d4>)
 8004b68:	8811      	ldrh	r1, [r2, #0]
 8004b6a:	7892      	ldrb	r2, [r2, #2]
 8004b6c:	8019      	strh	r1, [r3, #0]
 8004b6e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2209      	movs	r2, #9
 8004b74:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,F,E,J,I,H,I");
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	33a4      	adds	r3, #164	; 0xa4
 8004b7a:	4a91      	ldr	r2, [pc, #580]	; (8004dc0 <problem_fetch+0x36d8>)
 8004b7c:	461d      	mov	r5, r3
 8004b7e:	4614      	mov	r4, r2
 8004b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b82:	6028      	str	r0, [r5, #0]
 8004b84:	6069      	str	r1, [r5, #4]
 8004b86:	60aa      	str	r2, [r5, #8]
 8004b88:	60eb      	str	r3, [r5, #12]
 8004b8a:	8823      	ldrh	r3, [r4, #0]
 8004b8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,11,12,7,14,16,18");
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	4a8c      	ldr	r2, [pc, #560]	; (8004dc4 <problem_fetch+0x36dc>)
 8004b94:	461c      	mov	r4, r3
 8004b96:	4615      	mov	r5, r2
 8004b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b9a:	6020      	str	r0, [r4, #0]
 8004b9c:	6061      	str	r1, [r4, #4]
 8004b9e:	60a2      	str	r2, [r4, #8]
 8004ba0:	60e3      	str	r3, [r4, #12]
 8004ba2:	6828      	ldr	r0, [r5, #0]
 8004ba4:	6120      	str	r0, [r4, #16]
 8004ba6:	88ab      	ldrh	r3, [r5, #4]
 8004ba8:	79aa      	ldrb	r2, [r5, #6]
 8004baa:	82a3      	strh	r3, [r4, #20]
 8004bac:	4613      	mov	r3, r2
 8004bae:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004bb6:	4a84      	ldr	r2, [pc, #528]	; (8004dc8 <problem_fetch+0x36e0>)
 8004bb8:	461d      	mov	r5, r3
 8004bba:	4614      	mov	r4, r2
 8004bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bbe:	6028      	str	r0, [r5, #0]
 8004bc0:	6069      	str	r1, [r5, #4]
 8004bc2:	60aa      	str	r2, [r5, #8]
 8004bc4:	60eb      	str	r3, [r5, #12]
 8004bc6:	8823      	ldrh	r3, [r4, #0]
 8004bc8:	822b      	strh	r3, [r5, #16]
			break;
 8004bca:	f017 bcbd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 78 :
			strcpy(p->name,"ESSEK");
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bd4:	4a7d      	ldr	r2, [pc, #500]	; (8004dcc <problem_fetch+0x36e4>)
 8004bd6:	6810      	ldr	r0, [r2, #0]
 8004bd8:	6018      	str	r0, [r3, #0]
 8004bda:	8892      	ldrh	r2, [r2, #4]
 8004bdc:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004be4:	4a7a      	ldr	r2, [pc, #488]	; (8004dd0 <problem_fetch+0x36e8>)
 8004be6:	6810      	ldr	r0, [r2, #0]
 8004be8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2208      	movs	r2, #8
 8004bee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,E,G,G,G,D");
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	33a4      	adds	r3, #164	; 0xa4
 8004bf4:	4a77      	ldr	r2, [pc, #476]	; (8004dd4 <problem_fetch+0x36ec>)
 8004bf6:	461c      	mov	r4, r3
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004bfc:	6020      	str	r0, [r4, #0]
 8004bfe:	6061      	str	r1, [r4, #4]
 8004c00:	60a2      	str	r2, [r4, #8]
 8004c02:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,14,15,17,18");
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4a73      	ldr	r2, [pc, #460]	; (8004dd8 <problem_fetch+0x36f0>)
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c10:	6028      	str	r0, [r5, #0]
 8004c12:	6069      	str	r1, [r5, #4]
 8004c14:	60aa      	str	r2, [r5, #8]
 8004c16:	60eb      	str	r3, [r5, #12]
 8004c18:	6820      	ldr	r0, [r4, #0]
 8004c1a:	6128      	str	r0, [r5, #16]
 8004c1c:	88a3      	ldrh	r3, [r4, #4]
 8004c1e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004c26:	4a6d      	ldr	r2, [pc, #436]	; (8004ddc <problem_fetch+0x36f4>)
 8004c28:	461c      	mov	r4, r3
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c2e:	6020      	str	r0, [r4, #0]
 8004c30:	6061      	str	r1, [r4, #4]
 8004c32:	60a2      	str	r2, [r4, #8]
 8004c34:	60e3      	str	r3, [r4, #12]
			break;
 8004c36:	f017 bc87 	b.w	801c548 <problem_fetch+0x1ae60>
		case 79 :
			strcpy(p->name,"BLACK MIRROR");
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004c40:	4a67      	ldr	r2, [pc, #412]	; (8004de0 <problem_fetch+0x36f8>)
 8004c42:	461c      	mov	r4, r3
 8004c44:	4613      	mov	r3, r2
 8004c46:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004c48:	6020      	str	r0, [r4, #0]
 8004c4a:	6061      	str	r1, [r4, #4]
 8004c4c:	60a2      	str	r2, [r4, #8]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004c58:	4a62      	ldr	r2, [pc, #392]	; (8004de4 <problem_fetch+0x36fc>)
 8004c5a:	8811      	ldrh	r1, [r2, #0]
 8004c5c:	7892      	ldrb	r2, [r2, #2]
 8004c5e:	8019      	strh	r1, [r3, #0]
 8004c60:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2208      	movs	r2, #8
 8004c66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,F,E,D,G,I");
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	33a4      	adds	r3, #164	; 0xa4
 8004c6c:	4a5e      	ldr	r2, [pc, #376]	; (8004de8 <problem_fetch+0x3700>)
 8004c6e:	461c      	mov	r4, r3
 8004c70:	4615      	mov	r5, r2
 8004c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c74:	6020      	str	r0, [r4, #0]
 8004c76:	6061      	str	r1, [r4, #4]
 8004c78:	60a2      	str	r2, [r4, #8]
 8004c7a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,15,17,18");
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4a5a      	ldr	r2, [pc, #360]	; (8004dec <problem_fetch+0x3704>)
 8004c82:	461d      	mov	r5, r3
 8004c84:	4614      	mov	r4, r2
 8004c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c88:	6028      	str	r0, [r5, #0]
 8004c8a:	6069      	str	r1, [r5, #4]
 8004c8c:	60aa      	str	r2, [r5, #8]
 8004c8e:	60eb      	str	r3, [r5, #12]
 8004c90:	6820      	ldr	r0, [r4, #0]
 8004c92:	6128      	str	r0, [r5, #16]
 8004c94:	7923      	ldrb	r3, [r4, #4]
 8004c96:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004c9e:	4a54      	ldr	r2, [pc, #336]	; (8004df0 <problem_fetch+0x3708>)
 8004ca0:	461c      	mov	r4, r3
 8004ca2:	4615      	mov	r5, r2
 8004ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ca6:	6020      	str	r0, [r4, #0]
 8004ca8:	6061      	str	r1, [r4, #4]
 8004caa:	60a2      	str	r2, [r4, #8]
 8004cac:	60e3      	str	r3, [r4, #12]
			break;
 8004cae:	f017 bc4b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 80 :
			strcpy(p->name,"Z3GZAG");
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004cb8:	4a4e      	ldr	r2, [pc, #312]	; (8004df4 <problem_fetch+0x370c>)
 8004cba:	6810      	ldr	r0, [r2, #0]
 8004cbc:	6018      	str	r0, [r3, #0]
 8004cbe:	8891      	ldrh	r1, [r2, #4]
 8004cc0:	7992      	ldrb	r2, [r2, #6]
 8004cc2:	8099      	strh	r1, [r3, #4]
 8004cc4:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ccc:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <problem_fetch+0x36c0>)
 8004cce:	6810      	ldr	r0, [r2, #0]
 8004cd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2209      	movs	r2, #9
 8004cd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,I,G,G,D,E");
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	33a4      	adds	r3, #164	; 0xa4
 8004cdc:	4a46      	ldr	r2, [pc, #280]	; (8004df8 <problem_fetch+0x3710>)
 8004cde:	461d      	mov	r5, r3
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ce4:	6028      	str	r0, [r5, #0]
 8004ce6:	6069      	str	r1, [r5, #4]
 8004ce8:	60aa      	str	r2, [r5, #8]
 8004cea:	60eb      	str	r3, [r5, #12]
 8004cec:	8823      	ldrh	r3, [r4, #0]
 8004cee:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18,6");
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	4a41      	ldr	r2, [pc, #260]	; (8004dfc <problem_fetch+0x3714>)
 8004cf6:	461d      	mov	r5, r3
 8004cf8:	4614      	mov	r4, r2
 8004cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cfc:	6028      	str	r0, [r5, #0]
 8004cfe:	6069      	str	r1, [r5, #4]
 8004d00:	60aa      	str	r2, [r5, #8]
 8004d02:	60eb      	str	r3, [r5, #12]
 8004d04:	cc03      	ldmia	r4!, {r0, r1}
 8004d06:	6128      	str	r0, [r5, #16]
 8004d08:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,s");
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004d10:	4a3b      	ldr	r2, [pc, #236]	; (8004e00 <problem_fetch+0x3718>)
 8004d12:	461d      	mov	r5, r3
 8004d14:	4614      	mov	r4, r2
 8004d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d18:	6028      	str	r0, [r5, #0]
 8004d1a:	6069      	str	r1, [r5, #4]
 8004d1c:	60aa      	str	r2, [r5, #8]
 8004d1e:	60eb      	str	r3, [r5, #12]
 8004d20:	8823      	ldrh	r3, [r4, #0]
 8004d22:	822b      	strh	r3, [r5, #16]
			break;
 8004d24:	f017 bc10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 81 :
			strcpy(p->name,"WHO NEEDS DR. GREG");
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004d2e:	4a35      	ldr	r2, [pc, #212]	; (8004e04 <problem_fetch+0x371c>)
 8004d30:	461d      	mov	r5, r3
 8004d32:	4614      	mov	r4, r2
 8004d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d36:	6028      	str	r0, [r5, #0]
 8004d38:	6069      	str	r1, [r5, #4]
 8004d3a:	60aa      	str	r2, [r5, #8]
 8004d3c:	60eb      	str	r3, [r5, #12]
 8004d3e:	8823      	ldrh	r3, [r4, #0]
 8004d40:	78a2      	ldrb	r2, [r4, #2]
 8004d42:	822b      	strh	r3, [r5, #16]
 8004d44:	4613      	mov	r3, r2
 8004d46:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004d4e:	4a2e      	ldr	r2, [pc, #184]	; (8004e08 <problem_fetch+0x3720>)
 8004d50:	6810      	ldr	r0, [r2, #0]
 8004d52:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2207      	movs	r2, #7
 8004d58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,E,D,G,H,D");
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	33a4      	adds	r3, #164	; 0xa4
 8004d5e:	4a2b      	ldr	r2, [pc, #172]	; (8004e0c <problem_fetch+0x3724>)
 8004d60:	461c      	mov	r4, r3
 8004d62:	4613      	mov	r3, r2
 8004d64:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d66:	6020      	str	r0, [r4, #0]
 8004d68:	6061      	str	r1, [r4, #4]
 8004d6a:	60a2      	str	r2, [r4, #8]
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,14,18,9,12,11");
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <problem_fetch+0x3728>)
 8004d76:	461d      	mov	r5, r3
 8004d78:	4614      	mov	r4, r2
 8004d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d7c:	6028      	str	r0, [r5, #0]
 8004d7e:	6069      	str	r1, [r5, #4]
 8004d80:	60aa      	str	r2, [r5, #8]
 8004d82:	60eb      	str	r3, [r5, #12]
 8004d84:	8823      	ldrh	r3, [r4, #0]
 8004d86:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,e,d,d,d");
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <problem_fetch+0x372c>)
 8004d90:	461c      	mov	r4, r3
 8004d92:	4613      	mov	r3, r2
 8004d94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004d96:	6020      	str	r0, [r4, #0]
 8004d98:	6061      	str	r1, [r4, #4]
 8004d9a:	60a2      	str	r2, [r4, #8]
 8004d9c:	881b      	ldrh	r3, [r3, #0]
 8004d9e:	81a3      	strh	r3, [r4, #12]
			break;
 8004da0:	f017 bbd2 	b.w	801c548 <problem_fetch+0x1ae60>
 8004da4:	080248d8 	.word	0x080248d8
 8004da8:	0802395c 	.word	0x0802395c
 8004dac:	080248ec 	.word	0x080248ec
 8004db0:	080248f8 	.word	0x080248f8
 8004db4:	08023cf8 	.word	0x08023cf8
 8004db8:	0802490c 	.word	0x0802490c
 8004dbc:	08023a28 	.word	0x08023a28
 8004dc0:	08024914 	.word	0x08024914
 8004dc4:	08024928 	.word	0x08024928
 8004dc8:	08024940 	.word	0x08024940
 8004dcc:	08024954 	.word	0x08024954
 8004dd0:	080239f4 	.word	0x080239f4
 8004dd4:	0802495c 	.word	0x0802495c
 8004dd8:	0802496c 	.word	0x0802496c
 8004ddc:	08023a80 	.word	0x08023a80
 8004de0:	08024984 	.word	0x08024984
 8004de4:	08024190 	.word	0x08024190
 8004de8:	08024994 	.word	0x08024994
 8004dec:	080249a4 	.word	0x080249a4
 8004df0:	08023b6c 	.word	0x08023b6c
 8004df4:	080249bc 	.word	0x080249bc
 8004df8:	080249c4 	.word	0x080249c4
 8004dfc:	080249d8 	.word	0x080249d8
 8004e00:	080240fc 	.word	0x080240fc
 8004e04:	080249f0 	.word	0x080249f0
 8004e08:	08023afc 	.word	0x08023afc
 8004e0c:	08024a04 	.word	0x08024a04
 8004e10:	08024a14 	.word	0x08024a14
 8004e14:	08024a28 	.word	0x08024a28
		case 82 :
			strcpy(p->name,"BLACKTOP");
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e1e:	49af      	ldr	r1, [pc, #700]	; (80050dc <problem_fetch+0x39f4>)
 8004e20:	461a      	mov	r2, r3
 8004e22:	460b      	mov	r3, r1
 8004e24:	cb03      	ldmia	r3!, {r0, r1}
 8004e26:	6010      	str	r0, [r2, #0]
 8004e28:	6051      	str	r1, [r2, #4]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004e34:	4aaa      	ldr	r2, [pc, #680]	; (80050e0 <problem_fetch+0x39f8>)
 8004e36:	8811      	ldrh	r1, [r2, #0]
 8004e38:	7892      	ldrb	r2, [r2, #2]
 8004e3a:	8019      	strh	r1, [r3, #0]
 8004e3c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2206      	movs	r2, #6
 8004e42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,D,D");
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	33a4      	adds	r3, #164	; 0xa4
 8004e48:	4aa6      	ldr	r2, [pc, #664]	; (80050e4 <problem_fetch+0x39fc>)
 8004e4a:	461c      	mov	r4, r3
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e50:	6020      	str	r0, [r4, #0]
 8004e52:	6061      	str	r1, [r4, #4]
 8004e54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,14,11,18");
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	4aa3      	ldr	r2, [pc, #652]	; (80050e8 <problem_fetch+0x3a00>)
 8004e5c:	461c      	mov	r4, r3
 8004e5e:	4613      	mov	r3, r2
 8004e60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e62:	6020      	str	r0, [r4, #0]
 8004e64:	6061      	str	r1, [r4, #4]
 8004e66:	60a2      	str	r2, [r4, #8]
 8004e68:	881a      	ldrh	r2, [r3, #0]
 8004e6a:	789b      	ldrb	r3, [r3, #2]
 8004e6c:	81a2      	strh	r2, [r4, #12]
 8004e6e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004e76:	4a9d      	ldr	r2, [pc, #628]	; (80050ec <problem_fetch+0x3a04>)
 8004e78:	461c      	mov	r4, r3
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e7e:	6020      	str	r0, [r4, #0]
 8004e80:	6061      	str	r1, [r4, #4]
 8004e82:	60a2      	str	r2, [r4, #8]
			break;
 8004e84:	f017 bb60 	b.w	801c548 <problem_fetch+0x1ae60>
		case 83 :
			strcpy(p->name,"MURPHY STINKS");
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004e8e:	4a98      	ldr	r2, [pc, #608]	; (80050f0 <problem_fetch+0x3a08>)
 8004e90:	461c      	mov	r4, r3
 8004e92:	4613      	mov	r3, r2
 8004e94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004e96:	6020      	str	r0, [r4, #0]
 8004e98:	6061      	str	r1, [r4, #4]
 8004e9a:	60a2      	str	r2, [r4, #8]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004ea6:	4a93      	ldr	r2, [pc, #588]	; (80050f4 <problem_fetch+0x3a0c>)
 8004ea8:	6810      	ldr	r0, [r2, #0]
 8004eaa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2207      	movs	r2, #7
 8004eb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,I,J,I,J,J");
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	33a4      	adds	r3, #164	; 0xa4
 8004eb6:	4a90      	ldr	r2, [pc, #576]	; (80050f8 <problem_fetch+0x3a10>)
 8004eb8:	461c      	mov	r4, r3
 8004eba:	4613      	mov	r3, r2
 8004ebc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ebe:	6020      	str	r0, [r4, #0]
 8004ec0:	6061      	str	r1, [r4, #4]
 8004ec2:	60a2      	str	r2, [r4, #8]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,10,14,12,18,7,5");
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4a8b      	ldr	r2, [pc, #556]	; (80050fc <problem_fetch+0x3a14>)
 8004ece:	461d      	mov	r5, r3
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ed4:	6028      	str	r0, [r5, #0]
 8004ed6:	6069      	str	r1, [r5, #4]
 8004ed8:	60aa      	str	r2, [r5, #8]
 8004eda:	60eb      	str	r3, [r5, #12]
 8004edc:	8823      	ldrh	r3, [r4, #0]
 8004ede:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,e,d,s");
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004ee6:	4a86      	ldr	r2, [pc, #536]	; (8005100 <problem_fetch+0x3a18>)
 8004ee8:	461c      	mov	r4, r3
 8004eea:	4613      	mov	r3, r2
 8004eec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004eee:	6020      	str	r0, [r4, #0]
 8004ef0:	6061      	str	r1, [r4, #4]
 8004ef2:	60a2      	str	r2, [r4, #8]
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	81a3      	strh	r3, [r4, #12]
			break;
 8004ef8:	f017 bb26 	b.w	801c548 <problem_fetch+0x1ae60>
		case 84 :
			strcpy(p->name,"BLACK HORSE");
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f02:	4a80      	ldr	r2, [pc, #512]	; (8005104 <problem_fetch+0x3a1c>)
 8004f04:	461c      	mov	r4, r3
 8004f06:	4613      	mov	r3, r2
 8004f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f0a:	6020      	str	r0, [r4, #0]
 8004f0c:	6061      	str	r1, [r4, #4]
 8004f0e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f16:	4a7c      	ldr	r2, [pc, #496]	; (8005108 <problem_fetch+0x3a20>)
 8004f18:	6810      	ldr	r0, [r2, #0]
 8004f1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2207      	movs	r2, #7
 8004f20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,D,E,A,I");
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	33a4      	adds	r3, #164	; 0xa4
 8004f26:	4a79      	ldr	r2, [pc, #484]	; (800510c <problem_fetch+0x3a24>)
 8004f28:	461c      	mov	r4, r3
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	6061      	str	r1, [r4, #4]
 8004f32:	60a2      	str	r2, [r4, #8]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,15,16,18,14");
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4a74      	ldr	r2, [pc, #464]	; (8005110 <problem_fetch+0x3a28>)
 8004f3e:	461d      	mov	r5, r3
 8004f40:	4614      	mov	r4, r2
 8004f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f44:	6028      	str	r0, [r5, #0]
 8004f46:	6069      	str	r1, [r5, #4]
 8004f48:	60aa      	str	r2, [r5, #8]
 8004f4a:	60eb      	str	r3, [r5, #12]
 8004f4c:	8823      	ldrh	r3, [r4, #0]
 8004f4e:	78a2      	ldrb	r2, [r4, #2]
 8004f50:	822b      	strh	r3, [r5, #16]
 8004f52:	4613      	mov	r3, r2
 8004f54:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004f5c:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <problem_fetch+0x3a2c>)
 8004f5e:	461c      	mov	r4, r3
 8004f60:	4613      	mov	r3, r2
 8004f62:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f64:	6020      	str	r0, [r4, #0]
 8004f66:	6061      	str	r1, [r4, #4]
 8004f68:	60a2      	str	r2, [r4, #8]
 8004f6a:	881b      	ldrh	r3, [r3, #0]
 8004f6c:	81a3      	strh	r3, [r4, #12]
			break;
 8004f6e:	f017 baeb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 85 :
			strcpy(p->name,"BLACK 1.1");
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004f78:	4967      	ldr	r1, [pc, #412]	; (8005118 <problem_fetch+0x3a30>)
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	cb03      	ldmia	r3!, {r0, r1}
 8004f80:	6010      	str	r0, [r2, #0]
 8004f82:	6051      	str	r1, [r2, #4]
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f8e:	4a54      	ldr	r2, [pc, #336]	; (80050e0 <problem_fetch+0x39f8>)
 8004f90:	8811      	ldrh	r1, [r2, #0]
 8004f92:	7892      	ldrb	r2, [r2, #2]
 8004f94:	8019      	strh	r1, [r3, #0]
 8004f96:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,I,E,D");
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	33a4      	adds	r3, #164	; 0xa4
 8004fa2:	4a5e      	ldr	r2, [pc, #376]	; (800511c <problem_fetch+0x3a34>)
 8004fa4:	461c      	mov	r4, r3
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004faa:	6020      	str	r0, [r4, #0]
 8004fac:	6061      	str	r1, [r4, #4]
 8004fae:	60a2      	str	r2, [r4, #8]
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,18");
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4a59      	ldr	r2, [pc, #356]	; (8005120 <problem_fetch+0x3a38>)
 8004fba:	461d      	mov	r5, r3
 8004fbc:	4614      	mov	r4, r2
 8004fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	6069      	str	r1, [r5, #4]
 8004fc4:	60aa      	str	r2, [r5, #8]
 8004fc6:	60eb      	str	r3, [r5, #12]
 8004fc8:	8823      	ldrh	r3, [r4, #0]
 8004fca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8004fd2:	4a54      	ldr	r2, [pc, #336]	; (8005124 <problem_fetch+0x3a3c>)
 8004fd4:	461c      	mov	r4, r3
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fda:	6020      	str	r0, [r4, #0]
 8004fdc:	6061      	str	r1, [r4, #4]
 8004fde:	60a2      	str	r2, [r4, #8]
 8004fe0:	881b      	ldrh	r3, [r3, #0]
 8004fe2:	81a3      	strh	r3, [r4, #12]
			break;
 8004fe4:	f017 bab0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 86 :
			strcpy(p->name,"BLACK 1");
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004fee:	494e      	ldr	r1, [pc, #312]	; (8005128 <problem_fetch+0x3a40>)
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	cb03      	ldmia	r3!, {r0, r1}
 8004ff6:	6010      	str	r0, [r2, #0]
 8004ff8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005000:	4a3c      	ldr	r2, [pc, #240]	; (80050f4 <problem_fetch+0x3a0c>)
 8005002:	6810      	ldr	r0, [r2, #0]
 8005004:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,E,G,B,B,A,D");
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	33a4      	adds	r3, #164	; 0xa4
 8005010:	4a46      	ldr	r2, [pc, #280]	; (800512c <problem_fetch+0x3a44>)
 8005012:	461c      	mov	r4, r3
 8005014:	4613      	mov	r3, r2
 8005016:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005018:	6020      	str	r0, [r4, #0]
 800501a:	6061      	str	r1, [r4, #4]
 800501c:	60a2      	str	r2, [r4, #8]
 800501e:	881b      	ldrh	r3, [r3, #0]
 8005020:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"7,8,4,10,12,14,18");
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3304      	adds	r3, #4
 8005026:	4a42      	ldr	r2, [pc, #264]	; (8005130 <problem_fetch+0x3a48>)
 8005028:	461d      	mov	r5, r3
 800502a:	4614      	mov	r4, r2
 800502c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800502e:	6028      	str	r0, [r5, #0]
 8005030:	6069      	str	r1, [r5, #4]
 8005032:	60aa      	str	r2, [r5, #8]
 8005034:	60eb      	str	r3, [r5, #12]
 8005036:	8823      	ldrh	r3, [r4, #0]
 8005038:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,s,d,d,d,e");
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005040:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <problem_fetch+0x3a4c>)
 8005042:	461c      	mov	r4, r3
 8005044:	4613      	mov	r3, r2
 8005046:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005048:	6020      	str	r0, [r4, #0]
 800504a:	6061      	str	r1, [r4, #4]
 800504c:	60a2      	str	r2, [r4, #8]
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	81a3      	strh	r3, [r4, #12]
			break;
 8005052:	f017 ba79 	b.w	801c548 <problem_fetch+0x1ae60>
		case 87 :
			strcpy(p->name,"BLACKBOARD");
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800505c:	4936      	ldr	r1, [pc, #216]	; (8005138 <problem_fetch+0x3a50>)
 800505e:	461a      	mov	r2, r3
 8005060:	460b      	mov	r3, r1
 8005062:	cb03      	ldmia	r3!, {r0, r1}
 8005064:	6010      	str	r0, [r2, #0]
 8005066:	6051      	str	r1, [r2, #4]
 8005068:	8819      	ldrh	r1, [r3, #0]
 800506a:	789b      	ldrb	r3, [r3, #2]
 800506c:	8111      	strh	r1, [r2, #8]
 800506e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005076:	4a1a      	ldr	r2, [pc, #104]	; (80050e0 <problem_fetch+0x39f8>)
 8005078:	8811      	ldrh	r1, [r2, #0]
 800507a:	7892      	ldrb	r2, [r2, #2]
 800507c:	8019      	strh	r1, [r3, #0]
 800507e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	220a      	movs	r2, #10
 8005084:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,H,G,K,J,K,H,G,D");
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	33a4      	adds	r3, #164	; 0xa4
 800508a:	4a2c      	ldr	r2, [pc, #176]	; (800513c <problem_fetch+0x3a54>)
 800508c:	461d      	mov	r5, r3
 800508e:	4614      	mov	r4, r2
 8005090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005092:	6028      	str	r0, [r5, #0]
 8005094:	6069      	str	r1, [r5, #4]
 8005096:	60aa      	str	r2, [r5, #8]
 8005098:	60eb      	str	r3, [r5, #12]
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,5,6,9,13,16,16,17,18");
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3304      	adds	r3, #4
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <problem_fetch+0x3a58>)
 80050a4:	461d      	mov	r5, r3
 80050a6:	4614      	mov	r4, r2
 80050a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050aa:	6028      	str	r0, [r5, #0]
 80050ac:	6069      	str	r1, [r5, #4]
 80050ae:	60aa      	str	r2, [r5, #8]
 80050b0:	60eb      	str	r3, [r5, #12]
 80050b2:	cc03      	ldmia	r4!, {r0, r1}
 80050b4:	6128      	str	r0, [r5, #16]
 80050b6:	6169      	str	r1, [r5, #20]
 80050b8:	7823      	ldrb	r3, [r4, #0]
 80050ba:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80050c2:	4a20      	ldr	r2, [pc, #128]	; (8005144 <problem_fetch+0x3a5c>)
 80050c4:	461d      	mov	r5, r3
 80050c6:	4614      	mov	r4, r2
 80050c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ca:	6028      	str	r0, [r5, #0]
 80050cc:	6069      	str	r1, [r5, #4]
 80050ce:	60aa      	str	r2, [r5, #8]
 80050d0:	60eb      	str	r3, [r5, #12]
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	6128      	str	r0, [r5, #16]
			break;
 80050d6:	f017 ba37 	b.w	801c548 <problem_fetch+0x1ae60>
 80050da:	bf00      	nop
 80050dc:	08024a38 	.word	0x08024a38
 80050e0:	0802391c 	.word	0x0802391c
 80050e4:	08024a44 	.word	0x08024a44
 80050e8:	08024a50 	.word	0x08024a50
 80050ec:	08023cf8 	.word	0x08023cf8
 80050f0:	08024a60 	.word	0x08024a60
 80050f4:	0802395c 	.word	0x0802395c
 80050f8:	08024a70 	.word	0x08024a70
 80050fc:	08024a80 	.word	0x08024a80
 8005100:	080246f8 	.word	0x080246f8
 8005104:	08024a94 	.word	0x08024a94
 8005108:	080239f4 	.word	0x080239f4
 800510c:	08024aa0 	.word	0x08024aa0
 8005110:	08024ab0 	.word	0x08024ab0
 8005114:	08024ac4 	.word	0x08024ac4
 8005118:	08024ad4 	.word	0x08024ad4
 800511c:	08024ae0 	.word	0x08024ae0
 8005120:	08024af0 	.word	0x08024af0
 8005124:	080239d4 	.word	0x080239d4
 8005128:	08024b04 	.word	0x08024b04
 800512c:	08024b0c 	.word	0x08024b0c
 8005130:	08024b1c 	.word	0x08024b1c
 8005134:	08024b30 	.word	0x08024b30
 8005138:	08024b40 	.word	0x08024b40
 800513c:	08024b4c 	.word	0x08024b4c
 8005140:	08024b60 	.word	0x08024b60
 8005144:	08024204 	.word	0x08024204
		case 88 :
			strcpy(p->name,"JA ICH BIN NOCH");
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800514e:	4aaa      	ldr	r2, [pc, #680]	; (80053f8 <problem_fetch+0x3d10>)
 8005150:	461c      	mov	r4, r3
 8005152:	4615      	mov	r5, r2
 8005154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005156:	6020      	str	r0, [r4, #0]
 8005158:	6061      	str	r1, [r4, #4]
 800515a:	60a2      	str	r2, [r4, #8]
 800515c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005164:	4aa5      	ldr	r2, [pc, #660]	; (80053fc <problem_fetch+0x3d14>)
 8005166:	6810      	ldr	r0, [r2, #0]
 8005168:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2207      	movs	r2, #7
 800516e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,E,E,I");
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	33a4      	adds	r3, #164	; 0xa4
 8005174:	4aa2      	ldr	r2, [pc, #648]	; (8005400 <problem_fetch+0x3d18>)
 8005176:	461c      	mov	r4, r3
 8005178:	4613      	mov	r3, r2
 800517a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800517c:	6020      	str	r0, [r4, #0]
 800517e:	6061      	str	r1, [r4, #4]
 8005180:	60a2      	str	r2, [r4, #8]
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3304      	adds	r3, #4
 800518a:	4a9e      	ldr	r2, [pc, #632]	; (8005404 <problem_fetch+0x3d1c>)
 800518c:	461d      	mov	r5, r3
 800518e:	4614      	mov	r4, r2
 8005190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005192:	6028      	str	r0, [r5, #0]
 8005194:	6069      	str	r1, [r5, #4]
 8005196:	60aa      	str	r2, [r5, #8]
 8005198:	60eb      	str	r3, [r5, #12]
 800519a:	8823      	ldrh	r3, [r4, #0]
 800519c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80051a4:	4a98      	ldr	r2, [pc, #608]	; (8005408 <problem_fetch+0x3d20>)
 80051a6:	461c      	mov	r4, r3
 80051a8:	4613      	mov	r3, r2
 80051aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051ac:	6020      	str	r0, [r4, #0]
 80051ae:	6061      	str	r1, [r4, #4]
 80051b0:	60a2      	str	r2, [r4, #8]
 80051b2:	881b      	ldrh	r3, [r3, #0]
 80051b4:	81a3      	strh	r3, [r4, #12]
			break;
 80051b6:	f017 b9c7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 89 :
			strcpy(p->name,"GORILA");
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80051c0:	4a92      	ldr	r2, [pc, #584]	; (800540c <problem_fetch+0x3d24>)
 80051c2:	6810      	ldr	r0, [r2, #0]
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	8891      	ldrh	r1, [r2, #4]
 80051c8:	7992      	ldrb	r2, [r2, #6]
 80051ca:	8099      	strh	r1, [r3, #4]
 80051cc:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80051d4:	4a8e      	ldr	r2, [pc, #568]	; (8005410 <problem_fetch+0x3d28>)
 80051d6:	8811      	ldrh	r1, [r2, #0]
 80051d8:	7892      	ldrb	r2, [r2, #2]
 80051da:	8019      	strh	r1, [r3, #0]
 80051dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2207      	movs	r2, #7
 80051e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,G,F,C,E,D");
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	33a4      	adds	r3, #164	; 0xa4
 80051e8:	4a8a      	ldr	r2, [pc, #552]	; (8005414 <problem_fetch+0x3d2c>)
 80051ea:	461c      	mov	r4, r3
 80051ec:	4613      	mov	r3, r2
 80051ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80051f0:	6020      	str	r0, [r4, #0]
 80051f2:	6061      	str	r1, [r4, #4]
 80051f4:	60a2      	str	r2, [r4, #8]
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,11,13,14,18");
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	4a86      	ldr	r2, [pc, #536]	; (8005418 <problem_fetch+0x3d30>)
 8005200:	461d      	mov	r5, r3
 8005202:	4614      	mov	r4, r2
 8005204:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005206:	6028      	str	r0, [r5, #0]
 8005208:	6069      	str	r1, [r5, #4]
 800520a:	60aa      	str	r2, [r5, #8]
 800520c:	60eb      	str	r3, [r5, #12]
 800520e:	8823      	ldrh	r3, [r4, #0]
 8005210:	78a2      	ldrb	r2, [r4, #2]
 8005212:	822b      	strh	r3, [r5, #16]
 8005214:	4613      	mov	r3, r2
 8005216:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800521e:	4a7f      	ldr	r2, [pc, #508]	; (800541c <problem_fetch+0x3d34>)
 8005220:	461c      	mov	r4, r3
 8005222:	4613      	mov	r3, r2
 8005224:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005226:	6020      	str	r0, [r4, #0]
 8005228:	6061      	str	r1, [r4, #4]
 800522a:	60a2      	str	r2, [r4, #8]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	81a3      	strh	r3, [r4, #12]
			break;
 8005230:	f017 b98a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 90 :
			strcpy(p->name,"URBAN WALL");
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800523a:	4979      	ldr	r1, [pc, #484]	; (8005420 <problem_fetch+0x3d38>)
 800523c:	461a      	mov	r2, r3
 800523e:	460b      	mov	r3, r1
 8005240:	cb03      	ldmia	r3!, {r0, r1}
 8005242:	6010      	str	r0, [r2, #0]
 8005244:	6051      	str	r1, [r2, #4]
 8005246:	8819      	ldrh	r1, [r3, #0]
 8005248:	789b      	ldrb	r3, [r3, #2]
 800524a:	8111      	strh	r1, [r2, #8]
 800524c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005254:	4a73      	ldr	r2, [pc, #460]	; (8005424 <problem_fetch+0x3d3c>)
 8005256:	8811      	ldrh	r1, [r2, #0]
 8005258:	7892      	ldrb	r2, [r2, #2]
 800525a:	8019      	strh	r1, [r3, #0]
 800525c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2206      	movs	r2, #6
 8005262:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,A,D");
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	33a4      	adds	r3, #164	; 0xa4
 8005268:	4a6f      	ldr	r2, [pc, #444]	; (8005428 <problem_fetch+0x3d40>)
 800526a:	461c      	mov	r4, r3
 800526c:	4613      	mov	r3, r2
 800526e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005270:	6020      	str	r0, [r4, #0]
 8005272:	6061      	str	r1, [r4, #4]
 8005274:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,8,11,14,18");
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3304      	adds	r3, #4
 800527a:	4a6c      	ldr	r2, [pc, #432]	; (800542c <problem_fetch+0x3d44>)
 800527c:	461c      	mov	r4, r3
 800527e:	4613      	mov	r3, r2
 8005280:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005282:	6020      	str	r0, [r4, #0]
 8005284:	6061      	str	r1, [r4, #4]
 8005286:	60a2      	str	r2, [r4, #8]
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	789b      	ldrb	r3, [r3, #2]
 800528c:	81a2      	strh	r2, [r4, #12]
 800528e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005296:	4a66      	ldr	r2, [pc, #408]	; (8005430 <problem_fetch+0x3d48>)
 8005298:	461c      	mov	r4, r3
 800529a:	4613      	mov	r3, r2
 800529c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800529e:	6020      	str	r0, [r4, #0]
 80052a0:	6061      	str	r1, [r4, #4]
 80052a2:	60a2      	str	r2, [r4, #8]
			break;
 80052a4:	f017 b950 	b.w	801c548 <problem_fetch+0x1ae60>
		case 91 :
			strcpy(p->name,"BLACKER");
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80052ae:	4961      	ldr	r1, [pc, #388]	; (8005434 <problem_fetch+0x3d4c>)
 80052b0:	461a      	mov	r2, r3
 80052b2:	460b      	mov	r3, r1
 80052b4:	cb03      	ldmia	r3!, {r0, r1}
 80052b6:	6010      	str	r0, [r2, #0]
 80052b8:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80052c0:	4a5d      	ldr	r2, [pc, #372]	; (8005438 <problem_fetch+0x3d50>)
 80052c2:	8811      	ldrh	r1, [r2, #0]
 80052c4:	7892      	ldrb	r2, [r2, #2]
 80052c6:	8019      	strh	r1, [r3, #0]
 80052c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2206      	movs	r2, #6
 80052ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,H,C,H,D");
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	33a4      	adds	r3, #164	; 0xa4
 80052d4:	4a59      	ldr	r2, [pc, #356]	; (800543c <problem_fetch+0x3d54>)
 80052d6:	461c      	mov	r4, r3
 80052d8:	4613      	mov	r3, r2
 80052da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80052dc:	6020      	str	r0, [r4, #0]
 80052de:	6061      	str	r1, [r4, #4]
 80052e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,10,13,16,18");
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <problem_fetch+0x3d58>)
 80052e8:	461c      	mov	r4, r3
 80052ea:	4615      	mov	r5, r2
 80052ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ee:	6020      	str	r0, [r4, #0]
 80052f0:	6061      	str	r1, [r4, #4]
 80052f2:	60a2      	str	r2, [r4, #8]
 80052f4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80052fc:	4a4c      	ldr	r2, [pc, #304]	; (8005430 <problem_fetch+0x3d48>)
 80052fe:	461c      	mov	r4, r3
 8005300:	4613      	mov	r3, r2
 8005302:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005304:	6020      	str	r0, [r4, #0]
 8005306:	6061      	str	r1, [r4, #4]
 8005308:	60a2      	str	r2, [r4, #8]
			break;
 800530a:	f017 b91d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 92 :
			strcpy(p->name,"DURANGO TANGO");
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005314:	4a4b      	ldr	r2, [pc, #300]	; (8005444 <problem_fetch+0x3d5c>)
 8005316:	461c      	mov	r4, r3
 8005318:	4613      	mov	r3, r2
 800531a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800531c:	6020      	str	r0, [r4, #0]
 800531e:	6061      	str	r1, [r4, #4]
 8005320:	60a2      	str	r2, [r4, #8]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800532c:	4a46      	ldr	r2, [pc, #280]	; (8005448 <problem_fetch+0x3d60>)
 800532e:	6810      	ldr	r0, [r2, #0]
 8005330:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2207      	movs	r2, #7
 8005336:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,E,G,H,I");
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	33a4      	adds	r3, #164	; 0xa4
 800533c:	4a43      	ldr	r2, [pc, #268]	; (800544c <problem_fetch+0x3d64>)
 800533e:	461c      	mov	r4, r3
 8005340:	4613      	mov	r3, r2
 8005342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005344:	6020      	str	r0, [r4, #0]
 8005346:	6061      	str	r1, [r4, #4]
 8005348:	60a2      	str	r2, [r4, #8]
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,12,9,15,16,18");
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	4a3f      	ldr	r2, [pc, #252]	; (8005450 <problem_fetch+0x3d68>)
 8005354:	461d      	mov	r5, r3
 8005356:	4614      	mov	r4, r2
 8005358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800535a:	6028      	str	r0, [r5, #0]
 800535c:	6069      	str	r1, [r5, #4]
 800535e:	60aa      	str	r2, [r5, #8]
 8005360:	60eb      	str	r3, [r5, #12]
 8005362:	8823      	ldrh	r3, [r4, #0]
 8005364:	78a2      	ldrb	r2, [r4, #2]
 8005366:	822b      	strh	r3, [r5, #16]
 8005368:	4613      	mov	r3, r2
 800536a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005372:	4a2a      	ldr	r2, [pc, #168]	; (800541c <problem_fetch+0x3d34>)
 8005374:	461c      	mov	r4, r3
 8005376:	4613      	mov	r3, r2
 8005378:	cb07      	ldmia	r3!, {r0, r1, r2}
 800537a:	6020      	str	r0, [r4, #0]
 800537c:	6061      	str	r1, [r4, #4]
 800537e:	60a2      	str	r2, [r4, #8]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	81a3      	strh	r3, [r4, #12]
			break;
 8005384:	f017 b8e0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 93 :
			strcpy(p->name,"DARK MAGIC");
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800538e:	4931      	ldr	r1, [pc, #196]	; (8005454 <problem_fetch+0x3d6c>)
 8005390:	461a      	mov	r2, r3
 8005392:	460b      	mov	r3, r1
 8005394:	cb03      	ldmia	r3!, {r0, r1}
 8005396:	6010      	str	r0, [r2, #0]
 8005398:	6051      	str	r1, [r2, #4]
 800539a:	8819      	ldrh	r1, [r3, #0]
 800539c:	789b      	ldrb	r3, [r3, #2]
 800539e:	8111      	strh	r1, [r2, #8]
 80053a0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <problem_fetch+0x3d70>)
 80053aa:	6810      	ldr	r0, [r2, #0]
 80053ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2205      	movs	r2, #5
 80053b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,E,I");
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	33a4      	adds	r3, #164	; 0xa4
 80053b8:	4928      	ldr	r1, [pc, #160]	; (800545c <problem_fetch+0x3d74>)
 80053ba:	461a      	mov	r2, r3
 80053bc:	460b      	mov	r3, r1
 80053be:	cb03      	ldmia	r3!, {r0, r1}
 80053c0:	6010      	str	r0, [r2, #0]
 80053c2:	6051      	str	r1, [r2, #4]
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4a24      	ldr	r2, [pc, #144]	; (8005460 <problem_fetch+0x3d78>)
 80053ce:	461c      	mov	r4, r3
 80053d0:	4613      	mov	r3, r2
 80053d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80053d4:	6020      	str	r0, [r4, #0]
 80053d6:	6061      	str	r1, [r4, #4]
 80053d8:	60a2      	str	r2, [r4, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80053e4:	491f      	ldr	r1, [pc, #124]	; (8005464 <problem_fetch+0x3d7c>)
 80053e6:	461a      	mov	r2, r3
 80053e8:	460b      	mov	r3, r1
 80053ea:	cb03      	ldmia	r3!, {r0, r1}
 80053ec:	6010      	str	r0, [r2, #0]
 80053ee:	6051      	str	r1, [r2, #4]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	8113      	strh	r3, [r2, #8]
			break;
 80053f4:	f017 b8a8 	b.w	801c548 <problem_fetch+0x1ae60>
 80053f8:	08024b7c 	.word	0x08024b7c
 80053fc:	0802395c 	.word	0x0802395c
 8005400:	08024b8c 	.word	0x08024b8c
 8005404:	08024b9c 	.word	0x08024b9c
 8005408:	080239d4 	.word	0x080239d4
 800540c:	08024bb0 	.word	0x08024bb0
 8005410:	08024054 	.word	0x08024054
 8005414:	08024bb8 	.word	0x08024bb8
 8005418:	08024bc8 	.word	0x08024bc8
 800541c:	08023ae4 	.word	0x08023ae4
 8005420:	08024bdc 	.word	0x08024bdc
 8005424:	08023a28 	.word	0x08023a28
 8005428:	08024be8 	.word	0x08024be8
 800542c:	08023a04 	.word	0x08023a04
 8005430:	0802393c 	.word	0x0802393c
 8005434:	08024bf4 	.word	0x08024bf4
 8005438:	0802391c 	.word	0x0802391c
 800543c:	08024bfc 	.word	0x08024bfc
 8005440:	08024c08 	.word	0x08024c08
 8005444:	08024c18 	.word	0x08024c18
 8005448:	080239f4 	.word	0x080239f4
 800544c:	08024c28 	.word	0x08024c28
 8005450:	08024c38 	.word	0x08024c38
 8005454:	08024c4c 	.word	0x08024c4c
 8005458:	08023a98 	.word	0x08023a98
 800545c:	08024c58 	.word	0x08024c58
 8005460:	08024c64 	.word	0x08024c64
 8005464:	08023e28 	.word	0x08023e28
		case 94 :
			strcpy(p->name,"LITTLE DIDDY");
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800546e:	4ab0      	ldr	r2, [pc, #704]	; (8005730 <problem_fetch+0x4048>)
 8005470:	461c      	mov	r4, r3
 8005472:	4613      	mov	r3, r2
 8005474:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005476:	6020      	str	r0, [r4, #0]
 8005478:	6061      	str	r1, [r4, #4]
 800547a:	60a2      	str	r2, [r4, #8]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005486:	4aab      	ldr	r2, [pc, #684]	; (8005734 <problem_fetch+0x404c>)
 8005488:	6810      	ldr	r0, [r2, #0]
 800548a:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	220a      	movs	r2, #10
 8005490:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,D,B,F,J,K,J,I");
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	33a4      	adds	r3, #164	; 0xa4
 8005496:	4aa8      	ldr	r2, [pc, #672]	; (8005738 <problem_fetch+0x4050>)
 8005498:	461d      	mov	r5, r3
 800549a:	4614      	mov	r4, r2
 800549c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800549e:	6028      	str	r0, [r5, #0]
 80054a0:	6069      	str	r1, [r5, #4]
 80054a2:	60aa      	str	r2, [r5, #8]
 80054a4:	60eb      	str	r3, [r5, #12]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,9,11,12,13,12,9,16,18");
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4aa3      	ldr	r2, [pc, #652]	; (800573c <problem_fetch+0x4054>)
 80054b0:	461d      	mov	r5, r3
 80054b2:	4614      	mov	r4, r2
 80054b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b6:	6028      	str	r0, [r5, #0]
 80054b8:	6069      	str	r1, [r5, #4]
 80054ba:	60aa      	str	r2, [r5, #8]
 80054bc:	60eb      	str	r3, [r5, #12]
 80054be:	cc03      	ldmia	r4!, {r0, r1}
 80054c0:	6128      	str	r0, [r5, #16]
 80054c2:	6169      	str	r1, [r5, #20]
 80054c4:	8823      	ldrh	r3, [r4, #0]
 80054c6:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80054ce:	4a9c      	ldr	r2, [pc, #624]	; (8005740 <problem_fetch+0x4058>)
 80054d0:	461d      	mov	r5, r3
 80054d2:	4614      	mov	r4, r2
 80054d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054d6:	6028      	str	r0, [r5, #0]
 80054d8:	6069      	str	r1, [r5, #4]
 80054da:	60aa      	str	r2, [r5, #8]
 80054dc:	60eb      	str	r3, [r5, #12]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	6128      	str	r0, [r5, #16]
			break;
 80054e2:	f017 b831 	b.w	801c548 <problem_fetch+0x1ae60>
		case 95 :
			strcpy(p->name,"MOMOGO");
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80054ec:	4a95      	ldr	r2, [pc, #596]	; (8005744 <problem_fetch+0x405c>)
 80054ee:	6810      	ldr	r0, [r2, #0]
 80054f0:	6018      	str	r0, [r3, #0]
 80054f2:	8891      	ldrh	r1, [r2, #4]
 80054f4:	7992      	ldrb	r2, [r2, #6]
 80054f6:	8099      	strh	r1, [r3, #4]
 80054f8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005500:	4a91      	ldr	r2, [pc, #580]	; (8005748 <problem_fetch+0x4060>)
 8005502:	6810      	ldr	r0, [r2, #0]
 8005504:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2209      	movs	r2, #9
 800550a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,I,J,F,I,H,I");
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	33a4      	adds	r3, #164	; 0xa4
 8005510:	4a8e      	ldr	r2, [pc, #568]	; (800574c <problem_fetch+0x4064>)
 8005512:	461d      	mov	r5, r3
 8005514:	4614      	mov	r4, r2
 8005516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005518:	6028      	str	r0, [r5, #0]
 800551a:	6069      	str	r1, [r5, #4]
 800551c:	60aa      	str	r2, [r5, #8]
 800551e:	60eb      	str	r3, [r5, #12]
 8005520:	8823      	ldrh	r3, [r4, #0]
 8005522:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,10,12,13,14,16,18");
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4a89      	ldr	r2, [pc, #548]	; (8005750 <problem_fetch+0x4068>)
 800552a:	461d      	mov	r5, r3
 800552c:	4614      	mov	r4, r2
 800552e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005530:	6028      	str	r0, [r5, #0]
 8005532:	6069      	str	r1, [r5, #4]
 8005534:	60aa      	str	r2, [r5, #8]
 8005536:	60eb      	str	r3, [r5, #12]
 8005538:	cc03      	ldmia	r4!, {r0, r1}
 800553a:	6128      	str	r0, [r5, #16]
 800553c:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005544:	4a83      	ldr	r2, [pc, #524]	; (8005754 <problem_fetch+0x406c>)
 8005546:	461d      	mov	r5, r3
 8005548:	4614      	mov	r4, r2
 800554a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800554c:	6028      	str	r0, [r5, #0]
 800554e:	6069      	str	r1, [r5, #4]
 8005550:	60aa      	str	r2, [r5, #8]
 8005552:	60eb      	str	r3, [r5, #12]
 8005554:	8823      	ldrh	r3, [r4, #0]
 8005556:	822b      	strh	r3, [r5, #16]
			break;
 8005558:	f016 bff6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 96 :
			strcpy(p->name,"COW FUNK");
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005562:	497d      	ldr	r1, [pc, #500]	; (8005758 <problem_fetch+0x4070>)
 8005564:	461a      	mov	r2, r3
 8005566:	460b      	mov	r3, r1
 8005568:	cb03      	ldmia	r3!, {r0, r1}
 800556a:	6010      	str	r0, [r2, #0]
 800556c:	6051      	str	r1, [r2, #4]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005578:	4a73      	ldr	r2, [pc, #460]	; (8005748 <problem_fetch+0x4060>)
 800557a:	6810      	ldr	r0, [r2, #0]
 800557c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D");
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	33a4      	adds	r3, #164	; 0xa4
 8005588:	4a74      	ldr	r2, [pc, #464]	; (800575c <problem_fetch+0x4074>)
 800558a:	461c      	mov	r4, r3
 800558c:	4613      	mov	r3, r2
 800558e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005590:	6020      	str	r0, [r4, #0]
 8005592:	6061      	str	r1, [r4, #4]
 8005594:	60a2      	str	r2, [r4, #8]
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,18");
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	4a70      	ldr	r2, [pc, #448]	; (8005760 <problem_fetch+0x4078>)
 80055a0:	461d      	mov	r5, r3
 80055a2:	4614      	mov	r4, r2
 80055a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055a6:	6028      	str	r0, [r5, #0]
 80055a8:	6069      	str	r1, [r5, #4]
 80055aa:	60aa      	str	r2, [r5, #8]
 80055ac:	60eb      	str	r3, [r5, #12]
 80055ae:	7823      	ldrb	r3, [r4, #0]
 80055b0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80055b8:	4a6a      	ldr	r2, [pc, #424]	; (8005764 <problem_fetch+0x407c>)
 80055ba:	461c      	mov	r4, r3
 80055bc:	4613      	mov	r3, r2
 80055be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80055c0:	6020      	str	r0, [r4, #0]
 80055c2:	6061      	str	r1, [r4, #4]
 80055c4:	60a2      	str	r2, [r4, #8]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	81a3      	strh	r3, [r4, #12]
			break;
 80055ca:	f016 bfbd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 97 :
			strcpy(p->name,"CERBERO");
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80055d4:	4964      	ldr	r1, [pc, #400]	; (8005768 <problem_fetch+0x4080>)
 80055d6:	461a      	mov	r2, r3
 80055d8:	460b      	mov	r3, r1
 80055da:	cb03      	ldmia	r3!, {r0, r1}
 80055dc:	6010      	str	r0, [r2, #0]
 80055de:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055e6:	4a61      	ldr	r2, [pc, #388]	; (800576c <problem_fetch+0x4084>)
 80055e8:	8811      	ldrh	r1, [r2, #0]
 80055ea:	7892      	ldrb	r2, [r2, #2]
 80055ec:	8019      	strh	r1, [r3, #0]
 80055ee:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2205      	movs	r2, #5
 80055f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,K,I");
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	33a4      	adds	r3, #164	; 0xa4
 80055fa:	495d      	ldr	r1, [pc, #372]	; (8005770 <problem_fetch+0x4088>)
 80055fc:	461a      	mov	r2, r3
 80055fe:	460b      	mov	r3, r1
 8005600:	cb03      	ldmia	r3!, {r0, r1}
 8005602:	6010      	str	r0, [r2, #0]
 8005604:	6051      	str	r1, [r2, #4]
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,14,18");
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	4a59      	ldr	r2, [pc, #356]	; (8005774 <problem_fetch+0x408c>)
 8005610:	461c      	mov	r4, r3
 8005612:	4613      	mov	r3, r2
 8005614:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005616:	6020      	str	r0, [r4, #0]
 8005618:	6061      	str	r1, [r4, #4]
 800561a:	60a2      	str	r2, [r4, #8]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005626:	4954      	ldr	r1, [pc, #336]	; (8005778 <problem_fetch+0x4090>)
 8005628:	461a      	mov	r2, r3
 800562a:	460b      	mov	r3, r1
 800562c:	cb03      	ldmia	r3!, {r0, r1}
 800562e:	6010      	str	r0, [r2, #0]
 8005630:	6051      	str	r1, [r2, #4]
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	8113      	strh	r3, [r2, #8]
			break;
 8005636:	f016 bf87 	b.w	801c548 <problem_fetch+0x1ae60>
		case 98 :
			strcpy(p->name,"ZONED IN (H10 FOOT ONLY)");
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005640:	4a4e      	ldr	r2, [pc, #312]	; (800577c <problem_fetch+0x4094>)
 8005642:	461d      	mov	r5, r3
 8005644:	4614      	mov	r4, r2
 8005646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005648:	6028      	str	r0, [r5, #0]
 800564a:	6069      	str	r1, [r5, #4]
 800564c:	60aa      	str	r2, [r5, #8]
 800564e:	60eb      	str	r3, [r5, #12]
 8005650:	cc03      	ldmia	r4!, {r0, r1}
 8005652:	6128      	str	r0, [r5, #16]
 8005654:	6169      	str	r1, [r5, #20]
 8005656:	7823      	ldrb	r3, [r4, #0]
 8005658:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005660:	4a39      	ldr	r2, [pc, #228]	; (8005748 <problem_fetch+0x4060>)
 8005662:	6810      	ldr	r0, [r2, #0]
 8005664:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2209      	movs	r2, #9
 800566a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,C,F,C,E,D");
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	33a4      	adds	r3, #164	; 0xa4
 8005670:	4a43      	ldr	r2, [pc, #268]	; (8005780 <problem_fetch+0x4098>)
 8005672:	461d      	mov	r5, r3
 8005674:	4614      	mov	r4, r2
 8005676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005678:	6028      	str	r0, [r5, #0]
 800567a:	6069      	str	r1, [r5, #4]
 800567c:	60aa      	str	r2, [r5, #8]
 800567e:	60eb      	str	r3, [r5, #12]
 8005680:	8823      	ldrh	r3, [r4, #0]
 8005682:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,8,11,13,16,18");
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	4a3e      	ldr	r2, [pc, #248]	; (8005784 <problem_fetch+0x409c>)
 800568a:	461c      	mov	r4, r3
 800568c:	4615      	mov	r5, r2
 800568e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005690:	6020      	str	r0, [r4, #0]
 8005692:	6061      	str	r1, [r4, #4]
 8005694:	60a2      	str	r2, [r4, #8]
 8005696:	60e3      	str	r3, [r4, #12]
 8005698:	6828      	ldr	r0, [r5, #0]
 800569a:	6120      	str	r0, [r4, #16]
 800569c:	88ab      	ldrh	r3, [r5, #4]
 800569e:	79aa      	ldrb	r2, [r5, #6]
 80056a0:	82a3      	strh	r3, [r4, #20]
 80056a2:	4613      	mov	r3, r2
 80056a4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80056ac:	4a29      	ldr	r2, [pc, #164]	; (8005754 <problem_fetch+0x406c>)
 80056ae:	461d      	mov	r5, r3
 80056b0:	4614      	mov	r4, r2
 80056b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b4:	6028      	str	r0, [r5, #0]
 80056b6:	6069      	str	r1, [r5, #4]
 80056b8:	60aa      	str	r2, [r5, #8]
 80056ba:	60eb      	str	r3, [r5, #12]
 80056bc:	8823      	ldrh	r3, [r4, #0]
 80056be:	822b      	strh	r3, [r5, #16]
			break;
 80056c0:	f016 bf42 	b.w	801c548 <problem_fetch+0x1ae60>
		case 99 :
			strcpy(p->name,"FLAPJACKS");
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80056ca:	492f      	ldr	r1, [pc, #188]	; (8005788 <problem_fetch+0x40a0>)
 80056cc:	461a      	mov	r2, r3
 80056ce:	460b      	mov	r3, r1
 80056d0:	cb03      	ldmia	r3!, {r0, r1}
 80056d2:	6010      	str	r0, [r2, #0]
 80056d4:	6051      	str	r1, [r2, #4]
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <problem_fetch+0x4060>)
 80056e2:	6810      	ldr	r0, [r2, #0]
 80056e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2206      	movs	r2, #6
 80056ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,E,A");
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	33a4      	adds	r3, #164	; 0xa4
 80056f0:	4a26      	ldr	r2, [pc, #152]	; (800578c <problem_fetch+0x40a4>)
 80056f2:	461c      	mov	r4, r3
 80056f4:	4613      	mov	r3, r2
 80056f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80056f8:	6020      	str	r0, [r4, #0]
 80056fa:	6061      	str	r1, [r4, #4]
 80056fc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,14,18");
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	4a23      	ldr	r2, [pc, #140]	; (8005790 <problem_fetch+0x40a8>)
 8005704:	461c      	mov	r4, r3
 8005706:	4613      	mov	r3, r2
 8005708:	cb07      	ldmia	r3!, {r0, r1, r2}
 800570a:	6020      	str	r0, [r4, #0]
 800570c:	6061      	str	r1, [r4, #4]
 800570e:	60a2      	str	r2, [r4, #8]
 8005710:	881a      	ldrh	r2, [r3, #0]
 8005712:	789b      	ldrb	r3, [r3, #2]
 8005714:	81a2      	strh	r2, [r4, #12]
 8005716:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <problem_fetch+0x40ac>)
 8005720:	461c      	mov	r4, r3
 8005722:	4613      	mov	r3, r2
 8005724:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005726:	6020      	str	r0, [r4, #0]
 8005728:	6061      	str	r1, [r4, #4]
 800572a:	60a2      	str	r2, [r4, #8]
			break;
 800572c:	f016 bf0c 	b.w	801c548 <problem_fetch+0x1ae60>
 8005730:	08024c74 	.word	0x08024c74
 8005734:	08023a98 	.word	0x08023a98
 8005738:	08024c84 	.word	0x08024c84
 800573c:	08024c98 	.word	0x08024c98
 8005740:	08024cb4 	.word	0x08024cb4
 8005744:	08024cc8 	.word	0x08024cc8
 8005748:	0802395c 	.word	0x0802395c
 800574c:	08024cd0 	.word	0x08024cd0
 8005750:	08024ce4 	.word	0x08024ce4
 8005754:	08024940 	.word	0x08024940
 8005758:	08024cfc 	.word	0x08024cfc
 800575c:	08024d08 	.word	0x08024d08
 8005760:	08024d18 	.word	0x08024d18
 8005764:	08023ae4 	.word	0x08023ae4
 8005768:	08024d2c 	.word	0x08024d2c
 800576c:	0802391c 	.word	0x0802391c
 8005770:	08024d34 	.word	0x08024d34
 8005774:	08024d40 	.word	0x08024d40
 8005778:	08023e28 	.word	0x08023e28
 800577c:	08024d50 	.word	0x08024d50
 8005780:	08024d6c 	.word	0x08024d6c
 8005784:	08024d80 	.word	0x08024d80
 8005788:	08024d98 	.word	0x08024d98
 800578c:	08024da4 	.word	0x08024da4
 8005790:	08024db0 	.word	0x08024db0
 8005794:	0802393c 	.word	0x0802393c
		case 100 :
			strcpy(p->name,"TESTJ");
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800579e:	4abd      	ldr	r2, [pc, #756]	; (8005a94 <problem_fetch+0x43ac>)
 80057a0:	6810      	ldr	r0, [r2, #0]
 80057a2:	6018      	str	r0, [r3, #0]
 80057a4:	8892      	ldrh	r2, [r2, #4]
 80057a6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80057ae:	4aba      	ldr	r2, [pc, #744]	; (8005a98 <problem_fetch+0x43b0>)
 80057b0:	6810      	ldr	r0, [r2, #0]
 80057b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2209      	movs	r2, #9
 80057b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,E,G,D,A");
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	33a4      	adds	r3, #164	; 0xa4
 80057be:	4ab7      	ldr	r2, [pc, #732]	; (8005a9c <problem_fetch+0x43b4>)
 80057c0:	461d      	mov	r5, r3
 80057c2:	4614      	mov	r4, r2
 80057c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057c6:	6028      	str	r0, [r5, #0]
 80057c8:	6069      	str	r1, [r5, #4]
 80057ca:	60aa      	str	r2, [r5, #8]
 80057cc:	60eb      	str	r3, [r5, #12]
 80057ce:	8823      	ldrh	r3, [r4, #0]
 80057d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,14,17,18,14");
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4ab2      	ldr	r2, [pc, #712]	; (8005aa0 <problem_fetch+0x43b8>)
 80057d8:	461d      	mov	r5, r3
 80057da:	4614      	mov	r4, r2
 80057dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057de:	6028      	str	r0, [r5, #0]
 80057e0:	6069      	str	r1, [r5, #4]
 80057e2:	60aa      	str	r2, [r5, #8]
 80057e4:	60eb      	str	r3, [r5, #12]
 80057e6:	cc03      	ldmia	r4!, {r0, r1}
 80057e8:	6128      	str	r0, [r5, #16]
 80057ea:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80057f2:	4aac      	ldr	r2, [pc, #688]	; (8005aa4 <problem_fetch+0x43bc>)
 80057f4:	461d      	mov	r5, r3
 80057f6:	4614      	mov	r4, r2
 80057f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057fa:	6028      	str	r0, [r5, #0]
 80057fc:	6069      	str	r1, [r5, #4]
 80057fe:	60aa      	str	r2, [r5, #8]
 8005800:	60eb      	str	r3, [r5, #12]
 8005802:	8823      	ldrh	r3, [r4, #0]
 8005804:	822b      	strh	r3, [r5, #16]
			break;
 8005806:	f016 be9f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 101 :
			strcpy(p->name,"MISSILE");
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005810:	49a5      	ldr	r1, [pc, #660]	; (8005aa8 <problem_fetch+0x43c0>)
 8005812:	461a      	mov	r2, r3
 8005814:	460b      	mov	r3, r1
 8005816:	cb03      	ldmia	r3!, {r0, r1}
 8005818:	6010      	str	r0, [r2, #0]
 800581a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005822:	4aa2      	ldr	r2, [pc, #648]	; (8005aac <problem_fetch+0x43c4>)
 8005824:	8811      	ldrh	r1, [r2, #0]
 8005826:	7892      	ldrb	r2, [r2, #2]
 8005828:	8019      	strh	r1, [r3, #0]
 800582a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2207      	movs	r2, #7
 8005830:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,B,E,C,D");
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	33a4      	adds	r3, #164	; 0xa4
 8005836:	4a9e      	ldr	r2, [pc, #632]	; (8005ab0 <problem_fetch+0x43c8>)
 8005838:	461c      	mov	r4, r3
 800583a:	4613      	mov	r3, r2
 800583c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800583e:	6020      	str	r0, [r4, #0]
 8005840:	6061      	str	r1, [r4, #4]
 8005842:	60a2      	str	r2, [r4, #8]
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,12,13,18");
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4a99      	ldr	r2, [pc, #612]	; (8005ab4 <problem_fetch+0x43cc>)
 800584e:	461d      	mov	r5, r3
 8005850:	4614      	mov	r4, r2
 8005852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005854:	6028      	str	r0, [r5, #0]
 8005856:	6069      	str	r1, [r5, #4]
 8005858:	60aa      	str	r2, [r5, #8]
 800585a:	60eb      	str	r3, [r5, #12]
 800585c:	8823      	ldrh	r3, [r4, #0]
 800585e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005866:	4a94      	ldr	r2, [pc, #592]	; (8005ab8 <problem_fetch+0x43d0>)
 8005868:	461c      	mov	r4, r3
 800586a:	4613      	mov	r3, r2
 800586c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800586e:	6020      	str	r0, [r4, #0]
 8005870:	6061      	str	r1, [r4, #4]
 8005872:	60a2      	str	r2, [r4, #8]
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	81a3      	strh	r3, [r4, #12]
			break;
 8005878:	f016 be66 	b.w	801c548 <problem_fetch+0x1ae60>
		case 102 :
			strcpy(p->name,"MOFOS");
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005882:	4a8e      	ldr	r2, [pc, #568]	; (8005abc <problem_fetch+0x43d4>)
 8005884:	6810      	ldr	r0, [r2, #0]
 8005886:	6018      	str	r0, [r3, #0]
 8005888:	8892      	ldrh	r2, [r2, #4]
 800588a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005892:	4a8b      	ldr	r2, [pc, #556]	; (8005ac0 <problem_fetch+0x43d8>)
 8005894:	8811      	ldrh	r1, [r2, #0]
 8005896:	7892      	ldrb	r2, [r2, #2]
 8005898:	8019      	strh	r1, [r3, #0]
 800589a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2206      	movs	r2, #6
 80058a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,C,D,D");
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	33a4      	adds	r3, #164	; 0xa4
 80058a6:	4a87      	ldr	r2, [pc, #540]	; (8005ac4 <problem_fetch+0x43dc>)
 80058a8:	461c      	mov	r4, r3
 80058aa:	4613      	mov	r3, r2
 80058ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058ae:	6020      	str	r0, [r4, #0]
 80058b0:	6061      	str	r1, [r4, #4]
 80058b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,13,15,18");
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4a83      	ldr	r2, [pc, #524]	; (8005ac8 <problem_fetch+0x43e0>)
 80058ba:	461c      	mov	r4, r3
 80058bc:	4615      	mov	r5, r2
 80058be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c0:	6020      	str	r0, [r4, #0]
 80058c2:	6061      	str	r1, [r4, #4]
 80058c4:	60a2      	str	r2, [r4, #8]
 80058c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80058ce:	4a7f      	ldr	r2, [pc, #508]	; (8005acc <problem_fetch+0x43e4>)
 80058d0:	461c      	mov	r4, r3
 80058d2:	4613      	mov	r3, r2
 80058d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058d6:	6020      	str	r0, [r4, #0]
 80058d8:	6061      	str	r1, [r4, #4]
 80058da:	60a2      	str	r2, [r4, #8]
			break;
 80058dc:	f016 be34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 103 :
			strcpy(p->name,"LI VARDASCI");
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80058e6:	4a7a      	ldr	r2, [pc, #488]	; (8005ad0 <problem_fetch+0x43e8>)
 80058e8:	461c      	mov	r4, r3
 80058ea:	4613      	mov	r3, r2
 80058ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058ee:	6020      	str	r0, [r4, #0]
 80058f0:	6061      	str	r1, [r4, #4]
 80058f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80058fa:	4a76      	ldr	r2, [pc, #472]	; (8005ad4 <problem_fetch+0x43ec>)
 80058fc:	8811      	ldrh	r1, [r2, #0]
 80058fe:	7892      	ldrb	r2, [r2, #2]
 8005900:	8019      	strh	r1, [r3, #0]
 8005902:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2204      	movs	r2, #4
 8005908:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,D");
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	33a4      	adds	r3, #164	; 0xa4
 800590e:	4972      	ldr	r1, [pc, #456]	; (8005ad8 <problem_fetch+0x43f0>)
 8005910:	461a      	mov	r2, r3
 8005912:	460b      	mov	r3, r1
 8005914:	cb03      	ldmia	r3!, {r0, r1}
 8005916:	6010      	str	r0, [r2, #0]
 8005918:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	3304      	adds	r3, #4
 800591e:	496f      	ldr	r1, [pc, #444]	; (8005adc <problem_fetch+0x43f4>)
 8005920:	461a      	mov	r2, r3
 8005922:	460b      	mov	r3, r1
 8005924:	cb03      	ldmia	r3!, {r0, r1}
 8005926:	6010      	str	r0, [r2, #0]
 8005928:	6051      	str	r1, [r2, #4]
 800592a:	8819      	ldrh	r1, [r3, #0]
 800592c:	789b      	ldrb	r3, [r3, #2]
 800592e:	8111      	strh	r1, [r2, #8]
 8005930:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005938:	4969      	ldr	r1, [pc, #420]	; (8005ae0 <problem_fetch+0x43f8>)
 800593a:	461a      	mov	r2, r3
 800593c:	460b      	mov	r3, r1
 800593e:	cb03      	ldmia	r3!, {r0, r1}
 8005940:	6010      	str	r0, [r2, #0]
 8005942:	6051      	str	r1, [r2, #4]
			break;
 8005944:	f016 be00 	b.w	801c548 <problem_fetch+0x1ae60>
		case 104 :
			strcpy(p->name,"LA FRICHINA");
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800594e:	4a65      	ldr	r2, [pc, #404]	; (8005ae4 <problem_fetch+0x43fc>)
 8005950:	461c      	mov	r4, r3
 8005952:	4613      	mov	r3, r2
 8005954:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005956:	6020      	str	r0, [r4, #0]
 8005958:	6061      	str	r1, [r4, #4]
 800595a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005962:	4a52      	ldr	r2, [pc, #328]	; (8005aac <problem_fetch+0x43c4>)
 8005964:	8811      	ldrh	r1, [r2, #0]
 8005966:	7892      	ldrb	r2, [r2, #2]
 8005968:	8019      	strh	r1, [r3, #0]
 800596a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2205      	movs	r2, #5
 8005970:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,H,I");
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	33a4      	adds	r3, #164	; 0xa4
 8005976:	495c      	ldr	r1, [pc, #368]	; (8005ae8 <problem_fetch+0x4400>)
 8005978:	461a      	mov	r2, r3
 800597a:	460b      	mov	r3, r1
 800597c:	cb03      	ldmia	r3!, {r0, r1}
 800597e:	6010      	str	r0, [r2, #0]
 8005980:	6051      	str	r1, [r2, #4]
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,14,13,18");
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	4a58      	ldr	r2, [pc, #352]	; (8005aec <problem_fetch+0x4404>)
 800598c:	461c      	mov	r4, r3
 800598e:	4613      	mov	r3, r2
 8005990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005992:	6020      	str	r0, [r4, #0]
 8005994:	6061      	str	r1, [r4, #4]
 8005996:	60a2      	str	r2, [r4, #8]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80059a2:	4953      	ldr	r1, [pc, #332]	; (8005af0 <problem_fetch+0x4408>)
 80059a4:	461a      	mov	r2, r3
 80059a6:	460b      	mov	r3, r1
 80059a8:	cb03      	ldmia	r3!, {r0, r1}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	6051      	str	r1, [r2, #4]
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	8113      	strh	r3, [r2, #8]
			break;
 80059b2:	f016 bdc9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 105 :
			strcpy(p->name,"BLACKNANA OLDNANA");
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80059bc:	4a4d      	ldr	r2, [pc, #308]	; (8005af4 <problem_fetch+0x440c>)
 80059be:	461d      	mov	r5, r3
 80059c0:	4614      	mov	r4, r2
 80059c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059c4:	6028      	str	r0, [r5, #0]
 80059c6:	6069      	str	r1, [r5, #4]
 80059c8:	60aa      	str	r2, [r5, #8]
 80059ca:	60eb      	str	r3, [r5, #12]
 80059cc:	8823      	ldrh	r3, [r4, #0]
 80059ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80059d6:	4a48      	ldr	r2, [pc, #288]	; (8005af8 <problem_fetch+0x4410>)
 80059d8:	6810      	ldr	r0, [r2, #0]
 80059da:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2206      	movs	r2, #6
 80059e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,H,D,D");
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	33a4      	adds	r3, #164	; 0xa4
 80059e6:	4a45      	ldr	r2, [pc, #276]	; (8005afc <problem_fetch+0x4414>)
 80059e8:	461c      	mov	r4, r3
 80059ea:	4613      	mov	r3, r2
 80059ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80059ee:	6020      	str	r0, [r4, #0]
 80059f0:	6061      	str	r1, [r4, #4]
 80059f2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,13,15,18");
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4a41      	ldr	r2, [pc, #260]	; (8005b00 <problem_fetch+0x4418>)
 80059fa:	461c      	mov	r4, r3
 80059fc:	4615      	mov	r5, r2
 80059fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a00:	6020      	str	r0, [r4, #0]
 8005a02:	6061      	str	r1, [r4, #4]
 8005a04:	60a2      	str	r2, [r4, #8]
 8005a06:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <problem_fetch+0x441c>)
 8005a10:	461c      	mov	r4, r3
 8005a12:	4613      	mov	r3, r2
 8005a14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a16:	6020      	str	r0, [r4, #0]
 8005a18:	6061      	str	r1, [r4, #4]
 8005a1a:	60a2      	str	r2, [r4, #8]
			break;
 8005a1c:	f016 bd94 	b.w	801c548 <problem_fetch+0x1ae60>
		case 106 :
			strcpy(p->name,"MONOLITH");
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005a26:	4938      	ldr	r1, [pc, #224]	; (8005b08 <problem_fetch+0x4420>)
 8005a28:	461a      	mov	r2, r3
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	cb03      	ldmia	r3!, {r0, r1}
 8005a2e:	6010      	str	r0, [r2, #0]
 8005a30:	6051      	str	r1, [r2, #4]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005a3c:	4a16      	ldr	r2, [pc, #88]	; (8005a98 <problem_fetch+0x43b0>)
 8005a3e:	6810      	ldr	r0, [r2, #0]
 8005a40:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2207      	movs	r2, #7
 8005a46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,C,E,D");
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	33a4      	adds	r3, #164	; 0xa4
 8005a4c:	4a2f      	ldr	r2, [pc, #188]	; (8005b0c <problem_fetch+0x4424>)
 8005a4e:	461c      	mov	r4, r3
 8005a50:	4613      	mov	r3, r2
 8005a52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a54:	6020      	str	r0, [r4, #0]
 8005a56:	6061      	str	r1, [r4, #4]
 8005a58:	60a2      	str	r2, [r4, #8]
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <problem_fetch+0x4428>)
 8005a64:	461d      	mov	r5, r3
 8005a66:	4614      	mov	r4, r2
 8005a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a6a:	6028      	str	r0, [r5, #0]
 8005a6c:	6069      	str	r1, [r5, #4]
 8005a6e:	60aa      	str	r2, [r5, #8]
 8005a70:	60eb      	str	r3, [r5, #12]
 8005a72:	8823      	ldrh	r3, [r4, #0]
 8005a74:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005a7c:	4a0e      	ldr	r2, [pc, #56]	; (8005ab8 <problem_fetch+0x43d0>)
 8005a7e:	461c      	mov	r4, r3
 8005a80:	4613      	mov	r3, r2
 8005a82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005a84:	6020      	str	r0, [r4, #0]
 8005a86:	6061      	str	r1, [r4, #4]
 8005a88:	60a2      	str	r2, [r4, #8]
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	81a3      	strh	r3, [r4, #12]
			break;
 8005a8e:	f016 bd5b 	b.w	801c548 <problem_fetch+0x1ae60>
 8005a92:	bf00      	nop
 8005a94:	08024dc0 	.word	0x08024dc0
 8005a98:	0802395c 	.word	0x0802395c
 8005a9c:	08024dc8 	.word	0x08024dc8
 8005aa0:	08024ddc 	.word	0x08024ddc
 8005aa4:	08024df4 	.word	0x08024df4
 8005aa8:	08024e08 	.word	0x08024e08
 8005aac:	0802391c 	.word	0x0802391c
 8005ab0:	08024e10 	.word	0x08024e10
 8005ab4:	08024e20 	.word	0x08024e20
 8005ab8:	08023ae4 	.word	0x08023ae4
 8005abc:	08024e34 	.word	0x08024e34
 8005ac0:	08023a28 	.word	0x08023a28
 8005ac4:	08024e3c 	.word	0x08024e3c
 8005ac8:	08024e48 	.word	0x08024e48
 8005acc:	0802393c 	.word	0x0802393c
 8005ad0:	08024e58 	.word	0x08024e58
 8005ad4:	08024054 	.word	0x08024054
 8005ad8:	08024e64 	.word	0x08024e64
 8005adc:	08024e6c 	.word	0x08024e6c
 8005ae0:	08023ab0 	.word	0x08023ab0
 8005ae4:	08024e78 	.word	0x08024e78
 8005ae8:	08024e84 	.word	0x08024e84
 8005aec:	08024e90 	.word	0x08024e90
 8005af0:	08023e28 	.word	0x08023e28
 8005af4:	08024ea0 	.word	0x08024ea0
 8005af8:	08023a98 	.word	0x08023a98
 8005afc:	08024eb4 	.word	0x08024eb4
 8005b00:	08024ec0 	.word	0x08024ec0
 8005b04:	08023cf8 	.word	0x08023cf8
 8005b08:	08024ed0 	.word	0x08024ed0
 8005b0c:	08024edc 	.word	0x08024edc
 8005b10:	08024eec 	.word	0x08024eec
		case 107 :
			strcpy(p->name,"ZONING IN (ALT. START)");
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b1a:	4ab2      	ldr	r2, [pc, #712]	; (8005de4 <problem_fetch+0x46fc>)
 8005b1c:	461c      	mov	r4, r3
 8005b1e:	4615      	mov	r5, r2
 8005b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	6061      	str	r1, [r4, #4]
 8005b26:	60a2      	str	r2, [r4, #8]
 8005b28:	60e3      	str	r3, [r4, #12]
 8005b2a:	6828      	ldr	r0, [r5, #0]
 8005b2c:	6120      	str	r0, [r4, #16]
 8005b2e:	88ab      	ldrh	r3, [r5, #4]
 8005b30:	79aa      	ldrb	r2, [r5, #6]
 8005b32:	82a3      	strh	r3, [r4, #20]
 8005b34:	4613      	mov	r3, r2
 8005b36:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"6B+");
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005b3e:	4aaa      	ldr	r2, [pc, #680]	; (8005de8 <problem_fetch+0x4700>)
 8005b40:	6810      	ldr	r0, [r2, #0]
 8005b42:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2208      	movs	r2, #8
 8005b48:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,C,E,C,E,D");
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	33a4      	adds	r3, #164	; 0xa4
 8005b4e:	4aa7      	ldr	r2, [pc, #668]	; (8005dec <problem_fetch+0x4704>)
 8005b50:	461c      	mov	r4, r3
 8005b52:	4615      	mov	r5, r2
 8005b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b56:	6020      	str	r0, [r4, #0]
 8005b58:	6061      	str	r1, [r4, #4]
 8005b5a:	60a2      	str	r2, [r4, #8]
 8005b5c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,8,12,13,16,18");
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	4aa3      	ldr	r2, [pc, #652]	; (8005df0 <problem_fetch+0x4708>)
 8005b64:	461d      	mov	r5, r3
 8005b66:	4614      	mov	r4, r2
 8005b68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6a:	6028      	str	r0, [r5, #0]
 8005b6c:	6069      	str	r1, [r5, #4]
 8005b6e:	60aa      	str	r2, [r5, #8]
 8005b70:	60eb      	str	r3, [r5, #12]
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005b7c:	4a9d      	ldr	r2, [pc, #628]	; (8005df4 <problem_fetch+0x470c>)
 8005b7e:	461c      	mov	r4, r3
 8005b80:	4615      	mov	r5, r2
 8005b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b84:	6020      	str	r0, [r4, #0]
 8005b86:	6061      	str	r1, [r4, #4]
 8005b88:	60a2      	str	r2, [r4, #8]
 8005b8a:	60e3      	str	r3, [r4, #12]
			break;
 8005b8c:	f016 bcdc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 108 :
			strcpy(p->name,"ZONING IN");
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005b96:	4998      	ldr	r1, [pc, #608]	; (8005df8 <problem_fetch+0x4710>)
 8005b98:	461a      	mov	r2, r3
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	cb03      	ldmia	r3!, {r0, r1}
 8005b9e:	6010      	str	r0, [r2, #0]
 8005ba0:	6051      	str	r1, [r2, #4]
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005bac:	4a8e      	ldr	r2, [pc, #568]	; (8005de8 <problem_fetch+0x4700>)
 8005bae:	6810      	ldr	r0, [r2, #0]
 8005bb0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,H,C,E,D");
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	33a4      	adds	r3, #164	; 0xa4
 8005bbc:	4a8f      	ldr	r2, [pc, #572]	; (8005dfc <problem_fetch+0x4714>)
 8005bbe:	461c      	mov	r4, r3
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bc4:	6020      	str	r0, [r4, #0]
 8005bc6:	6061      	str	r1, [r4, #4]
 8005bc8:	60a2      	str	r2, [r4, #8]
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,8,13,16,18");
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4a8b      	ldr	r2, [pc, #556]	; (8005e00 <problem_fetch+0x4718>)
 8005bd4:	461d      	mov	r5, r3
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bda:	6028      	str	r0, [r5, #0]
 8005bdc:	6069      	str	r1, [r5, #4]
 8005bde:	60aa      	str	r2, [r5, #8]
 8005be0:	60eb      	str	r3, [r5, #12]
 8005be2:	8823      	ldrh	r3, [r4, #0]
 8005be4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005bec:	4a85      	ldr	r2, [pc, #532]	; (8005e04 <problem_fetch+0x471c>)
 8005bee:	461c      	mov	r4, r3
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005bf4:	6020      	str	r0, [r4, #0]
 8005bf6:	6061      	str	r1, [r4, #4]
 8005bf8:	60a2      	str	r2, [r4, #8]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	81a3      	strh	r3, [r4, #12]
			break;
 8005bfe:	f016 bca3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 109 :
			strcpy(p->name,"ORANGE IS THE NEW BLACK");
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005c08:	4a7f      	ldr	r2, [pc, #508]	; (8005e08 <problem_fetch+0x4720>)
 8005c0a:	461d      	mov	r5, r3
 8005c0c:	4614      	mov	r4, r2
 8005c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c10:	6028      	str	r0, [r5, #0]
 8005c12:	6069      	str	r1, [r5, #4]
 8005c14:	60aa      	str	r2, [r5, #8]
 8005c16:	60eb      	str	r3, [r5, #12]
 8005c18:	cc03      	ldmia	r4!, {r0, r1}
 8005c1a:	6128      	str	r0, [r5, #16]
 8005c1c:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c24:	4a79      	ldr	r2, [pc, #484]	; (8005e0c <problem_fetch+0x4724>)
 8005c26:	8811      	ldrh	r1, [r2, #0]
 8005c28:	7892      	ldrb	r2, [r2, #2]
 8005c2a:	8019      	strh	r1, [r3, #0]
 8005c2c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2206      	movs	r2, #6
 8005c32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,G,C,D");
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	33a4      	adds	r3, #164	; 0xa4
 8005c38:	4a75      	ldr	r2, [pc, #468]	; (8005e10 <problem_fetch+0x4728>)
 8005c3a:	461c      	mov	r4, r3
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c40:	6020      	str	r0, [r4, #0]
 8005c42:	6061      	str	r1, [r4, #4]
 8005c44:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,14,8,18");
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4a72      	ldr	r2, [pc, #456]	; (8005e14 <problem_fetch+0x472c>)
 8005c4c:	461c      	mov	r4, r3
 8005c4e:	4613      	mov	r3, r2
 8005c50:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c52:	6020      	str	r0, [r4, #0]
 8005c54:	6061      	str	r1, [r4, #4]
 8005c56:	60a2      	str	r2, [r4, #8]
 8005c58:	881a      	ldrh	r2, [r3, #0]
 8005c5a:	789b      	ldrb	r3, [r3, #2]
 8005c5c:	81a2      	strh	r2, [r4, #12]
 8005c5e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005c66:	4a6c      	ldr	r2, [pc, #432]	; (8005e18 <problem_fetch+0x4730>)
 8005c68:	461c      	mov	r4, r3
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	6061      	str	r1, [r4, #4]
 8005c72:	60a2      	str	r2, [r4, #8]
			break;
 8005c74:	f016 bc68 	b.w	801c548 <problem_fetch+0x1ae60>
		case 110 :
			strcpy(p->name,"COCA COLA");
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005c7e:	4967      	ldr	r1, [pc, #412]	; (8005e1c <problem_fetch+0x4734>)
 8005c80:	461a      	mov	r2, r3
 8005c82:	460b      	mov	r3, r1
 8005c84:	cb03      	ldmia	r3!, {r0, r1}
 8005c86:	6010      	str	r0, [r2, #0]
 8005c88:	6051      	str	r1, [r2, #4]
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c94:	4a62      	ldr	r2, [pc, #392]	; (8005e20 <problem_fetch+0x4738>)
 8005c96:	8811      	ldrh	r1, [r2, #0]
 8005c98:	7892      	ldrb	r2, [r2, #2]
 8005c9a:	8019      	strh	r1, [r3, #0]
 8005c9c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,E,G,D,C");
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	33a4      	adds	r3, #164	; 0xa4
 8005ca8:	4a5e      	ldr	r2, [pc, #376]	; (8005e24 <problem_fetch+0x473c>)
 8005caa:	461c      	mov	r4, r3
 8005cac:	4613      	mov	r3, r2
 8005cae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cb0:	6020      	str	r0, [r4, #0]
 8005cb2:	6061      	str	r1, [r4, #4]
 8005cb4:	60a2      	str	r2, [r4, #8]
 8005cb6:	881b      	ldrh	r3, [r3, #0]
 8005cb8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,15,18,8");
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4a5a      	ldr	r2, [pc, #360]	; (8005e28 <problem_fetch+0x4740>)
 8005cc0:	461d      	mov	r5, r3
 8005cc2:	4614      	mov	r4, r2
 8005cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc6:	6028      	str	r0, [r5, #0]
 8005cc8:	6069      	str	r1, [r5, #4]
 8005cca:	60aa      	str	r2, [r5, #8]
 8005ccc:	60eb      	str	r3, [r5, #12]
 8005cce:	8823      	ldrh	r3, [r4, #0]
 8005cd0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005cd8:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <problem_fetch+0x4744>)
 8005cda:	461c      	mov	r4, r3
 8005cdc:	4613      	mov	r3, r2
 8005cde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005ce0:	6020      	str	r0, [r4, #0]
 8005ce2:	6061      	str	r1, [r4, #4]
 8005ce4:	60a2      	str	r2, [r4, #8]
 8005ce6:	881b      	ldrh	r3, [r3, #0]
 8005ce8:	81a3      	strh	r3, [r4, #12]
			break;
 8005cea:	f016 bc2d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 111 :
			strcpy(p->name,"OINTMENT 007");
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005cf4:	4a4e      	ldr	r2, [pc, #312]	; (8005e30 <problem_fetch+0x4748>)
 8005cf6:	461c      	mov	r4, r3
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005cfc:	6020      	str	r0, [r4, #0]
 8005cfe:	6061      	str	r1, [r4, #4]
 8005d00:	60a2      	str	r2, [r4, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005d0c:	4a36      	ldr	r2, [pc, #216]	; (8005de8 <problem_fetch+0x4700>)
 8005d0e:	6810      	ldr	r0, [r2, #0]
 8005d10:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2209      	movs	r2, #9
 8005d16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,G,H,G,I,G,I");
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	33a4      	adds	r3, #164	; 0xa4
 8005d1c:	4a45      	ldr	r2, [pc, #276]	; (8005e34 <problem_fetch+0x474c>)
 8005d1e:	461d      	mov	r5, r3
 8005d20:	4614      	mov	r4, r2
 8005d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d24:	6028      	str	r0, [r5, #0]
 8005d26:	6069      	str	r1, [r5, #4]
 8005d28:	60aa      	str	r2, [r5, #8]
 8005d2a:	60eb      	str	r3, [r5, #12]
 8005d2c:	8823      	ldrh	r3, [r4, #0]
 8005d2e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,10,14,14,15,18");
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3304      	adds	r3, #4
 8005d34:	4a40      	ldr	r2, [pc, #256]	; (8005e38 <problem_fetch+0x4750>)
 8005d36:	461c      	mov	r4, r3
 8005d38:	4615      	mov	r5, r2
 8005d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3c:	6020      	str	r0, [r4, #0]
 8005d3e:	6061      	str	r1, [r4, #4]
 8005d40:	60a2      	str	r2, [r4, #8]
 8005d42:	60e3      	str	r3, [r4, #12]
 8005d44:	6828      	ldr	r0, [r5, #0]
 8005d46:	6120      	str	r0, [r4, #16]
 8005d48:	88ab      	ldrh	r3, [r5, #4]
 8005d4a:	79aa      	ldrb	r2, [r5, #6]
 8005d4c:	82a3      	strh	r3, [r4, #20]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005d58:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <problem_fetch+0x4754>)
 8005d5a:	461d      	mov	r5, r3
 8005d5c:	4614      	mov	r4, r2
 8005d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d60:	6028      	str	r0, [r5, #0]
 8005d62:	6069      	str	r1, [r5, #4]
 8005d64:	60aa      	str	r2, [r5, #8]
 8005d66:	60eb      	str	r3, [r5, #12]
 8005d68:	8823      	ldrh	r3, [r4, #0]
 8005d6a:	822b      	strh	r3, [r5, #16]
			break;
 8005d6c:	f016 bbec 	b.w	801c548 <problem_fetch+0x1ae60>
		case 112 :
			strcpy(p->name,"WARM UP STUFF");
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005d76:	4a32      	ldr	r2, [pc, #200]	; (8005e40 <problem_fetch+0x4758>)
 8005d78:	461c      	mov	r4, r3
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005d7e:	6020      	str	r0, [r4, #0]
 8005d80:	6061      	str	r1, [r4, #4]
 8005d82:	60a2      	str	r2, [r4, #8]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005d8e:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <problem_fetch+0x4700>)
 8005d90:	6810      	ldr	r0, [r2, #0]
 8005d92:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2207      	movs	r2, #7
 8005d98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,D,E,A,D");
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	33a4      	adds	r3, #164	; 0xa4
 8005d9e:	4a29      	ldr	r2, [pc, #164]	; (8005e44 <problem_fetch+0x475c>)
 8005da0:	461c      	mov	r4, r3
 8005da2:	4613      	mov	r3, r2
 8005da4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005da6:	6020      	str	r0, [r4, #0]
 8005da8:	6061      	str	r1, [r4, #4]
 8005daa:	60a2      	str	r2, [r4, #8]
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,12,14,18");
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4a24      	ldr	r2, [pc, #144]	; (8005e48 <problem_fetch+0x4760>)
 8005db6:	461d      	mov	r5, r3
 8005db8:	4614      	mov	r4, r2
 8005dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005dbc:	6028      	str	r0, [r5, #0]
 8005dbe:	6069      	str	r1, [r5, #4]
 8005dc0:	60aa      	str	r2, [r5, #8]
 8005dc2:	60eb      	str	r3, [r5, #12]
 8005dc4:	8823      	ldrh	r3, [r4, #0]
 8005dc6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005dce:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <problem_fetch+0x4764>)
 8005dd0:	461c      	mov	r4, r3
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005dd6:	6020      	str	r0, [r4, #0]
 8005dd8:	6061      	str	r1, [r4, #4]
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	81a3      	strh	r3, [r4, #12]
			break;
 8005de0:	f016 bbb2 	b.w	801c548 <problem_fetch+0x1ae60>
 8005de4:	08024f00 	.word	0x08024f00
 8005de8:	0802395c 	.word	0x0802395c
 8005dec:	08024f18 	.word	0x08024f18
 8005df0:	08024f28 	.word	0x08024f28
 8005df4:	08023a80 	.word	0x08023a80
 8005df8:	08024f3c 	.word	0x08024f3c
 8005dfc:	08024f48 	.word	0x08024f48
 8005e00:	08024f58 	.word	0x08024f58
 8005e04:	08023ae4 	.word	0x08023ae4
 8005e08:	08024f6c 	.word	0x08024f6c
 8005e0c:	08024054 	.word	0x08024054
 8005e10:	08024f84 	.word	0x08024f84
 8005e14:	08024f90 	.word	0x08024f90
 8005e18:	08023cf8 	.word	0x08023cf8
 8005e1c:	08024fa0 	.word	0x08024fa0
 8005e20:	0802391c 	.word	0x0802391c
 8005e24:	08024fac 	.word	0x08024fac
 8005e28:	08024fbc 	.word	0x08024fbc
 8005e2c:	08024ac4 	.word	0x08024ac4
 8005e30:	08024fd0 	.word	0x08024fd0
 8005e34:	08024fe0 	.word	0x08024fe0
 8005e38:	08024ff4 	.word	0x08024ff4
 8005e3c:	08024940 	.word	0x08024940
 8005e40:	0802500c 	.word	0x0802500c
 8005e44:	0802501c 	.word	0x0802501c
 8005e48:	0802502c 	.word	0x0802502c
 8005e4c:	080239d4 	.word	0x080239d4
		case 113 :
			strcpy(p->name,"VANTABLACK");
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005e56:	49b1      	ldr	r1, [pc, #708]	; (800611c <problem_fetch+0x4a34>)
 8005e58:	461a      	mov	r2, r3
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	cb03      	ldmia	r3!, {r0, r1}
 8005e5e:	6010      	str	r0, [r2, #0]
 8005e60:	6051      	str	r1, [r2, #4]
 8005e62:	8819      	ldrh	r1, [r3, #0]
 8005e64:	789b      	ldrb	r3, [r3, #2]
 8005e66:	8111      	strh	r1, [r2, #8]
 8005e68:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005e70:	4aab      	ldr	r2, [pc, #684]	; (8006120 <problem_fetch+0x4a38>)
 8005e72:	6810      	ldr	r0, [r2, #0]
 8005e74:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2205      	movs	r2, #5
 8005e7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,D,A,G");
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	33a4      	adds	r3, #164	; 0xa4
 8005e80:	49a8      	ldr	r1, [pc, #672]	; (8006124 <problem_fetch+0x4a3c>)
 8005e82:	461a      	mov	r2, r3
 8005e84:	460b      	mov	r3, r1
 8005e86:	cb03      	ldmia	r3!, {r0, r1}
 8005e88:	6010      	str	r0, [r2, #0]
 8005e8a:	6051      	str	r1, [r2, #4]
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"8,10,15,18,4");
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	3304      	adds	r3, #4
 8005e94:	4aa4      	ldr	r2, [pc, #656]	; (8006128 <problem_fetch+0x4a40>)
 8005e96:	461c      	mov	r4, r3
 8005e98:	4613      	mov	r3, r2
 8005e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005e9c:	6020      	str	r0, [r4, #0]
 8005e9e:	6061      	str	r1, [r4, #4]
 8005ea0:	60a2      	str	r2, [r4, #8]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005eac:	499f      	ldr	r1, [pc, #636]	; (800612c <problem_fetch+0x4a44>)
 8005eae:	461a      	mov	r2, r3
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	cb03      	ldmia	r3!, {r0, r1}
 8005eb4:	6010      	str	r0, [r2, #0]
 8005eb6:	6051      	str	r1, [r2, #4]
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	8113      	strh	r3, [r2, #8]
			break;
 8005ebc:	f016 bb44 	b.w	801c548 <problem_fetch+0x1ae60>
		case 114 :
			strcpy(p->name,"ORDERLY HOUSING");
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005ec6:	4a9a      	ldr	r2, [pc, #616]	; (8006130 <problem_fetch+0x4a48>)
 8005ec8:	461c      	mov	r4, r3
 8005eca:	4615      	mov	r5, r2
 8005ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ece:	6020      	str	r0, [r4, #0]
 8005ed0:	6061      	str	r1, [r4, #4]
 8005ed2:	60a2      	str	r2, [r4, #8]
 8005ed4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005edc:	4a95      	ldr	r2, [pc, #596]	; (8006134 <problem_fetch+0x4a4c>)
 8005ede:	8811      	ldrh	r1, [r2, #0]
 8005ee0:	7892      	ldrb	r2, [r2, #2]
 8005ee2:	8019      	strh	r1, [r3, #0]
 8005ee4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2205      	movs	r2, #5
 8005eea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,E,D");
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	33a4      	adds	r3, #164	; 0xa4
 8005ef0:	4991      	ldr	r1, [pc, #580]	; (8006138 <problem_fetch+0x4a50>)
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	cb03      	ldmia	r3!, {r0, r1}
 8005ef8:	6010      	str	r0, [r2, #0]
 8005efa:	6051      	str	r1, [r2, #4]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4a8d      	ldr	r2, [pc, #564]	; (800613c <problem_fetch+0x4a54>)
 8005f06:	461c      	mov	r4, r3
 8005f08:	4613      	mov	r3, r2
 8005f0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f0c:	6020      	str	r0, [r4, #0]
 8005f0e:	6061      	str	r1, [r4, #4]
 8005f10:	60a2      	str	r2, [r4, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005f1c:	4988      	ldr	r1, [pc, #544]	; (8006140 <problem_fetch+0x4a58>)
 8005f1e:	461a      	mov	r2, r3
 8005f20:	460b      	mov	r3, r1
 8005f22:	cb03      	ldmia	r3!, {r0, r1}
 8005f24:	6010      	str	r0, [r2, #0]
 8005f26:	6051      	str	r1, [r2, #4]
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	8113      	strh	r3, [r2, #8]
			break;
 8005f2c:	f016 bb0c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 115 :
			strcpy(p->name,"CATCH AND PULL");
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005f36:	4a83      	ldr	r2, [pc, #524]	; (8006144 <problem_fetch+0x4a5c>)
 8005f38:	461c      	mov	r4, r3
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f3e:	6020      	str	r0, [r4, #0]
 8005f40:	6061      	str	r1, [r4, #4]
 8005f42:	60a2      	str	r2, [r4, #8]
 8005f44:	881a      	ldrh	r2, [r3, #0]
 8005f46:	789b      	ldrb	r3, [r3, #2]
 8005f48:	81a2      	strh	r2, [r4, #12]
 8005f4a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005f52:	4a7d      	ldr	r2, [pc, #500]	; (8006148 <problem_fetch+0x4a60>)
 8005f54:	8811      	ldrh	r1, [r2, #0]
 8005f56:	7892      	ldrb	r2, [r2, #2]
 8005f58:	8019      	strh	r1, [r3, #0]
 8005f5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2205      	movs	r2, #5
 8005f60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D,I");
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	33a4      	adds	r3, #164	; 0xa4
 8005f66:	4979      	ldr	r1, [pc, #484]	; (800614c <problem_fetch+0x4a64>)
 8005f68:	461a      	mov	r2, r3
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	cb03      	ldmia	r3!, {r0, r1}
 8005f6e:	6010      	str	r0, [r2, #0]
 8005f70:	6051      	str	r1, [r2, #4]
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"14,8,4,18,9");
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	4a75      	ldr	r2, [pc, #468]	; (8006150 <problem_fetch+0x4a68>)
 8005f7c:	461c      	mov	r4, r3
 8005f7e:	4613      	mov	r3, r2
 8005f80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005f82:	6020      	str	r0, [r4, #0]
 8005f84:	6061      	str	r1, [r4, #4]
 8005f86:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"d,d,s,e,d");
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8005f8e:	4971      	ldr	r1, [pc, #452]	; (8006154 <problem_fetch+0x4a6c>)
 8005f90:	461a      	mov	r2, r3
 8005f92:	460b      	mov	r3, r1
 8005f94:	cb03      	ldmia	r3!, {r0, r1}
 8005f96:	6010      	str	r0, [r2, #0]
 8005f98:	6051      	str	r1, [r2, #4]
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	8113      	strh	r3, [r2, #8]
			break;
 8005f9e:	f016 bad3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 116 :
			strcpy(p->name,"WHERE'S YOUR BERRY");
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005fa8:	4a6b      	ldr	r2, [pc, #428]	; (8006158 <problem_fetch+0x4a70>)
 8005faa:	461d      	mov	r5, r3
 8005fac:	4614      	mov	r4, r2
 8005fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fb0:	6028      	str	r0, [r5, #0]
 8005fb2:	6069      	str	r1, [r5, #4]
 8005fb4:	60aa      	str	r2, [r5, #8]
 8005fb6:	60eb      	str	r3, [r5, #12]
 8005fb8:	8823      	ldrh	r3, [r4, #0]
 8005fba:	78a2      	ldrb	r2, [r4, #2]
 8005fbc:	822b      	strh	r3, [r5, #16]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005fc8:	4a64      	ldr	r2, [pc, #400]	; (800615c <problem_fetch+0x4a74>)
 8005fca:	6810      	ldr	r0, [r2, #0]
 8005fcc:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2209      	movs	r2, #9
 8005fd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,E,F,C,B,E,B");
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	33a4      	adds	r3, #164	; 0xa4
 8005fd8:	4a61      	ldr	r2, [pc, #388]	; (8006160 <problem_fetch+0x4a78>)
 8005fda:	461d      	mov	r5, r3
 8005fdc:	4614      	mov	r4, r2
 8005fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fe0:	6028      	str	r0, [r5, #0]
 8005fe2:	6069      	str	r1, [r5, #4]
 8005fe4:	60aa      	str	r2, [r5, #8]
 8005fe6:	60eb      	str	r3, [r5, #12]
 8005fe8:	8823      	ldrh	r3, [r4, #0]
 8005fea:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,15,18,16,11,13,10,8,6");
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4a5c      	ldr	r2, [pc, #368]	; (8006164 <problem_fetch+0x4a7c>)
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ff8:	6028      	str	r0, [r5, #0]
 8005ffa:	6069      	str	r1, [r5, #4]
 8005ffc:	60aa      	str	r2, [r5, #8]
 8005ffe:	60eb      	str	r3, [r5, #12]
 8006000:	cc03      	ldmia	r4!, {r0, r1}
 8006002:	6128      	str	r0, [r5, #16]
 8006004:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,e,d,d,d,d,d,s");
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800600c:	4a56      	ldr	r2, [pc, #344]	; (8006168 <problem_fetch+0x4a80>)
 800600e:	461d      	mov	r5, r3
 8006010:	4614      	mov	r4, r2
 8006012:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006014:	6028      	str	r0, [r5, #0]
 8006016:	6069      	str	r1, [r5, #4]
 8006018:	60aa      	str	r2, [r5, #8]
 800601a:	60eb      	str	r3, [r5, #12]
 800601c:	8823      	ldrh	r3, [r4, #0]
 800601e:	822b      	strh	r3, [r5, #16]
			break;
 8006020:	f016 ba92 	b.w	801c548 <problem_fetch+0x1ae60>
		case 117 :
			strcpy(p->name,"PURPLE NURPLE BOYS");
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800602a:	4a50      	ldr	r2, [pc, #320]	; (800616c <problem_fetch+0x4a84>)
 800602c:	461d      	mov	r5, r3
 800602e:	4614      	mov	r4, r2
 8006030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006032:	6028      	str	r0, [r5, #0]
 8006034:	6069      	str	r1, [r5, #4]
 8006036:	60aa      	str	r2, [r5, #8]
 8006038:	60eb      	str	r3, [r5, #12]
 800603a:	8823      	ldrh	r3, [r4, #0]
 800603c:	78a2      	ldrb	r2, [r4, #2]
 800603e:	822b      	strh	r3, [r5, #16]
 8006040:	4613      	mov	r3, r2
 8006042:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800604a:	4a49      	ldr	r2, [pc, #292]	; (8006170 <problem_fetch+0x4a88>)
 800604c:	6810      	ldr	r0, [r2, #0]
 800604e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2207      	movs	r2, #7
 8006054:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,E,I,G,I");
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	33a4      	adds	r3, #164	; 0xa4
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <problem_fetch+0x4a8c>)
 800605c:	461c      	mov	r4, r3
 800605e:	4613      	mov	r3, r2
 8006060:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	6061      	str	r1, [r4, #4]
 8006066:	60a2      	str	r2, [r4, #8]
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,14,15,18");
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	4a41      	ldr	r2, [pc, #260]	; (8006178 <problem_fetch+0x4a90>)
 8006072:	461d      	mov	r5, r3
 8006074:	4614      	mov	r4, r2
 8006076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006078:	6028      	str	r0, [r5, #0]
 800607a:	6069      	str	r1, [r5, #4]
 800607c:	60aa      	str	r2, [r5, #8]
 800607e:	60eb      	str	r3, [r5, #12]
 8006080:	8823      	ldrh	r3, [r4, #0]
 8006082:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800608a:	4a3c      	ldr	r2, [pc, #240]	; (800617c <problem_fetch+0x4a94>)
 800608c:	461c      	mov	r4, r3
 800608e:	4613      	mov	r3, r2
 8006090:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006092:	6020      	str	r0, [r4, #0]
 8006094:	6061      	str	r1, [r4, #4]
 8006096:	60a2      	str	r2, [r4, #8]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	81a3      	strh	r3, [r4, #12]
			break;
 800609c:	f016 ba54 	b.w	801c548 <problem_fetch+0x1ae60>
		case 118 :
			strcpy(p->name,"DUMBADUMBA EASY");
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80060a6:	4a36      	ldr	r2, [pc, #216]	; (8006180 <problem_fetch+0x4a98>)
 80060a8:	461c      	mov	r4, r3
 80060aa:	4615      	mov	r5, r2
 80060ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060ae:	6020      	str	r0, [r4, #0]
 80060b0:	6061      	str	r1, [r4, #4]
 80060b2:	60a2      	str	r2, [r4, #8]
 80060b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80060bc:	4a27      	ldr	r2, [pc, #156]	; (800615c <problem_fetch+0x4a74>)
 80060be:	6810      	ldr	r0, [r2, #0]
 80060c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2209      	movs	r2, #9
 80060c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,C,D,D,E,C");
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	33a4      	adds	r3, #164	; 0xa4
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <problem_fetch+0x4a9c>)
 80060ce:	461d      	mov	r5, r3
 80060d0:	4614      	mov	r4, r2
 80060d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060d4:	6028      	str	r0, [r5, #0]
 80060d6:	6069      	str	r1, [r5, #4]
 80060d8:	60aa      	str	r2, [r5, #8]
 80060da:	60eb      	str	r3, [r5, #12]
 80060dc:	8823      	ldrh	r3, [r4, #0]
 80060de:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18,6,5");
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4a28      	ldr	r2, [pc, #160]	; (8006188 <problem_fetch+0x4aa0>)
 80060e6:	461d      	mov	r5, r3
 80060e8:	4614      	mov	r4, r2
 80060ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060ec:	6028      	str	r0, [r5, #0]
 80060ee:	6069      	str	r1, [r5, #4]
 80060f0:	60aa      	str	r2, [r5, #8]
 80060f2:	60eb      	str	r3, [r5, #12]
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	6128      	str	r0, [r5, #16]
 80060f8:	88a3      	ldrh	r3, [r4, #4]
 80060fa:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,s,d");
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006102:	4a22      	ldr	r2, [pc, #136]	; (800618c <problem_fetch+0x4aa4>)
 8006104:	461d      	mov	r5, r3
 8006106:	4614      	mov	r4, r2
 8006108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800610a:	6028      	str	r0, [r5, #0]
 800610c:	6069      	str	r1, [r5, #4]
 800610e:	60aa      	str	r2, [r5, #8]
 8006110:	60eb      	str	r3, [r5, #12]
 8006112:	8823      	ldrh	r3, [r4, #0]
 8006114:	822b      	strh	r3, [r5, #16]
			break;
 8006116:	f016 ba17 	b.w	801c548 <problem_fetch+0x1ae60>
 800611a:	bf00      	nop
 800611c:	08025040 	.word	0x08025040
 8006120:	08023a98 	.word	0x08023a98
 8006124:	0802504c 	.word	0x0802504c
 8006128:	08025058 	.word	0x08025058
 800612c:	08025068 	.word	0x08025068
 8006130:	08025074 	.word	0x08025074
 8006134:	08024190 	.word	0x08024190
 8006138:	08025084 	.word	0x08025084
 800613c:	08025090 	.word	0x08025090
 8006140:	08023e28 	.word	0x08023e28
 8006144:	080250a0 	.word	0x080250a0
 8006148:	08024054 	.word	0x08024054
 800614c:	080250b0 	.word	0x080250b0
 8006150:	080250bc 	.word	0x080250bc
 8006154:	080250c8 	.word	0x080250c8
 8006158:	080250d4 	.word	0x080250d4
 800615c:	0802395c 	.word	0x0802395c
 8006160:	080250e8 	.word	0x080250e8
 8006164:	080250fc 	.word	0x080250fc
 8006168:	08025114 	.word	0x08025114
 800616c:	08025128 	.word	0x08025128
 8006170:	080239f4 	.word	0x080239f4
 8006174:	0802513c 	.word	0x0802513c
 8006178:	0802514c 	.word	0x0802514c
 800617c:	080239d4 	.word	0x080239d4
 8006180:	08025160 	.word	0x08025160
 8006184:	08025170 	.word	0x08025170
 8006188:	08025184 	.word	0x08025184
 800618c:	0802519c 	.word	0x0802519c
		case 119 :
			strcpy(p->name,"ANTI JULIE");
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006196:	49b0      	ldr	r1, [pc, #704]	; (8006458 <problem_fetch+0x4d70>)
 8006198:	461a      	mov	r2, r3
 800619a:	460b      	mov	r3, r1
 800619c:	cb03      	ldmia	r3!, {r0, r1}
 800619e:	6010      	str	r0, [r2, #0]
 80061a0:	6051      	str	r1, [r2, #4]
 80061a2:	8819      	ldrh	r1, [r3, #0]
 80061a4:	789b      	ldrb	r3, [r3, #2]
 80061a6:	8111      	strh	r1, [r2, #8]
 80061a8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80061b0:	4aaa      	ldr	r2, [pc, #680]	; (800645c <problem_fetch+0x4d74>)
 80061b2:	8811      	ldrh	r1, [r2, #0]
 80061b4:	7892      	ldrb	r2, [r2, #2]
 80061b6:	8019      	strh	r1, [r3, #0]
 80061b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2206      	movs	r2, #6
 80061be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,G,A,B");
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	33a4      	adds	r3, #164	; 0xa4
 80061c4:	4aa6      	ldr	r2, [pc, #664]	; (8006460 <problem_fetch+0x4d78>)
 80061c6:	461c      	mov	r4, r3
 80061c8:	4613      	mov	r3, r2
 80061ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061cc:	6020      	str	r0, [r4, #0]
 80061ce:	6061      	str	r1, [r4, #4]
 80061d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,17,18,6");
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	4aa3      	ldr	r2, [pc, #652]	; (8006464 <problem_fetch+0x4d7c>)
 80061d8:	461c      	mov	r4, r3
 80061da:	4615      	mov	r5, r2
 80061dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061de:	6020      	str	r0, [r4, #0]
 80061e0:	6061      	str	r1, [r4, #4]
 80061e2:	60a2      	str	r2, [r4, #8]
 80061e4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80061ec:	4a9e      	ldr	r2, [pc, #632]	; (8006468 <problem_fetch+0x4d80>)
 80061ee:	461c      	mov	r4, r3
 80061f0:	4613      	mov	r3, r2
 80061f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80061f4:	6020      	str	r0, [r4, #0]
 80061f6:	6061      	str	r1, [r4, #4]
 80061f8:	60a2      	str	r2, [r4, #8]
			break;
 80061fa:	f016 b9a5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 120 :
			strcpy(p->name,"BROWN DIRTY WATER");
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006204:	4a99      	ldr	r2, [pc, #612]	; (800646c <problem_fetch+0x4d84>)
 8006206:	461d      	mov	r5, r3
 8006208:	4614      	mov	r4, r2
 800620a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800620c:	6028      	str	r0, [r5, #0]
 800620e:	6069      	str	r1, [r5, #4]
 8006210:	60aa      	str	r2, [r5, #8]
 8006212:	60eb      	str	r3, [r5, #12]
 8006214:	8823      	ldrh	r3, [r4, #0]
 8006216:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800621e:	4a94      	ldr	r2, [pc, #592]	; (8006470 <problem_fetch+0x4d88>)
 8006220:	6810      	ldr	r0, [r2, #0]
 8006222:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2207      	movs	r2, #7
 8006228:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,D");
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	33a4      	adds	r3, #164	; 0xa4
 800622e:	4a91      	ldr	r2, [pc, #580]	; (8006474 <problem_fetch+0x4d8c>)
 8006230:	461c      	mov	r4, r3
 8006232:	4613      	mov	r3, r2
 8006234:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006236:	6020      	str	r0, [r4, #0]
 8006238:	6061      	str	r1, [r4, #4]
 800623a:	60a2      	str	r2, [r4, #8]
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,8,11,14,18");
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3304      	adds	r3, #4
 8006244:	4a8c      	ldr	r2, [pc, #560]	; (8006478 <problem_fetch+0x4d90>)
 8006246:	461d      	mov	r5, r3
 8006248:	4614      	mov	r4, r2
 800624a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800624c:	6028      	str	r0, [r5, #0]
 800624e:	6069      	str	r1, [r5, #4]
 8006250:	60aa      	str	r2, [r5, #8]
 8006252:	60eb      	str	r3, [r5, #12]
 8006254:	7823      	ldrb	r3, [r4, #0]
 8006256:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800625e:	4a87      	ldr	r2, [pc, #540]	; (800647c <problem_fetch+0x4d94>)
 8006260:	461c      	mov	r4, r3
 8006262:	4613      	mov	r3, r2
 8006264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	6061      	str	r1, [r4, #4]
 800626a:	60a2      	str	r2, [r4, #8]
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	81a3      	strh	r3, [r4, #12]
			break;
 8006270:	f016 b96a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 121 :
			strcpy(p->name,"INNSMOUTH HORROR");
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800627a:	4a81      	ldr	r2, [pc, #516]	; (8006480 <problem_fetch+0x4d98>)
 800627c:	461d      	mov	r5, r3
 800627e:	4614      	mov	r4, r2
 8006280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006282:	6028      	str	r0, [r5, #0]
 8006284:	6069      	str	r1, [r5, #4]
 8006286:	60aa      	str	r2, [r5, #8]
 8006288:	60eb      	str	r3, [r5, #12]
 800628a:	7823      	ldrb	r3, [r4, #0]
 800628c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006294:	4a7b      	ldr	r2, [pc, #492]	; (8006484 <problem_fetch+0x4d9c>)
 8006296:	6810      	ldr	r0, [r2, #0]
 8006298:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2209      	movs	r2, #9
 800629e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,F,E,G,E,I,I,E");
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	33a4      	adds	r3, #164	; 0xa4
 80062a4:	4a78      	ldr	r2, [pc, #480]	; (8006488 <problem_fetch+0x4da0>)
 80062a6:	461d      	mov	r5, r3
 80062a8:	4614      	mov	r4, r2
 80062aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062ac:	6028      	str	r0, [r5, #0]
 80062ae:	6069      	str	r1, [r5, #4]
 80062b0:	60aa      	str	r2, [r5, #8]
 80062b2:	60eb      	str	r3, [r5, #12]
 80062b4:	8823      	ldrh	r3, [r4, #0]
 80062b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,8,11,12,14,16,18,7,6");
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4a73      	ldr	r2, [pc, #460]	; (800648c <problem_fetch+0x4da4>)
 80062be:	461c      	mov	r4, r3
 80062c0:	4615      	mov	r5, r2
 80062c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062c4:	6020      	str	r0, [r4, #0]
 80062c6:	6061      	str	r1, [r4, #4]
 80062c8:	60a2      	str	r2, [r4, #8]
 80062ca:	60e3      	str	r3, [r4, #12]
 80062cc:	6828      	ldr	r0, [r5, #0]
 80062ce:	6120      	str	r0, [r4, #16]
 80062d0:	88ab      	ldrh	r3, [r5, #4]
 80062d2:	79aa      	ldrb	r2, [r5, #6]
 80062d4:	82a3      	strh	r3, [r4, #20]
 80062d6:	4613      	mov	r3, r2
 80062d8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d,s");
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80062e0:	4a6b      	ldr	r2, [pc, #428]	; (8006490 <problem_fetch+0x4da8>)
 80062e2:	461d      	mov	r5, r3
 80062e4:	4614      	mov	r4, r2
 80062e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062e8:	6028      	str	r0, [r5, #0]
 80062ea:	6069      	str	r1, [r5, #4]
 80062ec:	60aa      	str	r2, [r5, #8]
 80062ee:	60eb      	str	r3, [r5, #12]
 80062f0:	8823      	ldrh	r3, [r4, #0]
 80062f2:	822b      	strh	r3, [r5, #16]
			break;
 80062f4:	f016 b928 	b.w	801c548 <problem_fetch+0x1ae60>
		case 122 :
			strcpy(p->name,"PB AND JELLY");
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80062fe:	4a65      	ldr	r2, [pc, #404]	; (8006494 <problem_fetch+0x4dac>)
 8006300:	461c      	mov	r4, r3
 8006302:	4613      	mov	r3, r2
 8006304:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006306:	6020      	str	r0, [r4, #0]
 8006308:	6061      	str	r1, [r4, #4]
 800630a:	60a2      	str	r2, [r4, #8]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006316:	4a56      	ldr	r2, [pc, #344]	; (8006470 <problem_fetch+0x4d88>)
 8006318:	6810      	ldr	r0, [r2, #0]
 800631a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2207      	movs	r2, #7
 8006320:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,E,H,I,D");
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	33a4      	adds	r3, #164	; 0xa4
 8006326:	4a5c      	ldr	r2, [pc, #368]	; (8006498 <problem_fetch+0x4db0>)
 8006328:	461c      	mov	r4, r3
 800632a:	4613      	mov	r3, r2
 800632c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800632e:	6020      	str	r0, [r4, #0]
 8006330:	6061      	str	r1, [r4, #4]
 8006332:	60a2      	str	r2, [r4, #8]
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,12,14,18");
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	4a57      	ldr	r2, [pc, #348]	; (800649c <problem_fetch+0x4db4>)
 800633e:	461d      	mov	r5, r3
 8006340:	4614      	mov	r4, r2
 8006342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006344:	6028      	str	r0, [r5, #0]
 8006346:	6069      	str	r1, [r5, #4]
 8006348:	60aa      	str	r2, [r5, #8]
 800634a:	60eb      	str	r3, [r5, #12]
 800634c:	8823      	ldrh	r3, [r4, #0]
 800634e:	78a2      	ldrb	r2, [r4, #2]
 8006350:	822b      	strh	r3, [r5, #16]
 8006352:	4613      	mov	r3, r2
 8006354:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800635c:	4a50      	ldr	r2, [pc, #320]	; (80064a0 <problem_fetch+0x4db8>)
 800635e:	461c      	mov	r4, r3
 8006360:	4613      	mov	r3, r2
 8006362:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006364:	6020      	str	r0, [r4, #0]
 8006366:	6061      	str	r1, [r4, #4]
 8006368:	60a2      	str	r2, [r4, #8]
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	81a3      	strh	r3, [r4, #12]
			break;
 800636e:	f016 b8eb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 123 :
			strcpy(p->name,"APRITI");
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006378:	4a4a      	ldr	r2, [pc, #296]	; (80064a4 <problem_fetch+0x4dbc>)
 800637a:	6810      	ldr	r0, [r2, #0]
 800637c:	6018      	str	r0, [r3, #0]
 800637e:	8891      	ldrh	r1, [r2, #4]
 8006380:	7992      	ldrb	r2, [r2, #6]
 8006382:	8099      	strh	r1, [r3, #4]
 8006384:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800638c:	4a46      	ldr	r2, [pc, #280]	; (80064a8 <problem_fetch+0x4dc0>)
 800638e:	8811      	ldrh	r1, [r2, #0]
 8006390:	7892      	ldrb	r2, [r2, #2]
 8006392:	8019      	strh	r1, [r3, #0]
 8006394:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2208      	movs	r2, #8
 800639a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,D,C,D,D");
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	33a4      	adds	r3, #164	; 0xa4
 80063a0:	4a42      	ldr	r2, [pc, #264]	; (80064ac <problem_fetch+0x4dc4>)
 80063a2:	461c      	mov	r4, r3
 80063a4:	4615      	mov	r5, r2
 80063a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063a8:	6020      	str	r0, [r4, #0]
 80063aa:	6061      	str	r1, [r4, #4]
 80063ac:	60a2      	str	r2, [r4, #8]
 80063ae:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,11,13,15,18");
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3304      	adds	r3, #4
 80063b4:	4a3e      	ldr	r2, [pc, #248]	; (80064b0 <problem_fetch+0x4dc8>)
 80063b6:	461d      	mov	r5, r3
 80063b8:	4614      	mov	r4, r2
 80063ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063bc:	6028      	str	r0, [r5, #0]
 80063be:	6069      	str	r1, [r5, #4]
 80063c0:	60aa      	str	r2, [r5, #8]
 80063c2:	60eb      	str	r3, [r5, #12]
 80063c4:	6820      	ldr	r0, [r4, #0]
 80063c6:	6128      	str	r0, [r5, #16]
 80063c8:	7923      	ldrb	r3, [r4, #4]
 80063ca:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80063d2:	4a38      	ldr	r2, [pc, #224]	; (80064b4 <problem_fetch+0x4dcc>)
 80063d4:	461c      	mov	r4, r3
 80063d6:	4615      	mov	r5, r2
 80063d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063da:	6020      	str	r0, [r4, #0]
 80063dc:	6061      	str	r1, [r4, #4]
 80063de:	60a2      	str	r2, [r4, #8]
 80063e0:	60e3      	str	r3, [r4, #12]
			break;
 80063e2:	f016 b8b1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 124 :
			strcpy(p->name,"LADYBUG DIRECT");
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80063ec:	4a32      	ldr	r2, [pc, #200]	; (80064b8 <problem_fetch+0x4dd0>)
 80063ee:	461c      	mov	r4, r3
 80063f0:	4613      	mov	r3, r2
 80063f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80063f4:	6020      	str	r0, [r4, #0]
 80063f6:	6061      	str	r1, [r4, #4]
 80063f8:	60a2      	str	r2, [r4, #8]
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	789b      	ldrb	r3, [r3, #2]
 80063fe:	81a2      	strh	r2, [r4, #12]
 8006400:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006408:	4a2c      	ldr	r2, [pc, #176]	; (80064bc <problem_fetch+0x4dd4>)
 800640a:	6810      	ldr	r0, [r2, #0]
 800640c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2206      	movs	r2, #6
 8006412:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,A");
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	33a4      	adds	r3, #164	; 0xa4
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <problem_fetch+0x4dd8>)
 800641a:	461c      	mov	r4, r3
 800641c:	4613      	mov	r3, r2
 800641e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006420:	6020      	str	r0, [r4, #0]
 8006422:	6061      	str	r1, [r4, #4]
 8006424:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18,9");
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3304      	adds	r3, #4
 800642a:	4a26      	ldr	r2, [pc, #152]	; (80064c4 <problem_fetch+0x4ddc>)
 800642c:	461c      	mov	r4, r3
 800642e:	4613      	mov	r3, r2
 8006430:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006432:	6020      	str	r0, [r4, #0]
 8006434:	6061      	str	r1, [r4, #4]
 8006436:	60a2      	str	r2, [r4, #8]
 8006438:	881a      	ldrh	r2, [r3, #0]
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	81a2      	strh	r2, [r4, #12]
 800643e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006446:	4a20      	ldr	r2, [pc, #128]	; (80064c8 <problem_fetch+0x4de0>)
 8006448:	461c      	mov	r4, r3
 800644a:	4613      	mov	r3, r2
 800644c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800644e:	6020      	str	r0, [r4, #0]
 8006450:	6061      	str	r1, [r4, #4]
 8006452:	60a2      	str	r2, [r4, #8]
			break;
 8006454:	f016 b878 	b.w	801c548 <problem_fetch+0x1ae60>
 8006458:	080251b0 	.word	0x080251b0
 800645c:	0802391c 	.word	0x0802391c
 8006460:	080251bc 	.word	0x080251bc
 8006464:	080251c8 	.word	0x080251c8
 8006468:	080251d8 	.word	0x080251d8
 800646c:	080251e4 	.word	0x080251e4
 8006470:	080239f4 	.word	0x080239f4
 8006474:	080251f8 	.word	0x080251f8
 8006478:	08025208 	.word	0x08025208
 800647c:	080239d4 	.word	0x080239d4
 8006480:	0802521c 	.word	0x0802521c
 8006484:	0802395c 	.word	0x0802395c
 8006488:	08025230 	.word	0x08025230
 800648c:	08025244 	.word	0x08025244
 8006490:	0802525c 	.word	0x0802525c
 8006494:	08025270 	.word	0x08025270
 8006498:	08025280 	.word	0x08025280
 800649c:	08025290 	.word	0x08025290
 80064a0:	08023ae4 	.word	0x08023ae4
 80064a4:	080252a4 	.word	0x080252a4
 80064a8:	08023a28 	.word	0x08023a28
 80064ac:	080252ac 	.word	0x080252ac
 80064b0:	080252bc 	.word	0x080252bc
 80064b4:	08023a80 	.word	0x08023a80
 80064b8:	080252d4 	.word	0x080252d4
 80064bc:	08023afc 	.word	0x08023afc
 80064c0:	080252e4 	.word	0x080252e4
 80064c4:	080252f0 	.word	0x080252f0
 80064c8:	08025300 	.word	0x08025300
		case 125 :
			strcpy(p->name,"CATA");
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80064d2:	4abf      	ldr	r2, [pc, #764]	; (80067d0 <problem_fetch+0x50e8>)
 80064d4:	6810      	ldr	r0, [r2, #0]
 80064d6:	6018      	str	r0, [r3, #0]
 80064d8:	7912      	ldrb	r2, [r2, #4]
 80064da:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80064e2:	4abc      	ldr	r2, [pc, #752]	; (80067d4 <problem_fetch+0x50ec>)
 80064e4:	6810      	ldr	r0, [r2, #0]
 80064e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2205      	movs	r2, #5
 80064ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,A,D");
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	33a4      	adds	r3, #164	; 0xa4
 80064f2:	49b9      	ldr	r1, [pc, #740]	; (80067d8 <problem_fetch+0x50f0>)
 80064f4:	461a      	mov	r2, r3
 80064f6:	460b      	mov	r3, r1
 80064f8:	cb03      	ldmia	r3!, {r0, r1}
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	6051      	str	r1, [r2, #4]
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,7,11,14,18");
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3304      	adds	r3, #4
 8006506:	4ab5      	ldr	r2, [pc, #724]	; (80067dc <problem_fetch+0x50f4>)
 8006508:	461c      	mov	r4, r3
 800650a:	4613      	mov	r3, r2
 800650c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800650e:	6020      	str	r0, [r4, #0]
 8006510:	6061      	str	r1, [r4, #4]
 8006512:	60a2      	str	r2, [r4, #8]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800651e:	49b0      	ldr	r1, [pc, #704]	; (80067e0 <problem_fetch+0x50f8>)
 8006520:	461a      	mov	r2, r3
 8006522:	460b      	mov	r3, r1
 8006524:	cb03      	ldmia	r3!, {r0, r1}
 8006526:	6010      	str	r0, [r2, #0]
 8006528:	6051      	str	r1, [r2, #4]
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	8113      	strh	r3, [r2, #8]
			break;
 800652e:	f016 b80b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 126 :
			strcpy(p->name,"TRØNDERSPOTT");
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006538:	4aaa      	ldr	r2, [pc, #680]	; (80067e4 <problem_fetch+0x50fc>)
 800653a:	461c      	mov	r4, r3
 800653c:	4613      	mov	r3, r2
 800653e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006540:	6020      	str	r0, [r4, #0]
 8006542:	6061      	str	r1, [r4, #4]
 8006544:	60a2      	str	r2, [r4, #8]
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006550:	4aa5      	ldr	r2, [pc, #660]	; (80067e8 <problem_fetch+0x5100>)
 8006552:	6810      	ldr	r0, [r2, #0]
 8006554:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2205      	movs	r2, #5
 800655a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D");
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	33a4      	adds	r3, #164	; 0xa4
 8006560:	49a2      	ldr	r1, [pc, #648]	; (80067ec <problem_fetch+0x5104>)
 8006562:	461a      	mov	r2, r3
 8006564:	460b      	mov	r3, r1
 8006566:	cb03      	ldmia	r3!, {r0, r1}
 8006568:	6010      	str	r0, [r2, #0]
 800656a:	6051      	str	r1, [r2, #4]
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,13,18");
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3304      	adds	r3, #4
 8006574:	4a9e      	ldr	r2, [pc, #632]	; (80067f0 <problem_fetch+0x5108>)
 8006576:	461c      	mov	r4, r3
 8006578:	4613      	mov	r3, r2
 800657a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800657c:	6020      	str	r0, [r4, #0]
 800657e:	6061      	str	r1, [r4, #4]
 8006580:	60a2      	str	r2, [r4, #8]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800658c:	4999      	ldr	r1, [pc, #612]	; (80067f4 <problem_fetch+0x510c>)
 800658e:	461a      	mov	r2, r3
 8006590:	460b      	mov	r3, r1
 8006592:	cb03      	ldmia	r3!, {r0, r1}
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	6051      	str	r1, [r2, #4]
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	8113      	strh	r3, [r2, #8]
			break;
 800659c:	f015 bfd4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 127 :
			strcpy(p->name,"RYEBREAD");
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80065a6:	4994      	ldr	r1, [pc, #592]	; (80067f8 <problem_fetch+0x5110>)
 80065a8:	461a      	mov	r2, r3
 80065aa:	460b      	mov	r3, r1
 80065ac:	cb03      	ldmia	r3!, {r0, r1}
 80065ae:	6010      	str	r0, [r2, #0]
 80065b0:	6051      	str	r1, [r2, #4]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C+");
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80065bc:	4a8f      	ldr	r2, [pc, #572]	; (80067fc <problem_fetch+0x5114>)
 80065be:	6810      	ldr	r0, [r2, #0]
 80065c0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2205      	movs	r2, #5
 80065c6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,A,A");
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	33a4      	adds	r3, #164	; 0xa4
 80065cc:	498c      	ldr	r1, [pc, #560]	; (8006800 <problem_fetch+0x5118>)
 80065ce:	461a      	mov	r2, r3
 80065d0:	460b      	mov	r3, r1
 80065d2:	cb03      	ldmia	r3!, {r0, r1}
 80065d4:	6010      	str	r0, [r2, #0]
 80065d6:	6051      	str	r1, [r2, #4]
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,11,5,14,18");
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	3304      	adds	r3, #4
 80065e0:	4a88      	ldr	r2, [pc, #544]	; (8006804 <problem_fetch+0x511c>)
 80065e2:	461c      	mov	r4, r3
 80065e4:	4613      	mov	r3, r2
 80065e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80065e8:	6020      	str	r0, [r4, #0]
 80065ea:	6061      	str	r1, [r4, #4]
 80065ec:	60a2      	str	r2, [r4, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80065f8:	4979      	ldr	r1, [pc, #484]	; (80067e0 <problem_fetch+0x50f8>)
 80065fa:	461a      	mov	r2, r3
 80065fc:	460b      	mov	r3, r1
 80065fe:	cb03      	ldmia	r3!, {r0, r1}
 8006600:	6010      	str	r0, [r2, #0]
 8006602:	6051      	str	r1, [r2, #4]
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	8113      	strh	r3, [r2, #8]
			break;
 8006608:	f015 bf9e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 128 :
			strcpy(p->name,"SUPE");
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006612:	4a7d      	ldr	r2, [pc, #500]	; (8006808 <problem_fetch+0x5120>)
 8006614:	6810      	ldr	r0, [r2, #0]
 8006616:	6018      	str	r0, [r3, #0]
 8006618:	7912      	ldrb	r2, [r2, #4]
 800661a:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006622:	4a7a      	ldr	r2, [pc, #488]	; (800680c <problem_fetch+0x5124>)
 8006624:	6810      	ldr	r0, [r2, #0]
 8006626:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2208      	movs	r2, #8
 800662c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,G,C,G,E,I");
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	33a4      	adds	r3, #164	; 0xa4
 8006632:	4a77      	ldr	r2, [pc, #476]	; (8006810 <problem_fetch+0x5128>)
 8006634:	461c      	mov	r4, r3
 8006636:	4615      	mov	r5, r2
 8006638:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800663a:	6020      	str	r0, [r4, #0]
 800663c:	6061      	str	r1, [r4, #4]
 800663e:	60a2      	str	r2, [r4, #8]
 8006640:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,6,10,13,14,16,18");
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3304      	adds	r3, #4
 8006646:	4a73      	ldr	r2, [pc, #460]	; (8006814 <problem_fetch+0x512c>)
 8006648:	461d      	mov	r5, r3
 800664a:	4614      	mov	r4, r2
 800664c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800664e:	6028      	str	r0, [r5, #0]
 8006650:	6069      	str	r1, [r5, #4]
 8006652:	60aa      	str	r2, [r5, #8]
 8006654:	60eb      	str	r3, [r5, #12]
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	6128      	str	r0, [r5, #16]
 800665a:	7923      	ldrb	r3, [r4, #4]
 800665c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006664:	4a6c      	ldr	r2, [pc, #432]	; (8006818 <problem_fetch+0x5130>)
 8006666:	461c      	mov	r4, r3
 8006668:	4615      	mov	r5, r2
 800666a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800666c:	6020      	str	r0, [r4, #0]
 800666e:	6061      	str	r1, [r4, #4]
 8006670:	60a2      	str	r2, [r4, #8]
 8006672:	60e3      	str	r3, [r4, #12]
			break;
 8006674:	f015 bf68 	b.w	801c548 <problem_fetch+0x1ae60>
		case 129 :
			strcpy(p->name,"LONG BOI 2");
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800667e:	4967      	ldr	r1, [pc, #412]	; (800681c <problem_fetch+0x5134>)
 8006680:	461a      	mov	r2, r3
 8006682:	460b      	mov	r3, r1
 8006684:	cb03      	ldmia	r3!, {r0, r1}
 8006686:	6010      	str	r0, [r2, #0]
 8006688:	6051      	str	r1, [r2, #4]
 800668a:	8819      	ldrh	r1, [r3, #0]
 800668c:	789b      	ldrb	r3, [r3, #2]
 800668e:	8111      	strh	r1, [r2, #8]
 8006690:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006698:	4a4e      	ldr	r2, [pc, #312]	; (80067d4 <problem_fetch+0x50ec>)
 800669a:	6810      	ldr	r0, [r2, #0]
 800669c:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2204      	movs	r2, #4
 80066a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,I");
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	33a4      	adds	r3, #164	; 0xa4
 80066a8:	495d      	ldr	r1, [pc, #372]	; (8006820 <problem_fetch+0x5138>)
 80066aa:	461a      	mov	r2, r3
 80066ac:	460b      	mov	r3, r1
 80066ae:	cb03      	ldmia	r3!, {r0, r1}
 80066b0:	6010      	str	r0, [r2, #0]
 80066b2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,15,18");
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	495a      	ldr	r1, [pc, #360]	; (8006824 <problem_fetch+0x513c>)
 80066ba:	461a      	mov	r2, r3
 80066bc:	460b      	mov	r3, r1
 80066be:	cb03      	ldmia	r3!, {r0, r1}
 80066c0:	6010      	str	r0, [r2, #0]
 80066c2:	6051      	str	r1, [r2, #4]
 80066c4:	8819      	ldrh	r1, [r3, #0]
 80066c6:	789b      	ldrb	r3, [r3, #2]
 80066c8:	8111      	strh	r1, [r2, #8]
 80066ca:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80066d2:	4955      	ldr	r1, [pc, #340]	; (8006828 <problem_fetch+0x5140>)
 80066d4:	461a      	mov	r2, r3
 80066d6:	460b      	mov	r3, r1
 80066d8:	cb03      	ldmia	r3!, {r0, r1}
 80066da:	6010      	str	r0, [r2, #0]
 80066dc:	6051      	str	r1, [r2, #4]
			break;
 80066de:	f015 bf33 	b.w	801c548 <problem_fetch+0x1ae60>
		case 130 :
			strcpy(p->name,"PHILLING SHIFTS");
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80066e8:	4a50      	ldr	r2, [pc, #320]	; (800682c <problem_fetch+0x5144>)
 80066ea:	461c      	mov	r4, r3
 80066ec:	4615      	mov	r5, r2
 80066ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066f0:	6020      	str	r0, [r4, #0]
 80066f2:	6061      	str	r1, [r4, #4]
 80066f4:	60a2      	str	r2, [r4, #8]
 80066f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80066fe:	4a4c      	ldr	r2, [pc, #304]	; (8006830 <problem_fetch+0x5148>)
 8006700:	8811      	ldrh	r1, [r2, #0]
 8006702:	7892      	ldrb	r2, [r2, #2]
 8006704:	8019      	strh	r1, [r3, #0]
 8006706:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2207      	movs	r2, #7
 800670c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,D,E,J,H,K,G");
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	33a4      	adds	r3, #164	; 0xa4
 8006712:	4a48      	ldr	r2, [pc, #288]	; (8006834 <problem_fetch+0x514c>)
 8006714:	461c      	mov	r4, r3
 8006716:	4613      	mov	r3, r2
 8006718:	cb07      	ldmia	r3!, {r0, r1, r2}
 800671a:	6020      	str	r0, [r4, #0]
 800671c:	6061      	str	r1, [r4, #4]
 800671e:	60a2      	str	r2, [r4, #8]
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,18,14,12,8,9,4");
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4a43      	ldr	r2, [pc, #268]	; (8006838 <problem_fetch+0x5150>)
 800672a:	461d      	mov	r5, r3
 800672c:	4614      	mov	r4, r2
 800672e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006730:	6028      	str	r0, [r5, #0]
 8006732:	6069      	str	r1, [r5, #4]
 8006734:	60aa      	str	r2, [r5, #8]
 8006736:	60eb      	str	r3, [r5, #12]
 8006738:	8823      	ldrh	r3, [r4, #0]
 800673a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,e,d,d,d,d,s");
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006742:	4a3e      	ldr	r2, [pc, #248]	; (800683c <problem_fetch+0x5154>)
 8006744:	461c      	mov	r4, r3
 8006746:	4613      	mov	r3, r2
 8006748:	cb07      	ldmia	r3!, {r0, r1, r2}
 800674a:	6020      	str	r0, [r4, #0]
 800674c:	6061      	str	r1, [r4, #4]
 800674e:	60a2      	str	r2, [r4, #8]
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	81a3      	strh	r3, [r4, #12]
			break;
 8006754:	f015 bef8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 131 :
			strcpy(p->name,"HOJAR KLUBBEN");
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800675e:	4a38      	ldr	r2, [pc, #224]	; (8006840 <problem_fetch+0x5158>)
 8006760:	461c      	mov	r4, r3
 8006762:	4613      	mov	r3, r2
 8006764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006766:	6020      	str	r0, [r4, #0]
 8006768:	6061      	str	r1, [r4, #4]
 800676a:	60a2      	str	r2, [r4, #8]
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006776:	4a33      	ldr	r2, [pc, #204]	; (8006844 <problem_fetch+0x515c>)
 8006778:	8811      	ldrh	r1, [r2, #0]
 800677a:	7892      	ldrb	r2, [r2, #2]
 800677c:	8019      	strh	r1, [r3, #0]
 800677e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2207      	movs	r2, #7
 8006784:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,J,G,H,G,I");
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	33a4      	adds	r3, #164	; 0xa4
 800678a:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <problem_fetch+0x5160>)
 800678c:	461c      	mov	r4, r3
 800678e:	4613      	mov	r3, r2
 8006790:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006792:	6020      	str	r0, [r4, #0]
 8006794:	6061      	str	r1, [r4, #4]
 8006796:	60a2      	str	r2, [r4, #8]
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,10,13,15,16,17,18");
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4a2a      	ldr	r2, [pc, #168]	; (800684c <problem_fetch+0x5164>)
 80067a2:	461d      	mov	r5, r3
 80067a4:	4614      	mov	r4, r2
 80067a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067a8:	6028      	str	r0, [r5, #0]
 80067aa:	6069      	str	r1, [r5, #4]
 80067ac:	60aa      	str	r2, [r5, #8]
 80067ae:	60eb      	str	r3, [r5, #12]
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80067ba:	4a25      	ldr	r2, [pc, #148]	; (8006850 <problem_fetch+0x5168>)
 80067bc:	461c      	mov	r4, r3
 80067be:	4613      	mov	r3, r2
 80067c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80067c2:	6020      	str	r0, [r4, #0]
 80067c4:	6061      	str	r1, [r4, #4]
 80067c6:	60a2      	str	r2, [r4, #8]
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	81a3      	strh	r3, [r4, #12]
			break;
 80067cc:	f015 bebc 	b.w	801c548 <problem_fetch+0x1ae60>
 80067d0:	0802530c 	.word	0x0802530c
 80067d4:	08023afc 	.word	0x08023afc
 80067d8:	08025314 	.word	0x08025314
 80067dc:	08025320 	.word	0x08025320
 80067e0:	08023e28 	.word	0x08023e28
 80067e4:	08025330 	.word	0x08025330
 80067e8:	0802395c 	.word	0x0802395c
 80067ec:	08025340 	.word	0x08025340
 80067f0:	0802534c 	.word	0x0802534c
 80067f4:	0802403c 	.word	0x0802403c
 80067f8:	0802535c 	.word	0x0802535c
 80067fc:	08023f68 	.word	0x08023f68
 8006800:	08025368 	.word	0x08025368
 8006804:	08025374 	.word	0x08025374
 8006808:	08025384 	.word	0x08025384
 800680c:	080239f4 	.word	0x080239f4
 8006810:	0802538c 	.word	0x0802538c
 8006814:	0802539c 	.word	0x0802539c
 8006818:	08023b6c 	.word	0x08023b6c
 800681c:	080253b4 	.word	0x080253b4
 8006820:	080253c0 	.word	0x080253c0
 8006824:	080253c8 	.word	0x080253c8
 8006828:	08023ab0 	.word	0x08023ab0
 800682c:	080253d4 	.word	0x080253d4
 8006830:	08024190 	.word	0x08024190
 8006834:	080253e4 	.word	0x080253e4
 8006838:	080253f4 	.word	0x080253f4
 800683c:	08025408 	.word	0x08025408
 8006840:	08025418 	.word	0x08025418
 8006844:	08024054 	.word	0x08024054
 8006848:	08025428 	.word	0x08025428
 800684c:	08025438 	.word	0x08025438
 8006850:	08023ae4 	.word	0x08023ae4
		case 132 :
			strcpy(p->name,"TRIP4");
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800685a:	4ac3      	ldr	r2, [pc, #780]	; (8006b68 <problem_fetch+0x5480>)
 800685c:	6810      	ldr	r0, [r2, #0]
 800685e:	6018      	str	r0, [r3, #0]
 8006860:	8892      	ldrh	r2, [r2, #4]
 8006862:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800686a:	4ac0      	ldr	r2, [pc, #768]	; (8006b6c <problem_fetch+0x5484>)
 800686c:	6810      	ldr	r0, [r2, #0]
 800686e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2209      	movs	r2, #9
 8006874:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,J,H,D,D,I,D");
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	33a4      	adds	r3, #164	; 0xa4
 800687a:	4abd      	ldr	r2, [pc, #756]	; (8006b70 <problem_fetch+0x5488>)
 800687c:	461d      	mov	r5, r3
 800687e:	4614      	mov	r4, r2
 8006880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006882:	6028      	str	r0, [r5, #0]
 8006884:	6069      	str	r1, [r5, #4]
 8006886:	60aa      	str	r2, [r5, #8]
 8006888:	60eb      	str	r3, [r5, #12]
 800688a:	8823      	ldrh	r3, [r4, #0]
 800688c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,13,12,11,7,7,18");
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	4ab8      	ldr	r2, [pc, #736]	; (8006b74 <problem_fetch+0x548c>)
 8006894:	461d      	mov	r5, r3
 8006896:	4614      	mov	r4, r2
 8006898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800689a:	6028      	str	r0, [r5, #0]
 800689c:	6069      	str	r1, [r5, #4]
 800689e:	60aa      	str	r2, [r5, #8]
 80068a0:	60eb      	str	r3, [r5, #12]
 80068a2:	6820      	ldr	r0, [r4, #0]
 80068a4:	6128      	str	r0, [r5, #16]
 80068a6:	88a3      	ldrh	r3, [r4, #4]
 80068a8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80068b0:	4ab1      	ldr	r2, [pc, #708]	; (8006b78 <problem_fetch+0x5490>)
 80068b2:	461d      	mov	r5, r3
 80068b4:	4614      	mov	r4, r2
 80068b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068b8:	6028      	str	r0, [r5, #0]
 80068ba:	6069      	str	r1, [r5, #4]
 80068bc:	60aa      	str	r2, [r5, #8]
 80068be:	60eb      	str	r3, [r5, #12]
 80068c0:	8823      	ldrh	r3, [r4, #0]
 80068c2:	822b      	strh	r3, [r5, #16]
			break;
 80068c4:	f015 be40 	b.w	801c548 <problem_fetch+0x1ae60>
		case 133 :
			strcpy(p->name,"TRIP3");
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80068ce:	4aab      	ldr	r2, [pc, #684]	; (8006b7c <problem_fetch+0x5494>)
 80068d0:	6810      	ldr	r0, [r2, #0]
 80068d2:	6018      	str	r0, [r3, #0]
 80068d4:	8892      	ldrh	r2, [r2, #4]
 80068d6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80068de:	4aa8      	ldr	r2, [pc, #672]	; (8006b80 <problem_fetch+0x5498>)
 80068e0:	6810      	ldr	r0, [r2, #0]
 80068e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2206      	movs	r2, #6
 80068e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,C,C,D");
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	33a4      	adds	r3, #164	; 0xa4
 80068ee:	4aa5      	ldr	r2, [pc, #660]	; (8006b84 <problem_fetch+0x549c>)
 80068f0:	461c      	mov	r4, r3
 80068f2:	4613      	mov	r3, r2
 80068f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80068f6:	6020      	str	r0, [r4, #0]
 80068f8:	6061      	str	r1, [r4, #4]
 80068fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"12,6,10,8,5,18");
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4aa1      	ldr	r2, [pc, #644]	; (8006b88 <problem_fetch+0x54a0>)
 8006902:	461c      	mov	r4, r3
 8006904:	4613      	mov	r3, r2
 8006906:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006908:	6020      	str	r0, [r4, #0]
 800690a:	6061      	str	r1, [r4, #4]
 800690c:	60a2      	str	r2, [r4, #8]
 800690e:	881a      	ldrh	r2, [r3, #0]
 8006910:	789b      	ldrb	r3, [r3, #2]
 8006912:	81a2      	strh	r2, [r4, #12]
 8006914:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,d,d,s,e");
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800691c:	4a9b      	ldr	r2, [pc, #620]	; (8006b8c <problem_fetch+0x54a4>)
 800691e:	461c      	mov	r4, r3
 8006920:	4613      	mov	r3, r2
 8006922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006924:	6020      	str	r0, [r4, #0]
 8006926:	6061      	str	r1, [r4, #4]
 8006928:	60a2      	str	r2, [r4, #8]
			break;
 800692a:	f015 be0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 134 :
			strcpy(p->name,"LEVITATOR MUSIC");
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006934:	4a96      	ldr	r2, [pc, #600]	; (8006b90 <problem_fetch+0x54a8>)
 8006936:	461c      	mov	r4, r3
 8006938:	4615      	mov	r5, r2
 800693a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800693c:	6020      	str	r0, [r4, #0]
 800693e:	6061      	str	r1, [r4, #4]
 8006940:	60a2      	str	r2, [r4, #8]
 8006942:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800694a:	4a8d      	ldr	r2, [pc, #564]	; (8006b80 <problem_fetch+0x5498>)
 800694c:	6810      	ldr	r0, [r2, #0]
 800694e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2207      	movs	r2, #7
 8006954:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,A,A,F,K,J,I");
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	33a4      	adds	r3, #164	; 0xa4
 800695a:	4a8e      	ldr	r2, [pc, #568]	; (8006b94 <problem_fetch+0x54ac>)
 800695c:	461c      	mov	r4, r3
 800695e:	4613      	mov	r3, r2
 8006960:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	6061      	str	r1, [r4, #4]
 8006966:	60a2      	str	r2, [r4, #8]
 8006968:	881b      	ldrh	r3, [r3, #0]
 800696a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,14,18,11,9,5,7");
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3304      	adds	r3, #4
 8006970:	4a89      	ldr	r2, [pc, #548]	; (8006b98 <problem_fetch+0x54b0>)
 8006972:	461d      	mov	r5, r3
 8006974:	4614      	mov	r4, r2
 8006976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006978:	6028      	str	r0, [r5, #0]
 800697a:	6069      	str	r1, [r5, #4]
 800697c:	60aa      	str	r2, [r5, #8]
 800697e:	60eb      	str	r3, [r5, #12]
 8006980:	8823      	ldrh	r3, [r4, #0]
 8006982:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,e,d,d,s,d");
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800698a:	4a84      	ldr	r2, [pc, #528]	; (8006b9c <problem_fetch+0x54b4>)
 800698c:	461c      	mov	r4, r3
 800698e:	4613      	mov	r3, r2
 8006990:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006992:	6020      	str	r0, [r4, #0]
 8006994:	6061      	str	r1, [r4, #4]
 8006996:	60a2      	str	r2, [r4, #8]
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	81a3      	strh	r3, [r4, #12]
			break;
 800699c:	f015 bdd4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 135 :
			strcpy(p->name,"ELEVATOR MUSIC");
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80069a6:	4a7e      	ldr	r2, [pc, #504]	; (8006ba0 <problem_fetch+0x54b8>)
 80069a8:	461c      	mov	r4, r3
 80069aa:	4613      	mov	r3, r2
 80069ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069ae:	6020      	str	r0, [r4, #0]
 80069b0:	6061      	str	r1, [r4, #4]
 80069b2:	60a2      	str	r2, [r4, #8]
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	789b      	ldrb	r3, [r3, #2]
 80069b8:	81a2      	strh	r2, [r4, #12]
 80069ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80069c2:	4a78      	ldr	r2, [pc, #480]	; (8006ba4 <problem_fetch+0x54bc>)
 80069c4:	8811      	ldrh	r1, [r2, #0]
 80069c6:	7892      	ldrb	r2, [r2, #2]
 80069c8:	8019      	strh	r1, [r3, #0]
 80069ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2206      	movs	r2, #6
 80069d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"D,G,K,J,F,I");
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	33a4      	adds	r3, #164	; 0xa4
 80069d6:	4a74      	ldr	r2, [pc, #464]	; (8006ba8 <problem_fetch+0x54c0>)
 80069d8:	461c      	mov	r4, r3
 80069da:	4613      	mov	r3, r2
 80069dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069de:	6020      	str	r0, [r4, #0]
 80069e0:	6061      	str	r1, [r4, #4]
 80069e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,14,9,5,11,7");
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	3304      	adds	r3, #4
 80069e8:	4a70      	ldr	r2, [pc, #448]	; (8006bac <problem_fetch+0x54c4>)
 80069ea:	461c      	mov	r4, r3
 80069ec:	4613      	mov	r3, r2
 80069ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80069f0:	6020      	str	r0, [r4, #0]
 80069f2:	6061      	str	r1, [r4, #4]
 80069f4:	60a2      	str	r2, [r4, #8]
 80069f6:	881a      	ldrh	r2, [r3, #0]
 80069f8:	789b      	ldrb	r3, [r3, #2]
 80069fa:	81a2      	strh	r2, [r4, #12]
 80069fc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,d,d,s,d,d");
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006a04:	4a6a      	ldr	r2, [pc, #424]	; (8006bb0 <problem_fetch+0x54c8>)
 8006a06:	461c      	mov	r4, r3
 8006a08:	4613      	mov	r3, r2
 8006a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a0c:	6020      	str	r0, [r4, #0]
 8006a0e:	6061      	str	r1, [r4, #4]
 8006a10:	60a2      	str	r2, [r4, #8]
			break;
 8006a12:	f015 bd99 	b.w	801c548 <problem_fetch+0x1ae60>
		case 136 :
			strcpy(p->name,"POPPED A XAN-DON");
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a1c:	4a65      	ldr	r2, [pc, #404]	; (8006bb4 <problem_fetch+0x54cc>)
 8006a1e:	461d      	mov	r5, r3
 8006a20:	4614      	mov	r4, r2
 8006a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a24:	6028      	str	r0, [r5, #0]
 8006a26:	6069      	str	r1, [r5, #4]
 8006a28:	60aa      	str	r2, [r5, #8]
 8006a2a:	60eb      	str	r3, [r5, #12]
 8006a2c:	7823      	ldrb	r3, [r4, #0]
 8006a2e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006a36:	4a60      	ldr	r2, [pc, #384]	; (8006bb8 <problem_fetch+0x54d0>)
 8006a38:	6810      	ldr	r0, [r2, #0]
 8006a3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2205      	movs	r2, #5
 8006a40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,K,I");
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	33a4      	adds	r3, #164	; 0xa4
 8006a46:	495d      	ldr	r1, [pc, #372]	; (8006bbc <problem_fetch+0x54d4>)
 8006a48:	461a      	mov	r2, r3
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	cb03      	ldmia	r3!, {r0, r1}
 8006a4e:	6010      	str	r0, [r2, #0]
 8006a50:	6051      	str	r1, [r2, #4]
 8006a52:	881b      	ldrh	r3, [r3, #0]
 8006a54:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4a59      	ldr	r2, [pc, #356]	; (8006bc0 <problem_fetch+0x54d8>)
 8006a5c:	461c      	mov	r4, r3
 8006a5e:	4613      	mov	r3, r2
 8006a60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a62:	6020      	str	r0, [r4, #0]
 8006a64:	6061      	str	r1, [r4, #4]
 8006a66:	60a2      	str	r2, [r4, #8]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006a72:	4954      	ldr	r1, [pc, #336]	; (8006bc4 <problem_fetch+0x54dc>)
 8006a74:	461a      	mov	r2, r3
 8006a76:	460b      	mov	r3, r1
 8006a78:	cb03      	ldmia	r3!, {r0, r1}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	6051      	str	r1, [r2, #4]
 8006a7e:	881b      	ldrh	r3, [r3, #0]
 8006a80:	8113      	strh	r3, [r2, #8]
			break;
 8006a82:	f015 bd61 	b.w	801c548 <problem_fetch+0x1ae60>
		case 137 :
			strcpy(p->name,"DOMINOS PINZA");
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006a8c:	4a4e      	ldr	r2, [pc, #312]	; (8006bc8 <problem_fetch+0x54e0>)
 8006a8e:	461c      	mov	r4, r3
 8006a90:	4613      	mov	r3, r2
 8006a92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006a94:	6020      	str	r0, [r4, #0]
 8006a96:	6061      	str	r1, [r4, #4]
 8006a98:	60a2      	str	r2, [r4, #8]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006aa4:	4a44      	ldr	r2, [pc, #272]	; (8006bb8 <problem_fetch+0x54d0>)
 8006aa6:	6810      	ldr	r0, [r2, #0]
 8006aa8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2205      	movs	r2, #5
 8006aae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,D,I,I");
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	33a4      	adds	r3, #164	; 0xa4
 8006ab4:	4945      	ldr	r1, [pc, #276]	; (8006bcc <problem_fetch+0x54e4>)
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	460b      	mov	r3, r1
 8006aba:	cb03      	ldmia	r3!, {r0, r1}
 8006abc:	6010      	str	r0, [r2, #0]
 8006abe:	6051      	str	r1, [r2, #4]
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,14,18");
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4a41      	ldr	r2, [pc, #260]	; (8006bd0 <problem_fetch+0x54e8>)
 8006aca:	461c      	mov	r4, r3
 8006acc:	4613      	mov	r3, r2
 8006ace:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006ad0:	6020      	str	r0, [r4, #0]
 8006ad2:	6061      	str	r1, [r4, #4]
 8006ad4:	60a2      	str	r2, [r4, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006ae0:	4938      	ldr	r1, [pc, #224]	; (8006bc4 <problem_fetch+0x54dc>)
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	cb03      	ldmia	r3!, {r0, r1}
 8006ae8:	6010      	str	r0, [r2, #0]
 8006aea:	6051      	str	r1, [r2, #4]
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	8113      	strh	r3, [r2, #8]
			break;
 8006af0:	f015 bd2a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 138 :
			strcpy(p->name,"HOWARD THE ALIEN");
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006afa:	4a36      	ldr	r2, [pc, #216]	; (8006bd4 <problem_fetch+0x54ec>)
 8006afc:	461d      	mov	r5, r3
 8006afe:	4614      	mov	r4, r2
 8006b00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b02:	6028      	str	r0, [r5, #0]
 8006b04:	6069      	str	r1, [r5, #4]
 8006b06:	60aa      	str	r2, [r5, #8]
 8006b08:	60eb      	str	r3, [r5, #12]
 8006b0a:	7823      	ldrb	r3, [r4, #0]
 8006b0c:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006b14:	4a30      	ldr	r2, [pc, #192]	; (8006bd8 <problem_fetch+0x54f0>)
 8006b16:	8811      	ldrh	r1, [r2, #0]
 8006b18:	7892      	ldrb	r2, [r2, #2]
 8006b1a:	8019      	strh	r1, [r3, #0]
 8006b1c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2205      	movs	r2, #5
 8006b22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,C,I,D");
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	33a4      	adds	r3, #164	; 0xa4
 8006b28:	492c      	ldr	r1, [pc, #176]	; (8006bdc <problem_fetch+0x54f4>)
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	cb03      	ldmia	r3!, {r0, r1}
 8006b30:	6010      	str	r0, [r2, #0]
 8006b32:	6051      	str	r1, [r2, #4]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4a28      	ldr	r2, [pc, #160]	; (8006be0 <problem_fetch+0x54f8>)
 8006b3e:	461c      	mov	r4, r3
 8006b40:	4613      	mov	r3, r2
 8006b42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006b44:	6020      	str	r0, [r4, #0]
 8006b46:	6061      	str	r1, [r4, #4]
 8006b48:	60a2      	str	r2, [r4, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006b54:	491b      	ldr	r1, [pc, #108]	; (8006bc4 <problem_fetch+0x54dc>)
 8006b56:	461a      	mov	r2, r3
 8006b58:	460b      	mov	r3, r1
 8006b5a:	cb03      	ldmia	r3!, {r0, r1}
 8006b5c:	6010      	str	r0, [r2, #0]
 8006b5e:	6051      	str	r1, [r2, #4]
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	8113      	strh	r3, [r2, #8]
			break;
 8006b64:	f015 bcf0 	b.w	801c548 <problem_fetch+0x1ae60>
 8006b68:	0802544c 	.word	0x0802544c
 8006b6c:	08023f68 	.word	0x08023f68
 8006b70:	08025454 	.word	0x08025454
 8006b74:	08025468 	.word	0x08025468
 8006b78:	08024940 	.word	0x08024940
 8006b7c:	08025480 	.word	0x08025480
 8006b80:	08023afc 	.word	0x08023afc
 8006b84:	08025488 	.word	0x08025488
 8006b88:	08025494 	.word	0x08025494
 8006b8c:	080254a4 	.word	0x080254a4
 8006b90:	080254b0 	.word	0x080254b0
 8006b94:	080254c0 	.word	0x080254c0
 8006b98:	080254d0 	.word	0x080254d0
 8006b9c:	080254e4 	.word	0x080254e4
 8006ba0:	080254f4 	.word	0x080254f4
 8006ba4:	0802391c 	.word	0x0802391c
 8006ba8:	08025504 	.word	0x08025504
 8006bac:	08025510 	.word	0x08025510
 8006bb0:	08025520 	.word	0x08025520
 8006bb4:	0802552c 	.word	0x0802552c
 8006bb8:	08023a98 	.word	0x08023a98
 8006bbc:	08025540 	.word	0x08025540
 8006bc0:	08023f78 	.word	0x08023f78
 8006bc4:	08023e28 	.word	0x08023e28
 8006bc8:	0802554c 	.word	0x0802554c
 8006bcc:	0802555c 	.word	0x0802555c
 8006bd0:	08025568 	.word	0x08025568
 8006bd4:	08025578 	.word	0x08025578
 8006bd8:	08024190 	.word	0x08024190
 8006bdc:	0802558c 	.word	0x0802558c
 8006be0:	08025598 	.word	0x08025598
		case 139 :
			strcpy(p->name,"EZ CLAP");
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006bea:	49c4      	ldr	r1, [pc, #784]	; (8006efc <problem_fetch+0x5814>)
 8006bec:	461a      	mov	r2, r3
 8006bee:	460b      	mov	r3, r1
 8006bf0:	cb03      	ldmia	r3!, {r0, r1}
 8006bf2:	6010      	str	r0, [r2, #0]
 8006bf4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006bfc:	4ac0      	ldr	r2, [pc, #768]	; (8006f00 <problem_fetch+0x5818>)
 8006bfe:	8811      	ldrh	r1, [r2, #0]
 8006c00:	7892      	ldrb	r2, [r2, #2]
 8006c02:	8019      	strh	r1, [r3, #0]
 8006c04:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2206      	movs	r2, #6
 8006c0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,E");
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	33a4      	adds	r3, #164	; 0xa4
 8006c10:	4abc      	ldr	r2, [pc, #752]	; (8006f04 <problem_fetch+0x581c>)
 8006c12:	461c      	mov	r4, r3
 8006c14:	4613      	mov	r3, r2
 8006c16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c18:	6020      	str	r0, [r4, #0]
 8006c1a:	6061      	str	r1, [r4, #4]
 8006c1c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,18,14");
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4ab9      	ldr	r2, [pc, #740]	; (8006f08 <problem_fetch+0x5820>)
 8006c24:	461c      	mov	r4, r3
 8006c26:	4615      	mov	r5, r2
 8006c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c2a:	6020      	str	r0, [r4, #0]
 8006c2c:	6061      	str	r1, [r4, #4]
 8006c2e:	60a2      	str	r2, [r4, #8]
 8006c30:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e,d");
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006c38:	4ab4      	ldr	r2, [pc, #720]	; (8006f0c <problem_fetch+0x5824>)
 8006c3a:	461c      	mov	r4, r3
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c40:	6020      	str	r0, [r4, #0]
 8006c42:	6061      	str	r1, [r4, #4]
 8006c44:	60a2      	str	r2, [r4, #8]
			break;
 8006c46:	f015 bc7f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 140 :
			strcpy(p->name,"BRUTE");
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006c50:	4aaf      	ldr	r2, [pc, #700]	; (8006f10 <problem_fetch+0x5828>)
 8006c52:	6810      	ldr	r0, [r2, #0]
 8006c54:	6018      	str	r0, [r3, #0]
 8006c56:	8892      	ldrh	r2, [r2, #4]
 8006c58:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006c60:	4aac      	ldr	r2, [pc, #688]	; (8006f14 <problem_fetch+0x582c>)
 8006c62:	8811      	ldrh	r1, [r2, #0]
 8006c64:	7892      	ldrb	r2, [r2, #2]
 8006c66:	8019      	strh	r1, [r3, #0]
 8006c68:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,B,G,I");
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	33a4      	adds	r3, #164	; 0xa4
 8006c74:	49a8      	ldr	r1, [pc, #672]	; (8006f18 <problem_fetch+0x5830>)
 8006c76:	461a      	mov	r2, r3
 8006c78:	460b      	mov	r3, r1
 8006c7a:	cb03      	ldmia	r3!, {r0, r1}
 8006c7c:	6010      	str	r0, [r2, #0]
 8006c7e:	6051      	str	r1, [r2, #4]
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,10,14,18");
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3304      	adds	r3, #4
 8006c88:	4aa4      	ldr	r2, [pc, #656]	; (8006f1c <problem_fetch+0x5834>)
 8006c8a:	461c      	mov	r4, r3
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c90:	6020      	str	r0, [r4, #0]
 8006c92:	6061      	str	r1, [r4, #4]
 8006c94:	60a2      	str	r2, [r4, #8]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006ca0:	499f      	ldr	r1, [pc, #636]	; (8006f20 <problem_fetch+0x5838>)
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	cb03      	ldmia	r3!, {r0, r1}
 8006ca8:	6010      	str	r0, [r2, #0]
 8006caa:	6051      	str	r1, [r2, #4]
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	8113      	strh	r3, [r2, #8]
			break;
 8006cb0:	f015 bc4a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 141 :
			strcpy(p->name,"MASTERFUL GAP ALT");
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006cba:	4a9a      	ldr	r2, [pc, #616]	; (8006f24 <problem_fetch+0x583c>)
 8006cbc:	461d      	mov	r5, r3
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cc2:	6028      	str	r0, [r5, #0]
 8006cc4:	6069      	str	r1, [r5, #4]
 8006cc6:	60aa      	str	r2, [r5, #8]
 8006cc8:	60eb      	str	r3, [r5, #12]
 8006cca:	8823      	ldrh	r3, [r4, #0]
 8006ccc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006cd4:	4a8f      	ldr	r2, [pc, #572]	; (8006f14 <problem_fetch+0x582c>)
 8006cd6:	8811      	ldrh	r1, [r2, #0]
 8006cd8:	7892      	ldrb	r2, [r2, #2]
 8006cda:	8019      	strh	r1, [r3, #0]
 8006cdc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2206      	movs	r2, #6
 8006ce2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,E,F,I");
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	33a4      	adds	r3, #164	; 0xa4
 8006ce8:	4a8f      	ldr	r2, [pc, #572]	; (8006f28 <problem_fetch+0x5840>)
 8006cea:	461c      	mov	r4, r3
 8006cec:	4613      	mov	r3, r2
 8006cee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006cf0:	6020      	str	r0, [r4, #0]
 8006cf2:	6061      	str	r1, [r4, #4]
 8006cf4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"9,6,5,16,11,18");
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4a8c      	ldr	r2, [pc, #560]	; (8006f2c <problem_fetch+0x5844>)
 8006cfc:	461c      	mov	r4, r3
 8006cfe:	4613      	mov	r3, r2
 8006d00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d02:	6020      	str	r0, [r4, #0]
 8006d04:	6061      	str	r1, [r4, #4]
 8006d06:	60a2      	str	r2, [r4, #8]
 8006d08:	881a      	ldrh	r2, [r3, #0]
 8006d0a:	789b      	ldrb	r3, [r3, #2]
 8006d0c:	81a2      	strh	r2, [r4, #12]
 8006d0e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,s,s,d,d,e");
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006d16:	4a86      	ldr	r2, [pc, #536]	; (8006f30 <problem_fetch+0x5848>)
 8006d18:	461c      	mov	r4, r3
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d1e:	6020      	str	r0, [r4, #0]
 8006d20:	6061      	str	r1, [r4, #4]
 8006d22:	60a2      	str	r2, [r4, #8]
			break;
 8006d24:	f015 bc10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 142 :
			strcpy(p->name,"RIVER RAT");
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d2e:	4981      	ldr	r1, [pc, #516]	; (8006f34 <problem_fetch+0x584c>)
 8006d30:	461a      	mov	r2, r3
 8006d32:	460b      	mov	r3, r1
 8006d34:	cb03      	ldmia	r3!, {r0, r1}
 8006d36:	6010      	str	r0, [r2, #0]
 8006d38:	6051      	str	r1, [r2, #4]
 8006d3a:	881b      	ldrh	r3, [r3, #0]
 8006d3c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006d44:	4a7c      	ldr	r2, [pc, #496]	; (8006f38 <problem_fetch+0x5850>)
 8006d46:	6810      	ldr	r0, [r2, #0]
 8006d48:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2206      	movs	r2, #6
 8006d4e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,E,A");
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	33a4      	adds	r3, #164	; 0xa4
 8006d54:	4a79      	ldr	r2, [pc, #484]	; (8006f3c <problem_fetch+0x5854>)
 8006d56:	461c      	mov	r4, r3
 8006d58:	4613      	mov	r3, r2
 8006d5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d5c:	6020      	str	r0, [r4, #0]
 8006d5e:	6061      	str	r1, [r4, #4]
 8006d60:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,11,16,18");
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4a76      	ldr	r2, [pc, #472]	; (8006f40 <problem_fetch+0x5858>)
 8006d68:	461c      	mov	r4, r3
 8006d6a:	4615      	mov	r5, r2
 8006d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6e:	6020      	str	r0, [r4, #0]
 8006d70:	6061      	str	r1, [r4, #4]
 8006d72:	60a2      	str	r2, [r4, #8]
 8006d74:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006d7c:	4a71      	ldr	r2, [pc, #452]	; (8006f44 <problem_fetch+0x585c>)
 8006d7e:	461c      	mov	r4, r3
 8006d80:	4613      	mov	r3, r2
 8006d82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d84:	6020      	str	r0, [r4, #0]
 8006d86:	6061      	str	r1, [r4, #4]
 8006d88:	60a2      	str	r2, [r4, #8]
			break;
 8006d8a:	f015 bbdd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 143 :
			strcpy(p->name,"BIG DAWWWWG");
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006d94:	4a6c      	ldr	r2, [pc, #432]	; (8006f48 <problem_fetch+0x5860>)
 8006d96:	461c      	mov	r4, r3
 8006d98:	4613      	mov	r3, r2
 8006d9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006d9c:	6020      	str	r0, [r4, #0]
 8006d9e:	6061      	str	r1, [r4, #4]
 8006da0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006da8:	4a68      	ldr	r2, [pc, #416]	; (8006f4c <problem_fetch+0x5864>)
 8006daa:	8811      	ldrh	r1, [r2, #0]
 8006dac:	7892      	ldrb	r2, [r2, #2]
 8006dae:	8019      	strh	r1, [r3, #0]
 8006db0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2207      	movs	r2, #7
 8006db6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,C,H,H,I");
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	33a4      	adds	r3, #164	; 0xa4
 8006dbc:	4a64      	ldr	r2, [pc, #400]	; (8006f50 <problem_fetch+0x5868>)
 8006dbe:	461c      	mov	r4, r3
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006dc4:	6020      	str	r0, [r4, #0]
 8006dc6:	6061      	str	r1, [r4, #4]
 8006dc8:	60a2      	str	r2, [r4, #8]
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4a60      	ldr	r2, [pc, #384]	; (8006f54 <problem_fetch+0x586c>)
 8006dd4:	461d      	mov	r5, r3
 8006dd6:	4614      	mov	r4, r2
 8006dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dda:	6028      	str	r0, [r5, #0]
 8006ddc:	6069      	str	r1, [r5, #4]
 8006dde:	60aa      	str	r2, [r5, #8]
 8006de0:	60eb      	str	r3, [r5, #12]
 8006de2:	8823      	ldrh	r3, [r4, #0]
 8006de4:	78a2      	ldrb	r2, [r4, #2]
 8006de6:	822b      	strh	r3, [r5, #16]
 8006de8:	4613      	mov	r3, r2
 8006dea:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006df2:	4a59      	ldr	r2, [pc, #356]	; (8006f58 <problem_fetch+0x5870>)
 8006df4:	461c      	mov	r4, r3
 8006df6:	4613      	mov	r3, r2
 8006df8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006dfa:	6020      	str	r0, [r4, #0]
 8006dfc:	6061      	str	r1, [r4, #4]
 8006dfe:	60a2      	str	r2, [r4, #8]
 8006e00:	881b      	ldrh	r3, [r3, #0]
 8006e02:	81a3      	strh	r3, [r4, #12]
			break;
 8006e04:	f015 bba0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 144 :
			strcpy(p->name,"BACK TO BASICS");
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e0e:	4a53      	ldr	r2, [pc, #332]	; (8006f5c <problem_fetch+0x5874>)
 8006e10:	461c      	mov	r4, r3
 8006e12:	4613      	mov	r3, r2
 8006e14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	6061      	str	r1, [r4, #4]
 8006e1a:	60a2      	str	r2, [r4, #8]
 8006e1c:	881a      	ldrh	r2, [r3, #0]
 8006e1e:	789b      	ldrb	r3, [r3, #2]
 8006e20:	81a2      	strh	r2, [r4, #12]
 8006e22:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006e2a:	4a4d      	ldr	r2, [pc, #308]	; (8006f60 <problem_fetch+0x5878>)
 8006e2c:	6810      	ldr	r0, [r2, #0]
 8006e2e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2207      	movs	r2, #7
 8006e34:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,G,G,D");
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	33a4      	adds	r3, #164	; 0xa4
 8006e3a:	4a4a      	ldr	r2, [pc, #296]	; (8006f64 <problem_fetch+0x587c>)
 8006e3c:	461c      	mov	r4, r3
 8006e3e:	4613      	mov	r3, r2
 8006e40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e42:	6020      	str	r0, [r4, #0]
 8006e44:	6061      	str	r1, [r4, #4]
 8006e46:	60a2      	str	r2, [r4, #8]
 8006e48:	881b      	ldrh	r3, [r3, #0]
 8006e4a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,15,17,18");
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4a45      	ldr	r2, [pc, #276]	; (8006f68 <problem_fetch+0x5880>)
 8006e52:	461d      	mov	r5, r3
 8006e54:	4614      	mov	r4, r2
 8006e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e58:	6028      	str	r0, [r5, #0]
 8006e5a:	6069      	str	r1, [r5, #4]
 8006e5c:	60aa      	str	r2, [r5, #8]
 8006e5e:	60eb      	str	r3, [r5, #12]
 8006e60:	8823      	ldrh	r3, [r4, #0]
 8006e62:	78a2      	ldrb	r2, [r4, #2]
 8006e64:	822b      	strh	r3, [r5, #16]
 8006e66:	4613      	mov	r3, r2
 8006e68:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006e70:	4a39      	ldr	r2, [pc, #228]	; (8006f58 <problem_fetch+0x5870>)
 8006e72:	461c      	mov	r4, r3
 8006e74:	4613      	mov	r3, r2
 8006e76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006e78:	6020      	str	r0, [r4, #0]
 8006e7a:	6061      	str	r1, [r4, #4]
 8006e7c:	60a2      	str	r2, [r4, #8]
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	81a3      	strh	r3, [r4, #12]
			break;
 8006e82:	f015 bb61 	b.w	801c548 <problem_fetch+0x1ae60>
		case 145 :
			strcpy(p->name,"ROADWAY");
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006e8c:	4937      	ldr	r1, [pc, #220]	; (8006f6c <problem_fetch+0x5884>)
 8006e8e:	461a      	mov	r2, r3
 8006e90:	460b      	mov	r3, r1
 8006e92:	cb03      	ldmia	r3!, {r0, r1}
 8006e94:	6010      	str	r0, [r2, #0]
 8006e96:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006e9e:	4a30      	ldr	r2, [pc, #192]	; (8006f60 <problem_fetch+0x5878>)
 8006ea0:	6810      	ldr	r0, [r2, #0]
 8006ea2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2209      	movs	r2, #9
 8006ea8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,E,G,D,I");
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	33a4      	adds	r3, #164	; 0xa4
 8006eae:	4a30      	ldr	r2, [pc, #192]	; (8006f70 <problem_fetch+0x5888>)
 8006eb0:	461d      	mov	r5, r3
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eb6:	6028      	str	r0, [r5, #0]
 8006eb8:	6069      	str	r1, [r5, #4]
 8006eba:	60aa      	str	r2, [r5, #8]
 8006ebc:	60eb      	str	r3, [r5, #12]
 8006ebe:	8823      	ldrh	r3, [r4, #0]
 8006ec0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,13,14,16,17,18,10");
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	4a2b      	ldr	r2, [pc, #172]	; (8006f74 <problem_fetch+0x588c>)
 8006ec8:	461d      	mov	r5, r3
 8006eca:	4614      	mov	r4, r2
 8006ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ece:	6028      	str	r0, [r5, #0]
 8006ed0:	6069      	str	r1, [r5, #4]
 8006ed2:	60aa      	str	r2, [r5, #8]
 8006ed4:	60eb      	str	r3, [r5, #12]
 8006ed6:	cc03      	ldmia	r4!, {r0, r1}
 8006ed8:	6128      	str	r0, [r5, #16]
 8006eda:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <problem_fetch+0x5890>)
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	4614      	mov	r4, r2
 8006ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eea:	6028      	str	r0, [r5, #0]
 8006eec:	6069      	str	r1, [r5, #4]
 8006eee:	60aa      	str	r2, [r5, #8]
 8006ef0:	60eb      	str	r3, [r5, #12]
 8006ef2:	8823      	ldrh	r3, [r4, #0]
 8006ef4:	822b      	strh	r3, [r5, #16]
			break;
 8006ef6:	f015 bb27 	b.w	801c548 <problem_fetch+0x1ae60>
 8006efa:	bf00      	nop
 8006efc:	080255a8 	.word	0x080255a8
 8006f00:	0802391c 	.word	0x0802391c
 8006f04:	080255b0 	.word	0x080255b0
 8006f08:	080255bc 	.word	0x080255bc
 8006f0c:	08025300 	.word	0x08025300
 8006f10:	080255cc 	.word	0x080255cc
 8006f14:	08024190 	.word	0x08024190
 8006f18:	080255d4 	.word	0x080255d4
 8006f1c:	080255e0 	.word	0x080255e0
 8006f20:	0802403c 	.word	0x0802403c
 8006f24:	080255f0 	.word	0x080255f0
 8006f28:	08025604 	.word	0x08025604
 8006f2c:	08025610 	.word	0x08025610
 8006f30:	08025620 	.word	0x08025620
 8006f34:	0802562c 	.word	0x0802562c
 8006f38:	08023afc 	.word	0x08023afc
 8006f3c:	08025638 	.word	0x08025638
 8006f40:	08025644 	.word	0x08025644
 8006f44:	08023cf8 	.word	0x08023cf8
 8006f48:	08025654 	.word	0x08025654
 8006f4c:	08023a28 	.word	0x08023a28
 8006f50:	08025660 	.word	0x08025660
 8006f54:	08025670 	.word	0x08025670
 8006f58:	08023ae4 	.word	0x08023ae4
 8006f5c:	08025684 	.word	0x08025684
 8006f60:	0802395c 	.word	0x0802395c
 8006f64:	08025694 	.word	0x08025694
 8006f68:	080256a4 	.word	0x080256a4
 8006f6c:	080256b8 	.word	0x080256b8
 8006f70:	080256c0 	.word	0x080256c0
 8006f74:	080256d4 	.word	0x080256d4
 8006f78:	08024df4 	.word	0x08024df4
		case 146 :
			strcpy(p->name,"MEN IN BLACK");
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006f82:	4aae      	ldr	r2, [pc, #696]	; (800723c <problem_fetch+0x5b54>)
 8006f84:	461c      	mov	r4, r3
 8006f86:	4613      	mov	r3, r2
 8006f88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006f8a:	6020      	str	r0, [r4, #0]
 8006f8c:	6061      	str	r1, [r4, #4]
 8006f8e:	60a2      	str	r2, [r4, #8]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006f9a:	4aa9      	ldr	r2, [pc, #676]	; (8007240 <problem_fetch+0x5b58>)
 8006f9c:	8811      	ldrh	r1, [r2, #0]
 8006f9e:	7892      	ldrb	r2, [r2, #2]
 8006fa0:	8019      	strh	r1, [r3, #0]
 8006fa2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2206      	movs	r2, #6
 8006fa8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,I,E,D");
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	33a4      	adds	r3, #164	; 0xa4
 8006fae:	4aa5      	ldr	r2, [pc, #660]	; (8007244 <problem_fetch+0x5b5c>)
 8006fb0:	461c      	mov	r4, r3
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	6061      	str	r1, [r4, #4]
 8006fba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,14,16,18");
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4aa1      	ldr	r2, [pc, #644]	; (8007248 <problem_fetch+0x5b60>)
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	4615      	mov	r5, r2
 8006fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006fc8:	6020      	str	r0, [r4, #0]
 8006fca:	6061      	str	r1, [r4, #4]
 8006fcc:	60a2      	str	r2, [r4, #8]
 8006fce:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8006fd6:	4a9d      	ldr	r2, [pc, #628]	; (800724c <problem_fetch+0x5b64>)
 8006fd8:	461c      	mov	r4, r3
 8006fda:	4613      	mov	r3, r2
 8006fdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	6061      	str	r1, [r4, #4]
 8006fe2:	60a2      	str	r2, [r4, #8]
			break;
 8006fe4:	f015 bab0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 147 :
			strcpy(p->name,"SET1");
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8006fee:	4a98      	ldr	r2, [pc, #608]	; (8007250 <problem_fetch+0x5b68>)
 8006ff0:	6810      	ldr	r0, [r2, #0]
 8006ff2:	6018      	str	r0, [r3, #0]
 8006ff4:	7912      	ldrb	r2, [r2, #4]
 8006ff6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006ffe:	4a95      	ldr	r2, [pc, #596]	; (8007254 <problem_fetch+0x5b6c>)
 8007000:	6810      	ldr	r0, [r2, #0]
 8007002:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2209      	movs	r2, #9
 8007008:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,I,G,I,J");
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	33a4      	adds	r3, #164	; 0xa4
 800700e:	4a92      	ldr	r2, [pc, #584]	; (8007258 <problem_fetch+0x5b70>)
 8007010:	461d      	mov	r5, r3
 8007012:	4614      	mov	r4, r2
 8007014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007016:	6028      	str	r0, [r5, #0]
 8007018:	6069      	str	r1, [r5, #4]
 800701a:	60aa      	str	r2, [r5, #8]
 800701c:	60eb      	str	r3, [r5, #12]
 800701e:	8823      	ldrh	r3, [r4, #0]
 8007020:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,17,18,5");
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3304      	adds	r3, #4
 8007026:	4a8d      	ldr	r2, [pc, #564]	; (800725c <problem_fetch+0x5b74>)
 8007028:	461c      	mov	r4, r3
 800702a:	4615      	mov	r5, r2
 800702c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800702e:	6020      	str	r0, [r4, #0]
 8007030:	6061      	str	r1, [r4, #4]
 8007032:	60a2      	str	r2, [r4, #8]
 8007034:	60e3      	str	r3, [r4, #12]
 8007036:	6828      	ldr	r0, [r5, #0]
 8007038:	6120      	str	r0, [r4, #16]
 800703a:	88ab      	ldrh	r3, [r5, #4]
 800703c:	79aa      	ldrb	r2, [r5, #6]
 800703e:	82a3      	strh	r3, [r4, #20]
 8007040:	4613      	mov	r3, r2
 8007042:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e,d");
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800704a:	4a85      	ldr	r2, [pc, #532]	; (8007260 <problem_fetch+0x5b78>)
 800704c:	461d      	mov	r5, r3
 800704e:	4614      	mov	r4, r2
 8007050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007052:	6028      	str	r0, [r5, #0]
 8007054:	6069      	str	r1, [r5, #4]
 8007056:	60aa      	str	r2, [r5, #8]
 8007058:	60eb      	str	r3, [r5, #12]
 800705a:	8823      	ldrh	r3, [r4, #0]
 800705c:	822b      	strh	r3, [r5, #16]
			break;
 800705e:	f015 ba73 	b.w	801c548 <problem_fetch+0x1ae60>
		case 148 :
			strcpy(p->name,"MÁVROS K2");
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007068:	497e      	ldr	r1, [pc, #504]	; (8007264 <problem_fetch+0x5b7c>)
 800706a:	461a      	mov	r2, r3
 800706c:	460b      	mov	r3, r1
 800706e:	cb03      	ldmia	r3!, {r0, r1}
 8007070:	6010      	str	r0, [r2, #0]
 8007072:	6051      	str	r1, [r2, #4]
 8007074:	8819      	ldrh	r1, [r3, #0]
 8007076:	789b      	ldrb	r3, [r3, #2]
 8007078:	8111      	strh	r1, [r2, #8]
 800707a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007082:	4a79      	ldr	r2, [pc, #484]	; (8007268 <problem_fetch+0x5b80>)
 8007084:	6810      	ldr	r0, [r2, #0]
 8007086:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2206      	movs	r2, #6
 800708c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,C,D");
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	33a4      	adds	r3, #164	; 0xa4
 8007092:	4a76      	ldr	r2, [pc, #472]	; (800726c <problem_fetch+0x5b84>)
 8007094:	461c      	mov	r4, r3
 8007096:	4613      	mov	r3, r2
 8007098:	cb07      	ldmia	r3!, {r0, r1, r2}
 800709a:	6020      	str	r0, [r4, #0]
 800709c:	6061      	str	r1, [r4, #4]
 800709e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,8,13,18");
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4a72      	ldr	r2, [pc, #456]	; (8007270 <problem_fetch+0x5b88>)
 80070a6:	461c      	mov	r4, r3
 80070a8:	4613      	mov	r3, r2
 80070aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070ac:	6020      	str	r0, [r4, #0]
 80070ae:	6061      	str	r1, [r4, #4]
 80070b0:	60a2      	str	r2, [r4, #8]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80070bc:	4a6d      	ldr	r2, [pc, #436]	; (8007274 <problem_fetch+0x5b8c>)
 80070be:	461c      	mov	r4, r3
 80070c0:	4613      	mov	r3, r2
 80070c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070c4:	6020      	str	r0, [r4, #0]
 80070c6:	6061      	str	r1, [r4, #4]
 80070c8:	60a2      	str	r2, [r4, #8]
			break;
 80070ca:	f015 ba3d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 149 :
			strcpy(p->name,"GARAGE DAYS");
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80070d4:	4a68      	ldr	r2, [pc, #416]	; (8007278 <problem_fetch+0x5b90>)
 80070d6:	461c      	mov	r4, r3
 80070d8:	4613      	mov	r3, r2
 80070da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80070dc:	6020      	str	r0, [r4, #0]
 80070de:	6061      	str	r1, [r4, #4]
 80070e0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80070e8:	4a64      	ldr	r2, [pc, #400]	; (800727c <problem_fetch+0x5b94>)
 80070ea:	8811      	ldrh	r1, [r2, #0]
 80070ec:	7892      	ldrb	r2, [r2, #2]
 80070ee:	8019      	strh	r1, [r3, #0]
 80070f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2207      	movs	r2, #7
 80070f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,K,H,I,E,D");
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	33a4      	adds	r3, #164	; 0xa4
 80070fc:	4a60      	ldr	r2, [pc, #384]	; (8007280 <problem_fetch+0x5b98>)
 80070fe:	461c      	mov	r4, r3
 8007100:	4613      	mov	r3, r2
 8007102:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007104:	6020      	str	r0, [r4, #0]
 8007106:	6061      	str	r1, [r4, #4]
 8007108:	60a2      	str	r2, [r4, #8]
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,16,18");
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	4a5c      	ldr	r2, [pc, #368]	; (8007284 <problem_fetch+0x5b9c>)
 8007114:	461d      	mov	r5, r3
 8007116:	4614      	mov	r4, r2
 8007118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800711a:	6028      	str	r0, [r5, #0]
 800711c:	6069      	str	r1, [r5, #4]
 800711e:	60aa      	str	r2, [r5, #8]
 8007120:	60eb      	str	r3, [r5, #12]
 8007122:	8823      	ldrh	r3, [r4, #0]
 8007124:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800712c:	4a56      	ldr	r2, [pc, #344]	; (8007288 <problem_fetch+0x5ba0>)
 800712e:	461c      	mov	r4, r3
 8007130:	4613      	mov	r3, r2
 8007132:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007134:	6020      	str	r0, [r4, #0]
 8007136:	6061      	str	r1, [r4, #4]
 8007138:	60a2      	str	r2, [r4, #8]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	81a3      	strh	r3, [r4, #12]
			break;
 800713e:	f015 ba03 	b.w	801c548 <problem_fetch+0x1ae60>
		case 150 :
			strcpy(p->name,"ELEMENTS OF STYLE");
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007148:	4a50      	ldr	r2, [pc, #320]	; (800728c <problem_fetch+0x5ba4>)
 800714a:	461d      	mov	r5, r3
 800714c:	4614      	mov	r4, r2
 800714e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007150:	6028      	str	r0, [r5, #0]
 8007152:	6069      	str	r1, [r5, #4]
 8007154:	60aa      	str	r2, [r5, #8]
 8007156:	60eb      	str	r3, [r5, #12]
 8007158:	8823      	ldrh	r3, [r4, #0]
 800715a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007162:	4a37      	ldr	r2, [pc, #220]	; (8007240 <problem_fetch+0x5b58>)
 8007164:	8811      	ldrh	r1, [r2, #0]
 8007166:	7892      	ldrb	r2, [r2, #2]
 8007168:	8019      	strh	r1, [r3, #0]
 800716a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2206      	movs	r2, #6
 8007170:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,D,F,A,D");
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	33a4      	adds	r3, #164	; 0xa4
 8007176:	4a46      	ldr	r2, [pc, #280]	; (8007290 <problem_fetch+0x5ba8>)
 8007178:	461c      	mov	r4, r3
 800717a:	4613      	mov	r3, r2
 800717c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800717e:	6020      	str	r0, [r4, #0]
 8007180:	6061      	str	r1, [r4, #4]
 8007182:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,7,11,14,18");
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	3304      	adds	r3, #4
 8007188:	4a42      	ldr	r2, [pc, #264]	; (8007294 <problem_fetch+0x5bac>)
 800718a:	461c      	mov	r4, r3
 800718c:	4613      	mov	r3, r2
 800718e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007190:	6020      	str	r0, [r4, #0]
 8007192:	6061      	str	r1, [r4, #4]
 8007194:	60a2      	str	r2, [r4, #8]
 8007196:	881a      	ldrh	r2, [r3, #0]
 8007198:	789b      	ldrb	r3, [r3, #2]
 800719a:	81a2      	strh	r2, [r4, #12]
 800719c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80071a4:	4a29      	ldr	r2, [pc, #164]	; (800724c <problem_fetch+0x5b64>)
 80071a6:	461c      	mov	r4, r3
 80071a8:	4613      	mov	r3, r2
 80071aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80071ac:	6020      	str	r0, [r4, #0]
 80071ae:	6061      	str	r1, [r4, #4]
 80071b0:	60a2      	str	r2, [r4, #8]
			break;
 80071b2:	f015 b9c9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 151 :
			strcpy(p->name,"OLI'S YELLOW FEVA");
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80071bc:	4a36      	ldr	r2, [pc, #216]	; (8007298 <problem_fetch+0x5bb0>)
 80071be:	461d      	mov	r5, r3
 80071c0:	4614      	mov	r4, r2
 80071c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071c4:	6028      	str	r0, [r5, #0]
 80071c6:	6069      	str	r1, [r5, #4]
 80071c8:	60aa      	str	r2, [r5, #8]
 80071ca:	60eb      	str	r3, [r5, #12]
 80071cc:	8823      	ldrh	r3, [r4, #0]
 80071ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80071d6:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <problem_fetch+0x5b6c>)
 80071d8:	6810      	ldr	r0, [r2, #0]
 80071da:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2209      	movs	r2, #9
 80071e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,H,F,G,I,I");
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	33a4      	adds	r3, #164	; 0xa4
 80071e6:	4a2d      	ldr	r2, [pc, #180]	; (800729c <problem_fetch+0x5bb4>)
 80071e8:	461d      	mov	r5, r3
 80071ea:	4614      	mov	r4, r2
 80071ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	6069      	str	r1, [r5, #4]
 80071f2:	60aa      	str	r2, [r5, #8]
 80071f4:	60eb      	str	r3, [r5, #12]
 80071f6:	8823      	ldrh	r3, [r4, #0]
 80071f8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,5,10,11,14,14,18");
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3304      	adds	r3, #4
 80071fe:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <problem_fetch+0x5bb8>)
 8007200:	461c      	mov	r4, r3
 8007202:	4615      	mov	r5, r2
 8007204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	6061      	str	r1, [r4, #4]
 800720a:	60a2      	str	r2, [r4, #8]
 800720c:	60e3      	str	r3, [r4, #12]
 800720e:	6828      	ldr	r0, [r5, #0]
 8007210:	6120      	str	r0, [r4, #16]
 8007212:	88ab      	ldrh	r3, [r5, #4]
 8007214:	79aa      	ldrb	r2, [r5, #6]
 8007216:	82a3      	strh	r3, [r4, #20]
 8007218:	4613      	mov	r3, r2
 800721a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007222:	4a20      	ldr	r2, [pc, #128]	; (80072a4 <problem_fetch+0x5bbc>)
 8007224:	461d      	mov	r5, r3
 8007226:	4614      	mov	r4, r2
 8007228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800722a:	6028      	str	r0, [r5, #0]
 800722c:	6069      	str	r1, [r5, #4]
 800722e:	60aa      	str	r2, [r5, #8]
 8007230:	60eb      	str	r3, [r5, #12]
 8007232:	8823      	ldrh	r3, [r4, #0]
 8007234:	822b      	strh	r3, [r5, #16]
			break;
 8007236:	f015 b987 	b.w	801c548 <problem_fetch+0x1ae60>
 800723a:	bf00      	nop
 800723c:	080256ec 	.word	0x080256ec
 8007240:	0802391c 	.word	0x0802391c
 8007244:	080256fc 	.word	0x080256fc
 8007248:	08025708 	.word	0x08025708
 800724c:	08023cf8 	.word	0x08023cf8
 8007250:	08025718 	.word	0x08025718
 8007254:	0802395c 	.word	0x0802395c
 8007258:	08025720 	.word	0x08025720
 800725c:	08025734 	.word	0x08025734
 8007260:	08024df4 	.word	0x08024df4
 8007264:	0802574c 	.word	0x0802574c
 8007268:	080239f4 	.word	0x080239f4
 800726c:	08025758 	.word	0x08025758
 8007270:	08025764 	.word	0x08025764
 8007274:	0802393c 	.word	0x0802393c
 8007278:	08025774 	.word	0x08025774
 800727c:	08023a28 	.word	0x08023a28
 8007280:	08025780 	.word	0x08025780
 8007284:	08025790 	.word	0x08025790
 8007288:	080239d4 	.word	0x080239d4
 800728c:	080257a4 	.word	0x080257a4
 8007290:	080257b8 	.word	0x080257b8
 8007294:	080257c4 	.word	0x080257c4
 8007298:	080257d4 	.word	0x080257d4
 800729c:	080257e8 	.word	0x080257e8
 80072a0:	080257fc 	.word	0x080257fc
 80072a4:	08025814 	.word	0x08025814
		case 152 :
			strcpy(p->name,"GAMBIT");
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80072ae:	4aac      	ldr	r2, [pc, #688]	; (8007560 <problem_fetch+0x5e78>)
 80072b0:	6810      	ldr	r0, [r2, #0]
 80072b2:	6018      	str	r0, [r3, #0]
 80072b4:	8891      	ldrh	r1, [r2, #4]
 80072b6:	7992      	ldrb	r2, [r2, #6]
 80072b8:	8099      	strh	r1, [r3, #4]
 80072ba:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80072c2:	4aa8      	ldr	r2, [pc, #672]	; (8007564 <problem_fetch+0x5e7c>)
 80072c4:	8811      	ldrh	r1, [r2, #0]
 80072c6:	7892      	ldrb	r2, [r2, #2]
 80072c8:	8019      	strh	r1, [r3, #0]
 80072ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2205      	movs	r2, #5
 80072d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,A");
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	33a4      	adds	r3, #164	; 0xa4
 80072d6:	49a4      	ldr	r1, [pc, #656]	; (8007568 <problem_fetch+0x5e80>)
 80072d8:	461a      	mov	r2, r3
 80072da:	460b      	mov	r3, r1
 80072dc:	cb03      	ldmia	r3!, {r0, r1}
 80072de:	6010      	str	r0, [r2, #0]
 80072e0:	6051      	str	r1, [r2, #4]
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4aa0      	ldr	r2, [pc, #640]	; (800756c <problem_fetch+0x5e84>)
 80072ec:	461c      	mov	r4, r3
 80072ee:	4613      	mov	r3, r2
 80072f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80072f2:	6020      	str	r0, [r4, #0]
 80072f4:	6061      	str	r1, [r4, #4]
 80072f6:	60a2      	str	r2, [r4, #8]
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007302:	499b      	ldr	r1, [pc, #620]	; (8007570 <problem_fetch+0x5e88>)
 8007304:	461a      	mov	r2, r3
 8007306:	460b      	mov	r3, r1
 8007308:	cb03      	ldmia	r3!, {r0, r1}
 800730a:	6010      	str	r0, [r2, #0]
 800730c:	6051      	str	r1, [r2, #4]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	8113      	strh	r3, [r2, #8]
			break;
 8007312:	f015 b919 	b.w	801c548 <problem_fetch+0x1ae60>
		case 153 :
			strcpy(p->name,"THE FORGOTTEN ONES");
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800731c:	4a95      	ldr	r2, [pc, #596]	; (8007574 <problem_fetch+0x5e8c>)
 800731e:	461d      	mov	r5, r3
 8007320:	4614      	mov	r4, r2
 8007322:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007324:	6028      	str	r0, [r5, #0]
 8007326:	6069      	str	r1, [r5, #4]
 8007328:	60aa      	str	r2, [r5, #8]
 800732a:	60eb      	str	r3, [r5, #12]
 800732c:	8823      	ldrh	r3, [r4, #0]
 800732e:	78a2      	ldrb	r2, [r4, #2]
 8007330:	822b      	strh	r3, [r5, #16]
 8007332:	4613      	mov	r3, r2
 8007334:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800733c:	4a8e      	ldr	r2, [pc, #568]	; (8007578 <problem_fetch+0x5e90>)
 800733e:	6810      	ldr	r0, [r2, #0]
 8007340:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2208      	movs	r2, #8
 8007346:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,F,K,I,I");
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	33a4      	adds	r3, #164	; 0xa4
 800734c:	4a8b      	ldr	r2, [pc, #556]	; (800757c <problem_fetch+0x5e94>)
 800734e:	461c      	mov	r4, r3
 8007350:	4615      	mov	r5, r2
 8007352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007354:	6020      	str	r0, [r4, #0]
 8007356:	6061      	str	r1, [r4, #4]
 8007358:	60a2      	str	r2, [r4, #8]
 800735a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,15,18");
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4a87      	ldr	r2, [pc, #540]	; (8007580 <problem_fetch+0x5e98>)
 8007362:	461d      	mov	r5, r3
 8007364:	4614      	mov	r4, r2
 8007366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007368:	6028      	str	r0, [r5, #0]
 800736a:	6069      	str	r1, [r5, #4]
 800736c:	60aa      	str	r2, [r5, #8]
 800736e:	60eb      	str	r3, [r5, #12]
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	6128      	str	r0, [r5, #16]
 8007374:	7923      	ldrb	r3, [r4, #4]
 8007376:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800737e:	4a81      	ldr	r2, [pc, #516]	; (8007584 <problem_fetch+0x5e9c>)
 8007380:	461c      	mov	r4, r3
 8007382:	4615      	mov	r5, r2
 8007384:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007386:	6020      	str	r0, [r4, #0]
 8007388:	6061      	str	r1, [r4, #4]
 800738a:	60a2      	str	r2, [r4, #8]
 800738c:	60e3      	str	r3, [r4, #12]
			break;
 800738e:	f015 b8db 	b.w	801c548 <problem_fetch+0x1ae60>
		case 154 :
			strcpy(p->name,"BLUE BOWLS");
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007398:	497b      	ldr	r1, [pc, #492]	; (8007588 <problem_fetch+0x5ea0>)
 800739a:	461a      	mov	r2, r3
 800739c:	460b      	mov	r3, r1
 800739e:	cb03      	ldmia	r3!, {r0, r1}
 80073a0:	6010      	str	r0, [r2, #0]
 80073a2:	6051      	str	r1, [r2, #4]
 80073a4:	8819      	ldrh	r1, [r3, #0]
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	8111      	strh	r1, [r2, #8]
 80073aa:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80073b2:	4a76      	ldr	r2, [pc, #472]	; (800758c <problem_fetch+0x5ea4>)
 80073b4:	6810      	ldr	r0, [r2, #0]
 80073b6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2208      	movs	r2, #8
 80073bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,G,D,H,J");
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	33a4      	adds	r3, #164	; 0xa4
 80073c2:	4a73      	ldr	r2, [pc, #460]	; (8007590 <problem_fetch+0x5ea8>)
 80073c4:	461c      	mov	r4, r3
 80073c6:	4615      	mov	r5, r2
 80073c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	6061      	str	r1, [r4, #4]
 80073ce:	60a2      	str	r2, [r4, #8]
 80073d0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,12,14,16,17,18,5,5");
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	3304      	adds	r3, #4
 80073d6:	4a6f      	ldr	r2, [pc, #444]	; (8007594 <problem_fetch+0x5eac>)
 80073d8:	461d      	mov	r5, r3
 80073da:	4614      	mov	r4, r2
 80073dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073de:	6028      	str	r0, [r5, #0]
 80073e0:	6069      	str	r1, [r5, #4]
 80073e2:	60aa      	str	r2, [r5, #8]
 80073e4:	60eb      	str	r3, [r5, #12]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	6128      	str	r0, [r5, #16]
 80073ea:	7923      	ldrb	r3, [r4, #4]
 80073ec:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,s");
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80073f4:	4a68      	ldr	r2, [pc, #416]	; (8007598 <problem_fetch+0x5eb0>)
 80073f6:	461c      	mov	r4, r3
 80073f8:	4615      	mov	r5, r2
 80073fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073fc:	6020      	str	r0, [r4, #0]
 80073fe:	6061      	str	r1, [r4, #4]
 8007400:	60a2      	str	r2, [r4, #8]
 8007402:	60e3      	str	r3, [r4, #12]
			break;
 8007404:	f015 b8a0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 155 :
			strcpy(p->name,"GILDA");
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800740e:	4a63      	ldr	r2, [pc, #396]	; (800759c <problem_fetch+0x5eb4>)
 8007410:	6810      	ldr	r0, [r2, #0]
 8007412:	6018      	str	r0, [r3, #0]
 8007414:	8892      	ldrh	r2, [r2, #4]
 8007416:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800741e:	4a60      	ldr	r2, [pc, #384]	; (80075a0 <problem_fetch+0x5eb8>)
 8007420:	8811      	ldrh	r1, [r2, #0]
 8007422:	7892      	ldrb	r2, [r2, #2]
 8007424:	8019      	strh	r1, [r3, #0]
 8007426:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2208      	movs	r2, #8
 800742c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,E,I,H,I");
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	33a4      	adds	r3, #164	; 0xa4
 8007432:	4a5c      	ldr	r2, [pc, #368]	; (80075a4 <problem_fetch+0x5ebc>)
 8007434:	461c      	mov	r4, r3
 8007436:	4615      	mov	r5, r2
 8007438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800743a:	6020      	str	r0, [r4, #0]
 800743c:	6061      	str	r1, [r4, #4]
 800743e:	60a2      	str	r2, [r4, #8]
 8007440:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,7,9,12,14,16,18");
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3304      	adds	r3, #4
 8007446:	4a58      	ldr	r2, [pc, #352]	; (80075a8 <problem_fetch+0x5ec0>)
 8007448:	461d      	mov	r5, r3
 800744a:	4614      	mov	r4, r2
 800744c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800744e:	6028      	str	r0, [r5, #0]
 8007450:	6069      	str	r1, [r5, #4]
 8007452:	60aa      	str	r2, [r5, #8]
 8007454:	60eb      	str	r3, [r5, #12]
 8007456:	6820      	ldr	r0, [r4, #0]
 8007458:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007460:	4a52      	ldr	r2, [pc, #328]	; (80075ac <problem_fetch+0x5ec4>)
 8007462:	461c      	mov	r4, r3
 8007464:	4615      	mov	r5, r2
 8007466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007468:	6020      	str	r0, [r4, #0]
 800746a:	6061      	str	r1, [r4, #4]
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	60e3      	str	r3, [r4, #12]
			break;
 8007470:	f015 b86a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 156 :
			strcpy(p->name,"DARK HORSE");
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800747a:	494d      	ldr	r1, [pc, #308]	; (80075b0 <problem_fetch+0x5ec8>)
 800747c:	461a      	mov	r2, r3
 800747e:	460b      	mov	r3, r1
 8007480:	cb03      	ldmia	r3!, {r0, r1}
 8007482:	6010      	str	r0, [r2, #0]
 8007484:	6051      	str	r1, [r2, #4]
 8007486:	8819      	ldrh	r1, [r3, #0]
 8007488:	789b      	ldrb	r3, [r3, #2]
 800748a:	8111      	strh	r1, [r2, #8]
 800748c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007494:	4a47      	ldr	r2, [pc, #284]	; (80075b4 <problem_fetch+0x5ecc>)
 8007496:	6810      	ldr	r0, [r2, #0]
 8007498:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2207      	movs	r2, #7
 800749e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,H,F,I,D,E");
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	33a4      	adds	r3, #164	; 0xa4
 80074a4:	4a44      	ldr	r2, [pc, #272]	; (80075b8 <problem_fetch+0x5ed0>)
 80074a6:	461c      	mov	r4, r3
 80074a8:	4613      	mov	r3, r2
 80074aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074ac:	6020      	str	r0, [r4, #0]
 80074ae:	6061      	str	r1, [r4, #4]
 80074b0:	60a2      	str	r2, [r4, #8]
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,13,10,18,16");
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4a40      	ldr	r2, [pc, #256]	; (80075bc <problem_fetch+0x5ed4>)
 80074bc:	461d      	mov	r5, r3
 80074be:	4614      	mov	r4, r2
 80074c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074c2:	6028      	str	r0, [r5, #0]
 80074c4:	6069      	str	r1, [r5, #4]
 80074c6:	60aa      	str	r2, [r5, #8]
 80074c8:	60eb      	str	r3, [r5, #12]
 80074ca:	8823      	ldrh	r3, [r4, #0]
 80074cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d");
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80074d4:	4a3a      	ldr	r2, [pc, #232]	; (80075c0 <problem_fetch+0x5ed8>)
 80074d6:	461c      	mov	r4, r3
 80074d8:	4613      	mov	r3, r2
 80074da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074dc:	6020      	str	r0, [r4, #0]
 80074de:	6061      	str	r1, [r4, #4]
 80074e0:	60a2      	str	r2, [r4, #8]
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	81a3      	strh	r3, [r4, #12]
			break;
 80074e6:	f015 b82f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 157 :
			strcpy(p->name,"LAP OF LUXURY");
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80074f0:	4a34      	ldr	r2, [pc, #208]	; (80075c4 <problem_fetch+0x5edc>)
 80074f2:	461c      	mov	r4, r3
 80074f4:	4613      	mov	r3, r2
 80074f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80074f8:	6020      	str	r0, [r4, #0]
 80074fa:	6061      	str	r1, [r4, #4]
 80074fc:	60a2      	str	r2, [r4, #8]
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007508:	4a20      	ldr	r2, [pc, #128]	; (800758c <problem_fetch+0x5ea4>)
 800750a:	6810      	ldr	r0, [r2, #0]
 800750c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2207      	movs	r2, #7
 8007512:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,E,B,E,E,I");
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	33a4      	adds	r3, #164	; 0xa4
 8007518:	4a2b      	ldr	r2, [pc, #172]	; (80075c8 <problem_fetch+0x5ee0>)
 800751a:	461c      	mov	r4, r3
 800751c:	4613      	mov	r3, r2
 800751e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007520:	6020      	str	r0, [r4, #0]
 8007522:	6061      	str	r1, [r4, #4]
 8007524:	60a2      	str	r2, [r4, #8]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,16,18");
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	4a27      	ldr	r2, [pc, #156]	; (80075cc <problem_fetch+0x5ee4>)
 8007530:	461d      	mov	r5, r3
 8007532:	4614      	mov	r4, r2
 8007534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007536:	6028      	str	r0, [r5, #0]
 8007538:	6069      	str	r1, [r5, #4]
 800753a:	60aa      	str	r2, [r5, #8]
 800753c:	60eb      	str	r3, [r5, #12]
 800753e:	8823      	ldrh	r3, [r4, #0]
 8007540:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007548:	4a21      	ldr	r2, [pc, #132]	; (80075d0 <problem_fetch+0x5ee8>)
 800754a:	461c      	mov	r4, r3
 800754c:	4613      	mov	r3, r2
 800754e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007550:	6020      	str	r0, [r4, #0]
 8007552:	6061      	str	r1, [r4, #4]
 8007554:	60a2      	str	r2, [r4, #8]
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	81a3      	strh	r3, [r4, #12]
			break;
 800755a:	f014 bff5 	b.w	801c548 <problem_fetch+0x1ae60>
 800755e:	bf00      	nop
 8007560:	08025828 	.word	0x08025828
 8007564:	0802391c 	.word	0x0802391c
 8007568:	08025830 	.word	0x08025830
 800756c:	0802583c 	.word	0x0802583c
 8007570:	08023e28 	.word	0x08023e28
 8007574:	0802584c 	.word	0x0802584c
 8007578:	08023afc 	.word	0x08023afc
 800757c:	08025860 	.word	0x08025860
 8007580:	08025870 	.word	0x08025870
 8007584:	08023a80 	.word	0x08023a80
 8007588:	08025888 	.word	0x08025888
 800758c:	080239f4 	.word	0x080239f4
 8007590:	08025894 	.word	0x08025894
 8007594:	080258a4 	.word	0x080258a4
 8007598:	080258bc 	.word	0x080258bc
 800759c:	080258cc 	.word	0x080258cc
 80075a0:	08023a28 	.word	0x08023a28
 80075a4:	080258d4 	.word	0x080258d4
 80075a8:	080258e4 	.word	0x080258e4
 80075ac:	08023b6c 	.word	0x08023b6c
 80075b0:	080258f8 	.word	0x080258f8
 80075b4:	08023a98 	.word	0x08023a98
 80075b8:	08025904 	.word	0x08025904
 80075bc:	08025914 	.word	0x08025914
 80075c0:	08024ac4 	.word	0x08024ac4
 80075c4:	08025928 	.word	0x08025928
 80075c8:	08025938 	.word	0x08025938
 80075cc:	08025948 	.word	0x08025948
 80075d0:	08023ae4 	.word	0x08023ae4
		case 158 :
			strcpy(p->name,"EASE OF ACCESS");
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80075da:	4aab      	ldr	r2, [pc, #684]	; (8007888 <problem_fetch+0x61a0>)
 80075dc:	461c      	mov	r4, r3
 80075de:	4613      	mov	r3, r2
 80075e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80075e2:	6020      	str	r0, [r4, #0]
 80075e4:	6061      	str	r1, [r4, #4]
 80075e6:	60a2      	str	r2, [r4, #8]
 80075e8:	881a      	ldrh	r2, [r3, #0]
 80075ea:	789b      	ldrb	r3, [r3, #2]
 80075ec:	81a2      	strh	r2, [r4, #12]
 80075ee:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80075f6:	4aa5      	ldr	r2, [pc, #660]	; (800788c <problem_fetch+0x61a4>)
 80075f8:	6810      	ldr	r0, [r2, #0]
 80075fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2209      	movs	r2, #9
 8007600:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,J,E,J,J,H,E,D");
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	33a4      	adds	r3, #164	; 0xa4
 8007606:	4aa2      	ldr	r2, [pc, #648]	; (8007890 <problem_fetch+0x61a8>)
 8007608:	461d      	mov	r5, r3
 800760a:	4614      	mov	r4, r2
 800760c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800760e:	6028      	str	r0, [r5, #0]
 8007610:	6069      	str	r1, [r5, #4]
 8007612:	60aa      	str	r2, [r5, #8]
 8007614:	60eb      	str	r3, [r5, #12]
 8007616:	8823      	ldrh	r3, [r4, #0]
 8007618:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,9,7,9,13,16,16,16,18");
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	3304      	adds	r3, #4
 800761e:	4a9d      	ldr	r2, [pc, #628]	; (8007894 <problem_fetch+0x61ac>)
 8007620:	461c      	mov	r4, r3
 8007622:	4615      	mov	r5, r2
 8007624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007626:	6020      	str	r0, [r4, #0]
 8007628:	6061      	str	r1, [r4, #4]
 800762a:	60a2      	str	r2, [r4, #8]
 800762c:	60e3      	str	r3, [r4, #12]
 800762e:	6828      	ldr	r0, [r5, #0]
 8007630:	6120      	str	r0, [r4, #16]
 8007632:	88ab      	ldrh	r3, [r5, #4]
 8007634:	79aa      	ldrb	r2, [r5, #6]
 8007636:	82a3      	strh	r3, [r4, #20]
 8007638:	4613      	mov	r3, r2
 800763a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007642:	4a95      	ldr	r2, [pc, #596]	; (8007898 <problem_fetch+0x61b0>)
 8007644:	461d      	mov	r5, r3
 8007646:	4614      	mov	r4, r2
 8007648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800764a:	6028      	str	r0, [r5, #0]
 800764c:	6069      	str	r1, [r5, #4]
 800764e:	60aa      	str	r2, [r5, #8]
 8007650:	60eb      	str	r3, [r5, #12]
 8007652:	8823      	ldrh	r3, [r4, #0]
 8007654:	822b      	strh	r3, [r5, #16]
			break;
 8007656:	f014 bf77 	b.w	801c548 <problem_fetch+0x1ae60>
		case 159 :
			strcpy(p->name,"OLYMPUS");
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007660:	498e      	ldr	r1, [pc, #568]	; (800789c <problem_fetch+0x61b4>)
 8007662:	461a      	mov	r2, r3
 8007664:	460b      	mov	r3, r1
 8007666:	cb03      	ldmia	r3!, {r0, r1}
 8007668:	6010      	str	r0, [r2, #0]
 800766a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007672:	4a8b      	ldr	r2, [pc, #556]	; (80078a0 <problem_fetch+0x61b8>)
 8007674:	8811      	ldrh	r1, [r2, #0]
 8007676:	7892      	ldrb	r2, [r2, #2]
 8007678:	8019      	strh	r1, [r3, #0]
 800767a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2207      	movs	r2, #7
 8007680:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,D,F,G,I");
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	33a4      	adds	r3, #164	; 0xa4
 8007686:	4a87      	ldr	r2, [pc, #540]	; (80078a4 <problem_fetch+0x61bc>)
 8007688:	461c      	mov	r4, r3
 800768a:	4613      	mov	r3, r2
 800768c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800768e:	6020      	str	r0, [r4, #0]
 8007690:	6061      	str	r1, [r4, #4]
 8007692:	60a2      	str	r2, [r4, #8]
 8007694:	881b      	ldrh	r3, [r3, #0]
 8007696:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,15,18");
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3304      	adds	r3, #4
 800769c:	4a82      	ldr	r2, [pc, #520]	; (80078a8 <problem_fetch+0x61c0>)
 800769e:	461d      	mov	r5, r3
 80076a0:	4614      	mov	r4, r2
 80076a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076a4:	6028      	str	r0, [r5, #0]
 80076a6:	6069      	str	r1, [r5, #4]
 80076a8:	60aa      	str	r2, [r5, #8]
 80076aa:	60eb      	str	r3, [r5, #12]
 80076ac:	8823      	ldrh	r3, [r4, #0]
 80076ae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80076b6:	4a7d      	ldr	r2, [pc, #500]	; (80078ac <problem_fetch+0x61c4>)
 80076b8:	461c      	mov	r4, r3
 80076ba:	4613      	mov	r3, r2
 80076bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80076be:	6020      	str	r0, [r4, #0]
 80076c0:	6061      	str	r1, [r4, #4]
 80076c2:	60a2      	str	r2, [r4, #8]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	81a3      	strh	r3, [r4, #12]
			break;
 80076c8:	f014 bf3e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 160 :
			strcpy(p->name,"FRUIT CAKE");
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80076d2:	4977      	ldr	r1, [pc, #476]	; (80078b0 <problem_fetch+0x61c8>)
 80076d4:	461a      	mov	r2, r3
 80076d6:	460b      	mov	r3, r1
 80076d8:	cb03      	ldmia	r3!, {r0, r1}
 80076da:	6010      	str	r0, [r2, #0]
 80076dc:	6051      	str	r1, [r2, #4]
 80076de:	8819      	ldrh	r1, [r3, #0]
 80076e0:	789b      	ldrb	r3, [r3, #2]
 80076e2:	8111      	strh	r1, [r2, #8]
 80076e4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80076ec:	4a71      	ldr	r2, [pc, #452]	; (80078b4 <problem_fetch+0x61cc>)
 80076ee:	6810      	ldr	r0, [r2, #0]
 80076f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2206      	movs	r2, #6
 80076f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,D,D");
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	33a4      	adds	r3, #164	; 0xa4
 80076fc:	4a6e      	ldr	r2, [pc, #440]	; (80078b8 <problem_fetch+0x61d0>)
 80076fe:	461c      	mov	r4, r3
 8007700:	4613      	mov	r3, r2
 8007702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007704:	6020      	str	r0, [r4, #0]
 8007706:	6061      	str	r1, [r4, #4]
 8007708:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,12,15,18");
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	3304      	adds	r3, #4
 800770e:	4a6b      	ldr	r2, [pc, #428]	; (80078bc <problem_fetch+0x61d4>)
 8007710:	461c      	mov	r4, r3
 8007712:	4615      	mov	r5, r2
 8007714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007716:	6020      	str	r0, [r4, #0]
 8007718:	6061      	str	r1, [r4, #4]
 800771a:	60a2      	str	r2, [r4, #8]
 800771c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007724:	4a66      	ldr	r2, [pc, #408]	; (80078c0 <problem_fetch+0x61d8>)
 8007726:	461c      	mov	r4, r3
 8007728:	4613      	mov	r3, r2
 800772a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800772c:	6020      	str	r0, [r4, #0]
 800772e:	6061      	str	r1, [r4, #4]
 8007730:	60a2      	str	r2, [r4, #8]
			break;
 8007732:	f014 bf09 	b.w	801c548 <problem_fetch+0x1ae60>
		case 161 :
			strcpy(p->name,"LA MARY ME PAGA");
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800773c:	4a61      	ldr	r2, [pc, #388]	; (80078c4 <problem_fetch+0x61dc>)
 800773e:	461c      	mov	r4, r3
 8007740:	4615      	mov	r5, r2
 8007742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007744:	6020      	str	r0, [r4, #0]
 8007746:	6061      	str	r1, [r4, #4]
 8007748:	60a2      	str	r2, [r4, #8]
 800774a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007752:	4a5d      	ldr	r2, [pc, #372]	; (80078c8 <problem_fetch+0x61e0>)
 8007754:	8811      	ldrh	r1, [r2, #0]
 8007756:	7892      	ldrb	r2, [r2, #2]
 8007758:	8019      	strh	r1, [r3, #0]
 800775a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2206      	movs	r2, #6
 8007760:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,D");
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	33a4      	adds	r3, #164	; 0xa4
 8007766:	4a59      	ldr	r2, [pc, #356]	; (80078cc <problem_fetch+0x61e4>)
 8007768:	461c      	mov	r4, r3
 800776a:	4613      	mov	r3, r2
 800776c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800776e:	6020      	str	r0, [r4, #0]
 8007770:	6061      	str	r1, [r4, #4]
 8007772:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,10,14,18");
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	4a55      	ldr	r2, [pc, #340]	; (80078d0 <problem_fetch+0x61e8>)
 800777a:	461c      	mov	r4, r3
 800777c:	4613      	mov	r3, r2
 800777e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007780:	6020      	str	r0, [r4, #0]
 8007782:	6061      	str	r1, [r4, #4]
 8007784:	60a2      	str	r2, [r4, #8]
 8007786:	881a      	ldrh	r2, [r3, #0]
 8007788:	789b      	ldrb	r3, [r3, #2]
 800778a:	81a2      	strh	r2, [r4, #12]
 800778c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007794:	4a4f      	ldr	r2, [pc, #316]	; (80078d4 <problem_fetch+0x61ec>)
 8007796:	461c      	mov	r4, r3
 8007798:	4613      	mov	r3, r2
 800779a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800779c:	6020      	str	r0, [r4, #0]
 800779e:	6061      	str	r1, [r4, #4]
 80077a0:	60a2      	str	r2, [r4, #8]
			break;
 80077a2:	f014 bed1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 162 :
			strcpy(p->name,"WILD BILL");
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80077ac:	494a      	ldr	r1, [pc, #296]	; (80078d8 <problem_fetch+0x61f0>)
 80077ae:	461a      	mov	r2, r3
 80077b0:	460b      	mov	r3, r1
 80077b2:	cb03      	ldmia	r3!, {r0, r1}
 80077b4:	6010      	str	r0, [r2, #0]
 80077b6:	6051      	str	r1, [r2, #4]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80077c2:	4a41      	ldr	r2, [pc, #260]	; (80078c8 <problem_fetch+0x61e0>)
 80077c4:	8811      	ldrh	r1, [r2, #0]
 80077c6:	7892      	ldrb	r2, [r2, #2]
 80077c8:	8019      	strh	r1, [r3, #0]
 80077ca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2206      	movs	r2, #6
 80077d0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,G,D,D,A");
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	33a4      	adds	r3, #164	; 0xa4
 80077d6:	4a41      	ldr	r2, [pc, #260]	; (80078dc <problem_fetch+0x61f4>)
 80077d8:	461c      	mov	r4, r3
 80077da:	4613      	mov	r3, r2
 80077dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80077de:	6020      	str	r0, [r4, #0]
 80077e0:	6061      	str	r1, [r4, #4]
 80077e2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,18,18");
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4a3d      	ldr	r2, [pc, #244]	; (80078e0 <problem_fetch+0x61f8>)
 80077ea:	461c      	mov	r4, r3
 80077ec:	4615      	mov	r5, r2
 80077ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80077f0:	6020      	str	r0, [r4, #0]
 80077f2:	6061      	str	r1, [r4, #4]
 80077f4:	60a2      	str	r2, [r4, #8]
 80077f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e,e");
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80077fe:	4a39      	ldr	r2, [pc, #228]	; (80078e4 <problem_fetch+0x61fc>)
 8007800:	461c      	mov	r4, r3
 8007802:	4613      	mov	r3, r2
 8007804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007806:	6020      	str	r0, [r4, #0]
 8007808:	6061      	str	r1, [r4, #4]
 800780a:	60a2      	str	r2, [r4, #8]
			break;
 800780c:	f014 be9c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 163 :
			strcpy(p->name,"DARK DAYS");
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007816:	4934      	ldr	r1, [pc, #208]	; (80078e8 <problem_fetch+0x6200>)
 8007818:	461a      	mov	r2, r3
 800781a:	460b      	mov	r3, r1
 800781c:	cb03      	ldmia	r3!, {r0, r1}
 800781e:	6010      	str	r0, [r2, #0]
 8007820:	6051      	str	r1, [r2, #4]
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800782c:	4a2f      	ldr	r2, [pc, #188]	; (80078ec <problem_fetch+0x6204>)
 800782e:	6810      	ldr	r0, [r2, #0]
 8007830:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2209      	movs	r2, #9
 8007836:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,D,I,K,I,I");
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	33a4      	adds	r3, #164	; 0xa4
 800783c:	4a2c      	ldr	r2, [pc, #176]	; (80078f0 <problem_fetch+0x6208>)
 800783e:	461d      	mov	r5, r3
 8007840:	4614      	mov	r4, r2
 8007842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007844:	6028      	str	r0, [r5, #0]
 8007846:	6069      	str	r1, [r5, #4]
 8007848:	60aa      	str	r2, [r5, #8]
 800784a:	60eb      	str	r3, [r5, #12]
 800784c:	8823      	ldrh	r3, [r4, #0]
 800784e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,14,15,15,14,18,7");
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4a27      	ldr	r2, [pc, #156]	; (80078f4 <problem_fetch+0x620c>)
 8007856:	461d      	mov	r5, r3
 8007858:	4614      	mov	r4, r2
 800785a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800785c:	6028      	str	r0, [r5, #0]
 800785e:	6069      	str	r1, [r5, #4]
 8007860:	60aa      	str	r2, [r5, #8]
 8007862:	60eb      	str	r3, [r5, #12]
 8007864:	cc03      	ldmia	r4!, {r0, r1}
 8007866:	6128      	str	r0, [r5, #16]
 8007868:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e,d");
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007870:	4a21      	ldr	r2, [pc, #132]	; (80078f8 <problem_fetch+0x6210>)
 8007872:	461d      	mov	r5, r3
 8007874:	4614      	mov	r4, r2
 8007876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007878:	6028      	str	r0, [r5, #0]
 800787a:	6069      	str	r1, [r5, #4]
 800787c:	60aa      	str	r2, [r5, #8]
 800787e:	60eb      	str	r3, [r5, #12]
 8007880:	8823      	ldrh	r3, [r4, #0]
 8007882:	822b      	strh	r3, [r5, #16]
			break;
 8007884:	f014 be60 	b.w	801c548 <problem_fetch+0x1ae60>
 8007888:	0802595c 	.word	0x0802595c
 800788c:	080239f4 	.word	0x080239f4
 8007890:	0802596c 	.word	0x0802596c
 8007894:	08025980 	.word	0x08025980
 8007898:	08025814 	.word	0x08025814
 800789c:	08025998 	.word	0x08025998
 80078a0:	08024190 	.word	0x08024190
 80078a4:	080259a0 	.word	0x080259a0
 80078a8:	080259b0 	.word	0x080259b0
 80078ac:	08023ae4 	.word	0x08023ae4
 80078b0:	080259c4 	.word	0x080259c4
 80078b4:	0802395c 	.word	0x0802395c
 80078b8:	080259d0 	.word	0x080259d0
 80078bc:	080259dc 	.word	0x080259dc
 80078c0:	08023cf8 	.word	0x08023cf8
 80078c4:	080259ec 	.word	0x080259ec
 80078c8:	08024054 	.word	0x08024054
 80078cc:	080259fc 	.word	0x080259fc
 80078d0:	08025a08 	.word	0x08025a08
 80078d4:	0802393c 	.word	0x0802393c
 80078d8:	08025a18 	.word	0x08025a18
 80078dc:	08025a24 	.word	0x08025a24
 80078e0:	08025a30 	.word	0x08025a30
 80078e4:	08025a40 	.word	0x08025a40
 80078e8:	08025a4c 	.word	0x08025a4c
 80078ec:	08023afc 	.word	0x08023afc
 80078f0:	08025a58 	.word	0x08025a58
 80078f4:	08025a6c 	.word	0x08025a6c
 80078f8:	08025a84 	.word	0x08025a84
		case 164 :
			strcpy(p->name,"PINPANPUN");
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007902:	49a8      	ldr	r1, [pc, #672]	; (8007ba4 <problem_fetch+0x64bc>)
 8007904:	461a      	mov	r2, r3
 8007906:	460b      	mov	r3, r1
 8007908:	cb03      	ldmia	r3!, {r0, r1}
 800790a:	6010      	str	r0, [r2, #0]
 800790c:	6051      	str	r1, [r2, #4]
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007918:	4aa3      	ldr	r2, [pc, #652]	; (8007ba8 <problem_fetch+0x64c0>)
 800791a:	6810      	ldr	r0, [r2, #0]
 800791c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,A,E,A,D");
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	33a4      	adds	r3, #164	; 0xa4
 8007928:	4aa0      	ldr	r2, [pc, #640]	; (8007bac <problem_fetch+0x64c4>)
 800792a:	461c      	mov	r4, r3
 800792c:	4613      	mov	r3, r2
 800792e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007930:	6020      	str	r0, [r4, #0]
 8007932:	6061      	str	r1, [r4, #4]
 8007934:	60a2      	str	r2, [r4, #8]
 8007936:	881b      	ldrh	r3, [r3, #0]
 8007938:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,12,14,18");
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	4a9c      	ldr	r2, [pc, #624]	; (8007bb0 <problem_fetch+0x64c8>)
 8007940:	461d      	mov	r5, r3
 8007942:	4614      	mov	r4, r2
 8007944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007946:	6028      	str	r0, [r5, #0]
 8007948:	6069      	str	r1, [r5, #4]
 800794a:	60aa      	str	r2, [r5, #8]
 800794c:	60eb      	str	r3, [r5, #12]
 800794e:	7823      	ldrb	r3, [r4, #0]
 8007950:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007958:	4a96      	ldr	r2, [pc, #600]	; (8007bb4 <problem_fetch+0x64cc>)
 800795a:	461c      	mov	r4, r3
 800795c:	4613      	mov	r3, r2
 800795e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007960:	6020      	str	r0, [r4, #0]
 8007962:	6061      	str	r1, [r4, #4]
 8007964:	60a2      	str	r2, [r4, #8]
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	81a3      	strh	r3, [r4, #12]
			break;
 800796a:	f014 bded 	b.w	801c548 <problem_fetch+0x1ae60>
		case 165 :
			strcpy(p->name,"CK");
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007974:	4a90      	ldr	r2, [pc, #576]	; (8007bb8 <problem_fetch+0x64d0>)
 8007976:	8811      	ldrh	r1, [r2, #0]
 8007978:	7892      	ldrb	r2, [r2, #2]
 800797a:	8019      	strh	r1, [r3, #0]
 800797c:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007984:	4a8d      	ldr	r2, [pc, #564]	; (8007bbc <problem_fetch+0x64d4>)
 8007986:	6810      	ldr	r0, [r2, #0]
 8007988:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2206      	movs	r2, #6
 800798e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,J,F,G,D");
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	33a4      	adds	r3, #164	; 0xa4
 8007994:	4a8a      	ldr	r2, [pc, #552]	; (8007bc0 <problem_fetch+0x64d8>)
 8007996:	461c      	mov	r4, r3
 8007998:	4613      	mov	r3, r2
 800799a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800799c:	6020      	str	r0, [r4, #0]
 800799e:	6061      	str	r1, [r4, #4]
 80079a0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,13,17,18");
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4a87      	ldr	r2, [pc, #540]	; (8007bc4 <problem_fetch+0x64dc>)
 80079a8:	461c      	mov	r4, r3
 80079aa:	4615      	mov	r5, r2
 80079ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079ae:	6020      	str	r0, [r4, #0]
 80079b0:	6061      	str	r1, [r4, #4]
 80079b2:	60a2      	str	r2, [r4, #8]
 80079b4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80079bc:	4a82      	ldr	r2, [pc, #520]	; (8007bc8 <problem_fetch+0x64e0>)
 80079be:	461c      	mov	r4, r3
 80079c0:	4613      	mov	r3, r2
 80079c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079c4:	6020      	str	r0, [r4, #0]
 80079c6:	6061      	str	r1, [r4, #4]
 80079c8:	60a2      	str	r2, [r4, #8]
			break;
 80079ca:	f014 bdbd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 166 :
			strcpy(p->name,"TRIO TERNURA");
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80079d4:	4a7d      	ldr	r2, [pc, #500]	; (8007bcc <problem_fetch+0x64e4>)
 80079d6:	461c      	mov	r4, r3
 80079d8:	4613      	mov	r3, r2
 80079da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80079dc:	6020      	str	r0, [r4, #0]
 80079de:	6061      	str	r1, [r4, #4]
 80079e0:	60a2      	str	r2, [r4, #8]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80079ec:	4a78      	ldr	r2, [pc, #480]	; (8007bd0 <problem_fetch+0x64e8>)
 80079ee:	6810      	ldr	r0, [r2, #0]
 80079f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2206      	movs	r2, #6
 80079f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,A,A");
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	33a4      	adds	r3, #164	; 0xa4
 80079fc:	4a75      	ldr	r2, [pc, #468]	; (8007bd4 <problem_fetch+0x64ec>)
 80079fe:	461c      	mov	r4, r3
 8007a00:	4613      	mov	r3, r2
 8007a02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a04:	6020      	str	r0, [r4, #0]
 8007a06:	6061      	str	r1, [r4, #4]
 8007a08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,12,14,18");
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4a72      	ldr	r2, [pc, #456]	; (8007bd8 <problem_fetch+0x64f0>)
 8007a10:	461c      	mov	r4, r3
 8007a12:	4613      	mov	r3, r2
 8007a14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a16:	6020      	str	r0, [r4, #0]
 8007a18:	6061      	str	r1, [r4, #4]
 8007a1a:	60a2      	str	r2, [r4, #8]
 8007a1c:	881a      	ldrh	r2, [r3, #0]
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	81a2      	strh	r2, [r4, #12]
 8007a22:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007a2a:	4a67      	ldr	r2, [pc, #412]	; (8007bc8 <problem_fetch+0x64e0>)
 8007a2c:	461c      	mov	r4, r3
 8007a2e:	4613      	mov	r3, r2
 8007a30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a32:	6020      	str	r0, [r4, #0]
 8007a34:	6061      	str	r1, [r4, #4]
 8007a36:	60a2      	str	r2, [r4, #8]
			break;
 8007a38:	f014 bd86 	b.w	801c548 <problem_fetch+0x1ae60>
		case 167 :
			strcpy(p->name,"BLACK PROJECT");
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007a42:	4a66      	ldr	r2, [pc, #408]	; (8007bdc <problem_fetch+0x64f4>)
 8007a44:	461c      	mov	r4, r3
 8007a46:	4613      	mov	r3, r2
 8007a48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a4a:	6020      	str	r0, [r4, #0]
 8007a4c:	6061      	str	r1, [r4, #4]
 8007a4e:	60a2      	str	r2, [r4, #8]
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007a5a:	4a61      	ldr	r2, [pc, #388]	; (8007be0 <problem_fetch+0x64f8>)
 8007a5c:	8811      	ldrh	r1, [r2, #0]
 8007a5e:	7892      	ldrb	r2, [r2, #2]
 8007a60:	8019      	strh	r1, [r3, #0]
 8007a62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2205      	movs	r2, #5
 8007a68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,H,H,I");
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	33a4      	adds	r3, #164	; 0xa4
 8007a6e:	495d      	ldr	r1, [pc, #372]	; (8007be4 <problem_fetch+0x64fc>)
 8007a70:	461a      	mov	r2, r3
 8007a72:	460b      	mov	r3, r1
 8007a74:	cb03      	ldmia	r3!, {r0, r1}
 8007a76:	6010      	str	r0, [r2, #0]
 8007a78:	6051      	str	r1, [r2, #4]
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,16,18");
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	3304      	adds	r3, #4
 8007a82:	4a59      	ldr	r2, [pc, #356]	; (8007be8 <problem_fetch+0x6500>)
 8007a84:	461c      	mov	r4, r3
 8007a86:	4613      	mov	r3, r2
 8007a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007a8a:	6020      	str	r0, [r4, #0]
 8007a8c:	6061      	str	r1, [r4, #4]
 8007a8e:	60a2      	str	r2, [r4, #8]
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007a9a:	4954      	ldr	r1, [pc, #336]	; (8007bec <problem_fetch+0x6504>)
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	cb03      	ldmia	r3!, {r0, r1}
 8007aa2:	6010      	str	r0, [r2, #0]
 8007aa4:	6051      	str	r1, [r2, #4]
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	8113      	strh	r3, [r2, #8]
			break;
 8007aaa:	f014 bd4d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 168 :
			strcpy(p->name,"BLACK-OUT");
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007ab4:	494e      	ldr	r1, [pc, #312]	; (8007bf0 <problem_fetch+0x6508>)
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	460b      	mov	r3, r1
 8007aba:	cb03      	ldmia	r3!, {r0, r1}
 8007abc:	6010      	str	r0, [r2, #0]
 8007abe:	6051      	str	r1, [r2, #4]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007aca:	4a4a      	ldr	r2, [pc, #296]	; (8007bf4 <problem_fetch+0x650c>)
 8007acc:	6810      	ldr	r0, [r2, #0]
 8007ace:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2209      	movs	r2, #9
 8007ad4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,F,B,A,E,D");
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	33a4      	adds	r3, #164	; 0xa4
 8007ada:	4a47      	ldr	r2, [pc, #284]	; (8007bf8 <problem_fetch+0x6510>)
 8007adc:	461d      	mov	r5, r3
 8007ade:	4614      	mov	r4, r2
 8007ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	6069      	str	r1, [r5, #4]
 8007ae6:	60aa      	str	r2, [r5, #8]
 8007ae8:	60eb      	str	r3, [r5, #12]
 8007aea:	8823      	ldrh	r3, [r4, #0]
 8007aec:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,11,12,14,16,18");
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4a42      	ldr	r2, [pc, #264]	; (8007bfc <problem_fetch+0x6514>)
 8007af4:	461c      	mov	r4, r3
 8007af6:	4615      	mov	r5, r2
 8007af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007afa:	6020      	str	r0, [r4, #0]
 8007afc:	6061      	str	r1, [r4, #4]
 8007afe:	60a2      	str	r2, [r4, #8]
 8007b00:	60e3      	str	r3, [r4, #12]
 8007b02:	6828      	ldr	r0, [r5, #0]
 8007b04:	6120      	str	r0, [r4, #16]
 8007b06:	88ab      	ldrh	r3, [r5, #4]
 8007b08:	79aa      	ldrb	r2, [r5, #6]
 8007b0a:	82a3      	strh	r3, [r4, #20]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007b16:	4a3a      	ldr	r2, [pc, #232]	; (8007c00 <problem_fetch+0x6518>)
 8007b18:	461d      	mov	r5, r3
 8007b1a:	4614      	mov	r4, r2
 8007b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	6069      	str	r1, [r5, #4]
 8007b22:	60aa      	str	r2, [r5, #8]
 8007b24:	60eb      	str	r3, [r5, #12]
 8007b26:	8823      	ldrh	r3, [r4, #0]
 8007b28:	822b      	strh	r3, [r5, #16]
			break;
 8007b2a:	f014 bd0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 169 :
			strcpy(p->name,"YET ANOTHER WASTE OF SKIN");
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007b34:	4a33      	ldr	r2, [pc, #204]	; (8007c04 <problem_fetch+0x651c>)
 8007b36:	461d      	mov	r5, r3
 8007b38:	4614      	mov	r4, r2
 8007b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b3c:	6028      	str	r0, [r5, #0]
 8007b3e:	6069      	str	r1, [r5, #4]
 8007b40:	60aa      	str	r2, [r5, #8]
 8007b42:	60eb      	str	r3, [r5, #12]
 8007b44:	cc03      	ldmia	r4!, {r0, r1}
 8007b46:	6128      	str	r0, [r5, #16]
 8007b48:	6169      	str	r1, [r5, #20]
 8007b4a:	8823      	ldrh	r3, [r4, #0]
 8007b4c:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007b54:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <problem_fetch+0x64e8>)
 8007b56:	6810      	ldr	r0, [r2, #0]
 8007b58:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2205      	movs	r2, #5
 8007b5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,D,A");
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	33a4      	adds	r3, #164	; 0xa4
 8007b64:	4928      	ldr	r1, [pc, #160]	; (8007c08 <problem_fetch+0x6520>)
 8007b66:	461a      	mov	r2, r3
 8007b68:	460b      	mov	r3, r1
 8007b6a:	cb03      	ldmia	r3!, {r0, r1}
 8007b6c:	6010      	str	r0, [r2, #0]
 8007b6e:	6051      	str	r1, [r2, #4]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,12,15,18");
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <problem_fetch+0x6524>)
 8007b7a:	461c      	mov	r4, r3
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007b80:	6020      	str	r0, [r4, #0]
 8007b82:	6061      	str	r1, [r4, #4]
 8007b84:	60a2      	str	r2, [r4, #8]
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007b90:	4916      	ldr	r1, [pc, #88]	; (8007bec <problem_fetch+0x6504>)
 8007b92:	461a      	mov	r2, r3
 8007b94:	460b      	mov	r3, r1
 8007b96:	cb03      	ldmia	r3!, {r0, r1}
 8007b98:	6010      	str	r0, [r2, #0]
 8007b9a:	6051      	str	r1, [r2, #4]
 8007b9c:	881b      	ldrh	r3, [r3, #0]
 8007b9e:	8113      	strh	r3, [r2, #8]
			break;
 8007ba0:	f014 bcd2 	b.w	801c548 <problem_fetch+0x1ae60>
 8007ba4:	08025a98 	.word	0x08025a98
 8007ba8:	08023afc 	.word	0x08023afc
 8007bac:	08025aa4 	.word	0x08025aa4
 8007bb0:	08025ab4 	.word	0x08025ab4
 8007bb4:	080239d4 	.word	0x080239d4
 8007bb8:	08025ac8 	.word	0x08025ac8
 8007bbc:	080239f4 	.word	0x080239f4
 8007bc0:	08025acc 	.word	0x08025acc
 8007bc4:	08025ad8 	.word	0x08025ad8
 8007bc8:	08023cf8 	.word	0x08023cf8
 8007bcc:	08025ae8 	.word	0x08025ae8
 8007bd0:	08023a98 	.word	0x08023a98
 8007bd4:	08025af8 	.word	0x08025af8
 8007bd8:	08025b04 	.word	0x08025b04
 8007bdc:	08025b14 	.word	0x08025b14
 8007be0:	0802391c 	.word	0x0802391c
 8007be4:	08025b24 	.word	0x08025b24
 8007be8:	08025b30 	.word	0x08025b30
 8007bec:	08023e28 	.word	0x08023e28
 8007bf0:	08025b40 	.word	0x08025b40
 8007bf4:	0802395c 	.word	0x0802395c
 8007bf8:	08025b4c 	.word	0x08025b4c
 8007bfc:	08025b60 	.word	0x08025b60
 8007c00:	08024940 	.word	0x08024940
 8007c04:	08025b78 	.word	0x08025b78
 8007c08:	08025b94 	.word	0x08025b94
 8007c0c:	0802583c 	.word	0x0802583c
		case 170 :
			strcpy(p->name,"SCIENTIFIC PROGRESS");
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c16:	4aae      	ldr	r2, [pc, #696]	; (8007ed0 <problem_fetch+0x67e8>)
 8007c18:	461d      	mov	r5, r3
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c1e:	6028      	str	r0, [r5, #0]
 8007c20:	6069      	str	r1, [r5, #4]
 8007c22:	60aa      	str	r2, [r5, #8]
 8007c24:	60eb      	str	r3, [r5, #12]
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c30:	4aa8      	ldr	r2, [pc, #672]	; (8007ed4 <problem_fetch+0x67ec>)
 8007c32:	8811      	ldrh	r1, [r2, #0]
 8007c34:	7892      	ldrb	r2, [r2, #2]
 8007c36:	8019      	strh	r1, [r3, #0]
 8007c38:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,A,A");
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	33a4      	adds	r3, #164	; 0xa4
 8007c44:	49a4      	ldr	r1, [pc, #656]	; (8007ed8 <problem_fetch+0x67f0>)
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	cb03      	ldmia	r3!, {r0, r1}
 8007c4c:	6010      	str	r0, [r2, #0]
 8007c4e:	6051      	str	r1, [r2, #4]
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,11,14,18");
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4aa0      	ldr	r2, [pc, #640]	; (8007edc <problem_fetch+0x67f4>)
 8007c5a:	461c      	mov	r4, r3
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007c60:	6020      	str	r0, [r4, #0]
 8007c62:	6061      	str	r1, [r4, #4]
 8007c64:	60a2      	str	r2, [r4, #8]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007c70:	499b      	ldr	r1, [pc, #620]	; (8007ee0 <problem_fetch+0x67f8>)
 8007c72:	461a      	mov	r2, r3
 8007c74:	460b      	mov	r3, r1
 8007c76:	cb03      	ldmia	r3!, {r0, r1}
 8007c78:	6010      	str	r0, [r2, #0]
 8007c7a:	6051      	str	r1, [r2, #4]
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	8113      	strh	r3, [r2, #8]
			break;
 8007c80:	f014 bc62 	b.w	801c548 <problem_fetch+0x1ae60>
		case 171 :
			strcpy(p->name,"THE BLACK MAMBA 🐍");
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007c8a:	4a96      	ldr	r2, [pc, #600]	; (8007ee4 <problem_fetch+0x67fc>)
 8007c8c:	461d      	mov	r5, r3
 8007c8e:	4614      	mov	r4, r2
 8007c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c92:	6028      	str	r0, [r5, #0]
 8007c94:	6069      	str	r1, [r5, #4]
 8007c96:	60aa      	str	r2, [r5, #8]
 8007c98:	60eb      	str	r3, [r5, #12]
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	6128      	str	r0, [r5, #16]
 8007c9e:	7923      	ldrb	r3, [r4, #4]
 8007ca0:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007ca8:	4a8f      	ldr	r2, [pc, #572]	; (8007ee8 <problem_fetch+0x6800>)
 8007caa:	6810      	ldr	r0, [r2, #0]
 8007cac:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	220b      	movs	r2, #11
 8007cb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,B,E,C,D,B,D,A");
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	33a4      	adds	r3, #164	; 0xa4
 8007cb8:	4a8c      	ldr	r2, [pc, #560]	; (8007eec <problem_fetch+0x6804>)
 8007cba:	461d      	mov	r5, r3
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cc0:	6028      	str	r0, [r5, #0]
 8007cc2:	6069      	str	r1, [r5, #4]
 8007cc4:	60aa      	str	r2, [r5, #8]
 8007cc6:	60eb      	str	r3, [r5, #12]
 8007cc8:	6820      	ldr	r0, [r4, #0]
 8007cca:	6128      	str	r0, [r5, #16]
 8007ccc:	88a3      	ldrh	r3, [r4, #4]
 8007cce:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,9,8,10,12,13,15,15,18,18");
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	4a86      	ldr	r2, [pc, #536]	; (8007ef0 <problem_fetch+0x6808>)
 8007cd6:	461d      	mov	r5, r3
 8007cd8:	4614      	mov	r4, r2
 8007cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cdc:	6028      	str	r0, [r5, #0]
 8007cde:	6069      	str	r1, [r5, #4]
 8007ce0:	60aa      	str	r2, [r5, #8]
 8007ce2:	60eb      	str	r3, [r5, #12]
 8007ce4:	cc07      	ldmia	r4!, {r0, r1, r2}
 8007ce6:	6128      	str	r0, [r5, #16]
 8007ce8:	6169      	str	r1, [r5, #20]
 8007cea:	61aa      	str	r2, [r5, #24]
 8007cec:	7823      	ldrb	r3, [r4, #0]
 8007cee:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e,e");
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007cf6:	4a7f      	ldr	r2, [pc, #508]	; (8007ef4 <problem_fetch+0x680c>)
 8007cf8:	461d      	mov	r5, r3
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cfe:	6028      	str	r0, [r5, #0]
 8007d00:	6069      	str	r1, [r5, #4]
 8007d02:	60aa      	str	r2, [r5, #8]
 8007d04:	60eb      	str	r3, [r5, #12]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	6128      	str	r0, [r5, #16]
 8007d0a:	88a3      	ldrh	r3, [r4, #4]
 8007d0c:	82ab      	strh	r3, [r5, #20]
			break;
 8007d0e:	f014 bc1b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 172 :
			strcpy(p->name,"PINCH THE PINCH");
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d18:	4a77      	ldr	r2, [pc, #476]	; (8007ef8 <problem_fetch+0x6810>)
 8007d1a:	461c      	mov	r4, r3
 8007d1c:	4615      	mov	r5, r2
 8007d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d20:	6020      	str	r0, [r4, #0]
 8007d22:	6061      	str	r1, [r4, #4]
 8007d24:	60a2      	str	r2, [r4, #8]
 8007d26:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d2e:	4a69      	ldr	r2, [pc, #420]	; (8007ed4 <problem_fetch+0x67ec>)
 8007d30:	8811      	ldrh	r1, [r2, #0]
 8007d32:	7892      	ldrb	r2, [r2, #2]
 8007d34:	8019      	strh	r1, [r3, #0]
 8007d36:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D");
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	33a4      	adds	r3, #164	; 0xa4
 8007d42:	496e      	ldr	r1, [pc, #440]	; (8007efc <problem_fetch+0x6814>)
 8007d44:	461a      	mov	r2, r3
 8007d46:	460b      	mov	r3, r1
 8007d48:	cb03      	ldmia	r3!, {r0, r1}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,14,18");
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	496b      	ldr	r1, [pc, #428]	; (8007f00 <problem_fetch+0x6818>)
 8007d54:	461a      	mov	r2, r3
 8007d56:	460b      	mov	r3, r1
 8007d58:	cb03      	ldmia	r3!, {r0, r1}
 8007d5a:	6010      	str	r0, [r2, #0]
 8007d5c:	6051      	str	r1, [r2, #4]
 8007d5e:	8819      	ldrh	r1, [r3, #0]
 8007d60:	789b      	ldrb	r3, [r3, #2]
 8007d62:	8111      	strh	r1, [r2, #8]
 8007d64:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007d6c:	4965      	ldr	r1, [pc, #404]	; (8007f04 <problem_fetch+0x681c>)
 8007d6e:	461a      	mov	r2, r3
 8007d70:	460b      	mov	r3, r1
 8007d72:	cb03      	ldmia	r3!, {r0, r1}
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	6051      	str	r1, [r2, #4]
			break;
 8007d78:	f014 bbe6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 173 :
			strcpy(p->name,"OLD SCHOOL BLACK");
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d82:	4a61      	ldr	r2, [pc, #388]	; (8007f08 <problem_fetch+0x6820>)
 8007d84:	461d      	mov	r5, r3
 8007d86:	4614      	mov	r4, r2
 8007d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007d8a:	6028      	str	r0, [r5, #0]
 8007d8c:	6069      	str	r1, [r5, #4]
 8007d8e:	60aa      	str	r2, [r5, #8]
 8007d90:	60eb      	str	r3, [r5, #12]
 8007d92:	7823      	ldrb	r3, [r4, #0]
 8007d94:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007d9c:	4a4d      	ldr	r2, [pc, #308]	; (8007ed4 <problem_fetch+0x67ec>)
 8007d9e:	8811      	ldrh	r1, [r2, #0]
 8007da0:	7892      	ldrb	r2, [r2, #2]
 8007da2:	8019      	strh	r1, [r3, #0]
 8007da4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2206      	movs	r2, #6
 8007daa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,G,G,D");
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	33a4      	adds	r3, #164	; 0xa4
 8007db0:	4a56      	ldr	r2, [pc, #344]	; (8007f0c <problem_fetch+0x6824>)
 8007db2:	461c      	mov	r4, r3
 8007db4:	4613      	mov	r3, r2
 8007db6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007db8:	6020      	str	r0, [r4, #0]
 8007dba:	6061      	str	r1, [r4, #4]
 8007dbc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,17,18");
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4a53      	ldr	r2, [pc, #332]	; (8007f10 <problem_fetch+0x6828>)
 8007dc4:	461c      	mov	r4, r3
 8007dc6:	4615      	mov	r5, r2
 8007dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dca:	6020      	str	r0, [r4, #0]
 8007dcc:	6061      	str	r1, [r4, #4]
 8007dce:	60a2      	str	r2, [r4, #8]
 8007dd0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007dd8:	4a4e      	ldr	r2, [pc, #312]	; (8007f14 <problem_fetch+0x682c>)
 8007dda:	461c      	mov	r4, r3
 8007ddc:	4613      	mov	r3, r2
 8007dde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007de0:	6020      	str	r0, [r4, #0]
 8007de2:	6061      	str	r1, [r4, #4]
 8007de4:	60a2      	str	r2, [r4, #8]
			break;
 8007de6:	f014 bbaf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 174 :
			strcpy(p->name,"MÖRCSÖG");
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007df0:	4949      	ldr	r1, [pc, #292]	; (8007f18 <problem_fetch+0x6830>)
 8007df2:	461a      	mov	r2, r3
 8007df4:	460b      	mov	r3, r1
 8007df6:	cb03      	ldmia	r3!, {r0, r1}
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	6051      	str	r1, [r2, #4]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007e06:	4a45      	ldr	r2, [pc, #276]	; (8007f1c <problem_fetch+0x6834>)
 8007e08:	8811      	ldrh	r1, [r2, #0]
 8007e0a:	7892      	ldrb	r2, [r2, #2]
 8007e0c:	8019      	strh	r1, [r3, #0]
 8007e0e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2206      	movs	r2, #6
 8007e14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,G,D");
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	33a4      	adds	r3, #164	; 0xa4
 8007e1a:	4a41      	ldr	r2, [pc, #260]	; (8007f20 <problem_fetch+0x6838>)
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	4613      	mov	r3, r2
 8007e20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e22:	6020      	str	r0, [r4, #0]
 8007e24:	6061      	str	r1, [r4, #4]
 8007e26:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4a3d      	ldr	r2, [pc, #244]	; (8007f24 <problem_fetch+0x683c>)
 8007e2e:	461c      	mov	r4, r3
 8007e30:	4615      	mov	r5, r2
 8007e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e34:	6020      	str	r0, [r4, #0]
 8007e36:	6061      	str	r1, [r4, #4]
 8007e38:	60a2      	str	r2, [r4, #8]
 8007e3a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007e42:	4a39      	ldr	r2, [pc, #228]	; (8007f28 <problem_fetch+0x6840>)
 8007e44:	461c      	mov	r4, r3
 8007e46:	4613      	mov	r3, r2
 8007e48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e4a:	6020      	str	r0, [r4, #0]
 8007e4c:	6061      	str	r1, [r4, #4]
 8007e4e:	60a2      	str	r2, [r4, #8]
			break;
 8007e50:	f014 bb7a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 175 :
			strcpy(p->name,"BLACKSWING");
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007e5a:	4934      	ldr	r1, [pc, #208]	; (8007f2c <problem_fetch+0x6844>)
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	460b      	mov	r3, r1
 8007e60:	cb03      	ldmia	r3!, {r0, r1}
 8007e62:	6010      	str	r0, [r2, #0]
 8007e64:	6051      	str	r1, [r2, #4]
 8007e66:	8819      	ldrh	r1, [r3, #0]
 8007e68:	789b      	ldrb	r3, [r3, #2]
 8007e6a:	8111      	strh	r1, [r2, #8]
 8007e6c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007e74:	4a2e      	ldr	r2, [pc, #184]	; (8007f30 <problem_fetch+0x6848>)
 8007e76:	8811      	ldrh	r1, [r2, #0]
 8007e78:	7892      	ldrb	r2, [r2, #2]
 8007e7a:	8019      	strh	r1, [r3, #0]
 8007e7c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,D,C,E,D");
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	33a4      	adds	r3, #164	; 0xa4
 8007e88:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <problem_fetch+0x684c>)
 8007e8a:	461c      	mov	r4, r3
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007e90:	6020      	str	r0, [r4, #0]
 8007e92:	6061      	str	r1, [r4, #4]
 8007e94:	60a2      	str	r2, [r4, #8]
 8007e96:	881b      	ldrh	r3, [r3, #0]
 8007e98:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,13,14,18");
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4a26      	ldr	r2, [pc, #152]	; (8007f38 <problem_fetch+0x6850>)
 8007ea0:	461d      	mov	r5, r3
 8007ea2:	4614      	mov	r4, r2
 8007ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ea6:	6028      	str	r0, [r5, #0]
 8007ea8:	6069      	str	r1, [r5, #4]
 8007eaa:	60aa      	str	r2, [r5, #8]
 8007eac:	60eb      	str	r3, [r5, #12]
 8007eae:	8823      	ldrh	r3, [r4, #0]
 8007eb0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007eb8:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <problem_fetch+0x6854>)
 8007eba:	461c      	mov	r4, r3
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ec0:	6020      	str	r0, [r4, #0]
 8007ec2:	6061      	str	r1, [r4, #4]
 8007ec4:	60a2      	str	r2, [r4, #8]
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	81a3      	strh	r3, [r4, #12]
			break;
 8007eca:	f014 bb3d 	b.w	801c548 <problem_fetch+0x1ae60>
 8007ece:	bf00      	nop
 8007ed0:	08025ba0 	.word	0x08025ba0
 8007ed4:	0802391c 	.word	0x0802391c
 8007ed8:	08025bb4 	.word	0x08025bb4
 8007edc:	08025bc0 	.word	0x08025bc0
 8007ee0:	08023e28 	.word	0x08023e28
 8007ee4:	08025bd0 	.word	0x08025bd0
 8007ee8:	0802395c 	.word	0x0802395c
 8007eec:	08025be8 	.word	0x08025be8
 8007ef0:	08025c00 	.word	0x08025c00
 8007ef4:	08025c20 	.word	0x08025c20
 8007ef8:	08025c38 	.word	0x08025c38
 8007efc:	08025c48 	.word	0x08025c48
 8007f00:	08025c50 	.word	0x08025c50
 8007f04:	08023ab0 	.word	0x08023ab0
 8007f08:	08025c5c 	.word	0x08025c5c
 8007f0c:	08025c70 	.word	0x08025c70
 8007f10:	08025c7c 	.word	0x08025c7c
 8007f14:	0802393c 	.word	0x0802393c
 8007f18:	08025c8c 	.word	0x08025c8c
 8007f1c:	08024054 	.word	0x08024054
 8007f20:	08025c98 	.word	0x08025c98
 8007f24:	08025ca4 	.word	0x08025ca4
 8007f28:	08023cf8 	.word	0x08023cf8
 8007f2c:	08025cb4 	.word	0x08025cb4
 8007f30:	08025cc0 	.word	0x08025cc0
 8007f34:	08025cc4 	.word	0x08025cc4
 8007f38:	08025cd4 	.word	0x08025cd4
 8007f3c:	080239d4 	.word	0x080239d4
		case 176 :
			strcpy(p->name,"FREAKING MAIMED");
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007f46:	4aad      	ldr	r2, [pc, #692]	; (80081fc <problem_fetch+0x6b14>)
 8007f48:	461c      	mov	r4, r3
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f4e:	6020      	str	r0, [r4, #0]
 8007f50:	6061      	str	r1, [r4, #4]
 8007f52:	60a2      	str	r2, [r4, #8]
 8007f54:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007f5c:	4aa8      	ldr	r2, [pc, #672]	; (8008200 <problem_fetch+0x6b18>)
 8007f5e:	8811      	ldrh	r1, [r2, #0]
 8007f60:	7892      	ldrb	r2, [r2, #2]
 8007f62:	8019      	strh	r1, [r3, #0]
 8007f64:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2207      	movs	r2, #7
 8007f6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,C,G,H,I");
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	33a4      	adds	r3, #164	; 0xa4
 8007f70:	4aa4      	ldr	r2, [pc, #656]	; (8008204 <problem_fetch+0x6b1c>)
 8007f72:	461c      	mov	r4, r3
 8007f74:	4613      	mov	r3, r2
 8007f76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007f78:	6020      	str	r0, [r4, #0]
 8007f7a:	6061      	str	r1, [r4, #4]
 8007f7c:	60a2      	str	r2, [r4, #8]
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,13,17,16,18");
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	3304      	adds	r3, #4
 8007f86:	4aa0      	ldr	r2, [pc, #640]	; (8008208 <problem_fetch+0x6b20>)
 8007f88:	461d      	mov	r5, r3
 8007f8a:	4614      	mov	r4, r2
 8007f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f8e:	6028      	str	r0, [r5, #0]
 8007f90:	6069      	str	r1, [r5, #4]
 8007f92:	60aa      	str	r2, [r5, #8]
 8007f94:	60eb      	str	r3, [r5, #12]
 8007f96:	8823      	ldrh	r3, [r4, #0]
 8007f98:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8007fa0:	4a9a      	ldr	r2, [pc, #616]	; (800820c <problem_fetch+0x6b24>)
 8007fa2:	461c      	mov	r4, r3
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007fa8:	6020      	str	r0, [r4, #0]
 8007faa:	6061      	str	r1, [r4, #4]
 8007fac:	60a2      	str	r2, [r4, #8]
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	81a3      	strh	r3, [r4, #12]
			break;
 8007fb2:	f014 bac9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 177 :
			strcpy(p->name,"CAN’T REMEMBER THE NAME");
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007fbc:	4a94      	ldr	r2, [pc, #592]	; (8008210 <problem_fetch+0x6b28>)
 8007fbe:	461d      	mov	r5, r3
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007fc4:	6028      	str	r0, [r5, #0]
 8007fc6:	6069      	str	r1, [r5, #4]
 8007fc8:	60aa      	str	r2, [r5, #8]
 8007fca:	60eb      	str	r3, [r5, #12]
 8007fcc:	cc03      	ldmia	r4!, {r0, r1}
 8007fce:	6128      	str	r0, [r5, #16]
 8007fd0:	6169      	str	r1, [r5, #20]
 8007fd2:	8823      	ldrh	r3, [r4, #0]
 8007fd4:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A");
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007fdc:	4a8d      	ldr	r2, [pc, #564]	; (8008214 <problem_fetch+0x6b2c>)
 8007fde:	8811      	ldrh	r1, [r2, #0]
 8007fe0:	7892      	ldrb	r2, [r2, #2]
 8007fe2:	8019      	strh	r1, [r3, #0]
 8007fe4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2207      	movs	r2, #7
 8007fea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,I,G,D,E,A");
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	33a4      	adds	r3, #164	; 0xa4
 8007ff0:	4a89      	ldr	r2, [pc, #548]	; (8008218 <problem_fetch+0x6b30>)
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007ff8:	6020      	str	r0, [r4, #0]
 8007ffa:	6061      	str	r1, [r4, #4]
 8007ffc:	60a2      	str	r2, [r4, #8]
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,6,11,16,18");
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3304      	adds	r3, #4
 8008006:	4a85      	ldr	r2, [pc, #532]	; (800821c <problem_fetch+0x6b34>)
 8008008:	461d      	mov	r5, r3
 800800a:	4614      	mov	r4, r2
 800800c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800800e:	6028      	str	r0, [r5, #0]
 8008010:	6069      	str	r1, [r5, #4]
 8008012:	60aa      	str	r2, [r5, #8]
 8008014:	60eb      	str	r3, [r5, #12]
 8008016:	8823      	ldrh	r3, [r4, #0]
 8008018:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008020:	4a7f      	ldr	r2, [pc, #508]	; (8008220 <problem_fetch+0x6b38>)
 8008022:	461c      	mov	r4, r3
 8008024:	4613      	mov	r3, r2
 8008026:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008028:	6020      	str	r0, [r4, #0]
 800802a:	6061      	str	r1, [r4, #4]
 800802c:	60a2      	str	r2, [r4, #8]
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	81a3      	strh	r3, [r4, #12]
			break;
 8008032:	f014 ba89 	b.w	801c548 <problem_fetch+0x1ae60>
		case 178 :
			strcpy(p->name,"FOUR");
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800803c:	4a79      	ldr	r2, [pc, #484]	; (8008224 <problem_fetch+0x6b3c>)
 800803e:	6810      	ldr	r0, [r2, #0]
 8008040:	6018      	str	r0, [r3, #0]
 8008042:	7912      	ldrb	r2, [r2, #4]
 8008044:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800804c:	4a71      	ldr	r2, [pc, #452]	; (8008214 <problem_fetch+0x6b2c>)
 800804e:	8811      	ldrh	r1, [r2, #0]
 8008050:	7892      	ldrb	r2, [r2, #2]
 8008052:	8019      	strh	r1, [r3, #0]
 8008054:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2207      	movs	r2, #7
 800805a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,I,H,I");
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	33a4      	adds	r3, #164	; 0xa4
 8008060:	4a71      	ldr	r2, [pc, #452]	; (8008228 <problem_fetch+0x6b40>)
 8008062:	461c      	mov	r4, r3
 8008064:	4613      	mov	r3, r2
 8008066:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008068:	6020      	str	r0, [r4, #0]
 800806a:	6061      	str	r1, [r4, #4]
 800806c:	60a2      	str	r2, [r4, #8]
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,11,14,16,18");
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	3304      	adds	r3, #4
 8008076:	4a6d      	ldr	r2, [pc, #436]	; (800822c <problem_fetch+0x6b44>)
 8008078:	461d      	mov	r5, r3
 800807a:	4614      	mov	r4, r2
 800807c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800807e:	6028      	str	r0, [r5, #0]
 8008080:	6069      	str	r1, [r5, #4]
 8008082:	60aa      	str	r2, [r5, #8]
 8008084:	60eb      	str	r3, [r5, #12]
 8008086:	8823      	ldrh	r3, [r4, #0]
 8008088:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008090:	4a67      	ldr	r2, [pc, #412]	; (8008230 <problem_fetch+0x6b48>)
 8008092:	461c      	mov	r4, r3
 8008094:	4613      	mov	r3, r2
 8008096:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008098:	6020      	str	r0, [r4, #0]
 800809a:	6061      	str	r1, [r4, #4]
 800809c:	60a2      	str	r2, [r4, #8]
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	81a3      	strh	r3, [r4, #12]
			break;
 80080a2:	f014 ba51 	b.w	801c548 <problem_fetch+0x1ae60>
		case 179 :
			strcpy(p->name,"SALMON SNAKE");
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80080ac:	4a61      	ldr	r2, [pc, #388]	; (8008234 <problem_fetch+0x6b4c>)
 80080ae:	461c      	mov	r4, r3
 80080b0:	4613      	mov	r3, r2
 80080b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080b4:	6020      	str	r0, [r4, #0]
 80080b6:	6061      	str	r1, [r4, #4]
 80080b8:	60a2      	str	r2, [r4, #8]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80080c4:	4a53      	ldr	r2, [pc, #332]	; (8008214 <problem_fetch+0x6b2c>)
 80080c6:	8811      	ldrh	r1, [r2, #0]
 80080c8:	7892      	ldrb	r2, [r2, #2]
 80080ca:	8019      	strh	r1, [r3, #0]
 80080cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2205      	movs	r2, #5
 80080d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,D,A");
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	33a4      	adds	r3, #164	; 0xa4
 80080d8:	4957      	ldr	r1, [pc, #348]	; (8008238 <problem_fetch+0x6b50>)
 80080da:	461a      	mov	r2, r3
 80080dc:	460b      	mov	r3, r1
 80080de:	cb03      	ldmia	r3!, {r0, r1}
 80080e0:	6010      	str	r0, [r2, #0]
 80080e2:	6051      	str	r1, [r2, #4]
 80080e4:	881b      	ldrh	r3, [r3, #0]
 80080e6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,11,15,18");
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4a53      	ldr	r2, [pc, #332]	; (800823c <problem_fetch+0x6b54>)
 80080ee:	461c      	mov	r4, r3
 80080f0:	4613      	mov	r3, r2
 80080f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80080f4:	6020      	str	r0, [r4, #0]
 80080f6:	6061      	str	r1, [r4, #4]
 80080f8:	60a2      	str	r2, [r4, #8]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008104:	494e      	ldr	r1, [pc, #312]	; (8008240 <problem_fetch+0x6b58>)
 8008106:	461a      	mov	r2, r3
 8008108:	460b      	mov	r3, r1
 800810a:	cb03      	ldmia	r3!, {r0, r1}
 800810c:	6010      	str	r0, [r2, #0]
 800810e:	6051      	str	r1, [r2, #4]
 8008110:	881b      	ldrh	r3, [r3, #0]
 8008112:	8113      	strh	r3, [r2, #8]
			break;
 8008114:	f014 ba18 	b.w	801c548 <problem_fetch+0x1ae60>
		case 180 :
			strcpy(p->name,"COSTA NEGRA");
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800811e:	4a49      	ldr	r2, [pc, #292]	; (8008244 <problem_fetch+0x6b5c>)
 8008120:	461c      	mov	r4, r3
 8008122:	4613      	mov	r3, r2
 8008124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008126:	6020      	str	r0, [r4, #0]
 8008128:	6061      	str	r1, [r4, #4]
 800812a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008132:	4a45      	ldr	r2, [pc, #276]	; (8008248 <problem_fetch+0x6b60>)
 8008134:	8811      	ldrh	r1, [r2, #0]
 8008136:	7892      	ldrb	r2, [r2, #2]
 8008138:	8019      	strh	r1, [r3, #0]
 800813a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2209      	movs	r2, #9
 8008140:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,I,G,I");
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	33a4      	adds	r3, #164	; 0xa4
 8008146:	4a41      	ldr	r2, [pc, #260]	; (800824c <problem_fetch+0x6b64>)
 8008148:	461d      	mov	r5, r3
 800814a:	4614      	mov	r4, r2
 800814c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800814e:	6028      	str	r0, [r5, #0]
 8008150:	6069      	str	r1, [r5, #4]
 8008152:	60aa      	str	r2, [r5, #8]
 8008154:	60eb      	str	r3, [r5, #12]
 8008156:	8823      	ldrh	r3, [r4, #0]
 8008158:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,14,15,18");
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	4a3c      	ldr	r2, [pc, #240]	; (8008250 <problem_fetch+0x6b68>)
 8008160:	461d      	mov	r5, r3
 8008162:	4614      	mov	r4, r2
 8008164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008166:	6028      	str	r0, [r5, #0]
 8008168:	6069      	str	r1, [r5, #4]
 800816a:	60aa      	str	r2, [r5, #8]
 800816c:	60eb      	str	r3, [r5, #12]
 800816e:	cc03      	ldmia	r4!, {r0, r1}
 8008170:	6128      	str	r0, [r5, #16]
 8008172:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800817a:	4a36      	ldr	r2, [pc, #216]	; (8008254 <problem_fetch+0x6b6c>)
 800817c:	461d      	mov	r5, r3
 800817e:	4614      	mov	r4, r2
 8008180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008182:	6028      	str	r0, [r5, #0]
 8008184:	6069      	str	r1, [r5, #4]
 8008186:	60aa      	str	r2, [r5, #8]
 8008188:	60eb      	str	r3, [r5, #12]
 800818a:	8823      	ldrh	r3, [r4, #0]
 800818c:	822b      	strh	r3, [r5, #16]
			break;
 800818e:	f014 b9db 	b.w	801c548 <problem_fetch+0x1ae60>
		case 181 :
			strcpy(p->name,"LOPPULÄMPPÄ");
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008198:	4a2f      	ldr	r2, [pc, #188]	; (8008258 <problem_fetch+0x6b70>)
 800819a:	461c      	mov	r4, r3
 800819c:	4613      	mov	r3, r2
 800819e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081a0:	6020      	str	r0, [r4, #0]
 80081a2:	6061      	str	r1, [r4, #4]
 80081a4:	60a2      	str	r2, [r4, #8]
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80081b0:	4a2a      	ldr	r2, [pc, #168]	; (800825c <problem_fetch+0x6b74>)
 80081b2:	6810      	ldr	r0, [r2, #0]
 80081b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2206      	movs	r2, #6
 80081ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,G,I");
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	33a4      	adds	r3, #164	; 0xa4
 80081c0:	4a27      	ldr	r2, [pc, #156]	; (8008260 <problem_fetch+0x6b78>)
 80081c2:	461c      	mov	r4, r3
 80081c4:	4613      	mov	r3, r2
 80081c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081c8:	6020      	str	r0, [r4, #0]
 80081ca:	6061      	str	r1, [r4, #4]
 80081cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,17,18");
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	4a24      	ldr	r2, [pc, #144]	; (8008264 <problem_fetch+0x6b7c>)
 80081d4:	461c      	mov	r4, r3
 80081d6:	4615      	mov	r5, r2
 80081d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	6061      	str	r1, [r4, #4]
 80081de:	60a2      	str	r2, [r4, #8]
 80081e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80081e8:	4a1f      	ldr	r2, [pc, #124]	; (8008268 <problem_fetch+0x6b80>)
 80081ea:	461c      	mov	r4, r3
 80081ec:	4613      	mov	r3, r2
 80081ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80081f0:	6020      	str	r0, [r4, #0]
 80081f2:	6061      	str	r1, [r4, #4]
 80081f4:	60a2      	str	r2, [r4, #8]
			break;
 80081f6:	f014 b9a7 	b.w	801c548 <problem_fetch+0x1ae60>
 80081fa:	bf00      	nop
 80081fc:	08025ce8 	.word	0x08025ce8
 8008200:	08024190 	.word	0x08024190
 8008204:	08025cf8 	.word	0x08025cf8
 8008208:	08025d08 	.word	0x08025d08
 800820c:	08023ae4 	.word	0x08023ae4
 8008210:	08025d1c 	.word	0x08025d1c
 8008214:	0802391c 	.word	0x0802391c
 8008218:	08025d38 	.word	0x08025d38
 800821c:	08025d48 	.word	0x08025d48
 8008220:	08025d5c 	.word	0x08025d5c
 8008224:	08025d6c 	.word	0x08025d6c
 8008228:	08025d74 	.word	0x08025d74
 800822c:	08025d84 	.word	0x08025d84
 8008230:	080239d4 	.word	0x080239d4
 8008234:	08025d98 	.word	0x08025d98
 8008238:	08025da8 	.word	0x08025da8
 800823c:	08025db4 	.word	0x08025db4
 8008240:	08023e28 	.word	0x08023e28
 8008244:	08025dc4 	.word	0x08025dc4
 8008248:	08023a28 	.word	0x08023a28
 800824c:	08025dd0 	.word	0x08025dd0
 8008250:	08025de4 	.word	0x08025de4
 8008254:	08024940 	.word	0x08024940
 8008258:	08025dfc 	.word	0x08025dfc
 800825c:	08023afc 	.word	0x08023afc
 8008260:	08025e0c 	.word	0x08025e0c
 8008264:	08025e18 	.word	0x08025e18
 8008268:	08023cf8 	.word	0x08023cf8
		case 182 :
			strcpy(p->name,"MEK");
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008272:	4ac1      	ldr	r2, [pc, #772]	; (8008578 <problem_fetch+0x6e90>)
 8008274:	6810      	ldr	r0, [r2, #0]
 8008276:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800827e:	4abf      	ldr	r2, [pc, #764]	; (800857c <problem_fetch+0x6e94>)
 8008280:	8811      	ldrh	r1, [r2, #0]
 8008282:	7892      	ldrb	r2, [r2, #2]
 8008284:	8019      	strh	r1, [r3, #0]
 8008286:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2208      	movs	r2, #8
 800828c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,B,D,G,E,I");
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	33a4      	adds	r3, #164	; 0xa4
 8008292:	4abb      	ldr	r2, [pc, #748]	; (8008580 <problem_fetch+0x6e98>)
 8008294:	461c      	mov	r4, r3
 8008296:	4615      	mov	r5, r2
 8008298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800829a:	6020      	str	r0, [r4, #0]
 800829c:	6061      	str	r1, [r4, #4]
 800829e:	60a2      	str	r2, [r4, #8]
 80082a0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,13,11,6,7,4,16,18");
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3304      	adds	r3, #4
 80082a6:	4ab7      	ldr	r2, [pc, #732]	; (8008584 <problem_fetch+0x6e9c>)
 80082a8:	461d      	mov	r5, r3
 80082aa:	4614      	mov	r4, r2
 80082ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ae:	6028      	str	r0, [r5, #0]
 80082b0:	6069      	str	r1, [r5, #4]
 80082b2:	60aa      	str	r2, [r5, #8]
 80082b4:	60eb      	str	r3, [r5, #12]
 80082b6:	6820      	ldr	r0, [r4, #0]
 80082b8:	6128      	str	r0, [r5, #16]
 80082ba:	7923      	ldrb	r3, [r4, #4]
 80082bc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,s,d,s,d,e");
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80082c4:	4ab0      	ldr	r2, [pc, #704]	; (8008588 <problem_fetch+0x6ea0>)
 80082c6:	461c      	mov	r4, r3
 80082c8:	4615      	mov	r5, r2
 80082ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082cc:	6020      	str	r0, [r4, #0]
 80082ce:	6061      	str	r1, [r4, #4]
 80082d0:	60a2      	str	r2, [r4, #8]
 80082d2:	60e3      	str	r3, [r4, #12]
			break;
 80082d4:	f014 b938 	b.w	801c548 <problem_fetch+0x1ae60>
		case 183 :
			strcpy(p->name,"5WL^4/(384EI)");
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80082de:	4aab      	ldr	r2, [pc, #684]	; (800858c <problem_fetch+0x6ea4>)
 80082e0:	461c      	mov	r4, r3
 80082e2:	4613      	mov	r3, r2
 80082e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80082e6:	6020      	str	r0, [r4, #0]
 80082e8:	6061      	str	r1, [r4, #4]
 80082ea:	60a2      	str	r2, [r4, #8]
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7C");
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80082f6:	4aa6      	ldr	r2, [pc, #664]	; (8008590 <problem_fetch+0x6ea8>)
 80082f8:	8811      	ldrh	r1, [r2, #0]
 80082fa:	7892      	ldrb	r2, [r2, #2]
 80082fc:	8019      	strh	r1, [r3, #0]
 80082fe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2206      	movs	r2, #6
 8008304:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,A,B,A");
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	33a4      	adds	r3, #164	; 0xa4
 800830a:	4aa2      	ldr	r2, [pc, #648]	; (8008594 <problem_fetch+0x6eac>)
 800830c:	461c      	mov	r4, r3
 800830e:	4613      	mov	r3, r2
 8008310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008312:	6020      	str	r0, [r4, #0]
 8008314:	6061      	str	r1, [r4, #4]
 8008316:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,15,18");
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	3304      	adds	r3, #4
 800831c:	4a9e      	ldr	r2, [pc, #632]	; (8008598 <problem_fetch+0x6eb0>)
 800831e:	461c      	mov	r4, r3
 8008320:	4615      	mov	r5, r2
 8008322:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008324:	6020      	str	r0, [r4, #0]
 8008326:	6061      	str	r1, [r4, #4]
 8008328:	60a2      	str	r2, [r4, #8]
 800832a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008332:	4a9a      	ldr	r2, [pc, #616]	; (800859c <problem_fetch+0x6eb4>)
 8008334:	461c      	mov	r4, r3
 8008336:	4613      	mov	r3, r2
 8008338:	cb07      	ldmia	r3!, {r0, r1, r2}
 800833a:	6020      	str	r0, [r4, #0]
 800833c:	6061      	str	r1, [r4, #4]
 800833e:	60a2      	str	r2, [r4, #8]
			break;
 8008340:	f014 b902 	b.w	801c548 <problem_fetch+0x1ae60>
		case 184 :
			strcpy(p->name,"ATLANTIC SEA NETTLE");
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800834a:	4a95      	ldr	r2, [pc, #596]	; (80085a0 <problem_fetch+0x6eb8>)
 800834c:	461d      	mov	r5, r3
 800834e:	4614      	mov	r4, r2
 8008350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008352:	6028      	str	r0, [r5, #0]
 8008354:	6069      	str	r1, [r5, #4]
 8008356:	60aa      	str	r2, [r5, #8]
 8008358:	60eb      	str	r3, [r5, #12]
 800835a:	6820      	ldr	r0, [r4, #0]
 800835c:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008364:	4a8f      	ldr	r2, [pc, #572]	; (80085a4 <problem_fetch+0x6ebc>)
 8008366:	6810      	ldr	r0, [r2, #0]
 8008368:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2206      	movs	r2, #6
 800836e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,B,D,A");
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	33a4      	adds	r3, #164	; 0xa4
 8008374:	4a8c      	ldr	r2, [pc, #560]	; (80085a8 <problem_fetch+0x6ec0>)
 8008376:	461c      	mov	r4, r3
 8008378:	4613      	mov	r3, r2
 800837a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800837c:	6020      	str	r0, [r4, #0]
 800837e:	6061      	str	r1, [r4, #4]
 8008380:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,12,15,18");
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3304      	adds	r3, #4
 8008386:	4a89      	ldr	r2, [pc, #548]	; (80085ac <problem_fetch+0x6ec4>)
 8008388:	461c      	mov	r4, r3
 800838a:	4615      	mov	r5, r2
 800838c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800838e:	6020      	str	r0, [r4, #0]
 8008390:	6061      	str	r1, [r4, #4]
 8008392:	60a2      	str	r2, [r4, #8]
 8008394:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800839c:	4a7f      	ldr	r2, [pc, #508]	; (800859c <problem_fetch+0x6eb4>)
 800839e:	461c      	mov	r4, r3
 80083a0:	4613      	mov	r3, r2
 80083a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083a4:	6020      	str	r0, [r4, #0]
 80083a6:	6061      	str	r1, [r4, #4]
 80083a8:	60a2      	str	r2, [r4, #8]
			break;
 80083aa:	f014 b8cd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 185 :
			strcpy(p->name,"WOA");
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80083b4:	4a7e      	ldr	r2, [pc, #504]	; (80085b0 <problem_fetch+0x6ec8>)
 80083b6:	6810      	ldr	r0, [r2, #0]
 80083b8:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80083c0:	4a6e      	ldr	r2, [pc, #440]	; (800857c <problem_fetch+0x6e94>)
 80083c2:	8811      	ldrh	r1, [r2, #0]
 80083c4:	7892      	ldrb	r2, [r2, #2]
 80083c6:	8019      	strh	r1, [r3, #0]
 80083c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2207      	movs	r2, #7
 80083ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,D,F,G,I");
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	33a4      	adds	r3, #164	; 0xa4
 80083d4:	4a77      	ldr	r2, [pc, #476]	; (80085b4 <problem_fetch+0x6ecc>)
 80083d6:	461c      	mov	r4, r3
 80083d8:	4613      	mov	r3, r2
 80083da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80083dc:	6020      	str	r0, [r4, #0]
 80083de:	6061      	str	r1, [r4, #4]
 80083e0:	60a2      	str	r2, [r4, #8]
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,13,15,18");
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	3304      	adds	r3, #4
 80083ea:	4a73      	ldr	r2, [pc, #460]	; (80085b8 <problem_fetch+0x6ed0>)
 80083ec:	461d      	mov	r5, r3
 80083ee:	4614      	mov	r4, r2
 80083f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083f2:	6028      	str	r0, [r5, #0]
 80083f4:	6069      	str	r1, [r5, #4]
 80083f6:	60aa      	str	r2, [r5, #8]
 80083f8:	60eb      	str	r3, [r5, #12]
 80083fa:	8823      	ldrh	r3, [r4, #0]
 80083fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008404:	4a6d      	ldr	r2, [pc, #436]	; (80085bc <problem_fetch+0x6ed4>)
 8008406:	461c      	mov	r4, r3
 8008408:	4613      	mov	r3, r2
 800840a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800840c:	6020      	str	r0, [r4, #0]
 800840e:	6061      	str	r1, [r4, #4]
 8008410:	60a2      	str	r2, [r4, #8]
 8008412:	881b      	ldrh	r3, [r3, #0]
 8008414:	81a3      	strh	r3, [r4, #12]
			break;
 8008416:	f014 b897 	b.w	801c548 <problem_fetch+0x1ae60>
		case 186 :
			strcpy(p->name,"GJ2");
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008420:	4a67      	ldr	r2, [pc, #412]	; (80085c0 <problem_fetch+0x6ed8>)
 8008422:	6810      	ldr	r0, [r2, #0]
 8008424:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800842c:	4a65      	ldr	r2, [pc, #404]	; (80085c4 <problem_fetch+0x6edc>)
 800842e:	6810      	ldr	r0, [r2, #0]
 8008430:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2207      	movs	r2, #7
 8008436:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,F,C,D,A");
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	33a4      	adds	r3, #164	; 0xa4
 800843c:	4a62      	ldr	r2, [pc, #392]	; (80085c8 <problem_fetch+0x6ee0>)
 800843e:	461c      	mov	r4, r3
 8008440:	4613      	mov	r3, r2
 8008442:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008444:	6020      	str	r0, [r4, #0]
 8008446:	6061      	str	r1, [r4, #4]
 8008448:	60a2      	str	r2, [r4, #8]
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,15,18");
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3304      	adds	r3, #4
 8008452:	4a5e      	ldr	r2, [pc, #376]	; (80085cc <problem_fetch+0x6ee4>)
 8008454:	461d      	mov	r5, r3
 8008456:	4614      	mov	r4, r2
 8008458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800845a:	6028      	str	r0, [r5, #0]
 800845c:	6069      	str	r1, [r5, #4]
 800845e:	60aa      	str	r2, [r5, #8]
 8008460:	60eb      	str	r3, [r5, #12]
 8008462:	8823      	ldrh	r3, [r4, #0]
 8008464:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800846c:	4a53      	ldr	r2, [pc, #332]	; (80085bc <problem_fetch+0x6ed4>)
 800846e:	461c      	mov	r4, r3
 8008470:	4613      	mov	r3, r2
 8008472:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008474:	6020      	str	r0, [r4, #0]
 8008476:	6061      	str	r1, [r4, #4]
 8008478:	60a2      	str	r2, [r4, #8]
 800847a:	881b      	ldrh	r3, [r3, #0]
 800847c:	81a3      	strh	r3, [r4, #12]
			break;
 800847e:	f014 b863 	b.w	801c548 <problem_fetch+0x1ae60>
		case 187 :
			strcpy(p->name,"CHEESE AND PICKLE");
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008488:	4a51      	ldr	r2, [pc, #324]	; (80085d0 <problem_fetch+0x6ee8>)
 800848a:	461d      	mov	r5, r3
 800848c:	4614      	mov	r4, r2
 800848e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008490:	6028      	str	r0, [r5, #0]
 8008492:	6069      	str	r1, [r5, #4]
 8008494:	60aa      	str	r2, [r5, #8]
 8008496:	60eb      	str	r3, [r5, #12]
 8008498:	8823      	ldrh	r3, [r4, #0]
 800849a:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80084a2:	4a40      	ldr	r2, [pc, #256]	; (80085a4 <problem_fetch+0x6ebc>)
 80084a4:	6810      	ldr	r0, [r2, #0]
 80084a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2207      	movs	r2, #7
 80084ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,A,E,A");
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	33a4      	adds	r3, #164	; 0xa4
 80084b2:	4a48      	ldr	r2, [pc, #288]	; (80085d4 <problem_fetch+0x6eec>)
 80084b4:	461c      	mov	r4, r3
 80084b6:	4613      	mov	r3, r2
 80084b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084ba:	6020      	str	r0, [r4, #0]
 80084bc:	6061      	str	r1, [r4, #4]
 80084be:	60a2      	str	r2, [r4, #8]
 80084c0:	881b      	ldrh	r3, [r3, #0]
 80084c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,16,18");
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3304      	adds	r3, #4
 80084c8:	4a43      	ldr	r2, [pc, #268]	; (80085d8 <problem_fetch+0x6ef0>)
 80084ca:	461d      	mov	r5, r3
 80084cc:	4614      	mov	r4, r2
 80084ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80084d0:	6028      	str	r0, [r5, #0]
 80084d2:	6069      	str	r1, [r5, #4]
 80084d4:	60aa      	str	r2, [r5, #8]
 80084d6:	60eb      	str	r3, [r5, #12]
 80084d8:	8823      	ldrh	r3, [r4, #0]
 80084da:	78a2      	ldrb	r2, [r4, #2]
 80084dc:	822b      	strh	r3, [r5, #16]
 80084de:	4613      	mov	r3, r2
 80084e0:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80084e8:	4a34      	ldr	r2, [pc, #208]	; (80085bc <problem_fetch+0x6ed4>)
 80084ea:	461c      	mov	r4, r3
 80084ec:	4613      	mov	r3, r2
 80084ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80084f0:	6020      	str	r0, [r4, #0]
 80084f2:	6061      	str	r1, [r4, #4]
 80084f4:	60a2      	str	r2, [r4, #8]
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	81a3      	strh	r3, [r4, #12]
			break;
 80084fa:	f014 b825 	b.w	801c548 <problem_fetch+0x1ae60>
		case 188 :
			strcpy(p->name,"A MATCH MADE IN HEAVEN");
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008504:	4a35      	ldr	r2, [pc, #212]	; (80085dc <problem_fetch+0x6ef4>)
 8008506:	461c      	mov	r4, r3
 8008508:	4615      	mov	r5, r2
 800850a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800850c:	6020      	str	r0, [r4, #0]
 800850e:	6061      	str	r1, [r4, #4]
 8008510:	60a2      	str	r2, [r4, #8]
 8008512:	60e3      	str	r3, [r4, #12]
 8008514:	6828      	ldr	r0, [r5, #0]
 8008516:	6120      	str	r0, [r4, #16]
 8008518:	88ab      	ldrh	r3, [r5, #4]
 800851a:	79aa      	ldrb	r2, [r5, #6]
 800851c:	82a3      	strh	r3, [r4, #20]
 800851e:	4613      	mov	r3, r2
 8008520:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7B+");
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008528:	4a2d      	ldr	r2, [pc, #180]	; (80085e0 <problem_fetch+0x6ef8>)
 800852a:	6810      	ldr	r0, [r2, #0]
 800852c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2205      	movs	r2, #5
 8008532:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,D,D");
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	33a4      	adds	r3, #164	; 0xa4
 8008538:	492a      	ldr	r1, [pc, #168]	; (80085e4 <problem_fetch+0x6efc>)
 800853a:	461a      	mov	r2, r3
 800853c:	460b      	mov	r3, r1
 800853e:	cb03      	ldmia	r3!, {r0, r1}
 8008540:	6010      	str	r0, [r2, #0]
 8008542:	6051      	str	r1, [r2, #4]
 8008544:	881b      	ldrh	r3, [r3, #0]
 8008546:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,11,15,18");
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	4a26      	ldr	r2, [pc, #152]	; (80085e8 <problem_fetch+0x6f00>)
 800854e:	461c      	mov	r4, r3
 8008550:	4613      	mov	r3, r2
 8008552:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008554:	6020      	str	r0, [r4, #0]
 8008556:	6061      	str	r1, [r4, #4]
 8008558:	60a2      	str	r2, [r4, #8]
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008564:	4921      	ldr	r1, [pc, #132]	; (80085ec <problem_fetch+0x6f04>)
 8008566:	461a      	mov	r2, r3
 8008568:	460b      	mov	r3, r1
 800856a:	cb03      	ldmia	r3!, {r0, r1}
 800856c:	6010      	str	r0, [r2, #0]
 800856e:	6051      	str	r1, [r2, #4]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	8113      	strh	r3, [r2, #8]
			break;
 8008574:	f013 bfe8 	b.w	801c548 <problem_fetch+0x1ae60>
 8008578:	08025e28 	.word	0x08025e28
 800857c:	0802391c 	.word	0x0802391c
 8008580:	08025e2c 	.word	0x08025e2c
 8008584:	08025e3c 	.word	0x08025e3c
 8008588:	08025e54 	.word	0x08025e54
 800858c:	08025e64 	.word	0x08025e64
 8008590:	08024190 	.word	0x08024190
 8008594:	08025e74 	.word	0x08025e74
 8008598:	08025ca4 	.word	0x08025ca4
 800859c:	08023cf8 	.word	0x08023cf8
 80085a0:	08025e80 	.word	0x08025e80
 80085a4:	080239f4 	.word	0x080239f4
 80085a8:	08025e94 	.word	0x08025e94
 80085ac:	08025ea0 	.word	0x08025ea0
 80085b0:	08025eb0 	.word	0x08025eb0
 80085b4:	08025eb4 	.word	0x08025eb4
 80085b8:	08025ec4 	.word	0x08025ec4
 80085bc:	08023ae4 	.word	0x08023ae4
 80085c0:	08025ed8 	.word	0x08025ed8
 80085c4:	0802395c 	.word	0x0802395c
 80085c8:	08025edc 	.word	0x08025edc
 80085cc:	08025eec 	.word	0x08025eec
 80085d0:	08025f00 	.word	0x08025f00
 80085d4:	08025f14 	.word	0x08025f14
 80085d8:	08025f24 	.word	0x08025f24
 80085dc:	08025f38 	.word	0x08025f38
 80085e0:	08023a98 	.word	0x08023a98
 80085e4:	08025f50 	.word	0x08025f50
 80085e8:	08025f5c 	.word	0x08025f5c
 80085ec:	08023e28 	.word	0x08023e28
		case 189 :
			strcpy(p->name,"DUDDY QUALIFIED");
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80085f6:	4ac1      	ldr	r2, [pc, #772]	; (80088fc <problem_fetch+0x7214>)
 80085f8:	461c      	mov	r4, r3
 80085fa:	4615      	mov	r5, r2
 80085fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085fe:	6020      	str	r0, [r4, #0]
 8008600:	6061      	str	r1, [r4, #4]
 8008602:	60a2      	str	r2, [r4, #8]
 8008604:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800860c:	4abc      	ldr	r2, [pc, #752]	; (8008900 <problem_fetch+0x7218>)
 800860e:	6810      	ldr	r0, [r2, #0]
 8008610:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2207      	movs	r2, #7
 8008616:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,A,D,E,I");
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	33a4      	adds	r3, #164	; 0xa4
 800861c:	4ab9      	ldr	r2, [pc, #740]	; (8008904 <problem_fetch+0x721c>)
 800861e:	461c      	mov	r4, r3
 8008620:	4613      	mov	r3, r2
 8008622:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008624:	6020      	str	r0, [r4, #0]
 8008626:	6061      	str	r1, [r4, #4]
 8008628:	60a2      	str	r2, [r4, #8]
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,11,14,15,16,18");
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	3304      	adds	r3, #4
 8008632:	4ab5      	ldr	r2, [pc, #724]	; (8008908 <problem_fetch+0x7220>)
 8008634:	461d      	mov	r5, r3
 8008636:	4614      	mov	r4, r2
 8008638:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800863a:	6028      	str	r0, [r5, #0]
 800863c:	6069      	str	r1, [r5, #4]
 800863e:	60aa      	str	r2, [r5, #8]
 8008640:	60eb      	str	r3, [r5, #12]
 8008642:	8823      	ldrh	r3, [r4, #0]
 8008644:	78a2      	ldrb	r2, [r4, #2]
 8008646:	822b      	strh	r3, [r5, #16]
 8008648:	4613      	mov	r3, r2
 800864a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008652:	4aae      	ldr	r2, [pc, #696]	; (800890c <problem_fetch+0x7224>)
 8008654:	461c      	mov	r4, r3
 8008656:	4613      	mov	r3, r2
 8008658:	cb07      	ldmia	r3!, {r0, r1, r2}
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	6061      	str	r1, [r4, #4]
 800865e:	60a2      	str	r2, [r4, #8]
 8008660:	881b      	ldrh	r3, [r3, #0]
 8008662:	81a3      	strh	r3, [r4, #12]
			break;
 8008664:	f013 bf70 	b.w	801c548 <problem_fetch+0x1ae60>
		case 190 :
			strcpy(p->name,"EM'S BUNNY");
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800866e:	49a8      	ldr	r1, [pc, #672]	; (8008910 <problem_fetch+0x7228>)
 8008670:	461a      	mov	r2, r3
 8008672:	460b      	mov	r3, r1
 8008674:	cb03      	ldmia	r3!, {r0, r1}
 8008676:	6010      	str	r0, [r2, #0]
 8008678:	6051      	str	r1, [r2, #4]
 800867a:	8819      	ldrh	r1, [r3, #0]
 800867c:	789b      	ldrb	r3, [r3, #2]
 800867e:	8111      	strh	r1, [r2, #8]
 8008680:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008688:	4aa2      	ldr	r2, [pc, #648]	; (8008914 <problem_fetch+0x722c>)
 800868a:	8811      	ldrh	r1, [r2, #0]
 800868c:	7892      	ldrb	r2, [r2, #2]
 800868e:	8019      	strh	r1, [r3, #0]
 8008690:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2206      	movs	r2, #6
 8008696:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,I,E,I");
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	33a4      	adds	r3, #164	; 0xa4
 800869c:	4a9e      	ldr	r2, [pc, #632]	; (8008918 <problem_fetch+0x7230>)
 800869e:	461c      	mov	r4, r3
 80086a0:	4613      	mov	r3, r2
 80086a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086a4:	6020      	str	r0, [r4, #0]
 80086a6:	6061      	str	r1, [r4, #4]
 80086a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,8,10,14,18");
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4a9b      	ldr	r2, [pc, #620]	; (800891c <problem_fetch+0x7234>)
 80086b0:	461c      	mov	r4, r3
 80086b2:	4613      	mov	r3, r2
 80086b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	6061      	str	r1, [r4, #4]
 80086ba:	60a2      	str	r2, [r4, #8]
 80086bc:	881a      	ldrh	r2, [r3, #0]
 80086be:	789b      	ldrb	r3, [r3, #2]
 80086c0:	81a2      	strh	r2, [r4, #12]
 80086c2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80086ca:	4a95      	ldr	r2, [pc, #596]	; (8008920 <problem_fetch+0x7238>)
 80086cc:	461c      	mov	r4, r3
 80086ce:	4613      	mov	r3, r2
 80086d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80086d2:	6020      	str	r0, [r4, #0]
 80086d4:	6061      	str	r1, [r4, #4]
 80086d6:	60a2      	str	r2, [r4, #8]
			break;
 80086d8:	f013 bf36 	b.w	801c548 <problem_fetch+0x1ae60>
		case 191 :
			strcpy(p->name,"DUST IN THE WIND");
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80086e2:	4a90      	ldr	r2, [pc, #576]	; (8008924 <problem_fetch+0x723c>)
 80086e4:	461d      	mov	r5, r3
 80086e6:	4614      	mov	r4, r2
 80086e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80086ea:	6028      	str	r0, [r5, #0]
 80086ec:	6069      	str	r1, [r5, #4]
 80086ee:	60aa      	str	r2, [r5, #8]
 80086f0:	60eb      	str	r3, [r5, #12]
 80086f2:	7823      	ldrb	r3, [r4, #0]
 80086f4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80086fc:	4a8a      	ldr	r2, [pc, #552]	; (8008928 <problem_fetch+0x7240>)
 80086fe:	6810      	ldr	r0, [r2, #0]
 8008700:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2206      	movs	r2, #6
 8008706:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,G,D");
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	33a4      	adds	r3, #164	; 0xa4
 800870c:	4a87      	ldr	r2, [pc, #540]	; (800892c <problem_fetch+0x7244>)
 800870e:	461c      	mov	r4, r3
 8008710:	4613      	mov	r3, r2
 8008712:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008714:	6020      	str	r0, [r4, #0]
 8008716:	6061      	str	r1, [r4, #4]
 8008718:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	3304      	adds	r3, #4
 800871e:	4a84      	ldr	r2, [pc, #528]	; (8008930 <problem_fetch+0x7248>)
 8008720:	461c      	mov	r4, r3
 8008722:	4615      	mov	r5, r2
 8008724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008726:	6020      	str	r0, [r4, #0]
 8008728:	6061      	str	r1, [r4, #4]
 800872a:	60a2      	str	r2, [r4, #8]
 800872c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008734:	4a7a      	ldr	r2, [pc, #488]	; (8008920 <problem_fetch+0x7238>)
 8008736:	461c      	mov	r4, r3
 8008738:	4613      	mov	r3, r2
 800873a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800873c:	6020      	str	r0, [r4, #0]
 800873e:	6061      	str	r1, [r4, #4]
 8008740:	60a2      	str	r2, [r4, #8]
			break;
 8008742:	f013 bf01 	b.w	801c548 <problem_fetch+0x1ae60>
		case 192 :
			strcpy(p->name,"THREE");
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800874c:	4a79      	ldr	r2, [pc, #484]	; (8008934 <problem_fetch+0x724c>)
 800874e:	6810      	ldr	r0, [r2, #0]
 8008750:	6018      	str	r0, [r3, #0]
 8008752:	8892      	ldrh	r2, [r2, #4]
 8008754:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800875c:	4a72      	ldr	r2, [pc, #456]	; (8008928 <problem_fetch+0x7240>)
 800875e:	6810      	ldr	r0, [r2, #0]
 8008760:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2206      	movs	r2, #6
 8008766:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,E,A");
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	33a4      	adds	r3, #164	; 0xa4
 800876c:	4a72      	ldr	r2, [pc, #456]	; (8008938 <problem_fetch+0x7250>)
 800876e:	461c      	mov	r4, r3
 8008770:	4613      	mov	r3, r2
 8008772:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008774:	6020      	str	r0, [r4, #0]
 8008776:	6061      	str	r1, [r4, #4]
 8008778:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3304      	adds	r3, #4
 800877e:	4a6f      	ldr	r2, [pc, #444]	; (800893c <problem_fetch+0x7254>)
 8008780:	461c      	mov	r4, r3
 8008782:	4615      	mov	r5, r2
 8008784:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008786:	6020      	str	r0, [r4, #0]
 8008788:	6061      	str	r1, [r4, #4]
 800878a:	60a2      	str	r2, [r4, #8]
 800878c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008794:	4a6a      	ldr	r2, [pc, #424]	; (8008940 <problem_fetch+0x7258>)
 8008796:	461c      	mov	r4, r3
 8008798:	4613      	mov	r3, r2
 800879a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800879c:	6020      	str	r0, [r4, #0]
 800879e:	6061      	str	r1, [r4, #4]
 80087a0:	60a2      	str	r2, [r4, #8]
			break;
 80087a2:	f013 bed1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 193 :
			strcpy(p->name,"GRO1");
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80087ac:	4a65      	ldr	r2, [pc, #404]	; (8008944 <problem_fetch+0x725c>)
 80087ae:	6810      	ldr	r0, [r2, #0]
 80087b0:	6018      	str	r0, [r3, #0]
 80087b2:	7912      	ldrb	r2, [r2, #4]
 80087b4:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80087bc:	4a55      	ldr	r2, [pc, #340]	; (8008914 <problem_fetch+0x722c>)
 80087be:	8811      	ldrh	r1, [r2, #0]
 80087c0:	7892      	ldrb	r2, [r2, #2]
 80087c2:	8019      	strh	r1, [r3, #0]
 80087c4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2206      	movs	r2, #6
 80087ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,C,E,D");
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	33a4      	adds	r3, #164	; 0xa4
 80087d0:	4a5d      	ldr	r2, [pc, #372]	; (8008948 <problem_fetch+0x7260>)
 80087d2:	461c      	mov	r4, r3
 80087d4:	4613      	mov	r3, r2
 80087d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80087d8:	6020      	str	r0, [r4, #0]
 80087da:	6061      	str	r1, [r4, #4]
 80087dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4a5a      	ldr	r2, [pc, #360]	; (800894c <problem_fetch+0x7264>)
 80087e4:	461c      	mov	r4, r3
 80087e6:	4615      	mov	r5, r2
 80087e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ea:	6020      	str	r0, [r4, #0]
 80087ec:	6061      	str	r1, [r4, #4]
 80087ee:	60a2      	str	r2, [r4, #8]
 80087f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80087f8:	4a49      	ldr	r2, [pc, #292]	; (8008920 <problem_fetch+0x7238>)
 80087fa:	461c      	mov	r4, r3
 80087fc:	4613      	mov	r3, r2
 80087fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008800:	6020      	str	r0, [r4, #0]
 8008802:	6061      	str	r1, [r4, #4]
 8008804:	60a2      	str	r2, [r4, #8]
			break;
 8008806:	f013 be9f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 194 :
			strcpy(p->name,"INTO THE SHADOW DUST");
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008810:	4a4f      	ldr	r2, [pc, #316]	; (8008950 <problem_fetch+0x7268>)
 8008812:	461d      	mov	r5, r3
 8008814:	4614      	mov	r4, r2
 8008816:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008818:	6028      	str	r0, [r5, #0]
 800881a:	6069      	str	r1, [r5, #4]
 800881c:	60aa      	str	r2, [r5, #8]
 800881e:	60eb      	str	r3, [r5, #12]
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	6128      	str	r0, [r5, #16]
 8008824:	7923      	ldrb	r3, [r4, #4]
 8008826:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800882e:	4a49      	ldr	r2, [pc, #292]	; (8008954 <problem_fetch+0x726c>)
 8008830:	6810      	ldr	r0, [r2, #0]
 8008832:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2208      	movs	r2, #8
 8008838:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,C,G,G,I");
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	33a4      	adds	r3, #164	; 0xa4
 800883e:	4a46      	ldr	r2, [pc, #280]	; (8008958 <problem_fetch+0x7270>)
 8008840:	461c      	mov	r4, r3
 8008842:	4615      	mov	r5, r2
 8008844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008846:	6020      	str	r0, [r4, #0]
 8008848:	6061      	str	r1, [r4, #4]
 800884a:	60a2      	str	r2, [r4, #8]
 800884c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,14,17,18");
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3304      	adds	r3, #4
 8008852:	4a42      	ldr	r2, [pc, #264]	; (800895c <problem_fetch+0x7274>)
 8008854:	461d      	mov	r5, r3
 8008856:	4614      	mov	r4, r2
 8008858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800885a:	6028      	str	r0, [r5, #0]
 800885c:	6069      	str	r1, [r5, #4]
 800885e:	60aa      	str	r2, [r5, #8]
 8008860:	60eb      	str	r3, [r5, #12]
 8008862:	6820      	ldr	r0, [r4, #0]
 8008864:	6128      	str	r0, [r5, #16]
 8008866:	7923      	ldrb	r3, [r4, #4]
 8008868:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008870:	4a3b      	ldr	r2, [pc, #236]	; (8008960 <problem_fetch+0x7278>)
 8008872:	461c      	mov	r4, r3
 8008874:	4615      	mov	r5, r2
 8008876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008878:	6020      	str	r0, [r4, #0]
 800887a:	6061      	str	r1, [r4, #4]
 800887c:	60a2      	str	r2, [r4, #8]
 800887e:	60e3      	str	r3, [r4, #12]
			break;
 8008880:	f013 be62 	b.w	801c548 <problem_fetch+0x1ae60>
		case 195 :
			strcpy(p->name,"BILLIONS AND BILLIONS");
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800888a:	4a36      	ldr	r2, [pc, #216]	; (8008964 <problem_fetch+0x727c>)
 800888c:	461d      	mov	r5, r3
 800888e:	4614      	mov	r4, r2
 8008890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008892:	6028      	str	r0, [r5, #0]
 8008894:	6069      	str	r1, [r5, #4]
 8008896:	60aa      	str	r2, [r5, #8]
 8008898:	60eb      	str	r3, [r5, #12]
 800889a:	6820      	ldr	r0, [r4, #0]
 800889c:	6128      	str	r0, [r5, #16]
 800889e:	88a3      	ldrh	r3, [r4, #4]
 80088a0:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80088a8:	4a2f      	ldr	r2, [pc, #188]	; (8008968 <problem_fetch+0x7280>)
 80088aa:	8811      	ldrh	r1, [r2, #0]
 80088ac:	7892      	ldrb	r2, [r2, #2]
 80088ae:	8019      	strh	r1, [r3, #0]
 80088b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2206      	movs	r2, #6
 80088b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,G,D");
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	33a4      	adds	r3, #164	; 0xa4
 80088bc:	4a2b      	ldr	r2, [pc, #172]	; (800896c <problem_fetch+0x7284>)
 80088be:	461c      	mov	r4, r3
 80088c0:	4613      	mov	r3, r2
 80088c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088c4:	6020      	str	r0, [r4, #0]
 80088c6:	6061      	str	r1, [r4, #4]
 80088c8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,9,12,14,18");
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3304      	adds	r3, #4
 80088ce:	4a28      	ldr	r2, [pc, #160]	; (8008970 <problem_fetch+0x7288>)
 80088d0:	461c      	mov	r4, r3
 80088d2:	4613      	mov	r3, r2
 80088d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088d6:	6020      	str	r0, [r4, #0]
 80088d8:	6061      	str	r1, [r4, #4]
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	881a      	ldrh	r2, [r3, #0]
 80088de:	789b      	ldrb	r3, [r3, #2]
 80088e0:	81a2      	strh	r2, [r4, #12]
 80088e2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <problem_fetch+0x7258>)
 80088ec:	461c      	mov	r4, r3
 80088ee:	4613      	mov	r3, r2
 80088f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088f2:	6020      	str	r0, [r4, #0]
 80088f4:	6061      	str	r1, [r4, #4]
 80088f6:	60a2      	str	r2, [r4, #8]
			break;
 80088f8:	f013 be26 	b.w	801c548 <problem_fetch+0x1ae60>
 80088fc:	08025f6c 	.word	0x08025f6c
 8008900:	08023afc 	.word	0x08023afc
 8008904:	08025f7c 	.word	0x08025f7c
 8008908:	08025f8c 	.word	0x08025f8c
 800890c:	08023ae4 	.word	0x08023ae4
 8008910:	08025fa0 	.word	0x08025fa0
 8008914:	08023a28 	.word	0x08023a28
 8008918:	08025fac 	.word	0x08025fac
 800891c:	08025fb8 	.word	0x08025fb8
 8008920:	08023cf8 	.word	0x08023cf8
 8008924:	08025fc8 	.word	0x08025fc8
 8008928:	080239f4 	.word	0x080239f4
 800892c:	08025fdc 	.word	0x08025fdc
 8008930:	08025fe8 	.word	0x08025fe8
 8008934:	08025ff8 	.word	0x08025ff8
 8008938:	08026000 	.word	0x08026000
 800893c:	0802600c 	.word	0x0802600c
 8008940:	0802393c 	.word	0x0802393c
 8008944:	0802601c 	.word	0x0802601c
 8008948:	08026024 	.word	0x08026024
 800894c:	08026030 	.word	0x08026030
 8008950:	08026040 	.word	0x08026040
 8008954:	0802395c 	.word	0x0802395c
 8008958:	08026058 	.word	0x08026058
 800895c:	08026068 	.word	0x08026068
 8008960:	08023b6c 	.word	0x08023b6c
 8008964:	08026080 	.word	0x08026080
 8008968:	0802391c 	.word	0x0802391c
 800896c:	08026098 	.word	0x08026098
 8008970:	080260a4 	.word	0x080260a4
		case 196 :
			strcpy(p->name,"TWO");
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800897a:	4abd      	ldr	r2, [pc, #756]	; (8008c70 <problem_fetch+0x7588>)
 800897c:	6810      	ldr	r0, [r2, #0]
 800897e:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C+");
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008986:	4abb      	ldr	r2, [pc, #748]	; (8008c74 <problem_fetch+0x758c>)
 8008988:	6810      	ldr	r0, [r2, #0]
 800898a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2207      	movs	r2, #7
 8008990:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,E,I,I");
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	33a4      	adds	r3, #164	; 0xa4
 8008996:	4ab8      	ldr	r2, [pc, #736]	; (8008c78 <problem_fetch+0x7590>)
 8008998:	461c      	mov	r4, r3
 800899a:	4613      	mov	r3, r2
 800899c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800899e:	6020      	str	r0, [r4, #0]
 80089a0:	6061      	str	r1, [r4, #4]
 80089a2:	60a2      	str	r2, [r4, #8]
 80089a4:	881b      	ldrh	r3, [r3, #0]
 80089a6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,14,18");
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4ab3      	ldr	r2, [pc, #716]	; (8008c7c <problem_fetch+0x7594>)
 80089ae:	461d      	mov	r5, r3
 80089b0:	4614      	mov	r4, r2
 80089b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089b4:	6028      	str	r0, [r5, #0]
 80089b6:	6069      	str	r1, [r5, #4]
 80089b8:	60aa      	str	r2, [r5, #8]
 80089ba:	60eb      	str	r3, [r5, #12]
 80089bc:	8823      	ldrh	r3, [r4, #0]
 80089be:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80089c6:	4aae      	ldr	r2, [pc, #696]	; (8008c80 <problem_fetch+0x7598>)
 80089c8:	461c      	mov	r4, r3
 80089ca:	4613      	mov	r3, r2
 80089cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80089ce:	6020      	str	r0, [r4, #0]
 80089d0:	6061      	str	r1, [r4, #4]
 80089d2:	60a2      	str	r2, [r4, #8]
 80089d4:	881b      	ldrh	r3, [r3, #0]
 80089d6:	81a3      	strh	r3, [r4, #12]
			break;
 80089d8:	f013 bdb6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 197 :
			strcpy(p->name,"CHINGA SU ES TO MADRE");
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80089e2:	4aa8      	ldr	r2, [pc, #672]	; (8008c84 <problem_fetch+0x759c>)
 80089e4:	461d      	mov	r5, r3
 80089e6:	4614      	mov	r4, r2
 80089e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089ea:	6028      	str	r0, [r5, #0]
 80089ec:	6069      	str	r1, [r5, #4]
 80089ee:	60aa      	str	r2, [r5, #8]
 80089f0:	60eb      	str	r3, [r5, #12]
 80089f2:	6820      	ldr	r0, [r4, #0]
 80089f4:	6128      	str	r0, [r5, #16]
 80089f6:	88a3      	ldrh	r3, [r4, #4]
 80089f8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a00:	4aa1      	ldr	r2, [pc, #644]	; (8008c88 <problem_fetch+0x75a0>)
 8008a02:	8811      	ldrh	r1, [r2, #0]
 8008a04:	7892      	ldrb	r2, [r2, #2]
 8008a06:	8019      	strh	r1, [r3, #0]
 8008a08:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2205      	movs	r2, #5
 8008a0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,A,B");
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	33a4      	adds	r3, #164	; 0xa4
 8008a14:	499d      	ldr	r1, [pc, #628]	; (8008c8c <problem_fetch+0x75a4>)
 8008a16:	461a      	mov	r2, r3
 8008a18:	460b      	mov	r3, r1
 8008a1a:	cb03      	ldmia	r3!, {r0, r1}
 8008a1c:	6010      	str	r0, [r2, #0]
 8008a1e:	6051      	str	r1, [r2, #4]
 8008a20:	881b      	ldrh	r3, [r3, #0]
 8008a22:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,12,18,15");
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3304      	adds	r3, #4
 8008a28:	4a99      	ldr	r2, [pc, #612]	; (8008c90 <problem_fetch+0x75a8>)
 8008a2a:	461c      	mov	r4, r3
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a30:	6020      	str	r0, [r4, #0]
 8008a32:	6061      	str	r1, [r4, #4]
 8008a34:	60a2      	str	r2, [r4, #8]
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,e,d");
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008a40:	4994      	ldr	r1, [pc, #592]	; (8008c94 <problem_fetch+0x75ac>)
 8008a42:	461a      	mov	r2, r3
 8008a44:	460b      	mov	r3, r1
 8008a46:	cb03      	ldmia	r3!, {r0, r1}
 8008a48:	6010      	str	r0, [r2, #0]
 8008a4a:	6051      	str	r1, [r2, #4]
 8008a4c:	881b      	ldrh	r3, [r3, #0]
 8008a4e:	8113      	strh	r3, [r2, #8]
			break;
 8008a50:	f013 bd7a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 198 :
			strcpy(p->name,"DON'T BLACKOUT");
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008a5a:	4a8f      	ldr	r2, [pc, #572]	; (8008c98 <problem_fetch+0x75b0>)
 8008a5c:	461c      	mov	r4, r3
 8008a5e:	4613      	mov	r3, r2
 8008a60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a62:	6020      	str	r0, [r4, #0]
 8008a64:	6061      	str	r1, [r4, #4]
 8008a66:	60a2      	str	r2, [r4, #8]
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	789b      	ldrb	r3, [r3, #2]
 8008a6c:	81a2      	strh	r2, [r4, #12]
 8008a6e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008a76:	4a89      	ldr	r2, [pc, #548]	; (8008c9c <problem_fetch+0x75b4>)
 8008a78:	8811      	ldrh	r1, [r2, #0]
 8008a7a:	7892      	ldrb	r2, [r2, #2]
 8008a7c:	8019      	strh	r1, [r3, #0]
 8008a7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2207      	movs	r2, #7
 8008a84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D,H,A");
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	33a4      	adds	r3, #164	; 0xa4
 8008a8a:	4a85      	ldr	r2, [pc, #532]	; (8008ca0 <problem_fetch+0x75b8>)
 8008a8c:	461c      	mov	r4, r3
 8008a8e:	4613      	mov	r3, r2
 8008a90:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008a92:	6020      	str	r0, [r4, #0]
 8008a94:	6061      	str	r1, [r4, #4]
 8008a96:	60a2      	str	r2, [r4, #8]
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,11,9,15,10,18");
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	4a80      	ldr	r2, [pc, #512]	; (8008ca4 <problem_fetch+0x75bc>)
 8008aa2:	461d      	mov	r5, r3
 8008aa4:	4614      	mov	r4, r2
 8008aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008aa8:	6028      	str	r0, [r5, #0]
 8008aaa:	6069      	str	r1, [r5, #4]
 8008aac:	60aa      	str	r2, [r5, #8]
 8008aae:	60eb      	str	r3, [r5, #12]
 8008ab0:	8823      	ldrh	r3, [r4, #0]
 8008ab2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008aba:	4a71      	ldr	r2, [pc, #452]	; (8008c80 <problem_fetch+0x7598>)
 8008abc:	461c      	mov	r4, r3
 8008abe:	4613      	mov	r3, r2
 8008ac0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ac2:	6020      	str	r0, [r4, #0]
 8008ac4:	6061      	str	r1, [r4, #4]
 8008ac6:	60a2      	str	r2, [r4, #8]
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	81a3      	strh	r3, [r4, #12]
			break;
 8008acc:	f013 bd3c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 199 :
			strcpy(p->name,"LUCID NONSENSE");
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ad6:	4a74      	ldr	r2, [pc, #464]	; (8008ca8 <problem_fetch+0x75c0>)
 8008ad8:	461c      	mov	r4, r3
 8008ada:	4613      	mov	r3, r2
 8008adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ade:	6020      	str	r0, [r4, #0]
 8008ae0:	6061      	str	r1, [r4, #4]
 8008ae2:	60a2      	str	r2, [r4, #8]
 8008ae4:	881a      	ldrh	r2, [r3, #0]
 8008ae6:	789b      	ldrb	r3, [r3, #2]
 8008ae8:	81a2      	strh	r2, [r4, #12]
 8008aea:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008af2:	4a6a      	ldr	r2, [pc, #424]	; (8008c9c <problem_fetch+0x75b4>)
 8008af4:	8811      	ldrh	r1, [r2, #0]
 8008af6:	7892      	ldrb	r2, [r2, #2]
 8008af8:	8019      	strh	r1, [r3, #0]
 8008afa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2206      	movs	r2, #6
 8008b00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,E,B,I");
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	33a4      	adds	r3, #164	; 0xa4
 8008b06:	4a69      	ldr	r2, [pc, #420]	; (8008cac <problem_fetch+0x75c4>)
 8008b08:	461c      	mov	r4, r3
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b0e:	6020      	str	r0, [r4, #0]
 8008b10:	6061      	str	r1, [r4, #4]
 8008b12:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,15,16,10,18");
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4a65      	ldr	r2, [pc, #404]	; (8008cb0 <problem_fetch+0x75c8>)
 8008b1a:	461c      	mov	r4, r3
 8008b1c:	4615      	mov	r5, r2
 8008b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b20:	6020      	str	r0, [r4, #0]
 8008b22:	6061      	str	r1, [r4, #4]
 8008b24:	60a2      	str	r2, [r4, #8]
 8008b26:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008b2e:	4a61      	ldr	r2, [pc, #388]	; (8008cb4 <problem_fetch+0x75cc>)
 8008b30:	461c      	mov	r4, r3
 8008b32:	4613      	mov	r3, r2
 8008b34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b36:	6020      	str	r0, [r4, #0]
 8008b38:	6061      	str	r1, [r4, #4]
 8008b3a:	60a2      	str	r2, [r4, #8]
			break;
 8008b3c:	f013 bd04 	b.w	801c548 <problem_fetch+0x1ae60>
		case 200 :
			strcpy(p->name,"SNAP");
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008b46:	4a5c      	ldr	r2, [pc, #368]	; (8008cb8 <problem_fetch+0x75d0>)
 8008b48:	6810      	ldr	r0, [r2, #0]
 8008b4a:	6018      	str	r0, [r3, #0]
 8008b4c:	7912      	ldrb	r2, [r2, #4]
 8008b4e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008b56:	4a59      	ldr	r2, [pc, #356]	; (8008cbc <problem_fetch+0x75d4>)
 8008b58:	6810      	ldr	r0, [r2, #0]
 8008b5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2206      	movs	r2, #6
 8008b60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,E,A,D");
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	33a4      	adds	r3, #164	; 0xa4
 8008b66:	4a56      	ldr	r2, [pc, #344]	; (8008cc0 <problem_fetch+0x75d8>)
 8008b68:	461c      	mov	r4, r3
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b6e:	6020      	str	r0, [r4, #0]
 8008b70:	6061      	str	r1, [r4, #4]
 8008b72:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,7,10,12,14,18");
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	4a52      	ldr	r2, [pc, #328]	; (8008cc4 <problem_fetch+0x75dc>)
 8008b7a:	461c      	mov	r4, r3
 8008b7c:	4615      	mov	r5, r2
 8008b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b80:	6020      	str	r0, [r4, #0]
 8008b82:	6061      	str	r1, [r4, #4]
 8008b84:	60a2      	str	r2, [r4, #8]
 8008b86:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008b8e:	4a49      	ldr	r2, [pc, #292]	; (8008cb4 <problem_fetch+0x75cc>)
 8008b90:	461c      	mov	r4, r3
 8008b92:	4613      	mov	r3, r2
 8008b94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008b96:	6020      	str	r0, [r4, #0]
 8008b98:	6061      	str	r1, [r4, #4]
 8008b9a:	60a2      	str	r2, [r4, #8]
			break;
 8008b9c:	f013 bcd4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 201 :
			strcpy(p->name,"FAT 'N WEAK");
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008ba6:	4a48      	ldr	r2, [pc, #288]	; (8008cc8 <problem_fetch+0x75e0>)
 8008ba8:	461c      	mov	r4, r3
 8008baa:	4613      	mov	r3, r2
 8008bac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bae:	6020      	str	r0, [r4, #0]
 8008bb0:	6061      	str	r1, [r4, #4]
 8008bb2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008bba:	4a2e      	ldr	r2, [pc, #184]	; (8008c74 <problem_fetch+0x758c>)
 8008bbc:	6810      	ldr	r0, [r2, #0]
 8008bbe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2206      	movs	r2, #6
 8008bc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A");
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	33a4      	adds	r3, #164	; 0xa4
 8008bca:	4a40      	ldr	r2, [pc, #256]	; (8008ccc <problem_fetch+0x75e4>)
 8008bcc:	461c      	mov	r4, r3
 8008bce:	4613      	mov	r3, r2
 8008bd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bd2:	6020      	str	r0, [r4, #0]
 8008bd4:	6061      	str	r1, [r4, #4]
 8008bd6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,16,18");
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4a3c      	ldr	r2, [pc, #240]	; (8008cd0 <problem_fetch+0x75e8>)
 8008bde:	461c      	mov	r4, r3
 8008be0:	4615      	mov	r5, r2
 8008be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008be4:	6020      	str	r0, [r4, #0]
 8008be6:	6061      	str	r1, [r4, #4]
 8008be8:	60a2      	str	r2, [r4, #8]
 8008bea:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008bf2:	4a30      	ldr	r2, [pc, #192]	; (8008cb4 <problem_fetch+0x75cc>)
 8008bf4:	461c      	mov	r4, r3
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008bfa:	6020      	str	r0, [r4, #0]
 8008bfc:	6061      	str	r1, [r4, #4]
 8008bfe:	60a2      	str	r2, [r4, #8]
			break;
 8008c00:	f013 bca2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 202 :
			strcpy(p->name,"MSFTS");
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008c0a:	4a32      	ldr	r2, [pc, #200]	; (8008cd4 <problem_fetch+0x75ec>)
 8008c0c:	6810      	ldr	r0, [r2, #0]
 8008c0e:	6018      	str	r0, [r3, #0]
 8008c10:	8892      	ldrh	r2, [r2, #4]
 8008c12:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008c1a:	4a16      	ldr	r2, [pc, #88]	; (8008c74 <problem_fetch+0x758c>)
 8008c1c:	6810      	ldr	r0, [r2, #0]
 8008c1e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2207      	movs	r2, #7
 8008c24:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,E,J,J,H,I");
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	33a4      	adds	r3, #164	; 0xa4
 8008c2a:	4a2b      	ldr	r2, [pc, #172]	; (8008cd8 <problem_fetch+0x75f0>)
 8008c2c:	461c      	mov	r4, r3
 8008c2e:	4613      	mov	r3, r2
 8008c30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c32:	6020      	str	r0, [r4, #0]
 8008c34:	6061      	str	r1, [r4, #4]
 8008c36:	60a2      	str	r2, [r4, #8]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,5,13,16,18");
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3304      	adds	r3, #4
 8008c40:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <problem_fetch+0x75f4>)
 8008c42:	461d      	mov	r5, r3
 8008c44:	4614      	mov	r4, r2
 8008c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c48:	6028      	str	r0, [r5, #0]
 8008c4a:	6069      	str	r1, [r5, #4]
 8008c4c:	60aa      	str	r2, [r5, #8]
 8008c4e:	60eb      	str	r3, [r5, #12]
 8008c50:	8823      	ldrh	r3, [r4, #0]
 8008c52:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008c5a:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <problem_fetch+0x75f8>)
 8008c5c:	461c      	mov	r4, r3
 8008c5e:	4613      	mov	r3, r2
 8008c60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	6061      	str	r1, [r4, #4]
 8008c66:	60a2      	str	r2, [r4, #8]
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	81a3      	strh	r3, [r4, #12]
			break;
 8008c6c:	f013 bc6c 	b.w	801c548 <problem_fetch+0x1ae60>
 8008c70:	080260b4 	.word	0x080260b4
 8008c74:	080239f4 	.word	0x080239f4
 8008c78:	080260b8 	.word	0x080260b8
 8008c7c:	080260c8 	.word	0x080260c8
 8008c80:	080239d4 	.word	0x080239d4
 8008c84:	080260dc 	.word	0x080260dc
 8008c88:	08024190 	.word	0x08024190
 8008c8c:	080260f4 	.word	0x080260f4
 8008c90:	08026100 	.word	0x08026100
 8008c94:	08026110 	.word	0x08026110
 8008c98:	0802611c 	.word	0x0802611c
 8008c9c:	0802391c 	.word	0x0802391c
 8008ca0:	0802612c 	.word	0x0802612c
 8008ca4:	0802613c 	.word	0x0802613c
 8008ca8:	08026150 	.word	0x08026150
 8008cac:	08026160 	.word	0x08026160
 8008cb0:	0802616c 	.word	0x0802616c
 8008cb4:	08023cf8 	.word	0x08023cf8
 8008cb8:	0802617c 	.word	0x0802617c
 8008cbc:	08023afc 	.word	0x08023afc
 8008cc0:	08026184 	.word	0x08026184
 8008cc4:	08026190 	.word	0x08026190
 8008cc8:	080261a0 	.word	0x080261a0
 8008ccc:	080261ac 	.word	0x080261ac
 8008cd0:	080261b8 	.word	0x080261b8
 8008cd4:	080261c8 	.word	0x080261c8
 8008cd8:	080261d0 	.word	0x080261d0
 8008cdc:	080261e0 	.word	0x080261e0
 8008ce0:	08025d5c 	.word	0x08025d5c
		case 203 :
			strcpy(p->name,"ITIM");
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008cea:	4aaa      	ldr	r2, [pc, #680]	; (8008f94 <problem_fetch+0x78ac>)
 8008cec:	6810      	ldr	r0, [r2, #0]
 8008cee:	6018      	str	r0, [r3, #0]
 8008cf0:	7912      	ldrb	r2, [r2, #4]
 8008cf2:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008cfa:	4aa7      	ldr	r2, [pc, #668]	; (8008f98 <problem_fetch+0x78b0>)
 8008cfc:	6810      	ldr	r0, [r2, #0]
 8008cfe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2207      	movs	r2, #7
 8008d04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,I,E,E,G,E,G");
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	33a4      	adds	r3, #164	; 0xa4
 8008d0a:	4aa4      	ldr	r2, [pc, #656]	; (8008f9c <problem_fetch+0x78b4>)
 8008d0c:	461c      	mov	r4, r3
 8008d0e:	4613      	mov	r3, r2
 8008d10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d12:	6020      	str	r0, [r4, #0]
 8008d14:	6061      	str	r1, [r4, #4]
 8008d16:	60a2      	str	r2, [r4, #8]
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"13,18,9,16,14,8,4");
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4a9f      	ldr	r2, [pc, #636]	; (8008fa0 <problem_fetch+0x78b8>)
 8008d22:	461d      	mov	r5, r3
 8008d24:	4614      	mov	r4, r2
 8008d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d28:	6028      	str	r0, [r5, #0]
 8008d2a:	6069      	str	r1, [r5, #4]
 8008d2c:	60aa      	str	r2, [r5, #8]
 8008d2e:	60eb      	str	r3, [r5, #12]
 8008d30:	8823      	ldrh	r3, [r4, #0]
 8008d32:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,e,d,d,d,d,s");
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008d3a:	4a9a      	ldr	r2, [pc, #616]	; (8008fa4 <problem_fetch+0x78bc>)
 8008d3c:	461c      	mov	r4, r3
 8008d3e:	4613      	mov	r3, r2
 8008d40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d42:	6020      	str	r0, [r4, #0]
 8008d44:	6061      	str	r1, [r4, #4]
 8008d46:	60a2      	str	r2, [r4, #8]
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	81a3      	strh	r3, [r4, #12]
			break;
 8008d4c:	f013 bbfc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 204 :
			strcpy(p->name,"SIDEPULL SIDEWALK");
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008d56:	4a94      	ldr	r2, [pc, #592]	; (8008fa8 <problem_fetch+0x78c0>)
 8008d58:	461d      	mov	r5, r3
 8008d5a:	4614      	mov	r4, r2
 8008d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d5e:	6028      	str	r0, [r5, #0]
 8008d60:	6069      	str	r1, [r5, #4]
 8008d62:	60aa      	str	r2, [r5, #8]
 8008d64:	60eb      	str	r3, [r5, #12]
 8008d66:	8823      	ldrh	r3, [r4, #0]
 8008d68:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008d70:	4a8e      	ldr	r2, [pc, #568]	; (8008fac <problem_fetch+0x78c4>)
 8008d72:	6810      	ldr	r0, [r2, #0]
 8008d74:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	220a      	movs	r2, #10
 8008d7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,H,F,I,G,I");
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	33a4      	adds	r3, #164	; 0xa4
 8008d80:	4a8b      	ldr	r2, [pc, #556]	; (8008fb0 <problem_fetch+0x78c8>)
 8008d82:	461d      	mov	r5, r3
 8008d84:	4614      	mov	r4, r2
 8008d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008d88:	6028      	str	r0, [r5, #0]
 8008d8a:	6069      	str	r1, [r5, #4]
 8008d8c:	60aa      	str	r2, [r5, #8]
 8008d8e:	60eb      	str	r3, [r5, #12]
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,6,8,9,10,11,14,15,18");
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3304      	adds	r3, #4
 8008d98:	4a86      	ldr	r2, [pc, #536]	; (8008fb4 <problem_fetch+0x78cc>)
 8008d9a:	461d      	mov	r5, r3
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008da0:	6028      	str	r0, [r5, #0]
 8008da2:	6069      	str	r1, [r5, #4]
 8008da4:	60aa      	str	r2, [r5, #8]
 8008da6:	60eb      	str	r3, [r5, #12]
 8008da8:	cc03      	ldmia	r4!, {r0, r1}
 8008daa:	6128      	str	r0, [r5, #16]
 8008dac:	6169      	str	r1, [r5, #20]
 8008dae:	7823      	ldrb	r3, [r4, #0]
 8008db0:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008db8:	4a7f      	ldr	r2, [pc, #508]	; (8008fb8 <problem_fetch+0x78d0>)
 8008dba:	461d      	mov	r5, r3
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dc0:	6028      	str	r0, [r5, #0]
 8008dc2:	6069      	str	r1, [r5, #4]
 8008dc4:	60aa      	str	r2, [r5, #8]
 8008dc6:	60eb      	str	r3, [r5, #12]
 8008dc8:	6820      	ldr	r0, [r4, #0]
 8008dca:	6128      	str	r0, [r5, #16]
			break;
 8008dcc:	f013 bbbc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 205 :
			strcpy(p->name,"DROPPIN SOAP");
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008dd6:	4a79      	ldr	r2, [pc, #484]	; (8008fbc <problem_fetch+0x78d4>)
 8008dd8:	461c      	mov	r4, r3
 8008dda:	4613      	mov	r3, r2
 8008ddc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dde:	6020      	str	r0, [r4, #0]
 8008de0:	6061      	str	r1, [r4, #4]
 8008de2:	60a2      	str	r2, [r4, #8]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008dee:	4a6a      	ldr	r2, [pc, #424]	; (8008f98 <problem_fetch+0x78b0>)
 8008df0:	6810      	ldr	r0, [r2, #0]
 8008df2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2205      	movs	r2, #5
 8008df8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,I");
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	33a4      	adds	r3, #164	; 0xa4
 8008dfe:	4970      	ldr	r1, [pc, #448]	; (8008fc0 <problem_fetch+0x78d8>)
 8008e00:	461a      	mov	r2, r3
 8008e02:	460b      	mov	r3, r1
 8008e04:	cb03      	ldmia	r3!, {r0, r1}
 8008e06:	6010      	str	r0, [r2, #0]
 8008e08:	6051      	str	r1, [r2, #4]
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,14,12,18");
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3304      	adds	r3, #4
 8008e12:	4a6c      	ldr	r2, [pc, #432]	; (8008fc4 <problem_fetch+0x78dc>)
 8008e14:	461c      	mov	r4, r3
 8008e16:	4613      	mov	r3, r2
 8008e18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e1a:	6020      	str	r0, [r4, #0]
 8008e1c:	6061      	str	r1, [r4, #4]
 8008e1e:	60a2      	str	r2, [r4, #8]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008e2a:	4967      	ldr	r1, [pc, #412]	; (8008fc8 <problem_fetch+0x78e0>)
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	460b      	mov	r3, r1
 8008e30:	cb03      	ldmia	r3!, {r0, r1}
 8008e32:	6010      	str	r0, [r2, #0]
 8008e34:	6051      	str	r1, [r2, #4]
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	8113      	strh	r3, [r2, #8]
			break;
 8008e3a:	f013 bb85 	b.w	801c548 <problem_fetch+0x1ae60>
		case 206 :
			strcpy(p->name,"BLACK #268162639");
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008e44:	4a61      	ldr	r2, [pc, #388]	; (8008fcc <problem_fetch+0x78e4>)
 8008e46:	461d      	mov	r5, r3
 8008e48:	4614      	mov	r4, r2
 8008e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e4c:	6028      	str	r0, [r5, #0]
 8008e4e:	6069      	str	r1, [r5, #4]
 8008e50:	60aa      	str	r2, [r5, #8]
 8008e52:	60eb      	str	r3, [r5, #12]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008e5e:	4a4e      	ldr	r2, [pc, #312]	; (8008f98 <problem_fetch+0x78b0>)
 8008e60:	6810      	ldr	r0, [r2, #0]
 8008e62:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2205      	movs	r2, #5
 8008e68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,H,J,D");
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	33a4      	adds	r3, #164	; 0xa4
 8008e6e:	4958      	ldr	r1, [pc, #352]	; (8008fd0 <problem_fetch+0x78e8>)
 8008e70:	461a      	mov	r2, r3
 8008e72:	460b      	mov	r3, r1
 8008e74:	cb03      	ldmia	r3!, {r0, r1}
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	6051      	str	r1, [r2, #4]
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4a54      	ldr	r2, [pc, #336]	; (8008fd4 <problem_fetch+0x78ec>)
 8008e84:	461c      	mov	r4, r3
 8008e86:	4613      	mov	r3, r2
 8008e88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008e8a:	6020      	str	r0, [r4, #0]
 8008e8c:	6061      	str	r1, [r4, #4]
 8008e8e:	60a2      	str	r2, [r4, #8]
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008e9a:	494b      	ldr	r1, [pc, #300]	; (8008fc8 <problem_fetch+0x78e0>)
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	cb03      	ldmia	r3!, {r0, r1}
 8008ea2:	6010      	str	r0, [r2, #0]
 8008ea4:	6051      	str	r1, [r2, #4]
 8008ea6:	881b      	ldrh	r3, [r3, #0]
 8008ea8:	8113      	strh	r3, [r2, #8]
			break;
 8008eaa:	f013 bb4d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 207 :
			strcpy(p->name,"MBT1RIGHT");
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008eb4:	4948      	ldr	r1, [pc, #288]	; (8008fd8 <problem_fetch+0x78f0>)
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	460b      	mov	r3, r1
 8008eba:	cb03      	ldmia	r3!, {r0, r1}
 8008ebc:	6010      	str	r0, [r2, #0]
 8008ebe:	6051      	str	r1, [r2, #4]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008eca:	4a44      	ldr	r2, [pc, #272]	; (8008fdc <problem_fetch+0x78f4>)
 8008ecc:	6810      	ldr	r0, [r2, #0]
 8008ece:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2205      	movs	r2, #5
 8008ed4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,D,I");
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	33a4      	adds	r3, #164	; 0xa4
 8008eda:	4941      	ldr	r1, [pc, #260]	; (8008fe0 <problem_fetch+0x78f8>)
 8008edc:	461a      	mov	r2, r3
 8008ede:	460b      	mov	r3, r1
 8008ee0:	cb03      	ldmia	r3!, {r0, r1}
 8008ee2:	6010      	str	r0, [r2, #0]
 8008ee4:	6051      	str	r1, [r2, #4]
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,14,11,18");
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4a3d      	ldr	r2, [pc, #244]	; (8008fe4 <problem_fetch+0x78fc>)
 8008ef0:	461c      	mov	r4, r3
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008ef6:	6020      	str	r0, [r4, #0]
 8008ef8:	6061      	str	r1, [r4, #4]
 8008efa:	60a2      	str	r2, [r4, #8]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008f06:	4930      	ldr	r1, [pc, #192]	; (8008fc8 <problem_fetch+0x78e0>)
 8008f08:	461a      	mov	r2, r3
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	cb03      	ldmia	r3!, {r0, r1}
 8008f0e:	6010      	str	r0, [r2, #0]
 8008f10:	6051      	str	r1, [r2, #4]
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	8113      	strh	r3, [r2, #8]
			break;
 8008f16:	f013 bb17 	b.w	801c548 <problem_fetch+0x1ae60>
		case 208 :
			strcpy(p->name,"BROKEN RECORD");
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8008f20:	4a31      	ldr	r2, [pc, #196]	; (8008fe8 <problem_fetch+0x7900>)
 8008f22:	461c      	mov	r4, r3
 8008f24:	4613      	mov	r3, r2
 8008f26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f28:	6020      	str	r0, [r4, #0]
 8008f2a:	6061      	str	r1, [r4, #4]
 8008f2c:	60a2      	str	r2, [r4, #8]
 8008f2e:	881b      	ldrh	r3, [r3, #0]
 8008f30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8008f38:	4a2c      	ldr	r2, [pc, #176]	; (8008fec <problem_fetch+0x7904>)
 8008f3a:	8811      	ldrh	r1, [r2, #0]
 8008f3c:	7892      	ldrb	r2, [r2, #2]
 8008f3e:	8019      	strh	r1, [r3, #0]
 8008f40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2207      	movs	r2, #7
 8008f46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A,D,A");
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	33a4      	adds	r3, #164	; 0xa4
 8008f4c:	4a28      	ldr	r2, [pc, #160]	; (8008ff0 <problem_fetch+0x7908>)
 8008f4e:	461c      	mov	r4, r3
 8008f50:	4613      	mov	r3, r2
 8008f52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f54:	6020      	str	r0, [r4, #0]
 8008f56:	6061      	str	r1, [r4, #4]
 8008f58:	60a2      	str	r2, [r4, #8]
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,12,14,15,18");
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3304      	adds	r3, #4
 8008f62:	4a24      	ldr	r2, [pc, #144]	; (8008ff4 <problem_fetch+0x790c>)
 8008f64:	461d      	mov	r5, r3
 8008f66:	4614      	mov	r4, r2
 8008f68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f6a:	6028      	str	r0, [r5, #0]
 8008f6c:	6069      	str	r1, [r5, #4]
 8008f6e:	60aa      	str	r2, [r5, #8]
 8008f70:	60eb      	str	r3, [r5, #12]
 8008f72:	8823      	ldrh	r3, [r4, #0]
 8008f74:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8008f7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <problem_fetch+0x7910>)
 8008f7e:	461c      	mov	r4, r3
 8008f80:	4613      	mov	r3, r2
 8008f82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008f84:	6020      	str	r0, [r4, #0]
 8008f86:	6061      	str	r1, [r4, #4]
 8008f88:	60a2      	str	r2, [r4, #8]
 8008f8a:	881b      	ldrh	r3, [r3, #0]
 8008f8c:	81a3      	strh	r3, [r4, #12]
			break;
 8008f8e:	f013 badb 	b.w	801c548 <problem_fetch+0x1ae60>
 8008f92:	bf00      	nop
 8008f94:	080261f4 	.word	0x080261f4
 8008f98:	08023afc 	.word	0x08023afc
 8008f9c:	080261fc 	.word	0x080261fc
 8008fa0:	0802620c 	.word	0x0802620c
 8008fa4:	08026220 	.word	0x08026220
 8008fa8:	08026230 	.word	0x08026230
 8008fac:	0802395c 	.word	0x0802395c
 8008fb0:	08026244 	.word	0x08026244
 8008fb4:	08026258 	.word	0x08026258
 8008fb8:	08024204 	.word	0x08024204
 8008fbc:	08026274 	.word	0x08026274
 8008fc0:	08026284 	.word	0x08026284
 8008fc4:	08026290 	.word	0x08026290
 8008fc8:	08023e28 	.word	0x08023e28
 8008fcc:	080262a0 	.word	0x080262a0
 8008fd0:	080262b4 	.word	0x080262b4
 8008fd4:	080262c0 	.word	0x080262c0
 8008fd8:	080262d0 	.word	0x080262d0
 8008fdc:	080239f4 	.word	0x080239f4
 8008fe0:	080262dc 	.word	0x080262dc
 8008fe4:	080262e8 	.word	0x080262e8
 8008fe8:	080262f8 	.word	0x080262f8
 8008fec:	08023a28 	.word	0x08023a28
 8008ff0:	08026308 	.word	0x08026308
 8008ff4:	08026318 	.word	0x08026318
 8008ff8:	08023ae4 	.word	0x08023ae4
		case 209 :
			strcpy(p->name,"BLACK 2");
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009002:	49ab      	ldr	r1, [pc, #684]	; (80092b0 <problem_fetch+0x7bc8>)
 8009004:	461a      	mov	r2, r3
 8009006:	460b      	mov	r3, r1
 8009008:	cb03      	ldmia	r3!, {r0, r1}
 800900a:	6010      	str	r0, [r2, #0]
 800900c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009014:	4aa7      	ldr	r2, [pc, #668]	; (80092b4 <problem_fetch+0x7bcc>)
 8009016:	6810      	ldr	r0, [r2, #0]
 8009018:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2207      	movs	r2, #7
 800901e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,E,G,D");
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	33a4      	adds	r3, #164	; 0xa4
 8009024:	4aa4      	ldr	r2, [pc, #656]	; (80092b8 <problem_fetch+0x7bd0>)
 8009026:	461c      	mov	r4, r3
 8009028:	4613      	mov	r3, r2
 800902a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800902c:	6020      	str	r0, [r4, #0]
 800902e:	6061      	str	r1, [r4, #4]
 8009030:	60a2      	str	r2, [r4, #8]
 8009032:	881b      	ldrh	r3, [r3, #0]
 8009034:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3304      	adds	r3, #4
 800903a:	4aa0      	ldr	r2, [pc, #640]	; (80092bc <problem_fetch+0x7bd4>)
 800903c:	461d      	mov	r5, r3
 800903e:	4614      	mov	r4, r2
 8009040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009042:	6028      	str	r0, [r5, #0]
 8009044:	6069      	str	r1, [r5, #4]
 8009046:	60aa      	str	r2, [r5, #8]
 8009048:	60eb      	str	r3, [r5, #12]
 800904a:	8823      	ldrh	r3, [r4, #0]
 800904c:	78a2      	ldrb	r2, [r4, #2]
 800904e:	822b      	strh	r3, [r5, #16]
 8009050:	4613      	mov	r3, r2
 8009052:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800905a:	4a99      	ldr	r2, [pc, #612]	; (80092c0 <problem_fetch+0x7bd8>)
 800905c:	461c      	mov	r4, r3
 800905e:	4613      	mov	r3, r2
 8009060:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	6061      	str	r1, [r4, #4]
 8009066:	60a2      	str	r2, [r4, #8]
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	81a3      	strh	r3, [r4, #12]
			break;
 800906c:	f013 ba6c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 210 :
			strcpy(p->name,"ROLLING PEAS");
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009076:	4a93      	ldr	r2, [pc, #588]	; (80092c4 <problem_fetch+0x7bdc>)
 8009078:	461c      	mov	r4, r3
 800907a:	4613      	mov	r3, r2
 800907c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800907e:	6020      	str	r0, [r4, #0]
 8009080:	6061      	str	r1, [r4, #4]
 8009082:	60a2      	str	r2, [r4, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800908e:	4a8e      	ldr	r2, [pc, #568]	; (80092c8 <problem_fetch+0x7be0>)
 8009090:	8811      	ldrh	r1, [r2, #0]
 8009092:	7892      	ldrb	r2, [r2, #2]
 8009094:	8019      	strh	r1, [r3, #0]
 8009096:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2206      	movs	r2, #6
 800909c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	33a4      	adds	r3, #164	; 0xa4
 80090a2:	4a8a      	ldr	r2, [pc, #552]	; (80092cc <problem_fetch+0x7be4>)
 80090a4:	461c      	mov	r4, r3
 80090a6:	4613      	mov	r3, r2
 80090a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	6061      	str	r1, [r4, #4]
 80090ae:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,15,18");
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3304      	adds	r3, #4
 80090b4:	4a86      	ldr	r2, [pc, #536]	; (80092d0 <problem_fetch+0x7be8>)
 80090b6:	461c      	mov	r4, r3
 80090b8:	4615      	mov	r5, r2
 80090ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090bc:	6020      	str	r0, [r4, #0]
 80090be:	6061      	str	r1, [r4, #4]
 80090c0:	60a2      	str	r2, [r4, #8]
 80090c2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80090ca:	4a82      	ldr	r2, [pc, #520]	; (80092d4 <problem_fetch+0x7bec>)
 80090cc:	461c      	mov	r4, r3
 80090ce:	4613      	mov	r3, r2
 80090d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090d2:	6020      	str	r0, [r4, #0]
 80090d4:	6061      	str	r1, [r4, #4]
 80090d6:	60a2      	str	r2, [r4, #8]
			break;
 80090d8:	f013 ba36 	b.w	801c548 <problem_fetch+0x1ae60>
		case 211 :
			strcpy(p->name,"SQUASHED PEAS");
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80090e2:	4a7d      	ldr	r2, [pc, #500]	; (80092d8 <problem_fetch+0x7bf0>)
 80090e4:	461c      	mov	r4, r3
 80090e6:	4613      	mov	r3, r2
 80090e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80090ea:	6020      	str	r0, [r4, #0]
 80090ec:	6061      	str	r1, [r4, #4]
 80090ee:	60a2      	str	r2, [r4, #8]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80090fa:	4a6e      	ldr	r2, [pc, #440]	; (80092b4 <problem_fetch+0x7bcc>)
 80090fc:	6810      	ldr	r0, [r2, #0]
 80090fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2208      	movs	r2, #8
 8009104:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,I,E,G,D");
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	33a4      	adds	r3, #164	; 0xa4
 800910a:	4a74      	ldr	r2, [pc, #464]	; (80092dc <problem_fetch+0x7bf4>)
 800910c:	461c      	mov	r4, r3
 800910e:	4615      	mov	r5, r2
 8009110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009112:	6020      	str	r0, [r4, #0]
 8009114:	6061      	str	r1, [r4, #4]
 8009116:	60a2      	str	r2, [r4, #8]
 8009118:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,12,14,14,17,18");
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	3304      	adds	r3, #4
 800911e:	4a70      	ldr	r2, [pc, #448]	; (80092e0 <problem_fetch+0x7bf8>)
 8009120:	461d      	mov	r5, r3
 8009122:	4614      	mov	r4, r2
 8009124:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009126:	6028      	str	r0, [r5, #0]
 8009128:	6069      	str	r1, [r5, #4]
 800912a:	60aa      	str	r2, [r5, #8]
 800912c:	60eb      	str	r3, [r5, #12]
 800912e:	6820      	ldr	r0, [r4, #0]
 8009130:	6128      	str	r0, [r5, #16]
 8009132:	88a3      	ldrh	r3, [r4, #4]
 8009134:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800913c:	4a69      	ldr	r2, [pc, #420]	; (80092e4 <problem_fetch+0x7bfc>)
 800913e:	461c      	mov	r4, r3
 8009140:	4615      	mov	r5, r2
 8009142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009144:	6020      	str	r0, [r4, #0]
 8009146:	6061      	str	r1, [r4, #4]
 8009148:	60a2      	str	r2, [r4, #8]
 800914a:	60e3      	str	r3, [r4, #12]
			break;
 800914c:	f013 b9fc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 212 :
			strcpy(p->name,"LAST PEA");
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009156:	4964      	ldr	r1, [pc, #400]	; (80092e8 <problem_fetch+0x7c00>)
 8009158:	461a      	mov	r2, r3
 800915a:	460b      	mov	r3, r1
 800915c:	cb03      	ldmia	r3!, {r0, r1}
 800915e:	6010      	str	r0, [r2, #0]
 8009160:	6051      	str	r1, [r2, #4]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800916c:	4a5f      	ldr	r2, [pc, #380]	; (80092ec <problem_fetch+0x7c04>)
 800916e:	8811      	ldrh	r1, [r2, #0]
 8009170:	7892      	ldrb	r2, [r2, #2]
 8009172:	8019      	strh	r1, [r3, #0]
 8009174:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2209      	movs	r2, #9
 800917a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,B,E,D,I,E,I");
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	33a4      	adds	r3, #164	; 0xa4
 8009180:	4a5b      	ldr	r2, [pc, #364]	; (80092f0 <problem_fetch+0x7c08>)
 8009182:	461d      	mov	r5, r3
 8009184:	4614      	mov	r4, r2
 8009186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009188:	6028      	str	r0, [r5, #0]
 800918a:	6069      	str	r1, [r5, #4]
 800918c:	60aa      	str	r2, [r5, #8]
 800918e:	60eb      	str	r3, [r5, #12]
 8009190:	8823      	ldrh	r3, [r4, #0]
 8009192:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,10,12,11,14,16,18");
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3304      	adds	r3, #4
 8009198:	4a56      	ldr	r2, [pc, #344]	; (80092f4 <problem_fetch+0x7c0c>)
 800919a:	461d      	mov	r5, r3
 800919c:	4614      	mov	r4, r2
 800919e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091a0:	6028      	str	r0, [r5, #0]
 80091a2:	6069      	str	r1, [r5, #4]
 80091a4:	60aa      	str	r2, [r5, #8]
 80091a6:	60eb      	str	r3, [r5, #12]
 80091a8:	cc03      	ldmia	r4!, {r0, r1}
 80091aa:	6128      	str	r0, [r5, #16]
 80091ac:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80091b4:	4a50      	ldr	r2, [pc, #320]	; (80092f8 <problem_fetch+0x7c10>)
 80091b6:	461d      	mov	r5, r3
 80091b8:	4614      	mov	r4, r2
 80091ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091bc:	6028      	str	r0, [r5, #0]
 80091be:	6069      	str	r1, [r5, #4]
 80091c0:	60aa      	str	r2, [r5, #8]
 80091c2:	60eb      	str	r3, [r5, #12]
 80091c4:	8823      	ldrh	r3, [r4, #0]
 80091c6:	822b      	strh	r3, [r5, #16]
			break;
 80091c8:	f013 b9be 	b.w	801c548 <problem_fetch+0x1ae60>
		case 213 :
			strcpy(p->name,"DIAGO");
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80091d2:	4a4a      	ldr	r2, [pc, #296]	; (80092fc <problem_fetch+0x7c14>)
 80091d4:	6810      	ldr	r0, [r2, #0]
 80091d6:	6018      	str	r0, [r3, #0]
 80091d8:	8892      	ldrh	r2, [r2, #4]
 80091da:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80091e2:	4a47      	ldr	r2, [pc, #284]	; (8009300 <problem_fetch+0x7c18>)
 80091e4:	6810      	ldr	r0, [r2, #0]
 80091e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2208      	movs	r2, #8
 80091ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,E,F,D,A");
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	33a4      	adds	r3, #164	; 0xa4
 80091f2:	4a44      	ldr	r2, [pc, #272]	; (8009304 <problem_fetch+0x7c1c>)
 80091f4:	461c      	mov	r4, r3
 80091f6:	4615      	mov	r5, r2
 80091f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091fa:	6020      	str	r0, [r4, #0]
 80091fc:	6061      	str	r1, [r4, #4]
 80091fe:	60a2      	str	r2, [r4, #8]
 8009200:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,11,15,18");
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	4a40      	ldr	r2, [pc, #256]	; (8009308 <problem_fetch+0x7c20>)
 8009208:	461d      	mov	r5, r3
 800920a:	4614      	mov	r4, r2
 800920c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800920e:	6028      	str	r0, [r5, #0]
 8009210:	6069      	str	r1, [r5, #4]
 8009212:	60aa      	str	r2, [r5, #8]
 8009214:	60eb      	str	r3, [r5, #12]
 8009216:	6820      	ldr	r0, [r4, #0]
 8009218:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009220:	4a30      	ldr	r2, [pc, #192]	; (80092e4 <problem_fetch+0x7bfc>)
 8009222:	461c      	mov	r4, r3
 8009224:	4615      	mov	r5, r2
 8009226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009228:	6020      	str	r0, [r4, #0]
 800922a:	6061      	str	r1, [r4, #4]
 800922c:	60a2      	str	r2, [r4, #8]
 800922e:	60e3      	str	r3, [r4, #12]
			break;
 8009230:	f013 b98a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 214 :
			strcpy(p->name,"IV");
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800923a:	4a34      	ldr	r2, [pc, #208]	; (800930c <problem_fetch+0x7c24>)
 800923c:	8811      	ldrh	r1, [r2, #0]
 800923e:	7892      	ldrb	r2, [r2, #2]
 8009240:	8019      	strh	r1, [r3, #0]
 8009242:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800924a:	4a31      	ldr	r2, [pc, #196]	; (8009310 <problem_fetch+0x7c28>)
 800924c:	6810      	ldr	r0, [r2, #0]
 800924e:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	220c      	movs	r2, #12
 8009254:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,E,A,A,B,A,D,C,J,C");
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	33a4      	adds	r3, #164	; 0xa4
 800925a:	4a2e      	ldr	r2, [pc, #184]	; (8009314 <problem_fetch+0x7c2c>)
 800925c:	461d      	mov	r5, r3
 800925e:	4614      	mov	r4, r2
 8009260:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009262:	6028      	str	r0, [r5, #0]
 8009264:	6069      	str	r1, [r5, #4]
 8009266:	60aa      	str	r2, [r5, #8]
 8009268:	60eb      	str	r3, [r5, #12]
 800926a:	cc03      	ldmia	r4!, {r0, r1}
 800926c:	6128      	str	r0, [r5, #16]
 800926e:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"8,8,6,9,9,14,15,18,11,13,5,5");
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3304      	adds	r3, #4
 8009274:	4a28      	ldr	r2, [pc, #160]	; (8009318 <problem_fetch+0x7c30>)
 8009276:	461d      	mov	r5, r3
 8009278:	4614      	mov	r4, r2
 800927a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800927c:	6028      	str	r0, [r5, #0]
 800927e:	6069      	str	r1, [r5, #4]
 8009280:	60aa      	str	r2, [r5, #8]
 8009282:	60eb      	str	r3, [r5, #12]
 8009284:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009286:	6128      	str	r0, [r5, #16]
 8009288:	6169      	str	r1, [r5, #20]
 800928a:	61aa      	str	r2, [r5, #24]
 800928c:	7823      	ldrb	r3, [r4, #0]
 800928e:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"d,d,s,d,d,d,d,e,d,d,s,d");
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009296:	4a21      	ldr	r2, [pc, #132]	; (800931c <problem_fetch+0x7c34>)
 8009298:	461d      	mov	r5, r3
 800929a:	4614      	mov	r4, r2
 800929c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800929e:	6028      	str	r0, [r5, #0]
 80092a0:	6069      	str	r1, [r5, #4]
 80092a2:	60aa      	str	r2, [r5, #8]
 80092a4:	60eb      	str	r3, [r5, #12]
 80092a6:	cc03      	ldmia	r4!, {r0, r1}
 80092a8:	6128      	str	r0, [r5, #16]
 80092aa:	6169      	str	r1, [r5, #20]
			break;
 80092ac:	f013 b94c 	b.w	801c548 <problem_fetch+0x1ae60>
 80092b0:	0802632c 	.word	0x0802632c
 80092b4:	080239f4 	.word	0x080239f4
 80092b8:	08026334 	.word	0x08026334
 80092bc:	08026344 	.word	0x08026344
 80092c0:	08023ae4 	.word	0x08023ae4
 80092c4:	08026358 	.word	0x08026358
 80092c8:	08023a28 	.word	0x08023a28
 80092cc:	08026368 	.word	0x08026368
 80092d0:	08026374 	.word	0x08026374
 80092d4:	0802393c 	.word	0x0802393c
 80092d8:	08026384 	.word	0x08026384
 80092dc:	08026394 	.word	0x08026394
 80092e0:	080263a4 	.word	0x080263a4
 80092e4:	08023a80 	.word	0x08023a80
 80092e8:	080263bc 	.word	0x080263bc
 80092ec:	0802391c 	.word	0x0802391c
 80092f0:	080263c8 	.word	0x080263c8
 80092f4:	080263dc 	.word	0x080263dc
 80092f8:	08024940 	.word	0x08024940
 80092fc:	080263f4 	.word	0x080263f4
 8009300:	08023a98 	.word	0x08023a98
 8009304:	080263fc 	.word	0x080263fc
 8009308:	0802640c 	.word	0x0802640c
 800930c:	08026420 	.word	0x08026420
 8009310:	0802395c 	.word	0x0802395c
 8009314:	08026424 	.word	0x08026424
 8009318:	0802643c 	.word	0x0802643c
 800931c:	0802645c 	.word	0x0802645c
		case 215 :
			strcpy(p->name,"III");
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009326:	4aba      	ldr	r2, [pc, #744]	; (8009610 <problem_fetch+0x7f28>)
 8009328:	6810      	ldr	r0, [r2, #0]
 800932a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009332:	4ab8      	ldr	r2, [pc, #736]	; (8009614 <problem_fetch+0x7f2c>)
 8009334:	6810      	ldr	r0, [r2, #0]
 8009336:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	220e      	movs	r2, #14
 800933c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,D,G,E,C,B,C,H,H,H,K,J,J");
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	33a4      	adds	r3, #164	; 0xa4
 8009342:	4ab5      	ldr	r2, [pc, #724]	; (8009618 <problem_fetch+0x7f30>)
 8009344:	461d      	mov	r5, r3
 8009346:	4614      	mov	r4, r2
 8009348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800934a:	6028      	str	r0, [r5, #0]
 800934c:	6069      	str	r1, [r5, #4]
 800934e:	60aa      	str	r2, [r5, #8]
 8009350:	60eb      	str	r3, [r5, #12]
 8009352:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009354:	6128      	str	r0, [r5, #16]
 8009356:	6169      	str	r1, [r5, #20]
 8009358:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"16,16,18,9,8,8,6,5,10,16,12,14,12,7");
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3304      	adds	r3, #4
 800935e:	4aaf      	ldr	r2, [pc, #700]	; (800961c <problem_fetch+0x7f34>)
 8009360:	4614      	mov	r4, r2
 8009362:	469c      	mov	ip, r3
 8009364:	f104 0e20 	add.w	lr, r4, #32
 8009368:	4665      	mov	r5, ip
 800936a:	4626      	mov	r6, r4
 800936c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800936e:	6028      	str	r0, [r5, #0]
 8009370:	6069      	str	r1, [r5, #4]
 8009372:	60aa      	str	r2, [r5, #8]
 8009374:	60eb      	str	r3, [r5, #12]
 8009376:	3410      	adds	r4, #16
 8009378:	f10c 0c10 	add.w	ip, ip, #16
 800937c:	4574      	cmp	r4, lr
 800937e:	d1f3      	bne.n	8009368 <problem_fetch+0x7c80>
 8009380:	4663      	mov	r3, ip
 8009382:	4622      	mov	r2, r4
 8009384:	6810      	ldr	r0, [r2, #0]
 8009386:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"d,d,e,d,d,d,s,s,d,d,d,d,d,d");
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800938e:	4aa4      	ldr	r2, [pc, #656]	; (8009620 <problem_fetch+0x7f38>)
 8009390:	461d      	mov	r5, r3
 8009392:	4614      	mov	r4, r2
 8009394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009396:	6028      	str	r0, [r5, #0]
 8009398:	6069      	str	r1, [r5, #4]
 800939a:	60aa      	str	r2, [r5, #8]
 800939c:	60eb      	str	r3, [r5, #12]
 800939e:	cc07      	ldmia	r4!, {r0, r1, r2}
 80093a0:	6128      	str	r0, [r5, #16]
 80093a2:	6169      	str	r1, [r5, #20]
 80093a4:	61aa      	str	r2, [r5, #24]
			break;
 80093a6:	f013 b8cf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 216 :
			strcpy(p->name,"I");
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80093b0:	499c      	ldr	r1, [pc, #624]	; (8009624 <problem_fetch+0x7f3c>)
 80093b2:	461a      	mov	r2, r3
 80093b4:	460b      	mov	r3, r1
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	8013      	strh	r3, [r2, #0]
			strcpy(p->grade,"6B+");
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80093c0:	4a94      	ldr	r2, [pc, #592]	; (8009614 <problem_fetch+0x7f2c>)
 80093c2:	6810      	ldr	r0, [r2, #0]
 80093c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	220e      	movs	r2, #14
 80093ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,G,G,J,J,I,I,E,H,E,D");
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	33a4      	adds	r3, #164	; 0xa4
 80093d0:	4a95      	ldr	r2, [pc, #596]	; (8009628 <problem_fetch+0x7f40>)
 80093d2:	461d      	mov	r5, r3
 80093d4:	4614      	mov	r4, r2
 80093d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80093d8:	6028      	str	r0, [r5, #0]
 80093da:	6069      	str	r1, [r5, #4]
 80093dc:	60aa      	str	r2, [r5, #8]
 80093de:	60eb      	str	r3, [r5, #12]
 80093e0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80093e2:	6128      	str	r0, [r5, #16]
 80093e4:	6169      	str	r1, [r5, #20]
 80093e6:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"14,14,12,12,4,9,7,5,7,9,8,5,16,18");
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4a8f      	ldr	r2, [pc, #572]	; (800962c <problem_fetch+0x7f44>)
 80093ee:	4614      	mov	r4, r2
 80093f0:	469c      	mov	ip, r3
 80093f2:	f104 0e20 	add.w	lr, r4, #32
 80093f6:	4665      	mov	r5, ip
 80093f8:	4626      	mov	r6, r4
 80093fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80093fc:	6028      	str	r0, [r5, #0]
 80093fe:	6069      	str	r1, [r5, #4]
 8009400:	60aa      	str	r2, [r5, #8]
 8009402:	60eb      	str	r3, [r5, #12]
 8009404:	3410      	adds	r4, #16
 8009406:	f10c 0c10 	add.w	ip, ip, #16
 800940a:	4574      	cmp	r4, lr
 800940c:	d1f3      	bne.n	80093f6 <problem_fetch+0x7d0e>
 800940e:	4662      	mov	r2, ip
 8009410:	4623      	mov	r3, r4
 8009412:	881b      	ldrh	r3, [r3, #0]
 8009414:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"d,d,d,d,s,d,d,d,d,d,d,d,d,e");
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800941c:	4a84      	ldr	r2, [pc, #528]	; (8009630 <problem_fetch+0x7f48>)
 800941e:	461d      	mov	r5, r3
 8009420:	4614      	mov	r4, r2
 8009422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009424:	6028      	str	r0, [r5, #0]
 8009426:	6069      	str	r1, [r5, #4]
 8009428:	60aa      	str	r2, [r5, #8]
 800942a:	60eb      	str	r3, [r5, #12]
 800942c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800942e:	6128      	str	r0, [r5, #16]
 8009430:	6169      	str	r1, [r5, #20]
 8009432:	61aa      	str	r2, [r5, #24]
			break;
 8009434:	f013 b888 	b.w	801c548 <problem_fetch+0x1ae60>
		case 217 :
			strcpy(p->name,"NEW");
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800943e:	4a7d      	ldr	r2, [pc, #500]	; (8009634 <problem_fetch+0x7f4c>)
 8009440:	6810      	ldr	r0, [r2, #0]
 8009442:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800944a:	4a72      	ldr	r2, [pc, #456]	; (8009614 <problem_fetch+0x7f2c>)
 800944c:	6810      	ldr	r0, [r2, #0]
 800944e:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	220e      	movs	r2, #14
 8009454:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I,H,G,H,I,H,H,I,I,I,J");
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	33a4      	adds	r3, #164	; 0xa4
 800945a:	4a77      	ldr	r2, [pc, #476]	; (8009638 <problem_fetch+0x7f50>)
 800945c:	461d      	mov	r5, r3
 800945e:	4614      	mov	r4, r2
 8009460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009462:	6028      	str	r0, [r5, #0]
 8009464:	6069      	str	r1, [r5, #4]
 8009466:	60aa      	str	r2, [r5, #8]
 8009468:	60eb      	str	r3, [r5, #12]
 800946a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800946c:	6128      	str	r0, [r5, #16]
 800946e:	6169      	str	r1, [r5, #20]
 8009470:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,6,7,8,9,10,10,12,13,14,15,18,16");
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3304      	adds	r3, #4
 8009476:	4a71      	ldr	r2, [pc, #452]	; (800963c <problem_fetch+0x7f54>)
 8009478:	4614      	mov	r4, r2
 800947a:	469c      	mov	ip, r3
 800947c:	f104 0e20 	add.w	lr, r4, #32
 8009480:	4665      	mov	r5, ip
 8009482:	4626      	mov	r6, r4
 8009484:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009486:	6028      	str	r0, [r5, #0]
 8009488:	6069      	str	r1, [r5, #4]
 800948a:	60aa      	str	r2, [r5, #8]
 800948c:	60eb      	str	r3, [r5, #12]
 800948e:	3410      	adds	r4, #16
 8009490:	f10c 0c10 	add.w	ip, ip, #16
 8009494:	4574      	cmp	r4, lr
 8009496:	d1f3      	bne.n	8009480 <problem_fetch+0x7d98>
 8009498:	4663      	mov	r3, ip
 800949a:	4622      	mov	r2, r4
 800949c:	6810      	ldr	r0, [r2, #0]
 800949e:	6018      	str	r0, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e,d");
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80094a6:	4a66      	ldr	r2, [pc, #408]	; (8009640 <problem_fetch+0x7f58>)
 80094a8:	461d      	mov	r5, r3
 80094aa:	4614      	mov	r4, r2
 80094ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094ae:	6028      	str	r0, [r5, #0]
 80094b0:	6069      	str	r1, [r5, #4]
 80094b2:	60aa      	str	r2, [r5, #8]
 80094b4:	60eb      	str	r3, [r5, #12]
 80094b6:	cc07      	ldmia	r4!, {r0, r1, r2}
 80094b8:	6128      	str	r0, [r5, #16]
 80094ba:	6169      	str	r1, [r5, #20]
 80094bc:	61aa      	str	r2, [r5, #24]
			break;
 80094be:	f013 b843 	b.w	801c548 <problem_fetch+0x1ae60>
		case 218 :
			strcpy(p->name,"THE BLACK");
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80094c8:	495e      	ldr	r1, [pc, #376]	; (8009644 <problem_fetch+0x7f5c>)
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	cb03      	ldmia	r3!, {r0, r1}
 80094d0:	6010      	str	r0, [r2, #0]
 80094d2:	6051      	str	r1, [r2, #4]
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80094de:	4a5a      	ldr	r2, [pc, #360]	; (8009648 <problem_fetch+0x7f60>)
 80094e0:	6810      	ldr	r0, [r2, #0]
 80094e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2207      	movs	r2, #7
 80094e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,C,H,K,I");
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	33a4      	adds	r3, #164	; 0xa4
 80094ee:	4a57      	ldr	r2, [pc, #348]	; (800964c <problem_fetch+0x7f64>)
 80094f0:	461c      	mov	r4, r3
 80094f2:	4613      	mov	r3, r2
 80094f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	6061      	str	r1, [r4, #4]
 80094fa:	60a2      	str	r2, [r4, #8]
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,13,16,18");
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4a52      	ldr	r2, [pc, #328]	; (8009650 <problem_fetch+0x7f68>)
 8009506:	461d      	mov	r5, r3
 8009508:	4614      	mov	r4, r2
 800950a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800950c:	6028      	str	r0, [r5, #0]
 800950e:	6069      	str	r1, [r5, #4]
 8009510:	60aa      	str	r2, [r5, #8]
 8009512:	60eb      	str	r3, [r5, #12]
 8009514:	8823      	ldrh	r3, [r4, #0]
 8009516:	78a2      	ldrb	r2, [r4, #2]
 8009518:	822b      	strh	r3, [r5, #16]
 800951a:	4613      	mov	r3, r2
 800951c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009524:	4a4b      	ldr	r2, [pc, #300]	; (8009654 <problem_fetch+0x7f6c>)
 8009526:	461c      	mov	r4, r3
 8009528:	4613      	mov	r3, r2
 800952a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800952c:	6020      	str	r0, [r4, #0]
 800952e:	6061      	str	r1, [r4, #4]
 8009530:	60a2      	str	r2, [r4, #8]
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	81a3      	strh	r3, [r4, #12]
			break;
 8009536:	f013 b807 	b.w	801c548 <problem_fetch+0x1ae60>
		case 219 :
			strcpy(p->name,"KLIK IT");
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009540:	4945      	ldr	r1, [pc, #276]	; (8009658 <problem_fetch+0x7f70>)
 8009542:	461a      	mov	r2, r3
 8009544:	460b      	mov	r3, r1
 8009546:	cb03      	ldmia	r3!, {r0, r1}
 8009548:	6010      	str	r0, [r2, #0]
 800954a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009552:	4a42      	ldr	r2, [pc, #264]	; (800965c <problem_fetch+0x7f74>)
 8009554:	8811      	ldrh	r1, [r2, #0]
 8009556:	7892      	ldrb	r2, [r2, #2]
 8009558:	8019      	strh	r1, [r3, #0]
 800955a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2205      	movs	r2, #5
 8009560:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,A,D");
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	33a4      	adds	r3, #164	; 0xa4
 8009566:	493e      	ldr	r1, [pc, #248]	; (8009660 <problem_fetch+0x7f78>)
 8009568:	461a      	mov	r2, r3
 800956a:	460b      	mov	r3, r1
 800956c:	cb03      	ldmia	r3!, {r0, r1}
 800956e:	6010      	str	r0, [r2, #0]
 8009570:	6051      	str	r1, [r2, #4]
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	4a3a      	ldr	r2, [pc, #232]	; (8009664 <problem_fetch+0x7f7c>)
 800957c:	461c      	mov	r4, r3
 800957e:	4613      	mov	r3, r2
 8009580:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009582:	6020      	str	r0, [r4, #0]
 8009584:	6061      	str	r1, [r4, #4]
 8009586:	60a2      	str	r2, [r4, #8]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009592:	4935      	ldr	r1, [pc, #212]	; (8009668 <problem_fetch+0x7f80>)
 8009594:	461a      	mov	r2, r3
 8009596:	460b      	mov	r3, r1
 8009598:	cb03      	ldmia	r3!, {r0, r1}
 800959a:	6010      	str	r0, [r2, #0]
 800959c:	6051      	str	r1, [r2, #4]
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	8113      	strh	r3, [r2, #8]
			break;
 80095a2:	f012 bfd1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 220 :
			strcpy(p->name,"SOFA 3");
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80095ac:	4a2f      	ldr	r2, [pc, #188]	; (800966c <problem_fetch+0x7f84>)
 80095ae:	6810      	ldr	r0, [r2, #0]
 80095b0:	6018      	str	r0, [r3, #0]
 80095b2:	8891      	ldrh	r1, [r2, #4]
 80095b4:	7992      	ldrb	r2, [r2, #6]
 80095b6:	8099      	strh	r1, [r3, #4]
 80095b8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80095c0:	4a2b      	ldr	r2, [pc, #172]	; (8009670 <problem_fetch+0x7f88>)
 80095c2:	6810      	ldr	r0, [r2, #0]
 80095c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2205      	movs	r2, #5
 80095ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,J,I");
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	33a4      	adds	r3, #164	; 0xa4
 80095d0:	4928      	ldr	r1, [pc, #160]	; (8009674 <problem_fetch+0x7f8c>)
 80095d2:	461a      	mov	r2, r3
 80095d4:	460b      	mov	r3, r1
 80095d6:	cb03      	ldmia	r3!, {r0, r1}
 80095d8:	6010      	str	r0, [r2, #0]
 80095da:	6051      	str	r1, [r2, #4]
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,12,13,18");
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3304      	adds	r3, #4
 80095e4:	4a24      	ldr	r2, [pc, #144]	; (8009678 <problem_fetch+0x7f90>)
 80095e6:	461c      	mov	r4, r3
 80095e8:	4613      	mov	r3, r2
 80095ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80095ec:	6020      	str	r0, [r4, #0]
 80095ee:	6061      	str	r1, [r4, #4]
 80095f0:	60a2      	str	r2, [r4, #8]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80095fc:	491a      	ldr	r1, [pc, #104]	; (8009668 <problem_fetch+0x7f80>)
 80095fe:	461a      	mov	r2, r3
 8009600:	460b      	mov	r3, r1
 8009602:	cb03      	ldmia	r3!, {r0, r1}
 8009604:	6010      	str	r0, [r2, #0]
 8009606:	6051      	str	r1, [r2, #4]
 8009608:	881b      	ldrh	r3, [r3, #0]
 800960a:	8113      	strh	r3, [r2, #8]
			break;
 800960c:	f012 bf9c 	b.w	801c548 <problem_fetch+0x1ae60>
 8009610:	08026474 	.word	0x08026474
 8009614:	0802395c 	.word	0x0802395c
 8009618:	08026478 	.word	0x08026478
 800961c:	08026494 	.word	0x08026494
 8009620:	080264b8 	.word	0x080264b8
 8009624:	080264d4 	.word	0x080264d4
 8009628:	080264d8 	.word	0x080264d8
 800962c:	080264f4 	.word	0x080264f4
 8009630:	08026518 	.word	0x08026518
 8009634:	08026534 	.word	0x08026534
 8009638:	08026538 	.word	0x08026538
 800963c:	08026554 	.word	0x08026554
 8009640:	08026578 	.word	0x08026578
 8009644:	08026594 	.word	0x08026594
 8009648:	08023afc 	.word	0x08023afc
 800964c:	080265a0 	.word	0x080265a0
 8009650:	08025670 	.word	0x08025670
 8009654:	08023ae4 	.word	0x08023ae4
 8009658:	080265b0 	.word	0x080265b0
 800965c:	08024190 	.word	0x08024190
 8009660:	080265b8 	.word	0x080265b8
 8009664:	08025090 	.word	0x08025090
 8009668:	08023e28 	.word	0x08023e28
 800966c:	080265c4 	.word	0x080265c4
 8009670:	08023a98 	.word	0x08023a98
 8009674:	080265cc 	.word	0x080265cc
 8009678:	080265d8 	.word	0x080265d8
		case 221 :
			strcpy(p->name,"ET");
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009682:	4aad      	ldr	r2, [pc, #692]	; (8009938 <problem_fetch+0x8250>)
 8009684:	8811      	ldrh	r1, [r2, #0]
 8009686:	7892      	ldrb	r2, [r2, #2]
 8009688:	8019      	strh	r1, [r3, #0]
 800968a:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009692:	4aaa      	ldr	r2, [pc, #680]	; (800993c <problem_fetch+0x8254>)
 8009694:	8811      	ldrh	r1, [r2, #0]
 8009696:	7892      	ldrb	r2, [r2, #2]
 8009698:	8019      	strh	r1, [r3, #0]
 800969a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2207      	movs	r2, #7
 80096a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,B,E,E,I");
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	33a4      	adds	r3, #164	; 0xa4
 80096a6:	4aa6      	ldr	r2, [pc, #664]	; (8009940 <problem_fetch+0x8258>)
 80096a8:	461c      	mov	r4, r3
 80096aa:	4613      	mov	r3, r2
 80096ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096ae:	6020      	str	r0, [r4, #0]
 80096b0:	6061      	str	r1, [r4, #4]
 80096b2:	60a2      	str	r2, [r4, #8]
 80096b4:	881b      	ldrh	r3, [r3, #0]
 80096b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	3304      	adds	r3, #4
 80096bc:	4aa1      	ldr	r2, [pc, #644]	; (8009944 <problem_fetch+0x825c>)
 80096be:	461d      	mov	r5, r3
 80096c0:	4614      	mov	r4, r2
 80096c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80096c4:	6028      	str	r0, [r5, #0]
 80096c6:	6069      	str	r1, [r5, #4]
 80096c8:	60aa      	str	r2, [r5, #8]
 80096ca:	60eb      	str	r3, [r5, #12]
 80096cc:	8823      	ldrh	r3, [r4, #0]
 80096ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80096d6:	4a9c      	ldr	r2, [pc, #624]	; (8009948 <problem_fetch+0x8260>)
 80096d8:	461c      	mov	r4, r3
 80096da:	4613      	mov	r3, r2
 80096dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80096de:	6020      	str	r0, [r4, #0]
 80096e0:	6061      	str	r1, [r4, #4]
 80096e2:	60a2      	str	r2, [r4, #8]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	81a3      	strh	r3, [r4, #12]
			break;
 80096e8:	f012 bf2e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 222 :
			strcpy(p->name,"THE WALL 1");
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80096f2:	4996      	ldr	r1, [pc, #600]	; (800994c <problem_fetch+0x8264>)
 80096f4:	461a      	mov	r2, r3
 80096f6:	460b      	mov	r3, r1
 80096f8:	cb03      	ldmia	r3!, {r0, r1}
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	6051      	str	r1, [r2, #4]
 80096fe:	8819      	ldrh	r1, [r3, #0]
 8009700:	789b      	ldrb	r3, [r3, #2]
 8009702:	8111      	strh	r1, [r2, #8]
 8009704:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800970c:	4a8b      	ldr	r2, [pc, #556]	; (800993c <problem_fetch+0x8254>)
 800970e:	8811      	ldrh	r1, [r2, #0]
 8009710:	7892      	ldrb	r2, [r2, #2]
 8009712:	8019      	strh	r1, [r3, #0]
 8009714:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2209      	movs	r2, #9
 800971a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,F,F,I,E,I");
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	33a4      	adds	r3, #164	; 0xa4
 8009720:	4a8b      	ldr	r2, [pc, #556]	; (8009950 <problem_fetch+0x8268>)
 8009722:	461d      	mov	r5, r3
 8009724:	4614      	mov	r4, r2
 8009726:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009728:	6028      	str	r0, [r5, #0]
 800972a:	6069      	str	r1, [r5, #4]
 800972c:	60aa      	str	r2, [r5, #8]
 800972e:	60eb      	str	r3, [r5, #12]
 8009730:	8823      	ldrh	r3, [r4, #0]
 8009732:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,10,11,13,14,16,18");
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	4a86      	ldr	r2, [pc, #536]	; (8009954 <problem_fetch+0x826c>)
 800973a:	461d      	mov	r5, r3
 800973c:	4614      	mov	r4, r2
 800973e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009740:	6028      	str	r0, [r5, #0]
 8009742:	6069      	str	r1, [r5, #4]
 8009744:	60aa      	str	r2, [r5, #8]
 8009746:	60eb      	str	r3, [r5, #12]
 8009748:	cc03      	ldmia	r4!, {r0, r1}
 800974a:	6128      	str	r0, [r5, #16]
 800974c:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009754:	4a80      	ldr	r2, [pc, #512]	; (8009958 <problem_fetch+0x8270>)
 8009756:	461d      	mov	r5, r3
 8009758:	4614      	mov	r4, r2
 800975a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800975c:	6028      	str	r0, [r5, #0]
 800975e:	6069      	str	r1, [r5, #4]
 8009760:	60aa      	str	r2, [r5, #8]
 8009762:	60eb      	str	r3, [r5, #12]
 8009764:	8823      	ldrh	r3, [r4, #0]
 8009766:	822b      	strh	r3, [r5, #16]
			break;
 8009768:	f012 beee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 223 :
			strcpy(p->name,"OACHKAZL");
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009772:	497a      	ldr	r1, [pc, #488]	; (800995c <problem_fetch+0x8274>)
 8009774:	461a      	mov	r2, r3
 8009776:	460b      	mov	r3, r1
 8009778:	cb03      	ldmia	r3!, {r0, r1}
 800977a:	6010      	str	r0, [r2, #0]
 800977c:	6051      	str	r1, [r2, #4]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009788:	4a75      	ldr	r2, [pc, #468]	; (8009960 <problem_fetch+0x8278>)
 800978a:	6810      	ldr	r0, [r2, #0]
 800978c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2208      	movs	r2, #8
 8009792:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,D,D,C");
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	33a4      	adds	r3, #164	; 0xa4
 8009798:	4a72      	ldr	r2, [pc, #456]	; (8009964 <problem_fetch+0x827c>)
 800979a:	461c      	mov	r4, r3
 800979c:	4615      	mov	r5, r2
 800979e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097a0:	6020      	str	r0, [r4, #0]
 80097a2:	6061      	str	r1, [r4, #4]
 80097a4:	60a2      	str	r2, [r4, #8]
 80097a6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,16,18,15,8");
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4a6e      	ldr	r2, [pc, #440]	; (8009968 <problem_fetch+0x8280>)
 80097ae:	461d      	mov	r5, r3
 80097b0:	4614      	mov	r4, r2
 80097b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097b4:	6028      	str	r0, [r5, #0]
 80097b6:	6069      	str	r1, [r5, #4]
 80097b8:	60aa      	str	r2, [r5, #8]
 80097ba:	60eb      	str	r3, [r5, #12]
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e,d,d");
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80097c6:	4a69      	ldr	r2, [pc, #420]	; (800996c <problem_fetch+0x8284>)
 80097c8:	461c      	mov	r4, r3
 80097ca:	4615      	mov	r5, r2
 80097cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80097ce:	6020      	str	r0, [r4, #0]
 80097d0:	6061      	str	r1, [r4, #4]
 80097d2:	60a2      	str	r2, [r4, #8]
 80097d4:	60e3      	str	r3, [r4, #12]
			break;
 80097d6:	f012 beb7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 224 :
			strcpy(p->name,"LA BANDA DEL PATIO");
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80097e0:	4a63      	ldr	r2, [pc, #396]	; (8009970 <problem_fetch+0x8288>)
 80097e2:	461d      	mov	r5, r3
 80097e4:	4614      	mov	r4, r2
 80097e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097e8:	6028      	str	r0, [r5, #0]
 80097ea:	6069      	str	r1, [r5, #4]
 80097ec:	60aa      	str	r2, [r5, #8]
 80097ee:	60eb      	str	r3, [r5, #12]
 80097f0:	8823      	ldrh	r3, [r4, #0]
 80097f2:	78a2      	ldrb	r2, [r4, #2]
 80097f4:	822b      	strh	r3, [r5, #16]
 80097f6:	4613      	mov	r3, r2
 80097f8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009800:	4a5c      	ldr	r2, [pc, #368]	; (8009974 <problem_fetch+0x828c>)
 8009802:	6810      	ldr	r0, [r2, #0]
 8009804:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2208      	movs	r2, #8
 800980a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,C,B,E,A,D");
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	33a4      	adds	r3, #164	; 0xa4
 8009810:	4a59      	ldr	r2, [pc, #356]	; (8009978 <problem_fetch+0x8290>)
 8009812:	461c      	mov	r4, r3
 8009814:	4615      	mov	r5, r2
 8009816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009818:	6020      	str	r0, [r4, #0]
 800981a:	6061      	str	r1, [r4, #4]
 800981c:	60a2      	str	r2, [r4, #8]
 800981e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,8,12,12,14,18");
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3304      	adds	r3, #4
 8009824:	4a55      	ldr	r2, [pc, #340]	; (800997c <problem_fetch+0x8294>)
 8009826:	461d      	mov	r5, r3
 8009828:	4614      	mov	r4, r2
 800982a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800982c:	6028      	str	r0, [r5, #0]
 800982e:	6069      	str	r1, [r5, #4]
 8009830:	60aa      	str	r2, [r5, #8]
 8009832:	60eb      	str	r3, [r5, #12]
 8009834:	6820      	ldr	r0, [r4, #0]
 8009836:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800983e:	4a50      	ldr	r2, [pc, #320]	; (8009980 <problem_fetch+0x8298>)
 8009840:	461c      	mov	r4, r3
 8009842:	4615      	mov	r5, r2
 8009844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009846:	6020      	str	r0, [r4, #0]
 8009848:	6061      	str	r1, [r4, #4]
 800984a:	60a2      	str	r2, [r4, #8]
 800984c:	60e3      	str	r3, [r4, #12]
			break;
 800984e:	f012 be7b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 225 :
			strcpy(p->name,"GLUTAMATO MONOSODICO");
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009858:	4a4a      	ldr	r2, [pc, #296]	; (8009984 <problem_fetch+0x829c>)
 800985a:	461d      	mov	r5, r3
 800985c:	4614      	mov	r4, r2
 800985e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009860:	6028      	str	r0, [r5, #0]
 8009862:	6069      	str	r1, [r5, #4]
 8009864:	60aa      	str	r2, [r5, #8]
 8009866:	60eb      	str	r3, [r5, #12]
 8009868:	6820      	ldr	r0, [r4, #0]
 800986a:	6128      	str	r0, [r5, #16]
 800986c:	7923      	ldrb	r3, [r4, #4]
 800986e:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009876:	4a3f      	ldr	r2, [pc, #252]	; (8009974 <problem_fetch+0x828c>)
 8009878:	6810      	ldr	r0, [r2, #0]
 800987a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2207      	movs	r2, #7
 8009880:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,B,E,D");
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	33a4      	adds	r3, #164	; 0xa4
 8009886:	4a40      	ldr	r2, [pc, #256]	; (8009988 <problem_fetch+0x82a0>)
 8009888:	461c      	mov	r4, r3
 800988a:	4613      	mov	r3, r2
 800988c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800988e:	6020      	str	r0, [r4, #0]
 8009890:	6061      	str	r1, [r4, #4]
 8009892:	60a2      	str	r2, [r4, #8]
 8009894:	881b      	ldrh	r3, [r3, #0]
 8009896:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,9,8,12,12,18");
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3304      	adds	r3, #4
 800989c:	4a3b      	ldr	r2, [pc, #236]	; (800998c <problem_fetch+0x82a4>)
 800989e:	461d      	mov	r5, r3
 80098a0:	4614      	mov	r4, r2
 80098a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098a4:	6028      	str	r0, [r5, #0]
 80098a6:	6069      	str	r1, [r5, #4]
 80098a8:	60aa      	str	r2, [r5, #8]
 80098aa:	60eb      	str	r3, [r5, #12]
 80098ac:	7823      	ldrb	r3, [r4, #0]
 80098ae:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80098b6:	4a36      	ldr	r2, [pc, #216]	; (8009990 <problem_fetch+0x82a8>)
 80098b8:	461c      	mov	r4, r3
 80098ba:	4613      	mov	r3, r2
 80098bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80098be:	6020      	str	r0, [r4, #0]
 80098c0:	6061      	str	r1, [r4, #4]
 80098c2:	60a2      	str	r2, [r4, #8]
 80098c4:	881b      	ldrh	r3, [r3, #0]
 80098c6:	81a3      	strh	r3, [r4, #12]
			break;
 80098c8:	f012 be3e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 226 :
			strcpy(p->name,"LOST DAY");
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80098d2:	4930      	ldr	r1, [pc, #192]	; (8009994 <problem_fetch+0x82ac>)
 80098d4:	461a      	mov	r2, r3
 80098d6:	460b      	mov	r3, r1
 80098d8:	cb03      	ldmia	r3!, {r0, r1}
 80098da:	6010      	str	r0, [r2, #0]
 80098dc:	6051      	str	r1, [r2, #4]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80098e8:	4a14      	ldr	r2, [pc, #80]	; (800993c <problem_fetch+0x8254>)
 80098ea:	8811      	ldrh	r1, [r2, #0]
 80098ec:	7892      	ldrb	r2, [r2, #2]
 80098ee:	8019      	strh	r1, [r3, #0]
 80098f0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2206      	movs	r2, #6
 80098f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,D");
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	33a4      	adds	r3, #164	; 0xa4
 80098fc:	4a26      	ldr	r2, [pc, #152]	; (8009998 <problem_fetch+0x82b0>)
 80098fe:	461c      	mov	r4, r3
 8009900:	4613      	mov	r3, r2
 8009902:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009904:	6020      	str	r0, [r4, #0]
 8009906:	6061      	str	r1, [r4, #4]
 8009908:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	3304      	adds	r3, #4
 800990e:	4a23      	ldr	r2, [pc, #140]	; (800999c <problem_fetch+0x82b4>)
 8009910:	461c      	mov	r4, r3
 8009912:	4615      	mov	r5, r2
 8009914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009916:	6020      	str	r0, [r4, #0]
 8009918:	6061      	str	r1, [r4, #4]
 800991a:	60a2      	str	r2, [r4, #8]
 800991c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009924:	4a1e      	ldr	r2, [pc, #120]	; (80099a0 <problem_fetch+0x82b8>)
 8009926:	461c      	mov	r4, r3
 8009928:	4613      	mov	r3, r2
 800992a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800992c:	6020      	str	r0, [r4, #0]
 800992e:	6061      	str	r1, [r4, #4]
 8009930:	60a2      	str	r2, [r4, #8]
			break;
 8009932:	f012 be09 	b.w	801c548 <problem_fetch+0x1ae60>
 8009936:	bf00      	nop
 8009938:	080265e8 	.word	0x080265e8
 800993c:	08023a28 	.word	0x08023a28
 8009940:	080265ec 	.word	0x080265ec
 8009944:	080265fc 	.word	0x080265fc
 8009948:	08023ae4 	.word	0x08023ae4
 800994c:	08026610 	.word	0x08026610
 8009950:	0802661c 	.word	0x0802661c
 8009954:	08026630 	.word	0x08026630
 8009958:	08024940 	.word	0x08024940
 800995c:	08026648 	.word	0x08026648
 8009960:	08023afc 	.word	0x08023afc
 8009964:	08026654 	.word	0x08026654
 8009968:	08026664 	.word	0x08026664
 800996c:	08026678 	.word	0x08026678
 8009970:	08026688 	.word	0x08026688
 8009974:	0802395c 	.word	0x0802395c
 8009978:	0802669c 	.word	0x0802669c
 800997c:	080266ac 	.word	0x080266ac
 8009980:	08023a80 	.word	0x08023a80
 8009984:	080266c0 	.word	0x080266c0
 8009988:	080266d8 	.word	0x080266d8
 800998c:	080266e8 	.word	0x080266e8
 8009990:	080239d4 	.word	0x080239d4
 8009994:	080266fc 	.word	0x080266fc
 8009998:	08026708 	.word	0x08026708
 800999c:	08026714 	.word	0x08026714
 80099a0:	0802393c 	.word	0x0802393c
		case 227 :
			strcpy(p->name,"FOR BEGINNERS - 3");
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80099aa:	4aab      	ldr	r2, [pc, #684]	; (8009c58 <problem_fetch+0x8570>)
 80099ac:	461d      	mov	r5, r3
 80099ae:	4614      	mov	r4, r2
 80099b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099b2:	6028      	str	r0, [r5, #0]
 80099b4:	6069      	str	r1, [r5, #4]
 80099b6:	60aa      	str	r2, [r5, #8]
 80099b8:	60eb      	str	r3, [r5, #12]
 80099ba:	8823      	ldrh	r3, [r4, #0]
 80099bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80099c4:	4aa5      	ldr	r2, [pc, #660]	; (8009c5c <problem_fetch+0x8574>)
 80099c6:	6810      	ldr	r0, [r2, #0]
 80099c8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2208      	movs	r2, #8
 80099ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,F,I,H,E,D");
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	33a4      	adds	r3, #164	; 0xa4
 80099d4:	4aa2      	ldr	r2, [pc, #648]	; (8009c60 <problem_fetch+0x8578>)
 80099d6:	461c      	mov	r4, r3
 80099d8:	4615      	mov	r5, r2
 80099da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099dc:	6020      	str	r0, [r4, #0]
 80099de:	6061      	str	r1, [r4, #4]
 80099e0:	60a2      	str	r2, [r4, #8]
 80099e2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,4,10,13,14,12,16,18");
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	3304      	adds	r3, #4
 80099e8:	4a9e      	ldr	r2, [pc, #632]	; (8009c64 <problem_fetch+0x857c>)
 80099ea:	461d      	mov	r5, r3
 80099ec:	4614      	mov	r4, r2
 80099ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099f0:	6028      	str	r0, [r5, #0]
 80099f2:	6069      	str	r1, [r5, #4]
 80099f4:	60aa      	str	r2, [r5, #8]
 80099f6:	60eb      	str	r3, [r5, #12]
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	6128      	str	r0, [r5, #16]
 80099fc:	88a3      	ldrh	r3, [r4, #4]
 80099fe:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009a06:	4a98      	ldr	r2, [pc, #608]	; (8009c68 <problem_fetch+0x8580>)
 8009a08:	461c      	mov	r4, r3
 8009a0a:	4615      	mov	r5, r2
 8009a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a0e:	6020      	str	r0, [r4, #0]
 8009a10:	6061      	str	r1, [r4, #4]
 8009a12:	60a2      	str	r2, [r4, #8]
 8009a14:	60e3      	str	r3, [r4, #12]
			break;
 8009a16:	f012 bd97 	b.w	801c548 <problem_fetch+0x1ae60>
		case 228 :
			strcpy(p->name,"JUDGEMENT RAINS");
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a20:	4a92      	ldr	r2, [pc, #584]	; (8009c6c <problem_fetch+0x8584>)
 8009a22:	461c      	mov	r4, r3
 8009a24:	4615      	mov	r5, r2
 8009a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a28:	6020      	str	r0, [r4, #0]
 8009a2a:	6061      	str	r1, [r4, #4]
 8009a2c:	60a2      	str	r2, [r4, #8]
 8009a2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009a36:	4a8e      	ldr	r2, [pc, #568]	; (8009c70 <problem_fetch+0x8588>)
 8009a38:	6810      	ldr	r0, [r2, #0]
 8009a3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2207      	movs	r2, #7
 8009a40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,H,K,I");
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	33a4      	adds	r3, #164	; 0xa4
 8009a46:	4a8b      	ldr	r2, [pc, #556]	; (8009c74 <problem_fetch+0x858c>)
 8009a48:	461c      	mov	r4, r3
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a4e:	6020      	str	r0, [r4, #0]
 8009a50:	6061      	str	r1, [r4, #4]
 8009a52:	60a2      	str	r2, [r4, #8]
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,18");
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	4a86      	ldr	r2, [pc, #536]	; (8009c78 <problem_fetch+0x8590>)
 8009a5e:	461d      	mov	r5, r3
 8009a60:	4614      	mov	r4, r2
 8009a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a64:	6028      	str	r0, [r5, #0]
 8009a66:	6069      	str	r1, [r5, #4]
 8009a68:	60aa      	str	r2, [r5, #8]
 8009a6a:	60eb      	str	r3, [r5, #12]
 8009a6c:	8823      	ldrh	r3, [r4, #0]
 8009a6e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009a76:	4a81      	ldr	r2, [pc, #516]	; (8009c7c <problem_fetch+0x8594>)
 8009a78:	461c      	mov	r4, r3
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	6061      	str	r1, [r4, #4]
 8009a82:	60a2      	str	r2, [r4, #8]
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	81a3      	strh	r3, [r4, #12]
			break;
 8009a88:	f012 bd5e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 229 :
			strcpy(p->name,"LEAVE OR FOLLOW");
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009a92:	4a7b      	ldr	r2, [pc, #492]	; (8009c80 <problem_fetch+0x8598>)
 8009a94:	461c      	mov	r4, r3
 8009a96:	4615      	mov	r5, r2
 8009a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a9a:	6020      	str	r0, [r4, #0]
 8009a9c:	6061      	str	r1, [r4, #4]
 8009a9e:	60a2      	str	r2, [r4, #8]
 8009aa0:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009aa8:	4a76      	ldr	r2, [pc, #472]	; (8009c84 <problem_fetch+0x859c>)
 8009aaa:	8811      	ldrh	r1, [r2, #0]
 8009aac:	7892      	ldrb	r2, [r2, #2]
 8009aae:	8019      	strh	r1, [r3, #0]
 8009ab0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,I");
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	33a4      	adds	r3, #164	; 0xa4
 8009abc:	4a72      	ldr	r2, [pc, #456]	; (8009c88 <problem_fetch+0x85a0>)
 8009abe:	461c      	mov	r4, r3
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ac4:	6020      	str	r0, [r4, #0]
 8009ac6:	6061      	str	r1, [r4, #4]
 8009ac8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,15,18");
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4a6f      	ldr	r2, [pc, #444]	; (8009c8c <problem_fetch+0x85a4>)
 8009ad0:	461c      	mov	r4, r3
 8009ad2:	4615      	mov	r5, r2
 8009ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ad6:	6020      	str	r0, [r4, #0]
 8009ad8:	6061      	str	r1, [r4, #4]
 8009ada:	60a2      	str	r2, [r4, #8]
 8009adc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009ae4:	4a6a      	ldr	r2, [pc, #424]	; (8009c90 <problem_fetch+0x85a8>)
 8009ae6:	461c      	mov	r4, r3
 8009ae8:	4613      	mov	r3, r2
 8009aea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009aec:	6020      	str	r0, [r4, #0]
 8009aee:	6061      	str	r1, [r4, #4]
 8009af0:	60a2      	str	r2, [r4, #8]
			break;
 8009af2:	f012 bd29 	b.w	801c548 <problem_fetch+0x1ae60>
		case 230 :
			strcpy(p->name,"EASY GO");
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009afc:	4965      	ldr	r1, [pc, #404]	; (8009c94 <problem_fetch+0x85ac>)
 8009afe:	461a      	mov	r2, r3
 8009b00:	460b      	mov	r3, r1
 8009b02:	cb03      	ldmia	r3!, {r0, r1}
 8009b04:	6010      	str	r0, [r2, #0]
 8009b06:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b0e:	4a53      	ldr	r2, [pc, #332]	; (8009c5c <problem_fetch+0x8574>)
 8009b10:	6810      	ldr	r0, [r2, #0]
 8009b12:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2207      	movs	r2, #7
 8009b18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,C,D");
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	33a4      	adds	r3, #164	; 0xa4
 8009b1e:	4a5e      	ldr	r2, [pc, #376]	; (8009c98 <problem_fetch+0x85b0>)
 8009b20:	461c      	mov	r4, r3
 8009b22:	4613      	mov	r3, r2
 8009b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b26:	6020      	str	r0, [r4, #0]
 8009b28:	6061      	str	r1, [r4, #4]
 8009b2a:	60a2      	str	r2, [r4, #8]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,8,11,13,18");
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4a59      	ldr	r2, [pc, #356]	; (8009c9c <problem_fetch+0x85b4>)
 8009b36:	461d      	mov	r5, r3
 8009b38:	4614      	mov	r4, r2
 8009b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b3c:	6028      	str	r0, [r5, #0]
 8009b3e:	6069      	str	r1, [r5, #4]
 8009b40:	60aa      	str	r2, [r5, #8]
 8009b42:	60eb      	str	r3, [r5, #12]
 8009b44:	7823      	ldrb	r3, [r4, #0]
 8009b46:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009b4e:	4a4b      	ldr	r2, [pc, #300]	; (8009c7c <problem_fetch+0x8594>)
 8009b50:	461c      	mov	r4, r3
 8009b52:	4613      	mov	r3, r2
 8009b54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009b56:	6020      	str	r0, [r4, #0]
 8009b58:	6061      	str	r1, [r4, #4]
 8009b5a:	60a2      	str	r2, [r4, #8]
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	81a3      	strh	r3, [r4, #12]
			break;
 8009b60:	f012 bcf2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 231 :
			strcpy(p->name,"UPRISING");
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b6a:	494d      	ldr	r1, [pc, #308]	; (8009ca0 <problem_fetch+0x85b8>)
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	460b      	mov	r3, r1
 8009b70:	cb03      	ldmia	r3!, {r0, r1}
 8009b72:	6010      	str	r0, [r2, #0]
 8009b74:	6051      	str	r1, [r2, #4]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009b80:	4a36      	ldr	r2, [pc, #216]	; (8009c5c <problem_fetch+0x8574>)
 8009b82:	6810      	ldr	r0, [r2, #0]
 8009b84:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2209      	movs	r2, #9
 8009b8a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,E,F,G,H,I");
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	33a4      	adds	r3, #164	; 0xa4
 8009b90:	4a44      	ldr	r2, [pc, #272]	; (8009ca4 <problem_fetch+0x85bc>)
 8009b92:	461d      	mov	r5, r3
 8009b94:	4614      	mov	r4, r2
 8009b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b98:	6028      	str	r0, [r5, #0]
 8009b9a:	6069      	str	r1, [r5, #4]
 8009b9c:	60aa      	str	r2, [r5, #8]
 8009b9e:	60eb      	str	r3, [r5, #12]
 8009ba0:	8823      	ldrh	r3, [r4, #0]
 8009ba2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,9,12,13,14,16,18");
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	4a3f      	ldr	r2, [pc, #252]	; (8009ca8 <problem_fetch+0x85c0>)
 8009baa:	461c      	mov	r4, r3
 8009bac:	4615      	mov	r5, r2
 8009bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bb0:	6020      	str	r0, [r4, #0]
 8009bb2:	6061      	str	r1, [r4, #4]
 8009bb4:	60a2      	str	r2, [r4, #8]
 8009bb6:	60e3      	str	r3, [r4, #12]
 8009bb8:	6828      	ldr	r0, [r5, #0]
 8009bba:	6120      	str	r0, [r4, #16]
 8009bbc:	88ab      	ldrh	r3, [r5, #4]
 8009bbe:	79aa      	ldrb	r2, [r5, #6]
 8009bc0:	82a3      	strh	r3, [r4, #20]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009bcc:	4a37      	ldr	r2, [pc, #220]	; (8009cac <problem_fetch+0x85c4>)
 8009bce:	461d      	mov	r5, r3
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bd4:	6028      	str	r0, [r5, #0]
 8009bd6:	6069      	str	r1, [r5, #4]
 8009bd8:	60aa      	str	r2, [r5, #8]
 8009bda:	60eb      	str	r3, [r5, #12]
 8009bdc:	8823      	ldrh	r3, [r4, #0]
 8009bde:	822b      	strh	r3, [r5, #16]
			break;
 8009be0:	f012 bcb2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 232 :
			strcpy(p->name,"SILENT MEDIA");
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009bea:	4a31      	ldr	r2, [pc, #196]	; (8009cb0 <problem_fetch+0x85c8>)
 8009bec:	461c      	mov	r4, r3
 8009bee:	4613      	mov	r3, r2
 8009bf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	6061      	str	r1, [r4, #4]
 8009bf6:	60a2      	str	r2, [r4, #8]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009c02:	4a16      	ldr	r2, [pc, #88]	; (8009c5c <problem_fetch+0x8574>)
 8009c04:	6810      	ldr	r0, [r2, #0]
 8009c06:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2207      	movs	r2, #7
 8009c0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,G,I,H,I");
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	33a4      	adds	r3, #164	; 0xa4
 8009c12:	4a28      	ldr	r2, [pc, #160]	; (8009cb4 <problem_fetch+0x85cc>)
 8009c14:	461c      	mov	r4, r3
 8009c16:	4613      	mov	r3, r2
 8009c18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c1a:	6020      	str	r0, [r4, #0]
 8009c1c:	6061      	str	r1, [r4, #4]
 8009c1e:	60a2      	str	r2, [r4, #8]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,9,14,16,18");
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4a23      	ldr	r2, [pc, #140]	; (8009cb8 <problem_fetch+0x85d0>)
 8009c2a:	461d      	mov	r5, r3
 8009c2c:	4614      	mov	r4, r2
 8009c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c30:	6028      	str	r0, [r5, #0]
 8009c32:	6069      	str	r1, [r5, #4]
 8009c34:	60aa      	str	r2, [r5, #8]
 8009c36:	60eb      	str	r3, [r5, #12]
 8009c38:	8823      	ldrh	r3, [r4, #0]
 8009c3a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009c42:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <problem_fetch+0x85d4>)
 8009c44:	461c      	mov	r4, r3
 8009c46:	4613      	mov	r3, r2
 8009c48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	6061      	str	r1, [r4, #4]
 8009c4e:	60a2      	str	r2, [r4, #8]
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	81a3      	strh	r3, [r4, #12]
			break;
 8009c54:	f012 bc78 	b.w	801c548 <problem_fetch+0x1ae60>
 8009c58:	08026724 	.word	0x08026724
 8009c5c:	0802395c 	.word	0x0802395c
 8009c60:	08026738 	.word	0x08026738
 8009c64:	08026748 	.word	0x08026748
 8009c68:	08026760 	.word	0x08026760
 8009c6c:	08026770 	.word	0x08026770
 8009c70:	08023afc 	.word	0x08023afc
 8009c74:	08026780 	.word	0x08026780
 8009c78:	08026790 	.word	0x08026790
 8009c7c:	080239d4 	.word	0x080239d4
 8009c80:	080267a4 	.word	0x080267a4
 8009c84:	08023a28 	.word	0x08023a28
 8009c88:	080267b4 	.word	0x080267b4
 8009c8c:	080267c0 	.word	0x080267c0
 8009c90:	08023cf8 	.word	0x08023cf8
 8009c94:	080267d0 	.word	0x080267d0
 8009c98:	080267d8 	.word	0x080267d8
 8009c9c:	080267e8 	.word	0x080267e8
 8009ca0:	080267fc 	.word	0x080267fc
 8009ca4:	08026808 	.word	0x08026808
 8009ca8:	0802681c 	.word	0x0802681c
 8009cac:	08024940 	.word	0x08024940
 8009cb0:	08026834 	.word	0x08026834
 8009cb4:	08026844 	.word	0x08026844
 8009cb8:	08026854 	.word	0x08026854
 8009cbc:	08023ae4 	.word	0x08023ae4
		case 233 :
			strcpy(p->name,"HOONGA (REMAKE)");
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009cc6:	4ab5      	ldr	r2, [pc, #724]	; (8009f9c <problem_fetch+0x88b4>)
 8009cc8:	461c      	mov	r4, r3
 8009cca:	4615      	mov	r5, r2
 8009ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cce:	6020      	str	r0, [r4, #0]
 8009cd0:	6061      	str	r1, [r4, #4]
 8009cd2:	60a2      	str	r2, [r4, #8]
 8009cd4:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009cdc:	4ab0      	ldr	r2, [pc, #704]	; (8009fa0 <problem_fetch+0x88b8>)
 8009cde:	6810      	ldr	r0, [r2, #0]
 8009ce0:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,E,D,H,G,H,I");
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	33a4      	adds	r3, #164	; 0xa4
 8009cec:	4aad      	ldr	r2, [pc, #692]	; (8009fa4 <problem_fetch+0x88bc>)
 8009cee:	461d      	mov	r5, r3
 8009cf0:	4614      	mov	r4, r2
 8009cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009cf4:	6028      	str	r0, [r5, #0]
 8009cf6:	6069      	str	r1, [r5, #4]
 8009cf8:	60aa      	str	r2, [r5, #8]
 8009cfa:	60eb      	str	r3, [r5, #12]
 8009cfc:	6820      	ldr	r0, [r4, #0]
 8009cfe:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,10,12,11,13,14,16,18");
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3304      	adds	r3, #4
 8009d04:	4aa8      	ldr	r2, [pc, #672]	; (8009fa8 <problem_fetch+0x88c0>)
 8009d06:	461d      	mov	r5, r3
 8009d08:	4614      	mov	r4, r2
 8009d0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d0c:	6028      	str	r0, [r5, #0]
 8009d0e:	6069      	str	r1, [r5, #4]
 8009d10:	60aa      	str	r2, [r5, #8]
 8009d12:	60eb      	str	r3, [r5, #12]
 8009d14:	cc03      	ldmia	r4!, {r0, r1}
 8009d16:	6128      	str	r0, [r5, #16]
 8009d18:	6169      	str	r1, [r5, #20]
 8009d1a:	8823      	ldrh	r3, [r4, #0]
 8009d1c:	78a2      	ldrb	r2, [r4, #2]
 8009d1e:	832b      	strh	r3, [r5, #24]
 8009d20:	4613      	mov	r3, r2
 8009d22:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009d2a:	4aa0      	ldr	r2, [pc, #640]	; (8009fac <problem_fetch+0x88c4>)
 8009d2c:	461d      	mov	r5, r3
 8009d2e:	4614      	mov	r4, r2
 8009d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d32:	6028      	str	r0, [r5, #0]
 8009d34:	6069      	str	r1, [r5, #4]
 8009d36:	60aa      	str	r2, [r5, #8]
 8009d38:	60eb      	str	r3, [r5, #12]
 8009d3a:	6820      	ldr	r0, [r4, #0]
 8009d3c:	6128      	str	r0, [r5, #16]
			break;
 8009d3e:	f012 bc03 	b.w	801c548 <problem_fetch+0x1ae60>
		case 234 :
			strcpy(p->name,"EDITHS BOULDER");
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009d48:	4a99      	ldr	r2, [pc, #612]	; (8009fb0 <problem_fetch+0x88c8>)
 8009d4a:	461c      	mov	r4, r3
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d50:	6020      	str	r0, [r4, #0]
 8009d52:	6061      	str	r1, [r4, #4]
 8009d54:	60a2      	str	r2, [r4, #8]
 8009d56:	881a      	ldrh	r2, [r3, #0]
 8009d58:	789b      	ldrb	r3, [r3, #2]
 8009d5a:	81a2      	strh	r2, [r4, #12]
 8009d5c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009d64:	4a93      	ldr	r2, [pc, #588]	; (8009fb4 <problem_fetch+0x88cc>)
 8009d66:	6810      	ldr	r0, [r2, #0]
 8009d68:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2207      	movs	r2, #7
 8009d6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,E,J,D,E,A");
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	33a4      	adds	r3, #164	; 0xa4
 8009d74:	4a90      	ldr	r2, [pc, #576]	; (8009fb8 <problem_fetch+0x88d0>)
 8009d76:	461c      	mov	r4, r3
 8009d78:	4613      	mov	r3, r2
 8009d7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009d7c:	6020      	str	r0, [r4, #0]
 8009d7e:	6061      	str	r1, [r4, #4]
 8009d80:	60a2      	str	r2, [r4, #8]
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,7,8,5,15,16,18");
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4a8c      	ldr	r2, [pc, #560]	; (8009fbc <problem_fetch+0x88d4>)
 8009d8c:	461d      	mov	r5, r3
 8009d8e:	4614      	mov	r4, r2
 8009d90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009d92:	6028      	str	r0, [r5, #0]
 8009d94:	6069      	str	r1, [r5, #4]
 8009d96:	60aa      	str	r2, [r5, #8]
 8009d98:	60eb      	str	r3, [r5, #12]
 8009d9a:	8823      	ldrh	r3, [r4, #0]
 8009d9c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,s,d,d,e");
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009da4:	4a86      	ldr	r2, [pc, #536]	; (8009fc0 <problem_fetch+0x88d8>)
 8009da6:	461c      	mov	r4, r3
 8009da8:	4613      	mov	r3, r2
 8009daa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009dac:	6020      	str	r0, [r4, #0]
 8009dae:	6061      	str	r1, [r4, #4]
 8009db0:	60a2      	str	r2, [r4, #8]
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	81a3      	strh	r3, [r4, #12]
			break;
 8009db6:	f012 bbc7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 235 :
			strcpy(p->name,"IGNORANT STYLE");
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009dc0:	4a80      	ldr	r2, [pc, #512]	; (8009fc4 <problem_fetch+0x88dc>)
 8009dc2:	461c      	mov	r4, r3
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009dc8:	6020      	str	r0, [r4, #0]
 8009dca:	6061      	str	r1, [r4, #4]
 8009dcc:	60a2      	str	r2, [r4, #8]
 8009dce:	881a      	ldrh	r2, [r3, #0]
 8009dd0:	789b      	ldrb	r3, [r3, #2]
 8009dd2:	81a2      	strh	r2, [r4, #12]
 8009dd4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009ddc:	4a7a      	ldr	r2, [pc, #488]	; (8009fc8 <problem_fetch+0x88e0>)
 8009dde:	8811      	ldrh	r1, [r2, #0]
 8009de0:	7892      	ldrb	r2, [r2, #2]
 8009de2:	8019      	strh	r1, [r3, #0]
 8009de4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2206      	movs	r2, #6
 8009dea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,I,I");
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	33a4      	adds	r3, #164	; 0xa4
 8009df0:	4a76      	ldr	r2, [pc, #472]	; (8009fcc <problem_fetch+0x88e4>)
 8009df2:	461c      	mov	r4, r3
 8009df4:	4613      	mov	r3, r2
 8009df6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009df8:	6020      	str	r0, [r4, #0]
 8009dfa:	6061      	str	r1, [r4, #4]
 8009dfc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,8,11,14,18");
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4a73      	ldr	r2, [pc, #460]	; (8009fd0 <problem_fetch+0x88e8>)
 8009e04:	461c      	mov	r4, r3
 8009e06:	4613      	mov	r3, r2
 8009e08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e0a:	6020      	str	r0, [r4, #0]
 8009e0c:	6061      	str	r1, [r4, #4]
 8009e0e:	60a2      	str	r2, [r4, #8]
 8009e10:	881a      	ldrh	r2, [r3, #0]
 8009e12:	789b      	ldrb	r3, [r3, #2]
 8009e14:	81a2      	strh	r2, [r4, #12]
 8009e16:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009e1e:	4a6d      	ldr	r2, [pc, #436]	; (8009fd4 <problem_fetch+0x88ec>)
 8009e20:	461c      	mov	r4, r3
 8009e22:	4613      	mov	r3, r2
 8009e24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009e26:	6020      	str	r0, [r4, #0]
 8009e28:	6061      	str	r1, [r4, #4]
 8009e2a:	60a2      	str	r2, [r4, #8]
			break;
 8009e2c:	f012 bb8c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 236 :
			strcpy(p->name,"FUN1");
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e36:	4a68      	ldr	r2, [pc, #416]	; (8009fd8 <problem_fetch+0x88f0>)
 8009e38:	6810      	ldr	r0, [r2, #0]
 8009e3a:	6018      	str	r0, [r3, #0]
 8009e3c:	7912      	ldrb	r2, [r2, #4]
 8009e3e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009e46:	4a65      	ldr	r2, [pc, #404]	; (8009fdc <problem_fetch+0x88f4>)
 8009e48:	6810      	ldr	r0, [r2, #0]
 8009e4a:	6018      	str	r0, [r3, #0]
			p->moveSize = 14;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	220e      	movs	r2, #14
 8009e50:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D,F,H,F,I,I,G,H,I");
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	33a4      	adds	r3, #164	; 0xa4
 8009e56:	4a62      	ldr	r2, [pc, #392]	; (8009fe0 <problem_fetch+0x88f8>)
 8009e58:	461d      	mov	r5, r3
 8009e5a:	4614      	mov	r4, r2
 8009e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e5e:	6028      	str	r0, [r5, #0]
 8009e60:	6069      	str	r1, [r5, #4]
 8009e62:	60aa      	str	r2, [r5, #8]
 8009e64:	60eb      	str	r3, [r5, #12]
 8009e66:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009e68:	6128      	str	r0, [r5, #16]
 8009e6a:	6169      	str	r1, [r5, #20]
 8009e6c:	61aa      	str	r2, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,8,9,11,11,12,13,14,15,15,16,18");
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	3304      	adds	r3, #4
 8009e72:	4a5c      	ldr	r2, [pc, #368]	; (8009fe4 <problem_fetch+0x88fc>)
 8009e74:	4614      	mov	r4, r2
 8009e76:	469c      	mov	ip, r3
 8009e78:	f104 0e20 	add.w	lr, r4, #32
 8009e7c:	4665      	mov	r5, ip
 8009e7e:	4626      	mov	r6, r4
 8009e80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e82:	6028      	str	r0, [r5, #0]
 8009e84:	6069      	str	r1, [r5, #4]
 8009e86:	60aa      	str	r2, [r5, #8]
 8009e88:	60eb      	str	r3, [r5, #12]
 8009e8a:	3410      	adds	r4, #16
 8009e8c:	f10c 0c10 	add.w	ip, ip, #16
 8009e90:	4574      	cmp	r4, lr
 8009e92:	d1f3      	bne.n	8009e7c <problem_fetch+0x8794>
 8009e94:	4663      	mov	r3, ip
 8009e96:	4622      	mov	r2, r4
 8009e98:	6810      	ldr	r0, [r2, #0]
 8009e9a:	6018      	str	r0, [r3, #0]
 8009e9c:	7912      	ldrb	r2, [r2, #4]
 8009e9e:	711a      	strb	r2, [r3, #4]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,d,e");
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009ea6:	4a50      	ldr	r2, [pc, #320]	; (8009fe8 <problem_fetch+0x8900>)
 8009ea8:	461d      	mov	r5, r3
 8009eaa:	4614      	mov	r4, r2
 8009eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009eae:	6028      	str	r0, [r5, #0]
 8009eb0:	6069      	str	r1, [r5, #4]
 8009eb2:	60aa      	str	r2, [r5, #8]
 8009eb4:	60eb      	str	r3, [r5, #12]
 8009eb6:	cc07      	ldmia	r4!, {r0, r1, r2}
 8009eb8:	6128      	str	r0, [r5, #16]
 8009eba:	6169      	str	r1, [r5, #20]
 8009ebc:	61aa      	str	r2, [r5, #24]
			break;
 8009ebe:	f012 bb43 	b.w	801c548 <problem_fetch+0x1ae60>
		case 237 :
			strcpy(p->name,"MALEDICTION");
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ec8:	4a48      	ldr	r2, [pc, #288]	; (8009fec <problem_fetch+0x8904>)
 8009eca:	461c      	mov	r4, r3
 8009ecc:	4613      	mov	r3, r2
 8009ece:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ed0:	6020      	str	r0, [r4, #0]
 8009ed2:	6061      	str	r1, [r4, #4]
 8009ed4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009edc:	4a44      	ldr	r2, [pc, #272]	; (8009ff0 <problem_fetch+0x8908>)
 8009ede:	6810      	ldr	r0, [r2, #0]
 8009ee0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2206      	movs	r2, #6
 8009ee6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,B,G,I,D");
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	33a4      	adds	r3, #164	; 0xa4
 8009eec:	4a41      	ldr	r2, [pc, #260]	; (8009ff4 <problem_fetch+0x890c>)
 8009eee:	461c      	mov	r4, r3
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009ef4:	6020      	str	r0, [r4, #0]
 8009ef6:	6061      	str	r1, [r4, #4]
 8009ef8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,11,12,15,15,18");
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3304      	adds	r3, #4
 8009efe:	4a3e      	ldr	r2, [pc, #248]	; (8009ff8 <problem_fetch+0x8910>)
 8009f00:	461d      	mov	r5, r3
 8009f02:	4614      	mov	r4, r2
 8009f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f06:	6028      	str	r0, [r5, #0]
 8009f08:	6069      	str	r1, [r5, #4]
 8009f0a:	60aa      	str	r2, [r5, #8]
 8009f0c:	60eb      	str	r3, [r5, #12]
 8009f0e:	7823      	ldrb	r3, [r4, #0]
 8009f10:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009f18:	4a2e      	ldr	r2, [pc, #184]	; (8009fd4 <problem_fetch+0x88ec>)
 8009f1a:	461c      	mov	r4, r3
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8009f20:	6020      	str	r0, [r4, #0]
 8009f22:	6061      	str	r1, [r4, #4]
 8009f24:	60a2      	str	r2, [r4, #8]
			break;
 8009f26:	f012 bb0f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 238 :
			strcpy(p->name,"KYLO REN");
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009f30:	4932      	ldr	r1, [pc, #200]	; (8009ffc <problem_fetch+0x8914>)
 8009f32:	461a      	mov	r2, r3
 8009f34:	460b      	mov	r3, r1
 8009f36:	cb03      	ldmia	r3!, {r0, r1}
 8009f38:	6010      	str	r0, [r2, #0]
 8009f3a:	6051      	str	r1, [r2, #4]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <problem_fetch+0x88e0>)
 8009f48:	8811      	ldrh	r1, [r2, #0]
 8009f4a:	7892      	ldrb	r2, [r2, #2]
 8009f4c:	8019      	strh	r1, [r3, #0]
 8009f4e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2208      	movs	r2, #8
 8009f54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,G,E,I,E");
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	33a4      	adds	r3, #164	; 0xa4
 8009f5a:	4a29      	ldr	r2, [pc, #164]	; (800a000 <problem_fetch+0x8918>)
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	4615      	mov	r5, r2
 8009f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f62:	6020      	str	r0, [r4, #0]
 8009f64:	6061      	str	r1, [r4, #4]
 8009f66:	60a2      	str	r2, [r4, #8]
 8009f68:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18,9");
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	4a25      	ldr	r2, [pc, #148]	; (800a004 <problem_fetch+0x891c>)
 8009f70:	461d      	mov	r5, r3
 8009f72:	4614      	mov	r4, r2
 8009f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009f76:	6028      	str	r0, [r5, #0]
 8009f78:	6069      	str	r1, [r5, #4]
 8009f7a:	60aa      	str	r2, [r5, #8]
 8009f7c:	60eb      	str	r3, [r5, #12]
 8009f7e:	6820      	ldr	r0, [r4, #0]
 8009f80:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e,d");
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8009f88:	4a1f      	ldr	r2, [pc, #124]	; (800a008 <problem_fetch+0x8920>)
 8009f8a:	461c      	mov	r4, r3
 8009f8c:	4615      	mov	r5, r2
 8009f8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f90:	6020      	str	r0, [r4, #0]
 8009f92:	6061      	str	r1, [r4, #4]
 8009f94:	60a2      	str	r2, [r4, #8]
 8009f96:	60e3      	str	r3, [r4, #12]
			break;
 8009f98:	f012 bad6 	b.w	801c548 <problem_fetch+0x1ae60>
 8009f9c:	08026868 	.word	0x08026868
 8009fa0:	08023a98 	.word	0x08023a98
 8009fa4:	08026878 	.word	0x08026878
 8009fa8:	0802688c 	.word	0x0802688c
 8009fac:	08024204 	.word	0x08024204
 8009fb0:	080268a8 	.word	0x080268a8
 8009fb4:	080239f4 	.word	0x080239f4
 8009fb8:	080268b8 	.word	0x080268b8
 8009fbc:	080268c8 	.word	0x080268c8
 8009fc0:	080268dc 	.word	0x080268dc
 8009fc4:	080268ec 	.word	0x080268ec
 8009fc8:	0802391c 	.word	0x0802391c
 8009fcc:	080268fc 	.word	0x080268fc
 8009fd0:	08026908 	.word	0x08026908
 8009fd4:	08023cf8 	.word	0x08023cf8
 8009fd8:	08026918 	.word	0x08026918
 8009fdc:	0802395c 	.word	0x0802395c
 8009fe0:	08026920 	.word	0x08026920
 8009fe4:	0802693c 	.word	0x0802693c
 8009fe8:	08026964 	.word	0x08026964
 8009fec:	08026980 	.word	0x08026980
 8009ff0:	08023afc 	.word	0x08023afc
 8009ff4:	0802698c 	.word	0x0802698c
 8009ff8:	08026998 	.word	0x08026998
 8009ffc:	080269ac 	.word	0x080269ac
 800a000:	080269b8 	.word	0x080269b8
 800a004:	080269c8 	.word	0x080269c8
 800a008:	080241bc 	.word	0x080241bc
		case 239 :
			strcpy(p->name,"STRAIGHTER THAN YOU");
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a012:	4ab2      	ldr	r2, [pc, #712]	; (800a2dc <problem_fetch+0x8bf4>)
 800a014:	461d      	mov	r5, r3
 800a016:	4614      	mov	r4, r2
 800a018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a01a:	6028      	str	r0, [r5, #0]
 800a01c:	6069      	str	r1, [r5, #4]
 800a01e:	60aa      	str	r2, [r5, #8]
 800a020:	60eb      	str	r3, [r5, #12]
 800a022:	6820      	ldr	r0, [r4, #0]
 800a024:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a02c:	4aac      	ldr	r2, [pc, #688]	; (800a2e0 <problem_fetch+0x8bf8>)
 800a02e:	8811      	ldrh	r1, [r2, #0]
 800a030:	7892      	ldrb	r2, [r2, #2]
 800a032:	8019      	strh	r1, [r3, #0]
 800a034:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2205      	movs	r2, #5
 800a03a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,K,I");
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	33a4      	adds	r3, #164	; 0xa4
 800a040:	49a8      	ldr	r1, [pc, #672]	; (800a2e4 <problem_fetch+0x8bfc>)
 800a042:	461a      	mov	r2, r3
 800a044:	460b      	mov	r3, r1
 800a046:	cb03      	ldmia	r3!, {r0, r1}
 800a048:	6010      	str	r0, [r2, #0]
 800a04a:	6051      	str	r1, [r2, #4]
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,16,18");
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3304      	adds	r3, #4
 800a054:	4aa4      	ldr	r2, [pc, #656]	; (800a2e8 <problem_fetch+0x8c00>)
 800a056:	461c      	mov	r4, r3
 800a058:	4613      	mov	r3, r2
 800a05a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a05c:	6020      	str	r0, [r4, #0]
 800a05e:	6061      	str	r1, [r4, #4]
 800a060:	60a2      	str	r2, [r4, #8]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a06c:	499f      	ldr	r1, [pc, #636]	; (800a2ec <problem_fetch+0x8c04>)
 800a06e:	461a      	mov	r2, r3
 800a070:	460b      	mov	r3, r1
 800a072:	cb03      	ldmia	r3!, {r0, r1}
 800a074:	6010      	str	r0, [r2, #0]
 800a076:	6051      	str	r1, [r2, #4]
 800a078:	881b      	ldrh	r3, [r3, #0]
 800a07a:	8113      	strh	r3, [r2, #8]
			break;
 800a07c:	f012 ba64 	b.w	801c548 <problem_fetch+0x1ae60>
		case 240 :
			strcpy(p->name,"JAM FUNK");
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a086:	499a      	ldr	r1, [pc, #616]	; (800a2f0 <problem_fetch+0x8c08>)
 800a088:	461a      	mov	r2, r3
 800a08a:	460b      	mov	r3, r1
 800a08c:	cb03      	ldmia	r3!, {r0, r1}
 800a08e:	6010      	str	r0, [r2, #0]
 800a090:	6051      	str	r1, [r2, #4]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"8A");
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a09c:	4a95      	ldr	r2, [pc, #596]	; (800a2f4 <problem_fetch+0x8c0c>)
 800a09e:	8811      	ldrh	r1, [r2, #0]
 800a0a0:	7892      	ldrb	r2, [r2, #2]
 800a0a2:	8019      	strh	r1, [r3, #0]
 800a0a4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2208      	movs	r2, #8
 800a0aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,H,B,C,D,B,D");
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	33a4      	adds	r3, #164	; 0xa4
 800a0b0:	4a91      	ldr	r2, [pc, #580]	; (800a2f8 <problem_fetch+0x8c10>)
 800a0b2:	461c      	mov	r4, r3
 800a0b4:	4615      	mov	r5, r2
 800a0b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0b8:	6020      	str	r0, [r4, #0]
 800a0ba:	6061      	str	r1, [r4, #4]
 800a0bc:	60a2      	str	r2, [r4, #8]
 800a0be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,10,13,12,16,18,6,7");
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4a8d      	ldr	r2, [pc, #564]	; (800a2fc <problem_fetch+0x8c14>)
 800a0c6:	461d      	mov	r5, r3
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a0cc:	6028      	str	r0, [r5, #0]
 800a0ce:	6069      	str	r1, [r5, #4]
 800a0d0:	60aa      	str	r2, [r5, #8]
 800a0d2:	60eb      	str	r3, [r5, #12]
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	6128      	str	r0, [r5, #16]
 800a0d8:	88a3      	ldrh	r3, [r4, #4]
 800a0da:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,d,d,e,s,d");
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a0e2:	4a87      	ldr	r2, [pc, #540]	; (800a300 <problem_fetch+0x8c18>)
 800a0e4:	461c      	mov	r4, r3
 800a0e6:	4615      	mov	r5, r2
 800a0e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0ea:	6020      	str	r0, [r4, #0]
 800a0ec:	6061      	str	r1, [r4, #4]
 800a0ee:	60a2      	str	r2, [r4, #8]
 800a0f0:	60e3      	str	r3, [r4, #12]
			break;
 800a0f2:	f012 ba29 	b.w	801c548 <problem_fetch+0x1ae60>
		case 241 :
			strcpy(p->name,"PROBLEM#148");
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a0fc:	4a81      	ldr	r2, [pc, #516]	; (800a304 <problem_fetch+0x8c1c>)
 800a0fe:	461c      	mov	r4, r3
 800a100:	4613      	mov	r3, r2
 800a102:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a104:	6020      	str	r0, [r4, #0]
 800a106:	6061      	str	r1, [r4, #4]
 800a108:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a110:	4a7d      	ldr	r2, [pc, #500]	; (800a308 <problem_fetch+0x8c20>)
 800a112:	6810      	ldr	r0, [r2, #0]
 800a114:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	220a      	movs	r2, #10
 800a11a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,F,E,I,D,E,B,A");
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	33a4      	adds	r3, #164	; 0xa4
 800a120:	4a7a      	ldr	r2, [pc, #488]	; (800a30c <problem_fetch+0x8c24>)
 800a122:	461d      	mov	r5, r3
 800a124:	4614      	mov	r4, r2
 800a126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a128:	6028      	str	r0, [r5, #0]
 800a12a:	6069      	str	r1, [r5, #4]
 800a12c:	60aa      	str	r2, [r5, #8]
 800a12e:	60eb      	str	r3, [r5, #12]
 800a130:	6820      	ldr	r0, [r4, #0]
 800a132:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,7,8,11,12,14,15,16,15,18");
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3304      	adds	r3, #4
 800a138:	4a75      	ldr	r2, [pc, #468]	; (800a310 <problem_fetch+0x8c28>)
 800a13a:	461d      	mov	r5, r3
 800a13c:	4614      	mov	r4, r2
 800a13e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a140:	6028      	str	r0, [r5, #0]
 800a142:	6069      	str	r1, [r5, #4]
 800a144:	60aa      	str	r2, [r5, #8]
 800a146:	60eb      	str	r3, [r5, #12]
 800a148:	cc03      	ldmia	r4!, {r0, r1}
 800a14a:	6128      	str	r0, [r5, #16]
 800a14c:	6169      	str	r1, [r5, #20]
 800a14e:	8823      	ldrh	r3, [r4, #0]
 800a150:	78a2      	ldrb	r2, [r4, #2]
 800a152:	832b      	strh	r3, [r5, #24]
 800a154:	4613      	mov	r3, r2
 800a156:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a15e:	4a6d      	ldr	r2, [pc, #436]	; (800a314 <problem_fetch+0x8c2c>)
 800a160:	461d      	mov	r5, r3
 800a162:	4614      	mov	r4, r2
 800a164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a166:	6028      	str	r0, [r5, #0]
 800a168:	6069      	str	r1, [r5, #4]
 800a16a:	60aa      	str	r2, [r5, #8]
 800a16c:	60eb      	str	r3, [r5, #12]
 800a16e:	6820      	ldr	r0, [r4, #0]
 800a170:	6128      	str	r0, [r5, #16]
			break;
 800a172:	f012 b9e9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 242 :
			strcpy(p->name,"HOONGA");
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a17c:	4a66      	ldr	r2, [pc, #408]	; (800a318 <problem_fetch+0x8c30>)
 800a17e:	6810      	ldr	r0, [r2, #0]
 800a180:	6018      	str	r0, [r3, #0]
 800a182:	8891      	ldrh	r1, [r2, #4]
 800a184:	7992      	ldrb	r2, [r2, #6]
 800a186:	8099      	strh	r1, [r3, #4]
 800a188:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C");
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a190:	4a53      	ldr	r2, [pc, #332]	; (800a2e0 <problem_fetch+0x8bf8>)
 800a192:	8811      	ldrh	r1, [r2, #0]
 800a194:	7892      	ldrb	r2, [r2, #2]
 800a196:	8019      	strh	r1, [r3, #0]
 800a198:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2209      	movs	r2, #9
 800a19e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,C,D,H,G,H,I");
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	33a4      	adds	r3, #164	; 0xa4
 800a1a4:	4a5d      	ldr	r2, [pc, #372]	; (800a31c <problem_fetch+0x8c34>)
 800a1a6:	461d      	mov	r5, r3
 800a1a8:	4614      	mov	r4, r2
 800a1aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ac:	6028      	str	r0, [r5, #0]
 800a1ae:	6069      	str	r1, [r5, #4]
 800a1b0:	60aa      	str	r2, [r5, #8]
 800a1b2:	60eb      	str	r3, [r5, #12]
 800a1b4:	8823      	ldrh	r3, [r4, #0]
 800a1b6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,5,11,13,14,16,18");
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	4a58      	ldr	r2, [pc, #352]	; (800a320 <problem_fetch+0x8c38>)
 800a1be:	461d      	mov	r5, r3
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1c4:	6028      	str	r0, [r5, #0]
 800a1c6:	6069      	str	r1, [r5, #4]
 800a1c8:	60aa      	str	r2, [r5, #8]
 800a1ca:	60eb      	str	r3, [r5, #12]
 800a1cc:	cc03      	ldmia	r4!, {r0, r1}
 800a1ce:	6128      	str	r0, [r5, #16]
 800a1d0:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,s,d,d,d,d,e");
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a1d8:	4a52      	ldr	r2, [pc, #328]	; (800a324 <problem_fetch+0x8c3c>)
 800a1da:	461d      	mov	r5, r3
 800a1dc:	4614      	mov	r4, r2
 800a1de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1e0:	6028      	str	r0, [r5, #0]
 800a1e2:	6069      	str	r1, [r5, #4]
 800a1e4:	60aa      	str	r2, [r5, #8]
 800a1e6:	60eb      	str	r3, [r5, #12]
 800a1e8:	8823      	ldrh	r3, [r4, #0]
 800a1ea:	822b      	strh	r3, [r5, #16]
			break;
 800a1ec:	f012 b9ac 	b.w	801c548 <problem_fetch+0x1ae60>
		case 243 :
			strcpy(p->name,"TAR");
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a1f6:	4a4c      	ldr	r2, [pc, #304]	; (800a328 <problem_fetch+0x8c40>)
 800a1f8:	6810      	ldr	r0, [r2, #0]
 800a1fa:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a202:	4a4a      	ldr	r2, [pc, #296]	; (800a32c <problem_fetch+0x8c44>)
 800a204:	6810      	ldr	r0, [r2, #0]
 800a206:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2209      	movs	r2, #9
 800a20c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,B,D,I,H,E,F");
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	33a4      	adds	r3, #164	; 0xa4
 800a212:	4a47      	ldr	r2, [pc, #284]	; (800a330 <problem_fetch+0x8c48>)
 800a214:	461d      	mov	r5, r3
 800a216:	4614      	mov	r4, r2
 800a218:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a21a:	6028      	str	r0, [r5, #0]
 800a21c:	6069      	str	r1, [r5, #4]
 800a21e:	60aa      	str	r2, [r5, #8]
 800a220:	60eb      	str	r3, [r5, #12]
 800a222:	8823      	ldrh	r3, [r4, #0]
 800a224:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,13,15,15,18,7,8,9,11");
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	3304      	adds	r3, #4
 800a22a:	4a42      	ldr	r2, [pc, #264]	; (800a334 <problem_fetch+0x8c4c>)
 800a22c:	461c      	mov	r4, r3
 800a22e:	4615      	mov	r5, r2
 800a230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	6061      	str	r1, [r4, #4]
 800a236:	60a2      	str	r2, [r4, #8]
 800a238:	60e3      	str	r3, [r4, #12]
 800a23a:	6828      	ldr	r0, [r5, #0]
 800a23c:	6120      	str	r0, [r4, #16]
 800a23e:	88ab      	ldrh	r3, [r5, #4]
 800a240:	79aa      	ldrb	r2, [r5, #6]
 800a242:	82a3      	strh	r3, [r4, #20]
 800a244:	4613      	mov	r3, r2
 800a246:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a24e:	4a3a      	ldr	r2, [pc, #232]	; (800a338 <problem_fetch+0x8c50>)
 800a250:	461d      	mov	r5, r3
 800a252:	4614      	mov	r4, r2
 800a254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a256:	6028      	str	r0, [r5, #0]
 800a258:	6069      	str	r1, [r5, #4]
 800a25a:	60aa      	str	r2, [r5, #8]
 800a25c:	60eb      	str	r3, [r5, #12]
 800a25e:	8823      	ldrh	r3, [r4, #0]
 800a260:	822b      	strh	r3, [r5, #16]
			break;
 800a262:	f012 b971 	b.w	801c548 <problem_fetch+0x1ae60>
		case 244 :
			strcpy(p->name,"FIRST SNOW");
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a26c:	4933      	ldr	r1, [pc, #204]	; (800a33c <problem_fetch+0x8c54>)
 800a26e:	461a      	mov	r2, r3
 800a270:	460b      	mov	r3, r1
 800a272:	cb03      	ldmia	r3!, {r0, r1}
 800a274:	6010      	str	r0, [r2, #0]
 800a276:	6051      	str	r1, [r2, #4]
 800a278:	8819      	ldrh	r1, [r3, #0]
 800a27a:	789b      	ldrb	r3, [r3, #2]
 800a27c:	8111      	strh	r1, [r2, #8]
 800a27e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a286:	4a2e      	ldr	r2, [pc, #184]	; (800a340 <problem_fetch+0x8c58>)
 800a288:	8811      	ldrh	r1, [r2, #0]
 800a28a:	7892      	ldrb	r2, [r2, #2]
 800a28c:	8019      	strh	r1, [r3, #0]
 800a28e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2205      	movs	r2, #5
 800a294:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,B,B,D");
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	33a4      	adds	r3, #164	; 0xa4
 800a29a:	492a      	ldr	r1, [pc, #168]	; (800a344 <problem_fetch+0x8c5c>)
 800a29c:	461a      	mov	r2, r3
 800a29e:	460b      	mov	r3, r1
 800a2a0:	cb03      	ldmia	r3!, {r0, r1}
 800a2a2:	6010      	str	r0, [r2, #0]
 800a2a4:	6051      	str	r1, [r2, #4]
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,15,18");
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3304      	adds	r3, #4
 800a2ae:	4a26      	ldr	r2, [pc, #152]	; (800a348 <problem_fetch+0x8c60>)
 800a2b0:	461c      	mov	r4, r3
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a2b6:	6020      	str	r0, [r4, #0]
 800a2b8:	6061      	str	r1, [r4, #4]
 800a2ba:	60a2      	str	r2, [r4, #8]
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a2c6:	4909      	ldr	r1, [pc, #36]	; (800a2ec <problem_fetch+0x8c04>)
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	cb03      	ldmia	r3!, {r0, r1}
 800a2ce:	6010      	str	r0, [r2, #0]
 800a2d0:	6051      	str	r1, [r2, #4]
 800a2d2:	881b      	ldrh	r3, [r3, #0]
 800a2d4:	8113      	strh	r3, [r2, #8]
			break;
 800a2d6:	f012 b937 	b.w	801c548 <problem_fetch+0x1ae60>
 800a2da:	bf00      	nop
 800a2dc:	080269dc 	.word	0x080269dc
 800a2e0:	08024190 	.word	0x08024190
 800a2e4:	080269f0 	.word	0x080269f0
 800a2e8:	080269fc 	.word	0x080269fc
 800a2ec:	08023e28 	.word	0x08023e28
 800a2f0:	08026a0c 	.word	0x08026a0c
 800a2f4:	08025cc0 	.word	0x08025cc0
 800a2f8:	08026a18 	.word	0x08026a18
 800a2fc:	08026a28 	.word	0x08026a28
 800a300:	08026a40 	.word	0x08026a40
 800a304:	08026a50 	.word	0x08026a50
 800a308:	0802395c 	.word	0x0802395c
 800a30c:	08026a5c 	.word	0x08026a5c
 800a310:	08026a70 	.word	0x08026a70
 800a314:	08024cb4 	.word	0x08024cb4
 800a318:	08026a8c 	.word	0x08026a8c
 800a31c:	08026a94 	.word	0x08026a94
 800a320:	08026aa8 	.word	0x08026aa8
 800a324:	08026ac0 	.word	0x08026ac0
 800a328:	08026ad4 	.word	0x08026ad4
 800a32c:	08023afc 	.word	0x08023afc
 800a330:	08026ad8 	.word	0x08026ad8
 800a334:	08026aec 	.word	0x08026aec
 800a338:	08026b04 	.word	0x08026b04
 800a33c:	08026b18 	.word	0x08026b18
 800a340:	0802391c 	.word	0x0802391c
 800a344:	08026b24 	.word	0x08026b24
 800a348:	08026b30 	.word	0x08026b30
		case 245 :
			strcpy(p->name,"WHAT IS YOUR PROBLEM???");
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a352:	4aab      	ldr	r2, [pc, #684]	; (800a600 <problem_fetch+0x8f18>)
 800a354:	461d      	mov	r5, r3
 800a356:	4614      	mov	r4, r2
 800a358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a35a:	6028      	str	r0, [r5, #0]
 800a35c:	6069      	str	r1, [r5, #4]
 800a35e:	60aa      	str	r2, [r5, #8]
 800a360:	60eb      	str	r3, [r5, #12]
 800a362:	cc03      	ldmia	r4!, {r0, r1}
 800a364:	6128      	str	r0, [r5, #16]
 800a366:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C");
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a36e:	4aa5      	ldr	r2, [pc, #660]	; (800a604 <problem_fetch+0x8f1c>)
 800a370:	8811      	ldrh	r1, [r2, #0]
 800a372:	7892      	ldrb	r2, [r2, #2]
 800a374:	8019      	strh	r1, [r3, #0]
 800a376:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2208      	movs	r2, #8
 800a37c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,D,F,I,F,I");
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	33a4      	adds	r3, #164	; 0xa4
 800a382:	4aa1      	ldr	r2, [pc, #644]	; (800a608 <problem_fetch+0x8f20>)
 800a384:	461c      	mov	r4, r3
 800a386:	4615      	mov	r5, r2
 800a388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a38a:	6020      	str	r0, [r4, #0]
 800a38c:	6061      	str	r1, [r4, #4]
 800a38e:	60a2      	str	r2, [r4, #8]
 800a390:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,14,13,18");
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3304      	adds	r3, #4
 800a396:	4a9d      	ldr	r2, [pc, #628]	; (800a60c <problem_fetch+0x8f24>)
 800a398:	461d      	mov	r5, r3
 800a39a:	4614      	mov	r4, r2
 800a39c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a39e:	6028      	str	r0, [r5, #0]
 800a3a0:	6069      	str	r1, [r5, #4]
 800a3a2:	60aa      	str	r2, [r5, #8]
 800a3a4:	60eb      	str	r3, [r5, #12]
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	6128      	str	r0, [r5, #16]
 800a3aa:	7923      	ldrb	r3, [r4, #4]
 800a3ac:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,s,d,d,d,d,d,e");
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a3b4:	4a96      	ldr	r2, [pc, #600]	; (800a610 <problem_fetch+0x8f28>)
 800a3b6:	461c      	mov	r4, r3
 800a3b8:	4615      	mov	r5, r2
 800a3ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3bc:	6020      	str	r0, [r4, #0]
 800a3be:	6061      	str	r1, [r4, #4]
 800a3c0:	60a2      	str	r2, [r4, #8]
 800a3c2:	60e3      	str	r3, [r4, #12]
			break;
 800a3c4:	f012 b8c0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 246 :
			strcpy(p->name,"BLACK IS WHERE YOU AT");
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a3ce:	4a91      	ldr	r2, [pc, #580]	; (800a614 <problem_fetch+0x8f2c>)
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3d6:	6028      	str	r0, [r5, #0]
 800a3d8:	6069      	str	r1, [r5, #4]
 800a3da:	60aa      	str	r2, [r5, #8]
 800a3dc:	60eb      	str	r3, [r5, #12]
 800a3de:	6820      	ldr	r0, [r4, #0]
 800a3e0:	6128      	str	r0, [r5, #16]
 800a3e2:	88a3      	ldrh	r3, [r4, #4]
 800a3e4:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a3ec:	4a8a      	ldr	r2, [pc, #552]	; (800a618 <problem_fetch+0x8f30>)
 800a3ee:	8811      	ldrh	r1, [r2, #0]
 800a3f0:	7892      	ldrb	r2, [r2, #2]
 800a3f2:	8019      	strh	r1, [r3, #0]
 800a3f4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,E,B,D,B,E");
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	33a4      	adds	r3, #164	; 0xa4
 800a400:	4a86      	ldr	r2, [pc, #536]	; (800a61c <problem_fetch+0x8f34>)
 800a402:	461c      	mov	r4, r3
 800a404:	4615      	mov	r5, r2
 800a406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a408:	6020      	str	r0, [r4, #0]
 800a40a:	6061      	str	r1, [r4, #4]
 800a40c:	60a2      	str	r2, [r4, #8]
 800a40e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,12,15,18,12,16");
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3304      	adds	r3, #4
 800a414:	4a82      	ldr	r2, [pc, #520]	; (800a620 <problem_fetch+0x8f38>)
 800a416:	461d      	mov	r5, r3
 800a418:	4614      	mov	r4, r2
 800a41a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a41c:	6028      	str	r0, [r5, #0]
 800a41e:	6069      	str	r1, [r5, #4]
 800a420:	60aa      	str	r2, [r5, #8]
 800a422:	60eb      	str	r3, [r5, #12]
 800a424:	6820      	ldr	r0, [r4, #0]
 800a426:	6128      	str	r0, [r5, #16]
 800a428:	7923      	ldrb	r3, [r4, #4]
 800a42a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,e,d,d");
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a432:	4a7c      	ldr	r2, [pc, #496]	; (800a624 <problem_fetch+0x8f3c>)
 800a434:	461c      	mov	r4, r3
 800a436:	4615      	mov	r5, r2
 800a438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a43a:	6020      	str	r0, [r4, #0]
 800a43c:	6061      	str	r1, [r4, #4]
 800a43e:	60a2      	str	r2, [r4, #8]
 800a440:	60e3      	str	r3, [r4, #12]
			break;
 800a442:	f012 b881 	b.w	801c548 <problem_fetch+0x1ae60>
		case 247 :
			strcpy(p->name,"LORD VADER");
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a44c:	4976      	ldr	r1, [pc, #472]	; (800a628 <problem_fetch+0x8f40>)
 800a44e:	461a      	mov	r2, r3
 800a450:	460b      	mov	r3, r1
 800a452:	cb03      	ldmia	r3!, {r0, r1}
 800a454:	6010      	str	r0, [r2, #0]
 800a456:	6051      	str	r1, [r2, #4]
 800a458:	8819      	ldrh	r1, [r3, #0]
 800a45a:	789b      	ldrb	r3, [r3, #2]
 800a45c:	8111      	strh	r1, [r2, #8]
 800a45e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a466:	4a71      	ldr	r2, [pc, #452]	; (800a62c <problem_fetch+0x8f44>)
 800a468:	6810      	ldr	r0, [r2, #0]
 800a46a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2208      	movs	r2, #8
 800a470:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,F,E,G,D,D");
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	33a4      	adds	r3, #164	; 0xa4
 800a476:	4a6e      	ldr	r2, [pc, #440]	; (800a630 <problem_fetch+0x8f48>)
 800a478:	461c      	mov	r4, r3
 800a47a:	4615      	mov	r5, r2
 800a47c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a47e:	6020      	str	r0, [r4, #0]
 800a480:	6061      	str	r1, [r4, #4]
 800a482:	60a2      	str	r2, [r4, #8]
 800a484:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,10,13,6,14,15,18");
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3304      	adds	r3, #4
 800a48a:	4a6a      	ldr	r2, [pc, #424]	; (800a634 <problem_fetch+0x8f4c>)
 800a48c:	461d      	mov	r5, r3
 800a48e:	4614      	mov	r4, r2
 800a490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a492:	6028      	str	r0, [r5, #0]
 800a494:	6069      	str	r1, [r5, #4]
 800a496:	60aa      	str	r2, [r5, #8]
 800a498:	60eb      	str	r3, [r5, #12]
 800a49a:	6820      	ldr	r0, [r4, #0]
 800a49c:	6128      	str	r0, [r5, #16]
 800a49e:	7923      	ldrb	r3, [r4, #4]
 800a4a0:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a4a8:	4a63      	ldr	r2, [pc, #396]	; (800a638 <problem_fetch+0x8f50>)
 800a4aa:	461c      	mov	r4, r3
 800a4ac:	4615      	mov	r5, r2
 800a4ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4b0:	6020      	str	r0, [r4, #0]
 800a4b2:	6061      	str	r1, [r4, #4]
 800a4b4:	60a2      	str	r2, [r4, #8]
 800a4b6:	60e3      	str	r3, [r4, #12]
			break;
 800a4b8:	f012 b846 	b.w	801c548 <problem_fetch+0x1ae60>
		case 248 :
			strcpy(p->name,"WOOO");
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a4c2:	4a5e      	ldr	r2, [pc, #376]	; (800a63c <problem_fetch+0x8f54>)
 800a4c4:	6810      	ldr	r0, [r2, #0]
 800a4c6:	6018      	str	r0, [r3, #0]
 800a4c8:	7912      	ldrb	r2, [r2, #4]
 800a4ca:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a4d2:	4a5b      	ldr	r2, [pc, #364]	; (800a640 <problem_fetch+0x8f58>)
 800a4d4:	6810      	ldr	r0, [r2, #0]
 800a4d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2208      	movs	r2, #8
 800a4dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,F,H,G,I");
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	33a4      	adds	r3, #164	; 0xa4
 800a4e2:	4a58      	ldr	r2, [pc, #352]	; (800a644 <problem_fetch+0x8f5c>)
 800a4e4:	461c      	mov	r4, r3
 800a4e6:	4615      	mov	r5, r2
 800a4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ea:	6020      	str	r0, [r4, #0]
 800a4ec:	6061      	str	r1, [r4, #4]
 800a4ee:	60a2      	str	r2, [r4, #8]
 800a4f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,13,16,17,18");
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	4a54      	ldr	r2, [pc, #336]	; (800a648 <problem_fetch+0x8f60>)
 800a4f8:	461d      	mov	r5, r3
 800a4fa:	4614      	mov	r4, r2
 800a4fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a4fe:	6028      	str	r0, [r5, #0]
 800a500:	6069      	str	r1, [r5, #4]
 800a502:	60aa      	str	r2, [r5, #8]
 800a504:	60eb      	str	r3, [r5, #12]
 800a506:	6820      	ldr	r0, [r4, #0]
 800a508:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a510:	4a4e      	ldr	r2, [pc, #312]	; (800a64c <problem_fetch+0x8f64>)
 800a512:	461c      	mov	r4, r3
 800a514:	4615      	mov	r5, r2
 800a516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a518:	6020      	str	r0, [r4, #0]
 800a51a:	6061      	str	r1, [r4, #4]
 800a51c:	60a2      	str	r2, [r4, #8]
 800a51e:	60e3      	str	r3, [r4, #12]
			break;
 800a520:	f012 b812 	b.w	801c548 <problem_fetch+0x1ae60>
		case 249 :
			strcpy(p->name,"YAYYY");
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a52a:	4a49      	ldr	r2, [pc, #292]	; (800a650 <problem_fetch+0x8f68>)
 800a52c:	6810      	ldr	r0, [r2, #0]
 800a52e:	6018      	str	r0, [r3, #0]
 800a530:	8892      	ldrh	r2, [r2, #4]
 800a532:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a53a:	4a41      	ldr	r2, [pc, #260]	; (800a640 <problem_fetch+0x8f58>)
 800a53c:	6810      	ldr	r0, [r2, #0]
 800a53e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2208      	movs	r2, #8
 800a544:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,H,G,H,I");
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	33a4      	adds	r3, #164	; 0xa4
 800a54a:	4a42      	ldr	r2, [pc, #264]	; (800a654 <problem_fetch+0x8f6c>)
 800a54c:	461c      	mov	r4, r3
 800a54e:	4615      	mov	r5, r2
 800a550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a552:	6020      	str	r0, [r4, #0]
 800a554:	6061      	str	r1, [r4, #4]
 800a556:	60a2      	str	r2, [r4, #8]
 800a558:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,9,12,15,16,18");
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3304      	adds	r3, #4
 800a55e:	4a3e      	ldr	r2, [pc, #248]	; (800a658 <problem_fetch+0x8f70>)
 800a560:	461d      	mov	r5, r3
 800a562:	4614      	mov	r4, r2
 800a564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a566:	6028      	str	r0, [r5, #0]
 800a568:	6069      	str	r1, [r5, #4]
 800a56a:	60aa      	str	r2, [r5, #8]
 800a56c:	60eb      	str	r3, [r5, #12]
 800a56e:	6820      	ldr	r0, [r4, #0]
 800a570:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a578:	4a34      	ldr	r2, [pc, #208]	; (800a64c <problem_fetch+0x8f64>)
 800a57a:	461c      	mov	r4, r3
 800a57c:	4615      	mov	r5, r2
 800a57e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a580:	6020      	str	r0, [r4, #0]
 800a582:	6061      	str	r1, [r4, #4]
 800a584:	60a2      	str	r2, [r4, #8]
 800a586:	60e3      	str	r3, [r4, #12]
			break;
 800a588:	f011 bfde 	b.w	801c548 <problem_fetch+0x1ae60>
		case 250 :
			strcpy(p->name,"BEST PROBLEM 567");
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a592:	4a32      	ldr	r2, [pc, #200]	; (800a65c <problem_fetch+0x8f74>)
 800a594:	461d      	mov	r5, r3
 800a596:	4614      	mov	r4, r2
 800a598:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a59a:	6028      	str	r0, [r5, #0]
 800a59c:	6069      	str	r1, [r5, #4]
 800a59e:	60aa      	str	r2, [r5, #8]
 800a5a0:	60eb      	str	r3, [r5, #12]
 800a5a2:	7823      	ldrb	r3, [r4, #0]
 800a5a4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a5ac:	4a15      	ldr	r2, [pc, #84]	; (800a604 <problem_fetch+0x8f1c>)
 800a5ae:	8811      	ldrh	r1, [r2, #0]
 800a5b0:	7892      	ldrb	r2, [r2, #2]
 800a5b2:	8019      	strh	r1, [r3, #0]
 800a5b4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2206      	movs	r2, #6
 800a5ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,E,A,G");
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	33a4      	adds	r3, #164	; 0xa4
 800a5c0:	4a27      	ldr	r2, [pc, #156]	; (800a660 <problem_fetch+0x8f78>)
 800a5c2:	461c      	mov	r4, r3
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5c8:	6020      	str	r0, [r4, #0]
 800a5ca:	6061      	str	r1, [r4, #4]
 800a5cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,13,14,18,4");
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4a24      	ldr	r2, [pc, #144]	; (800a664 <problem_fetch+0x8f7c>)
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5da:	6020      	str	r0, [r4, #0]
 800a5dc:	6061      	str	r1, [r4, #4]
 800a5de:	60a2      	str	r2, [r4, #8]
 800a5e0:	881a      	ldrh	r2, [r3, #0]
 800a5e2:	789b      	ldrb	r3, [r3, #2]
 800a5e4:	81a2      	strh	r2, [r4, #12]
 800a5e6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,d,d,d,e,s");
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a5ee:	4a1e      	ldr	r2, [pc, #120]	; (800a668 <problem_fetch+0x8f80>)
 800a5f0:	461c      	mov	r4, r3
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a5f6:	6020      	str	r0, [r4, #0]
 800a5f8:	6061      	str	r1, [r4, #4]
 800a5fa:	60a2      	str	r2, [r4, #8]
			break;
 800a5fc:	f011 bfa4 	b.w	801c548 <problem_fetch+0x1ae60>
 800a600:	08026b40 	.word	0x08026b40
 800a604:	08023a28 	.word	0x08023a28
 800a608:	08026b58 	.word	0x08026b58
 800a60c:	08026b68 	.word	0x08026b68
 800a610:	08026760 	.word	0x08026760
 800a614:	08026b80 	.word	0x08026b80
 800a618:	0802391c 	.word	0x0802391c
 800a61c:	08026b98 	.word	0x08026b98
 800a620:	08026ba8 	.word	0x08026ba8
 800a624:	08026bc0 	.word	0x08026bc0
 800a628:	08026bd0 	.word	0x08026bd0
 800a62c:	080239f4 	.word	0x080239f4
 800a630:	08026bdc 	.word	0x08026bdc
 800a634:	08026bec 	.word	0x08026bec
 800a638:	08026c04 	.word	0x08026c04
 800a63c:	08026c14 	.word	0x08026c14
 800a640:	0802395c 	.word	0x0802395c
 800a644:	08026c1c 	.word	0x08026c1c
 800a648:	08026c2c 	.word	0x08026c2c
 800a64c:	08023a80 	.word	0x08023a80
 800a650:	08026c40 	.word	0x08026c40
 800a654:	08026c48 	.word	0x08026c48
 800a658:	08026c58 	.word	0x08026c58
 800a65c:	08026c6c 	.word	0x08026c6c
 800a660:	08026c80 	.word	0x08026c80
 800a664:	08026c8c 	.word	0x08026c8c
 800a668:	08026c9c 	.word	0x08026c9c
		case 251 :
			strcpy(p->name,"WORLD CUP");
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a672:	49c2      	ldr	r1, [pc, #776]	; (800a97c <problem_fetch+0x9294>)
 800a674:	461a      	mov	r2, r3
 800a676:	460b      	mov	r3, r1
 800a678:	cb03      	ldmia	r3!, {r0, r1}
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	6051      	str	r1, [r2, #4]
 800a67e:	881b      	ldrh	r3, [r3, #0]
 800a680:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a688:	4abd      	ldr	r2, [pc, #756]	; (800a980 <problem_fetch+0x9298>)
 800a68a:	6810      	ldr	r0, [r2, #0]
 800a68c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2209      	movs	r2, #9
 800a692:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,H,I,J,G,J,I");
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	33a4      	adds	r3, #164	; 0xa4
 800a698:	4aba      	ldr	r2, [pc, #744]	; (800a984 <problem_fetch+0x929c>)
 800a69a:	461d      	mov	r5, r3
 800a69c:	4614      	mov	r4, r2
 800a69e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6a0:	6028      	str	r0, [r5, #0]
 800a6a2:	6069      	str	r1, [r5, #4]
 800a6a4:	60aa      	str	r2, [r5, #8]
 800a6a6:	60eb      	str	r3, [r5, #12]
 800a6a8:	8823      	ldrh	r3, [r4, #0]
 800a6aa:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,5,10,10,13,15,16,18");
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	3304      	adds	r3, #4
 800a6b0:	4ab5      	ldr	r2, [pc, #724]	; (800a988 <problem_fetch+0x92a0>)
 800a6b2:	461d      	mov	r5, r3
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6b8:	6028      	str	r0, [r5, #0]
 800a6ba:	6069      	str	r1, [r5, #4]
 800a6bc:	60aa      	str	r2, [r5, #8]
 800a6be:	60eb      	str	r3, [r5, #12]
 800a6c0:	cc03      	ldmia	r4!, {r0, r1}
 800a6c2:	6128      	str	r0, [r5, #16]
 800a6c4:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a6cc:	4aaf      	ldr	r2, [pc, #700]	; (800a98c <problem_fetch+0x92a4>)
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6d4:	6028      	str	r0, [r5, #0]
 800a6d6:	6069      	str	r1, [r5, #4]
 800a6d8:	60aa      	str	r2, [r5, #8]
 800a6da:	60eb      	str	r3, [r5, #12]
 800a6dc:	8823      	ldrh	r3, [r4, #0]
 800a6de:	822b      	strh	r3, [r5, #16]
			break;
 800a6e0:	f011 bf32 	b.w	801c548 <problem_fetch+0x1ae60>
		case 252 :
			strcpy(p->name,"ALONE IN THE DARK");
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a6ea:	4aa9      	ldr	r2, [pc, #676]	; (800a990 <problem_fetch+0x92a8>)
 800a6ec:	461d      	mov	r5, r3
 800a6ee:	4614      	mov	r4, r2
 800a6f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a6f2:	6028      	str	r0, [r5, #0]
 800a6f4:	6069      	str	r1, [r5, #4]
 800a6f6:	60aa      	str	r2, [r5, #8]
 800a6f8:	60eb      	str	r3, [r5, #12]
 800a6fa:	8823      	ldrh	r3, [r4, #0]
 800a6fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a704:	4aa3      	ldr	r2, [pc, #652]	; (800a994 <problem_fetch+0x92ac>)
 800a706:	8811      	ldrh	r1, [r2, #0]
 800a708:	7892      	ldrb	r2, [r2, #2]
 800a70a:	8019      	strh	r1, [r3, #0]
 800a70c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2206      	movs	r2, #6
 800a712:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I,I");
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	33a4      	adds	r3, #164	; 0xa4
 800a718:	4a9f      	ldr	r2, [pc, #636]	; (800a998 <problem_fetch+0x92b0>)
 800a71a:	461c      	mov	r4, r3
 800a71c:	4613      	mov	r3, r2
 800a71e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a720:	6020      	str	r0, [r4, #0]
 800a722:	6061      	str	r1, [r4, #4]
 800a724:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,14,14,18");
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3304      	adds	r3, #4
 800a72a:	4a9c      	ldr	r2, [pc, #624]	; (800a99c <problem_fetch+0x92b4>)
 800a72c:	461c      	mov	r4, r3
 800a72e:	4615      	mov	r5, r2
 800a730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a732:	6020      	str	r0, [r4, #0]
 800a734:	6061      	str	r1, [r4, #4]
 800a736:	60a2      	str	r2, [r4, #8]
 800a738:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a740:	4a97      	ldr	r2, [pc, #604]	; (800a9a0 <problem_fetch+0x92b8>)
 800a742:	461c      	mov	r4, r3
 800a744:	4613      	mov	r3, r2
 800a746:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a748:	6020      	str	r0, [r4, #0]
 800a74a:	6061      	str	r1, [r4, #4]
 800a74c:	60a2      	str	r2, [r4, #8]
			break;
 800a74e:	f011 befb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 253 :
			strcpy(p->name,"JUDEMANDUD");
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a758:	4992      	ldr	r1, [pc, #584]	; (800a9a4 <problem_fetch+0x92bc>)
 800a75a:	461a      	mov	r2, r3
 800a75c:	460b      	mov	r3, r1
 800a75e:	cb03      	ldmia	r3!, {r0, r1}
 800a760:	6010      	str	r0, [r2, #0]
 800a762:	6051      	str	r1, [r2, #4]
 800a764:	8819      	ldrh	r1, [r3, #0]
 800a766:	789b      	ldrb	r3, [r3, #2]
 800a768:	8111      	strh	r1, [r2, #8]
 800a76a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a772:	4a88      	ldr	r2, [pc, #544]	; (800a994 <problem_fetch+0x92ac>)
 800a774:	8811      	ldrh	r1, [r2, #0]
 800a776:	7892      	ldrb	r2, [r2, #2]
 800a778:	8019      	strh	r1, [r3, #0]
 800a77a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2207      	movs	r2, #7
 800a780:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,B,B,A");
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	33a4      	adds	r3, #164	; 0xa4
 800a786:	4a88      	ldr	r2, [pc, #544]	; (800a9a8 <problem_fetch+0x92c0>)
 800a788:	461c      	mov	r4, r3
 800a78a:	4613      	mov	r3, r2
 800a78c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a78e:	6020      	str	r0, [r4, #0]
 800a790:	6061      	str	r1, [r4, #4]
 800a792:	60a2      	str	r2, [r4, #8]
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,6,9,12,15,18");
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	4a83      	ldr	r2, [pc, #524]	; (800a9ac <problem_fetch+0x92c4>)
 800a79e:	461d      	mov	r5, r3
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a7a4:	6028      	str	r0, [r5, #0]
 800a7a6:	6069      	str	r1, [r5, #4]
 800a7a8:	60aa      	str	r2, [r5, #8]
 800a7aa:	60eb      	str	r3, [r5, #12]
 800a7ac:	7823      	ldrb	r3, [r4, #0]
 800a7ae:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,s,d,d,d,e");
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a7b6:	4a7e      	ldr	r2, [pc, #504]	; (800a9b0 <problem_fetch+0x92c8>)
 800a7b8:	461c      	mov	r4, r3
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7be:	6020      	str	r0, [r4, #0]
 800a7c0:	6061      	str	r1, [r4, #4]
 800a7c2:	60a2      	str	r2, [r4, #8]
 800a7c4:	881b      	ldrh	r3, [r3, #0]
 800a7c6:	81a3      	strh	r3, [r4, #12]
			break;
 800a7c8:	f011 bebe 	b.w	801c548 <problem_fetch+0x1ae60>
		case 254 :
			strcpy(p->name,"BLACK MARINO");
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a7d2:	4a78      	ldr	r2, [pc, #480]	; (800a9b4 <problem_fetch+0x92cc>)
 800a7d4:	461c      	mov	r4, r3
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a7da:	6020      	str	r0, [r4, #0]
 800a7dc:	6061      	str	r1, [r4, #4]
 800a7de:	60a2      	str	r2, [r4, #8]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a7ea:	4a73      	ldr	r2, [pc, #460]	; (800a9b8 <problem_fetch+0x92d0>)
 800a7ec:	6810      	ldr	r0, [r2, #0]
 800a7ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2206      	movs	r2, #6
 800a7f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,E,D");
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	33a4      	adds	r3, #164	; 0xa4
 800a7fa:	4a70      	ldr	r2, [pc, #448]	; (800a9bc <problem_fetch+0x92d4>)
 800a7fc:	461c      	mov	r4, r3
 800a7fe:	4613      	mov	r3, r2
 800a800:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	6061      	str	r1, [r4, #4]
 800a806:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	3304      	adds	r3, #4
 800a80c:	4a6c      	ldr	r2, [pc, #432]	; (800a9c0 <problem_fetch+0x92d8>)
 800a80e:	461c      	mov	r4, r3
 800a810:	4615      	mov	r5, r2
 800a812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a814:	6020      	str	r0, [r4, #0]
 800a816:	6061      	str	r1, [r4, #4]
 800a818:	60a2      	str	r2, [r4, #8]
 800a81a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a822:	4a68      	ldr	r2, [pc, #416]	; (800a9c4 <problem_fetch+0x92dc>)
 800a824:	461c      	mov	r4, r3
 800a826:	4613      	mov	r3, r2
 800a828:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a82a:	6020      	str	r0, [r4, #0]
 800a82c:	6061      	str	r1, [r4, #4]
 800a82e:	60a2      	str	r2, [r4, #8]
			break;
 800a830:	f011 be8a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 255 :
			strcpy(p->name,"KIWAK");
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a83a:	4a63      	ldr	r2, [pc, #396]	; (800a9c8 <problem_fetch+0x92e0>)
 800a83c:	6810      	ldr	r0, [r2, #0]
 800a83e:	6018      	str	r0, [r3, #0]
 800a840:	8892      	ldrh	r2, [r2, #4]
 800a842:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a84a:	4a4d      	ldr	r2, [pc, #308]	; (800a980 <problem_fetch+0x9298>)
 800a84c:	6810      	ldr	r0, [r2, #0]
 800a84e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2207      	movs	r2, #7
 800a854:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,E,G,D,A");
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	33a4      	adds	r3, #164	; 0xa4
 800a85a:	4a5c      	ldr	r2, [pc, #368]	; (800a9cc <problem_fetch+0x92e4>)
 800a85c:	461c      	mov	r4, r3
 800a85e:	4613      	mov	r3, r2
 800a860:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a862:	6020      	str	r0, [r4, #0]
 800a864:	6061      	str	r1, [r4, #4]
 800a866:	60a2      	str	r2, [r4, #8]
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,14,9,15,18");
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	3304      	adds	r3, #4
 800a870:	4a57      	ldr	r2, [pc, #348]	; (800a9d0 <problem_fetch+0x92e8>)
 800a872:	461d      	mov	r5, r3
 800a874:	4614      	mov	r4, r2
 800a876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a878:	6028      	str	r0, [r5, #0]
 800a87a:	6069      	str	r1, [r5, #4]
 800a87c:	60aa      	str	r2, [r5, #8]
 800a87e:	60eb      	str	r3, [r5, #12]
 800a880:	8823      	ldrh	r3, [r4, #0]
 800a882:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a88a:	4a52      	ldr	r2, [pc, #328]	; (800a9d4 <problem_fetch+0x92ec>)
 800a88c:	461c      	mov	r4, r3
 800a88e:	4613      	mov	r3, r2
 800a890:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a892:	6020      	str	r0, [r4, #0]
 800a894:	6061      	str	r1, [r4, #4]
 800a896:	60a2      	str	r2, [r4, #8]
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	81a3      	strh	r3, [r4, #12]
			break;
 800a89c:	f011 be54 	b.w	801c548 <problem_fetch+0x1ae60>
		case 256 :
			strcpy(p->name,"RIESKO");
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a8a6:	4a4c      	ldr	r2, [pc, #304]	; (800a9d8 <problem_fetch+0x92f0>)
 800a8a8:	6810      	ldr	r0, [r2, #0]
 800a8aa:	6018      	str	r0, [r3, #0]
 800a8ac:	8891      	ldrh	r1, [r2, #4]
 800a8ae:	7992      	ldrb	r2, [r2, #6]
 800a8b0:	8099      	strh	r1, [r3, #4]
 800a8b2:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a8ba:	4a31      	ldr	r2, [pc, #196]	; (800a980 <problem_fetch+0x9298>)
 800a8bc:	6810      	ldr	r0, [r2, #0]
 800a8be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2206      	movs	r2, #6
 800a8c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,F,E,A");
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	33a4      	adds	r3, #164	; 0xa4
 800a8ca:	4a44      	ldr	r2, [pc, #272]	; (800a9dc <problem_fetch+0x92f4>)
 800a8cc:	461c      	mov	r4, r3
 800a8ce:	4613      	mov	r3, r2
 800a8d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8d2:	6020      	str	r0, [r4, #0]
 800a8d4:	6061      	str	r1, [r4, #4]
 800a8d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,14,18");
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4a40      	ldr	r2, [pc, #256]	; (800a9e0 <problem_fetch+0x92f8>)
 800a8de:	461c      	mov	r4, r3
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a8e4:	6020      	str	r0, [r4, #0]
 800a8e6:	6061      	str	r1, [r4, #4]
 800a8e8:	60a2      	str	r2, [r4, #8]
 800a8ea:	881a      	ldrh	r2, [r3, #0]
 800a8ec:	789b      	ldrb	r3, [r3, #2]
 800a8ee:	81a2      	strh	r2, [r4, #12]
 800a8f0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a8f8:	4a32      	ldr	r2, [pc, #200]	; (800a9c4 <problem_fetch+0x92dc>)
 800a8fa:	461c      	mov	r4, r3
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a900:	6020      	str	r0, [r4, #0]
 800a902:	6061      	str	r1, [r4, #4]
 800a904:	60a2      	str	r2, [r4, #8]
			break;
 800a906:	f011 be1f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 257 :
			strcpy(p->name,"XCRAG");
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a910:	4a34      	ldr	r2, [pc, #208]	; (800a9e4 <problem_fetch+0x92fc>)
 800a912:	6810      	ldr	r0, [r2, #0]
 800a914:	6018      	str	r0, [r3, #0]
 800a916:	8892      	ldrh	r2, [r2, #4]
 800a918:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800a920:	4a31      	ldr	r2, [pc, #196]	; (800a9e8 <problem_fetch+0x9300>)
 800a922:	8811      	ldrh	r1, [r2, #0]
 800a924:	7892      	ldrb	r2, [r2, #2]
 800a926:	8019      	strh	r1, [r3, #0]
 800a928:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2207      	movs	r2, #7
 800a92e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,C,E,I");
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	33a4      	adds	r3, #164	; 0xa4
 800a934:	4a2d      	ldr	r2, [pc, #180]	; (800a9ec <problem_fetch+0x9304>)
 800a936:	461c      	mov	r4, r3
 800a938:	4613      	mov	r3, r2
 800a93a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a93c:	6020      	str	r0, [r4, #0]
 800a93e:	6061      	str	r1, [r4, #4]
 800a940:	60a2      	str	r2, [r4, #8]
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,14,18");
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	3304      	adds	r3, #4
 800a94a:	4a29      	ldr	r2, [pc, #164]	; (800a9f0 <problem_fetch+0x9308>)
 800a94c:	461d      	mov	r5, r3
 800a94e:	4614      	mov	r4, r2
 800a950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a952:	6028      	str	r0, [r5, #0]
 800a954:	6069      	str	r1, [r5, #4]
 800a956:	60aa      	str	r2, [r5, #8]
 800a958:	60eb      	str	r3, [r5, #12]
 800a95a:	8823      	ldrh	r3, [r4, #0]
 800a95c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800a964:	4a23      	ldr	r2, [pc, #140]	; (800a9f4 <problem_fetch+0x930c>)
 800a966:	461c      	mov	r4, r3
 800a968:	4613      	mov	r3, r2
 800a96a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800a96c:	6020      	str	r0, [r4, #0]
 800a96e:	6061      	str	r1, [r4, #4]
 800a970:	60a2      	str	r2, [r4, #8]
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	81a3      	strh	r3, [r4, #12]
			break;
 800a976:	f011 bde7 	b.w	801c548 <problem_fetch+0x1ae60>
 800a97a:	bf00      	nop
 800a97c:	08026ca8 	.word	0x08026ca8
 800a980:	0802395c 	.word	0x0802395c
 800a984:	08026cb4 	.word	0x08026cb4
 800a988:	08026cc8 	.word	0x08026cc8
 800a98c:	08024940 	.word	0x08024940
 800a990:	08026ce0 	.word	0x08026ce0
 800a994:	0802391c 	.word	0x0802391c
 800a998:	08026cf4 	.word	0x08026cf4
 800a99c:	08026d00 	.word	0x08026d00
 800a9a0:	08023cf8 	.word	0x08023cf8
 800a9a4:	08026d10 	.word	0x08026d10
 800a9a8:	08026d1c 	.word	0x08026d1c
 800a9ac:	08026d2c 	.word	0x08026d2c
 800a9b0:	08026d40 	.word	0x08026d40
 800a9b4:	08026d50 	.word	0x08026d50
 800a9b8:	080239f4 	.word	0x080239f4
 800a9bc:	08026d60 	.word	0x08026d60
 800a9c0:	0802600c 	.word	0x0802600c
 800a9c4:	0802393c 	.word	0x0802393c
 800a9c8:	08026d6c 	.word	0x08026d6c
 800a9cc:	08026d74 	.word	0x08026d74
 800a9d0:	08026d84 	.word	0x08026d84
 800a9d4:	08023ae4 	.word	0x08023ae4
 800a9d8:	08026d98 	.word	0x08026d98
 800a9dc:	08026da0 	.word	0x08026da0
 800a9e0:	08026dac 	.word	0x08026dac
 800a9e4:	08026dbc 	.word	0x08026dbc
 800a9e8:	08023a28 	.word	0x08023a28
 800a9ec:	08026dc4 	.word	0x08026dc4
 800a9f0:	08026dd4 	.word	0x08026dd4
 800a9f4:	080239d4 	.word	0x080239d4
		case 258 :
			strcpy(p->name,"LITTLE MAN ON CAMPUS");
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a9fe:	4ab2      	ldr	r2, [pc, #712]	; (800acc8 <problem_fetch+0x95e0>)
 800aa00:	461d      	mov	r5, r3
 800aa02:	4614      	mov	r4, r2
 800aa04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa06:	6028      	str	r0, [r5, #0]
 800aa08:	6069      	str	r1, [r5, #4]
 800aa0a:	60aa      	str	r2, [r5, #8]
 800aa0c:	60eb      	str	r3, [r5, #12]
 800aa0e:	6820      	ldr	r0, [r4, #0]
 800aa10:	6128      	str	r0, [r5, #16]
 800aa12:	7923      	ldrb	r3, [r4, #4]
 800aa14:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7B");
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa1c:	4aab      	ldr	r2, [pc, #684]	; (800accc <problem_fetch+0x95e4>)
 800aa1e:	8811      	ldrh	r1, [r2, #0]
 800aa20:	7892      	ldrb	r2, [r2, #2]
 800aa22:	8019      	strh	r1, [r3, #0]
 800aa24:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2206      	movs	r2, #6
 800aa2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,F,H,K,I");
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	33a4      	adds	r3, #164	; 0xa4
 800aa30:	4aa7      	ldr	r2, [pc, #668]	; (800acd0 <problem_fetch+0x95e8>)
 800aa32:	461c      	mov	r4, r3
 800aa34:	4613      	mov	r3, r2
 800aa36:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa38:	6020      	str	r0, [r4, #0]
 800aa3a:	6061      	str	r1, [r4, #4]
 800aa3c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,12,14,18");
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	3304      	adds	r3, #4
 800aa42:	4aa4      	ldr	r2, [pc, #656]	; (800acd4 <problem_fetch+0x95ec>)
 800aa44:	461c      	mov	r4, r3
 800aa46:	4615      	mov	r5, r2
 800aa48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa4a:	6020      	str	r0, [r4, #0]
 800aa4c:	6061      	str	r1, [r4, #4]
 800aa4e:	60a2      	str	r2, [r4, #8]
 800aa50:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aa58:	4a9f      	ldr	r2, [pc, #636]	; (800acd8 <problem_fetch+0x95f0>)
 800aa5a:	461c      	mov	r4, r3
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aa60:	6020      	str	r0, [r4, #0]
 800aa62:	6061      	str	r1, [r4, #4]
 800aa64:	60a2      	str	r2, [r4, #8]
			break;
 800aa66:	f011 bd6f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 259 :
			strcpy(p->name,"KILL HIM YOUR LEGS");
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aa70:	4a9a      	ldr	r2, [pc, #616]	; (800acdc <problem_fetch+0x95f4>)
 800aa72:	461d      	mov	r5, r3
 800aa74:	4614      	mov	r4, r2
 800aa76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa78:	6028      	str	r0, [r5, #0]
 800aa7a:	6069      	str	r1, [r5, #4]
 800aa7c:	60aa      	str	r2, [r5, #8]
 800aa7e:	60eb      	str	r3, [r5, #12]
 800aa80:	8823      	ldrh	r3, [r4, #0]
 800aa82:	78a2      	ldrb	r2, [r4, #2]
 800aa84:	822b      	strh	r3, [r5, #16]
 800aa86:	4613      	mov	r3, r2
 800aa88:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aa90:	4a8e      	ldr	r2, [pc, #568]	; (800accc <problem_fetch+0x95e4>)
 800aa92:	8811      	ldrh	r1, [r2, #0]
 800aa94:	7892      	ldrb	r2, [r2, #2]
 800aa96:	8019      	strh	r1, [r3, #0]
 800aa98:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2204      	movs	r2, #4
 800aa9e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I");
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	33a4      	adds	r3, #164	; 0xa4
 800aaa4:	498e      	ldr	r1, [pc, #568]	; (800ace0 <problem_fetch+0x95f8>)
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	cb03      	ldmia	r3!, {r0, r1}
 800aaac:	6010      	str	r0, [r2, #0]
 800aaae:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	498b      	ldr	r1, [pc, #556]	; (800ace4 <problem_fetch+0x95fc>)
 800aab6:	461a      	mov	r2, r3
 800aab8:	460b      	mov	r3, r1
 800aaba:	cb03      	ldmia	r3!, {r0, r1}
 800aabc:	6010      	str	r0, [r2, #0]
 800aabe:	6051      	str	r1, [r2, #4]
 800aac0:	8819      	ldrh	r1, [r3, #0]
 800aac2:	789b      	ldrb	r3, [r3, #2]
 800aac4:	8111      	strh	r1, [r2, #8]
 800aac6:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aace:	4986      	ldr	r1, [pc, #536]	; (800ace8 <problem_fetch+0x9600>)
 800aad0:	461a      	mov	r2, r3
 800aad2:	460b      	mov	r3, r1
 800aad4:	cb03      	ldmia	r3!, {r0, r1}
 800aad6:	6010      	str	r0, [r2, #0]
 800aad8:	6051      	str	r1, [r2, #4]
			break;
 800aada:	f011 bd35 	b.w	801c548 <problem_fetch+0x1ae60>
		case 260 :
			strcpy(p->name,"HOG TROUGH");
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aae4:	4981      	ldr	r1, [pc, #516]	; (800acec <problem_fetch+0x9604>)
 800aae6:	461a      	mov	r2, r3
 800aae8:	460b      	mov	r3, r1
 800aaea:	cb03      	ldmia	r3!, {r0, r1}
 800aaec:	6010      	str	r0, [r2, #0]
 800aaee:	6051      	str	r1, [r2, #4]
 800aaf0:	8819      	ldrh	r1, [r3, #0]
 800aaf2:	789b      	ldrb	r3, [r3, #2]
 800aaf4:	8111      	strh	r1, [r2, #8]
 800aaf6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aafe:	4a7c      	ldr	r2, [pc, #496]	; (800acf0 <problem_fetch+0x9608>)
 800ab00:	6810      	ldr	r0, [r2, #0]
 800ab02:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2206      	movs	r2, #6
 800ab08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,D,D");
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	33a4      	adds	r3, #164	; 0xa4
 800ab0e:	4a79      	ldr	r2, [pc, #484]	; (800acf4 <problem_fetch+0x960c>)
 800ab10:	461c      	mov	r4, r3
 800ab12:	4613      	mov	r3, r2
 800ab14:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab16:	6020      	str	r0, [r4, #0]
 800ab18:	6061      	str	r1, [r4, #4]
 800ab1a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,15,18");
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3304      	adds	r3, #4
 800ab20:	4a75      	ldr	r2, [pc, #468]	; (800acf8 <problem_fetch+0x9610>)
 800ab22:	461c      	mov	r4, r3
 800ab24:	4613      	mov	r3, r2
 800ab26:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab28:	6020      	str	r0, [r4, #0]
 800ab2a:	6061      	str	r1, [r4, #4]
 800ab2c:	60a2      	str	r2, [r4, #8]
 800ab2e:	881a      	ldrh	r2, [r3, #0]
 800ab30:	789b      	ldrb	r3, [r3, #2]
 800ab32:	81a2      	strh	r2, [r4, #12]
 800ab34:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ab3c:	4a66      	ldr	r2, [pc, #408]	; (800acd8 <problem_fetch+0x95f0>)
 800ab3e:	461c      	mov	r4, r3
 800ab40:	4613      	mov	r3, r2
 800ab42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ab44:	6020      	str	r0, [r4, #0]
 800ab46:	6061      	str	r1, [r4, #4]
 800ab48:	60a2      	str	r2, [r4, #8]
			break;
 800ab4a:	f011 bcfd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 261 :
			strcpy(p->name,"FLOOZY DOO");
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab54:	4969      	ldr	r1, [pc, #420]	; (800acfc <problem_fetch+0x9614>)
 800ab56:	461a      	mov	r2, r3
 800ab58:	460b      	mov	r3, r1
 800ab5a:	cb03      	ldmia	r3!, {r0, r1}
 800ab5c:	6010      	str	r0, [r2, #0]
 800ab5e:	6051      	str	r1, [r2, #4]
 800ab60:	8819      	ldrh	r1, [r3, #0]
 800ab62:	789b      	ldrb	r3, [r3, #2]
 800ab64:	8111      	strh	r1, [r2, #8]
 800ab66:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ab6e:	4a64      	ldr	r2, [pc, #400]	; (800ad00 <problem_fetch+0x9618>)
 800ab70:	6810      	ldr	r0, [r2, #0]
 800ab72:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2208      	movs	r2, #8
 800ab78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,A,C,A,D");
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	33a4      	adds	r3, #164	; 0xa4
 800ab7e:	4a61      	ldr	r2, [pc, #388]	; (800ad04 <problem_fetch+0x961c>)
 800ab80:	461c      	mov	r4, r3
 800ab82:	4615      	mov	r5, r2
 800ab84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab86:	6020      	str	r0, [r4, #0]
 800ab88:	6061      	str	r1, [r4, #4]
 800ab8a:	60a2      	str	r2, [r4, #8]
 800ab8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,9,13,14,18");
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3304      	adds	r3, #4
 800ab92:	4a5d      	ldr	r2, [pc, #372]	; (800ad08 <problem_fetch+0x9620>)
 800ab94:	461d      	mov	r5, r3
 800ab96:	4614      	mov	r4, r2
 800ab98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab9a:	6028      	str	r0, [r5, #0]
 800ab9c:	6069      	str	r1, [r5, #4]
 800ab9e:	60aa      	str	r2, [r5, #8]
 800aba0:	60eb      	str	r3, [r5, #12]
 800aba2:	6820      	ldr	r0, [r4, #0]
 800aba4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800abac:	4a57      	ldr	r2, [pc, #348]	; (800ad0c <problem_fetch+0x9624>)
 800abae:	461c      	mov	r4, r3
 800abb0:	4615      	mov	r5, r2
 800abb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abb4:	6020      	str	r0, [r4, #0]
 800abb6:	6061      	str	r1, [r4, #4]
 800abb8:	60a2      	str	r2, [r4, #8]
 800abba:	60e3      	str	r3, [r4, #12]
			break;
 800abbc:	f011 bcc4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 262 :
			strcpy(p->name,"SZECHUAN");
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800abc6:	4952      	ldr	r1, [pc, #328]	; (800ad10 <problem_fetch+0x9628>)
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	cb03      	ldmia	r3!, {r0, r1}
 800abce:	6010      	str	r0, [r2, #0]
 800abd0:	6051      	str	r1, [r2, #4]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800abdc:	4a3b      	ldr	r2, [pc, #236]	; (800accc <problem_fetch+0x95e4>)
 800abde:	8811      	ldrh	r1, [r2, #0]
 800abe0:	7892      	ldrb	r2, [r2, #2]
 800abe2:	8019      	strh	r1, [r3, #0]
 800abe4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2209      	movs	r2, #9
 800abea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,A,C,E,A,D,G,I");
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	33a4      	adds	r3, #164	; 0xa4
 800abf0:	4a48      	ldr	r2, [pc, #288]	; (800ad14 <problem_fetch+0x962c>)
 800abf2:	461d      	mov	r5, r3
 800abf4:	4614      	mov	r4, r2
 800abf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abf8:	6028      	str	r0, [r5, #0]
 800abfa:	6069      	str	r1, [r5, #4]
 800abfc:	60aa      	str	r2, [r5, #8]
 800abfe:	60eb      	str	r3, [r5, #12]
 800ac00:	8823      	ldrh	r3, [r4, #0]
 800ac02:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,9,5,12,14,15,17,18");
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	3304      	adds	r3, #4
 800ac08:	4a43      	ldr	r2, [pc, #268]	; (800ad18 <problem_fetch+0x9630>)
 800ac0a:	461c      	mov	r4, r3
 800ac0c:	4615      	mov	r5, r2
 800ac0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac10:	6020      	str	r0, [r4, #0]
 800ac12:	6061      	str	r1, [r4, #4]
 800ac14:	60a2      	str	r2, [r4, #8]
 800ac16:	60e3      	str	r3, [r4, #12]
 800ac18:	6828      	ldr	r0, [r5, #0]
 800ac1a:	6120      	str	r0, [r4, #16]
 800ac1c:	88ab      	ldrh	r3, [r5, #4]
 800ac1e:	79aa      	ldrb	r2, [r5, #6]
 800ac20:	82a3      	strh	r3, [r4, #20]
 800ac22:	4613      	mov	r3, r2
 800ac24:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ac2c:	4a3b      	ldr	r2, [pc, #236]	; (800ad1c <problem_fetch+0x9634>)
 800ac2e:	461d      	mov	r5, r3
 800ac30:	4614      	mov	r4, r2
 800ac32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac34:	6028      	str	r0, [r5, #0]
 800ac36:	6069      	str	r1, [r5, #4]
 800ac38:	60aa      	str	r2, [r5, #8]
 800ac3a:	60eb      	str	r3, [r5, #12]
 800ac3c:	8823      	ldrh	r3, [r4, #0]
 800ac3e:	822b      	strh	r3, [r5, #16]
			break;
 800ac40:	f011 bc82 	b.w	801c548 <problem_fetch+0x1ae60>
		case 263 :
			strcpy(p->name,"BLACK.HO");
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ac4a:	4935      	ldr	r1, [pc, #212]	; (800ad20 <problem_fetch+0x9638>)
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	460b      	mov	r3, r1
 800ac50:	cb03      	ldmia	r3!, {r0, r1}
 800ac52:	6010      	str	r0, [r2, #0]
 800ac54:	6051      	str	r1, [r2, #4]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ac60:	4a30      	ldr	r2, [pc, #192]	; (800ad24 <problem_fetch+0x963c>)
 800ac62:	8811      	ldrh	r1, [r2, #0]
 800ac64:	7892      	ldrb	r2, [r2, #2]
 800ac66:	8019      	strh	r1, [r3, #0]
 800ac68:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2209      	movs	r2, #9
 800ac6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,A,E,I,A,E,G,H");
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	33a4      	adds	r3, #164	; 0xa4
 800ac74:	4a2c      	ldr	r2, [pc, #176]	; (800ad28 <problem_fetch+0x9640>)
 800ac76:	461d      	mov	r5, r3
 800ac78:	4614      	mov	r4, r2
 800ac7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac7c:	6028      	str	r0, [r5, #0]
 800ac7e:	6069      	str	r1, [r5, #4]
 800ac80:	60aa      	str	r2, [r5, #8]
 800ac82:	60eb      	str	r3, [r5, #12]
 800ac84:	8823      	ldrh	r3, [r4, #0]
 800ac86:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,9,9,18,14,16,17,12");
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	3304      	adds	r3, #4
 800ac8c:	4a27      	ldr	r2, [pc, #156]	; (800ad2c <problem_fetch+0x9644>)
 800ac8e:	461c      	mov	r4, r3
 800ac90:	4615      	mov	r5, r2
 800ac92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac94:	6020      	str	r0, [r4, #0]
 800ac96:	6061      	str	r1, [r4, #4]
 800ac98:	60a2      	str	r2, [r4, #8]
 800ac9a:	60e3      	str	r3, [r4, #12]
 800ac9c:	6828      	ldr	r0, [r5, #0]
 800ac9e:	6120      	str	r0, [r4, #16]
 800aca0:	88ab      	ldrh	r3, [r5, #4]
 800aca2:	79aa      	ldrb	r2, [r5, #6]
 800aca4:	82a3      	strh	r3, [r4, #20]
 800aca6:	4613      	mov	r3, r2
 800aca8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,e,d,d,d,d");
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800acb0:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <problem_fetch+0x9648>)
 800acb2:	461d      	mov	r5, r3
 800acb4:	4614      	mov	r4, r2
 800acb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acb8:	6028      	str	r0, [r5, #0]
 800acba:	6069      	str	r1, [r5, #4]
 800acbc:	60aa      	str	r2, [r5, #8]
 800acbe:	60eb      	str	r3, [r5, #12]
 800acc0:	8823      	ldrh	r3, [r4, #0]
 800acc2:	822b      	strh	r3, [r5, #16]
			break;
 800acc4:	f011 bc40 	b.w	801c548 <problem_fetch+0x1ae60>
 800acc8:	08026de8 	.word	0x08026de8
 800accc:	08024054 	.word	0x08024054
 800acd0:	08026e00 	.word	0x08026e00
 800acd4:	08026e0c 	.word	0x08026e0c
 800acd8:	08023cf8 	.word	0x08023cf8
 800acdc:	08026e1c 	.word	0x08026e1c
 800ace0:	08026e30 	.word	0x08026e30
 800ace4:	08026e38 	.word	0x08026e38
 800ace8:	08023ab0 	.word	0x08023ab0
 800acec:	08026e44 	.word	0x08026e44
 800acf0:	0802395c 	.word	0x0802395c
 800acf4:	08026e50 	.word	0x08026e50
 800acf8:	08026e5c 	.word	0x08026e5c
 800acfc:	08026e6c 	.word	0x08026e6c
 800ad00:	08023afc 	.word	0x08023afc
 800ad04:	08026e78 	.word	0x08026e78
 800ad08:	08026e88 	.word	0x08026e88
 800ad0c:	08023b6c 	.word	0x08023b6c
 800ad10:	08026e9c 	.word	0x08026e9c
 800ad14:	08026ea8 	.word	0x08026ea8
 800ad18:	08026ebc 	.word	0x08026ebc
 800ad1c:	08025814 	.word	0x08025814
 800ad20:	08026ed4 	.word	0x08026ed4
 800ad24:	08024190 	.word	0x08024190
 800ad28:	08026ee0 	.word	0x08026ee0
 800ad2c:	08026ef4 	.word	0x08026ef4
 800ad30:	08026b04 	.word	0x08026b04
		case 264 :
			strcpy(p->name,"SLIPPERY WHEN WET");
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ad3a:	4ac4      	ldr	r2, [pc, #784]	; (800b04c <problem_fetch+0x9964>)
 800ad3c:	461d      	mov	r5, r3
 800ad3e:	4614      	mov	r4, r2
 800ad40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad42:	6028      	str	r0, [r5, #0]
 800ad44:	6069      	str	r1, [r5, #4]
 800ad46:	60aa      	str	r2, [r5, #8]
 800ad48:	60eb      	str	r3, [r5, #12]
 800ad4a:	8823      	ldrh	r3, [r4, #0]
 800ad4c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ad54:	4abe      	ldr	r2, [pc, #760]	; (800b050 <problem_fetch+0x9968>)
 800ad56:	8811      	ldrh	r1, [r2, #0]
 800ad58:	7892      	ldrb	r2, [r2, #2]
 800ad5a:	8019      	strh	r1, [r3, #0]
 800ad5c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2207      	movs	r2, #7
 800ad62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,D,D,A");
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	33a4      	adds	r3, #164	; 0xa4
 800ad68:	4aba      	ldr	r2, [pc, #744]	; (800b054 <problem_fetch+0x996c>)
 800ad6a:	461c      	mov	r4, r3
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ad70:	6020      	str	r0, [r4, #0]
 800ad72:	6061      	str	r1, [r4, #4]
 800ad74:	60a2      	str	r2, [r4, #8]
 800ad76:	881b      	ldrh	r3, [r3, #0]
 800ad78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,14,15,18,18");
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	3304      	adds	r3, #4
 800ad7e:	4ab6      	ldr	r2, [pc, #728]	; (800b058 <problem_fetch+0x9970>)
 800ad80:	461d      	mov	r5, r3
 800ad82:	4614      	mov	r4, r2
 800ad84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad86:	6028      	str	r0, [r5, #0]
 800ad88:	6069      	str	r1, [r5, #4]
 800ad8a:	60aa      	str	r2, [r5, #8]
 800ad8c:	60eb      	str	r3, [r5, #12]
 800ad8e:	8823      	ldrh	r3, [r4, #0]
 800ad90:	78a2      	ldrb	r2, [r4, #2]
 800ad92:	822b      	strh	r3, [r5, #16]
 800ad94:	4613      	mov	r3, r2
 800ad96:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,e,e");
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ad9e:	4aaf      	ldr	r2, [pc, #700]	; (800b05c <problem_fetch+0x9974>)
 800ada0:	461c      	mov	r4, r3
 800ada2:	4613      	mov	r3, r2
 800ada4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ada6:	6020      	str	r0, [r4, #0]
 800ada8:	6061      	str	r1, [r4, #4]
 800adaa:	60a2      	str	r2, [r4, #8]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	81a3      	strh	r3, [r4, #12]
			break;
 800adb0:	f011 bbca 	b.w	801c548 <problem_fetch+0x1ae60>
		case 265 :
			strcpy(p->name,"UNSULLIED");
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800adba:	49a9      	ldr	r1, [pc, #676]	; (800b060 <problem_fetch+0x9978>)
 800adbc:	461a      	mov	r2, r3
 800adbe:	460b      	mov	r3, r1
 800adc0:	cb03      	ldmia	r3!, {r0, r1}
 800adc2:	6010      	str	r0, [r2, #0]
 800adc4:	6051      	str	r1, [r2, #4]
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800add0:	4a9f      	ldr	r2, [pc, #636]	; (800b050 <problem_fetch+0x9968>)
 800add2:	8811      	ldrh	r1, [r2, #0]
 800add4:	7892      	ldrb	r2, [r2, #2]
 800add6:	8019      	strh	r1, [r3, #0]
 800add8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2204      	movs	r2, #4
 800adde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,D");
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	33a4      	adds	r3, #164	; 0xa4
 800ade4:	499f      	ldr	r1, [pc, #636]	; (800b064 <problem_fetch+0x997c>)
 800ade6:	461a      	mov	r2, r3
 800ade8:	460b      	mov	r3, r1
 800adea:	cb03      	ldmia	r3!, {r0, r1}
 800adec:	6010      	str	r0, [r2, #0]
 800adee:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	3304      	adds	r3, #4
 800adf4:	499c      	ldr	r1, [pc, #624]	; (800b068 <problem_fetch+0x9980>)
 800adf6:	461a      	mov	r2, r3
 800adf8:	460b      	mov	r3, r1
 800adfa:	cb03      	ldmia	r3!, {r0, r1}
 800adfc:	6010      	str	r0, [r2, #0]
 800adfe:	6051      	str	r1, [r2, #4]
 800ae00:	8819      	ldrh	r1, [r3, #0]
 800ae02:	789b      	ldrb	r3, [r3, #2]
 800ae04:	8111      	strh	r1, [r2, #8]
 800ae06:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ae0e:	4997      	ldr	r1, [pc, #604]	; (800b06c <problem_fetch+0x9984>)
 800ae10:	461a      	mov	r2, r3
 800ae12:	460b      	mov	r3, r1
 800ae14:	cb03      	ldmia	r3!, {r0, r1}
 800ae16:	6010      	str	r0, [r2, #0]
 800ae18:	6051      	str	r1, [r2, #4]
			break;
 800ae1a:	f011 bb95 	b.w	801c548 <problem_fetch+0x1ae60>
		case 266 :
			strcpy(p->name,"HEAVY LIFTING");
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae24:	4a92      	ldr	r2, [pc, #584]	; (800b070 <problem_fetch+0x9988>)
 800ae26:	461c      	mov	r4, r3
 800ae28:	4613      	mov	r3, r2
 800ae2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae2c:	6020      	str	r0, [r4, #0]
 800ae2e:	6061      	str	r1, [r4, #4]
 800ae30:	60a2      	str	r2, [r4, #8]
 800ae32:	881b      	ldrh	r3, [r3, #0]
 800ae34:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ae3c:	4a8d      	ldr	r2, [pc, #564]	; (800b074 <problem_fetch+0x998c>)
 800ae3e:	6810      	ldr	r0, [r2, #0]
 800ae40:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2206      	movs	r2, #6
 800ae46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,G,D,D");
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	33a4      	adds	r3, #164	; 0xa4
 800ae4c:	4a8a      	ldr	r2, [pc, #552]	; (800b078 <problem_fetch+0x9990>)
 800ae4e:	461c      	mov	r4, r3
 800ae50:	4613      	mov	r3, r2
 800ae52:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae54:	6020      	str	r0, [r4, #0]
 800ae56:	6061      	str	r1, [r4, #4]
 800ae58:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,10,14,15,18");
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	4a87      	ldr	r2, [pc, #540]	; (800b07c <problem_fetch+0x9994>)
 800ae60:	461c      	mov	r4, r3
 800ae62:	4615      	mov	r5, r2
 800ae64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	6061      	str	r1, [r4, #4]
 800ae6a:	60a2      	str	r2, [r4, #8]
 800ae6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ae74:	4a82      	ldr	r2, [pc, #520]	; (800b080 <problem_fetch+0x9998>)
 800ae76:	461c      	mov	r4, r3
 800ae78:	4613      	mov	r3, r2
 800ae7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ae7c:	6020      	str	r0, [r4, #0]
 800ae7e:	6061      	str	r1, [r4, #4]
 800ae80:	60a2      	str	r2, [r4, #8]
			break;
 800ae82:	f011 bb61 	b.w	801c548 <problem_fetch+0x1ae60>
		case 267 :
			strcpy(p->name,"SOFA KING SNAKED");
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae8c:	4a7d      	ldr	r2, [pc, #500]	; (800b084 <problem_fetch+0x999c>)
 800ae8e:	461d      	mov	r5, r3
 800ae90:	4614      	mov	r4, r2
 800ae92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ae94:	6028      	str	r0, [r5, #0]
 800ae96:	6069      	str	r1, [r5, #4]
 800ae98:	60aa      	str	r2, [r5, #8]
 800ae9a:	60eb      	str	r3, [r5, #12]
 800ae9c:	7823      	ldrb	r3, [r4, #0]
 800ae9e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800aea6:	4a78      	ldr	r2, [pc, #480]	; (800b088 <problem_fetch+0x99a0>)
 800aea8:	8811      	ldrh	r1, [r2, #0]
 800aeaa:	7892      	ldrb	r2, [r2, #2]
 800aeac:	8019      	strh	r1, [r3, #0]
 800aeae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2206      	movs	r2, #6
 800aeb4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,D,I,D");
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	33a4      	adds	r3, #164	; 0xa4
 800aeba:	4a74      	ldr	r2, [pc, #464]	; (800b08c <problem_fetch+0x99a4>)
 800aebc:	461c      	mov	r4, r3
 800aebe:	4613      	mov	r3, r2
 800aec0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aec2:	6020      	str	r0, [r4, #0]
 800aec4:	6061      	str	r1, [r4, #4]
 800aec6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,11,14,18");
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3304      	adds	r3, #4
 800aecc:	4a70      	ldr	r2, [pc, #448]	; (800b090 <problem_fetch+0x99a8>)
 800aece:	461c      	mov	r4, r3
 800aed0:	4615      	mov	r5, r2
 800aed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aed4:	6020      	str	r0, [r4, #0]
 800aed6:	6061      	str	r1, [r4, #4]
 800aed8:	60a2      	str	r2, [r4, #8]
 800aeda:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800aee2:	4a6c      	ldr	r2, [pc, #432]	; (800b094 <problem_fetch+0x99ac>)
 800aee4:	461c      	mov	r4, r3
 800aee6:	4613      	mov	r3, r2
 800aee8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800aeea:	6020      	str	r0, [r4, #0]
 800aeec:	6061      	str	r1, [r4, #4]
 800aeee:	60a2      	str	r2, [r4, #8]
			break;
 800aef0:	f011 bb2a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 268 :
			strcpy(p->name,"SOFA KING JUGGY");
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800aefa:	4a67      	ldr	r2, [pc, #412]	; (800b098 <problem_fetch+0x99b0>)
 800aefc:	461c      	mov	r4, r3
 800aefe:	4615      	mov	r5, r2
 800af00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af02:	6020      	str	r0, [r4, #0]
 800af04:	6061      	str	r1, [r4, #4]
 800af06:	60a2      	str	r2, [r4, #8]
 800af08:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af10:	4a62      	ldr	r2, [pc, #392]	; (800b09c <problem_fetch+0x99b4>)
 800af12:	6810      	ldr	r0, [r2, #0]
 800af14:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2205      	movs	r2, #5
 800af1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,H,D");
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	33a4      	adds	r3, #164	; 0xa4
 800af20:	495f      	ldr	r1, [pc, #380]	; (800b0a0 <problem_fetch+0x99b8>)
 800af22:	461a      	mov	r2, r3
 800af24:	460b      	mov	r3, r1
 800af26:	cb03      	ldmia	r3!, {r0, r1}
 800af28:	6010      	str	r0, [r2, #0]
 800af2a:	6051      	str	r1, [r2, #4]
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,12,16,18");
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	4a5b      	ldr	r2, [pc, #364]	; (800b0a4 <problem_fetch+0x99bc>)
 800af36:	461c      	mov	r4, r3
 800af38:	4613      	mov	r3, r2
 800af3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800af3c:	6020      	str	r0, [r4, #0]
 800af3e:	6061      	str	r1, [r4, #4]
 800af40:	60a2      	str	r2, [r4, #8]
 800af42:	881b      	ldrh	r3, [r3, #0]
 800af44:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800af4c:	4956      	ldr	r1, [pc, #344]	; (800b0a8 <problem_fetch+0x99c0>)
 800af4e:	461a      	mov	r2, r3
 800af50:	460b      	mov	r3, r1
 800af52:	cb03      	ldmia	r3!, {r0, r1}
 800af54:	6010      	str	r0, [r2, #0]
 800af56:	6051      	str	r1, [r2, #4]
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	8113      	strh	r3, [r2, #8]
			break;
 800af5c:	f011 baf4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 269 :
			strcpy(p->name,"THE PEOPLE'S HEEL HOOK");
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800af66:	4a51      	ldr	r2, [pc, #324]	; (800b0ac <problem_fetch+0x99c4>)
 800af68:	461c      	mov	r4, r3
 800af6a:	4615      	mov	r5, r2
 800af6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af6e:	6020      	str	r0, [r4, #0]
 800af70:	6061      	str	r1, [r4, #4]
 800af72:	60a2      	str	r2, [r4, #8]
 800af74:	60e3      	str	r3, [r4, #12]
 800af76:	6828      	ldr	r0, [r5, #0]
 800af78:	6120      	str	r0, [r4, #16]
 800af7a:	88ab      	ldrh	r3, [r5, #4]
 800af7c:	79aa      	ldrb	r2, [r5, #6]
 800af7e:	82a3      	strh	r3, [r4, #20]
 800af80:	4613      	mov	r3, r2
 800af82:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800af8a:	4a31      	ldr	r2, [pc, #196]	; (800b050 <problem_fetch+0x9968>)
 800af8c:	8811      	ldrh	r1, [r2, #0]
 800af8e:	7892      	ldrb	r2, [r2, #2]
 800af90:	8019      	strh	r1, [r3, #0]
 800af92:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2205      	movs	r2, #5
 800af98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	33a4      	adds	r3, #164	; 0xa4
 800af9e:	4944      	ldr	r1, [pc, #272]	; (800b0b0 <problem_fetch+0x99c8>)
 800afa0:	461a      	mov	r2, r3
 800afa2:	460b      	mov	r3, r1
 800afa4:	cb03      	ldmia	r3!, {r0, r1}
 800afa6:	6010      	str	r0, [r2, #0]
 800afa8:	6051      	str	r1, [r2, #4]
 800afaa:	881b      	ldrh	r3, [r3, #0]
 800afac:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,14,18");
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4a40      	ldr	r2, [pc, #256]	; (800b0b4 <problem_fetch+0x99cc>)
 800afb4:	461c      	mov	r4, r3
 800afb6:	4613      	mov	r3, r2
 800afb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800afba:	6020      	str	r0, [r4, #0]
 800afbc:	6061      	str	r1, [r4, #4]
 800afbe:	60a2      	str	r2, [r4, #8]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800afca:	4937      	ldr	r1, [pc, #220]	; (800b0a8 <problem_fetch+0x99c0>)
 800afcc:	461a      	mov	r2, r3
 800afce:	460b      	mov	r3, r1
 800afd0:	cb03      	ldmia	r3!, {r0, r1}
 800afd2:	6010      	str	r0, [r2, #0]
 800afd4:	6051      	str	r1, [r2, #4]
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	8113      	strh	r3, [r2, #8]
			break;
 800afda:	f011 bab5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 270 :
			strcpy(p->name,"ZIO BENNY");
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800afe4:	4934      	ldr	r1, [pc, #208]	; (800b0b8 <problem_fetch+0x99d0>)
 800afe6:	461a      	mov	r2, r3
 800afe8:	460b      	mov	r3, r1
 800afea:	cb03      	ldmia	r3!, {r0, r1}
 800afec:	6010      	str	r0, [r2, #0]
 800afee:	6051      	str	r1, [r2, #4]
 800aff0:	881b      	ldrh	r3, [r3, #0]
 800aff2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800affa:	4a1e      	ldr	r2, [pc, #120]	; (800b074 <problem_fetch+0x998c>)
 800affc:	6810      	ldr	r0, [r2, #0]
 800affe:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2205      	movs	r2, #5
 800b004:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,D");
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	33a4      	adds	r3, #164	; 0xa4
 800b00a:	492c      	ldr	r1, [pc, #176]	; (800b0bc <problem_fetch+0x99d4>)
 800b00c:	461a      	mov	r2, r3
 800b00e:	460b      	mov	r3, r1
 800b010:	cb03      	ldmia	r3!, {r0, r1}
 800b012:	6010      	str	r0, [r2, #0]
 800b014:	6051      	str	r1, [r2, #4]
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4a28      	ldr	r2, [pc, #160]	; (800b0c0 <problem_fetch+0x99d8>)
 800b020:	461c      	mov	r4, r3
 800b022:	4613      	mov	r3, r2
 800b024:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b026:	6020      	str	r0, [r4, #0]
 800b028:	6061      	str	r1, [r4, #4]
 800b02a:	60a2      	str	r2, [r4, #8]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b036:	491c      	ldr	r1, [pc, #112]	; (800b0a8 <problem_fetch+0x99c0>)
 800b038:	461a      	mov	r2, r3
 800b03a:	460b      	mov	r3, r1
 800b03c:	cb03      	ldmia	r3!, {r0, r1}
 800b03e:	6010      	str	r0, [r2, #0]
 800b040:	6051      	str	r1, [r2, #4]
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	8113      	strh	r3, [r2, #8]
			break;
 800b046:	f011 ba7f 	b.w	801c548 <problem_fetch+0x1ae60>
 800b04a:	bf00      	nop
 800b04c:	08026f0c 	.word	0x08026f0c
 800b050:	0802391c 	.word	0x0802391c
 800b054:	08026f20 	.word	0x08026f20
 800b058:	08026f30 	.word	0x08026f30
 800b05c:	08026f44 	.word	0x08026f44
 800b060:	08026f54 	.word	0x08026f54
 800b064:	08026f60 	.word	0x08026f60
 800b068:	08026f68 	.word	0x08026f68
 800b06c:	08023ab0 	.word	0x08023ab0
 800b070:	08026f74 	.word	0x08026f74
 800b074:	08023afc 	.word	0x08023afc
 800b078:	08026f84 	.word	0x08026f84
 800b07c:	08026f90 	.word	0x08026f90
 800b080:	0802393c 	.word	0x0802393c
 800b084:	08026fa0 	.word	0x08026fa0
 800b088:	08024054 	.word	0x08024054
 800b08c:	08026fb4 	.word	0x08026fb4
 800b090:	08026fc0 	.word	0x08026fc0
 800b094:	08023cf8 	.word	0x08023cf8
 800b098:	08026fd0 	.word	0x08026fd0
 800b09c:	08023a98 	.word	0x08023a98
 800b0a0:	08026fe0 	.word	0x08026fe0
 800b0a4:	080262c0 	.word	0x080262c0
 800b0a8:	08023e28 	.word	0x08023e28
 800b0ac:	08026fec 	.word	0x08026fec
 800b0b0:	08027004 	.word	0x08027004
 800b0b4:	08027010 	.word	0x08027010
 800b0b8:	08027020 	.word	0x08027020
 800b0bc:	0802702c 	.word	0x0802702c
 800b0c0:	08025598 	.word	0x08025598
		case 271 :
			strcpy(p->name,"ONE DAY");
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b0ca:	49a9      	ldr	r1, [pc, #676]	; (800b370 <problem_fetch+0x9c88>)
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	cb03      	ldmia	r3!, {r0, r1}
 800b0d2:	6010      	str	r0, [r2, #0]
 800b0d4:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b0dc:	4aa5      	ldr	r2, [pc, #660]	; (800b374 <problem_fetch+0x9c8c>)
 800b0de:	6810      	ldr	r0, [r2, #0]
 800b0e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2207      	movs	r2, #7
 800b0e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,B,H,C,I");
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	33a4      	adds	r3, #164	; 0xa4
 800b0ec:	4aa2      	ldr	r2, [pc, #648]	; (800b378 <problem_fetch+0x9c90>)
 800b0ee:	461c      	mov	r4, r3
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b0f4:	6020      	str	r0, [r4, #0]
 800b0f6:	6061      	str	r1, [r4, #4]
 800b0f8:	60a2      	str	r2, [r4, #8]
 800b0fa:	881b      	ldrh	r3, [r3, #0]
 800b0fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,10,13,13,18");
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3304      	adds	r3, #4
 800b102:	4a9e      	ldr	r2, [pc, #632]	; (800b37c <problem_fetch+0x9c94>)
 800b104:	461d      	mov	r5, r3
 800b106:	4614      	mov	r4, r2
 800b108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b10a:	6028      	str	r0, [r5, #0]
 800b10c:	6069      	str	r1, [r5, #4]
 800b10e:	60aa      	str	r2, [r5, #8]
 800b110:	60eb      	str	r3, [r5, #12]
 800b112:	8823      	ldrh	r3, [r4, #0]
 800b114:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b11c:	4a98      	ldr	r2, [pc, #608]	; (800b380 <problem_fetch+0x9c98>)
 800b11e:	461c      	mov	r4, r3
 800b120:	4613      	mov	r3, r2
 800b122:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b124:	6020      	str	r0, [r4, #0]
 800b126:	6061      	str	r1, [r4, #4]
 800b128:	60a2      	str	r2, [r4, #8]
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	81a3      	strh	r3, [r4, #12]
			break;
 800b12e:	f011 ba0b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 272 :
			strcpy(p->name,"HEART OF THE SEA");
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b138:	4a92      	ldr	r2, [pc, #584]	; (800b384 <problem_fetch+0x9c9c>)
 800b13a:	461d      	mov	r5, r3
 800b13c:	4614      	mov	r4, r2
 800b13e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b140:	6028      	str	r0, [r5, #0]
 800b142:	6069      	str	r1, [r5, #4]
 800b144:	60aa      	str	r2, [r5, #8]
 800b146:	60eb      	str	r3, [r5, #12]
 800b148:	7823      	ldrb	r3, [r4, #0]
 800b14a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b152:	4a8d      	ldr	r2, [pc, #564]	; (800b388 <problem_fetch+0x9ca0>)
 800b154:	8811      	ldrh	r1, [r2, #0]
 800b156:	7892      	ldrb	r2, [r2, #2]
 800b158:	8019      	strh	r1, [r3, #0]
 800b15a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2207      	movs	r2, #7
 800b160:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,B,F,A,D");
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	33a4      	adds	r3, #164	; 0xa4
 800b166:	4a89      	ldr	r2, [pc, #548]	; (800b38c <problem_fetch+0x9ca4>)
 800b168:	461c      	mov	r4, r3
 800b16a:	4613      	mov	r3, r2
 800b16c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b16e:	6020      	str	r0, [r4, #0]
 800b170:	6061      	str	r1, [r4, #4]
 800b172:	60a2      	str	r2, [r4, #8]
 800b174:	881b      	ldrh	r3, [r3, #0]
 800b176:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,6,11,14,18");
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4a84      	ldr	r2, [pc, #528]	; (800b390 <problem_fetch+0x9ca8>)
 800b17e:	461d      	mov	r5, r3
 800b180:	4614      	mov	r4, r2
 800b182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b184:	6028      	str	r0, [r5, #0]
 800b186:	6069      	str	r1, [r5, #4]
 800b188:	60aa      	str	r2, [r5, #8]
 800b18a:	60eb      	str	r3, [r5, #12]
 800b18c:	7823      	ldrb	r3, [r4, #0]
 800b18e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,s,d,d,e");
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b196:	4a7f      	ldr	r2, [pc, #508]	; (800b394 <problem_fetch+0x9cac>)
 800b198:	461c      	mov	r4, r3
 800b19a:	4613      	mov	r3, r2
 800b19c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b19e:	6020      	str	r0, [r4, #0]
 800b1a0:	6061      	str	r1, [r4, #4]
 800b1a2:	60a2      	str	r2, [r4, #8]
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	81a3      	strh	r3, [r4, #12]
			break;
 800b1a8:	f011 b9ce 	b.w	801c548 <problem_fetch+0x1ae60>
		case 273 :
			strcpy(p->name,"SNEAKER JUICE DEUX");
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b1b2:	4a79      	ldr	r2, [pc, #484]	; (800b398 <problem_fetch+0x9cb0>)
 800b1b4:	461d      	mov	r5, r3
 800b1b6:	4614      	mov	r4, r2
 800b1b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b1ba:	6028      	str	r0, [r5, #0]
 800b1bc:	6069      	str	r1, [r5, #4]
 800b1be:	60aa      	str	r2, [r5, #8]
 800b1c0:	60eb      	str	r3, [r5, #12]
 800b1c2:	8823      	ldrh	r3, [r4, #0]
 800b1c4:	78a2      	ldrb	r2, [r4, #2]
 800b1c6:	822b      	strh	r3, [r5, #16]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C+");
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b1d2:	4a72      	ldr	r2, [pc, #456]	; (800b39c <problem_fetch+0x9cb4>)
 800b1d4:	6810      	ldr	r0, [r2, #0]
 800b1d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2206      	movs	r2, #6
 800b1dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,F,K,I");
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	33a4      	adds	r3, #164	; 0xa4
 800b1e2:	4a6f      	ldr	r2, [pc, #444]	; (800b3a0 <problem_fetch+0x9cb8>)
 800b1e4:	461c      	mov	r4, r3
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b1ea:	6020      	str	r0, [r4, #0]
 800b1ec:	6061      	str	r1, [r4, #4]
 800b1ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,10,13,14,18");
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4a6b      	ldr	r2, [pc, #428]	; (800b3a4 <problem_fetch+0x9cbc>)
 800b1f6:	461c      	mov	r4, r3
 800b1f8:	4615      	mov	r5, r2
 800b1fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b1fc:	6020      	str	r0, [r4, #0]
 800b1fe:	6061      	str	r1, [r4, #4]
 800b200:	60a2      	str	r2, [r4, #8]
 800b202:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b20a:	4a67      	ldr	r2, [pc, #412]	; (800b3a8 <problem_fetch+0x9cc0>)
 800b20c:	461c      	mov	r4, r3
 800b20e:	4613      	mov	r3, r2
 800b210:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	6061      	str	r1, [r4, #4]
 800b216:	60a2      	str	r2, [r4, #8]
			break;
 800b218:	f011 b996 	b.w	801c548 <problem_fetch+0x1ae60>
		case 274 :
			strcpy(p->name,"THREE OF CUPS");
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b222:	4a62      	ldr	r2, [pc, #392]	; (800b3ac <problem_fetch+0x9cc4>)
 800b224:	461c      	mov	r4, r3
 800b226:	4613      	mov	r3, r2
 800b228:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b22a:	6020      	str	r0, [r4, #0]
 800b22c:	6061      	str	r1, [r4, #4]
 800b22e:	60a2      	str	r2, [r4, #8]
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b23a:	4a53      	ldr	r2, [pc, #332]	; (800b388 <problem_fetch+0x9ca0>)
 800b23c:	8811      	ldrh	r1, [r2, #0]
 800b23e:	7892      	ldrb	r2, [r2, #2]
 800b240:	8019      	strh	r1, [r3, #0]
 800b242:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2205      	movs	r2, #5
 800b248:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,F,A,D");
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	33a4      	adds	r3, #164	; 0xa4
 800b24e:	4958      	ldr	r1, [pc, #352]	; (800b3b0 <problem_fetch+0x9cc8>)
 800b250:	461a      	mov	r2, r3
 800b252:	460b      	mov	r3, r1
 800b254:	cb03      	ldmia	r3!, {r0, r1}
 800b256:	6010      	str	r0, [r2, #0]
 800b258:	6051      	str	r1, [r2, #4]
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3304      	adds	r3, #4
 800b262:	4a54      	ldr	r2, [pc, #336]	; (800b3b4 <problem_fetch+0x9ccc>)
 800b264:	461c      	mov	r4, r3
 800b266:	4613      	mov	r3, r2
 800b268:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b26a:	6020      	str	r0, [r4, #0]
 800b26c:	6061      	str	r1, [r4, #4]
 800b26e:	60a2      	str	r2, [r4, #8]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b27a:	494f      	ldr	r1, [pc, #316]	; (800b3b8 <problem_fetch+0x9cd0>)
 800b27c:	461a      	mov	r2, r3
 800b27e:	460b      	mov	r3, r1
 800b280:	cb03      	ldmia	r3!, {r0, r1}
 800b282:	6010      	str	r0, [r2, #0]
 800b284:	6051      	str	r1, [r2, #4]
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	8113      	strh	r3, [r2, #8]
			break;
 800b28a:	f011 b95d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 275 :
			strcpy(p->name,"BRICK TAMLAND");
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b294:	4a49      	ldr	r2, [pc, #292]	; (800b3bc <problem_fetch+0x9cd4>)
 800b296:	461c      	mov	r4, r3
 800b298:	4613      	mov	r3, r2
 800b29a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b29c:	6020      	str	r0, [r4, #0]
 800b29e:	6061      	str	r1, [r4, #4]
 800b2a0:	60a2      	str	r2, [r4, #8]
 800b2a2:	881b      	ldrh	r3, [r3, #0]
 800b2a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b2ac:	4a3b      	ldr	r2, [pc, #236]	; (800b39c <problem_fetch+0x9cb4>)
 800b2ae:	6810      	ldr	r0, [r2, #0]
 800b2b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,J,H,G,D,G");
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	33a4      	adds	r3, #164	; 0xa4
 800b2bc:	4a40      	ldr	r2, [pc, #256]	; (800b3c0 <problem_fetch+0x9cd8>)
 800b2be:	461c      	mov	r4, r3
 800b2c0:	4615      	mov	r5, r2
 800b2c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2c4:	6020      	str	r0, [r4, #0]
 800b2c6:	6061      	str	r1, [r4, #4]
 800b2c8:	60a2      	str	r2, [r4, #8]
 800b2ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,5,12,17,18,15");
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	4a3c      	ldr	r2, [pc, #240]	; (800b3c4 <problem_fetch+0x9cdc>)
 800b2d2:	461d      	mov	r5, r3
 800b2d4:	4614      	mov	r4, r2
 800b2d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b2d8:	6028      	str	r0, [r5, #0]
 800b2da:	6069      	str	r1, [r5, #4]
 800b2dc:	60aa      	str	r2, [r5, #8]
 800b2de:	60eb      	str	r3, [r5, #12]
 800b2e0:	6820      	ldr	r0, [r4, #0]
 800b2e2:	6128      	str	r0, [r5, #16]
 800b2e4:	7923      	ldrb	r3, [r4, #4]
 800b2e6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,d");
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b2ee:	4a36      	ldr	r2, [pc, #216]	; (800b3c8 <problem_fetch+0x9ce0>)
 800b2f0:	461c      	mov	r4, r3
 800b2f2:	4615      	mov	r5, r2
 800b2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2f6:	6020      	str	r0, [r4, #0]
 800b2f8:	6061      	str	r1, [r4, #4]
 800b2fa:	60a2      	str	r2, [r4, #8]
 800b2fc:	60e3      	str	r3, [r4, #12]
			break;
 800b2fe:	f011 b923 	b.w	801c548 <problem_fetch+0x1ae60>
		case 276 :
			strcpy(p->name,"GET WITH IT");
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b308:	4a30      	ldr	r2, [pc, #192]	; (800b3cc <problem_fetch+0x9ce4>)
 800b30a:	461c      	mov	r4, r3
 800b30c:	4613      	mov	r3, r2
 800b30e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b310:	6020      	str	r0, [r4, #0]
 800b312:	6061      	str	r1, [r4, #4]
 800b314:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b31c:	4a1a      	ldr	r2, [pc, #104]	; (800b388 <problem_fetch+0x9ca0>)
 800b31e:	8811      	ldrh	r1, [r2, #0]
 800b320:	7892      	ldrb	r2, [r2, #2]
 800b322:	8019      	strh	r1, [r3, #0]
 800b324:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2206      	movs	r2, #6
 800b32a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,B,A,E,D,A");
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	33a4      	adds	r3, #164	; 0xa4
 800b330:	4a27      	ldr	r2, [pc, #156]	; (800b3d0 <problem_fetch+0x9ce8>)
 800b332:	461c      	mov	r4, r3
 800b334:	4613      	mov	r3, r2
 800b336:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b338:	6020      	str	r0, [r4, #0]
 800b33a:	6061      	str	r1, [r4, #4]
 800b33c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,12,14,8,18,9");
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	3304      	adds	r3, #4
 800b342:	4a24      	ldr	r2, [pc, #144]	; (800b3d4 <problem_fetch+0x9cec>)
 800b344:	461c      	mov	r4, r3
 800b346:	4613      	mov	r3, r2
 800b348:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b34a:	6020      	str	r0, [r4, #0]
 800b34c:	6061      	str	r1, [r4, #4]
 800b34e:	60a2      	str	r2, [r4, #8]
 800b350:	881a      	ldrh	r2, [r3, #0]
 800b352:	789b      	ldrb	r3, [r3, #2]
 800b354:	81a2      	strh	r2, [r4, #12]
 800b356:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,e,d");
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b35e:	4a1e      	ldr	r2, [pc, #120]	; (800b3d8 <problem_fetch+0x9cf0>)
 800b360:	461c      	mov	r4, r3
 800b362:	4613      	mov	r3, r2
 800b364:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b366:	6020      	str	r0, [r4, #0]
 800b368:	6061      	str	r1, [r4, #4]
 800b36a:	60a2      	str	r2, [r4, #8]
			break;
 800b36c:	f011 b8ec 	b.w	801c548 <problem_fetch+0x1ae60>
 800b370:	08027038 	.word	0x08027038
 800b374:	0802395c 	.word	0x0802395c
 800b378:	08027040 	.word	0x08027040
 800b37c:	08027050 	.word	0x08027050
 800b380:	08023ae4 	.word	0x08023ae4
 800b384:	08027064 	.word	0x08027064
 800b388:	0802391c 	.word	0x0802391c
 800b38c:	08027078 	.word	0x08027078
 800b390:	08027088 	.word	0x08027088
 800b394:	08025d5c 	.word	0x08025d5c
 800b398:	0802709c 	.word	0x0802709c
 800b39c:	080239f4 	.word	0x080239f4
 800b3a0:	080270b0 	.word	0x080270b0
 800b3a4:	080270bc 	.word	0x080270bc
 800b3a8:	08023cf8 	.word	0x08023cf8
 800b3ac:	080270cc 	.word	0x080270cc
 800b3b0:	080270dc 	.word	0x080270dc
 800b3b4:	080270e8 	.word	0x080270e8
 800b3b8:	08023e28 	.word	0x08023e28
 800b3bc:	080270f8 	.word	0x080270f8
 800b3c0:	08027108 	.word	0x08027108
 800b3c4:	08027118 	.word	0x08027118
 800b3c8:	080240ac 	.word	0x080240ac
 800b3cc:	08027130 	.word	0x08027130
 800b3d0:	0802713c 	.word	0x0802713c
 800b3d4:	08027148 	.word	0x08027148
 800b3d8:	080251d8 	.word	0x080251d8
		case 277 :
			strcpy(p->name,"MOTIVATION");
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b3e2:	49ab      	ldr	r1, [pc, #684]	; (800b690 <problem_fetch+0x9fa8>)
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	cb03      	ldmia	r3!, {r0, r1}
 800b3ea:	6010      	str	r0, [r2, #0]
 800b3ec:	6051      	str	r1, [r2, #4]
 800b3ee:	8819      	ldrh	r1, [r3, #0]
 800b3f0:	789b      	ldrb	r3, [r3, #2]
 800b3f2:	8111      	strh	r1, [r2, #8]
 800b3f4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b3fc:	4aa5      	ldr	r2, [pc, #660]	; (800b694 <problem_fetch+0x9fac>)
 800b3fe:	6810      	ldr	r0, [r2, #0]
 800b400:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2207      	movs	r2, #7
 800b406:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,E,E,B,B,D");
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	33a4      	adds	r3, #164	; 0xa4
 800b40c:	4aa2      	ldr	r2, [pc, #648]	; (800b698 <problem_fetch+0x9fb0>)
 800b40e:	461c      	mov	r4, r3
 800b410:	4613      	mov	r3, r2
 800b412:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b414:	6020      	str	r0, [r4, #0]
 800b416:	6061      	str	r1, [r4, #4]
 800b418:	60a2      	str	r2, [r4, #8]
 800b41a:	881b      	ldrh	r3, [r3, #0]
 800b41c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,12,15,18");
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	3304      	adds	r3, #4
 800b422:	4a9e      	ldr	r2, [pc, #632]	; (800b69c <problem_fetch+0x9fb4>)
 800b424:	461d      	mov	r5, r3
 800b426:	4614      	mov	r4, r2
 800b428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b42a:	6028      	str	r0, [r5, #0]
 800b42c:	6069      	str	r1, [r5, #4]
 800b42e:	60aa      	str	r2, [r5, #8]
 800b430:	60eb      	str	r3, [r5, #12]
 800b432:	8823      	ldrh	r3, [r4, #0]
 800b434:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b43c:	4a98      	ldr	r2, [pc, #608]	; (800b6a0 <problem_fetch+0x9fb8>)
 800b43e:	461c      	mov	r4, r3
 800b440:	4613      	mov	r3, r2
 800b442:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b444:	6020      	str	r0, [r4, #0]
 800b446:	6061      	str	r1, [r4, #4]
 800b448:	60a2      	str	r2, [r4, #8]
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	81a3      	strh	r3, [r4, #12]
			break;
 800b44e:	f011 b87b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 278 :
			strcpy(p->name,"SNEAKER JUICE");
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b458:	4a92      	ldr	r2, [pc, #584]	; (800b6a4 <problem_fetch+0x9fbc>)
 800b45a:	461c      	mov	r4, r3
 800b45c:	4613      	mov	r3, r2
 800b45e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b460:	6020      	str	r0, [r4, #0]
 800b462:	6061      	str	r1, [r4, #4]
 800b464:	60a2      	str	r2, [r4, #8]
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b470:	4a8d      	ldr	r2, [pc, #564]	; (800b6a8 <problem_fetch+0x9fc0>)
 800b472:	6810      	ldr	r0, [r2, #0]
 800b474:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2207      	movs	r2, #7
 800b47a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,K,H,I,F,I");
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	33a4      	adds	r3, #164	; 0xa4
 800b480:	4a8a      	ldr	r2, [pc, #552]	; (800b6ac <problem_fetch+0x9fc4>)
 800b482:	461c      	mov	r4, r3
 800b484:	4613      	mov	r3, r2
 800b486:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b488:	6020      	str	r0, [r4, #0]
 800b48a:	6061      	str	r1, [r4, #4]
 800b48c:	60a2      	str	r2, [r4, #8]
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,14,16,18,11,10");
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3304      	adds	r3, #4
 800b496:	4a86      	ldr	r2, [pc, #536]	; (800b6b0 <problem_fetch+0x9fc8>)
 800b498:	461d      	mov	r5, r3
 800b49a:	4614      	mov	r4, r2
 800b49c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b49e:	6028      	str	r0, [r5, #0]
 800b4a0:	6069      	str	r1, [r5, #4]
 800b4a2:	60aa      	str	r2, [r5, #8]
 800b4a4:	60eb      	str	r3, [r5, #12]
 800b4a6:	8823      	ldrh	r3, [r4, #0]
 800b4a8:	78a2      	ldrb	r2, [r4, #2]
 800b4aa:	822b      	strh	r3, [r5, #16]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,e,d,d");
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b4b6:	4a7f      	ldr	r2, [pc, #508]	; (800b6b4 <problem_fetch+0x9fcc>)
 800b4b8:	461c      	mov	r4, r3
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4be:	6020      	str	r0, [r4, #0]
 800b4c0:	6061      	str	r1, [r4, #4]
 800b4c2:	60a2      	str	r2, [r4, #8]
 800b4c4:	881b      	ldrh	r3, [r3, #0]
 800b4c6:	81a3      	strh	r3, [r4, #12]
			break;
 800b4c8:	f011 b83e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 279 :
			strcpy(p->name,"BUNNY GRAHAMS");
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b4d2:	4a79      	ldr	r2, [pc, #484]	; (800b6b8 <problem_fetch+0x9fd0>)
 800b4d4:	461c      	mov	r4, r3
 800b4d6:	4613      	mov	r3, r2
 800b4d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b4da:	6020      	str	r0, [r4, #0]
 800b4dc:	6061      	str	r1, [r4, #4]
 800b4de:	60a2      	str	r2, [r4, #8]
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b4ea:	4a6f      	ldr	r2, [pc, #444]	; (800b6a8 <problem_fetch+0x9fc0>)
 800b4ec:	6810      	ldr	r0, [r2, #0]
 800b4ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2207      	movs	r2, #7
 800b4f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,J,K,I,H");
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	33a4      	adds	r3, #164	; 0xa4
 800b4fa:	4a70      	ldr	r2, [pc, #448]	; (800b6bc <problem_fetch+0x9fd4>)
 800b4fc:	461c      	mov	r4, r3
 800b4fe:	4613      	mov	r3, r2
 800b500:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b502:	6020      	str	r0, [r4, #0]
 800b504:	6061      	str	r1, [r4, #4]
 800b506:	60a2      	str	r2, [r4, #8]
 800b508:	881b      	ldrh	r3, [r3, #0]
 800b50a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,13,16,18,8");
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	3304      	adds	r3, #4
 800b510:	4a6b      	ldr	r2, [pc, #428]	; (800b6c0 <problem_fetch+0x9fd8>)
 800b512:	461d      	mov	r5, r3
 800b514:	4614      	mov	r4, r2
 800b516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b518:	6028      	str	r0, [r5, #0]
 800b51a:	6069      	str	r1, [r5, #4]
 800b51c:	60aa      	str	r2, [r5, #8]
 800b51e:	60eb      	str	r3, [r5, #12]
 800b520:	8823      	ldrh	r3, [r4, #0]
 800b522:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,e,d");
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b52a:	4a66      	ldr	r2, [pc, #408]	; (800b6c4 <problem_fetch+0x9fdc>)
 800b52c:	461c      	mov	r4, r3
 800b52e:	4613      	mov	r3, r2
 800b530:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b532:	6020      	str	r0, [r4, #0]
 800b534:	6061      	str	r1, [r4, #4]
 800b536:	60a2      	str	r2, [r4, #8]
 800b538:	881b      	ldrh	r3, [r3, #0]
 800b53a:	81a3      	strh	r3, [r4, #12]
			break;
 800b53c:	f011 b804 	b.w	801c548 <problem_fetch+0x1ae60>
		case 280 :
			strcpy(p->name,"LOOK UP TO ME");
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b546:	4a60      	ldr	r2, [pc, #384]	; (800b6c8 <problem_fetch+0x9fe0>)
 800b548:	461c      	mov	r4, r3
 800b54a:	4613      	mov	r3, r2
 800b54c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b54e:	6020      	str	r0, [r4, #0]
 800b550:	6061      	str	r1, [r4, #4]
 800b552:	60a2      	str	r2, [r4, #8]
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b55e:	4a4d      	ldr	r2, [pc, #308]	; (800b694 <problem_fetch+0x9fac>)
 800b560:	6810      	ldr	r0, [r2, #0]
 800b562:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2206      	movs	r2, #6
 800b568:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,G,D");
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	33a4      	adds	r3, #164	; 0xa4
 800b56e:	4a57      	ldr	r2, [pc, #348]	; (800b6cc <problem_fetch+0x9fe4>)
 800b570:	461c      	mov	r4, r3
 800b572:	4613      	mov	r3, r2
 800b574:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	6061      	str	r1, [r4, #4]
 800b57a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,14,17,18");
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	3304      	adds	r3, #4
 800b580:	4a53      	ldr	r2, [pc, #332]	; (800b6d0 <problem_fetch+0x9fe8>)
 800b582:	461c      	mov	r4, r3
 800b584:	4615      	mov	r5, r2
 800b586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b588:	6020      	str	r0, [r4, #0]
 800b58a:	6061      	str	r1, [r4, #4]
 800b58c:	60a2      	str	r2, [r4, #8]
 800b58e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b596:	4a4f      	ldr	r2, [pc, #316]	; (800b6d4 <problem_fetch+0x9fec>)
 800b598:	461c      	mov	r4, r3
 800b59a:	4613      	mov	r3, r2
 800b59c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b59e:	6020      	str	r0, [r4, #0]
 800b5a0:	6061      	str	r1, [r4, #4]
 800b5a2:	60a2      	str	r2, [r4, #8]
			break;
 800b5a4:	f010 bfd0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 281 :
			strcpy(p->name,"BOOKA");
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b5ae:	4a4a      	ldr	r2, [pc, #296]	; (800b6d8 <problem_fetch+0x9ff0>)
 800b5b0:	6810      	ldr	r0, [r2, #0]
 800b5b2:	6018      	str	r0, [r3, #0]
 800b5b4:	8892      	ldrh	r2, [r2, #4]
 800b5b6:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b5be:	4a47      	ldr	r2, [pc, #284]	; (800b6dc <problem_fetch+0x9ff4>)
 800b5c0:	8811      	ldrh	r1, [r2, #0]
 800b5c2:	7892      	ldrb	r2, [r2, #2]
 800b5c4:	8019      	strh	r1, [r3, #0]
 800b5c6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,E,A,D");
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	33a4      	adds	r3, #164	; 0xa4
 800b5d2:	4a43      	ldr	r2, [pc, #268]	; (800b6e0 <problem_fetch+0x9ff8>)
 800b5d4:	461c      	mov	r4, r3
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5da:	6020      	str	r0, [r4, #0]
 800b5dc:	6061      	str	r1, [r4, #4]
 800b5de:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	4a3f      	ldr	r2, [pc, #252]	; (800b6e4 <problem_fetch+0x9ffc>)
 800b5e6:	461c      	mov	r4, r3
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b5ec:	6020      	str	r0, [r4, #0]
 800b5ee:	6061      	str	r1, [r4, #4]
 800b5f0:	60a2      	str	r2, [r4, #8]
 800b5f2:	881a      	ldrh	r2, [r3, #0]
 800b5f4:	789b      	ldrb	r3, [r3, #2]
 800b5f6:	81a2      	strh	r2, [r4, #12]
 800b5f8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b600:	4a39      	ldr	r2, [pc, #228]	; (800b6e8 <problem_fetch+0xa000>)
 800b602:	461c      	mov	r4, r3
 800b604:	4613      	mov	r3, r2
 800b606:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b608:	6020      	str	r0, [r4, #0]
 800b60a:	6061      	str	r1, [r4, #4]
 800b60c:	60a2      	str	r2, [r4, #8]
			break;
 800b60e:	f010 bf9b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 282 :
			strcpy(p->name,"FIVEB PROJ 2");
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b618:	4a34      	ldr	r2, [pc, #208]	; (800b6ec <problem_fetch+0xa004>)
 800b61a:	461c      	mov	r4, r3
 800b61c:	4613      	mov	r3, r2
 800b61e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b620:	6020      	str	r0, [r4, #0]
 800b622:	6061      	str	r1, [r4, #4]
 800b624:	60a2      	str	r2, [r4, #8]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b630:	4a2f      	ldr	r2, [pc, #188]	; (800b6f0 <problem_fetch+0xa008>)
 800b632:	6810      	ldr	r0, [r2, #0]
 800b634:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	220a      	movs	r2, #10
 800b63a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,G,G,D");
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	33a4      	adds	r3, #164	; 0xa4
 800b640:	4a2c      	ldr	r2, [pc, #176]	; (800b6f4 <problem_fetch+0xa00c>)
 800b642:	461d      	mov	r5, r3
 800b644:	4614      	mov	r4, r2
 800b646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b648:	6028      	str	r0, [r5, #0]
 800b64a:	6069      	str	r1, [r5, #4]
 800b64c:	60aa      	str	r2, [r5, #8]
 800b64e:	60eb      	str	r3, [r5, #12]
 800b650:	6820      	ldr	r0, [r4, #0]
 800b652:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,15,17,18");
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	3304      	adds	r3, #4
 800b658:	4a27      	ldr	r2, [pc, #156]	; (800b6f8 <problem_fetch+0xa010>)
 800b65a:	461d      	mov	r5, r3
 800b65c:	4614      	mov	r4, r2
 800b65e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b660:	6028      	str	r0, [r5, #0]
 800b662:	6069      	str	r1, [r5, #4]
 800b664:	60aa      	str	r2, [r5, #8]
 800b666:	60eb      	str	r3, [r5, #12]
 800b668:	cc03      	ldmia	r4!, {r0, r1}
 800b66a:	6128      	str	r0, [r5, #16]
 800b66c:	6169      	str	r1, [r5, #20]
 800b66e:	8823      	ldrh	r3, [r4, #0]
 800b670:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b678:	4a20      	ldr	r2, [pc, #128]	; (800b6fc <problem_fetch+0xa014>)
 800b67a:	461d      	mov	r5, r3
 800b67c:	4614      	mov	r4, r2
 800b67e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b680:	6028      	str	r0, [r5, #0]
 800b682:	6069      	str	r1, [r5, #4]
 800b684:	60aa      	str	r2, [r5, #8]
 800b686:	60eb      	str	r3, [r5, #12]
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	6128      	str	r0, [r5, #16]
			break;
 800b68c:	f010 bf5c 	b.w	801c548 <problem_fetch+0x1ae60>
 800b690:	08027158 	.word	0x08027158
 800b694:	080239f4 	.word	0x080239f4
 800b698:	08027164 	.word	0x08027164
 800b69c:	08027174 	.word	0x08027174
 800b6a0:	080239d4 	.word	0x080239d4
 800b6a4:	08027188 	.word	0x08027188
 800b6a8:	0802395c 	.word	0x0802395c
 800b6ac:	08027198 	.word	0x08027198
 800b6b0:	080271a8 	.word	0x080271a8
 800b6b4:	080271bc 	.word	0x080271bc
 800b6b8:	080271cc 	.word	0x080271cc
 800b6bc:	080271dc 	.word	0x080271dc
 800b6c0:	080271ec 	.word	0x080271ec
 800b6c4:	08027200 	.word	0x08027200
 800b6c8:	08027210 	.word	0x08027210
 800b6cc:	08027220 	.word	0x08027220
 800b6d0:	08025fe8 	.word	0x08025fe8
 800b6d4:	0802393c 	.word	0x0802393c
 800b6d8:	0802722c 	.word	0x0802722c
 800b6dc:	0802391c 	.word	0x0802391c
 800b6e0:	08027234 	.word	0x08027234
 800b6e4:	08023e84 	.word	0x08023e84
 800b6e8:	08023cf8 	.word	0x08023cf8
 800b6ec:	08027240 	.word	0x08027240
 800b6f0:	08023afc 	.word	0x08023afc
 800b6f4:	08027250 	.word	0x08027250
 800b6f8:	08027264 	.word	0x08027264
 800b6fc:	08024204 	.word	0x08024204
		case 283 :
			strcpy(p->name,"MÄX 2");
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b706:	4ab5      	ldr	r2, [pc, #724]	; (800b9dc <problem_fetch+0xa2f4>)
 800b708:	6810      	ldr	r0, [r2, #0]
 800b70a:	6018      	str	r0, [r3, #0]
 800b70c:	8891      	ldrh	r1, [r2, #4]
 800b70e:	7992      	ldrb	r2, [r2, #6]
 800b710:	8099      	strh	r1, [r3, #4]
 800b712:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b71a:	4ab1      	ldr	r2, [pc, #708]	; (800b9e0 <problem_fetch+0xa2f8>)
 800b71c:	6810      	ldr	r0, [r2, #0]
 800b71e:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	220b      	movs	r2, #11
 800b724:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,F,C,D,A,C,A,A");
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	33a4      	adds	r3, #164	; 0xa4
 800b72a:	4aae      	ldr	r2, [pc, #696]	; (800b9e4 <problem_fetch+0xa2fc>)
 800b72c:	461d      	mov	r5, r3
 800b72e:	4614      	mov	r4, r2
 800b730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b732:	6028      	str	r0, [r5, #0]
 800b734:	6069      	str	r1, [r5, #4]
 800b736:	60aa      	str	r2, [r5, #8]
 800b738:	60eb      	str	r3, [r5, #12]
 800b73a:	6820      	ldr	r0, [r4, #0]
 800b73c:	6128      	str	r0, [r5, #16]
 800b73e:	88a3      	ldrh	r3, [r4, #4]
 800b740:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,4,8,9,11,13,15,9,5,14,18");
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	3304      	adds	r3, #4
 800b746:	4aa8      	ldr	r2, [pc, #672]	; (800b9e8 <problem_fetch+0xa300>)
 800b748:	461d      	mov	r5, r3
 800b74a:	4614      	mov	r4, r2
 800b74c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b74e:	6028      	str	r0, [r5, #0]
 800b750:	6069      	str	r1, [r5, #4]
 800b752:	60aa      	str	r2, [r5, #8]
 800b754:	60eb      	str	r3, [r5, #12]
 800b756:	cc03      	ldmia	r4!, {r0, r1}
 800b758:	6128      	str	r0, [r5, #16]
 800b75a:	6169      	str	r1, [r5, #20]
 800b75c:	8823      	ldrh	r3, [r4, #0]
 800b75e:	78a2      	ldrb	r2, [r4, #2]
 800b760:	832b      	strh	r3, [r5, #24]
 800b762:	4613      	mov	r3, r2
 800b764:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b76c:	4a9f      	ldr	r2, [pc, #636]	; (800b9ec <problem_fetch+0xa304>)
 800b76e:	461d      	mov	r5, r3
 800b770:	4614      	mov	r4, r2
 800b772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b774:	6028      	str	r0, [r5, #0]
 800b776:	6069      	str	r1, [r5, #4]
 800b778:	60aa      	str	r2, [r5, #8]
 800b77a:	60eb      	str	r3, [r5, #12]
 800b77c:	6820      	ldr	r0, [r4, #0]
 800b77e:	6128      	str	r0, [r5, #16]
 800b780:	88a3      	ldrh	r3, [r4, #4]
 800b782:	82ab      	strh	r3, [r5, #20]
			break;
 800b784:	f010 bee0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 284 :
			strcpy(p->name,"BACK IN ACTION");
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b78e:	4a98      	ldr	r2, [pc, #608]	; (800b9f0 <problem_fetch+0xa308>)
 800b790:	461c      	mov	r4, r3
 800b792:	4613      	mov	r3, r2
 800b794:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b796:	6020      	str	r0, [r4, #0]
 800b798:	6061      	str	r1, [r4, #4]
 800b79a:	60a2      	str	r2, [r4, #8]
 800b79c:	881a      	ldrh	r2, [r3, #0]
 800b79e:	789b      	ldrb	r3, [r3, #2]
 800b7a0:	81a2      	strh	r2, [r4, #12]
 800b7a2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b7aa:	4a8d      	ldr	r2, [pc, #564]	; (800b9e0 <problem_fetch+0xa2f8>)
 800b7ac:	6810      	ldr	r0, [r2, #0]
 800b7ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2208      	movs	r2, #8
 800b7b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,B,E,C,E,D");
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	33a4      	adds	r3, #164	; 0xa4
 800b7ba:	4a8e      	ldr	r2, [pc, #568]	; (800b9f4 <problem_fetch+0xa30c>)
 800b7bc:	461c      	mov	r4, r3
 800b7be:	4615      	mov	r5, r2
 800b7c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7c2:	6020      	str	r0, [r4, #0]
 800b7c4:	6061      	str	r1, [r4, #4]
 800b7c6:	60a2      	str	r2, [r4, #8]
 800b7c8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,13,16,18");
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	3304      	adds	r3, #4
 800b7ce:	4a8a      	ldr	r2, [pc, #552]	; (800b9f8 <problem_fetch+0xa310>)
 800b7d0:	461d      	mov	r5, r3
 800b7d2:	4614      	mov	r4, r2
 800b7d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7d6:	6028      	str	r0, [r5, #0]
 800b7d8:	6069      	str	r1, [r5, #4]
 800b7da:	60aa      	str	r2, [r5, #8]
 800b7dc:	60eb      	str	r3, [r5, #12]
 800b7de:	6820      	ldr	r0, [r4, #0]
 800b7e0:	6128      	str	r0, [r5, #16]
 800b7e2:	7923      	ldrb	r3, [r4, #4]
 800b7e4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b7ec:	4a83      	ldr	r2, [pc, #524]	; (800b9fc <problem_fetch+0xa314>)
 800b7ee:	461c      	mov	r4, r3
 800b7f0:	4615      	mov	r5, r2
 800b7f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b7f4:	6020      	str	r0, [r4, #0]
 800b7f6:	6061      	str	r1, [r4, #4]
 800b7f8:	60a2      	str	r2, [r4, #8]
 800b7fa:	60e3      	str	r3, [r4, #12]
			break;
 800b7fc:	f010 bea4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 285 :
			strcpy(p->name,"THE REAL SIRIUS BLACK");
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b806:	4a7e      	ldr	r2, [pc, #504]	; (800ba00 <problem_fetch+0xa318>)
 800b808:	461d      	mov	r5, r3
 800b80a:	4614      	mov	r4, r2
 800b80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b80e:	6028      	str	r0, [r5, #0]
 800b810:	6069      	str	r1, [r5, #4]
 800b812:	60aa      	str	r2, [r5, #8]
 800b814:	60eb      	str	r3, [r5, #12]
 800b816:	6820      	ldr	r0, [r4, #0]
 800b818:	6128      	str	r0, [r5, #16]
 800b81a:	88a3      	ldrh	r3, [r4, #4]
 800b81c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A");
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b824:	4a77      	ldr	r2, [pc, #476]	; (800ba04 <problem_fetch+0xa31c>)
 800b826:	8811      	ldrh	r1, [r2, #0]
 800b828:	7892      	ldrb	r2, [r2, #2]
 800b82a:	8019      	strh	r1, [r3, #0]
 800b82c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2207      	movs	r2, #7
 800b832:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,J,E,F,C,D");
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	33a4      	adds	r3, #164	; 0xa4
 800b838:	4a73      	ldr	r2, [pc, #460]	; (800ba08 <problem_fetch+0xa320>)
 800b83a:	461c      	mov	r4, r3
 800b83c:	4613      	mov	r3, r2
 800b83e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b840:	6020      	str	r0, [r4, #0]
 800b842:	6061      	str	r1, [r4, #4]
 800b844:	60a2      	str	r2, [r4, #8]
 800b846:	881b      	ldrh	r3, [r3, #0]
 800b848:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,5,9,11,13,18");
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	3304      	adds	r3, #4
 800b84e:	4a6f      	ldr	r2, [pc, #444]	; (800ba0c <problem_fetch+0xa324>)
 800b850:	461d      	mov	r5, r3
 800b852:	4614      	mov	r4, r2
 800b854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b856:	6028      	str	r0, [r5, #0]
 800b858:	6069      	str	r1, [r5, #4]
 800b85a:	60aa      	str	r2, [r5, #8]
 800b85c:	60eb      	str	r3, [r5, #12]
 800b85e:	7823      	ldrb	r3, [r4, #0]
 800b860:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b868:	4a69      	ldr	r2, [pc, #420]	; (800ba10 <problem_fetch+0xa328>)
 800b86a:	461c      	mov	r4, r3
 800b86c:	4613      	mov	r3, r2
 800b86e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b870:	6020      	str	r0, [r4, #0]
 800b872:	6061      	str	r1, [r4, #4]
 800b874:	60a2      	str	r2, [r4, #8]
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	81a3      	strh	r3, [r4, #12]
			break;
 800b87a:	f010 be65 	b.w	801c548 <problem_fetch+0x1ae60>
		case 286 :
			strcpy(p->name,"REAL SIRIUS BLACK");
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b884:	4a63      	ldr	r2, [pc, #396]	; (800ba14 <problem_fetch+0xa32c>)
 800b886:	461d      	mov	r5, r3
 800b888:	4614      	mov	r4, r2
 800b88a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b88c:	6028      	str	r0, [r5, #0]
 800b88e:	6069      	str	r1, [r5, #4]
 800b890:	60aa      	str	r2, [r5, #8]
 800b892:	60eb      	str	r3, [r5, #12]
 800b894:	8823      	ldrh	r3, [r4, #0]
 800b896:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b89e:	4a59      	ldr	r2, [pc, #356]	; (800ba04 <problem_fetch+0xa31c>)
 800b8a0:	8811      	ldrh	r1, [r2, #0]
 800b8a2:	7892      	ldrb	r2, [r2, #2]
 800b8a4:	8019      	strh	r1, [r3, #0]
 800b8a6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2206      	movs	r2, #6
 800b8ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,C,D");
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	33a4      	adds	r3, #164	; 0xa4
 800b8b2:	4a59      	ldr	r2, [pc, #356]	; (800ba18 <problem_fetch+0xa330>)
 800b8b4:	461c      	mov	r4, r3
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8ba:	6020      	str	r0, [r4, #0]
 800b8bc:	6061      	str	r1, [r4, #4]
 800b8be:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,13,18");
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4a55      	ldr	r2, [pc, #340]	; (800ba1c <problem_fetch+0xa334>)
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8cc:	6020      	str	r0, [r4, #0]
 800b8ce:	6061      	str	r1, [r4, #4]
 800b8d0:	60a2      	str	r2, [r4, #8]
 800b8d2:	881a      	ldrh	r2, [r3, #0]
 800b8d4:	789b      	ldrb	r3, [r3, #2]
 800b8d6:	81a2      	strh	r2, [r4, #12]
 800b8d8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b8e0:	4a4f      	ldr	r2, [pc, #316]	; (800ba20 <problem_fetch+0xa338>)
 800b8e2:	461c      	mov	r4, r3
 800b8e4:	4613      	mov	r3, r2
 800b8e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b8e8:	6020      	str	r0, [r4, #0]
 800b8ea:	6061      	str	r1, [r4, #4]
 800b8ec:	60a2      	str	r2, [r4, #8]
			break;
 800b8ee:	f010 be2b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 287 :
			strcpy(p->name,"SIRIUS BLACK");
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b8f8:	4a4a      	ldr	r2, [pc, #296]	; (800ba24 <problem_fetch+0xa33c>)
 800b8fa:	461c      	mov	r4, r3
 800b8fc:	4613      	mov	r3, r2
 800b8fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b900:	6020      	str	r0, [r4, #0]
 800b902:	6061      	str	r1, [r4, #4]
 800b904:	60a2      	str	r2, [r4, #8]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b910:	4a3c      	ldr	r2, [pc, #240]	; (800ba04 <problem_fetch+0xa31c>)
 800b912:	8811      	ldrh	r1, [r2, #0]
 800b914:	7892      	ldrb	r2, [r2, #2]
 800b916:	8019      	strh	r1, [r3, #0]
 800b918:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2207      	movs	r2, #7
 800b91e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,E,F,J,C,D");
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	33a4      	adds	r3, #164	; 0xa4
 800b924:	4a40      	ldr	r2, [pc, #256]	; (800ba28 <problem_fetch+0xa340>)
 800b926:	461c      	mov	r4, r3
 800b928:	4613      	mov	r3, r2
 800b92a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b92c:	6020      	str	r0, [r4, #0]
 800b92e:	6061      	str	r1, [r4, #4]
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	881b      	ldrh	r3, [r3, #0]
 800b934:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,5,13,18");
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	3304      	adds	r3, #4
 800b93a:	4a3c      	ldr	r2, [pc, #240]	; (800ba2c <problem_fetch+0xa344>)
 800b93c:	461d      	mov	r5, r3
 800b93e:	4614      	mov	r4, r2
 800b940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b942:	6028      	str	r0, [r5, #0]
 800b944:	6069      	str	r1, [r5, #4]
 800b946:	60aa      	str	r2, [r5, #8]
 800b948:	60eb      	str	r3, [r5, #12]
 800b94a:	7823      	ldrb	r3, [r4, #0]
 800b94c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b954:	4a2e      	ldr	r2, [pc, #184]	; (800ba10 <problem_fetch+0xa328>)
 800b956:	461c      	mov	r4, r3
 800b958:	4613      	mov	r3, r2
 800b95a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b95c:	6020      	str	r0, [r4, #0]
 800b95e:	6061      	str	r1, [r4, #4]
 800b960:	60a2      	str	r2, [r4, #8]
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	81a3      	strh	r3, [r4, #12]
			break;
 800b966:	f010 bdef 	b.w	801c548 <problem_fetch+0x1ae60>
		case 288 :
			strcpy(p->name,"SUCK IT ELLIOTT");
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800b970:	4a2f      	ldr	r2, [pc, #188]	; (800ba30 <problem_fetch+0xa348>)
 800b972:	461c      	mov	r4, r3
 800b974:	4615      	mov	r5, r2
 800b976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b978:	6020      	str	r0, [r4, #0]
 800b97a:	6061      	str	r1, [r4, #4]
 800b97c:	60a2      	str	r2, [r4, #8]
 800b97e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800b986:	4a1f      	ldr	r2, [pc, #124]	; (800ba04 <problem_fetch+0xa31c>)
 800b988:	8811      	ldrh	r1, [r2, #0]
 800b98a:	7892      	ldrb	r2, [r2, #2]
 800b98c:	8019      	strh	r1, [r3, #0]
 800b98e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2206      	movs	r2, #6
 800b994:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,D");
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	33a4      	adds	r3, #164	; 0xa4
 800b99a:	4a26      	ldr	r2, [pc, #152]	; (800ba34 <problem_fetch+0xa34c>)
 800b99c:	461c      	mov	r4, r3
 800b99e:	4613      	mov	r3, r2
 800b9a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	6061      	str	r1, [r4, #4]
 800b9a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,8,11,15,18");
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	4a22      	ldr	r2, [pc, #136]	; (800ba38 <problem_fetch+0xa350>)
 800b9ae:	461c      	mov	r4, r3
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9b4:	6020      	str	r0, [r4, #0]
 800b9b6:	6061      	str	r1, [r4, #4]
 800b9b8:	60a2      	str	r2, [r4, #8]
 800b9ba:	881a      	ldrh	r2, [r3, #0]
 800b9bc:	789b      	ldrb	r3, [r3, #2]
 800b9be:	81a2      	strh	r2, [r4, #12]
 800b9c0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800b9c8:	4a15      	ldr	r2, [pc, #84]	; (800ba20 <problem_fetch+0xa338>)
 800b9ca:	461c      	mov	r4, r3
 800b9cc:	4613      	mov	r3, r2
 800b9ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800b9d0:	6020      	str	r0, [r4, #0]
 800b9d2:	6061      	str	r1, [r4, #4]
 800b9d4:	60a2      	str	r2, [r4, #8]
			break;
 800b9d6:	f010 bdb7 	b.w	801c548 <problem_fetch+0x1ae60>
 800b9da:	bf00      	nop
 800b9dc:	08027280 	.word	0x08027280
 800b9e0:	0802395c 	.word	0x0802395c
 800b9e4:	08027288 	.word	0x08027288
 800b9e8:	080272a0 	.word	0x080272a0
 800b9ec:	080272bc 	.word	0x080272bc
 800b9f0:	080272d4 	.word	0x080272d4
 800b9f4:	080272e4 	.word	0x080272e4
 800b9f8:	080272f4 	.word	0x080272f4
 800b9fc:	08023a80 	.word	0x08023a80
 800ba00:	0802730c 	.word	0x0802730c
 800ba04:	0802391c 	.word	0x0802391c
 800ba08:	08027324 	.word	0x08027324
 800ba0c:	08027334 	.word	0x08027334
 800ba10:	080239d4 	.word	0x080239d4
 800ba14:	08027348 	.word	0x08027348
 800ba18:	0802735c 	.word	0x0802735c
 800ba1c:	08027368 	.word	0x08027368
 800ba20:	0802393c 	.word	0x0802393c
 800ba24:	08027378 	.word	0x08027378
 800ba28:	08027388 	.word	0x08027388
 800ba2c:	08027398 	.word	0x08027398
 800ba30:	080273ac 	.word	0x080273ac
 800ba34:	080273bc 	.word	0x080273bc
 800ba38:	080273c8 	.word	0x080273c8
		case 289 :
			strcpy(p->name,"SPALLA&AMP;PIATTA");
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ba42:	4abe      	ldr	r2, [pc, #760]	; (800bd3c <problem_fetch+0xa654>)
 800ba44:	461d      	mov	r5, r3
 800ba46:	4614      	mov	r4, r2
 800ba48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba4a:	6028      	str	r0, [r5, #0]
 800ba4c:	6069      	str	r1, [r5, #4]
 800ba4e:	60aa      	str	r2, [r5, #8]
 800ba50:	60eb      	str	r3, [r5, #12]
 800ba52:	8823      	ldrh	r3, [r4, #0]
 800ba54:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ba5c:	4ab8      	ldr	r2, [pc, #736]	; (800bd40 <problem_fetch+0xa658>)
 800ba5e:	6810      	ldr	r0, [r2, #0]
 800ba60:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2207      	movs	r2, #7
 800ba66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,F,G,D,D");
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	33a4      	adds	r3, #164	; 0xa4
 800ba6c:	4ab5      	ldr	r2, [pc, #724]	; (800bd44 <problem_fetch+0xa65c>)
 800ba6e:	461c      	mov	r4, r3
 800ba70:	4613      	mov	r3, r2
 800ba72:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ba74:	6020      	str	r0, [r4, #0]
 800ba76:	6061      	str	r1, [r4, #4]
 800ba78:	60a2      	str	r2, [r4, #8]
 800ba7a:	881b      	ldrh	r3, [r3, #0]
 800ba7c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,11,14,15,18");
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4ab1      	ldr	r2, [pc, #708]	; (800bd48 <problem_fetch+0xa660>)
 800ba84:	461d      	mov	r5, r3
 800ba86:	4614      	mov	r4, r2
 800ba88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ba8a:	6028      	str	r0, [r5, #0]
 800ba8c:	6069      	str	r1, [r5, #4]
 800ba8e:	60aa      	str	r2, [r5, #8]
 800ba90:	60eb      	str	r3, [r5, #12]
 800ba92:	8823      	ldrh	r3, [r4, #0]
 800ba94:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ba9c:	4aab      	ldr	r2, [pc, #684]	; (800bd4c <problem_fetch+0xa664>)
 800ba9e:	461c      	mov	r4, r3
 800baa0:	4613      	mov	r3, r2
 800baa2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800baa4:	6020      	str	r0, [r4, #0]
 800baa6:	6061      	str	r1, [r4, #4]
 800baa8:	60a2      	str	r2, [r4, #8]
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	81a3      	strh	r3, [r4, #12]
			break;
 800baae:	f010 bd4b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 290 :
			strcpy(p->name,"몰라여");
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bab8:	49a5      	ldr	r1, [pc, #660]	; (800bd50 <problem_fetch+0xa668>)
 800baba:	461a      	mov	r2, r3
 800babc:	460b      	mov	r3, r1
 800babe:	cb03      	ldmia	r3!, {r0, r1}
 800bac0:	6010      	str	r0, [r2, #0]
 800bac2:	6051      	str	r1, [r2, #4]
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bace:	4aa1      	ldr	r2, [pc, #644]	; (800bd54 <problem_fetch+0xa66c>)
 800bad0:	8811      	ldrh	r1, [r2, #0]
 800bad2:	7892      	ldrb	r2, [r2, #2]
 800bad4:	8019      	strh	r1, [r3, #0]
 800bad6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2207      	movs	r2, #7
 800badc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,A,G,C,E,I");
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	33a4      	adds	r3, #164	; 0xa4
 800bae2:	4a9d      	ldr	r2, [pc, #628]	; (800bd58 <problem_fetch+0xa670>)
 800bae4:	461c      	mov	r4, r3
 800bae6:	4613      	mov	r3, r2
 800bae8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800baea:	6020      	str	r0, [r4, #0]
 800baec:	6061      	str	r1, [r4, #4]
 800baee:	60a2      	str	r2, [r4, #8]
 800baf0:	881b      	ldrh	r3, [r3, #0]
 800baf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,9,13,16,18");
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	3304      	adds	r3, #4
 800baf8:	4a98      	ldr	r2, [pc, #608]	; (800bd5c <problem_fetch+0xa674>)
 800bafa:	461d      	mov	r5, r3
 800bafc:	4614      	mov	r4, r2
 800bafe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb00:	6028      	str	r0, [r5, #0]
 800bb02:	6069      	str	r1, [r5, #4]
 800bb04:	60aa      	str	r2, [r5, #8]
 800bb06:	60eb      	str	r3, [r5, #12]
 800bb08:	7823      	ldrb	r3, [r4, #0]
 800bb0a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bb12:	4a8e      	ldr	r2, [pc, #568]	; (800bd4c <problem_fetch+0xa664>)
 800bb14:	461c      	mov	r4, r3
 800bb16:	4613      	mov	r3, r2
 800bb18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb1a:	6020      	str	r0, [r4, #0]
 800bb1c:	6061      	str	r1, [r4, #4]
 800bb1e:	60a2      	str	r2, [r4, #8]
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	81a3      	strh	r3, [r4, #12]
			break;
 800bb24:	f010 bd10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 291 :
			strcpy(p->name,"I'M RON BURGUNDY?");
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb2e:	4a8c      	ldr	r2, [pc, #560]	; (800bd60 <problem_fetch+0xa678>)
 800bb30:	461d      	mov	r5, r3
 800bb32:	4614      	mov	r4, r2
 800bb34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bb36:	6028      	str	r0, [r5, #0]
 800bb38:	6069      	str	r1, [r5, #4]
 800bb3a:	60aa      	str	r2, [r5, #8]
 800bb3c:	60eb      	str	r3, [r5, #12]
 800bb3e:	8823      	ldrh	r3, [r4, #0]
 800bb40:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bb48:	4a86      	ldr	r2, [pc, #536]	; (800bd64 <problem_fetch+0xa67c>)
 800bb4a:	6810      	ldr	r0, [r2, #0]
 800bb4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2206      	movs	r2, #6
 800bb52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,D,A");
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	33a4      	adds	r3, #164	; 0xa4
 800bb58:	4a83      	ldr	r2, [pc, #524]	; (800bd68 <problem_fetch+0xa680>)
 800bb5a:	461c      	mov	r4, r3
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb60:	6020      	str	r0, [r4, #0]
 800bb62:	6061      	str	r1, [r4, #4]
 800bb64:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,12,13,15,18");
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	3304      	adds	r3, #4
 800bb6a:	4a80      	ldr	r2, [pc, #512]	; (800bd6c <problem_fetch+0xa684>)
 800bb6c:	461c      	mov	r4, r3
 800bb6e:	4615      	mov	r5, r2
 800bb70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb72:	6020      	str	r0, [r4, #0]
 800bb74:	6061      	str	r1, [r4, #4]
 800bb76:	60a2      	str	r2, [r4, #8]
 800bb78:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bb80:	4a7b      	ldr	r2, [pc, #492]	; (800bd70 <problem_fetch+0xa688>)
 800bb82:	461c      	mov	r4, r3
 800bb84:	4613      	mov	r3, r2
 800bb86:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bb88:	6020      	str	r0, [r4, #0]
 800bb8a:	6061      	str	r1, [r4, #4]
 800bb8c:	60a2      	str	r2, [r4, #8]
			break;
 800bb8e:	f010 bcdb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 292 :
			strcpy(p->name,"FUNNY");
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bb98:	4a76      	ldr	r2, [pc, #472]	; (800bd74 <problem_fetch+0xa68c>)
 800bb9a:	6810      	ldr	r0, [r2, #0]
 800bb9c:	6018      	str	r0, [r3, #0]
 800bb9e:	8892      	ldrh	r2, [r2, #4]
 800bba0:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bba8:	4a73      	ldr	r2, [pc, #460]	; (800bd78 <problem_fetch+0xa690>)
 800bbaa:	8811      	ldrh	r1, [r2, #0]
 800bbac:	7892      	ldrb	r2, [r2, #2]
 800bbae:	8019      	strh	r1, [r3, #0]
 800bbb0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2205      	movs	r2, #5
 800bbb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	33a4      	adds	r3, #164	; 0xa4
 800bbbc:	496f      	ldr	r1, [pc, #444]	; (800bd7c <problem_fetch+0xa694>)
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	cb03      	ldmia	r3!, {r0, r1}
 800bbc4:	6010      	str	r0, [r2, #0]
 800bbc6:	6051      	str	r1, [r2, #4]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,7,14,18");
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	4a6b      	ldr	r2, [pc, #428]	; (800bd80 <problem_fetch+0xa698>)
 800bbd2:	461c      	mov	r4, r3
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bbd8:	6020      	str	r0, [r4, #0]
 800bbda:	6061      	str	r1, [r4, #4]
 800bbdc:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bbe4:	4967      	ldr	r1, [pc, #412]	; (800bd84 <problem_fetch+0xa69c>)
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	460b      	mov	r3, r1
 800bbea:	cb03      	ldmia	r3!, {r0, r1}
 800bbec:	6010      	str	r0, [r2, #0]
 800bbee:	6051      	str	r1, [r2, #4]
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	8113      	strh	r3, [r2, #8]
			break;
 800bbf4:	f010 bca8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 293 :
			strcpy(p->name,"NUN");
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bbfe:	4a62      	ldr	r2, [pc, #392]	; (800bd88 <problem_fetch+0xa6a0>)
 800bc00:	6810      	ldr	r0, [r2, #0]
 800bc02:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bc0a:	4a4d      	ldr	r2, [pc, #308]	; (800bd40 <problem_fetch+0xa658>)
 800bc0c:	6810      	ldr	r0, [r2, #0]
 800bc0e:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2204      	movs	r2, #4
 800bc14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,D");
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	33a4      	adds	r3, #164	; 0xa4
 800bc1a:	495c      	ldr	r1, [pc, #368]	; (800bd8c <problem_fetch+0xa6a4>)
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	460b      	mov	r3, r1
 800bc20:	cb03      	ldmia	r3!, {r0, r1}
 800bc22:	6010      	str	r0, [r2, #0]
 800bc24:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,8,13,18");
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	4959      	ldr	r1, [pc, #356]	; (800bd90 <problem_fetch+0xa6a8>)
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	460b      	mov	r3, r1
 800bc30:	cb03      	ldmia	r3!, {r0, r1}
 800bc32:	6010      	str	r0, [r2, #0]
 800bc34:	6051      	str	r1, [r2, #4]
 800bc36:	881b      	ldrh	r3, [r3, #0]
 800bc38:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bc40:	4954      	ldr	r1, [pc, #336]	; (800bd94 <problem_fetch+0xa6ac>)
 800bc42:	461a      	mov	r2, r3
 800bc44:	460b      	mov	r3, r1
 800bc46:	cb03      	ldmia	r3!, {r0, r1}
 800bc48:	6010      	str	r0, [r2, #0]
 800bc4a:	6051      	str	r1, [r2, #4]
			break;
 800bc4c:	f010 bc7c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 294 :
			strcpy(p->name,"THE LAST PEA");
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bc56:	4a50      	ldr	r2, [pc, #320]	; (800bd98 <problem_fetch+0xa6b0>)
 800bc58:	461c      	mov	r4, r3
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	6061      	str	r1, [r4, #4]
 800bc62:	60a2      	str	r2, [r4, #8]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bc6e:	4a4b      	ldr	r2, [pc, #300]	; (800bd9c <problem_fetch+0xa6b4>)
 800bc70:	6810      	ldr	r0, [r2, #0]
 800bc72:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2207      	movs	r2, #7
 800bc78:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,E,C,D,A");
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	33a4      	adds	r3, #164	; 0xa4
 800bc7e:	4a48      	ldr	r2, [pc, #288]	; (800bda0 <problem_fetch+0xa6b8>)
 800bc80:	461c      	mov	r4, r3
 800bc82:	4613      	mov	r3, r2
 800bc84:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bc86:	6020      	str	r0, [r4, #0]
 800bc88:	6061      	str	r1, [r4, #4]
 800bc8a:	60a2      	str	r2, [r4, #8]
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,12,13,15,18");
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4a43      	ldr	r2, [pc, #268]	; (800bda4 <problem_fetch+0xa6bc>)
 800bc96:	461d      	mov	r5, r3
 800bc98:	4614      	mov	r4, r2
 800bc9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc9c:	6028      	str	r0, [r5, #0]
 800bc9e:	6069      	str	r1, [r5, #4]
 800bca0:	60aa      	str	r2, [r5, #8]
 800bca2:	60eb      	str	r3, [r5, #12]
 800bca4:	8823      	ldrh	r3, [r4, #0]
 800bca6:	78a2      	ldrb	r2, [r4, #2]
 800bca8:	822b      	strh	r3, [r5, #16]
 800bcaa:	4613      	mov	r3, r2
 800bcac:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bcb4:	4a3c      	ldr	r2, [pc, #240]	; (800bda8 <problem_fetch+0xa6c0>)
 800bcb6:	461c      	mov	r4, r3
 800bcb8:	4613      	mov	r3, r2
 800bcba:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcbc:	6020      	str	r0, [r4, #0]
 800bcbe:	6061      	str	r1, [r4, #4]
 800bcc0:	60a2      	str	r2, [r4, #8]
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	81a3      	strh	r3, [r4, #12]
			break;
 800bcc6:	f010 bc3f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 295 :
			strcpy(p->name,"PEAS AND GRAVY");
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bcd0:	4a36      	ldr	r2, [pc, #216]	; (800bdac <problem_fetch+0xa6c4>)
 800bcd2:	461c      	mov	r4, r3
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bcd8:	6020      	str	r0, [r4, #0]
 800bcda:	6061      	str	r1, [r4, #4]
 800bcdc:	60a2      	str	r2, [r4, #8]
 800bcde:	881a      	ldrh	r2, [r3, #0]
 800bce0:	789b      	ldrb	r3, [r3, #2]
 800bce2:	81a2      	strh	r2, [r4, #12]
 800bce4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bcec:	4a30      	ldr	r2, [pc, #192]	; (800bdb0 <problem_fetch+0xa6c8>)
 800bcee:	8811      	ldrh	r1, [r2, #0]
 800bcf0:	7892      	ldrb	r2, [r2, #2]
 800bcf2:	8019      	strh	r1, [r3, #0]
 800bcf4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2206      	movs	r2, #6
 800bcfa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D,A");
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	33a4      	adds	r3, #164	; 0xa4
 800bd00:	4a2c      	ldr	r2, [pc, #176]	; (800bdb4 <problem_fetch+0xa6cc>)
 800bd02:	461c      	mov	r4, r3
 800bd04:	4613      	mov	r3, r2
 800bd06:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd08:	6020      	str	r0, [r4, #0]
 800bd0a:	6061      	str	r1, [r4, #4]
 800bd0c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,15,18");
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	3304      	adds	r3, #4
 800bd12:	4a29      	ldr	r2, [pc, #164]	; (800bdb8 <problem_fetch+0xa6d0>)
 800bd14:	461c      	mov	r4, r3
 800bd16:	4615      	mov	r5, r2
 800bd18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bd1a:	6020      	str	r0, [r4, #0]
 800bd1c:	6061      	str	r1, [r4, #4]
 800bd1e:	60a2      	str	r2, [r4, #8]
 800bd20:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bd28:	4a24      	ldr	r2, [pc, #144]	; (800bdbc <problem_fetch+0xa6d4>)
 800bd2a:	461c      	mov	r4, r3
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bd30:	6020      	str	r0, [r4, #0]
 800bd32:	6061      	str	r1, [r4, #4]
 800bd34:	60a2      	str	r2, [r4, #8]
			break;
 800bd36:	f010 bc07 	b.w	801c548 <problem_fetch+0x1ae60>
 800bd3a:	bf00      	nop
 800bd3c:	080273d8 	.word	0x080273d8
 800bd40:	08023afc 	.word	0x08023afc
 800bd44:	080273ec 	.word	0x080273ec
 800bd48:	080273fc 	.word	0x080273fc
 800bd4c:	080239d4 	.word	0x080239d4
 800bd50:	08027410 	.word	0x08027410
 800bd54:	0802391c 	.word	0x0802391c
 800bd58:	0802741c 	.word	0x0802741c
 800bd5c:	0802742c 	.word	0x0802742c
 800bd60:	08027440 	.word	0x08027440
 800bd64:	080239f4 	.word	0x080239f4
 800bd68:	08027454 	.word	0x08027454
 800bd6c:	08027460 	.word	0x08027460
 800bd70:	08023cf8 	.word	0x08023cf8
 800bd74:	08027470 	.word	0x08027470
 800bd78:	08024190 	.word	0x08024190
 800bd7c:	08027478 	.word	0x08027478
 800bd80:	08027484 	.word	0x08027484
 800bd84:	08023e28 	.word	0x08023e28
 800bd88:	08027490 	.word	0x08027490
 800bd8c:	08027494 	.word	0x08027494
 800bd90:	0802749c 	.word	0x0802749c
 800bd94:	08023ab0 	.word	0x08023ab0
 800bd98:	080274a8 	.word	0x080274a8
 800bd9c:	0802395c 	.word	0x0802395c
 800bda0:	080274b8 	.word	0x080274b8
 800bda4:	080274c8 	.word	0x080274c8
 800bda8:	08023ae4 	.word	0x08023ae4
 800bdac:	080274dc 	.word	0x080274dc
 800bdb0:	08023a28 	.word	0x08023a28
 800bdb4:	080274ec 	.word	0x080274ec
 800bdb8:	08026714 	.word	0x08026714
 800bdbc:	0802393c 	.word	0x0802393c
		case 296 :
			strcpy(p->name,"TEST111");
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bdc6:	49c2      	ldr	r1, [pc, #776]	; (800c0d0 <problem_fetch+0xa9e8>)
 800bdc8:	461a      	mov	r2, r3
 800bdca:	460b      	mov	r3, r1
 800bdcc:	cb03      	ldmia	r3!, {r0, r1}
 800bdce:	6010      	str	r0, [r2, #0]
 800bdd0:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bdd8:	4abe      	ldr	r2, [pc, #760]	; (800c0d4 <problem_fetch+0xa9ec>)
 800bdda:	8811      	ldrh	r1, [r2, #0]
 800bddc:	7892      	ldrb	r2, [r2, #2]
 800bdde:	8019      	strh	r1, [r3, #0]
 800bde0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2207      	movs	r2, #7
 800bde6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,F,E,D,A");
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	33a4      	adds	r3, #164	; 0xa4
 800bdec:	4aba      	ldr	r2, [pc, #744]	; (800c0d8 <problem_fetch+0xa9f0>)
 800bdee:	461c      	mov	r4, r3
 800bdf0:	4613      	mov	r3, r2
 800bdf2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bdf4:	6020      	str	r0, [r4, #0]
 800bdf6:	6061      	str	r1, [r4, #4]
 800bdf8:	60a2      	str	r2, [r4, #8]
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,11,12,15,18");
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	3304      	adds	r3, #4
 800be02:	4ab6      	ldr	r2, [pc, #728]	; (800c0dc <problem_fetch+0xa9f4>)
 800be04:	461d      	mov	r5, r3
 800be06:	4614      	mov	r4, r2
 800be08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be0a:	6028      	str	r0, [r5, #0]
 800be0c:	6069      	str	r1, [r5, #4]
 800be0e:	60aa      	str	r2, [r5, #8]
 800be10:	60eb      	str	r3, [r5, #12]
 800be12:	8823      	ldrh	r3, [r4, #0]
 800be14:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800be1c:	4ab0      	ldr	r2, [pc, #704]	; (800c0e0 <problem_fetch+0xa9f8>)
 800be1e:	461c      	mov	r4, r3
 800be20:	4613      	mov	r3, r2
 800be22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be24:	6020      	str	r0, [r4, #0]
 800be26:	6061      	str	r1, [r4, #4]
 800be28:	60a2      	str	r2, [r4, #8]
 800be2a:	881b      	ldrh	r3, [r3, #0]
 800be2c:	81a3      	strh	r3, [r4, #12]
			break;
 800be2e:	f010 bb8b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 297 :
			strcpy(p->name,"FAMILY MAN");
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800be38:	49aa      	ldr	r1, [pc, #680]	; (800c0e4 <problem_fetch+0xa9fc>)
 800be3a:	461a      	mov	r2, r3
 800be3c:	460b      	mov	r3, r1
 800be3e:	cb03      	ldmia	r3!, {r0, r1}
 800be40:	6010      	str	r0, [r2, #0]
 800be42:	6051      	str	r1, [r2, #4]
 800be44:	8819      	ldrh	r1, [r3, #0]
 800be46:	789b      	ldrb	r3, [r3, #2]
 800be48:	8111      	strh	r1, [r2, #8]
 800be4a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800be52:	4aa0      	ldr	r2, [pc, #640]	; (800c0d4 <problem_fetch+0xa9ec>)
 800be54:	8811      	ldrh	r1, [r2, #0]
 800be56:	7892      	ldrb	r2, [r2, #2]
 800be58:	8019      	strh	r1, [r3, #0]
 800be5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2207      	movs	r2, #7
 800be60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,I,J");
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	33a4      	adds	r3, #164	; 0xa4
 800be66:	4aa0      	ldr	r2, [pc, #640]	; (800c0e8 <problem_fetch+0xaa00>)
 800be68:	461c      	mov	r4, r3
 800be6a:	4613      	mov	r3, r2
 800be6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800be6e:	6020      	str	r0, [r4, #0]
 800be70:	6061      	str	r1, [r4, #4]
 800be72:	60a2      	str	r2, [r4, #8]
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"15,18,12,14,5,10,5");
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3304      	adds	r3, #4
 800be7c:	4a9b      	ldr	r2, [pc, #620]	; (800c0ec <problem_fetch+0xaa04>)
 800be7e:	461d      	mov	r5, r3
 800be80:	4614      	mov	r4, r2
 800be82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be84:	6028      	str	r0, [r5, #0]
 800be86:	6069      	str	r1, [r5, #4]
 800be88:	60aa      	str	r2, [r5, #8]
 800be8a:	60eb      	str	r3, [r5, #12]
 800be8c:	8823      	ldrh	r3, [r4, #0]
 800be8e:	78a2      	ldrb	r2, [r4, #2]
 800be90:	822b      	strh	r3, [r5, #16]
 800be92:	4613      	mov	r3, r2
 800be94:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,e,d,d,s,d,s");
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800be9c:	4a94      	ldr	r2, [pc, #592]	; (800c0f0 <problem_fetch+0xaa08>)
 800be9e:	461c      	mov	r4, r3
 800bea0:	4613      	mov	r3, r2
 800bea2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bea4:	6020      	str	r0, [r4, #0]
 800bea6:	6061      	str	r1, [r4, #4]
 800bea8:	60a2      	str	r2, [r4, #8]
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	81a3      	strh	r3, [r4, #12]
			break;
 800beae:	f010 bb4b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 298 :
			strcpy(p->name,"FROGGERTON GOES TO SCHOOL");
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800beb8:	4a8e      	ldr	r2, [pc, #568]	; (800c0f4 <problem_fetch+0xaa0c>)
 800beba:	461d      	mov	r5, r3
 800bebc:	4614      	mov	r4, r2
 800bebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bec0:	6028      	str	r0, [r5, #0]
 800bec2:	6069      	str	r1, [r5, #4]
 800bec4:	60aa      	str	r2, [r5, #8]
 800bec6:	60eb      	str	r3, [r5, #12]
 800bec8:	cc03      	ldmia	r4!, {r0, r1}
 800beca:	6128      	str	r0, [r5, #16]
 800becc:	6169      	str	r1, [r5, #20]
 800bece:	8823      	ldrh	r3, [r4, #0]
 800bed0:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bed8:	4a87      	ldr	r2, [pc, #540]	; (800c0f8 <problem_fetch+0xaa10>)
 800beda:	6810      	ldr	r0, [r2, #0]
 800bedc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2206      	movs	r2, #6
 800bee2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,D,C,A,A");
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	33a4      	adds	r3, #164	; 0xa4
 800bee8:	4a84      	ldr	r2, [pc, #528]	; (800c0fc <problem_fetch+0xaa14>)
 800beea:	461c      	mov	r4, r3
 800beec:	4613      	mov	r3, r2
 800beee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bef0:	6020      	str	r0, [r4, #0]
 800bef2:	6061      	str	r1, [r4, #4]
 800bef4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,14,18");
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3304      	adds	r3, #4
 800befa:	4a81      	ldr	r2, [pc, #516]	; (800c100 <problem_fetch+0xaa18>)
 800befc:	461c      	mov	r4, r3
 800befe:	4615      	mov	r5, r2
 800bf00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bf02:	6020      	str	r0, [r4, #0]
 800bf04:	6061      	str	r1, [r4, #4]
 800bf06:	60a2      	str	r2, [r4, #8]
 800bf08:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bf10:	4a7c      	ldr	r2, [pc, #496]	; (800c104 <problem_fetch+0xaa1c>)
 800bf12:	461c      	mov	r4, r3
 800bf14:	4613      	mov	r3, r2
 800bf16:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf18:	6020      	str	r0, [r4, #0]
 800bf1a:	6061      	str	r1, [r4, #4]
 800bf1c:	60a2      	str	r2, [r4, #8]
			break;
 800bf1e:	f010 bb13 	b.w	801c548 <problem_fetch+0x1ae60>
		case 299 :
			strcpy(p->name,"BOCHANPOWER");
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf28:	4a77      	ldr	r2, [pc, #476]	; (800c108 <problem_fetch+0xaa20>)
 800bf2a:	461c      	mov	r4, r3
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf30:	6020      	str	r0, [r4, #0]
 800bf32:	6061      	str	r1, [r4, #4]
 800bf34:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf3c:	4a73      	ldr	r2, [pc, #460]	; (800c10c <problem_fetch+0xaa24>)
 800bf3e:	6810      	ldr	r0, [r2, #0]
 800bf40:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2205      	movs	r2, #5
 800bf46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,G,D");
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	33a4      	adds	r3, #164	; 0xa4
 800bf4c:	4970      	ldr	r1, [pc, #448]	; (800c110 <problem_fetch+0xaa28>)
 800bf4e:	461a      	mov	r2, r3
 800bf50:	460b      	mov	r3, r1
 800bf52:	cb03      	ldmia	r3!, {r0, r1}
 800bf54:	6010      	str	r0, [r2, #0]
 800bf56:	6051      	str	r1, [r2, #4]
 800bf58:	881b      	ldrh	r3, [r3, #0]
 800bf5a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,9,8,14,18");
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4a6c      	ldr	r2, [pc, #432]	; (800c114 <problem_fetch+0xaa2c>)
 800bf62:	461c      	mov	r4, r3
 800bf64:	4613      	mov	r3, r2
 800bf66:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bf68:	6020      	str	r0, [r4, #0]
 800bf6a:	6061      	str	r1, [r4, #4]
 800bf6c:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bf74:	4968      	ldr	r1, [pc, #416]	; (800c118 <problem_fetch+0xaa30>)
 800bf76:	461a      	mov	r2, r3
 800bf78:	460b      	mov	r3, r1
 800bf7a:	cb03      	ldmia	r3!, {r0, r1}
 800bf7c:	6010      	str	r0, [r2, #0]
 800bf7e:	6051      	str	r1, [r2, #4]
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	8113      	strh	r3, [r2, #8]
			break;
 800bf84:	f010 bae0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 300 :
			strcpy(p->name,"ENRON");
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bf8e:	4a63      	ldr	r2, [pc, #396]	; (800c11c <problem_fetch+0xaa34>)
 800bf90:	6810      	ldr	r0, [r2, #0]
 800bf92:	6018      	str	r0, [r3, #0]
 800bf94:	8892      	ldrh	r2, [r2, #4]
 800bf96:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800bf9e:	4a60      	ldr	r2, [pc, #384]	; (800c120 <problem_fetch+0xaa38>)
 800bfa0:	8811      	ldrh	r1, [r2, #0]
 800bfa2:	7892      	ldrb	r2, [r2, #2]
 800bfa4:	8019      	strh	r1, [r3, #0]
 800bfa6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2207      	movs	r2, #7
 800bfac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,B,D");
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	33a4      	adds	r3, #164	; 0xa4
 800bfb2:	4a5c      	ldr	r2, [pc, #368]	; (800c124 <problem_fetch+0xaa3c>)
 800bfb4:	461c      	mov	r4, r3
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfba:	6020      	str	r0, [r4, #0]
 800bfbc:	6061      	str	r1, [r4, #4]
 800bfbe:	60a2      	str	r2, [r4, #8]
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,15,18");
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4a57      	ldr	r2, [pc, #348]	; (800c128 <problem_fetch+0xaa40>)
 800bfca:	461d      	mov	r5, r3
 800bfcc:	4614      	mov	r4, r2
 800bfce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfd0:	6028      	str	r0, [r5, #0]
 800bfd2:	6069      	str	r1, [r5, #4]
 800bfd4:	60aa      	str	r2, [r5, #8]
 800bfd6:	60eb      	str	r3, [r5, #12]
 800bfd8:	8823      	ldrh	r3, [r4, #0]
 800bfda:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800bfe2:	4a52      	ldr	r2, [pc, #328]	; (800c12c <problem_fetch+0xaa44>)
 800bfe4:	461c      	mov	r4, r3
 800bfe6:	4613      	mov	r3, r2
 800bfe8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800bfea:	6020      	str	r0, [r4, #0]
 800bfec:	6061      	str	r1, [r4, #4]
 800bfee:	60a2      	str	r2, [r4, #8]
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	81a3      	strh	r3, [r4, #12]
			break;
 800bff4:	f010 baa8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 301 :
			strcpy(p->name,"RON DUC DONG");
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800bffe:	4a4c      	ldr	r2, [pc, #304]	; (800c130 <problem_fetch+0xaa48>)
 800c000:	461c      	mov	r4, r3
 800c002:	4613      	mov	r3, r2
 800c004:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c006:	6020      	str	r0, [r4, #0]
 800c008:	6061      	str	r1, [r4, #4]
 800c00a:	60a2      	str	r2, [r4, #8]
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c016:	4a47      	ldr	r2, [pc, #284]	; (800c134 <problem_fetch+0xaa4c>)
 800c018:	6810      	ldr	r0, [r2, #0]
 800c01a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2207      	movs	r2, #7
 800c020:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,G,E,I,E,D");
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	33a4      	adds	r3, #164	; 0xa4
 800c026:	4a44      	ldr	r2, [pc, #272]	; (800c138 <problem_fetch+0xaa50>)
 800c028:	461c      	mov	r4, r3
 800c02a:	4613      	mov	r3, r2
 800c02c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c02e:	6020      	str	r0, [r4, #0]
 800c030:	6061      	str	r1, [r4, #4]
 800c032:	60a2      	str	r2, [r4, #8]
 800c034:	881b      	ldrh	r3, [r3, #0]
 800c036:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,14,16,18");
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3304      	adds	r3, #4
 800c03c:	4a3f      	ldr	r2, [pc, #252]	; (800c13c <problem_fetch+0xaa54>)
 800c03e:	461d      	mov	r5, r3
 800c040:	4614      	mov	r4, r2
 800c042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c044:	6028      	str	r0, [r5, #0]
 800c046:	6069      	str	r1, [r5, #4]
 800c048:	60aa      	str	r2, [r5, #8]
 800c04a:	60eb      	str	r3, [r5, #12]
 800c04c:	8823      	ldrh	r3, [r4, #0]
 800c04e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c056:	4a35      	ldr	r2, [pc, #212]	; (800c12c <problem_fetch+0xaa44>)
 800c058:	461c      	mov	r4, r3
 800c05a:	4613      	mov	r3, r2
 800c05c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c05e:	6020      	str	r0, [r4, #0]
 800c060:	6061      	str	r1, [r4, #4]
 800c062:	60a2      	str	r2, [r4, #8]
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	81a3      	strh	r3, [r4, #12]
			break;
 800c068:	f010 ba6e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 302 :
			strcpy(p->name,"OKTRY");
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c072:	4a33      	ldr	r2, [pc, #204]	; (800c140 <problem_fetch+0xaa58>)
 800c074:	6810      	ldr	r0, [r2, #0]
 800c076:	6018      	str	r0, [r3, #0]
 800c078:	8892      	ldrh	r2, [r2, #4]
 800c07a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c082:	4a1d      	ldr	r2, [pc, #116]	; (800c0f8 <problem_fetch+0xaa10>)
 800c084:	6810      	ldr	r0, [r2, #0]
 800c086:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2205      	movs	r2, #5
 800c08c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,C,D");
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	33a4      	adds	r3, #164	; 0xa4
 800c092:	492c      	ldr	r1, [pc, #176]	; (800c144 <problem_fetch+0xaa5c>)
 800c094:	461a      	mov	r2, r3
 800c096:	460b      	mov	r3, r1
 800c098:	cb03      	ldmia	r3!, {r0, r1}
 800c09a:	6010      	str	r0, [r2, #0]
 800c09c:	6051      	str	r1, [r2, #4]
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,6,8,13,18");
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	4a28      	ldr	r2, [pc, #160]	; (800c148 <problem_fetch+0xaa60>)
 800c0a8:	461c      	mov	r4, r3
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c0ae:	6020      	str	r0, [r4, #0]
 800c0b0:	6061      	str	r1, [r4, #4]
 800c0b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c0ba:	4924      	ldr	r1, [pc, #144]	; (800c14c <problem_fetch+0xaa64>)
 800c0bc:	461a      	mov	r2, r3
 800c0be:	460b      	mov	r3, r1
 800c0c0:	cb03      	ldmia	r3!, {r0, r1}
 800c0c2:	6010      	str	r0, [r2, #0]
 800c0c4:	6051      	str	r1, [r2, #4]
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	8113      	strh	r3, [r2, #8]
			break;
 800c0ca:	f010 ba3d 	b.w	801c548 <problem_fetch+0x1ae60>
 800c0ce:	bf00      	nop
 800c0d0:	080274f8 	.word	0x080274f8
 800c0d4:	08023a28 	.word	0x08023a28
 800c0d8:	08027500 	.word	0x08027500
 800c0dc:	08027510 	.word	0x08027510
 800c0e0:	08023ae4 	.word	0x08023ae4
 800c0e4:	08027524 	.word	0x08027524
 800c0e8:	08027530 	.word	0x08027530
 800c0ec:	08027540 	.word	0x08027540
 800c0f0:	08027554 	.word	0x08027554
 800c0f4:	08027564 	.word	0x08027564
 800c0f8:	0802395c 	.word	0x0802395c
 800c0fc:	08027580 	.word	0x08027580
 800c100:	0802758c 	.word	0x0802758c
 800c104:	08023cf8 	.word	0x08023cf8
 800c108:	0802759c 	.word	0x0802759c
 800c10c:	08023afc 	.word	0x08023afc
 800c110:	080275a8 	.word	0x080275a8
 800c114:	080275b4 	.word	0x080275b4
 800c118:	08023e28 	.word	0x08023e28
 800c11c:	080275c0 	.word	0x080275c0
 800c120:	0802391c 	.word	0x0802391c
 800c124:	080275c8 	.word	0x080275c8
 800c128:	080275d8 	.word	0x080275d8
 800c12c:	080239d4 	.word	0x080239d4
 800c130:	080275ec 	.word	0x080275ec
 800c134:	080239f4 	.word	0x080239f4
 800c138:	080275fc 	.word	0x080275fc
 800c13c:	0802760c 	.word	0x0802760c
 800c140:	08027620 	.word	0x08027620
 800c144:	08027628 	.word	0x08027628
 800c148:	08027634 	.word	0x08027634
 800c14c:	0802403c 	.word	0x0802403c
		case 303 :
			strcpy(p->name,"TRYTRYTRY");
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c156:	49be      	ldr	r1, [pc, #760]	; (800c450 <problem_fetch+0xad68>)
 800c158:	461a      	mov	r2, r3
 800c15a:	460b      	mov	r3, r1
 800c15c:	cb03      	ldmia	r3!, {r0, r1}
 800c15e:	6010      	str	r0, [r2, #0]
 800c160:	6051      	str	r1, [r2, #4]
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c16c:	4ab9      	ldr	r2, [pc, #740]	; (800c454 <problem_fetch+0xad6c>)
 800c16e:	6810      	ldr	r0, [r2, #0]
 800c170:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2206      	movs	r2, #6
 800c176:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,E,G,D");
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	33a4      	adds	r3, #164	; 0xa4
 800c17c:	4ab6      	ldr	r2, [pc, #728]	; (800c458 <problem_fetch+0xad70>)
 800c17e:	461c      	mov	r4, r3
 800c180:	4613      	mov	r3, r2
 800c182:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c184:	6020      	str	r0, [r4, #0]
 800c186:	6061      	str	r1, [r4, #4]
 800c188:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,13,8,9,18");
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	3304      	adds	r3, #4
 800c18e:	4ab3      	ldr	r2, [pc, #716]	; (800c45c <problem_fetch+0xad74>)
 800c190:	461c      	mov	r4, r3
 800c192:	4613      	mov	r3, r2
 800c194:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c196:	6020      	str	r0, [r4, #0]
 800c198:	6061      	str	r1, [r4, #4]
 800c19a:	60a2      	str	r2, [r4, #8]
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c1a6:	4aae      	ldr	r2, [pc, #696]	; (800c460 <problem_fetch+0xad78>)
 800c1a8:	461c      	mov	r4, r3
 800c1aa:	4613      	mov	r3, r2
 800c1ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	6061      	str	r1, [r4, #4]
 800c1b2:	60a2      	str	r2, [r4, #8]
			break;
 800c1b4:	f010 b9c8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 304 :
			strcpy(p->name,"TRYTRY");
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c1be:	4aa9      	ldr	r2, [pc, #676]	; (800c464 <problem_fetch+0xad7c>)
 800c1c0:	6810      	ldr	r0, [r2, #0]
 800c1c2:	6018      	str	r0, [r3, #0]
 800c1c4:	8891      	ldrh	r1, [r2, #4]
 800c1c6:	7992      	ldrb	r2, [r2, #6]
 800c1c8:	8099      	strh	r1, [r3, #4]
 800c1ca:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c1d2:	4aa0      	ldr	r2, [pc, #640]	; (800c454 <problem_fetch+0xad6c>)
 800c1d4:	6810      	ldr	r0, [r2, #0]
 800c1d6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2207      	movs	r2, #7
 800c1dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,B,C,C,A");
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	33a4      	adds	r3, #164	; 0xa4
 800c1e2:	4aa1      	ldr	r2, [pc, #644]	; (800c468 <problem_fetch+0xad80>)
 800c1e4:	461c      	mov	r4, r3
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1ea:	6020      	str	r0, [r4, #0]
 800c1ec:	6061      	str	r1, [r4, #4]
 800c1ee:	60a2      	str	r2, [r4, #8]
 800c1f0:	881b      	ldrh	r3, [r3, #0]
 800c1f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,10,13,16,18");
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4a9c      	ldr	r2, [pc, #624]	; (800c46c <problem_fetch+0xad84>)
 800c1fa:	461d      	mov	r5, r3
 800c1fc:	4614      	mov	r4, r2
 800c1fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c200:	6028      	str	r0, [r5, #0]
 800c202:	6069      	str	r1, [r5, #4]
 800c204:	60aa      	str	r2, [r5, #8]
 800c206:	60eb      	str	r3, [r5, #12]
 800c208:	8823      	ldrh	r3, [r4, #0]
 800c20a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c212:	4a97      	ldr	r2, [pc, #604]	; (800c470 <problem_fetch+0xad88>)
 800c214:	461c      	mov	r4, r3
 800c216:	4613      	mov	r3, r2
 800c218:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c21a:	6020      	str	r0, [r4, #0]
 800c21c:	6061      	str	r1, [r4, #4]
 800c21e:	60a2      	str	r2, [r4, #8]
 800c220:	881b      	ldrh	r3, [r3, #0]
 800c222:	81a3      	strh	r3, [r4, #12]
			break;
 800c224:	f010 b990 	b.w	801c548 <problem_fetch+0x1ae60>
		case 305 :
			strcpy(p->name,"FOLLIA1");
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c22e:	4991      	ldr	r1, [pc, #580]	; (800c474 <problem_fetch+0xad8c>)
 800c230:	461a      	mov	r2, r3
 800c232:	460b      	mov	r3, r1
 800c234:	cb03      	ldmia	r3!, {r0, r1}
 800c236:	6010      	str	r0, [r2, #0]
 800c238:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c240:	4a84      	ldr	r2, [pc, #528]	; (800c454 <problem_fetch+0xad6c>)
 800c242:	6810      	ldr	r0, [r2, #0]
 800c244:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2207      	movs	r2, #7
 800c24a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,G,H,G,I");
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	33a4      	adds	r3, #164	; 0xa4
 800c250:	4a89      	ldr	r2, [pc, #548]	; (800c478 <problem_fetch+0xad90>)
 800c252:	461c      	mov	r4, r3
 800c254:	4613      	mov	r3, r2
 800c256:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c258:	6020      	str	r0, [r4, #0]
 800c25a:	6061      	str	r1, [r4, #4]
 800c25c:	60a2      	str	r2, [r4, #8]
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,18");
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3304      	adds	r3, #4
 800c266:	4a85      	ldr	r2, [pc, #532]	; (800c47c <problem_fetch+0xad94>)
 800c268:	461d      	mov	r5, r3
 800c26a:	4614      	mov	r4, r2
 800c26c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c26e:	6028      	str	r0, [r5, #0]
 800c270:	6069      	str	r1, [r5, #4]
 800c272:	60aa      	str	r2, [r5, #8]
 800c274:	60eb      	str	r3, [r5, #12]
 800c276:	8823      	ldrh	r3, [r4, #0]
 800c278:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c280:	4a7b      	ldr	r2, [pc, #492]	; (800c470 <problem_fetch+0xad88>)
 800c282:	461c      	mov	r4, r3
 800c284:	4613      	mov	r3, r2
 800c286:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c288:	6020      	str	r0, [r4, #0]
 800c28a:	6061      	str	r1, [r4, #4]
 800c28c:	60a2      	str	r2, [r4, #8]
 800c28e:	881b      	ldrh	r3, [r3, #0]
 800c290:	81a3      	strh	r3, [r4, #12]
			break;
 800c292:	f010 b959 	b.w	801c548 <problem_fetch+0x1ae60>
		case 306 :
			strcpy(p->name,"JH 1.0");
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c29c:	4a78      	ldr	r2, [pc, #480]	; (800c480 <problem_fetch+0xad98>)
 800c29e:	6810      	ldr	r0, [r2, #0]
 800c2a0:	6018      	str	r0, [r3, #0]
 800c2a2:	8891      	ldrh	r1, [r2, #4]
 800c2a4:	7992      	ldrb	r2, [r2, #6]
 800c2a6:	8099      	strh	r1, [r3, #4]
 800c2a8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c2b0:	4a74      	ldr	r2, [pc, #464]	; (800c484 <problem_fetch+0xad9c>)
 800c2b2:	6810      	ldr	r0, [r2, #0]
 800c2b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2207      	movs	r2, #7
 800c2ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,G,I");
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	33a4      	adds	r3, #164	; 0xa4
 800c2c0:	4a71      	ldr	r2, [pc, #452]	; (800c488 <problem_fetch+0xada0>)
 800c2c2:	461c      	mov	r4, r3
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2c8:	6020      	str	r0, [r4, #0]
 800c2ca:	6061      	str	r1, [r4, #4]
 800c2cc:	60a2      	str	r2, [r4, #8]
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,12,15,17,18");
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	4a6d      	ldr	r2, [pc, #436]	; (800c48c <problem_fetch+0xada4>)
 800c2d8:	461d      	mov	r5, r3
 800c2da:	4614      	mov	r4, r2
 800c2dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2de:	6028      	str	r0, [r5, #0]
 800c2e0:	6069      	str	r1, [r5, #4]
 800c2e2:	60aa      	str	r2, [r5, #8]
 800c2e4:	60eb      	str	r3, [r5, #12]
 800c2e6:	8823      	ldrh	r3, [r4, #0]
 800c2e8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c2f0:	4a67      	ldr	r2, [pc, #412]	; (800c490 <problem_fetch+0xada8>)
 800c2f2:	461c      	mov	r4, r3
 800c2f4:	4613      	mov	r3, r2
 800c2f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c2f8:	6020      	str	r0, [r4, #0]
 800c2fa:	6061      	str	r1, [r4, #4]
 800c2fc:	60a2      	str	r2, [r4, #8]
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	81a3      	strh	r3, [r4, #12]
			break;
 800c302:	f010 b921 	b.w	801c548 <problem_fetch+0x1ae60>
		case 307 :
			strcpy(p->name,"FROSTED AFRO");
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c30c:	4a61      	ldr	r2, [pc, #388]	; (800c494 <problem_fetch+0xadac>)
 800c30e:	461c      	mov	r4, r3
 800c310:	4613      	mov	r3, r2
 800c312:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c314:	6020      	str	r0, [r4, #0]
 800c316:	6061      	str	r1, [r4, #4]
 800c318:	60a2      	str	r2, [r4, #8]
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c324:	4a5c      	ldr	r2, [pc, #368]	; (800c498 <problem_fetch+0xadb0>)
 800c326:	8811      	ldrh	r1, [r2, #0]
 800c328:	7892      	ldrb	r2, [r2, #2]
 800c32a:	8019      	strh	r1, [r3, #0]
 800c32c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2206      	movs	r2, #6
 800c332:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,J,D");
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	33a4      	adds	r3, #164	; 0xa4
 800c338:	4a58      	ldr	r2, [pc, #352]	; (800c49c <problem_fetch+0xadb4>)
 800c33a:	461c      	mov	r4, r3
 800c33c:	4613      	mov	r3, r2
 800c33e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c340:	6020      	str	r0, [r4, #0]
 800c342:	6061      	str	r1, [r4, #4]
 800c344:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,11,14,16,18");
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	3304      	adds	r3, #4
 800c34a:	4a55      	ldr	r2, [pc, #340]	; (800c4a0 <problem_fetch+0xadb8>)
 800c34c:	461c      	mov	r4, r3
 800c34e:	4615      	mov	r5, r2
 800c350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c352:	6020      	str	r0, [r4, #0]
 800c354:	6061      	str	r1, [r4, #4]
 800c356:	60a2      	str	r2, [r4, #8]
 800c358:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c360:	4a3f      	ldr	r2, [pc, #252]	; (800c460 <problem_fetch+0xad78>)
 800c362:	461c      	mov	r4, r3
 800c364:	4613      	mov	r3, r2
 800c366:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c368:	6020      	str	r0, [r4, #0]
 800c36a:	6061      	str	r1, [r4, #4]
 800c36c:	60a2      	str	r2, [r4, #8]
			break;
 800c36e:	f010 b8eb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 308 :
			strcpy(p->name,"FLYING  BUDDAH");
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c378:	4a4a      	ldr	r2, [pc, #296]	; (800c4a4 <problem_fetch+0xadbc>)
 800c37a:	461c      	mov	r4, r3
 800c37c:	4613      	mov	r3, r2
 800c37e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c380:	6020      	str	r0, [r4, #0]
 800c382:	6061      	str	r1, [r4, #4]
 800c384:	60a2      	str	r2, [r4, #8]
 800c386:	881a      	ldrh	r2, [r3, #0]
 800c388:	789b      	ldrb	r3, [r3, #2]
 800c38a:	81a2      	strh	r2, [r4, #12]
 800c38c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c394:	4a44      	ldr	r2, [pc, #272]	; (800c4a8 <problem_fetch+0xadc0>)
 800c396:	6810      	ldr	r0, [r2, #0]
 800c398:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2206      	movs	r2, #6
 800c39e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,F,I,D");
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	33a4      	adds	r3, #164	; 0xa4
 800c3a4:	4a41      	ldr	r2, [pc, #260]	; (800c4ac <problem_fetch+0xadc4>)
 800c3a6:	461c      	mov	r4, r3
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3ac:	6020      	str	r0, [r4, #0]
 800c3ae:	6061      	str	r1, [r4, #4]
 800c3b0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,14,18");
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3304      	adds	r3, #4
 800c3b6:	4a3e      	ldr	r2, [pc, #248]	; (800c4b0 <problem_fetch+0xadc8>)
 800c3b8:	461c      	mov	r4, r3
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3be:	6020      	str	r0, [r4, #0]
 800c3c0:	6061      	str	r1, [r4, #4]
 800c3c2:	60a2      	str	r2, [r4, #8]
 800c3c4:	881a      	ldrh	r2, [r3, #0]
 800c3c6:	789b      	ldrb	r3, [r3, #2]
 800c3c8:	81a2      	strh	r2, [r4, #12]
 800c3ca:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c3d2:	4a23      	ldr	r2, [pc, #140]	; (800c460 <problem_fetch+0xad78>)
 800c3d4:	461c      	mov	r4, r3
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c3da:	6020      	str	r0, [r4, #0]
 800c3dc:	6061      	str	r1, [r4, #4]
 800c3de:	60a2      	str	r2, [r4, #8]
			break;
 800c3e0:	f010 b8b2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 309 :
			strcpy(p->name,"KAKAKAKA");
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c3ea:	4932      	ldr	r1, [pc, #200]	; (800c4b4 <problem_fetch+0xadcc>)
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	cb03      	ldmia	r3!, {r0, r1}
 800c3f2:	6010      	str	r0, [r2, #0]
 800c3f4:	6051      	str	r1, [r2, #4]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c400:	4a2d      	ldr	r2, [pc, #180]	; (800c4b8 <problem_fetch+0xadd0>)
 800c402:	6810      	ldr	r0, [r2, #0]
 800c404:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2205      	movs	r2, #5
 800c40a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,F,I,D");
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	33a4      	adds	r3, #164	; 0xa4
 800c410:	492a      	ldr	r1, [pc, #168]	; (800c4bc <problem_fetch+0xadd4>)
 800c412:	461a      	mov	r2, r3
 800c414:	460b      	mov	r3, r1
 800c416:	cb03      	ldmia	r3!, {r0, r1}
 800c418:	6010      	str	r0, [r2, #0]
 800c41a:	6051      	str	r1, [r2, #4]
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3304      	adds	r3, #4
 800c424:	4a26      	ldr	r2, [pc, #152]	; (800c4c0 <problem_fetch+0xadd8>)
 800c426:	461c      	mov	r4, r3
 800c428:	4613      	mov	r3, r2
 800c42a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c42c:	6020      	str	r0, [r4, #0]
 800c42e:	6061      	str	r1, [r4, #4]
 800c430:	60a2      	str	r2, [r4, #8]
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c43c:	4921      	ldr	r1, [pc, #132]	; (800c4c4 <problem_fetch+0xaddc>)
 800c43e:	461a      	mov	r2, r3
 800c440:	460b      	mov	r3, r1
 800c442:	cb03      	ldmia	r3!, {r0, r1}
 800c444:	6010      	str	r0, [r2, #0]
 800c446:	6051      	str	r1, [r2, #4]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	8113      	strh	r3, [r2, #8]
			break;
 800c44c:	f010 b87c 	b.w	801c548 <problem_fetch+0x1ae60>
 800c450:	08027640 	.word	0x08027640
 800c454:	0802395c 	.word	0x0802395c
 800c458:	0802764c 	.word	0x0802764c
 800c45c:	08027658 	.word	0x08027658
 800c460:	0802393c 	.word	0x0802393c
 800c464:	08027668 	.word	0x08027668
 800c468:	08027670 	.word	0x08027670
 800c46c:	08027680 	.word	0x08027680
 800c470:	080239d4 	.word	0x080239d4
 800c474:	08027694 	.word	0x08027694
 800c478:	0802769c 	.word	0x0802769c
 800c47c:	080276ac 	.word	0x080276ac
 800c480:	080276c0 	.word	0x080276c0
 800c484:	08023a98 	.word	0x08023a98
 800c488:	080276c8 	.word	0x080276c8
 800c48c:	080276d8 	.word	0x080276d8
 800c490:	08023ae4 	.word	0x08023ae4
 800c494:	080276ec 	.word	0x080276ec
 800c498:	0802391c 	.word	0x0802391c
 800c49c:	080276fc 	.word	0x080276fc
 800c4a0:	08027708 	.word	0x08027708
 800c4a4:	08027718 	.word	0x08027718
 800c4a8:	08023afc 	.word	0x08023afc
 800c4ac:	08027728 	.word	0x08027728
 800c4b0:	08027734 	.word	0x08027734
 800c4b4:	08027744 	.word	0x08027744
 800c4b8:	080239f4 	.word	0x080239f4
 800c4bc:	08027750 	.word	0x08027750
 800c4c0:	0802775c 	.word	0x0802775c
 800c4c4:	08023e28 	.word	0x08023e28
		case 310 :
			strcpy(p->name,"FIRSTEASY");
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c4ce:	49ba      	ldr	r1, [pc, #744]	; (800c7b8 <problem_fetch+0xb0d0>)
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	460b      	mov	r3, r1
 800c4d4:	cb03      	ldmia	r3!, {r0, r1}
 800c4d6:	6010      	str	r0, [r2, #0]
 800c4d8:	6051      	str	r1, [r2, #4]
 800c4da:	881b      	ldrh	r3, [r3, #0]
 800c4dc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c4e4:	4ab5      	ldr	r2, [pc, #724]	; (800c7bc <problem_fetch+0xb0d4>)
 800c4e6:	6810      	ldr	r0, [r2, #0]
 800c4e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2206      	movs	r2, #6
 800c4ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,E,D");
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	33a4      	adds	r3, #164	; 0xa4
 800c4f4:	4ab2      	ldr	r2, [pc, #712]	; (800c7c0 <problem_fetch+0xb0d8>)
 800c4f6:	461c      	mov	r4, r3
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c4fc:	6020      	str	r0, [r4, #0]
 800c4fe:	6061      	str	r1, [r4, #4]
 800c500:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3304      	adds	r3, #4
 800c506:	4aaf      	ldr	r2, [pc, #700]	; (800c7c4 <problem_fetch+0xb0dc>)
 800c508:	461c      	mov	r4, r3
 800c50a:	4615      	mov	r5, r2
 800c50c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c50e:	6020      	str	r0, [r4, #0]
 800c510:	6061      	str	r1, [r4, #4]
 800c512:	60a2      	str	r2, [r4, #8]
 800c514:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c51c:	4aaa      	ldr	r2, [pc, #680]	; (800c7c8 <problem_fetch+0xb0e0>)
 800c51e:	461c      	mov	r4, r3
 800c520:	4613      	mov	r3, r2
 800c522:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c524:	6020      	str	r0, [r4, #0]
 800c526:	6061      	str	r1, [r4, #4]
 800c528:	60a2      	str	r2, [r4, #8]
			break;
 800c52a:	f010 b80d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 311 :
			strcpy(p->name,"MATTS");
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c534:	4aa5      	ldr	r2, [pc, #660]	; (800c7cc <problem_fetch+0xb0e4>)
 800c536:	6810      	ldr	r0, [r2, #0]
 800c538:	6018      	str	r0, [r3, #0]
 800c53a:	8892      	ldrh	r2, [r2, #4]
 800c53c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"8B+");
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c544:	4aa2      	ldr	r2, [pc, #648]	; (800c7d0 <problem_fetch+0xb0e8>)
 800c546:	6810      	ldr	r0, [r2, #0]
 800c548:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2206      	movs	r2, #6
 800c54e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,I,K,I,I");
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	33a4      	adds	r3, #164	; 0xa4
 800c554:	4a9f      	ldr	r2, [pc, #636]	; (800c7d4 <problem_fetch+0xb0ec>)
 800c556:	461c      	mov	r4, r3
 800c558:	4613      	mov	r3, r2
 800c55a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c55c:	6020      	str	r0, [r4, #0]
 800c55e:	6061      	str	r1, [r4, #4]
 800c560:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,11,7,14,9,18");
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	3304      	adds	r3, #4
 800c566:	4a9c      	ldr	r2, [pc, #624]	; (800c7d8 <problem_fetch+0xb0f0>)
 800c568:	461c      	mov	r4, r3
 800c56a:	4613      	mov	r3, r2
 800c56c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c56e:	6020      	str	r0, [r4, #0]
 800c570:	6061      	str	r1, [r4, #4]
 800c572:	60a2      	str	r2, [r4, #8]
 800c574:	881a      	ldrh	r2, [r3, #0]
 800c576:	789b      	ldrb	r3, [r3, #2]
 800c578:	81a2      	strh	r2, [r4, #12]
 800c57a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c582:	4a91      	ldr	r2, [pc, #580]	; (800c7c8 <problem_fetch+0xb0e0>)
 800c584:	461c      	mov	r4, r3
 800c586:	4613      	mov	r3, r2
 800c588:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c58a:	6020      	str	r0, [r4, #0]
 800c58c:	6061      	str	r1, [r4, #4]
 800c58e:	60a2      	str	r2, [r4, #8]
			break;
 800c590:	f00f bfda 	b.w	801c548 <problem_fetch+0x1ae60>
		case 312 :
			strcpy(p->name,"SO YOU THINK YOU CAN DYNO");
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c59a:	4a90      	ldr	r2, [pc, #576]	; (800c7dc <problem_fetch+0xb0f4>)
 800c59c:	461d      	mov	r5, r3
 800c59e:	4614      	mov	r4, r2
 800c5a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c5a2:	6028      	str	r0, [r5, #0]
 800c5a4:	6069      	str	r1, [r5, #4]
 800c5a6:	60aa      	str	r2, [r5, #8]
 800c5a8:	60eb      	str	r3, [r5, #12]
 800c5aa:	cc03      	ldmia	r4!, {r0, r1}
 800c5ac:	6128      	str	r0, [r5, #16]
 800c5ae:	6169      	str	r1, [r5, #20]
 800c5b0:	8823      	ldrh	r3, [r4, #0]
 800c5b2:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7B+");
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c5ba:	4a89      	ldr	r2, [pc, #548]	; (800c7e0 <problem_fetch+0xb0f8>)
 800c5bc:	6810      	ldr	r0, [r2, #0]
 800c5be:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2206      	movs	r2, #6
 800c5c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,I");
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	33a4      	adds	r3, #164	; 0xa4
 800c5ca:	4a86      	ldr	r2, [pc, #536]	; (800c7e4 <problem_fetch+0xb0fc>)
 800c5cc:	461c      	mov	r4, r3
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5d2:	6020      	str	r0, [r4, #0]
 800c5d4:	6061      	str	r1, [r4, #4]
 800c5d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,13,8,8,18");
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3304      	adds	r3, #4
 800c5dc:	4a82      	ldr	r2, [pc, #520]	; (800c7e8 <problem_fetch+0xb100>)
 800c5de:	461c      	mov	r4, r3
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5e4:	6020      	str	r0, [r4, #0]
 800c5e6:	6061      	str	r1, [r4, #4]
 800c5e8:	60a2      	str	r2, [r4, #8]
 800c5ea:	881b      	ldrh	r3, [r3, #0]
 800c5ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c5f4:	4a7d      	ldr	r2, [pc, #500]	; (800c7ec <problem_fetch+0xb104>)
 800c5f6:	461c      	mov	r4, r3
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c5fc:	6020      	str	r0, [r4, #0]
 800c5fe:	6061      	str	r1, [r4, #4]
 800c600:	60a2      	str	r2, [r4, #8]
			break;
 800c602:	f00f bfa1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 313 :
			strcpy(p->name,"THE TROLLOC WARS");
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c60c:	4a78      	ldr	r2, [pc, #480]	; (800c7f0 <problem_fetch+0xb108>)
 800c60e:	461d      	mov	r5, r3
 800c610:	4614      	mov	r4, r2
 800c612:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c614:	6028      	str	r0, [r5, #0]
 800c616:	6069      	str	r1, [r5, #4]
 800c618:	60aa      	str	r2, [r5, #8]
 800c61a:	60eb      	str	r3, [r5, #12]
 800c61c:	7823      	ldrb	r3, [r4, #0]
 800c61e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c626:	4a73      	ldr	r2, [pc, #460]	; (800c7f4 <problem_fetch+0xb10c>)
 800c628:	8811      	ldrh	r1, [r2, #0]
 800c62a:	7892      	ldrb	r2, [r2, #2]
 800c62c:	8019      	strh	r1, [r3, #0]
 800c62e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2205      	movs	r2, #5
 800c634:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,A,D");
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	33a4      	adds	r3, #164	; 0xa4
 800c63a:	496f      	ldr	r1, [pc, #444]	; (800c7f8 <problem_fetch+0xb110>)
 800c63c:	461a      	mov	r2, r3
 800c63e:	460b      	mov	r3, r1
 800c640:	cb03      	ldmia	r3!, {r0, r1}
 800c642:	6010      	str	r0, [r2, #0]
 800c644:	6051      	str	r1, [r2, #4]
 800c646:	881b      	ldrh	r3, [r3, #0]
 800c648:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4a6b      	ldr	r2, [pc, #428]	; (800c7fc <problem_fetch+0xb114>)
 800c650:	461c      	mov	r4, r3
 800c652:	4613      	mov	r3, r2
 800c654:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c656:	6020      	str	r0, [r4, #0]
 800c658:	6061      	str	r1, [r4, #4]
 800c65a:	60a2      	str	r2, [r4, #8]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c666:	4966      	ldr	r1, [pc, #408]	; (800c800 <problem_fetch+0xb118>)
 800c668:	461a      	mov	r2, r3
 800c66a:	460b      	mov	r3, r1
 800c66c:	cb03      	ldmia	r3!, {r0, r1}
 800c66e:	6010      	str	r0, [r2, #0]
 800c670:	6051      	str	r1, [r2, #4]
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	8113      	strh	r3, [r2, #8]
			break;
 800c676:	f00f bf67 	b.w	801c548 <problem_fetch+0x1ae60>
		case 314 :
			strcpy(p->name,"BRETT'S PROBLEM");
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c680:	4a60      	ldr	r2, [pc, #384]	; (800c804 <problem_fetch+0xb11c>)
 800c682:	461c      	mov	r4, r3
 800c684:	4615      	mov	r5, r2
 800c686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c688:	6020      	str	r0, [r4, #0]
 800c68a:	6061      	str	r1, [r4, #4]
 800c68c:	60a2      	str	r2, [r4, #8]
 800c68e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c696:	4a52      	ldr	r2, [pc, #328]	; (800c7e0 <problem_fetch+0xb0f8>)
 800c698:	6810      	ldr	r0, [r2, #0]
 800c69a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2206      	movs	r2, #6
 800c6a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,G,B,C,D");
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	33a4      	adds	r3, #164	; 0xa4
 800c6a6:	4a58      	ldr	r2, [pc, #352]	; (800c808 <problem_fetch+0xb120>)
 800c6a8:	461c      	mov	r4, r3
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6ae:	6020      	str	r0, [r4, #0]
 800c6b0:	6061      	str	r1, [r4, #4]
 800c6b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,13,18");
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	4a54      	ldr	r2, [pc, #336]	; (800c80c <problem_fetch+0xb124>)
 800c6ba:	461c      	mov	r4, r3
 800c6bc:	4615      	mov	r5, r2
 800c6be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6c0:	6020      	str	r0, [r4, #0]
 800c6c2:	6061      	str	r1, [r4, #4]
 800c6c4:	60a2      	str	r2, [r4, #8]
 800c6c6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c6ce:	4a3e      	ldr	r2, [pc, #248]	; (800c7c8 <problem_fetch+0xb0e0>)
 800c6d0:	461c      	mov	r4, r3
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6d6:	6020      	str	r0, [r4, #0]
 800c6d8:	6061      	str	r1, [r4, #4]
 800c6da:	60a2      	str	r2, [r4, #8]
			break;
 800c6dc:	f00f bf34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 315 :
			strcpy(p->name,"GNOCCHE AL RAGÙ");
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c6e6:	4a4a      	ldr	r2, [pc, #296]	; (800c810 <problem_fetch+0xb128>)
 800c6e8:	461d      	mov	r5, r3
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c6ee:	6028      	str	r0, [r5, #0]
 800c6f0:	6069      	str	r1, [r5, #4]
 800c6f2:	60aa      	str	r2, [r5, #8]
 800c6f4:	60eb      	str	r3, [r5, #12]
 800c6f6:	7823      	ldrb	r3, [r4, #0]
 800c6f8:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c700:	4a44      	ldr	r2, [pc, #272]	; (800c814 <problem_fetch+0xb12c>)
 800c702:	6810      	ldr	r0, [r2, #0]
 800c704:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2206      	movs	r2, #6
 800c70a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,H,K,I");
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	33a4      	adds	r3, #164	; 0xa4
 800c710:	4a41      	ldr	r2, [pc, #260]	; (800c818 <problem_fetch+0xb130>)
 800c712:	461c      	mov	r4, r3
 800c714:	4613      	mov	r3, r2
 800c716:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c718:	6020      	str	r0, [r4, #0]
 800c71a:	6061      	str	r1, [r4, #4]
 800c71c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,12,14,18");
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3304      	adds	r3, #4
 800c722:	4a3e      	ldr	r2, [pc, #248]	; (800c81c <problem_fetch+0xb134>)
 800c724:	461c      	mov	r4, r3
 800c726:	4615      	mov	r5, r2
 800c728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c72a:	6020      	str	r0, [r4, #0]
 800c72c:	6061      	str	r1, [r4, #4]
 800c72e:	60a2      	str	r2, [r4, #8]
 800c730:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c738:	4a23      	ldr	r2, [pc, #140]	; (800c7c8 <problem_fetch+0xb0e0>)
 800c73a:	461c      	mov	r4, r3
 800c73c:	4613      	mov	r3, r2
 800c73e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c740:	6020      	str	r0, [r4, #0]
 800c742:	6061      	str	r1, [r4, #4]
 800c744:	60a2      	str	r2, [r4, #8]
			break;
 800c746:	f00f beff 	b.w	801c548 <problem_fetch+0x1ae60>
		case 316 :
			strcpy(p->name,"A SAFE PLACE");
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c750:	4a33      	ldr	r2, [pc, #204]	; (800c820 <problem_fetch+0xb138>)
 800c752:	461c      	mov	r4, r3
 800c754:	4613      	mov	r3, r2
 800c756:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c758:	6020      	str	r0, [r4, #0]
 800c75a:	6061      	str	r1, [r4, #4]
 800c75c:	60a2      	str	r2, [r4, #8]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c768:	4a2e      	ldr	r2, [pc, #184]	; (800c824 <problem_fetch+0xb13c>)
 800c76a:	8811      	ldrh	r1, [r2, #0]
 800c76c:	7892      	ldrb	r2, [r2, #2]
 800c76e:	8019      	strh	r1, [r3, #0]
 800c770:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2206      	movs	r2, #6
 800c776:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,D,G,E,D");
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	33a4      	adds	r3, #164	; 0xa4
 800c77c:	4a2a      	ldr	r2, [pc, #168]	; (800c828 <problem_fetch+0xb140>)
 800c77e:	461c      	mov	r4, r3
 800c780:	4613      	mov	r3, r2
 800c782:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c784:	6020      	str	r0, [r4, #0]
 800c786:	6061      	str	r1, [r4, #4]
 800c788:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3304      	adds	r3, #4
 800c78e:	4a27      	ldr	r2, [pc, #156]	; (800c82c <problem_fetch+0xb144>)
 800c790:	461c      	mov	r4, r3
 800c792:	4615      	mov	r5, r2
 800c794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c796:	6020      	str	r0, [r4, #0]
 800c798:	6061      	str	r1, [r4, #4]
 800c79a:	60a2      	str	r2, [r4, #8]
 800c79c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c7a4:	4a08      	ldr	r2, [pc, #32]	; (800c7c8 <problem_fetch+0xb0e0>)
 800c7a6:	461c      	mov	r4, r3
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7ac:	6020      	str	r0, [r4, #0]
 800c7ae:	6061      	str	r1, [r4, #4]
 800c7b0:	60a2      	str	r2, [r4, #8]
			break;
 800c7b2:	f00f bec9 	b.w	801c548 <problem_fetch+0x1ae60>
 800c7b6:	bf00      	nop
 800c7b8:	0802776c 	.word	0x0802776c
 800c7bc:	0802395c 	.word	0x0802395c
 800c7c0:	08027778 	.word	0x08027778
 800c7c4:	08026030 	.word	0x08026030
 800c7c8:	08023cf8 	.word	0x08023cf8
 800c7cc:	08027784 	.word	0x08027784
 800c7d0:	0802778c 	.word	0x0802778c
 800c7d4:	08027790 	.word	0x08027790
 800c7d8:	0802779c 	.word	0x0802779c
 800c7dc:	080277ac 	.word	0x080277ac
 800c7e0:	08023a98 	.word	0x08023a98
 800c7e4:	080277c8 	.word	0x080277c8
 800c7e8:	080277d4 	.word	0x080277d4
 800c7ec:	0802393c 	.word	0x0802393c
 800c7f0:	080277e4 	.word	0x080277e4
 800c7f4:	0802391c 	.word	0x0802391c
 800c7f8:	080277f8 	.word	0x080277f8
 800c7fc:	08027804 	.word	0x08027804
 800c800:	0802403c 	.word	0x0802403c
 800c804:	08027814 	.word	0x08027814
 800c808:	08027824 	.word	0x08027824
 800c80c:	08027830 	.word	0x08027830
 800c810:	08027840 	.word	0x08027840
 800c814:	08023afc 	.word	0x08023afc
 800c818:	08027854 	.word	0x08027854
 800c81c:	08027860 	.word	0x08027860
 800c820:	08027870 	.word	0x08027870
 800c824:	08023a28 	.word	0x08023a28
 800c828:	08027880 	.word	0x08027880
 800c82c:	0802788c 	.word	0x0802788c
		case 317 :
			strcpy(p->name,"CRONENBERG");
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c836:	49a8      	ldr	r1, [pc, #672]	; (800cad8 <problem_fetch+0xb3f0>)
 800c838:	461a      	mov	r2, r3
 800c83a:	460b      	mov	r3, r1
 800c83c:	cb03      	ldmia	r3!, {r0, r1}
 800c83e:	6010      	str	r0, [r2, #0]
 800c840:	6051      	str	r1, [r2, #4]
 800c842:	8819      	ldrh	r1, [r3, #0]
 800c844:	789b      	ldrb	r3, [r3, #2]
 800c846:	8111      	strh	r1, [r2, #8]
 800c848:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c850:	4aa2      	ldr	r2, [pc, #648]	; (800cadc <problem_fetch+0xb3f4>)
 800c852:	6810      	ldr	r0, [r2, #0]
 800c854:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2207      	movs	r2, #7
 800c85a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,E,I");
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	33a4      	adds	r3, #164	; 0xa4
 800c860:	4a9f      	ldr	r2, [pc, #636]	; (800cae0 <problem_fetch+0xb3f8>)
 800c862:	461c      	mov	r4, r3
 800c864:	4613      	mov	r3, r2
 800c866:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c868:	6020      	str	r0, [r4, #0]
 800c86a:	6061      	str	r1, [r4, #4]
 800c86c:	60a2      	str	r2, [r4, #8]
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,9,12,16,18");
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	3304      	adds	r3, #4
 800c876:	4a9b      	ldr	r2, [pc, #620]	; (800cae4 <problem_fetch+0xb3fc>)
 800c878:	461d      	mov	r5, r3
 800c87a:	4614      	mov	r4, r2
 800c87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c87e:	6028      	str	r0, [r5, #0]
 800c880:	6069      	str	r1, [r5, #4]
 800c882:	60aa      	str	r2, [r5, #8]
 800c884:	60eb      	str	r3, [r5, #12]
 800c886:	7823      	ldrb	r3, [r4, #0]
 800c888:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c890:	4a95      	ldr	r2, [pc, #596]	; (800cae8 <problem_fetch+0xb400>)
 800c892:	461c      	mov	r4, r3
 800c894:	4613      	mov	r3, r2
 800c896:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c898:	6020      	str	r0, [r4, #0]
 800c89a:	6061      	str	r1, [r4, #4]
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	881b      	ldrh	r3, [r3, #0]
 800c8a0:	81a3      	strh	r3, [r4, #12]
			break;
 800c8a2:	f00f be51 	b.w	801c548 <problem_fetch+0x1ae60>
		case 318 :
			strcpy(p->name,"ALLES IST MÖGLICH");
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c8ac:	4a8f      	ldr	r2, [pc, #572]	; (800caec <problem_fetch+0xb404>)
 800c8ae:	461d      	mov	r5, r3
 800c8b0:	4614      	mov	r4, r2
 800c8b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8b4:	6028      	str	r0, [r5, #0]
 800c8b6:	6069      	str	r1, [r5, #4]
 800c8b8:	60aa      	str	r2, [r5, #8]
 800c8ba:	60eb      	str	r3, [r5, #12]
 800c8bc:	8823      	ldrh	r3, [r4, #0]
 800c8be:	78a2      	ldrb	r2, [r4, #2]
 800c8c0:	822b      	strh	r3, [r5, #16]
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B+");
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c8cc:	4a88      	ldr	r2, [pc, #544]	; (800caf0 <problem_fetch+0xb408>)
 800c8ce:	6810      	ldr	r0, [r2, #0]
 800c8d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2204      	movs	r2, #4
 800c8d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,D");
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	33a4      	adds	r3, #164	; 0xa4
 800c8dc:	4985      	ldr	r1, [pc, #532]	; (800caf4 <problem_fetch+0xb40c>)
 800c8de:	461a      	mov	r2, r3
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	cb03      	ldmia	r3!, {r0, r1}
 800c8e4:	6010      	str	r0, [r2, #0]
 800c8e6:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	4982      	ldr	r1, [pc, #520]	; (800caf8 <problem_fetch+0xb410>)
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	cb03      	ldmia	r3!, {r0, r1}
 800c8f4:	6010      	str	r0, [r2, #0]
 800c8f6:	6051      	str	r1, [r2, #4]
 800c8f8:	8819      	ldrh	r1, [r3, #0]
 800c8fa:	789b      	ldrb	r3, [r3, #2]
 800c8fc:	8111      	strh	r1, [r2, #8]
 800c8fe:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c906:	497d      	ldr	r1, [pc, #500]	; (800cafc <problem_fetch+0xb414>)
 800c908:	461a      	mov	r2, r3
 800c90a:	460b      	mov	r3, r1
 800c90c:	cb03      	ldmia	r3!, {r0, r1}
 800c90e:	6010      	str	r0, [r2, #0]
 800c910:	6051      	str	r1, [r2, #4]
			break;
 800c912:	f00f be19 	b.w	801c548 <problem_fetch+0x1ae60>
		case 319 :
			strcpy(p->name,"KKSBSKAN");
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c91c:	4978      	ldr	r1, [pc, #480]	; (800cb00 <problem_fetch+0xb418>)
 800c91e:	461a      	mov	r2, r3
 800c920:	460b      	mov	r3, r1
 800c922:	cb03      	ldmia	r3!, {r0, r1}
 800c924:	6010      	str	r0, [r2, #0]
 800c926:	6051      	str	r1, [r2, #4]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c932:	4a74      	ldr	r2, [pc, #464]	; (800cb04 <problem_fetch+0xb41c>)
 800c934:	8811      	ldrh	r1, [r2, #0]
 800c936:	7892      	ldrb	r2, [r2, #2]
 800c938:	8019      	strh	r1, [r3, #0]
 800c93a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2205      	movs	r2, #5
 800c940:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,C,I");
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	33a4      	adds	r3, #164	; 0xa4
 800c946:	4970      	ldr	r1, [pc, #448]	; (800cb08 <problem_fetch+0xb420>)
 800c948:	461a      	mov	r2, r3
 800c94a:	460b      	mov	r3, r1
 800c94c:	cb03      	ldmia	r3!, {r0, r1}
 800c94e:	6010      	str	r0, [r2, #0]
 800c950:	6051      	str	r1, [r2, #4]
 800c952:	881b      	ldrh	r3, [r3, #0]
 800c954:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,16,18");
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	3304      	adds	r3, #4
 800c95a:	4a6c      	ldr	r2, [pc, #432]	; (800cb0c <problem_fetch+0xb424>)
 800c95c:	461c      	mov	r4, r3
 800c95e:	4613      	mov	r3, r2
 800c960:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c962:	6020      	str	r0, [r4, #0]
 800c964:	6061      	str	r1, [r4, #4]
 800c966:	60a2      	str	r2, [r4, #8]
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c972:	4967      	ldr	r1, [pc, #412]	; (800cb10 <problem_fetch+0xb428>)
 800c974:	461a      	mov	r2, r3
 800c976:	460b      	mov	r3, r1
 800c978:	cb03      	ldmia	r3!, {r0, r1}
 800c97a:	6010      	str	r0, [r2, #0]
 800c97c:	6051      	str	r1, [r2, #4]
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	8113      	strh	r3, [r2, #8]
			break;
 800c982:	f00f bde1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 320 :
			strcpy(p->name,"MATCHCATCH");
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c98c:	4961      	ldr	r1, [pc, #388]	; (800cb14 <problem_fetch+0xb42c>)
 800c98e:	461a      	mov	r2, r3
 800c990:	460b      	mov	r3, r1
 800c992:	cb03      	ldmia	r3!, {r0, r1}
 800c994:	6010      	str	r0, [r2, #0]
 800c996:	6051      	str	r1, [r2, #4]
 800c998:	8819      	ldrh	r1, [r3, #0]
 800c99a:	789b      	ldrb	r3, [r3, #2]
 800c99c:	8111      	strh	r1, [r2, #8]
 800c99e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800c9a6:	4a4d      	ldr	r2, [pc, #308]	; (800cadc <problem_fetch+0xb3f4>)
 800c9a8:	6810      	ldr	r0, [r2, #0]
 800c9aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2205      	movs	r2, #5
 800c9b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,J,G,I");
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	33a4      	adds	r3, #164	; 0xa4
 800c9b6:	4958      	ldr	r1, [pc, #352]	; (800cb18 <problem_fetch+0xb430>)
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	cb03      	ldmia	r3!, {r0, r1}
 800c9be:	6010      	str	r0, [r2, #0]
 800c9c0:	6051      	str	r1, [r2, #4]
 800c9c2:	881b      	ldrh	r3, [r3, #0]
 800c9c4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4a54      	ldr	r2, [pc, #336]	; (800cb1c <problem_fetch+0xb434>)
 800c9cc:	461c      	mov	r4, r3
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9d2:	6020      	str	r0, [r4, #0]
 800c9d4:	6061      	str	r1, [r4, #4]
 800c9d6:	60a2      	str	r2, [r4, #8]
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800c9e2:	494b      	ldr	r1, [pc, #300]	; (800cb10 <problem_fetch+0xb428>)
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	cb03      	ldmia	r3!, {r0, r1}
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	6051      	str	r1, [r2, #4]
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	8113      	strh	r3, [r2, #8]
			break;
 800c9f2:	f00f bda9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 321 :
			strcpy(p->name,"CAPTAIN AUBREY VAR.");
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c9fc:	4a48      	ldr	r2, [pc, #288]	; (800cb20 <problem_fetch+0xb438>)
 800c9fe:	461d      	mov	r5, r3
 800ca00:	4614      	mov	r4, r2
 800ca02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca04:	6028      	str	r0, [r5, #0]
 800ca06:	6069      	str	r1, [r5, #4]
 800ca08:	60aa      	str	r2, [r5, #8]
 800ca0a:	60eb      	str	r3, [r5, #12]
 800ca0c:	6820      	ldr	r0, [r4, #0]
 800ca0e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ca16:	4a43      	ldr	r2, [pc, #268]	; (800cb24 <problem_fetch+0xb43c>)
 800ca18:	6810      	ldr	r0, [r2, #0]
 800ca1a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2205      	movs	r2, #5
 800ca20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,I");
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	33a4      	adds	r3, #164	; 0xa4
 800ca26:	4940      	ldr	r1, [pc, #256]	; (800cb28 <problem_fetch+0xb440>)
 800ca28:	461a      	mov	r2, r3
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	cb03      	ldmia	r3!, {r0, r1}
 800ca2e:	6010      	str	r0, [r2, #0]
 800ca30:	6051      	str	r1, [r2, #4]
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	3304      	adds	r3, #4
 800ca3a:	4a3c      	ldr	r2, [pc, #240]	; (800cb2c <problem_fetch+0xb444>)
 800ca3c:	461c      	mov	r4, r3
 800ca3e:	4613      	mov	r3, r2
 800ca40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca42:	6020      	str	r0, [r4, #0]
 800ca44:	6061      	str	r1, [r4, #4]
 800ca46:	60a2      	str	r2, [r4, #8]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ca52:	492f      	ldr	r1, [pc, #188]	; (800cb10 <problem_fetch+0xb428>)
 800ca54:	461a      	mov	r2, r3
 800ca56:	460b      	mov	r3, r1
 800ca58:	cb03      	ldmia	r3!, {r0, r1}
 800ca5a:	6010      	str	r0, [r2, #0]
 800ca5c:	6051      	str	r1, [r2, #4]
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	8113      	strh	r3, [r2, #8]
			break;
 800ca62:	f00f bd71 	b.w	801c548 <problem_fetch+0x1ae60>
		case 322 :
			strcpy(p->name,"OKLAHOMA");
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ca6c:	4930      	ldr	r1, [pc, #192]	; (800cb30 <problem_fetch+0xb448>)
 800ca6e:	461a      	mov	r2, r3
 800ca70:	460b      	mov	r3, r1
 800ca72:	cb03      	ldmia	r3!, {r0, r1}
 800ca74:	6010      	str	r0, [r2, #0]
 800ca76:	6051      	str	r1, [r2, #4]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ca82:	4a2c      	ldr	r2, [pc, #176]	; (800cb34 <problem_fetch+0xb44c>)
 800ca84:	8811      	ldrh	r1, [r2, #0]
 800ca86:	7892      	ldrb	r2, [r2, #2]
 800ca88:	8019      	strh	r1, [r3, #0]
 800ca8a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2205      	movs	r2, #5
 800ca90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,A");
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	33a4      	adds	r3, #164	; 0xa4
 800ca96:	4928      	ldr	r1, [pc, #160]	; (800cb38 <problem_fetch+0xb450>)
 800ca98:	461a      	mov	r2, r3
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	cb03      	ldmia	r3!, {r0, r1}
 800ca9e:	6010      	str	r0, [r2, #0]
 800caa0:	6051      	str	r1, [r2, #4]
 800caa2:	881b      	ldrh	r3, [r3, #0]
 800caa4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3304      	adds	r3, #4
 800caaa:	4a24      	ldr	r2, [pc, #144]	; (800cb3c <problem_fetch+0xb454>)
 800caac:	461c      	mov	r4, r3
 800caae:	4613      	mov	r3, r2
 800cab0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	6061      	str	r1, [r4, #4]
 800cab6:	60a2      	str	r2, [r4, #8]
 800cab8:	881b      	ldrh	r3, [r3, #0]
 800caba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cac2:	4913      	ldr	r1, [pc, #76]	; (800cb10 <problem_fetch+0xb428>)
 800cac4:	461a      	mov	r2, r3
 800cac6:	460b      	mov	r3, r1
 800cac8:	cb03      	ldmia	r3!, {r0, r1}
 800caca:	6010      	str	r0, [r2, #0]
 800cacc:	6051      	str	r1, [r2, #4]
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	8113      	strh	r3, [r2, #8]
			break;
 800cad2:	f00f bd39 	b.w	801c548 <problem_fetch+0x1ae60>
 800cad6:	bf00      	nop
 800cad8:	0802789c 	.word	0x0802789c
 800cadc:	080239f4 	.word	0x080239f4
 800cae0:	080278a8 	.word	0x080278a8
 800cae4:	080278b8 	.word	0x080278b8
 800cae8:	08023ae4 	.word	0x08023ae4
 800caec:	080278cc 	.word	0x080278cc
 800caf0:	08023a98 	.word	0x08023a98
 800caf4:	080278e0 	.word	0x080278e0
 800caf8:	080278e8 	.word	0x080278e8
 800cafc:	08023ab0 	.word	0x08023ab0
 800cb00:	080278f4 	.word	0x080278f4
 800cb04:	08024190 	.word	0x08024190
 800cb08:	08027900 	.word	0x08027900
 800cb0c:	0802790c 	.word	0x0802790c
 800cb10:	08023e28 	.word	0x08023e28
 800cb14:	0802791c 	.word	0x0802791c
 800cb18:	08027928 	.word	0x08027928
 800cb1c:	0802775c 	.word	0x0802775c
 800cb20:	08027934 	.word	0x08027934
 800cb24:	08023afc 	.word	0x08023afc
 800cb28:	08027948 	.word	0x08027948
 800cb2c:	08027954 	.word	0x08027954
 800cb30:	08027964 	.word	0x08027964
 800cb34:	0802391c 	.word	0x0802391c
 800cb38:	08027970 	.word	0x08027970
 800cb3c:	0802797c 	.word	0x0802797c
		case 323 :
			strcpy(p->name,"BLACK PHENOMENON");
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cb46:	4ac0      	ldr	r2, [pc, #768]	; (800ce48 <problem_fetch+0xb760>)
 800cb48:	461d      	mov	r5, r3
 800cb4a:	4614      	mov	r4, r2
 800cb4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb4e:	6028      	str	r0, [r5, #0]
 800cb50:	6069      	str	r1, [r5, #4]
 800cb52:	60aa      	str	r2, [r5, #8]
 800cb54:	60eb      	str	r3, [r5, #12]
 800cb56:	7823      	ldrb	r3, [r4, #0]
 800cb58:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"8A");
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cb60:	4aba      	ldr	r2, [pc, #744]	; (800ce4c <problem_fetch+0xb764>)
 800cb62:	8811      	ldrh	r1, [r2, #0]
 800cb64:	7892      	ldrb	r2, [r2, #2]
 800cb66:	8019      	strh	r1, [r3, #0]
 800cb68:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2206      	movs	r2, #6
 800cb6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,B,G,B,D");
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	33a4      	adds	r3, #164	; 0xa4
 800cb74:	4ab6      	ldr	r2, [pc, #728]	; (800ce50 <problem_fetch+0xb768>)
 800cb76:	461c      	mov	r4, r3
 800cb78:	4613      	mov	r3, r2
 800cb7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb7c:	6020      	str	r0, [r4, #0]
 800cb7e:	6061      	str	r1, [r4, #4]
 800cb80:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,6,10,10,18");
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	3304      	adds	r3, #4
 800cb86:	4ab3      	ldr	r2, [pc, #716]	; (800ce54 <problem_fetch+0xb76c>)
 800cb88:	461c      	mov	r4, r3
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cb8e:	6020      	str	r0, [r4, #0]
 800cb90:	6061      	str	r1, [r4, #4]
 800cb92:	60a2      	str	r2, [r4, #8]
 800cb94:	881a      	ldrh	r2, [r3, #0]
 800cb96:	789b      	ldrb	r3, [r3, #2]
 800cb98:	81a2      	strh	r2, [r4, #12]
 800cb9a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cba2:	4aad      	ldr	r2, [pc, #692]	; (800ce58 <problem_fetch+0xb770>)
 800cba4:	461c      	mov	r4, r3
 800cba6:	4613      	mov	r3, r2
 800cba8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbaa:	6020      	str	r0, [r4, #0]
 800cbac:	6061      	str	r1, [r4, #4]
 800cbae:	60a2      	str	r2, [r4, #8]
			break;
 800cbb0:	f00f bcca 	b.w	801c548 <problem_fetch+0x1ae60>
		case 324 :
			strcpy(p->name,"KHAZAD DUM");
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cbba:	49a8      	ldr	r1, [pc, #672]	; (800ce5c <problem_fetch+0xb774>)
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	cb03      	ldmia	r3!, {r0, r1}
 800cbc2:	6010      	str	r0, [r2, #0]
 800cbc4:	6051      	str	r1, [r2, #4]
 800cbc6:	8819      	ldrh	r1, [r3, #0]
 800cbc8:	789b      	ldrb	r3, [r3, #2]
 800cbca:	8111      	strh	r1, [r2, #8]
 800cbcc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cbd4:	4aa2      	ldr	r2, [pc, #648]	; (800ce60 <problem_fetch+0xb778>)
 800cbd6:	6810      	ldr	r0, [r2, #0]
 800cbd8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2206      	movs	r2, #6
 800cbde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,D,A");
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	33a4      	adds	r3, #164	; 0xa4
 800cbe4:	4a9f      	ldr	r2, [pc, #636]	; (800ce64 <problem_fetch+0xb77c>)
 800cbe6:	461c      	mov	r4, r3
 800cbe8:	4613      	mov	r3, r2
 800cbea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cbec:	6020      	str	r0, [r4, #0]
 800cbee:	6061      	str	r1, [r4, #4]
 800cbf0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,13,15,18");
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	4a9c      	ldr	r2, [pc, #624]	; (800ce68 <problem_fetch+0xb780>)
 800cbf8:	461c      	mov	r4, r3
 800cbfa:	4615      	mov	r5, r2
 800cbfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbfe:	6020      	str	r0, [r4, #0]
 800cc00:	6061      	str	r1, [r4, #4]
 800cc02:	60a2      	str	r2, [r4, #8]
 800cc04:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cc0c:	4a92      	ldr	r2, [pc, #584]	; (800ce58 <problem_fetch+0xb770>)
 800cc0e:	461c      	mov	r4, r3
 800cc10:	4613      	mov	r3, r2
 800cc12:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc14:	6020      	str	r0, [r4, #0]
 800cc16:	6061      	str	r1, [r4, #4]
 800cc18:	60a2      	str	r2, [r4, #8]
			break;
 800cc1a:	f00f bc95 	b.w	801c548 <problem_fetch+0x1ae60>
		case 325 :
			strcpy(p->name,"TESSME 4");
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc24:	4991      	ldr	r1, [pc, #580]	; (800ce6c <problem_fetch+0xb784>)
 800cc26:	461a      	mov	r2, r3
 800cc28:	460b      	mov	r3, r1
 800cc2a:	cb03      	ldmia	r3!, {r0, r1}
 800cc2c:	6010      	str	r0, [r2, #0]
 800cc2e:	6051      	str	r1, [r2, #4]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cc3a:	4a8d      	ldr	r2, [pc, #564]	; (800ce70 <problem_fetch+0xb788>)
 800cc3c:	6810      	ldr	r0, [r2, #0]
 800cc3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2206      	movs	r2, #6
 800cc44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,I,D,I");
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	33a4      	adds	r3, #164	; 0xa4
 800cc4a:	4a8a      	ldr	r2, [pc, #552]	; (800ce74 <problem_fetch+0xb78c>)
 800cc4c:	461c      	mov	r4, r3
 800cc4e:	4613      	mov	r3, r2
 800cc50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc52:	6020      	str	r0, [r4, #0]
 800cc54:	6061      	str	r1, [r4, #4]
 800cc56:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,12,14,7,18");
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	4a86      	ldr	r2, [pc, #536]	; (800ce78 <problem_fetch+0xb790>)
 800cc5e:	461c      	mov	r4, r3
 800cc60:	4613      	mov	r3, r2
 800cc62:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc64:	6020      	str	r0, [r4, #0]
 800cc66:	6061      	str	r1, [r4, #4]
 800cc68:	60a2      	str	r2, [r4, #8]
 800cc6a:	881a      	ldrh	r2, [r3, #0]
 800cc6c:	789b      	ldrb	r3, [r3, #2]
 800cc6e:	81a2      	strh	r2, [r4, #12]
 800cc70:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cc78:	4a77      	ldr	r2, [pc, #476]	; (800ce58 <problem_fetch+0xb770>)
 800cc7a:	461c      	mov	r4, r3
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cc80:	6020      	str	r0, [r4, #0]
 800cc82:	6061      	str	r1, [r4, #4]
 800cc84:	60a2      	str	r2, [r4, #8]
			break;
 800cc86:	f00f bc5f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 326 :
			strcpy(p->name,"TESSME 3");
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cc90:	497a      	ldr	r1, [pc, #488]	; (800ce7c <problem_fetch+0xb794>)
 800cc92:	461a      	mov	r2, r3
 800cc94:	460b      	mov	r3, r1
 800cc96:	cb03      	ldmia	r3!, {r0, r1}
 800cc98:	6010      	str	r0, [r2, #0]
 800cc9a:	6051      	str	r1, [r2, #4]
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cca6:	4a76      	ldr	r2, [pc, #472]	; (800ce80 <problem_fetch+0xb798>)
 800cca8:	6810      	ldr	r0, [r2, #0]
 800ccaa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2206      	movs	r2, #6
 800ccb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,E,E,I");
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	33a4      	adds	r3, #164	; 0xa4
 800ccb6:	4a73      	ldr	r2, [pc, #460]	; (800ce84 <problem_fetch+0xb79c>)
 800ccb8:	461c      	mov	r4, r3
 800ccba:	4613      	mov	r3, r2
 800ccbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccbe:	6020      	str	r0, [r4, #0]
 800ccc0:	6061      	str	r1, [r4, #4]
 800ccc2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,14,12,9,18");
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4a6f      	ldr	r2, [pc, #444]	; (800ce88 <problem_fetch+0xb7a0>)
 800ccca:	461c      	mov	r4, r3
 800cccc:	4613      	mov	r3, r2
 800ccce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccd0:	6020      	str	r0, [r4, #0]
 800ccd2:	6061      	str	r1, [r4, #4]
 800ccd4:	60a2      	str	r2, [r4, #8]
 800ccd6:	881a      	ldrh	r2, [r3, #0]
 800ccd8:	789b      	ldrb	r3, [r3, #2]
 800ccda:	81a2      	strh	r2, [r4, #12]
 800ccdc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cce4:	4a5c      	ldr	r2, [pc, #368]	; (800ce58 <problem_fetch+0xb770>)
 800cce6:	461c      	mov	r4, r3
 800cce8:	4613      	mov	r3, r2
 800ccea:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ccec:	6020      	str	r0, [r4, #0]
 800ccee:	6061      	str	r1, [r4, #4]
 800ccf0:	60a2      	str	r2, [r4, #8]
			break;
 800ccf2:	f00f bc29 	b.w	801c548 <problem_fetch+0x1ae60>
		case 327 :
			strcpy(p->name,"TESSME 1");
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ccfc:	4963      	ldr	r1, [pc, #396]	; (800ce8c <problem_fetch+0xb7a4>)
 800ccfe:	461a      	mov	r2, r3
 800cd00:	460b      	mov	r3, r1
 800cd02:	cb03      	ldmia	r3!, {r0, r1}
 800cd04:	6010      	str	r0, [r2, #0]
 800cd06:	6051      	str	r1, [r2, #4]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd12:	4a53      	ldr	r2, [pc, #332]	; (800ce60 <problem_fetch+0xb778>)
 800cd14:	6810      	ldr	r0, [r2, #0]
 800cd16:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2207      	movs	r2, #7
 800cd1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,J,H,I");
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	33a4      	adds	r3, #164	; 0xa4
 800cd22:	4a5b      	ldr	r2, [pc, #364]	; (800ce90 <problem_fetch+0xb7a8>)
 800cd24:	461c      	mov	r4, r3
 800cd26:	4613      	mov	r3, r2
 800cd28:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd2a:	6020      	str	r0, [r4, #0]
 800cd2c:	6061      	str	r1, [r4, #4]
 800cd2e:	60a2      	str	r2, [r4, #8]
 800cd30:	881b      	ldrh	r3, [r3, #0]
 800cd32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4a56      	ldr	r2, [pc, #344]	; (800ce94 <problem_fetch+0xb7ac>)
 800cd3a:	461d      	mov	r5, r3
 800cd3c:	4614      	mov	r4, r2
 800cd3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd40:	6028      	str	r0, [r5, #0]
 800cd42:	6069      	str	r1, [r5, #4]
 800cd44:	60aa      	str	r2, [r5, #8]
 800cd46:	60eb      	str	r3, [r5, #12]
 800cd48:	8823      	ldrh	r3, [r4, #0]
 800cd4a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cd52:	4a51      	ldr	r2, [pc, #324]	; (800ce98 <problem_fetch+0xb7b0>)
 800cd54:	461c      	mov	r4, r3
 800cd56:	4613      	mov	r3, r2
 800cd58:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd5a:	6020      	str	r0, [r4, #0]
 800cd5c:	6061      	str	r1, [r4, #4]
 800cd5e:	60a2      	str	r2, [r4, #8]
 800cd60:	881b      	ldrh	r3, [r3, #0]
 800cd62:	81a3      	strh	r3, [r4, #12]
			break;
 800cd64:	f00f bbf0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 328 :
			strcpy(p->name,"RONSTOPPABLE");
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cd6e:	4a4b      	ldr	r2, [pc, #300]	; (800ce9c <problem_fetch+0xb7b4>)
 800cd70:	461c      	mov	r4, r3
 800cd72:	4613      	mov	r3, r2
 800cd74:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	6061      	str	r1, [r4, #4]
 800cd7a:	60a2      	str	r2, [r4, #8]
 800cd7c:	781b      	ldrb	r3, [r3, #0]
 800cd7e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cd86:	4a46      	ldr	r2, [pc, #280]	; (800cea0 <problem_fetch+0xb7b8>)
 800cd88:	6810      	ldr	r0, [r2, #0]
 800cd8a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2206      	movs	r2, #6
 800cd90:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,B,D");
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	33a4      	adds	r3, #164	; 0xa4
 800cd96:	4a43      	ldr	r2, [pc, #268]	; (800cea4 <problem_fetch+0xb7bc>)
 800cd98:	461c      	mov	r4, r3
 800cd9a:	4613      	mov	r3, r2
 800cd9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cd9e:	6020      	str	r0, [r4, #0]
 800cda0:	6061      	str	r1, [r4, #4]
 800cda2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3304      	adds	r3, #4
 800cda8:	4a3f      	ldr	r2, [pc, #252]	; (800cea8 <problem_fetch+0xb7c0>)
 800cdaa:	461c      	mov	r4, r3
 800cdac:	4613      	mov	r3, r2
 800cdae:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cdb0:	6020      	str	r0, [r4, #0]
 800cdb2:	6061      	str	r1, [r4, #4]
 800cdb4:	60a2      	str	r2, [r4, #8]
 800cdb6:	881a      	ldrh	r2, [r3, #0]
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	81a2      	strh	r2, [r4, #12]
 800cdbc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cdc4:	4a24      	ldr	r2, [pc, #144]	; (800ce58 <problem_fetch+0xb770>)
 800cdc6:	461c      	mov	r4, r3
 800cdc8:	4613      	mov	r3, r2
 800cdca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cdcc:	6020      	str	r0, [r4, #0]
 800cdce:	6061      	str	r1, [r4, #4]
 800cdd0:	60a2      	str	r2, [r4, #8]
			break;
 800cdd2:	f00f bbb9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 329 :
			strcpy(p->name,"MO'RON");
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cddc:	4a33      	ldr	r2, [pc, #204]	; (800ceac <problem_fetch+0xb7c4>)
 800cdde:	6810      	ldr	r0, [r2, #0]
 800cde0:	6018      	str	r0, [r3, #0]
 800cde2:	8891      	ldrh	r1, [r2, #4]
 800cde4:	7992      	ldrb	r2, [r2, #6]
 800cde6:	8099      	strh	r1, [r3, #4]
 800cde8:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cdf0:	4a2f      	ldr	r2, [pc, #188]	; (800ceb0 <problem_fetch+0xb7c8>)
 800cdf2:	8811      	ldrh	r1, [r2, #0]
 800cdf4:	7892      	ldrb	r2, [r2, #2]
 800cdf6:	8019      	strh	r1, [r3, #0]
 800cdf8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,A,E,E,G,D");
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	33a4      	adds	r3, #164	; 0xa4
 800ce04:	4a2b      	ldr	r2, [pc, #172]	; (800ceb4 <problem_fetch+0xb7cc>)
 800ce06:	461c      	mov	r4, r3
 800ce08:	4615      	mov	r5, r2
 800ce0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce0c:	6020      	str	r0, [r4, #0]
 800ce0e:	6061      	str	r1, [r4, #4]
 800ce10:	60a2      	str	r2, [r4, #8]
 800ce12:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,8,9,12,14,17,18");
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	3304      	adds	r3, #4
 800ce18:	4a27      	ldr	r2, [pc, #156]	; (800ceb8 <problem_fetch+0xb7d0>)
 800ce1a:	461d      	mov	r5, r3
 800ce1c:	4614      	mov	r4, r2
 800ce1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ce20:	6028      	str	r0, [r5, #0]
 800ce22:	6069      	str	r1, [r5, #4]
 800ce24:	60aa      	str	r2, [r5, #8]
 800ce26:	60eb      	str	r3, [r5, #12]
 800ce28:	6820      	ldr	r0, [r4, #0]
 800ce2a:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ce32:	4a22      	ldr	r2, [pc, #136]	; (800cebc <problem_fetch+0xb7d4>)
 800ce34:	461c      	mov	r4, r3
 800ce36:	4615      	mov	r5, r2
 800ce38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce3a:	6020      	str	r0, [r4, #0]
 800ce3c:	6061      	str	r1, [r4, #4]
 800ce3e:	60a2      	str	r2, [r4, #8]
 800ce40:	60e3      	str	r3, [r4, #12]
			break;
 800ce42:	f00f bb81 	b.w	801c548 <problem_fetch+0x1ae60>
 800ce46:	bf00      	nop
 800ce48:	0802798c 	.word	0x0802798c
 800ce4c:	08025cc0 	.word	0x08025cc0
 800ce50:	080279a0 	.word	0x080279a0
 800ce54:	080279ac 	.word	0x080279ac
 800ce58:	08023cf8 	.word	0x08023cf8
 800ce5c:	080279bc 	.word	0x080279bc
 800ce60:	0802395c 	.word	0x0802395c
 800ce64:	080279c8 	.word	0x080279c8
 800ce68:	080279d4 	.word	0x080279d4
 800ce6c:	080279e4 	.word	0x080279e4
 800ce70:	08023a98 	.word	0x08023a98
 800ce74:	080279f0 	.word	0x080279f0
 800ce78:	080279fc 	.word	0x080279fc
 800ce7c:	08027a0c 	.word	0x08027a0c
 800ce80:	08023afc 	.word	0x08023afc
 800ce84:	08027a18 	.word	0x08027a18
 800ce88:	08027a24 	.word	0x08027a24
 800ce8c:	08027a34 	.word	0x08027a34
 800ce90:	08027a40 	.word	0x08027a40
 800ce94:	08024eec 	.word	0x08024eec
 800ce98:	08023ae4 	.word	0x08023ae4
 800ce9c:	08027a50 	.word	0x08027a50
 800cea0:	080239f4 	.word	0x080239f4
 800cea4:	08027a60 	.word	0x08027a60
 800cea8:	08027a6c 	.word	0x08027a6c
 800ceac:	08027a7c 	.word	0x08027a7c
 800ceb0:	0802391c 	.word	0x0802391c
 800ceb4:	08027a84 	.word	0x08027a84
 800ceb8:	08027a94 	.word	0x08027a94
 800cebc:	08023a80 	.word	0x08023a80
		case 330 :
			strcpy(p->name,"SLIGHTLY LESS BASIC B*TCH");
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cec6:	4aa9      	ldr	r2, [pc, #676]	; (800d16c <problem_fetch+0xba84>)
 800cec8:	461d      	mov	r5, r3
 800ceca:	4614      	mov	r4, r2
 800cecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cece:	6028      	str	r0, [r5, #0]
 800ced0:	6069      	str	r1, [r5, #4]
 800ced2:	60aa      	str	r2, [r5, #8]
 800ced4:	60eb      	str	r3, [r5, #12]
 800ced6:	cc03      	ldmia	r4!, {r0, r1}
 800ced8:	6128      	str	r0, [r5, #16]
 800ceda:	6169      	str	r1, [r5, #20]
 800cedc:	8823      	ldrh	r3, [r4, #0]
 800cede:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cee6:	4aa2      	ldr	r2, [pc, #648]	; (800d170 <problem_fetch+0xba88>)
 800cee8:	6810      	ldr	r0, [r2, #0]
 800ceea:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2205      	movs	r2, #5
 800cef0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,I");
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	33a4      	adds	r3, #164	; 0xa4
 800cef6:	499f      	ldr	r1, [pc, #636]	; (800d174 <problem_fetch+0xba8c>)
 800cef8:	461a      	mov	r2, r3
 800cefa:	460b      	mov	r3, r1
 800cefc:	cb03      	ldmia	r3!, {r0, r1}
 800cefe:	6010      	str	r0, [r2, #0]
 800cf00:	6051      	str	r1, [r2, #4]
 800cf02:	881b      	ldrh	r3, [r3, #0]
 800cf04:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3304      	adds	r3, #4
 800cf0a:	4a9b      	ldr	r2, [pc, #620]	; (800d178 <problem_fetch+0xba90>)
 800cf0c:	461c      	mov	r4, r3
 800cf0e:	4613      	mov	r3, r2
 800cf10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf12:	6020      	str	r0, [r4, #0]
 800cf14:	6061      	str	r1, [r4, #4]
 800cf16:	60a2      	str	r2, [r4, #8]
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cf22:	4996      	ldr	r1, [pc, #600]	; (800d17c <problem_fetch+0xba94>)
 800cf24:	461a      	mov	r2, r3
 800cf26:	460b      	mov	r3, r1
 800cf28:	cb03      	ldmia	r3!, {r0, r1}
 800cf2a:	6010      	str	r0, [r2, #0]
 800cf2c:	6051      	str	r1, [r2, #4]
 800cf2e:	881b      	ldrh	r3, [r3, #0]
 800cf30:	8113      	strh	r3, [r2, #8]
			break;
 800cf32:	f00f bb09 	b.w	801c548 <problem_fetch+0x1ae60>
		case 331 :
			strcpy(p->name,"BASIC B*TCH");
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cf3c:	4a90      	ldr	r2, [pc, #576]	; (800d180 <problem_fetch+0xba98>)
 800cf3e:	461c      	mov	r4, r3
 800cf40:	4613      	mov	r3, r2
 800cf42:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cf44:	6020      	str	r0, [r4, #0]
 800cf46:	6061      	str	r1, [r4, #4]
 800cf48:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cf50:	4a87      	ldr	r2, [pc, #540]	; (800d170 <problem_fetch+0xba88>)
 800cf52:	6810      	ldr	r0, [r2, #0]
 800cf54:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2204      	movs	r2, #4
 800cf5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D");
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	33a4      	adds	r3, #164	; 0xa4
 800cf60:	4988      	ldr	r1, [pc, #544]	; (800d184 <problem_fetch+0xba9c>)
 800cf62:	461a      	mov	r2, r3
 800cf64:	460b      	mov	r3, r1
 800cf66:	cb03      	ldmia	r3!, {r0, r1}
 800cf68:	6010      	str	r0, [r2, #0]
 800cf6a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,10,13,18");
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4985      	ldr	r1, [pc, #532]	; (800d188 <problem_fetch+0xbaa0>)
 800cf72:	461a      	mov	r2, r3
 800cf74:	460b      	mov	r3, r1
 800cf76:	cb03      	ldmia	r3!, {r0, r1}
 800cf78:	6010      	str	r0, [r2, #0]
 800cf7a:	6051      	str	r1, [r2, #4]
 800cf7c:	8819      	ldrh	r1, [r3, #0]
 800cf7e:	789b      	ldrb	r3, [r3, #2]
 800cf80:	8111      	strh	r1, [r2, #8]
 800cf82:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cf8a:	4980      	ldr	r1, [pc, #512]	; (800d18c <problem_fetch+0xbaa4>)
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	460b      	mov	r3, r1
 800cf90:	cb03      	ldmia	r3!, {r0, r1}
 800cf92:	6010      	str	r0, [r2, #0]
 800cf94:	6051      	str	r1, [r2, #4]
			break;
 800cf96:	f00f bad7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 332 :
			strcpy(p->name,"ANY GIVEN DAY");
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cfa0:	4a7b      	ldr	r2, [pc, #492]	; (800d190 <problem_fetch+0xbaa8>)
 800cfa2:	461c      	mov	r4, r3
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfa8:	6020      	str	r0, [r4, #0]
 800cfaa:	6061      	str	r1, [r4, #4]
 800cfac:	60a2      	str	r2, [r4, #8]
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800cfb8:	4a76      	ldr	r2, [pc, #472]	; (800d194 <problem_fetch+0xbaac>)
 800cfba:	6810      	ldr	r0, [r2, #0]
 800cfbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2206      	movs	r2, #6
 800cfc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,D");
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	33a4      	adds	r3, #164	; 0xa4
 800cfc8:	4a73      	ldr	r2, [pc, #460]	; (800d198 <problem_fetch+0xbab0>)
 800cfca:	461c      	mov	r4, r3
 800cfcc:	4613      	mov	r3, r2
 800cfce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cfd0:	6020      	str	r0, [r4, #0]
 800cfd2:	6061      	str	r1, [r4, #4]
 800cfd4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	4a70      	ldr	r2, [pc, #448]	; (800d19c <problem_fetch+0xbab4>)
 800cfdc:	461c      	mov	r4, r3
 800cfde:	4615      	mov	r5, r2
 800cfe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	6061      	str	r1, [r4, #4]
 800cfe6:	60a2      	str	r2, [r4, #8]
 800cfe8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800cff0:	4a6b      	ldr	r2, [pc, #428]	; (800d1a0 <problem_fetch+0xbab8>)
 800cff2:	461c      	mov	r4, r3
 800cff4:	4613      	mov	r3, r2
 800cff6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800cff8:	6020      	str	r0, [r4, #0]
 800cffa:	6061      	str	r1, [r4, #4]
 800cffc:	60a2      	str	r2, [r4, #8]
			break;
 800cffe:	f00f baa3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 333 :
			strcpy(p->name,"GS");
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d008:	4a66      	ldr	r2, [pc, #408]	; (800d1a4 <problem_fetch+0xbabc>)
 800d00a:	8811      	ldrh	r1, [r2, #0]
 800d00c:	7892      	ldrb	r2, [r2, #2]
 800d00e:	8019      	strh	r1, [r3, #0]
 800d010:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C");
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d018:	4a63      	ldr	r2, [pc, #396]	; (800d1a8 <problem_fetch+0xbac0>)
 800d01a:	8811      	ldrh	r1, [r2, #0]
 800d01c:	7892      	ldrb	r2, [r2, #2]
 800d01e:	8019      	strh	r1, [r3, #0]
 800d020:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	220a      	movs	r2, #10
 800d026:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,H,F,C,E,A,E,A");
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	33a4      	adds	r3, #164	; 0xa4
 800d02c:	4a5f      	ldr	r2, [pc, #380]	; (800d1ac <problem_fetch+0xbac4>)
 800d02e:	461d      	mov	r5, r3
 800d030:	4614      	mov	r4, r2
 800d032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d034:	6028      	str	r0, [r5, #0]
 800d036:	6069      	str	r1, [r5, #4]
 800d038:	60aa      	str	r2, [r5, #8]
 800d03a:	60eb      	str	r3, [r5, #12]
 800d03c:	6820      	ldr	r0, [r4, #0]
 800d03e:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,11,13,14,14,16,18");
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	3304      	adds	r3, #4
 800d044:	4a5a      	ldr	r2, [pc, #360]	; (800d1b0 <problem_fetch+0xbac8>)
 800d046:	461d      	mov	r5, r3
 800d048:	4614      	mov	r4, r2
 800d04a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d04c:	6028      	str	r0, [r5, #0]
 800d04e:	6069      	str	r1, [r5, #4]
 800d050:	60aa      	str	r2, [r5, #8]
 800d052:	60eb      	str	r3, [r5, #12]
 800d054:	cc03      	ldmia	r4!, {r0, r1}
 800d056:	6128      	str	r0, [r5, #16]
 800d058:	6169      	str	r1, [r5, #20]
 800d05a:	8823      	ldrh	r3, [r4, #0]
 800d05c:	78a2      	ldrb	r2, [r4, #2]
 800d05e:	832b      	strh	r3, [r5, #24]
 800d060:	4613      	mov	r3, r2
 800d062:	76ab      	strb	r3, [r5, #26]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d06a:	4a52      	ldr	r2, [pc, #328]	; (800d1b4 <problem_fetch+0xbacc>)
 800d06c:	461d      	mov	r5, r3
 800d06e:	4614      	mov	r4, r2
 800d070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d072:	6028      	str	r0, [r5, #0]
 800d074:	6069      	str	r1, [r5, #4]
 800d076:	60aa      	str	r2, [r5, #8]
 800d078:	60eb      	str	r3, [r5, #12]
 800d07a:	6820      	ldr	r0, [r4, #0]
 800d07c:	6128      	str	r0, [r5, #16]
			break;
 800d07e:	f00f ba63 	b.w	801c548 <problem_fetch+0x1ae60>
		case 334 :
			strcpy(p->name,"VALGULIOUS");
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d088:	494b      	ldr	r1, [pc, #300]	; (800d1b8 <problem_fetch+0xbad0>)
 800d08a:	461a      	mov	r2, r3
 800d08c:	460b      	mov	r3, r1
 800d08e:	cb03      	ldmia	r3!, {r0, r1}
 800d090:	6010      	str	r0, [r2, #0]
 800d092:	6051      	str	r1, [r2, #4]
 800d094:	8819      	ldrh	r1, [r3, #0]
 800d096:	789b      	ldrb	r3, [r3, #2]
 800d098:	8111      	strh	r1, [r2, #8]
 800d09a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d0a2:	4a33      	ldr	r2, [pc, #204]	; (800d170 <problem_fetch+0xba88>)
 800d0a4:	6810      	ldr	r0, [r2, #0]
 800d0a6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2207      	movs	r2, #7
 800d0ac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,G,J,J,I,I");
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	33a4      	adds	r3, #164	; 0xa4
 800d0b2:	4a42      	ldr	r2, [pc, #264]	; (800d1bc <problem_fetch+0xbad4>)
 800d0b4:	461c      	mov	r4, r3
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0ba:	6020      	str	r0, [r4, #0]
 800d0bc:	6061      	str	r1, [r4, #4]
 800d0be:	60a2      	str	r2, [r4, #8]
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,5,12,15,18");
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	3304      	adds	r3, #4
 800d0c8:	4a3d      	ldr	r2, [pc, #244]	; (800d1c0 <problem_fetch+0xbad8>)
 800d0ca:	461d      	mov	r5, r3
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0d0:	6028      	str	r0, [r5, #0]
 800d0d2:	6069      	str	r1, [r5, #4]
 800d0d4:	60aa      	str	r2, [r5, #8]
 800d0d6:	60eb      	str	r3, [r5, #12]
 800d0d8:	7823      	ldrb	r3, [r4, #0]
 800d0da:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d0e2:	4a38      	ldr	r2, [pc, #224]	; (800d1c4 <problem_fetch+0xbadc>)
 800d0e4:	461c      	mov	r4, r3
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d0ea:	6020      	str	r0, [r4, #0]
 800d0ec:	6061      	str	r1, [r4, #4]
 800d0ee:	60a2      	str	r2, [r4, #8]
 800d0f0:	881b      	ldrh	r3, [r3, #0]
 800d0f2:	81a3      	strh	r3, [r4, #12]
			break;
 800d0f4:	f00f ba28 	b.w	801c548 <problem_fetch+0x1ae60>
		case 335 :
			strcpy(p->name,"POWER HUNGRY");
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d0fe:	4a32      	ldr	r2, [pc, #200]	; (800d1c8 <problem_fetch+0xbae0>)
 800d100:	461c      	mov	r4, r3
 800d102:	4613      	mov	r3, r2
 800d104:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d106:	6020      	str	r0, [r4, #0]
 800d108:	6061      	str	r1, [r4, #4]
 800d10a:	60a2      	str	r2, [r4, #8]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d116:	4a2d      	ldr	r2, [pc, #180]	; (800d1cc <problem_fetch+0xbae4>)
 800d118:	8811      	ldrh	r1, [r2, #0]
 800d11a:	7892      	ldrb	r2, [r2, #2]
 800d11c:	8019      	strh	r1, [r3, #0]
 800d11e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2206      	movs	r2, #6
 800d124:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,G,K,D,I,D");
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	33a4      	adds	r3, #164	; 0xa4
 800d12a:	4a29      	ldr	r2, [pc, #164]	; (800d1d0 <problem_fetch+0xbae8>)
 800d12c:	461c      	mov	r4, r3
 800d12e:	4613      	mov	r3, r2
 800d130:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d132:	6020      	str	r0, [r4, #0]
 800d134:	6061      	str	r1, [r4, #4]
 800d136:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,11,14,18");
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	3304      	adds	r3, #4
 800d13c:	4a25      	ldr	r2, [pc, #148]	; (800d1d4 <problem_fetch+0xbaec>)
 800d13e:	461c      	mov	r4, r3
 800d140:	4613      	mov	r3, r2
 800d142:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d144:	6020      	str	r0, [r4, #0]
 800d146:	6061      	str	r1, [r4, #4]
 800d148:	60a2      	str	r2, [r4, #8]
 800d14a:	881a      	ldrh	r2, [r3, #0]
 800d14c:	789b      	ldrb	r3, [r3, #2]
 800d14e:	81a2      	strh	r2, [r4, #12]
 800d150:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d158:	4a1f      	ldr	r2, [pc, #124]	; (800d1d8 <problem_fetch+0xbaf0>)
 800d15a:	461c      	mov	r4, r3
 800d15c:	4613      	mov	r3, r2
 800d15e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d160:	6020      	str	r0, [r4, #0]
 800d162:	6061      	str	r1, [r4, #4]
 800d164:	60a2      	str	r2, [r4, #8]
			break;
 800d166:	f00f b9ef 	b.w	801c548 <problem_fetch+0x1ae60>
 800d16a:	bf00      	nop
 800d16c:	08027aa8 	.word	0x08027aa8
 800d170:	08023afc 	.word	0x08023afc
 800d174:	08027ac4 	.word	0x08027ac4
 800d178:	08027ad0 	.word	0x08027ad0
 800d17c:	08023e28 	.word	0x08023e28
 800d180:	08027ae0 	.word	0x08027ae0
 800d184:	08027aec 	.word	0x08027aec
 800d188:	08027af4 	.word	0x08027af4
 800d18c:	08023ab0 	.word	0x08023ab0
 800d190:	08027b00 	.word	0x08027b00
 800d194:	0802395c 	.word	0x0802395c
 800d198:	08026368 	.word	0x08026368
 800d19c:	08027b10 	.word	0x08027b10
 800d1a0:	08023cf8 	.word	0x08023cf8
 800d1a4:	08027b20 	.word	0x08027b20
 800d1a8:	08023a28 	.word	0x08023a28
 800d1ac:	08027b24 	.word	0x08027b24
 800d1b0:	08027b38 	.word	0x08027b38
 800d1b4:	08024204 	.word	0x08024204
 800d1b8:	08027b54 	.word	0x08027b54
 800d1bc:	08027b60 	.word	0x08027b60
 800d1c0:	08027b70 	.word	0x08027b70
 800d1c4:	08023ae4 	.word	0x08023ae4
 800d1c8:	08027b84 	.word	0x08027b84
 800d1cc:	08024190 	.word	0x08024190
 800d1d0:	08027b94 	.word	0x08027b94
 800d1d4:	08027ba0 	.word	0x08027ba0
 800d1d8:	0802393c 	.word	0x0802393c
		case 336 :
			strcpy(p->name,"INTERESTING");
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d1e2:	4aac      	ldr	r2, [pc, #688]	; (800d494 <problem_fetch+0xbdac>)
 800d1e4:	461c      	mov	r4, r3
 800d1e6:	4613      	mov	r3, r2
 800d1e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d1ea:	6020      	str	r0, [r4, #0]
 800d1ec:	6061      	str	r1, [r4, #4]
 800d1ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d1f6:	4aa8      	ldr	r2, [pc, #672]	; (800d498 <problem_fetch+0xbdb0>)
 800d1f8:	6810      	ldr	r0, [r2, #0]
 800d1fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2207      	movs	r2, #7
 800d200:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,H,E,I");
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	33a4      	adds	r3, #164	; 0xa4
 800d206:	4aa5      	ldr	r2, [pc, #660]	; (800d49c <problem_fetch+0xbdb4>)
 800d208:	461c      	mov	r4, r3
 800d20a:	4613      	mov	r3, r2
 800d20c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d20e:	6020      	str	r0, [r4, #0]
 800d210:	6061      	str	r1, [r4, #4]
 800d212:	60a2      	str	r2, [r4, #8]
 800d214:	881b      	ldrh	r3, [r3, #0]
 800d216:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,16,18");
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4aa0      	ldr	r2, [pc, #640]	; (800d4a0 <problem_fetch+0xbdb8>)
 800d21e:	461d      	mov	r5, r3
 800d220:	4614      	mov	r4, r2
 800d222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d224:	6028      	str	r0, [r5, #0]
 800d226:	6069      	str	r1, [r5, #4]
 800d228:	60aa      	str	r2, [r5, #8]
 800d22a:	60eb      	str	r3, [r5, #12]
 800d22c:	8823      	ldrh	r3, [r4, #0]
 800d22e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d236:	4a9b      	ldr	r2, [pc, #620]	; (800d4a4 <problem_fetch+0xbdbc>)
 800d238:	461c      	mov	r4, r3
 800d23a:	4613      	mov	r3, r2
 800d23c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d23e:	6020      	str	r0, [r4, #0]
 800d240:	6061      	str	r1, [r4, #4]
 800d242:	60a2      	str	r2, [r4, #8]
 800d244:	881b      	ldrh	r3, [r3, #0]
 800d246:	81a3      	strh	r3, [r4, #12]
			break;
 800d248:	f00f b97e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 337 :
			strcpy(p->name,"BLACK WINGS");
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d252:	4a95      	ldr	r2, [pc, #596]	; (800d4a8 <problem_fetch+0xbdc0>)
 800d254:	461c      	mov	r4, r3
 800d256:	4613      	mov	r3, r2
 800d258:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d25a:	6020      	str	r0, [r4, #0]
 800d25c:	6061      	str	r1, [r4, #4]
 800d25e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d266:	4a91      	ldr	r2, [pc, #580]	; (800d4ac <problem_fetch+0xbdc4>)
 800d268:	6810      	ldr	r0, [r2, #0]
 800d26a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2209      	movs	r2, #9
 800d270:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,C,H,C,E,H,I");
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	33a4      	adds	r3, #164	; 0xa4
 800d276:	4a8e      	ldr	r2, [pc, #568]	; (800d4b0 <problem_fetch+0xbdc8>)
 800d278:	461d      	mov	r5, r3
 800d27a:	4614      	mov	r4, r2
 800d27c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d27e:	6028      	str	r0, [r5, #0]
 800d280:	6069      	str	r1, [r5, #4]
 800d282:	60aa      	str	r2, [r5, #8]
 800d284:	60eb      	str	r3, [r5, #12]
 800d286:	8823      	ldrh	r3, [r4, #0]
 800d288:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,15,8,10,13,16,5,18");
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3304      	adds	r3, #4
 800d28e:	4a89      	ldr	r2, [pc, #548]	; (800d4b4 <problem_fetch+0xbdcc>)
 800d290:	461c      	mov	r4, r3
 800d292:	4615      	mov	r5, r2
 800d294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d296:	6020      	str	r0, [r4, #0]
 800d298:	6061      	str	r1, [r4, #4]
 800d29a:	60a2      	str	r2, [r4, #8]
 800d29c:	60e3      	str	r3, [r4, #12]
 800d29e:	6828      	ldr	r0, [r5, #0]
 800d2a0:	6120      	str	r0, [r4, #16]
 800d2a2:	88ab      	ldrh	r3, [r5, #4]
 800d2a4:	79aa      	ldrb	r2, [r5, #6]
 800d2a6:	82a3      	strh	r3, [r4, #20]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d2b2:	4a81      	ldr	r2, [pc, #516]	; (800d4b8 <problem_fetch+0xbdd0>)
 800d2b4:	461d      	mov	r5, r3
 800d2b6:	4614      	mov	r4, r2
 800d2b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2ba:	6028      	str	r0, [r5, #0]
 800d2bc:	6069      	str	r1, [r5, #4]
 800d2be:	60aa      	str	r2, [r5, #8]
 800d2c0:	60eb      	str	r3, [r5, #12]
 800d2c2:	8823      	ldrh	r3, [r4, #0]
 800d2c4:	822b      	strh	r3, [r5, #16]
			break;
 800d2c6:	f00f b93f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 338 :
			strcpy(p->name,"TVÅ");
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d2d0:	4a7a      	ldr	r2, [pc, #488]	; (800d4bc <problem_fetch+0xbdd4>)
 800d2d2:	6810      	ldr	r0, [r2, #0]
 800d2d4:	6018      	str	r0, [r3, #0]
 800d2d6:	7912      	ldrb	r2, [r2, #4]
 800d2d8:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d2e0:	4a72      	ldr	r2, [pc, #456]	; (800d4ac <problem_fetch+0xbdc4>)
 800d2e2:	6810      	ldr	r0, [r2, #0]
 800d2e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2208      	movs	r2, #8
 800d2ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,H,E,E,G,D,D");
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	33a4      	adds	r3, #164	; 0xa4
 800d2f0:	4a73      	ldr	r2, [pc, #460]	; (800d4c0 <problem_fetch+0xbdd8>)
 800d2f2:	461c      	mov	r4, r3
 800d2f4:	4615      	mov	r5, r2
 800d2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2f8:	6020      	str	r0, [r4, #0]
 800d2fa:	6061      	str	r1, [r4, #4]
 800d2fc:	60a2      	str	r2, [r4, #8]
 800d2fe:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,10,8,8,12,14,15,18");
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3304      	adds	r3, #4
 800d304:	4a6f      	ldr	r2, [pc, #444]	; (800d4c4 <problem_fetch+0xbddc>)
 800d306:	461d      	mov	r5, r3
 800d308:	4614      	mov	r4, r2
 800d30a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d30c:	6028      	str	r0, [r5, #0]
 800d30e:	6069      	str	r1, [r5, #4]
 800d310:	60aa      	str	r2, [r5, #8]
 800d312:	60eb      	str	r3, [r5, #12]
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	6128      	str	r0, [r5, #16]
 800d318:	7923      	ldrb	r3, [r4, #4]
 800d31a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d322:	4a69      	ldr	r2, [pc, #420]	; (800d4c8 <problem_fetch+0xbde0>)
 800d324:	461c      	mov	r4, r3
 800d326:	4615      	mov	r5, r2
 800d328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d32a:	6020      	str	r0, [r4, #0]
 800d32c:	6061      	str	r1, [r4, #4]
 800d32e:	60a2      	str	r2, [r4, #8]
 800d330:	60e3      	str	r3, [r4, #12]
			break;
 800d332:	f00f b909 	b.w	801c548 <problem_fetch+0x1ae60>
		case 339 :
			strcpy(p->name,"HIGH STEP IF YOU CAN");
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d33c:	4a63      	ldr	r2, [pc, #396]	; (800d4cc <problem_fetch+0xbde4>)
 800d33e:	461d      	mov	r5, r3
 800d340:	4614      	mov	r4, r2
 800d342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d344:	6028      	str	r0, [r5, #0]
 800d346:	6069      	str	r1, [r5, #4]
 800d348:	60aa      	str	r2, [r5, #8]
 800d34a:	60eb      	str	r3, [r5, #12]
 800d34c:	6820      	ldr	r0, [r4, #0]
 800d34e:	6128      	str	r0, [r5, #16]
 800d350:	7923      	ldrb	r3, [r4, #4]
 800d352:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d35a:	4a54      	ldr	r2, [pc, #336]	; (800d4ac <problem_fetch+0xbdc4>)
 800d35c:	6810      	ldr	r0, [r2, #0]
 800d35e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2208      	movs	r2, #8
 800d364:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,B,E,E,B,E,D");
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	33a4      	adds	r3, #164	; 0xa4
 800d36a:	4a59      	ldr	r2, [pc, #356]	; (800d4d0 <problem_fetch+0xbde8>)
 800d36c:	461c      	mov	r4, r3
 800d36e:	4615      	mov	r5, r2
 800d370:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d372:	6020      	str	r0, [r4, #0]
 800d374:	6061      	str	r1, [r4, #4]
 800d376:	60a2      	str	r2, [r4, #8]
 800d378:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,10,8,12,15,6,18");
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4a55      	ldr	r2, [pc, #340]	; (800d4d4 <problem_fetch+0xbdec>)
 800d380:	461d      	mov	r5, r3
 800d382:	4614      	mov	r4, r2
 800d384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d386:	6028      	str	r0, [r5, #0]
 800d388:	6069      	str	r1, [r5, #4]
 800d38a:	60aa      	str	r2, [r5, #8]
 800d38c:	60eb      	str	r3, [r5, #12]
 800d38e:	6820      	ldr	r0, [r4, #0]
 800d390:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d398:	4a4f      	ldr	r2, [pc, #316]	; (800d4d8 <problem_fetch+0xbdf0>)
 800d39a:	461c      	mov	r4, r3
 800d39c:	4615      	mov	r5, r2
 800d39e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a0:	6020      	str	r0, [r4, #0]
 800d3a2:	6061      	str	r1, [r4, #4]
 800d3a4:	60a2      	str	r2, [r4, #8]
 800d3a6:	60e3      	str	r3, [r4, #12]
			break;
 800d3a8:	f00f b8ce 	b.w	801c548 <problem_fetch+0x1ae60>
		case 340 :
			strcpy(p->name,"APPLE PIE");
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d3b2:	494a      	ldr	r1, [pc, #296]	; (800d4dc <problem_fetch+0xbdf4>)
 800d3b4:	461a      	mov	r2, r3
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	cb03      	ldmia	r3!, {r0, r1}
 800d3ba:	6010      	str	r0, [r2, #0]
 800d3bc:	6051      	str	r1, [r2, #4]
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d3c8:	4a45      	ldr	r2, [pc, #276]	; (800d4e0 <problem_fetch+0xbdf8>)
 800d3ca:	8811      	ldrh	r1, [r2, #0]
 800d3cc:	7892      	ldrb	r2, [r2, #2]
 800d3ce:	8019      	strh	r1, [r3, #0]
 800d3d0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2206      	movs	r2, #6
 800d3d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,F,J,I");
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	33a4      	adds	r3, #164	; 0xa4
 800d3dc:	4a41      	ldr	r2, [pc, #260]	; (800d4e4 <problem_fetch+0xbdfc>)
 800d3de:	461c      	mov	r4, r3
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d3e4:	6020      	str	r0, [r4, #0]
 800d3e6:	6061      	str	r1, [r4, #4]
 800d3e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	4a3e      	ldr	r2, [pc, #248]	; (800d4e8 <problem_fetch+0xbe00>)
 800d3f0:	461c      	mov	r4, r3
 800d3f2:	4615      	mov	r5, r2
 800d3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3f6:	6020      	str	r0, [r4, #0]
 800d3f8:	6061      	str	r1, [r4, #4]
 800d3fa:	60a2      	str	r2, [r4, #8]
 800d3fc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d404:	4a39      	ldr	r2, [pc, #228]	; (800d4ec <problem_fetch+0xbe04>)
 800d406:	461c      	mov	r4, r3
 800d408:	4613      	mov	r3, r2
 800d40a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d40c:	6020      	str	r0, [r4, #0]
 800d40e:	6061      	str	r1, [r4, #4]
 800d410:	60a2      	str	r2, [r4, #8]
			break;
 800d412:	f00f b899 	b.w	801c548 <problem_fetch+0x1ae60>
		case 341 :
			strcpy(p->name,"NOT A FIRSTIMER");
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d41c:	4a34      	ldr	r2, [pc, #208]	; (800d4f0 <problem_fetch+0xbe08>)
 800d41e:	461c      	mov	r4, r3
 800d420:	4615      	mov	r5, r2
 800d422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d424:	6020      	str	r0, [r4, #0]
 800d426:	6061      	str	r1, [r4, #4]
 800d428:	60a2      	str	r2, [r4, #8]
 800d42a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d432:	4a1e      	ldr	r2, [pc, #120]	; (800d4ac <problem_fetch+0xbdc4>)
 800d434:	6810      	ldr	r0, [r2, #0]
 800d436:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	220a      	movs	r2, #10
 800d43c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,H,E,C,I,G,G,J,I");
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	33a4      	adds	r3, #164	; 0xa4
 800d442:	4a2c      	ldr	r2, [pc, #176]	; (800d4f4 <problem_fetch+0xbe0c>)
 800d444:	461d      	mov	r5, r3
 800d446:	4614      	mov	r4, r2
 800d448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d44a:	6028      	str	r0, [r5, #0]
 800d44c:	6069      	str	r1, [r5, #4]
 800d44e:	60aa      	str	r2, [r5, #8]
 800d450:	60eb      	str	r3, [r5, #12]
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,10,8,13,14,15,17,7,18");
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3304      	adds	r3, #4
 800d45a:	4a27      	ldr	r2, [pc, #156]	; (800d4f8 <problem_fetch+0xbe10>)
 800d45c:	461d      	mov	r5, r3
 800d45e:	4614      	mov	r4, r2
 800d460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d462:	6028      	str	r0, [r5, #0]
 800d464:	6069      	str	r1, [r5, #4]
 800d466:	60aa      	str	r2, [r5, #8]
 800d468:	60eb      	str	r3, [r5, #12]
 800d46a:	cc03      	ldmia	r4!, {r0, r1}
 800d46c:	6128      	str	r0, [r5, #16]
 800d46e:	6169      	str	r1, [r5, #20]
 800d470:	8823      	ldrh	r3, [r4, #0]
 800d472:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d47a:	4a20      	ldr	r2, [pc, #128]	; (800d4fc <problem_fetch+0xbe14>)
 800d47c:	461d      	mov	r5, r3
 800d47e:	4614      	mov	r4, r2
 800d480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d482:	6028      	str	r0, [r5, #0]
 800d484:	6069      	str	r1, [r5, #4]
 800d486:	60aa      	str	r2, [r5, #8]
 800d488:	60eb      	str	r3, [r5, #12]
 800d48a:	6820      	ldr	r0, [r4, #0]
 800d48c:	6128      	str	r0, [r5, #16]
			break;
 800d48e:	f00f b85b 	b.w	801c548 <problem_fetch+0x1ae60>
 800d492:	bf00      	nop
 800d494:	08027bb0 	.word	0x08027bb0
 800d498:	080239f4 	.word	0x080239f4
 800d49c:	08027bbc 	.word	0x08027bbc
 800d4a0:	08027bcc 	.word	0x08027bcc
 800d4a4:	080239d4 	.word	0x080239d4
 800d4a8:	08027be0 	.word	0x08027be0
 800d4ac:	0802395c 	.word	0x0802395c
 800d4b0:	08027bec 	.word	0x08027bec
 800d4b4:	08027c00 	.word	0x08027c00
 800d4b8:	08024940 	.word	0x08024940
 800d4bc:	08027c18 	.word	0x08027c18
 800d4c0:	08027c20 	.word	0x08027c20
 800d4c4:	08027c30 	.word	0x08027c30
 800d4c8:	08023b6c 	.word	0x08023b6c
 800d4cc:	08027c48 	.word	0x08027c48
 800d4d0:	08027c60 	.word	0x08027c60
 800d4d4:	08027c70 	.word	0x08027c70
 800d4d8:	08023a80 	.word	0x08023a80
 800d4dc:	08027c84 	.word	0x08027c84
 800d4e0:	0802391c 	.word	0x0802391c
 800d4e4:	08027c90 	.word	0x08027c90
 800d4e8:	08026030 	.word	0x08026030
 800d4ec:	08023cf8 	.word	0x08023cf8
 800d4f0:	08027c9c 	.word	0x08027c9c
 800d4f4:	08027cac 	.word	0x08027cac
 800d4f8:	08027cc0 	.word	0x08027cc0
 800d4fc:	08024204 	.word	0x08024204
		case 342 :
			strcpy(p->name,"PICTURES ON MY PHONE");
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d506:	4aa9      	ldr	r2, [pc, #676]	; (800d7ac <problem_fetch+0xc0c4>)
 800d508:	461d      	mov	r5, r3
 800d50a:	4614      	mov	r4, r2
 800d50c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d50e:	6028      	str	r0, [r5, #0]
 800d510:	6069      	str	r1, [r5, #4]
 800d512:	60aa      	str	r2, [r5, #8]
 800d514:	60eb      	str	r3, [r5, #12]
 800d516:	6820      	ldr	r0, [r4, #0]
 800d518:	6128      	str	r0, [r5, #16]
 800d51a:	7923      	ldrb	r3, [r4, #4]
 800d51c:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d524:	4aa2      	ldr	r2, [pc, #648]	; (800d7b0 <problem_fetch+0xc0c8>)
 800d526:	6810      	ldr	r0, [r2, #0]
 800d528:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2208      	movs	r2, #8
 800d52e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,C,I,G,I");
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	33a4      	adds	r3, #164	; 0xa4
 800d534:	4a9f      	ldr	r2, [pc, #636]	; (800d7b4 <problem_fetch+0xc0cc>)
 800d536:	461c      	mov	r4, r3
 800d538:	4615      	mov	r5, r2
 800d53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d53c:	6020      	str	r0, [r4, #0]
 800d53e:	6061      	str	r1, [r4, #4]
 800d540:	60a2      	str	r2, [r4, #8]
 800d542:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,13,14,17,18");
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3304      	adds	r3, #4
 800d548:	4a9b      	ldr	r2, [pc, #620]	; (800d7b8 <problem_fetch+0xc0d0>)
 800d54a:	461d      	mov	r5, r3
 800d54c:	4614      	mov	r4, r2
 800d54e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d550:	6028      	str	r0, [r5, #0]
 800d552:	6069      	str	r1, [r5, #4]
 800d554:	60aa      	str	r2, [r5, #8]
 800d556:	60eb      	str	r3, [r5, #12]
 800d558:	6820      	ldr	r0, [r4, #0]
 800d55a:	6128      	str	r0, [r5, #16]
 800d55c:	7923      	ldrb	r3, [r4, #4]
 800d55e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d566:	4a95      	ldr	r2, [pc, #596]	; (800d7bc <problem_fetch+0xc0d4>)
 800d568:	461c      	mov	r4, r3
 800d56a:	4615      	mov	r5, r2
 800d56c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d56e:	6020      	str	r0, [r4, #0]
 800d570:	6061      	str	r1, [r4, #4]
 800d572:	60a2      	str	r2, [r4, #8]
 800d574:	60e3      	str	r3, [r4, #12]
			break;
 800d576:	f00e bfe7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 343 :
			strcpy(p->name,"ONE CRIMP");
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d580:	498f      	ldr	r1, [pc, #572]	; (800d7c0 <problem_fetch+0xc0d8>)
 800d582:	461a      	mov	r2, r3
 800d584:	460b      	mov	r3, r1
 800d586:	cb03      	ldmia	r3!, {r0, r1}
 800d588:	6010      	str	r0, [r2, #0]
 800d58a:	6051      	str	r1, [r2, #4]
 800d58c:	881b      	ldrh	r3, [r3, #0]
 800d58e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d596:	4a8b      	ldr	r2, [pc, #556]	; (800d7c4 <problem_fetch+0xc0dc>)
 800d598:	6810      	ldr	r0, [r2, #0]
 800d59a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2207      	movs	r2, #7
 800d5a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,I,H,G,D,D");
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	33a4      	adds	r3, #164	; 0xa4
 800d5a6:	4a88      	ldr	r2, [pc, #544]	; (800d7c8 <problem_fetch+0xc0e0>)
 800d5a8:	461c      	mov	r4, r3
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5ae:	6020      	str	r0, [r4, #0]
 800d5b0:	6061      	str	r1, [r4, #4]
 800d5b2:	60a2      	str	r2, [r4, #8]
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,15,15,18");
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	4a83      	ldr	r2, [pc, #524]	; (800d7cc <problem_fetch+0xc0e4>)
 800d5be:	461d      	mov	r5, r3
 800d5c0:	4614      	mov	r4, r2
 800d5c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5c4:	6028      	str	r0, [r5, #0]
 800d5c6:	6069      	str	r1, [r5, #4]
 800d5c8:	60aa      	str	r2, [r5, #8]
 800d5ca:	60eb      	str	r3, [r5, #12]
 800d5cc:	8823      	ldrh	r3, [r4, #0]
 800d5ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d5d6:	4a7e      	ldr	r2, [pc, #504]	; (800d7d0 <problem_fetch+0xc0e8>)
 800d5d8:	461c      	mov	r4, r3
 800d5da:	4613      	mov	r3, r2
 800d5dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d5de:	6020      	str	r0, [r4, #0]
 800d5e0:	6061      	str	r1, [r4, #4]
 800d5e2:	60a2      	str	r2, [r4, #8]
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	81a3      	strh	r3, [r4, #12]
			break;
 800d5e8:	f00e bfae 	b.w	801c548 <problem_fetch+0x1ae60>
		case 344 :
			strcpy(p->name,"GHASTLY");
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d5f2:	4978      	ldr	r1, [pc, #480]	; (800d7d4 <problem_fetch+0xc0ec>)
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	cb03      	ldmia	r3!, {r0, r1}
 800d5fa:	6010      	str	r0, [r2, #0]
 800d5fc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d604:	4a74      	ldr	r2, [pc, #464]	; (800d7d8 <problem_fetch+0xc0f0>)
 800d606:	8811      	ldrh	r1, [r2, #0]
 800d608:	7892      	ldrb	r2, [r2, #2]
 800d60a:	8019      	strh	r1, [r3, #0]
 800d60c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2208      	movs	r2, #8
 800d612:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,J,K,E,G,D");
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	33a4      	adds	r3, #164	; 0xa4
 800d618:	4a70      	ldr	r2, [pc, #448]	; (800d7dc <problem_fetch+0xc0f4>)
 800d61a:	461c      	mov	r4, r3
 800d61c:	4615      	mov	r5, r2
 800d61e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d620:	6020      	str	r0, [r4, #0]
 800d622:	6061      	str	r1, [r4, #4]
 800d624:	60a2      	str	r2, [r4, #8]
 800d626:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,14,14,17,18");
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	3304      	adds	r3, #4
 800d62c:	4a6c      	ldr	r2, [pc, #432]	; (800d7e0 <problem_fetch+0xc0f8>)
 800d62e:	461d      	mov	r5, r3
 800d630:	4614      	mov	r4, r2
 800d632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d634:	6028      	str	r0, [r5, #0]
 800d636:	6069      	str	r1, [r5, #4]
 800d638:	60aa      	str	r2, [r5, #8]
 800d63a:	60eb      	str	r3, [r5, #12]
 800d63c:	6820      	ldr	r0, [r4, #0]
 800d63e:	6128      	str	r0, [r5, #16]
 800d640:	7923      	ldrb	r3, [r4, #4]
 800d642:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d64a:	4a5c      	ldr	r2, [pc, #368]	; (800d7bc <problem_fetch+0xc0d4>)
 800d64c:	461c      	mov	r4, r3
 800d64e:	4615      	mov	r5, r2
 800d650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d652:	6020      	str	r0, [r4, #0]
 800d654:	6061      	str	r1, [r4, #4]
 800d656:	60a2      	str	r2, [r4, #8]
 800d658:	60e3      	str	r3, [r4, #12]
			break;
 800d65a:	f00e bf75 	b.w	801c548 <problem_fetch+0x1ae60>
		case 345 :
			strcpy(p->name,"ELECTRIC HEEL");
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d664:	4a5f      	ldr	r2, [pc, #380]	; (800d7e4 <problem_fetch+0xc0fc>)
 800d666:	461c      	mov	r4, r3
 800d668:	4613      	mov	r3, r2
 800d66a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d66c:	6020      	str	r0, [r4, #0]
 800d66e:	6061      	str	r1, [r4, #4]
 800d670:	60a2      	str	r2, [r4, #8]
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d67c:	4a56      	ldr	r2, [pc, #344]	; (800d7d8 <problem_fetch+0xc0f0>)
 800d67e:	8811      	ldrh	r1, [r2, #0]
 800d680:	7892      	ldrb	r2, [r2, #2]
 800d682:	8019      	strh	r1, [r3, #0]
 800d684:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2206      	movs	r2, #6
 800d68a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,E,C,D");
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	33a4      	adds	r3, #164	; 0xa4
 800d690:	4a55      	ldr	r2, [pc, #340]	; (800d7e8 <problem_fetch+0xc100>)
 800d692:	461c      	mov	r4, r3
 800d694:	4613      	mov	r3, r2
 800d696:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d698:	6020      	str	r0, [r4, #0]
 800d69a:	6061      	str	r1, [r4, #4]
 800d69c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	4a52      	ldr	r2, [pc, #328]	; (800d7ec <problem_fetch+0xc104>)
 800d6a4:	461c      	mov	r4, r3
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6aa:	6020      	str	r0, [r4, #0]
 800d6ac:	6061      	str	r1, [r4, #4]
 800d6ae:	60a2      	str	r2, [r4, #8]
 800d6b0:	881a      	ldrh	r2, [r3, #0]
 800d6b2:	789b      	ldrb	r3, [r3, #2]
 800d6b4:	81a2      	strh	r2, [r4, #12]
 800d6b6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d6be:	4a4c      	ldr	r2, [pc, #304]	; (800d7f0 <problem_fetch+0xc108>)
 800d6c0:	461c      	mov	r4, r3
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d6c6:	6020      	str	r0, [r4, #0]
 800d6c8:	6061      	str	r1, [r4, #4]
 800d6ca:	60a2      	str	r2, [r4, #8]
			break;
 800d6cc:	f00e bf3c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 346 :
			strcpy(p->name,"WIND BENEATH MY WINGS");
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d6d6:	4a47      	ldr	r2, [pc, #284]	; (800d7f4 <problem_fetch+0xc10c>)
 800d6d8:	461d      	mov	r5, r3
 800d6da:	4614      	mov	r4, r2
 800d6dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6de:	6028      	str	r0, [r5, #0]
 800d6e0:	6069      	str	r1, [r5, #4]
 800d6e2:	60aa      	str	r2, [r5, #8]
 800d6e4:	60eb      	str	r3, [r5, #12]
 800d6e6:	6820      	ldr	r0, [r4, #0]
 800d6e8:	6128      	str	r0, [r5, #16]
 800d6ea:	88a3      	ldrh	r3, [r4, #4]
 800d6ec:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d6f4:	4a40      	ldr	r2, [pc, #256]	; (800d7f8 <problem_fetch+0xc110>)
 800d6f6:	8811      	ldrh	r1, [r2, #0]
 800d6f8:	7892      	ldrb	r2, [r2, #2]
 800d6fa:	8019      	strh	r1, [r3, #0]
 800d6fc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2204      	movs	r2, #4
 800d702:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D");
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	33a4      	adds	r3, #164	; 0xa4
 800d708:	493c      	ldr	r1, [pc, #240]	; (800d7fc <problem_fetch+0xc114>)
 800d70a:	461a      	mov	r2, r3
 800d70c:	460b      	mov	r3, r1
 800d70e:	cb03      	ldmia	r3!, {r0, r1}
 800d710:	6010      	str	r0, [r2, #0]
 800d712:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"5,9,14,18");
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	3304      	adds	r3, #4
 800d718:	4939      	ldr	r1, [pc, #228]	; (800d800 <problem_fetch+0xc118>)
 800d71a:	461a      	mov	r2, r3
 800d71c:	460b      	mov	r3, r1
 800d71e:	cb03      	ldmia	r3!, {r0, r1}
 800d720:	6010      	str	r0, [r2, #0]
 800d722:	6051      	str	r1, [r2, #4]
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d72e:	4935      	ldr	r1, [pc, #212]	; (800d804 <problem_fetch+0xc11c>)
 800d730:	461a      	mov	r2, r3
 800d732:	460b      	mov	r3, r1
 800d734:	cb03      	ldmia	r3!, {r0, r1}
 800d736:	6010      	str	r0, [r2, #0]
 800d738:	6051      	str	r1, [r2, #4]
			break;
 800d73a:	f00e bf05 	b.w	801c548 <problem_fetch+0x1ae60>
		case 347 :
			strcpy(p->name,"TAKEOFF");
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d744:	4930      	ldr	r1, [pc, #192]	; (800d808 <problem_fetch+0xc120>)
 800d746:	461a      	mov	r2, r3
 800d748:	460b      	mov	r3, r1
 800d74a:	cb03      	ldmia	r3!, {r0, r1}
 800d74c:	6010      	str	r0, [r2, #0]
 800d74e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d756:	4a20      	ldr	r2, [pc, #128]	; (800d7d8 <problem_fetch+0xc0f0>)
 800d758:	8811      	ldrh	r1, [r2, #0]
 800d75a:	7892      	ldrb	r2, [r2, #2]
 800d75c:	8019      	strh	r1, [r3, #0]
 800d75e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2205      	movs	r2, #5
 800d764:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,G,I");
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	33a4      	adds	r3, #164	; 0xa4
 800d76a:	4928      	ldr	r1, [pc, #160]	; (800d80c <problem_fetch+0xc124>)
 800d76c:	461a      	mov	r2, r3
 800d76e:	460b      	mov	r3, r1
 800d770:	cb03      	ldmia	r3!, {r0, r1}
 800d772:	6010      	str	r0, [r2, #0]
 800d774:	6051      	str	r1, [r2, #4]
 800d776:	881b      	ldrh	r3, [r3, #0]
 800d778:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,10,14,18");
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	3304      	adds	r3, #4
 800d77e:	4a24      	ldr	r2, [pc, #144]	; (800d810 <problem_fetch+0xc128>)
 800d780:	461c      	mov	r4, r3
 800d782:	4613      	mov	r3, r2
 800d784:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	6061      	str	r1, [r4, #4]
 800d78a:	60a2      	str	r2, [r4, #8]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d796:	491f      	ldr	r1, [pc, #124]	; (800d814 <problem_fetch+0xc12c>)
 800d798:	461a      	mov	r2, r3
 800d79a:	460b      	mov	r3, r1
 800d79c:	cb03      	ldmia	r3!, {r0, r1}
 800d79e:	6010      	str	r0, [r2, #0]
 800d7a0:	6051      	str	r1, [r2, #4]
 800d7a2:	881b      	ldrh	r3, [r3, #0]
 800d7a4:	8113      	strh	r3, [r2, #8]
			break;
 800d7a6:	f00e becf 	b.w	801c548 <problem_fetch+0x1ae60>
 800d7aa:	bf00      	nop
 800d7ac:	08027cdc 	.word	0x08027cdc
 800d7b0:	0802395c 	.word	0x0802395c
 800d7b4:	08027cf4 	.word	0x08027cf4
 800d7b8:	08027d04 	.word	0x08027d04
 800d7bc:	08023a80 	.word	0x08023a80
 800d7c0:	08027d1c 	.word	0x08027d1c
 800d7c4:	08023afc 	.word	0x08023afc
 800d7c8:	08027d28 	.word	0x08027d28
 800d7cc:	08027d38 	.word	0x08027d38
 800d7d0:	08023ae4 	.word	0x08023ae4
 800d7d4:	08027d4c 	.word	0x08027d4c
 800d7d8:	0802391c 	.word	0x0802391c
 800d7dc:	08027d54 	.word	0x08027d54
 800d7e0:	08027d64 	.word	0x08027d64
 800d7e4:	08027d7c 	.word	0x08027d7c
 800d7e8:	08027d8c 	.word	0x08027d8c
 800d7ec:	08027d98 	.word	0x08027d98
 800d7f0:	08023cf8 	.word	0x08023cf8
 800d7f4:	08027da8 	.word	0x08027da8
 800d7f8:	08024190 	.word	0x08024190
 800d7fc:	08027dc0 	.word	0x08027dc0
 800d800:	08027dc8 	.word	0x08027dc8
 800d804:	08023ab0 	.word	0x08023ab0
 800d808:	08027dd4 	.word	0x08027dd4
 800d80c:	08027ddc 	.word	0x08027ddc
 800d810:	08027de8 	.word	0x08027de8
 800d814:	0802403c 	.word	0x0802403c
		case 348 :
			strcpy(p->name,"CREAKY SQUEAKY");
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d81e:	4aae      	ldr	r2, [pc, #696]	; (800dad8 <problem_fetch+0xc3f0>)
 800d820:	461c      	mov	r4, r3
 800d822:	4613      	mov	r3, r2
 800d824:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d826:	6020      	str	r0, [r4, #0]
 800d828:	6061      	str	r1, [r4, #4]
 800d82a:	60a2      	str	r2, [r4, #8]
 800d82c:	881a      	ldrh	r2, [r3, #0]
 800d82e:	789b      	ldrb	r3, [r3, #2]
 800d830:	81a2      	strh	r2, [r4, #12]
 800d832:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d83a:	4aa8      	ldr	r2, [pc, #672]	; (800dadc <problem_fetch+0xc3f4>)
 800d83c:	6810      	ldr	r0, [r2, #0]
 800d83e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2208      	movs	r2, #8
 800d844:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,B,E,F,H,D");
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	33a4      	adds	r3, #164	; 0xa4
 800d84a:	4aa5      	ldr	r2, [pc, #660]	; (800dae0 <problem_fetch+0xc3f8>)
 800d84c:	461c      	mov	r4, r3
 800d84e:	4615      	mov	r5, r2
 800d850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d852:	6020      	str	r0, [r4, #0]
 800d854:	6061      	str	r1, [r4, #4]
 800d856:	60a2      	str	r2, [r4, #8]
 800d858:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,12,13,16,18");
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3304      	adds	r3, #4
 800d85e:	4aa1      	ldr	r2, [pc, #644]	; (800dae4 <problem_fetch+0xc3fc>)
 800d860:	461d      	mov	r5, r3
 800d862:	4614      	mov	r4, r2
 800d864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d866:	6028      	str	r0, [r5, #0]
 800d868:	6069      	str	r1, [r5, #4]
 800d86a:	60aa      	str	r2, [r5, #8]
 800d86c:	60eb      	str	r3, [r5, #12]
 800d86e:	6820      	ldr	r0, [r4, #0]
 800d870:	6128      	str	r0, [r5, #16]
 800d872:	7923      	ldrb	r3, [r4, #4]
 800d874:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d87c:	4a9a      	ldr	r2, [pc, #616]	; (800dae8 <problem_fetch+0xc400>)
 800d87e:	461c      	mov	r4, r3
 800d880:	4615      	mov	r5, r2
 800d882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d884:	6020      	str	r0, [r4, #0]
 800d886:	6061      	str	r1, [r4, #4]
 800d888:	60a2      	str	r2, [r4, #8]
 800d88a:	60e3      	str	r3, [r4, #12]
			break;
 800d88c:	f00e be5c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 349 :
			strcpy(p->name,"SLUG TRAIL");
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d896:	4995      	ldr	r1, [pc, #596]	; (800daec <problem_fetch+0xc404>)
 800d898:	461a      	mov	r2, r3
 800d89a:	460b      	mov	r3, r1
 800d89c:	cb03      	ldmia	r3!, {r0, r1}
 800d89e:	6010      	str	r0, [r2, #0]
 800d8a0:	6051      	str	r1, [r2, #4]
 800d8a2:	8819      	ldrh	r1, [r3, #0]
 800d8a4:	789b      	ldrb	r3, [r3, #2]
 800d8a6:	8111      	strh	r1, [r2, #8]
 800d8a8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d8b0:	4a8f      	ldr	r2, [pc, #572]	; (800daf0 <problem_fetch+0xc408>)
 800d8b2:	6810      	ldr	r0, [r2, #0]
 800d8b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2208      	movs	r2, #8
 800d8ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,E,F,A,A,E,A");
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	33a4      	adds	r3, #164	; 0xa4
 800d8c0:	4a8c      	ldr	r2, [pc, #560]	; (800daf4 <problem_fetch+0xc40c>)
 800d8c2:	461c      	mov	r4, r3
 800d8c4:	4615      	mov	r5, r2
 800d8c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8c8:	6020      	str	r0, [r4, #0]
 800d8ca:	6061      	str	r1, [r4, #4]
 800d8cc:	60a2      	str	r2, [r4, #8]
 800d8ce:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,9,14,14,18");
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	3304      	adds	r3, #4
 800d8d4:	4a88      	ldr	r2, [pc, #544]	; (800daf8 <problem_fetch+0xc410>)
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	4614      	mov	r4, r2
 800d8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8dc:	6028      	str	r0, [r5, #0]
 800d8de:	6069      	str	r1, [r5, #4]
 800d8e0:	60aa      	str	r2, [r5, #8]
 800d8e2:	60eb      	str	r3, [r5, #12]
 800d8e4:	6820      	ldr	r0, [r4, #0]
 800d8e6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d8ee:	4a7e      	ldr	r2, [pc, #504]	; (800dae8 <problem_fetch+0xc400>)
 800d8f0:	461c      	mov	r4, r3
 800d8f2:	4615      	mov	r5, r2
 800d8f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d8f6:	6020      	str	r0, [r4, #0]
 800d8f8:	6061      	str	r1, [r4, #4]
 800d8fa:	60a2      	str	r2, [r4, #8]
 800d8fc:	60e3      	str	r3, [r4, #12]
			break;
 800d8fe:	f00e be23 	b.w	801c548 <problem_fetch+0x1ae60>
		case 350 :
			strcpy(p->name,"GRAPE THIEF");
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d908:	4a7c      	ldr	r2, [pc, #496]	; (800dafc <problem_fetch+0xc414>)
 800d90a:	461c      	mov	r4, r3
 800d90c:	4613      	mov	r3, r2
 800d90e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d910:	6020      	str	r0, [r4, #0]
 800d912:	6061      	str	r1, [r4, #4]
 800d914:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d91c:	4a78      	ldr	r2, [pc, #480]	; (800db00 <problem_fetch+0xc418>)
 800d91e:	8811      	ldrh	r1, [r2, #0]
 800d920:	7892      	ldrb	r2, [r2, #2]
 800d922:	8019      	strh	r1, [r3, #0]
 800d924:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2204      	movs	r2, #4
 800d92a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,I");
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	33a4      	adds	r3, #164	; 0xa4
 800d930:	4974      	ldr	r1, [pc, #464]	; (800db04 <problem_fetch+0xc41c>)
 800d932:	461a      	mov	r2, r3
 800d934:	460b      	mov	r3, r1
 800d936:	cb03      	ldmia	r3!, {r0, r1}
 800d938:	6010      	str	r0, [r2, #0]
 800d93a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,14,9,18");
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	3304      	adds	r3, #4
 800d940:	4971      	ldr	r1, [pc, #452]	; (800db08 <problem_fetch+0xc420>)
 800d942:	461a      	mov	r2, r3
 800d944:	460b      	mov	r3, r1
 800d946:	cb03      	ldmia	r3!, {r0, r1}
 800d948:	6010      	str	r0, [r2, #0]
 800d94a:	6051      	str	r1, [r2, #4]
 800d94c:	881b      	ldrh	r3, [r3, #0]
 800d94e:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d956:	496d      	ldr	r1, [pc, #436]	; (800db0c <problem_fetch+0xc424>)
 800d958:	461a      	mov	r2, r3
 800d95a:	460b      	mov	r3, r1
 800d95c:	cb03      	ldmia	r3!, {r0, r1}
 800d95e:	6010      	str	r0, [r2, #0]
 800d960:	6051      	str	r1, [r2, #4]
			break;
 800d962:	f00e bdf1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 351 :
			strcpy(p->name,"CALL ME A FOOL WILL YOU?");
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d96c:	4a68      	ldr	r2, [pc, #416]	; (800db10 <problem_fetch+0xc428>)
 800d96e:	461d      	mov	r5, r3
 800d970:	4614      	mov	r4, r2
 800d972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d974:	6028      	str	r0, [r5, #0]
 800d976:	6069      	str	r1, [r5, #4]
 800d978:	60aa      	str	r2, [r5, #8]
 800d97a:	60eb      	str	r3, [r5, #12]
 800d97c:	cc03      	ldmia	r4!, {r0, r1}
 800d97e:	6128      	str	r0, [r5, #16]
 800d980:	6169      	str	r1, [r5, #20]
 800d982:	7823      	ldrb	r3, [r4, #0]
 800d984:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800d98c:	4a58      	ldr	r2, [pc, #352]	; (800daf0 <problem_fetch+0xc408>)
 800d98e:	6810      	ldr	r0, [r2, #0]
 800d990:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	220b      	movs	r2, #11
 800d996:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,J,G,I,J,H,G,F,E,I");
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	33a4      	adds	r3, #164	; 0xa4
 800d99c:	4a5d      	ldr	r2, [pc, #372]	; (800db14 <problem_fetch+0xc42c>)
 800d99e:	461d      	mov	r5, r3
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9a4:	6028      	str	r0, [r5, #0]
 800d9a6:	6069      	str	r1, [r5, #4]
 800d9a8:	60aa      	str	r2, [r5, #8]
 800d9aa:	60eb      	str	r3, [r5, #12]
 800d9ac:	6820      	ldr	r0, [r4, #0]
 800d9ae:	6128      	str	r0, [r5, #16]
 800d9b0:	88a3      	ldrh	r3, [r4, #4]
 800d9b2:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,5,15,14,16,8,9,11,12,18");
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	3304      	adds	r3, #4
 800d9b8:	4a57      	ldr	r2, [pc, #348]	; (800db18 <problem_fetch+0xc430>)
 800d9ba:	461d      	mov	r5, r3
 800d9bc:	4614      	mov	r4, r2
 800d9be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9c0:	6028      	str	r0, [r5, #0]
 800d9c2:	6069      	str	r1, [r5, #4]
 800d9c4:	60aa      	str	r2, [r5, #8]
 800d9c6:	60eb      	str	r3, [r5, #12]
 800d9c8:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d9ca:	6128      	str	r0, [r5, #16]
 800d9cc:	6169      	str	r1, [r5, #20]
 800d9ce:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800d9d6:	4a51      	ldr	r2, [pc, #324]	; (800db1c <problem_fetch+0xc434>)
 800d9d8:	461d      	mov	r5, r3
 800d9da:	4614      	mov	r4, r2
 800d9dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9de:	6028      	str	r0, [r5, #0]
 800d9e0:	6069      	str	r1, [r5, #4]
 800d9e2:	60aa      	str	r2, [r5, #8]
 800d9e4:	60eb      	str	r3, [r5, #12]
 800d9e6:	6820      	ldr	r0, [r4, #0]
 800d9e8:	6128      	str	r0, [r5, #16]
 800d9ea:	88a3      	ldrh	r3, [r4, #4]
 800d9ec:	82ab      	strh	r3, [r5, #20]
			break;
 800d9ee:	f00e bdab 	b.w	801c548 <problem_fetch+0x1ae60>
		case 352 :
			strcpy(p->name,"DESERT ROSE");
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d9f8:	4a49      	ldr	r2, [pc, #292]	; (800db20 <problem_fetch+0xc438>)
 800d9fa:	461c      	mov	r4, r3
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da00:	6020      	str	r0, [r4, #0]
 800da02:	6061      	str	r1, [r4, #4]
 800da04:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800da0c:	4a33      	ldr	r2, [pc, #204]	; (800dadc <problem_fetch+0xc3f4>)
 800da0e:	6810      	ldr	r0, [r2, #0]
 800da10:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2206      	movs	r2, #6
 800da16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,J,G,I");
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	33a4      	adds	r3, #164	; 0xa4
 800da1c:	4a41      	ldr	r2, [pc, #260]	; (800db24 <problem_fetch+0xc43c>)
 800da1e:	461c      	mov	r4, r3
 800da20:	4613      	mov	r3, r2
 800da22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da24:	6020      	str	r0, [r4, #0]
 800da26:	6061      	str	r1, [r4, #4]
 800da28:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	3304      	adds	r3, #4
 800da2e:	4a3e      	ldr	r2, [pc, #248]	; (800db28 <problem_fetch+0xc440>)
 800da30:	461c      	mov	r4, r3
 800da32:	4613      	mov	r3, r2
 800da34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	6061      	str	r1, [r4, #4]
 800da3a:	60a2      	str	r2, [r4, #8]
 800da3c:	881a      	ldrh	r2, [r3, #0]
 800da3e:	789b      	ldrb	r3, [r3, #2]
 800da40:	81a2      	strh	r2, [r4, #12]
 800da42:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800da4a:	4a38      	ldr	r2, [pc, #224]	; (800db2c <problem_fetch+0xc444>)
 800da4c:	461c      	mov	r4, r3
 800da4e:	4613      	mov	r3, r2
 800da50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	6061      	str	r1, [r4, #4]
 800da56:	60a2      	str	r2, [r4, #8]
			break;
 800da58:	f00e bd76 	b.w	801c548 <problem_fetch+0x1ae60>
		case 353 :
			strcpy(p->name,"BUMPIN GO");
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800da62:	4933      	ldr	r1, [pc, #204]	; (800db30 <problem_fetch+0xc448>)
 800da64:	461a      	mov	r2, r3
 800da66:	460b      	mov	r3, r1
 800da68:	cb03      	ldmia	r3!, {r0, r1}
 800da6a:	6010      	str	r0, [r2, #0]
 800da6c:	6051      	str	r1, [r2, #4]
 800da6e:	881b      	ldrh	r3, [r3, #0]
 800da70:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800da78:	4a2e      	ldr	r2, [pc, #184]	; (800db34 <problem_fetch+0xc44c>)
 800da7a:	8811      	ldrh	r1, [r2, #0]
 800da7c:	7892      	ldrb	r2, [r2, #2]
 800da7e:	8019      	strh	r1, [r3, #0]
 800da80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2207      	movs	r2, #7
 800da86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,H,I,G,I");
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	33a4      	adds	r3, #164	; 0xa4
 800da8c:	4a2a      	ldr	r2, [pc, #168]	; (800db38 <problem_fetch+0xc450>)
 800da8e:	461c      	mov	r4, r3
 800da90:	4613      	mov	r3, r2
 800da92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800da94:	6020      	str	r0, [r4, #0]
 800da96:	6061      	str	r1, [r4, #4]
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,17,18");
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	3304      	adds	r3, #4
 800daa2:	4a26      	ldr	r2, [pc, #152]	; (800db3c <problem_fetch+0xc454>)
 800daa4:	461d      	mov	r5, r3
 800daa6:	4614      	mov	r4, r2
 800daa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800daaa:	6028      	str	r0, [r5, #0]
 800daac:	6069      	str	r1, [r5, #4]
 800daae:	60aa      	str	r2, [r5, #8]
 800dab0:	60eb      	str	r3, [r5, #12]
 800dab2:	8823      	ldrh	r3, [r4, #0]
 800dab4:	78a2      	ldrb	r2, [r4, #2]
 800dab6:	822b      	strh	r3, [r5, #16]
 800dab8:	4613      	mov	r3, r2
 800daba:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dac2:	4a1f      	ldr	r2, [pc, #124]	; (800db40 <problem_fetch+0xc458>)
 800dac4:	461c      	mov	r4, r3
 800dac6:	4613      	mov	r3, r2
 800dac8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800daca:	6020      	str	r0, [r4, #0]
 800dacc:	6061      	str	r1, [r4, #4]
 800dace:	60a2      	str	r2, [r4, #8]
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	81a3      	strh	r3, [r4, #12]
			break;
 800dad4:	f00e bd38 	b.w	801c548 <problem_fetch+0x1ae60>
 800dad8:	08027df8 	.word	0x08027df8
 800dadc:	080239f4 	.word	0x080239f4
 800dae0:	08027e08 	.word	0x08027e08
 800dae4:	08027e18 	.word	0x08027e18
 800dae8:	08023a80 	.word	0x08023a80
 800daec:	08027e30 	.word	0x08027e30
 800daf0:	0802395c 	.word	0x0802395c
 800daf4:	08027e3c 	.word	0x08027e3c
 800daf8:	08027e4c 	.word	0x08027e4c
 800dafc:	08027e60 	.word	0x08027e60
 800db00:	08024190 	.word	0x08024190
 800db04:	08023a9c 	.word	0x08023a9c
 800db08:	08027e6c 	.word	0x08027e6c
 800db0c:	08023ab0 	.word	0x08023ab0
 800db10:	08027e78 	.word	0x08027e78
 800db14:	08027e94 	.word	0x08027e94
 800db18:	08027eac 	.word	0x08027eac
 800db1c:	080272bc 	.word	0x080272bc
 800db20:	08027ec8 	.word	0x08027ec8
 800db24:	08027ed4 	.word	0x08027ed4
 800db28:	08027ee0 	.word	0x08027ee0
 800db2c:	08023cf8 	.word	0x08023cf8
 800db30:	08027ef0 	.word	0x08027ef0
 800db34:	0802391c 	.word	0x0802391c
 800db38:	08027efc 	.word	0x08027efc
 800db3c:	08027f0c 	.word	0x08027f0c
 800db40:	08023ae4 	.word	0x08023ae4
		case 354 :
			strcpy(p->name,"BLACKLISTED");
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800db4a:	4abd      	ldr	r2, [pc, #756]	; (800de40 <problem_fetch+0xc758>)
 800db4c:	461c      	mov	r4, r3
 800db4e:	4613      	mov	r3, r2
 800db50:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db52:	6020      	str	r0, [r4, #0]
 800db54:	6061      	str	r1, [r4, #4]
 800db56:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800db5e:	4ab9      	ldr	r2, [pc, #740]	; (800de44 <problem_fetch+0xc75c>)
 800db60:	6810      	ldr	r0, [r2, #0]
 800db62:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2206      	movs	r2, #6
 800db68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D,A");
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	33a4      	adds	r3, #164	; 0xa4
 800db6e:	4ab6      	ldr	r2, [pc, #728]	; (800de48 <problem_fetch+0xc760>)
 800db70:	461c      	mov	r4, r3
 800db72:	4613      	mov	r3, r2
 800db74:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db76:	6020      	str	r0, [r4, #0]
 800db78:	6061      	str	r1, [r4, #4]
 800db7a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3304      	adds	r3, #4
 800db80:	4ab2      	ldr	r2, [pc, #712]	; (800de4c <problem_fetch+0xc764>)
 800db82:	461c      	mov	r4, r3
 800db84:	4615      	mov	r5, r2
 800db86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db88:	6020      	str	r0, [r4, #0]
 800db8a:	6061      	str	r1, [r4, #4]
 800db8c:	60a2      	str	r2, [r4, #8]
 800db8e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800db96:	4aae      	ldr	r2, [pc, #696]	; (800de50 <problem_fetch+0xc768>)
 800db98:	461c      	mov	r4, r3
 800db9a:	4613      	mov	r3, r2
 800db9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800db9e:	6020      	str	r0, [r4, #0]
 800dba0:	6061      	str	r1, [r4, #4]
 800dba2:	60a2      	str	r2, [r4, #8]
			break;
 800dba4:	f00e bcd0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 355 :
			strcpy(p->name,"THE EASY EASY");
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dbae:	4aa9      	ldr	r2, [pc, #676]	; (800de54 <problem_fetch+0xc76c>)
 800dbb0:	461c      	mov	r4, r3
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbb6:	6020      	str	r0, [r4, #0]
 800dbb8:	6061      	str	r1, [r4, #4]
 800dbba:	60a2      	str	r2, [r4, #8]
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dbc6:	4aa4      	ldr	r2, [pc, #656]	; (800de58 <problem_fetch+0xc770>)
 800dbc8:	6810      	ldr	r0, [r2, #0]
 800dbca:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2205      	movs	r2, #5
 800dbd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,E,I");
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	33a4      	adds	r3, #164	; 0xa4
 800dbd6:	49a1      	ldr	r1, [pc, #644]	; (800de5c <problem_fetch+0xc774>)
 800dbd8:	461a      	mov	r2, r3
 800dbda:	460b      	mov	r3, r1
 800dbdc:	cb03      	ldmia	r3!, {r0, r1}
 800dbde:	6010      	str	r0, [r2, #0]
 800dbe0:	6051      	str	r1, [r2, #4]
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,8,18");
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	4a9d      	ldr	r2, [pc, #628]	; (800de60 <problem_fetch+0xc778>)
 800dbec:	461c      	mov	r4, r3
 800dbee:	4613      	mov	r3, r2
 800dbf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dbf2:	6020      	str	r0, [r4, #0]
 800dbf4:	6061      	str	r1, [r4, #4]
 800dbf6:	60a2      	str	r2, [r4, #8]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dc02:	4998      	ldr	r1, [pc, #608]	; (800de64 <problem_fetch+0xc77c>)
 800dc04:	461a      	mov	r2, r3
 800dc06:	460b      	mov	r3, r1
 800dc08:	cb03      	ldmia	r3!, {r0, r1}
 800dc0a:	6010      	str	r0, [r2, #0]
 800dc0c:	6051      	str	r1, [r2, #4]
 800dc0e:	881b      	ldrh	r3, [r3, #0]
 800dc10:	8113      	strh	r3, [r2, #8]
			break;
 800dc12:	f00e bc99 	b.w	801c548 <problem_fetch+0x1ae60>
		case 356 :
			strcpy(p->name,"BOOTHY TOOTHY");
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc1c:	4a92      	ldr	r2, [pc, #584]	; (800de68 <problem_fetch+0xc780>)
 800dc1e:	461c      	mov	r4, r3
 800dc20:	4613      	mov	r3, r2
 800dc22:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc24:	6020      	str	r0, [r4, #0]
 800dc26:	6061      	str	r1, [r4, #4]
 800dc28:	60a2      	str	r2, [r4, #8]
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dc34:	4a88      	ldr	r2, [pc, #544]	; (800de58 <problem_fetch+0xc770>)
 800dc36:	6810      	ldr	r0, [r2, #0]
 800dc38:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2206      	movs	r2, #6
 800dc3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,E,J,E,I");
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	33a4      	adds	r3, #164	; 0xa4
 800dc44:	4a89      	ldr	r2, [pc, #548]	; (800de6c <problem_fetch+0xc784>)
 800dc46:	461c      	mov	r4, r3
 800dc48:	4613      	mov	r3, r2
 800dc4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc4c:	6020      	str	r0, [r4, #0]
 800dc4e:	6061      	str	r1, [r4, #4]
 800dc50:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,6,9,12,14,18");
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3304      	adds	r3, #4
 800dc56:	4a86      	ldr	r2, [pc, #536]	; (800de70 <problem_fetch+0xc788>)
 800dc58:	461c      	mov	r4, r3
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc5e:	6020      	str	r0, [r4, #0]
 800dc60:	6061      	str	r1, [r4, #4]
 800dc62:	60a2      	str	r2, [r4, #8]
 800dc64:	881a      	ldrh	r2, [r3, #0]
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	81a2      	strh	r2, [r4, #12]
 800dc6a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dc72:	4a80      	ldr	r2, [pc, #512]	; (800de74 <problem_fetch+0xc78c>)
 800dc74:	461c      	mov	r4, r3
 800dc76:	4613      	mov	r3, r2
 800dc78:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc7a:	6020      	str	r0, [r4, #0]
 800dc7c:	6061      	str	r1, [r4, #4]
 800dc7e:	60a2      	str	r2, [r4, #8]
			break;
 800dc80:	f00e bc62 	b.w	801c548 <problem_fetch+0x1ae60>
		case 357 :
			strcpy(p->name,"LOCK IT DOWN");
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dc8a:	4a7b      	ldr	r2, [pc, #492]	; (800de78 <problem_fetch+0xc790>)
 800dc8c:	461c      	mov	r4, r3
 800dc8e:	4613      	mov	r3, r2
 800dc90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dc92:	6020      	str	r0, [r4, #0]
 800dc94:	6061      	str	r1, [r4, #4]
 800dc96:	60a2      	str	r2, [r4, #8]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dca2:	4a76      	ldr	r2, [pc, #472]	; (800de7c <problem_fetch+0xc794>)
 800dca4:	6810      	ldr	r0, [r2, #0]
 800dca6:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2206      	movs	r2, #6
 800dcac:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,J,E,H,D");
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	33a4      	adds	r3, #164	; 0xa4
 800dcb2:	4a73      	ldr	r2, [pc, #460]	; (800de80 <problem_fetch+0xc798>)
 800dcb4:	461c      	mov	r4, r3
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dcba:	6020      	str	r0, [r4, #0]
 800dcbc:	6061      	str	r1, [r4, #4]
 800dcbe:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,12,16,18");
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4a6f      	ldr	r2, [pc, #444]	; (800de84 <problem_fetch+0xc79c>)
 800dcc6:	461c      	mov	r4, r3
 800dcc8:	4615      	mov	r5, r2
 800dcca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dccc:	6020      	str	r0, [r4, #0]
 800dcce:	6061      	str	r1, [r4, #4]
 800dcd0:	60a2      	str	r2, [r4, #8]
 800dcd2:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dcda:	4a5d      	ldr	r2, [pc, #372]	; (800de50 <problem_fetch+0xc768>)
 800dcdc:	461c      	mov	r4, r3
 800dcde:	4613      	mov	r3, r2
 800dce0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dce2:	6020      	str	r0, [r4, #0]
 800dce4:	6061      	str	r1, [r4, #4]
 800dce6:	60a2      	str	r2, [r4, #8]
			break;
 800dce8:	f00e bc2e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 358 :
			strcpy(p->name,"RECHARGE");
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dcf2:	4965      	ldr	r1, [pc, #404]	; (800de88 <problem_fetch+0xc7a0>)
 800dcf4:	461a      	mov	r2, r3
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	cb03      	ldmia	r3!, {r0, r1}
 800dcfa:	6010      	str	r0, [r2, #0]
 800dcfc:	6051      	str	r1, [r2, #4]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd08:	4a5c      	ldr	r2, [pc, #368]	; (800de7c <problem_fetch+0xc794>)
 800dd0a:	6810      	ldr	r0, [r2, #0]
 800dd0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2205      	movs	r2, #5
 800dd12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,G,A");
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	33a4      	adds	r3, #164	; 0xa4
 800dd18:	495c      	ldr	r1, [pc, #368]	; (800de8c <problem_fetch+0xc7a4>)
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	cb03      	ldmia	r3!, {r0, r1}
 800dd20:	6010      	str	r0, [r2, #0]
 800dd22:	6051      	str	r1, [r2, #4]
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,17,18");
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	4a58      	ldr	r2, [pc, #352]	; (800de90 <problem_fetch+0xc7a8>)
 800dd2e:	461c      	mov	r4, r3
 800dd30:	4613      	mov	r3, r2
 800dd32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd34:	6020      	str	r0, [r4, #0]
 800dd36:	6061      	str	r1, [r4, #4]
 800dd38:	60a2      	str	r2, [r4, #8]
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dd44:	4947      	ldr	r1, [pc, #284]	; (800de64 <problem_fetch+0xc77c>)
 800dd46:	461a      	mov	r2, r3
 800dd48:	460b      	mov	r3, r1
 800dd4a:	cb03      	ldmia	r3!, {r0, r1}
 800dd4c:	6010      	str	r0, [r2, #0]
 800dd4e:	6051      	str	r1, [r2, #4]
 800dd50:	881b      	ldrh	r3, [r3, #0]
 800dd52:	8113      	strh	r3, [r2, #8]
			break;
 800dd54:	f00e bbf8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 359 :
			strcpy(p->name,"QUARTER PAST MIDNIGHT");
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dd5e:	4a4d      	ldr	r2, [pc, #308]	; (800de94 <problem_fetch+0xc7ac>)
 800dd60:	461d      	mov	r5, r3
 800dd62:	4614      	mov	r4, r2
 800dd64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd66:	6028      	str	r0, [r5, #0]
 800dd68:	6069      	str	r1, [r5, #4]
 800dd6a:	60aa      	str	r2, [r5, #8]
 800dd6c:	60eb      	str	r3, [r5, #12]
 800dd6e:	6820      	ldr	r0, [r4, #0]
 800dd70:	6128      	str	r0, [r5, #16]
 800dd72:	88a3      	ldrh	r3, [r4, #4]
 800dd74:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dd7c:	4a31      	ldr	r2, [pc, #196]	; (800de44 <problem_fetch+0xc75c>)
 800dd7e:	6810      	ldr	r0, [r2, #0]
 800dd80:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2207      	movs	r2, #7
 800dd86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,J,G,I");
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	33a4      	adds	r3, #164	; 0xa4
 800dd8c:	4a42      	ldr	r2, [pc, #264]	; (800de98 <problem_fetch+0xc7b0>)
 800dd8e:	461c      	mov	r4, r3
 800dd90:	4613      	mov	r3, r2
 800dd92:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dd94:	6020      	str	r0, [r4, #0]
 800dd96:	6061      	str	r1, [r4, #4]
 800dd98:	60a2      	str	r2, [r4, #8]
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,13,15,18");
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	3304      	adds	r3, #4
 800dda2:	4a3e      	ldr	r2, [pc, #248]	; (800de9c <problem_fetch+0xc7b4>)
 800dda4:	461d      	mov	r5, r3
 800dda6:	4614      	mov	r4, r2
 800dda8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ddaa:	6028      	str	r0, [r5, #0]
 800ddac:	6069      	str	r1, [r5, #4]
 800ddae:	60aa      	str	r2, [r5, #8]
 800ddb0:	60eb      	str	r3, [r5, #12]
 800ddb2:	8823      	ldrh	r3, [r4, #0]
 800ddb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ddbc:	4a38      	ldr	r2, [pc, #224]	; (800dea0 <problem_fetch+0xc7b8>)
 800ddbe:	461c      	mov	r4, r3
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ddc4:	6020      	str	r0, [r4, #0]
 800ddc6:	6061      	str	r1, [r4, #4]
 800ddc8:	60a2      	str	r2, [r4, #8]
 800ddca:	881b      	ldrh	r3, [r3, #0]
 800ddcc:	81a3      	strh	r3, [r4, #12]
			break;
 800ddce:	f00e bbbb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 360 :
			strcpy(p->name,"FINGERY BY NATURE");
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ddd8:	4a32      	ldr	r2, [pc, #200]	; (800dea4 <problem_fetch+0xc7bc>)
 800ddda:	461d      	mov	r5, r3
 800dddc:	4614      	mov	r4, r2
 800ddde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dde0:	6028      	str	r0, [r5, #0]
 800dde2:	6069      	str	r1, [r5, #4]
 800dde4:	60aa      	str	r2, [r5, #8]
 800dde6:	60eb      	str	r3, [r5, #12]
 800dde8:	8823      	ldrh	r3, [r4, #0]
 800ddea:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ddf2:	4a2d      	ldr	r2, [pc, #180]	; (800dea8 <problem_fetch+0xc7c0>)
 800ddf4:	8811      	ldrh	r1, [r2, #0]
 800ddf6:	7892      	ldrb	r2, [r2, #2]
 800ddf8:	8019      	strh	r1, [r3, #0]
 800ddfa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2206      	movs	r2, #6
 800de00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,B,E,D");
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	33a4      	adds	r3, #164	; 0xa4
 800de06:	4a29      	ldr	r2, [pc, #164]	; (800deac <problem_fetch+0xc7c4>)
 800de08:	461c      	mov	r4, r3
 800de0a:	4613      	mov	r3, r2
 800de0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de0e:	6020      	str	r0, [r4, #0]
 800de10:	6061      	str	r1, [r4, #4]
 800de12:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,10,14,18");
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3304      	adds	r3, #4
 800de18:	4a25      	ldr	r2, [pc, #148]	; (800deb0 <problem_fetch+0xc7c8>)
 800de1a:	461c      	mov	r4, r3
 800de1c:	4615      	mov	r5, r2
 800de1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de20:	6020      	str	r0, [r4, #0]
 800de22:	6061      	str	r1, [r4, #4]
 800de24:	60a2      	str	r2, [r4, #8]
 800de26:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800de2e:	4a08      	ldr	r2, [pc, #32]	; (800de50 <problem_fetch+0xc768>)
 800de30:	461c      	mov	r4, r3
 800de32:	4613      	mov	r3, r2
 800de34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800de36:	6020      	str	r0, [r4, #0]
 800de38:	6061      	str	r1, [r4, #4]
 800de3a:	60a2      	str	r2, [r4, #8]
			break;
 800de3c:	f00e bb84 	b.w	801c548 <problem_fetch+0x1ae60>
 800de40:	08027f20 	.word	0x08027f20
 800de44:	080239f4 	.word	0x080239f4
 800de48:	08027f2c 	.word	0x08027f2c
 800de4c:	08027b10 	.word	0x08027b10
 800de50:	08023cf8 	.word	0x08023cf8
 800de54:	08027f38 	.word	0x08027f38
 800de58:	0802395c 	.word	0x0802395c
 800de5c:	08027f48 	.word	0x08027f48
 800de60:	08027f54 	.word	0x08027f54
 800de64:	08023e28 	.word	0x08023e28
 800de68:	08027f64 	.word	0x08027f64
 800de6c:	08027f74 	.word	0x08027f74
 800de70:	08027f80 	.word	0x08027f80
 800de74:	0802393c 	.word	0x0802393c
 800de78:	08027f90 	.word	0x08027f90
 800de7c:	08023afc 	.word	0x08023afc
 800de80:	08027fa0 	.word	0x08027fa0
 800de84:	08027fac 	.word	0x08027fac
 800de88:	08027fbc 	.word	0x08027fbc
 800de8c:	08027fc8 	.word	0x08027fc8
 800de90:	08027fd4 	.word	0x08027fd4
 800de94:	08027fe4 	.word	0x08027fe4
 800de98:	08027ffc 	.word	0x08027ffc
 800de9c:	0802800c 	.word	0x0802800c
 800dea0:	080239d4 	.word	0x080239d4
 800dea4:	08028020 	.word	0x08028020
 800dea8:	0802391c 	.word	0x0802391c
 800deac:	08028034 	.word	0x08028034
 800deb0:	08028040 	.word	0x08028040
		case 361 :
			strcpy(p->name,"FROCENZO A ROCCAMORICE");
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800deba:	4aae      	ldr	r2, [pc, #696]	; (800e174 <problem_fetch+0xca8c>)
 800debc:	461c      	mov	r4, r3
 800debe:	4615      	mov	r5, r2
 800dec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dec2:	6020      	str	r0, [r4, #0]
 800dec4:	6061      	str	r1, [r4, #4]
 800dec6:	60a2      	str	r2, [r4, #8]
 800dec8:	60e3      	str	r3, [r4, #12]
 800deca:	6828      	ldr	r0, [r5, #0]
 800decc:	6120      	str	r0, [r4, #16]
 800dece:	88ab      	ldrh	r3, [r5, #4]
 800ded0:	79aa      	ldrb	r2, [r5, #6]
 800ded2:	82a3      	strh	r3, [r4, #20]
 800ded4:	4613      	mov	r3, r2
 800ded6:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A");
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dede:	4aa6      	ldr	r2, [pc, #664]	; (800e178 <problem_fetch+0xca90>)
 800dee0:	8811      	ldrh	r1, [r2, #0]
 800dee2:	7892      	ldrb	r2, [r2, #2]
 800dee4:	8019      	strh	r1, [r3, #0]
 800dee6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2205      	movs	r2, #5
 800deec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,D,A");
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	33a4      	adds	r3, #164	; 0xa4
 800def2:	49a2      	ldr	r1, [pc, #648]	; (800e17c <problem_fetch+0xca94>)
 800def4:	461a      	mov	r2, r3
 800def6:	460b      	mov	r3, r1
 800def8:	cb03      	ldmia	r3!, {r0, r1}
 800defa:	6010      	str	r0, [r2, #0]
 800defc:	6051      	str	r1, [r2, #4]
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,12,15,18");
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	3304      	adds	r3, #4
 800df06:	4a9e      	ldr	r2, [pc, #632]	; (800e180 <problem_fetch+0xca98>)
 800df08:	461c      	mov	r4, r3
 800df0a:	4613      	mov	r3, r2
 800df0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df0e:	6020      	str	r0, [r4, #0]
 800df10:	6061      	str	r1, [r4, #4]
 800df12:	60a2      	str	r2, [r4, #8]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800df1e:	4999      	ldr	r1, [pc, #612]	; (800e184 <problem_fetch+0xca9c>)
 800df20:	461a      	mov	r2, r3
 800df22:	460b      	mov	r3, r1
 800df24:	cb03      	ldmia	r3!, {r0, r1}
 800df26:	6010      	str	r0, [r2, #0]
 800df28:	6051      	str	r1, [r2, #4]
 800df2a:	881b      	ldrh	r3, [r3, #0]
 800df2c:	8113      	strh	r3, [r2, #8]
			break;
 800df2e:	f00e bb0b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 362 :
			strcpy(p->name,"SLING SHOT");
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800df38:	4993      	ldr	r1, [pc, #588]	; (800e188 <problem_fetch+0xcaa0>)
 800df3a:	461a      	mov	r2, r3
 800df3c:	460b      	mov	r3, r1
 800df3e:	cb03      	ldmia	r3!, {r0, r1}
 800df40:	6010      	str	r0, [r2, #0]
 800df42:	6051      	str	r1, [r2, #4]
 800df44:	8819      	ldrh	r1, [r3, #0]
 800df46:	789b      	ldrb	r3, [r3, #2]
 800df48:	8111      	strh	r1, [r2, #8]
 800df4a:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800df52:	4a8e      	ldr	r2, [pc, #568]	; (800e18c <problem_fetch+0xcaa4>)
 800df54:	8811      	ldrh	r1, [r2, #0]
 800df56:	7892      	ldrb	r2, [r2, #2]
 800df58:	8019      	strh	r1, [r3, #0]
 800df5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2205      	movs	r2, #5
 800df60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,G,I");
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	33a4      	adds	r3, #164	; 0xa4
 800df66:	498a      	ldr	r1, [pc, #552]	; (800e190 <problem_fetch+0xcaa8>)
 800df68:	461a      	mov	r2, r3
 800df6a:	460b      	mov	r3, r1
 800df6c:	cb03      	ldmia	r3!, {r0, r1}
 800df6e:	6010      	str	r0, [r2, #0]
 800df70:	6051      	str	r1, [r2, #4]
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	3304      	adds	r3, #4
 800df7a:	4a86      	ldr	r2, [pc, #536]	; (800e194 <problem_fetch+0xcaac>)
 800df7c:	461c      	mov	r4, r3
 800df7e:	4613      	mov	r3, r2
 800df80:	cb07      	ldmia	r3!, {r0, r1, r2}
 800df82:	6020      	str	r0, [r4, #0]
 800df84:	6061      	str	r1, [r4, #4]
 800df86:	60a2      	str	r2, [r4, #8]
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800df92:	497c      	ldr	r1, [pc, #496]	; (800e184 <problem_fetch+0xca9c>)
 800df94:	461a      	mov	r2, r3
 800df96:	460b      	mov	r3, r1
 800df98:	cb03      	ldmia	r3!, {r0, r1}
 800df9a:	6010      	str	r0, [r2, #0]
 800df9c:	6051      	str	r1, [r2, #4]
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	8113      	strh	r3, [r2, #8]
			break;
 800dfa2:	f00e bad1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 363 :
			strcpy(p->name,"VANDO");
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800dfac:	4a7a      	ldr	r2, [pc, #488]	; (800e198 <problem_fetch+0xcab0>)
 800dfae:	6810      	ldr	r0, [r2, #0]
 800dfb0:	6018      	str	r0, [r3, #0]
 800dfb2:	8892      	ldrh	r2, [r2, #4]
 800dfb4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800dfbc:	4a77      	ldr	r2, [pc, #476]	; (800e19c <problem_fetch+0xcab4>)
 800dfbe:	6810      	ldr	r0, [r2, #0]
 800dfc0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2205      	movs	r2, #5
 800dfc6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,D,D");
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	33a4      	adds	r3, #164	; 0xa4
 800dfcc:	4974      	ldr	r1, [pc, #464]	; (800e1a0 <problem_fetch+0xcab8>)
 800dfce:	461a      	mov	r2, r3
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	cb03      	ldmia	r3!, {r0, r1}
 800dfd4:	6010      	str	r0, [r2, #0]
 800dfd6:	6051      	str	r1, [r2, #4]
 800dfd8:	881b      	ldrh	r3, [r3, #0]
 800dfda:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4a70      	ldr	r2, [pc, #448]	; (800e1a4 <problem_fetch+0xcabc>)
 800dfe2:	461c      	mov	r4, r3
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800dfe8:	6020      	str	r0, [r4, #0]
 800dfea:	6061      	str	r1, [r4, #4]
 800dfec:	60a2      	str	r2, [r4, #8]
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800dff8:	4962      	ldr	r1, [pc, #392]	; (800e184 <problem_fetch+0xca9c>)
 800dffa:	461a      	mov	r2, r3
 800dffc:	460b      	mov	r3, r1
 800dffe:	cb03      	ldmia	r3!, {r0, r1}
 800e000:	6010      	str	r0, [r2, #0]
 800e002:	6051      	str	r1, [r2, #4]
 800e004:	881b      	ldrh	r3, [r3, #0]
 800e006:	8113      	strh	r3, [r2, #8]
			break;
 800e008:	f00e ba9e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 364 :
			strcpy(p->name,"WARM UP BB");
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e012:	4965      	ldr	r1, [pc, #404]	; (800e1a8 <problem_fetch+0xcac0>)
 800e014:	461a      	mov	r2, r3
 800e016:	460b      	mov	r3, r1
 800e018:	cb03      	ldmia	r3!, {r0, r1}
 800e01a:	6010      	str	r0, [r2, #0]
 800e01c:	6051      	str	r1, [r2, #4]
 800e01e:	8819      	ldrh	r1, [r3, #0]
 800e020:	789b      	ldrb	r3, [r3, #2]
 800e022:	8111      	strh	r1, [r2, #8]
 800e024:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e02c:	4a5b      	ldr	r2, [pc, #364]	; (800e19c <problem_fetch+0xcab4>)
 800e02e:	6810      	ldr	r0, [r2, #0]
 800e030:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2208      	movs	r2, #8
 800e036:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,E,G,D,G,D");
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	33a4      	adds	r3, #164	; 0xa4
 800e03c:	4a5b      	ldr	r2, [pc, #364]	; (800e1ac <problem_fetch+0xcac4>)
 800e03e:	461c      	mov	r4, r3
 800e040:	4615      	mov	r5, r2
 800e042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e044:	6020      	str	r0, [r4, #0]
 800e046:	6061      	str	r1, [r4, #4]
 800e048:	60a2      	str	r2, [r4, #8]
 800e04a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,8,14,15,17,18");
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3304      	adds	r3, #4
 800e050:	4a57      	ldr	r2, [pc, #348]	; (800e1b0 <problem_fetch+0xcac8>)
 800e052:	461d      	mov	r5, r3
 800e054:	4614      	mov	r4, r2
 800e056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e058:	6028      	str	r0, [r5, #0]
 800e05a:	6069      	str	r1, [r5, #4]
 800e05c:	60aa      	str	r2, [r5, #8]
 800e05e:	60eb      	str	r3, [r5, #12]
 800e060:	6820      	ldr	r0, [r4, #0]
 800e062:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e06a:	4a52      	ldr	r2, [pc, #328]	; (800e1b4 <problem_fetch+0xcacc>)
 800e06c:	461c      	mov	r4, r3
 800e06e:	4615      	mov	r5, r2
 800e070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e072:	6020      	str	r0, [r4, #0]
 800e074:	6061      	str	r1, [r4, #4]
 800e076:	60a2      	str	r2, [r4, #8]
 800e078:	60e3      	str	r3, [r4, #12]
			break;
 800e07a:	f00e ba65 	b.w	801c548 <problem_fetch+0x1ae60>
		case 365 :
			strcpy(p->name,"SHARK FIN");
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e084:	494c      	ldr	r1, [pc, #304]	; (800e1b8 <problem_fetch+0xcad0>)
 800e086:	461a      	mov	r2, r3
 800e088:	460b      	mov	r3, r1
 800e08a:	cb03      	ldmia	r3!, {r0, r1}
 800e08c:	6010      	str	r0, [r2, #0]
 800e08e:	6051      	str	r1, [r2, #4]
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e09a:	4a40      	ldr	r2, [pc, #256]	; (800e19c <problem_fetch+0xcab4>)
 800e09c:	6810      	ldr	r0, [r2, #0]
 800e09e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2209      	movs	r2, #9
 800e0a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,D,H,G,C,I");
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	33a4      	adds	r3, #164	; 0xa4
 800e0aa:	4a44      	ldr	r2, [pc, #272]	; (800e1bc <problem_fetch+0xcad4>)
 800e0ac:	461d      	mov	r5, r3
 800e0ae:	4614      	mov	r4, r2
 800e0b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0b2:	6028      	str	r0, [r5, #0]
 800e0b4:	6069      	str	r1, [r5, #4]
 800e0b6:	60aa      	str	r2, [r5, #8]
 800e0b8:	60eb      	str	r3, [r5, #12]
 800e0ba:	8823      	ldrh	r3, [r4, #0]
 800e0bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,9,11,13,15,5,18");
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	3304      	adds	r3, #4
 800e0c2:	4a3f      	ldr	r2, [pc, #252]	; (800e1c0 <problem_fetch+0xcad8>)
 800e0c4:	461d      	mov	r5, r3
 800e0c6:	4614      	mov	r4, r2
 800e0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0ca:	6028      	str	r0, [r5, #0]
 800e0cc:	6069      	str	r1, [r5, #4]
 800e0ce:	60aa      	str	r2, [r5, #8]
 800e0d0:	60eb      	str	r3, [r5, #12]
 800e0d2:	6820      	ldr	r0, [r4, #0]
 800e0d4:	6128      	str	r0, [r5, #16]
 800e0d6:	88a3      	ldrh	r3, [r4, #4]
 800e0d8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e0e0:	4a38      	ldr	r2, [pc, #224]	; (800e1c4 <problem_fetch+0xcadc>)
 800e0e2:	461d      	mov	r5, r3
 800e0e4:	4614      	mov	r4, r2
 800e0e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0e8:	6028      	str	r0, [r5, #0]
 800e0ea:	6069      	str	r1, [r5, #4]
 800e0ec:	60aa      	str	r2, [r5, #8]
 800e0ee:	60eb      	str	r3, [r5, #12]
 800e0f0:	8823      	ldrh	r3, [r4, #0]
 800e0f2:	822b      	strh	r3, [r5, #16]
			break;
 800e0f4:	f00e ba28 	b.w	801c548 <problem_fetch+0x1ae60>
		case 366 :
			strcpy(p->name,"FUDGE YEAH");
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e0fe:	4932      	ldr	r1, [pc, #200]	; (800e1c8 <problem_fetch+0xcae0>)
 800e100:	461a      	mov	r2, r3
 800e102:	460b      	mov	r3, r1
 800e104:	cb03      	ldmia	r3!, {r0, r1}
 800e106:	6010      	str	r0, [r2, #0]
 800e108:	6051      	str	r1, [r2, #4]
 800e10a:	8819      	ldrh	r1, [r3, #0]
 800e10c:	789b      	ldrb	r3, [r3, #2]
 800e10e:	8111      	strh	r1, [r2, #8]
 800e110:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e118:	4a20      	ldr	r2, [pc, #128]	; (800e19c <problem_fetch+0xcab4>)
 800e11a:	6810      	ldr	r0, [r2, #0]
 800e11c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2209      	movs	r2, #9
 800e122:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,G,H,G,I,H,I");
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	33a4      	adds	r3, #164	; 0xa4
 800e128:	4a28      	ldr	r2, [pc, #160]	; (800e1cc <problem_fetch+0xcae4>)
 800e12a:	461d      	mov	r5, r3
 800e12c:	4614      	mov	r4, r2
 800e12e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e130:	6028      	str	r0, [r5, #0]
 800e132:	6069      	str	r1, [r5, #4]
 800e134:	60aa      	str	r2, [r5, #8]
 800e136:	60eb      	str	r3, [r5, #12]
 800e138:	8823      	ldrh	r3, [r4, #0]
 800e13a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3304      	adds	r3, #4
 800e140:	4a23      	ldr	r2, [pc, #140]	; (800e1d0 <problem_fetch+0xcae8>)
 800e142:	461d      	mov	r5, r3
 800e144:	4614      	mov	r4, r2
 800e146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e148:	6028      	str	r0, [r5, #0]
 800e14a:	6069      	str	r1, [r5, #4]
 800e14c:	60aa      	str	r2, [r5, #8]
 800e14e:	60eb      	str	r3, [r5, #12]
 800e150:	cc03      	ldmia	r4!, {r0, r1}
 800e152:	6128      	str	r0, [r5, #16]
 800e154:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e15c:	4a19      	ldr	r2, [pc, #100]	; (800e1c4 <problem_fetch+0xcadc>)
 800e15e:	461d      	mov	r5, r3
 800e160:	4614      	mov	r4, r2
 800e162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e164:	6028      	str	r0, [r5, #0]
 800e166:	6069      	str	r1, [r5, #4]
 800e168:	60aa      	str	r2, [r5, #8]
 800e16a:	60eb      	str	r3, [r5, #12]
 800e16c:	8823      	ldrh	r3, [r4, #0]
 800e16e:	822b      	strh	r3, [r5, #16]
			break;
 800e170:	f00e b9ea 	b.w	801c548 <problem_fetch+0x1ae60>
 800e174:	08028050 	.word	0x08028050
 800e178:	0802391c 	.word	0x0802391c
 800e17c:	08028068 	.word	0x08028068
 800e180:	08028074 	.word	0x08028074
 800e184:	08023e28 	.word	0x08023e28
 800e188:	08028084 	.word	0x08028084
 800e18c:	08023a28 	.word	0x08023a28
 800e190:	08028090 	.word	0x08028090
 800e194:	08025090 	.word	0x08025090
 800e198:	0802809c 	.word	0x0802809c
 800e19c:	0802395c 	.word	0x0802395c
 800e1a0:	080280a4 	.word	0x080280a4
 800e1a4:	0802797c 	.word	0x0802797c
 800e1a8:	080280b0 	.word	0x080280b0
 800e1ac:	080280bc 	.word	0x080280bc
 800e1b0:	080280cc 	.word	0x080280cc
 800e1b4:	08023a80 	.word	0x08023a80
 800e1b8:	080280e0 	.word	0x080280e0
 800e1bc:	080280ec 	.word	0x080280ec
 800e1c0:	08028100 	.word	0x08028100
 800e1c4:	08024940 	.word	0x08024940
 800e1c8:	08028118 	.word	0x08028118
 800e1cc:	08028124 	.word	0x08028124
 800e1d0:	08028138 	.word	0x08028138
		case 367 :
			strcpy(p->name,"VITAMIN B12");
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e1da:	4aa8      	ldr	r2, [pc, #672]	; (800e47c <problem_fetch+0xcd94>)
 800e1dc:	461c      	mov	r4, r3
 800e1de:	4613      	mov	r3, r2
 800e1e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e1e2:	6020      	str	r0, [r4, #0]
 800e1e4:	6061      	str	r1, [r4, #4]
 800e1e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e1ee:	4aa4      	ldr	r2, [pc, #656]	; (800e480 <problem_fetch+0xcd98>)
 800e1f0:	6810      	ldr	r0, [r2, #0]
 800e1f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2206      	movs	r2, #6
 800e1f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,B,E,I");
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	33a4      	adds	r3, #164	; 0xa4
 800e1fe:	4aa1      	ldr	r2, [pc, #644]	; (800e484 <problem_fetch+0xcd9c>)
 800e200:	461c      	mov	r4, r3
 800e202:	4613      	mov	r3, r2
 800e204:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e206:	6020      	str	r0, [r4, #0]
 800e208:	6061      	str	r1, [r4, #4]
 800e20a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,16,18");
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	3304      	adds	r3, #4
 800e210:	4a9d      	ldr	r2, [pc, #628]	; (800e488 <problem_fetch+0xcda0>)
 800e212:	461c      	mov	r4, r3
 800e214:	4615      	mov	r5, r2
 800e216:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e218:	6020      	str	r0, [r4, #0]
 800e21a:	6061      	str	r1, [r4, #4]
 800e21c:	60a2      	str	r2, [r4, #8]
 800e21e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e226:	4a99      	ldr	r2, [pc, #612]	; (800e48c <problem_fetch+0xcda4>)
 800e228:	461c      	mov	r4, r3
 800e22a:	4613      	mov	r3, r2
 800e22c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e22e:	6020      	str	r0, [r4, #0]
 800e230:	6061      	str	r1, [r4, #4]
 800e232:	60a2      	str	r2, [r4, #8]
			break;
 800e234:	f00e b988 	b.w	801c548 <problem_fetch+0x1ae60>
		case 368 :
			strcpy(p->name,"HUFFING BUBBLES");
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e23e:	4a94      	ldr	r2, [pc, #592]	; (800e490 <problem_fetch+0xcda8>)
 800e240:	461c      	mov	r4, r3
 800e242:	4615      	mov	r5, r2
 800e244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e246:	6020      	str	r0, [r4, #0]
 800e248:	6061      	str	r1, [r4, #4]
 800e24a:	60a2      	str	r2, [r4, #8]
 800e24c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e254:	4a8f      	ldr	r2, [pc, #572]	; (800e494 <problem_fetch+0xcdac>)
 800e256:	6810      	ldr	r0, [r2, #0]
 800e258:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2206      	movs	r2, #6
 800e25e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,F,B,D,E,A");
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	33a4      	adds	r3, #164	; 0xa4
 800e264:	4a8c      	ldr	r2, [pc, #560]	; (800e498 <problem_fetch+0xcdb0>)
 800e266:	461c      	mov	r4, r3
 800e268:	4613      	mov	r3, r2
 800e26a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e26c:	6020      	str	r0, [r4, #0]
 800e26e:	6061      	str	r1, [r4, #4]
 800e270:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,11,10,15,6,18");
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3304      	adds	r3, #4
 800e276:	4a89      	ldr	r2, [pc, #548]	; (800e49c <problem_fetch+0xcdb4>)
 800e278:	461c      	mov	r4, r3
 800e27a:	4615      	mov	r5, r2
 800e27c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e27e:	6020      	str	r0, [r4, #0]
 800e280:	6061      	str	r1, [r4, #4]
 800e282:	60a2      	str	r2, [r4, #8]
 800e284:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e28c:	4a7f      	ldr	r2, [pc, #508]	; (800e48c <problem_fetch+0xcda4>)
 800e28e:	461c      	mov	r4, r3
 800e290:	4613      	mov	r3, r2
 800e292:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e294:	6020      	str	r0, [r4, #0]
 800e296:	6061      	str	r1, [r4, #4]
 800e298:	60a2      	str	r2, [r4, #8]
			break;
 800e29a:	f00e b955 	b.w	801c548 <problem_fetch+0x1ae60>
		case 369 :
			strcpy(p->name,"A SIDE OF FRIES?");
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e2a4:	4a7e      	ldr	r2, [pc, #504]	; (800e4a0 <problem_fetch+0xcdb8>)
 800e2a6:	461d      	mov	r5, r3
 800e2a8:	4614      	mov	r4, r2
 800e2aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e2ac:	6028      	str	r0, [r5, #0]
 800e2ae:	6069      	str	r1, [r5, #4]
 800e2b0:	60aa      	str	r2, [r5, #8]
 800e2b2:	60eb      	str	r3, [r5, #12]
 800e2b4:	7823      	ldrb	r3, [r4, #0]
 800e2b6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e2be:	4a79      	ldr	r2, [pc, #484]	; (800e4a4 <problem_fetch+0xcdbc>)
 800e2c0:	8811      	ldrh	r1, [r2, #0]
 800e2c2:	7892      	ldrb	r2, [r2, #2]
 800e2c4:	8019      	strh	r1, [r3, #0]
 800e2c6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2205      	movs	r2, #5
 800e2cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,G,I");
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	33a4      	adds	r3, #164	; 0xa4
 800e2d2:	4975      	ldr	r1, [pc, #468]	; (800e4a8 <problem_fetch+0xcdc0>)
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	cb03      	ldmia	r3!, {r0, r1}
 800e2da:	6010      	str	r0, [r2, #0]
 800e2dc:	6051      	str	r1, [r2, #4]
 800e2de:	881b      	ldrh	r3, [r3, #0]
 800e2e0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	4a71      	ldr	r2, [pc, #452]	; (800e4ac <problem_fetch+0xcdc4>)
 800e2e8:	461c      	mov	r4, r3
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e2ee:	6020      	str	r0, [r4, #0]
 800e2f0:	6061      	str	r1, [r4, #4]
 800e2f2:	60a2      	str	r2, [r4, #8]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e2fe:	496c      	ldr	r1, [pc, #432]	; (800e4b0 <problem_fetch+0xcdc8>)
 800e300:	461a      	mov	r2, r3
 800e302:	460b      	mov	r3, r1
 800e304:	cb03      	ldmia	r3!, {r0, r1}
 800e306:	6010      	str	r0, [r2, #0]
 800e308:	6051      	str	r1, [r2, #4]
 800e30a:	881b      	ldrh	r3, [r3, #0]
 800e30c:	8113      	strh	r3, [r2, #8]
			break;
 800e30e:	f00e b91b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 370 :
			strcpy(p->name,"PINCH WARM UP");
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e318:	4a66      	ldr	r2, [pc, #408]	; (800e4b4 <problem_fetch+0xcdcc>)
 800e31a:	461c      	mov	r4, r3
 800e31c:	4613      	mov	r3, r2
 800e31e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e320:	6020      	str	r0, [r4, #0]
 800e322:	6061      	str	r1, [r4, #4]
 800e324:	60a2      	str	r2, [r4, #8]
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e330:	4a61      	ldr	r2, [pc, #388]	; (800e4b8 <problem_fetch+0xcdd0>)
 800e332:	6810      	ldr	r0, [r2, #0]
 800e334:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2208      	movs	r2, #8
 800e33a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,A,D");
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	33a4      	adds	r3, #164	; 0xa4
 800e340:	4a5e      	ldr	r2, [pc, #376]	; (800e4bc <problem_fetch+0xcdd4>)
 800e342:	461c      	mov	r4, r3
 800e344:	4615      	mov	r5, r2
 800e346:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e348:	6020      	str	r0, [r4, #0]
 800e34a:	6061      	str	r1, [r4, #4]
 800e34c:	60a2      	str	r2, [r4, #8]
 800e34e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,14,18");
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3304      	adds	r3, #4
 800e354:	4a5a      	ldr	r2, [pc, #360]	; (800e4c0 <problem_fetch+0xcdd8>)
 800e356:	461d      	mov	r5, r3
 800e358:	4614      	mov	r4, r2
 800e35a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e35c:	6028      	str	r0, [r5, #0]
 800e35e:	6069      	str	r1, [r5, #4]
 800e360:	60aa      	str	r2, [r5, #8]
 800e362:	60eb      	str	r3, [r5, #12]
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	6128      	str	r0, [r5, #16]
 800e368:	88a3      	ldrh	r3, [r4, #4]
 800e36a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e372:	4a54      	ldr	r2, [pc, #336]	; (800e4c4 <problem_fetch+0xcddc>)
 800e374:	461c      	mov	r4, r3
 800e376:	4615      	mov	r5, r2
 800e378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e37a:	6020      	str	r0, [r4, #0]
 800e37c:	6061      	str	r1, [r4, #4]
 800e37e:	60a2      	str	r2, [r4, #8]
 800e380:	60e3      	str	r3, [r4, #12]
			break;
 800e382:	f00e b8e1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 371 :
			strcpy(p->name,"PINCH &AMP; REACH");
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e38c:	4a4e      	ldr	r2, [pc, #312]	; (800e4c8 <problem_fetch+0xcde0>)
 800e38e:	461d      	mov	r5, r3
 800e390:	4614      	mov	r4, r2
 800e392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e394:	6028      	str	r0, [r5, #0]
 800e396:	6069      	str	r1, [r5, #4]
 800e398:	60aa      	str	r2, [r5, #8]
 800e39a:	60eb      	str	r3, [r5, #12]
 800e39c:	8823      	ldrh	r3, [r4, #0]
 800e39e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e3a6:	4a44      	ldr	r2, [pc, #272]	; (800e4b8 <problem_fetch+0xcdd0>)
 800e3a8:	6810      	ldr	r0, [r2, #0]
 800e3aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2207      	movs	r2, #7
 800e3b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,D,D");
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	33a4      	adds	r3, #164	; 0xa4
 800e3b6:	4a45      	ldr	r2, [pc, #276]	; (800e4cc <problem_fetch+0xcde4>)
 800e3b8:	461c      	mov	r4, r3
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3be:	6020      	str	r0, [r4, #0]
 800e3c0:	6061      	str	r1, [r4, #4]
 800e3c2:	60a2      	str	r2, [r4, #8]
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,15,18");
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3304      	adds	r3, #4
 800e3cc:	4a40      	ldr	r2, [pc, #256]	; (800e4d0 <problem_fetch+0xcde8>)
 800e3ce:	461d      	mov	r5, r3
 800e3d0:	4614      	mov	r4, r2
 800e3d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3d4:	6028      	str	r0, [r5, #0]
 800e3d6:	6069      	str	r1, [r5, #4]
 800e3d8:	60aa      	str	r2, [r5, #8]
 800e3da:	60eb      	str	r3, [r5, #12]
 800e3dc:	8823      	ldrh	r3, [r4, #0]
 800e3de:	78a2      	ldrb	r2, [r4, #2]
 800e3e0:	822b      	strh	r3, [r5, #16]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e3ec:	4a39      	ldr	r2, [pc, #228]	; (800e4d4 <problem_fetch+0xcdec>)
 800e3ee:	461c      	mov	r4, r3
 800e3f0:	4613      	mov	r3, r2
 800e3f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e3f4:	6020      	str	r0, [r4, #0]
 800e3f6:	6061      	str	r1, [r4, #4]
 800e3f8:	60a2      	str	r2, [r4, #8]
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	81a3      	strh	r3, [r4, #12]
			break;
 800e3fe:	f00e b8a3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 372 :
			strcpy(p->name,"LAYBACK WARM UP");
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e408:	4a33      	ldr	r2, [pc, #204]	; (800e4d8 <problem_fetch+0xcdf0>)
 800e40a:	461c      	mov	r4, r3
 800e40c:	4615      	mov	r5, r2
 800e40e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e410:	6020      	str	r0, [r4, #0]
 800e412:	6061      	str	r1, [r4, #4]
 800e414:	60a2      	str	r2, [r4, #8]
 800e416:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e41e:	4a26      	ldr	r2, [pc, #152]	; (800e4b8 <problem_fetch+0xcdd0>)
 800e420:	6810      	ldr	r0, [r2, #0]
 800e422:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2207      	movs	r2, #7
 800e428:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,D,A,D");
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	33a4      	adds	r3, #164	; 0xa4
 800e42e:	4a2b      	ldr	r2, [pc, #172]	; (800e4dc <problem_fetch+0xcdf4>)
 800e430:	461c      	mov	r4, r3
 800e432:	4613      	mov	r3, r2
 800e434:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e436:	6020      	str	r0, [r4, #0]
 800e438:	6061      	str	r1, [r4, #4]
 800e43a:	60a2      	str	r2, [r4, #8]
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,11,14,18");
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	3304      	adds	r3, #4
 800e444:	4a26      	ldr	r2, [pc, #152]	; (800e4e0 <problem_fetch+0xcdf8>)
 800e446:	461d      	mov	r5, r3
 800e448:	4614      	mov	r4, r2
 800e44a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e44c:	6028      	str	r0, [r5, #0]
 800e44e:	6069      	str	r1, [r5, #4]
 800e450:	60aa      	str	r2, [r5, #8]
 800e452:	60eb      	str	r3, [r5, #12]
 800e454:	8823      	ldrh	r3, [r4, #0]
 800e456:	78a2      	ldrb	r2, [r4, #2]
 800e458:	822b      	strh	r3, [r5, #16]
 800e45a:	4613      	mov	r3, r2
 800e45c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e464:	4a1b      	ldr	r2, [pc, #108]	; (800e4d4 <problem_fetch+0xcdec>)
 800e466:	461c      	mov	r4, r3
 800e468:	4613      	mov	r3, r2
 800e46a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e46c:	6020      	str	r0, [r4, #0]
 800e46e:	6061      	str	r1, [r4, #4]
 800e470:	60a2      	str	r2, [r4, #8]
 800e472:	881b      	ldrh	r3, [r3, #0]
 800e474:	81a3      	strh	r3, [r4, #12]
			break;
 800e476:	f00e b867 	b.w	801c548 <problem_fetch+0x1ae60>
 800e47a:	bf00      	nop
 800e47c:	08028150 	.word	0x08028150
 800e480:	08023afc 	.word	0x08023afc
 800e484:	0802815c 	.word	0x0802815c
 800e488:	08028168 	.word	0x08028168
 800e48c:	08023cf8 	.word	0x08023cf8
 800e490:	08028178 	.word	0x08028178
 800e494:	08023a98 	.word	0x08023a98
 800e498:	08028188 	.word	0x08028188
 800e49c:	08028194 	.word	0x08028194
 800e4a0:	080281a4 	.word	0x080281a4
 800e4a4:	0802391c 	.word	0x0802391c
 800e4a8:	080281b8 	.word	0x080281b8
 800e4ac:	08027954 	.word	0x08027954
 800e4b0:	08023e28 	.word	0x08023e28
 800e4b4:	080281c4 	.word	0x080281c4
 800e4b8:	0802395c 	.word	0x0802395c
 800e4bc:	080281d4 	.word	0x080281d4
 800e4c0:	080281e4 	.word	0x080281e4
 800e4c4:	08023a80 	.word	0x08023a80
 800e4c8:	080281fc 	.word	0x080281fc
 800e4cc:	08028210 	.word	0x08028210
 800e4d0:	08028220 	.word	0x08028220
 800e4d4:	080239d4 	.word	0x080239d4
 800e4d8:	08028234 	.word	0x08028234
 800e4dc:	08028244 	.word	0x08028244
 800e4e0:	08028254 	.word	0x08028254
		case 373 :
			strcpy(p->name,"COMMITTING WARM UP");
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e4ea:	4ac2      	ldr	r2, [pc, #776]	; (800e7f4 <problem_fetch+0xd10c>)
 800e4ec:	461d      	mov	r5, r3
 800e4ee:	4614      	mov	r4, r2
 800e4f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e4f2:	6028      	str	r0, [r5, #0]
 800e4f4:	6069      	str	r1, [r5, #4]
 800e4f6:	60aa      	str	r2, [r5, #8]
 800e4f8:	60eb      	str	r3, [r5, #12]
 800e4fa:	8823      	ldrh	r3, [r4, #0]
 800e4fc:	78a2      	ldrb	r2, [r4, #2]
 800e4fe:	822b      	strh	r3, [r5, #16]
 800e500:	4613      	mov	r3, r2
 800e502:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e50a:	4abb      	ldr	r2, [pc, #748]	; (800e7f8 <problem_fetch+0xd110>)
 800e50c:	6810      	ldr	r0, [r2, #0]
 800e50e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2207      	movs	r2, #7
 800e514:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,C,I,D");
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	33a4      	adds	r3, #164	; 0xa4
 800e51a:	4ab8      	ldr	r2, [pc, #736]	; (800e7fc <problem_fetch+0xd114>)
 800e51c:	461c      	mov	r4, r3
 800e51e:	4613      	mov	r3, r2
 800e520:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e522:	6020      	str	r0, [r4, #0]
 800e524:	6061      	str	r1, [r4, #4]
 800e526:	60a2      	str	r2, [r4, #8]
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,11,13,14,18");
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	3304      	adds	r3, #4
 800e530:	4ab3      	ldr	r2, [pc, #716]	; (800e800 <problem_fetch+0xd118>)
 800e532:	461d      	mov	r5, r3
 800e534:	4614      	mov	r4, r2
 800e536:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e538:	6028      	str	r0, [r5, #0]
 800e53a:	6069      	str	r1, [r5, #4]
 800e53c:	60aa      	str	r2, [r5, #8]
 800e53e:	60eb      	str	r3, [r5, #12]
 800e540:	8823      	ldrh	r3, [r4, #0]
 800e542:	78a2      	ldrb	r2, [r4, #2]
 800e544:	822b      	strh	r3, [r5, #16]
 800e546:	4613      	mov	r3, r2
 800e548:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e550:	4aac      	ldr	r2, [pc, #688]	; (800e804 <problem_fetch+0xd11c>)
 800e552:	461c      	mov	r4, r3
 800e554:	4613      	mov	r3, r2
 800e556:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e558:	6020      	str	r0, [r4, #0]
 800e55a:	6061      	str	r1, [r4, #4]
 800e55c:	60a2      	str	r2, [r4, #8]
 800e55e:	881b      	ldrh	r3, [r3, #0]
 800e560:	81a3      	strh	r3, [r4, #12]
			break;
 800e562:	f00d bff1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 374 :
			strcpy(p->name,"APEX");
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e56c:	4aa6      	ldr	r2, [pc, #664]	; (800e808 <problem_fetch+0xd120>)
 800e56e:	6810      	ldr	r0, [r2, #0]
 800e570:	6018      	str	r0, [r3, #0]
 800e572:	7912      	ldrb	r2, [r2, #4]
 800e574:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7C");
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e57c:	4aa3      	ldr	r2, [pc, #652]	; (800e80c <problem_fetch+0xd124>)
 800e57e:	8811      	ldrh	r1, [r2, #0]
 800e580:	7892      	ldrb	r2, [r2, #2]
 800e582:	8019      	strh	r1, [r3, #0]
 800e584:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2204      	movs	r2, #4
 800e58a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,I");
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	33a4      	adds	r3, #164	; 0xa4
 800e590:	499f      	ldr	r1, [pc, #636]	; (800e810 <problem_fetch+0xd128>)
 800e592:	461a      	mov	r2, r3
 800e594:	460b      	mov	r3, r1
 800e596:	cb03      	ldmia	r3!, {r0, r1}
 800e598:	6010      	str	r0, [r2, #0]
 800e59a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	3304      	adds	r3, #4
 800e5a0:	499c      	ldr	r1, [pc, #624]	; (800e814 <problem_fetch+0xd12c>)
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	cb03      	ldmia	r3!, {r0, r1}
 800e5a8:	6010      	str	r0, [r2, #0]
 800e5aa:	6051      	str	r1, [r2, #4]
 800e5ac:	8819      	ldrh	r1, [r3, #0]
 800e5ae:	789b      	ldrb	r3, [r3, #2]
 800e5b0:	8111      	strh	r1, [r2, #8]
 800e5b2:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e5ba:	4997      	ldr	r1, [pc, #604]	; (800e818 <problem_fetch+0xd130>)
 800e5bc:	461a      	mov	r2, r3
 800e5be:	460b      	mov	r3, r1
 800e5c0:	cb03      	ldmia	r3!, {r0, r1}
 800e5c2:	6010      	str	r0, [r2, #0]
 800e5c4:	6051      	str	r1, [r2, #4]
			break;
 800e5c6:	f00d bfbf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 375 :
			strcpy(p->name,"MEH");
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e5d0:	4a92      	ldr	r2, [pc, #584]	; (800e81c <problem_fetch+0xd134>)
 800e5d2:	6810      	ldr	r0, [r2, #0]
 800e5d4:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e5dc:	4a86      	ldr	r2, [pc, #536]	; (800e7f8 <problem_fetch+0xd110>)
 800e5de:	6810      	ldr	r0, [r2, #0]
 800e5e0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2207      	movs	r2, #7
 800e5e6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,D,F,G,I");
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	33a4      	adds	r3, #164	; 0xa4
 800e5ec:	4a8c      	ldr	r2, [pc, #560]	; (800e820 <problem_fetch+0xd138>)
 800e5ee:	461c      	mov	r4, r3
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e5f4:	6020      	str	r0, [r4, #0]
 800e5f6:	6061      	str	r1, [r4, #4]
 800e5f8:	60a2      	str	r2, [r4, #8]
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,13,15,18");
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	3304      	adds	r3, #4
 800e602:	4a88      	ldr	r2, [pc, #544]	; (800e824 <problem_fetch+0xd13c>)
 800e604:	461d      	mov	r5, r3
 800e606:	4614      	mov	r4, r2
 800e608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e60a:	6028      	str	r0, [r5, #0]
 800e60c:	6069      	str	r1, [r5, #4]
 800e60e:	60aa      	str	r2, [r5, #8]
 800e610:	60eb      	str	r3, [r5, #12]
 800e612:	8823      	ldrh	r3, [r4, #0]
 800e614:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e61c:	4a79      	ldr	r2, [pc, #484]	; (800e804 <problem_fetch+0xd11c>)
 800e61e:	461c      	mov	r4, r3
 800e620:	4613      	mov	r3, r2
 800e622:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e624:	6020      	str	r0, [r4, #0]
 800e626:	6061      	str	r1, [r4, #4]
 800e628:	60a2      	str	r2, [r4, #8]
 800e62a:	881b      	ldrh	r3, [r3, #0]
 800e62c:	81a3      	strh	r3, [r4, #12]
			break;
 800e62e:	f00d bf8b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 376 :
			strcpy(p->name,"TE LA TAMALANCH");
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e638:	4a7b      	ldr	r2, [pc, #492]	; (800e828 <problem_fetch+0xd140>)
 800e63a:	461c      	mov	r4, r3
 800e63c:	4615      	mov	r5, r2
 800e63e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e640:	6020      	str	r0, [r4, #0]
 800e642:	6061      	str	r1, [r4, #4]
 800e644:	60a2      	str	r2, [r4, #8]
 800e646:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e64e:	4a77      	ldr	r2, [pc, #476]	; (800e82c <problem_fetch+0xd144>)
 800e650:	6810      	ldr	r0, [r2, #0]
 800e652:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2206      	movs	r2, #6
 800e658:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,D,D,A");
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	33a4      	adds	r3, #164	; 0xa4
 800e65e:	4a74      	ldr	r2, [pc, #464]	; (800e830 <problem_fetch+0xd148>)
 800e660:	461c      	mov	r4, r3
 800e662:	4613      	mov	r3, r2
 800e664:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e666:	6020      	str	r0, [r4, #0]
 800e668:	6061      	str	r1, [r4, #4]
 800e66a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,11,15,18");
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3304      	adds	r3, #4
 800e670:	4a70      	ldr	r2, [pc, #448]	; (800e834 <problem_fetch+0xd14c>)
 800e672:	461c      	mov	r4, r3
 800e674:	4613      	mov	r3, r2
 800e676:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e678:	6020      	str	r0, [r4, #0]
 800e67a:	6061      	str	r1, [r4, #4]
 800e67c:	60a2      	str	r2, [r4, #8]
 800e67e:	881a      	ldrh	r2, [r3, #0]
 800e680:	789b      	ldrb	r3, [r3, #2]
 800e682:	81a2      	strh	r2, [r4, #12]
 800e684:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e68c:	4a6a      	ldr	r2, [pc, #424]	; (800e838 <problem_fetch+0xd150>)
 800e68e:	461c      	mov	r4, r3
 800e690:	4613      	mov	r3, r2
 800e692:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e694:	6020      	str	r0, [r4, #0]
 800e696:	6061      	str	r1, [r4, #4]
 800e698:	60a2      	str	r2, [r4, #8]
			break;
 800e69a:	f00d bf55 	b.w	801c548 <problem_fetch+0x1ae60>
		case 377 :
			strcpy(p->name,"BITE YOUR NAILS");
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e6a4:	4a65      	ldr	r2, [pc, #404]	; (800e83c <problem_fetch+0xd154>)
 800e6a6:	461c      	mov	r4, r3
 800e6a8:	4615      	mov	r5, r2
 800e6aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e6ac:	6020      	str	r0, [r4, #0]
 800e6ae:	6061      	str	r1, [r4, #4]
 800e6b0:	60a2      	str	r2, [r4, #8]
 800e6b2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e6ba:	4a61      	ldr	r2, [pc, #388]	; (800e840 <problem_fetch+0xd158>)
 800e6bc:	8811      	ldrh	r1, [r2, #0]
 800e6be:	7892      	ldrb	r2, [r2, #2]
 800e6c0:	8019      	strh	r1, [r3, #0]
 800e6c2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2206      	movs	r2, #6
 800e6c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,E,C,E,D");
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	33a4      	adds	r3, #164	; 0xa4
 800e6ce:	4a5d      	ldr	r2, [pc, #372]	; (800e844 <problem_fetch+0xd15c>)
 800e6d0:	461c      	mov	r4, r3
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6d6:	6020      	str	r0, [r4, #0]
 800e6d8:	6061      	str	r1, [r4, #4]
 800e6da:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,13,16,18");
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	3304      	adds	r3, #4
 800e6e0:	4a59      	ldr	r2, [pc, #356]	; (800e848 <problem_fetch+0xd160>)
 800e6e2:	461c      	mov	r4, r3
 800e6e4:	4613      	mov	r3, r2
 800e6e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e6e8:	6020      	str	r0, [r4, #0]
 800e6ea:	6061      	str	r1, [r4, #4]
 800e6ec:	60a2      	str	r2, [r4, #8]
 800e6ee:	881a      	ldrh	r2, [r3, #0]
 800e6f0:	789b      	ldrb	r3, [r3, #2]
 800e6f2:	81a2      	strh	r2, [r4, #12]
 800e6f4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e6fc:	4a53      	ldr	r2, [pc, #332]	; (800e84c <problem_fetch+0xd164>)
 800e6fe:	461c      	mov	r4, r3
 800e700:	4613      	mov	r3, r2
 800e702:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e704:	6020      	str	r0, [r4, #0]
 800e706:	6061      	str	r1, [r4, #4]
 800e708:	60a2      	str	r2, [r4, #8]
			break;
 800e70a:	f00d bf1d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 378 :
			strcpy(p->name,"BIT OF SIDE");
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e714:	4a4e      	ldr	r2, [pc, #312]	; (800e850 <problem_fetch+0xd168>)
 800e716:	461c      	mov	r4, r3
 800e718:	4613      	mov	r3, r2
 800e71a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e71c:	6020      	str	r0, [r4, #0]
 800e71e:	6061      	str	r1, [r4, #4]
 800e720:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e728:	4a33      	ldr	r2, [pc, #204]	; (800e7f8 <problem_fetch+0xd110>)
 800e72a:	6810      	ldr	r0, [r2, #0]
 800e72c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2206      	movs	r2, #6
 800e732:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,A");
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	33a4      	adds	r3, #164	; 0xa4
 800e738:	4a46      	ldr	r2, [pc, #280]	; (800e854 <problem_fetch+0xd16c>)
 800e73a:	461c      	mov	r4, r3
 800e73c:	4613      	mov	r3, r2
 800e73e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e740:	6020      	str	r0, [r4, #0]
 800e742:	6061      	str	r1, [r4, #4]
 800e744:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	3304      	adds	r3, #4
 800e74a:	4a43      	ldr	r2, [pc, #268]	; (800e858 <problem_fetch+0xd170>)
 800e74c:	461c      	mov	r4, r3
 800e74e:	4615      	mov	r5, r2
 800e750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e752:	6020      	str	r0, [r4, #0]
 800e754:	6061      	str	r1, [r4, #4]
 800e756:	60a2      	str	r2, [r4, #8]
 800e758:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e760:	4a3a      	ldr	r2, [pc, #232]	; (800e84c <problem_fetch+0xd164>)
 800e762:	461c      	mov	r4, r3
 800e764:	4613      	mov	r3, r2
 800e766:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e768:	6020      	str	r0, [r4, #0]
 800e76a:	6061      	str	r1, [r4, #4]
 800e76c:	60a2      	str	r2, [r4, #8]
			break;
 800e76e:	f00d beeb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 379 :
			strcpy(p->name,"LIZARD 3");
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e778:	4938      	ldr	r1, [pc, #224]	; (800e85c <problem_fetch+0xd174>)
 800e77a:	461a      	mov	r2, r3
 800e77c:	460b      	mov	r3, r1
 800e77e:	cb03      	ldmia	r3!, {r0, r1}
 800e780:	6010      	str	r0, [r2, #0]
 800e782:	6051      	str	r1, [r2, #4]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e78e:	4a34      	ldr	r2, [pc, #208]	; (800e860 <problem_fetch+0xd178>)
 800e790:	6810      	ldr	r0, [r2, #0]
 800e792:	6018      	str	r0, [r3, #0]
			p->moveSize = 12;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	220c      	movs	r2, #12
 800e798:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,J,I,H,F,E,C,D,B,A,A");
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	33a4      	adds	r3, #164	; 0xa4
 800e79e:	4a31      	ldr	r2, [pc, #196]	; (800e864 <problem_fetch+0xd17c>)
 800e7a0:	461d      	mov	r5, r3
 800e7a2:	4614      	mov	r4, r2
 800e7a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7a6:	6028      	str	r0, [r5, #0]
 800e7a8:	6069      	str	r1, [r5, #4]
 800e7aa:	60aa      	str	r2, [r5, #8]
 800e7ac:	60eb      	str	r3, [r5, #12]
 800e7ae:	cc03      	ldmia	r4!, {r0, r1}
 800e7b0:	6128      	str	r0, [r5, #16]
 800e7b2:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"4,5,5,10,10,11,12,13,15,15,9,18");
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	4a2b      	ldr	r2, [pc, #172]	; (800e868 <problem_fetch+0xd180>)
 800e7ba:	461c      	mov	r4, r3
 800e7bc:	4615      	mov	r5, r2
 800e7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7c0:	6020      	str	r0, [r4, #0]
 800e7c2:	6061      	str	r1, [r4, #4]
 800e7c4:	60a2      	str	r2, [r4, #8]
 800e7c6:	60e3      	str	r3, [r4, #12]
 800e7c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7ca:	6120      	str	r0, [r4, #16]
 800e7cc:	6161      	str	r1, [r4, #20]
 800e7ce:	61a2      	str	r2, [r4, #24]
 800e7d0:	61e3      	str	r3, [r4, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,e");
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e7d8:	4a24      	ldr	r2, [pc, #144]	; (800e86c <problem_fetch+0xd184>)
 800e7da:	461d      	mov	r5, r3
 800e7dc:	4614      	mov	r4, r2
 800e7de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7e0:	6028      	str	r0, [r5, #0]
 800e7e2:	6069      	str	r1, [r5, #4]
 800e7e4:	60aa      	str	r2, [r5, #8]
 800e7e6:	60eb      	str	r3, [r5, #12]
 800e7e8:	cc03      	ldmia	r4!, {r0, r1}
 800e7ea:	6128      	str	r0, [r5, #16]
 800e7ec:	6169      	str	r1, [r5, #20]
			break;
 800e7ee:	f00d beab 	b.w	801c548 <problem_fetch+0x1ae60>
 800e7f2:	bf00      	nop
 800e7f4:	08028268 	.word	0x08028268
 800e7f8:	0802395c 	.word	0x0802395c
 800e7fc:	0802827c 	.word	0x0802827c
 800e800:	0802828c 	.word	0x0802828c
 800e804:	080239d4 	.word	0x080239d4
 800e808:	080282a0 	.word	0x080282a0
 800e80c:	08024190 	.word	0x08024190
 800e810:	080282a8 	.word	0x080282a8
 800e814:	080278e8 	.word	0x080278e8
 800e818:	08023ab0 	.word	0x08023ab0
 800e81c:	080282b0 	.word	0x080282b0
 800e820:	080282b4 	.word	0x080282b4
 800e824:	080282c4 	.word	0x080282c4
 800e828:	080282d8 	.word	0x080282d8
 800e82c:	08023afc 	.word	0x08023afc
 800e830:	080282e8 	.word	0x080282e8
 800e834:	080282f4 	.word	0x080282f4
 800e838:	08023cf8 	.word	0x08023cf8
 800e83c:	08028304 	.word	0x08028304
 800e840:	08024054 	.word	0x08024054
 800e844:	08028314 	.word	0x08028314
 800e848:	08028320 	.word	0x08028320
 800e84c:	0802393c 	.word	0x0802393c
 800e850:	08028330 	.word	0x08028330
 800e854:	0802833c 	.word	0x0802833c
 800e858:	08028348 	.word	0x08028348
 800e85c:	08028358 	.word	0x08028358
 800e860:	080239f4 	.word	0x080239f4
 800e864:	08028364 	.word	0x08028364
 800e868:	0802837c 	.word	0x0802837c
 800e86c:	0802839c 	.word	0x0802839c
		case 380 :
			strcpy(p->name,"MOLOTOV COCKTEASE");
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e876:	4aab      	ldr	r2, [pc, #684]	; (800eb24 <problem_fetch+0xd43c>)
 800e878:	461d      	mov	r5, r3
 800e87a:	4614      	mov	r4, r2
 800e87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e87e:	6028      	str	r0, [r5, #0]
 800e880:	6069      	str	r1, [r5, #4]
 800e882:	60aa      	str	r2, [r5, #8]
 800e884:	60eb      	str	r3, [r5, #12]
 800e886:	8823      	ldrh	r3, [r4, #0]
 800e888:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C+");
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e890:	4aa5      	ldr	r2, [pc, #660]	; (800eb28 <problem_fetch+0xd440>)
 800e892:	6810      	ldr	r0, [r2, #0]
 800e894:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2206      	movs	r2, #6
 800e89a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,G,K,I");
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	33a4      	adds	r3, #164	; 0xa4
 800e8a0:	4aa2      	ldr	r2, [pc, #648]	; (800eb2c <problem_fetch+0xd444>)
 800e8a2:	461c      	mov	r4, r3
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8a8:	6020      	str	r0, [r4, #0]
 800e8aa:	6061      	str	r1, [r4, #4]
 800e8ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,7,14,14,18");
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	4a9f      	ldr	r2, [pc, #636]	; (800eb30 <problem_fetch+0xd448>)
 800e8b4:	461c      	mov	r4, r3
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8ba:	6020      	str	r0, [r4, #0]
 800e8bc:	6061      	str	r1, [r4, #4]
 800e8be:	60a2      	str	r2, [r4, #8]
 800e8c0:	881a      	ldrh	r2, [r3, #0]
 800e8c2:	789b      	ldrb	r3, [r3, #2]
 800e8c4:	81a2      	strh	r2, [r4, #12]
 800e8c6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e8ce:	4a99      	ldr	r2, [pc, #612]	; (800eb34 <problem_fetch+0xd44c>)
 800e8d0:	461c      	mov	r4, r3
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e8d6:	6020      	str	r0, [r4, #0]
 800e8d8:	6061      	str	r1, [r4, #4]
 800e8da:	60a2      	str	r2, [r4, #8]
			break;
 800e8dc:	f00d be34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 381 :
			strcpy(p->name,"BIROBIDJAN");
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e8e6:	4994      	ldr	r1, [pc, #592]	; (800eb38 <problem_fetch+0xd450>)
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	cb03      	ldmia	r3!, {r0, r1}
 800e8ee:	6010      	str	r0, [r2, #0]
 800e8f0:	6051      	str	r1, [r2, #4]
 800e8f2:	8819      	ldrh	r1, [r3, #0]
 800e8f4:	789b      	ldrb	r3, [r3, #2]
 800e8f6:	8111      	strh	r1, [r2, #8]
 800e8f8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e900:	4a8e      	ldr	r2, [pc, #568]	; (800eb3c <problem_fetch+0xd454>)
 800e902:	6810      	ldr	r0, [r2, #0]
 800e904:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2206      	movs	r2, #6
 800e90a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,A");
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	33a4      	adds	r3, #164	; 0xa4
 800e910:	4a8b      	ldr	r2, [pc, #556]	; (800eb40 <problem_fetch+0xd458>)
 800e912:	461c      	mov	r4, r3
 800e914:	4613      	mov	r3, r2
 800e916:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e918:	6020      	str	r0, [r4, #0]
 800e91a:	6061      	str	r1, [r4, #4]
 800e91c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3304      	adds	r3, #4
 800e922:	4a88      	ldr	r2, [pc, #544]	; (800eb44 <problem_fetch+0xd45c>)
 800e924:	461c      	mov	r4, r3
 800e926:	4613      	mov	r3, r2
 800e928:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e92a:	6020      	str	r0, [r4, #0]
 800e92c:	6061      	str	r1, [r4, #4]
 800e92e:	60a2      	str	r2, [r4, #8]
 800e930:	881a      	ldrh	r2, [r3, #0]
 800e932:	789b      	ldrb	r3, [r3, #2]
 800e934:	81a2      	strh	r2, [r4, #12]
 800e936:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e93e:	4a7d      	ldr	r2, [pc, #500]	; (800eb34 <problem_fetch+0xd44c>)
 800e940:	461c      	mov	r4, r3
 800e942:	4613      	mov	r3, r2
 800e944:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e946:	6020      	str	r0, [r4, #0]
 800e948:	6061      	str	r1, [r4, #4]
 800e94a:	60a2      	str	r2, [r4, #8]
			break;
 800e94c:	f00d bdfc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 382 :
			strcpy(p->name,"BLACK PANTHER");
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e956:	4a7c      	ldr	r2, [pc, #496]	; (800eb48 <problem_fetch+0xd460>)
 800e958:	461c      	mov	r4, r3
 800e95a:	4613      	mov	r3, r2
 800e95c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e95e:	6020      	str	r0, [r4, #0]
 800e960:	6061      	str	r1, [r4, #4]
 800e962:	60a2      	str	r2, [r4, #8]
 800e964:	881b      	ldrh	r3, [r3, #0]
 800e966:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800e96e:	4a77      	ldr	r2, [pc, #476]	; (800eb4c <problem_fetch+0xd464>)
 800e970:	6810      	ldr	r0, [r2, #0]
 800e972:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	220d      	movs	r2, #13
 800e978:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,G,C,B,H,C,D,D,F,G,A");
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	33a4      	adds	r3, #164	; 0xa4
 800e97e:	4a74      	ldr	r2, [pc, #464]	; (800eb50 <problem_fetch+0xd468>)
 800e980:	461d      	mov	r5, r3
 800e982:	4614      	mov	r4, r2
 800e984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e986:	6028      	str	r0, [r5, #0]
 800e988:	6069      	str	r1, [r5, #4]
 800e98a:	60aa      	str	r2, [r5, #8]
 800e98c:	60eb      	str	r3, [r5, #12]
 800e98e:	cc03      	ldmia	r4!, {r0, r1}
 800e990:	6128      	str	r0, [r5, #16]
 800e992:	6169      	str	r1, [r5, #20]
 800e994:	8823      	ldrh	r3, [r4, #0]
 800e996:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,16,15,8,13,11,15,11,6,18");
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	3304      	adds	r3, #4
 800e99c:	4a6d      	ldr	r2, [pc, #436]	; (800eb54 <problem_fetch+0xd46c>)
 800e99e:	4614      	mov	r4, r2
 800e9a0:	469c      	mov	ip, r3
 800e9a2:	f104 0e20 	add.w	lr, r4, #32
 800e9a6:	4665      	mov	r5, ip
 800e9a8:	4626      	mov	r6, r4
 800e9aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e9ac:	6028      	str	r0, [r5, #0]
 800e9ae:	6069      	str	r1, [r5, #4]
 800e9b0:	60aa      	str	r2, [r5, #8]
 800e9b2:	60eb      	str	r3, [r5, #12]
 800e9b4:	3410      	adds	r4, #16
 800e9b6:	f10c 0c10 	add.w	ip, ip, #16
 800e9ba:	4574      	cmp	r4, lr
 800e9bc:	d1f3      	bne.n	800e9a6 <problem_fetch+0xd2be>
 800e9be:	4663      	mov	r3, ip
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	7812      	ldrb	r2, [r2, #0]
 800e9c4:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800e9cc:	4a62      	ldr	r2, [pc, #392]	; (800eb58 <problem_fetch+0xd470>)
 800e9ce:	461d      	mov	r5, r3
 800e9d0:	4614      	mov	r4, r2
 800e9d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9d4:	6028      	str	r0, [r5, #0]
 800e9d6:	6069      	str	r1, [r5, #4]
 800e9d8:	60aa      	str	r2, [r5, #8]
 800e9da:	60eb      	str	r3, [r5, #12]
 800e9dc:	cc03      	ldmia	r4!, {r0, r1}
 800e9de:	6128      	str	r0, [r5, #16]
 800e9e0:	6169      	str	r1, [r5, #20]
 800e9e2:	8823      	ldrh	r3, [r4, #0]
 800e9e4:	832b      	strh	r3, [r5, #24]
			break;
 800e9e6:	f00d bdaf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 383 :
			strcpy(p->name,"HOLE IN FOUR");
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e9f0:	4a5a      	ldr	r2, [pc, #360]	; (800eb5c <problem_fetch+0xd474>)
 800e9f2:	461c      	mov	r4, r3
 800e9f4:	4613      	mov	r3, r2
 800e9f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9f8:	6020      	str	r0, [r4, #0]
 800e9fa:	6061      	str	r1, [r4, #4]
 800e9fc:	60a2      	str	r2, [r4, #8]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ea08:	4a55      	ldr	r2, [pc, #340]	; (800eb60 <problem_fetch+0xd478>)
 800ea0a:	6810      	ldr	r0, [r2, #0]
 800ea0c:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2205      	movs	r2, #5
 800ea12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,B,D,A");
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	33a4      	adds	r3, #164	; 0xa4
 800ea18:	4952      	ldr	r1, [pc, #328]	; (800eb64 <problem_fetch+0xd47c>)
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	cb03      	ldmia	r3!, {r0, r1}
 800ea20:	6010      	str	r0, [r2, #0]
 800ea22:	6051      	str	r1, [r2, #4]
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	4a4e      	ldr	r2, [pc, #312]	; (800eb68 <problem_fetch+0xd480>)
 800ea2e:	461c      	mov	r4, r3
 800ea30:	4613      	mov	r3, r2
 800ea32:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea34:	6020      	str	r0, [r4, #0]
 800ea36:	6061      	str	r1, [r4, #4]
 800ea38:	60a2      	str	r2, [r4, #8]
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ea44:	4949      	ldr	r1, [pc, #292]	; (800eb6c <problem_fetch+0xd484>)
 800ea46:	461a      	mov	r2, r3
 800ea48:	460b      	mov	r3, r1
 800ea4a:	cb03      	ldmia	r3!, {r0, r1}
 800ea4c:	6010      	str	r0, [r2, #0]
 800ea4e:	6051      	str	r1, [r2, #4]
 800ea50:	881b      	ldrh	r3, [r3, #0]
 800ea52:	8113      	strh	r3, [r2, #8]
			break;
 800ea54:	f00d bd78 	b.w	801c548 <problem_fetch+0x1ae60>
		case 384 :
			strcpy(p->name,"POLARIS");
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ea5e:	4944      	ldr	r1, [pc, #272]	; (800eb70 <problem_fetch+0xd488>)
 800ea60:	461a      	mov	r2, r3
 800ea62:	460b      	mov	r3, r1
 800ea64:	cb03      	ldmia	r3!, {r0, r1}
 800ea66:	6010      	str	r0, [r2, #0]
 800ea68:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ea70:	4a3b      	ldr	r2, [pc, #236]	; (800eb60 <problem_fetch+0xd478>)
 800ea72:	6810      	ldr	r0, [r2, #0]
 800ea74:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2206      	movs	r2, #6
 800ea7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D");
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	33a4      	adds	r3, #164	; 0xa4
 800ea80:	4a3c      	ldr	r2, [pc, #240]	; (800eb74 <problem_fetch+0xd48c>)
 800ea82:	461c      	mov	r4, r3
 800ea84:	4613      	mov	r3, r2
 800ea86:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea88:	6020      	str	r0, [r4, #0]
 800ea8a:	6061      	str	r1, [r4, #4]
 800ea8c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,14,18");
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3304      	adds	r3, #4
 800ea92:	4a39      	ldr	r2, [pc, #228]	; (800eb78 <problem_fetch+0xd490>)
 800ea94:	461c      	mov	r4, r3
 800ea96:	4613      	mov	r3, r2
 800ea98:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea9a:	6020      	str	r0, [r4, #0]
 800ea9c:	6061      	str	r1, [r4, #4]
 800ea9e:	60a2      	str	r2, [r4, #8]
 800eaa0:	881a      	ldrh	r2, [r3, #0]
 800eaa2:	789b      	ldrb	r3, [r3, #2]
 800eaa4:	81a2      	strh	r2, [r4, #12]
 800eaa6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800eaae:	4a21      	ldr	r2, [pc, #132]	; (800eb34 <problem_fetch+0xd44c>)
 800eab0:	461c      	mov	r4, r3
 800eab2:	4613      	mov	r3, r2
 800eab4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eab6:	6020      	str	r0, [r4, #0]
 800eab8:	6061      	str	r1, [r4, #4]
 800eaba:	60a2      	str	r2, [r4, #8]
			break;
 800eabc:	f00d bd44 	b.w	801c548 <problem_fetch+0x1ae60>
		case 385 :
			strcpy(p->name,"REACHY");
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eac6:	4a2d      	ldr	r2, [pc, #180]	; (800eb7c <problem_fetch+0xd494>)
 800eac8:	6810      	ldr	r0, [r2, #0]
 800eaca:	6018      	str	r0, [r3, #0]
 800eacc:	8891      	ldrh	r1, [r2, #4]
 800eace:	7992      	ldrb	r2, [r2, #6]
 800ead0:	8099      	strh	r1, [r3, #4]
 800ead2:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eada:	4a1c      	ldr	r2, [pc, #112]	; (800eb4c <problem_fetch+0xd464>)
 800eadc:	6810      	ldr	r0, [r2, #0]
 800eade:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2206      	movs	r2, #6
 800eae4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,D,D,A");
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	33a4      	adds	r3, #164	; 0xa4
 800eaea:	4a25      	ldr	r2, [pc, #148]	; (800eb80 <problem_fetch+0xd498>)
 800eaec:	461c      	mov	r4, r3
 800eaee:	4613      	mov	r3, r2
 800eaf0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eaf2:	6020      	str	r0, [r4, #0]
 800eaf4:	6061      	str	r1, [r4, #4]
 800eaf6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,11,15,18");
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4a21      	ldr	r2, [pc, #132]	; (800eb84 <problem_fetch+0xd49c>)
 800eafe:	461c      	mov	r4, r3
 800eb00:	4615      	mov	r5, r2
 800eb02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb04:	6020      	str	r0, [r4, #0]
 800eb06:	6061      	str	r1, [r4, #4]
 800eb08:	60a2      	str	r2, [r4, #8]
 800eb0a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800eb12:	4a1d      	ldr	r2, [pc, #116]	; (800eb88 <problem_fetch+0xd4a0>)
 800eb14:	461c      	mov	r4, r3
 800eb16:	4613      	mov	r3, r2
 800eb18:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eb1a:	6020      	str	r0, [r4, #0]
 800eb1c:	6061      	str	r1, [r4, #4]
 800eb1e:	60a2      	str	r2, [r4, #8]
			break;
 800eb20:	f00d bd12 	b.w	801c548 <problem_fetch+0x1ae60>
 800eb24:	080283b4 	.word	0x080283b4
 800eb28:	08023f68 	.word	0x08023f68
 800eb2c:	080283c8 	.word	0x080283c8
 800eb30:	080283d4 	.word	0x080283d4
 800eb34:	08023cf8 	.word	0x08023cf8
 800eb38:	080283e4 	.word	0x080283e4
 800eb3c:	080239f4 	.word	0x080239f4
 800eb40:	080283f0 	.word	0x080283f0
 800eb44:	080283fc 	.word	0x080283fc
 800eb48:	0802840c 	.word	0x0802840c
 800eb4c:	0802395c 	.word	0x0802395c
 800eb50:	0802841c 	.word	0x0802841c
 800eb54:	08028438 	.word	0x08028438
 800eb58:	0802845c 	.word	0x0802845c
 800eb5c:	08028478 	.word	0x08028478
 800eb60:	08023afc 	.word	0x08023afc
 800eb64:	08028488 	.word	0x08028488
 800eb68:	08028494 	.word	0x08028494
 800eb6c:	08023e28 	.word	0x08023e28
 800eb70:	080284a4 	.word	0x080284a4
 800eb74:	080284ac 	.word	0x080284ac
 800eb78:	080284b8 	.word	0x080284b8
 800eb7c:	080284c8 	.word	0x080284c8
 800eb80:	080284d0 	.word	0x080284d0
 800eb84:	080284dc 	.word	0x080284dc
 800eb88:	0802393c 	.word	0x0802393c
		case 386 :
			strcpy(p->name,"JUST JUMP AND PINCH");
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eb92:	4ab7      	ldr	r2, [pc, #732]	; (800ee70 <problem_fetch+0xd788>)
 800eb94:	461d      	mov	r5, r3
 800eb96:	4614      	mov	r4, r2
 800eb98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb9a:	6028      	str	r0, [r5, #0]
 800eb9c:	6069      	str	r1, [r5, #4]
 800eb9e:	60aa      	str	r2, [r5, #8]
 800eba0:	60eb      	str	r3, [r5, #12]
 800eba2:	6820      	ldr	r0, [r4, #0]
 800eba4:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ebac:	4ab1      	ldr	r2, [pc, #708]	; (800ee74 <problem_fetch+0xd78c>)
 800ebae:	6810      	ldr	r0, [r2, #0]
 800ebb0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2205      	movs	r2, #5
 800ebb6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,A,D");
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	33a4      	adds	r3, #164	; 0xa4
 800ebbc:	49ae      	ldr	r1, [pc, #696]	; (800ee78 <problem_fetch+0xd790>)
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	cb03      	ldmia	r3!, {r0, r1}
 800ebc4:	6010      	str	r0, [r2, #0]
 800ebc6:	6051      	str	r1, [r2, #4]
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,14,18");
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	3304      	adds	r3, #4
 800ebd0:	4aaa      	ldr	r2, [pc, #680]	; (800ee7c <problem_fetch+0xd794>)
 800ebd2:	461c      	mov	r4, r3
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ebd8:	6020      	str	r0, [r4, #0]
 800ebda:	6061      	str	r1, [r4, #4]
 800ebdc:	60a2      	str	r2, [r4, #8]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ebe8:	49a5      	ldr	r1, [pc, #660]	; (800ee80 <problem_fetch+0xd798>)
 800ebea:	461a      	mov	r2, r3
 800ebec:	460b      	mov	r3, r1
 800ebee:	cb03      	ldmia	r3!, {r0, r1}
 800ebf0:	6010      	str	r0, [r2, #0]
 800ebf2:	6051      	str	r1, [r2, #4]
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	8113      	strh	r3, [r2, #8]
			break;
 800ebf8:	f00d bca6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 387 :
			strcpy(p->name,"JUMP MAN");
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec02:	49a0      	ldr	r1, [pc, #640]	; (800ee84 <problem_fetch+0xd79c>)
 800ec04:	461a      	mov	r2, r3
 800ec06:	460b      	mov	r3, r1
 800ec08:	cb03      	ldmia	r3!, {r0, r1}
 800ec0a:	6010      	str	r0, [r2, #0]
 800ec0c:	6051      	str	r1, [r2, #4]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ec18:	4a96      	ldr	r2, [pc, #600]	; (800ee74 <problem_fetch+0xd78c>)
 800ec1a:	6810      	ldr	r0, [r2, #0]
 800ec1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2206      	movs	r2, #6
 800ec22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,D,D");
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	33a4      	adds	r3, #164	; 0xa4
 800ec28:	4a97      	ldr	r2, [pc, #604]	; (800ee88 <problem_fetch+0xd7a0>)
 800ec2a:	461c      	mov	r4, r3
 800ec2c:	4613      	mov	r3, r2
 800ec2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec30:	6020      	str	r0, [r4, #0]
 800ec32:	6061      	str	r1, [r4, #4]
 800ec34:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,9,15,15,18");
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	3304      	adds	r3, #4
 800ec3a:	4a94      	ldr	r2, [pc, #592]	; (800ee8c <problem_fetch+0xd7a4>)
 800ec3c:	461c      	mov	r4, r3
 800ec3e:	4615      	mov	r5, r2
 800ec40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec42:	6020      	str	r0, [r4, #0]
 800ec44:	6061      	str	r1, [r4, #4]
 800ec46:	60a2      	str	r2, [r4, #8]
 800ec48:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ec50:	4a8f      	ldr	r2, [pc, #572]	; (800ee90 <problem_fetch+0xd7a8>)
 800ec52:	461c      	mov	r4, r3
 800ec54:	4613      	mov	r3, r2
 800ec56:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec58:	6020      	str	r0, [r4, #0]
 800ec5a:	6061      	str	r1, [r4, #4]
 800ec5c:	60a2      	str	r2, [r4, #8]
			break;
 800ec5e:	f00d bc73 	b.w	801c548 <problem_fetch+0x1ae60>
		case 388 :
			strcpy(p->name,"BAMBA");
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ec68:	4a8a      	ldr	r2, [pc, #552]	; (800ee94 <problem_fetch+0xd7ac>)
 800ec6a:	6810      	ldr	r0, [r2, #0]
 800ec6c:	6018      	str	r0, [r3, #0]
 800ec6e:	8892      	ldrh	r2, [r2, #4]
 800ec70:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ec78:	4a87      	ldr	r2, [pc, #540]	; (800ee98 <problem_fetch+0xd7b0>)
 800ec7a:	8811      	ldrh	r1, [r2, #0]
 800ec7c:	7892      	ldrb	r2, [r2, #2]
 800ec7e:	8019      	strh	r1, [r3, #0]
 800ec80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2205      	movs	r2, #5
 800ec86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,E,D");
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	33a4      	adds	r3, #164	; 0xa4
 800ec8c:	4983      	ldr	r1, [pc, #524]	; (800ee9c <problem_fetch+0xd7b4>)
 800ec8e:	461a      	mov	r2, r3
 800ec90:	460b      	mov	r3, r1
 800ec92:	cb03      	ldmia	r3!, {r0, r1}
 800ec94:	6010      	str	r0, [r2, #0]
 800ec96:	6051      	str	r1, [r2, #4]
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,16,18");
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	4a7f      	ldr	r2, [pc, #508]	; (800eea0 <problem_fetch+0xd7b8>)
 800eca2:	461c      	mov	r4, r3
 800eca4:	4613      	mov	r3, r2
 800eca6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800eca8:	6020      	str	r0, [r4, #0]
 800ecaa:	6061      	str	r1, [r4, #4]
 800ecac:	60a2      	str	r2, [r4, #8]
 800ecae:	881b      	ldrh	r3, [r3, #0]
 800ecb0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ecb8:	497a      	ldr	r1, [pc, #488]	; (800eea4 <problem_fetch+0xd7bc>)
 800ecba:	461a      	mov	r2, r3
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	cb03      	ldmia	r3!, {r0, r1}
 800ecc0:	6010      	str	r0, [r2, #0]
 800ecc2:	6051      	str	r1, [r2, #4]
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	8113      	strh	r3, [r2, #8]
			break;
 800ecc8:	f00d bc3e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 389 :
			strcpy(p->name,"BO");
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ecd2:	4a75      	ldr	r2, [pc, #468]	; (800eea8 <problem_fetch+0xd7c0>)
 800ecd4:	8811      	ldrh	r1, [r2, #0]
 800ecd6:	7892      	ldrb	r2, [r2, #2]
 800ecd8:	8019      	strh	r1, [r3, #0]
 800ecda:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6C+");
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ece2:	4a72      	ldr	r2, [pc, #456]	; (800eeac <problem_fetch+0xd7c4>)
 800ece4:	6810      	ldr	r0, [r2, #0]
 800ece6:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2204      	movs	r2, #4
 800ecec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,I");
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	33a4      	adds	r3, #164	; 0xa4
 800ecf2:	496f      	ldr	r1, [pc, #444]	; (800eeb0 <problem_fetch+0xd7c8>)
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	cb03      	ldmia	r3!, {r0, r1}
 800ecfa:	6010      	str	r0, [r2, #0]
 800ecfc:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	3304      	adds	r3, #4
 800ed02:	496c      	ldr	r1, [pc, #432]	; (800eeb4 <problem_fetch+0xd7cc>)
 800ed04:	461a      	mov	r2, r3
 800ed06:	460b      	mov	r3, r1
 800ed08:	cb03      	ldmia	r3!, {r0, r1}
 800ed0a:	6010      	str	r0, [r2, #0]
 800ed0c:	6051      	str	r1, [r2, #4]
 800ed0e:	8819      	ldrh	r1, [r3, #0]
 800ed10:	789b      	ldrb	r3, [r3, #2]
 800ed12:	8111      	strh	r1, [r2, #8]
 800ed14:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ed1c:	4966      	ldr	r1, [pc, #408]	; (800eeb8 <problem_fetch+0xd7d0>)
 800ed1e:	461a      	mov	r2, r3
 800ed20:	460b      	mov	r3, r1
 800ed22:	cb03      	ldmia	r3!, {r0, r1}
 800ed24:	6010      	str	r0, [r2, #0]
 800ed26:	6051      	str	r1, [r2, #4]
			break;
 800ed28:	f00d bc0e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 390 :
			strcpy(p->name,"REACH FOR THE SKY");
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ed32:	4a62      	ldr	r2, [pc, #392]	; (800eebc <problem_fetch+0xd7d4>)
 800ed34:	461d      	mov	r5, r3
 800ed36:	4614      	mov	r4, r2
 800ed38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed3a:	6028      	str	r0, [r5, #0]
 800ed3c:	6069      	str	r1, [r5, #4]
 800ed3e:	60aa      	str	r2, [r5, #8]
 800ed40:	60eb      	str	r3, [r5, #12]
 800ed42:	8823      	ldrh	r3, [r4, #0]
 800ed44:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ed4c:	4a5c      	ldr	r2, [pc, #368]	; (800eec0 <problem_fetch+0xd7d8>)
 800ed4e:	8811      	ldrh	r1, [r2, #0]
 800ed50:	7892      	ldrb	r2, [r2, #2]
 800ed52:	8019      	strh	r1, [r3, #0]
 800ed54:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2205      	movs	r2, #5
 800ed5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,D");
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	33a4      	adds	r3, #164	; 0xa4
 800ed60:	4958      	ldr	r1, [pc, #352]	; (800eec4 <problem_fetch+0xd7dc>)
 800ed62:	461a      	mov	r2, r3
 800ed64:	460b      	mov	r3, r1
 800ed66:	cb03      	ldmia	r3!, {r0, r1}
 800ed68:	6010      	str	r0, [r2, #0]
 800ed6a:	6051      	str	r1, [r2, #4]
 800ed6c:	881b      	ldrh	r3, [r3, #0]
 800ed6e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,13,18");
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	3304      	adds	r3, #4
 800ed74:	4a54      	ldr	r2, [pc, #336]	; (800eec8 <problem_fetch+0xd7e0>)
 800ed76:	461c      	mov	r4, r3
 800ed78:	4613      	mov	r3, r2
 800ed7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ed7c:	6020      	str	r0, [r4, #0]
 800ed7e:	6061      	str	r1, [r4, #4]
 800ed80:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ed88:	4946      	ldr	r1, [pc, #280]	; (800eea4 <problem_fetch+0xd7bc>)
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	cb03      	ldmia	r3!, {r0, r1}
 800ed90:	6010      	str	r0, [r2, #0]
 800ed92:	6051      	str	r1, [r2, #4]
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	8113      	strh	r3, [r2, #8]
			break;
 800ed98:	f00d bbd6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 391 :
			strcpy(p->name,"CHIVAS");
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eda2:	4a4a      	ldr	r2, [pc, #296]	; (800eecc <problem_fetch+0xd7e4>)
 800eda4:	6810      	ldr	r0, [r2, #0]
 800eda6:	6018      	str	r0, [r3, #0]
 800eda8:	8891      	ldrh	r1, [r2, #4]
 800edaa:	7992      	ldrb	r2, [r2, #6]
 800edac:	8099      	strh	r1, [r3, #4]
 800edae:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B");
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800edb6:	4a46      	ldr	r2, [pc, #280]	; (800eed0 <problem_fetch+0xd7e8>)
 800edb8:	8811      	ldrh	r1, [r2, #0]
 800edba:	7892      	ldrb	r2, [r2, #2]
 800edbc:	8019      	strh	r1, [r3, #0]
 800edbe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2204      	movs	r2, #4
 800edc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,A,A");
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	33a4      	adds	r3, #164	; 0xa4
 800edca:	4942      	ldr	r1, [pc, #264]	; (800eed4 <problem_fetch+0xd7ec>)
 800edcc:	461a      	mov	r2, r3
 800edce:	460b      	mov	r3, r1
 800edd0:	cb03      	ldmia	r3!, {r0, r1}
 800edd2:	6010      	str	r0, [r2, #0]
 800edd4:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,14,18");
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	3304      	adds	r3, #4
 800edda:	493f      	ldr	r1, [pc, #252]	; (800eed8 <problem_fetch+0xd7f0>)
 800eddc:	461a      	mov	r2, r3
 800edde:	460b      	mov	r3, r1
 800ede0:	cb03      	ldmia	r3!, {r0, r1}
 800ede2:	6010      	str	r0, [r2, #0]
 800ede4:	6051      	str	r1, [r2, #4]
 800ede6:	8819      	ldrh	r1, [r3, #0]
 800ede8:	789b      	ldrb	r3, [r3, #2]
 800edea:	8111      	strh	r1, [r2, #8]
 800edec:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800edf4:	4930      	ldr	r1, [pc, #192]	; (800eeb8 <problem_fetch+0xd7d0>)
 800edf6:	461a      	mov	r2, r3
 800edf8:	460b      	mov	r3, r1
 800edfa:	cb03      	ldmia	r3!, {r0, r1}
 800edfc:	6010      	str	r0, [r2, #0]
 800edfe:	6051      	str	r1, [r2, #4]
			break;
 800ee00:	f00d bba2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 392 :
			strcpy(p->name,"SPAIN IN VAIN");
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ee0a:	4a34      	ldr	r2, [pc, #208]	; (800eedc <problem_fetch+0xd7f4>)
 800ee0c:	461c      	mov	r4, r3
 800ee0e:	4613      	mov	r3, r2
 800ee10:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee12:	6020      	str	r0, [r4, #0]
 800ee14:	6061      	str	r1, [r4, #4]
 800ee16:	60a2      	str	r2, [r4, #8]
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ee22:	4a27      	ldr	r2, [pc, #156]	; (800eec0 <problem_fetch+0xd7d8>)
 800ee24:	8811      	ldrh	r1, [r2, #0]
 800ee26:	7892      	ldrb	r2, [r2, #2]
 800ee28:	8019      	strh	r1, [r3, #0]
 800ee2a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2206      	movs	r2, #6
 800ee30:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,E,A,D");
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	33a4      	adds	r3, #164	; 0xa4
 800ee36:	4a2a      	ldr	r2, [pc, #168]	; (800eee0 <problem_fetch+0xd7f8>)
 800ee38:	461c      	mov	r4, r3
 800ee3a:	4613      	mov	r3, r2
 800ee3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee3e:	6020      	str	r0, [r4, #0]
 800ee40:	6061      	str	r1, [r4, #4]
 800ee42:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,12,14,18");
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4a26      	ldr	r2, [pc, #152]	; (800eee4 <problem_fetch+0xd7fc>)
 800ee4a:	461c      	mov	r4, r3
 800ee4c:	4615      	mov	r5, r2
 800ee4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee50:	6020      	str	r0, [r4, #0]
 800ee52:	6061      	str	r1, [r4, #4]
 800ee54:	60a2      	str	r2, [r4, #8]
 800ee56:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ee5e:	4a0c      	ldr	r2, [pc, #48]	; (800ee90 <problem_fetch+0xd7a8>)
 800ee60:	461c      	mov	r4, r3
 800ee62:	4613      	mov	r3, r2
 800ee64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ee66:	6020      	str	r0, [r4, #0]
 800ee68:	6061      	str	r1, [r4, #4]
 800ee6a:	60a2      	str	r2, [r4, #8]
			break;
 800ee6c:	f00d bb6c 	b.w	801c548 <problem_fetch+0x1ae60>
 800ee70:	080284ec 	.word	0x080284ec
 800ee74:	08023a98 	.word	0x08023a98
 800ee78:	08028500 	.word	0x08028500
 800ee7c:	08027804 	.word	0x08027804
 800ee80:	0802403c 	.word	0x0802403c
 800ee84:	0802850c 	.word	0x0802850c
 800ee88:	08028518 	.word	0x08028518
 800ee8c:	08028524 	.word	0x08028524
 800ee90:	08023cf8 	.word	0x08023cf8
 800ee94:	08028534 	.word	0x08028534
 800ee98:	08023a28 	.word	0x08023a28
 800ee9c:	0802853c 	.word	0x0802853c
 800eea0:	08028548 	.word	0x08028548
 800eea4:	08023e28 	.word	0x08023e28
 800eea8:	08028558 	.word	0x08028558
 800eeac:	080239f4 	.word	0x080239f4
 800eeb0:	0802855c 	.word	0x0802855c
 800eeb4:	08023aa4 	.word	0x08023aa4
 800eeb8:	08023ab0 	.word	0x08023ab0
 800eebc:	08028564 	.word	0x08028564
 800eec0:	0802391c 	.word	0x0802391c
 800eec4:	08028578 	.word	0x08028578
 800eec8:	08024758 	.word	0x08024758
 800eecc:	08028584 	.word	0x08028584
 800eed0:	08024054 	.word	0x08024054
 800eed4:	0802858c 	.word	0x0802858c
 800eed8:	080278e8 	.word	0x080278e8
 800eedc:	08028594 	.word	0x08028594
 800eee0:	080285a4 	.word	0x080285a4
 800eee4:	080285b0 	.word	0x080285b0
		case 393 :
			strcpy(p->name,"LE VOYAGE");
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800eeee:	49ac      	ldr	r1, [pc, #688]	; (800f1a0 <problem_fetch+0xdab8>)
 800eef0:	461a      	mov	r2, r3
 800eef2:	460b      	mov	r3, r1
 800eef4:	cb03      	ldmia	r3!, {r0, r1}
 800eef6:	6010      	str	r0, [r2, #0]
 800eef8:	6051      	str	r1, [r2, #4]
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef04:	4aa7      	ldr	r2, [pc, #668]	; (800f1a4 <problem_fetch+0xdabc>)
 800ef06:	8811      	ldrh	r1, [r2, #0]
 800ef08:	7892      	ldrb	r2, [r2, #2]
 800ef0a:	8019      	strh	r1, [r3, #0]
 800ef0c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2206      	movs	r2, #6
 800ef12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,A,C,D");
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	33a4      	adds	r3, #164	; 0xa4
 800ef18:	4aa3      	ldr	r2, [pc, #652]	; (800f1a8 <problem_fetch+0xdac0>)
 800ef1a:	461c      	mov	r4, r3
 800ef1c:	4613      	mov	r3, r2
 800ef1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef20:	6020      	str	r0, [r4, #0]
 800ef22:	6061      	str	r1, [r4, #4]
 800ef24:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,8,18");
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	4aa0      	ldr	r2, [pc, #640]	; (800f1ac <problem_fetch+0xdac4>)
 800ef2c:	461c      	mov	r4, r3
 800ef2e:	4613      	mov	r3, r2
 800ef30:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef32:	6020      	str	r0, [r4, #0]
 800ef34:	6061      	str	r1, [r4, #4]
 800ef36:	60a2      	str	r2, [r4, #8]
 800ef38:	881a      	ldrh	r2, [r3, #0]
 800ef3a:	789b      	ldrb	r3, [r3, #2]
 800ef3c:	81a2      	strh	r2, [r4, #12]
 800ef3e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ef46:	4a9a      	ldr	r2, [pc, #616]	; (800f1b0 <problem_fetch+0xdac8>)
 800ef48:	461c      	mov	r4, r3
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ef4e:	6020      	str	r0, [r4, #0]
 800ef50:	6061      	str	r1, [r4, #4]
 800ef52:	60a2      	str	r2, [r4, #8]
			break;
 800ef54:	f00d baf8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 394 :
			strcpy(p->name,"SOFT LIKE BUTTER");
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ef5e:	4a95      	ldr	r2, [pc, #596]	; (800f1b4 <problem_fetch+0xdacc>)
 800ef60:	461d      	mov	r5, r3
 800ef62:	4614      	mov	r4, r2
 800ef64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ef66:	6028      	str	r0, [r5, #0]
 800ef68:	6069      	str	r1, [r5, #4]
 800ef6a:	60aa      	str	r2, [r5, #8]
 800ef6c:	60eb      	str	r3, [r5, #12]
 800ef6e:	7823      	ldrb	r3, [r4, #0]
 800ef70:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ef78:	4a8a      	ldr	r2, [pc, #552]	; (800f1a4 <problem_fetch+0xdabc>)
 800ef7a:	8811      	ldrh	r1, [r2, #0]
 800ef7c:	7892      	ldrb	r2, [r2, #2]
 800ef7e:	8019      	strh	r1, [r3, #0]
 800ef80:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2208      	movs	r2, #8
 800ef86:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,J,E,G,D");
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	33a4      	adds	r3, #164	; 0xa4
 800ef8c:	4a8a      	ldr	r2, [pc, #552]	; (800f1b8 <problem_fetch+0xdad0>)
 800ef8e:	461c      	mov	r4, r3
 800ef90:	4615      	mov	r5, r2
 800ef92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef94:	6020      	str	r0, [r4, #0]
 800ef96:	6061      	str	r1, [r4, #4]
 800ef98:	60a2      	str	r2, [r4, #8]
 800ef9a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,14,17,18");
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3304      	adds	r3, #4
 800efa0:	4a86      	ldr	r2, [pc, #536]	; (800f1bc <problem_fetch+0xdad4>)
 800efa2:	461d      	mov	r5, r3
 800efa4:	4614      	mov	r4, r2
 800efa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efa8:	6028      	str	r0, [r5, #0]
 800efaa:	6069      	str	r1, [r5, #4]
 800efac:	60aa      	str	r2, [r5, #8]
 800efae:	60eb      	str	r3, [r5, #12]
 800efb0:	6820      	ldr	r0, [r4, #0]
 800efb2:	6128      	str	r0, [r5, #16]
 800efb4:	88a3      	ldrh	r3, [r4, #4]
 800efb6:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800efbe:	4a80      	ldr	r2, [pc, #512]	; (800f1c0 <problem_fetch+0xdad8>)
 800efc0:	461c      	mov	r4, r3
 800efc2:	4615      	mov	r5, r2
 800efc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efc6:	6020      	str	r0, [r4, #0]
 800efc8:	6061      	str	r1, [r4, #4]
 800efca:	60a2      	str	r2, [r4, #8]
 800efcc:	60e3      	str	r3, [r4, #12]
			break;
 800efce:	f00d babb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 395 :
			strcpy(p->name,"PINCHY PINCH");
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800efd8:	4a7a      	ldr	r2, [pc, #488]	; (800f1c4 <problem_fetch+0xdadc>)
 800efda:	461c      	mov	r4, r3
 800efdc:	4613      	mov	r3, r2
 800efde:	cb07      	ldmia	r3!, {r0, r1, r2}
 800efe0:	6020      	str	r0, [r4, #0]
 800efe2:	6061      	str	r1, [r4, #4]
 800efe4:	60a2      	str	r2, [r4, #8]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800eff0:	4a75      	ldr	r2, [pc, #468]	; (800f1c8 <problem_fetch+0xdae0>)
 800eff2:	6810      	ldr	r0, [r2, #0]
 800eff4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2207      	movs	r2, #7
 800effa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,C,D,A");
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	33a4      	adds	r3, #164	; 0xa4
 800f000:	4a72      	ldr	r2, [pc, #456]	; (800f1cc <problem_fetch+0xdae4>)
 800f002:	461c      	mov	r4, r3
 800f004:	4613      	mov	r3, r2
 800f006:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f008:	6020      	str	r0, [r4, #0]
 800f00a:	6061      	str	r1, [r4, #4]
 800f00c:	60a2      	str	r2, [r4, #8]
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	3304      	adds	r3, #4
 800f016:	4a6e      	ldr	r2, [pc, #440]	; (800f1d0 <problem_fetch+0xdae8>)
 800f018:	461d      	mov	r5, r3
 800f01a:	4614      	mov	r4, r2
 800f01c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f01e:	6028      	str	r0, [r5, #0]
 800f020:	6069      	str	r1, [r5, #4]
 800f022:	60aa      	str	r2, [r5, #8]
 800f024:	60eb      	str	r3, [r5, #12]
 800f026:	8823      	ldrh	r3, [r4, #0]
 800f028:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f030:	4a68      	ldr	r2, [pc, #416]	; (800f1d4 <problem_fetch+0xdaec>)
 800f032:	461c      	mov	r4, r3
 800f034:	4613      	mov	r3, r2
 800f036:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f038:	6020      	str	r0, [r4, #0]
 800f03a:	6061      	str	r1, [r4, #4]
 800f03c:	60a2      	str	r2, [r4, #8]
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	81a3      	strh	r3, [r4, #12]
			break;
 800f042:	f00d ba81 	b.w	801c548 <problem_fetch+0x1ae60>
		case 396 :
			strcpy(p->name,"ONE LINE");
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f04c:	4962      	ldr	r1, [pc, #392]	; (800f1d8 <problem_fetch+0xdaf0>)
 800f04e:	461a      	mov	r2, r3
 800f050:	460b      	mov	r3, r1
 800f052:	cb03      	ldmia	r3!, {r0, r1}
 800f054:	6010      	str	r0, [r2, #0]
 800f056:	6051      	str	r1, [r2, #4]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f062:	4a5e      	ldr	r2, [pc, #376]	; (800f1dc <problem_fetch+0xdaf4>)
 800f064:	6810      	ldr	r0, [r2, #0]
 800f066:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2208      	movs	r2, #8
 800f06c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	33a4      	adds	r3, #164	; 0xa4
 800f072:	4a5b      	ldr	r2, [pc, #364]	; (800f1e0 <problem_fetch+0xdaf8>)
 800f074:	461c      	mov	r4, r3
 800f076:	4615      	mov	r5, r2
 800f078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f07a:	6020      	str	r0, [r4, #0]
 800f07c:	6061      	str	r1, [r4, #4]
 800f07e:	60a2      	str	r2, [r4, #8]
 800f080:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,16,9,9,5,18");
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	3304      	adds	r3, #4
 800f086:	4a57      	ldr	r2, [pc, #348]	; (800f1e4 <problem_fetch+0xdafc>)
 800f088:	461d      	mov	r5, r3
 800f08a:	4614      	mov	r4, r2
 800f08c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f08e:	6028      	str	r0, [r5, #0]
 800f090:	6069      	str	r1, [r5, #4]
 800f092:	60aa      	str	r2, [r5, #8]
 800f094:	60eb      	str	r3, [r5, #12]
 800f096:	8823      	ldrh	r3, [r4, #0]
 800f098:	78a2      	ldrb	r2, [r4, #2]
 800f09a:	822b      	strh	r3, [r5, #16]
 800f09c:	4613      	mov	r3, r2
 800f09e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f0a6:	4a50      	ldr	r2, [pc, #320]	; (800f1e8 <problem_fetch+0xdb00>)
 800f0a8:	461c      	mov	r4, r3
 800f0aa:	4615      	mov	r5, r2
 800f0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ae:	6020      	str	r0, [r4, #0]
 800f0b0:	6061      	str	r1, [r4, #4]
 800f0b2:	60a2      	str	r2, [r4, #8]
 800f0b4:	60e3      	str	r3, [r4, #12]
			break;
 800f0b6:	f00d ba47 	b.w	801c548 <problem_fetch+0x1ae60>
		case 397 :
			strcpy(p->name,"RASTAMAN");
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f0c0:	494a      	ldr	r1, [pc, #296]	; (800f1ec <problem_fetch+0xdb04>)
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	cb03      	ldmia	r3!, {r0, r1}
 800f0c8:	6010      	str	r0, [r2, #0]
 800f0ca:	6051      	str	r1, [r2, #4]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f0d6:	4a46      	ldr	r2, [pc, #280]	; (800f1f0 <problem_fetch+0xdb08>)
 800f0d8:	6810      	ldr	r0, [r2, #0]
 800f0da:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2207      	movs	r2, #7
 800f0e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,A");
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	33a4      	adds	r3, #164	; 0xa4
 800f0e6:	4a43      	ldr	r2, [pc, #268]	; (800f1f4 <problem_fetch+0xdb0c>)
 800f0e8:	461c      	mov	r4, r3
 800f0ea:	4613      	mov	r3, r2
 800f0ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f0ee:	6020      	str	r0, [r4, #0]
 800f0f0:	6061      	str	r1, [r4, #4]
 800f0f2:	60a2      	str	r2, [r4, #8]
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	3304      	adds	r3, #4
 800f0fc:	4a3e      	ldr	r2, [pc, #248]	; (800f1f8 <problem_fetch+0xdb10>)
 800f0fe:	461d      	mov	r5, r3
 800f100:	4614      	mov	r4, r2
 800f102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f104:	6028      	str	r0, [r5, #0]
 800f106:	6069      	str	r1, [r5, #4]
 800f108:	60aa      	str	r2, [r5, #8]
 800f10a:	60eb      	str	r3, [r5, #12]
 800f10c:	8823      	ldrh	r3, [r4, #0]
 800f10e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f116:	4a2f      	ldr	r2, [pc, #188]	; (800f1d4 <problem_fetch+0xdaec>)
 800f118:	461c      	mov	r4, r3
 800f11a:	4613      	mov	r3, r2
 800f11c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f11e:	6020      	str	r0, [r4, #0]
 800f120:	6061      	str	r1, [r4, #4]
 800f122:	60a2      	str	r2, [r4, #8]
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	81a3      	strh	r3, [r4, #12]
			break;
 800f128:	f00d ba0e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 398 :
			strcpy(p->name,"TURKMENISTAN");
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f132:	4a32      	ldr	r2, [pc, #200]	; (800f1fc <problem_fetch+0xdb14>)
 800f134:	461c      	mov	r4, r3
 800f136:	4613      	mov	r3, r2
 800f138:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f13a:	6020      	str	r0, [r4, #0]
 800f13c:	6061      	str	r1, [r4, #4]
 800f13e:	60a2      	str	r2, [r4, #8]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f14a:	4a29      	ldr	r2, [pc, #164]	; (800f1f0 <problem_fetch+0xdb08>)
 800f14c:	6810      	ldr	r0, [r2, #0]
 800f14e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	2207      	movs	r2, #7
 800f154:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,E,H,D");
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	33a4      	adds	r3, #164	; 0xa4
 800f15a:	4a29      	ldr	r2, [pc, #164]	; (800f200 <problem_fetch+0xdb18>)
 800f15c:	461c      	mov	r4, r3
 800f15e:	4613      	mov	r3, r2
 800f160:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f162:	6020      	str	r0, [r4, #0]
 800f164:	6061      	str	r1, [r4, #4]
 800f166:	60a2      	str	r2, [r4, #8]
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,16,18");
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	3304      	adds	r3, #4
 800f170:	4a24      	ldr	r2, [pc, #144]	; (800f204 <problem_fetch+0xdb1c>)
 800f172:	461d      	mov	r5, r3
 800f174:	4614      	mov	r4, r2
 800f176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f178:	6028      	str	r0, [r5, #0]
 800f17a:	6069      	str	r1, [r5, #4]
 800f17c:	60aa      	str	r2, [r5, #8]
 800f17e:	60eb      	str	r3, [r5, #12]
 800f180:	8823      	ldrh	r3, [r4, #0]
 800f182:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f18a:	4a12      	ldr	r2, [pc, #72]	; (800f1d4 <problem_fetch+0xdaec>)
 800f18c:	461c      	mov	r4, r3
 800f18e:	4613      	mov	r3, r2
 800f190:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f192:	6020      	str	r0, [r4, #0]
 800f194:	6061      	str	r1, [r4, #4]
 800f196:	60a2      	str	r2, [r4, #8]
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	81a3      	strh	r3, [r4, #12]
			break;
 800f19c:	f00d b9d4 	b.w	801c548 <problem_fetch+0x1ae60>
 800f1a0:	080285c0 	.word	0x080285c0
 800f1a4:	08023a28 	.word	0x08023a28
 800f1a8:	080285cc 	.word	0x080285cc
 800f1ac:	080285d8 	.word	0x080285d8
 800f1b0:	08023cf8 	.word	0x08023cf8
 800f1b4:	080285e8 	.word	0x080285e8
 800f1b8:	080285fc 	.word	0x080285fc
 800f1bc:	0802860c 	.word	0x0802860c
 800f1c0:	08023b6c 	.word	0x08023b6c
 800f1c4:	08028624 	.word	0x08028624
 800f1c8:	080239f4 	.word	0x080239f4
 800f1cc:	08028634 	.word	0x08028634
 800f1d0:	08028644 	.word	0x08028644
 800f1d4:	08023ae4 	.word	0x08023ae4
 800f1d8:	08028658 	.word	0x08028658
 800f1dc:	08023afc 	.word	0x08023afc
 800f1e0:	08028664 	.word	0x08028664
 800f1e4:	08028674 	.word	0x08028674
 800f1e8:	08023a80 	.word	0x08023a80
 800f1ec:	08028688 	.word	0x08028688
 800f1f0:	0802395c 	.word	0x0802395c
 800f1f4:	08028694 	.word	0x08028694
 800f1f8:	080286a4 	.word	0x080286a4
 800f1fc:	080286b8 	.word	0x080286b8
 800f200:	080286c8 	.word	0x080286c8
 800f204:	080286d8 	.word	0x080286d8
		case 399 :
			strcpy(p->name,"MAIDENATOR2");
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f20e:	4aad      	ldr	r2, [pc, #692]	; (800f4c4 <problem_fetch+0xdddc>)
 800f210:	461c      	mov	r4, r3
 800f212:	4613      	mov	r3, r2
 800f214:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f216:	6020      	str	r0, [r4, #0]
 800f218:	6061      	str	r1, [r4, #4]
 800f21a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f222:	4aa9      	ldr	r2, [pc, #676]	; (800f4c8 <problem_fetch+0xdde0>)
 800f224:	8811      	ldrh	r1, [r2, #0]
 800f226:	7892      	ldrb	r2, [r2, #2]
 800f228:	8019      	strh	r1, [r3, #0]
 800f22a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2209      	movs	r2, #9
 800f230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,H,C,F,A,B,A");
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	33a4      	adds	r3, #164	; 0xa4
 800f236:	4aa5      	ldr	r2, [pc, #660]	; (800f4cc <problem_fetch+0xdde4>)
 800f238:	461d      	mov	r5, r3
 800f23a:	4614      	mov	r4, r2
 800f23c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f23e:	6028      	str	r0, [r5, #0]
 800f240:	6069      	str	r1, [r5, #4]
 800f242:	60aa      	str	r2, [r5, #8]
 800f244:	60eb      	str	r3, [r5, #12]
 800f246:	8823      	ldrh	r3, [r4, #0]
 800f248:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,8,13,11,14,15,18");
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	3304      	adds	r3, #4
 800f24e:	4aa0      	ldr	r2, [pc, #640]	; (800f4d0 <problem_fetch+0xdde8>)
 800f250:	461c      	mov	r4, r3
 800f252:	4615      	mov	r5, r2
 800f254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f256:	6020      	str	r0, [r4, #0]
 800f258:	6061      	str	r1, [r4, #4]
 800f25a:	60a2      	str	r2, [r4, #8]
 800f25c:	60e3      	str	r3, [r4, #12]
 800f25e:	6828      	ldr	r0, [r5, #0]
 800f260:	6120      	str	r0, [r4, #16]
 800f262:	88ab      	ldrh	r3, [r5, #4]
 800f264:	79aa      	ldrb	r2, [r5, #6]
 800f266:	82a3      	strh	r3, [r4, #20]
 800f268:	4613      	mov	r3, r2
 800f26a:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f272:	4a98      	ldr	r2, [pc, #608]	; (800f4d4 <problem_fetch+0xddec>)
 800f274:	461d      	mov	r5, r3
 800f276:	4614      	mov	r4, r2
 800f278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f27a:	6028      	str	r0, [r5, #0]
 800f27c:	6069      	str	r1, [r5, #4]
 800f27e:	60aa      	str	r2, [r5, #8]
 800f280:	60eb      	str	r3, [r5, #12]
 800f282:	8823      	ldrh	r3, [r4, #0]
 800f284:	822b      	strh	r3, [r5, #16]
			break;
 800f286:	f00d b95f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 400 :
			strcpy(p->name,"CHALK DUST");
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f290:	4991      	ldr	r1, [pc, #580]	; (800f4d8 <problem_fetch+0xddf0>)
 800f292:	461a      	mov	r2, r3
 800f294:	460b      	mov	r3, r1
 800f296:	cb03      	ldmia	r3!, {r0, r1}
 800f298:	6010      	str	r0, [r2, #0]
 800f29a:	6051      	str	r1, [r2, #4]
 800f29c:	8819      	ldrh	r1, [r3, #0]
 800f29e:	789b      	ldrb	r3, [r3, #2]
 800f2a0:	8111      	strh	r1, [r2, #8]
 800f2a2:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f2aa:	4a8c      	ldr	r2, [pc, #560]	; (800f4dc <problem_fetch+0xddf4>)
 800f2ac:	6810      	ldr	r0, [r2, #0]
 800f2ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2207      	movs	r2, #7
 800f2b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	33a4      	adds	r3, #164	; 0xa4
 800f2ba:	4a89      	ldr	r2, [pc, #548]	; (800f4e0 <problem_fetch+0xddf8>)
 800f2bc:	461c      	mov	r4, r3
 800f2be:	4613      	mov	r3, r2
 800f2c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2c2:	6020      	str	r0, [r4, #0]
 800f2c4:	6061      	str	r1, [r4, #4]
 800f2c6:	60a2      	str	r2, [r4, #8]
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,12,16,18");
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	3304      	adds	r3, #4
 800f2d0:	4a84      	ldr	r2, [pc, #528]	; (800f4e4 <problem_fetch+0xddfc>)
 800f2d2:	461d      	mov	r5, r3
 800f2d4:	4614      	mov	r4, r2
 800f2d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2d8:	6028      	str	r0, [r5, #0]
 800f2da:	6069      	str	r1, [r5, #4]
 800f2dc:	60aa      	str	r2, [r5, #8]
 800f2de:	60eb      	str	r3, [r5, #12]
 800f2e0:	8823      	ldrh	r3, [r4, #0]
 800f2e2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f2ea:	4a7f      	ldr	r2, [pc, #508]	; (800f4e8 <problem_fetch+0xde00>)
 800f2ec:	461c      	mov	r4, r3
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f2f2:	6020      	str	r0, [r4, #0]
 800f2f4:	6061      	str	r1, [r4, #4]
 800f2f6:	60a2      	str	r2, [r4, #8]
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	81a3      	strh	r3, [r4, #12]
			break;
 800f2fc:	f00d b924 	b.w	801c548 <problem_fetch+0x1ae60>
		case 401 :
			strcpy(p->name,"LAPPNOR");
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f306:	4979      	ldr	r1, [pc, #484]	; (800f4ec <problem_fetch+0xde04>)
 800f308:	461a      	mov	r2, r3
 800f30a:	460b      	mov	r3, r1
 800f30c:	cb03      	ldmia	r3!, {r0, r1}
 800f30e:	6010      	str	r0, [r2, #0]
 800f310:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A");
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f318:	4a75      	ldr	r2, [pc, #468]	; (800f4f0 <problem_fetch+0xde08>)
 800f31a:	8811      	ldrh	r1, [r2, #0]
 800f31c:	7892      	ldrb	r2, [r2, #2]
 800f31e:	8019      	strh	r1, [r3, #0]
 800f320:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2207      	movs	r2, #7
 800f326:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,G,I");
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	33a4      	adds	r3, #164	; 0xa4
 800f32c:	4a71      	ldr	r2, [pc, #452]	; (800f4f4 <problem_fetch+0xde0c>)
 800f32e:	461c      	mov	r4, r3
 800f330:	4613      	mov	r3, r2
 800f332:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f334:	6020      	str	r0, [r4, #0]
 800f336:	6061      	str	r1, [r4, #4]
 800f338:	60a2      	str	r2, [r4, #8]
 800f33a:	881b      	ldrh	r3, [r3, #0]
 800f33c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,15,18");
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3304      	adds	r3, #4
 800f342:	4a6d      	ldr	r2, [pc, #436]	; (800f4f8 <problem_fetch+0xde10>)
 800f344:	461d      	mov	r5, r3
 800f346:	4614      	mov	r4, r2
 800f348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f34a:	6028      	str	r0, [r5, #0]
 800f34c:	6069      	str	r1, [r5, #4]
 800f34e:	60aa      	str	r2, [r5, #8]
 800f350:	60eb      	str	r3, [r5, #12]
 800f352:	8823      	ldrh	r3, [r4, #0]
 800f354:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f35c:	4a67      	ldr	r2, [pc, #412]	; (800f4fc <problem_fetch+0xde14>)
 800f35e:	461c      	mov	r4, r3
 800f360:	4613      	mov	r3, r2
 800f362:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f364:	6020      	str	r0, [r4, #0]
 800f366:	6061      	str	r1, [r4, #4]
 800f368:	60a2      	str	r2, [r4, #8]
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	81a3      	strh	r3, [r4, #12]
			break;
 800f36e:	f00d b8eb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 402 :
			strcpy(p->name,"CHAMONIX BAD DAY");
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f378:	4a61      	ldr	r2, [pc, #388]	; (800f500 <problem_fetch+0xde18>)
 800f37a:	461d      	mov	r5, r3
 800f37c:	4614      	mov	r4, r2
 800f37e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f380:	6028      	str	r0, [r5, #0]
 800f382:	6069      	str	r1, [r5, #4]
 800f384:	60aa      	str	r2, [r5, #8]
 800f386:	60eb      	str	r3, [r5, #12]
 800f388:	7823      	ldrb	r3, [r4, #0]
 800f38a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f392:	4a4d      	ldr	r2, [pc, #308]	; (800f4c8 <problem_fetch+0xdde0>)
 800f394:	8811      	ldrh	r1, [r2, #0]
 800f396:	7892      	ldrb	r2, [r2, #2]
 800f398:	8019      	strh	r1, [r3, #0]
 800f39a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2206      	movs	r2, #6
 800f3a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,D");
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	33a4      	adds	r3, #164	; 0xa4
 800f3a6:	4a57      	ldr	r2, [pc, #348]	; (800f504 <problem_fetch+0xde1c>)
 800f3a8:	461c      	mov	r4, r3
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3ae:	6020      	str	r0, [r4, #0]
 800f3b0:	6061      	str	r1, [r4, #4]
 800f3b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,14,18");
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	3304      	adds	r3, #4
 800f3b8:	4a53      	ldr	r2, [pc, #332]	; (800f508 <problem_fetch+0xde20>)
 800f3ba:	461c      	mov	r4, r3
 800f3bc:	4613      	mov	r3, r2
 800f3be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3c0:	6020      	str	r0, [r4, #0]
 800f3c2:	6061      	str	r1, [r4, #4]
 800f3c4:	60a2      	str	r2, [r4, #8]
 800f3c6:	881a      	ldrh	r2, [r3, #0]
 800f3c8:	789b      	ldrb	r3, [r3, #2]
 800f3ca:	81a2      	strh	r2, [r4, #12]
 800f3cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f3d4:	4a4d      	ldr	r2, [pc, #308]	; (800f50c <problem_fetch+0xde24>)
 800f3d6:	461c      	mov	r4, r3
 800f3d8:	4613      	mov	r3, r2
 800f3da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f3dc:	6020      	str	r0, [r4, #0]
 800f3de:	6061      	str	r1, [r4, #4]
 800f3e0:	60a2      	str	r2, [r4, #8]
			break;
 800f3e2:	f00d b8b1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 403 :
			strcpy(p->name,"CHARGER");
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f3ec:	4948      	ldr	r1, [pc, #288]	; (800f510 <problem_fetch+0xde28>)
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	cb03      	ldmia	r3!, {r0, r1}
 800f3f4:	6010      	str	r0, [r2, #0]
 800f3f6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f3fe:	4a32      	ldr	r2, [pc, #200]	; (800f4c8 <problem_fetch+0xdde0>)
 800f400:	8811      	ldrh	r1, [r2, #0]
 800f402:	7892      	ldrb	r2, [r2, #2]
 800f404:	8019      	strh	r1, [r3, #0]
 800f406:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2206      	movs	r2, #6
 800f40c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,B,D");
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	33a4      	adds	r3, #164	; 0xa4
 800f412:	4a40      	ldr	r2, [pc, #256]	; (800f514 <problem_fetch+0xde2c>)
 800f414:	461c      	mov	r4, r3
 800f416:	4613      	mov	r3, r2
 800f418:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f41a:	6020      	str	r0, [r4, #0]
 800f41c:	6061      	str	r1, [r4, #4]
 800f41e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,15,18");
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	3304      	adds	r3, #4
 800f424:	4a3c      	ldr	r2, [pc, #240]	; (800f518 <problem_fetch+0xde30>)
 800f426:	461c      	mov	r4, r3
 800f428:	4613      	mov	r3, r2
 800f42a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f42c:	6020      	str	r0, [r4, #0]
 800f42e:	6061      	str	r1, [r4, #4]
 800f430:	60a2      	str	r2, [r4, #8]
 800f432:	881a      	ldrh	r2, [r3, #0]
 800f434:	789b      	ldrb	r3, [r3, #2]
 800f436:	81a2      	strh	r2, [r4, #12]
 800f438:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f440:	4a32      	ldr	r2, [pc, #200]	; (800f50c <problem_fetch+0xde24>)
 800f442:	461c      	mov	r4, r3
 800f444:	4613      	mov	r3, r2
 800f446:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f448:	6020      	str	r0, [r4, #0]
 800f44a:	6061      	str	r1, [r4, #4]
 800f44c:	60a2      	str	r2, [r4, #8]
			break;
 800f44e:	f00d b87b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 404 :
			strcpy(p->name,"(S)ENDING");
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f458:	4930      	ldr	r1, [pc, #192]	; (800f51c <problem_fetch+0xde34>)
 800f45a:	461a      	mov	r2, r3
 800f45c:	460b      	mov	r3, r1
 800f45e:	cb03      	ldmia	r3!, {r0, r1}
 800f460:	6010      	str	r0, [r2, #0]
 800f462:	6051      	str	r1, [r2, #4]
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f46e:	4a2c      	ldr	r2, [pc, #176]	; (800f520 <problem_fetch+0xde38>)
 800f470:	6810      	ldr	r0, [r2, #0]
 800f472:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2207      	movs	r2, #7
 800f478:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,J,G,G,D");
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	33a4      	adds	r3, #164	; 0xa4
 800f47e:	4a29      	ldr	r2, [pc, #164]	; (800f524 <problem_fetch+0xde3c>)
 800f480:	461c      	mov	r4, r3
 800f482:	4613      	mov	r3, r2
 800f484:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f486:	6020      	str	r0, [r4, #0]
 800f488:	6061      	str	r1, [r4, #4]
 800f48a:	60a2      	str	r2, [r4, #8]
 800f48c:	881b      	ldrh	r3, [r3, #0]
 800f48e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,15,17,18");
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3304      	adds	r3, #4
 800f494:	4a24      	ldr	r2, [pc, #144]	; (800f528 <problem_fetch+0xde40>)
 800f496:	461d      	mov	r5, r3
 800f498:	4614      	mov	r4, r2
 800f49a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f49c:	6028      	str	r0, [r5, #0]
 800f49e:	6069      	str	r1, [r5, #4]
 800f4a0:	60aa      	str	r2, [r5, #8]
 800f4a2:	60eb      	str	r3, [r5, #12]
 800f4a4:	8823      	ldrh	r3, [r4, #0]
 800f4a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f4ae:	4a13      	ldr	r2, [pc, #76]	; (800f4fc <problem_fetch+0xde14>)
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f4b6:	6020      	str	r0, [r4, #0]
 800f4b8:	6061      	str	r1, [r4, #4]
 800f4ba:	60a2      	str	r2, [r4, #8]
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	81a3      	strh	r3, [r4, #12]
			break;
 800f4c0:	f00d b842 	b.w	801c548 <problem_fetch+0x1ae60>
 800f4c4:	080286ec 	.word	0x080286ec
 800f4c8:	08023a28 	.word	0x08023a28
 800f4cc:	080286f8 	.word	0x080286f8
 800f4d0:	0802870c 	.word	0x0802870c
 800f4d4:	08024940 	.word	0x08024940
 800f4d8:	08028724 	.word	0x08028724
 800f4dc:	0802395c 	.word	0x0802395c
 800f4e0:	08028730 	.word	0x08028730
 800f4e4:	080265fc 	.word	0x080265fc
 800f4e8:	080239d4 	.word	0x080239d4
 800f4ec:	08028740 	.word	0x08028740
 800f4f0:	0802391c 	.word	0x0802391c
 800f4f4:	08028748 	.word	0x08028748
 800f4f8:	08028758 	.word	0x08028758
 800f4fc:	08023ae4 	.word	0x08023ae4
 800f500:	0802876c 	.word	0x0802876c
 800f504:	080244e0 	.word	0x080244e0
 800f508:	08028780 	.word	0x08028780
 800f50c:	08023cf8 	.word	0x08023cf8
 800f510:	08028790 	.word	0x08028790
 800f514:	08028798 	.word	0x08028798
 800f518:	080287a4 	.word	0x080287a4
 800f51c:	080287b4 	.word	0x080287b4
 800f520:	08023afc 	.word	0x08023afc
 800f524:	080287c0 	.word	0x080287c0
 800f528:	080287d0 	.word	0x080287d0
		case 405 :
			strcpy(p->name,"WEEL OF WOLVO");
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f532:	4aa8      	ldr	r2, [pc, #672]	; (800f7d4 <problem_fetch+0xe0ec>)
 800f534:	461c      	mov	r4, r3
 800f536:	4613      	mov	r3, r2
 800f538:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f53a:	6020      	str	r0, [r4, #0]
 800f53c:	6061      	str	r1, [r4, #4]
 800f53e:	60a2      	str	r2, [r4, #8]
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7B");
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f54a:	4aa3      	ldr	r2, [pc, #652]	; (800f7d8 <problem_fetch+0xe0f0>)
 800f54c:	8811      	ldrh	r1, [r2, #0]
 800f54e:	7892      	ldrb	r2, [r2, #2]
 800f550:	8019      	strh	r1, [r3, #0]
 800f552:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	2207      	movs	r2, #7
 800f558:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,F,H,G,I");
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	33a4      	adds	r3, #164	; 0xa4
 800f55e:	4a9f      	ldr	r2, [pc, #636]	; (800f7dc <problem_fetch+0xe0f4>)
 800f560:	461c      	mov	r4, r3
 800f562:	4613      	mov	r3, r2
 800f564:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f566:	6020      	str	r0, [r4, #0]
 800f568:	6061      	str	r1, [r4, #4]
 800f56a:	60a2      	str	r2, [r4, #8]
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,5,11,12,15,18");
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	3304      	adds	r3, #4
 800f574:	4a9a      	ldr	r2, [pc, #616]	; (800f7e0 <problem_fetch+0xe0f8>)
 800f576:	461d      	mov	r5, r3
 800f578:	4614      	mov	r4, r2
 800f57a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f57c:	6028      	str	r0, [r5, #0]
 800f57e:	6069      	str	r1, [r5, #4]
 800f580:	60aa      	str	r2, [r5, #8]
 800f582:	60eb      	str	r3, [r5, #12]
 800f584:	8823      	ldrh	r3, [r4, #0]
 800f586:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f58e:	4a95      	ldr	r2, [pc, #596]	; (800f7e4 <problem_fetch+0xe0fc>)
 800f590:	461c      	mov	r4, r3
 800f592:	4613      	mov	r3, r2
 800f594:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f596:	6020      	str	r0, [r4, #0]
 800f598:	6061      	str	r1, [r4, #4]
 800f59a:	60a2      	str	r2, [r4, #8]
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	81a3      	strh	r3, [r4, #12]
			break;
 800f5a0:	f00c bfd2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 406 :
			strcpy(p->name,"IMPACT");
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f5aa:	4a8f      	ldr	r2, [pc, #572]	; (800f7e8 <problem_fetch+0xe100>)
 800f5ac:	6810      	ldr	r0, [r2, #0]
 800f5ae:	6018      	str	r0, [r3, #0]
 800f5b0:	8891      	ldrh	r1, [r2, #4]
 800f5b2:	7992      	ldrb	r2, [r2, #6]
 800f5b4:	8099      	strh	r1, [r3, #4]
 800f5b6:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f5be:	4a8b      	ldr	r2, [pc, #556]	; (800f7ec <problem_fetch+0xe104>)
 800f5c0:	6810      	ldr	r0, [r2, #0]
 800f5c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2208      	movs	r2, #8
 800f5c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,B,E,D");
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	33a4      	adds	r3, #164	; 0xa4
 800f5ce:	4a88      	ldr	r2, [pc, #544]	; (800f7f0 <problem_fetch+0xe108>)
 800f5d0:	461c      	mov	r4, r3
 800f5d2:	4615      	mov	r5, r2
 800f5d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f5d6:	6020      	str	r0, [r4, #0]
 800f5d8:	6061      	str	r1, [r4, #4]
 800f5da:	60a2      	str	r2, [r4, #8]
 800f5dc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,15,14,18");
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	4a84      	ldr	r2, [pc, #528]	; (800f7f4 <problem_fetch+0xe10c>)
 800f5e4:	461d      	mov	r5, r3
 800f5e6:	4614      	mov	r4, r2
 800f5e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f5ea:	6028      	str	r0, [r5, #0]
 800f5ec:	6069      	str	r1, [r5, #4]
 800f5ee:	60aa      	str	r2, [r5, #8]
 800f5f0:	60eb      	str	r3, [r5, #12]
 800f5f2:	6820      	ldr	r0, [r4, #0]
 800f5f4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f5fc:	4a7e      	ldr	r2, [pc, #504]	; (800f7f8 <problem_fetch+0xe110>)
 800f5fe:	461c      	mov	r4, r3
 800f600:	4615      	mov	r5, r2
 800f602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f604:	6020      	str	r0, [r4, #0]
 800f606:	6061      	str	r1, [r4, #4]
 800f608:	60a2      	str	r2, [r4, #8]
 800f60a:	60e3      	str	r3, [r4, #12]
			break;
 800f60c:	f00c bf9c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 407 :
			strcpy(p->name,"HUBBLE");
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f616:	4a79      	ldr	r2, [pc, #484]	; (800f7fc <problem_fetch+0xe114>)
 800f618:	6810      	ldr	r0, [r2, #0]
 800f61a:	6018      	str	r0, [r3, #0]
 800f61c:	8891      	ldrh	r1, [r2, #4]
 800f61e:	7992      	ldrb	r2, [r2, #6]
 800f620:	8099      	strh	r1, [r3, #4]
 800f622:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f62a:	4a75      	ldr	r2, [pc, #468]	; (800f800 <problem_fetch+0xe118>)
 800f62c:	6810      	ldr	r0, [r2, #0]
 800f62e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2206      	movs	r2, #6
 800f634:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,H,K,I");
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	33a4      	adds	r3, #164	; 0xa4
 800f63a:	4a72      	ldr	r2, [pc, #456]	; (800f804 <problem_fetch+0xe11c>)
 800f63c:	461c      	mov	r4, r3
 800f63e:	4613      	mov	r3, r2
 800f640:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f642:	6020      	str	r0, [r4, #0]
 800f644:	6061      	str	r1, [r4, #4]
 800f646:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	3304      	adds	r3, #4
 800f64c:	4a6e      	ldr	r2, [pc, #440]	; (800f808 <problem_fetch+0xe120>)
 800f64e:	461c      	mov	r4, r3
 800f650:	4613      	mov	r3, r2
 800f652:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f654:	6020      	str	r0, [r4, #0]
 800f656:	6061      	str	r1, [r4, #4]
 800f658:	60a2      	str	r2, [r4, #8]
 800f65a:	881a      	ldrh	r2, [r3, #0]
 800f65c:	789b      	ldrb	r3, [r3, #2]
 800f65e:	81a2      	strh	r2, [r4, #12]
 800f660:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f668:	4a68      	ldr	r2, [pc, #416]	; (800f80c <problem_fetch+0xe124>)
 800f66a:	461c      	mov	r4, r3
 800f66c:	4613      	mov	r3, r2
 800f66e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f670:	6020      	str	r0, [r4, #0]
 800f672:	6061      	str	r1, [r4, #4]
 800f674:	60a2      	str	r2, [r4, #8]
			break;
 800f676:	f00c bf67 	b.w	801c548 <problem_fetch+0x1ae60>
		case 408 :
			strcpy(p->name,"FREERIDER");
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f680:	4963      	ldr	r1, [pc, #396]	; (800f810 <problem_fetch+0xe128>)
 800f682:	461a      	mov	r2, r3
 800f684:	460b      	mov	r3, r1
 800f686:	cb03      	ldmia	r3!, {r0, r1}
 800f688:	6010      	str	r0, [r2, #0]
 800f68a:	6051      	str	r1, [r2, #4]
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f696:	4a5a      	ldr	r2, [pc, #360]	; (800f800 <problem_fetch+0xe118>)
 800f698:	6810      	ldr	r0, [r2, #0]
 800f69a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2206      	movs	r2, #6
 800f6a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	33a4      	adds	r3, #164	; 0xa4
 800f6a6:	4a5b      	ldr	r2, [pc, #364]	; (800f814 <problem_fetch+0xe12c>)
 800f6a8:	461c      	mov	r4, r3
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ae:	6020      	str	r0, [r4, #0]
 800f6b0:	6061      	str	r1, [r4, #4]
 800f6b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	4a57      	ldr	r2, [pc, #348]	; (800f818 <problem_fetch+0xe130>)
 800f6ba:	461c      	mov	r4, r3
 800f6bc:	4613      	mov	r3, r2
 800f6be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6c0:	6020      	str	r0, [r4, #0]
 800f6c2:	6061      	str	r1, [r4, #4]
 800f6c4:	60a2      	str	r2, [r4, #8]
 800f6c6:	881a      	ldrh	r2, [r3, #0]
 800f6c8:	789b      	ldrb	r3, [r3, #2]
 800f6ca:	81a2      	strh	r2, [r4, #12]
 800f6cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f6d4:	4a51      	ldr	r2, [pc, #324]	; (800f81c <problem_fetch+0xe134>)
 800f6d6:	461c      	mov	r4, r3
 800f6d8:	4613      	mov	r3, r2
 800f6da:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6dc:	6020      	str	r0, [r4, #0]
 800f6de:	6061      	str	r1, [r4, #4]
 800f6e0:	60a2      	str	r2, [r4, #8]
			break;
 800f6e2:	f00c bf31 	b.w	801c548 <problem_fetch+0x1ae60>
		case 409 :
			strcpy(p->name,"LAST HOPE");
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f6ec:	494c      	ldr	r1, [pc, #304]	; (800f820 <problem_fetch+0xe138>)
 800f6ee:	461a      	mov	r2, r3
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	cb03      	ldmia	r3!, {r0, r1}
 800f6f4:	6010      	str	r0, [r2, #0]
 800f6f6:	6051      	str	r1, [r2, #4]
 800f6f8:	881b      	ldrh	r3, [r3, #0]
 800f6fa:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f702:	4a3f      	ldr	r2, [pc, #252]	; (800f800 <problem_fetch+0xe118>)
 800f704:	6810      	ldr	r0, [r2, #0]
 800f706:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2206      	movs	r2, #6
 800f70c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,K,I");
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	33a4      	adds	r3, #164	; 0xa4
 800f712:	4a44      	ldr	r2, [pc, #272]	; (800f824 <problem_fetch+0xe13c>)
 800f714:	461c      	mov	r4, r3
 800f716:	4613      	mov	r3, r2
 800f718:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f71a:	6020      	str	r0, [r4, #0]
 800f71c:	6061      	str	r1, [r4, #4]
 800f71e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,14,18");
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	3304      	adds	r3, #4
 800f724:	4a40      	ldr	r2, [pc, #256]	; (800f828 <problem_fetch+0xe140>)
 800f726:	461c      	mov	r4, r3
 800f728:	4613      	mov	r3, r2
 800f72a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f72c:	6020      	str	r0, [r4, #0]
 800f72e:	6061      	str	r1, [r4, #4]
 800f730:	60a2      	str	r2, [r4, #8]
 800f732:	881a      	ldrh	r2, [r3, #0]
 800f734:	789b      	ldrb	r3, [r3, #2]
 800f736:	81a2      	strh	r2, [r4, #12]
 800f738:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f740:	4a36      	ldr	r2, [pc, #216]	; (800f81c <problem_fetch+0xe134>)
 800f742:	461c      	mov	r4, r3
 800f744:	4613      	mov	r3, r2
 800f746:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f748:	6020      	str	r0, [r4, #0]
 800f74a:	6061      	str	r1, [r4, #4]
 800f74c:	60a2      	str	r2, [r4, #8]
			break;
 800f74e:	f00c befb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 410 :
			strcpy(p->name,"RAINING MEANS TRAINING");
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f758:	4a34      	ldr	r2, [pc, #208]	; (800f82c <problem_fetch+0xe144>)
 800f75a:	461c      	mov	r4, r3
 800f75c:	4615      	mov	r5, r2
 800f75e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f760:	6020      	str	r0, [r4, #0]
 800f762:	6061      	str	r1, [r4, #4]
 800f764:	60a2      	str	r2, [r4, #8]
 800f766:	60e3      	str	r3, [r4, #12]
 800f768:	6828      	ldr	r0, [r5, #0]
 800f76a:	6120      	str	r0, [r4, #16]
 800f76c:	88ab      	ldrh	r3, [r5, #4]
 800f76e:	79aa      	ldrb	r2, [r5, #6]
 800f770:	82a3      	strh	r3, [r4, #20]
 800f772:	4613      	mov	r3, r2
 800f774:	75a3      	strb	r3, [r4, #22]
			strcpy(p->grade,"7A+");
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f77c:	4a20      	ldr	r2, [pc, #128]	; (800f800 <problem_fetch+0xe118>)
 800f77e:	6810      	ldr	r0, [r2, #0]
 800f780:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2207      	movs	r2, #7
 800f786:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,I,D");
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	33a4      	adds	r3, #164	; 0xa4
 800f78c:	4a28      	ldr	r2, [pc, #160]	; (800f830 <problem_fetch+0xe148>)
 800f78e:	461c      	mov	r4, r3
 800f790:	4613      	mov	r3, r2
 800f792:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f794:	6020      	str	r0, [r4, #0]
 800f796:	6061      	str	r1, [r4, #4]
 800f798:	60a2      	str	r2, [r4, #8]
 800f79a:	881b      	ldrh	r3, [r3, #0]
 800f79c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,12,16,7,18");
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	3304      	adds	r3, #4
 800f7a2:	4a24      	ldr	r2, [pc, #144]	; (800f834 <problem_fetch+0xe14c>)
 800f7a4:	461d      	mov	r5, r3
 800f7a6:	4614      	mov	r4, r2
 800f7a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f7aa:	6028      	str	r0, [r5, #0]
 800f7ac:	6069      	str	r1, [r5, #4]
 800f7ae:	60aa      	str	r2, [r5, #8]
 800f7b0:	60eb      	str	r3, [r5, #12]
 800f7b2:	7823      	ldrb	r3, [r4, #0]
 800f7b4:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f7bc:	4a09      	ldr	r2, [pc, #36]	; (800f7e4 <problem_fetch+0xe0fc>)
 800f7be:	461c      	mov	r4, r3
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f7c4:	6020      	str	r0, [r4, #0]
 800f7c6:	6061      	str	r1, [r4, #4]
 800f7c8:	60a2      	str	r2, [r4, #8]
 800f7ca:	881b      	ldrh	r3, [r3, #0]
 800f7cc:	81a3      	strh	r3, [r4, #12]
			break;
 800f7ce:	f00c bebb 	b.w	801c548 <problem_fetch+0x1ae60>
 800f7d2:	bf00      	nop
 800f7d4:	080287e4 	.word	0x080287e4
 800f7d8:	08024054 	.word	0x08024054
 800f7dc:	080287f4 	.word	0x080287f4
 800f7e0:	08028804 	.word	0x08028804
 800f7e4:	08023ae4 	.word	0x08023ae4
 800f7e8:	08028818 	.word	0x08028818
 800f7ec:	0802395c 	.word	0x0802395c
 800f7f0:	08028820 	.word	0x08028820
 800f7f4:	08028830 	.word	0x08028830
 800f7f8:	08023b6c 	.word	0x08023b6c
 800f7fc:	08028844 	.word	0x08028844
 800f800:	08023afc 	.word	0x08023afc
 800f804:	0802884c 	.word	0x0802884c
 800f808:	08028858 	.word	0x08028858
 800f80c:	0802393c 	.word	0x0802393c
 800f810:	08028868 	.word	0x08028868
 800f814:	08028874 	.word	0x08028874
 800f818:	08028880 	.word	0x08028880
 800f81c:	08023cf8 	.word	0x08023cf8
 800f820:	08028890 	.word	0x08028890
 800f824:	0802889c 	.word	0x0802889c
 800f828:	08023e84 	.word	0x08023e84
 800f82c:	080288a8 	.word	0x080288a8
 800f830:	080288c0 	.word	0x080288c0
 800f834:	080288d0 	.word	0x080288d0
		case 411 :
			strcpy(p->name,"MADISH");
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f83e:	4ab0      	ldr	r2, [pc, #704]	; (800fb00 <problem_fetch+0xe418>)
 800f840:	6810      	ldr	r0, [r2, #0]
 800f842:	6018      	str	r0, [r3, #0]
 800f844:	8891      	ldrh	r1, [r2, #4]
 800f846:	7992      	ldrb	r2, [r2, #6]
 800f848:	8099      	strh	r1, [r3, #4]
 800f84a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f852:	4aac      	ldr	r2, [pc, #688]	; (800fb04 <problem_fetch+0xe41c>)
 800f854:	6810      	ldr	r0, [r2, #0]
 800f856:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2207      	movs	r2, #7
 800f85c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,E,D");
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	33a4      	adds	r3, #164	; 0xa4
 800f862:	4aa9      	ldr	r2, [pc, #676]	; (800fb08 <problem_fetch+0xe420>)
 800f864:	461c      	mov	r4, r3
 800f866:	4613      	mov	r3, r2
 800f868:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f86a:	6020      	str	r0, [r4, #0]
 800f86c:	6061      	str	r1, [r4, #4]
 800f86e:	60a2      	str	r2, [r4, #8]
 800f870:	881b      	ldrh	r3, [r3, #0]
 800f872:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,16,18");
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	3304      	adds	r3, #4
 800f878:	4aa4      	ldr	r2, [pc, #656]	; (800fb0c <problem_fetch+0xe424>)
 800f87a:	461d      	mov	r5, r3
 800f87c:	4614      	mov	r4, r2
 800f87e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f880:	6028      	str	r0, [r5, #0]
 800f882:	6069      	str	r1, [r5, #4]
 800f884:	60aa      	str	r2, [r5, #8]
 800f886:	60eb      	str	r3, [r5, #12]
 800f888:	8823      	ldrh	r3, [r4, #0]
 800f88a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f892:	4a9f      	ldr	r2, [pc, #636]	; (800fb10 <problem_fetch+0xe428>)
 800f894:	461c      	mov	r4, r3
 800f896:	4613      	mov	r3, r2
 800f898:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f89a:	6020      	str	r0, [r4, #0]
 800f89c:	6061      	str	r1, [r4, #4]
 800f89e:	60a2      	str	r2, [r4, #8]
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	81a3      	strh	r3, [r4, #12]
			break;
 800f8a4:	f00c be50 	b.w	801c548 <problem_fetch+0x1ae60>
		case 412 :
			strcpy(p->name,"BAGHEERA");
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f8ae:	4999      	ldr	r1, [pc, #612]	; (800fb14 <problem_fetch+0xe42c>)
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	cb03      	ldmia	r3!, {r0, r1}
 800f8b6:	6010      	str	r0, [r2, #0]
 800f8b8:	6051      	str	r1, [r2, #4]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f8c4:	4a94      	ldr	r2, [pc, #592]	; (800fb18 <problem_fetch+0xe430>)
 800f8c6:	8811      	ldrh	r1, [r2, #0]
 800f8c8:	7892      	ldrb	r2, [r2, #2]
 800f8ca:	8019      	strh	r1, [r3, #0]
 800f8cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2207      	movs	r2, #7
 800f8d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,I,G,G,D");
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	33a4      	adds	r3, #164	; 0xa4
 800f8d8:	4a90      	ldr	r2, [pc, #576]	; (800fb1c <problem_fetch+0xe434>)
 800f8da:	461c      	mov	r4, r3
 800f8dc:	4613      	mov	r3, r2
 800f8de:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f8e0:	6020      	str	r0, [r4, #0]
 800f8e2:	6061      	str	r1, [r4, #4]
 800f8e4:	60a2      	str	r2, [r4, #8]
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,14,14,17,18");
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3304      	adds	r3, #4
 800f8ee:	4a8c      	ldr	r2, [pc, #560]	; (800fb20 <problem_fetch+0xe438>)
 800f8f0:	461d      	mov	r5, r3
 800f8f2:	4614      	mov	r4, r2
 800f8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f8f6:	6028      	str	r0, [r5, #0]
 800f8f8:	6069      	str	r1, [r5, #4]
 800f8fa:	60aa      	str	r2, [r5, #8]
 800f8fc:	60eb      	str	r3, [r5, #12]
 800f8fe:	8823      	ldrh	r3, [r4, #0]
 800f900:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f908:	4a86      	ldr	r2, [pc, #536]	; (800fb24 <problem_fetch+0xe43c>)
 800f90a:	461c      	mov	r4, r3
 800f90c:	4613      	mov	r3, r2
 800f90e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f910:	6020      	str	r0, [r4, #0]
 800f912:	6061      	str	r1, [r4, #4]
 800f914:	60a2      	str	r2, [r4, #8]
 800f916:	881b      	ldrh	r3, [r3, #0]
 800f918:	81a3      	strh	r3, [r4, #12]
			break;
 800f91a:	f00c be15 	b.w	801c548 <problem_fetch+0x1ae60>
		case 413 :
			strcpy(p->name,"BLACK CAVIAR");
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f924:	4a80      	ldr	r2, [pc, #512]	; (800fb28 <problem_fetch+0xe440>)
 800f926:	461c      	mov	r4, r3
 800f928:	4613      	mov	r3, r2
 800f92a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f92c:	6020      	str	r0, [r4, #0]
 800f92e:	6061      	str	r1, [r4, #4]
 800f930:	60a2      	str	r2, [r4, #8]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f93c:	4a7b      	ldr	r2, [pc, #492]	; (800fb2c <problem_fetch+0xe444>)
 800f93e:	8811      	ldrh	r1, [r2, #0]
 800f940:	7892      	ldrb	r2, [r2, #2]
 800f942:	8019      	strh	r1, [r3, #0]
 800f944:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	2208      	movs	r2, #8
 800f94a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,A,A,H,F,D");
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	33a4      	adds	r3, #164	; 0xa4
 800f950:	4a77      	ldr	r2, [pc, #476]	; (800fb30 <problem_fetch+0xe448>)
 800f952:	461c      	mov	r4, r3
 800f954:	4615      	mov	r5, r2
 800f956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f958:	6020      	str	r0, [r4, #0]
 800f95a:	6061      	str	r1, [r4, #4]
 800f95c:	60a2      	str	r2, [r4, #8]
 800f95e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,6,9,14,8,11,18");
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	3304      	adds	r3, #4
 800f964:	4a73      	ldr	r2, [pc, #460]	; (800fb34 <problem_fetch+0xe44c>)
 800f966:	461d      	mov	r5, r3
 800f968:	4614      	mov	r4, r2
 800f96a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f96c:	6028      	str	r0, [r5, #0]
 800f96e:	6069      	str	r1, [r5, #4]
 800f970:	60aa      	str	r2, [r5, #8]
 800f972:	60eb      	str	r3, [r5, #12]
 800f974:	8823      	ldrh	r3, [r4, #0]
 800f976:	78a2      	ldrb	r2, [r4, #2]
 800f978:	822b      	strh	r3, [r5, #16]
 800f97a:	4613      	mov	r3, r2
 800f97c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f984:	4a6c      	ldr	r2, [pc, #432]	; (800fb38 <problem_fetch+0xe450>)
 800f986:	461c      	mov	r4, r3
 800f988:	4615      	mov	r5, r2
 800f98a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f98c:	6020      	str	r0, [r4, #0]
 800f98e:	6061      	str	r1, [r4, #4]
 800f990:	60a2      	str	r2, [r4, #8]
 800f992:	60e3      	str	r3, [r4, #12]
			break;
 800f994:	f00c bdd8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 414 :
			strcpy(p->name,"HYPNOTIZED MINDS");
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800f99e:	4a67      	ldr	r2, [pc, #412]	; (800fb3c <problem_fetch+0xe454>)
 800f9a0:	461d      	mov	r5, r3
 800f9a2:	4614      	mov	r4, r2
 800f9a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9a6:	6028      	str	r0, [r5, #0]
 800f9a8:	6069      	str	r1, [r5, #4]
 800f9aa:	60aa      	str	r2, [r5, #8]
 800f9ac:	60eb      	str	r3, [r5, #12]
 800f9ae:	7823      	ldrb	r3, [r4, #0]
 800f9b0:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800f9b8:	4a52      	ldr	r2, [pc, #328]	; (800fb04 <problem_fetch+0xe41c>)
 800f9ba:	6810      	ldr	r0, [r2, #0]
 800f9bc:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2209      	movs	r2, #9
 800f9c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,G,J,I,C,H,J,I");
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	33a4      	adds	r3, #164	; 0xa4
 800f9c8:	4a5d      	ldr	r2, [pc, #372]	; (800fb40 <problem_fetch+0xe458>)
 800f9ca:	461d      	mov	r5, r3
 800f9cc:	4614      	mov	r4, r2
 800f9ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9d0:	6028      	str	r0, [r5, #0]
 800f9d2:	6069      	str	r1, [r5, #4]
 800f9d4:	60aa      	str	r2, [r5, #8]
 800f9d6:	60eb      	str	r3, [r5, #12]
 800f9d8:	8823      	ldrh	r3, [r4, #0]
 800f9da:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,12,15,8,8,5,18");
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	3304      	adds	r3, #4
 800f9e0:	4a58      	ldr	r2, [pc, #352]	; (800fb44 <problem_fetch+0xe45c>)
 800f9e2:	461d      	mov	r5, r3
 800f9e4:	4614      	mov	r4, r2
 800f9e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f9e8:	6028      	str	r0, [r5, #0]
 800f9ea:	6069      	str	r1, [r5, #4]
 800f9ec:	60aa      	str	r2, [r5, #8]
 800f9ee:	60eb      	str	r3, [r5, #12]
 800f9f0:	6820      	ldr	r0, [r4, #0]
 800f9f2:	6128      	str	r0, [r5, #16]
 800f9f4:	7923      	ldrb	r3, [r4, #4]
 800f9f6:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800f9fe:	4a52      	ldr	r2, [pc, #328]	; (800fb48 <problem_fetch+0xe460>)
 800fa00:	461d      	mov	r5, r3
 800fa02:	4614      	mov	r4, r2
 800fa04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa06:	6028      	str	r0, [r5, #0]
 800fa08:	6069      	str	r1, [r5, #4]
 800fa0a:	60aa      	str	r2, [r5, #8]
 800fa0c:	60eb      	str	r3, [r5, #12]
 800fa0e:	8823      	ldrh	r3, [r4, #0]
 800fa10:	822b      	strh	r3, [r5, #16]
			break;
 800fa12:	f00c bd99 	b.w	801c548 <problem_fetch+0x1ae60>
		case 415 :
			strcpy(p->name,"CHRIS THE STRONGEST");
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fa1c:	4a4b      	ldr	r2, [pc, #300]	; (800fb4c <problem_fetch+0xe464>)
 800fa1e:	461d      	mov	r5, r3
 800fa20:	4614      	mov	r4, r2
 800fa22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fa24:	6028      	str	r0, [r5, #0]
 800fa26:	6069      	str	r1, [r5, #4]
 800fa28:	60aa      	str	r2, [r5, #8]
 800fa2a:	60eb      	str	r3, [r5, #12]
 800fa2c:	6820      	ldr	r0, [r4, #0]
 800fa2e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7C");
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fa36:	4a46      	ldr	r2, [pc, #280]	; (800fb50 <problem_fetch+0xe468>)
 800fa38:	8811      	ldrh	r1, [r2, #0]
 800fa3a:	7892      	ldrb	r2, [r2, #2]
 800fa3c:	8019      	strh	r1, [r3, #0]
 800fa3e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2205      	movs	r2, #5
 800fa44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,D");
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	33a4      	adds	r3, #164	; 0xa4
 800fa4a:	4942      	ldr	r1, [pc, #264]	; (800fb54 <problem_fetch+0xe46c>)
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	460b      	mov	r3, r1
 800fa50:	cb03      	ldmia	r3!, {r0, r1}
 800fa52:	6010      	str	r0, [r2, #0]
 800fa54:	6051      	str	r1, [r2, #4]
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,5,11,14,18");
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	4a3e      	ldr	r2, [pc, #248]	; (800fb58 <problem_fetch+0xe470>)
 800fa60:	461c      	mov	r4, r3
 800fa62:	4613      	mov	r3, r2
 800fa64:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa66:	6020      	str	r0, [r4, #0]
 800fa68:	6061      	str	r1, [r4, #4]
 800fa6a:	60a2      	str	r2, [r4, #8]
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fa76:	4939      	ldr	r1, [pc, #228]	; (800fb5c <problem_fetch+0xe474>)
 800fa78:	461a      	mov	r2, r3
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	cb03      	ldmia	r3!, {r0, r1}
 800fa7e:	6010      	str	r0, [r2, #0]
 800fa80:	6051      	str	r1, [r2, #4]
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	8113      	strh	r3, [r2, #8]
			break;
 800fa86:	f00c bd5f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 416 :
			strcpy(p->name,"LE DOIGHT");
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fa90:	4933      	ldr	r1, [pc, #204]	; (800fb60 <problem_fetch+0xe478>)
 800fa92:	461a      	mov	r2, r3
 800fa94:	460b      	mov	r3, r1
 800fa96:	cb03      	ldmia	r3!, {r0, r1}
 800fa98:	6010      	str	r0, [r2, #0]
 800fa9a:	6051      	str	r1, [r2, #4]
 800fa9c:	881b      	ldrh	r3, [r3, #0]
 800fa9e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800faa6:	4a1c      	ldr	r2, [pc, #112]	; (800fb18 <problem_fetch+0xe430>)
 800faa8:	8811      	ldrh	r1, [r2, #0]
 800faaa:	7892      	ldrb	r2, [r2, #2]
 800faac:	8019      	strh	r1, [r3, #0]
 800faae:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2208      	movs	r2, #8
 800fab4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,E,C,G,I");
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	33a4      	adds	r3, #164	; 0xa4
 800faba:	4a2a      	ldr	r2, [pc, #168]	; (800fb64 <problem_fetch+0xe47c>)
 800fabc:	461c      	mov	r4, r3
 800fabe:	4615      	mov	r5, r2
 800fac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fac2:	6020      	str	r0, [r4, #0]
 800fac4:	6061      	str	r1, [r4, #4]
 800fac6:	60a2      	str	r2, [r4, #8]
 800fac8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	3304      	adds	r3, #4
 800face:	4a26      	ldr	r2, [pc, #152]	; (800fb68 <problem_fetch+0xe480>)
 800fad0:	461d      	mov	r5, r3
 800fad2:	4614      	mov	r4, r2
 800fad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fad6:	6028      	str	r0, [r5, #0]
 800fad8:	6069      	str	r1, [r5, #4]
 800fada:	60aa      	str	r2, [r5, #8]
 800fadc:	60eb      	str	r3, [r5, #12]
 800fade:	6820      	ldr	r0, [r4, #0]
 800fae0:	6128      	str	r0, [r5, #16]
 800fae2:	7923      	ldrb	r3, [r4, #4]
 800fae4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800faec:	4a1f      	ldr	r2, [pc, #124]	; (800fb6c <problem_fetch+0xe484>)
 800faee:	461c      	mov	r4, r3
 800faf0:	4615      	mov	r5, r2
 800faf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800faf4:	6020      	str	r0, [r4, #0]
 800faf6:	6061      	str	r1, [r4, #4]
 800faf8:	60a2      	str	r2, [r4, #8]
 800fafa:	60e3      	str	r3, [r4, #12]
			break;
 800fafc:	f00c bd24 	b.w	801c548 <problem_fetch+0x1ae60>
 800fb00:	080288e4 	.word	0x080288e4
 800fb04:	0802395c 	.word	0x0802395c
 800fb08:	080288ec 	.word	0x080288ec
 800fb0c:	080288fc 	.word	0x080288fc
 800fb10:	080239d4 	.word	0x080239d4
 800fb14:	08028910 	.word	0x08028910
 800fb18:	0802391c 	.word	0x0802391c
 800fb1c:	0802891c 	.word	0x0802891c
 800fb20:	0802892c 	.word	0x0802892c
 800fb24:	08023ae4 	.word	0x08023ae4
 800fb28:	08028940 	.word	0x08028940
 800fb2c:	08023a28 	.word	0x08023a28
 800fb30:	08028950 	.word	0x08028950
 800fb34:	08028960 	.word	0x08028960
 800fb38:	08023b6c 	.word	0x08023b6c
 800fb3c:	08028974 	.word	0x08028974
 800fb40:	08028988 	.word	0x08028988
 800fb44:	0802899c 	.word	0x0802899c
 800fb48:	08024940 	.word	0x08024940
 800fb4c:	080289b4 	.word	0x080289b4
 800fb50:	08024190 	.word	0x08024190
 800fb54:	080289c8 	.word	0x080289c8
 800fb58:	080289d4 	.word	0x080289d4
 800fb5c:	0802403c 	.word	0x0802403c
 800fb60:	080289e4 	.word	0x080289e4
 800fb64:	080289f0 	.word	0x080289f0
 800fb68:	08028a00 	.word	0x08028a00
 800fb6c:	08023a80 	.word	0x08023a80
		case 417 :
			strcpy(p->name,"LAPINERIE");
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fb76:	49a9      	ldr	r1, [pc, #676]	; (800fe1c <problem_fetch+0xe734>)
 800fb78:	461a      	mov	r2, r3
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	cb03      	ldmia	r3!, {r0, r1}
 800fb7e:	6010      	str	r0, [r2, #0]
 800fb80:	6051      	str	r1, [r2, #4]
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fb8c:	4aa4      	ldr	r2, [pc, #656]	; (800fe20 <problem_fetch+0xe738>)
 800fb8e:	6810      	ldr	r0, [r2, #0]
 800fb90:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2206      	movs	r2, #6
 800fb96:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,E,I");
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	33a4      	adds	r3, #164	; 0xa4
 800fb9c:	4aa1      	ldr	r2, [pc, #644]	; (800fe24 <problem_fetch+0xe73c>)
 800fb9e:	461c      	mov	r4, r3
 800fba0:	4613      	mov	r3, r2
 800fba2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fba4:	6020      	str	r0, [r4, #0]
 800fba6:	6061      	str	r1, [r4, #4]
 800fba8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	3304      	adds	r3, #4
 800fbae:	4a9e      	ldr	r2, [pc, #632]	; (800fe28 <problem_fetch+0xe740>)
 800fbb0:	461c      	mov	r4, r3
 800fbb2:	4615      	mov	r5, r2
 800fbb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fbb6:	6020      	str	r0, [r4, #0]
 800fbb8:	6061      	str	r1, [r4, #4]
 800fbba:	60a2      	str	r2, [r4, #8]
 800fbbc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fbc4:	4a99      	ldr	r2, [pc, #612]	; (800fe2c <problem_fetch+0xe744>)
 800fbc6:	461c      	mov	r4, r3
 800fbc8:	4613      	mov	r3, r2
 800fbca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fbcc:	6020      	str	r0, [r4, #0]
 800fbce:	6061      	str	r1, [r4, #4]
 800fbd0:	60a2      	str	r2, [r4, #8]
			break;
 800fbd2:	f00c bcb9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 418 :
			strcpy(p->name,"IL DOMANI");
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fbdc:	4994      	ldr	r1, [pc, #592]	; (800fe30 <problem_fetch+0xe748>)
 800fbde:	461a      	mov	r2, r3
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	cb03      	ldmia	r3!, {r0, r1}
 800fbe4:	6010      	str	r0, [r2, #0]
 800fbe6:	6051      	str	r1, [r2, #4]
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7C");
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fbf2:	4a90      	ldr	r2, [pc, #576]	; (800fe34 <problem_fetch+0xe74c>)
 800fbf4:	8811      	ldrh	r1, [r2, #0]
 800fbf6:	7892      	ldrb	r2, [r2, #2]
 800fbf8:	8019      	strh	r1, [r3, #0]
 800fbfa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2205      	movs	r2, #5
 800fc00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,H,E,I");
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	33a4      	adds	r3, #164	; 0xa4
 800fc06:	498c      	ldr	r1, [pc, #560]	; (800fe38 <problem_fetch+0xe750>)
 800fc08:	461a      	mov	r2, r3
 800fc0a:	460b      	mov	r3, r1
 800fc0c:	cb03      	ldmia	r3!, {r0, r1}
 800fc0e:	6010      	str	r0, [r2, #0]
 800fc10:	6051      	str	r1, [r2, #4]
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	3304      	adds	r3, #4
 800fc1a:	4a88      	ldr	r2, [pc, #544]	; (800fe3c <problem_fetch+0xe754>)
 800fc1c:	461c      	mov	r4, r3
 800fc1e:	4613      	mov	r3, r2
 800fc20:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fc22:	6020      	str	r0, [r4, #0]
 800fc24:	6061      	str	r1, [r4, #4]
 800fc26:	60a2      	str	r2, [r4, #8]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fc32:	4983      	ldr	r1, [pc, #524]	; (800fe40 <problem_fetch+0xe758>)
 800fc34:	461a      	mov	r2, r3
 800fc36:	460b      	mov	r3, r1
 800fc38:	cb03      	ldmia	r3!, {r0, r1}
 800fc3a:	6010      	str	r0, [r2, #0]
 800fc3c:	6051      	str	r1, [r2, #4]
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	8113      	strh	r3, [r2, #8]
			break;
 800fc42:	f00c bc81 	b.w	801c548 <problem_fetch+0x1ae60>
		case 419 :
			strcpy(p->name,"BLACK BEAN");
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fc4c:	497d      	ldr	r1, [pc, #500]	; (800fe44 <problem_fetch+0xe75c>)
 800fc4e:	461a      	mov	r2, r3
 800fc50:	460b      	mov	r3, r1
 800fc52:	cb03      	ldmia	r3!, {r0, r1}
 800fc54:	6010      	str	r0, [r2, #0]
 800fc56:	6051      	str	r1, [r2, #4]
 800fc58:	8819      	ldrh	r1, [r3, #0]
 800fc5a:	789b      	ldrb	r3, [r3, #2]
 800fc5c:	8111      	strh	r1, [r2, #8]
 800fc5e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fc66:	4a78      	ldr	r2, [pc, #480]	; (800fe48 <problem_fetch+0xe760>)
 800fc68:	6810      	ldr	r0, [r2, #0]
 800fc6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2208      	movs	r2, #8
 800fc70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,K,E,I,J,I");
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	33a4      	adds	r3, #164	; 0xa4
 800fc76:	4a75      	ldr	r2, [pc, #468]	; (800fe4c <problem_fetch+0xe764>)
 800fc78:	461c      	mov	r4, r3
 800fc7a:	4615      	mov	r5, r2
 800fc7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc7e:	6020      	str	r0, [r4, #0]
 800fc80:	6061      	str	r1, [r4, #4]
 800fc82:	60a2      	str	r2, [r4, #8]
 800fc84:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,12,14,9,9,5,18");
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	4a71      	ldr	r2, [pc, #452]	; (800fe50 <problem_fetch+0xe768>)
 800fc8c:	461d      	mov	r5, r3
 800fc8e:	4614      	mov	r4, r2
 800fc90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc92:	6028      	str	r0, [r5, #0]
 800fc94:	6069      	str	r1, [r5, #4]
 800fc96:	60aa      	str	r2, [r5, #8]
 800fc98:	60eb      	str	r3, [r5, #12]
 800fc9a:	8823      	ldrh	r3, [r4, #0]
 800fc9c:	78a2      	ldrb	r2, [r4, #2]
 800fc9e:	822b      	strh	r3, [r5, #16]
 800fca0:	4613      	mov	r3, r2
 800fca2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fcaa:	4a6a      	ldr	r2, [pc, #424]	; (800fe54 <problem_fetch+0xe76c>)
 800fcac:	461c      	mov	r4, r3
 800fcae:	4615      	mov	r5, r2
 800fcb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fcb2:	6020      	str	r0, [r4, #0]
 800fcb4:	6061      	str	r1, [r4, #4]
 800fcb6:	60a2      	str	r2, [r4, #8]
 800fcb8:	60e3      	str	r3, [r4, #12]
			break;
 800fcba:	f00c bc45 	b.w	801c548 <problem_fetch+0x1ae60>
		case 420 :
			strcpy(p->name,"CLASSY");
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fcc4:	4a64      	ldr	r2, [pc, #400]	; (800fe58 <problem_fetch+0xe770>)
 800fcc6:	6810      	ldr	r0, [r2, #0]
 800fcc8:	6018      	str	r0, [r3, #0]
 800fcca:	8891      	ldrh	r1, [r2, #4]
 800fccc:	7992      	ldrb	r2, [r2, #6]
 800fcce:	8099      	strh	r1, [r3, #4]
 800fcd0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fcd8:	4a60      	ldr	r2, [pc, #384]	; (800fe5c <problem_fetch+0xe774>)
 800fcda:	6810      	ldr	r0, [r2, #0]
 800fcdc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2205      	movs	r2, #5
 800fce2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D");
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	33a4      	adds	r3, #164	; 0xa4
 800fce8:	495d      	ldr	r1, [pc, #372]	; (800fe60 <problem_fetch+0xe778>)
 800fcea:	461a      	mov	r2, r3
 800fcec:	460b      	mov	r3, r1
 800fcee:	cb03      	ldmia	r3!, {r0, r1}
 800fcf0:	6010      	str	r0, [r2, #0]
 800fcf2:	6051      	str	r1, [r2, #4]
 800fcf4:	881b      	ldrh	r3, [r3, #0]
 800fcf6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,13,18");
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	4a59      	ldr	r2, [pc, #356]	; (800fe64 <problem_fetch+0xe77c>)
 800fcfe:	461c      	mov	r4, r3
 800fd00:	4613      	mov	r3, r2
 800fd02:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd04:	6020      	str	r0, [r4, #0]
 800fd06:	6061      	str	r1, [r4, #4]
 800fd08:	60a2      	str	r2, [r4, #8]
 800fd0a:	781b      	ldrb	r3, [r3, #0]
 800fd0c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fd14:	494a      	ldr	r1, [pc, #296]	; (800fe40 <problem_fetch+0xe758>)
 800fd16:	461a      	mov	r2, r3
 800fd18:	460b      	mov	r3, r1
 800fd1a:	cb03      	ldmia	r3!, {r0, r1}
 800fd1c:	6010      	str	r0, [r2, #0]
 800fd1e:	6051      	str	r1, [r2, #4]
 800fd20:	881b      	ldrh	r3, [r3, #0]
 800fd22:	8113      	strh	r3, [r2, #8]
			break;
 800fd24:	f00c bc10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 421 :
			strcpy(p->name,"THE 45 SECRETS");
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fd2e:	4a4e      	ldr	r2, [pc, #312]	; (800fe68 <problem_fetch+0xe780>)
 800fd30:	461c      	mov	r4, r3
 800fd32:	4613      	mov	r3, r2
 800fd34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd36:	6020      	str	r0, [r4, #0]
 800fd38:	6061      	str	r1, [r4, #4]
 800fd3a:	60a2      	str	r2, [r4, #8]
 800fd3c:	881a      	ldrh	r2, [r3, #0]
 800fd3e:	789b      	ldrb	r3, [r3, #2]
 800fd40:	81a2      	strh	r2, [r4, #12]
 800fd42:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fd4a:	4a44      	ldr	r2, [pc, #272]	; (800fe5c <problem_fetch+0xe774>)
 800fd4c:	6810      	ldr	r0, [r2, #0]
 800fd4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2207      	movs	r2, #7
 800fd54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,J,E,A,A");
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	33a4      	adds	r3, #164	; 0xa4
 800fd5a:	4a44      	ldr	r2, [pc, #272]	; (800fe6c <problem_fetch+0xe784>)
 800fd5c:	461c      	mov	r4, r3
 800fd5e:	4613      	mov	r3, r2
 800fd60:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd62:	6020      	str	r0, [r4, #0]
 800fd64:	6061      	str	r1, [r4, #4]
 800fd66:	60a2      	str	r2, [r4, #8]
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,18");
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	3304      	adds	r3, #4
 800fd70:	4a3f      	ldr	r2, [pc, #252]	; (800fe70 <problem_fetch+0xe788>)
 800fd72:	461d      	mov	r5, r3
 800fd74:	4614      	mov	r4, r2
 800fd76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd78:	6028      	str	r0, [r5, #0]
 800fd7a:	6069      	str	r1, [r5, #4]
 800fd7c:	60aa      	str	r2, [r5, #8]
 800fd7e:	60eb      	str	r3, [r5, #12]
 800fd80:	7823      	ldrb	r3, [r4, #0]
 800fd82:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fd8a:	4a3a      	ldr	r2, [pc, #232]	; (800fe74 <problem_fetch+0xe78c>)
 800fd8c:	461c      	mov	r4, r3
 800fd8e:	4613      	mov	r3, r2
 800fd90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd92:	6020      	str	r0, [r4, #0]
 800fd94:	6061      	str	r1, [r4, #4]
 800fd96:	60a2      	str	r2, [r4, #8]
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	81a3      	strh	r3, [r4, #12]
			break;
 800fd9c:	f00c bbd4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 422 :
			strcpy(p->name,"YOUR LAST PIECE OF CHALK");
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fda6:	4a34      	ldr	r2, [pc, #208]	; (800fe78 <problem_fetch+0xe790>)
 800fda8:	461d      	mov	r5, r3
 800fdaa:	4614      	mov	r4, r2
 800fdac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdae:	6028      	str	r0, [r5, #0]
 800fdb0:	6069      	str	r1, [r5, #4]
 800fdb2:	60aa      	str	r2, [r5, #8]
 800fdb4:	60eb      	str	r3, [r5, #12]
 800fdb6:	cc03      	ldmia	r4!, {r0, r1}
 800fdb8:	6128      	str	r0, [r5, #16]
 800fdba:	6169      	str	r1, [r5, #20]
 800fdbc:	7823      	ldrb	r3, [r4, #0]
 800fdbe:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fdc6:	4a25      	ldr	r2, [pc, #148]	; (800fe5c <problem_fetch+0xe774>)
 800fdc8:	6810      	ldr	r0, [r2, #0]
 800fdca:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2207      	movs	r2, #7
 800fdd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,K,I,F,I");
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	33a4      	adds	r3, #164	; 0xa4
 800fdd6:	4a29      	ldr	r2, [pc, #164]	; (800fe7c <problem_fetch+0xe794>)
 800fdd8:	461c      	mov	r4, r3
 800fdda:	4613      	mov	r3, r2
 800fddc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdde:	6020      	str	r0, [r4, #0]
 800fde0:	6061      	str	r1, [r4, #4]
 800fde2:	60a2      	str	r2, [r4, #8]
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,12,9,14,11,18");
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	3304      	adds	r3, #4
 800fdec:	4a24      	ldr	r2, [pc, #144]	; (800fe80 <problem_fetch+0xe798>)
 800fdee:	461d      	mov	r5, r3
 800fdf0:	4614      	mov	r4, r2
 800fdf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fdf4:	6028      	str	r0, [r5, #0]
 800fdf6:	6069      	str	r1, [r5, #4]
 800fdf8:	60aa      	str	r2, [r5, #8]
 800fdfa:	60eb      	str	r3, [r5, #12]
 800fdfc:	8823      	ldrh	r3, [r4, #0]
 800fdfe:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fe06:	4a1b      	ldr	r2, [pc, #108]	; (800fe74 <problem_fetch+0xe78c>)
 800fe08:	461c      	mov	r4, r3
 800fe0a:	4613      	mov	r3, r2
 800fe0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe0e:	6020      	str	r0, [r4, #0]
 800fe10:	6061      	str	r1, [r4, #4]
 800fe12:	60a2      	str	r2, [r4, #8]
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	81a3      	strh	r3, [r4, #12]
			break;
 800fe18:	f00c bb96 	b.w	801c548 <problem_fetch+0x1ae60>
 800fe1c:	08028a18 	.word	0x08028a18
 800fe20:	08023a98 	.word	0x08023a98
 800fe24:	08028a24 	.word	0x08028a24
 800fe28:	08028a30 	.word	0x08028a30
 800fe2c:	08023cf8 	.word	0x08023cf8
 800fe30:	08028a40 	.word	0x08028a40
 800fe34:	08024190 	.word	0x08024190
 800fe38:	08028a4c 	.word	0x08028a4c
 800fe3c:	08023f78 	.word	0x08023f78
 800fe40:	08023e28 	.word	0x08023e28
 800fe44:	08028a58 	.word	0x08028a58
 800fe48:	08023afc 	.word	0x08023afc
 800fe4c:	08028664 	.word	0x08028664
 800fe50:	08028a64 	.word	0x08028a64
 800fe54:	08023a80 	.word	0x08023a80
 800fe58:	08028a78 	.word	0x08028a78
 800fe5c:	0802395c 	.word	0x0802395c
 800fe60:	08028a80 	.word	0x08028a80
 800fe64:	08028a8c 	.word	0x08028a8c
 800fe68:	08028a9c 	.word	0x08028a9c
 800fe6c:	08028aac 	.word	0x08028aac
 800fe70:	08028abc 	.word	0x08028abc
 800fe74:	08023ae4 	.word	0x08023ae4
 800fe78:	08028ad0 	.word	0x08028ad0
 800fe7c:	08028aec 	.word	0x08028aec
 800fe80:	08028afc 	.word	0x08028afc
		case 423 :
			strcpy(p->name,"CASSIN");
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fe8a:	4ac0      	ldr	r2, [pc, #768]	; (801018c <problem_fetch+0xeaa4>)
 800fe8c:	6810      	ldr	r0, [r2, #0]
 800fe8e:	6018      	str	r0, [r3, #0]
 800fe90:	8891      	ldrh	r1, [r2, #4]
 800fe92:	7992      	ldrb	r2, [r2, #6]
 800fe94:	8099      	strh	r1, [r3, #4]
 800fe96:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800fe9e:	4abc      	ldr	r2, [pc, #752]	; (8010190 <problem_fetch+0xeaa8>)
 800fea0:	6810      	ldr	r0, [r2, #0]
 800fea2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2206      	movs	r2, #6
 800fea8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,A");
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	33a4      	adds	r3, #164	; 0xa4
 800feae:	4ab9      	ldr	r2, [pc, #740]	; (8010194 <problem_fetch+0xeaac>)
 800feb0:	461c      	mov	r4, r3
 800feb2:	4613      	mov	r3, r2
 800feb4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800feb6:	6020      	str	r0, [r4, #0]
 800feb8:	6061      	str	r1, [r4, #4]
 800feba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	3304      	adds	r3, #4
 800fec0:	4ab5      	ldr	r2, [pc, #724]	; (8010198 <problem_fetch+0xeab0>)
 800fec2:	461c      	mov	r4, r3
 800fec4:	4613      	mov	r3, r2
 800fec6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fec8:	6020      	str	r0, [r4, #0]
 800feca:	6061      	str	r1, [r4, #4]
 800fecc:	60a2      	str	r2, [r4, #8]
 800fece:	881a      	ldrh	r2, [r3, #0]
 800fed0:	789b      	ldrb	r3, [r3, #2]
 800fed2:	81a2      	strh	r2, [r4, #12]
 800fed4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800fedc:	4aaf      	ldr	r2, [pc, #700]	; (801019c <problem_fetch+0xeab4>)
 800fede:	461c      	mov	r4, r3
 800fee0:	4613      	mov	r3, r2
 800fee2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fee4:	6020      	str	r0, [r4, #0]
 800fee6:	6061      	str	r1, [r4, #4]
 800fee8:	60a2      	str	r2, [r4, #8]
			break;
 800feea:	f00c bb2d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 424 :
			strcpy(p->name,"HOTEL SOPRAMONTE");
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800fef4:	4aaa      	ldr	r2, [pc, #680]	; (80101a0 <problem_fetch+0xeab8>)
 800fef6:	461d      	mov	r5, r3
 800fef8:	4614      	mov	r4, r2
 800fefa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fefc:	6028      	str	r0, [r5, #0]
 800fefe:	6069      	str	r1, [r5, #4]
 800ff00:	60aa      	str	r2, [r5, #8]
 800ff02:	60eb      	str	r3, [r5, #12]
 800ff04:	7823      	ldrb	r3, [r4, #0]
 800ff06:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B");
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff0e:	4aa5      	ldr	r2, [pc, #660]	; (80101a4 <problem_fetch+0xeabc>)
 800ff10:	8811      	ldrh	r1, [r2, #0]
 800ff12:	7892      	ldrb	r2, [r2, #2]
 800ff14:	8019      	strh	r1, [r3, #0]
 800ff16:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2205      	movs	r2, #5
 800ff1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,G,I");
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	33a4      	adds	r3, #164	; 0xa4
 800ff22:	49a1      	ldr	r1, [pc, #644]	; (80101a8 <problem_fetch+0xeac0>)
 800ff24:	461a      	mov	r2, r3
 800ff26:	460b      	mov	r3, r1
 800ff28:	cb03      	ldmia	r3!, {r0, r1}
 800ff2a:	6010      	str	r0, [r2, #0]
 800ff2c:	6051      	str	r1, [r2, #4]
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	3304      	adds	r3, #4
 800ff36:	4a9d      	ldr	r2, [pc, #628]	; (80101ac <problem_fetch+0xeac4>)
 800ff38:	461c      	mov	r4, r3
 800ff3a:	4613      	mov	r3, r2
 800ff3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff3e:	6020      	str	r0, [r4, #0]
 800ff40:	6061      	str	r1, [r4, #4]
 800ff42:	60a2      	str	r2, [r4, #8]
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ff4e:	4998      	ldr	r1, [pc, #608]	; (80101b0 <problem_fetch+0xeac8>)
 800ff50:	461a      	mov	r2, r3
 800ff52:	460b      	mov	r3, r1
 800ff54:	cb03      	ldmia	r3!, {r0, r1}
 800ff56:	6010      	str	r0, [r2, #0]
 800ff58:	6051      	str	r1, [r2, #4]
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	8113      	strh	r3, [r2, #8]
			break;
 800ff5e:	f00c baf3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 425 :
			strcpy(p->name,"THE GOLDEN GATE");
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ff68:	4a92      	ldr	r2, [pc, #584]	; (80101b4 <problem_fetch+0xeacc>)
 800ff6a:	461c      	mov	r4, r3
 800ff6c:	4615      	mov	r5, r2
 800ff6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff70:	6020      	str	r0, [r4, #0]
 800ff72:	6061      	str	r1, [r4, #4]
 800ff74:	60a2      	str	r2, [r4, #8]
 800ff76:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ff7e:	4a8e      	ldr	r2, [pc, #568]	; (80101b8 <problem_fetch+0xead0>)
 800ff80:	6810      	ldr	r0, [r2, #0]
 800ff82:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	2206      	movs	r2, #6
 800ff88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,B,D");
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	33a4      	adds	r3, #164	; 0xa4
 800ff8e:	4a8b      	ldr	r2, [pc, #556]	; (80101bc <problem_fetch+0xead4>)
 800ff90:	461c      	mov	r4, r3
 800ff92:	4613      	mov	r3, r2
 800ff94:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff96:	6020      	str	r0, [r4, #0]
 800ff98:	6061      	str	r1, [r4, #4]
 800ff9a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,12,15,18");
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	4a87      	ldr	r2, [pc, #540]	; (80101c0 <problem_fetch+0xead8>)
 800ffa2:	461c      	mov	r4, r3
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffa8:	6020      	str	r0, [r4, #0]
 800ffaa:	6061      	str	r1, [r4, #4]
 800ffac:	60a2      	str	r2, [r4, #8]
 800ffae:	881a      	ldrh	r2, [r3, #0]
 800ffb0:	789b      	ldrb	r3, [r3, #2]
 800ffb2:	81a2      	strh	r2, [r4, #12]
 800ffb4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 800ffbc:	4a81      	ldr	r2, [pc, #516]	; (80101c4 <problem_fetch+0xeadc>)
 800ffbe:	461c      	mov	r4, r3
 800ffc0:	4613      	mov	r3, r2
 800ffc2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffc4:	6020      	str	r0, [r4, #0]
 800ffc6:	6061      	str	r1, [r4, #4]
 800ffc8:	60a2      	str	r2, [r4, #8]
			break;
 800ffca:	f00c babd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 426 :
			strcpy(p->name,"VASIL VASIL");
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ffd4:	4a7c      	ldr	r2, [pc, #496]	; (80101c8 <problem_fetch+0xeae0>)
 800ffd6:	461c      	mov	r4, r3
 800ffd8:	4613      	mov	r3, r2
 800ffda:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ffdc:	6020      	str	r0, [r4, #0]
 800ffde:	6061      	str	r1, [r4, #4]
 800ffe0:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800ffe8:	4a6e      	ldr	r2, [pc, #440]	; (80101a4 <problem_fetch+0xeabc>)
 800ffea:	8811      	ldrh	r1, [r2, #0]
 800ffec:	7892      	ldrb	r2, [r2, #2]
 800ffee:	8019      	strh	r1, [r3, #0]
 800fff0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2206      	movs	r2, #6
 800fff6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,J,H,I");
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	33a4      	adds	r3, #164	; 0xa4
 800fffc:	4a73      	ldr	r2, [pc, #460]	; (80101cc <problem_fetch+0xeae4>)
 800fffe:	461c      	mov	r4, r3
 8010000:	4613      	mov	r3, r2
 8010002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010004:	6020      	str	r0, [r4, #0]
 8010006:	6061      	str	r1, [r4, #4]
 8010008:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,16,18");
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	3304      	adds	r3, #4
 801000e:	4a70      	ldr	r2, [pc, #448]	; (80101d0 <problem_fetch+0xeae8>)
 8010010:	461c      	mov	r4, r3
 8010012:	4613      	mov	r3, r2
 8010014:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010016:	6020      	str	r0, [r4, #0]
 8010018:	6061      	str	r1, [r4, #4]
 801001a:	60a2      	str	r2, [r4, #8]
 801001c:	881a      	ldrh	r2, [r3, #0]
 801001e:	789b      	ldrb	r3, [r3, #2]
 8010020:	81a2      	strh	r2, [r4, #12]
 8010022:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801002a:	4a66      	ldr	r2, [pc, #408]	; (80101c4 <problem_fetch+0xeadc>)
 801002c:	461c      	mov	r4, r3
 801002e:	4613      	mov	r3, r2
 8010030:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010032:	6020      	str	r0, [r4, #0]
 8010034:	6061      	str	r1, [r4, #4]
 8010036:	60a2      	str	r2, [r4, #8]
			break;
 8010038:	f00c ba86 	b.w	801c548 <problem_fetch+0x1ae60>
		case 427 :
			strcpy(p->name,"WITNESS THE FITNESS");
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010042:	4a64      	ldr	r2, [pc, #400]	; (80101d4 <problem_fetch+0xeaec>)
 8010044:	461d      	mov	r5, r3
 8010046:	4614      	mov	r4, r2
 8010048:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801004a:	6028      	str	r0, [r5, #0]
 801004c:	6069      	str	r1, [r5, #4]
 801004e:	60aa      	str	r2, [r5, #8]
 8010050:	60eb      	str	r3, [r5, #12]
 8010052:	6820      	ldr	r0, [r4, #0]
 8010054:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801005c:	4a56      	ldr	r2, [pc, #344]	; (80101b8 <problem_fetch+0xead0>)
 801005e:	6810      	ldr	r0, [r2, #0]
 8010060:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2207      	movs	r2, #7
 8010066:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,B,E,B,E,D");
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	33a4      	adds	r3, #164	; 0xa4
 801006c:	4a5a      	ldr	r2, [pc, #360]	; (80101d8 <problem_fetch+0xeaf0>)
 801006e:	461c      	mov	r4, r3
 8010070:	4613      	mov	r3, r2
 8010072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010074:	6020      	str	r0, [r4, #0]
 8010076:	6061      	str	r1, [r4, #4]
 8010078:	60a2      	str	r2, [r4, #8]
 801007a:	881b      	ldrh	r3, [r3, #0]
 801007c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,15,6,18");
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	3304      	adds	r3, #4
 8010082:	4a56      	ldr	r2, [pc, #344]	; (80101dc <problem_fetch+0xeaf4>)
 8010084:	461d      	mov	r5, r3
 8010086:	4614      	mov	r4, r2
 8010088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801008a:	6028      	str	r0, [r5, #0]
 801008c:	6069      	str	r1, [r5, #4]
 801008e:	60aa      	str	r2, [r5, #8]
 8010090:	60eb      	str	r3, [r5, #12]
 8010092:	8823      	ldrh	r3, [r4, #0]
 8010094:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801009c:	4a50      	ldr	r2, [pc, #320]	; (80101e0 <problem_fetch+0xeaf8>)
 801009e:	461c      	mov	r4, r3
 80100a0:	4613      	mov	r3, r2
 80100a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100a4:	6020      	str	r0, [r4, #0]
 80100a6:	6061      	str	r1, [r4, #4]
 80100a8:	60a2      	str	r2, [r4, #8]
 80100aa:	881b      	ldrh	r3, [r3, #0]
 80100ac:	81a3      	strh	r3, [r4, #12]
			break;
 80100ae:	f00c ba4b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 428 :
			strcpy(p->name,"LAST MOMENT");
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80100b8:	4a4a      	ldr	r2, [pc, #296]	; (80101e4 <problem_fetch+0xeafc>)
 80100ba:	461c      	mov	r4, r3
 80100bc:	4613      	mov	r3, r2
 80100be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100c0:	6020      	str	r0, [r4, #0]
 80100c2:	6061      	str	r1, [r4, #4]
 80100c4:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80100cc:	4a3a      	ldr	r2, [pc, #232]	; (80101b8 <problem_fetch+0xead0>)
 80100ce:	6810      	ldr	r0, [r2, #0]
 80100d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2205      	movs	r2, #5
 80100d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,G,I");
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	33a4      	adds	r3, #164	; 0xa4
 80100dc:	4942      	ldr	r1, [pc, #264]	; (80101e8 <problem_fetch+0xeb00>)
 80100de:	461a      	mov	r2, r3
 80100e0:	460b      	mov	r3, r1
 80100e2:	cb03      	ldmia	r3!, {r0, r1}
 80100e4:	6010      	str	r0, [r2, #0]
 80100e6:	6051      	str	r1, [r2, #4]
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,14,18");
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	3304      	adds	r3, #4
 80100f0:	4a3e      	ldr	r2, [pc, #248]	; (80101ec <problem_fetch+0xeb04>)
 80100f2:	461c      	mov	r4, r3
 80100f4:	4613      	mov	r3, r2
 80100f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80100f8:	6020      	str	r0, [r4, #0]
 80100fa:	6061      	str	r1, [r4, #4]
 80100fc:	60a2      	str	r2, [r4, #8]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010108:	4929      	ldr	r1, [pc, #164]	; (80101b0 <problem_fetch+0xeac8>)
 801010a:	461a      	mov	r2, r3
 801010c:	460b      	mov	r3, r1
 801010e:	cb03      	ldmia	r3!, {r0, r1}
 8010110:	6010      	str	r0, [r2, #0]
 8010112:	6051      	str	r1, [r2, #4]
 8010114:	881b      	ldrh	r3, [r3, #0]
 8010116:	8113      	strh	r3, [r2, #8]
			break;
 8010118:	f00c ba16 	b.w	801c548 <problem_fetch+0x1ae60>
		case 429 :
			strcpy(p->name,"THE PROCESS");
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010122:	4a33      	ldr	r2, [pc, #204]	; (80101f0 <problem_fetch+0xeb08>)
 8010124:	461c      	mov	r4, r3
 8010126:	4613      	mov	r3, r2
 8010128:	cb07      	ldmia	r3!, {r0, r1, r2}
 801012a:	6020      	str	r0, [r4, #0]
 801012c:	6061      	str	r1, [r4, #4]
 801012e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010136:	4a2f      	ldr	r2, [pc, #188]	; (80101f4 <problem_fetch+0xeb0c>)
 8010138:	6810      	ldr	r0, [r2, #0]
 801013a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2208      	movs	r2, #8
 8010140:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,J,G,K,H,D");
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	33a4      	adds	r3, #164	; 0xa4
 8010146:	4a2c      	ldr	r2, [pc, #176]	; (80101f8 <problem_fetch+0xeb10>)
 8010148:	461c      	mov	r4, r3
 801014a:	4615      	mov	r5, r2
 801014c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801014e:	6020      	str	r0, [r4, #0]
 8010150:	6061      	str	r1, [r4, #4]
 8010152:	60a2      	str	r2, [r4, #8]
 8010154:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,13,17,16,16,18");
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3304      	adds	r3, #4
 801015a:	4a28      	ldr	r2, [pc, #160]	; (80101fc <problem_fetch+0xeb14>)
 801015c:	461d      	mov	r5, r3
 801015e:	4614      	mov	r4, r2
 8010160:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010162:	6028      	str	r0, [r5, #0]
 8010164:	6069      	str	r1, [r5, #4]
 8010166:	60aa      	str	r2, [r5, #8]
 8010168:	60eb      	str	r3, [r5, #12]
 801016a:	6820      	ldr	r0, [r4, #0]
 801016c:	6128      	str	r0, [r5, #16]
 801016e:	7923      	ldrb	r3, [r4, #4]
 8010170:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010178:	4a21      	ldr	r2, [pc, #132]	; (8010200 <problem_fetch+0xeb18>)
 801017a:	461c      	mov	r4, r3
 801017c:	4615      	mov	r5, r2
 801017e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010180:	6020      	str	r0, [r4, #0]
 8010182:	6061      	str	r1, [r4, #4]
 8010184:	60a2      	str	r2, [r4, #8]
 8010186:	60e3      	str	r3, [r4, #12]
			break;
 8010188:	f00c b9de 	b.w	801c548 <problem_fetch+0x1ae60>
 801018c:	08028b10 	.word	0x08028b10
 8010190:	08023afc 	.word	0x08023afc
 8010194:	08028b18 	.word	0x08028b18
 8010198:	08028b24 	.word	0x08028b24
 801019c:	0802393c 	.word	0x0802393c
 80101a0:	08028b34 	.word	0x08028b34
 80101a4:	08024054 	.word	0x08024054
 80101a8:	08028b48 	.word	0x08028b48
 80101ac:	08028b54 	.word	0x08028b54
 80101b0:	08023e28 	.word	0x08023e28
 80101b4:	08028b64 	.word	0x08028b64
 80101b8:	0802395c 	.word	0x0802395c
 80101bc:	08028b74 	.word	0x08028b74
 80101c0:	08028b80 	.word	0x08028b80
 80101c4:	08023cf8 	.word	0x08023cf8
 80101c8:	08028b90 	.word	0x08028b90
 80101cc:	08028b9c 	.word	0x08028b9c
 80101d0:	08028ba8 	.word	0x08028ba8
 80101d4:	08028bb8 	.word	0x08028bb8
 80101d8:	08028bcc 	.word	0x08028bcc
 80101dc:	08028bdc 	.word	0x08028bdc
 80101e0:	08023ae4 	.word	0x08023ae4
 80101e4:	08028bf0 	.word	0x08028bf0
 80101e8:	08028bfc 	.word	0x08028bfc
 80101ec:	08028c08 	.word	0x08028c08
 80101f0:	08028c18 	.word	0x08028c18
 80101f4:	080239f4 	.word	0x080239f4
 80101f8:	08028c24 	.word	0x08028c24
 80101fc:	08028c34 	.word	0x08028c34
 8010200:	08023a80 	.word	0x08023a80
		case 430 :
			strcpy(p->name,"THE FUNERAL (RIP PINCH)");
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801020a:	4ac3      	ldr	r2, [pc, #780]	; (8010518 <problem_fetch+0xee30>)
 801020c:	461d      	mov	r5, r3
 801020e:	4614      	mov	r4, r2
 8010210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010212:	6028      	str	r0, [r5, #0]
 8010214:	6069      	str	r1, [r5, #4]
 8010216:	60aa      	str	r2, [r5, #8]
 8010218:	60eb      	str	r3, [r5, #12]
 801021a:	cc03      	ldmia	r4!, {r0, r1}
 801021c:	6128      	str	r0, [r5, #16]
 801021e:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010226:	4abd      	ldr	r2, [pc, #756]	; (801051c <problem_fetch+0xee34>)
 8010228:	6810      	ldr	r0, [r2, #0]
 801022a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2206      	movs	r2, #6
 8010230:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,G,I");
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	33a4      	adds	r3, #164	; 0xa4
 8010236:	4aba      	ldr	r2, [pc, #744]	; (8010520 <problem_fetch+0xee38>)
 8010238:	461c      	mov	r4, r3
 801023a:	4613      	mov	r3, r2
 801023c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801023e:	6020      	str	r0, [r4, #0]
 8010240:	6061      	str	r1, [r4, #4]
 8010242:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	3304      	adds	r3, #4
 8010248:	4ab6      	ldr	r2, [pc, #728]	; (8010524 <problem_fetch+0xee3c>)
 801024a:	461c      	mov	r4, r3
 801024c:	4615      	mov	r5, r2
 801024e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010250:	6020      	str	r0, [r4, #0]
 8010252:	6061      	str	r1, [r4, #4]
 8010254:	60a2      	str	r2, [r4, #8]
 8010256:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801025e:	4ab2      	ldr	r2, [pc, #712]	; (8010528 <problem_fetch+0xee40>)
 8010260:	461c      	mov	r4, r3
 8010262:	4613      	mov	r3, r2
 8010264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010266:	6020      	str	r0, [r4, #0]
 8010268:	6061      	str	r1, [r4, #4]
 801026a:	60a2      	str	r2, [r4, #8]
			break;
 801026c:	f00c b96c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 431 :
			strcpy(p->name,"THE PINCH OF DEATH");
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010276:	4aad      	ldr	r2, [pc, #692]	; (801052c <problem_fetch+0xee44>)
 8010278:	461d      	mov	r5, r3
 801027a:	4614      	mov	r4, r2
 801027c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801027e:	6028      	str	r0, [r5, #0]
 8010280:	6069      	str	r1, [r5, #4]
 8010282:	60aa      	str	r2, [r5, #8]
 8010284:	60eb      	str	r3, [r5, #12]
 8010286:	8823      	ldrh	r3, [r4, #0]
 8010288:	78a2      	ldrb	r2, [r4, #2]
 801028a:	822b      	strh	r3, [r5, #16]
 801028c:	4613      	mov	r3, r2
 801028e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010296:	4aa6      	ldr	r2, [pc, #664]	; (8010530 <problem_fetch+0xee48>)
 8010298:	8811      	ldrh	r1, [r2, #0]
 801029a:	7892      	ldrb	r2, [r2, #2]
 801029c:	8019      	strh	r1, [r3, #0]
 801029e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2206      	movs	r2, #6
 80102a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,D,D,A");
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	33a4      	adds	r3, #164	; 0xa4
 80102aa:	4aa2      	ldr	r2, [pc, #648]	; (8010534 <problem_fetch+0xee4c>)
 80102ac:	461c      	mov	r4, r3
 80102ae:	4613      	mov	r3, r2
 80102b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102b2:	6020      	str	r0, [r4, #0]
 80102b4:	6061      	str	r1, [r4, #4]
 80102b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,11,15,18");
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	3304      	adds	r3, #4
 80102bc:	4a99      	ldr	r2, [pc, #612]	; (8010524 <problem_fetch+0xee3c>)
 80102be:	461c      	mov	r4, r3
 80102c0:	4615      	mov	r5, r2
 80102c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80102c4:	6020      	str	r0, [r4, #0]
 80102c6:	6061      	str	r1, [r4, #4]
 80102c8:	60a2      	str	r2, [r4, #8]
 80102ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80102d2:	4a95      	ldr	r2, [pc, #596]	; (8010528 <problem_fetch+0xee40>)
 80102d4:	461c      	mov	r4, r3
 80102d6:	4613      	mov	r3, r2
 80102d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102da:	6020      	str	r0, [r4, #0]
 80102dc:	6061      	str	r1, [r4, #4]
 80102de:	60a2      	str	r2, [r4, #8]
			break;
 80102e0:	f00c b932 	b.w	801c548 <problem_fetch+0x1ae60>
		case 432 :
			strcpy(p->name,"COBRA REALE");
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80102ea:	4a93      	ldr	r2, [pc, #588]	; (8010538 <problem_fetch+0xee50>)
 80102ec:	461c      	mov	r4, r3
 80102ee:	4613      	mov	r3, r2
 80102f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80102f2:	6020      	str	r0, [r4, #0]
 80102f4:	6061      	str	r1, [r4, #4]
 80102f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80102fe:	4a8f      	ldr	r2, [pc, #572]	; (801053c <problem_fetch+0xee54>)
 8010300:	6810      	ldr	r0, [r2, #0]
 8010302:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2206      	movs	r2, #6
 8010308:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,A");
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	33a4      	adds	r3, #164	; 0xa4
 801030e:	4a8c      	ldr	r2, [pc, #560]	; (8010540 <problem_fetch+0xee58>)
 8010310:	461c      	mov	r4, r3
 8010312:	4613      	mov	r3, r2
 8010314:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010316:	6020      	str	r0, [r4, #0]
 8010318:	6061      	str	r1, [r4, #4]
 801031a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,14,18");
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3304      	adds	r3, #4
 8010320:	4a88      	ldr	r2, [pc, #544]	; (8010544 <problem_fetch+0xee5c>)
 8010322:	461c      	mov	r4, r3
 8010324:	4613      	mov	r3, r2
 8010326:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010328:	6020      	str	r0, [r4, #0]
 801032a:	6061      	str	r1, [r4, #4]
 801032c:	60a2      	str	r2, [r4, #8]
 801032e:	881a      	ldrh	r2, [r3, #0]
 8010330:	789b      	ldrb	r3, [r3, #2]
 8010332:	81a2      	strh	r2, [r4, #12]
 8010334:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801033c:	4a82      	ldr	r2, [pc, #520]	; (8010548 <problem_fetch+0xee60>)
 801033e:	461c      	mov	r4, r3
 8010340:	4613      	mov	r3, r2
 8010342:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010344:	6020      	str	r0, [r4, #0]
 8010346:	6061      	str	r1, [r4, #4]
 8010348:	60a2      	str	r2, [r4, #8]
			break;
 801034a:	f00c b8fd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 433 :
			strcpy(p->name,"OMBRA");
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010354:	4a7d      	ldr	r2, [pc, #500]	; (801054c <problem_fetch+0xee64>)
 8010356:	6810      	ldr	r0, [r2, #0]
 8010358:	6018      	str	r0, [r3, #0]
 801035a:	8892      	ldrh	r2, [r2, #4]
 801035c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010364:	4a6d      	ldr	r2, [pc, #436]	; (801051c <problem_fetch+0xee34>)
 8010366:	6810      	ldr	r0, [r2, #0]
 8010368:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2207      	movs	r2, #7
 801036e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,G,D");
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	33a4      	adds	r3, #164	; 0xa4
 8010374:	4a76      	ldr	r2, [pc, #472]	; (8010550 <problem_fetch+0xee68>)
 8010376:	461c      	mov	r4, r3
 8010378:	4613      	mov	r3, r2
 801037a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801037c:	6020      	str	r0, [r4, #0]
 801037e:	6061      	str	r1, [r4, #4]
 8010380:	60a2      	str	r2, [r4, #8]
 8010382:	881b      	ldrh	r3, [r3, #0]
 8010384:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,14,17,18");
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3304      	adds	r3, #4
 801038a:	4a72      	ldr	r2, [pc, #456]	; (8010554 <problem_fetch+0xee6c>)
 801038c:	461d      	mov	r5, r3
 801038e:	4614      	mov	r4, r2
 8010390:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010392:	6028      	str	r0, [r5, #0]
 8010394:	6069      	str	r1, [r5, #4]
 8010396:	60aa      	str	r2, [r5, #8]
 8010398:	60eb      	str	r3, [r5, #12]
 801039a:	8823      	ldrh	r3, [r4, #0]
 801039c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80103a4:	4a6c      	ldr	r2, [pc, #432]	; (8010558 <problem_fetch+0xee70>)
 80103a6:	461c      	mov	r4, r3
 80103a8:	4613      	mov	r3, r2
 80103aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103ac:	6020      	str	r0, [r4, #0]
 80103ae:	6061      	str	r1, [r4, #4]
 80103b0:	60a2      	str	r2, [r4, #8]
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	81a3      	strh	r3, [r4, #12]
			break;
 80103b6:	f00c b8c7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 434 :
			strcpy(p->name,"CORNALBA");
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80103c0:	4966      	ldr	r1, [pc, #408]	; (801055c <problem_fetch+0xee74>)
 80103c2:	461a      	mov	r2, r3
 80103c4:	460b      	mov	r3, r1
 80103c6:	cb03      	ldmia	r3!, {r0, r1}
 80103c8:	6010      	str	r0, [r2, #0]
 80103ca:	6051      	str	r1, [r2, #4]
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80103d6:	4a59      	ldr	r2, [pc, #356]	; (801053c <problem_fetch+0xee54>)
 80103d8:	6810      	ldr	r0, [r2, #0]
 80103da:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2207      	movs	r2, #7
 80103e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,H,H,J,K,I");
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	33a4      	adds	r3, #164	; 0xa4
 80103e6:	4a5e      	ldr	r2, [pc, #376]	; (8010560 <problem_fetch+0xee78>)
 80103e8:	461c      	mov	r4, r3
 80103ea:	4613      	mov	r3, r2
 80103ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80103ee:	6020      	str	r0, [r4, #0]
 80103f0:	6061      	str	r1, [r4, #4]
 80103f2:	60a2      	str	r2, [r4, #8]
 80103f4:	881b      	ldrh	r3, [r3, #0]
 80103f6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,12,12,16,18");
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	3304      	adds	r3, #4
 80103fc:	4a59      	ldr	r2, [pc, #356]	; (8010564 <problem_fetch+0xee7c>)
 80103fe:	461d      	mov	r5, r3
 8010400:	4614      	mov	r4, r2
 8010402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010404:	6028      	str	r0, [r5, #0]
 8010406:	6069      	str	r1, [r5, #4]
 8010408:	60aa      	str	r2, [r5, #8]
 801040a:	60eb      	str	r3, [r5, #12]
 801040c:	8823      	ldrh	r3, [r4, #0]
 801040e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010416:	4a54      	ldr	r2, [pc, #336]	; (8010568 <problem_fetch+0xee80>)
 8010418:	461c      	mov	r4, r3
 801041a:	4613      	mov	r3, r2
 801041c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801041e:	6020      	str	r0, [r4, #0]
 8010420:	6061      	str	r1, [r4, #4]
 8010422:	60a2      	str	r2, [r4, #8]
 8010424:	881b      	ldrh	r3, [r3, #0]
 8010426:	81a3      	strh	r3, [r4, #12]
			break;
 8010428:	f00c b88e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 435 :
			strcpy(p->name,"BIOGRAPHIE");
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010432:	494e      	ldr	r1, [pc, #312]	; (801056c <problem_fetch+0xee84>)
 8010434:	461a      	mov	r2, r3
 8010436:	460b      	mov	r3, r1
 8010438:	cb03      	ldmia	r3!, {r0, r1}
 801043a:	6010      	str	r0, [r2, #0]
 801043c:	6051      	str	r1, [r2, #4]
 801043e:	8819      	ldrh	r1, [r3, #0]
 8010440:	789b      	ldrb	r3, [r3, #2]
 8010442:	8111      	strh	r1, [r2, #8]
 8010444:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801044c:	4a48      	ldr	r2, [pc, #288]	; (8010570 <problem_fetch+0xee88>)
 801044e:	8811      	ldrh	r1, [r2, #0]
 8010450:	7892      	ldrb	r2, [r2, #2]
 8010452:	8019      	strh	r1, [r3, #0]
 8010454:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2207      	movs	r2, #7
 801045a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,H,E,D");
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	33a4      	adds	r3, #164	; 0xa4
 8010460:	4a44      	ldr	r2, [pc, #272]	; (8010574 <problem_fetch+0xee8c>)
 8010462:	461c      	mov	r4, r3
 8010464:	4613      	mov	r3, r2
 8010466:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010468:	6020      	str	r0, [r4, #0]
 801046a:	6061      	str	r1, [r4, #4]
 801046c:	60a2      	str	r2, [r4, #8]
 801046e:	881b      	ldrh	r3, [r3, #0]
 8010470:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,16,18");
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3304      	adds	r3, #4
 8010476:	4a40      	ldr	r2, [pc, #256]	; (8010578 <problem_fetch+0xee90>)
 8010478:	461d      	mov	r5, r3
 801047a:	4614      	mov	r4, r2
 801047c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801047e:	6028      	str	r0, [r5, #0]
 8010480:	6069      	str	r1, [r5, #4]
 8010482:	60aa      	str	r2, [r5, #8]
 8010484:	60eb      	str	r3, [r5, #12]
 8010486:	8823      	ldrh	r3, [r4, #0]
 8010488:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010490:	4a35      	ldr	r2, [pc, #212]	; (8010568 <problem_fetch+0xee80>)
 8010492:	461c      	mov	r4, r3
 8010494:	4613      	mov	r3, r2
 8010496:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010498:	6020      	str	r0, [r4, #0]
 801049a:	6061      	str	r1, [r4, #4]
 801049c:	60a2      	str	r2, [r4, #8]
 801049e:	881b      	ldrh	r3, [r3, #0]
 80104a0:	81a3      	strh	r3, [r4, #12]
			break;
 80104a2:	f00c b851 	b.w	801c548 <problem_fetch+0x1ae60>
		case 436 :
			strcpy(p->name,"LITTLEFINGER");
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80104ac:	4a33      	ldr	r2, [pc, #204]	; (801057c <problem_fetch+0xee94>)
 80104ae:	461c      	mov	r4, r3
 80104b0:	4613      	mov	r3, r2
 80104b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80104b4:	6020      	str	r0, [r4, #0]
 80104b6:	6061      	str	r1, [r4, #4]
 80104b8:	60a2      	str	r2, [r4, #8]
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80104c4:	4a1a      	ldr	r2, [pc, #104]	; (8010530 <problem_fetch+0xee48>)
 80104c6:	8811      	ldrh	r1, [r2, #0]
 80104c8:	7892      	ldrb	r2, [r2, #2]
 80104ca:	8019      	strh	r1, [r3, #0]
 80104cc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2205      	movs	r2, #5
 80104d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,I");
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	33a4      	adds	r3, #164	; 0xa4
 80104d8:	4929      	ldr	r1, [pc, #164]	; (8010580 <problem_fetch+0xee98>)
 80104da:	461a      	mov	r2, r3
 80104dc:	460b      	mov	r3, r1
 80104de:	cb03      	ldmia	r3!, {r0, r1}
 80104e0:	6010      	str	r0, [r2, #0]
 80104e2:	6051      	str	r1, [r2, #4]
 80104e4:	881b      	ldrh	r3, [r3, #0]
 80104e6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,13,16,18");
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	3304      	adds	r3, #4
 80104ec:	4a25      	ldr	r2, [pc, #148]	; (8010584 <problem_fetch+0xee9c>)
 80104ee:	461c      	mov	r4, r3
 80104f0:	4613      	mov	r3, r2
 80104f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80104f4:	6020      	str	r0, [r4, #0]
 80104f6:	6061      	str	r1, [r4, #4]
 80104f8:	60a2      	str	r2, [r4, #8]
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010504:	4920      	ldr	r1, [pc, #128]	; (8010588 <problem_fetch+0xeea0>)
 8010506:	461a      	mov	r2, r3
 8010508:	460b      	mov	r3, r1
 801050a:	cb03      	ldmia	r3!, {r0, r1}
 801050c:	6010      	str	r0, [r2, #0]
 801050e:	6051      	str	r1, [r2, #4]
 8010510:	881b      	ldrh	r3, [r3, #0]
 8010512:	8113      	strh	r3, [r2, #8]
			break;
 8010514:	f00c b818 	b.w	801c548 <problem_fetch+0x1ae60>
 8010518:	08028c4c 	.word	0x08028c4c
 801051c:	080239f4 	.word	0x080239f4
 8010520:	08028c64 	.word	0x08028c64
 8010524:	08028c70 	.word	0x08028c70
 8010528:	08023cf8 	.word	0x08023cf8
 801052c:	08028c80 	.word	0x08028c80
 8010530:	08023a28 	.word	0x08023a28
 8010534:	08028c94 	.word	0x08028c94
 8010538:	08028ca0 	.word	0x08028ca0
 801053c:	08023afc 	.word	0x08023afc
 8010540:	08028cac 	.word	0x08028cac
 8010544:	08028cb8 	.word	0x08028cb8
 8010548:	0802393c 	.word	0x0802393c
 801054c:	08028cc8 	.word	0x08028cc8
 8010550:	08028cd0 	.word	0x08028cd0
 8010554:	08028ce0 	.word	0x08028ce0
 8010558:	08023ae4 	.word	0x08023ae4
 801055c:	08028cf4 	.word	0x08028cf4
 8010560:	08028d00 	.word	0x08028d00
 8010564:	08028d10 	.word	0x08028d10
 8010568:	080239d4 	.word	0x080239d4
 801056c:	08028d24 	.word	0x08028d24
 8010570:	0802391c 	.word	0x0802391c
 8010574:	08028d30 	.word	0x08028d30
 8010578:	08028d40 	.word	0x08028d40
 801057c:	08028d54 	.word	0x08028d54
 8010580:	08028d64 	.word	0x08028d64
 8010584:	08028d70 	.word	0x08028d70
 8010588:	08023e28 	.word	0x08023e28
		case 437 :
			strcpy(p->name,"THE POWER OF 9");
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010592:	4aad      	ldr	r2, [pc, #692]	; (8010848 <problem_fetch+0xf160>)
 8010594:	461c      	mov	r4, r3
 8010596:	4613      	mov	r3, r2
 8010598:	cb07      	ldmia	r3!, {r0, r1, r2}
 801059a:	6020      	str	r0, [r4, #0]
 801059c:	6061      	str	r1, [r4, #4]
 801059e:	60a2      	str	r2, [r4, #8]
 80105a0:	881a      	ldrh	r2, [r3, #0]
 80105a2:	789b      	ldrb	r3, [r3, #2]
 80105a4:	81a2      	strh	r2, [r4, #12]
 80105a6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6B+");
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80105ae:	4aa7      	ldr	r2, [pc, #668]	; (801084c <problem_fetch+0xf164>)
 80105b0:	6810      	ldr	r0, [r2, #0]
 80105b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2207      	movs	r2, #7
 80105b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,H,E,E,E,I");
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	33a4      	adds	r3, #164	; 0xa4
 80105be:	4aa4      	ldr	r2, [pc, #656]	; (8010850 <problem_fetch+0xf168>)
 80105c0:	461c      	mov	r4, r3
 80105c2:	4613      	mov	r3, r2
 80105c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105c6:	6020      	str	r0, [r4, #0]
 80105c8:	6061      	str	r1, [r4, #4]
 80105ca:	60a2      	str	r2, [r4, #8]
 80105cc:	881b      	ldrh	r3, [r3, #0]
 80105ce:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,12,16,18");
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3304      	adds	r3, #4
 80105d4:	4a9f      	ldr	r2, [pc, #636]	; (8010854 <problem_fetch+0xf16c>)
 80105d6:	461d      	mov	r5, r3
 80105d8:	4614      	mov	r4, r2
 80105da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80105dc:	6028      	str	r0, [r5, #0]
 80105de:	6069      	str	r1, [r5, #4]
 80105e0:	60aa      	str	r2, [r5, #8]
 80105e2:	60eb      	str	r3, [r5, #12]
 80105e4:	7823      	ldrb	r3, [r4, #0]
 80105e6:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80105ee:	4a9a      	ldr	r2, [pc, #616]	; (8010858 <problem_fetch+0xf170>)
 80105f0:	461c      	mov	r4, r3
 80105f2:	4613      	mov	r3, r2
 80105f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80105f6:	6020      	str	r0, [r4, #0]
 80105f8:	6061      	str	r1, [r4, #4]
 80105fa:	60a2      	str	r2, [r4, #8]
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	81a3      	strh	r3, [r4, #12]
			break;
 8010600:	f00b bfa2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 438 :
			strcpy(p->name,"PUSSY DAVAILLE");
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801060a:	4a94      	ldr	r2, [pc, #592]	; (801085c <problem_fetch+0xf174>)
 801060c:	461c      	mov	r4, r3
 801060e:	4613      	mov	r3, r2
 8010610:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010612:	6020      	str	r0, [r4, #0]
 8010614:	6061      	str	r1, [r4, #4]
 8010616:	60a2      	str	r2, [r4, #8]
 8010618:	881a      	ldrh	r2, [r3, #0]
 801061a:	789b      	ldrb	r3, [r3, #2]
 801061c:	81a2      	strh	r2, [r4, #12]
 801061e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010626:	4a8e      	ldr	r2, [pc, #568]	; (8010860 <problem_fetch+0xf178>)
 8010628:	8811      	ldrh	r1, [r2, #0]
 801062a:	7892      	ldrb	r2, [r2, #2]
 801062c:	8019      	strh	r1, [r3, #0]
 801062e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2207      	movs	r2, #7
 8010634:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,C,G,E,B,D");
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	33a4      	adds	r3, #164	; 0xa4
 801063a:	4a8a      	ldr	r2, [pc, #552]	; (8010864 <problem_fetch+0xf17c>)
 801063c:	461c      	mov	r4, r3
 801063e:	4613      	mov	r3, r2
 8010640:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010642:	6020      	str	r0, [r4, #0]
 8010644:	6061      	str	r1, [r4, #4]
 8010646:	60a2      	str	r2, [r4, #8]
 8010648:	881b      	ldrh	r3, [r3, #0]
 801064a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,9,12,15,18");
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	3304      	adds	r3, #4
 8010650:	4a85      	ldr	r2, [pc, #532]	; (8010868 <problem_fetch+0xf180>)
 8010652:	461d      	mov	r5, r3
 8010654:	4614      	mov	r4, r2
 8010656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010658:	6028      	str	r0, [r5, #0]
 801065a:	6069      	str	r1, [r5, #4]
 801065c:	60aa      	str	r2, [r5, #8]
 801065e:	60eb      	str	r3, [r5, #12]
 8010660:	7823      	ldrb	r3, [r4, #0]
 8010662:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801066a:	4a7b      	ldr	r2, [pc, #492]	; (8010858 <problem_fetch+0xf170>)
 801066c:	461c      	mov	r4, r3
 801066e:	4613      	mov	r3, r2
 8010670:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010672:	6020      	str	r0, [r4, #0]
 8010674:	6061      	str	r1, [r4, #4]
 8010676:	60a2      	str	r2, [r4, #8]
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	81a3      	strh	r3, [r4, #12]
			break;
 801067c:	f00b bf64 	b.w	801c548 <problem_fetch+0x1ae60>
		case 439 :
			strcpy(p->name,"IN THE PINES");
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010686:	4a79      	ldr	r2, [pc, #484]	; (801086c <problem_fetch+0xf184>)
 8010688:	461c      	mov	r4, r3
 801068a:	4613      	mov	r3, r2
 801068c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801068e:	6020      	str	r0, [r4, #0]
 8010690:	6061      	str	r1, [r4, #4]
 8010692:	60a2      	str	r2, [r4, #8]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801069e:	4a6b      	ldr	r2, [pc, #428]	; (801084c <problem_fetch+0xf164>)
 80106a0:	6810      	ldr	r0, [r2, #0]
 80106a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2208      	movs	r2, #8
 80106a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,G,G,D");
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	33a4      	adds	r3, #164	; 0xa4
 80106ae:	4a70      	ldr	r2, [pc, #448]	; (8010870 <problem_fetch+0xf188>)
 80106b0:	461c      	mov	r4, r3
 80106b2:	4615      	mov	r5, r2
 80106b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106b6:	6020      	str	r0, [r4, #0]
 80106b8:	6061      	str	r1, [r4, #4]
 80106ba:	60a2      	str	r2, [r4, #8]
 80106bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,15,17,18");
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	3304      	adds	r3, #4
 80106c2:	4a6c      	ldr	r2, [pc, #432]	; (8010874 <problem_fetch+0xf18c>)
 80106c4:	461d      	mov	r5, r3
 80106c6:	4614      	mov	r4, r2
 80106c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80106ca:	6028      	str	r0, [r5, #0]
 80106cc:	6069      	str	r1, [r5, #4]
 80106ce:	60aa      	str	r2, [r5, #8]
 80106d0:	60eb      	str	r3, [r5, #12]
 80106d2:	6820      	ldr	r0, [r4, #0]
 80106d4:	6128      	str	r0, [r5, #16]
 80106d6:	88a3      	ldrh	r3, [r4, #4]
 80106d8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80106e0:	4a65      	ldr	r2, [pc, #404]	; (8010878 <problem_fetch+0xf190>)
 80106e2:	461c      	mov	r4, r3
 80106e4:	4615      	mov	r5, r2
 80106e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80106e8:	6020      	str	r0, [r4, #0]
 80106ea:	6061      	str	r1, [r4, #4]
 80106ec:	60a2      	str	r2, [r4, #8]
 80106ee:	60e3      	str	r3, [r4, #12]
			break;
 80106f0:	f00b bf2a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 440 :
			strcpy(p->name,"THE ONLY LIGHT");
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80106fa:	4a60      	ldr	r2, [pc, #384]	; (801087c <problem_fetch+0xf194>)
 80106fc:	461c      	mov	r4, r3
 80106fe:	4613      	mov	r3, r2
 8010700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010702:	6020      	str	r0, [r4, #0]
 8010704:	6061      	str	r1, [r4, #4]
 8010706:	60a2      	str	r2, [r4, #8]
 8010708:	881a      	ldrh	r2, [r3, #0]
 801070a:	789b      	ldrb	r3, [r3, #2]
 801070c:	81a2      	strh	r2, [r4, #12]
 801070e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010716:	4a52      	ldr	r2, [pc, #328]	; (8010860 <problem_fetch+0xf178>)
 8010718:	8811      	ldrh	r1, [r2, #0]
 801071a:	7892      	ldrb	r2, [r2, #2]
 801071c:	8019      	strh	r1, [r3, #0]
 801071e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2207      	movs	r2, #7
 8010724:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,F,H,E,D");
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	33a4      	adds	r3, #164	; 0xa4
 801072a:	4a55      	ldr	r2, [pc, #340]	; (8010880 <problem_fetch+0xf198>)
 801072c:	461c      	mov	r4, r3
 801072e:	4613      	mov	r3, r2
 8010730:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010732:	6020      	str	r0, [r4, #0]
 8010734:	6061      	str	r1, [r4, #4]
 8010736:	60a2      	str	r2, [r4, #8]
 8010738:	881b      	ldrh	r3, [r3, #0]
 801073a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,13,16,18");
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3304      	adds	r3, #4
 8010740:	4a50      	ldr	r2, [pc, #320]	; (8010884 <problem_fetch+0xf19c>)
 8010742:	461d      	mov	r5, r3
 8010744:	4614      	mov	r4, r2
 8010746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010748:	6028      	str	r0, [r5, #0]
 801074a:	6069      	str	r1, [r5, #4]
 801074c:	60aa      	str	r2, [r5, #8]
 801074e:	60eb      	str	r3, [r5, #12]
 8010750:	8823      	ldrh	r3, [r4, #0]
 8010752:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801075a:	4a3f      	ldr	r2, [pc, #252]	; (8010858 <problem_fetch+0xf170>)
 801075c:	461c      	mov	r4, r3
 801075e:	4613      	mov	r3, r2
 8010760:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010762:	6020      	str	r0, [r4, #0]
 8010764:	6061      	str	r1, [r4, #4]
 8010766:	60a2      	str	r2, [r4, #8]
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	81a3      	strh	r3, [r4, #12]
			break;
 801076c:	f00b beec 	b.w	801c548 <problem_fetch+0x1ae60>
		case 441 :
			strcpy(p->name,"DEFYING GRAVITY");
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010776:	4a44      	ldr	r2, [pc, #272]	; (8010888 <problem_fetch+0xf1a0>)
 8010778:	461c      	mov	r4, r3
 801077a:	4615      	mov	r5, r2
 801077c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801077e:	6020      	str	r0, [r4, #0]
 8010780:	6061      	str	r1, [r4, #4]
 8010782:	60a2      	str	r2, [r4, #8]
 8010784:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801078c:	4a3f      	ldr	r2, [pc, #252]	; (801088c <problem_fetch+0xf1a4>)
 801078e:	6810      	ldr	r0, [r2, #0]
 8010790:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2206      	movs	r2, #6
 8010796:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,E,D");
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	33a4      	adds	r3, #164	; 0xa4
 801079c:	4a3c      	ldr	r2, [pc, #240]	; (8010890 <problem_fetch+0xf1a8>)
 801079e:	461c      	mov	r4, r3
 80107a0:	4613      	mov	r3, r2
 80107a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107a4:	6020      	str	r0, [r4, #0]
 80107a6:	6061      	str	r1, [r4, #4]
 80107a8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,16,8,18");
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	3304      	adds	r3, #4
 80107ae:	4a39      	ldr	r2, [pc, #228]	; (8010894 <problem_fetch+0xf1ac>)
 80107b0:	461c      	mov	r4, r3
 80107b2:	4615      	mov	r5, r2
 80107b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107b6:	6020      	str	r0, [r4, #0]
 80107b8:	6061      	str	r1, [r4, #4]
 80107ba:	60a2      	str	r2, [r4, #8]
 80107bc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80107c4:	4a34      	ldr	r2, [pc, #208]	; (8010898 <problem_fetch+0xf1b0>)
 80107c6:	461c      	mov	r4, r3
 80107c8:	4613      	mov	r3, r2
 80107ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80107cc:	6020      	str	r0, [r4, #0]
 80107ce:	6061      	str	r1, [r4, #4]
 80107d0:	60a2      	str	r2, [r4, #8]
			break;
 80107d2:	f00b beb9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 442 :
			strcpy(p->name,"BIG PAW");
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80107dc:	492f      	ldr	r1, [pc, #188]	; (801089c <problem_fetch+0xf1b4>)
 80107de:	461a      	mov	r2, r3
 80107e0:	460b      	mov	r3, r1
 80107e2:	cb03      	ldmia	r3!, {r0, r1}
 80107e4:	6010      	str	r0, [r2, #0]
 80107e6:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B");
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80107ee:	4a2c      	ldr	r2, [pc, #176]	; (80108a0 <problem_fetch+0xf1b8>)
 80107f0:	8811      	ldrh	r1, [r2, #0]
 80107f2:	7892      	ldrb	r2, [r2, #2]
 80107f4:	8019      	strh	r1, [r3, #0]
 80107f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2207      	movs	r2, #7
 80107fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,I,H,K,E,I");
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	33a4      	adds	r3, #164	; 0xa4
 8010802:	4a28      	ldr	r2, [pc, #160]	; (80108a4 <problem_fetch+0xf1bc>)
 8010804:	461c      	mov	r4, r3
 8010806:	4613      	mov	r3, r2
 8010808:	cb07      	ldmia	r3!, {r0, r1, r2}
 801080a:	6020      	str	r0, [r4, #0]
 801080c:	6061      	str	r1, [r4, #4]
 801080e:	60a2      	str	r2, [r4, #8]
 8010810:	881b      	ldrh	r3, [r3, #0]
 8010812:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,12,16,9,18");
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	3304      	adds	r3, #4
 8010818:	4a23      	ldr	r2, [pc, #140]	; (80108a8 <problem_fetch+0xf1c0>)
 801081a:	461d      	mov	r5, r3
 801081c:	4614      	mov	r4, r2
 801081e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010820:	6028      	str	r0, [r5, #0]
 8010822:	6069      	str	r1, [r5, #4]
 8010824:	60aa      	str	r2, [r5, #8]
 8010826:	60eb      	str	r3, [r5, #12]
 8010828:	7823      	ldrb	r3, [r4, #0]
 801082a:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010832:	4a09      	ldr	r2, [pc, #36]	; (8010858 <problem_fetch+0xf170>)
 8010834:	461c      	mov	r4, r3
 8010836:	4613      	mov	r3, r2
 8010838:	cb07      	ldmia	r3!, {r0, r1, r2}
 801083a:	6020      	str	r0, [r4, #0]
 801083c:	6061      	str	r1, [r4, #4]
 801083e:	60a2      	str	r2, [r4, #8]
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	81a3      	strh	r3, [r4, #12]
			break;
 8010844:	f00b be80 	b.w	801c548 <problem_fetch+0x1ae60>
 8010848:	08028d80 	.word	0x08028d80
 801084c:	0802395c 	.word	0x0802395c
 8010850:	08028d90 	.word	0x08028d90
 8010854:	08028da0 	.word	0x08028da0
 8010858:	080239d4 	.word	0x080239d4
 801085c:	08028db4 	.word	0x08028db4
 8010860:	08023a28 	.word	0x08023a28
 8010864:	08028dc4 	.word	0x08028dc4
 8010868:	08028dd4 	.word	0x08028dd4
 801086c:	08028de8 	.word	0x08028de8
 8010870:	08028df8 	.word	0x08028df8
 8010874:	08028e08 	.word	0x08028e08
 8010878:	08023b6c 	.word	0x08023b6c
 801087c:	08028e20 	.word	0x08028e20
 8010880:	08028e30 	.word	0x08028e30
 8010884:	08028e40 	.word	0x08028e40
 8010888:	08028e54 	.word	0x08028e54
 801088c:	080239f4 	.word	0x080239f4
 8010890:	08028e64 	.word	0x08028e64
 8010894:	08028e70 	.word	0x08028e70
 8010898:	08023cf8 	.word	0x08023cf8
 801089c:	08028e80 	.word	0x08028e80
 80108a0:	08024054 	.word	0x08024054
 80108a4:	08028e88 	.word	0x08028e88
 80108a8:	08028e98 	.word	0x08028e98
		case 443 :
			strcpy(p->name,"UGLY LITTLE PROBLEM");
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80108b2:	4aaa      	ldr	r2, [pc, #680]	; (8010b5c <problem_fetch+0xf474>)
 80108b4:	461d      	mov	r5, r3
 80108b6:	4614      	mov	r4, r2
 80108b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108ba:	6028      	str	r0, [r5, #0]
 80108bc:	6069      	str	r1, [r5, #4]
 80108be:	60aa      	str	r2, [r5, #8]
 80108c0:	60eb      	str	r3, [r5, #12]
 80108c2:	6820      	ldr	r0, [r4, #0]
 80108c4:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A");
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80108cc:	4aa4      	ldr	r2, [pc, #656]	; (8010b60 <problem_fetch+0xf478>)
 80108ce:	8811      	ldrh	r1, [r2, #0]
 80108d0:	7892      	ldrb	r2, [r2, #2]
 80108d2:	8019      	strh	r1, [r3, #0]
 80108d4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2205      	movs	r2, #5
 80108da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,B,B,A");
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	33a4      	adds	r3, #164	; 0xa4
 80108e0:	49a0      	ldr	r1, [pc, #640]	; (8010b64 <problem_fetch+0xf47c>)
 80108e2:	461a      	mov	r2, r3
 80108e4:	460b      	mov	r3, r1
 80108e6:	cb03      	ldmia	r3!, {r0, r1}
 80108e8:	6010      	str	r0, [r2, #0]
 80108ea:	6051      	str	r1, [r2, #4]
 80108ec:	881b      	ldrh	r3, [r3, #0]
 80108ee:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,15,18");
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	3304      	adds	r3, #4
 80108f4:	4a9c      	ldr	r2, [pc, #624]	; (8010b68 <problem_fetch+0xf480>)
 80108f6:	461c      	mov	r4, r3
 80108f8:	4613      	mov	r3, r2
 80108fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80108fc:	6020      	str	r0, [r4, #0]
 80108fe:	6061      	str	r1, [r4, #4]
 8010900:	60a2      	str	r2, [r4, #8]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801090c:	4997      	ldr	r1, [pc, #604]	; (8010b6c <problem_fetch+0xf484>)
 801090e:	461a      	mov	r2, r3
 8010910:	460b      	mov	r3, r1
 8010912:	cb03      	ldmia	r3!, {r0, r1}
 8010914:	6010      	str	r0, [r2, #0]
 8010916:	6051      	str	r1, [r2, #4]
 8010918:	881b      	ldrh	r3, [r3, #0]
 801091a:	8113      	strh	r3, [r2, #8]
			break;
 801091c:	f00b be14 	b.w	801c548 <problem_fetch+0x1ae60>
		case 444 :
			strcpy(p->name,"SHOULDER STRIKE");
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010926:	4a92      	ldr	r2, [pc, #584]	; (8010b70 <problem_fetch+0xf488>)
 8010928:	461c      	mov	r4, r3
 801092a:	4615      	mov	r5, r2
 801092c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801092e:	6020      	str	r0, [r4, #0]
 8010930:	6061      	str	r1, [r4, #4]
 8010932:	60a2      	str	r2, [r4, #8]
 8010934:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801093c:	4a8d      	ldr	r2, [pc, #564]	; (8010b74 <problem_fetch+0xf48c>)
 801093e:	8811      	ldrh	r1, [r2, #0]
 8010940:	7892      	ldrb	r2, [r2, #2]
 8010942:	8019      	strh	r1, [r3, #0]
 8010944:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2207      	movs	r2, #7
 801094a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,G,H,I,I");
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	33a4      	adds	r3, #164	; 0xa4
 8010950:	4a89      	ldr	r2, [pc, #548]	; (8010b78 <problem_fetch+0xf490>)
 8010952:	461c      	mov	r4, r3
 8010954:	4613      	mov	r3, r2
 8010956:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010958:	6020      	str	r0, [r4, #0]
 801095a:	6061      	str	r1, [r4, #4]
 801095c:	60a2      	str	r2, [r4, #8]
 801095e:	881b      	ldrh	r3, [r3, #0]
 8010960:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,12,15,5,7,18");
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	3304      	adds	r3, #4
 8010966:	4a85      	ldr	r2, [pc, #532]	; (8010b7c <problem_fetch+0xf494>)
 8010968:	461d      	mov	r5, r3
 801096a:	4614      	mov	r4, r2
 801096c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801096e:	6028      	str	r0, [r5, #0]
 8010970:	6069      	str	r1, [r5, #4]
 8010972:	60aa      	str	r2, [r5, #8]
 8010974:	60eb      	str	r3, [r5, #12]
 8010976:	7823      	ldrb	r3, [r4, #0]
 8010978:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010980:	4a7f      	ldr	r2, [pc, #508]	; (8010b80 <problem_fetch+0xf498>)
 8010982:	461c      	mov	r4, r3
 8010984:	4613      	mov	r3, r2
 8010986:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010988:	6020      	str	r0, [r4, #0]
 801098a:	6061      	str	r1, [r4, #4]
 801098c:	60a2      	str	r2, [r4, #8]
 801098e:	881b      	ldrh	r3, [r3, #0]
 8010990:	81a3      	strh	r3, [r4, #12]
			break;
 8010992:	f00b bdd9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 445 :
			strcpy(p->name,"CRUXY E9");
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801099c:	4979      	ldr	r1, [pc, #484]	; (8010b84 <problem_fetch+0xf49c>)
 801099e:	461a      	mov	r2, r3
 80109a0:	460b      	mov	r3, r1
 80109a2:	cb03      	ldmia	r3!, {r0, r1}
 80109a4:	6010      	str	r0, [r2, #0]
 80109a6:	6051      	str	r1, [r2, #4]
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80109b2:	4a70      	ldr	r2, [pc, #448]	; (8010b74 <problem_fetch+0xf48c>)
 80109b4:	8811      	ldrh	r1, [r2, #0]
 80109b6:	7892      	ldrb	r2, [r2, #2]
 80109b8:	8019      	strh	r1, [r3, #0]
 80109ba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2207      	movs	r2, #7
 80109c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,I,E,B,A");
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	33a4      	adds	r3, #164	; 0xa4
 80109c6:	4a70      	ldr	r2, [pc, #448]	; (8010b88 <problem_fetch+0xf4a0>)
 80109c8:	461c      	mov	r4, r3
 80109ca:	4613      	mov	r3, r2
 80109cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109ce:	6020      	str	r0, [r4, #0]
 80109d0:	6061      	str	r1, [r4, #4]
 80109d2:	60a2      	str	r2, [r4, #8]
 80109d4:	881b      	ldrh	r3, [r3, #0]
 80109d6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,9,7,12,15,18");
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	3304      	adds	r3, #4
 80109dc:	4a6b      	ldr	r2, [pc, #428]	; (8010b8c <problem_fetch+0xf4a4>)
 80109de:	461d      	mov	r5, r3
 80109e0:	4614      	mov	r4, r2
 80109e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109e4:	6028      	str	r0, [r5, #0]
 80109e6:	6069      	str	r1, [r5, #4]
 80109e8:	60aa      	str	r2, [r5, #8]
 80109ea:	60eb      	str	r3, [r5, #12]
 80109ec:	7823      	ldrb	r3, [r4, #0]
 80109ee:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80109f6:	4a62      	ldr	r2, [pc, #392]	; (8010b80 <problem_fetch+0xf498>)
 80109f8:	461c      	mov	r4, r3
 80109fa:	4613      	mov	r3, r2
 80109fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80109fe:	6020      	str	r0, [r4, #0]
 8010a00:	6061      	str	r1, [r4, #4]
 8010a02:	60a2      	str	r2, [r4, #8]
 8010a04:	881b      	ldrh	r3, [r3, #0]
 8010a06:	81a3      	strh	r3, [r4, #12]
			break;
 8010a08:	f00b bd9e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 446 :
			strcpy(p->name,"RECOVERY DRINK");
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a12:	4a5f      	ldr	r2, [pc, #380]	; (8010b90 <problem_fetch+0xf4a8>)
 8010a14:	461c      	mov	r4, r3
 8010a16:	4613      	mov	r3, r2
 8010a18:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a1a:	6020      	str	r0, [r4, #0]
 8010a1c:	6061      	str	r1, [r4, #4]
 8010a1e:	60a2      	str	r2, [r4, #8]
 8010a20:	881a      	ldrh	r2, [r3, #0]
 8010a22:	789b      	ldrb	r3, [r3, #2]
 8010a24:	81a2      	strh	r2, [r4, #12]
 8010a26:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a2e:	4a59      	ldr	r2, [pc, #356]	; (8010b94 <problem_fetch+0xf4ac>)
 8010a30:	6810      	ldr	r0, [r2, #0]
 8010a32:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2206      	movs	r2, #6
 8010a38:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,H,I,I");
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	33a4      	adds	r3, #164	; 0xa4
 8010a3e:	4a56      	ldr	r2, [pc, #344]	; (8010b98 <problem_fetch+0xf4b0>)
 8010a40:	461c      	mov	r4, r3
 8010a42:	4613      	mov	r3, r2
 8010a44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a46:	6020      	str	r0, [r4, #0]
 8010a48:	6061      	str	r1, [r4, #4]
 8010a4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	3304      	adds	r3, #4
 8010a50:	4a52      	ldr	r2, [pc, #328]	; (8010b9c <problem_fetch+0xf4b4>)
 8010a52:	461c      	mov	r4, r3
 8010a54:	4615      	mov	r5, r2
 8010a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a58:	6020      	str	r0, [r4, #0]
 8010a5a:	6061      	str	r1, [r4, #4]
 8010a5c:	60a2      	str	r2, [r4, #8]
 8010a5e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010a66:	4a4e      	ldr	r2, [pc, #312]	; (8010ba0 <problem_fetch+0xf4b8>)
 8010a68:	461c      	mov	r4, r3
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010a6e:	6020      	str	r0, [r4, #0]
 8010a70:	6061      	str	r1, [r4, #4]
 8010a72:	60a2      	str	r2, [r4, #8]
			break;
 8010a74:	f00b bd68 	b.w	801c548 <problem_fetch+0x1ae60>
		case 447 :
			strcpy(p->name,"PACHIMAMA");
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010a7e:	4949      	ldr	r1, [pc, #292]	; (8010ba4 <problem_fetch+0xf4bc>)
 8010a80:	461a      	mov	r2, r3
 8010a82:	460b      	mov	r3, r1
 8010a84:	cb03      	ldmia	r3!, {r0, r1}
 8010a86:	6010      	str	r0, [r2, #0]
 8010a88:	6051      	str	r1, [r2, #4]
 8010a8a:	881b      	ldrh	r3, [r3, #0]
 8010a8c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010a94:	4a32      	ldr	r2, [pc, #200]	; (8010b60 <problem_fetch+0xf478>)
 8010a96:	8811      	ldrh	r1, [r2, #0]
 8010a98:	7892      	ldrb	r2, [r2, #2]
 8010a9a:	8019      	strh	r1, [r3, #0]
 8010a9c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2206      	movs	r2, #6
 8010aa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,K,H,K,I");
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	33a4      	adds	r3, #164	; 0xa4
 8010aa8:	4a3f      	ldr	r2, [pc, #252]	; (8010ba8 <problem_fetch+0xf4c0>)
 8010aaa:	461c      	mov	r4, r3
 8010aac:	4613      	mov	r3, r2
 8010aae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ab0:	6020      	str	r0, [r4, #0]
 8010ab2:	6061      	str	r1, [r4, #4]
 8010ab4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,12,14,18");
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3304      	adds	r3, #4
 8010aba:	4a3c      	ldr	r2, [pc, #240]	; (8010bac <problem_fetch+0xf4c4>)
 8010abc:	461c      	mov	r4, r3
 8010abe:	4613      	mov	r3, r2
 8010ac0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ac2:	6020      	str	r0, [r4, #0]
 8010ac4:	6061      	str	r1, [r4, #4]
 8010ac6:	60a2      	str	r2, [r4, #8]
 8010ac8:	881a      	ldrh	r2, [r3, #0]
 8010aca:	789b      	ldrb	r3, [r3, #2]
 8010acc:	81a2      	strh	r2, [r4, #12]
 8010ace:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010ad6:	4a36      	ldr	r2, [pc, #216]	; (8010bb0 <problem_fetch+0xf4c8>)
 8010ad8:	461c      	mov	r4, r3
 8010ada:	4613      	mov	r3, r2
 8010adc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010ade:	6020      	str	r0, [r4, #0]
 8010ae0:	6061      	str	r1, [r4, #4]
 8010ae2:	60a2      	str	r2, [r4, #8]
			break;
 8010ae4:	f00b bd30 	b.w	801c548 <problem_fetch+0x1ae60>
		case 448 :
			strcpy(p->name,"CRAZYCRACKER");
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010aee:	4a31      	ldr	r2, [pc, #196]	; (8010bb4 <problem_fetch+0xf4cc>)
 8010af0:	461c      	mov	r4, r3
 8010af2:	4613      	mov	r3, r2
 8010af4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010af6:	6020      	str	r0, [r4, #0]
 8010af8:	6061      	str	r1, [r4, #4]
 8010afa:	60a2      	str	r2, [r4, #8]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010b06:	4a2c      	ldr	r2, [pc, #176]	; (8010bb8 <problem_fetch+0xf4d0>)
 8010b08:	6810      	ldr	r0, [r2, #0]
 8010b0a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2208      	movs	r2, #8
 8010b10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,I,G,J,H,G,D");
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	33a4      	adds	r3, #164	; 0xa4
 8010b16:	4a29      	ldr	r2, [pc, #164]	; (8010bbc <problem_fetch+0xf4d4>)
 8010b18:	461c      	mov	r4, r3
 8010b1a:	4615      	mov	r5, r2
 8010b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b1e:	6020      	str	r0, [r4, #0]
 8010b20:	6061      	str	r1, [r4, #4]
 8010b22:	60a2      	str	r2, [r4, #8]
 8010b24:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,12,16,17,18");
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	4a25      	ldr	r2, [pc, #148]	; (8010bc0 <problem_fetch+0xf4d8>)
 8010b2c:	461d      	mov	r5, r3
 8010b2e:	4614      	mov	r4, r2
 8010b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b32:	6028      	str	r0, [r5, #0]
 8010b34:	6069      	str	r1, [r5, #4]
 8010b36:	60aa      	str	r2, [r5, #8]
 8010b38:	60eb      	str	r3, [r5, #12]
 8010b3a:	6820      	ldr	r0, [r4, #0]
 8010b3c:	6128      	str	r0, [r5, #16]
 8010b3e:	7923      	ldrb	r3, [r4, #4]
 8010b40:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010b48:	4a1e      	ldr	r2, [pc, #120]	; (8010bc4 <problem_fetch+0xf4dc>)
 8010b4a:	461c      	mov	r4, r3
 8010b4c:	4615      	mov	r5, r2
 8010b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010b50:	6020      	str	r0, [r4, #0]
 8010b52:	6061      	str	r1, [r4, #4]
 8010b54:	60a2      	str	r2, [r4, #8]
 8010b56:	60e3      	str	r3, [r4, #12]
			break;
 8010b58:	f00b bcf6 	b.w	801c548 <problem_fetch+0x1ae60>
 8010b5c:	08028eac 	.word	0x08028eac
 8010b60:	0802391c 	.word	0x0802391c
 8010b64:	08028ec0 	.word	0x08028ec0
 8010b68:	08028ecc 	.word	0x08028ecc
 8010b6c:	08023e28 	.word	0x08023e28
 8010b70:	08028edc 	.word	0x08028edc
 8010b74:	08024054 	.word	0x08024054
 8010b78:	08028eec 	.word	0x08028eec
 8010b7c:	08028efc 	.word	0x08028efc
 8010b80:	08023ae4 	.word	0x08023ae4
 8010b84:	08028f10 	.word	0x08028f10
 8010b88:	08028f1c 	.word	0x08028f1c
 8010b8c:	08028f2c 	.word	0x08028f2c
 8010b90:	08028f40 	.word	0x08028f40
 8010b94:	08023a98 	.word	0x08023a98
 8010b98:	08028f50 	.word	0x08028f50
 8010b9c:	08028f5c 	.word	0x08028f5c
 8010ba0:	08023cf8 	.word	0x08023cf8
 8010ba4:	08028f6c 	.word	0x08028f6c
 8010ba8:	08028f78 	.word	0x08028f78
 8010bac:	08028b24 	.word	0x08028b24
 8010bb0:	0802393c 	.word	0x0802393c
 8010bb4:	08028f84 	.word	0x08028f84
 8010bb8:	08023afc 	.word	0x08023afc
 8010bbc:	08028f94 	.word	0x08028f94
 8010bc0:	08028a00 	.word	0x08028a00
 8010bc4:	08023a80 	.word	0x08023a80
		case 449 :
			strcpy(p->name,"CLIMBING ON BLANK");
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010bce:	4aaa      	ldr	r2, [pc, #680]	; (8010e78 <problem_fetch+0xf790>)
 8010bd0:	461d      	mov	r5, r3
 8010bd2:	4614      	mov	r4, r2
 8010bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bd6:	6028      	str	r0, [r5, #0]
 8010bd8:	6069      	str	r1, [r5, #4]
 8010bda:	60aa      	str	r2, [r5, #8]
 8010bdc:	60eb      	str	r3, [r5, #12]
 8010bde:	8823      	ldrh	r3, [r4, #0]
 8010be0:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010be8:	4aa4      	ldr	r2, [pc, #656]	; (8010e7c <problem_fetch+0xf794>)
 8010bea:	8811      	ldrh	r1, [r2, #0]
 8010bec:	7892      	ldrb	r2, [r2, #2]
 8010bee:	8019      	strh	r1, [r3, #0]
 8010bf0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2206      	movs	r2, #6
 8010bf6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,E,E,I");
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	33a4      	adds	r3, #164	; 0xa4
 8010bfc:	4aa0      	ldr	r2, [pc, #640]	; (8010e80 <problem_fetch+0xf798>)
 8010bfe:	461c      	mov	r4, r3
 8010c00:	4613      	mov	r3, r2
 8010c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c04:	6020      	str	r0, [r4, #0]
 8010c06:	6061      	str	r1, [r4, #4]
 8010c08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,16,18");
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	4a9d      	ldr	r2, [pc, #628]	; (8010e84 <problem_fetch+0xf79c>)
 8010c10:	461c      	mov	r4, r3
 8010c12:	4613      	mov	r3, r2
 8010c14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c16:	6020      	str	r0, [r4, #0]
 8010c18:	6061      	str	r1, [r4, #4]
 8010c1a:	60a2      	str	r2, [r4, #8]
 8010c1c:	881a      	ldrh	r2, [r3, #0]
 8010c1e:	789b      	ldrb	r3, [r3, #2]
 8010c20:	81a2      	strh	r2, [r4, #12]
 8010c22:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010c2a:	4a97      	ldr	r2, [pc, #604]	; (8010e88 <problem_fetch+0xf7a0>)
 8010c2c:	461c      	mov	r4, r3
 8010c2e:	4613      	mov	r3, r2
 8010c30:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c32:	6020      	str	r0, [r4, #0]
 8010c34:	6061      	str	r1, [r4, #4]
 8010c36:	60a2      	str	r2, [r4, #8]
			break;
 8010c38:	f00b bc86 	b.w	801c548 <problem_fetch+0x1ae60>
		case 450 :
			strcpy(p->name,"PHSYCHO");
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010c42:	4992      	ldr	r1, [pc, #584]	; (8010e8c <problem_fetch+0xf7a4>)
 8010c44:	461a      	mov	r2, r3
 8010c46:	460b      	mov	r3, r1
 8010c48:	cb03      	ldmia	r3!, {r0, r1}
 8010c4a:	6010      	str	r0, [r2, #0]
 8010c4c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010c54:	4a8e      	ldr	r2, [pc, #568]	; (8010e90 <problem_fetch+0xf7a8>)
 8010c56:	6810      	ldr	r0, [r2, #0]
 8010c58:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	2207      	movs	r2, #7
 8010c5e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,F,G,D,G,D");
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	33a4      	adds	r3, #164	; 0xa4
 8010c64:	4a8b      	ldr	r2, [pc, #556]	; (8010e94 <problem_fetch+0xf7ac>)
 8010c66:	461c      	mov	r4, r3
 8010c68:	4613      	mov	r3, r2
 8010c6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c6c:	6020      	str	r0, [r4, #0]
 8010c6e:	6061      	str	r1, [r4, #4]
 8010c70:	60a2      	str	r2, [r4, #8]
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,13,17,7,10,18");
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	3304      	adds	r3, #4
 8010c7a:	4a87      	ldr	r2, [pc, #540]	; (8010e98 <problem_fetch+0xf7b0>)
 8010c7c:	461d      	mov	r5, r3
 8010c7e:	4614      	mov	r4, r2
 8010c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010c82:	6028      	str	r0, [r5, #0]
 8010c84:	6069      	str	r1, [r5, #4]
 8010c86:	60aa      	str	r2, [r5, #8]
 8010c88:	60eb      	str	r3, [r5, #12]
 8010c8a:	8823      	ldrh	r3, [r4, #0]
 8010c8c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010c94:	4a81      	ldr	r2, [pc, #516]	; (8010e9c <problem_fetch+0xf7b4>)
 8010c96:	461c      	mov	r4, r3
 8010c98:	4613      	mov	r3, r2
 8010c9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010c9c:	6020      	str	r0, [r4, #0]
 8010c9e:	6061      	str	r1, [r4, #4]
 8010ca0:	60a2      	str	r2, [r4, #8]
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	81a3      	strh	r3, [r4, #12]
			break;
 8010ca6:	f00b bc4f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 451 :
			strcpy(p->name,"THE UNREAL THING");
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010cb0:	4a7b      	ldr	r2, [pc, #492]	; (8010ea0 <problem_fetch+0xf7b8>)
 8010cb2:	461d      	mov	r5, r3
 8010cb4:	4614      	mov	r4, r2
 8010cb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cb8:	6028      	str	r0, [r5, #0]
 8010cba:	6069      	str	r1, [r5, #4]
 8010cbc:	60aa      	str	r2, [r5, #8]
 8010cbe:	60eb      	str	r3, [r5, #12]
 8010cc0:	7823      	ldrb	r3, [r4, #0]
 8010cc2:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010cca:	4a76      	ldr	r2, [pc, #472]	; (8010ea4 <problem_fetch+0xf7bc>)
 8010ccc:	6810      	ldr	r0, [r2, #0]
 8010cce:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2208      	movs	r2, #8
 8010cd4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,J,E,A,D,A");
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	33a4      	adds	r3, #164	; 0xa4
 8010cda:	4a73      	ldr	r2, [pc, #460]	; (8010ea8 <problem_fetch+0xf7c0>)
 8010cdc:	461c      	mov	r4, r3
 8010cde:	4615      	mov	r5, r2
 8010ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ce2:	6020      	str	r0, [r4, #0]
 8010ce4:	6061      	str	r1, [r4, #4]
 8010ce6:	60a2      	str	r2, [r4, #8]
 8010ce8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,7,12,14,15,18");
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	3304      	adds	r3, #4
 8010cee:	4a6f      	ldr	r2, [pc, #444]	; (8010eac <problem_fetch+0xf7c4>)
 8010cf0:	461d      	mov	r5, r3
 8010cf2:	4614      	mov	r4, r2
 8010cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cf6:	6028      	str	r0, [r5, #0]
 8010cf8:	6069      	str	r1, [r5, #4]
 8010cfa:	60aa      	str	r2, [r5, #8]
 8010cfc:	60eb      	str	r3, [r5, #12]
 8010cfe:	6820      	ldr	r0, [r4, #0]
 8010d00:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d08:	4a69      	ldr	r2, [pc, #420]	; (8010eb0 <problem_fetch+0xf7c8>)
 8010d0a:	461c      	mov	r4, r3
 8010d0c:	4615      	mov	r5, r2
 8010d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d10:	6020      	str	r0, [r4, #0]
 8010d12:	6061      	str	r1, [r4, #4]
 8010d14:	60a2      	str	r2, [r4, #8]
 8010d16:	60e3      	str	r3, [r4, #12]
			break;
 8010d18:	f00b bc16 	b.w	801c548 <problem_fetch+0x1ae60>
		case 452 :
			strcpy(p->name,"THE NIGHTMARE");
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d22:	4a64      	ldr	r2, [pc, #400]	; (8010eb4 <problem_fetch+0xf7cc>)
 8010d24:	461c      	mov	r4, r3
 8010d26:	4613      	mov	r3, r2
 8010d28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d2a:	6020      	str	r0, [r4, #0]
 8010d2c:	6061      	str	r1, [r4, #4]
 8010d2e:	60a2      	str	r2, [r4, #8]
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010d3a:	4a5f      	ldr	r2, [pc, #380]	; (8010eb8 <problem_fetch+0xf7d0>)
 8010d3c:	6810      	ldr	r0, [r2, #0]
 8010d3e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	2208      	movs	r2, #8
 8010d44:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,B,E,F,D");
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	33a4      	adds	r3, #164	; 0xa4
 8010d4a:	4a5c      	ldr	r2, [pc, #368]	; (8010ebc <problem_fetch+0xf7d4>)
 8010d4c:	461c      	mov	r4, r3
 8010d4e:	4615      	mov	r5, r2
 8010d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d52:	6020      	str	r0, [r4, #0]
 8010d54:	6061      	str	r1, [r4, #4]
 8010d56:	60a2      	str	r2, [r4, #8]
 8010d58:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,7,9,15,12,11,18");
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	3304      	adds	r3, #4
 8010d5e:	4a58      	ldr	r2, [pc, #352]	; (8010ec0 <problem_fetch+0xf7d8>)
 8010d60:	461d      	mov	r5, r3
 8010d62:	4614      	mov	r4, r2
 8010d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010d66:	6028      	str	r0, [r5, #0]
 8010d68:	6069      	str	r1, [r5, #4]
 8010d6a:	60aa      	str	r2, [r5, #8]
 8010d6c:	60eb      	str	r3, [r5, #12]
 8010d6e:	6820      	ldr	r0, [r4, #0]
 8010d70:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010d78:	4a52      	ldr	r2, [pc, #328]	; (8010ec4 <problem_fetch+0xf7dc>)
 8010d7a:	461c      	mov	r4, r3
 8010d7c:	4615      	mov	r5, r2
 8010d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d80:	6020      	str	r0, [r4, #0]
 8010d82:	6061      	str	r1, [r4, #4]
 8010d84:	60a2      	str	r2, [r4, #8]
 8010d86:	60e3      	str	r3, [r4, #12]
			break;
 8010d88:	f00b bbde 	b.w	801c548 <problem_fetch+0x1ae60>
		case 453 :
			strcpy(p->name,"THE BIG DREAM");
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010d92:	4a4d      	ldr	r2, [pc, #308]	; (8010ec8 <problem_fetch+0xf7e0>)
 8010d94:	461c      	mov	r4, r3
 8010d96:	4613      	mov	r3, r2
 8010d98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010d9a:	6020      	str	r0, [r4, #0]
 8010d9c:	6061      	str	r1, [r4, #4]
 8010d9e:	60a2      	str	r2, [r4, #8]
 8010da0:	881b      	ldrh	r3, [r3, #0]
 8010da2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010daa:	4a48      	ldr	r2, [pc, #288]	; (8010ecc <problem_fetch+0xf7e4>)
 8010dac:	8811      	ldrh	r1, [r2, #0]
 8010dae:	7892      	ldrb	r2, [r2, #2]
 8010db0:	8019      	strh	r1, [r3, #0]
 8010db2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2208      	movs	r2, #8
 8010db8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,E,F,I,I");
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	33a4      	adds	r3, #164	; 0xa4
 8010dbe:	4a44      	ldr	r2, [pc, #272]	; (8010ed0 <problem_fetch+0xf7e8>)
 8010dc0:	461c      	mov	r4, r3
 8010dc2:	4615      	mov	r5, r2
 8010dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010dc6:	6020      	str	r0, [r4, #0]
 8010dc8:	6061      	str	r1, [r4, #4]
 8010dca:	60a2      	str	r2, [r4, #8]
 8010dcc:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,12,13,14,18");
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4a40      	ldr	r2, [pc, #256]	; (8010ed4 <problem_fetch+0xf7ec>)
 8010dd4:	461d      	mov	r5, r3
 8010dd6:	4614      	mov	r4, r2
 8010dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010dda:	6028      	str	r0, [r5, #0]
 8010ddc:	6069      	str	r1, [r5, #4]
 8010dde:	60aa      	str	r2, [r5, #8]
 8010de0:	60eb      	str	r3, [r5, #12]
 8010de2:	6820      	ldr	r0, [r4, #0]
 8010de4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010dec:	4a35      	ldr	r2, [pc, #212]	; (8010ec4 <problem_fetch+0xf7dc>)
 8010dee:	461c      	mov	r4, r3
 8010df0:	4615      	mov	r5, r2
 8010df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010df4:	6020      	str	r0, [r4, #0]
 8010df6:	6061      	str	r1, [r4, #4]
 8010df8:	60a2      	str	r2, [r4, #8]
 8010dfa:	60e3      	str	r3, [r4, #12]
			break;
 8010dfc:	f00b bba4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 454 :
			strcpy(p->name,"THE LAPSUS SISTER");
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010e06:	4a34      	ldr	r2, [pc, #208]	; (8010ed8 <problem_fetch+0xf7f0>)
 8010e08:	461d      	mov	r5, r3
 8010e0a:	4614      	mov	r4, r2
 8010e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e0e:	6028      	str	r0, [r5, #0]
 8010e10:	6069      	str	r1, [r5, #4]
 8010e12:	60aa      	str	r2, [r5, #8]
 8010e14:	60eb      	str	r3, [r5, #12]
 8010e16:	8823      	ldrh	r3, [r4, #0]
 8010e18:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010e20:	4a20      	ldr	r2, [pc, #128]	; (8010ea4 <problem_fetch+0xf7bc>)
 8010e22:	6810      	ldr	r0, [r2, #0]
 8010e24:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2207      	movs	r2, #7
 8010e2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,B,E,B,D,D");
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	33a4      	adds	r3, #164	; 0xa4
 8010e30:	4a2a      	ldr	r2, [pc, #168]	; (8010edc <problem_fetch+0xf7f4>)
 8010e32:	461c      	mov	r4, r3
 8010e34:	4613      	mov	r3, r2
 8010e36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e38:	6020      	str	r0, [r4, #0]
 8010e3a:	6061      	str	r1, [r4, #4]
 8010e3c:	60a2      	str	r2, [r4, #8]
 8010e3e:	881b      	ldrh	r3, [r3, #0]
 8010e40:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,12,15,7,18");
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	3304      	adds	r3, #4
 8010e46:	4a26      	ldr	r2, [pc, #152]	; (8010ee0 <problem_fetch+0xf7f8>)
 8010e48:	461d      	mov	r5, r3
 8010e4a:	4614      	mov	r4, r2
 8010e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010e4e:	6028      	str	r0, [r5, #0]
 8010e50:	6069      	str	r1, [r5, #4]
 8010e52:	60aa      	str	r2, [r5, #8]
 8010e54:	60eb      	str	r3, [r5, #12]
 8010e56:	8823      	ldrh	r3, [r4, #0]
 8010e58:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010e60:	4a0e      	ldr	r2, [pc, #56]	; (8010e9c <problem_fetch+0xf7b4>)
 8010e62:	461c      	mov	r4, r3
 8010e64:	4613      	mov	r3, r2
 8010e66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010e68:	6020      	str	r0, [r4, #0]
 8010e6a:	6061      	str	r1, [r4, #4]
 8010e6c:	60a2      	str	r2, [r4, #8]
 8010e6e:	881b      	ldrh	r3, [r3, #0]
 8010e70:	81a3      	strh	r3, [r4, #12]
			break;
 8010e72:	f00b bb69 	b.w	801c548 <problem_fetch+0x1ae60>
 8010e76:	bf00      	nop
 8010e78:	08028fa4 	.word	0x08028fa4
 8010e7c:	0802391c 	.word	0x0802391c
 8010e80:	08028fb8 	.word	0x08028fb8
 8010e84:	08028fc4 	.word	0x08028fc4
 8010e88:	08023cf8 	.word	0x08023cf8
 8010e8c:	08028fd4 	.word	0x08028fd4
 8010e90:	08023afc 	.word	0x08023afc
 8010e94:	08028fdc 	.word	0x08028fdc
 8010e98:	08028fec 	.word	0x08028fec
 8010e9c:	080239d4 	.word	0x080239d4
 8010ea0:	08029000 	.word	0x08029000
 8010ea4:	0802395c 	.word	0x0802395c
 8010ea8:	08029014 	.word	0x08029014
 8010eac:	08029024 	.word	0x08029024
 8010eb0:	08023b6c 	.word	0x08023b6c
 8010eb4:	08029038 	.word	0x08029038
 8010eb8:	080239f4 	.word	0x080239f4
 8010ebc:	08029048 	.word	0x08029048
 8010ec0:	08029058 	.word	0x08029058
 8010ec4:	08023a80 	.word	0x08023a80
 8010ec8:	0802906c 	.word	0x0802906c
 8010ecc:	08023a28 	.word	0x08023a28
 8010ed0:	0802907c 	.word	0x0802907c
 8010ed4:	0802908c 	.word	0x0802908c
 8010ed8:	080290a0 	.word	0x080290a0
 8010edc:	080290b4 	.word	0x080290b4
 8010ee0:	080290c4 	.word	0x080290c4
		case 455 :
			strcpy(p->name,"TENDON DAY");
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010eea:	49b0      	ldr	r1, [pc, #704]	; (80111ac <problem_fetch+0xfac4>)
 8010eec:	461a      	mov	r2, r3
 8010eee:	460b      	mov	r3, r1
 8010ef0:	cb03      	ldmia	r3!, {r0, r1}
 8010ef2:	6010      	str	r0, [r2, #0]
 8010ef4:	6051      	str	r1, [r2, #4]
 8010ef6:	8819      	ldrh	r1, [r3, #0]
 8010ef8:	789b      	ldrb	r3, [r3, #2]
 8010efa:	8111      	strh	r1, [r2, #8]
 8010efc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010f04:	4aaa      	ldr	r2, [pc, #680]	; (80111b0 <problem_fetch+0xfac8>)
 8010f06:	8811      	ldrh	r1, [r2, #0]
 8010f08:	7892      	ldrb	r2, [r2, #2]
 8010f0a:	8019      	strh	r1, [r3, #0]
 8010f0c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	2208      	movs	r2, #8
 8010f12:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,C,E,A,E,A");
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	33a4      	adds	r3, #164	; 0xa4
 8010f18:	4aa6      	ldr	r2, [pc, #664]	; (80111b4 <problem_fetch+0xfacc>)
 8010f1a:	461c      	mov	r4, r3
 8010f1c:	4615      	mov	r5, r2
 8010f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f20:	6020      	str	r0, [r4, #0]
 8010f22:	6061      	str	r1, [r4, #4]
 8010f24:	60a2      	str	r2, [r4, #8]
 8010f26:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,8,12,14,14,18");
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	3304      	adds	r3, #4
 8010f2c:	4aa2      	ldr	r2, [pc, #648]	; (80111b8 <problem_fetch+0xfad0>)
 8010f2e:	461d      	mov	r5, r3
 8010f30:	4614      	mov	r4, r2
 8010f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f34:	6028      	str	r0, [r5, #0]
 8010f36:	6069      	str	r1, [r5, #4]
 8010f38:	60aa      	str	r2, [r5, #8]
 8010f3a:	60eb      	str	r3, [r5, #12]
 8010f3c:	6820      	ldr	r0, [r4, #0]
 8010f3e:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010f46:	4a9d      	ldr	r2, [pc, #628]	; (80111bc <problem_fetch+0xfad4>)
 8010f48:	461c      	mov	r4, r3
 8010f4a:	4615      	mov	r5, r2
 8010f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f4e:	6020      	str	r0, [r4, #0]
 8010f50:	6061      	str	r1, [r4, #4]
 8010f52:	60a2      	str	r2, [r4, #8]
 8010f54:	60e3      	str	r3, [r4, #12]
			break;
 8010f56:	f00b baf7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 456 :
			strcpy(p->name,"LESS REST MORE INJURY");
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010f60:	4a97      	ldr	r2, [pc, #604]	; (80111c0 <problem_fetch+0xfad8>)
 8010f62:	461d      	mov	r5, r3
 8010f64:	4614      	mov	r4, r2
 8010f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f68:	6028      	str	r0, [r5, #0]
 8010f6a:	6069      	str	r1, [r5, #4]
 8010f6c:	60aa      	str	r2, [r5, #8]
 8010f6e:	60eb      	str	r3, [r5, #12]
 8010f70:	6820      	ldr	r0, [r4, #0]
 8010f72:	6128      	str	r0, [r5, #16]
 8010f74:	88a3      	ldrh	r3, [r4, #4]
 8010f76:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8010f7e:	4a91      	ldr	r2, [pc, #580]	; (80111c4 <problem_fetch+0xfadc>)
 8010f80:	6810      	ldr	r0, [r2, #0]
 8010f82:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2209      	movs	r2, #9
 8010f88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,G,F,G,J,G,D");
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	33a4      	adds	r3, #164	; 0xa4
 8010f8e:	4a8e      	ldr	r2, [pc, #568]	; (80111c8 <problem_fetch+0xfae0>)
 8010f90:	461d      	mov	r5, r3
 8010f92:	4614      	mov	r4, r2
 8010f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010f96:	6028      	str	r0, [r5, #0]
 8010f98:	6069      	str	r1, [r5, #4]
 8010f9a:	60aa      	str	r2, [r5, #8]
 8010f9c:	60eb      	str	r3, [r5, #12]
 8010f9e:	8823      	ldrh	r3, [r4, #0]
 8010fa0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,6,7,9,11,17,13,15,18");
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4a89      	ldr	r2, [pc, #548]	; (80111cc <problem_fetch+0xfae4>)
 8010fa8:	461c      	mov	r4, r3
 8010faa:	4615      	mov	r5, r2
 8010fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010fae:	6020      	str	r0, [r4, #0]
 8010fb0:	6061      	str	r1, [r4, #4]
 8010fb2:	60a2      	str	r2, [r4, #8]
 8010fb4:	60e3      	str	r3, [r4, #12]
 8010fb6:	6828      	ldr	r0, [r5, #0]
 8010fb8:	6120      	str	r0, [r4, #16]
 8010fba:	88ab      	ldrh	r3, [r5, #4]
 8010fbc:	79aa      	ldrb	r2, [r5, #6]
 8010fbe:	82a3      	strh	r3, [r4, #20]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8010fca:	4a81      	ldr	r2, [pc, #516]	; (80111d0 <problem_fetch+0xfae8>)
 8010fcc:	461d      	mov	r5, r3
 8010fce:	4614      	mov	r4, r2
 8010fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010fd2:	6028      	str	r0, [r5, #0]
 8010fd4:	6069      	str	r1, [r5, #4]
 8010fd6:	60aa      	str	r2, [r5, #8]
 8010fd8:	60eb      	str	r3, [r5, #12]
 8010fda:	8823      	ldrh	r3, [r4, #0]
 8010fdc:	822b      	strh	r3, [r5, #16]
			break;
 8010fde:	f00b bab3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 457 :
			strcpy(p->name,"MORE EFFORT LESS SKIN");
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8010fe8:	4a7a      	ldr	r2, [pc, #488]	; (80111d4 <problem_fetch+0xfaec>)
 8010fea:	461d      	mov	r5, r3
 8010fec:	4614      	mov	r4, r2
 8010fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ff0:	6028      	str	r0, [r5, #0]
 8010ff2:	6069      	str	r1, [r5, #4]
 8010ff4:	60aa      	str	r2, [r5, #8]
 8010ff6:	60eb      	str	r3, [r5, #12]
 8010ff8:	6820      	ldr	r0, [r4, #0]
 8010ffa:	6128      	str	r0, [r5, #16]
 8010ffc:	88a3      	ldrh	r3, [r4, #4]
 8010ffe:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011006:	4a6f      	ldr	r2, [pc, #444]	; (80111c4 <problem_fetch+0xfadc>)
 8011008:	6810      	ldr	r0, [r2, #0]
 801100a:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2208      	movs	r2, #8
 8011010:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,H,J,F,G,J,I");
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	33a4      	adds	r3, #164	; 0xa4
 8011016:	4a70      	ldr	r2, [pc, #448]	; (80111d8 <problem_fetch+0xfaf0>)
 8011018:	461c      	mov	r4, r3
 801101a:	4615      	mov	r5, r2
 801101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801101e:	6020      	str	r0, [r4, #0]
 8011020:	6061      	str	r1, [r4, #4]
 8011022:	60a2      	str	r2, [r4, #8]
 8011024:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,16,13,11,9,7,18");
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	3304      	adds	r3, #4
 801102a:	4a6c      	ldr	r2, [pc, #432]	; (80111dc <problem_fetch+0xfaf4>)
 801102c:	461d      	mov	r5, r3
 801102e:	4614      	mov	r4, r2
 8011030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011032:	6028      	str	r0, [r5, #0]
 8011034:	6069      	str	r1, [r5, #4]
 8011036:	60aa      	str	r2, [r5, #8]
 8011038:	60eb      	str	r3, [r5, #12]
 801103a:	6820      	ldr	r0, [r4, #0]
 801103c:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011044:	4a5d      	ldr	r2, [pc, #372]	; (80111bc <problem_fetch+0xfad4>)
 8011046:	461c      	mov	r4, r3
 8011048:	4615      	mov	r5, r2
 801104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801104c:	6020      	str	r0, [r4, #0]
 801104e:	6061      	str	r1, [r4, #4]
 8011050:	60a2      	str	r2, [r4, #8]
 8011052:	60e3      	str	r3, [r4, #12]
			break;
 8011054:	f00b ba78 	b.w	801c548 <problem_fetch+0x1ae60>
		case 458 :
			strcpy(p->name,"SKWAMA");
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801105e:	4a60      	ldr	r2, [pc, #384]	; (80111e0 <problem_fetch+0xfaf8>)
 8011060:	6810      	ldr	r0, [r2, #0]
 8011062:	6018      	str	r0, [r3, #0]
 8011064:	8891      	ldrh	r1, [r2, #4]
 8011066:	7992      	ldrb	r2, [r2, #6]
 8011068:	8099      	strh	r1, [r3, #4]
 801106a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011072:	4a5c      	ldr	r2, [pc, #368]	; (80111e4 <problem_fetch+0xfafc>)
 8011074:	6810      	ldr	r0, [r2, #0]
 8011076:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2208      	movs	r2, #8
 801107c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,J,H,K,G,I");
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	33a4      	adds	r3, #164	; 0xa4
 8011082:	4a59      	ldr	r2, [pc, #356]	; (80111e8 <problem_fetch+0xfb00>)
 8011084:	461c      	mov	r4, r3
 8011086:	4615      	mov	r5, r2
 8011088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801108a:	6020      	str	r0, [r4, #0]
 801108c:	6061      	str	r1, [r4, #4]
 801108e:	60a2      	str	r2, [r4, #8]
 8011090:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,7,12,14,15,18");
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3304      	adds	r3, #4
 8011096:	4a55      	ldr	r2, [pc, #340]	; (80111ec <problem_fetch+0xfb04>)
 8011098:	461d      	mov	r5, r3
 801109a:	4614      	mov	r4, r2
 801109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801109e:	6028      	str	r0, [r5, #0]
 80110a0:	6069      	str	r1, [r5, #4]
 80110a2:	60aa      	str	r2, [r5, #8]
 80110a4:	60eb      	str	r3, [r5, #12]
 80110a6:	6820      	ldr	r0, [r4, #0]
 80110a8:	6128      	str	r0, [r5, #16]
 80110aa:	7923      	ldrb	r3, [r4, #4]
 80110ac:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80110b4:	4a4e      	ldr	r2, [pc, #312]	; (80111f0 <problem_fetch+0xfb08>)
 80110b6:	461c      	mov	r4, r3
 80110b8:	4615      	mov	r5, r2
 80110ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80110bc:	6020      	str	r0, [r4, #0]
 80110be:	6061      	str	r1, [r4, #4]
 80110c0:	60a2      	str	r2, [r4, #8]
 80110c2:	60e3      	str	r3, [r4, #12]
			break;
 80110c4:	f00b ba40 	b.w	801c548 <problem_fetch+0x1ae60>
		case 459 :
			strcpy(p->name,"NOIA");
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80110ce:	4a49      	ldr	r2, [pc, #292]	; (80111f4 <problem_fetch+0xfb0c>)
 80110d0:	6810      	ldr	r0, [r2, #0]
 80110d2:	6018      	str	r0, [r3, #0]
 80110d4:	7912      	ldrb	r2, [r2, #4]
 80110d6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80110de:	4a39      	ldr	r2, [pc, #228]	; (80111c4 <problem_fetch+0xfadc>)
 80110e0:	6810      	ldr	r0, [r2, #0]
 80110e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2206      	movs	r2, #6
 80110e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,C,E,A,A");
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	33a4      	adds	r3, #164	; 0xa4
 80110ee:	4a42      	ldr	r2, [pc, #264]	; (80111f8 <problem_fetch+0xfb10>)
 80110f0:	461c      	mov	r4, r3
 80110f2:	4613      	mov	r3, r2
 80110f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80110f6:	6020      	str	r0, [r4, #0]
 80110f8:	6061      	str	r1, [r4, #4]
 80110fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,4,8,12,14,18");
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	3304      	adds	r3, #4
 8011100:	4a3e      	ldr	r2, [pc, #248]	; (80111fc <problem_fetch+0xfb14>)
 8011102:	461c      	mov	r4, r3
 8011104:	4613      	mov	r3, r2
 8011106:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011108:	6020      	str	r0, [r4, #0]
 801110a:	6061      	str	r1, [r4, #4]
 801110c:	60a2      	str	r2, [r4, #8]
 801110e:	881a      	ldrh	r2, [r3, #0]
 8011110:	789b      	ldrb	r3, [r3, #2]
 8011112:	81a2      	strh	r2, [r4, #12]
 8011114:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801111c:	4a38      	ldr	r2, [pc, #224]	; (8011200 <problem_fetch+0xfb18>)
 801111e:	461c      	mov	r4, r3
 8011120:	4613      	mov	r3, r2
 8011122:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011124:	6020      	str	r0, [r4, #0]
 8011126:	6061      	str	r1, [r4, #4]
 8011128:	60a2      	str	r2, [r4, #8]
			break;
 801112a:	f00b ba0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 460 :
			strcpy(p->name,"LES DRUS");
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011134:	4933      	ldr	r1, [pc, #204]	; (8011204 <problem_fetch+0xfb1c>)
 8011136:	461a      	mov	r2, r3
 8011138:	460b      	mov	r3, r1
 801113a:	cb03      	ldmia	r3!, {r0, r1}
 801113c:	6010      	str	r0, [r2, #0]
 801113e:	6051      	str	r1, [r2, #4]
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801114a:	4a19      	ldr	r2, [pc, #100]	; (80111b0 <problem_fetch+0xfac8>)
 801114c:	8811      	ldrh	r1, [r2, #0]
 801114e:	7892      	ldrb	r2, [r2, #2]
 8011150:	8019      	strh	r1, [r3, #0]
 8011152:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2207      	movs	r2, #7
 8011158:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,E,I,I,D");
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	33a4      	adds	r3, #164	; 0xa4
 801115e:	4a2a      	ldr	r2, [pc, #168]	; (8011208 <problem_fetch+0xfb20>)
 8011160:	461c      	mov	r4, r3
 8011162:	4613      	mov	r3, r2
 8011164:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011166:	6020      	str	r0, [r4, #0]
 8011168:	6061      	str	r1, [r4, #4]
 801116a:	60a2      	str	r2, [r4, #8]
 801116c:	881b      	ldrh	r3, [r3, #0]
 801116e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,16,12,10,7,18");
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	3304      	adds	r3, #4
 8011174:	4a25      	ldr	r2, [pc, #148]	; (801120c <problem_fetch+0xfb24>)
 8011176:	461d      	mov	r5, r3
 8011178:	4614      	mov	r4, r2
 801117a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801117c:	6028      	str	r0, [r5, #0]
 801117e:	6069      	str	r1, [r5, #4]
 8011180:	60aa      	str	r2, [r5, #8]
 8011182:	60eb      	str	r3, [r5, #12]
 8011184:	8823      	ldrh	r3, [r4, #0]
 8011186:	78a2      	ldrb	r2, [r4, #2]
 8011188:	822b      	strh	r3, [r5, #16]
 801118a:	4613      	mov	r3, r2
 801118c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011194:	4a1e      	ldr	r2, [pc, #120]	; (8011210 <problem_fetch+0xfb28>)
 8011196:	461c      	mov	r4, r3
 8011198:	4613      	mov	r3, r2
 801119a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801119c:	6020      	str	r0, [r4, #0]
 801119e:	6061      	str	r1, [r4, #4]
 80111a0:	60a2      	str	r2, [r4, #8]
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	81a3      	strh	r3, [r4, #12]
			break;
 80111a6:	f00b b9cf 	b.w	801c548 <problem_fetch+0x1ae60>
 80111aa:	bf00      	nop
 80111ac:	080290d8 	.word	0x080290d8
 80111b0:	0802391c 	.word	0x0802391c
 80111b4:	080290e4 	.word	0x080290e4
 80111b8:	080290f4 	.word	0x080290f4
 80111bc:	08023a80 	.word	0x08023a80
 80111c0:	08029108 	.word	0x08029108
 80111c4:	080239f4 	.word	0x080239f4
 80111c8:	08029120 	.word	0x08029120
 80111cc:	08029134 	.word	0x08029134
 80111d0:	08024940 	.word	0x08024940
 80111d4:	0802914c 	.word	0x0802914c
 80111d8:	08029164 	.word	0x08029164
 80111dc:	08029174 	.word	0x08029174
 80111e0:	08029188 	.word	0x08029188
 80111e4:	0802395c 	.word	0x0802395c
 80111e8:	08029190 	.word	0x08029190
 80111ec:	080291a0 	.word	0x080291a0
 80111f0:	08023b6c 	.word	0x08023b6c
 80111f4:	080291b8 	.word	0x080291b8
 80111f8:	080291c0 	.word	0x080291c0
 80111fc:	080291cc 	.word	0x080291cc
 8011200:	0802393c 	.word	0x0802393c
 8011204:	080291dc 	.word	0x080291dc
 8011208:	080291e8 	.word	0x080291e8
 801120c:	080291f8 	.word	0x080291f8
 8011210:	08023ae4 	.word	0x08023ae4
		case 461 :
			strcpy(p->name,"GTC&AMP;TCT");
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801121a:	4aba      	ldr	r2, [pc, #744]	; (8011504 <problem_fetch+0xfe1c>)
 801121c:	461c      	mov	r4, r3
 801121e:	4613      	mov	r3, r2
 8011220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011222:	6020      	str	r0, [r4, #0]
 8011224:	6061      	str	r1, [r4, #4]
 8011226:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801122e:	4ab6      	ldr	r2, [pc, #728]	; (8011508 <problem_fetch+0xfe20>)
 8011230:	6810      	ldr	r0, [r2, #0]
 8011232:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2207      	movs	r2, #7
 8011238:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,G,J,I,J,D");
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	33a4      	adds	r3, #164	; 0xa4
 801123e:	4ab3      	ldr	r2, [pc, #716]	; (801150c <problem_fetch+0xfe24>)
 8011240:	461c      	mov	r4, r3
 8011242:	4613      	mov	r3, r2
 8011244:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011246:	6020      	str	r0, [r4, #0]
 8011248:	6061      	str	r1, [r4, #4]
 801124a:	60a2      	str	r2, [r4, #8]
 801124c:	881b      	ldrh	r3, [r3, #0]
 801124e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,17,12,10,7,18");
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3304      	adds	r3, #4
 8011254:	4aae      	ldr	r2, [pc, #696]	; (8011510 <problem_fetch+0xfe28>)
 8011256:	461d      	mov	r5, r3
 8011258:	4614      	mov	r4, r2
 801125a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801125c:	6028      	str	r0, [r5, #0]
 801125e:	6069      	str	r1, [r5, #4]
 8011260:	60aa      	str	r2, [r5, #8]
 8011262:	60eb      	str	r3, [r5, #12]
 8011264:	8823      	ldrh	r3, [r4, #0]
 8011266:	78a2      	ldrb	r2, [r4, #2]
 8011268:	822b      	strh	r3, [r5, #16]
 801126a:	4613      	mov	r3, r2
 801126c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011274:	4aa7      	ldr	r2, [pc, #668]	; (8011514 <problem_fetch+0xfe2c>)
 8011276:	461c      	mov	r4, r3
 8011278:	4613      	mov	r3, r2
 801127a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801127c:	6020      	str	r0, [r4, #0]
 801127e:	6061      	str	r1, [r4, #4]
 8011280:	60a2      	str	r2, [r4, #8]
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	81a3      	strh	r3, [r4, #12]
			break;
 8011286:	f00b b95f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 462 :
			strcpy(p->name,"LA COSA NOSTRA");
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011290:	4aa1      	ldr	r2, [pc, #644]	; (8011518 <problem_fetch+0xfe30>)
 8011292:	461c      	mov	r4, r3
 8011294:	4613      	mov	r3, r2
 8011296:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011298:	6020      	str	r0, [r4, #0]
 801129a:	6061      	str	r1, [r4, #4]
 801129c:	60a2      	str	r2, [r4, #8]
 801129e:	881a      	ldrh	r2, [r3, #0]
 80112a0:	789b      	ldrb	r3, [r3, #2]
 80112a2:	81a2      	strh	r2, [r4, #12]
 80112a4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80112ac:	4a96      	ldr	r2, [pc, #600]	; (8011508 <problem_fetch+0xfe20>)
 80112ae:	6810      	ldr	r0, [r2, #0]
 80112b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2209      	movs	r2, #9
 80112b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,E,F,J,J,H,G,D");
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	33a4      	adds	r3, #164	; 0xa4
 80112bc:	4a97      	ldr	r2, [pc, #604]	; (801151c <problem_fetch+0xfe34>)
 80112be:	461d      	mov	r5, r3
 80112c0:	4614      	mov	r4, r2
 80112c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112c4:	6028      	str	r0, [r5, #0]
 80112c6:	6069      	str	r1, [r5, #4]
 80112c8:	60aa      	str	r2, [r5, #8]
 80112ca:	60eb      	str	r3, [r5, #12]
 80112cc:	8823      	ldrh	r3, [r4, #0]
 80112ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,9,6,11,7,13,16,17,18");
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	3304      	adds	r3, #4
 80112d4:	4a92      	ldr	r2, [pc, #584]	; (8011520 <problem_fetch+0xfe38>)
 80112d6:	461c      	mov	r4, r3
 80112d8:	4615      	mov	r5, r2
 80112da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112dc:	6020      	str	r0, [r4, #0]
 80112de:	6061      	str	r1, [r4, #4]
 80112e0:	60a2      	str	r2, [r4, #8]
 80112e2:	60e3      	str	r3, [r4, #12]
 80112e4:	6828      	ldr	r0, [r5, #0]
 80112e6:	6120      	str	r0, [r4, #16]
 80112e8:	88ab      	ldrh	r3, [r5, #4]
 80112ea:	79aa      	ldrb	r2, [r5, #6]
 80112ec:	82a3      	strh	r3, [r4, #20]
 80112ee:	4613      	mov	r3, r2
 80112f0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80112f8:	4a8a      	ldr	r2, [pc, #552]	; (8011524 <problem_fetch+0xfe3c>)
 80112fa:	461d      	mov	r5, r3
 80112fc:	4614      	mov	r4, r2
 80112fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011300:	6028      	str	r0, [r5, #0]
 8011302:	6069      	str	r1, [r5, #4]
 8011304:	60aa      	str	r2, [r5, #8]
 8011306:	60eb      	str	r3, [r5, #12]
 8011308:	8823      	ldrh	r3, [r4, #0]
 801130a:	822b      	strh	r3, [r5, #16]
			break;
 801130c:	f00b b91c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 463 :
			strcpy(p->name,"SMALL COSA NOSTRA");
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011316:	4a84      	ldr	r2, [pc, #528]	; (8011528 <problem_fetch+0xfe40>)
 8011318:	461d      	mov	r5, r3
 801131a:	4614      	mov	r4, r2
 801131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801131e:	6028      	str	r0, [r5, #0]
 8011320:	6069      	str	r1, [r5, #4]
 8011322:	60aa      	str	r2, [r5, #8]
 8011324:	60eb      	str	r3, [r5, #12]
 8011326:	8823      	ldrh	r3, [r4, #0]
 8011328:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011330:	4a7e      	ldr	r2, [pc, #504]	; (801152c <problem_fetch+0xfe44>)
 8011332:	8811      	ldrh	r1, [r2, #0]
 8011334:	7892      	ldrb	r2, [r2, #2]
 8011336:	8019      	strh	r1, [r3, #0]
 8011338:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2208      	movs	r2, #8
 801133e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,J,F,E,J,H,I");
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	33a4      	adds	r3, #164	; 0xa4
 8011344:	4a7a      	ldr	r2, [pc, #488]	; (8011530 <problem_fetch+0xfe48>)
 8011346:	461c      	mov	r4, r3
 8011348:	4615      	mov	r5, r2
 801134a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801134c:	6020      	str	r0, [r4, #0]
 801134e:	6061      	str	r1, [r4, #4]
 8011350:	60a2      	str	r2, [r4, #8]
 8011352:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,7,11,12,13,16,18");
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	3304      	adds	r3, #4
 8011358:	4a76      	ldr	r2, [pc, #472]	; (8011534 <problem_fetch+0xfe4c>)
 801135a:	461d      	mov	r5, r3
 801135c:	4614      	mov	r4, r2
 801135e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011360:	6028      	str	r0, [r5, #0]
 8011362:	6069      	str	r1, [r5, #4]
 8011364:	60aa      	str	r2, [r5, #8]
 8011366:	60eb      	str	r3, [r5, #12]
 8011368:	6820      	ldr	r0, [r4, #0]
 801136a:	6128      	str	r0, [r5, #16]
 801136c:	7923      	ldrb	r3, [r4, #4]
 801136e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011376:	4a70      	ldr	r2, [pc, #448]	; (8011538 <problem_fetch+0xfe50>)
 8011378:	461c      	mov	r4, r3
 801137a:	4615      	mov	r5, r2
 801137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801137e:	6020      	str	r0, [r4, #0]
 8011380:	6061      	str	r1, [r4, #4]
 8011382:	60a2      	str	r2, [r4, #8]
 8011384:	60e3      	str	r3, [r4, #12]
			break;
 8011386:	f00b b8df 	b.w	801c548 <problem_fetch+0x1ae60>
		case 464 :
			strcpy(p->name,"LITTLE COSA NOSTRA");
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011390:	4a6a      	ldr	r2, [pc, #424]	; (801153c <problem_fetch+0xfe54>)
 8011392:	461d      	mov	r5, r3
 8011394:	4614      	mov	r4, r2
 8011396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011398:	6028      	str	r0, [r5, #0]
 801139a:	6069      	str	r1, [r5, #4]
 801139c:	60aa      	str	r2, [r5, #8]
 801139e:	60eb      	str	r3, [r5, #12]
 80113a0:	8823      	ldrh	r3, [r4, #0]
 80113a2:	78a2      	ldrb	r2, [r4, #2]
 80113a4:	822b      	strh	r3, [r5, #16]
 80113a6:	4613      	mov	r3, r2
 80113a8:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80113b0:	4a5e      	ldr	r2, [pc, #376]	; (801152c <problem_fetch+0xfe44>)
 80113b2:	8811      	ldrh	r1, [r2, #0]
 80113b4:	7892      	ldrb	r2, [r2, #2]
 80113b6:	8019      	strh	r1, [r3, #0]
 80113b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	2209      	movs	r2, #9
 80113be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,K,G,I,E,D");
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	33a4      	adds	r3, #164	; 0xa4
 80113c4:	4a5e      	ldr	r2, [pc, #376]	; (8011540 <problem_fetch+0xfe58>)
 80113c6:	461d      	mov	r5, r3
 80113c8:	4614      	mov	r4, r2
 80113ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80113cc:	6028      	str	r0, [r5, #0]
 80113ce:	6069      	str	r1, [r5, #4]
 80113d0:	60aa      	str	r2, [r5, #8]
 80113d2:	60eb      	str	r3, [r5, #12]
 80113d4:	8823      	ldrh	r3, [r4, #0]
 80113d6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,9,10,14,16,18");
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	3304      	adds	r3, #4
 80113dc:	4a59      	ldr	r2, [pc, #356]	; (8011544 <problem_fetch+0xfe5c>)
 80113de:	461c      	mov	r4, r3
 80113e0:	4615      	mov	r5, r2
 80113e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80113e4:	6020      	str	r0, [r4, #0]
 80113e6:	6061      	str	r1, [r4, #4]
 80113e8:	60a2      	str	r2, [r4, #8]
 80113ea:	60e3      	str	r3, [r4, #12]
 80113ec:	6828      	ldr	r0, [r5, #0]
 80113ee:	6120      	str	r0, [r4, #16]
 80113f0:	88ab      	ldrh	r3, [r5, #4]
 80113f2:	79aa      	ldrb	r2, [r5, #6]
 80113f4:	82a3      	strh	r3, [r4, #20]
 80113f6:	4613      	mov	r3, r2
 80113f8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011400:	4a51      	ldr	r2, [pc, #324]	; (8011548 <problem_fetch+0xfe60>)
 8011402:	461d      	mov	r5, r3
 8011404:	4614      	mov	r4, r2
 8011406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011408:	6028      	str	r0, [r5, #0]
 801140a:	6069      	str	r1, [r5, #4]
 801140c:	60aa      	str	r2, [r5, #8]
 801140e:	60eb      	str	r3, [r5, #12]
 8011410:	8823      	ldrh	r3, [r4, #0]
 8011412:	822b      	strh	r3, [r5, #16]
			break;
 8011414:	f00b b898 	b.w	801c548 <problem_fetch+0x1ae60>
		case 465 :
			strcpy(p->name,"THE MOVE");
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801141e:	494b      	ldr	r1, [pc, #300]	; (801154c <problem_fetch+0xfe64>)
 8011420:	461a      	mov	r2, r3
 8011422:	460b      	mov	r3, r1
 8011424:	cb03      	ldmia	r3!, {r0, r1}
 8011426:	6010      	str	r0, [r2, #0]
 8011428:	6051      	str	r1, [r2, #4]
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011434:	4a3d      	ldr	r2, [pc, #244]	; (801152c <problem_fetch+0xfe44>)
 8011436:	8811      	ldrh	r1, [r2, #0]
 8011438:	7892      	ldrb	r2, [r2, #2]
 801143a:	8019      	strh	r1, [r3, #0]
 801143c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2207      	movs	r2, #7
 8011442:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,H,H,I");
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	33a4      	adds	r3, #164	; 0xa4
 8011448:	4a41      	ldr	r2, [pc, #260]	; (8011550 <problem_fetch+0xfe68>)
 801144a:	461c      	mov	r4, r3
 801144c:	4613      	mov	r3, r2
 801144e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011450:	6020      	str	r0, [r4, #0]
 8011452:	6061      	str	r1, [r4, #4]
 8011454:	60a2      	str	r2, [r4, #8]
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,12,12,16,18");
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3304      	adds	r3, #4
 801145e:	4a3d      	ldr	r2, [pc, #244]	; (8011554 <problem_fetch+0xfe6c>)
 8011460:	461d      	mov	r5, r3
 8011462:	4614      	mov	r4, r2
 8011464:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011466:	6028      	str	r0, [r5, #0]
 8011468:	6069      	str	r1, [r5, #4]
 801146a:	60aa      	str	r2, [r5, #8]
 801146c:	60eb      	str	r3, [r5, #12]
 801146e:	8823      	ldrh	r3, [r4, #0]
 8011470:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011478:	4a26      	ldr	r2, [pc, #152]	; (8011514 <problem_fetch+0xfe2c>)
 801147a:	461c      	mov	r4, r3
 801147c:	4613      	mov	r3, r2
 801147e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011480:	6020      	str	r0, [r4, #0]
 8011482:	6061      	str	r1, [r4, #4]
 8011484:	60a2      	str	r2, [r4, #8]
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	81a3      	strh	r3, [r4, #12]
			break;
 801148a:	f00b b85d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 466 :
			strcpy(p->name,"THE LITTLE ISLAND");
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011494:	4a30      	ldr	r2, [pc, #192]	; (8011558 <problem_fetch+0xfe70>)
 8011496:	461d      	mov	r5, r3
 8011498:	4614      	mov	r4, r2
 801149a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801149c:	6028      	str	r0, [r5, #0]
 801149e:	6069      	str	r1, [r5, #4]
 80114a0:	60aa      	str	r2, [r5, #8]
 80114a2:	60eb      	str	r3, [r5, #12]
 80114a4:	8823      	ldrh	r3, [r4, #0]
 80114a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B");
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80114ae:	4a2b      	ldr	r2, [pc, #172]	; (801155c <problem_fetch+0xfe74>)
 80114b0:	8811      	ldrh	r1, [r2, #0]
 80114b2:	7892      	ldrb	r2, [r2, #2]
 80114b4:	8019      	strh	r1, [r3, #0]
 80114b6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2206      	movs	r2, #6
 80114bc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,K,H,G,D");
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	33a4      	adds	r3, #164	; 0xa4
 80114c2:	4a27      	ldr	r2, [pc, #156]	; (8011560 <problem_fetch+0xfe78>)
 80114c4:	461c      	mov	r4, r3
 80114c6:	4613      	mov	r3, r2
 80114c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114ca:	6020      	str	r0, [r4, #0]
 80114cc:	6061      	str	r1, [r4, #4]
 80114ce:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,12,17,18");
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3304      	adds	r3, #4
 80114d4:	4a23      	ldr	r2, [pc, #140]	; (8011564 <problem_fetch+0xfe7c>)
 80114d6:	461c      	mov	r4, r3
 80114d8:	4613      	mov	r3, r2
 80114da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114dc:	6020      	str	r0, [r4, #0]
 80114de:	6061      	str	r1, [r4, #4]
 80114e0:	60a2      	str	r2, [r4, #8]
 80114e2:	881a      	ldrh	r2, [r3, #0]
 80114e4:	789b      	ldrb	r3, [r3, #2]
 80114e6:	81a2      	strh	r2, [r4, #12]
 80114e8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80114f0:	4a1d      	ldr	r2, [pc, #116]	; (8011568 <problem_fetch+0xfe80>)
 80114f2:	461c      	mov	r4, r3
 80114f4:	4613      	mov	r3, r2
 80114f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80114f8:	6020      	str	r0, [r4, #0]
 80114fa:	6061      	str	r1, [r4, #4]
 80114fc:	60a2      	str	r2, [r4, #8]
			break;
 80114fe:	f00b b823 	b.w	801c548 <problem_fetch+0x1ae60>
 8011502:	bf00      	nop
 8011504:	0802920c 	.word	0x0802920c
 8011508:	080239f4 	.word	0x080239f4
 801150c:	08029218 	.word	0x08029218
 8011510:	08029228 	.word	0x08029228
 8011514:	08023ae4 	.word	0x08023ae4
 8011518:	0802923c 	.word	0x0802923c
 801151c:	0802924c 	.word	0x0802924c
 8011520:	08029260 	.word	0x08029260
 8011524:	08025814 	.word	0x08025814
 8011528:	08029278 	.word	0x08029278
 801152c:	08023a28 	.word	0x08023a28
 8011530:	0802928c 	.word	0x0802928c
 8011534:	0802929c 	.word	0x0802929c
 8011538:	08023b6c 	.word	0x08023b6c
 801153c:	080292b4 	.word	0x080292b4
 8011540:	080292c8 	.word	0x080292c8
 8011544:	080292dc 	.word	0x080292dc
 8011548:	08024940 	.word	0x08024940
 801154c:	080292f4 	.word	0x080292f4
 8011550:	08029300 	.word	0x08029300
 8011554:	08029310 	.word	0x08029310
 8011558:	08029324 	.word	0x08029324
 801155c:	08024054 	.word	0x08024054
 8011560:	08029338 	.word	0x08029338
 8011564:	08029344 	.word	0x08029344
 8011568:	08023cf8 	.word	0x08023cf8
		case 467 :
			strcpy(p->name,"FACE DE RAT");
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011572:	4aad      	ldr	r2, [pc, #692]	; (8011828 <problem_fetch+0x10140>)
 8011574:	461c      	mov	r4, r3
 8011576:	4613      	mov	r3, r2
 8011578:	cb07      	ldmia	r3!, {r0, r1, r2}
 801157a:	6020      	str	r0, [r4, #0]
 801157c:	6061      	str	r1, [r4, #4]
 801157e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011586:	4aa9      	ldr	r2, [pc, #676]	; (801182c <problem_fetch+0x10144>)
 8011588:	8811      	ldrh	r1, [r2, #0]
 801158a:	7892      	ldrb	r2, [r2, #2]
 801158c:	8019      	strh	r1, [r3, #0]
 801158e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	2208      	movs	r2, #8
 8011594:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,F,I,I");
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	33a4      	adds	r3, #164	; 0xa4
 801159a:	4aa5      	ldr	r2, [pc, #660]	; (8011830 <problem_fetch+0x10148>)
 801159c:	461c      	mov	r4, r3
 801159e:	4615      	mov	r5, r2
 80115a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115a2:	6020      	str	r0, [r4, #0]
 80115a4:	6061      	str	r1, [r4, #4]
 80115a6:	60a2      	str	r2, [r4, #8]
 80115a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,13,14,18");
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	3304      	adds	r3, #4
 80115ae:	4aa1      	ldr	r2, [pc, #644]	; (8011834 <problem_fetch+0x1014c>)
 80115b0:	461d      	mov	r5, r3
 80115b2:	4614      	mov	r4, r2
 80115b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80115b6:	6028      	str	r0, [r5, #0]
 80115b8:	6069      	str	r1, [r5, #4]
 80115ba:	60aa      	str	r2, [r5, #8]
 80115bc:	60eb      	str	r3, [r5, #12]
 80115be:	6820      	ldr	r0, [r4, #0]
 80115c0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80115c8:	4a9b      	ldr	r2, [pc, #620]	; (8011838 <problem_fetch+0x10150>)
 80115ca:	461c      	mov	r4, r3
 80115cc:	4615      	mov	r5, r2
 80115ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80115d0:	6020      	str	r0, [r4, #0]
 80115d2:	6061      	str	r1, [r4, #4]
 80115d4:	60a2      	str	r2, [r4, #8]
 80115d6:	60e3      	str	r3, [r4, #12]
			break;
 80115d8:	f00a bfb6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 468 :
			strcpy(p->name,"THE F(L)IGHT");
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80115e2:	4a96      	ldr	r2, [pc, #600]	; (801183c <problem_fetch+0x10154>)
 80115e4:	461c      	mov	r4, r3
 80115e6:	4613      	mov	r3, r2
 80115e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80115ea:	6020      	str	r0, [r4, #0]
 80115ec:	6061      	str	r1, [r4, #4]
 80115ee:	60a2      	str	r2, [r4, #8]
 80115f0:	781b      	ldrb	r3, [r3, #0]
 80115f2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80115fa:	4a91      	ldr	r2, [pc, #580]	; (8011840 <problem_fetch+0x10158>)
 80115fc:	6810      	ldr	r0, [r2, #0]
 80115fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2208      	movs	r2, #8
 8011604:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,F,J,J,E,I");
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	33a4      	adds	r3, #164	; 0xa4
 801160a:	4a8e      	ldr	r2, [pc, #568]	; (8011844 <problem_fetch+0x1015c>)
 801160c:	461c      	mov	r4, r3
 801160e:	4615      	mov	r5, r2
 8011610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011612:	6020      	str	r0, [r4, #0]
 8011614:	6061      	str	r1, [r4, #4]
 8011616:	60a2      	str	r2, [r4, #8]
 8011618:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,11,13,7,9,18");
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	3304      	adds	r3, #4
 801161e:	4a8a      	ldr	r2, [pc, #552]	; (8011848 <problem_fetch+0x10160>)
 8011620:	461d      	mov	r5, r3
 8011622:	4614      	mov	r4, r2
 8011624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011626:	6028      	str	r0, [r5, #0]
 8011628:	6069      	str	r1, [r5, #4]
 801162a:	60aa      	str	r2, [r5, #8]
 801162c:	60eb      	str	r3, [r5, #12]
 801162e:	6820      	ldr	r0, [r4, #0]
 8011630:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011638:	4a84      	ldr	r2, [pc, #528]	; (801184c <problem_fetch+0x10164>)
 801163a:	461c      	mov	r4, r3
 801163c:	4615      	mov	r5, r2
 801163e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011640:	6020      	str	r0, [r4, #0]
 8011642:	6061      	str	r1, [r4, #4]
 8011644:	60a2      	str	r2, [r4, #8]
 8011646:	60e3      	str	r3, [r4, #12]
			break;
 8011648:	f00a bf7e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 469 :
			strcpy(p->name,"ONE PUNCH");
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011652:	497f      	ldr	r1, [pc, #508]	; (8011850 <problem_fetch+0x10168>)
 8011654:	461a      	mov	r2, r3
 8011656:	460b      	mov	r3, r1
 8011658:	cb03      	ldmia	r3!, {r0, r1}
 801165a:	6010      	str	r0, [r2, #0]
 801165c:	6051      	str	r1, [r2, #4]
 801165e:	881b      	ldrh	r3, [r3, #0]
 8011660:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011668:	4a70      	ldr	r2, [pc, #448]	; (801182c <problem_fetch+0x10144>)
 801166a:	8811      	ldrh	r1, [r2, #0]
 801166c:	7892      	ldrb	r2, [r2, #2]
 801166e:	8019      	strh	r1, [r3, #0]
 8011670:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2209      	movs	r2, #9
 8011676:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,K,H,K,G,I,D");
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	33a4      	adds	r3, #164	; 0xa4
 801167c:	4a75      	ldr	r2, [pc, #468]	; (8011854 <problem_fetch+0x1016c>)
 801167e:	461d      	mov	r5, r3
 8011680:	4614      	mov	r4, r2
 8011682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011684:	6028      	str	r0, [r5, #0]
 8011686:	6069      	str	r1, [r5, #4]
 8011688:	60aa      	str	r2, [r5, #8]
 801168a:	60eb      	str	r3, [r5, #12]
 801168c:	8823      	ldrh	r3, [r4, #0]
 801168e:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,15,9,12,14,17,7,18");
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	3304      	adds	r3, #4
 8011694:	4a70      	ldr	r2, [pc, #448]	; (8011858 <problem_fetch+0x10170>)
 8011696:	461c      	mov	r4, r3
 8011698:	4615      	mov	r5, r2
 801169a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801169c:	6020      	str	r0, [r4, #0]
 801169e:	6061      	str	r1, [r4, #4]
 80116a0:	60a2      	str	r2, [r4, #8]
 80116a2:	60e3      	str	r3, [r4, #12]
 80116a4:	6828      	ldr	r0, [r5, #0]
 80116a6:	6120      	str	r0, [r4, #16]
 80116a8:	88ab      	ldrh	r3, [r5, #4]
 80116aa:	79aa      	ldrb	r2, [r5, #6]
 80116ac:	82a3      	strh	r3, [r4, #20]
 80116ae:	4613      	mov	r3, r2
 80116b0:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80116b8:	4a68      	ldr	r2, [pc, #416]	; (801185c <problem_fetch+0x10174>)
 80116ba:	461d      	mov	r5, r3
 80116bc:	4614      	mov	r4, r2
 80116be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80116c0:	6028      	str	r0, [r5, #0]
 80116c2:	6069      	str	r1, [r5, #4]
 80116c4:	60aa      	str	r2, [r5, #8]
 80116c6:	60eb      	str	r3, [r5, #12]
 80116c8:	8823      	ldrh	r3, [r4, #0]
 80116ca:	822b      	strh	r3, [r5, #16]
			break;
 80116cc:	f00a bf3c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 470 :
			strcpy(p->name,"PIZZAPUNT");
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80116d6:	4962      	ldr	r1, [pc, #392]	; (8011860 <problem_fetch+0x10178>)
 80116d8:	461a      	mov	r2, r3
 80116da:	460b      	mov	r3, r1
 80116dc:	cb03      	ldmia	r3!, {r0, r1}
 80116de:	6010      	str	r0, [r2, #0]
 80116e0:	6051      	str	r1, [r2, #4]
 80116e2:	881b      	ldrh	r3, [r3, #0]
 80116e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80116ec:	4a5d      	ldr	r2, [pc, #372]	; (8011864 <problem_fetch+0x1017c>)
 80116ee:	6810      	ldr	r0, [r2, #0]
 80116f0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2207      	movs	r2, #7
 80116f6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,B,D");
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	33a4      	adds	r3, #164	; 0xa4
 80116fc:	4a5a      	ldr	r2, [pc, #360]	; (8011868 <problem_fetch+0x10180>)
 80116fe:	461c      	mov	r4, r3
 8011700:	4613      	mov	r3, r2
 8011702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011704:	6020      	str	r0, [r4, #0]
 8011706:	6061      	str	r1, [r4, #4]
 8011708:	60a2      	str	r2, [r4, #8]
 801170a:	881b      	ldrh	r3, [r3, #0]
 801170c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,15,18");
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	3304      	adds	r3, #4
 8011712:	4a56      	ldr	r2, [pc, #344]	; (801186c <problem_fetch+0x10184>)
 8011714:	461d      	mov	r5, r3
 8011716:	4614      	mov	r4, r2
 8011718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801171a:	6028      	str	r0, [r5, #0]
 801171c:	6069      	str	r1, [r5, #4]
 801171e:	60aa      	str	r2, [r5, #8]
 8011720:	60eb      	str	r3, [r5, #12]
 8011722:	7823      	ldrb	r3, [r4, #0]
 8011724:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801172c:	4a50      	ldr	r2, [pc, #320]	; (8011870 <problem_fetch+0x10188>)
 801172e:	461c      	mov	r4, r3
 8011730:	4613      	mov	r3, r2
 8011732:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011734:	6020      	str	r0, [r4, #0]
 8011736:	6061      	str	r1, [r4, #4]
 8011738:	60a2      	str	r2, [r4, #8]
 801173a:	881b      	ldrh	r3, [r3, #0]
 801173c:	81a3      	strh	r3, [r4, #12]
			break;
 801173e:	f00a bf03 	b.w	801c548 <problem_fetch+0x1ae60>
		case 471 :
			strcpy(p->name,"A BIT REACHY");
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011748:	4a4a      	ldr	r2, [pc, #296]	; (8011874 <problem_fetch+0x1018c>)
 801174a:	461c      	mov	r4, r3
 801174c:	4613      	mov	r3, r2
 801174e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011750:	6020      	str	r0, [r4, #0]
 8011752:	6061      	str	r1, [r4, #4]
 8011754:	60a2      	str	r2, [r4, #8]
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011760:	4a40      	ldr	r2, [pc, #256]	; (8011864 <problem_fetch+0x1017c>)
 8011762:	6810      	ldr	r0, [r2, #0]
 8011764:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2208      	movs	r2, #8
 801176a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,G,H,G,I,G,I");
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	33a4      	adds	r3, #164	; 0xa4
 8011770:	4a41      	ldr	r2, [pc, #260]	; (8011878 <problem_fetch+0x10190>)
 8011772:	461c      	mov	r4, r3
 8011774:	4615      	mov	r5, r2
 8011776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011778:	6020      	str	r0, [r4, #0]
 801177a:	6061      	str	r1, [r4, #4]
 801177c:	60a2      	str	r2, [r4, #8]
 801177e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,10,14,14,15,18");
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	3304      	adds	r3, #4
 8011784:	4a3d      	ldr	r2, [pc, #244]	; (801187c <problem_fetch+0x10194>)
 8011786:	461d      	mov	r5, r3
 8011788:	4614      	mov	r4, r2
 801178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801178c:	6028      	str	r0, [r5, #0]
 801178e:	6069      	str	r1, [r5, #4]
 8011790:	60aa      	str	r2, [r5, #8]
 8011792:	60eb      	str	r3, [r5, #12]
 8011794:	6820      	ldr	r0, [r4, #0]
 8011796:	6128      	str	r0, [r5, #16]
 8011798:	7923      	ldrb	r3, [r4, #4]
 801179a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80117a2:	4a2a      	ldr	r2, [pc, #168]	; (801184c <problem_fetch+0x10164>)
 80117a4:	461c      	mov	r4, r3
 80117a6:	4615      	mov	r5, r2
 80117a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117aa:	6020      	str	r0, [r4, #0]
 80117ac:	6061      	str	r1, [r4, #4]
 80117ae:	60a2      	str	r2, [r4, #8]
 80117b0:	60e3      	str	r3, [r4, #12]
			break;
 80117b2:	f00a bec9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 472 :
			strcpy(p->name,"NIC_LAICALADDER");
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80117bc:	4a30      	ldr	r2, [pc, #192]	; (8011880 <problem_fetch+0x10198>)
 80117be:	461c      	mov	r4, r3
 80117c0:	4615      	mov	r5, r2
 80117c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80117c4:	6020      	str	r0, [r4, #0]
 80117c6:	6061      	str	r1, [r4, #4]
 80117c8:	60a2      	str	r2, [r4, #8]
 80117ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80117d2:	4a2c      	ldr	r2, [pc, #176]	; (8011884 <problem_fetch+0x1019c>)
 80117d4:	8811      	ldrh	r1, [r2, #0]
 80117d6:	7892      	ldrb	r2, [r2, #2]
 80117d8:	8019      	strh	r1, [r3, #0]
 80117da:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2205      	movs	r2, #5
 80117e0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,J,I");
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	33a4      	adds	r3, #164	; 0xa4
 80117e6:	4928      	ldr	r1, [pc, #160]	; (8011888 <problem_fetch+0x101a0>)
 80117e8:	461a      	mov	r2, r3
 80117ea:	460b      	mov	r3, r1
 80117ec:	cb03      	ldmia	r3!, {r0, r1}
 80117ee:	6010      	str	r0, [r2, #0]
 80117f0:	6051      	str	r1, [r2, #4]
 80117f2:	881b      	ldrh	r3, [r3, #0]
 80117f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,14,16,18");
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	3304      	adds	r3, #4
 80117fa:	4a24      	ldr	r2, [pc, #144]	; (801188c <problem_fetch+0x101a4>)
 80117fc:	461c      	mov	r4, r3
 80117fe:	4613      	mov	r3, r2
 8011800:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011802:	6020      	str	r0, [r4, #0]
 8011804:	6061      	str	r1, [r4, #4]
 8011806:	60a2      	str	r2, [r4, #8]
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011812:	491f      	ldr	r1, [pc, #124]	; (8011890 <problem_fetch+0x101a8>)
 8011814:	461a      	mov	r2, r3
 8011816:	460b      	mov	r3, r1
 8011818:	cb03      	ldmia	r3!, {r0, r1}
 801181a:	6010      	str	r0, [r2, #0]
 801181c:	6051      	str	r1, [r2, #4]
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	8113      	strh	r3, [r2, #8]
			break;
 8011822:	f00a be91 	b.w	801c548 <problem_fetch+0x1ae60>
 8011826:	bf00      	nop
 8011828:	08029354 	.word	0x08029354
 801182c:	08023a28 	.word	0x08023a28
 8011830:	08029360 	.word	0x08029360
 8011834:	08029370 	.word	0x08029370
 8011838:	08023b6c 	.word	0x08023b6c
 801183c:	08029384 	.word	0x08029384
 8011840:	08023afc 	.word	0x08023afc
 8011844:	08029394 	.word	0x08029394
 8011848:	080293a4 	.word	0x080293a4
 801184c:	08023a80 	.word	0x08023a80
 8011850:	080293b8 	.word	0x080293b8
 8011854:	080293c4 	.word	0x080293c4
 8011858:	080293d8 	.word	0x080293d8
 801185c:	08024940 	.word	0x08024940
 8011860:	080293f0 	.word	0x080293f0
 8011864:	0802395c 	.word	0x0802395c
 8011868:	080293fc 	.word	0x080293fc
 801186c:	0802940c 	.word	0x0802940c
 8011870:	08023ae4 	.word	0x08023ae4
 8011874:	08029420 	.word	0x08029420
 8011878:	08029430 	.word	0x08029430
 801187c:	08029440 	.word	0x08029440
 8011880:	08029458 	.word	0x08029458
 8011884:	0802391c 	.word	0x0802391c
 8011888:	08029468 	.word	0x08029468
 801188c:	08029474 	.word	0x08029474
 8011890:	08023e28 	.word	0x08023e28
		case 473 :
			strcpy(p->name,"GIUDA BALLERINI");
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801189a:	4aae      	ldr	r2, [pc, #696]	; (8011b54 <problem_fetch+0x1046c>)
 801189c:	461c      	mov	r4, r3
 801189e:	4615      	mov	r5, r2
 80118a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80118a2:	6020      	str	r0, [r4, #0]
 80118a4:	6061      	str	r1, [r4, #4]
 80118a6:	60a2      	str	r2, [r4, #8]
 80118a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80118b0:	4aa9      	ldr	r2, [pc, #676]	; (8011b58 <problem_fetch+0x10470>)
 80118b2:	8811      	ldrh	r1, [r2, #0]
 80118b4:	7892      	ldrb	r2, [r2, #2]
 80118b6:	8019      	strh	r1, [r3, #0]
 80118b8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2207      	movs	r2, #7
 80118be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,F,F,I,G,D");
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	33a4      	adds	r3, #164	; 0xa4
 80118c4:	4aa5      	ldr	r2, [pc, #660]	; (8011b5c <problem_fetch+0x10474>)
 80118c6:	461c      	mov	r4, r3
 80118c8:	4613      	mov	r3, r2
 80118ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80118cc:	6020      	str	r0, [r4, #0]
 80118ce:	6061      	str	r1, [r4, #4]
 80118d0:	60a2      	str	r2, [r4, #8]
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,13,14,17,18");
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	3304      	adds	r3, #4
 80118da:	4aa1      	ldr	r2, [pc, #644]	; (8011b60 <problem_fetch+0x10478>)
 80118dc:	461d      	mov	r5, r3
 80118de:	4614      	mov	r4, r2
 80118e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80118e2:	6028      	str	r0, [r5, #0]
 80118e4:	6069      	str	r1, [r5, #4]
 80118e6:	60aa      	str	r2, [r5, #8]
 80118e8:	60eb      	str	r3, [r5, #12]
 80118ea:	8823      	ldrh	r3, [r4, #0]
 80118ec:	78a2      	ldrb	r2, [r4, #2]
 80118ee:	822b      	strh	r3, [r5, #16]
 80118f0:	4613      	mov	r3, r2
 80118f2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80118fa:	4a9a      	ldr	r2, [pc, #616]	; (8011b64 <problem_fetch+0x1047c>)
 80118fc:	461c      	mov	r4, r3
 80118fe:	4613      	mov	r3, r2
 8011900:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011902:	6020      	str	r0, [r4, #0]
 8011904:	6061      	str	r1, [r4, #4]
 8011906:	60a2      	str	r2, [r4, #8]
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	81a3      	strh	r3, [r4, #12]
			break;
 801190c:	f00a be1c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 474 :
			strcpy(p->name,"PINCHINGPANDA");
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011916:	4a94      	ldr	r2, [pc, #592]	; (8011b68 <problem_fetch+0x10480>)
 8011918:	461c      	mov	r4, r3
 801191a:	4613      	mov	r3, r2
 801191c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801191e:	6020      	str	r0, [r4, #0]
 8011920:	6061      	str	r1, [r4, #4]
 8011922:	60a2      	str	r2, [r4, #8]
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801192e:	4a8f      	ldr	r2, [pc, #572]	; (8011b6c <problem_fetch+0x10484>)
 8011930:	6810      	ldr	r0, [r2, #0]
 8011932:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2209      	movs	r2, #9
 8011938:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,G,A");
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	33a4      	adds	r3, #164	; 0xa4
 801193e:	4a8c      	ldr	r2, [pc, #560]	; (8011b70 <problem_fetch+0x10488>)
 8011940:	461d      	mov	r5, r3
 8011942:	4614      	mov	r4, r2
 8011944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011946:	6028      	str	r0, [r5, #0]
 8011948:	6069      	str	r1, [r5, #4]
 801194a:	60aa      	str	r2, [r5, #8]
 801194c:	60eb      	str	r3, [r5, #12]
 801194e:	8823      	ldrh	r3, [r4, #0]
 8011950:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,9,18");
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3304      	adds	r3, #4
 8011956:	4a87      	ldr	r2, [pc, #540]	; (8011b74 <problem_fetch+0x1048c>)
 8011958:	461d      	mov	r5, r3
 801195a:	4614      	mov	r4, r2
 801195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801195e:	6028      	str	r0, [r5, #0]
 8011960:	6069      	str	r1, [r5, #4]
 8011962:	60aa      	str	r2, [r5, #8]
 8011964:	60eb      	str	r3, [r5, #12]
 8011966:	6820      	ldr	r0, [r4, #0]
 8011968:	6128      	str	r0, [r5, #16]
 801196a:	88a3      	ldrh	r3, [r4, #4]
 801196c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011974:	4a80      	ldr	r2, [pc, #512]	; (8011b78 <problem_fetch+0x10490>)
 8011976:	461d      	mov	r5, r3
 8011978:	4614      	mov	r4, r2
 801197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801197c:	6028      	str	r0, [r5, #0]
 801197e:	6069      	str	r1, [r5, #4]
 8011980:	60aa      	str	r2, [r5, #8]
 8011982:	60eb      	str	r3, [r5, #12]
 8011984:	8823      	ldrh	r3, [r4, #0]
 8011986:	822b      	strh	r3, [r5, #16]
			break;
 8011988:	f00a bdde 	b.w	801c548 <problem_fetch+0x1ae60>
		case 475 :
			strcpy(p->name,"GOT PINCH?");
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011992:	497a      	ldr	r1, [pc, #488]	; (8011b7c <problem_fetch+0x10494>)
 8011994:	461a      	mov	r2, r3
 8011996:	460b      	mov	r3, r1
 8011998:	cb03      	ldmia	r3!, {r0, r1}
 801199a:	6010      	str	r0, [r2, #0]
 801199c:	6051      	str	r1, [r2, #4]
 801199e:	8819      	ldrh	r1, [r3, #0]
 80119a0:	789b      	ldrb	r3, [r3, #2]
 80119a2:	8111      	strh	r1, [r2, #8]
 80119a4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80119ac:	4a6f      	ldr	r2, [pc, #444]	; (8011b6c <problem_fetch+0x10484>)
 80119ae:	6810      	ldr	r0, [r2, #0]
 80119b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2208      	movs	r2, #8
 80119b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,C,F,C,D,A");
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	33a4      	adds	r3, #164	; 0xa4
 80119bc:	4a70      	ldr	r2, [pc, #448]	; (8011b80 <problem_fetch+0x10498>)
 80119be:	461c      	mov	r4, r3
 80119c0:	4615      	mov	r5, r2
 80119c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119c4:	6020      	str	r0, [r4, #0]
 80119c6:	6061      	str	r1, [r4, #4]
 80119c8:	60a2      	str	r2, [r4, #8]
 80119ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,8,11,13,15,18");
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	3304      	adds	r3, #4
 80119d0:	4a6c      	ldr	r2, [pc, #432]	; (8011b84 <problem_fetch+0x1049c>)
 80119d2:	461d      	mov	r5, r3
 80119d4:	4614      	mov	r4, r2
 80119d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80119d8:	6028      	str	r0, [r5, #0]
 80119da:	6069      	str	r1, [r5, #4]
 80119dc:	60aa      	str	r2, [r5, #8]
 80119de:	60eb      	str	r3, [r5, #12]
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80119ea:	4a67      	ldr	r2, [pc, #412]	; (8011b88 <problem_fetch+0x104a0>)
 80119ec:	461c      	mov	r4, r3
 80119ee:	4615      	mov	r5, r2
 80119f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80119f2:	6020      	str	r0, [r4, #0]
 80119f4:	6061      	str	r1, [r4, #4]
 80119f6:	60a2      	str	r2, [r4, #8]
 80119f8:	60e3      	str	r3, [r4, #12]
			break;
 80119fa:	f00a bda5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 476 :
			strcpy(p->name,"HUMPA");
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011a04:	4a61      	ldr	r2, [pc, #388]	; (8011b8c <problem_fetch+0x104a4>)
 8011a06:	6810      	ldr	r0, [r2, #0]
 8011a08:	6018      	str	r0, [r3, #0]
 8011a0a:	8892      	ldrh	r2, [r2, #4]
 8011a0c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a14:	4a55      	ldr	r2, [pc, #340]	; (8011b6c <problem_fetch+0x10484>)
 8011a16:	6810      	ldr	r0, [r2, #0]
 8011a18:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2209      	movs	r2, #9
 8011a1e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,G,E,H,I");
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	33a4      	adds	r3, #164	; 0xa4
 8011a24:	4a5a      	ldr	r2, [pc, #360]	; (8011b90 <problem_fetch+0x104a8>)
 8011a26:	461d      	mov	r5, r3
 8011a28:	4614      	mov	r4, r2
 8011a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a2c:	6028      	str	r0, [r5, #0]
 8011a2e:	6069      	str	r1, [r5, #4]
 8011a30:	60aa      	str	r2, [r5, #8]
 8011a32:	60eb      	str	r3, [r5, #12]
 8011a34:	8823      	ldrh	r3, [r4, #0]
 8011a36:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,8,11,14,15,8,10,18");
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	4a55      	ldr	r2, [pc, #340]	; (8011b94 <problem_fetch+0x104ac>)
 8011a3e:	461c      	mov	r4, r3
 8011a40:	4615      	mov	r5, r2
 8011a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011a44:	6020      	str	r0, [r4, #0]
 8011a46:	6061      	str	r1, [r4, #4]
 8011a48:	60a2      	str	r2, [r4, #8]
 8011a4a:	60e3      	str	r3, [r4, #12]
 8011a4c:	6828      	ldr	r0, [r5, #0]
 8011a4e:	6120      	str	r0, [r4, #16]
 8011a50:	88ab      	ldrh	r3, [r5, #4]
 8011a52:	79aa      	ldrb	r2, [r5, #6]
 8011a54:	82a3      	strh	r3, [r4, #20]
 8011a56:	4613      	mov	r3, r2
 8011a58:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011a60:	4a45      	ldr	r2, [pc, #276]	; (8011b78 <problem_fetch+0x10490>)
 8011a62:	461d      	mov	r5, r3
 8011a64:	4614      	mov	r4, r2
 8011a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a68:	6028      	str	r0, [r5, #0]
 8011a6a:	6069      	str	r1, [r5, #4]
 8011a6c:	60aa      	str	r2, [r5, #8]
 8011a6e:	60eb      	str	r3, [r5, #12]
 8011a70:	8823      	ldrh	r3, [r4, #0]
 8011a72:	822b      	strh	r3, [r5, #16]
			break;
 8011a74:	f00a bd68 	b.w	801c548 <problem_fetch+0x1ae60>
		case 477 :
			strcpy(p->name,"OH MY FAT FINGERS...");
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011a7e:	4a46      	ldr	r2, [pc, #280]	; (8011b98 <problem_fetch+0x104b0>)
 8011a80:	461d      	mov	r5, r3
 8011a82:	4614      	mov	r4, r2
 8011a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011a86:	6028      	str	r0, [r5, #0]
 8011a88:	6069      	str	r1, [r5, #4]
 8011a8a:	60aa      	str	r2, [r5, #8]
 8011a8c:	60eb      	str	r3, [r5, #12]
 8011a8e:	6820      	ldr	r0, [r4, #0]
 8011a90:	6128      	str	r0, [r5, #16]
 8011a92:	7923      	ldrb	r3, [r4, #4]
 8011a94:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011a9c:	4a3f      	ldr	r2, [pc, #252]	; (8011b9c <problem_fetch+0x104b4>)
 8011a9e:	8811      	ldrh	r1, [r2, #0]
 8011aa0:	7892      	ldrb	r2, [r2, #2]
 8011aa2:	8019      	strh	r1, [r3, #0]
 8011aa4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2206      	movs	r2, #6
 8011aaa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,F,K,E,I");
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	33a4      	adds	r3, #164	; 0xa4
 8011ab0:	4a3b      	ldr	r2, [pc, #236]	; (8011ba0 <problem_fetch+0x104b8>)
 8011ab2:	461c      	mov	r4, r3
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011ab8:	6020      	str	r0, [r4, #0]
 8011aba:	6061      	str	r1, [r4, #4]
 8011abc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,8,18");
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	3304      	adds	r3, #4
 8011ac2:	4a38      	ldr	r2, [pc, #224]	; (8011ba4 <problem_fetch+0x104bc>)
 8011ac4:	461c      	mov	r4, r3
 8011ac6:	4615      	mov	r5, r2
 8011ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011aca:	6020      	str	r0, [r4, #0]
 8011acc:	6061      	str	r1, [r4, #4]
 8011ace:	60a2      	str	r2, [r4, #8]
 8011ad0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011ad8:	4a33      	ldr	r2, [pc, #204]	; (8011ba8 <problem_fetch+0x104c0>)
 8011ada:	461c      	mov	r4, r3
 8011adc:	4613      	mov	r3, r2
 8011ade:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011ae0:	6020      	str	r0, [r4, #0]
 8011ae2:	6061      	str	r1, [r4, #4]
 8011ae4:	60a2      	str	r2, [r4, #8]
			break;
 8011ae6:	f00a bd2f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 478 :
			strcpy(p->name,"SOFT SERVE");
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011af0:	492e      	ldr	r1, [pc, #184]	; (8011bac <problem_fetch+0x104c4>)
 8011af2:	461a      	mov	r2, r3
 8011af4:	460b      	mov	r3, r1
 8011af6:	cb03      	ldmia	r3!, {r0, r1}
 8011af8:	6010      	str	r0, [r2, #0]
 8011afa:	6051      	str	r1, [r2, #4]
 8011afc:	8819      	ldrh	r1, [r3, #0]
 8011afe:	789b      	ldrb	r3, [r3, #2]
 8011b00:	8111      	strh	r1, [r2, #8]
 8011b02:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011b0a:	4a29      	ldr	r2, [pc, #164]	; (8011bb0 <problem_fetch+0x104c8>)
 8011b0c:	6810      	ldr	r0, [r2, #0]
 8011b0e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	2206      	movs	r2, #6
 8011b14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,D,D,E,I");
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	33a4      	adds	r3, #164	; 0xa4
 8011b1a:	4a26      	ldr	r2, [pc, #152]	; (8011bb4 <problem_fetch+0x104cc>)
 8011b1c:	461c      	mov	r4, r3
 8011b1e:	4613      	mov	r3, r2
 8011b20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b22:	6020      	str	r0, [r4, #0]
 8011b24:	6061      	str	r1, [r4, #4]
 8011b26:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,11,15,16,18");
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	3304      	adds	r3, #4
 8011b2c:	4a22      	ldr	r2, [pc, #136]	; (8011bb8 <problem_fetch+0x104d0>)
 8011b2e:	461c      	mov	r4, r3
 8011b30:	4615      	mov	r5, r2
 8011b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b34:	6020      	str	r0, [r4, #0]
 8011b36:	6061      	str	r1, [r4, #4]
 8011b38:	60a2      	str	r2, [r4, #8]
 8011b3a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011b42:	4a19      	ldr	r2, [pc, #100]	; (8011ba8 <problem_fetch+0x104c0>)
 8011b44:	461c      	mov	r4, r3
 8011b46:	4613      	mov	r3, r2
 8011b48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011b4a:	6020      	str	r0, [r4, #0]
 8011b4c:	6061      	str	r1, [r4, #4]
 8011b4e:	60a2      	str	r2, [r4, #8]
			break;
 8011b50:	f00a bcfa 	b.w	801c548 <problem_fetch+0x1ae60>
 8011b54:	08029484 	.word	0x08029484
 8011b58:	08024054 	.word	0x08024054
 8011b5c:	08029494 	.word	0x08029494
 8011b60:	080294a4 	.word	0x080294a4
 8011b64:	08023ae4 	.word	0x08023ae4
 8011b68:	080294b8 	.word	0x080294b8
 8011b6c:	0802395c 	.word	0x0802395c
 8011b70:	080294c8 	.word	0x080294c8
 8011b74:	080294dc 	.word	0x080294dc
 8011b78:	08024940 	.word	0x08024940
 8011b7c:	080294f4 	.word	0x080294f4
 8011b80:	08029500 	.word	0x08029500
 8011b84:	08029510 	.word	0x08029510
 8011b88:	08023a80 	.word	0x08023a80
 8011b8c:	08029524 	.word	0x08029524
 8011b90:	0802952c 	.word	0x0802952c
 8011b94:	08029540 	.word	0x08029540
 8011b98:	08029558 	.word	0x08029558
 8011b9c:	08023a28 	.word	0x08023a28
 8011ba0:	08029570 	.word	0x08029570
 8011ba4:	0802957c 	.word	0x0802957c
 8011ba8:	08023cf8 	.word	0x08023cf8
 8011bac:	0802958c 	.word	0x0802958c
 8011bb0:	08023afc 	.word	0x08023afc
 8011bb4:	08029598 	.word	0x08029598
 8011bb8:	080295a4 	.word	0x080295a4
		case 479 :
			strcpy(p->name,"SCRUMPY MCBUTTERBALLS");
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011bc2:	4aac      	ldr	r2, [pc, #688]	; (8011e74 <problem_fetch+0x1078c>)
 8011bc4:	461d      	mov	r5, r3
 8011bc6:	4614      	mov	r4, r2
 8011bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011bca:	6028      	str	r0, [r5, #0]
 8011bcc:	6069      	str	r1, [r5, #4]
 8011bce:	60aa      	str	r2, [r5, #8]
 8011bd0:	60eb      	str	r3, [r5, #12]
 8011bd2:	6820      	ldr	r0, [r4, #0]
 8011bd4:	6128      	str	r0, [r5, #16]
 8011bd6:	88a3      	ldrh	r3, [r4, #4]
 8011bd8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011be0:	4aa5      	ldr	r2, [pc, #660]	; (8011e78 <problem_fetch+0x10790>)
 8011be2:	6810      	ldr	r0, [r2, #0]
 8011be4:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	2205      	movs	r2, #5
 8011bea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,H,G,D");
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	33a4      	adds	r3, #164	; 0xa4
 8011bf0:	49a2      	ldr	r1, [pc, #648]	; (8011e7c <problem_fetch+0x10794>)
 8011bf2:	461a      	mov	r2, r3
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	cb03      	ldmia	r3!, {r0, r1}
 8011bf8:	6010      	str	r0, [r2, #0]
 8011bfa:	6051      	str	r1, [r2, #4]
 8011bfc:	881b      	ldrh	r3, [r3, #0]
 8011bfe:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	3304      	adds	r3, #4
 8011c04:	4a9e      	ldr	r2, [pc, #632]	; (8011e80 <problem_fetch+0x10798>)
 8011c06:	461c      	mov	r4, r3
 8011c08:	4613      	mov	r3, r2
 8011c0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c0c:	6020      	str	r0, [r4, #0]
 8011c0e:	6061      	str	r1, [r4, #4]
 8011c10:	60a2      	str	r2, [r4, #8]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011c1c:	4999      	ldr	r1, [pc, #612]	; (8011e84 <problem_fetch+0x1079c>)
 8011c1e:	461a      	mov	r2, r3
 8011c20:	460b      	mov	r3, r1
 8011c22:	cb03      	ldmia	r3!, {r0, r1}
 8011c24:	6010      	str	r0, [r2, #0]
 8011c26:	6051      	str	r1, [r2, #4]
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	8113      	strh	r3, [r2, #8]
			break;
 8011c2c:	f00a bc8c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 480 :
			strcpy(p->name,"JAB 2017");
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011c36:	4994      	ldr	r1, [pc, #592]	; (8011e88 <problem_fetch+0x107a0>)
 8011c38:	461a      	mov	r2, r3
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	cb03      	ldmia	r3!, {r0, r1}
 8011c3e:	6010      	str	r0, [r2, #0]
 8011c40:	6051      	str	r1, [r2, #4]
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011c4c:	4a8f      	ldr	r2, [pc, #572]	; (8011e8c <problem_fetch+0x107a4>)
 8011c4e:	8811      	ldrh	r1, [r2, #0]
 8011c50:	7892      	ldrb	r2, [r2, #2]
 8011c52:	8019      	strh	r1, [r3, #0]
 8011c54:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2205      	movs	r2, #5
 8011c5a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,I");
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	33a4      	adds	r3, #164	; 0xa4
 8011c60:	498b      	ldr	r1, [pc, #556]	; (8011e90 <problem_fetch+0x107a8>)
 8011c62:	461a      	mov	r2, r3
 8011c64:	460b      	mov	r3, r1
 8011c66:	cb03      	ldmia	r3!, {r0, r1}
 8011c68:	6010      	str	r0, [r2, #0]
 8011c6a:	6051      	str	r1, [r2, #4]
 8011c6c:	881b      	ldrh	r3, [r3, #0]
 8011c6e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,10,15,18");
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3304      	adds	r3, #4
 8011c74:	4a87      	ldr	r2, [pc, #540]	; (8011e94 <problem_fetch+0x107ac>)
 8011c76:	461c      	mov	r4, r3
 8011c78:	4613      	mov	r3, r2
 8011c7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011c7c:	6020      	str	r0, [r4, #0]
 8011c7e:	6061      	str	r1, [r4, #4]
 8011c80:	60a2      	str	r2, [r4, #8]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011c8c:	497d      	ldr	r1, [pc, #500]	; (8011e84 <problem_fetch+0x1079c>)
 8011c8e:	461a      	mov	r2, r3
 8011c90:	460b      	mov	r3, r1
 8011c92:	cb03      	ldmia	r3!, {r0, r1}
 8011c94:	6010      	str	r0, [r2, #0]
 8011c96:	6051      	str	r1, [r2, #4]
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	8113      	strh	r3, [r2, #8]
			break;
 8011c9c:	f00a bc54 	b.w	801c548 <problem_fetch+0x1ae60>
		case 481 :
			strcpy(p->name,"BADMOTORFINGER");
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011ca6:	4a7c      	ldr	r2, [pc, #496]	; (8011e98 <problem_fetch+0x107b0>)
 8011ca8:	461c      	mov	r4, r3
 8011caa:	4613      	mov	r3, r2
 8011cac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011cae:	6020      	str	r0, [r4, #0]
 8011cb0:	6061      	str	r1, [r4, #4]
 8011cb2:	60a2      	str	r2, [r4, #8]
 8011cb4:	881a      	ldrh	r2, [r3, #0]
 8011cb6:	789b      	ldrb	r3, [r3, #2]
 8011cb8:	81a2      	strh	r2, [r4, #12]
 8011cba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011cc2:	4a76      	ldr	r2, [pc, #472]	; (8011e9c <problem_fetch+0x107b4>)
 8011cc4:	8811      	ldrh	r1, [r2, #0]
 8011cc6:	7892      	ldrb	r2, [r2, #2]
 8011cc8:	8019      	strh	r1, [r3, #0]
 8011cca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2207      	movs	r2, #7
 8011cd0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,F,F,J,E,D");
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	33a4      	adds	r3, #164	; 0xa4
 8011cd6:	4a72      	ldr	r2, [pc, #456]	; (8011ea0 <problem_fetch+0x107b8>)
 8011cd8:	461c      	mov	r4, r3
 8011cda:	4613      	mov	r3, r2
 8011cdc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011cde:	6020      	str	r0, [r4, #0]
 8011ce0:	6061      	str	r1, [r4, #4]
 8011ce2:	60a2      	str	r2, [r4, #8]
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,11,13,13,16,18");
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	3304      	adds	r3, #4
 8011cec:	4a6d      	ldr	r2, [pc, #436]	; (8011ea4 <problem_fetch+0x107bc>)
 8011cee:	461d      	mov	r5, r3
 8011cf0:	4614      	mov	r4, r2
 8011cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011cf4:	6028      	str	r0, [r5, #0]
 8011cf6:	6069      	str	r1, [r5, #4]
 8011cf8:	60aa      	str	r2, [r5, #8]
 8011cfa:	60eb      	str	r3, [r5, #12]
 8011cfc:	8823      	ldrh	r3, [r4, #0]
 8011cfe:	78a2      	ldrb	r2, [r4, #2]
 8011d00:	822b      	strh	r3, [r5, #16]
 8011d02:	4613      	mov	r3, r2
 8011d04:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011d0c:	4a66      	ldr	r2, [pc, #408]	; (8011ea8 <problem_fetch+0x107c0>)
 8011d0e:	461c      	mov	r4, r3
 8011d10:	4613      	mov	r3, r2
 8011d12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d14:	6020      	str	r0, [r4, #0]
 8011d16:	6061      	str	r1, [r4, #4]
 8011d18:	60a2      	str	r2, [r4, #8]
 8011d1a:	881b      	ldrh	r3, [r3, #0]
 8011d1c:	81a3      	strh	r3, [r4, #12]
			break;
 8011d1e:	f00a bc13 	b.w	801c548 <problem_fetch+0x1ae60>
		case 482 :
			strcpy(p->name,"ACG79");
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d28:	4a60      	ldr	r2, [pc, #384]	; (8011eac <problem_fetch+0x107c4>)
 8011d2a:	6810      	ldr	r0, [r2, #0]
 8011d2c:	6018      	str	r0, [r3, #0]
 8011d2e:	8892      	ldrh	r2, [r2, #4]
 8011d30:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011d38:	4a58      	ldr	r2, [pc, #352]	; (8011e9c <problem_fetch+0x107b4>)
 8011d3a:	8811      	ldrh	r1, [r2, #0]
 8011d3c:	7892      	ldrb	r2, [r2, #2]
 8011d3e:	8019      	strh	r1, [r3, #0]
 8011d40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2207      	movs	r2, #7
 8011d46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,I,F,H,D");
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	33a4      	adds	r3, #164	; 0xa4
 8011d4c:	4a58      	ldr	r2, [pc, #352]	; (8011eb0 <problem_fetch+0x107c8>)
 8011d4e:	461c      	mov	r4, r3
 8011d50:	4613      	mov	r3, r2
 8011d52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d54:	6020      	str	r0, [r4, #0]
 8011d56:	6061      	str	r1, [r4, #4]
 8011d58:	60a2      	str	r2, [r4, #8]
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,13,16,18");
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	3304      	adds	r3, #4
 8011d62:	4a54      	ldr	r2, [pc, #336]	; (8011eb4 <problem_fetch+0x107cc>)
 8011d64:	461d      	mov	r5, r3
 8011d66:	4614      	mov	r4, r2
 8011d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011d6a:	6028      	str	r0, [r5, #0]
 8011d6c:	6069      	str	r1, [r5, #4]
 8011d6e:	60aa      	str	r2, [r5, #8]
 8011d70:	60eb      	str	r3, [r5, #12]
 8011d72:	7823      	ldrb	r3, [r4, #0]
 8011d74:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011d7c:	4a4e      	ldr	r2, [pc, #312]	; (8011eb8 <problem_fetch+0x107d0>)
 8011d7e:	461c      	mov	r4, r3
 8011d80:	4613      	mov	r3, r2
 8011d82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011d84:	6020      	str	r0, [r4, #0]
 8011d86:	6061      	str	r1, [r4, #4]
 8011d88:	60a2      	str	r2, [r4, #8]
 8011d8a:	881b      	ldrh	r3, [r3, #0]
 8011d8c:	81a3      	strh	r3, [r4, #12]
			break;
 8011d8e:	f00a bbdb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 483 :
			strcpy(p->name,"COMEBACK 4.0");
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011d98:	4a48      	ldr	r2, [pc, #288]	; (8011ebc <problem_fetch+0x107d4>)
 8011d9a:	461c      	mov	r4, r3
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011da0:	6020      	str	r0, [r4, #0]
 8011da2:	6061      	str	r1, [r4, #4]
 8011da4:	60a2      	str	r2, [r4, #8]
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011db0:	4a43      	ldr	r2, [pc, #268]	; (8011ec0 <problem_fetch+0x107d8>)
 8011db2:	6810      	ldr	r0, [r2, #0]
 8011db4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2206      	movs	r2, #6
 8011dba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,D,D");
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	33a4      	adds	r3, #164	; 0xa4
 8011dc0:	4a40      	ldr	r2, [pc, #256]	; (8011ec4 <problem_fetch+0x107dc>)
 8011dc2:	461c      	mov	r4, r3
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dc8:	6020      	str	r0, [r4, #0]
 8011dca:	6061      	str	r1, [r4, #4]
 8011dcc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,15,18");
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	4a3d      	ldr	r2, [pc, #244]	; (8011ec8 <problem_fetch+0x107e0>)
 8011dd4:	461c      	mov	r4, r3
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011dda:	6020      	str	r0, [r4, #0]
 8011ddc:	6061      	str	r1, [r4, #4]
 8011dde:	60a2      	str	r2, [r4, #8]
 8011de0:	881a      	ldrh	r2, [r3, #0]
 8011de2:	789b      	ldrb	r3, [r3, #2]
 8011de4:	81a2      	strh	r2, [r4, #12]
 8011de6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011dee:	4a37      	ldr	r2, [pc, #220]	; (8011ecc <problem_fetch+0x107e4>)
 8011df0:	461c      	mov	r4, r3
 8011df2:	4613      	mov	r3, r2
 8011df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011df6:	6020      	str	r0, [r4, #0]
 8011df8:	6061      	str	r1, [r4, #4]
 8011dfa:	60a2      	str	r2, [r4, #8]
			break;
 8011dfc:	f00a bba4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 484 :
			strcpy(p->name,"COMEBACK 3.5");
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011e06:	4a32      	ldr	r2, [pc, #200]	; (8011ed0 <problem_fetch+0x107e8>)
 8011e08:	461c      	mov	r4, r3
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011e0e:	6020      	str	r0, [r4, #0]
 8011e10:	6061      	str	r1, [r4, #4]
 8011e12:	60a2      	str	r2, [r4, #8]
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011e1e:	4a2d      	ldr	r2, [pc, #180]	; (8011ed4 <problem_fetch+0x107ec>)
 8011e20:	6810      	ldr	r0, [r2, #0]
 8011e22:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2208      	movs	r2, #8
 8011e28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,G,C,D,E,I");
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	33a4      	adds	r3, #164	; 0xa4
 8011e2e:	4a2a      	ldr	r2, [pc, #168]	; (8011ed8 <problem_fetch+0x107f0>)
 8011e30:	461c      	mov	r4, r3
 8011e32:	4615      	mov	r5, r2
 8011e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e36:	6020      	str	r0, [r4, #0]
 8011e38:	6061      	str	r1, [r4, #4]
 8011e3a:	60a2      	str	r2, [r4, #8]
 8011e3c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,13,15,16,18");
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	3304      	adds	r3, #4
 8011e42:	4a26      	ldr	r2, [pc, #152]	; (8011edc <problem_fetch+0x107f4>)
 8011e44:	461d      	mov	r5, r3
 8011e46:	4614      	mov	r4, r2
 8011e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011e4a:	6028      	str	r0, [r5, #0]
 8011e4c:	6069      	str	r1, [r5, #4]
 8011e4e:	60aa      	str	r2, [r5, #8]
 8011e50:	60eb      	str	r3, [r5, #12]
 8011e52:	6820      	ldr	r0, [r4, #0]
 8011e54:	6128      	str	r0, [r5, #16]
 8011e56:	7923      	ldrb	r3, [r4, #4]
 8011e58:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011e60:	4a1f      	ldr	r2, [pc, #124]	; (8011ee0 <problem_fetch+0x107f8>)
 8011e62:	461c      	mov	r4, r3
 8011e64:	4615      	mov	r5, r2
 8011e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011e68:	6020      	str	r0, [r4, #0]
 8011e6a:	6061      	str	r1, [r4, #4]
 8011e6c:	60a2      	str	r2, [r4, #8]
 8011e6e:	60e3      	str	r3, [r4, #12]
			break;
 8011e70:	f00a bb6a 	b.w	801c548 <problem_fetch+0x1ae60>
 8011e74:	080295b4 	.word	0x080295b4
 8011e78:	08023afc 	.word	0x08023afc
 8011e7c:	080295cc 	.word	0x080295cc
 8011e80:	08024c64 	.word	0x08024c64
 8011e84:	08023e28 	.word	0x08023e28
 8011e88:	080295d8 	.word	0x080295d8
 8011e8c:	08024054 	.word	0x08024054
 8011e90:	080295e4 	.word	0x080295e4
 8011e94:	08028b54 	.word	0x08028b54
 8011e98:	080295f0 	.word	0x080295f0
 8011e9c:	0802391c 	.word	0x0802391c
 8011ea0:	08029600 	.word	0x08029600
 8011ea4:	08029610 	.word	0x08029610
 8011ea8:	08023ae4 	.word	0x08023ae4
 8011eac:	08029624 	.word	0x08029624
 8011eb0:	0802962c 	.word	0x0802962c
 8011eb4:	0802963c 	.word	0x0802963c
 8011eb8:	080239d4 	.word	0x080239d4
 8011ebc:	08029650 	.word	0x08029650
 8011ec0:	080239f4 	.word	0x080239f4
 8011ec4:	08029660 	.word	0x08029660
 8011ec8:	0802966c 	.word	0x0802966c
 8011ecc:	08023cf8 	.word	0x08023cf8
 8011ed0:	0802967c 	.word	0x0802967c
 8011ed4:	0802395c 	.word	0x0802395c
 8011ed8:	0802968c 	.word	0x0802968c
 8011edc:	0802969c 	.word	0x0802969c
 8011ee0:	08023b6c 	.word	0x08023b6c
		case 485 :
			strcpy(p->name,"MUCCA");
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011eea:	4aae      	ldr	r2, [pc, #696]	; (80121a4 <problem_fetch+0x10abc>)
 8011eec:	6810      	ldr	r0, [r2, #0]
 8011eee:	6018      	str	r0, [r3, #0]
 8011ef0:	8892      	ldrh	r2, [r2, #4]
 8011ef2:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011efa:	4aab      	ldr	r2, [pc, #684]	; (80121a8 <problem_fetch+0x10ac0>)
 8011efc:	6810      	ldr	r0, [r2, #0]
 8011efe:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2204      	movs	r2, #4
 8011f04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,I");
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	33a4      	adds	r3, #164	; 0xa4
 8011f0a:	49a8      	ldr	r1, [pc, #672]	; (80121ac <problem_fetch+0x10ac4>)
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	460b      	mov	r3, r1
 8011f10:	cb03      	ldmia	r3!, {r0, r1}
 8011f12:	6010      	str	r0, [r2, #0]
 8011f14:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	3304      	adds	r3, #4
 8011f1a:	49a5      	ldr	r1, [pc, #660]	; (80121b0 <problem_fetch+0x10ac8>)
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	460b      	mov	r3, r1
 8011f20:	cb03      	ldmia	r3!, {r0, r1}
 8011f22:	6010      	str	r0, [r2, #0]
 8011f24:	6051      	str	r1, [r2, #4]
 8011f26:	8819      	ldrh	r1, [r3, #0]
 8011f28:	789b      	ldrb	r3, [r3, #2]
 8011f2a:	8111      	strh	r1, [r2, #8]
 8011f2c:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011f34:	499f      	ldr	r1, [pc, #636]	; (80121b4 <problem_fetch+0x10acc>)
 8011f36:	461a      	mov	r2, r3
 8011f38:	460b      	mov	r3, r1
 8011f3a:	cb03      	ldmia	r3!, {r0, r1}
 8011f3c:	6010      	str	r0, [r2, #0]
 8011f3e:	6051      	str	r1, [r2, #4]
			break;
 8011f40:	f00a bb02 	b.w	801c548 <problem_fetch+0x1ae60>
		case 486 :
			strcpy(p->name,"MR PINCH");
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011f4a:	499b      	ldr	r1, [pc, #620]	; (80121b8 <problem_fetch+0x10ad0>)
 8011f4c:	461a      	mov	r2, r3
 8011f4e:	460b      	mov	r3, r1
 8011f50:	cb03      	ldmia	r3!, {r0, r1}
 8011f52:	6010      	str	r0, [r2, #0]
 8011f54:	6051      	str	r1, [r2, #4]
 8011f56:	781b      	ldrb	r3, [r3, #0]
 8011f58:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011f60:	4a96      	ldr	r2, [pc, #600]	; (80121bc <problem_fetch+0x10ad4>)
 8011f62:	6810      	ldr	r0, [r2, #0]
 8011f64:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2205      	movs	r2, #5
 8011f6a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,G,E,D");
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	33a4      	adds	r3, #164	; 0xa4
 8011f70:	4993      	ldr	r1, [pc, #588]	; (80121c0 <problem_fetch+0x10ad8>)
 8011f72:	461a      	mov	r2, r3
 8011f74:	460b      	mov	r3, r1
 8011f76:	cb03      	ldmia	r3!, {r0, r1}
 8011f78:	6010      	str	r0, [r2, #0]
 8011f7a:	6051      	str	r1, [r2, #4]
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3304      	adds	r3, #4
 8011f84:	4a8f      	ldr	r2, [pc, #572]	; (80121c4 <problem_fetch+0x10adc>)
 8011f86:	461c      	mov	r4, r3
 8011f88:	4613      	mov	r3, r2
 8011f8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011f8c:	6020      	str	r0, [r4, #0]
 8011f8e:	6061      	str	r1, [r4, #4]
 8011f90:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8011f98:	498b      	ldr	r1, [pc, #556]	; (80121c8 <problem_fetch+0x10ae0>)
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	460b      	mov	r3, r1
 8011f9e:	cb03      	ldmia	r3!, {r0, r1}
 8011fa0:	6010      	str	r0, [r2, #0]
 8011fa2:	6051      	str	r1, [r2, #4]
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	8113      	strh	r3, [r2, #8]
			break;
 8011fa8:	f00a bace 	b.w	801c548 <problem_fetch+0x1ae60>
		case 487 :
			strcpy(p->name,"PROJECT V1");
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8011fb2:	4986      	ldr	r1, [pc, #536]	; (80121cc <problem_fetch+0x10ae4>)
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	cb03      	ldmia	r3!, {r0, r1}
 8011fba:	6010      	str	r0, [r2, #0]
 8011fbc:	6051      	str	r1, [r2, #4]
 8011fbe:	8819      	ldrh	r1, [r3, #0]
 8011fc0:	789b      	ldrb	r3, [r3, #2]
 8011fc2:	8111      	strh	r1, [r2, #8]
 8011fc4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011fcc:	4a7b      	ldr	r2, [pc, #492]	; (80121bc <problem_fetch+0x10ad4>)
 8011fce:	6810      	ldr	r0, [r2, #0]
 8011fd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	2207      	movs	r2, #7
 8011fd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,F,F,I,G,D");
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	33a4      	adds	r3, #164	; 0xa4
 8011fdc:	4a7c      	ldr	r2, [pc, #496]	; (80121d0 <problem_fetch+0x10ae8>)
 8011fde:	461c      	mov	r4, r3
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8011fe4:	6020      	str	r0, [r4, #0]
 8011fe6:	6061      	str	r1, [r4, #4]
 8011fe8:	60a2      	str	r2, [r4, #8]
 8011fea:	881b      	ldrh	r3, [r3, #0]
 8011fec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,13,14,17,18");
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	3304      	adds	r3, #4
 8011ff2:	4a78      	ldr	r2, [pc, #480]	; (80121d4 <problem_fetch+0x10aec>)
 8011ff4:	461d      	mov	r5, r3
 8011ff6:	4614      	mov	r4, r2
 8011ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011ffa:	6028      	str	r0, [r5, #0]
 8011ffc:	6069      	str	r1, [r5, #4]
 8011ffe:	60aa      	str	r2, [r5, #8]
 8012000:	60eb      	str	r3, [r5, #12]
 8012002:	8823      	ldrh	r3, [r4, #0]
 8012004:	78a2      	ldrb	r2, [r4, #2]
 8012006:	822b      	strh	r3, [r5, #16]
 8012008:	4613      	mov	r3, r2
 801200a:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012012:	4a71      	ldr	r2, [pc, #452]	; (80121d8 <problem_fetch+0x10af0>)
 8012014:	461c      	mov	r4, r3
 8012016:	4613      	mov	r3, r2
 8012018:	cb07      	ldmia	r3!, {r0, r1, r2}
 801201a:	6020      	str	r0, [r4, #0]
 801201c:	6061      	str	r1, [r4, #4]
 801201e:	60a2      	str	r2, [r4, #8]
 8012020:	881b      	ldrh	r3, [r3, #0]
 8012022:	81a3      	strh	r3, [r4, #12]
			break;
 8012024:	f00a ba90 	b.w	801c548 <problem_fetch+0x1ae60>
		case 488 :
			strcpy(p->name,"PAUNCH PINCHER");
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801202e:	4a6b      	ldr	r2, [pc, #428]	; (80121dc <problem_fetch+0x10af4>)
 8012030:	461c      	mov	r4, r3
 8012032:	4613      	mov	r3, r2
 8012034:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012036:	6020      	str	r0, [r4, #0]
 8012038:	6061      	str	r1, [r4, #4]
 801203a:	60a2      	str	r2, [r4, #8]
 801203c:	881a      	ldrh	r2, [r3, #0]
 801203e:	789b      	ldrb	r3, [r3, #2]
 8012040:	81a2      	strh	r2, [r4, #12]
 8012042:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801204a:	4a65      	ldr	r2, [pc, #404]	; (80121e0 <problem_fetch+0x10af8>)
 801204c:	8811      	ldrh	r1, [r2, #0]
 801204e:	7892      	ldrb	r2, [r2, #2]
 8012050:	8019      	strh	r1, [r3, #0]
 8012052:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	220a      	movs	r2, #10
 8012058:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,F,C,F,G,C,K,I");
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	33a4      	adds	r3, #164	; 0xa4
 801205e:	4a61      	ldr	r2, [pc, #388]	; (80121e4 <problem_fetch+0x10afc>)
 8012060:	461d      	mov	r5, r3
 8012062:	4614      	mov	r4, r2
 8012064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012066:	6028      	str	r0, [r5, #0]
 8012068:	6069      	str	r1, [r5, #4]
 801206a:	60aa      	str	r2, [r5, #8]
 801206c:	60eb      	str	r3, [r5, #12]
 801206e:	6820      	ldr	r0, [r4, #0]
 8012070:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,5,8,11,8,13,15,5,14,18");
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	3304      	adds	r3, #4
 8012076:	4a5c      	ldr	r2, [pc, #368]	; (80121e8 <problem_fetch+0x10b00>)
 8012078:	461d      	mov	r5, r3
 801207a:	4614      	mov	r4, r2
 801207c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801207e:	6028      	str	r0, [r5, #0]
 8012080:	6069      	str	r1, [r5, #4]
 8012082:	60aa      	str	r2, [r5, #8]
 8012084:	60eb      	str	r3, [r5, #12]
 8012086:	cc03      	ldmia	r4!, {r0, r1}
 8012088:	6128      	str	r0, [r5, #16]
 801208a:	6169      	str	r1, [r5, #20]
 801208c:	7823      	ldrb	r3, [r4, #0]
 801208e:	762b      	strb	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012096:	4a55      	ldr	r2, [pc, #340]	; (80121ec <problem_fetch+0x10b04>)
 8012098:	461d      	mov	r5, r3
 801209a:	4614      	mov	r4, r2
 801209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801209e:	6028      	str	r0, [r5, #0]
 80120a0:	6069      	str	r1, [r5, #4]
 80120a2:	60aa      	str	r2, [r5, #8]
 80120a4:	60eb      	str	r3, [r5, #12]
 80120a6:	6820      	ldr	r0, [r4, #0]
 80120a8:	6128      	str	r0, [r5, #16]
			break;
 80120aa:	f00a ba4d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 489 :
			strcpy(p->name,"CHAKA MAKA");
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80120b4:	494e      	ldr	r1, [pc, #312]	; (80121f0 <problem_fetch+0x10b08>)
 80120b6:	461a      	mov	r2, r3
 80120b8:	460b      	mov	r3, r1
 80120ba:	cb03      	ldmia	r3!, {r0, r1}
 80120bc:	6010      	str	r0, [r2, #0]
 80120be:	6051      	str	r1, [r2, #4]
 80120c0:	8819      	ldrh	r1, [r3, #0]
 80120c2:	789b      	ldrb	r3, [r3, #2]
 80120c4:	8111      	strh	r1, [r2, #8]
 80120c6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80120ce:	4a49      	ldr	r2, [pc, #292]	; (80121f4 <problem_fetch+0x10b0c>)
 80120d0:	8811      	ldrh	r1, [r2, #0]
 80120d2:	7892      	ldrb	r2, [r2, #2]
 80120d4:	8019      	strh	r1, [r3, #0]
 80120d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2207      	movs	r2, #7
 80120dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,H,I,G,I");
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	33a4      	adds	r3, #164	; 0xa4
 80120e2:	4a45      	ldr	r2, [pc, #276]	; (80121f8 <problem_fetch+0x10b10>)
 80120e4:	461c      	mov	r4, r3
 80120e6:	4613      	mov	r3, r2
 80120e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80120ea:	6020      	str	r0, [r4, #0]
 80120ec:	6061      	str	r1, [r4, #4]
 80120ee:	60a2      	str	r2, [r4, #8]
 80120f0:	881b      	ldrh	r3, [r3, #0]
 80120f2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,13,7,17,18");
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	3304      	adds	r3, #4
 80120f8:	4a40      	ldr	r2, [pc, #256]	; (80121fc <problem_fetch+0x10b14>)
 80120fa:	461d      	mov	r5, r3
 80120fc:	4614      	mov	r4, r2
 80120fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012100:	6028      	str	r0, [r5, #0]
 8012102:	6069      	str	r1, [r5, #4]
 8012104:	60aa      	str	r2, [r5, #8]
 8012106:	60eb      	str	r3, [r5, #12]
 8012108:	8823      	ldrh	r3, [r4, #0]
 801210a:	78a2      	ldrb	r2, [r4, #2]
 801210c:	822b      	strh	r3, [r5, #16]
 801210e:	4613      	mov	r3, r2
 8012110:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012118:	4a2f      	ldr	r2, [pc, #188]	; (80121d8 <problem_fetch+0x10af0>)
 801211a:	461c      	mov	r4, r3
 801211c:	4613      	mov	r3, r2
 801211e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012120:	6020      	str	r0, [r4, #0]
 8012122:	6061      	str	r1, [r4, #4]
 8012124:	60a2      	str	r2, [r4, #8]
 8012126:	881b      	ldrh	r3, [r3, #0]
 8012128:	81a3      	strh	r3, [r4, #12]
			break;
 801212a:	f00a ba0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 490 :
			strcpy(p->name,"SHOULDER 'SPLODER");
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012134:	4a32      	ldr	r2, [pc, #200]	; (8012200 <problem_fetch+0x10b18>)
 8012136:	461d      	mov	r5, r3
 8012138:	4614      	mov	r4, r2
 801213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801213c:	6028      	str	r0, [r5, #0]
 801213e:	6069      	str	r1, [r5, #4]
 8012140:	60aa      	str	r2, [r5, #8]
 8012142:	60eb      	str	r3, [r5, #12]
 8012144:	8823      	ldrh	r3, [r4, #0]
 8012146:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801214e:	4a2d      	ldr	r2, [pc, #180]	; (8012204 <problem_fetch+0x10b1c>)
 8012150:	8811      	ldrh	r1, [r2, #0]
 8012152:	7892      	ldrb	r2, [r2, #2]
 8012154:	8019      	strh	r1, [r3, #0]
 8012156:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	2206      	movs	r2, #6
 801215c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,E,J,E,D");
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	33a4      	adds	r3, #164	; 0xa4
 8012162:	4a29      	ldr	r2, [pc, #164]	; (8012208 <problem_fetch+0x10b20>)
 8012164:	461c      	mov	r4, r3
 8012166:	4613      	mov	r3, r2
 8012168:	cb07      	ldmia	r3!, {r0, r1, r2}
 801216a:	6020      	str	r0, [r4, #0]
 801216c:	6061      	str	r1, [r4, #4]
 801216e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,9,12,14,18");
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	3304      	adds	r3, #4
 8012174:	4a25      	ldr	r2, [pc, #148]	; (801220c <problem_fetch+0x10b24>)
 8012176:	461c      	mov	r4, r3
 8012178:	4613      	mov	r3, r2
 801217a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801217c:	6020      	str	r0, [r4, #0]
 801217e:	6061      	str	r1, [r4, #4]
 8012180:	60a2      	str	r2, [r4, #8]
 8012182:	881a      	ldrh	r2, [r3, #0]
 8012184:	789b      	ldrb	r3, [r3, #2]
 8012186:	81a2      	strh	r2, [r4, #12]
 8012188:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012190:	4a1f      	ldr	r2, [pc, #124]	; (8012210 <problem_fetch+0x10b28>)
 8012192:	461c      	mov	r4, r3
 8012194:	4613      	mov	r3, r2
 8012196:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012198:	6020      	str	r0, [r4, #0]
 801219a:	6061      	str	r1, [r4, #4]
 801219c:	60a2      	str	r2, [r4, #8]
			break;
 801219e:	f00a b9d3 	b.w	801c548 <problem_fetch+0x1ae60>
 80121a2:	bf00      	nop
 80121a4:	080296b4 	.word	0x080296b4
 80121a8:	08023afc 	.word	0x08023afc
 80121ac:	080296bc 	.word	0x080296bc
 80121b0:	08024e6c 	.word	0x08024e6c
 80121b4:	08023ab0 	.word	0x08023ab0
 80121b8:	080296c4 	.word	0x080296c4
 80121bc:	08023a98 	.word	0x08023a98
 80121c0:	080296d0 	.word	0x080296d0
 80121c4:	080296dc 	.word	0x080296dc
 80121c8:	08023e28 	.word	0x08023e28
 80121cc:	080296e8 	.word	0x080296e8
 80121d0:	080296f4 	.word	0x080296f4
 80121d4:	08029704 	.word	0x08029704
 80121d8:	08023ae4 	.word	0x08023ae4
 80121dc:	08029718 	.word	0x08029718
 80121e0:	08023a28 	.word	0x08023a28
 80121e4:	08029728 	.word	0x08029728
 80121e8:	0802973c 	.word	0x0802973c
 80121ec:	08024204 	.word	0x08024204
 80121f0:	08029758 	.word	0x08029758
 80121f4:	08024054 	.word	0x08024054
 80121f8:	08029764 	.word	0x08029764
 80121fc:	08029774 	.word	0x08029774
 8012200:	08029788 	.word	0x08029788
 8012204:	08024190 	.word	0x08024190
 8012208:	0802979c 	.word	0x0802979c
 801220c:	080297a8 	.word	0x080297a8
 8012210:	08023cf8 	.word	0x08023cf8
		case 491 :
			strcpy(p->name,"BIG TIME BRUH");
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801221a:	4aaa      	ldr	r2, [pc, #680]	; (80124c4 <problem_fetch+0x10ddc>)
 801221c:	461c      	mov	r4, r3
 801221e:	4613      	mov	r3, r2
 8012220:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012222:	6020      	str	r0, [r4, #0]
 8012224:	6061      	str	r1, [r4, #4]
 8012226:	60a2      	str	r2, [r4, #8]
 8012228:	881b      	ldrh	r3, [r3, #0]
 801222a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012232:	4aa5      	ldr	r2, [pc, #660]	; (80124c8 <problem_fetch+0x10de0>)
 8012234:	8811      	ldrh	r1, [r2, #0]
 8012236:	7892      	ldrb	r2, [r2, #2]
 8012238:	8019      	strh	r1, [r3, #0]
 801223a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2207      	movs	r2, #7
 8012240:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,E,I");
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	33a4      	adds	r3, #164	; 0xa4
 8012246:	4aa1      	ldr	r2, [pc, #644]	; (80124cc <problem_fetch+0x10de4>)
 8012248:	461c      	mov	r4, r3
 801224a:	4613      	mov	r3, r2
 801224c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801224e:	6020      	str	r0, [r4, #0]
 8012250:	6061      	str	r1, [r4, #4]
 8012252:	60a2      	str	r2, [r4, #8]
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,10,13,14,16,18");
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	3304      	adds	r3, #4
 801225c:	4a9c      	ldr	r2, [pc, #624]	; (80124d0 <problem_fetch+0x10de8>)
 801225e:	461d      	mov	r5, r3
 8012260:	4614      	mov	r4, r2
 8012262:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012264:	6028      	str	r0, [r5, #0]
 8012266:	6069      	str	r1, [r5, #4]
 8012268:	60aa      	str	r2, [r5, #8]
 801226a:	60eb      	str	r3, [r5, #12]
 801226c:	8823      	ldrh	r3, [r4, #0]
 801226e:	78a2      	ldrb	r2, [r4, #2]
 8012270:	822b      	strh	r3, [r5, #16]
 8012272:	4613      	mov	r3, r2
 8012274:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801227c:	4a95      	ldr	r2, [pc, #596]	; (80124d4 <problem_fetch+0x10dec>)
 801227e:	461c      	mov	r4, r3
 8012280:	4613      	mov	r3, r2
 8012282:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012284:	6020      	str	r0, [r4, #0]
 8012286:	6061      	str	r1, [r4, #4]
 8012288:	60a2      	str	r2, [r4, #8]
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	81a3      	strh	r3, [r4, #12]
			break;
 801228e:	f00a b95b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 492 :
			strcpy(p->name,"THE HUMAN FLAG");
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012298:	4a8f      	ldr	r2, [pc, #572]	; (80124d8 <problem_fetch+0x10df0>)
 801229a:	461c      	mov	r4, r3
 801229c:	4613      	mov	r3, r2
 801229e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80122a0:	6020      	str	r0, [r4, #0]
 80122a2:	6061      	str	r1, [r4, #4]
 80122a4:	60a2      	str	r2, [r4, #8]
 80122a6:	881a      	ldrh	r2, [r3, #0]
 80122a8:	789b      	ldrb	r3, [r3, #2]
 80122aa:	81a2      	strh	r2, [r4, #12]
 80122ac:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80122b4:	4a89      	ldr	r2, [pc, #548]	; (80124dc <problem_fetch+0x10df4>)
 80122b6:	8811      	ldrh	r1, [r2, #0]
 80122b8:	7892      	ldrb	r2, [r2, #2]
 80122ba:	8019      	strh	r1, [r3, #0]
 80122bc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2204      	movs	r2, #4
 80122c2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	33a4      	adds	r3, #164	; 0xa4
 80122c8:	4985      	ldr	r1, [pc, #532]	; (80124e0 <problem_fetch+0x10df8>)
 80122ca:	461a      	mov	r2, r3
 80122cc:	460b      	mov	r3, r1
 80122ce:	cb03      	ldmia	r3!, {r0, r1}
 80122d0:	6010      	str	r0, [r2, #0]
 80122d2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,13,18");
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	3304      	adds	r3, #4
 80122d8:	4982      	ldr	r1, [pc, #520]	; (80124e4 <problem_fetch+0x10dfc>)
 80122da:	461a      	mov	r2, r3
 80122dc:	460b      	mov	r3, r1
 80122de:	cb03      	ldmia	r3!, {r0, r1}
 80122e0:	6010      	str	r0, [r2, #0]
 80122e2:	6051      	str	r1, [r2, #4]
 80122e4:	8819      	ldrh	r1, [r3, #0]
 80122e6:	789b      	ldrb	r3, [r3, #2]
 80122e8:	8111      	strh	r1, [r2, #8]
 80122ea:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80122f2:	497d      	ldr	r1, [pc, #500]	; (80124e8 <problem_fetch+0x10e00>)
 80122f4:	461a      	mov	r2, r3
 80122f6:	460b      	mov	r3, r1
 80122f8:	cb03      	ldmia	r3!, {r0, r1}
 80122fa:	6010      	str	r0, [r2, #0]
 80122fc:	6051      	str	r1, [r2, #4]
			break;
 80122fe:	f00a b923 	b.w	801c548 <problem_fetch+0x1ae60>
		case 493 :
			strcpy(p->name,"WINGSPAN");
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012308:	4978      	ldr	r1, [pc, #480]	; (80124ec <problem_fetch+0x10e04>)
 801230a:	461a      	mov	r2, r3
 801230c:	460b      	mov	r3, r1
 801230e:	cb03      	ldmia	r3!, {r0, r1}
 8012310:	6010      	str	r0, [r2, #0]
 8012312:	6051      	str	r1, [r2, #4]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801231e:	4a74      	ldr	r2, [pc, #464]	; (80124f0 <problem_fetch+0x10e08>)
 8012320:	6810      	ldr	r0, [r2, #0]
 8012322:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2205      	movs	r2, #5
 8012328:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,A,D");
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	33a4      	adds	r3, #164	; 0xa4
 801232e:	4971      	ldr	r1, [pc, #452]	; (80124f4 <problem_fetch+0x10e0c>)
 8012330:	461a      	mov	r2, r3
 8012332:	460b      	mov	r3, r1
 8012334:	cb03      	ldmia	r3!, {r0, r1}
 8012336:	6010      	str	r0, [r2, #0]
 8012338:	6051      	str	r1, [r2, #4]
 801233a:	881b      	ldrh	r3, [r3, #0]
 801233c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	3304      	adds	r3, #4
 8012342:	4a6d      	ldr	r2, [pc, #436]	; (80124f8 <problem_fetch+0x10e10>)
 8012344:	461c      	mov	r4, r3
 8012346:	4613      	mov	r3, r2
 8012348:	cb07      	ldmia	r3!, {r0, r1, r2}
 801234a:	6020      	str	r0, [r4, #0]
 801234c:	6061      	str	r1, [r4, #4]
 801234e:	60a2      	str	r2, [r4, #8]
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801235a:	4968      	ldr	r1, [pc, #416]	; (80124fc <problem_fetch+0x10e14>)
 801235c:	461a      	mov	r2, r3
 801235e:	460b      	mov	r3, r1
 8012360:	cb03      	ldmia	r3!, {r0, r1}
 8012362:	6010      	str	r0, [r2, #0]
 8012364:	6051      	str	r1, [r2, #4]
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	8113      	strh	r3, [r2, #8]
			break;
 801236a:	f00a b8ed 	b.w	801c548 <problem_fetch+0x1ae60>
		case 494 :
			strcpy(p->name,"BELLE NOIRE");
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012374:	4a62      	ldr	r2, [pc, #392]	; (8012500 <problem_fetch+0x10e18>)
 8012376:	461c      	mov	r4, r3
 8012378:	4613      	mov	r3, r2
 801237a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801237c:	6020      	str	r0, [r4, #0]
 801237e:	6061      	str	r1, [r4, #4]
 8012380:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012388:	4a59      	ldr	r2, [pc, #356]	; (80124f0 <problem_fetch+0x10e08>)
 801238a:	6810      	ldr	r0, [r2, #0]
 801238c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2207      	movs	r2, #7
 8012392:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,J,I,I");
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	33a4      	adds	r3, #164	; 0xa4
 8012398:	4a5a      	ldr	r2, [pc, #360]	; (8012504 <problem_fetch+0x10e1c>)
 801239a:	461c      	mov	r4, r3
 801239c:	4613      	mov	r3, r2
 801239e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123a0:	6020      	str	r0, [r4, #0]
 80123a2:	6061      	str	r1, [r4, #4]
 80123a4:	60a2      	str	r2, [r4, #8]
 80123a6:	881b      	ldrh	r3, [r3, #0]
 80123a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,13,15,18");
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	3304      	adds	r3, #4
 80123ae:	4a56      	ldr	r2, [pc, #344]	; (8012508 <problem_fetch+0x10e20>)
 80123b0:	461d      	mov	r5, r3
 80123b2:	4614      	mov	r4, r2
 80123b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80123b6:	6028      	str	r0, [r5, #0]
 80123b8:	6069      	str	r1, [r5, #4]
 80123ba:	60aa      	str	r2, [r5, #8]
 80123bc:	60eb      	str	r3, [r5, #12]
 80123be:	8823      	ldrh	r3, [r4, #0]
 80123c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80123c8:	4a42      	ldr	r2, [pc, #264]	; (80124d4 <problem_fetch+0x10dec>)
 80123ca:	461c      	mov	r4, r3
 80123cc:	4613      	mov	r3, r2
 80123ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123d0:	6020      	str	r0, [r4, #0]
 80123d2:	6061      	str	r1, [r4, #4]
 80123d4:	60a2      	str	r2, [r4, #8]
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	81a3      	strh	r3, [r4, #12]
			break;
 80123da:	f00a b8b5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 495 :
			strcpy(p->name,"VORPAL SWORD");
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80123e4:	4a49      	ldr	r2, [pc, #292]	; (801250c <problem_fetch+0x10e24>)
 80123e6:	461c      	mov	r4, r3
 80123e8:	4613      	mov	r3, r2
 80123ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80123ec:	6020      	str	r0, [r4, #0]
 80123ee:	6061      	str	r1, [r4, #4]
 80123f0:	60a2      	str	r2, [r4, #8]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80123fc:	4a3c      	ldr	r2, [pc, #240]	; (80124f0 <problem_fetch+0x10e08>)
 80123fe:	6810      	ldr	r0, [r2, #0]
 8012400:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2206      	movs	r2, #6
 8012406:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,H,H,I");
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	33a4      	adds	r3, #164	; 0xa4
 801240c:	4a40      	ldr	r2, [pc, #256]	; (8012510 <problem_fetch+0x10e28>)
 801240e:	461c      	mov	r4, r3
 8012410:	4613      	mov	r3, r2
 8012412:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012414:	6020      	str	r0, [r4, #0]
 8012416:	6061      	str	r1, [r4, #4]
 8012418:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,16,18");
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	3304      	adds	r3, #4
 801241e:	4a3d      	ldr	r2, [pc, #244]	; (8012514 <problem_fetch+0x10e2c>)
 8012420:	461c      	mov	r4, r3
 8012422:	4613      	mov	r3, r2
 8012424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012426:	6020      	str	r0, [r4, #0]
 8012428:	6061      	str	r1, [r4, #4]
 801242a:	60a2      	str	r2, [r4, #8]
 801242c:	881a      	ldrh	r2, [r3, #0]
 801242e:	789b      	ldrb	r3, [r3, #2]
 8012430:	81a2      	strh	r2, [r4, #12]
 8012432:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801243a:	4a37      	ldr	r2, [pc, #220]	; (8012518 <problem_fetch+0x10e30>)
 801243c:	461c      	mov	r4, r3
 801243e:	4613      	mov	r3, r2
 8012440:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012442:	6020      	str	r0, [r4, #0]
 8012444:	6061      	str	r1, [r4, #4]
 8012446:	60a2      	str	r2, [r4, #8]
			break;
 8012448:	f00a b87e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 496 :
			strcpy(p->name,"INSANE IN THE BRAIN");
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012452:	4a32      	ldr	r2, [pc, #200]	; (801251c <problem_fetch+0x10e34>)
 8012454:	461d      	mov	r5, r3
 8012456:	4614      	mov	r4, r2
 8012458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801245a:	6028      	str	r0, [r5, #0]
 801245c:	6069      	str	r1, [r5, #4]
 801245e:	60aa      	str	r2, [r5, #8]
 8012460:	60eb      	str	r3, [r5, #12]
 8012462:	6820      	ldr	r0, [r4, #0]
 8012464:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801246c:	4a2c      	ldr	r2, [pc, #176]	; (8012520 <problem_fetch+0x10e38>)
 801246e:	6810      	ldr	r0, [r2, #0]
 8012470:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2207      	movs	r2, #7
 8012476:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,E,B,A,D");
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	33a4      	adds	r3, #164	; 0xa4
 801247c:	4a29      	ldr	r2, [pc, #164]	; (8012524 <problem_fetch+0x10e3c>)
 801247e:	461c      	mov	r4, r3
 8012480:	4613      	mov	r3, r2
 8012482:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012484:	6020      	str	r0, [r4, #0]
 8012486:	6061      	str	r1, [r4, #4]
 8012488:	60a2      	str	r2, [r4, #8]
 801248a:	881b      	ldrh	r3, [r3, #0]
 801248c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,12,8,10,14,18");
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	3304      	adds	r3, #4
 8012492:	4a25      	ldr	r2, [pc, #148]	; (8012528 <problem_fetch+0x10e40>)
 8012494:	461d      	mov	r5, r3
 8012496:	4614      	mov	r4, r2
 8012498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801249a:	6028      	str	r0, [r5, #0]
 801249c:	6069      	str	r1, [r5, #4]
 801249e:	60aa      	str	r2, [r5, #8]
 80124a0:	60eb      	str	r3, [r5, #12]
 80124a2:	8823      	ldrh	r3, [r4, #0]
 80124a4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80124ac:	4a1f      	ldr	r2, [pc, #124]	; (801252c <problem_fetch+0x10e44>)
 80124ae:	461c      	mov	r4, r3
 80124b0:	4613      	mov	r3, r2
 80124b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80124b4:	6020      	str	r0, [r4, #0]
 80124b6:	6061      	str	r1, [r4, #4]
 80124b8:	60a2      	str	r2, [r4, #8]
 80124ba:	881b      	ldrh	r3, [r3, #0]
 80124bc:	81a3      	strh	r3, [r4, #12]
			break;
 80124be:	f00a b843 	b.w	801c548 <problem_fetch+0x1ae60>
 80124c2:	bf00      	nop
 80124c4:	080297b8 	.word	0x080297b8
 80124c8:	08023a28 	.word	0x08023a28
 80124cc:	080297c8 	.word	0x080297c8
 80124d0:	080297d8 	.word	0x080297d8
 80124d4:	08023ae4 	.word	0x08023ae4
 80124d8:	080297ec 	.word	0x080297ec
 80124dc:	0802391c 	.word	0x0802391c
 80124e0:	080297fc 	.word	0x080297fc
 80124e4:	08026f68 	.word	0x08026f68
 80124e8:	08023ab0 	.word	0x08023ab0
 80124ec:	08029804 	.word	0x08029804
 80124f0:	08023afc 	.word	0x08023afc
 80124f4:	08029810 	.word	0x08029810
 80124f8:	080270e8 	.word	0x080270e8
 80124fc:	08023e28 	.word	0x08023e28
 8012500:	0802981c 	.word	0x0802981c
 8012504:	08029828 	.word	0x08029828
 8012508:	08029838 	.word	0x08029838
 801250c:	0802984c 	.word	0x0802984c
 8012510:	0802985c 	.word	0x0802985c
 8012514:	08028880 	.word	0x08028880
 8012518:	08023cf8 	.word	0x08023cf8
 801251c:	08029868 	.word	0x08029868
 8012520:	0802395c 	.word	0x0802395c
 8012524:	0802987c 	.word	0x0802987c
 8012528:	0802988c 	.word	0x0802988c
 801252c:	080239d4 	.word	0x080239d4
		case 497 :
			strcpy(p->name,"MARCUS IS THE PROBLEM");
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012536:	4ab6      	ldr	r2, [pc, #728]	; (8012810 <problem_fetch+0x11128>)
 8012538:	461d      	mov	r5, r3
 801253a:	4614      	mov	r4, r2
 801253c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801253e:	6028      	str	r0, [r5, #0]
 8012540:	6069      	str	r1, [r5, #4]
 8012542:	60aa      	str	r2, [r5, #8]
 8012544:	60eb      	str	r3, [r5, #12]
 8012546:	6820      	ldr	r0, [r4, #0]
 8012548:	6128      	str	r0, [r5, #16]
 801254a:	88a3      	ldrh	r3, [r4, #4]
 801254c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012554:	4aaf      	ldr	r2, [pc, #700]	; (8012814 <problem_fetch+0x1112c>)
 8012556:	8811      	ldrh	r1, [r2, #0]
 8012558:	7892      	ldrb	r2, [r2, #2]
 801255a:	8019      	strh	r1, [r3, #0]
 801255c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2208      	movs	r2, #8
 8012562:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,D,E,A,E,D");
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	33a4      	adds	r3, #164	; 0xa4
 8012568:	4aab      	ldr	r2, [pc, #684]	; (8012818 <problem_fetch+0x11130>)
 801256a:	461c      	mov	r4, r3
 801256c:	4615      	mov	r5, r2
 801256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012570:	6020      	str	r0, [r4, #0]
 8012572:	6061      	str	r1, [r4, #4]
 8012574:	60a2      	str	r2, [r4, #8]
 8012576:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,12,14,16,18");
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	3304      	adds	r3, #4
 801257c:	4aa7      	ldr	r2, [pc, #668]	; (801281c <problem_fetch+0x11134>)
 801257e:	461d      	mov	r5, r3
 8012580:	4614      	mov	r4, r2
 8012582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012584:	6028      	str	r0, [r5, #0]
 8012586:	6069      	str	r1, [r5, #4]
 8012588:	60aa      	str	r2, [r5, #8]
 801258a:	60eb      	str	r3, [r5, #12]
 801258c:	6820      	ldr	r0, [r4, #0]
 801258e:	6128      	str	r0, [r5, #16]
 8012590:	7923      	ldrb	r3, [r4, #4]
 8012592:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801259a:	4aa1      	ldr	r2, [pc, #644]	; (8012820 <problem_fetch+0x11138>)
 801259c:	461c      	mov	r4, r3
 801259e:	4615      	mov	r5, r2
 80125a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125a2:	6020      	str	r0, [r4, #0]
 80125a4:	6061      	str	r1, [r4, #4]
 80125a6:	60a2      	str	r2, [r4, #8]
 80125a8:	60e3      	str	r3, [r4, #12]
			break;
 80125aa:	f009 bfcd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 498 :
			strcpy(p->name,"SACRED COW");
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80125b4:	499b      	ldr	r1, [pc, #620]	; (8012824 <problem_fetch+0x1113c>)
 80125b6:	461a      	mov	r2, r3
 80125b8:	460b      	mov	r3, r1
 80125ba:	cb03      	ldmia	r3!, {r0, r1}
 80125bc:	6010      	str	r0, [r2, #0]
 80125be:	6051      	str	r1, [r2, #4]
 80125c0:	8819      	ldrh	r1, [r3, #0]
 80125c2:	789b      	ldrb	r3, [r3, #2]
 80125c4:	8111      	strh	r1, [r2, #8]
 80125c6:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80125ce:	4a96      	ldr	r2, [pc, #600]	; (8012828 <problem_fetch+0x11140>)
 80125d0:	8811      	ldrh	r1, [r2, #0]
 80125d2:	7892      	ldrb	r2, [r2, #2]
 80125d4:	8019      	strh	r1, [r3, #0]
 80125d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	220b      	movs	r2, #11
 80125dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,I,C,A,C,H,G,H,I,I");
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	33a4      	adds	r3, #164	; 0xa4
 80125e2:	4a92      	ldr	r2, [pc, #584]	; (801282c <problem_fetch+0x11144>)
 80125e4:	461d      	mov	r5, r3
 80125e6:	4614      	mov	r4, r2
 80125e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80125ea:	6028      	str	r0, [r5, #0]
 80125ec:	6069      	str	r1, [r5, #4]
 80125ee:	60aa      	str	r2, [r5, #8]
 80125f0:	60eb      	str	r3, [r5, #12]
 80125f2:	6820      	ldr	r0, [r4, #0]
 80125f4:	6128      	str	r0, [r5, #16]
 80125f6:	88a3      	ldrh	r3, [r4, #4]
 80125f8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,4,14,13,9,8,10,9,8,7,18");
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	3304      	adds	r3, #4
 80125fe:	4a8c      	ldr	r2, [pc, #560]	; (8012830 <problem_fetch+0x11148>)
 8012600:	461d      	mov	r5, r3
 8012602:	4614      	mov	r4, r2
 8012604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012606:	6028      	str	r0, [r5, #0]
 8012608:	6069      	str	r1, [r5, #4]
 801260a:	60aa      	str	r2, [r5, #8]
 801260c:	60eb      	str	r3, [r5, #12]
 801260e:	cc03      	ldmia	r4!, {r0, r1}
 8012610:	6128      	str	r0, [r5, #16]
 8012612:	6169      	str	r1, [r5, #20]
 8012614:	8823      	ldrh	r3, [r4, #0]
 8012616:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801261e:	4a85      	ldr	r2, [pc, #532]	; (8012834 <problem_fetch+0x1114c>)
 8012620:	461d      	mov	r5, r3
 8012622:	4614      	mov	r4, r2
 8012624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012626:	6028      	str	r0, [r5, #0]
 8012628:	6069      	str	r1, [r5, #4]
 801262a:	60aa      	str	r2, [r5, #8]
 801262c:	60eb      	str	r3, [r5, #12]
 801262e:	6820      	ldr	r0, [r4, #0]
 8012630:	6128      	str	r0, [r5, #16]
 8012632:	88a3      	ldrh	r3, [r4, #4]
 8012634:	82ab      	strh	r3, [r5, #20]
			break;
 8012636:	f009 bf87 	b.w	801c548 <problem_fetch+0x1ae60>
		case 499 :
			strcpy(p->name,"BABA BLACK SHEEP");
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012640:	4a7d      	ldr	r2, [pc, #500]	; (8012838 <problem_fetch+0x11150>)
 8012642:	461d      	mov	r5, r3
 8012644:	4614      	mov	r4, r2
 8012646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012648:	6028      	str	r0, [r5, #0]
 801264a:	6069      	str	r1, [r5, #4]
 801264c:	60aa      	str	r2, [r5, #8]
 801264e:	60eb      	str	r3, [r5, #12]
 8012650:	7823      	ldrb	r3, [r4, #0]
 8012652:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801265a:	4a73      	ldr	r2, [pc, #460]	; (8012828 <problem_fetch+0x11140>)
 801265c:	8811      	ldrh	r1, [r2, #0]
 801265e:	7892      	ldrb	r2, [r2, #2]
 8012660:	8019      	strh	r1, [r3, #0]
 8012662:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	220a      	movs	r2, #10
 8012668:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,I,H,G,H,I,C,I");
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	33a4      	adds	r3, #164	; 0xa4
 801266e:	4a73      	ldr	r2, [pc, #460]	; (801283c <problem_fetch+0x11154>)
 8012670:	461d      	mov	r5, r3
 8012672:	4614      	mov	r4, r2
 8012674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012676:	6028      	str	r0, [r5, #0]
 8012678:	6069      	str	r1, [r5, #4]
 801267a:	60aa      	str	r2, [r5, #8]
 801267c:	60eb      	str	r3, [r5, #12]
 801267e:	6820      	ldr	r0, [r4, #0]
 8012680:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,4,13,14,10,9,8,7,8,18");
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	3304      	adds	r3, #4
 8012686:	4a6e      	ldr	r2, [pc, #440]	; (8012840 <problem_fetch+0x11158>)
 8012688:	461d      	mov	r5, r3
 801268a:	4614      	mov	r4, r2
 801268c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801268e:	6028      	str	r0, [r5, #0]
 8012690:	6069      	str	r1, [r5, #4]
 8012692:	60aa      	str	r2, [r5, #8]
 8012694:	60eb      	str	r3, [r5, #12]
 8012696:	cc03      	ldmia	r4!, {r0, r1}
 8012698:	6128      	str	r0, [r5, #16]
 801269a:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80126a2:	4a68      	ldr	r2, [pc, #416]	; (8012844 <problem_fetch+0x1115c>)
 80126a4:	461d      	mov	r5, r3
 80126a6:	4614      	mov	r4, r2
 80126a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80126aa:	6028      	str	r0, [r5, #0]
 80126ac:	6069      	str	r1, [r5, #4]
 80126ae:	60aa      	str	r2, [r5, #8]
 80126b0:	60eb      	str	r3, [r5, #12]
 80126b2:	6820      	ldr	r0, [r4, #0]
 80126b4:	6128      	str	r0, [r5, #16]
			break;
 80126b6:	f009 bf47 	b.w	801c548 <problem_fetch+0x1ae60>
		case 500 :
			strcpy(p->name,"BLACK SHEEP");
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80126c0:	4a61      	ldr	r2, [pc, #388]	; (8012848 <problem_fetch+0x11160>)
 80126c2:	461c      	mov	r4, r3
 80126c4:	4613      	mov	r3, r2
 80126c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80126c8:	6020      	str	r0, [r4, #0]
 80126ca:	6061      	str	r1, [r4, #4]
 80126cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80126d4:	4a5d      	ldr	r2, [pc, #372]	; (801284c <problem_fetch+0x11164>)
 80126d6:	6810      	ldr	r0, [r2, #0]
 80126d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2208      	movs	r2, #8
 80126de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,H,G,H,I,C,I");
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	33a4      	adds	r3, #164	; 0xa4
 80126e4:	4a5a      	ldr	r2, [pc, #360]	; (8012850 <problem_fetch+0x11168>)
 80126e6:	461c      	mov	r4, r3
 80126e8:	4615      	mov	r5, r2
 80126ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126ec:	6020      	str	r0, [r4, #0]
 80126ee:	6061      	str	r1, [r4, #4]
 80126f0:	60a2      	str	r2, [r4, #8]
 80126f2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,13,10,9,8,7,8,18");
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	3304      	adds	r3, #4
 80126f8:	4a56      	ldr	r2, [pc, #344]	; (8012854 <problem_fetch+0x1116c>)
 80126fa:	461d      	mov	r5, r3
 80126fc:	4614      	mov	r4, r2
 80126fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012700:	6028      	str	r0, [r5, #0]
 8012702:	6069      	str	r1, [r5, #4]
 8012704:	60aa      	str	r2, [r5, #8]
 8012706:	60eb      	str	r3, [r5, #12]
 8012708:	8823      	ldrh	r3, [r4, #0]
 801270a:	78a2      	ldrb	r2, [r4, #2]
 801270c:	822b      	strh	r3, [r5, #16]
 801270e:	4613      	mov	r3, r2
 8012710:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012718:	4a4f      	ldr	r2, [pc, #316]	; (8012858 <problem_fetch+0x11170>)
 801271a:	461c      	mov	r4, r3
 801271c:	4615      	mov	r5, r2
 801271e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012720:	6020      	str	r0, [r4, #0]
 8012722:	6061      	str	r1, [r4, #4]
 8012724:	60a2      	str	r2, [r4, #8]
 8012726:	60e3      	str	r3, [r4, #12]
			break;
 8012728:	f009 bf0e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 501 :
			strcpy(p->name,"TIGELLA OF DREAM");
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012732:	4a4a      	ldr	r2, [pc, #296]	; (801285c <problem_fetch+0x11174>)
 8012734:	461d      	mov	r5, r3
 8012736:	4614      	mov	r4, r2
 8012738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801273a:	6028      	str	r0, [r5, #0]
 801273c:	6069      	str	r1, [r5, #4]
 801273e:	60aa      	str	r2, [r5, #8]
 8012740:	60eb      	str	r3, [r5, #12]
 8012742:	7823      	ldrb	r3, [r4, #0]
 8012744:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801274c:	4a36      	ldr	r2, [pc, #216]	; (8012828 <problem_fetch+0x11140>)
 801274e:	8811      	ldrh	r1, [r2, #0]
 8012750:	7892      	ldrb	r2, [r2, #2]
 8012752:	8019      	strh	r1, [r3, #0]
 8012754:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2205      	movs	r2, #5
 801275a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,F,C,E,D");
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	33a4      	adds	r3, #164	; 0xa4
 8012760:	493f      	ldr	r1, [pc, #252]	; (8012860 <problem_fetch+0x11178>)
 8012762:	461a      	mov	r2, r3
 8012764:	460b      	mov	r3, r1
 8012766:	cb03      	ldmia	r3!, {r0, r1}
 8012768:	6010      	str	r0, [r2, #0]
 801276a:	6051      	str	r1, [r2, #4]
 801276c:	881b      	ldrh	r3, [r3, #0]
 801276e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,11,13,6,18");
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	3304      	adds	r3, #4
 8012774:	4a3b      	ldr	r2, [pc, #236]	; (8012864 <problem_fetch+0x1117c>)
 8012776:	461c      	mov	r4, r3
 8012778:	4613      	mov	r3, r2
 801277a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801277c:	6020      	str	r0, [r4, #0]
 801277e:	6061      	str	r1, [r4, #4]
 8012780:	60a2      	str	r2, [r4, #8]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801278c:	4936      	ldr	r1, [pc, #216]	; (8012868 <problem_fetch+0x11180>)
 801278e:	461a      	mov	r2, r3
 8012790:	460b      	mov	r3, r1
 8012792:	cb03      	ldmia	r3!, {r0, r1}
 8012794:	6010      	str	r0, [r2, #0]
 8012796:	6051      	str	r1, [r2, #4]
 8012798:	881b      	ldrh	r3, [r3, #0]
 801279a:	8113      	strh	r3, [r2, #8]
			break;
 801279c:	f009 bed4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 502 :
			strcpy(p->name,"AGRO-VATED");
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80127a6:	4931      	ldr	r1, [pc, #196]	; (801286c <problem_fetch+0x11184>)
 80127a8:	461a      	mov	r2, r3
 80127aa:	460b      	mov	r3, r1
 80127ac:	cb03      	ldmia	r3!, {r0, r1}
 80127ae:	6010      	str	r0, [r2, #0]
 80127b0:	6051      	str	r1, [r2, #4]
 80127b2:	8819      	ldrh	r1, [r3, #0]
 80127b4:	789b      	ldrb	r3, [r3, #2]
 80127b6:	8111      	strh	r1, [r2, #8]
 80127b8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80127c0:	4a2b      	ldr	r2, [pc, #172]	; (8012870 <problem_fetch+0x11188>)
 80127c2:	6810      	ldr	r0, [r2, #0]
 80127c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	2206      	movs	r2, #6
 80127ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,E,G,I");
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	33a4      	adds	r3, #164	; 0xa4
 80127d0:	4a28      	ldr	r2, [pc, #160]	; (8012874 <problem_fetch+0x1118c>)
 80127d2:	461c      	mov	r4, r3
 80127d4:	4613      	mov	r3, r2
 80127d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127d8:	6020      	str	r0, [r4, #0]
 80127da:	6061      	str	r1, [r4, #4]
 80127dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,8,12,14,18");
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	3304      	adds	r3, #4
 80127e2:	4a25      	ldr	r2, [pc, #148]	; (8012878 <problem_fetch+0x11190>)
 80127e4:	461c      	mov	r4, r3
 80127e6:	4613      	mov	r3, r2
 80127e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80127ea:	6020      	str	r0, [r4, #0]
 80127ec:	6061      	str	r1, [r4, #4]
 80127ee:	60a2      	str	r2, [r4, #8]
 80127f0:	881a      	ldrh	r2, [r3, #0]
 80127f2:	789b      	ldrb	r3, [r3, #2]
 80127f4:	81a2      	strh	r2, [r4, #12]
 80127f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80127fe:	4a1f      	ldr	r2, [pc, #124]	; (801287c <problem_fetch+0x11194>)
 8012800:	461c      	mov	r4, r3
 8012802:	4613      	mov	r3, r2
 8012804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012806:	6020      	str	r0, [r4, #0]
 8012808:	6061      	str	r1, [r4, #4]
 801280a:	60a2      	str	r2, [r4, #8]
			break;
 801280c:	f009 be9c 	b.w	801c548 <problem_fetch+0x1ae60>
 8012810:	080298a0 	.word	0x080298a0
 8012814:	08023a28 	.word	0x08023a28
 8012818:	080298b8 	.word	0x080298b8
 801281c:	080298c8 	.word	0x080298c8
 8012820:	08023a80 	.word	0x08023a80
 8012824:	080298e0 	.word	0x080298e0
 8012828:	0802391c 	.word	0x0802391c
 801282c:	080298ec 	.word	0x080298ec
 8012830:	08029904 	.word	0x08029904
 8012834:	080272bc 	.word	0x080272bc
 8012838:	08029920 	.word	0x08029920
 801283c:	08029934 	.word	0x08029934
 8012840:	08029948 	.word	0x08029948
 8012844:	08024204 	.word	0x08024204
 8012848:	08029960 	.word	0x08029960
 801284c:	0802395c 	.word	0x0802395c
 8012850:	0802996c 	.word	0x0802996c
 8012854:	0802997c 	.word	0x0802997c
 8012858:	08023b6c 	.word	0x08023b6c
 801285c:	08029990 	.word	0x08029990
 8012860:	080299a4 	.word	0x080299a4
 8012864:	080299b0 	.word	0x080299b0
 8012868:	08023e28 	.word	0x08023e28
 801286c:	080299c0 	.word	0x080299c0
 8012870:	08023afc 	.word	0x08023afc
 8012874:	080299cc 	.word	0x080299cc
 8012878:	080299d8 	.word	0x080299d8
 801287c:	08023cf8 	.word	0x08023cf8
		case 503 :
			strcpy(p->name,"TONE'S THROW");
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012886:	4ab1      	ldr	r2, [pc, #708]	; (8012b4c <problem_fetch+0x11464>)
 8012888:	461c      	mov	r4, r3
 801288a:	4613      	mov	r3, r2
 801288c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801288e:	6020      	str	r0, [r4, #0]
 8012890:	6061      	str	r1, [r4, #4]
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801289e:	4aac      	ldr	r2, [pc, #688]	; (8012b50 <problem_fetch+0x11468>)
 80128a0:	6810      	ldr	r0, [r2, #0]
 80128a2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2205      	movs	r2, #5
 80128a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,E,A,D");
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	33a4      	adds	r3, #164	; 0xa4
 80128ae:	49a9      	ldr	r1, [pc, #676]	; (8012b54 <problem_fetch+0x1146c>)
 80128b0:	461a      	mov	r2, r3
 80128b2:	460b      	mov	r3, r1
 80128b4:	cb03      	ldmia	r3!, {r0, r1}
 80128b6:	6010      	str	r0, [r2, #0]
 80128b8:	6051      	str	r1, [r2, #4]
 80128ba:	881b      	ldrh	r3, [r3, #0]
 80128bc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	3304      	adds	r3, #4
 80128c2:	4aa5      	ldr	r2, [pc, #660]	; (8012b58 <problem_fetch+0x11470>)
 80128c4:	461c      	mov	r4, r3
 80128c6:	4613      	mov	r3, r2
 80128c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128ca:	6020      	str	r0, [r4, #0]
 80128cc:	6061      	str	r1, [r4, #4]
 80128ce:	60a2      	str	r2, [r4, #8]
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80128da:	49a0      	ldr	r1, [pc, #640]	; (8012b5c <problem_fetch+0x11474>)
 80128dc:	461a      	mov	r2, r3
 80128de:	460b      	mov	r3, r1
 80128e0:	cb03      	ldmia	r3!, {r0, r1}
 80128e2:	6010      	str	r0, [r2, #0]
 80128e4:	6051      	str	r1, [r2, #4]
 80128e6:	881b      	ldrh	r3, [r3, #0]
 80128e8:	8113      	strh	r3, [r2, #8]
			break;
 80128ea:	f009 be2d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 504 :
			strcpy(p->name,"BLACK PEPPER");
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80128f4:	4a9a      	ldr	r2, [pc, #616]	; (8012b60 <problem_fetch+0x11478>)
 80128f6:	461c      	mov	r4, r3
 80128f8:	4613      	mov	r3, r2
 80128fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80128fc:	6020      	str	r0, [r4, #0]
 80128fe:	6061      	str	r1, [r4, #4]
 8012900:	60a2      	str	r2, [r4, #8]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801290c:	4a95      	ldr	r2, [pc, #596]	; (8012b64 <problem_fetch+0x1147c>)
 801290e:	8811      	ldrh	r1, [r2, #0]
 8012910:	7892      	ldrb	r2, [r2, #2]
 8012912:	8019      	strh	r1, [r3, #0]
 8012914:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2207      	movs	r2, #7
 801291a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,C,D,D");
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	33a4      	adds	r3, #164	; 0xa4
 8012920:	4a91      	ldr	r2, [pc, #580]	; (8012b68 <problem_fetch+0x11480>)
 8012922:	461c      	mov	r4, r3
 8012924:	4613      	mov	r3, r2
 8012926:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012928:	6020      	str	r0, [r4, #0]
 801292a:	6061      	str	r1, [r4, #4]
 801292c:	60a2      	str	r2, [r4, #8]
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,9,13,15,18");
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	3304      	adds	r3, #4
 8012936:	4a8d      	ldr	r2, [pc, #564]	; (8012b6c <problem_fetch+0x11484>)
 8012938:	461d      	mov	r5, r3
 801293a:	4614      	mov	r4, r2
 801293c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801293e:	6028      	str	r0, [r5, #0]
 8012940:	6069      	str	r1, [r5, #4]
 8012942:	60aa      	str	r2, [r5, #8]
 8012944:	60eb      	str	r3, [r5, #12]
 8012946:	7823      	ldrb	r3, [r4, #0]
 8012948:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012950:	4a87      	ldr	r2, [pc, #540]	; (8012b70 <problem_fetch+0x11488>)
 8012952:	461c      	mov	r4, r3
 8012954:	4613      	mov	r3, r2
 8012956:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012958:	6020      	str	r0, [r4, #0]
 801295a:	6061      	str	r1, [r4, #4]
 801295c:	60a2      	str	r2, [r4, #8]
 801295e:	881b      	ldrh	r3, [r3, #0]
 8012960:	81a3      	strh	r3, [r4, #12]
			break;
 8012962:	f009 bdf1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 505 :
			strcpy(p->name,"GASTON GRADE PLEASE");
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801296c:	4a81      	ldr	r2, [pc, #516]	; (8012b74 <problem_fetch+0x1148c>)
 801296e:	461d      	mov	r5, r3
 8012970:	4614      	mov	r4, r2
 8012972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012974:	6028      	str	r0, [r5, #0]
 8012976:	6069      	str	r1, [r5, #4]
 8012978:	60aa      	str	r2, [r5, #8]
 801297a:	60eb      	str	r3, [r5, #12]
 801297c:	6820      	ldr	r0, [r4, #0]
 801297e:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012986:	4a72      	ldr	r2, [pc, #456]	; (8012b50 <problem_fetch+0x11468>)
 8012988:	6810      	ldr	r0, [r2, #0]
 801298a:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	220b      	movs	r2, #11
 8012990:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,G,F,H,G,I,E,G,D");
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	33a4      	adds	r3, #164	; 0xa4
 8012996:	4a78      	ldr	r2, [pc, #480]	; (8012b78 <problem_fetch+0x11490>)
 8012998:	461d      	mov	r5, r3
 801299a:	4614      	mov	r4, r2
 801299c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801299e:	6028      	str	r0, [r5, #0]
 80129a0:	6069      	str	r1, [r5, #4]
 80129a2:	60aa      	str	r2, [r5, #8]
 80129a4:	60eb      	str	r3, [r5, #12]
 80129a6:	6820      	ldr	r0, [r4, #0]
 80129a8:	6128      	str	r0, [r5, #16]
 80129aa:	88a3      	ldrh	r3, [r4, #4]
 80129ac:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,9,11,12,14,14,16,17,18");
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	3304      	adds	r3, #4
 80129b2:	4a72      	ldr	r2, [pc, #456]	; (8012b7c <problem_fetch+0x11494>)
 80129b4:	461d      	mov	r5, r3
 80129b6:	4614      	mov	r4, r2
 80129b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129ba:	6028      	str	r0, [r5, #0]
 80129bc:	6069      	str	r1, [r5, #4]
 80129be:	60aa      	str	r2, [r5, #8]
 80129c0:	60eb      	str	r3, [r5, #12]
 80129c2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80129c4:	6128      	str	r0, [r5, #16]
 80129c6:	6169      	str	r1, [r5, #20]
 80129c8:	61aa      	str	r2, [r5, #24]
 80129ca:	7823      	ldrb	r3, [r4, #0]
 80129cc:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80129d4:	4a6a      	ldr	r2, [pc, #424]	; (8012b80 <problem_fetch+0x11498>)
 80129d6:	461d      	mov	r5, r3
 80129d8:	4614      	mov	r4, r2
 80129da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80129dc:	6028      	str	r0, [r5, #0]
 80129de:	6069      	str	r1, [r5, #4]
 80129e0:	60aa      	str	r2, [r5, #8]
 80129e2:	60eb      	str	r3, [r5, #12]
 80129e4:	6820      	ldr	r0, [r4, #0]
 80129e6:	6128      	str	r0, [r5, #16]
 80129e8:	88a3      	ldrh	r3, [r4, #4]
 80129ea:	82ab      	strh	r3, [r5, #20]
			break;
 80129ec:	f009 bdac 	b.w	801c548 <problem_fetch+0x1ae60>
		case 506 :
			strcpy(p->name,"SALUHALLEN 11");
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80129f6:	4a63      	ldr	r2, [pc, #396]	; (8012b84 <problem_fetch+0x1149c>)
 80129f8:	461c      	mov	r4, r3
 80129fa:	4613      	mov	r3, r2
 80129fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80129fe:	6020      	str	r0, [r4, #0]
 8012a00:	6061      	str	r1, [r4, #4]
 8012a02:	60a2      	str	r2, [r4, #8]
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a0e:	4a5e      	ldr	r2, [pc, #376]	; (8012b88 <problem_fetch+0x114a0>)
 8012a10:	6810      	ldr	r0, [r2, #0]
 8012a12:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2207      	movs	r2, #7
 8012a18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,G,D");
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	33a4      	adds	r3, #164	; 0xa4
 8012a1e:	4a5b      	ldr	r2, [pc, #364]	; (8012b8c <problem_fetch+0x114a4>)
 8012a20:	461c      	mov	r4, r3
 8012a22:	4613      	mov	r3, r2
 8012a24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a26:	6020      	str	r0, [r4, #0]
 8012a28:	6061      	str	r1, [r4, #4]
 8012a2a:	60a2      	str	r2, [r4, #8]
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,12,14,15,18");
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	3304      	adds	r3, #4
 8012a34:	4a56      	ldr	r2, [pc, #344]	; (8012b90 <problem_fetch+0x114a8>)
 8012a36:	461d      	mov	r5, r3
 8012a38:	4614      	mov	r4, r2
 8012a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012a3c:	6028      	str	r0, [r5, #0]
 8012a3e:	6069      	str	r1, [r5, #4]
 8012a40:	60aa      	str	r2, [r5, #8]
 8012a42:	60eb      	str	r3, [r5, #12]
 8012a44:	8823      	ldrh	r3, [r4, #0]
 8012a46:	78a2      	ldrb	r2, [r4, #2]
 8012a48:	822b      	strh	r3, [r5, #16]
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012a54:	4a46      	ldr	r2, [pc, #280]	; (8012b70 <problem_fetch+0x11488>)
 8012a56:	461c      	mov	r4, r3
 8012a58:	4613      	mov	r3, r2
 8012a5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a5c:	6020      	str	r0, [r4, #0]
 8012a5e:	6061      	str	r1, [r4, #4]
 8012a60:	60a2      	str	r2, [r4, #8]
 8012a62:	881b      	ldrh	r3, [r3, #0]
 8012a64:	81a3      	strh	r3, [r4, #12]
			break;
 8012a66:	f009 bd6f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 507 :
			strcpy(p->name,"BULA 3");
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012a70:	4a48      	ldr	r2, [pc, #288]	; (8012b94 <problem_fetch+0x114ac>)
 8012a72:	6810      	ldr	r0, [r2, #0]
 8012a74:	6018      	str	r0, [r3, #0]
 8012a76:	8891      	ldrh	r1, [r2, #4]
 8012a78:	7992      	ldrb	r2, [r2, #6]
 8012a7a:	8099      	strh	r1, [r3, #4]
 8012a7c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012a84:	4a40      	ldr	r2, [pc, #256]	; (8012b88 <problem_fetch+0x114a0>)
 8012a86:	6810      	ldr	r0, [r2, #0]
 8012a88:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	2207      	movs	r2, #7
 8012a8e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,I,E,I");
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	33a4      	adds	r3, #164	; 0xa4
 8012a94:	4a40      	ldr	r2, [pc, #256]	; (8012b98 <problem_fetch+0x114b0>)
 8012a96:	461c      	mov	r4, r3
 8012a98:	4613      	mov	r3, r2
 8012a9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012a9c:	6020      	str	r0, [r4, #0]
 8012a9e:	6061      	str	r1, [r4, #4]
 8012aa0:	60a2      	str	r2, [r4, #8]
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	4a3c      	ldr	r2, [pc, #240]	; (8012b9c <problem_fetch+0x114b4>)
 8012aac:	461d      	mov	r5, r3
 8012aae:	4614      	mov	r4, r2
 8012ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ab2:	6028      	str	r0, [r5, #0]
 8012ab4:	6069      	str	r1, [r5, #4]
 8012ab6:	60aa      	str	r2, [r5, #8]
 8012ab8:	60eb      	str	r3, [r5, #12]
 8012aba:	8823      	ldrh	r3, [r4, #0]
 8012abc:	78a2      	ldrb	r2, [r4, #2]
 8012abe:	822b      	strh	r3, [r5, #16]
 8012ac0:	4613      	mov	r3, r2
 8012ac2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012aca:	4a29      	ldr	r2, [pc, #164]	; (8012b70 <problem_fetch+0x11488>)
 8012acc:	461c      	mov	r4, r3
 8012ace:	4613      	mov	r3, r2
 8012ad0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ad2:	6020      	str	r0, [r4, #0]
 8012ad4:	6061      	str	r1, [r4, #4]
 8012ad6:	60a2      	str	r2, [r4, #8]
 8012ad8:	881b      	ldrh	r3, [r3, #0]
 8012ada:	81a3      	strh	r3, [r4, #12]
			break;
 8012adc:	f009 bd34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 508 :
			strcpy(p->name,"CHICKUGA");
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ae6:	492e      	ldr	r1, [pc, #184]	; (8012ba0 <problem_fetch+0x114b8>)
 8012ae8:	461a      	mov	r2, r3
 8012aea:	460b      	mov	r3, r1
 8012aec:	cb03      	ldmia	r3!, {r0, r1}
 8012aee:	6010      	str	r0, [r2, #0]
 8012af0:	6051      	str	r1, [r2, #4]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012afc:	4a29      	ldr	r2, [pc, #164]	; (8012ba4 <problem_fetch+0x114bc>)
 8012afe:	6810      	ldr	r0, [r2, #0]
 8012b00:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2206      	movs	r2, #6
 8012b06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,D");
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	33a4      	adds	r3, #164	; 0xa4
 8012b0c:	4a26      	ldr	r2, [pc, #152]	; (8012ba8 <problem_fetch+0x114c0>)
 8012b0e:	461c      	mov	r4, r3
 8012b10:	4613      	mov	r3, r2
 8012b12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b14:	6020      	str	r0, [r4, #0]
 8012b16:	6061      	str	r1, [r4, #4]
 8012b18:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,14,18");
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	4a23      	ldr	r2, [pc, #140]	; (8012bac <problem_fetch+0x114c4>)
 8012b20:	461c      	mov	r4, r3
 8012b22:	4613      	mov	r3, r2
 8012b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b26:	6020      	str	r0, [r4, #0]
 8012b28:	6061      	str	r1, [r4, #4]
 8012b2a:	60a2      	str	r2, [r4, #8]
 8012b2c:	881a      	ldrh	r2, [r3, #0]
 8012b2e:	789b      	ldrb	r3, [r3, #2]
 8012b30:	81a2      	strh	r2, [r4, #12]
 8012b32:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012b3a:	4a1d      	ldr	r2, [pc, #116]	; (8012bb0 <problem_fetch+0x114c8>)
 8012b3c:	461c      	mov	r4, r3
 8012b3e:	4613      	mov	r3, r2
 8012b40:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012b42:	6020      	str	r0, [r4, #0]
 8012b44:	6061      	str	r1, [r4, #4]
 8012b46:	60a2      	str	r2, [r4, #8]
			break;
 8012b48:	f009 bcfe 	b.w	801c548 <problem_fetch+0x1ae60>
 8012b4c:	080299e8 	.word	0x080299e8
 8012b50:	080239f4 	.word	0x080239f4
 8012b54:	080299f8 	.word	0x080299f8
 8012b58:	08023f78 	.word	0x08023f78
 8012b5c:	08023e28 	.word	0x08023e28
 8012b60:	08029a04 	.word	0x08029a04
 8012b64:	0802391c 	.word	0x0802391c
 8012b68:	08029a14 	.word	0x08029a14
 8012b6c:	08029a24 	.word	0x08029a24
 8012b70:	08023ae4 	.word	0x08023ae4
 8012b74:	08029a38 	.word	0x08029a38
 8012b78:	08029a4c 	.word	0x08029a4c
 8012b7c:	08029a64 	.word	0x08029a64
 8012b80:	080272bc 	.word	0x080272bc
 8012b84:	08029a84 	.word	0x08029a84
 8012b88:	0802395c 	.word	0x0802395c
 8012b8c:	08029a94 	.word	0x08029a94
 8012b90:	08029aa4 	.word	0x08029aa4
 8012b94:	08029ab8 	.word	0x08029ab8
 8012b98:	08029ac0 	.word	0x08029ac0
 8012b9c:	08029ad0 	.word	0x08029ad0
 8012ba0:	08029ae4 	.word	0x08029ae4
 8012ba4:	08023a98 	.word	0x08023a98
 8012ba8:	08029af0 	.word	0x08029af0
 8012bac:	08029afc 	.word	0x08029afc
 8012bb0:	08023cf8 	.word	0x08023cf8
		case 509 :
			strcpy(p->name,"MASTERFUL GAP 2.0");
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012bba:	4aa6      	ldr	r2, [pc, #664]	; (8012e54 <problem_fetch+0x1176c>)
 8012bbc:	461d      	mov	r5, r3
 8012bbe:	4614      	mov	r4, r2
 8012bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012bc2:	6028      	str	r0, [r5, #0]
 8012bc4:	6069      	str	r1, [r5, #4]
 8012bc6:	60aa      	str	r2, [r5, #8]
 8012bc8:	60eb      	str	r3, [r5, #12]
 8012bca:	8823      	ldrh	r3, [r4, #0]
 8012bcc:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012bd4:	4aa0      	ldr	r2, [pc, #640]	; (8012e58 <problem_fetch+0x11770>)
 8012bd6:	6810      	ldr	r0, [r2, #0]
 8012bd8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2207      	movs	r2, #7
 8012bde:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,F,E,A,I");
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	33a4      	adds	r3, #164	; 0xa4
 8012be4:	4a9d      	ldr	r2, [pc, #628]	; (8012e5c <problem_fetch+0x11774>)
 8012be6:	461c      	mov	r4, r3
 8012be8:	4613      	mov	r3, r2
 8012bea:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012bec:	6020      	str	r0, [r4, #0]
 8012bee:	6061      	str	r1, [r4, #4]
 8012bf0:	60a2      	str	r2, [r4, #8]
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,16,14,18");
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	3304      	adds	r3, #4
 8012bfa:	4a99      	ldr	r2, [pc, #612]	; (8012e60 <problem_fetch+0x11778>)
 8012bfc:	461d      	mov	r5, r3
 8012bfe:	4614      	mov	r4, r2
 8012c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012c02:	6028      	str	r0, [r5, #0]
 8012c04:	6069      	str	r1, [r5, #4]
 8012c06:	60aa      	str	r2, [r5, #8]
 8012c08:	60eb      	str	r3, [r5, #12]
 8012c0a:	8823      	ldrh	r3, [r4, #0]
 8012c0c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012c14:	4a93      	ldr	r2, [pc, #588]	; (8012e64 <problem_fetch+0x1177c>)
 8012c16:	461c      	mov	r4, r3
 8012c18:	4613      	mov	r3, r2
 8012c1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c1c:	6020      	str	r0, [r4, #0]
 8012c1e:	6061      	str	r1, [r4, #4]
 8012c20:	60a2      	str	r2, [r4, #8]
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	81a3      	strh	r3, [r4, #12]
			break;
 8012c26:	f009 bc8f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 510 :
			strcpy(p->name,"BLACK DOJO MINI");
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c30:	4a8d      	ldr	r2, [pc, #564]	; (8012e68 <problem_fetch+0x11780>)
 8012c32:	461c      	mov	r4, r3
 8012c34:	4615      	mov	r5, r2
 8012c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c38:	6020      	str	r0, [r4, #0]
 8012c3a:	6061      	str	r1, [r4, #4]
 8012c3c:	60a2      	str	r2, [r4, #8]
 8012c3e:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012c46:	4a89      	ldr	r2, [pc, #548]	; (8012e6c <problem_fetch+0x11784>)
 8012c48:	8811      	ldrh	r1, [r2, #0]
 8012c4a:	7892      	ldrb	r2, [r2, #2]
 8012c4c:	8019      	strh	r1, [r3, #0]
 8012c4e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	2206      	movs	r2, #6
 8012c54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,C,E,A");
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	33a4      	adds	r3, #164	; 0xa4
 8012c5a:	4a85      	ldr	r2, [pc, #532]	; (8012e70 <problem_fetch+0x11788>)
 8012c5c:	461c      	mov	r4, r3
 8012c5e:	4613      	mov	r3, r2
 8012c60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c62:	6020      	str	r0, [r4, #0]
 8012c64:	6061      	str	r1, [r4, #4]
 8012c66:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,13,16,18");
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	4a81      	ldr	r2, [pc, #516]	; (8012e74 <problem_fetch+0x1178c>)
 8012c6e:	461c      	mov	r4, r3
 8012c70:	4615      	mov	r5, r2
 8012c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012c74:	6020      	str	r0, [r4, #0]
 8012c76:	6061      	str	r1, [r4, #4]
 8012c78:	60a2      	str	r2, [r4, #8]
 8012c7a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012c82:	4a7d      	ldr	r2, [pc, #500]	; (8012e78 <problem_fetch+0x11790>)
 8012c84:	461c      	mov	r4, r3
 8012c86:	4613      	mov	r3, r2
 8012c88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012c8a:	6020      	str	r0, [r4, #0]
 8012c8c:	6061      	str	r1, [r4, #4]
 8012c8e:	60a2      	str	r2, [r4, #8]
			break;
 8012c90:	f009 bc5a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 511 :
			strcpy(p->name,"ANACONDA MALT LIQUOR");
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012c9a:	4a78      	ldr	r2, [pc, #480]	; (8012e7c <problem_fetch+0x11794>)
 8012c9c:	461d      	mov	r5, r3
 8012c9e:	4614      	mov	r4, r2
 8012ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012ca2:	6028      	str	r0, [r5, #0]
 8012ca4:	6069      	str	r1, [r5, #4]
 8012ca6:	60aa      	str	r2, [r5, #8]
 8012ca8:	60eb      	str	r3, [r5, #12]
 8012caa:	6820      	ldr	r0, [r4, #0]
 8012cac:	6128      	str	r0, [r5, #16]
 8012cae:	7923      	ldrb	r3, [r4, #4]
 8012cb0:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012cb8:	4a71      	ldr	r2, [pc, #452]	; (8012e80 <problem_fetch+0x11798>)
 8012cba:	6810      	ldr	r0, [r2, #0]
 8012cbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2206      	movs	r2, #6
 8012cc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,E,D");
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	33a4      	adds	r3, #164	; 0xa4
 8012cc8:	4a6e      	ldr	r2, [pc, #440]	; (8012e84 <problem_fetch+0x1179c>)
 8012cca:	461c      	mov	r4, r3
 8012ccc:	4613      	mov	r3, r2
 8012cce:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cd0:	6020      	str	r0, [r4, #0]
 8012cd2:	6061      	str	r1, [r4, #4]
 8012cd4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,14,10,16,18");
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	3304      	adds	r3, #4
 8012cda:	4a6b      	ldr	r2, [pc, #428]	; (8012e88 <problem_fetch+0x117a0>)
 8012cdc:	461c      	mov	r4, r3
 8012cde:	4615      	mov	r5, r2
 8012ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012ce2:	6020      	str	r0, [r4, #0]
 8012ce4:	6061      	str	r1, [r4, #4]
 8012ce6:	60a2      	str	r2, [r4, #8]
 8012ce8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012cf0:	4a61      	ldr	r2, [pc, #388]	; (8012e78 <problem_fetch+0x11790>)
 8012cf2:	461c      	mov	r4, r3
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012cf8:	6020      	str	r0, [r4, #0]
 8012cfa:	6061      	str	r1, [r4, #4]
 8012cfc:	60a2      	str	r2, [r4, #8]
			break;
 8012cfe:	f009 bc23 	b.w	801c548 <problem_fetch+0x1ae60>
		case 512 :
			strcpy(p->name,"GREAT DANE ZANE");
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d08:	4a60      	ldr	r2, [pc, #384]	; (8012e8c <problem_fetch+0x117a4>)
 8012d0a:	461c      	mov	r4, r3
 8012d0c:	4615      	mov	r5, r2
 8012d0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d10:	6020      	str	r0, [r4, #0]
 8012d12:	6061      	str	r1, [r4, #4]
 8012d14:	60a2      	str	r2, [r4, #8]
 8012d16:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d1e:	4a5c      	ldr	r2, [pc, #368]	; (8012e90 <problem_fetch+0x117a8>)
 8012d20:	6810      	ldr	r0, [r2, #0]
 8012d22:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2208      	movs	r2, #8
 8012d28:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,F,G,E,B,G,I");
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	33a4      	adds	r3, #164	; 0xa4
 8012d2e:	4a59      	ldr	r2, [pc, #356]	; (8012e94 <problem_fetch+0x117ac>)
 8012d30:	461c      	mov	r4, r3
 8012d32:	4615      	mov	r5, r2
 8012d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d36:	6020      	str	r0, [r4, #0]
 8012d38:	6061      	str	r1, [r4, #4]
 8012d3a:	60a2      	str	r2, [r4, #8]
 8012d3c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,13,15,9,12,4,18");
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	3304      	adds	r3, #4
 8012d42:	4a55      	ldr	r2, [pc, #340]	; (8012e98 <problem_fetch+0x117b0>)
 8012d44:	461d      	mov	r5, r3
 8012d46:	4614      	mov	r4, r2
 8012d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d4a:	6028      	str	r0, [r5, #0]
 8012d4c:	6069      	str	r1, [r5, #4]
 8012d4e:	60aa      	str	r2, [r5, #8]
 8012d50:	60eb      	str	r3, [r5, #12]
 8012d52:	6820      	ldr	r0, [r4, #0]
 8012d54:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012d5c:	4a4f      	ldr	r2, [pc, #316]	; (8012e9c <problem_fetch+0x117b4>)
 8012d5e:	461c      	mov	r4, r3
 8012d60:	4615      	mov	r5, r2
 8012d62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012d64:	6020      	str	r0, [r4, #0]
 8012d66:	6061      	str	r1, [r4, #4]
 8012d68:	60a2      	str	r2, [r4, #8]
 8012d6a:	60e3      	str	r3, [r4, #12]
			break;
 8012d6c:	f009 bbec 	b.w	801c548 <problem_fetch+0x1ae60>
		case 513 :
			strcpy(p->name,"BOULDER AND EMIKO");
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012d76:	4a4a      	ldr	r2, [pc, #296]	; (8012ea0 <problem_fetch+0x117b8>)
 8012d78:	461d      	mov	r5, r3
 8012d7a:	4614      	mov	r4, r2
 8012d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012d7e:	6028      	str	r0, [r5, #0]
 8012d80:	6069      	str	r1, [r5, #4]
 8012d82:	60aa      	str	r2, [r5, #8]
 8012d84:	60eb      	str	r3, [r5, #12]
 8012d86:	8823      	ldrh	r3, [r4, #0]
 8012d88:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012d90:	4a44      	ldr	r2, [pc, #272]	; (8012ea4 <problem_fetch+0x117bc>)
 8012d92:	6810      	ldr	r0, [r2, #0]
 8012d94:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2208      	movs	r2, #8
 8012d9a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,I,E,I");
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	33a4      	adds	r3, #164	; 0xa4
 8012da0:	4a41      	ldr	r2, [pc, #260]	; (8012ea8 <problem_fetch+0x117c0>)
 8012da2:	461c      	mov	r4, r3
 8012da4:	4615      	mov	r5, r2
 8012da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012da8:	6020      	str	r0, [r4, #0]
 8012daa:	6061      	str	r1, [r4, #4]
 8012dac:	60a2      	str	r2, [r4, #8]
 8012dae:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,11,11,14,14,18");
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	3304      	adds	r3, #4
 8012db4:	4a3d      	ldr	r2, [pc, #244]	; (8012eac <problem_fetch+0x117c4>)
 8012db6:	461d      	mov	r5, r3
 8012db8:	4614      	mov	r4, r2
 8012dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012dbc:	6028      	str	r0, [r5, #0]
 8012dbe:	6069      	str	r1, [r5, #4]
 8012dc0:	60aa      	str	r2, [r5, #8]
 8012dc2:	60eb      	str	r3, [r5, #12]
 8012dc4:	6820      	ldr	r0, [r4, #0]
 8012dc6:	6128      	str	r0, [r5, #16]
 8012dc8:	7923      	ldrb	r3, [r4, #4]
 8012dca:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012dd2:	4a32      	ldr	r2, [pc, #200]	; (8012e9c <problem_fetch+0x117b4>)
 8012dd4:	461c      	mov	r4, r3
 8012dd6:	4615      	mov	r5, r2
 8012dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012dda:	6020      	str	r0, [r4, #0]
 8012ddc:	6061      	str	r1, [r4, #4]
 8012dde:	60a2      	str	r2, [r4, #8]
 8012de0:	60e3      	str	r3, [r4, #12]
			break;
 8012de2:	f009 bbb1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 514 :
			strcpy(p->name,"MORNING SHAKE");
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012dec:	4a30      	ldr	r2, [pc, #192]	; (8012eb0 <problem_fetch+0x117c8>)
 8012dee:	461c      	mov	r4, r3
 8012df0:	4613      	mov	r3, r2
 8012df2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012df4:	6020      	str	r0, [r4, #0]
 8012df6:	6061      	str	r1, [r4, #4]
 8012df8:	60a2      	str	r2, [r4, #8]
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012e04:	4a27      	ldr	r2, [pc, #156]	; (8012ea4 <problem_fetch+0x117bc>)
 8012e06:	6810      	ldr	r0, [r2, #0]
 8012e08:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2206      	movs	r2, #6
 8012e0e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,D,D");
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	33a4      	adds	r3, #164	; 0xa4
 8012e14:	4a27      	ldr	r2, [pc, #156]	; (8012eb4 <problem_fetch+0x117cc>)
 8012e16:	461c      	mov	r4, r3
 8012e18:	4613      	mov	r3, r2
 8012e1a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e1c:	6020      	str	r0, [r4, #0]
 8012e1e:	6061      	str	r1, [r4, #4]
 8012e20:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,15,18");
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	3304      	adds	r3, #4
 8012e26:	4a24      	ldr	r2, [pc, #144]	; (8012eb8 <problem_fetch+0x117d0>)
 8012e28:	461c      	mov	r4, r3
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e2e:	6020      	str	r0, [r4, #0]
 8012e30:	6061      	str	r1, [r4, #4]
 8012e32:	60a2      	str	r2, [r4, #8]
 8012e34:	881a      	ldrh	r2, [r3, #0]
 8012e36:	789b      	ldrb	r3, [r3, #2]
 8012e38:	81a2      	strh	r2, [r4, #12]
 8012e3a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012e42:	4a1e      	ldr	r2, [pc, #120]	; (8012ebc <problem_fetch+0x117d4>)
 8012e44:	461c      	mov	r4, r3
 8012e46:	4613      	mov	r3, r2
 8012e48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012e4a:	6020      	str	r0, [r4, #0]
 8012e4c:	6061      	str	r1, [r4, #4]
 8012e4e:	60a2      	str	r2, [r4, #8]
			break;
 8012e50:	f009 bb7a 	b.w	801c548 <problem_fetch+0x1ae60>
 8012e54:	08029b0c 	.word	0x08029b0c
 8012e58:	08023a98 	.word	0x08023a98
 8012e5c:	08029b20 	.word	0x08029b20
 8012e60:	08029b30 	.word	0x08029b30
 8012e64:	080239d4 	.word	0x080239d4
 8012e68:	08029b44 	.word	0x08029b44
 8012e6c:	0802391c 	.word	0x0802391c
 8012e70:	08029b54 	.word	0x08029b54
 8012e74:	08029b60 	.word	0x08029b60
 8012e78:	0802393c 	.word	0x0802393c
 8012e7c:	08029b70 	.word	0x08029b70
 8012e80:	0802395c 	.word	0x0802395c
 8012e84:	08029b88 	.word	0x08029b88
 8012e88:	08029b94 	.word	0x08029b94
 8012e8c:	08029ba4 	.word	0x08029ba4
 8012e90:	08023afc 	.word	0x08023afc
 8012e94:	08029bb4 	.word	0x08029bb4
 8012e98:	08029bc4 	.word	0x08029bc4
 8012e9c:	08023a80 	.word	0x08023a80
 8012ea0:	08029bd8 	.word	0x08029bd8
 8012ea4:	080239f4 	.word	0x080239f4
 8012ea8:	08029bec 	.word	0x08029bec
 8012eac:	08029bfc 	.word	0x08029bfc
 8012eb0:	08029c14 	.word	0x08029c14
 8012eb4:	08029c24 	.word	0x08029c24
 8012eb8:	08029c30 	.word	0x08029c30
 8012ebc:	08023cf8 	.word	0x08023cf8
		case 515 :
			strcpy(p->name,"YAY POCKETS!");
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012ec6:	4aa8      	ldr	r2, [pc, #672]	; (8013168 <problem_fetch+0x11a80>)
 8012ec8:	461c      	mov	r4, r3
 8012eca:	4613      	mov	r3, r2
 8012ecc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012ece:	6020      	str	r0, [r4, #0]
 8012ed0:	6061      	str	r1, [r4, #4]
 8012ed2:	60a2      	str	r2, [r4, #8]
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012ede:	4aa3      	ldr	r2, [pc, #652]	; (801316c <problem_fetch+0x11a84>)
 8012ee0:	8811      	ldrh	r1, [r2, #0]
 8012ee2:	7892      	ldrb	r2, [r2, #2]
 8012ee4:	8019      	strh	r1, [r3, #0]
 8012ee6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2207      	movs	r2, #7
 8012eec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	33a4      	adds	r3, #164	; 0xa4
 8012ef2:	4a9f      	ldr	r2, [pc, #636]	; (8013170 <problem_fetch+0x11a88>)
 8012ef4:	461c      	mov	r4, r3
 8012ef6:	4613      	mov	r3, r2
 8012ef8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012efa:	6020      	str	r0, [r4, #0]
 8012efc:	6061      	str	r1, [r4, #4]
 8012efe:	60a2      	str	r2, [r4, #8]
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,18");
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3304      	adds	r3, #4
 8012f08:	4a9a      	ldr	r2, [pc, #616]	; (8013174 <problem_fetch+0x11a8c>)
 8012f0a:	461d      	mov	r5, r3
 8012f0c:	4614      	mov	r4, r2
 8012f0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012f10:	6028      	str	r0, [r5, #0]
 8012f12:	6069      	str	r1, [r5, #4]
 8012f14:	60aa      	str	r2, [r5, #8]
 8012f16:	60eb      	str	r3, [r5, #12]
 8012f18:	8823      	ldrh	r3, [r4, #0]
 8012f1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012f22:	4a95      	ldr	r2, [pc, #596]	; (8013178 <problem_fetch+0x11a90>)
 8012f24:	461c      	mov	r4, r3
 8012f26:	4613      	mov	r3, r2
 8012f28:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f2a:	6020      	str	r0, [r4, #0]
 8012f2c:	6061      	str	r1, [r4, #4]
 8012f2e:	60a2      	str	r2, [r4, #8]
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	81a3      	strh	r3, [r4, #12]
			break;
 8012f34:	f009 bb08 	b.w	801c548 <problem_fetch+0x1ae60>
		case 516 :
			strcpy(p->name,"SEX LANCHEZ");
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f3e:	4a8f      	ldr	r2, [pc, #572]	; (801317c <problem_fetch+0x11a94>)
 8012f40:	461c      	mov	r4, r3
 8012f42:	4613      	mov	r3, r2
 8012f44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012f46:	6020      	str	r0, [r4, #0]
 8012f48:	6061      	str	r1, [r4, #4]
 8012f4a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012f52:	4a8b      	ldr	r2, [pc, #556]	; (8013180 <problem_fetch+0x11a98>)
 8012f54:	6810      	ldr	r0, [r2, #0]
 8012f56:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	2204      	movs	r2, #4
 8012f5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,D");
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	33a4      	adds	r3, #164	; 0xa4
 8012f62:	4988      	ldr	r1, [pc, #544]	; (8013184 <problem_fetch+0x11a9c>)
 8012f64:	461a      	mov	r2, r3
 8012f66:	460b      	mov	r3, r1
 8012f68:	cb03      	ldmia	r3!, {r0, r1}
 8012f6a:	6010      	str	r0, [r2, #0]
 8012f6c:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,8,14,18");
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	3304      	adds	r3, #4
 8012f72:	4985      	ldr	r1, [pc, #532]	; (8013188 <problem_fetch+0x11aa0>)
 8012f74:	461a      	mov	r2, r3
 8012f76:	460b      	mov	r3, r1
 8012f78:	cb03      	ldmia	r3!, {r0, r1}
 8012f7a:	6010      	str	r0, [r2, #0]
 8012f7c:	6051      	str	r1, [r2, #4]
 8012f7e:	881b      	ldrh	r3, [r3, #0]
 8012f80:	8113      	strh	r3, [r2, #8]
			strcpy(p->startFinish,"s,d,d,e");
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012f88:	4980      	ldr	r1, [pc, #512]	; (801318c <problem_fetch+0x11aa4>)
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	460b      	mov	r3, r1
 8012f8e:	cb03      	ldmia	r3!, {r0, r1}
 8012f90:	6010      	str	r0, [r2, #0]
 8012f92:	6051      	str	r1, [r2, #4]
			break;
 8012f94:	f009 bad8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 517 :
			strcpy(p->name,"BOUNCE EZ");
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8012f9e:	497c      	ldr	r1, [pc, #496]	; (8013190 <problem_fetch+0x11aa8>)
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	460b      	mov	r3, r1
 8012fa4:	cb03      	ldmia	r3!, {r0, r1}
 8012fa6:	6010      	str	r0, [r2, #0]
 8012fa8:	6051      	str	r1, [r2, #4]
 8012faa:	881b      	ldrh	r3, [r3, #0]
 8012fac:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8012fb4:	4a77      	ldr	r2, [pc, #476]	; (8013194 <problem_fetch+0x11aac>)
 8012fb6:	6810      	ldr	r0, [r2, #0]
 8012fb8:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	2205      	movs	r2, #5
 8012fbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,C,D");
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	33a4      	adds	r3, #164	; 0xa4
 8012fc4:	4974      	ldr	r1, [pc, #464]	; (8013198 <problem_fetch+0x11ab0>)
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	460b      	mov	r3, r1
 8012fca:	cb03      	ldmia	r3!, {r0, r1}
 8012fcc:	6010      	str	r0, [r2, #0]
 8012fce:	6051      	str	r1, [r2, #4]
 8012fd0:	881b      	ldrh	r3, [r3, #0]
 8012fd2:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,13,18");
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	3304      	adds	r3, #4
 8012fd8:	4a70      	ldr	r2, [pc, #448]	; (801319c <problem_fetch+0x11ab4>)
 8012fda:	461c      	mov	r4, r3
 8012fdc:	4613      	mov	r3, r2
 8012fde:	cb07      	ldmia	r3!, {r0, r1, r2}
 8012fe0:	6020      	str	r0, [r4, #0]
 8012fe2:	6061      	str	r1, [r4, #4]
 8012fe4:	60a2      	str	r2, [r4, #8]
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8012ff0:	496b      	ldr	r1, [pc, #428]	; (80131a0 <problem_fetch+0x11ab8>)
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	460b      	mov	r3, r1
 8012ff6:	cb03      	ldmia	r3!, {r0, r1}
 8012ff8:	6010      	str	r0, [r2, #0]
 8012ffa:	6051      	str	r1, [r2, #4]
 8012ffc:	881b      	ldrh	r3, [r3, #0]
 8012ffe:	8113      	strh	r3, [r2, #8]
			break;
 8013000:	f009 baa2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 518 :
			strcpy(p->name,"WARM UP A6");
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801300a:	4966      	ldr	r1, [pc, #408]	; (80131a4 <problem_fetch+0x11abc>)
 801300c:	461a      	mov	r2, r3
 801300e:	460b      	mov	r3, r1
 8013010:	cb03      	ldmia	r3!, {r0, r1}
 8013012:	6010      	str	r0, [r2, #0]
 8013014:	6051      	str	r1, [r2, #4]
 8013016:	8819      	ldrh	r1, [r3, #0]
 8013018:	789b      	ldrb	r3, [r3, #2]
 801301a:	8111      	strh	r1, [r2, #8]
 801301c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013024:	4a60      	ldr	r2, [pc, #384]	; (80131a8 <problem_fetch+0x11ac0>)
 8013026:	6810      	ldr	r0, [r2, #0]
 8013028:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2205      	movs	r2, #5
 801302e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,I,I");
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	33a4      	adds	r3, #164	; 0xa4
 8013034:	495d      	ldr	r1, [pc, #372]	; (80131ac <problem_fetch+0x11ac4>)
 8013036:	461a      	mov	r2, r3
 8013038:	460b      	mov	r3, r1
 801303a:	cb03      	ldmia	r3!, {r0, r1}
 801303c:	6010      	str	r0, [r2, #0]
 801303e:	6051      	str	r1, [r2, #4]
 8013040:	881b      	ldrh	r3, [r3, #0]
 8013042:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,7,10,14,18");
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	3304      	adds	r3, #4
 8013048:	4a59      	ldr	r2, [pc, #356]	; (80131b0 <problem_fetch+0x11ac8>)
 801304a:	461c      	mov	r4, r3
 801304c:	4613      	mov	r3, r2
 801304e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013050:	6020      	str	r0, [r4, #0]
 8013052:	6061      	str	r1, [r4, #4]
 8013054:	60a2      	str	r2, [r4, #8]
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013060:	4954      	ldr	r1, [pc, #336]	; (80131b4 <problem_fetch+0x11acc>)
 8013062:	461a      	mov	r2, r3
 8013064:	460b      	mov	r3, r1
 8013066:	cb03      	ldmia	r3!, {r0, r1}
 8013068:	6010      	str	r0, [r2, #0]
 801306a:	6051      	str	r1, [r2, #4]
 801306c:	881b      	ldrh	r3, [r3, #0]
 801306e:	8113      	strh	r3, [r2, #8]
			break;
 8013070:	f009 ba6a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 519 :
			strcpy(p->name,"L'UOMO BISATTA");
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801307a:	4a4f      	ldr	r2, [pc, #316]	; (80131b8 <problem_fetch+0x11ad0>)
 801307c:	461c      	mov	r4, r3
 801307e:	4613      	mov	r3, r2
 8013080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013082:	6020      	str	r0, [r4, #0]
 8013084:	6061      	str	r1, [r4, #4]
 8013086:	60a2      	str	r2, [r4, #8]
 8013088:	881a      	ldrh	r2, [r3, #0]
 801308a:	789b      	ldrb	r3, [r3, #2]
 801308c:	81a2      	strh	r2, [r4, #12]
 801308e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B");
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013096:	4a49      	ldr	r2, [pc, #292]	; (80131bc <problem_fetch+0x11ad4>)
 8013098:	8811      	ldrh	r1, [r2, #0]
 801309a:	7892      	ldrb	r2, [r2, #2]
 801309c:	8019      	strh	r1, [r3, #0]
 801309e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2207      	movs	r2, #7
 80130a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,H,C,H,D");
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	33a4      	adds	r3, #164	; 0xa4
 80130aa:	4a45      	ldr	r2, [pc, #276]	; (80131c0 <problem_fetch+0x11ad8>)
 80130ac:	461c      	mov	r4, r3
 80130ae:	4613      	mov	r3, r2
 80130b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130b2:	6020      	str	r0, [r4, #0]
 80130b4:	6061      	str	r1, [r4, #4]
 80130b6:	60a2      	str	r2, [r4, #8]
 80130b8:	881b      	ldrh	r3, [r3, #0]
 80130ba:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,8,16,18");
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	3304      	adds	r3, #4
 80130c0:	4a40      	ldr	r2, [pc, #256]	; (80131c4 <problem_fetch+0x11adc>)
 80130c2:	461d      	mov	r5, r3
 80130c4:	4614      	mov	r4, r2
 80130c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80130c8:	6028      	str	r0, [r5, #0]
 80130ca:	6069      	str	r1, [r5, #4]
 80130cc:	60aa      	str	r2, [r5, #8]
 80130ce:	60eb      	str	r3, [r5, #12]
 80130d0:	7823      	ldrb	r3, [r4, #0]
 80130d2:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80130da:	4a27      	ldr	r2, [pc, #156]	; (8013178 <problem_fetch+0x11a90>)
 80130dc:	461c      	mov	r4, r3
 80130de:	4613      	mov	r3, r2
 80130e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130e2:	6020      	str	r0, [r4, #0]
 80130e4:	6061      	str	r1, [r4, #4]
 80130e6:	60a2      	str	r2, [r4, #8]
 80130e8:	881b      	ldrh	r3, [r3, #0]
 80130ea:	81a3      	strh	r3, [r4, #12]
			break;
 80130ec:	f009 ba2c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 520 :
			strcpy(p->name,"PONTUSBADET 2");
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80130f6:	4a34      	ldr	r2, [pc, #208]	; (80131c8 <problem_fetch+0x11ae0>)
 80130f8:	461c      	mov	r4, r3
 80130fa:	4613      	mov	r3, r2
 80130fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80130fe:	6020      	str	r0, [r4, #0]
 8013100:	6061      	str	r1, [r4, #4]
 8013102:	60a2      	str	r2, [r4, #8]
 8013104:	881b      	ldrh	r3, [r3, #0]
 8013106:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801310e:	4a17      	ldr	r2, [pc, #92]	; (801316c <problem_fetch+0x11a84>)
 8013110:	8811      	ldrh	r1, [r2, #0]
 8013112:	7892      	ldrb	r2, [r2, #2]
 8013114:	8019      	strh	r1, [r3, #0]
 8013116:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2208      	movs	r2, #8
 801311c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,C,I,G,G,D");
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	33a4      	adds	r3, #164	; 0xa4
 8013122:	4a2a      	ldr	r2, [pc, #168]	; (80131cc <problem_fetch+0x11ae4>)
 8013124:	461c      	mov	r4, r3
 8013126:	4615      	mov	r5, r2
 8013128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801312a:	6020      	str	r0, [r4, #0]
 801312c:	6061      	str	r1, [r4, #4]
 801312e:	60a2      	str	r2, [r4, #8]
 8013130:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,12,13,14,15,17,18");
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	3304      	adds	r3, #4
 8013136:	4a26      	ldr	r2, [pc, #152]	; (80131d0 <problem_fetch+0x11ae8>)
 8013138:	461d      	mov	r5, r3
 801313a:	4614      	mov	r4, r2
 801313c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801313e:	6028      	str	r0, [r5, #0]
 8013140:	6069      	str	r1, [r5, #4]
 8013142:	60aa      	str	r2, [r5, #8]
 8013144:	60eb      	str	r3, [r5, #12]
 8013146:	6820      	ldr	r0, [r4, #0]
 8013148:	6128      	str	r0, [r5, #16]
 801314a:	88a3      	ldrh	r3, [r4, #4]
 801314c:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013154:	4a1f      	ldr	r2, [pc, #124]	; (80131d4 <problem_fetch+0x11aec>)
 8013156:	461c      	mov	r4, r3
 8013158:	4615      	mov	r5, r2
 801315a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801315c:	6020      	str	r0, [r4, #0]
 801315e:	6061      	str	r1, [r4, #4]
 8013160:	60a2      	str	r2, [r4, #8]
 8013162:	60e3      	str	r3, [r4, #12]
			break;
 8013164:	f009 b9f0 	b.w	801c548 <problem_fetch+0x1ae60>
 8013168:	08029c40 	.word	0x08029c40
 801316c:	08023a28 	.word	0x08023a28
 8013170:	08029c50 	.word	0x08029c50
 8013174:	08029c60 	.word	0x08029c60
 8013178:	080239d4 	.word	0x080239d4
 801317c:	08029c74 	.word	0x08029c74
 8013180:	08023f68 	.word	0x08023f68
 8013184:	08029c80 	.word	0x08029c80
 8013188:	08029c88 	.word	0x08029c88
 801318c:	08023ab0 	.word	0x08023ab0
 8013190:	08029c94 	.word	0x08029c94
 8013194:	080239f4 	.word	0x080239f4
 8013198:	08029ca0 	.word	0x08029ca0
 801319c:	08024238 	.word	0x08024238
 80131a0:	0802403c 	.word	0x0802403c
 80131a4:	08029cac 	.word	0x08029cac
 80131a8:	0802395c 	.word	0x0802395c
 80131ac:	08029cb8 	.word	0x08029cb8
 80131b0:	08029cc4 	.word	0x08029cc4
 80131b4:	08023e28 	.word	0x08023e28
 80131b8:	08029cd4 	.word	0x08029cd4
 80131bc:	08024054 	.word	0x08024054
 80131c0:	08029ce4 	.word	0x08029ce4
 80131c4:	08029cf4 	.word	0x08029cf4
 80131c8:	08029d08 	.word	0x08029d08
 80131cc:	08029d18 	.word	0x08029d18
 80131d0:	08029d28 	.word	0x08029d28
 80131d4:	08023b6c 	.word	0x08023b6c
		case 521 :
			strcpy(p->name,"ROSA PARKS");
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80131de:	49c3      	ldr	r1, [pc, #780]	; (80134ec <problem_fetch+0x11e04>)
 80131e0:	461a      	mov	r2, r3
 80131e2:	460b      	mov	r3, r1
 80131e4:	cb03      	ldmia	r3!, {r0, r1}
 80131e6:	6010      	str	r0, [r2, #0]
 80131e8:	6051      	str	r1, [r2, #4]
 80131ea:	8819      	ldrh	r1, [r3, #0]
 80131ec:	789b      	ldrb	r3, [r3, #2]
 80131ee:	8111      	strh	r1, [r2, #8]
 80131f0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80131f8:	4abd      	ldr	r2, [pc, #756]	; (80134f0 <problem_fetch+0x11e08>)
 80131fa:	8811      	ldrh	r1, [r2, #0]
 80131fc:	7892      	ldrb	r2, [r2, #2]
 80131fe:	8019      	strh	r1, [r3, #0]
 8013200:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2207      	movs	r2, #7
 8013206:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,D,C,H,G,A");
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	33a4      	adds	r3, #164	; 0xa4
 801320c:	4ab9      	ldr	r2, [pc, #740]	; (80134f4 <problem_fetch+0x11e0c>)
 801320e:	461c      	mov	r4, r3
 8013210:	4613      	mov	r3, r2
 8013212:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013214:	6020      	str	r0, [r4, #0]
 8013216:	6061      	str	r1, [r4, #4]
 8013218:	60a2      	str	r2, [r4, #8]
 801321a:	881b      	ldrh	r3, [r3, #0]
 801321c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,15,13,10,9,18");
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	3304      	adds	r3, #4
 8013222:	4ab5      	ldr	r2, [pc, #724]	; (80134f8 <problem_fetch+0x11e10>)
 8013224:	461d      	mov	r5, r3
 8013226:	4614      	mov	r4, r2
 8013228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801322a:	6028      	str	r0, [r5, #0]
 801322c:	6069      	str	r1, [r5, #4]
 801322e:	60aa      	str	r2, [r5, #8]
 8013230:	60eb      	str	r3, [r5, #12]
 8013232:	8823      	ldrh	r3, [r4, #0]
 8013234:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801323c:	4aaf      	ldr	r2, [pc, #700]	; (80134fc <problem_fetch+0x11e14>)
 801323e:	461c      	mov	r4, r3
 8013240:	4613      	mov	r3, r2
 8013242:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013244:	6020      	str	r0, [r4, #0]
 8013246:	6061      	str	r1, [r4, #4]
 8013248:	60a2      	str	r2, [r4, #8]
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	81a3      	strh	r3, [r4, #12]
			break;
 801324e:	f009 b97b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 522 :
			strcpy(p->name,"PONTUSBADET");
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013258:	4aa9      	ldr	r2, [pc, #676]	; (8013500 <problem_fetch+0x11e18>)
 801325a:	461c      	mov	r4, r3
 801325c:	4613      	mov	r3, r2
 801325e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013260:	6020      	str	r0, [r4, #0]
 8013262:	6061      	str	r1, [r4, #4]
 8013264:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801326c:	4aa5      	ldr	r2, [pc, #660]	; (8013504 <problem_fetch+0x11e1c>)
 801326e:	8811      	ldrh	r1, [r2, #0]
 8013270:	7892      	ldrb	r2, [r2, #2]
 8013272:	8019      	strh	r1, [r3, #0]
 8013274:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2207      	movs	r2, #7
 801327a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,J,H,I");
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	33a4      	adds	r3, #164	; 0xa4
 8013280:	4aa1      	ldr	r2, [pc, #644]	; (8013508 <problem_fetch+0x11e20>)
 8013282:	461c      	mov	r4, r3
 8013284:	4613      	mov	r3, r2
 8013286:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013288:	6020      	str	r0, [r4, #0]
 801328a:	6061      	str	r1, [r4, #4]
 801328c:	60a2      	str	r2, [r4, #8]
 801328e:	881b      	ldrh	r3, [r3, #0]
 8013290:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,12,16,18");
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	3304      	adds	r3, #4
 8013296:	4a9d      	ldr	r2, [pc, #628]	; (801350c <problem_fetch+0x11e24>)
 8013298:	461d      	mov	r5, r3
 801329a:	4614      	mov	r4, r2
 801329c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801329e:	6028      	str	r0, [r5, #0]
 80132a0:	6069      	str	r1, [r5, #4]
 80132a2:	60aa      	str	r2, [r5, #8]
 80132a4:	60eb      	str	r3, [r5, #12]
 80132a6:	8823      	ldrh	r3, [r4, #0]
 80132a8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80132b0:	4a92      	ldr	r2, [pc, #584]	; (80134fc <problem_fetch+0x11e14>)
 80132b2:	461c      	mov	r4, r3
 80132b4:	4613      	mov	r3, r2
 80132b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80132b8:	6020      	str	r0, [r4, #0]
 80132ba:	6061      	str	r1, [r4, #4]
 80132bc:	60a2      	str	r2, [r4, #8]
 80132be:	881b      	ldrh	r3, [r3, #0]
 80132c0:	81a3      	strh	r3, [r4, #12]
			break;
 80132c2:	f009 b941 	b.w	801c548 <problem_fetch+0x1ae60>
		case 523 :
			strcpy(p->name,"FORSØK 25");
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80132cc:	4990      	ldr	r1, [pc, #576]	; (8013510 <problem_fetch+0x11e28>)
 80132ce:	461a      	mov	r2, r3
 80132d0:	460b      	mov	r3, r1
 80132d2:	cb03      	ldmia	r3!, {r0, r1}
 80132d4:	6010      	str	r0, [r2, #0]
 80132d6:	6051      	str	r1, [r2, #4]
 80132d8:	8819      	ldrh	r1, [r3, #0]
 80132da:	789b      	ldrb	r3, [r3, #2]
 80132dc:	8111      	strh	r1, [r2, #8]
 80132de:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80132e6:	4a8b      	ldr	r2, [pc, #556]	; (8013514 <problem_fetch+0x11e2c>)
 80132e8:	6810      	ldr	r0, [r2, #0]
 80132ea:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2208      	movs	r2, #8
 80132f0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,E,H,J");
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	33a4      	adds	r3, #164	; 0xa4
 80132f6:	4a88      	ldr	r2, [pc, #544]	; (8013518 <problem_fetch+0x11e30>)
 80132f8:	461c      	mov	r4, r3
 80132fa:	4615      	mov	r5, r2
 80132fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80132fe:	6020      	str	r0, [r4, #0]
 8013300:	6061      	str	r1, [r4, #4]
 8013302:	60a2      	str	r2, [r4, #8]
 8013304:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"14,5,18,6,8,12,8,5");
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	3304      	adds	r3, #4
 801330a:	4a84      	ldr	r2, [pc, #528]	; (801351c <problem_fetch+0x11e34>)
 801330c:	461d      	mov	r5, r3
 801330e:	4614      	mov	r4, r2
 8013310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013312:	6028      	str	r0, [r5, #0]
 8013314:	6069      	str	r1, [r5, #4]
 8013316:	60aa      	str	r2, [r5, #8]
 8013318:	60eb      	str	r3, [r5, #12]
 801331a:	8823      	ldrh	r3, [r4, #0]
 801331c:	78a2      	ldrb	r2, [r4, #2]
 801331e:	822b      	strh	r3, [r5, #16]
 8013320:	4613      	mov	r3, r2
 8013322:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"d,s,e,s,d,d,d,d");
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801332a:	4a7d      	ldr	r2, [pc, #500]	; (8013520 <problem_fetch+0x11e38>)
 801332c:	461c      	mov	r4, r3
 801332e:	4615      	mov	r5, r2
 8013330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013332:	6020      	str	r0, [r4, #0]
 8013334:	6061      	str	r1, [r4, #4]
 8013336:	60a2      	str	r2, [r4, #8]
 8013338:	60e3      	str	r3, [r4, #12]
			break;
 801333a:	f009 b905 	b.w	801c548 <problem_fetch+0x1ae60>
		case 524 :
			strcpy(p->name,"S1");
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013344:	4a77      	ldr	r2, [pc, #476]	; (8013524 <problem_fetch+0x11e3c>)
 8013346:	8811      	ldrh	r1, [r2, #0]
 8013348:	7892      	ldrb	r2, [r2, #2]
 801334a:	8019      	strh	r1, [r3, #0]
 801334c:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"7B");
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013354:	4a74      	ldr	r2, [pc, #464]	; (8013528 <problem_fetch+0x11e40>)
 8013356:	8811      	ldrh	r1, [r2, #0]
 8013358:	7892      	ldrb	r2, [r2, #2]
 801335a:	8019      	strh	r1, [r3, #0]
 801335c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2207      	movs	r2, #7
 8013362:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,D,D,B,A");
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	33a4      	adds	r3, #164	; 0xa4
 8013368:	4a70      	ldr	r2, [pc, #448]	; (801352c <problem_fetch+0x11e44>)
 801336a:	461c      	mov	r4, r3
 801336c:	4613      	mov	r3, r2
 801336e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013370:	6020      	str	r0, [r4, #0]
 8013372:	6061      	str	r1, [r4, #4]
 8013374:	60a2      	str	r2, [r4, #8]
 8013376:	881b      	ldrh	r3, [r3, #0]
 8013378:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,15,6,18");
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	3304      	adds	r3, #4
 801337e:	4a6c      	ldr	r2, [pc, #432]	; (8013530 <problem_fetch+0x11e48>)
 8013380:	461d      	mov	r5, r3
 8013382:	4614      	mov	r4, r2
 8013384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013386:	6028      	str	r0, [r5, #0]
 8013388:	6069      	str	r1, [r5, #4]
 801338a:	60aa      	str	r2, [r5, #8]
 801338c:	60eb      	str	r3, [r5, #12]
 801338e:	7823      	ldrb	r3, [r4, #0]
 8013390:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013398:	4a66      	ldr	r2, [pc, #408]	; (8013534 <problem_fetch+0x11e4c>)
 801339a:	461c      	mov	r4, r3
 801339c:	4613      	mov	r3, r2
 801339e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80133a0:	6020      	str	r0, [r4, #0]
 80133a2:	6061      	str	r1, [r4, #4]
 80133a4:	60a2      	str	r2, [r4, #8]
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	81a3      	strh	r3, [r4, #12]
			break;
 80133aa:	f009 b8cd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 525 :
			strcpy(p->name,"YE BOI");
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80133b4:	4a60      	ldr	r2, [pc, #384]	; (8013538 <problem_fetch+0x11e50>)
 80133b6:	6810      	ldr	r0, [r2, #0]
 80133b8:	6018      	str	r0, [r3, #0]
 80133ba:	8891      	ldrh	r1, [r2, #4]
 80133bc:	7992      	ldrb	r2, [r2, #6]
 80133be:	8099      	strh	r1, [r3, #4]
 80133c0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80133c8:	4a5c      	ldr	r2, [pc, #368]	; (801353c <problem_fetch+0x11e54>)
 80133ca:	6810      	ldr	r0, [r2, #0]
 80133cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2204      	movs	r2, #4
 80133d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,D");
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	33a4      	adds	r3, #164	; 0xa4
 80133d8:	4959      	ldr	r1, [pc, #356]	; (8013540 <problem_fetch+0x11e58>)
 80133da:	461a      	mov	r2, r3
 80133dc:	460b      	mov	r3, r1
 80133de:	cb03      	ldmia	r3!, {r0, r1}
 80133e0:	6010      	str	r0, [r2, #0]
 80133e2:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,13,18");
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	3304      	adds	r3, #4
 80133e8:	4956      	ldr	r1, [pc, #344]	; (8013544 <problem_fetch+0x11e5c>)
 80133ea:	461a      	mov	r2, r3
 80133ec:	460b      	mov	r3, r1
 80133ee:	cb03      	ldmia	r3!, {r0, r1}
 80133f0:	6010      	str	r0, [r2, #0]
 80133f2:	6051      	str	r1, [r2, #4]
 80133f4:	8819      	ldrh	r1, [r3, #0]
 80133f6:	789b      	ldrb	r3, [r3, #2]
 80133f8:	8111      	strh	r1, [r2, #8]
 80133fa:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013402:	4951      	ldr	r1, [pc, #324]	; (8013548 <problem_fetch+0x11e60>)
 8013404:	461a      	mov	r2, r3
 8013406:	460b      	mov	r3, r1
 8013408:	cb03      	ldmia	r3!, {r0, r1}
 801340a:	6010      	str	r0, [r2, #0]
 801340c:	6051      	str	r1, [r2, #4]
			break;
 801340e:	f009 b89b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 526 :
			strcpy(p->name,"PLAYING TINDER");
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013418:	4a4c      	ldr	r2, [pc, #304]	; (801354c <problem_fetch+0x11e64>)
 801341a:	461c      	mov	r4, r3
 801341c:	4613      	mov	r3, r2
 801341e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013420:	6020      	str	r0, [r4, #0]
 8013422:	6061      	str	r1, [r4, #4]
 8013424:	60a2      	str	r2, [r4, #8]
 8013426:	881a      	ldrh	r2, [r3, #0]
 8013428:	789b      	ldrb	r3, [r3, #2]
 801342a:	81a2      	strh	r2, [r4, #12]
 801342c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013434:	4a46      	ldr	r2, [pc, #280]	; (8013550 <problem_fetch+0x11e68>)
 8013436:	6810      	ldr	r0, [r2, #0]
 8013438:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2205      	movs	r2, #5
 801343e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,B,A");
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	33a4      	adds	r3, #164	; 0xa4
 8013444:	4943      	ldr	r1, [pc, #268]	; (8013554 <problem_fetch+0x11e6c>)
 8013446:	461a      	mov	r2, r3
 8013448:	460b      	mov	r3, r1
 801344a:	cb03      	ldmia	r3!, {r0, r1}
 801344c:	6010      	str	r0, [r2, #0]
 801344e:	6051      	str	r1, [r2, #4]
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,10,15,18");
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	3304      	adds	r3, #4
 8013458:	4a3f      	ldr	r2, [pc, #252]	; (8013558 <problem_fetch+0x11e70>)
 801345a:	461c      	mov	r4, r3
 801345c:	4613      	mov	r3, r2
 801345e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013460:	6020      	str	r0, [r4, #0]
 8013462:	6061      	str	r1, [r4, #4]
 8013464:	60a2      	str	r2, [r4, #8]
 8013466:	781b      	ldrb	r3, [r3, #0]
 8013468:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013470:	493a      	ldr	r1, [pc, #232]	; (801355c <problem_fetch+0x11e74>)
 8013472:	461a      	mov	r2, r3
 8013474:	460b      	mov	r3, r1
 8013476:	cb03      	ldmia	r3!, {r0, r1}
 8013478:	6010      	str	r0, [r2, #0]
 801347a:	6051      	str	r1, [r2, #4]
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	8113      	strh	r3, [r2, #8]
			break;
 8013480:	f009 b862 	b.w	801c548 <problem_fetch+0x1ae60>
		case 527 :
			strcpy(p->name,"EXIT");
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801348a:	4a35      	ldr	r2, [pc, #212]	; (8013560 <problem_fetch+0x11e78>)
 801348c:	6810      	ldr	r0, [r2, #0]
 801348e:	6018      	str	r0, [r3, #0]
 8013490:	7912      	ldrb	r2, [r2, #4]
 8013492:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801349a:	4a32      	ldr	r2, [pc, #200]	; (8013564 <problem_fetch+0x11e7c>)
 801349c:	6810      	ldr	r0, [r2, #0]
 801349e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	2205      	movs	r2, #5
 80134a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,E,A,A");
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	33a4      	adds	r3, #164	; 0xa4
 80134aa:	492f      	ldr	r1, [pc, #188]	; (8013568 <problem_fetch+0x11e80>)
 80134ac:	461a      	mov	r2, r3
 80134ae:	460b      	mov	r3, r1
 80134b0:	cb03      	ldmia	r3!, {r0, r1}
 80134b2:	6010      	str	r0, [r2, #0]
 80134b4:	6051      	str	r1, [r2, #4]
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,12,14,18");
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	3304      	adds	r3, #4
 80134be:	4a2b      	ldr	r2, [pc, #172]	; (801356c <problem_fetch+0x11e84>)
 80134c0:	461c      	mov	r4, r3
 80134c2:	4613      	mov	r3, r2
 80134c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80134c6:	6020      	str	r0, [r4, #0]
 80134c8:	6061      	str	r1, [r4, #4]
 80134ca:	60a2      	str	r2, [r4, #8]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80134d6:	4921      	ldr	r1, [pc, #132]	; (801355c <problem_fetch+0x11e74>)
 80134d8:	461a      	mov	r2, r3
 80134da:	460b      	mov	r3, r1
 80134dc:	cb03      	ldmia	r3!, {r0, r1}
 80134de:	6010      	str	r0, [r2, #0]
 80134e0:	6051      	str	r1, [r2, #4]
 80134e2:	881b      	ldrh	r3, [r3, #0]
 80134e4:	8113      	strh	r3, [r2, #8]
			break;
 80134e6:	f009 b82f 	b.w	801c548 <problem_fetch+0x1ae60>
 80134ea:	bf00      	nop
 80134ec:	08029d40 	.word	0x08029d40
 80134f0:	08023a28 	.word	0x08023a28
 80134f4:	08029d4c 	.word	0x08029d4c
 80134f8:	08029d5c 	.word	0x08029d5c
 80134fc:	08023ae4 	.word	0x08023ae4
 8013500:	08029d70 	.word	0x08029d70
 8013504:	0802391c 	.word	0x0802391c
 8013508:	08029d7c 	.word	0x08029d7c
 801350c:	08029d8c 	.word	0x08029d8c
 8013510:	08029da0 	.word	0x08029da0
 8013514:	0802395c 	.word	0x0802395c
 8013518:	08029dac 	.word	0x08029dac
 801351c:	08029dbc 	.word	0x08029dbc
 8013520:	08029dd0 	.word	0x08029dd0
 8013524:	08029de0 	.word	0x08029de0
 8013528:	08024054 	.word	0x08024054
 801352c:	08029de4 	.word	0x08029de4
 8013530:	08029df4 	.word	0x08029df4
 8013534:	080239d4 	.word	0x080239d4
 8013538:	08029e08 	.word	0x08029e08
 801353c:	080239f4 	.word	0x080239f4
 8013540:	080297fc 	.word	0x080297fc
 8013544:	08026e38 	.word	0x08026e38
 8013548:	08023ab0 	.word	0x08023ab0
 801354c:	08029e10 	.word	0x08029e10
 8013550:	08023a98 	.word	0x08023a98
 8013554:	08029e20 	.word	0x08029e20
 8013558:	08029e2c 	.word	0x08029e2c
 801355c:	08023e28 	.word	0x08023e28
 8013560:	08029e3c 	.word	0x08029e3c
 8013564:	08023afc 	.word	0x08023afc
 8013568:	08029e44 	.word	0x08029e44
 801356c:	08027954 	.word	0x08027954
		case 528 :
			strcpy(p->name,"AKAHN N LIL CEASY");
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013576:	4ac1      	ldr	r2, [pc, #772]	; (801387c <problem_fetch+0x12194>)
 8013578:	461d      	mov	r5, r3
 801357a:	4614      	mov	r4, r2
 801357c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801357e:	6028      	str	r0, [r5, #0]
 8013580:	6069      	str	r1, [r5, #4]
 8013582:	60aa      	str	r2, [r5, #8]
 8013584:	60eb      	str	r3, [r5, #12]
 8013586:	8823      	ldrh	r3, [r4, #0]
 8013588:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013590:	4abb      	ldr	r2, [pc, #748]	; (8013880 <problem_fetch+0x12198>)
 8013592:	6810      	ldr	r0, [r2, #0]
 8013594:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2209      	movs	r2, #9
 801359a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,E,J,I,E,D");
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	33a4      	adds	r3, #164	; 0xa4
 80135a0:	4ab8      	ldr	r2, [pc, #736]	; (8013884 <problem_fetch+0x1219c>)
 80135a2:	461d      	mov	r5, r3
 80135a4:	4614      	mov	r4, r2
 80135a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135a8:	6028      	str	r0, [r5, #0]
 80135aa:	6069      	str	r1, [r5, #4]
 80135ac:	60aa      	str	r2, [r5, #8]
 80135ae:	60eb      	str	r3, [r5, #12]
 80135b0:	8823      	ldrh	r3, [r4, #0]
 80135b2:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,8,8,11,12,7,14,16,18");
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	3304      	adds	r3, #4
 80135b8:	4ab3      	ldr	r2, [pc, #716]	; (8013888 <problem_fetch+0x121a0>)
 80135ba:	461c      	mov	r4, r3
 80135bc:	4615      	mov	r5, r2
 80135be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80135c0:	6020      	str	r0, [r4, #0]
 80135c2:	6061      	str	r1, [r4, #4]
 80135c4:	60a2      	str	r2, [r4, #8]
 80135c6:	60e3      	str	r3, [r4, #12]
 80135c8:	6828      	ldr	r0, [r5, #0]
 80135ca:	6120      	str	r0, [r4, #16]
 80135cc:	88ab      	ldrh	r3, [r5, #4]
 80135ce:	79aa      	ldrb	r2, [r5, #6]
 80135d0:	82a3      	strh	r3, [r4, #20]
 80135d2:	4613      	mov	r3, r2
 80135d4:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80135dc:	4aab      	ldr	r2, [pc, #684]	; (801388c <problem_fetch+0x121a4>)
 80135de:	461d      	mov	r5, r3
 80135e0:	4614      	mov	r4, r2
 80135e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135e4:	6028      	str	r0, [r5, #0]
 80135e6:	6069      	str	r1, [r5, #4]
 80135e8:	60aa      	str	r2, [r5, #8]
 80135ea:	60eb      	str	r3, [r5, #12]
 80135ec:	8823      	ldrh	r3, [r4, #0]
 80135ee:	822b      	strh	r3, [r5, #16]
			break;
 80135f0:	f008 bfaa 	b.w	801c548 <problem_fetch+0x1ae60>
		case 529 :
			strcpy(p->name,"TECH");
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80135fa:	4aa5      	ldr	r2, [pc, #660]	; (8013890 <problem_fetch+0x121a8>)
 80135fc:	6810      	ldr	r0, [r2, #0]
 80135fe:	6018      	str	r0, [r3, #0]
 8013600:	7912      	ldrb	r2, [r2, #4]
 8013602:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801360a:	4aa2      	ldr	r2, [pc, #648]	; (8013894 <problem_fetch+0x121ac>)
 801360c:	6810      	ldr	r0, [r2, #0]
 801360e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2207      	movs	r2, #7
 8013614:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,H,G,I");
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	33a4      	adds	r3, #164	; 0xa4
 801361a:	4a9f      	ldr	r2, [pc, #636]	; (8013898 <problem_fetch+0x121b0>)
 801361c:	461c      	mov	r4, r3
 801361e:	4613      	mov	r3, r2
 8013620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013622:	6020      	str	r0, [r4, #0]
 8013624:	6061      	str	r1, [r4, #4]
 8013626:	60a2      	str	r2, [r4, #8]
 8013628:	881b      	ldrh	r3, [r3, #0]
 801362a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,12,15,18");
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	3304      	adds	r3, #4
 8013630:	4a9a      	ldr	r2, [pc, #616]	; (801389c <problem_fetch+0x121b4>)
 8013632:	461d      	mov	r5, r3
 8013634:	4614      	mov	r4, r2
 8013636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013638:	6028      	str	r0, [r5, #0]
 801363a:	6069      	str	r1, [r5, #4]
 801363c:	60aa      	str	r2, [r5, #8]
 801363e:	60eb      	str	r3, [r5, #12]
 8013640:	8823      	ldrh	r3, [r4, #0]
 8013642:	78a2      	ldrb	r2, [r4, #2]
 8013644:	822b      	strh	r3, [r5, #16]
 8013646:	4613      	mov	r3, r2
 8013648:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013650:	4a93      	ldr	r2, [pc, #588]	; (80138a0 <problem_fetch+0x121b8>)
 8013652:	461c      	mov	r4, r3
 8013654:	4613      	mov	r3, r2
 8013656:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013658:	6020      	str	r0, [r4, #0]
 801365a:	6061      	str	r1, [r4, #4]
 801365c:	60a2      	str	r2, [r4, #8]
 801365e:	881b      	ldrh	r3, [r3, #0]
 8013660:	81a3      	strh	r3, [r4, #12]
			break;
 8013662:	f008 bf71 	b.w	801c548 <problem_fetch+0x1ae60>
		case 530 :
			strcpy(p->name,"FIRST PROB.");
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801366c:	4a8d      	ldr	r2, [pc, #564]	; (80138a4 <problem_fetch+0x121bc>)
 801366e:	461c      	mov	r4, r3
 8013670:	4613      	mov	r3, r2
 8013672:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013674:	6020      	str	r0, [r4, #0]
 8013676:	6061      	str	r1, [r4, #4]
 8013678:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013680:	4a7f      	ldr	r2, [pc, #508]	; (8013880 <problem_fetch+0x12198>)
 8013682:	6810      	ldr	r0, [r2, #0]
 8013684:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	220d      	movs	r2, #13
 801368a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,E,G,G,D,C,A,D,C,E,A");
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	33a4      	adds	r3, #164	; 0xa4
 8013690:	4a85      	ldr	r2, [pc, #532]	; (80138a8 <problem_fetch+0x121c0>)
 8013692:	461d      	mov	r5, r3
 8013694:	4614      	mov	r4, r2
 8013696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013698:	6028      	str	r0, [r5, #0]
 801369a:	6069      	str	r1, [r5, #4]
 801369c:	60aa      	str	r2, [r5, #8]
 801369e:	60eb      	str	r3, [r5, #12]
 80136a0:	cc03      	ldmia	r4!, {r0, r1}
 80136a2:	6128      	str	r0, [r5, #16]
 80136a4:	6169      	str	r1, [r5, #20]
 80136a6:	8823      	ldrh	r3, [r4, #0]
 80136a8:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,8,9,9,10,11,16,14,15,13,12,18");
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	3304      	adds	r3, #4
 80136ae:	4a7f      	ldr	r2, [pc, #508]	; (80138ac <problem_fetch+0x121c4>)
 80136b0:	4614      	mov	r4, r2
 80136b2:	469c      	mov	ip, r3
 80136b4:	f104 0e20 	add.w	lr, r4, #32
 80136b8:	4665      	mov	r5, ip
 80136ba:	4626      	mov	r6, r4
 80136bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80136be:	6028      	str	r0, [r5, #0]
 80136c0:	6069      	str	r1, [r5, #4]
 80136c2:	60aa      	str	r2, [r5, #8]
 80136c4:	60eb      	str	r3, [r5, #12]
 80136c6:	3410      	adds	r4, #16
 80136c8:	f10c 0c10 	add.w	ip, ip, #16
 80136cc:	4574      	cmp	r4, lr
 80136ce:	d1f3      	bne.n	80136b8 <problem_fetch+0x11fd0>
 80136d0:	4662      	mov	r2, ip
 80136d2:	4623      	mov	r3, r4
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	8013      	strh	r3, [r2, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80136de:	4a74      	ldr	r2, [pc, #464]	; (80138b0 <problem_fetch+0x121c8>)
 80136e0:	461d      	mov	r5, r3
 80136e2:	4614      	mov	r4, r2
 80136e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80136e6:	6028      	str	r0, [r5, #0]
 80136e8:	6069      	str	r1, [r5, #4]
 80136ea:	60aa      	str	r2, [r5, #8]
 80136ec:	60eb      	str	r3, [r5, #12]
 80136ee:	cc03      	ldmia	r4!, {r0, r1}
 80136f0:	6128      	str	r0, [r5, #16]
 80136f2:	6169      	str	r1, [r5, #20]
 80136f4:	8823      	ldrh	r3, [r4, #0]
 80136f6:	832b      	strh	r3, [r5, #24]
			break;
 80136f8:	f008 bf26 	b.w	801c548 <problem_fetch+0x1ae60>
		case 531 :
			strcpy(p->name,"NEW PROB");
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013702:	496c      	ldr	r1, [pc, #432]	; (80138b4 <problem_fetch+0x121cc>)
 8013704:	461a      	mov	r2, r3
 8013706:	460b      	mov	r3, r1
 8013708:	cb03      	ldmia	r3!, {r0, r1}
 801370a:	6010      	str	r0, [r2, #0]
 801370c:	6051      	str	r1, [r2, #4]
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013718:	4a59      	ldr	r2, [pc, #356]	; (8013880 <problem_fetch+0x12198>)
 801371a:	6810      	ldr	r0, [r2, #0]
 801371c:	6018      	str	r0, [r3, #0]
			p->moveSize = 13;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	220d      	movs	r2, #13
 8013722:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,C,A,B,C,B,A,D,C,E,D,A");
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	33a4      	adds	r3, #164	; 0xa4
 8013728:	4a63      	ldr	r2, [pc, #396]	; (80138b8 <problem_fetch+0x121d0>)
 801372a:	461d      	mov	r5, r3
 801372c:	4614      	mov	r4, r2
 801372e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013730:	6028      	str	r0, [r5, #0]
 8013732:	6069      	str	r1, [r5, #4]
 8013734:	60aa      	str	r2, [r5, #8]
 8013736:	60eb      	str	r3, [r5, #12]
 8013738:	cc03      	ldmia	r4!, {r0, r1}
 801373a:	6128      	str	r0, [r5, #16]
 801373c:	6169      	str	r1, [r5, #20]
 801373e:	8823      	ldrh	r3, [r4, #0]
 8013740:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"4,5,16,14,15,13,10,9,7,8,8,11,18");
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	3304      	adds	r3, #4
 8013746:	4a5d      	ldr	r2, [pc, #372]	; (80138bc <problem_fetch+0x121d4>)
 8013748:	4614      	mov	r4, r2
 801374a:	469c      	mov	ip, r3
 801374c:	f104 0e20 	add.w	lr, r4, #32
 8013750:	4665      	mov	r5, ip
 8013752:	4626      	mov	r6, r4
 8013754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013756:	6028      	str	r0, [r5, #0]
 8013758:	6069      	str	r1, [r5, #4]
 801375a:	60aa      	str	r2, [r5, #8]
 801375c:	60eb      	str	r3, [r5, #12]
 801375e:	3410      	adds	r4, #16
 8013760:	f10c 0c10 	add.w	ip, ip, #16
 8013764:	4574      	cmp	r4, lr
 8013766:	d1f3      	bne.n	8013750 <problem_fetch+0x12068>
 8013768:	4663      	mov	r3, ip
 801376a:	4622      	mov	r2, r4
 801376c:	7812      	ldrb	r2, [r2, #0]
 801376e:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,d,e");
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013776:	4a4e      	ldr	r2, [pc, #312]	; (80138b0 <problem_fetch+0x121c8>)
 8013778:	461d      	mov	r5, r3
 801377a:	4614      	mov	r4, r2
 801377c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801377e:	6028      	str	r0, [r5, #0]
 8013780:	6069      	str	r1, [r5, #4]
 8013782:	60aa      	str	r2, [r5, #8]
 8013784:	60eb      	str	r3, [r5, #12]
 8013786:	cc03      	ldmia	r4!, {r0, r1}
 8013788:	6128      	str	r0, [r5, #16]
 801378a:	6169      	str	r1, [r5, #20]
 801378c:	8823      	ldrh	r3, [r4, #0]
 801378e:	832b      	strh	r3, [r5, #24]
			break;
 8013790:	f008 beda 	b.w	801c548 <problem_fetch+0x1ae60>
		case 532 :
			strcpy(p->name,"BLACK HEART");
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801379a:	4a49      	ldr	r2, [pc, #292]	; (80138c0 <problem_fetch+0x121d8>)
 801379c:	461c      	mov	r4, r3
 801379e:	4613      	mov	r3, r2
 80137a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80137a2:	6020      	str	r0, [r4, #0]
 80137a4:	6061      	str	r1, [r4, #4]
 80137a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80137ae:	4a45      	ldr	r2, [pc, #276]	; (80138c4 <problem_fetch+0x121dc>)
 80137b0:	6810      	ldr	r0, [r2, #0]
 80137b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2205      	movs	r2, #5
 80137b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,I,G,I");
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	33a4      	adds	r3, #164	; 0xa4
 80137be:	4942      	ldr	r1, [pc, #264]	; (80138c8 <problem_fetch+0x121e0>)
 80137c0:	461a      	mov	r2, r3
 80137c2:	460b      	mov	r3, r1
 80137c4:	cb03      	ldmia	r3!, {r0, r1}
 80137c6:	6010      	str	r0, [r2, #0]
 80137c8:	6051      	str	r1, [r2, #4]
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	3304      	adds	r3, #4
 80137d2:	4a3e      	ldr	r2, [pc, #248]	; (80138cc <problem_fetch+0x121e4>)
 80137d4:	461c      	mov	r4, r3
 80137d6:	4613      	mov	r3, r2
 80137d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80137da:	6020      	str	r0, [r4, #0]
 80137dc:	6061      	str	r1, [r4, #4]
 80137de:	60a2      	str	r2, [r4, #8]
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80137ea:	4939      	ldr	r1, [pc, #228]	; (80138d0 <problem_fetch+0x121e8>)
 80137ec:	461a      	mov	r2, r3
 80137ee:	460b      	mov	r3, r1
 80137f0:	cb03      	ldmia	r3!, {r0, r1}
 80137f2:	6010      	str	r0, [r2, #0]
 80137f4:	6051      	str	r1, [r2, #4]
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	8113      	strh	r3, [r2, #8]
			break;
 80137fa:	f008 bea5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 533 :
			strcpy(p->name,"MONOTHEISM");
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013804:	4933      	ldr	r1, [pc, #204]	; (80138d4 <problem_fetch+0x121ec>)
 8013806:	461a      	mov	r2, r3
 8013808:	460b      	mov	r3, r1
 801380a:	cb03      	ldmia	r3!, {r0, r1}
 801380c:	6010      	str	r0, [r2, #0]
 801380e:	6051      	str	r1, [r2, #4]
 8013810:	8819      	ldrh	r1, [r3, #0]
 8013812:	789b      	ldrb	r3, [r3, #2]
 8013814:	8111      	strh	r1, [r2, #8]
 8013816:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801381e:	4a1d      	ldr	r2, [pc, #116]	; (8013894 <problem_fetch+0x121ac>)
 8013820:	6810      	ldr	r0, [r2, #0]
 8013822:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2209      	movs	r2, #9
 8013828:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,C,C,I,D,A");
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	33a4      	adds	r3, #164	; 0xa4
 801382e:	4a2a      	ldr	r2, [pc, #168]	; (80138d8 <problem_fetch+0x121f0>)
 8013830:	461d      	mov	r5, r3
 8013832:	4614      	mov	r4, r2
 8013834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013836:	6028      	str	r0, [r5, #0]
 8013838:	6069      	str	r1, [r5, #4]
 801383a:	60aa      	str	r2, [r5, #8]
 801383c:	60eb      	str	r3, [r5, #12]
 801383e:	8823      	ldrh	r3, [r4, #0]
 8013840:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,13,16,14,11,18");
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	3304      	adds	r3, #4
 8013846:	4a25      	ldr	r2, [pc, #148]	; (80138dc <problem_fetch+0x121f4>)
 8013848:	461d      	mov	r5, r3
 801384a:	4614      	mov	r4, r2
 801384c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801384e:	6028      	str	r0, [r5, #0]
 8013850:	6069      	str	r1, [r5, #4]
 8013852:	60aa      	str	r2, [r5, #8]
 8013854:	60eb      	str	r3, [r5, #12]
 8013856:	cc03      	ldmia	r4!, {r0, r1}
 8013858:	6128      	str	r0, [r5, #16]
 801385a:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013862:	4a1f      	ldr	r2, [pc, #124]	; (80138e0 <problem_fetch+0x121f8>)
 8013864:	461d      	mov	r5, r3
 8013866:	4614      	mov	r4, r2
 8013868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801386a:	6028      	str	r0, [r5, #0]
 801386c:	6069      	str	r1, [r5, #4]
 801386e:	60aa      	str	r2, [r5, #8]
 8013870:	60eb      	str	r3, [r5, #12]
 8013872:	8823      	ldrh	r3, [r4, #0]
 8013874:	822b      	strh	r3, [r5, #16]
			break;
 8013876:	f008 be67 	b.w	801c548 <problem_fetch+0x1ae60>
 801387a:	bf00      	nop
 801387c:	08029e50 	.word	0x08029e50
 8013880:	0802395c 	.word	0x0802395c
 8013884:	08029e64 	.word	0x08029e64
 8013888:	08029e78 	.word	0x08029e78
 801388c:	08025814 	.word	0x08025814
 8013890:	08029e90 	.word	0x08029e90
 8013894:	08023afc 	.word	0x08023afc
 8013898:	08029e98 	.word	0x08029e98
 801389c:	08029ea8 	.word	0x08029ea8
 80138a0:	08023ae4 	.word	0x08023ae4
 80138a4:	08029ebc 	.word	0x08029ebc
 80138a8:	08029ec8 	.word	0x08029ec8
 80138ac:	08029ee4 	.word	0x08029ee4
 80138b0:	0802845c 	.word	0x0802845c
 80138b4:	08029f08 	.word	0x08029f08
 80138b8:	08029f14 	.word	0x08029f14
 80138bc:	08029f30 	.word	0x08029f30
 80138c0:	08029f54 	.word	0x08029f54
 80138c4:	080239f4 	.word	0x080239f4
 80138c8:	08029f60 	.word	0x08029f60
 80138cc:	08029f6c 	.word	0x08029f6c
 80138d0:	08023e28 	.word	0x08023e28
 80138d4:	08029f7c 	.word	0x08029f7c
 80138d8:	08029f88 	.word	0x08029f88
 80138dc:	08029f9c 	.word	0x08029f9c
 80138e0:	08024940 	.word	0x08024940
		case 534 :
			strcpy(p->name,"GIVE ME SOMETHING BETTER");
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80138ea:	4aae      	ldr	r2, [pc, #696]	; (8013ba4 <problem_fetch+0x124bc>)
 80138ec:	461d      	mov	r5, r3
 80138ee:	4614      	mov	r4, r2
 80138f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80138f2:	6028      	str	r0, [r5, #0]
 80138f4:	6069      	str	r1, [r5, #4]
 80138f6:	60aa      	str	r2, [r5, #8]
 80138f8:	60eb      	str	r3, [r5, #12]
 80138fa:	cc03      	ldmia	r4!, {r0, r1}
 80138fc:	6128      	str	r0, [r5, #16]
 80138fe:	6169      	str	r1, [r5, #20]
 8013900:	7823      	ldrb	r3, [r4, #0]
 8013902:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801390a:	4aa7      	ldr	r2, [pc, #668]	; (8013ba8 <problem_fetch+0x124c0>)
 801390c:	6810      	ldr	r0, [r2, #0]
 801390e:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2209      	movs	r2, #9
 8013914:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,K,H,I,C,D,B,A");
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	33a4      	adds	r3, #164	; 0xa4
 801391a:	4aa4      	ldr	r2, [pc, #656]	; (8013bac <problem_fetch+0x124c4>)
 801391c:	461d      	mov	r5, r3
 801391e:	4614      	mov	r4, r2
 8013920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013922:	6028      	str	r0, [r5, #0]
 8013924:	6069      	str	r1, [r5, #4]
 8013926:	60aa      	str	r2, [r5, #8]
 8013928:	60eb      	str	r3, [r5, #12]
 801392a:	8823      	ldrh	r3, [r4, #0]
 801392c:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,4,9,13,14,13,15,12,18");
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	3304      	adds	r3, #4
 8013932:	4a9f      	ldr	r2, [pc, #636]	; (8013bb0 <problem_fetch+0x124c8>)
 8013934:	461d      	mov	r5, r3
 8013936:	4614      	mov	r4, r2
 8013938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801393a:	6028      	str	r0, [r5, #0]
 801393c:	6069      	str	r1, [r5, #4]
 801393e:	60aa      	str	r2, [r5, #8]
 8013940:	60eb      	str	r3, [r5, #12]
 8013942:	cc03      	ldmia	r4!, {r0, r1}
 8013944:	6128      	str	r0, [r5, #16]
 8013946:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801394e:	4a99      	ldr	r2, [pc, #612]	; (8013bb4 <problem_fetch+0x124cc>)
 8013950:	461d      	mov	r5, r3
 8013952:	4614      	mov	r4, r2
 8013954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013956:	6028      	str	r0, [r5, #0]
 8013958:	6069      	str	r1, [r5, #4]
 801395a:	60aa      	str	r2, [r5, #8]
 801395c:	60eb      	str	r3, [r5, #12]
 801395e:	8823      	ldrh	r3, [r4, #0]
 8013960:	822b      	strh	r3, [r5, #16]
			break;
 8013962:	f008 bdf1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 535 :
			strcpy(p->name,"POOP TWISTER");
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801396c:	4a92      	ldr	r2, [pc, #584]	; (8013bb8 <problem_fetch+0x124d0>)
 801396e:	461c      	mov	r4, r3
 8013970:	4613      	mov	r3, r2
 8013972:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013974:	6020      	str	r0, [r4, #0]
 8013976:	6061      	str	r1, [r4, #4]
 8013978:	60a2      	str	r2, [r4, #8]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013984:	4a8d      	ldr	r2, [pc, #564]	; (8013bbc <problem_fetch+0x124d4>)
 8013986:	8811      	ldrh	r1, [r2, #0]
 8013988:	7892      	ldrb	r2, [r2, #2]
 801398a:	8019      	strh	r1, [r3, #0]
 801398c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2207      	movs	r2, #7
 8013992:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,D,G,E,I");
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	33a4      	adds	r3, #164	; 0xa4
 8013998:	4a89      	ldr	r2, [pc, #548]	; (8013bc0 <problem_fetch+0x124d8>)
 801399a:	461c      	mov	r4, r3
 801399c:	4613      	mov	r3, r2
 801399e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80139a0:	6020      	str	r0, [r4, #0]
 80139a2:	6061      	str	r1, [r4, #4]
 80139a4:	60a2      	str	r2, [r4, #8]
 80139a6:	881b      	ldrh	r3, [r3, #0]
 80139a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,14,16,18");
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	3304      	adds	r3, #4
 80139ae:	4a85      	ldr	r2, [pc, #532]	; (8013bc4 <problem_fetch+0x124dc>)
 80139b0:	461d      	mov	r5, r3
 80139b2:	4614      	mov	r4, r2
 80139b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139b6:	6028      	str	r0, [r5, #0]
 80139b8:	6069      	str	r1, [r5, #4]
 80139ba:	60aa      	str	r2, [r5, #8]
 80139bc:	60eb      	str	r3, [r5, #12]
 80139be:	8823      	ldrh	r3, [r4, #0]
 80139c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80139c8:	4a7f      	ldr	r2, [pc, #508]	; (8013bc8 <problem_fetch+0x124e0>)
 80139ca:	461c      	mov	r4, r3
 80139cc:	4613      	mov	r3, r2
 80139ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80139d0:	6020      	str	r0, [r4, #0]
 80139d2:	6061      	str	r1, [r4, #4]
 80139d4:	60a2      	str	r2, [r4, #8]
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	81a3      	strh	r3, [r4, #12]
			break;
 80139da:	f008 bdb5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 536 :
			strcpy(p->name,"TAMOA NARASAKI BOMB");
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80139e4:	4a79      	ldr	r2, [pc, #484]	; (8013bcc <problem_fetch+0x124e4>)
 80139e6:	461d      	mov	r5, r3
 80139e8:	4614      	mov	r4, r2
 80139ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80139ec:	6028      	str	r0, [r5, #0]
 80139ee:	6069      	str	r1, [r5, #4]
 80139f0:	60aa      	str	r2, [r5, #8]
 80139f2:	60eb      	str	r3, [r5, #12]
 80139f4:	6820      	ldr	r0, [r4, #0]
 80139f6:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80139fe:	4a74      	ldr	r2, [pc, #464]	; (8013bd0 <problem_fetch+0x124e8>)
 8013a00:	6810      	ldr	r0, [r2, #0]
 8013a02:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2207      	movs	r2, #7
 8013a08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,E,C,A");
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	33a4      	adds	r3, #164	; 0xa4
 8013a0e:	4a71      	ldr	r2, [pc, #452]	; (8013bd4 <problem_fetch+0x124ec>)
 8013a10:	461c      	mov	r4, r3
 8013a12:	4613      	mov	r3, r2
 8013a14:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a16:	6020      	str	r0, [r4, #0]
 8013a18:	6061      	str	r1, [r4, #4]
 8013a1a:	60a2      	str	r2, [r4, #8]
 8013a1c:	881b      	ldrh	r3, [r3, #0]
 8013a1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,9,16,13,18");
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	3304      	adds	r3, #4
 8013a24:	4a6c      	ldr	r2, [pc, #432]	; (8013bd8 <problem_fetch+0x124f0>)
 8013a26:	461d      	mov	r5, r3
 8013a28:	4614      	mov	r4, r2
 8013a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a2c:	6028      	str	r0, [r5, #0]
 8013a2e:	6069      	str	r1, [r5, #4]
 8013a30:	60aa      	str	r2, [r5, #8]
 8013a32:	60eb      	str	r3, [r5, #12]
 8013a34:	7823      	ldrb	r3, [r4, #0]
 8013a36:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013a3e:	4a67      	ldr	r2, [pc, #412]	; (8013bdc <problem_fetch+0x124f4>)
 8013a40:	461c      	mov	r4, r3
 8013a42:	4613      	mov	r3, r2
 8013a44:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a46:	6020      	str	r0, [r4, #0]
 8013a48:	6061      	str	r1, [r4, #4]
 8013a4a:	60a2      	str	r2, [r4, #8]
 8013a4c:	881b      	ldrh	r3, [r3, #0]
 8013a4e:	81a3      	strh	r3, [r4, #12]
			break;
 8013a50:	f008 bd7a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 537 :
			strcpy(p->name,"ON BLACK");
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013a5a:	4961      	ldr	r1, [pc, #388]	; (8013be0 <problem_fetch+0x124f8>)
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	460b      	mov	r3, r1
 8013a60:	cb03      	ldmia	r3!, {r0, r1}
 8013a62:	6010      	str	r0, [r2, #0]
 8013a64:	6051      	str	r1, [r2, #4]
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013a70:	4a5c      	ldr	r2, [pc, #368]	; (8013be4 <problem_fetch+0x124fc>)
 8013a72:	6810      	ldr	r0, [r2, #0]
 8013a74:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2206      	movs	r2, #6
 8013a7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,A");
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	33a4      	adds	r3, #164	; 0xa4
 8013a80:	4a59      	ldr	r2, [pc, #356]	; (8013be8 <problem_fetch+0x12500>)
 8013a82:	461c      	mov	r4, r3
 8013a84:	4613      	mov	r3, r2
 8013a86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013a88:	6020      	str	r0, [r4, #0]
 8013a8a:	6061      	str	r1, [r4, #4]
 8013a8c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	3304      	adds	r3, #4
 8013a92:	4a56      	ldr	r2, [pc, #344]	; (8013bec <problem_fetch+0x12504>)
 8013a94:	461c      	mov	r4, r3
 8013a96:	4615      	mov	r5, r2
 8013a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013a9a:	6020      	str	r0, [r4, #0]
 8013a9c:	6061      	str	r1, [r4, #4]
 8013a9e:	60a2      	str	r2, [r4, #8]
 8013aa0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013aa8:	4a51      	ldr	r2, [pc, #324]	; (8013bf0 <problem_fetch+0x12508>)
 8013aaa:	461c      	mov	r4, r3
 8013aac:	4613      	mov	r3, r2
 8013aae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013ab0:	6020      	str	r0, [r4, #0]
 8013ab2:	6061      	str	r1, [r4, #4]
 8013ab4:	60a2      	str	r2, [r4, #8]
			break;
 8013ab6:	f008 bd47 	b.w	801c548 <problem_fetch+0x1ae60>
		case 538 :
			strcpy(p->name,"SMOKING AREA HARD");
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013ac0:	4a4c      	ldr	r2, [pc, #304]	; (8013bf4 <problem_fetch+0x1250c>)
 8013ac2:	461d      	mov	r5, r3
 8013ac4:	4614      	mov	r4, r2
 8013ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ac8:	6028      	str	r0, [r5, #0]
 8013aca:	6069      	str	r1, [r5, #4]
 8013acc:	60aa      	str	r2, [r5, #8]
 8013ace:	60eb      	str	r3, [r5, #12]
 8013ad0:	8823      	ldrh	r3, [r4, #0]
 8013ad2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ada:	4a47      	ldr	r2, [pc, #284]	; (8013bf8 <problem_fetch+0x12510>)
 8013adc:	6810      	ldr	r0, [r2, #0]
 8013ade:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2205      	movs	r2, #5
 8013ae4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I");
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	33a4      	adds	r3, #164	; 0xa4
 8013aea:	4944      	ldr	r1, [pc, #272]	; (8013bfc <problem_fetch+0x12514>)
 8013aec:	461a      	mov	r2, r3
 8013aee:	460b      	mov	r3, r1
 8013af0:	cb03      	ldmia	r3!, {r0, r1}
 8013af2:	6010      	str	r0, [r2, #0]
 8013af4:	6051      	str	r1, [r2, #4]
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,16,18");
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	3304      	adds	r3, #4
 8013afe:	4a40      	ldr	r2, [pc, #256]	; (8013c00 <problem_fetch+0x12518>)
 8013b00:	461c      	mov	r4, r3
 8013b02:	4613      	mov	r3, r2
 8013b04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013b06:	6020      	str	r0, [r4, #0]
 8013b08:	6061      	str	r1, [r4, #4]
 8013b0a:	60a2      	str	r2, [r4, #8]
 8013b0c:	781b      	ldrb	r3, [r3, #0]
 8013b0e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013b16:	493b      	ldr	r1, [pc, #236]	; (8013c04 <problem_fetch+0x1251c>)
 8013b18:	461a      	mov	r2, r3
 8013b1a:	460b      	mov	r3, r1
 8013b1c:	cb03      	ldmia	r3!, {r0, r1}
 8013b1e:	6010      	str	r0, [r2, #0]
 8013b20:	6051      	str	r1, [r2, #4]
 8013b22:	881b      	ldrh	r3, [r3, #0]
 8013b24:	8113      	strh	r3, [r2, #8]
			break;
 8013b26:	f008 bd0f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 539 :
			strcpy(p->name,"THE WIZARD");
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013b30:	4935      	ldr	r1, [pc, #212]	; (8013c08 <problem_fetch+0x12520>)
 8013b32:	461a      	mov	r2, r3
 8013b34:	460b      	mov	r3, r1
 8013b36:	cb03      	ldmia	r3!, {r0, r1}
 8013b38:	6010      	str	r0, [r2, #0]
 8013b3a:	6051      	str	r1, [r2, #4]
 8013b3c:	8819      	ldrh	r1, [r3, #0]
 8013b3e:	789b      	ldrb	r3, [r3, #2]
 8013b40:	8111      	strh	r1, [r2, #8]
 8013b42:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013b4a:	4a1c      	ldr	r2, [pc, #112]	; (8013bbc <problem_fetch+0x124d4>)
 8013b4c:	8811      	ldrh	r1, [r2, #0]
 8013b4e:	7892      	ldrb	r2, [r2, #2]
 8013b50:	8019      	strh	r1, [r3, #0]
 8013b52:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	2208      	movs	r2, #8
 8013b58:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,H,F,H,E,I");
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	33a4      	adds	r3, #164	; 0xa4
 8013b5e:	4a2b      	ldr	r2, [pc, #172]	; (8013c0c <problem_fetch+0x12524>)
 8013b60:	461c      	mov	r4, r3
 8013b62:	4615      	mov	r5, r2
 8013b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b66:	6020      	str	r0, [r4, #0]
 8013b68:	6061      	str	r1, [r4, #4]
 8013b6a:	60a2      	str	r2, [r4, #8]
 8013b6c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,10,11,13,16,18");
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	3304      	adds	r3, #4
 8013b72:	4a27      	ldr	r2, [pc, #156]	; (8013c10 <problem_fetch+0x12528>)
 8013b74:	461d      	mov	r5, r3
 8013b76:	4614      	mov	r4, r2
 8013b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b7a:	6028      	str	r0, [r5, #0]
 8013b7c:	6069      	str	r1, [r5, #4]
 8013b7e:	60aa      	str	r2, [r5, #8]
 8013b80:	60eb      	str	r3, [r5, #12]
 8013b82:	6820      	ldr	r0, [r4, #0]
 8013b84:	6128      	str	r0, [r5, #16]
 8013b86:	7923      	ldrb	r3, [r4, #4]
 8013b88:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013b90:	4a20      	ldr	r2, [pc, #128]	; (8013c14 <problem_fetch+0x1252c>)
 8013b92:	461c      	mov	r4, r3
 8013b94:	4615      	mov	r5, r2
 8013b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013b98:	6020      	str	r0, [r4, #0]
 8013b9a:	6061      	str	r1, [r4, #4]
 8013b9c:	60a2      	str	r2, [r4, #8]
 8013b9e:	60e3      	str	r3, [r4, #12]
			break;
 8013ba0:	f008 bcd2 	b.w	801c548 <problem_fetch+0x1ae60>
 8013ba4:	08029fb4 	.word	0x08029fb4
 8013ba8:	080239f4 	.word	0x080239f4
 8013bac:	08029fd0 	.word	0x08029fd0
 8013bb0:	08029fe4 	.word	0x08029fe4
 8013bb4:	08024940 	.word	0x08024940
 8013bb8:	08029ffc 	.word	0x08029ffc
 8013bbc:	08023a28 	.word	0x08023a28
 8013bc0:	0802a00c 	.word	0x0802a00c
 8013bc4:	0802456c 	.word	0x0802456c
 8013bc8:	080239d4 	.word	0x080239d4
 8013bcc:	0802a01c 	.word	0x0802a01c
 8013bd0:	08023a98 	.word	0x08023a98
 8013bd4:	0802a030 	.word	0x0802a030
 8013bd8:	0802a040 	.word	0x0802a040
 8013bdc:	08023ae4 	.word	0x08023ae4
 8013be0:	0802a054 	.word	0x0802a054
 8013be4:	0802395c 	.word	0x0802395c
 8013be8:	0802a060 	.word	0x0802a060
 8013bec:	0802a06c 	.word	0x0802a06c
 8013bf0:	08023cf8 	.word	0x08023cf8
 8013bf4:	0802a07c 	.word	0x0802a07c
 8013bf8:	08023afc 	.word	0x08023afc
 8013bfc:	08027004 	.word	0x08027004
 8013c00:	0802a090 	.word	0x0802a090
 8013c04:	08023e28 	.word	0x08023e28
 8013c08:	0802a0a0 	.word	0x0802a0a0
 8013c0c:	0802a0ac 	.word	0x0802a0ac
 8013c10:	0802a0bc 	.word	0x0802a0bc
 8013c14:	08023b6c 	.word	0x08023b6c
		case 540 :
			strcpy(p->name,"GYUUUUUN");
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c1e:	49ab      	ldr	r1, [pc, #684]	; (8013ecc <problem_fetch+0x127e4>)
 8013c20:	461a      	mov	r2, r3
 8013c22:	460b      	mov	r3, r1
 8013c24:	cb03      	ldmia	r3!, {r0, r1}
 8013c26:	6010      	str	r0, [r2, #0]
 8013c28:	6051      	str	r1, [r2, #4]
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013c34:	4aa6      	ldr	r2, [pc, #664]	; (8013ed0 <problem_fetch+0x127e8>)
 8013c36:	8811      	ldrh	r1, [r2, #0]
 8013c38:	7892      	ldrb	r2, [r2, #2]
 8013c3a:	8019      	strh	r1, [r3, #0]
 8013c3c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2206      	movs	r2, #6
 8013c42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,E,E,I");
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	33a4      	adds	r3, #164	; 0xa4
 8013c48:	4aa2      	ldr	r2, [pc, #648]	; (8013ed4 <problem_fetch+0x127ec>)
 8013c4a:	461c      	mov	r4, r3
 8013c4c:	4613      	mov	r3, r2
 8013c4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c50:	6020      	str	r0, [r4, #0]
 8013c52:	6061      	str	r1, [r4, #4]
 8013c54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,11,14,16,18");
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	3304      	adds	r3, #4
 8013c5a:	4a9f      	ldr	r2, [pc, #636]	; (8013ed8 <problem_fetch+0x127f0>)
 8013c5c:	461d      	mov	r5, r3
 8013c5e:	4614      	mov	r4, r2
 8013c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c62:	6028      	str	r0, [r5, #0]
 8013c64:	6069      	str	r1, [r5, #4]
 8013c66:	60aa      	str	r2, [r5, #8]
 8013c68:	60eb      	str	r3, [r5, #12]
 8013c6a:	7823      	ldrb	r3, [r4, #0]
 8013c6c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013c74:	4a99      	ldr	r2, [pc, #612]	; (8013edc <problem_fetch+0x127f4>)
 8013c76:	461c      	mov	r4, r3
 8013c78:	4613      	mov	r3, r2
 8013c7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013c7c:	6020      	str	r0, [r4, #0]
 8013c7e:	6061      	str	r1, [r4, #4]
 8013c80:	60a2      	str	r2, [r4, #8]
			break;
 8013c82:	f008 bc61 	b.w	801c548 <problem_fetch+0x1ae60>
		case 541 :
			strcpy(p->name,"A LITTLE CROSSING");
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013c8c:	4a94      	ldr	r2, [pc, #592]	; (8013ee0 <problem_fetch+0x127f8>)
 8013c8e:	461d      	mov	r5, r3
 8013c90:	4614      	mov	r4, r2
 8013c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c94:	6028      	str	r0, [r5, #0]
 8013c96:	6069      	str	r1, [r5, #4]
 8013c98:	60aa      	str	r2, [r5, #8]
 8013c9a:	60eb      	str	r3, [r5, #12]
 8013c9c:	8823      	ldrh	r3, [r4, #0]
 8013c9e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013ca6:	4a8f      	ldr	r2, [pc, #572]	; (8013ee4 <problem_fetch+0x127fc>)
 8013ca8:	6810      	ldr	r0, [r2, #0]
 8013caa:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2208      	movs	r2, #8
 8013cb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,G,H,K,H,I");
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	33a4      	adds	r3, #164	; 0xa4
 8013cb6:	4a8c      	ldr	r2, [pc, #560]	; (8013ee8 <problem_fetch+0x12800>)
 8013cb8:	461c      	mov	r4, r3
 8013cba:	4615      	mov	r5, r2
 8013cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cbe:	6020      	str	r0, [r4, #0]
 8013cc0:	6061      	str	r1, [r4, #4]
 8013cc2:	60a2      	str	r2, [r4, #8]
 8013cc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,9,12,14,16,18");
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	3304      	adds	r3, #4
 8013cca:	4a88      	ldr	r2, [pc, #544]	; (8013eec <problem_fetch+0x12804>)
 8013ccc:	461d      	mov	r5, r3
 8013cce:	4614      	mov	r4, r2
 8013cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013cd2:	6028      	str	r0, [r5, #0]
 8013cd4:	6069      	str	r1, [r5, #4]
 8013cd6:	60aa      	str	r2, [r5, #8]
 8013cd8:	60eb      	str	r3, [r5, #12]
 8013cda:	6820      	ldr	r0, [r4, #0]
 8013cdc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013ce4:	4a82      	ldr	r2, [pc, #520]	; (8013ef0 <problem_fetch+0x12808>)
 8013ce6:	461c      	mov	r4, r3
 8013ce8:	4615      	mov	r5, r2
 8013cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cec:	6020      	str	r0, [r4, #0]
 8013cee:	6061      	str	r1, [r4, #4]
 8013cf0:	60a2      	str	r2, [r4, #8]
 8013cf2:	60e3      	str	r3, [r4, #12]
			break;
 8013cf4:	f008 bc28 	b.w	801c548 <problem_fetch+0x1ae60>
		case 542 :
			strcpy(p->name,"ZANZARE, NEBBIA E VIN");
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013cfe:	4a7d      	ldr	r2, [pc, #500]	; (8013ef4 <problem_fetch+0x1280c>)
 8013d00:	461d      	mov	r5, r3
 8013d02:	4614      	mov	r4, r2
 8013d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d06:	6028      	str	r0, [r5, #0]
 8013d08:	6069      	str	r1, [r5, #4]
 8013d0a:	60aa      	str	r2, [r5, #8]
 8013d0c:	60eb      	str	r3, [r5, #12]
 8013d0e:	6820      	ldr	r0, [r4, #0]
 8013d10:	6128      	str	r0, [r5, #16]
 8013d12:	88a3      	ldrh	r3, [r4, #4]
 8013d14:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6C");
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d1c:	4a6c      	ldr	r2, [pc, #432]	; (8013ed0 <problem_fetch+0x127e8>)
 8013d1e:	8811      	ldrh	r1, [r2, #0]
 8013d20:	7892      	ldrb	r2, [r2, #2]
 8013d22:	8019      	strh	r1, [r3, #0]
 8013d24:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2205      	movs	r2, #5
 8013d2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,F,H,D");
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	33a4      	adds	r3, #164	; 0xa4
 8013d30:	4971      	ldr	r1, [pc, #452]	; (8013ef8 <problem_fetch+0x12810>)
 8013d32:	461a      	mov	r2, r3
 8013d34:	460b      	mov	r3, r1
 8013d36:	cb03      	ldmia	r3!, {r0, r1}
 8013d38:	6010      	str	r0, [r2, #0]
 8013d3a:	6051      	str	r1, [r2, #4]
 8013d3c:	881b      	ldrh	r3, [r3, #0]
 8013d3e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,13,16,18");
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	3304      	adds	r3, #4
 8013d44:	4a6d      	ldr	r2, [pc, #436]	; (8013efc <problem_fetch+0x12814>)
 8013d46:	461c      	mov	r4, r3
 8013d48:	4613      	mov	r3, r2
 8013d4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013d4c:	6020      	str	r0, [r4, #0]
 8013d4e:	6061      	str	r1, [r4, #4]
 8013d50:	60a2      	str	r2, [r4, #8]
 8013d52:	881b      	ldrh	r3, [r3, #0]
 8013d54:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013d5c:	4968      	ldr	r1, [pc, #416]	; (8013f00 <problem_fetch+0x12818>)
 8013d5e:	461a      	mov	r2, r3
 8013d60:	460b      	mov	r3, r1
 8013d62:	cb03      	ldmia	r3!, {r0, r1}
 8013d64:	6010      	str	r0, [r2, #0]
 8013d66:	6051      	str	r1, [r2, #4]
 8013d68:	881b      	ldrh	r3, [r3, #0]
 8013d6a:	8113      	strh	r3, [r2, #8]
			break;
 8013d6c:	f008 bbec 	b.w	801c548 <problem_fetch+0x1ae60>
		case 543 :
			strcpy(p->name,"STRATIFICAZIONI SOCIALI");
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013d76:	4a63      	ldr	r2, [pc, #396]	; (8013f04 <problem_fetch+0x1281c>)
 8013d78:	461d      	mov	r5, r3
 8013d7a:	4614      	mov	r4, r2
 8013d7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d7e:	6028      	str	r0, [r5, #0]
 8013d80:	6069      	str	r1, [r5, #4]
 8013d82:	60aa      	str	r2, [r5, #8]
 8013d84:	60eb      	str	r3, [r5, #12]
 8013d86:	cc03      	ldmia	r4!, {r0, r1}
 8013d88:	6128      	str	r0, [r5, #16]
 8013d8a:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013d92:	4a54      	ldr	r2, [pc, #336]	; (8013ee4 <problem_fetch+0x127fc>)
 8013d94:	6810      	ldr	r0, [r2, #0]
 8013d96:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2207      	movs	r2, #7
 8013d9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,G,C,C,D");
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	33a4      	adds	r3, #164	; 0xa4
 8013da2:	4a59      	ldr	r2, [pc, #356]	; (8013f08 <problem_fetch+0x12820>)
 8013da4:	461c      	mov	r4, r3
 8013da6:	4613      	mov	r3, r2
 8013da8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013daa:	6020      	str	r0, [r4, #0]
 8013dac:	6061      	str	r1, [r4, #4]
 8013dae:	60a2      	str	r2, [r4, #8]
 8013db0:	881b      	ldrh	r3, [r3, #0]
 8013db2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,12,14,8,16,18");
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	3304      	adds	r3, #4
 8013db8:	4a54      	ldr	r2, [pc, #336]	; (8013f0c <problem_fetch+0x12824>)
 8013dba:	461d      	mov	r5, r3
 8013dbc:	4614      	mov	r4, r2
 8013dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013dc0:	6028      	str	r0, [r5, #0]
 8013dc2:	6069      	str	r1, [r5, #4]
 8013dc4:	60aa      	str	r2, [r5, #8]
 8013dc6:	60eb      	str	r3, [r5, #12]
 8013dc8:	8823      	ldrh	r3, [r4, #0]
 8013dca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013dd2:	4a4f      	ldr	r2, [pc, #316]	; (8013f10 <problem_fetch+0x12828>)
 8013dd4:	461c      	mov	r4, r3
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013dda:	6020      	str	r0, [r4, #0]
 8013ddc:	6061      	str	r1, [r4, #4]
 8013dde:	60a2      	str	r2, [r4, #8]
 8013de0:	881b      	ldrh	r3, [r3, #0]
 8013de2:	81a3      	strh	r3, [r4, #12]
			break;
 8013de4:	f008 bbb0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 544 :
			strcpy(p->name,"CICCIOSPRUZZO");
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013dee:	4a49      	ldr	r2, [pc, #292]	; (8013f14 <problem_fetch+0x1282c>)
 8013df0:	461c      	mov	r4, r3
 8013df2:	4613      	mov	r3, r2
 8013df4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013df6:	6020      	str	r0, [r4, #0]
 8013df8:	6061      	str	r1, [r4, #4]
 8013dfa:	60a2      	str	r2, [r4, #8]
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013e06:	4a44      	ldr	r2, [pc, #272]	; (8013f18 <problem_fetch+0x12830>)
 8013e08:	8811      	ldrh	r1, [r2, #0]
 8013e0a:	7892      	ldrb	r2, [r2, #2]
 8013e0c:	8019      	strh	r1, [r3, #0]
 8013e0e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2206      	movs	r2, #6
 8013e14:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,A,F,A,E,D");
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	33a4      	adds	r3, #164	; 0xa4
 8013e1a:	4a40      	ldr	r2, [pc, #256]	; (8013f1c <problem_fetch+0x12834>)
 8013e1c:	461c      	mov	r4, r3
 8013e1e:	4613      	mov	r3, r2
 8013e20:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e22:	6020      	str	r0, [r4, #0]
 8013e24:	6061      	str	r1, [r4, #4]
 8013e26:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,14,16,18");
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	3304      	adds	r3, #4
 8013e2c:	4a3c      	ldr	r2, [pc, #240]	; (8013f20 <problem_fetch+0x12838>)
 8013e2e:	461c      	mov	r4, r3
 8013e30:	4615      	mov	r5, r2
 8013e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e34:	6020      	str	r0, [r4, #0]
 8013e36:	6061      	str	r1, [r4, #4]
 8013e38:	60a2      	str	r2, [r4, #8]
 8013e3a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013e42:	4a26      	ldr	r2, [pc, #152]	; (8013edc <problem_fetch+0x127f4>)
 8013e44:	461c      	mov	r4, r3
 8013e46:	4613      	mov	r3, r2
 8013e48:	cb07      	ldmia	r3!, {r0, r1, r2}
 8013e4a:	6020      	str	r0, [r4, #0]
 8013e4c:	6061      	str	r1, [r4, #4]
 8013e4e:	60a2      	str	r2, [r4, #8]
			break;
 8013e50:	f008 bb7a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 545 :
			strcpy(p->name,"DOJO BLACK");
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013e5a:	4932      	ldr	r1, [pc, #200]	; (8013f24 <problem_fetch+0x1283c>)
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	460b      	mov	r3, r1
 8013e60:	cb03      	ldmia	r3!, {r0, r1}
 8013e62:	6010      	str	r0, [r2, #0]
 8013e64:	6051      	str	r1, [r2, #4]
 8013e66:	8819      	ldrh	r1, [r3, #0]
 8013e68:	789b      	ldrb	r3, [r3, #2]
 8013e6a:	8111      	strh	r1, [r2, #8]
 8013e6c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013e74:	4a2c      	ldr	r2, [pc, #176]	; (8013f28 <problem_fetch+0x12840>)
 8013e76:	6810      	ldr	r0, [r2, #0]
 8013e78:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2208      	movs	r2, #8
 8013e7e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,I,J,D,G,C,D");
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	33a4      	adds	r3, #164	; 0xa4
 8013e84:	4a29      	ldr	r2, [pc, #164]	; (8013f2c <problem_fetch+0x12844>)
 8013e86:	461c      	mov	r4, r3
 8013e88:	4615      	mov	r5, r2
 8013e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e8c:	6020      	str	r0, [r4, #0]
 8013e8e:	6061      	str	r1, [r4, #4]
 8013e90:	60a2      	str	r2, [r4, #8]
 8013e92:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,13,11,17,5,18");
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	3304      	adds	r3, #4
 8013e98:	4a25      	ldr	r2, [pc, #148]	; (8013f30 <problem_fetch+0x12848>)
 8013e9a:	461d      	mov	r5, r3
 8013e9c:	4614      	mov	r4, r2
 8013e9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ea0:	6028      	str	r0, [r5, #0]
 8013ea2:	6069      	str	r1, [r5, #4]
 8013ea4:	60aa      	str	r2, [r5, #8]
 8013ea6:	60eb      	str	r3, [r5, #12]
 8013ea8:	6820      	ldr	r0, [r4, #0]
 8013eaa:	6128      	str	r0, [r5, #16]
 8013eac:	7923      	ldrb	r3, [r4, #4]
 8013eae:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013eb6:	4a1f      	ldr	r2, [pc, #124]	; (8013f34 <problem_fetch+0x1284c>)
 8013eb8:	461c      	mov	r4, r3
 8013eba:	4615      	mov	r5, r2
 8013ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ebe:	6020      	str	r0, [r4, #0]
 8013ec0:	6061      	str	r1, [r4, #4]
 8013ec2:	60a2      	str	r2, [r4, #8]
 8013ec4:	60e3      	str	r3, [r4, #12]
			break;
 8013ec6:	f008 bb3f 	b.w	801c548 <problem_fetch+0x1ae60>
 8013eca:	bf00      	nop
 8013ecc:	0802a0d4 	.word	0x0802a0d4
 8013ed0:	08023a28 	.word	0x08023a28
 8013ed4:	0802a0e0 	.word	0x0802a0e0
 8013ed8:	080248f8 	.word	0x080248f8
 8013edc:	08023cf8 	.word	0x08023cf8
 8013ee0:	0802a0ec 	.word	0x0802a0ec
 8013ee4:	080239f4 	.word	0x080239f4
 8013ee8:	0802a100 	.word	0x0802a100
 8013eec:	0802a110 	.word	0x0802a110
 8013ef0:	08023a80 	.word	0x08023a80
 8013ef4:	0802a124 	.word	0x0802a124
 8013ef8:	0802a13c 	.word	0x0802a13c
 8013efc:	0802a148 	.word	0x0802a148
 8013f00:	08023e28 	.word	0x08023e28
 8013f04:	0802a158 	.word	0x0802a158
 8013f08:	0802a170 	.word	0x0802a170
 8013f0c:	0802a180 	.word	0x0802a180
 8013f10:	08023ae4 	.word	0x08023ae4
 8013f14:	0802a194 	.word	0x0802a194
 8013f18:	0802391c 	.word	0x0802391c
 8013f1c:	0802a1a4 	.word	0x0802a1a4
 8013f20:	0802788c 	.word	0x0802788c
 8013f24:	0802a1b0 	.word	0x0802a1b0
 8013f28:	08023afc 	.word	0x08023afc
 8013f2c:	0802a1bc 	.word	0x0802a1bc
 8013f30:	0802a1cc 	.word	0x0802a1cc
 8013f34:	08023b6c 	.word	0x08023b6c
		case 546 :
			strcpy(p->name,"WOKE UP FEELIN FROGGY");
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013f3e:	4aae      	ldr	r2, [pc, #696]	; (80141f8 <problem_fetch+0x12b10>)
 8013f40:	461d      	mov	r5, r3
 8013f42:	4614      	mov	r4, r2
 8013f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f46:	6028      	str	r0, [r5, #0]
 8013f48:	6069      	str	r1, [r5, #4]
 8013f4a:	60aa      	str	r2, [r5, #8]
 8013f4c:	60eb      	str	r3, [r5, #12]
 8013f4e:	6820      	ldr	r0, [r4, #0]
 8013f50:	6128      	str	r0, [r5, #16]
 8013f52:	88a3      	ldrh	r3, [r4, #4]
 8013f54:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B+");
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013f5c:	4aa7      	ldr	r2, [pc, #668]	; (80141fc <problem_fetch+0x12b14>)
 8013f5e:	6810      	ldr	r0, [r2, #0]
 8013f60:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	2208      	movs	r2, #8
 8013f66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,F,E,J,K,I,I");
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	33a4      	adds	r3, #164	; 0xa4
 8013f6c:	4aa4      	ldr	r2, [pc, #656]	; (8014200 <problem_fetch+0x12b18>)
 8013f6e:	461c      	mov	r4, r3
 8013f70:	4615      	mov	r5, r2
 8013f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f74:	6020      	str	r0, [r4, #0]
 8013f76:	6061      	str	r1, [r4, #4]
 8013f78:	60a2      	str	r2, [r4, #8]
 8013f7a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,12,13,14,7,18");
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	4aa0      	ldr	r2, [pc, #640]	; (8014204 <problem_fetch+0x12b1c>)
 8013f82:	461d      	mov	r5, r3
 8013f84:	4614      	mov	r4, r2
 8013f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013f88:	6028      	str	r0, [r5, #0]
 8013f8a:	6069      	str	r1, [r5, #4]
 8013f8c:	60aa      	str	r2, [r5, #8]
 8013f8e:	60eb      	str	r3, [r5, #12]
 8013f90:	6820      	ldr	r0, [r4, #0]
 8013f92:	6128      	str	r0, [r5, #16]
 8013f94:	7923      	ldrb	r3, [r4, #4]
 8013f96:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8013f9e:	4a9a      	ldr	r2, [pc, #616]	; (8014208 <problem_fetch+0x12b20>)
 8013fa0:	461c      	mov	r4, r3
 8013fa2:	4615      	mov	r5, r2
 8013fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fa6:	6020      	str	r0, [r4, #0]
 8013fa8:	6061      	str	r1, [r4, #4]
 8013faa:	60a2      	str	r2, [r4, #8]
 8013fac:	60e3      	str	r3, [r4, #12]
			break;
 8013fae:	f008 bacb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 547 :
			strcpy(p->name,"DDD");
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8013fb8:	4a94      	ldr	r2, [pc, #592]	; (801420c <problem_fetch+0x12b24>)
 8013fba:	6810      	ldr	r0, [r2, #0]
 8013fbc:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6C");
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013fc4:	4a92      	ldr	r2, [pc, #584]	; (8014210 <problem_fetch+0x12b28>)
 8013fc6:	8811      	ldrh	r1, [r2, #0]
 8013fc8:	7892      	ldrb	r2, [r2, #2]
 8013fca:	8019      	strh	r1, [r3, #0]
 8013fcc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	220b      	movs	r2, #11
 8013fd2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,H,G,H,G,G,H,G,I");
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	33a4      	adds	r3, #164	; 0xa4
 8013fd8:	4a8e      	ldr	r2, [pc, #568]	; (8014214 <problem_fetch+0x12b2c>)
 8013fda:	461d      	mov	r5, r3
 8013fdc:	4614      	mov	r4, r2
 8013fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013fe0:	6028      	str	r0, [r5, #0]
 8013fe2:	6069      	str	r1, [r5, #4]
 8013fe4:	60aa      	str	r2, [r5, #8]
 8013fe6:	60eb      	str	r3, [r5, #12]
 8013fe8:	6820      	ldr	r0, [r4, #0]
 8013fea:	6128      	str	r0, [r5, #16]
 8013fec:	88a3      	ldrh	r3, [r4, #4]
 8013fee:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,6,8,10,10,13,14,15,16,17,18");
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	3304      	adds	r3, #4
 8013ff4:	4a88      	ldr	r2, [pc, #544]	; (8014218 <problem_fetch+0x12b30>)
 8013ff6:	461d      	mov	r5, r3
 8013ff8:	4614      	mov	r4, r2
 8013ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013ffc:	6028      	str	r0, [r5, #0]
 8013ffe:	6069      	str	r1, [r5, #4]
 8014000:	60aa      	str	r2, [r5, #8]
 8014002:	60eb      	str	r3, [r5, #12]
 8014004:	cc07      	ldmia	r4!, {r0, r1, r2}
 8014006:	6128      	str	r0, [r5, #16]
 8014008:	6169      	str	r1, [r5, #20]
 801400a:	61aa      	str	r2, [r5, #24]
 801400c:	8823      	ldrh	r3, [r4, #0]
 801400e:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014016:	4a81      	ldr	r2, [pc, #516]	; (801421c <problem_fetch+0x12b34>)
 8014018:	461d      	mov	r5, r3
 801401a:	4614      	mov	r4, r2
 801401c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801401e:	6028      	str	r0, [r5, #0]
 8014020:	6069      	str	r1, [r5, #4]
 8014022:	60aa      	str	r2, [r5, #8]
 8014024:	60eb      	str	r3, [r5, #12]
 8014026:	6820      	ldr	r0, [r4, #0]
 8014028:	6128      	str	r0, [r5, #16]
 801402a:	88a3      	ldrh	r3, [r4, #4]
 801402c:	82ab      	strh	r3, [r5, #20]
			break;
 801402e:	f008 ba8b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 548 :
			strcpy(p->name,"CHIAPPO");
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014038:	4979      	ldr	r1, [pc, #484]	; (8014220 <problem_fetch+0x12b38>)
 801403a:	461a      	mov	r2, r3
 801403c:	460b      	mov	r3, r1
 801403e:	cb03      	ldmia	r3!, {r0, r1}
 8014040:	6010      	str	r0, [r2, #0]
 8014042:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801404a:	4a76      	ldr	r2, [pc, #472]	; (8014224 <problem_fetch+0x12b3c>)
 801404c:	6810      	ldr	r0, [r2, #0]
 801404e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2207      	movs	r2, #7
 8014054:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,C,E,D");
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	33a4      	adds	r3, #164	; 0xa4
 801405a:	4a73      	ldr	r2, [pc, #460]	; (8014228 <problem_fetch+0x12b40>)
 801405c:	461c      	mov	r4, r3
 801405e:	4613      	mov	r3, r2
 8014060:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014062:	6020      	str	r0, [r4, #0]
 8014064:	6061      	str	r1, [r4, #4]
 8014066:	60a2      	str	r2, [r4, #8]
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,13,16,18");
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	3304      	adds	r3, #4
 8014070:	4a6e      	ldr	r2, [pc, #440]	; (801422c <problem_fetch+0x12b44>)
 8014072:	461d      	mov	r5, r3
 8014074:	4614      	mov	r4, r2
 8014076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014078:	6028      	str	r0, [r5, #0]
 801407a:	6069      	str	r1, [r5, #4]
 801407c:	60aa      	str	r2, [r5, #8]
 801407e:	60eb      	str	r3, [r5, #12]
 8014080:	8823      	ldrh	r3, [r4, #0]
 8014082:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801408a:	4a69      	ldr	r2, [pc, #420]	; (8014230 <problem_fetch+0x12b48>)
 801408c:	461c      	mov	r4, r3
 801408e:	4613      	mov	r3, r2
 8014090:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014092:	6020      	str	r0, [r4, #0]
 8014094:	6061      	str	r1, [r4, #4]
 8014096:	60a2      	str	r2, [r4, #8]
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	81a3      	strh	r3, [r4, #12]
			break;
 801409c:	f008 ba54 	b.w	801c548 <problem_fetch+0x1ae60>
		case 549 :
			strcpy(p->name,"BIFFOSMEG");
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80140a6:	4963      	ldr	r1, [pc, #396]	; (8014234 <problem_fetch+0x12b4c>)
 80140a8:	461a      	mov	r2, r3
 80140aa:	460b      	mov	r3, r1
 80140ac:	cb03      	ldmia	r3!, {r0, r1}
 80140ae:	6010      	str	r0, [r2, #0]
 80140b0:	6051      	str	r1, [r2, #4]
 80140b2:	881b      	ldrh	r3, [r3, #0]
 80140b4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80140bc:	4a54      	ldr	r2, [pc, #336]	; (8014210 <problem_fetch+0x12b28>)
 80140be:	8811      	ldrh	r1, [r2, #0]
 80140c0:	7892      	ldrb	r2, [r2, #2]
 80140c2:	8019      	strh	r1, [r3, #0]
 80140c4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2206      	movs	r2, #6
 80140ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,E,A");
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	33a4      	adds	r3, #164	; 0xa4
 80140d0:	4a59      	ldr	r2, [pc, #356]	; (8014238 <problem_fetch+0x12b50>)
 80140d2:	461c      	mov	r4, r3
 80140d4:	4613      	mov	r3, r2
 80140d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140d8:	6020      	str	r0, [r4, #0]
 80140da:	6061      	str	r1, [r4, #4]
 80140dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,13,16,18");
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	3304      	adds	r3, #4
 80140e2:	4a56      	ldr	r2, [pc, #344]	; (801423c <problem_fetch+0x12b54>)
 80140e4:	461c      	mov	r4, r3
 80140e6:	4613      	mov	r3, r2
 80140e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80140ea:	6020      	str	r0, [r4, #0]
 80140ec:	6061      	str	r1, [r4, #4]
 80140ee:	60a2      	str	r2, [r4, #8]
 80140f0:	881a      	ldrh	r2, [r3, #0]
 80140f2:	789b      	ldrb	r3, [r3, #2]
 80140f4:	81a2      	strh	r2, [r4, #12]
 80140f6:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80140fe:	4a50      	ldr	r2, [pc, #320]	; (8014240 <problem_fetch+0x12b58>)
 8014100:	461c      	mov	r4, r3
 8014102:	4613      	mov	r3, r2
 8014104:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014106:	6020      	str	r0, [r4, #0]
 8014108:	6061      	str	r1, [r4, #4]
 801410a:	60a2      	str	r2, [r4, #8]
			break;
 801410c:	f008 ba1c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 550 :
			strcpy(p->name,"HAY IS FOR HORSES");
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014116:	4a4b      	ldr	r2, [pc, #300]	; (8014244 <problem_fetch+0x12b5c>)
 8014118:	461d      	mov	r5, r3
 801411a:	4614      	mov	r4, r2
 801411c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801411e:	6028      	str	r0, [r5, #0]
 8014120:	6069      	str	r1, [r5, #4]
 8014122:	60aa      	str	r2, [r5, #8]
 8014124:	60eb      	str	r3, [r5, #12]
 8014126:	8823      	ldrh	r3, [r4, #0]
 8014128:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014130:	4a45      	ldr	r2, [pc, #276]	; (8014248 <problem_fetch+0x12b60>)
 8014132:	6810      	ldr	r0, [r2, #0]
 8014134:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	2205      	movs	r2, #5
 801413a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,D,D");
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	33a4      	adds	r3, #164	; 0xa4
 8014140:	4942      	ldr	r1, [pc, #264]	; (801424c <problem_fetch+0x12b64>)
 8014142:	461a      	mov	r2, r3
 8014144:	460b      	mov	r3, r1
 8014146:	cb03      	ldmia	r3!, {r0, r1}
 8014148:	6010      	str	r0, [r2, #0]
 801414a:	6051      	str	r1, [r2, #4]
 801414c:	881b      	ldrh	r3, [r3, #0]
 801414e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,15,18");
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3304      	adds	r3, #4
 8014154:	4a3e      	ldr	r2, [pc, #248]	; (8014250 <problem_fetch+0x12b68>)
 8014156:	461c      	mov	r4, r3
 8014158:	4613      	mov	r3, r2
 801415a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801415c:	6020      	str	r0, [r4, #0]
 801415e:	6061      	str	r1, [r4, #4]
 8014160:	60a2      	str	r2, [r4, #8]
 8014162:	881b      	ldrh	r3, [r3, #0]
 8014164:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801416c:	4939      	ldr	r1, [pc, #228]	; (8014254 <problem_fetch+0x12b6c>)
 801416e:	461a      	mov	r2, r3
 8014170:	460b      	mov	r3, r1
 8014172:	cb03      	ldmia	r3!, {r0, r1}
 8014174:	6010      	str	r0, [r2, #0]
 8014176:	6051      	str	r1, [r2, #4]
 8014178:	881b      	ldrh	r3, [r3, #0]
 801417a:	8113      	strh	r3, [r2, #8]
			break;
 801417c:	f008 b9e4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 551 :
			strcpy(p->name,"IL LADRO DI POLLI");
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014186:	4a34      	ldr	r2, [pc, #208]	; (8014258 <problem_fetch+0x12b70>)
 8014188:	461d      	mov	r5, r3
 801418a:	4614      	mov	r4, r2
 801418c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801418e:	6028      	str	r0, [r5, #0]
 8014190:	6069      	str	r1, [r5, #4]
 8014192:	60aa      	str	r2, [r5, #8]
 8014194:	60eb      	str	r3, [r5, #12]
 8014196:	8823      	ldrh	r3, [r4, #0]
 8014198:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80141a0:	4a29      	ldr	r2, [pc, #164]	; (8014248 <problem_fetch+0x12b60>)
 80141a2:	6810      	ldr	r0, [r2, #0]
 80141a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2208      	movs	r2, #8
 80141aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,J,E,E,D");
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	33a4      	adds	r3, #164	; 0xa4
 80141b0:	4a2a      	ldr	r2, [pc, #168]	; (801425c <problem_fetch+0x12b74>)
 80141b2:	461c      	mov	r4, r3
 80141b4:	4615      	mov	r5, r2
 80141b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141b8:	6020      	str	r0, [r4, #0]
 80141ba:	6061      	str	r1, [r4, #4]
 80141bc:	60a2      	str	r2, [r4, #8]
 80141be:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,7,12,16,18");
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	3304      	adds	r3, #4
 80141c4:	4a26      	ldr	r2, [pc, #152]	; (8014260 <problem_fetch+0x12b78>)
 80141c6:	461d      	mov	r5, r3
 80141c8:	4614      	mov	r4, r2
 80141ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80141cc:	6028      	str	r0, [r5, #0]
 80141ce:	6069      	str	r1, [r5, #4]
 80141d0:	60aa      	str	r2, [r5, #8]
 80141d2:	60eb      	str	r3, [r5, #12]
 80141d4:	8823      	ldrh	r3, [r4, #0]
 80141d6:	78a2      	ldrb	r2, [r4, #2]
 80141d8:	822b      	strh	r3, [r5, #16]
 80141da:	4613      	mov	r3, r2
 80141dc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80141e4:	4a1f      	ldr	r2, [pc, #124]	; (8014264 <problem_fetch+0x12b7c>)
 80141e6:	461c      	mov	r4, r3
 80141e8:	4615      	mov	r5, r2
 80141ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80141ec:	6020      	str	r0, [r4, #0]
 80141ee:	6061      	str	r1, [r4, #4]
 80141f0:	60a2      	str	r2, [r4, #8]
 80141f2:	60e3      	str	r3, [r4, #12]
			break;
 80141f4:	f008 b9a8 	b.w	801c548 <problem_fetch+0x1ae60>
 80141f8:	0802a1e4 	.word	0x0802a1e4
 80141fc:	08023a98 	.word	0x08023a98
 8014200:	0802a1fc 	.word	0x0802a1fc
 8014204:	0802a20c 	.word	0x0802a20c
 8014208:	08023b6c 	.word	0x08023b6c
 801420c:	0802a224 	.word	0x0802a224
 8014210:	08023a28 	.word	0x08023a28
 8014214:	0802a228 	.word	0x0802a228
 8014218:	0802a240 	.word	0x0802a240
 801421c:	080272bc 	.word	0x080272bc
 8014220:	0802a260 	.word	0x0802a260
 8014224:	0802395c 	.word	0x0802395c
 8014228:	0802a268 	.word	0x0802a268
 801422c:	080286a4 	.word	0x080286a4
 8014230:	08023ae4 	.word	0x08023ae4
 8014234:	0802a278 	.word	0x0802a278
 8014238:	0802a284 	.word	0x0802a284
 801423c:	0802a290 	.word	0x0802a290
 8014240:	08023cf8 	.word	0x08023cf8
 8014244:	0802a2a0 	.word	0x0802a2a0
 8014248:	080239f4 	.word	0x080239f4
 801424c:	0802a2b4 	.word	0x0802a2b4
 8014250:	0802797c 	.word	0x0802797c
 8014254:	08023e28 	.word	0x08023e28
 8014258:	0802a2c0 	.word	0x0802a2c0
 801425c:	0802a2d4 	.word	0x0802a2d4
 8014260:	0802a2e4 	.word	0x0802a2e4
 8014264:	08023a80 	.word	0x08023a80
		case 552 :
			strcpy(p->name,"EVERY WHICH WAY BUT RIGHT");
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801426e:	4ab6      	ldr	r2, [pc, #728]	; (8014548 <problem_fetch+0x12e60>)
 8014270:	461d      	mov	r5, r3
 8014272:	4614      	mov	r4, r2
 8014274:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014276:	6028      	str	r0, [r5, #0]
 8014278:	6069      	str	r1, [r5, #4]
 801427a:	60aa      	str	r2, [r5, #8]
 801427c:	60eb      	str	r3, [r5, #12]
 801427e:	cc03      	ldmia	r4!, {r0, r1}
 8014280:	6128      	str	r0, [r5, #16]
 8014282:	6169      	str	r1, [r5, #20]
 8014284:	8823      	ldrh	r3, [r4, #0]
 8014286:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801428e:	4aaf      	ldr	r2, [pc, #700]	; (801454c <problem_fetch+0x12e64>)
 8014290:	6810      	ldr	r0, [r2, #0]
 8014292:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	220a      	movs	r2, #10
 8014298:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,B,C,A,C,B,I,G,G,I");
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	33a4      	adds	r3, #164	; 0xa4
 801429e:	4aac      	ldr	r2, [pc, #688]	; (8014550 <problem_fetch+0x12e68>)
 80142a0:	461d      	mov	r5, r3
 80142a2:	4614      	mov	r4, r2
 80142a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142a6:	6028      	str	r0, [r5, #0]
 80142a8:	6069      	str	r1, [r5, #4]
 80142aa:	60aa      	str	r2, [r5, #8]
 80142ac:	60eb      	str	r3, [r5, #12]
 80142ae:	6820      	ldr	r0, [r4, #0]
 80142b0:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,9,13,15,10,15,17,18");
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	3304      	adds	r3, #4
 80142b6:	4aa7      	ldr	r2, [pc, #668]	; (8014554 <problem_fetch+0x12e6c>)
 80142b8:	461d      	mov	r5, r3
 80142ba:	4614      	mov	r4, r2
 80142bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142be:	6028      	str	r0, [r5, #0]
 80142c0:	6069      	str	r1, [r5, #4]
 80142c2:	60aa      	str	r2, [r5, #8]
 80142c4:	60eb      	str	r3, [r5, #12]
 80142c6:	cc03      	ldmia	r4!, {r0, r1}
 80142c8:	6128      	str	r0, [r5, #16]
 80142ca:	6169      	str	r1, [r5, #20]
 80142cc:	8823      	ldrh	r3, [r4, #0]
 80142ce:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,e");
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80142d6:	4aa0      	ldr	r2, [pc, #640]	; (8014558 <problem_fetch+0x12e70>)
 80142d8:	461d      	mov	r5, r3
 80142da:	4614      	mov	r4, r2
 80142dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142de:	6028      	str	r0, [r5, #0]
 80142e0:	6069      	str	r1, [r5, #4]
 80142e2:	60aa      	str	r2, [r5, #8]
 80142e4:	60eb      	str	r3, [r5, #12]
 80142e6:	6820      	ldr	r0, [r4, #0]
 80142e8:	6128      	str	r0, [r5, #16]
			break;
 80142ea:	f008 b92d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 553 :
			strcpy(p->name,"180 CAMPUS");
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80142f4:	4999      	ldr	r1, [pc, #612]	; (801455c <problem_fetch+0x12e74>)
 80142f6:	461a      	mov	r2, r3
 80142f8:	460b      	mov	r3, r1
 80142fa:	cb03      	ldmia	r3!, {r0, r1}
 80142fc:	6010      	str	r0, [r2, #0]
 80142fe:	6051      	str	r1, [r2, #4]
 8014300:	8819      	ldrh	r1, [r3, #0]
 8014302:	789b      	ldrb	r3, [r3, #2]
 8014304:	8111      	strh	r1, [r2, #8]
 8014306:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801430e:	4a94      	ldr	r2, [pc, #592]	; (8014560 <problem_fetch+0x12e78>)
 8014310:	8811      	ldrh	r1, [r2, #0]
 8014312:	7892      	ldrb	r2, [r2, #2]
 8014314:	8019      	strh	r1, [r3, #0]
 8014316:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2205      	movs	r2, #5
 801431c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,I,D");
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	33a4      	adds	r3, #164	; 0xa4
 8014322:	4990      	ldr	r1, [pc, #576]	; (8014564 <problem_fetch+0x12e7c>)
 8014324:	461a      	mov	r2, r3
 8014326:	460b      	mov	r3, r1
 8014328:	cb03      	ldmia	r3!, {r0, r1}
 801432a:	6010      	str	r0, [r2, #0]
 801432c:	6051      	str	r1, [r2, #4]
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,13,14,18");
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	3304      	adds	r3, #4
 8014336:	4a8c      	ldr	r2, [pc, #560]	; (8014568 <problem_fetch+0x12e80>)
 8014338:	461c      	mov	r4, r3
 801433a:	4613      	mov	r3, r2
 801433c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801433e:	6020      	str	r0, [r4, #0]
 8014340:	6061      	str	r1, [r4, #4]
 8014342:	60a2      	str	r2, [r4, #8]
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801434e:	4987      	ldr	r1, [pc, #540]	; (801456c <problem_fetch+0x12e84>)
 8014350:	461a      	mov	r2, r3
 8014352:	460b      	mov	r3, r1
 8014354:	cb03      	ldmia	r3!, {r0, r1}
 8014356:	6010      	str	r0, [r2, #0]
 8014358:	6051      	str	r1, [r2, #4]
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	8113      	strh	r3, [r2, #8]
			break;
 801435e:	f008 b8f3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 554 :
			strcpy(p->name,"JOHNNY REHAB 4");
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014368:	4a81      	ldr	r2, [pc, #516]	; (8014570 <problem_fetch+0x12e88>)
 801436a:	461c      	mov	r4, r3
 801436c:	4613      	mov	r3, r2
 801436e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014370:	6020      	str	r0, [r4, #0]
 8014372:	6061      	str	r1, [r4, #4]
 8014374:	60a2      	str	r2, [r4, #8]
 8014376:	881a      	ldrh	r2, [r3, #0]
 8014378:	789b      	ldrb	r3, [r3, #2]
 801437a:	81a2      	strh	r2, [r4, #12]
 801437c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014384:	4a7b      	ldr	r2, [pc, #492]	; (8014574 <problem_fetch+0x12e8c>)
 8014386:	6810      	ldr	r0, [r2, #0]
 8014388:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2209      	movs	r2, #9
 801438e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,K,J,I,E,J,D");
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	33a4      	adds	r3, #164	; 0xa4
 8014394:	4a78      	ldr	r2, [pc, #480]	; (8014578 <problem_fetch+0x12e90>)
 8014396:	461d      	mov	r5, r3
 8014398:	4614      	mov	r4, r2
 801439a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801439c:	6028      	str	r0, [r5, #0]
 801439e:	6069      	str	r1, [r5, #4]
 80143a0:	60aa      	str	r2, [r5, #8]
 80143a2:	60eb      	str	r3, [r5, #12]
 80143a4:	8823      	ldrh	r3, [r4, #0]
 80143a6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,10,9,12,14,8,16,18");
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	3304      	adds	r3, #4
 80143ac:	4a73      	ldr	r2, [pc, #460]	; (801457c <problem_fetch+0x12e94>)
 80143ae:	461c      	mov	r4, r3
 80143b0:	4615      	mov	r5, r2
 80143b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143b4:	6020      	str	r0, [r4, #0]
 80143b6:	6061      	str	r1, [r4, #4]
 80143b8:	60a2      	str	r2, [r4, #8]
 80143ba:	60e3      	str	r3, [r4, #12]
 80143bc:	6828      	ldr	r0, [r5, #0]
 80143be:	6120      	str	r0, [r4, #16]
 80143c0:	88ab      	ldrh	r3, [r5, #4]
 80143c2:	79aa      	ldrb	r2, [r5, #6]
 80143c4:	82a3      	strh	r3, [r4, #20]
 80143c6:	4613      	mov	r3, r2
 80143c8:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80143d0:	4a6b      	ldr	r2, [pc, #428]	; (8014580 <problem_fetch+0x12e98>)
 80143d2:	461d      	mov	r5, r3
 80143d4:	4614      	mov	r4, r2
 80143d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80143d8:	6028      	str	r0, [r5, #0]
 80143da:	6069      	str	r1, [r5, #4]
 80143dc:	60aa      	str	r2, [r5, #8]
 80143de:	60eb      	str	r3, [r5, #12]
 80143e0:	8823      	ldrh	r3, [r4, #0]
 80143e2:	822b      	strh	r3, [r5, #16]
			break;
 80143e4:	f008 b8b0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 555 :
			strcpy(p->name,"FULCRO HARD");
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80143ee:	4a65      	ldr	r2, [pc, #404]	; (8014584 <problem_fetch+0x12e9c>)
 80143f0:	461c      	mov	r4, r3
 80143f2:	4613      	mov	r3, r2
 80143f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80143f6:	6020      	str	r0, [r4, #0]
 80143f8:	6061      	str	r1, [r4, #4]
 80143fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C");
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014402:	4a61      	ldr	r2, [pc, #388]	; (8014588 <problem_fetch+0x12ea0>)
 8014404:	8811      	ldrh	r1, [r2, #0]
 8014406:	7892      	ldrb	r2, [r2, #2]
 8014408:	8019      	strh	r1, [r3, #0]
 801440a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2206      	movs	r2, #6
 8014410:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,E,D");
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	33a4      	adds	r3, #164	; 0xa4
 8014416:	4a5d      	ldr	r2, [pc, #372]	; (801458c <problem_fetch+0x12ea4>)
 8014418:	461c      	mov	r4, r3
 801441a:	4613      	mov	r3, r2
 801441c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801441e:	6020      	str	r0, [r4, #0]
 8014420:	6061      	str	r1, [r4, #4]
 8014422:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,9,11,16,18");
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	3304      	adds	r3, #4
 8014428:	4a59      	ldr	r2, [pc, #356]	; (8014590 <problem_fetch+0x12ea8>)
 801442a:	461c      	mov	r4, r3
 801442c:	4613      	mov	r3, r2
 801442e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014430:	6020      	str	r0, [r4, #0]
 8014432:	6061      	str	r1, [r4, #4]
 8014434:	60a2      	str	r2, [r4, #8]
 8014436:	881a      	ldrh	r2, [r3, #0]
 8014438:	789b      	ldrb	r3, [r3, #2]
 801443a:	81a2      	strh	r2, [r4, #12]
 801443c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014444:	4a53      	ldr	r2, [pc, #332]	; (8014594 <problem_fetch+0x12eac>)
 8014446:	461c      	mov	r4, r3
 8014448:	4613      	mov	r3, r2
 801444a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801444c:	6020      	str	r0, [r4, #0]
 801444e:	6061      	str	r1, [r4, #4]
 8014450:	60a2      	str	r2, [r4, #8]
			break;
 8014452:	f008 b879 	b.w	801c548 <problem_fetch+0x1ae60>
		case 556 :
			strcpy(p->name,"FORSØK 15");
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801445c:	494e      	ldr	r1, [pc, #312]	; (8014598 <problem_fetch+0x12eb0>)
 801445e:	461a      	mov	r2, r3
 8014460:	460b      	mov	r3, r1
 8014462:	cb03      	ldmia	r3!, {r0, r1}
 8014464:	6010      	str	r0, [r2, #0]
 8014466:	6051      	str	r1, [r2, #4]
 8014468:	8819      	ldrh	r1, [r3, #0]
 801446a:	789b      	ldrb	r3, [r3, #2]
 801446c:	8111      	strh	r1, [r2, #8]
 801446e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014476:	4a3f      	ldr	r2, [pc, #252]	; (8014574 <problem_fetch+0x12e8c>)
 8014478:	6810      	ldr	r0, [r2, #0]
 801447a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	2207      	movs	r2, #7
 8014480:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	33a4      	adds	r3, #164	; 0xa4
 8014486:	4a45      	ldr	r2, [pc, #276]	; (801459c <problem_fetch+0x12eb4>)
 8014488:	461c      	mov	r4, r3
 801448a:	4613      	mov	r3, r2
 801448c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801448e:	6020      	str	r0, [r4, #0]
 8014490:	6061      	str	r1, [r4, #4]
 8014492:	60a2      	str	r2, [r4, #8]
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	3304      	adds	r3, #4
 801449c:	4a40      	ldr	r2, [pc, #256]	; (80145a0 <problem_fetch+0x12eb8>)
 801449e:	461d      	mov	r5, r3
 80144a0:	4614      	mov	r4, r2
 80144a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144a4:	6028      	str	r0, [r5, #0]
 80144a6:	6069      	str	r1, [r5, #4]
 80144a8:	60aa      	str	r2, [r5, #8]
 80144aa:	60eb      	str	r3, [r5, #12]
 80144ac:	8823      	ldrh	r3, [r4, #0]
 80144ae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80144b6:	4a3b      	ldr	r2, [pc, #236]	; (80145a4 <problem_fetch+0x12ebc>)
 80144b8:	461c      	mov	r4, r3
 80144ba:	4613      	mov	r3, r2
 80144bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80144be:	6020      	str	r0, [r4, #0]
 80144c0:	6061      	str	r1, [r4, #4]
 80144c2:	60a2      	str	r2, [r4, #8]
 80144c4:	881b      	ldrh	r3, [r3, #0]
 80144c6:	81a3      	strh	r3, [r4, #12]
			break;
 80144c8:	f008 b83e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 557 :
			strcpy(p->name,"ALEXS PROBLEM NUMBER ONE");
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80144d2:	4a35      	ldr	r2, [pc, #212]	; (80145a8 <problem_fetch+0x12ec0>)
 80144d4:	461d      	mov	r5, r3
 80144d6:	4614      	mov	r4, r2
 80144d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144da:	6028      	str	r0, [r5, #0]
 80144dc:	6069      	str	r1, [r5, #4]
 80144de:	60aa      	str	r2, [r5, #8]
 80144e0:	60eb      	str	r3, [r5, #12]
 80144e2:	cc03      	ldmia	r4!, {r0, r1}
 80144e4:	6128      	str	r0, [r5, #16]
 80144e6:	6169      	str	r1, [r5, #20]
 80144e8:	7823      	ldrb	r3, [r4, #0]
 80144ea:	762b      	strb	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80144f2:	4a2e      	ldr	r2, [pc, #184]	; (80145ac <problem_fetch+0x12ec4>)
 80144f4:	6810      	ldr	r0, [r2, #0]
 80144f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2208      	movs	r2, #8
 80144fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,B,E,A,D,D");
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	33a4      	adds	r3, #164	; 0xa4
 8014502:	4a2b      	ldr	r2, [pc, #172]	; (80145b0 <problem_fetch+0x12ec8>)
 8014504:	461c      	mov	r4, r3
 8014506:	4615      	mov	r5, r2
 8014508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801450a:	6020      	str	r0, [r4, #0]
 801450c:	6061      	str	r1, [r4, #4]
 801450e:	60a2      	str	r2, [r4, #8]
 8014510:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,12,14,15,18");
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	3304      	adds	r3, #4
 8014516:	4a27      	ldr	r2, [pc, #156]	; (80145b4 <problem_fetch+0x12ecc>)
 8014518:	461d      	mov	r5, r3
 801451a:	4614      	mov	r4, r2
 801451c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801451e:	6028      	str	r0, [r5, #0]
 8014520:	6069      	str	r1, [r5, #4]
 8014522:	60aa      	str	r2, [r5, #8]
 8014524:	60eb      	str	r3, [r5, #12]
 8014526:	6820      	ldr	r0, [r4, #0]
 8014528:	6128      	str	r0, [r5, #16]
 801452a:	7923      	ldrb	r3, [r4, #4]
 801452c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014534:	4a20      	ldr	r2, [pc, #128]	; (80145b8 <problem_fetch+0x12ed0>)
 8014536:	461c      	mov	r4, r3
 8014538:	4615      	mov	r5, r2
 801453a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801453c:	6020      	str	r0, [r4, #0]
 801453e:	6061      	str	r1, [r4, #4]
 8014540:	60a2      	str	r2, [r4, #8]
 8014542:	60e3      	str	r3, [r4, #12]
			break;
 8014544:	f008 b800 	b.w	801c548 <problem_fetch+0x1ae60>
 8014548:	0802a2f8 	.word	0x0802a2f8
 801454c:	08023afc 	.word	0x08023afc
 8014550:	0802a314 	.word	0x0802a314
 8014554:	0802a328 	.word	0x0802a328
 8014558:	08024cb4 	.word	0x08024cb4
 801455c:	0802a344 	.word	0x0802a344
 8014560:	0802391c 	.word	0x0802391c
 8014564:	0802a350 	.word	0x0802a350
 8014568:	08025598 	.word	0x08025598
 801456c:	08023e28 	.word	0x08023e28
 8014570:	0802a35c 	.word	0x0802a35c
 8014574:	080239f4 	.word	0x080239f4
 8014578:	0802a36c 	.word	0x0802a36c
 801457c:	0802a380 	.word	0x0802a380
 8014580:	08024940 	.word	0x08024940
 8014584:	0802a398 	.word	0x0802a398
 8014588:	08024190 	.word	0x08024190
 801458c:	0802a3a4 	.word	0x0802a3a4
 8014590:	08023cc0 	.word	0x08023cc0
 8014594:	0802393c 	.word	0x0802393c
 8014598:	0802a3b0 	.word	0x0802a3b0
 801459c:	0802a3bc 	.word	0x0802a3bc
 80145a0:	08028644 	.word	0x08028644
 80145a4:	08023ae4 	.word	0x08023ae4
 80145a8:	0802a3cc 	.word	0x0802a3cc
 80145ac:	0802395c 	.word	0x0802395c
 80145b0:	0802a3e8 	.word	0x0802a3e8
 80145b4:	0802a3f8 	.word	0x0802a3f8
 80145b8:	08023a80 	.word	0x08023a80
		case 558 :
			strcpy(p->name,"BLABLUB");
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80145c2:	49ab      	ldr	r1, [pc, #684]	; (8014870 <problem_fetch+0x13188>)
 80145c4:	461a      	mov	r2, r3
 80145c6:	460b      	mov	r3, r1
 80145c8:	cb03      	ldmia	r3!, {r0, r1}
 80145ca:	6010      	str	r0, [r2, #0]
 80145cc:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80145d4:	4aa7      	ldr	r2, [pc, #668]	; (8014874 <problem_fetch+0x1318c>)
 80145d6:	8811      	ldrh	r1, [r2, #0]
 80145d8:	7892      	ldrb	r2, [r2, #2]
 80145da:	8019      	strh	r1, [r3, #0]
 80145dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2207      	movs	r2, #7
 80145e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,E,A,D,D");
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	33a4      	adds	r3, #164	; 0xa4
 80145e8:	4aa3      	ldr	r2, [pc, #652]	; (8014878 <problem_fetch+0x13190>)
 80145ea:	461c      	mov	r4, r3
 80145ec:	4613      	mov	r3, r2
 80145ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80145f0:	6020      	str	r0, [r4, #0]
 80145f2:	6061      	str	r1, [r4, #4]
 80145f4:	60a2      	str	r2, [r4, #8]
 80145f6:	881b      	ldrh	r3, [r3, #0]
 80145f8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,10,12,14,15,18");
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	3304      	adds	r3, #4
 80145fe:	4a9f      	ldr	r2, [pc, #636]	; (801487c <problem_fetch+0x13194>)
 8014600:	461d      	mov	r5, r3
 8014602:	4614      	mov	r4, r2
 8014604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014606:	6028      	str	r0, [r5, #0]
 8014608:	6069      	str	r1, [r5, #4]
 801460a:	60aa      	str	r2, [r5, #8]
 801460c:	60eb      	str	r3, [r5, #12]
 801460e:	8823      	ldrh	r3, [r4, #0]
 8014610:	78a2      	ldrb	r2, [r4, #2]
 8014612:	822b      	strh	r3, [r5, #16]
 8014614:	4613      	mov	r3, r2
 8014616:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801461e:	4a98      	ldr	r2, [pc, #608]	; (8014880 <problem_fetch+0x13198>)
 8014620:	461c      	mov	r4, r3
 8014622:	4613      	mov	r3, r2
 8014624:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014626:	6020      	str	r0, [r4, #0]
 8014628:	6061      	str	r1, [r4, #4]
 801462a:	60a2      	str	r2, [r4, #8]
 801462c:	881b      	ldrh	r3, [r3, #0]
 801462e:	81a3      	strh	r3, [r4, #12]
			break;
 8014630:	f007 bf8a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 559 :
			strcpy(p->name,"CRANK IT UP A NOTCH!");
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801463a:	4a92      	ldr	r2, [pc, #584]	; (8014884 <problem_fetch+0x1319c>)
 801463c:	461d      	mov	r5, r3
 801463e:	4614      	mov	r4, r2
 8014640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014642:	6028      	str	r0, [r5, #0]
 8014644:	6069      	str	r1, [r5, #4]
 8014646:	60aa      	str	r2, [r5, #8]
 8014648:	60eb      	str	r3, [r5, #12]
 801464a:	6820      	ldr	r0, [r4, #0]
 801464c:	6128      	str	r0, [r5, #16]
 801464e:	7923      	ldrb	r3, [r4, #4]
 8014650:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014658:	4a8b      	ldr	r2, [pc, #556]	; (8014888 <problem_fetch+0x131a0>)
 801465a:	6810      	ldr	r0, [r2, #0]
 801465c:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	2204      	movs	r2, #4
 8014662:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,F,C,D");
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	33a4      	adds	r3, #164	; 0xa4
 8014668:	4988      	ldr	r1, [pc, #544]	; (801488c <problem_fetch+0x131a4>)
 801466a:	461a      	mov	r2, r3
 801466c:	460b      	mov	r3, r1
 801466e:	cb03      	ldmia	r3!, {r0, r1}
 8014670:	6010      	str	r0, [r2, #0]
 8014672:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,11,13,18");
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	3304      	adds	r3, #4
 8014678:	4985      	ldr	r1, [pc, #532]	; (8014890 <problem_fetch+0x131a8>)
 801467a:	461a      	mov	r2, r3
 801467c:	460b      	mov	r3, r1
 801467e:	cb03      	ldmia	r3!, {r0, r1}
 8014680:	6010      	str	r0, [r2, #0]
 8014682:	6051      	str	r1, [r2, #4]
 8014684:	8819      	ldrh	r1, [r3, #0]
 8014686:	789b      	ldrb	r3, [r3, #2]
 8014688:	8111      	strh	r1, [r2, #8]
 801468a:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014692:	4980      	ldr	r1, [pc, #512]	; (8014894 <problem_fetch+0x131ac>)
 8014694:	461a      	mov	r2, r3
 8014696:	460b      	mov	r3, r1
 8014698:	cb03      	ldmia	r3!, {r0, r1}
 801469a:	6010      	str	r0, [r2, #0]
 801469c:	6051      	str	r1, [r2, #4]
			break;
 801469e:	f007 bf53 	b.w	801c548 <problem_fetch+0x1ae60>
		case 560 :
			strcpy(p->name,"HOLY IWAN");
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80146a8:	497b      	ldr	r1, [pc, #492]	; (8014898 <problem_fetch+0x131b0>)
 80146aa:	461a      	mov	r2, r3
 80146ac:	460b      	mov	r3, r1
 80146ae:	cb03      	ldmia	r3!, {r0, r1}
 80146b0:	6010      	str	r0, [r2, #0]
 80146b2:	6051      	str	r1, [r2, #4]
 80146b4:	881b      	ldrh	r3, [r3, #0]
 80146b6:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80146be:	4a77      	ldr	r2, [pc, #476]	; (801489c <problem_fetch+0x131b4>)
 80146c0:	6810      	ldr	r0, [r2, #0]
 80146c2:	6018      	str	r0, [r3, #0]
			p->moveSize = 10;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	220a      	movs	r2, #10
 80146c8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,C,B,E,C,D,C,D");
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	33a4      	adds	r3, #164	; 0xa4
 80146ce:	4a74      	ldr	r2, [pc, #464]	; (80148a0 <problem_fetch+0x131b8>)
 80146d0:	461d      	mov	r5, r3
 80146d2:	4614      	mov	r4, r2
 80146d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146d6:	6028      	str	r0, [r5, #0]
 80146d8:	6069      	str	r1, [r5, #4]
 80146da:	60aa      	str	r2, [r5, #8]
 80146dc:	60eb      	str	r3, [r5, #12]
 80146de:	6820      	ldr	r0, [r4, #0]
 80146e0:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,6,8,8,10,12,13,15,16,18");
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	3304      	adds	r3, #4
 80146e6:	4a6f      	ldr	r2, [pc, #444]	; (80148a4 <problem_fetch+0x131bc>)
 80146e8:	461d      	mov	r5, r3
 80146ea:	4614      	mov	r4, r2
 80146ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146ee:	6028      	str	r0, [r5, #0]
 80146f0:	6069      	str	r1, [r5, #4]
 80146f2:	60aa      	str	r2, [r5, #8]
 80146f4:	60eb      	str	r3, [r5, #12]
 80146f6:	cc03      	ldmia	r4!, {r0, r1}
 80146f8:	6128      	str	r0, [r5, #16]
 80146fa:	6169      	str	r1, [r5, #20]
 80146fc:	8823      	ldrh	r3, [r4, #0]
 80146fe:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014706:	4a68      	ldr	r2, [pc, #416]	; (80148a8 <problem_fetch+0x131c0>)
 8014708:	461d      	mov	r5, r3
 801470a:	4614      	mov	r4, r2
 801470c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801470e:	6028      	str	r0, [r5, #0]
 8014710:	6069      	str	r1, [r5, #4]
 8014712:	60aa      	str	r2, [r5, #8]
 8014714:	60eb      	str	r3, [r5, #12]
 8014716:	6820      	ldr	r0, [r4, #0]
 8014718:	6128      	str	r0, [r5, #16]
			break;
 801471a:	f007 bf15 	b.w	801c548 <problem_fetch+0x1ae60>
		case 561 :
			strcpy(p->name,"BLACK HOLE SUN");
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014724:	4a61      	ldr	r2, [pc, #388]	; (80148ac <problem_fetch+0x131c4>)
 8014726:	461c      	mov	r4, r3
 8014728:	4613      	mov	r3, r2
 801472a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801472c:	6020      	str	r0, [r4, #0]
 801472e:	6061      	str	r1, [r4, #4]
 8014730:	60a2      	str	r2, [r4, #8]
 8014732:	881a      	ldrh	r2, [r3, #0]
 8014734:	789b      	ldrb	r3, [r3, #2]
 8014736:	81a2      	strh	r2, [r4, #12]
 8014738:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014740:	4a5b      	ldr	r2, [pc, #364]	; (80148b0 <problem_fetch+0x131c8>)
 8014742:	8811      	ldrh	r1, [r2, #0]
 8014744:	7892      	ldrb	r2, [r2, #2]
 8014746:	8019      	strh	r1, [r3, #0]
 8014748:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2206      	movs	r2, #6
 801474e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,C,B,A");
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	33a4      	adds	r3, #164	; 0xa4
 8014754:	4a57      	ldr	r2, [pc, #348]	; (80148b4 <problem_fetch+0x131cc>)
 8014756:	461c      	mov	r4, r3
 8014758:	4613      	mov	r3, r2
 801475a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801475c:	6020      	str	r0, [r4, #0]
 801475e:	6061      	str	r1, [r4, #4]
 8014760:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,15,18");
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3304      	adds	r3, #4
 8014766:	4a54      	ldr	r2, [pc, #336]	; (80148b8 <problem_fetch+0x131d0>)
 8014768:	461c      	mov	r4, r3
 801476a:	4615      	mov	r5, r2
 801476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801476e:	6020      	str	r0, [r4, #0]
 8014770:	6061      	str	r1, [r4, #4]
 8014772:	60a2      	str	r2, [r4, #8]
 8014774:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801477c:	4a4f      	ldr	r2, [pc, #316]	; (80148bc <problem_fetch+0x131d4>)
 801477e:	461c      	mov	r4, r3
 8014780:	4613      	mov	r3, r2
 8014782:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014784:	6020      	str	r0, [r4, #0]
 8014786:	6061      	str	r1, [r4, #4]
 8014788:	60a2      	str	r2, [r4, #8]
			break;
 801478a:	f007 bedd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 562 :
			strcpy(p->name,"모리");
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014794:	4a4a      	ldr	r2, [pc, #296]	; (80148c0 <problem_fetch+0x131d8>)
 8014796:	6810      	ldr	r0, [r2, #0]
 8014798:	6018      	str	r0, [r3, #0]
 801479a:	8891      	ldrh	r1, [r2, #4]
 801479c:	7992      	ldrb	r2, [r2, #6]
 801479e:	8099      	strh	r1, [r3, #4]
 80147a0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80147a8:	4a46      	ldr	r2, [pc, #280]	; (80148c4 <problem_fetch+0x131dc>)
 80147aa:	6810      	ldr	r0, [r2, #0]
 80147ac:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2207      	movs	r2, #7
 80147b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,B,D,E,I");
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	33a4      	adds	r3, #164	; 0xa4
 80147b8:	4a43      	ldr	r2, [pc, #268]	; (80148c8 <problem_fetch+0x131e0>)
 80147ba:	461c      	mov	r4, r3
 80147bc:	4613      	mov	r3, r2
 80147be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80147c0:	6020      	str	r0, [r4, #0]
 80147c2:	6061      	str	r1, [r4, #4]
 80147c4:	60a2      	str	r2, [r4, #8]
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,15,16,18");
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	3304      	adds	r3, #4
 80147ce:	4a3f      	ldr	r2, [pc, #252]	; (80148cc <problem_fetch+0x131e4>)
 80147d0:	461d      	mov	r5, r3
 80147d2:	4614      	mov	r4, r2
 80147d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80147d6:	6028      	str	r0, [r5, #0]
 80147d8:	6069      	str	r1, [r5, #4]
 80147da:	60aa      	str	r2, [r5, #8]
 80147dc:	60eb      	str	r3, [r5, #12]
 80147de:	8823      	ldrh	r3, [r4, #0]
 80147e0:	78a2      	ldrb	r2, [r4, #2]
 80147e2:	822b      	strh	r3, [r5, #16]
 80147e4:	4613      	mov	r3, r2
 80147e6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80147ee:	4a38      	ldr	r2, [pc, #224]	; (80148d0 <problem_fetch+0x131e8>)
 80147f0:	461c      	mov	r4, r3
 80147f2:	4613      	mov	r3, r2
 80147f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80147f6:	6020      	str	r0, [r4, #0]
 80147f8:	6061      	str	r1, [r4, #4]
 80147fa:	60a2      	str	r2, [r4, #8]
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	81a3      	strh	r3, [r4, #12]
			break;
 8014800:	f007 bea2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 563 :
			strcpy(p->name,"DAN1");
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801480a:	4a32      	ldr	r2, [pc, #200]	; (80148d4 <problem_fetch+0x131ec>)
 801480c:	6810      	ldr	r0, [r2, #0]
 801480e:	6018      	str	r0, [r3, #0]
 8014810:	7912      	ldrb	r2, [r2, #4]
 8014812:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801481a:	4a2a      	ldr	r2, [pc, #168]	; (80148c4 <problem_fetch+0x131dc>)
 801481c:	6810      	ldr	r0, [r2, #0]
 801481e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2208      	movs	r2, #8
 8014824:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,E,C,D,D");
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	33a4      	adds	r3, #164	; 0xa4
 801482a:	4a2b      	ldr	r2, [pc, #172]	; (80148d8 <problem_fetch+0x131f0>)
 801482c:	461c      	mov	r4, r3
 801482e:	4615      	mov	r5, r2
 8014830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014832:	6020      	str	r0, [r4, #0]
 8014834:	6061      	str	r1, [r4, #4]
 8014836:	60a2      	str	r2, [r4, #8]
 8014838:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,12,13,15,18");
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	3304      	adds	r3, #4
 801483e:	4a27      	ldr	r2, [pc, #156]	; (80148dc <problem_fetch+0x131f4>)
 8014840:	461d      	mov	r5, r3
 8014842:	4614      	mov	r4, r2
 8014844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014846:	6028      	str	r0, [r5, #0]
 8014848:	6069      	str	r1, [r5, #4]
 801484a:	60aa      	str	r2, [r5, #8]
 801484c:	60eb      	str	r3, [r5, #12]
 801484e:	6820      	ldr	r0, [r4, #0]
 8014850:	6128      	str	r0, [r5, #16]
 8014852:	7923      	ldrb	r3, [r4, #4]
 8014854:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801485c:	4a20      	ldr	r2, [pc, #128]	; (80148e0 <problem_fetch+0x131f8>)
 801485e:	461c      	mov	r4, r3
 8014860:	4615      	mov	r5, r2
 8014862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014864:	6020      	str	r0, [r4, #0]
 8014866:	6061      	str	r1, [r4, #4]
 8014868:	60a2      	str	r2, [r4, #8]
 801486a:	60e3      	str	r3, [r4, #12]
			break;
 801486c:	f007 be6c 	b.w	801c548 <problem_fetch+0x1ae60>
 8014870:	0802a410 	.word	0x0802a410
 8014874:	08023a28 	.word	0x08023a28
 8014878:	0802a418 	.word	0x0802a418
 801487c:	0802a428 	.word	0x0802a428
 8014880:	080239d4 	.word	0x080239d4
 8014884:	0802a43c 	.word	0x0802a43c
 8014888:	08023afc 	.word	0x08023afc
 801488c:	0802a454 	.word	0x0802a454
 8014890:	0802a45c 	.word	0x0802a45c
 8014894:	08023ab0 	.word	0x08023ab0
 8014898:	0802a468 	.word	0x0802a468
 801489c:	0802395c 	.word	0x0802395c
 80148a0:	0802a474 	.word	0x0802a474
 80148a4:	0802a488 	.word	0x0802a488
 80148a8:	08024204 	.word	0x08024204
 80148ac:	0802a4a4 	.word	0x0802a4a4
 80148b0:	0802391c 	.word	0x0802391c
 80148b4:	0802a4b4 	.word	0x0802a4b4
 80148b8:	0802a4c0 	.word	0x0802a4c0
 80148bc:	08023cf8 	.word	0x08023cf8
 80148c0:	0802a4d0 	.word	0x0802a4d0
 80148c4:	080239f4 	.word	0x080239f4
 80148c8:	0802a4d8 	.word	0x0802a4d8
 80148cc:	0802a4e8 	.word	0x0802a4e8
 80148d0:	08023ae4 	.word	0x08023ae4
 80148d4:	0802a4fc 	.word	0x0802a4fc
 80148d8:	0802a504 	.word	0x0802a504
 80148dc:	0802a514 	.word	0x0802a514
 80148e0:	08023b6c 	.word	0x08023b6c
		case 564 :
			strcpy(p->name,"BLACK DOJO");
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80148ea:	49b0      	ldr	r1, [pc, #704]	; (8014bac <problem_fetch+0x134c4>)
 80148ec:	461a      	mov	r2, r3
 80148ee:	460b      	mov	r3, r1
 80148f0:	cb03      	ldmia	r3!, {r0, r1}
 80148f2:	6010      	str	r0, [r2, #0]
 80148f4:	6051      	str	r1, [r2, #4]
 80148f6:	8819      	ldrh	r1, [r3, #0]
 80148f8:	789b      	ldrb	r3, [r3, #2]
 80148fa:	8111      	strh	r1, [r2, #8]
 80148fc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014904:	4aaa      	ldr	r2, [pc, #680]	; (8014bb0 <problem_fetch+0x134c8>)
 8014906:	8811      	ldrh	r1, [r2, #0]
 8014908:	7892      	ldrb	r2, [r2, #2]
 801490a:	8019      	strh	r1, [r3, #0]
 801490c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2206      	movs	r2, #6
 8014912:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,E,F,B,A");
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	33a4      	adds	r3, #164	; 0xa4
 8014918:	4aa6      	ldr	r2, [pc, #664]	; (8014bb4 <problem_fetch+0x134cc>)
 801491a:	461c      	mov	r4, r3
 801491c:	4613      	mov	r3, r2
 801491e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014920:	6020      	str	r0, [r4, #0]
 8014922:	6061      	str	r1, [r4, #4]
 8014924:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,16,11,10,18");
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3304      	adds	r3, #4
 801492a:	4aa3      	ldr	r2, [pc, #652]	; (8014bb8 <problem_fetch+0x134d0>)
 801492c:	461c      	mov	r4, r3
 801492e:	4615      	mov	r5, r2
 8014930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014932:	6020      	str	r0, [r4, #0]
 8014934:	6061      	str	r1, [r4, #4]
 8014936:	60a2      	str	r2, [r4, #8]
 8014938:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014940:	4a9e      	ldr	r2, [pc, #632]	; (8014bbc <problem_fetch+0x134d4>)
 8014942:	461c      	mov	r4, r3
 8014944:	4613      	mov	r3, r2
 8014946:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014948:	6020      	str	r0, [r4, #0]
 801494a:	6061      	str	r1, [r4, #4]
 801494c:	60a2      	str	r2, [r4, #8]
			break;
 801494e:	f007 bdfb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 565 :
			strcpy(p->name,"SIMON");
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014958:	4a99      	ldr	r2, [pc, #612]	; (8014bc0 <problem_fetch+0x134d8>)
 801495a:	6810      	ldr	r0, [r2, #0]
 801495c:	6018      	str	r0, [r3, #0]
 801495e:	8892      	ldrh	r2, [r2, #4]
 8014960:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7C+");
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014968:	4a96      	ldr	r2, [pc, #600]	; (8014bc4 <problem_fetch+0x134dc>)
 801496a:	6810      	ldr	r0, [r2, #0]
 801496c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2207      	movs	r2, #7
 8014972:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,I,F,B,G,A");
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	33a4      	adds	r3, #164	; 0xa4
 8014978:	4a93      	ldr	r2, [pc, #588]	; (8014bc8 <problem_fetch+0x134e0>)
 801497a:	461c      	mov	r4, r3
 801497c:	4613      	mov	r3, r2
 801497e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014980:	6020      	str	r0, [r4, #0]
 8014982:	6061      	str	r1, [r4, #4]
 8014984:	60a2      	str	r2, [r4, #8]
 8014986:	881b      	ldrh	r3, [r3, #0]
 8014988:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,11,12,17,18");
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	3304      	adds	r3, #4
 801498e:	4a8f      	ldr	r2, [pc, #572]	; (8014bcc <problem_fetch+0x134e4>)
 8014990:	461d      	mov	r5, r3
 8014992:	4614      	mov	r4, r2
 8014994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014996:	6028      	str	r0, [r5, #0]
 8014998:	6069      	str	r1, [r5, #4]
 801499a:	60aa      	str	r2, [r5, #8]
 801499c:	60eb      	str	r3, [r5, #12]
 801499e:	8823      	ldrh	r3, [r4, #0]
 80149a0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80149a8:	4a89      	ldr	r2, [pc, #548]	; (8014bd0 <problem_fetch+0x134e8>)
 80149aa:	461c      	mov	r4, r3
 80149ac:	4613      	mov	r3, r2
 80149ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80149b0:	6020      	str	r0, [r4, #0]
 80149b2:	6061      	str	r1, [r4, #4]
 80149b4:	60a2      	str	r2, [r4, #8]
 80149b6:	881b      	ldrh	r3, [r3, #0]
 80149b8:	81a3      	strh	r3, [r4, #12]
			break;
 80149ba:	f007 bdc5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 566 :
			strcpy(p->name,"BLACK HOLDS MATTER");
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80149c4:	4a83      	ldr	r2, [pc, #524]	; (8014bd4 <problem_fetch+0x134ec>)
 80149c6:	461d      	mov	r5, r3
 80149c8:	4614      	mov	r4, r2
 80149ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80149cc:	6028      	str	r0, [r5, #0]
 80149ce:	6069      	str	r1, [r5, #4]
 80149d0:	60aa      	str	r2, [r5, #8]
 80149d2:	60eb      	str	r3, [r5, #12]
 80149d4:	8823      	ldrh	r3, [r4, #0]
 80149d6:	78a2      	ldrb	r2, [r4, #2]
 80149d8:	822b      	strh	r3, [r5, #16]
 80149da:	4613      	mov	r3, r2
 80149dc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6C");
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80149e4:	4a7c      	ldr	r2, [pc, #496]	; (8014bd8 <problem_fetch+0x134f0>)
 80149e6:	8811      	ldrh	r1, [r2, #0]
 80149e8:	7892      	ldrb	r2, [r2, #2]
 80149ea:	8019      	strh	r1, [r3, #0]
 80149ec:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	220b      	movs	r2, #11
 80149f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,J,H,H,F,J,K,G,G,I");
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	33a4      	adds	r3, #164	; 0xa4
 80149f8:	4a78      	ldr	r2, [pc, #480]	; (8014bdc <problem_fetch+0x134f4>)
 80149fa:	461d      	mov	r5, r3
 80149fc:	4614      	mov	r4, r2
 80149fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a00:	6028      	str	r0, [r5, #0]
 8014a02:	6069      	str	r1, [r5, #4]
 8014a04:	60aa      	str	r2, [r5, #8]
 8014a06:	60eb      	str	r3, [r5, #12]
 8014a08:	6820      	ldr	r0, [r4, #0]
 8014a0a:	6128      	str	r0, [r5, #16]
 8014a0c:	88a3      	ldrh	r3, [r4, #4]
 8014a0e:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,5,7,8,10,11,12,14,17,15,18");
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	3304      	adds	r3, #4
 8014a14:	4a72      	ldr	r2, [pc, #456]	; (8014be0 <problem_fetch+0x134f8>)
 8014a16:	461d      	mov	r5, r3
 8014a18:	4614      	mov	r4, r2
 8014a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a1c:	6028      	str	r0, [r5, #0]
 8014a1e:	6069      	str	r1, [r5, #4]
 8014a20:	60aa      	str	r2, [r5, #8]
 8014a22:	60eb      	str	r3, [r5, #12]
 8014a24:	cc07      	ldmia	r4!, {r0, r1, r2}
 8014a26:	6128      	str	r0, [r5, #16]
 8014a28:	6169      	str	r1, [r5, #20]
 8014a2a:	61aa      	str	r2, [r5, #24]
 8014a2c:	7823      	ldrb	r3, [r4, #0]
 8014a2e:	772b      	strb	r3, [r5, #28]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014a36:	4a6b      	ldr	r2, [pc, #428]	; (8014be4 <problem_fetch+0x134fc>)
 8014a38:	461d      	mov	r5, r3
 8014a3a:	4614      	mov	r4, r2
 8014a3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a3e:	6028      	str	r0, [r5, #0]
 8014a40:	6069      	str	r1, [r5, #4]
 8014a42:	60aa      	str	r2, [r5, #8]
 8014a44:	60eb      	str	r3, [r5, #12]
 8014a46:	6820      	ldr	r0, [r4, #0]
 8014a48:	6128      	str	r0, [r5, #16]
 8014a4a:	88a3      	ldrh	r3, [r4, #4]
 8014a4c:	82ab      	strh	r3, [r5, #20]
			break;
 8014a4e:	f007 bd7b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 567 :
			strcpy(p->name,"SEANN'S START");
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014a58:	4a63      	ldr	r2, [pc, #396]	; (8014be8 <problem_fetch+0x13500>)
 8014a5a:	461c      	mov	r4, r3
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a60:	6020      	str	r0, [r4, #0]
 8014a62:	6061      	str	r1, [r4, #4]
 8014a64:	60a2      	str	r2, [r4, #8]
 8014a66:	881b      	ldrh	r3, [r3, #0]
 8014a68:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014a70:	4a5e      	ldr	r2, [pc, #376]	; (8014bec <problem_fetch+0x13504>)
 8014a72:	6810      	ldr	r0, [r2, #0]
 8014a74:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	2207      	movs	r2, #7
 8014a7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,E,G,D");
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	33a4      	adds	r3, #164	; 0xa4
 8014a80:	4a5b      	ldr	r2, [pc, #364]	; (8014bf0 <problem_fetch+0x13508>)
 8014a82:	461c      	mov	r4, r3
 8014a84:	4613      	mov	r3, r2
 8014a86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014a88:	6020      	str	r0, [r4, #0]
 8014a8a:	6061      	str	r1, [r4, #4]
 8014a8c:	60a2      	str	r2, [r4, #8]
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,13,12,16,9,18");
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	3304      	adds	r3, #4
 8014a96:	4a57      	ldr	r2, [pc, #348]	; (8014bf4 <problem_fetch+0x1350c>)
 8014a98:	461d      	mov	r5, r3
 8014a9a:	4614      	mov	r4, r2
 8014a9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a9e:	6028      	str	r0, [r5, #0]
 8014aa0:	6069      	str	r1, [r5, #4]
 8014aa2:	60aa      	str	r2, [r5, #8]
 8014aa4:	60eb      	str	r3, [r5, #12]
 8014aa6:	8823      	ldrh	r3, [r4, #0]
 8014aa8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014ab0:	4a51      	ldr	r2, [pc, #324]	; (8014bf8 <problem_fetch+0x13510>)
 8014ab2:	461c      	mov	r4, r3
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014ab8:	6020      	str	r0, [r4, #0]
 8014aba:	6061      	str	r1, [r4, #4]
 8014abc:	60a2      	str	r2, [r4, #8]
 8014abe:	881b      	ldrh	r3, [r3, #0]
 8014ac0:	81a3      	strh	r3, [r4, #12]
			break;
 8014ac2:	f007 bd41 	b.w	801c548 <problem_fetch+0x1ae60>
		case 568 :
			strcpy(p->name,"BLACK POCKETS MATTER");
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014acc:	4a4b      	ldr	r2, [pc, #300]	; (8014bfc <problem_fetch+0x13514>)
 8014ace:	461d      	mov	r5, r3
 8014ad0:	4614      	mov	r4, r2
 8014ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ad4:	6028      	str	r0, [r5, #0]
 8014ad6:	6069      	str	r1, [r5, #4]
 8014ad8:	60aa      	str	r2, [r5, #8]
 8014ada:	60eb      	str	r3, [r5, #12]
 8014adc:	6820      	ldr	r0, [r4, #0]
 8014ade:	6128      	str	r0, [r5, #16]
 8014ae0:	7923      	ldrb	r3, [r4, #4]
 8014ae2:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"7A+");
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014aea:	4a45      	ldr	r2, [pc, #276]	; (8014c00 <problem_fetch+0x13518>)
 8014aec:	6810      	ldr	r0, [r2, #0]
 8014aee:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2208      	movs	r2, #8
 8014af4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,B,G,H,C,D");
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	33a4      	adds	r3, #164	; 0xa4
 8014afa:	4a42      	ldr	r2, [pc, #264]	; (8014c04 <problem_fetch+0x1351c>)
 8014afc:	461c      	mov	r4, r3
 8014afe:	4615      	mov	r5, r2
 8014b00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b02:	6020      	str	r0, [r4, #0]
 8014b04:	6061      	str	r1, [r4, #4]
 8014b06:	60a2      	str	r2, [r4, #8]
 8014b08:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,10,10,13,16,18");
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	3304      	adds	r3, #4
 8014b0e:	4a3e      	ldr	r2, [pc, #248]	; (8014c08 <problem_fetch+0x13520>)
 8014b10:	461d      	mov	r5, r3
 8014b12:	4614      	mov	r4, r2
 8014b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b16:	6028      	str	r0, [r5, #0]
 8014b18:	6069      	str	r1, [r5, #4]
 8014b1a:	60aa      	str	r2, [r5, #8]
 8014b1c:	60eb      	str	r3, [r5, #12]
 8014b1e:	6820      	ldr	r0, [r4, #0]
 8014b20:	6128      	str	r0, [r5, #16]
 8014b22:	7923      	ldrb	r3, [r4, #4]
 8014b24:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014b2c:	4a37      	ldr	r2, [pc, #220]	; (8014c0c <problem_fetch+0x13524>)
 8014b2e:	461c      	mov	r4, r3
 8014b30:	4615      	mov	r5, r2
 8014b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b34:	6020      	str	r0, [r4, #0]
 8014b36:	6061      	str	r1, [r4, #4]
 8014b38:	60a2      	str	r2, [r4, #8]
 8014b3a:	60e3      	str	r3, [r4, #12]
			break;
 8014b3c:	f007 bd04 	b.w	801c548 <problem_fetch+0x1ae60>
		case 569 :
			strcpy(p->name,"CAD");
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014b46:	4a32      	ldr	r2, [pc, #200]	; (8014c10 <problem_fetch+0x13528>)
 8014b48:	6810      	ldr	r0, [r2, #0]
 8014b4a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014b52:	4a30      	ldr	r2, [pc, #192]	; (8014c14 <problem_fetch+0x1352c>)
 8014b54:	8811      	ldrh	r1, [r2, #0]
 8014b56:	7892      	ldrb	r2, [r2, #2]
 8014b58:	8019      	strh	r1, [r3, #0]
 8014b5a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2208      	movs	r2, #8
 8014b60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	33a4      	adds	r3, #164	; 0xa4
 8014b66:	4a2c      	ldr	r2, [pc, #176]	; (8014c18 <problem_fetch+0x13530>)
 8014b68:	461c      	mov	r4, r3
 8014b6a:	4615      	mov	r5, r2
 8014b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b6e:	6020      	str	r0, [r4, #0]
 8014b70:	6061      	str	r1, [r4, #4]
 8014b72:	60a2      	str	r2, [r4, #8]
 8014b74:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	3304      	adds	r3, #4
 8014b7a:	4a28      	ldr	r2, [pc, #160]	; (8014c1c <problem_fetch+0x13534>)
 8014b7c:	461d      	mov	r5, r3
 8014b7e:	4614      	mov	r4, r2
 8014b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014b82:	6028      	str	r0, [r5, #0]
 8014b84:	6069      	str	r1, [r5, #4]
 8014b86:	60aa      	str	r2, [r5, #8]
 8014b88:	60eb      	str	r3, [r5, #12]
 8014b8a:	6820      	ldr	r0, [r4, #0]
 8014b8c:	6128      	str	r0, [r5, #16]
 8014b8e:	7923      	ldrb	r3, [r4, #4]
 8014b90:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014b98:	4a1c      	ldr	r2, [pc, #112]	; (8014c0c <problem_fetch+0x13524>)
 8014b9a:	461c      	mov	r4, r3
 8014b9c:	4615      	mov	r5, r2
 8014b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ba0:	6020      	str	r0, [r4, #0]
 8014ba2:	6061      	str	r1, [r4, #4]
 8014ba4:	60a2      	str	r2, [r4, #8]
 8014ba6:	60e3      	str	r3, [r4, #12]
			break;
 8014ba8:	f007 bcce 	b.w	801c548 <problem_fetch+0x1ae60>
 8014bac:	0802a52c 	.word	0x0802a52c
 8014bb0:	08024054 	.word	0x08024054
 8014bb4:	0802a538 	.word	0x0802a538
 8014bb8:	0802a544 	.word	0x0802a544
 8014bbc:	0802393c 	.word	0x0802393c
 8014bc0:	0802a554 	.word	0x0802a554
 8014bc4:	08023f68 	.word	0x08023f68
 8014bc8:	0802a55c 	.word	0x0802a55c
 8014bcc:	0802a56c 	.word	0x0802a56c
 8014bd0:	080239d4 	.word	0x080239d4
 8014bd4:	0802a580 	.word	0x0802a580
 8014bd8:	08023a28 	.word	0x08023a28
 8014bdc:	0802a594 	.word	0x0802a594
 8014be0:	0802a5ac 	.word	0x0802a5ac
 8014be4:	080272bc 	.word	0x080272bc
 8014be8:	0802a5cc 	.word	0x0802a5cc
 8014bec:	0802395c 	.word	0x0802395c
 8014bf0:	0802a5dc 	.word	0x0802a5dc
 8014bf4:	0802a5ec 	.word	0x0802a5ec
 8014bf8:	08023ae4 	.word	0x08023ae4
 8014bfc:	0802a600 	.word	0x0802a600
 8014c00:	08023afc 	.word	0x08023afc
 8014c04:	0802a618 	.word	0x0802a618
 8014c08:	0802a628 	.word	0x0802a628
 8014c0c:	08023a80 	.word	0x08023a80
 8014c10:	0802a640 	.word	0x0802a640
 8014c14:	0802391c 	.word	0x0802391c
 8014c18:	0802a644 	.word	0x0802a644
 8014c1c:	0802a654 	.word	0x0802a654
		case 570 :
			strcpy(p->name,"CAD");
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c26:	4aa8      	ldr	r2, [pc, #672]	; (8014ec8 <problem_fetch+0x137e0>)
 8014c28:	6810      	ldr	r0, [r2, #0]
 8014c2a:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A");
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014c32:	4aa6      	ldr	r2, [pc, #664]	; (8014ecc <problem_fetch+0x137e4>)
 8014c34:	8811      	ldrh	r1, [r2, #0]
 8014c36:	7892      	ldrb	r2, [r2, #2]
 8014c38:	8019      	strh	r1, [r3, #0]
 8014c3a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2208      	movs	r2, #8
 8014c40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,J,H,E,G,D");
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	33a4      	adds	r3, #164	; 0xa4
 8014c46:	4aa2      	ldr	r2, [pc, #648]	; (8014ed0 <problem_fetch+0x137e8>)
 8014c48:	461c      	mov	r4, r3
 8014c4a:	4615      	mov	r5, r2
 8014c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c4e:	6020      	str	r0, [r4, #0]
 8014c50:	6061      	str	r1, [r4, #4]
 8014c52:	60a2      	str	r2, [r4, #8]
 8014c54:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,12,12,14,17,18");
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	3304      	adds	r3, #4
 8014c5a:	4a9e      	ldr	r2, [pc, #632]	; (8014ed4 <problem_fetch+0x137ec>)
 8014c5c:	461d      	mov	r5, r3
 8014c5e:	4614      	mov	r4, r2
 8014c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014c62:	6028      	str	r0, [r5, #0]
 8014c64:	6069      	str	r1, [r5, #4]
 8014c66:	60aa      	str	r2, [r5, #8]
 8014c68:	60eb      	str	r3, [r5, #12]
 8014c6a:	6820      	ldr	r0, [r4, #0]
 8014c6c:	6128      	str	r0, [r5, #16]
 8014c6e:	7923      	ldrb	r3, [r4, #4]
 8014c70:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014c78:	4a97      	ldr	r2, [pc, #604]	; (8014ed8 <problem_fetch+0x137f0>)
 8014c7a:	461c      	mov	r4, r3
 8014c7c:	4615      	mov	r5, r2
 8014c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c80:	6020      	str	r0, [r4, #0]
 8014c82:	6061      	str	r1, [r4, #4]
 8014c84:	60a2      	str	r2, [r4, #8]
 8014c86:	60e3      	str	r3, [r4, #12]
			break;
 8014c88:	f007 bc5e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 571 :
			strcpy(p->name,"TIGHT BOX");
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c92:	4992      	ldr	r1, [pc, #584]	; (8014edc <problem_fetch+0x137f4>)
 8014c94:	461a      	mov	r2, r3
 8014c96:	460b      	mov	r3, r1
 8014c98:	cb03      	ldmia	r3!, {r0, r1}
 8014c9a:	6010      	str	r0, [r2, #0]
 8014c9c:	6051      	str	r1, [r2, #4]
 8014c9e:	881b      	ldrh	r3, [r3, #0]
 8014ca0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014ca8:	4a8d      	ldr	r2, [pc, #564]	; (8014ee0 <problem_fetch+0x137f8>)
 8014caa:	6810      	ldr	r0, [r2, #0]
 8014cac:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2208      	movs	r2, #8
 8014cb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,A,D,E,G,D");
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	33a4      	adds	r3, #164	; 0xa4
 8014cb8:	4a8a      	ldr	r2, [pc, #552]	; (8014ee4 <problem_fetch+0x137fc>)
 8014cba:	461c      	mov	r4, r3
 8014cbc:	4615      	mov	r5, r2
 8014cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cc0:	6020      	str	r0, [r4, #0]
 8014cc2:	6061      	str	r1, [r4, #4]
 8014cc4:	60a2      	str	r2, [r4, #8]
 8014cc6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,7,9,11,12,17,18");
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	3304      	adds	r3, #4
 8014ccc:	4a86      	ldr	r2, [pc, #536]	; (8014ee8 <problem_fetch+0x13800>)
 8014cce:	461d      	mov	r5, r3
 8014cd0:	4614      	mov	r4, r2
 8014cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014cd4:	6028      	str	r0, [r5, #0]
 8014cd6:	6069      	str	r1, [r5, #4]
 8014cd8:	60aa      	str	r2, [r5, #8]
 8014cda:	60eb      	str	r3, [r5, #12]
 8014cdc:	6820      	ldr	r0, [r4, #0]
 8014cde:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014ce6:	4a7c      	ldr	r2, [pc, #496]	; (8014ed8 <problem_fetch+0x137f0>)
 8014ce8:	461c      	mov	r4, r3
 8014cea:	4615      	mov	r5, r2
 8014cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cee:	6020      	str	r0, [r4, #0]
 8014cf0:	6061      	str	r1, [r4, #4]
 8014cf2:	60a2      	str	r2, [r4, #8]
 8014cf4:	60e3      	str	r3, [r4, #12]
			break;
 8014cf6:	f007 bc27 	b.w	801c548 <problem_fetch+0x1ae60>
		case 572 :
			strcpy(p->name,"TIGER");
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d00:	4a7a      	ldr	r2, [pc, #488]	; (8014eec <problem_fetch+0x13804>)
 8014d02:	6810      	ldr	r0, [r2, #0]
 8014d04:	6018      	str	r0, [r3, #0]
 8014d06:	8892      	ldrh	r2, [r2, #4]
 8014d08:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d10:	4a73      	ldr	r2, [pc, #460]	; (8014ee0 <problem_fetch+0x137f8>)
 8014d12:	6810      	ldr	r0, [r2, #0]
 8014d14:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	2207      	movs	r2, #7
 8014d1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,G,H,C,C,A");
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	33a4      	adds	r3, #164	; 0xa4
 8014d20:	4a73      	ldr	r2, [pc, #460]	; (8014ef0 <problem_fetch+0x13808>)
 8014d22:	461c      	mov	r4, r3
 8014d24:	4613      	mov	r3, r2
 8014d26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d28:	6020      	str	r0, [r4, #0]
 8014d2a:	6061      	str	r1, [r4, #4]
 8014d2c:	60a2      	str	r2, [r4, #8]
 8014d2e:	881b      	ldrh	r3, [r3, #0]
 8014d30:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,13,16,13,18");
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3304      	adds	r3, #4
 8014d36:	4a6f      	ldr	r2, [pc, #444]	; (8014ef4 <problem_fetch+0x1380c>)
 8014d38:	461d      	mov	r5, r3
 8014d3a:	4614      	mov	r4, r2
 8014d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d3e:	6028      	str	r0, [r5, #0]
 8014d40:	6069      	str	r1, [r5, #4]
 8014d42:	60aa      	str	r2, [r5, #8]
 8014d44:	60eb      	str	r3, [r5, #12]
 8014d46:	8823      	ldrh	r3, [r4, #0]
 8014d48:	78a2      	ldrb	r2, [r4, #2]
 8014d4a:	822b      	strh	r3, [r5, #16]
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014d56:	4a68      	ldr	r2, [pc, #416]	; (8014ef8 <problem_fetch+0x13810>)
 8014d58:	461c      	mov	r4, r3
 8014d5a:	4613      	mov	r3, r2
 8014d5c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014d5e:	6020      	str	r0, [r4, #0]
 8014d60:	6061      	str	r1, [r4, #4]
 8014d62:	60a2      	str	r2, [r4, #8]
 8014d64:	881b      	ldrh	r3, [r3, #0]
 8014d66:	81a3      	strh	r3, [r4, #12]
			break;
 8014d68:	f007 bbee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 573 :
			strcpy(p->name,"V1.");
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014d72:	4a62      	ldr	r2, [pc, #392]	; (8014efc <problem_fetch+0x13814>)
 8014d74:	6810      	ldr	r0, [r2, #0]
 8014d76:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014d7e:	4a60      	ldr	r2, [pc, #384]	; (8014f00 <problem_fetch+0x13818>)
 8014d80:	6810      	ldr	r0, [r2, #0]
 8014d82:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2209      	movs	r2, #9
 8014d88:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,C,G,C,E,A,C,A");
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	33a4      	adds	r3, #164	; 0xa4
 8014d8e:	4a5d      	ldr	r2, [pc, #372]	; (8014f04 <problem_fetch+0x1381c>)
 8014d90:	461d      	mov	r5, r3
 8014d92:	4614      	mov	r4, r2
 8014d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d96:	6028      	str	r0, [r5, #0]
 8014d98:	6069      	str	r1, [r5, #4]
 8014d9a:	60aa      	str	r2, [r5, #8]
 8014d9c:	60eb      	str	r3, [r5, #12]
 8014d9e:	8823      	ldrh	r3, [r4, #0]
 8014da0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,8,10,13,14,14,16,18");
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	3304      	adds	r3, #4
 8014da6:	4a58      	ldr	r2, [pc, #352]	; (8014f08 <problem_fetch+0x13820>)
 8014da8:	461d      	mov	r5, r3
 8014daa:	4614      	mov	r4, r2
 8014dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dae:	6028      	str	r0, [r5, #0]
 8014db0:	6069      	str	r1, [r5, #4]
 8014db2:	60aa      	str	r2, [r5, #8]
 8014db4:	60eb      	str	r3, [r5, #12]
 8014db6:	cc03      	ldmia	r4!, {r0, r1}
 8014db8:	6128      	str	r0, [r5, #16]
 8014dba:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014dc2:	4a52      	ldr	r2, [pc, #328]	; (8014f0c <problem_fetch+0x13824>)
 8014dc4:	461d      	mov	r5, r3
 8014dc6:	4614      	mov	r4, r2
 8014dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014dca:	6028      	str	r0, [r5, #0]
 8014dcc:	6069      	str	r1, [r5, #4]
 8014dce:	60aa      	str	r2, [r5, #8]
 8014dd0:	60eb      	str	r3, [r5, #12]
 8014dd2:	8823      	ldrh	r3, [r4, #0]
 8014dd4:	822b      	strh	r3, [r5, #16]
			break;
 8014dd6:	f007 bbb7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 574 :
			strcpy(p->name,"FOUL LANGUAGE");
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014de0:	4a4b      	ldr	r2, [pc, #300]	; (8014f10 <problem_fetch+0x13828>)
 8014de2:	461c      	mov	r4, r3
 8014de4:	4613      	mov	r3, r2
 8014de6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014de8:	6020      	str	r0, [r4, #0]
 8014dea:	6061      	str	r1, [r4, #4]
 8014dec:	60a2      	str	r2, [r4, #8]
 8014dee:	881b      	ldrh	r3, [r3, #0]
 8014df0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014df8:	4a39      	ldr	r2, [pc, #228]	; (8014ee0 <problem_fetch+0x137f8>)
 8014dfa:	6810      	ldr	r0, [r2, #0]
 8014dfc:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2209      	movs	r2, #9
 8014e02:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,K,H,K,G,G,B,D");
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	33a4      	adds	r3, #164	; 0xa4
 8014e08:	4a42      	ldr	r2, [pc, #264]	; (8014f14 <problem_fetch+0x1382c>)
 8014e0a:	461d      	mov	r5, r3
 8014e0c:	4614      	mov	r4, r2
 8014e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e10:	6028      	str	r0, [r5, #0]
 8014e12:	6069      	str	r1, [r5, #4]
 8014e14:	60aa      	str	r2, [r5, #8]
 8014e16:	60eb      	str	r3, [r5, #12]
 8014e18:	8823      	ldrh	r3, [r4, #0]
 8014e1a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,5,9,12,14,14,17,12,18");
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	3304      	adds	r3, #4
 8014e20:	4a3d      	ldr	r2, [pc, #244]	; (8014f18 <problem_fetch+0x13830>)
 8014e22:	461d      	mov	r5, r3
 8014e24:	4614      	mov	r4, r2
 8014e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e28:	6028      	str	r0, [r5, #0]
 8014e2a:	6069      	str	r1, [r5, #4]
 8014e2c:	60aa      	str	r2, [r5, #8]
 8014e2e:	60eb      	str	r3, [r5, #12]
 8014e30:	cc03      	ldmia	r4!, {r0, r1}
 8014e32:	6128      	str	r0, [r5, #16]
 8014e34:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014e3c:	4a33      	ldr	r2, [pc, #204]	; (8014f0c <problem_fetch+0x13824>)
 8014e3e:	461d      	mov	r5, r3
 8014e40:	4614      	mov	r4, r2
 8014e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e44:	6028      	str	r0, [r5, #0]
 8014e46:	6069      	str	r1, [r5, #4]
 8014e48:	60aa      	str	r2, [r5, #8]
 8014e4a:	60eb      	str	r3, [r5, #12]
 8014e4c:	8823      	ldrh	r3, [r4, #0]
 8014e4e:	822b      	strh	r3, [r5, #16]
			break;
 8014e50:	f007 bb7a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 575 :
			strcpy(p->name,"BLACK HAWK DOWN");
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014e5a:	4a30      	ldr	r2, [pc, #192]	; (8014f1c <problem_fetch+0x13834>)
 8014e5c:	461c      	mov	r4, r3
 8014e5e:	4615      	mov	r5, r2
 8014e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e62:	6020      	str	r0, [r4, #0]
 8014e64:	6061      	str	r1, [r4, #4]
 8014e66:	60a2      	str	r2, [r4, #8]
 8014e68:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014e70:	4a1b      	ldr	r2, [pc, #108]	; (8014ee0 <problem_fetch+0x137f8>)
 8014e72:	6810      	ldr	r0, [r2, #0]
 8014e74:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2207      	movs	r2, #7
 8014e7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,G,D,E,D");
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	33a4      	adds	r3, #164	; 0xa4
 8014e80:	4a27      	ldr	r2, [pc, #156]	; (8014f20 <problem_fetch+0x13838>)
 8014e82:	461c      	mov	r4, r3
 8014e84:	4613      	mov	r3, r2
 8014e86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014e88:	6020      	str	r0, [r4, #0]
 8014e8a:	6061      	str	r1, [r4, #4]
 8014e8c:	60a2      	str	r2, [r4, #8]
 8014e8e:	881b      	ldrh	r3, [r3, #0]
 8014e90:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,15,9,11,14,18");
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	3304      	adds	r3, #4
 8014e96:	4a23      	ldr	r2, [pc, #140]	; (8014f24 <problem_fetch+0x1383c>)
 8014e98:	461d      	mov	r5, r3
 8014e9a:	4614      	mov	r4, r2
 8014e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e9e:	6028      	str	r0, [r5, #0]
 8014ea0:	6069      	str	r1, [r5, #4]
 8014ea2:	60aa      	str	r2, [r5, #8]
 8014ea4:	60eb      	str	r3, [r5, #12]
 8014ea6:	8823      	ldrh	r3, [r4, #0]
 8014ea8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014eb0:	4a11      	ldr	r2, [pc, #68]	; (8014ef8 <problem_fetch+0x13810>)
 8014eb2:	461c      	mov	r4, r3
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014eb8:	6020      	str	r0, [r4, #0]
 8014eba:	6061      	str	r1, [r4, #4]
 8014ebc:	60a2      	str	r2, [r4, #8]
 8014ebe:	881b      	ldrh	r3, [r3, #0]
 8014ec0:	81a3      	strh	r3, [r4, #12]
			break;
 8014ec2:	f007 bb41 	b.w	801c548 <problem_fetch+0x1ae60>
 8014ec6:	bf00      	nop
 8014ec8:	0802a640 	.word	0x0802a640
 8014ecc:	0802391c 	.word	0x0802391c
 8014ed0:	0802a644 	.word	0x0802a644
 8014ed4:	0802a654 	.word	0x0802a654
 8014ed8:	08023a80 	.word	0x08023a80
 8014edc:	0802a66c 	.word	0x0802a66c
 8014ee0:	080239f4 	.word	0x080239f4
 8014ee4:	0802a678 	.word	0x0802a678
 8014ee8:	0802a688 	.word	0x0802a688
 8014eec:	0802a69c 	.word	0x0802a69c
 8014ef0:	0802a6a4 	.word	0x0802a6a4
 8014ef4:	0802a6b4 	.word	0x0802a6b4
 8014ef8:	08023ae4 	.word	0x08023ae4
 8014efc:	0802a6c8 	.word	0x0802a6c8
 8014f00:	0802395c 	.word	0x0802395c
 8014f04:	0802a6cc 	.word	0x0802a6cc
 8014f08:	0802a6e0 	.word	0x0802a6e0
 8014f0c:	08024940 	.word	0x08024940
 8014f10:	0802a6f8 	.word	0x0802a6f8
 8014f14:	0802a708 	.word	0x0802a708
 8014f18:	0802a71c 	.word	0x0802a71c
 8014f1c:	0802a734 	.word	0x0802a734
 8014f20:	0802a744 	.word	0x0802a744
 8014f24:	0802a754 	.word	0x0802a754
		case 576 :
			strcpy(p->name,"2 BLACK 2 HARD");
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f2e:	4aae      	ldr	r2, [pc, #696]	; (80151e8 <problem_fetch+0x13b00>)
 8014f30:	461c      	mov	r4, r3
 8014f32:	4613      	mov	r3, r2
 8014f34:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f36:	6020      	str	r0, [r4, #0]
 8014f38:	6061      	str	r1, [r4, #4]
 8014f3a:	60a2      	str	r2, [r4, #8]
 8014f3c:	881a      	ldrh	r2, [r3, #0]
 8014f3e:	789b      	ldrb	r3, [r3, #2]
 8014f40:	81a2      	strh	r2, [r4, #12]
 8014f42:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"8A+");
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014f4a:	4aa8      	ldr	r2, [pc, #672]	; (80151ec <problem_fetch+0x13b04>)
 8014f4c:	6810      	ldr	r0, [r2, #0]
 8014f4e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2205      	movs	r2, #5
 8014f54:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,D,A");
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	33a4      	adds	r3, #164	; 0xa4
 8014f5a:	49a5      	ldr	r1, [pc, #660]	; (80151f0 <problem_fetch+0x13b08>)
 8014f5c:	461a      	mov	r2, r3
 8014f5e:	460b      	mov	r3, r1
 8014f60:	cb03      	ldmia	r3!, {r0, r1}
 8014f62:	6010      	str	r0, [r2, #0]
 8014f64:	6051      	str	r1, [r2, #4]
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,5,9,15,18");
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	3304      	adds	r3, #4
 8014f6e:	4aa1      	ldr	r2, [pc, #644]	; (80151f4 <problem_fetch+0x13b0c>)
 8014f70:	461c      	mov	r4, r3
 8014f72:	4613      	mov	r3, r2
 8014f74:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014f76:	6020      	str	r0, [r4, #0]
 8014f78:	6061      	str	r1, [r4, #4]
 8014f7a:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,s,d,d,e");
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014f82:	499d      	ldr	r1, [pc, #628]	; (80151f8 <problem_fetch+0x13b10>)
 8014f84:	461a      	mov	r2, r3
 8014f86:	460b      	mov	r3, r1
 8014f88:	cb03      	ldmia	r3!, {r0, r1}
 8014f8a:	6010      	str	r0, [r2, #0]
 8014f8c:	6051      	str	r1, [r2, #4]
 8014f8e:	881b      	ldrh	r3, [r3, #0]
 8014f90:	8113      	strh	r3, [r2, #8]
			break;
 8014f92:	f007 bad9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 577 :
			strcpy(p->name,"カラス");
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014f9c:	4997      	ldr	r1, [pc, #604]	; (80151fc <problem_fetch+0x13b14>)
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	460b      	mov	r3, r1
 8014fa2:	cb03      	ldmia	r3!, {r0, r1}
 8014fa4:	6010      	str	r0, [r2, #0]
 8014fa6:	6051      	str	r1, [r2, #4]
 8014fa8:	881b      	ldrh	r3, [r3, #0]
 8014faa:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8014fb2:	4a93      	ldr	r2, [pc, #588]	; (8015200 <problem_fetch+0x13b18>)
 8014fb4:	8811      	ldrh	r1, [r2, #0]
 8014fb6:	7892      	ldrb	r2, [r2, #2]
 8014fb8:	8019      	strh	r1, [r3, #0]
 8014fba:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2207      	movs	r2, #7
 8014fc0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,K,H,I,E,D");
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	33a4      	adds	r3, #164	; 0xa4
 8014fc6:	4a8f      	ldr	r2, [pc, #572]	; (8015204 <problem_fetch+0x13b1c>)
 8014fc8:	461c      	mov	r4, r3
 8014fca:	4613      	mov	r3, r2
 8014fcc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014fce:	6020      	str	r0, [r4, #0]
 8014fd0:	6061      	str	r1, [r4, #4]
 8014fd2:	60a2      	str	r2, [r4, #8]
 8014fd4:	881b      	ldrh	r3, [r3, #0]
 8014fd6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,12,14,16,18");
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	3304      	adds	r3, #4
 8014fdc:	4a8a      	ldr	r2, [pc, #552]	; (8015208 <problem_fetch+0x13b20>)
 8014fde:	461d      	mov	r5, r3
 8014fe0:	4614      	mov	r4, r2
 8014fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fe4:	6028      	str	r0, [r5, #0]
 8014fe6:	6069      	str	r1, [r5, #4]
 8014fe8:	60aa      	str	r2, [r5, #8]
 8014fea:	60eb      	str	r3, [r5, #12]
 8014fec:	8823      	ldrh	r3, [r4, #0]
 8014fee:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8014ff6:	4a85      	ldr	r2, [pc, #532]	; (801520c <problem_fetch+0x13b24>)
 8014ff8:	461c      	mov	r4, r3
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8014ffe:	6020      	str	r0, [r4, #0]
 8015000:	6061      	str	r1, [r4, #4]
 8015002:	60a2      	str	r2, [r4, #8]
 8015004:	881b      	ldrh	r3, [r3, #0]
 8015006:	81a3      	strh	r3, [r4, #12]
			break;
 8015008:	f007 ba9e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 578 :
			strcpy(p->name,"TOMTOM");
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015012:	4a7f      	ldr	r2, [pc, #508]	; (8015210 <problem_fetch+0x13b28>)
 8015014:	6810      	ldr	r0, [r2, #0]
 8015016:	6018      	str	r0, [r3, #0]
 8015018:	8891      	ldrh	r1, [r2, #4]
 801501a:	7992      	ldrb	r2, [r2, #6]
 801501c:	8099      	strh	r1, [r3, #4]
 801501e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C+");
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015026:	4a7b      	ldr	r2, [pc, #492]	; (8015214 <problem_fetch+0x13b2c>)
 8015028:	6810      	ldr	r0, [r2, #0]
 801502a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	2205      	movs	r2, #5
 8015030:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,A");
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	33a4      	adds	r3, #164	; 0xa4
 8015036:	4978      	ldr	r1, [pc, #480]	; (8015218 <problem_fetch+0x13b30>)
 8015038:	461a      	mov	r2, r3
 801503a:	460b      	mov	r3, r1
 801503c:	cb03      	ldmia	r3!, {r0, r1}
 801503e:	6010      	str	r0, [r2, #0]
 8015040:	6051      	str	r1, [r2, #4]
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,15,18");
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	3304      	adds	r3, #4
 801504a:	4a74      	ldr	r2, [pc, #464]	; (801521c <problem_fetch+0x13b34>)
 801504c:	461c      	mov	r4, r3
 801504e:	4613      	mov	r3, r2
 8015050:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015052:	6020      	str	r0, [r4, #0]
 8015054:	6061      	str	r1, [r4, #4]
 8015056:	60a2      	str	r2, [r4, #8]
 8015058:	881b      	ldrh	r3, [r3, #0]
 801505a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015062:	496f      	ldr	r1, [pc, #444]	; (8015220 <problem_fetch+0x13b38>)
 8015064:	461a      	mov	r2, r3
 8015066:	460b      	mov	r3, r1
 8015068:	cb03      	ldmia	r3!, {r0, r1}
 801506a:	6010      	str	r0, [r2, #0]
 801506c:	6051      	str	r1, [r2, #4]
 801506e:	881b      	ldrh	r3, [r3, #0]
 8015070:	8113      	strh	r3, [r2, #8]
			break;
 8015072:	f007 ba69 	b.w	801c548 <problem_fetch+0x1ae60>
		case 579 :
			strcpy(p->name,"THE GREAT HAMBINO");
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801507c:	4a69      	ldr	r2, [pc, #420]	; (8015224 <problem_fetch+0x13b3c>)
 801507e:	461d      	mov	r5, r3
 8015080:	4614      	mov	r4, r2
 8015082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015084:	6028      	str	r0, [r5, #0]
 8015086:	6069      	str	r1, [r5, #4]
 8015088:	60aa      	str	r2, [r5, #8]
 801508a:	60eb      	str	r3, [r5, #12]
 801508c:	8823      	ldrh	r3, [r4, #0]
 801508e:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015096:	4a64      	ldr	r2, [pc, #400]	; (8015228 <problem_fetch+0x13b40>)
 8015098:	6810      	ldr	r0, [r2, #0]
 801509a:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	2209      	movs	r2, #9
 80150a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,F,E,G,G,I");
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	33a4      	adds	r3, #164	; 0xa4
 80150a6:	4a61      	ldr	r2, [pc, #388]	; (801522c <problem_fetch+0x13b44>)
 80150a8:	461d      	mov	r5, r3
 80150aa:	4614      	mov	r4, r2
 80150ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150ae:	6028      	str	r0, [r5, #0]
 80150b0:	6069      	str	r1, [r5, #4]
 80150b2:	60aa      	str	r2, [r5, #8]
 80150b4:	60eb      	str	r3, [r5, #12]
 80150b6:	8823      	ldrh	r3, [r4, #0]
 80150b8:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"4,6,8,8,11,12,14,15,18");
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	3304      	adds	r3, #4
 80150be:	4a5c      	ldr	r2, [pc, #368]	; (8015230 <problem_fetch+0x13b48>)
 80150c0:	461c      	mov	r4, r3
 80150c2:	4615      	mov	r5, r2
 80150c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150c6:	6020      	str	r0, [r4, #0]
 80150c8:	6061      	str	r1, [r4, #4]
 80150ca:	60a2      	str	r2, [r4, #8]
 80150cc:	60e3      	str	r3, [r4, #12]
 80150ce:	6828      	ldr	r0, [r5, #0]
 80150d0:	6120      	str	r0, [r4, #16]
 80150d2:	88ab      	ldrh	r3, [r5, #4]
 80150d4:	79aa      	ldrb	r2, [r5, #6]
 80150d6:	82a3      	strh	r3, [r4, #20]
 80150d8:	4613      	mov	r3, r2
 80150da:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80150e2:	4a54      	ldr	r2, [pc, #336]	; (8015234 <problem_fetch+0x13b4c>)
 80150e4:	461d      	mov	r5, r3
 80150e6:	4614      	mov	r4, r2
 80150e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150ea:	6028      	str	r0, [r5, #0]
 80150ec:	6069      	str	r1, [r5, #4]
 80150ee:	60aa      	str	r2, [r5, #8]
 80150f0:	60eb      	str	r3, [r5, #12]
 80150f2:	8823      	ldrh	r3, [r4, #0]
 80150f4:	822b      	strh	r3, [r5, #16]
			break;
 80150f6:	f007 ba27 	b.w	801c548 <problem_fetch+0x1ae60>
		case 580 :
			strcpy(p->name,"OUT THERE");
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015100:	494d      	ldr	r1, [pc, #308]	; (8015238 <problem_fetch+0x13b50>)
 8015102:	461a      	mov	r2, r3
 8015104:	460b      	mov	r3, r1
 8015106:	cb03      	ldmia	r3!, {r0, r1}
 8015108:	6010      	str	r0, [r2, #0]
 801510a:	6051      	str	r1, [r2, #4]
 801510c:	881b      	ldrh	r3, [r3, #0]
 801510e:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015116:	4a44      	ldr	r2, [pc, #272]	; (8015228 <problem_fetch+0x13b40>)
 8015118:	6810      	ldr	r0, [r2, #0]
 801511a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2207      	movs	r2, #7
 8015120:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,B,D");
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	33a4      	adds	r3, #164	; 0xa4
 8015126:	4a45      	ldr	r2, [pc, #276]	; (801523c <problem_fetch+0x13b54>)
 8015128:	461c      	mov	r4, r3
 801512a:	4613      	mov	r3, r2
 801512c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801512e:	6020      	str	r0, [r4, #0]
 8015130:	6061      	str	r1, [r4, #4]
 8015132:	60a2      	str	r2, [r4, #8]
 8015134:	881b      	ldrh	r3, [r3, #0]
 8015136:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,13,15,15,18");
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	3304      	adds	r3, #4
 801513c:	4a40      	ldr	r2, [pc, #256]	; (8015240 <problem_fetch+0x13b58>)
 801513e:	461d      	mov	r5, r3
 8015140:	4614      	mov	r4, r2
 8015142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015144:	6028      	str	r0, [r5, #0]
 8015146:	6069      	str	r1, [r5, #4]
 8015148:	60aa      	str	r2, [r5, #8]
 801514a:	60eb      	str	r3, [r5, #12]
 801514c:	8823      	ldrh	r3, [r4, #0]
 801514e:	78a2      	ldrb	r2, [r4, #2]
 8015150:	822b      	strh	r3, [r5, #16]
 8015152:	4613      	mov	r3, r2
 8015154:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801515c:	4a39      	ldr	r2, [pc, #228]	; (8015244 <problem_fetch+0x13b5c>)
 801515e:	461c      	mov	r4, r3
 8015160:	4613      	mov	r3, r2
 8015162:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015164:	6020      	str	r0, [r4, #0]
 8015166:	6061      	str	r1, [r4, #4]
 8015168:	60a2      	str	r2, [r4, #8]
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	81a3      	strh	r3, [r4, #12]
			break;
 801516e:	f007 b9eb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 581 :
			strcpy(p->name,"OPPOSITES");
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015178:	4933      	ldr	r1, [pc, #204]	; (8015248 <problem_fetch+0x13b60>)
 801517a:	461a      	mov	r2, r3
 801517c:	460b      	mov	r3, r1
 801517e:	cb03      	ldmia	r3!, {r0, r1}
 8015180:	6010      	str	r0, [r2, #0]
 8015182:	6051      	str	r1, [r2, #4]
 8015184:	881b      	ldrh	r3, [r3, #0]
 8015186:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801518e:	4a2f      	ldr	r2, [pc, #188]	; (801524c <problem_fetch+0x13b64>)
 8015190:	8811      	ldrh	r1, [r2, #0]
 8015192:	7892      	ldrb	r2, [r2, #2]
 8015194:	8019      	strh	r1, [r3, #0]
 8015196:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2207      	movs	r2, #7
 801519c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,J,F,G,D");
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	33a4      	adds	r3, #164	; 0xa4
 80151a2:	4a2b      	ldr	r2, [pc, #172]	; (8015250 <problem_fetch+0x13b68>)
 80151a4:	461c      	mov	r4, r3
 80151a6:	4613      	mov	r3, r2
 80151a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151aa:	6020      	str	r0, [r4, #0]
 80151ac:	6061      	str	r1, [r4, #4]
 80151ae:	60a2      	str	r2, [r4, #8]
 80151b0:	881b      	ldrh	r3, [r3, #0]
 80151b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,8,12,13,15,18");
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	3304      	adds	r3, #4
 80151b8:	4a26      	ldr	r2, [pc, #152]	; (8015254 <problem_fetch+0x13b6c>)
 80151ba:	461d      	mov	r5, r3
 80151bc:	4614      	mov	r4, r2
 80151be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151c0:	6028      	str	r0, [r5, #0]
 80151c2:	6069      	str	r1, [r5, #4]
 80151c4:	60aa      	str	r2, [r5, #8]
 80151c6:	60eb      	str	r3, [r5, #12]
 80151c8:	8823      	ldrh	r3, [r4, #0]
 80151ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80151d2:	4a0e      	ldr	r2, [pc, #56]	; (801520c <problem_fetch+0x13b24>)
 80151d4:	461c      	mov	r4, r3
 80151d6:	4613      	mov	r3, r2
 80151d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80151da:	6020      	str	r0, [r4, #0]
 80151dc:	6061      	str	r1, [r4, #4]
 80151de:	60a2      	str	r2, [r4, #8]
 80151e0:	881b      	ldrh	r3, [r3, #0]
 80151e2:	81a3      	strh	r3, [r4, #12]
			break;
 80151e4:	f007 b9b0 	b.w	801c548 <problem_fetch+0x1ae60>
 80151e8:	0802a768 	.word	0x0802a768
 80151ec:	0802a778 	.word	0x0802a778
 80151f0:	0802a77c 	.word	0x0802a77c
 80151f4:	0802a788 	.word	0x0802a788
 80151f8:	0802403c 	.word	0x0802403c
 80151fc:	0802a794 	.word	0x0802a794
 8015200:	0802391c 	.word	0x0802391c
 8015204:	0802a7a0 	.word	0x0802a7a0
 8015208:	0802a7b0 	.word	0x0802a7b0
 801520c:	08023ae4 	.word	0x08023ae4
 8015210:	0802a7c4 	.word	0x0802a7c4
 8015214:	080239f4 	.word	0x080239f4
 8015218:	0802a7cc 	.word	0x0802a7cc
 801521c:	0802a7d8 	.word	0x0802a7d8
 8015220:	08023e28 	.word	0x08023e28
 8015224:	0802a7e8 	.word	0x0802a7e8
 8015228:	0802395c 	.word	0x0802395c
 801522c:	0802a7fc 	.word	0x0802a7fc
 8015230:	0802a810 	.word	0x0802a810
 8015234:	08024940 	.word	0x08024940
 8015238:	0802a828 	.word	0x0802a828
 801523c:	0802a834 	.word	0x0802a834
 8015240:	0802a844 	.word	0x0802a844
 8015244:	080239d4 	.word	0x080239d4
 8015248:	0802a858 	.word	0x0802a858
 801524c:	08024054 	.word	0x08024054
 8015250:	0802a864 	.word	0x0802a864
 8015254:	0802a874 	.word	0x0802a874
		case 582 :
			strcpy(p->name,"BISCUITS RETURNS");
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801525e:	4ac1      	ldr	r2, [pc, #772]	; (8015564 <problem_fetch+0x13e7c>)
 8015260:	461d      	mov	r5, r3
 8015262:	4614      	mov	r4, r2
 8015264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015266:	6028      	str	r0, [r5, #0]
 8015268:	6069      	str	r1, [r5, #4]
 801526a:	60aa      	str	r2, [r5, #8]
 801526c:	60eb      	str	r3, [r5, #12]
 801526e:	7823      	ldrb	r3, [r4, #0]
 8015270:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015278:	4abb      	ldr	r2, [pc, #748]	; (8015568 <problem_fetch+0x13e80>)
 801527a:	6810      	ldr	r0, [r2, #0]
 801527c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	2206      	movs	r2, #6
 8015282:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,D,D");
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	33a4      	adds	r3, #164	; 0xa4
 8015288:	4ab8      	ldr	r2, [pc, #736]	; (801556c <problem_fetch+0x13e84>)
 801528a:	461c      	mov	r4, r3
 801528c:	4613      	mov	r3, r2
 801528e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015290:	6020      	str	r0, [r4, #0]
 8015292:	6061      	str	r1, [r4, #4]
 8015294:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,15,18");
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	3304      	adds	r3, #4
 801529a:	4ab5      	ldr	r2, [pc, #724]	; (8015570 <problem_fetch+0x13e88>)
 801529c:	461c      	mov	r4, r3
 801529e:	4615      	mov	r5, r2
 80152a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152a2:	6020      	str	r0, [r4, #0]
 80152a4:	6061      	str	r1, [r4, #4]
 80152a6:	60a2      	str	r2, [r4, #8]
 80152a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80152b0:	4ab0      	ldr	r2, [pc, #704]	; (8015574 <problem_fetch+0x13e8c>)
 80152b2:	461c      	mov	r4, r3
 80152b4:	4613      	mov	r3, r2
 80152b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152b8:	6020      	str	r0, [r4, #0]
 80152ba:	6061      	str	r1, [r4, #4]
 80152bc:	60a2      	str	r2, [r4, #8]
			break;
 80152be:	f007 b943 	b.w	801c548 <problem_fetch+0x1ae60>
		case 583 :
			strcpy(p->name,"STREETS OF GOLD");
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80152c8:	4aab      	ldr	r2, [pc, #684]	; (8015578 <problem_fetch+0x13e90>)
 80152ca:	461c      	mov	r4, r3
 80152cc:	4615      	mov	r5, r2
 80152ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152d0:	6020      	str	r0, [r4, #0]
 80152d2:	6061      	str	r1, [r4, #4]
 80152d4:	60a2      	str	r2, [r4, #8]
 80152d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B+");
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80152de:	4aa7      	ldr	r2, [pc, #668]	; (801557c <problem_fetch+0x13e94>)
 80152e0:	6810      	ldr	r0, [r2, #0]
 80152e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	2206      	movs	r2, #6
 80152e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,K,F,B,A");
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	33a4      	adds	r3, #164	; 0xa4
 80152ee:	4aa4      	ldr	r2, [pc, #656]	; (8015580 <problem_fetch+0x13e98>)
 80152f0:	461c      	mov	r4, r3
 80152f2:	4613      	mov	r3, r2
 80152f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80152f6:	6020      	str	r0, [r4, #0]
 80152f8:	6061      	str	r1, [r4, #4]
 80152fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,16,9,11,15,18");
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	3304      	adds	r3, #4
 8015300:	4aa0      	ldr	r2, [pc, #640]	; (8015584 <problem_fetch+0x13e9c>)
 8015302:	461c      	mov	r4, r3
 8015304:	4615      	mov	r5, r2
 8015306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015308:	6020      	str	r0, [r4, #0]
 801530a:	6061      	str	r1, [r4, #4]
 801530c:	60a2      	str	r2, [r4, #8]
 801530e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015316:	4a9c      	ldr	r2, [pc, #624]	; (8015588 <problem_fetch+0x13ea0>)
 8015318:	461c      	mov	r4, r3
 801531a:	4613      	mov	r3, r2
 801531c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801531e:	6020      	str	r0, [r4, #0]
 8015320:	6061      	str	r1, [r4, #4]
 8015322:	60a2      	str	r2, [r4, #8]
			break;
 8015324:	f007 b910 	b.w	801c548 <problem_fetch+0x1ae60>
		case 584 :
			strcpy(p->name,"BLACK TIGER");
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801532e:	4a97      	ldr	r2, [pc, #604]	; (801558c <problem_fetch+0x13ea4>)
 8015330:	461c      	mov	r4, r3
 8015332:	4613      	mov	r3, r2
 8015334:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015336:	6020      	str	r0, [r4, #0]
 8015338:	6061      	str	r1, [r4, #4]
 801533a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015342:	4a93      	ldr	r2, [pc, #588]	; (8015590 <problem_fetch+0x13ea8>)
 8015344:	6810      	ldr	r0, [r2, #0]
 8015346:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	2205      	movs	r2, #5
 801534c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,K,I");
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	33a4      	adds	r3, #164	; 0xa4
 8015352:	4990      	ldr	r1, [pc, #576]	; (8015594 <problem_fetch+0x13eac>)
 8015354:	461a      	mov	r2, r3
 8015356:	460b      	mov	r3, r1
 8015358:	cb03      	ldmia	r3!, {r0, r1}
 801535a:	6010      	str	r0, [r2, #0]
 801535c:	6051      	str	r1, [r2, #4]
 801535e:	881b      	ldrh	r3, [r3, #0]
 8015360:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	3304      	adds	r3, #4
 8015366:	4a8c      	ldr	r2, [pc, #560]	; (8015598 <problem_fetch+0x13eb0>)
 8015368:	461c      	mov	r4, r3
 801536a:	4613      	mov	r3, r2
 801536c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801536e:	6020      	str	r0, [r4, #0]
 8015370:	6061      	str	r1, [r4, #4]
 8015372:	60a2      	str	r2, [r4, #8]
 8015374:	781b      	ldrb	r3, [r3, #0]
 8015376:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801537e:	4987      	ldr	r1, [pc, #540]	; (801559c <problem_fetch+0x13eb4>)
 8015380:	461a      	mov	r2, r3
 8015382:	460b      	mov	r3, r1
 8015384:	cb03      	ldmia	r3!, {r0, r1}
 8015386:	6010      	str	r0, [r2, #0]
 8015388:	6051      	str	r1, [r2, #4]
 801538a:	881b      	ldrh	r3, [r3, #0]
 801538c:	8113      	strh	r3, [r2, #8]
			break;
 801538e:	f007 b8db 	b.w	801c548 <problem_fetch+0x1ae60>
		case 585 :
			strcpy(p->name,"THE REAL ONE");
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015398:	4a81      	ldr	r2, [pc, #516]	; (80155a0 <problem_fetch+0x13eb8>)
 801539a:	461c      	mov	r4, r3
 801539c:	4613      	mov	r3, r2
 801539e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153a0:	6020      	str	r0, [r4, #0]
 80153a2:	6061      	str	r1, [r4, #4]
 80153a4:	60a2      	str	r2, [r4, #8]
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80153b0:	4a6d      	ldr	r2, [pc, #436]	; (8015568 <problem_fetch+0x13e80>)
 80153b2:	6810      	ldr	r0, [r2, #0]
 80153b4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2207      	movs	r2, #7
 80153ba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,E,I");
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	33a4      	adds	r3, #164	; 0xa4
 80153c0:	4a78      	ldr	r2, [pc, #480]	; (80155a4 <problem_fetch+0x13ebc>)
 80153c2:	461c      	mov	r4, r3
 80153c4:	4613      	mov	r3, r2
 80153c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153c8:	6020      	str	r0, [r4, #0]
 80153ca:	6061      	str	r1, [r4, #4]
 80153cc:	60a2      	str	r2, [r4, #8]
 80153ce:	881b      	ldrh	r3, [r3, #0]
 80153d0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,13,14,16,18");
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	3304      	adds	r3, #4
 80153d6:	4a74      	ldr	r2, [pc, #464]	; (80155a8 <problem_fetch+0x13ec0>)
 80153d8:	461d      	mov	r5, r3
 80153da:	4614      	mov	r4, r2
 80153dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80153de:	6028      	str	r0, [r5, #0]
 80153e0:	6069      	str	r1, [r5, #4]
 80153e2:	60aa      	str	r2, [r5, #8]
 80153e4:	60eb      	str	r3, [r5, #12]
 80153e6:	8823      	ldrh	r3, [r4, #0]
 80153e8:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80153f0:	4a6e      	ldr	r2, [pc, #440]	; (80155ac <problem_fetch+0x13ec4>)
 80153f2:	461c      	mov	r4, r3
 80153f4:	4613      	mov	r3, r2
 80153f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80153f8:	6020      	str	r0, [r4, #0]
 80153fa:	6061      	str	r1, [r4, #4]
 80153fc:	60a2      	str	r2, [r4, #8]
 80153fe:	881b      	ldrh	r3, [r3, #0]
 8015400:	81a3      	strh	r3, [r4, #12]
			break;
 8015402:	f007 b8a1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 586 :
			strcpy(p->name,"PURPLE IN THE OPEN");
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801540c:	4a68      	ldr	r2, [pc, #416]	; (80155b0 <problem_fetch+0x13ec8>)
 801540e:	461d      	mov	r5, r3
 8015410:	4614      	mov	r4, r2
 8015412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015414:	6028      	str	r0, [r5, #0]
 8015416:	6069      	str	r1, [r5, #4]
 8015418:	60aa      	str	r2, [r5, #8]
 801541a:	60eb      	str	r3, [r5, #12]
 801541c:	8823      	ldrh	r3, [r4, #0]
 801541e:	78a2      	ldrb	r2, [r4, #2]
 8015420:	822b      	strh	r3, [r5, #16]
 8015422:	4613      	mov	r3, r2
 8015424:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7B");
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801542c:	4a61      	ldr	r2, [pc, #388]	; (80155b4 <problem_fetch+0x13ecc>)
 801542e:	8811      	ldrh	r1, [r2, #0]
 8015430:	7892      	ldrb	r2, [r2, #2]
 8015432:	8019      	strh	r1, [r3, #0]
 8015434:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	2207      	movs	r2, #7
 801543a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,D,I,H,I");
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	33a4      	adds	r3, #164	; 0xa4
 8015440:	4a5d      	ldr	r2, [pc, #372]	; (80155b8 <problem_fetch+0x13ed0>)
 8015442:	461c      	mov	r4, r3
 8015444:	4613      	mov	r3, r2
 8015446:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015448:	6020      	str	r0, [r4, #0]
 801544a:	6061      	str	r1, [r4, #4]
 801544c:	60a2      	str	r2, [r4, #8]
 801544e:	881b      	ldrh	r3, [r3, #0]
 8015450:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,12,11,14,16,18");
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	3304      	adds	r3, #4
 8015456:	4a59      	ldr	r2, [pc, #356]	; (80155bc <problem_fetch+0x13ed4>)
 8015458:	461d      	mov	r5, r3
 801545a:	4614      	mov	r4, r2
 801545c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801545e:	6028      	str	r0, [r5, #0]
 8015460:	6069      	str	r1, [r5, #4]
 8015462:	60aa      	str	r2, [r5, #8]
 8015464:	60eb      	str	r3, [r5, #12]
 8015466:	8823      	ldrh	r3, [r4, #0]
 8015468:	78a2      	ldrb	r2, [r4, #2]
 801546a:	822b      	strh	r3, [r5, #16]
 801546c:	4613      	mov	r3, r2
 801546e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015476:	4a4d      	ldr	r2, [pc, #308]	; (80155ac <problem_fetch+0x13ec4>)
 8015478:	461c      	mov	r4, r3
 801547a:	4613      	mov	r3, r2
 801547c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801547e:	6020      	str	r0, [r4, #0]
 8015480:	6061      	str	r1, [r4, #4]
 8015482:	60a2      	str	r2, [r4, #8]
 8015484:	881b      	ldrh	r3, [r3, #0]
 8015486:	81a3      	strh	r3, [r4, #12]
			break;
 8015488:	f007 b85e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 587 :
			strcpy(p->name,"BOUJEE");
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015492:	4a4b      	ldr	r2, [pc, #300]	; (80155c0 <problem_fetch+0x13ed8>)
 8015494:	6810      	ldr	r0, [r2, #0]
 8015496:	6018      	str	r0, [r3, #0]
 8015498:	8891      	ldrh	r1, [r2, #4]
 801549a:	7992      	ldrb	r2, [r2, #6]
 801549c:	8099      	strh	r1, [r3, #4]
 801549e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80154a6:	4a47      	ldr	r2, [pc, #284]	; (80155c4 <problem_fetch+0x13edc>)
 80154a8:	6810      	ldr	r0, [r2, #0]
 80154aa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2206      	movs	r2, #6
 80154b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,D,H,C,D");
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	33a4      	adds	r3, #164	; 0xa4
 80154b6:	4a44      	ldr	r2, [pc, #272]	; (80155c8 <problem_fetch+0x13ee0>)
 80154b8:	461c      	mov	r4, r3
 80154ba:	4613      	mov	r3, r2
 80154bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154be:	6020      	str	r0, [r4, #0]
 80154c0:	6061      	str	r1, [r4, #4]
 80154c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,13,15,10,8,18");
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	3304      	adds	r3, #4
 80154c8:	4a40      	ldr	r2, [pc, #256]	; (80155cc <problem_fetch+0x13ee4>)
 80154ca:	461c      	mov	r4, r3
 80154cc:	4615      	mov	r5, r2
 80154ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80154d0:	6020      	str	r0, [r4, #0]
 80154d2:	6061      	str	r1, [r4, #4]
 80154d4:	60a2      	str	r2, [r4, #8]
 80154d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80154de:	4a2a      	ldr	r2, [pc, #168]	; (8015588 <problem_fetch+0x13ea0>)
 80154e0:	461c      	mov	r4, r3
 80154e2:	4613      	mov	r3, r2
 80154e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154e6:	6020      	str	r0, [r4, #0]
 80154e8:	6061      	str	r1, [r4, #4]
 80154ea:	60a2      	str	r2, [r4, #8]
			break;
 80154ec:	f007 b82c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 588 :
			strcpy(p->name,"CAPTAIN AUBREY");
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80154f6:	4a36      	ldr	r2, [pc, #216]	; (80155d0 <problem_fetch+0x13ee8>)
 80154f8:	461c      	mov	r4, r3
 80154fa:	4613      	mov	r3, r2
 80154fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80154fe:	6020      	str	r0, [r4, #0]
 8015500:	6061      	str	r1, [r4, #4]
 8015502:	60a2      	str	r2, [r4, #8]
 8015504:	881a      	ldrh	r2, [r3, #0]
 8015506:	789b      	ldrb	r3, [r3, #2]
 8015508:	81a2      	strh	r2, [r4, #12]
 801550a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015512:	4a2c      	ldr	r2, [pc, #176]	; (80155c4 <problem_fetch+0x13edc>)
 8015514:	6810      	ldr	r0, [r2, #0]
 8015516:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2205      	movs	r2, #5
 801551c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,I,I");
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	33a4      	adds	r3, #164	; 0xa4
 8015522:	492c      	ldr	r1, [pc, #176]	; (80155d4 <problem_fetch+0x13eec>)
 8015524:	461a      	mov	r2, r3
 8015526:	460b      	mov	r3, r1
 8015528:	cb03      	ldmia	r3!, {r0, r1}
 801552a:	6010      	str	r0, [r2, #0]
 801552c:	6051      	str	r1, [r2, #4]
 801552e:	881b      	ldrh	r3, [r3, #0]
 8015530:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,14,18");
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3304      	adds	r3, #4
 8015536:	4a28      	ldr	r2, [pc, #160]	; (80155d8 <problem_fetch+0x13ef0>)
 8015538:	461c      	mov	r4, r3
 801553a:	4613      	mov	r3, r2
 801553c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801553e:	6020      	str	r0, [r4, #0]
 8015540:	6061      	str	r1, [r4, #4]
 8015542:	60a2      	str	r2, [r4, #8]
 8015544:	781b      	ldrb	r3, [r3, #0]
 8015546:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801554e:	4913      	ldr	r1, [pc, #76]	; (801559c <problem_fetch+0x13eb4>)
 8015550:	461a      	mov	r2, r3
 8015552:	460b      	mov	r3, r1
 8015554:	cb03      	ldmia	r3!, {r0, r1}
 8015556:	6010      	str	r0, [r2, #0]
 8015558:	6051      	str	r1, [r2, #4]
 801555a:	881b      	ldrh	r3, [r3, #0]
 801555c:	8113      	strh	r3, [r2, #8]
			break;
 801555e:	f006 bff3 	b.w	801c548 <problem_fetch+0x1ae60>
 8015562:	bf00      	nop
 8015564:	0802a888 	.word	0x0802a888
 8015568:	0802395c 	.word	0x0802395c
 801556c:	0802a89c 	.word	0x0802a89c
 8015570:	08028348 	.word	0x08028348
 8015574:	0802393c 	.word	0x0802393c
 8015578:	0802a8a8 	.word	0x0802a8a8
 801557c:	08023a98 	.word	0x08023a98
 8015580:	0802a8b8 	.word	0x0802a8b8
 8015584:	0802a8c4 	.word	0x0802a8c4
 8015588:	08023cf8 	.word	0x08023cf8
 801558c:	0802a8d4 	.word	0x0802a8d4
 8015590:	080239f4 	.word	0x080239f4
 8015594:	0802a8e0 	.word	0x0802a8e0
 8015598:	08023f78 	.word	0x08023f78
 801559c:	08023e28 	.word	0x08023e28
 80155a0:	0802a8ec 	.word	0x0802a8ec
 80155a4:	0802a8fc 	.word	0x0802a8fc
 80155a8:	0802a90c 	.word	0x0802a90c
 80155ac:	08023ae4 	.word	0x08023ae4
 80155b0:	0802a920 	.word	0x0802a920
 80155b4:	08024054 	.word	0x08024054
 80155b8:	0802a934 	.word	0x0802a934
 80155bc:	0802a944 	.word	0x0802a944
 80155c0:	0802a958 	.word	0x0802a958
 80155c4:	08023afc 	.word	0x08023afc
 80155c8:	0802a960 	.word	0x0802a960
 80155cc:	0802a96c 	.word	0x0802a96c
 80155d0:	0802a97c 	.word	0x0802a97c
 80155d4:	0802a98c 	.word	0x0802a98c
 80155d8:	080270e8 	.word	0x080270e8
		case 589 :
			strcpy(p->name,"LONDON FROG");
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80155e2:	4aa8      	ldr	r2, [pc, #672]	; (8015884 <problem_fetch+0x1419c>)
 80155e4:	461c      	mov	r4, r3
 80155e6:	4613      	mov	r3, r2
 80155e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80155ea:	6020      	str	r0, [r4, #0]
 80155ec:	6061      	str	r1, [r4, #4]
 80155ee:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80155f6:	4aa4      	ldr	r2, [pc, #656]	; (8015888 <problem_fetch+0x141a0>)
 80155f8:	8811      	ldrh	r1, [r2, #0]
 80155fa:	7892      	ldrb	r2, [r2, #2]
 80155fc:	8019      	strh	r1, [r3, #0]
 80155fe:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2206      	movs	r2, #6
 8015604:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,F,I,I");
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	33a4      	adds	r3, #164	; 0xa4
 801560a:	4aa0      	ldr	r2, [pc, #640]	; (801588c <problem_fetch+0x141a4>)
 801560c:	461c      	mov	r4, r3
 801560e:	4613      	mov	r3, r2
 8015610:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015612:	6020      	str	r0, [r4, #0]
 8015614:	6061      	str	r1, [r4, #4]
 8015616:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,11,14,18");
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	3304      	adds	r3, #4
 801561c:	4a9c      	ldr	r2, [pc, #624]	; (8015890 <problem_fetch+0x141a8>)
 801561e:	461c      	mov	r4, r3
 8015620:	4613      	mov	r3, r2
 8015622:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015624:	6020      	str	r0, [r4, #0]
 8015626:	6061      	str	r1, [r4, #4]
 8015628:	60a2      	str	r2, [r4, #8]
 801562a:	881a      	ldrh	r2, [r3, #0]
 801562c:	789b      	ldrb	r3, [r3, #2]
 801562e:	81a2      	strh	r2, [r4, #12]
 8015630:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015638:	4a96      	ldr	r2, [pc, #600]	; (8015894 <problem_fetch+0x141ac>)
 801563a:	461c      	mov	r4, r3
 801563c:	4613      	mov	r3, r2
 801563e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015640:	6020      	str	r0, [r4, #0]
 8015642:	6061      	str	r1, [r4, #4]
 8015644:	60a2      	str	r2, [r4, #8]
			break;
 8015646:	f006 bf7f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 590 :
			strcpy(p->name,"MO6.1");
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015650:	4a91      	ldr	r2, [pc, #580]	; (8015898 <problem_fetch+0x141b0>)
 8015652:	6810      	ldr	r0, [r2, #0]
 8015654:	6018      	str	r0, [r3, #0]
 8015656:	8892      	ldrh	r2, [r2, #4]
 8015658:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015660:	4a89      	ldr	r2, [pc, #548]	; (8015888 <problem_fetch+0x141a0>)
 8015662:	8811      	ldrh	r1, [r2, #0]
 8015664:	7892      	ldrb	r2, [r2, #2]
 8015666:	8019      	strh	r1, [r3, #0]
 8015668:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2206      	movs	r2, #6
 801566e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,H,D,D,D");
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	33a4      	adds	r3, #164	; 0xa4
 8015674:	4a89      	ldr	r2, [pc, #548]	; (801589c <problem_fetch+0x141b4>)
 8015676:	461c      	mov	r4, r3
 8015678:	4613      	mov	r3, r2
 801567a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801567c:	6020      	str	r0, [r4, #0]
 801567e:	6061      	str	r1, [r4, #4]
 8015680:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,10,15,11,18");
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	3304      	adds	r3, #4
 8015686:	4a86      	ldr	r2, [pc, #536]	; (80158a0 <problem_fetch+0x141b8>)
 8015688:	461c      	mov	r4, r3
 801568a:	4615      	mov	r5, r2
 801568c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801568e:	6020      	str	r0, [r4, #0]
 8015690:	6061      	str	r1, [r4, #4]
 8015692:	60a2      	str	r2, [r4, #8]
 8015694:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801569c:	4a7d      	ldr	r2, [pc, #500]	; (8015894 <problem_fetch+0x141ac>)
 801569e:	461c      	mov	r4, r3
 80156a0:	4613      	mov	r3, r2
 80156a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80156a4:	6020      	str	r0, [r4, #0]
 80156a6:	6061      	str	r1, [r4, #4]
 80156a8:	60a2      	str	r2, [r4, #8]
			break;
 80156aa:	f006 bf4d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 591 :
			strcpy(p->name,"ALL BLACK ERRTHANG");
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80156b4:	4a7b      	ldr	r2, [pc, #492]	; (80158a4 <problem_fetch+0x141bc>)
 80156b6:	461d      	mov	r5, r3
 80156b8:	4614      	mov	r4, r2
 80156ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80156bc:	6028      	str	r0, [r5, #0]
 80156be:	6069      	str	r1, [r5, #4]
 80156c0:	60aa      	str	r2, [r5, #8]
 80156c2:	60eb      	str	r3, [r5, #12]
 80156c4:	8823      	ldrh	r3, [r4, #0]
 80156c6:	78a2      	ldrb	r2, [r4, #2]
 80156c8:	822b      	strh	r3, [r5, #16]
 80156ca:	4613      	mov	r3, r2
 80156cc:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7C");
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80156d4:	4a74      	ldr	r2, [pc, #464]	; (80158a8 <problem_fetch+0x141c0>)
 80156d6:	8811      	ldrh	r1, [r2, #0]
 80156d8:	7892      	ldrb	r2, [r2, #2]
 80156da:	8019      	strh	r1, [r3, #0]
 80156dc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	2205      	movs	r2, #5
 80156e2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,E,G,A");
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	33a4      	adds	r3, #164	; 0xa4
 80156e8:	4970      	ldr	r1, [pc, #448]	; (80158ac <problem_fetch+0x141c4>)
 80156ea:	461a      	mov	r2, r3
 80156ec:	460b      	mov	r3, r1
 80156ee:	cb03      	ldmia	r3!, {r0, r1}
 80156f0:	6010      	str	r0, [r2, #0]
 80156f2:	6051      	str	r1, [r2, #4]
 80156f4:	881b      	ldrh	r3, [r3, #0]
 80156f6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,14,17,18");
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	3304      	adds	r3, #4
 80156fc:	4a6c      	ldr	r2, [pc, #432]	; (80158b0 <problem_fetch+0x141c8>)
 80156fe:	461c      	mov	r4, r3
 8015700:	4613      	mov	r3, r2
 8015702:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015704:	6020      	str	r0, [r4, #0]
 8015706:	6061      	str	r1, [r4, #4]
 8015708:	60a2      	str	r2, [r4, #8]
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015714:	4967      	ldr	r1, [pc, #412]	; (80158b4 <problem_fetch+0x141cc>)
 8015716:	461a      	mov	r2, r3
 8015718:	460b      	mov	r3, r1
 801571a:	cb03      	ldmia	r3!, {r0, r1}
 801571c:	6010      	str	r0, [r2, #0]
 801571e:	6051      	str	r1, [r2, #4]
 8015720:	881b      	ldrh	r3, [r3, #0]
 8015722:	8113      	strh	r3, [r2, #8]
			break;
 8015724:	f006 bf10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 592 :
			strcpy(p->name,"BLACK ON RICE");
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801572e:	4a62      	ldr	r2, [pc, #392]	; (80158b8 <problem_fetch+0x141d0>)
 8015730:	461c      	mov	r4, r3
 8015732:	4613      	mov	r3, r2
 8015734:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015736:	6020      	str	r0, [r4, #0]
 8015738:	6061      	str	r1, [r4, #4]
 801573a:	60a2      	str	r2, [r4, #8]
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015746:	4a5d      	ldr	r2, [pc, #372]	; (80158bc <problem_fetch+0x141d4>)
 8015748:	6810      	ldr	r0, [r2, #0]
 801574a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	2207      	movs	r2, #7
 8015750:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,H,E,C,A");
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	33a4      	adds	r3, #164	; 0xa4
 8015756:	4a5a      	ldr	r2, [pc, #360]	; (80158c0 <problem_fetch+0x141d8>)
 8015758:	461c      	mov	r4, r3
 801575a:	4613      	mov	r3, r2
 801575c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801575e:	6020      	str	r0, [r4, #0]
 8015760:	6061      	str	r1, [r4, #4]
 8015762:	60a2      	str	r2, [r4, #8]
 8015764:	881b      	ldrh	r3, [r3, #0]
 8015766:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,16,13,18");
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	3304      	adds	r3, #4
 801576c:	4a55      	ldr	r2, [pc, #340]	; (80158c4 <problem_fetch+0x141dc>)
 801576e:	461d      	mov	r5, r3
 8015770:	4614      	mov	r4, r2
 8015772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015774:	6028      	str	r0, [r5, #0]
 8015776:	6069      	str	r1, [r5, #4]
 8015778:	60aa      	str	r2, [r5, #8]
 801577a:	60eb      	str	r3, [r5, #12]
 801577c:	8823      	ldrh	r3, [r4, #0]
 801577e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015786:	4a50      	ldr	r2, [pc, #320]	; (80158c8 <problem_fetch+0x141e0>)
 8015788:	461c      	mov	r4, r3
 801578a:	4613      	mov	r3, r2
 801578c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801578e:	6020      	str	r0, [r4, #0]
 8015790:	6061      	str	r1, [r4, #4]
 8015792:	60a2      	str	r2, [r4, #8]
 8015794:	881b      	ldrh	r3, [r3, #0]
 8015796:	81a3      	strh	r3, [r4, #12]
			break;
 8015798:	f006 bed6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 593 :
			strcpy(p->name,"BAMBINI");
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80157a2:	494a      	ldr	r1, [pc, #296]	; (80158cc <problem_fetch+0x141e4>)
 80157a4:	461a      	mov	r2, r3
 80157a6:	460b      	mov	r3, r1
 80157a8:	cb03      	ldmia	r3!, {r0, r1}
 80157aa:	6010      	str	r0, [r2, #0]
 80157ac:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80157b4:	4a46      	ldr	r2, [pc, #280]	; (80158d0 <problem_fetch+0x141e8>)
 80157b6:	6810      	ldr	r0, [r2, #0]
 80157b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2206      	movs	r2, #6
 80157be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,D,D");
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	33a4      	adds	r3, #164	; 0xa4
 80157c4:	4a43      	ldr	r2, [pc, #268]	; (80158d4 <problem_fetch+0x141ec>)
 80157c6:	461c      	mov	r4, r3
 80157c8:	4613      	mov	r3, r2
 80157ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157cc:	6020      	str	r0, [r4, #0]
 80157ce:	6061      	str	r1, [r4, #4]
 80157d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,15,18");
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	3304      	adds	r3, #4
 80157d6:	4a40      	ldr	r2, [pc, #256]	; (80158d8 <problem_fetch+0x141f0>)
 80157d8:	461c      	mov	r4, r3
 80157da:	4615      	mov	r5, r2
 80157dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80157de:	6020      	str	r0, [r4, #0]
 80157e0:	6061      	str	r1, [r4, #4]
 80157e2:	60a2      	str	r2, [r4, #8]
 80157e4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80157ec:	4a29      	ldr	r2, [pc, #164]	; (8015894 <problem_fetch+0x141ac>)
 80157ee:	461c      	mov	r4, r3
 80157f0:	4613      	mov	r3, r2
 80157f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80157f4:	6020      	str	r0, [r4, #0]
 80157f6:	6061      	str	r1, [r4, #4]
 80157f8:	60a2      	str	r2, [r4, #8]
			break;
 80157fa:	f006 bea5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 594 :
			strcpy(p->name,"TRAVEQUE II");
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015804:	4a35      	ldr	r2, [pc, #212]	; (80158dc <problem_fetch+0x141f4>)
 8015806:	461c      	mov	r4, r3
 8015808:	4613      	mov	r3, r2
 801580a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801580c:	6020      	str	r0, [r4, #0]
 801580e:	6061      	str	r1, [r4, #4]
 8015810:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015818:	4a31      	ldr	r2, [pc, #196]	; (80158e0 <problem_fetch+0x141f8>)
 801581a:	8811      	ldrh	r1, [r2, #0]
 801581c:	7892      	ldrb	r2, [r2, #2]
 801581e:	8019      	strh	r1, [r3, #0]
 8015820:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	220b      	movs	r2, #11
 8015826:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,G,C,D,K,H,H,K,G,I");
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	33a4      	adds	r3, #164	; 0xa4
 801582c:	4a2d      	ldr	r2, [pc, #180]	; (80158e4 <problem_fetch+0x141fc>)
 801582e:	461d      	mov	r5, r3
 8015830:	4614      	mov	r4, r2
 8015832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015834:	6028      	str	r0, [r5, #0]
 8015836:	6069      	str	r1, [r5, #4]
 8015838:	60aa      	str	r2, [r5, #8]
 801583a:	60eb      	str	r3, [r5, #12]
 801583c:	6820      	ldr	r0, [r4, #0]
 801583e:	6128      	str	r0, [r5, #16]
 8015840:	88a3      	ldrh	r3, [r4, #4]
 8015842:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"5,6,4,8,7,9,8,12,14,15,18");
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	3304      	adds	r3, #4
 8015848:	4a27      	ldr	r2, [pc, #156]	; (80158e8 <problem_fetch+0x14200>)
 801584a:	461d      	mov	r5, r3
 801584c:	4614      	mov	r4, r2
 801584e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015850:	6028      	str	r0, [r5, #0]
 8015852:	6069      	str	r1, [r5, #4]
 8015854:	60aa      	str	r2, [r5, #8]
 8015856:	60eb      	str	r3, [r5, #12]
 8015858:	cc03      	ldmia	r4!, {r0, r1}
 801585a:	6128      	str	r0, [r5, #16]
 801585c:	6169      	str	r1, [r5, #20]
 801585e:	8823      	ldrh	r3, [r4, #0]
 8015860:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015868:	4a20      	ldr	r2, [pc, #128]	; (80158ec <problem_fetch+0x14204>)
 801586a:	461d      	mov	r5, r3
 801586c:	4614      	mov	r4, r2
 801586e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015870:	6028      	str	r0, [r5, #0]
 8015872:	6069      	str	r1, [r5, #4]
 8015874:	60aa      	str	r2, [r5, #8]
 8015876:	60eb      	str	r3, [r5, #12]
 8015878:	6820      	ldr	r0, [r4, #0]
 801587a:	6128      	str	r0, [r5, #16]
 801587c:	88a3      	ldrh	r3, [r4, #4]
 801587e:	82ab      	strh	r3, [r5, #20]
			break;
 8015880:	f006 be62 	b.w	801c548 <problem_fetch+0x1ae60>
 8015884:	0802a998 	.word	0x0802a998
 8015888:	0802391c 	.word	0x0802391c
 801588c:	0802a9a4 	.word	0x0802a9a4
 8015890:	0802a9b0 	.word	0x0802a9b0
 8015894:	08023cf8 	.word	0x08023cf8
 8015898:	0802a9c0 	.word	0x0802a9c0
 801589c:	0802a9c8 	.word	0x0802a9c8
 80158a0:	0802a9d4 	.word	0x0802a9d4
 80158a4:	0802a9e4 	.word	0x0802a9e4
 80158a8:	08024190 	.word	0x08024190
 80158ac:	0802a9f8 	.word	0x0802a9f8
 80158b0:	08029f6c 	.word	0x08029f6c
 80158b4:	08023e28 	.word	0x08023e28
 80158b8:	0802aa04 	.word	0x0802aa04
 80158bc:	080239f4 	.word	0x080239f4
 80158c0:	0802aa14 	.word	0x0802aa14
 80158c4:	0802aa24 	.word	0x0802aa24
 80158c8:	080239d4 	.word	0x080239d4
 80158cc:	0802aa38 	.word	0x0802aa38
 80158d0:	0802395c 	.word	0x0802395c
 80158d4:	0802aa40 	.word	0x0802aa40
 80158d8:	0802a06c 	.word	0x0802a06c
 80158dc:	0802aa4c 	.word	0x0802aa4c
 80158e0:	08023a28 	.word	0x08023a28
 80158e4:	0802aa58 	.word	0x0802aa58
 80158e8:	0802aa70 	.word	0x0802aa70
 80158ec:	080272bc 	.word	0x080272bc
		case 595 :
			strcpy(p->name,"TRAVEQUE");
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80158f6:	49ac      	ldr	r1, [pc, #688]	; (8015ba8 <problem_fetch+0x144c0>)
 80158f8:	461a      	mov	r2, r3
 80158fa:	460b      	mov	r3, r1
 80158fc:	cb03      	ldmia	r3!, {r0, r1}
 80158fe:	6010      	str	r0, [r2, #0]
 8015900:	6051      	str	r1, [r2, #4]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801590c:	4aa7      	ldr	r2, [pc, #668]	; (8015bac <problem_fetch+0x144c4>)
 801590e:	8811      	ldrh	r1, [r2, #0]
 8015910:	7892      	ldrb	r2, [r2, #2]
 8015912:	8019      	strh	r1, [r3, #0]
 8015914:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	220a      	movs	r2, #10
 801591a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,J,H,H,H,G,E,H,I");
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	33a4      	adds	r3, #164	; 0xa4
 8015920:	4aa3      	ldr	r2, [pc, #652]	; (8015bb0 <problem_fetch+0x144c8>)
 8015922:	461d      	mov	r5, r3
 8015924:	4614      	mov	r4, r2
 8015926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015928:	6028      	str	r0, [r5, #0]
 801592a:	6069      	str	r1, [r5, #4]
 801592c:	60aa      	str	r2, [r5, #8]
 801592e:	60eb      	str	r3, [r5, #12]
 8015930:	6820      	ldr	r0, [r4, #0]
 8015932:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"6,5,7,16,12,8,4,6,5,18");
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	3304      	adds	r3, #4
 8015938:	4a9e      	ldr	r2, [pc, #632]	; (8015bb4 <problem_fetch+0x144cc>)
 801593a:	461c      	mov	r4, r3
 801593c:	4615      	mov	r5, r2
 801593e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015940:	6020      	str	r0, [r4, #0]
 8015942:	6061      	str	r1, [r4, #4]
 8015944:	60a2      	str	r2, [r4, #8]
 8015946:	60e3      	str	r3, [r4, #12]
 8015948:	6828      	ldr	r0, [r5, #0]
 801594a:	6120      	str	r0, [r4, #16]
 801594c:	88ab      	ldrh	r3, [r5, #4]
 801594e:	79aa      	ldrb	r2, [r5, #6]
 8015950:	82a3      	strh	r3, [r4, #20]
 8015952:	4613      	mov	r3, r2
 8015954:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801595c:	4a96      	ldr	r2, [pc, #600]	; (8015bb8 <problem_fetch+0x144d0>)
 801595e:	461d      	mov	r5, r3
 8015960:	4614      	mov	r4, r2
 8015962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015964:	6028      	str	r0, [r5, #0]
 8015966:	6069      	str	r1, [r5, #4]
 8015968:	60aa      	str	r2, [r5, #8]
 801596a:	60eb      	str	r3, [r5, #12]
 801596c:	6820      	ldr	r0, [r4, #0]
 801596e:	6128      	str	r0, [r5, #16]
			break;
 8015970:	f006 bdea 	b.w	801c548 <problem_fetch+0x1ae60>
		case 596 :
			strcpy(p->name,"YAYABLACK");
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801597a:	4990      	ldr	r1, [pc, #576]	; (8015bbc <problem_fetch+0x144d4>)
 801597c:	461a      	mov	r2, r3
 801597e:	460b      	mov	r3, r1
 8015980:	cb03      	ldmia	r3!, {r0, r1}
 8015982:	6010      	str	r0, [r2, #0]
 8015984:	6051      	str	r1, [r2, #4]
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015990:	4a8b      	ldr	r2, [pc, #556]	; (8015bc0 <problem_fetch+0x144d8>)
 8015992:	6810      	ldr	r0, [r2, #0]
 8015994:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2208      	movs	r2, #8
 801599a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,J,E,H,C,D,D");
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	33a4      	adds	r3, #164	; 0xa4
 80159a0:	4a88      	ldr	r2, [pc, #544]	; (8015bc4 <problem_fetch+0x144dc>)
 80159a2:	461c      	mov	r4, r3
 80159a4:	4615      	mov	r5, r2
 80159a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159a8:	6020      	str	r0, [r4, #0]
 80159aa:	6061      	str	r1, [r4, #4]
 80159ac:	60a2      	str	r2, [r4, #8]
 80159ae:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,7,8,10,13,15,18");
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	3304      	adds	r3, #4
 80159b4:	4a84      	ldr	r2, [pc, #528]	; (8015bc8 <problem_fetch+0x144e0>)
 80159b6:	461d      	mov	r5, r3
 80159b8:	4614      	mov	r4, r2
 80159ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159bc:	6028      	str	r0, [r5, #0]
 80159be:	6069      	str	r1, [r5, #4]
 80159c0:	60aa      	str	r2, [r5, #8]
 80159c2:	60eb      	str	r3, [r5, #12]
 80159c4:	6820      	ldr	r0, [r4, #0]
 80159c6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80159ce:	4a7f      	ldr	r2, [pc, #508]	; (8015bcc <problem_fetch+0x144e4>)
 80159d0:	461c      	mov	r4, r3
 80159d2:	4615      	mov	r5, r2
 80159d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159d6:	6020      	str	r0, [r4, #0]
 80159d8:	6061      	str	r1, [r4, #4]
 80159da:	60a2      	str	r2, [r4, #8]
 80159dc:	60e3      	str	r3, [r4, #12]
			break;
 80159de:	f006 bdb3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 597 :
			strcpy(p->name,"SPORGASSE, GRAZ");
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80159e8:	4a79      	ldr	r2, [pc, #484]	; (8015bd0 <problem_fetch+0x144e8>)
 80159ea:	461c      	mov	r4, r3
 80159ec:	4615      	mov	r5, r2
 80159ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159f0:	6020      	str	r0, [r4, #0]
 80159f2:	6061      	str	r1, [r4, #4]
 80159f4:	60a2      	str	r2, [r4, #8]
 80159f6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7B");
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80159fe:	4a75      	ldr	r2, [pc, #468]	; (8015bd4 <problem_fetch+0x144ec>)
 8015a00:	8811      	ldrh	r1, [r2, #0]
 8015a02:	7892      	ldrb	r2, [r2, #2]
 8015a04:	8019      	strh	r1, [r3, #0]
 8015a06:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	2205      	movs	r2, #5
 8015a0c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,F,E,D");
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	33a4      	adds	r3, #164	; 0xa4
 8015a12:	4971      	ldr	r1, [pc, #452]	; (8015bd8 <problem_fetch+0x144f0>)
 8015a14:	461a      	mov	r2, r3
 8015a16:	460b      	mov	r3, r1
 8015a18:	cb03      	ldmia	r3!, {r0, r1}
 8015a1a:	6010      	str	r0, [r2, #0]
 8015a1c:	6051      	str	r1, [r2, #4]
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,11,16,18");
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	3304      	adds	r3, #4
 8015a26:	4a6d      	ldr	r2, [pc, #436]	; (8015bdc <problem_fetch+0x144f4>)
 8015a28:	461c      	mov	r4, r3
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a2e:	6020      	str	r0, [r4, #0]
 8015a30:	6061      	str	r1, [r4, #4]
 8015a32:	60a2      	str	r2, [r4, #8]
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015a3e:	4968      	ldr	r1, [pc, #416]	; (8015be0 <problem_fetch+0x144f8>)
 8015a40:	461a      	mov	r2, r3
 8015a42:	460b      	mov	r3, r1
 8015a44:	cb03      	ldmia	r3!, {r0, r1}
 8015a46:	6010      	str	r0, [r2, #0]
 8015a48:	6051      	str	r1, [r2, #4]
 8015a4a:	881b      	ldrh	r3, [r3, #0]
 8015a4c:	8113      	strh	r3, [r2, #8]
			break;
 8015a4e:	f006 bd7b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 598 :
			strcpy(p->name,"BACKSLASH");
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015a58:	4962      	ldr	r1, [pc, #392]	; (8015be4 <problem_fetch+0x144fc>)
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	460b      	mov	r3, r1
 8015a5e:	cb03      	ldmia	r3!, {r0, r1}
 8015a60:	6010      	str	r0, [r2, #0]
 8015a62:	6051      	str	r1, [r2, #4]
 8015a64:	881b      	ldrh	r3, [r3, #0]
 8015a66:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015a6e:	4a5e      	ldr	r2, [pc, #376]	; (8015be8 <problem_fetch+0x14500>)
 8015a70:	8811      	ldrh	r1, [r2, #0]
 8015a72:	7892      	ldrb	r2, [r2, #2]
 8015a74:	8019      	strh	r1, [r3, #0]
 8015a76:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2206      	movs	r2, #6
 8015a7c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,G,J,I,I");
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	33a4      	adds	r3, #164	; 0xa4
 8015a82:	4a5a      	ldr	r2, [pc, #360]	; (8015bec <problem_fetch+0x14504>)
 8015a84:	461c      	mov	r4, r3
 8015a86:	4613      	mov	r3, r2
 8015a88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a8a:	6020      	str	r0, [r4, #0]
 8015a8c:	6061      	str	r1, [r4, #4]
 8015a8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	3304      	adds	r3, #4
 8015a94:	4a56      	ldr	r2, [pc, #344]	; (8015bf0 <problem_fetch+0x14508>)
 8015a96:	461c      	mov	r4, r3
 8015a98:	4613      	mov	r3, r2
 8015a9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015a9c:	6020      	str	r0, [r4, #0]
 8015a9e:	6061      	str	r1, [r4, #4]
 8015aa0:	60a2      	str	r2, [r4, #8]
 8015aa2:	881a      	ldrh	r2, [r3, #0]
 8015aa4:	789b      	ldrb	r3, [r3, #2]
 8015aa6:	81a2      	strh	r2, [r4, #12]
 8015aa8:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015ab0:	4a50      	ldr	r2, [pc, #320]	; (8015bf4 <problem_fetch+0x1450c>)
 8015ab2:	461c      	mov	r4, r3
 8015ab4:	4613      	mov	r3, r2
 8015ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ab8:	6020      	str	r0, [r4, #0]
 8015aba:	6061      	str	r1, [r4, #4]
 8015abc:	60a2      	str	r2, [r4, #8]
			break;
 8015abe:	f006 bd43 	b.w	801c548 <problem_fetch+0x1ae60>
		case 599 :
			strcpy(p->name,"SLASHSLASH");
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015ac8:	494b      	ldr	r1, [pc, #300]	; (8015bf8 <problem_fetch+0x14510>)
 8015aca:	461a      	mov	r2, r3
 8015acc:	460b      	mov	r3, r1
 8015ace:	cb03      	ldmia	r3!, {r0, r1}
 8015ad0:	6010      	str	r0, [r2, #0]
 8015ad2:	6051      	str	r1, [r2, #4]
 8015ad4:	8819      	ldrh	r1, [r3, #0]
 8015ad6:	789b      	ldrb	r3, [r3, #2]
 8015ad8:	8111      	strh	r1, [r2, #8]
 8015ada:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015ae2:	4a46      	ldr	r2, [pc, #280]	; (8015bfc <problem_fetch+0x14514>)
 8015ae4:	6810      	ldr	r0, [r2, #0]
 8015ae6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2205      	movs	r2, #5
 8015aec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,A,C,A,A");
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	33a4      	adds	r3, #164	; 0xa4
 8015af2:	4943      	ldr	r1, [pc, #268]	; (8015c00 <problem_fetch+0x14518>)
 8015af4:	461a      	mov	r2, r3
 8015af6:	460b      	mov	r3, r1
 8015af8:	cb03      	ldmia	r3!, {r0, r1}
 8015afa:	6010      	str	r0, [r2, #0]
 8015afc:	6051      	str	r1, [r2, #4]
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,13,14,18");
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	3304      	adds	r3, #4
 8015b06:	4a3f      	ldr	r2, [pc, #252]	; (8015c04 <problem_fetch+0x1451c>)
 8015b08:	461c      	mov	r4, r3
 8015b0a:	4613      	mov	r3, r2
 8015b0c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b0e:	6020      	str	r0, [r4, #0]
 8015b10:	6061      	str	r1, [r4, #4]
 8015b12:	60a2      	str	r2, [r4, #8]
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015b1e:	493a      	ldr	r1, [pc, #232]	; (8015c08 <problem_fetch+0x14520>)
 8015b20:	461a      	mov	r2, r3
 8015b22:	460b      	mov	r3, r1
 8015b24:	cb03      	ldmia	r3!, {r0, r1}
 8015b26:	6010      	str	r0, [r2, #0]
 8015b28:	6051      	str	r1, [r2, #4]
 8015b2a:	881b      	ldrh	r3, [r3, #0]
 8015b2c:	8113      	strh	r3, [r2, #8]
			break;
 8015b2e:	f006 bd0b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 600 :
			strcpy(p->name,"WORLDSTAR");
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015b38:	4934      	ldr	r1, [pc, #208]	; (8015c0c <problem_fetch+0x14524>)
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	cb03      	ldmia	r3!, {r0, r1}
 8015b40:	6010      	str	r0, [r2, #0]
 8015b42:	6051      	str	r1, [r2, #4]
 8015b44:	881b      	ldrh	r3, [r3, #0]
 8015b46:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015b4e:	4a26      	ldr	r2, [pc, #152]	; (8015be8 <problem_fetch+0x14500>)
 8015b50:	8811      	ldrh	r1, [r2, #0]
 8015b52:	7892      	ldrb	r2, [r2, #2]
 8015b54:	8019      	strh	r1, [r3, #0]
 8015b56:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2207      	movs	r2, #7
 8015b5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,A,E,A,D,A");
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	33a4      	adds	r3, #164	; 0xa4
 8015b62:	4a2b      	ldr	r2, [pc, #172]	; (8015c10 <problem_fetch+0x14528>)
 8015b64:	461c      	mov	r4, r3
 8015b66:	4613      	mov	r3, r2
 8015b68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b6a:	6020      	str	r0, [r4, #0]
 8015b6c:	6061      	str	r1, [r4, #4]
 8015b6e:	60a2      	str	r2, [r4, #8]
 8015b70:	881b      	ldrh	r3, [r3, #0]
 8015b72:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,15,18");
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	3304      	adds	r3, #4
 8015b78:	4a26      	ldr	r2, [pc, #152]	; (8015c14 <problem_fetch+0x1452c>)
 8015b7a:	461d      	mov	r5, r3
 8015b7c:	4614      	mov	r4, r2
 8015b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b80:	6028      	str	r0, [r5, #0]
 8015b82:	6069      	str	r1, [r5, #4]
 8015b84:	60aa      	str	r2, [r5, #8]
 8015b86:	60eb      	str	r3, [r5, #12]
 8015b88:	8823      	ldrh	r3, [r4, #0]
 8015b8a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015b92:	4a21      	ldr	r2, [pc, #132]	; (8015c18 <problem_fetch+0x14530>)
 8015b94:	461c      	mov	r4, r3
 8015b96:	4613      	mov	r3, r2
 8015b98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015b9a:	6020      	str	r0, [r4, #0]
 8015b9c:	6061      	str	r1, [r4, #4]
 8015b9e:	60a2      	str	r2, [r4, #8]
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	81a3      	strh	r3, [r4, #12]
			break;
 8015ba4:	f006 bcd0 	b.w	801c548 <problem_fetch+0x1ae60>
 8015ba8:	0802aa8c 	.word	0x0802aa8c
 8015bac:	08023a28 	.word	0x08023a28
 8015bb0:	0802aa98 	.word	0x0802aa98
 8015bb4:	0802aaac 	.word	0x0802aaac
 8015bb8:	08024204 	.word	0x08024204
 8015bbc:	0802aac4 	.word	0x0802aac4
 8015bc0:	0802395c 	.word	0x0802395c
 8015bc4:	0802aad0 	.word	0x0802aad0
 8015bc8:	0802aae0 	.word	0x0802aae0
 8015bcc:	08023a80 	.word	0x08023a80
 8015bd0:	0802aaf4 	.word	0x0802aaf4
 8015bd4:	08024054 	.word	0x08024054
 8015bd8:	0802ab04 	.word	0x0802ab04
 8015bdc:	0802ab10 	.word	0x0802ab10
 8015be0:	0802403c 	.word	0x0802403c
 8015be4:	0802ab20 	.word	0x0802ab20
 8015be8:	0802391c 	.word	0x0802391c
 8015bec:	0802ab2c 	.word	0x0802ab2c
 8015bf0:	0802ab38 	.word	0x0802ab38
 8015bf4:	08023cf8 	.word	0x08023cf8
 8015bf8:	0802ab48 	.word	0x0802ab48
 8015bfc:	08023a98 	.word	0x08023a98
 8015c00:	0802ab54 	.word	0x0802ab54
 8015c04:	0802ab60 	.word	0x0802ab60
 8015c08:	08023e28 	.word	0x08023e28
 8015c0c:	0802ab70 	.word	0x0802ab70
 8015c10:	0802ab7c 	.word	0x0802ab7c
 8015c14:	0802ab8c 	.word	0x0802ab8c
 8015c18:	08023ae4 	.word	0x08023ae4
		case 601 :
			strcpy(p->name,"NINO LA RONCHIA");
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015c22:	4aac      	ldr	r2, [pc, #688]	; (8015ed4 <problem_fetch+0x147ec>)
 8015c24:	461c      	mov	r4, r3
 8015c26:	4615      	mov	r5, r2
 8015c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c2a:	6020      	str	r0, [r4, #0]
 8015c2c:	6061      	str	r1, [r4, #4]
 8015c2e:	60a2      	str	r2, [r4, #8]
 8015c30:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A");
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015c38:	4aa7      	ldr	r2, [pc, #668]	; (8015ed8 <problem_fetch+0x147f0>)
 8015c3a:	8811      	ldrh	r1, [r2, #0]
 8015c3c:	7892      	ldrb	r2, [r2, #2]
 8015c3e:	8019      	strh	r1, [r3, #0]
 8015c40:	709a      	strb	r2, [r3, #2]
			p->moveSize = 11;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	220b      	movs	r2, #11
 8015c46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,K,H,H,D,B,G,H,J,I");
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	33a4      	adds	r3, #164	; 0xa4
 8015c4c:	4aa3      	ldr	r2, [pc, #652]	; (8015edc <problem_fetch+0x147f4>)
 8015c4e:	461d      	mov	r5, r3
 8015c50:	4614      	mov	r4, r2
 8015c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c54:	6028      	str	r0, [r5, #0]
 8015c56:	6069      	str	r1, [r5, #4]
 8015c58:	60aa      	str	r2, [r5, #8]
 8015c5a:	60eb      	str	r3, [r5, #12]
 8015c5c:	6820      	ldr	r0, [r4, #0]
 8015c5e:	6128      	str	r0, [r5, #16]
 8015c60:	88a3      	ldrh	r3, [r4, #4]
 8015c62:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"6,5,9,13,16,7,10,10,10,5,18");
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	3304      	adds	r3, #4
 8015c68:	4a9d      	ldr	r2, [pc, #628]	; (8015ee0 <problem_fetch+0x147f8>)
 8015c6a:	461d      	mov	r5, r3
 8015c6c:	4614      	mov	r4, r2
 8015c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c70:	6028      	str	r0, [r5, #0]
 8015c72:	6069      	str	r1, [r5, #4]
 8015c74:	60aa      	str	r2, [r5, #8]
 8015c76:	60eb      	str	r3, [r5, #12]
 8015c78:	cc07      	ldmia	r4!, {r0, r1, r2}
 8015c7a:	6128      	str	r0, [r5, #16]
 8015c7c:	6169      	str	r1, [r5, #20]
 8015c7e:	61aa      	str	r2, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,e");
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015c86:	4a97      	ldr	r2, [pc, #604]	; (8015ee4 <problem_fetch+0x147fc>)
 8015c88:	461d      	mov	r5, r3
 8015c8a:	4614      	mov	r4, r2
 8015c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015c8e:	6028      	str	r0, [r5, #0]
 8015c90:	6069      	str	r1, [r5, #4]
 8015c92:	60aa      	str	r2, [r5, #8]
 8015c94:	60eb      	str	r3, [r5, #12]
 8015c96:	6820      	ldr	r0, [r4, #0]
 8015c98:	6128      	str	r0, [r5, #16]
 8015c9a:	88a3      	ldrh	r3, [r4, #4]
 8015c9c:	82ab      	strh	r3, [r5, #20]
			break;
 8015c9e:	f006 bc53 	b.w	801c548 <problem_fetch+0x1ae60>
		case 602 :
			strcpy(p->name,"BOBBI'S STRETCH");
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015ca8:	4a8f      	ldr	r2, [pc, #572]	; (8015ee8 <problem_fetch+0x14800>)
 8015caa:	461c      	mov	r4, r3
 8015cac:	4615      	mov	r5, r2
 8015cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015cb0:	6020      	str	r0, [r4, #0]
 8015cb2:	6061      	str	r1, [r4, #4]
 8015cb4:	60a2      	str	r2, [r4, #8]
 8015cb6:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015cbe:	4a8b      	ldr	r2, [pc, #556]	; (8015eec <problem_fetch+0x14804>)
 8015cc0:	6810      	ldr	r0, [r2, #0]
 8015cc2:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2205      	movs	r2, #5
 8015cc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,D,E,A");
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	33a4      	adds	r3, #164	; 0xa4
 8015cce:	4988      	ldr	r1, [pc, #544]	; (8015ef0 <problem_fetch+0x14808>)
 8015cd0:	461a      	mov	r2, r3
 8015cd2:	460b      	mov	r3, r1
 8015cd4:	cb03      	ldmia	r3!, {r0, r1}
 8015cd6:	6010      	str	r0, [r2, #0]
 8015cd8:	6051      	str	r1, [r2, #4]
 8015cda:	881b      	ldrh	r3, [r3, #0]
 8015cdc:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,15,16,18");
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	4a84      	ldr	r2, [pc, #528]	; (8015ef4 <problem_fetch+0x1480c>)
 8015ce4:	461c      	mov	r4, r3
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015cea:	6020      	str	r0, [r4, #0]
 8015cec:	6061      	str	r1, [r4, #4]
 8015cee:	60a2      	str	r2, [r4, #8]
 8015cf0:	881b      	ldrh	r3, [r3, #0]
 8015cf2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015cfa:	497f      	ldr	r1, [pc, #508]	; (8015ef8 <problem_fetch+0x14810>)
 8015cfc:	461a      	mov	r2, r3
 8015cfe:	460b      	mov	r3, r1
 8015d00:	cb03      	ldmia	r3!, {r0, r1}
 8015d02:	6010      	str	r0, [r2, #0]
 8015d04:	6051      	str	r1, [r2, #4]
 8015d06:	881b      	ldrh	r3, [r3, #0]
 8015d08:	8113      	strh	r3, [r2, #8]
			break;
 8015d0a:	f006 bc1d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 603 :
			strcpy(p->name,"A SPY WHO LOVED ME");
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d14:	4a79      	ldr	r2, [pc, #484]	; (8015efc <problem_fetch+0x14814>)
 8015d16:	461d      	mov	r5, r3
 8015d18:	4614      	mov	r4, r2
 8015d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d1c:	6028      	str	r0, [r5, #0]
 8015d1e:	6069      	str	r1, [r5, #4]
 8015d20:	60aa      	str	r2, [r5, #8]
 8015d22:	60eb      	str	r3, [r5, #12]
 8015d24:	8823      	ldrh	r3, [r4, #0]
 8015d26:	78a2      	ldrb	r2, [r4, #2]
 8015d28:	822b      	strh	r3, [r5, #16]
 8015d2a:	4613      	mov	r3, r2
 8015d2c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015d34:	4a6d      	ldr	r2, [pc, #436]	; (8015eec <problem_fetch+0x14804>)
 8015d36:	6810      	ldr	r0, [r2, #0]
 8015d38:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	2207      	movs	r2, #7
 8015d3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,D,G,I,I");
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	33a4      	adds	r3, #164	; 0xa4
 8015d44:	4a6e      	ldr	r2, [pc, #440]	; (8015f00 <problem_fetch+0x14818>)
 8015d46:	461c      	mov	r4, r3
 8015d48:	4613      	mov	r3, r2
 8015d4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d4c:	6020      	str	r0, [r4, #0]
 8015d4e:	6061      	str	r1, [r4, #4]
 8015d50:	60a2      	str	r2, [r4, #8]
 8015d52:	881b      	ldrh	r3, [r3, #0]
 8015d54:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,15,15,10,18");
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	3304      	adds	r3, #4
 8015d5a:	4a6a      	ldr	r2, [pc, #424]	; (8015f04 <problem_fetch+0x1481c>)
 8015d5c:	461d      	mov	r5, r3
 8015d5e:	4614      	mov	r4, r2
 8015d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d62:	6028      	str	r0, [r5, #0]
 8015d64:	6069      	str	r1, [r5, #4]
 8015d66:	60aa      	str	r2, [r5, #8]
 8015d68:	60eb      	str	r3, [r5, #12]
 8015d6a:	8823      	ldrh	r3, [r4, #0]
 8015d6c:	78a2      	ldrb	r2, [r4, #2]
 8015d6e:	822b      	strh	r3, [r5, #16]
 8015d70:	4613      	mov	r3, r2
 8015d72:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015d7a:	4a63      	ldr	r2, [pc, #396]	; (8015f08 <problem_fetch+0x14820>)
 8015d7c:	461c      	mov	r4, r3
 8015d7e:	4613      	mov	r3, r2
 8015d80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d82:	6020      	str	r0, [r4, #0]
 8015d84:	6061      	str	r1, [r4, #4]
 8015d86:	60a2      	str	r2, [r4, #8]
 8015d88:	881b      	ldrh	r3, [r3, #0]
 8015d8a:	81a3      	strh	r3, [r4, #12]
			break;
 8015d8c:	f006 bbdc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 604 :
			strcpy(p->name,"ALLIE WARM UP");
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015d96:	4a5d      	ldr	r2, [pc, #372]	; (8015f0c <problem_fetch+0x14824>)
 8015d98:	461c      	mov	r4, r3
 8015d9a:	4613      	mov	r3, r2
 8015d9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015d9e:	6020      	str	r0, [r4, #0]
 8015da0:	6061      	str	r1, [r4, #4]
 8015da2:	60a2      	str	r2, [r4, #8]
 8015da4:	881b      	ldrh	r3, [r3, #0]
 8015da6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015dae:	4a58      	ldr	r2, [pc, #352]	; (8015f10 <problem_fetch+0x14828>)
 8015db0:	6810      	ldr	r0, [r2, #0]
 8015db2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2206      	movs	r2, #6
 8015db8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,G,J,I");
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	33a4      	adds	r3, #164	; 0xa4
 8015dbe:	4a55      	ldr	r2, [pc, #340]	; (8015f14 <problem_fetch+0x1482c>)
 8015dc0:	461c      	mov	r4, r3
 8015dc2:	4613      	mov	r3, r2
 8015dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015dc6:	6020      	str	r0, [r4, #0]
 8015dc8:	6061      	str	r1, [r4, #4]
 8015dca:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,14,16,18");
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	3304      	adds	r3, #4
 8015dd0:	4a51      	ldr	r2, [pc, #324]	; (8015f18 <problem_fetch+0x14830>)
 8015dd2:	461c      	mov	r4, r3
 8015dd4:	4615      	mov	r5, r2
 8015dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015dd8:	6020      	str	r0, [r4, #0]
 8015dda:	6061      	str	r1, [r4, #4]
 8015ddc:	60a2      	str	r2, [r4, #8]
 8015dde:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015de6:	4a4d      	ldr	r2, [pc, #308]	; (8015f1c <problem_fetch+0x14834>)
 8015de8:	461c      	mov	r4, r3
 8015dea:	4613      	mov	r3, r2
 8015dec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015dee:	6020      	str	r0, [r4, #0]
 8015df0:	6061      	str	r1, [r4, #4]
 8015df2:	60a2      	str	r2, [r4, #8]
			break;
 8015df4:	f006 bba8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 605 :
			strcpy(p->name,"NEW YEARS DELUSIONS");
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015dfe:	4a48      	ldr	r2, [pc, #288]	; (8015f20 <problem_fetch+0x14838>)
 8015e00:	461d      	mov	r5, r3
 8015e02:	4614      	mov	r4, r2
 8015e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e06:	6028      	str	r0, [r5, #0]
 8015e08:	6069      	str	r1, [r5, #4]
 8015e0a:	60aa      	str	r2, [r5, #8]
 8015e0c:	60eb      	str	r3, [r5, #12]
 8015e0e:	6820      	ldr	r0, [r4, #0]
 8015e10:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7B+");
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015e18:	4a42      	ldr	r2, [pc, #264]	; (8015f24 <problem_fetch+0x1483c>)
 8015e1a:	6810      	ldr	r0, [r2, #0]
 8015e1c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	2208      	movs	r2, #8
 8015e22:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,F,G,A,H,D,A");
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	33a4      	adds	r3, #164	; 0xa4
 8015e28:	4a3f      	ldr	r2, [pc, #252]	; (8015f28 <problem_fetch+0x14840>)
 8015e2a:	461c      	mov	r4, r3
 8015e2c:	4615      	mov	r5, r2
 8015e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e30:	6020      	str	r0, [r4, #0]
 8015e32:	6061      	str	r1, [r4, #4]
 8015e34:	60a2      	str	r2, [r4, #8]
 8015e36:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,11,15,14,8,15,18");
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	3304      	adds	r3, #4
 8015e3c:	4a3b      	ldr	r2, [pc, #236]	; (8015f2c <problem_fetch+0x14844>)
 8015e3e:	461d      	mov	r5, r3
 8015e40:	4614      	mov	r4, r2
 8015e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e44:	6028      	str	r0, [r5, #0]
 8015e46:	6069      	str	r1, [r5, #4]
 8015e48:	60aa      	str	r2, [r5, #8]
 8015e4a:	60eb      	str	r3, [r5, #12]
 8015e4c:	6820      	ldr	r0, [r4, #0]
 8015e4e:	6128      	str	r0, [r5, #16]
 8015e50:	7923      	ldrb	r3, [r4, #4]
 8015e52:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015e5a:	4a35      	ldr	r2, [pc, #212]	; (8015f30 <problem_fetch+0x14848>)
 8015e5c:	461c      	mov	r4, r3
 8015e5e:	4615      	mov	r5, r2
 8015e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015e62:	6020      	str	r0, [r4, #0]
 8015e64:	6061      	str	r1, [r4, #4]
 8015e66:	60a2      	str	r2, [r4, #8]
 8015e68:	60e3      	str	r3, [r4, #12]
			break;
 8015e6a:	f006 bb6d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 606 :
			strcpy(p->name,"EAZEEPEAZEE");
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015e74:	4a2f      	ldr	r2, [pc, #188]	; (8015f34 <problem_fetch+0x1484c>)
 8015e76:	461c      	mov	r4, r3
 8015e78:	4613      	mov	r3, r2
 8015e7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015e7c:	6020      	str	r0, [r4, #0]
 8015e7e:	6061      	str	r1, [r4, #4]
 8015e80:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015e88:	4a21      	ldr	r2, [pc, #132]	; (8015f10 <problem_fetch+0x14828>)
 8015e8a:	6810      	ldr	r0, [r2, #0]
 8015e8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2206      	movs	r2, #6
 8015e92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,H,I");
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	33a4      	adds	r3, #164	; 0xa4
 8015e98:	4a27      	ldr	r2, [pc, #156]	; (8015f38 <problem_fetch+0x14850>)
 8015e9a:	461c      	mov	r4, r3
 8015e9c:	4613      	mov	r3, r2
 8015e9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ea0:	6020      	str	r0, [r4, #0]
 8015ea2:	6061      	str	r1, [r4, #4]
 8015ea4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,16,18");
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	3304      	adds	r3, #4
 8015eaa:	4a24      	ldr	r2, [pc, #144]	; (8015f3c <problem_fetch+0x14854>)
 8015eac:	461c      	mov	r4, r3
 8015eae:	4615      	mov	r5, r2
 8015eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015eb2:	6020      	str	r0, [r4, #0]
 8015eb4:	6061      	str	r1, [r4, #4]
 8015eb6:	60a2      	str	r2, [r4, #8]
 8015eb8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015ec0:	4a16      	ldr	r2, [pc, #88]	; (8015f1c <problem_fetch+0x14834>)
 8015ec2:	461c      	mov	r4, r3
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015ec8:	6020      	str	r0, [r4, #0]
 8015eca:	6061      	str	r1, [r4, #4]
 8015ecc:	60a2      	str	r2, [r4, #8]
			break;
 8015ece:	f006 bb3b 	b.w	801c548 <problem_fetch+0x1ae60>
 8015ed2:	bf00      	nop
 8015ed4:	0802aba0 	.word	0x0802aba0
 8015ed8:	0802391c 	.word	0x0802391c
 8015edc:	0802abb0 	.word	0x0802abb0
 8015ee0:	0802abc8 	.word	0x0802abc8
 8015ee4:	080272bc 	.word	0x080272bc
 8015ee8:	0802abe4 	.word	0x0802abe4
 8015eec:	08023afc 	.word	0x08023afc
 8015ef0:	0802abf4 	.word	0x0802abf4
 8015ef4:	0802ac00 	.word	0x0802ac00
 8015ef8:	08023e28 	.word	0x08023e28
 8015efc:	0802ac10 	.word	0x0802ac10
 8015f00:	0802ac24 	.word	0x0802ac24
 8015f04:	0802ac34 	.word	0x0802ac34
 8015f08:	08023ae4 	.word	0x08023ae4
 8015f0c:	0802ac48 	.word	0x0802ac48
 8015f10:	0802395c 	.word	0x0802395c
 8015f14:	0802ac58 	.word	0x0802ac58
 8015f18:	0802ac64 	.word	0x0802ac64
 8015f1c:	08023cf8 	.word	0x08023cf8
 8015f20:	0802ac74 	.word	0x0802ac74
 8015f24:	08023a98 	.word	0x08023a98
 8015f28:	0802ac88 	.word	0x0802ac88
 8015f2c:	0802ac98 	.word	0x0802ac98
 8015f30:	08023b6c 	.word	0x08023b6c
 8015f34:	0802acb0 	.word	0x0802acb0
 8015f38:	0802acbc 	.word	0x0802acbc
 8015f3c:	0802acc8 	.word	0x0802acc8
		case 607 :
			strcpy(p->name,"THE YEAR OF THE ROOSTER");
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015f46:	4ac3      	ldr	r2, [pc, #780]	; (8016254 <problem_fetch+0x14b6c>)
 8015f48:	461d      	mov	r5, r3
 8015f4a:	4614      	mov	r4, r2
 8015f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f4e:	6028      	str	r0, [r5, #0]
 8015f50:	6069      	str	r1, [r5, #4]
 8015f52:	60aa      	str	r2, [r5, #8]
 8015f54:	60eb      	str	r3, [r5, #12]
 8015f56:	cc03      	ldmia	r4!, {r0, r1}
 8015f58:	6128      	str	r0, [r5, #16]
 8015f5a:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B+");
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015f62:	4abd      	ldr	r2, [pc, #756]	; (8016258 <problem_fetch+0x14b70>)
 8015f64:	6810      	ldr	r0, [r2, #0]
 8015f66:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2207      	movs	r2, #7
 8015f6c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,E,F,G,I");
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	33a4      	adds	r3, #164	; 0xa4
 8015f72:	4aba      	ldr	r2, [pc, #744]	; (801625c <problem_fetch+0x14b74>)
 8015f74:	461c      	mov	r4, r3
 8015f76:	4613      	mov	r3, r2
 8015f78:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015f7a:	6020      	str	r0, [r4, #0]
 8015f7c:	6061      	str	r1, [r4, #4]
 8015f7e:	60a2      	str	r2, [r4, #8]
 8015f80:	881b      	ldrh	r3, [r3, #0]
 8015f82:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,5,9,14,13,6,18");
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	3304      	adds	r3, #4
 8015f88:	4ab5      	ldr	r2, [pc, #724]	; (8016260 <problem_fetch+0x14b78>)
 8015f8a:	461d      	mov	r5, r3
 8015f8c:	4614      	mov	r4, r2
 8015f8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f90:	6028      	str	r0, [r5, #0]
 8015f92:	6069      	str	r1, [r5, #4]
 8015f94:	60aa      	str	r2, [r5, #8]
 8015f96:	60eb      	str	r3, [r5, #12]
 8015f98:	8823      	ldrh	r3, [r4, #0]
 8015f9a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e");
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8015fa2:	4ab0      	ldr	r2, [pc, #704]	; (8016264 <problem_fetch+0x14b7c>)
 8015fa4:	461c      	mov	r4, r3
 8015fa6:	4613      	mov	r3, r2
 8015fa8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015faa:	6020      	str	r0, [r4, #0]
 8015fac:	6061      	str	r1, [r4, #4]
 8015fae:	60a2      	str	r2, [r4, #8]
 8015fb0:	881b      	ldrh	r3, [r3, #0]
 8015fb2:	81a3      	strh	r3, [r4, #12]
			break;
 8015fb4:	f006 bac8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 608 :
			strcpy(p->name,"PEACHY");
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8015fbe:	4aaa      	ldr	r2, [pc, #680]	; (8016268 <problem_fetch+0x14b80>)
 8015fc0:	6810      	ldr	r0, [r2, #0]
 8015fc2:	6018      	str	r0, [r3, #0]
 8015fc4:	8891      	ldrh	r1, [r2, #4]
 8015fc6:	7992      	ldrb	r2, [r2, #6]
 8015fc8:	8099      	strh	r1, [r3, #4]
 8015fca:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8015fd2:	4aa6      	ldr	r2, [pc, #664]	; (801626c <problem_fetch+0x14b84>)
 8015fd4:	8811      	ldrh	r1, [r2, #0]
 8015fd6:	7892      	ldrb	r2, [r2, #2]
 8015fd8:	8019      	strh	r1, [r3, #0]
 8015fda:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2207      	movs	r2, #7
 8015fe0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,C,D,A");
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	33a4      	adds	r3, #164	; 0xa4
 8015fe6:	4aa2      	ldr	r2, [pc, #648]	; (8016270 <problem_fetch+0x14b88>)
 8015fe8:	461c      	mov	r4, r3
 8015fea:	4613      	mov	r3, r2
 8015fec:	cb07      	ldmia	r3!, {r0, r1, r2}
 8015fee:	6020      	str	r0, [r4, #0]
 8015ff0:	6061      	str	r1, [r4, #4]
 8015ff2:	60a2      	str	r2, [r4, #8]
 8015ff4:	881b      	ldrh	r3, [r3, #0]
 8015ff6:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,15,18");
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	4a9d      	ldr	r2, [pc, #628]	; (8016274 <problem_fetch+0x14b8c>)
 8015ffe:	461d      	mov	r5, r3
 8016000:	4614      	mov	r4, r2
 8016002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016004:	6028      	str	r0, [r5, #0]
 8016006:	6069      	str	r1, [r5, #4]
 8016008:	60aa      	str	r2, [r5, #8]
 801600a:	60eb      	str	r3, [r5, #12]
 801600c:	8823      	ldrh	r3, [r4, #0]
 801600e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016016:	4a98      	ldr	r2, [pc, #608]	; (8016278 <problem_fetch+0x14b90>)
 8016018:	461c      	mov	r4, r3
 801601a:	4613      	mov	r3, r2
 801601c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801601e:	6020      	str	r0, [r4, #0]
 8016020:	6061      	str	r1, [r4, #4]
 8016022:	60a2      	str	r2, [r4, #8]
 8016024:	881b      	ldrh	r3, [r3, #0]
 8016026:	81a3      	strh	r3, [r4, #12]
			break;
 8016028:	f006 ba8e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 609 :
			strcpy(p->name,"UFO@5");
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016032:	4a92      	ldr	r2, [pc, #584]	; (801627c <problem_fetch+0x14b94>)
 8016034:	6810      	ldr	r0, [r2, #0]
 8016036:	6018      	str	r0, [r3, #0]
 8016038:	8892      	ldrh	r2, [r2, #4]
 801603a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016042:	4a8f      	ldr	r2, [pc, #572]	; (8016280 <problem_fetch+0x14b98>)
 8016044:	6810      	ldr	r0, [r2, #0]
 8016046:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2206      	movs	r2, #6
 801604c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,I,I,E,D");
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	33a4      	adds	r3, #164	; 0xa4
 8016052:	4a8c      	ldr	r2, [pc, #560]	; (8016284 <problem_fetch+0x14b9c>)
 8016054:	461c      	mov	r4, r3
 8016056:	4613      	mov	r3, r2
 8016058:	cb07      	ldmia	r3!, {r0, r1, r2}
 801605a:	6020      	str	r0, [r4, #0]
 801605c:	6061      	str	r1, [r4, #4]
 801605e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,14,16,18");
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	3304      	adds	r3, #4
 8016064:	4a88      	ldr	r2, [pc, #544]	; (8016288 <problem_fetch+0x14ba0>)
 8016066:	461c      	mov	r4, r3
 8016068:	4615      	mov	r5, r2
 801606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801606c:	6020      	str	r0, [r4, #0]
 801606e:	6061      	str	r1, [r4, #4]
 8016070:	60a2      	str	r2, [r4, #8]
 8016072:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801607a:	4a84      	ldr	r2, [pc, #528]	; (801628c <problem_fetch+0x14ba4>)
 801607c:	461c      	mov	r4, r3
 801607e:	4613      	mov	r3, r2
 8016080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016082:	6020      	str	r0, [r4, #0]
 8016084:	6061      	str	r1, [r4, #4]
 8016086:	60a2      	str	r2, [r4, #8]
			break;
 8016088:	f006 ba5e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 610 :
			strcpy(p->name,"HUNTED BY GUSTAV");
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016092:	4a7f      	ldr	r2, [pc, #508]	; (8016290 <problem_fetch+0x14ba8>)
 8016094:	461d      	mov	r5, r3
 8016096:	4614      	mov	r4, r2
 8016098:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801609a:	6028      	str	r0, [r5, #0]
 801609c:	6069      	str	r1, [r5, #4]
 801609e:	60aa      	str	r2, [r5, #8]
 80160a0:	60eb      	str	r3, [r5, #12]
 80160a2:	7823      	ldrb	r3, [r4, #0]
 80160a4:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80160ac:	4a79      	ldr	r2, [pc, #484]	; (8016294 <problem_fetch+0x14bac>)
 80160ae:	6810      	ldr	r0, [r2, #0]
 80160b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2207      	movs	r2, #7
 80160b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,A,D,A");
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	33a4      	adds	r3, #164	; 0xa4
 80160bc:	4a76      	ldr	r2, [pc, #472]	; (8016298 <problem_fetch+0x14bb0>)
 80160be:	461c      	mov	r4, r3
 80160c0:	4613      	mov	r3, r2
 80160c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160c4:	6020      	str	r0, [r4, #0]
 80160c6:	6061      	str	r1, [r4, #4]
 80160c8:	60a2      	str	r2, [r4, #8]
 80160ca:	881b      	ldrh	r3, [r3, #0]
 80160cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,11,14,15,18");
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	3304      	adds	r3, #4
 80160d2:	4a72      	ldr	r2, [pc, #456]	; (801629c <problem_fetch+0x14bb4>)
 80160d4:	461d      	mov	r5, r3
 80160d6:	4614      	mov	r4, r2
 80160d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160da:	6028      	str	r0, [r5, #0]
 80160dc:	6069      	str	r1, [r5, #4]
 80160de:	60aa      	str	r2, [r5, #8]
 80160e0:	60eb      	str	r3, [r5, #12]
 80160e2:	8823      	ldrh	r3, [r4, #0]
 80160e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80160ec:	4a62      	ldr	r2, [pc, #392]	; (8016278 <problem_fetch+0x14b90>)
 80160ee:	461c      	mov	r4, r3
 80160f0:	4613      	mov	r3, r2
 80160f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80160f4:	6020      	str	r0, [r4, #0]
 80160f6:	6061      	str	r1, [r4, #4]
 80160f8:	60a2      	str	r2, [r4, #8]
 80160fa:	881b      	ldrh	r3, [r3, #0]
 80160fc:	81a3      	strh	r3, [r4, #12]
			break;
 80160fe:	f006 ba23 	b.w	801c548 <problem_fetch+0x1ae60>
		case 611 :
			strcpy(p->name,"BOTTLE SERVICE");
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016108:	4a65      	ldr	r2, [pc, #404]	; (80162a0 <problem_fetch+0x14bb8>)
 801610a:	461c      	mov	r4, r3
 801610c:	4613      	mov	r3, r2
 801610e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016110:	6020      	str	r0, [r4, #0]
 8016112:	6061      	str	r1, [r4, #4]
 8016114:	60a2      	str	r2, [r4, #8]
 8016116:	881a      	ldrh	r2, [r3, #0]
 8016118:	789b      	ldrb	r3, [r3, #2]
 801611a:	81a2      	strh	r2, [r4, #12]
 801611c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016124:	4a5f      	ldr	r2, [pc, #380]	; (80162a4 <problem_fetch+0x14bbc>)
 8016126:	8811      	ldrh	r1, [r2, #0]
 8016128:	7892      	ldrb	r2, [r2, #2]
 801612a:	8019      	strh	r1, [r3, #0]
 801612c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	2206      	movs	r2, #6
 8016132:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,K,G,I");
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	33a4      	adds	r3, #164	; 0xa4
 8016138:	4a5b      	ldr	r2, [pc, #364]	; (80162a8 <problem_fetch+0x14bc0>)
 801613a:	461c      	mov	r4, r3
 801613c:	4613      	mov	r3, r2
 801613e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016140:	6020      	str	r0, [r4, #0]
 8016142:	6061      	str	r1, [r4, #4]
 8016144:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,14,15,18");
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	3304      	adds	r3, #4
 801614a:	4a58      	ldr	r2, [pc, #352]	; (80162ac <problem_fetch+0x14bc4>)
 801614c:	461c      	mov	r4, r3
 801614e:	4615      	mov	r5, r2
 8016150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016152:	6020      	str	r0, [r4, #0]
 8016154:	6061      	str	r1, [r4, #4]
 8016156:	60a2      	str	r2, [r4, #8]
 8016158:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016160:	4a53      	ldr	r2, [pc, #332]	; (80162b0 <problem_fetch+0x14bc8>)
 8016162:	461c      	mov	r4, r3
 8016164:	4613      	mov	r3, r2
 8016166:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016168:	6020      	str	r0, [r4, #0]
 801616a:	6061      	str	r1, [r4, #4]
 801616c:	60a2      	str	r2, [r4, #8]
			break;
 801616e:	f006 b9eb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 612 :
			strcpy(p->name,"FOX AND JAX");
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016178:	4a4e      	ldr	r2, [pc, #312]	; (80162b4 <problem_fetch+0x14bcc>)
 801617a:	461c      	mov	r4, r3
 801617c:	4613      	mov	r3, r2
 801617e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016180:	6020      	str	r0, [r4, #0]
 8016182:	6061      	str	r1, [r4, #4]
 8016184:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801618c:	4a37      	ldr	r2, [pc, #220]	; (801626c <problem_fetch+0x14b84>)
 801618e:	8811      	ldrh	r1, [r2, #0]
 8016190:	7892      	ldrb	r2, [r2, #2]
 8016192:	8019      	strh	r1, [r3, #0]
 8016194:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	2205      	movs	r2, #5
 801619a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,F,I,I");
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	33a4      	adds	r3, #164	; 0xa4
 80161a0:	4945      	ldr	r1, [pc, #276]	; (80162b8 <problem_fetch+0x14bd0>)
 80161a2:	461a      	mov	r2, r3
 80161a4:	460b      	mov	r3, r1
 80161a6:	cb03      	ldmia	r3!, {r0, r1}
 80161a8:	6010      	str	r0, [r2, #0]
 80161aa:	6051      	str	r1, [r2, #4]
 80161ac:	881b      	ldrh	r3, [r3, #0]
 80161ae:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	3304      	adds	r3, #4
 80161b4:	4a41      	ldr	r2, [pc, #260]	; (80162bc <problem_fetch+0x14bd4>)
 80161b6:	461c      	mov	r4, r3
 80161b8:	4613      	mov	r3, r2
 80161ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80161bc:	6020      	str	r0, [r4, #0]
 80161be:	6061      	str	r1, [r4, #4]
 80161c0:	60a2      	str	r2, [r4, #8]
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80161cc:	493c      	ldr	r1, [pc, #240]	; (80162c0 <problem_fetch+0x14bd8>)
 80161ce:	461a      	mov	r2, r3
 80161d0:	460b      	mov	r3, r1
 80161d2:	cb03      	ldmia	r3!, {r0, r1}
 80161d4:	6010      	str	r0, [r2, #0]
 80161d6:	6051      	str	r1, [r2, #4]
 80161d8:	881b      	ldrh	r3, [r3, #0]
 80161da:	8113      	strh	r3, [r2, #8]
			break;
 80161dc:	f006 b9b4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 613 :
			strcpy(p->name,"GOT A LICENSE TO KILL");
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80161e6:	4a37      	ldr	r2, [pc, #220]	; (80162c4 <problem_fetch+0x14bdc>)
 80161e8:	461d      	mov	r5, r3
 80161ea:	4614      	mov	r4, r2
 80161ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80161ee:	6028      	str	r0, [r5, #0]
 80161f0:	6069      	str	r1, [r5, #4]
 80161f2:	60aa      	str	r2, [r5, #8]
 80161f4:	60eb      	str	r3, [r5, #12]
 80161f6:	6820      	ldr	r0, [r4, #0]
 80161f8:	6128      	str	r0, [r5, #16]
 80161fa:	88a3      	ldrh	r3, [r4, #4]
 80161fc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7C");
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016204:	4a30      	ldr	r2, [pc, #192]	; (80162c8 <problem_fetch+0x14be0>)
 8016206:	8811      	ldrh	r1, [r2, #0]
 8016208:	7892      	ldrb	r2, [r2, #2]
 801620a:	8019      	strh	r1, [r3, #0]
 801620c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2206      	movs	r2, #6
 8016212:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,B,F,A");
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	33a4      	adds	r3, #164	; 0xa4
 8016218:	4a2c      	ldr	r2, [pc, #176]	; (80162cc <problem_fetch+0x14be4>)
 801621a:	461c      	mov	r4, r3
 801621c:	4613      	mov	r3, r2
 801621e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016220:	6020      	str	r0, [r4, #0]
 8016222:	6061      	str	r1, [r4, #4]
 8016224:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,14,15,11,18");
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	3304      	adds	r3, #4
 801622a:	4a29      	ldr	r2, [pc, #164]	; (80162d0 <problem_fetch+0x14be8>)
 801622c:	461c      	mov	r4, r3
 801622e:	4615      	mov	r5, r2
 8016230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016232:	6020      	str	r0, [r4, #0]
 8016234:	6061      	str	r1, [r4, #4]
 8016236:	60a2      	str	r2, [r4, #8]
 8016238:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016240:	4a12      	ldr	r2, [pc, #72]	; (801628c <problem_fetch+0x14ba4>)
 8016242:	461c      	mov	r4, r3
 8016244:	4613      	mov	r3, r2
 8016246:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016248:	6020      	str	r0, [r4, #0]
 801624a:	6061      	str	r1, [r4, #4]
 801624c:	60a2      	str	r2, [r4, #8]
			break;
 801624e:	f006 b97b 	b.w	801c548 <problem_fetch+0x1ae60>
 8016252:	bf00      	nop
 8016254:	0802acd8 	.word	0x0802acd8
 8016258:	08023a98 	.word	0x08023a98
 801625c:	0802acf0 	.word	0x0802acf0
 8016260:	0802ad00 	.word	0x0802ad00
 8016264:	0802ad14 	.word	0x0802ad14
 8016268:	0802ad24 	.word	0x0802ad24
 801626c:	08023a28 	.word	0x08023a28
 8016270:	0802a3bc 	.word	0x0802a3bc
 8016274:	08028644 	.word	0x08028644
 8016278:	08023ae4 	.word	0x08023ae4
 801627c:	0802ad2c 	.word	0x0802ad2c
 8016280:	0802395c 	.word	0x0802395c
 8016284:	0802ad34 	.word	0x0802ad34
 8016288:	0802ad40 	.word	0x0802ad40
 801628c:	08023cf8 	.word	0x08023cf8
 8016290:	0802ad50 	.word	0x0802ad50
 8016294:	080239f4 	.word	0x080239f4
 8016298:	0802ad64 	.word	0x0802ad64
 801629c:	0802ad74 	.word	0x0802ad74
 80162a0:	0802ad88 	.word	0x0802ad88
 80162a4:	0802391c 	.word	0x0802391c
 80162a8:	0802ad98 	.word	0x0802ad98
 80162ac:	0802ada4 	.word	0x0802ada4
 80162b0:	0802393c 	.word	0x0802393c
 80162b4:	0802adb4 	.word	0x0802adb4
 80162b8:	0802adc0 	.word	0x0802adc0
 80162bc:	08025090 	.word	0x08025090
 80162c0:	08023e28 	.word	0x08023e28
 80162c4:	0802adcc 	.word	0x0802adcc
 80162c8:	08024190 	.word	0x08024190
 80162cc:	0802ade4 	.word	0x0802ade4
 80162d0:	0802adf0 	.word	0x0802adf0
		case 614 :
			strcpy(p->name,"JET-BLACK HAIR");
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80162da:	4ac1      	ldr	r2, [pc, #772]	; (80165e0 <problem_fetch+0x14ef8>)
 80162dc:	461c      	mov	r4, r3
 80162de:	4613      	mov	r3, r2
 80162e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80162e2:	6020      	str	r0, [r4, #0]
 80162e4:	6061      	str	r1, [r4, #4]
 80162e6:	60a2      	str	r2, [r4, #8]
 80162e8:	881a      	ldrh	r2, [r3, #0]
 80162ea:	789b      	ldrb	r3, [r3, #2]
 80162ec:	81a2      	strh	r2, [r4, #12]
 80162ee:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7B+");
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80162f6:	4abb      	ldr	r2, [pc, #748]	; (80165e4 <problem_fetch+0x14efc>)
 80162f8:	6810      	ldr	r0, [r2, #0]
 80162fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2206      	movs	r2, #6
 8016300:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,D,A");
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	33a4      	adds	r3, #164	; 0xa4
 8016306:	4ab8      	ldr	r2, [pc, #736]	; (80165e8 <problem_fetch+0x14f00>)
 8016308:	461c      	mov	r4, r3
 801630a:	4613      	mov	r3, r2
 801630c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801630e:	6020      	str	r0, [r4, #0]
 8016310:	6061      	str	r1, [r4, #4]
 8016312:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,15,18");
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	3304      	adds	r3, #4
 8016318:	4ab4      	ldr	r2, [pc, #720]	; (80165ec <problem_fetch+0x14f04>)
 801631a:	461c      	mov	r4, r3
 801631c:	4615      	mov	r5, r2
 801631e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016320:	6020      	str	r0, [r4, #0]
 8016322:	6061      	str	r1, [r4, #4]
 8016324:	60a2      	str	r2, [r4, #8]
 8016326:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801632e:	4ab0      	ldr	r2, [pc, #704]	; (80165f0 <problem_fetch+0x14f08>)
 8016330:	461c      	mov	r4, r3
 8016332:	4613      	mov	r3, r2
 8016334:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016336:	6020      	str	r0, [r4, #0]
 8016338:	6061      	str	r1, [r4, #4]
 801633a:	60a2      	str	r2, [r4, #8]
			break;
 801633c:	f006 b904 	b.w	801c548 <problem_fetch+0x1ae60>
		case 615 :
			strcpy(p->name,"BLACK CRAPPIE");
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016346:	4aab      	ldr	r2, [pc, #684]	; (80165f4 <problem_fetch+0x14f0c>)
 8016348:	461c      	mov	r4, r3
 801634a:	4613      	mov	r3, r2
 801634c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801634e:	6020      	str	r0, [r4, #0]
 8016350:	6061      	str	r1, [r4, #4]
 8016352:	60a2      	str	r2, [r4, #8]
 8016354:	881b      	ldrh	r3, [r3, #0]
 8016356:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801635e:	4aa6      	ldr	r2, [pc, #664]	; (80165f8 <problem_fetch+0x14f10>)
 8016360:	6810      	ldr	r0, [r2, #0]
 8016362:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	2206      	movs	r2, #6
 8016368:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,D");
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	33a4      	adds	r3, #164	; 0xa4
 801636e:	4aa3      	ldr	r2, [pc, #652]	; (80165fc <problem_fetch+0x14f14>)
 8016370:	461c      	mov	r4, r3
 8016372:	4613      	mov	r3, r2
 8016374:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016376:	6020      	str	r0, [r4, #0]
 8016378:	6061      	str	r1, [r4, #4]
 801637a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,9,9,12,14,18");
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	3304      	adds	r3, #4
 8016380:	4a9f      	ldr	r2, [pc, #636]	; (8016600 <problem_fetch+0x14f18>)
 8016382:	461c      	mov	r4, r3
 8016384:	4613      	mov	r3, r2
 8016386:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016388:	6020      	str	r0, [r4, #0]
 801638a:	6061      	str	r1, [r4, #4]
 801638c:	60a2      	str	r2, [r4, #8]
 801638e:	881a      	ldrh	r2, [r3, #0]
 8016390:	789b      	ldrb	r3, [r3, #2]
 8016392:	81a2      	strh	r2, [r4, #12]
 8016394:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801639c:	4a94      	ldr	r2, [pc, #592]	; (80165f0 <problem_fetch+0x14f08>)
 801639e:	461c      	mov	r4, r3
 80163a0:	4613      	mov	r3, r2
 80163a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80163a4:	6020      	str	r0, [r4, #0]
 80163a6:	6061      	str	r1, [r4, #4]
 80163a8:	60a2      	str	r2, [r4, #8]
			break;
 80163aa:	f006 b8cd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 616 :
			strcpy(p->name,"BLACK KISS BLACK");
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80163b4:	4a93      	ldr	r2, [pc, #588]	; (8016604 <problem_fetch+0x14f1c>)
 80163b6:	461d      	mov	r5, r3
 80163b8:	4614      	mov	r4, r2
 80163ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163bc:	6028      	str	r0, [r5, #0]
 80163be:	6069      	str	r1, [r5, #4]
 80163c0:	60aa      	str	r2, [r5, #8]
 80163c2:	60eb      	str	r3, [r5, #12]
 80163c4:	7823      	ldrb	r3, [r4, #0]
 80163c6:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C");
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80163ce:	4a8e      	ldr	r2, [pc, #568]	; (8016608 <problem_fetch+0x14f20>)
 80163d0:	8811      	ldrh	r1, [r2, #0]
 80163d2:	7892      	ldrb	r2, [r2, #2]
 80163d4:	8019      	strh	r1, [r3, #0]
 80163d6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2208      	movs	r2, #8
 80163dc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,H,C,G,E,I");
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	33a4      	adds	r3, #164	; 0xa4
 80163e2:	4a8a      	ldr	r2, [pc, #552]	; (801660c <problem_fetch+0x14f24>)
 80163e4:	461c      	mov	r4, r3
 80163e6:	4615      	mov	r5, r2
 80163e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163ea:	6020      	str	r0, [r4, #0]
 80163ec:	6061      	str	r1, [r4, #4]
 80163ee:	60a2      	str	r2, [r4, #8]
 80163f0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,8,10,13,14,16,18");
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	3304      	adds	r3, #4
 80163f6:	4a86      	ldr	r2, [pc, #536]	; (8016610 <problem_fetch+0x14f28>)
 80163f8:	461d      	mov	r5, r3
 80163fa:	4614      	mov	r4, r2
 80163fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80163fe:	6028      	str	r0, [r5, #0]
 8016400:	6069      	str	r1, [r5, #4]
 8016402:	60aa      	str	r2, [r5, #8]
 8016404:	60eb      	str	r3, [r5, #12]
 8016406:	6820      	ldr	r0, [r4, #0]
 8016408:	6128      	str	r0, [r5, #16]
 801640a:	7923      	ldrb	r3, [r4, #4]
 801640c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016414:	4a7f      	ldr	r2, [pc, #508]	; (8016614 <problem_fetch+0x14f2c>)
 8016416:	461c      	mov	r4, r3
 8016418:	4615      	mov	r5, r2
 801641a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801641c:	6020      	str	r0, [r4, #0]
 801641e:	6061      	str	r1, [r4, #4]
 8016420:	60a2      	str	r2, [r4, #8]
 8016422:	60e3      	str	r3, [r4, #12]
			break;
 8016424:	f006 b890 	b.w	801c548 <problem_fetch+0x1ae60>
		case 617 :
			strcpy(p->name,"GORILLA NR.2");
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801642e:	4a7a      	ldr	r2, [pc, #488]	; (8016618 <problem_fetch+0x14f30>)
 8016430:	461c      	mov	r4, r3
 8016432:	4613      	mov	r3, r2
 8016434:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016436:	6020      	str	r0, [r4, #0]
 8016438:	6061      	str	r1, [r4, #4]
 801643a:	60a2      	str	r2, [r4, #8]
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016446:	4a75      	ldr	r2, [pc, #468]	; (801661c <problem_fetch+0x14f34>)
 8016448:	6810      	ldr	r0, [r2, #0]
 801644a:	6018      	str	r0, [r3, #0]
			p->moveSize = 4;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2204      	movs	r2, #4
 8016450:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,G,D");
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	33a4      	adds	r3, #164	; 0xa4
 8016456:	4972      	ldr	r1, [pc, #456]	; (8016620 <problem_fetch+0x14f38>)
 8016458:	461a      	mov	r2, r3
 801645a:	460b      	mov	r3, r1
 801645c:	cb03      	ldmia	r3!, {r0, r1}
 801645e:	6010      	str	r0, [r2, #0]
 8016460:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"6,10,14,18");
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	3304      	adds	r3, #4
 8016466:	496f      	ldr	r1, [pc, #444]	; (8016624 <problem_fetch+0x14f3c>)
 8016468:	461a      	mov	r2, r3
 801646a:	460b      	mov	r3, r1
 801646c:	cb03      	ldmia	r3!, {r0, r1}
 801646e:	6010      	str	r0, [r2, #0]
 8016470:	6051      	str	r1, [r2, #4]
 8016472:	8819      	ldrh	r1, [r3, #0]
 8016474:	789b      	ldrb	r3, [r3, #2]
 8016476:	8111      	strh	r1, [r2, #8]
 8016478:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016480:	4969      	ldr	r1, [pc, #420]	; (8016628 <problem_fetch+0x14f40>)
 8016482:	461a      	mov	r2, r3
 8016484:	460b      	mov	r3, r1
 8016486:	cb03      	ldmia	r3!, {r0, r1}
 8016488:	6010      	str	r0, [r2, #0]
 801648a:	6051      	str	r1, [r2, #4]
			break;
 801648c:	f006 b85c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 618 :
			strcpy(p->name,"BLACK MAGIC");
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016496:	4a65      	ldr	r2, [pc, #404]	; (801662c <problem_fetch+0x14f44>)
 8016498:	461c      	mov	r4, r3
 801649a:	4613      	mov	r3, r2
 801649c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801649e:	6020      	str	r0, [r4, #0]
 80164a0:	6061      	str	r1, [r4, #4]
 80164a2:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80164aa:	4a5c      	ldr	r2, [pc, #368]	; (801661c <problem_fetch+0x14f34>)
 80164ac:	6810      	ldr	r0, [r2, #0]
 80164ae:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2207      	movs	r2, #7
 80164b4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,G,C,H,F,H,I");
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	33a4      	adds	r3, #164	; 0xa4
 80164ba:	4a5d      	ldr	r2, [pc, #372]	; (8016630 <problem_fetch+0x14f48>)
 80164bc:	461c      	mov	r4, r3
 80164be:	4613      	mov	r3, r2
 80164c0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164c2:	6020      	str	r0, [r4, #0]
 80164c4:	6061      	str	r1, [r4, #4]
 80164c6:	60a2      	str	r2, [r4, #8]
 80164c8:	881b      	ldrh	r3, [r3, #0]
 80164ca:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,4,8,10,13,16,18");
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	3304      	adds	r3, #4
 80164d0:	4a58      	ldr	r2, [pc, #352]	; (8016634 <problem_fetch+0x14f4c>)
 80164d2:	461d      	mov	r5, r3
 80164d4:	4614      	mov	r4, r2
 80164d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80164d8:	6028      	str	r0, [r5, #0]
 80164da:	6069      	str	r1, [r5, #4]
 80164dc:	60aa      	str	r2, [r5, #8]
 80164de:	60eb      	str	r3, [r5, #12]
 80164e0:	8823      	ldrh	r3, [r4, #0]
 80164e2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80164ea:	4a53      	ldr	r2, [pc, #332]	; (8016638 <problem_fetch+0x14f50>)
 80164ec:	461c      	mov	r4, r3
 80164ee:	4613      	mov	r3, r2
 80164f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80164f2:	6020      	str	r0, [r4, #0]
 80164f4:	6061      	str	r1, [r4, #4]
 80164f6:	60a2      	str	r2, [r4, #8]
 80164f8:	881b      	ldrh	r3, [r3, #0]
 80164fa:	81a3      	strh	r3, [r4, #12]
			break;
 80164fc:	f006 b824 	b.w	801c548 <problem_fetch+0x1ae60>
		case 619 :
			strcpy(p->name,"GOOD LIFE");
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016506:	494d      	ldr	r1, [pc, #308]	; (801663c <problem_fetch+0x14f54>)
 8016508:	461a      	mov	r2, r3
 801650a:	460b      	mov	r3, r1
 801650c:	cb03      	ldmia	r3!, {r0, r1}
 801650e:	6010      	str	r0, [r2, #0]
 8016510:	6051      	str	r1, [r2, #4]
 8016512:	881b      	ldrh	r3, [r3, #0]
 8016514:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801651c:	4a3f      	ldr	r2, [pc, #252]	; (801661c <problem_fetch+0x14f34>)
 801651e:	6810      	ldr	r0, [r2, #0]
 8016520:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2206      	movs	r2, #6
 8016526:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,D,F,A");
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	33a4      	adds	r3, #164	; 0xa4
 801652c:	4a44      	ldr	r2, [pc, #272]	; (8016640 <problem_fetch+0x14f58>)
 801652e:	461c      	mov	r4, r3
 8016530:	4613      	mov	r3, r2
 8016532:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016534:	6020      	str	r0, [r4, #0]
 8016536:	6061      	str	r1, [r4, #4]
 8016538:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,8,15,11,18");
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	3304      	adds	r3, #4
 801653e:	4a41      	ldr	r2, [pc, #260]	; (8016644 <problem_fetch+0x14f5c>)
 8016540:	461c      	mov	r4, r3
 8016542:	4613      	mov	r3, r2
 8016544:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016546:	6020      	str	r0, [r4, #0]
 8016548:	6061      	str	r1, [r4, #4]
 801654a:	60a2      	str	r2, [r4, #8]
 801654c:	881a      	ldrh	r2, [r3, #0]
 801654e:	789b      	ldrb	r3, [r3, #2]
 8016550:	81a2      	strh	r2, [r4, #12]
 8016552:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801655a:	4a25      	ldr	r2, [pc, #148]	; (80165f0 <problem_fetch+0x14f08>)
 801655c:	461c      	mov	r4, r3
 801655e:	4613      	mov	r3, r2
 8016560:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016562:	6020      	str	r0, [r4, #0]
 8016564:	6061      	str	r1, [r4, #4]
 8016566:	60a2      	str	r2, [r4, #8]
			break;
 8016568:	f005 bfee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 620 :
			strcpy(p->name,"CALCIUM20");
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016572:	4935      	ldr	r1, [pc, #212]	; (8016648 <problem_fetch+0x14f60>)
 8016574:	461a      	mov	r2, r3
 8016576:	460b      	mov	r3, r1
 8016578:	cb03      	ldmia	r3!, {r0, r1}
 801657a:	6010      	str	r0, [r2, #0]
 801657c:	6051      	str	r1, [r2, #4]
 801657e:	881b      	ldrh	r3, [r3, #0]
 8016580:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016588:	4a1b      	ldr	r2, [pc, #108]	; (80165f8 <problem_fetch+0x14f10>)
 801658a:	6810      	ldr	r0, [r2, #0]
 801658c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2207      	movs	r2, #7
 8016592:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,G,G,B,D,B,D");
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	33a4      	adds	r3, #164	; 0xa4
 8016598:	4a2c      	ldr	r2, [pc, #176]	; (801664c <problem_fetch+0x14f64>)
 801659a:	461c      	mov	r4, r3
 801659c:	4613      	mov	r3, r2
 801659e:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165a0:	6020      	str	r0, [r4, #0]
 80165a2:	6061      	str	r1, [r4, #4]
 80165a4:	60a2      	str	r2, [r4, #8]
 80165a6:	881b      	ldrh	r3, [r3, #0]
 80165a8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,4,9,10,15,15,18");
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	3304      	adds	r3, #4
 80165ae:	4a28      	ldr	r2, [pc, #160]	; (8016650 <problem_fetch+0x14f68>)
 80165b0:	461d      	mov	r5, r3
 80165b2:	4614      	mov	r4, r2
 80165b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165b6:	6028      	str	r0, [r5, #0]
 80165b8:	6069      	str	r1, [r5, #4]
 80165ba:	60aa      	str	r2, [r5, #8]
 80165bc:	60eb      	str	r3, [r5, #12]
 80165be:	8823      	ldrh	r3, [r4, #0]
 80165c0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80165c8:	4a22      	ldr	r2, [pc, #136]	; (8016654 <problem_fetch+0x14f6c>)
 80165ca:	461c      	mov	r4, r3
 80165cc:	4613      	mov	r3, r2
 80165ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80165d0:	6020      	str	r0, [r4, #0]
 80165d2:	6061      	str	r1, [r4, #4]
 80165d4:	60a2      	str	r2, [r4, #8]
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	81a3      	strh	r3, [r4, #12]
			break;
 80165da:	f005 bfb5 	b.w	801c548 <problem_fetch+0x1ae60>
 80165de:	bf00      	nop
 80165e0:	0802ae00 	.word	0x0802ae00
 80165e4:	08023a98 	.word	0x08023a98
 80165e8:	0802ae10 	.word	0x0802ae10
 80165ec:	0802ae1c 	.word	0x0802ae1c
 80165f0:	08023cf8 	.word	0x08023cf8
 80165f4:	0802ae2c 	.word	0x0802ae2c
 80165f8:	080239f4 	.word	0x080239f4
 80165fc:	0802ae3c 	.word	0x0802ae3c
 8016600:	0802ae48 	.word	0x0802ae48
 8016604:	0802ae58 	.word	0x0802ae58
 8016608:	08023a28 	.word	0x08023a28
 801660c:	0802ae6c 	.word	0x0802ae6c
 8016610:	0802ae7c 	.word	0x0802ae7c
 8016614:	08023b6c 	.word	0x08023b6c
 8016618:	0802ae94 	.word	0x0802ae94
 801661c:	08023afc 	.word	0x08023afc
 8016620:	0802aea4 	.word	0x0802aea4
 8016624:	08023aa4 	.word	0x08023aa4
 8016628:	08023ab0 	.word	0x08023ab0
 801662c:	0802aeac 	.word	0x0802aeac
 8016630:	0802aeb8 	.word	0x0802aeb8
 8016634:	0802aec8 	.word	0x0802aec8
 8016638:	08023ae4 	.word	0x08023ae4
 801663c:	0802aedc 	.word	0x0802aedc
 8016640:	0802aee8 	.word	0x0802aee8
 8016644:	0802aef4 	.word	0x0802aef4
 8016648:	0802af04 	.word	0x0802af04
 801664c:	0802af10 	.word	0x0802af10
 8016650:	0802af20 	.word	0x0802af20
 8016654:	080239d4 	.word	0x080239d4
		case 621 :
			strcpy(p->name,"BLACK IS BACK");
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801665e:	4aa8      	ldr	r2, [pc, #672]	; (8016900 <problem_fetch+0x15218>)
 8016660:	461c      	mov	r4, r3
 8016662:	4613      	mov	r3, r2
 8016664:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016666:	6020      	str	r0, [r4, #0]
 8016668:	6061      	str	r1, [r4, #4]
 801666a:	60a2      	str	r2, [r4, #8]
 801666c:	881b      	ldrh	r3, [r3, #0]
 801666e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016676:	4aa3      	ldr	r2, [pc, #652]	; (8016904 <problem_fetch+0x1521c>)
 8016678:	6810      	ldr	r0, [r2, #0]
 801667a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2207      	movs	r2, #7
 8016680:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,B,C,I,D");
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	33a4      	adds	r3, #164	; 0xa4
 8016686:	4aa0      	ldr	r2, [pc, #640]	; (8016908 <problem_fetch+0x15220>)
 8016688:	461c      	mov	r4, r3
 801668a:	4613      	mov	r3, r2
 801668c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801668e:	6020      	str	r0, [r4, #0]
 8016690:	6061      	str	r1, [r4, #4]
 8016692:	60a2      	str	r2, [r4, #8]
 8016694:	881b      	ldrh	r3, [r3, #0]
 8016696:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,10,13,14,18");
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	3304      	adds	r3, #4
 801669c:	4a9b      	ldr	r2, [pc, #620]	; (801690c <problem_fetch+0x15224>)
 801669e:	461d      	mov	r5, r3
 80166a0:	4614      	mov	r4, r2
 80166a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80166a4:	6028      	str	r0, [r5, #0]
 80166a6:	6069      	str	r1, [r5, #4]
 80166a8:	60aa      	str	r2, [r5, #8]
 80166aa:	60eb      	str	r3, [r5, #12]
 80166ac:	8823      	ldrh	r3, [r4, #0]
 80166ae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80166b6:	4a96      	ldr	r2, [pc, #600]	; (8016910 <problem_fetch+0x15228>)
 80166b8:	461c      	mov	r4, r3
 80166ba:	4613      	mov	r3, r2
 80166bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166be:	6020      	str	r0, [r4, #0]
 80166c0:	6061      	str	r1, [r4, #4]
 80166c2:	60a2      	str	r2, [r4, #8]
 80166c4:	881b      	ldrh	r3, [r3, #0]
 80166c6:	81a3      	strh	r3, [r4, #12]
			break;
 80166c8:	f005 bf3e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 622 :
			strcpy(p->name,"CAPTAIN RILEY");
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80166d2:	4a90      	ldr	r2, [pc, #576]	; (8016914 <problem_fetch+0x1522c>)
 80166d4:	461c      	mov	r4, r3
 80166d6:	4613      	mov	r3, r2
 80166d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80166da:	6020      	str	r0, [r4, #0]
 80166dc:	6061      	str	r1, [r4, #4]
 80166de:	60a2      	str	r2, [r4, #8]
 80166e0:	881b      	ldrh	r3, [r3, #0]
 80166e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80166ea:	4a8b      	ldr	r2, [pc, #556]	; (8016918 <problem_fetch+0x15230>)
 80166ec:	6810      	ldr	r0, [r2, #0]
 80166ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2206      	movs	r2, #6
 80166f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,C,E,A");
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	33a4      	adds	r3, #164	; 0xa4
 80166fa:	4a88      	ldr	r2, [pc, #544]	; (801691c <problem_fetch+0x15234>)
 80166fc:	461c      	mov	r4, r3
 80166fe:	4613      	mov	r3, r2
 8016700:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016702:	6020      	str	r0, [r4, #0]
 8016704:	6061      	str	r1, [r4, #4]
 8016706:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,11,13,16,18");
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	3304      	adds	r3, #4
 801670c:	4a84      	ldr	r2, [pc, #528]	; (8016920 <problem_fetch+0x15238>)
 801670e:	461c      	mov	r4, r3
 8016710:	4615      	mov	r5, r2
 8016712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016714:	6020      	str	r0, [r4, #0]
 8016716:	6061      	str	r1, [r4, #4]
 8016718:	60a2      	str	r2, [r4, #8]
 801671a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016722:	4a80      	ldr	r2, [pc, #512]	; (8016924 <problem_fetch+0x1523c>)
 8016724:	461c      	mov	r4, r3
 8016726:	4613      	mov	r3, r2
 8016728:	cb07      	ldmia	r3!, {r0, r1, r2}
 801672a:	6020      	str	r0, [r4, #0]
 801672c:	6061      	str	r1, [r4, #4]
 801672e:	60a2      	str	r2, [r4, #8]
			break;
 8016730:	f005 bf0a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 623 :
			strcpy(p->name,"WPOLOGIM 2");
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801673a:	497b      	ldr	r1, [pc, #492]	; (8016928 <problem_fetch+0x15240>)
 801673c:	461a      	mov	r2, r3
 801673e:	460b      	mov	r3, r1
 8016740:	cb03      	ldmia	r3!, {r0, r1}
 8016742:	6010      	str	r0, [r2, #0]
 8016744:	6051      	str	r1, [r2, #4]
 8016746:	8819      	ldrh	r1, [r3, #0]
 8016748:	789b      	ldrb	r3, [r3, #2]
 801674a:	8111      	strh	r1, [r2, #8]
 801674c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016754:	4a75      	ldr	r2, [pc, #468]	; (801692c <problem_fetch+0x15244>)
 8016756:	8811      	ldrh	r1, [r2, #0]
 8016758:	7892      	ldrb	r2, [r2, #2]
 801675a:	8019      	strh	r1, [r3, #0]
 801675c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2206      	movs	r2, #6
 8016762:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,I,D");
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	33a4      	adds	r3, #164	; 0xa4
 8016768:	4a71      	ldr	r2, [pc, #452]	; (8016930 <problem_fetch+0x15248>)
 801676a:	461c      	mov	r4, r3
 801676c:	4613      	mov	r3, r2
 801676e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016770:	6020      	str	r0, [r4, #0]
 8016772:	6061      	str	r1, [r4, #4]
 8016774:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	3304      	adds	r3, #4
 801677a:	4a6e      	ldr	r2, [pc, #440]	; (8016934 <problem_fetch+0x1524c>)
 801677c:	461c      	mov	r4, r3
 801677e:	4613      	mov	r3, r2
 8016780:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016782:	6020      	str	r0, [r4, #0]
 8016784:	6061      	str	r1, [r4, #4]
 8016786:	60a2      	str	r2, [r4, #8]
 8016788:	881a      	ldrh	r2, [r3, #0]
 801678a:	789b      	ldrb	r3, [r3, #2]
 801678c:	81a2      	strh	r2, [r4, #12]
 801678e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016796:	4a63      	ldr	r2, [pc, #396]	; (8016924 <problem_fetch+0x1523c>)
 8016798:	461c      	mov	r4, r3
 801679a:	4613      	mov	r3, r2
 801679c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801679e:	6020      	str	r0, [r4, #0]
 80167a0:	6061      	str	r1, [r4, #4]
 80167a2:	60a2      	str	r2, [r4, #8]
			break;
 80167a4:	f005 bed0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 624 :
			strcpy(p->name,"I LOVE ROCK AND ROLL");
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80167ae:	4a62      	ldr	r2, [pc, #392]	; (8016938 <problem_fetch+0x15250>)
 80167b0:	461d      	mov	r5, r3
 80167b2:	4614      	mov	r4, r2
 80167b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167b6:	6028      	str	r0, [r5, #0]
 80167b8:	6069      	str	r1, [r5, #4]
 80167ba:	60aa      	str	r2, [r5, #8]
 80167bc:	60eb      	str	r3, [r5, #12]
 80167be:	6820      	ldr	r0, [r4, #0]
 80167c0:	6128      	str	r0, [r5, #16]
 80167c2:	7923      	ldrb	r3, [r4, #4]
 80167c4:	752b      	strb	r3, [r5, #20]
			strcpy(p->grade,"6C+");
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80167cc:	4a4d      	ldr	r2, [pc, #308]	; (8016904 <problem_fetch+0x1521c>)
 80167ce:	6810      	ldr	r0, [r2, #0]
 80167d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	2207      	movs	r2, #7
 80167d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,F,G,I,I,J");
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	33a4      	adds	r3, #164	; 0xa4
 80167dc:	4a57      	ldr	r2, [pc, #348]	; (801693c <problem_fetch+0x15254>)
 80167de:	461c      	mov	r4, r3
 80167e0:	4613      	mov	r3, r2
 80167e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80167e4:	6020      	str	r0, [r4, #0]
 80167e6:	6061      	str	r1, [r4, #4]
 80167e8:	60a2      	str	r2, [r4, #8]
 80167ea:	881b      	ldrh	r3, [r3, #0]
 80167ec:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"8,16,11,9,14,18,5");
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	3304      	adds	r3, #4
 80167f2:	4a53      	ldr	r2, [pc, #332]	; (8016940 <problem_fetch+0x15258>)
 80167f4:	461d      	mov	r5, r3
 80167f6:	4614      	mov	r4, r2
 80167f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167fa:	6028      	str	r0, [r5, #0]
 80167fc:	6069      	str	r1, [r5, #4]
 80167fe:	60aa      	str	r2, [r5, #8]
 8016800:	60eb      	str	r3, [r5, #12]
 8016802:	8823      	ldrh	r3, [r4, #0]
 8016804:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,e,s");
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801680c:	4a4d      	ldr	r2, [pc, #308]	; (8016944 <problem_fetch+0x1525c>)
 801680e:	461c      	mov	r4, r3
 8016810:	4613      	mov	r3, r2
 8016812:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016814:	6020      	str	r0, [r4, #0]
 8016816:	6061      	str	r1, [r4, #4]
 8016818:	60a2      	str	r2, [r4, #8]
 801681a:	881b      	ldrh	r3, [r3, #0]
 801681c:	81a3      	strh	r3, [r4, #12]
			break;
 801681e:	f005 be93 	b.w	801c548 <problem_fetch+0x1ae60>
		case 625 :
			strcpy(p->name,"THE DAILY RATION");
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016828:	4a47      	ldr	r2, [pc, #284]	; (8016948 <problem_fetch+0x15260>)
 801682a:	461d      	mov	r5, r3
 801682c:	4614      	mov	r4, r2
 801682e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016830:	6028      	str	r0, [r5, #0]
 8016832:	6069      	str	r1, [r5, #4]
 8016834:	60aa      	str	r2, [r5, #8]
 8016836:	60eb      	str	r3, [r5, #12]
 8016838:	7823      	ldrb	r3, [r4, #0]
 801683a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6C+");
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016842:	4a30      	ldr	r2, [pc, #192]	; (8016904 <problem_fetch+0x1521c>)
 8016844:	6810      	ldr	r0, [r2, #0]
 8016846:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	2207      	movs	r2, #7
 801684c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,G,H,J,D");
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	33a4      	adds	r3, #164	; 0xa4
 8016852:	4a3e      	ldr	r2, [pc, #248]	; (801694c <problem_fetch+0x15264>)
 8016854:	461c      	mov	r4, r3
 8016856:	4613      	mov	r3, r2
 8016858:	cb07      	ldmia	r3!, {r0, r1, r2}
 801685a:	6020      	str	r0, [r4, #0]
 801685c:	6061      	str	r1, [r4, #4]
 801685e:	60a2      	str	r2, [r4, #8]
 8016860:	881b      	ldrh	r3, [r3, #0]
 8016862:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,14,17,15,10,7,18");
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	3304      	adds	r3, #4
 8016868:	4a39      	ldr	r2, [pc, #228]	; (8016950 <problem_fetch+0x15268>)
 801686a:	461d      	mov	r5, r3
 801686c:	4614      	mov	r4, r2
 801686e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016870:	6028      	str	r0, [r5, #0]
 8016872:	6069      	str	r1, [r5, #4]
 8016874:	60aa      	str	r2, [r5, #8]
 8016876:	60eb      	str	r3, [r5, #12]
 8016878:	8823      	ldrh	r3, [r4, #0]
 801687a:	78a2      	ldrb	r2, [r4, #2]
 801687c:	822b      	strh	r3, [r5, #16]
 801687e:	4613      	mov	r3, r2
 8016880:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016888:	4a21      	ldr	r2, [pc, #132]	; (8016910 <problem_fetch+0x15228>)
 801688a:	461c      	mov	r4, r3
 801688c:	4613      	mov	r3, r2
 801688e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016890:	6020      	str	r0, [r4, #0]
 8016892:	6061      	str	r1, [r4, #4]
 8016894:	60a2      	str	r2, [r4, #8]
 8016896:	881b      	ldrh	r3, [r3, #0]
 8016898:	81a3      	strh	r3, [r4, #12]
			break;
 801689a:	f005 be55 	b.w	801c548 <problem_fetch+0x1ae60>
		case 626 :
			strcpy(p->name,"ZLATI");
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80168a4:	4a2b      	ldr	r2, [pc, #172]	; (8016954 <problem_fetch+0x1526c>)
 80168a6:	6810      	ldr	r0, [r2, #0]
 80168a8:	6018      	str	r0, [r3, #0]
 80168aa:	8892      	ldrh	r2, [r2, #4]
 80168ac:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80168b4:	4a13      	ldr	r2, [pc, #76]	; (8016904 <problem_fetch+0x1521c>)
 80168b6:	6810      	ldr	r0, [r2, #0]
 80168b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2206      	movs	r2, #6
 80168be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,E,D");
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	33a4      	adds	r3, #164	; 0xa4
 80168c4:	4a24      	ldr	r2, [pc, #144]	; (8016958 <problem_fetch+0x15270>)
 80168c6:	461c      	mov	r4, r3
 80168c8:	4613      	mov	r3, r2
 80168ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168cc:	6020      	str	r0, [r4, #0]
 80168ce:	6061      	str	r1, [r4, #4]
 80168d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,13,12,18");
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	3304      	adds	r3, #4
 80168d6:	4a21      	ldr	r2, [pc, #132]	; (801695c <problem_fetch+0x15274>)
 80168d8:	461c      	mov	r4, r3
 80168da:	4615      	mov	r5, r2
 80168dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80168de:	6020      	str	r0, [r4, #0]
 80168e0:	6061      	str	r1, [r4, #4]
 80168e2:	60a2      	str	r2, [r4, #8]
 80168e4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80168ec:	4a0d      	ldr	r2, [pc, #52]	; (8016924 <problem_fetch+0x1523c>)
 80168ee:	461c      	mov	r4, r3
 80168f0:	4613      	mov	r3, r2
 80168f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80168f4:	6020      	str	r0, [r4, #0]
 80168f6:	6061      	str	r1, [r4, #4]
 80168f8:	60a2      	str	r2, [r4, #8]
			break;
 80168fa:	f005 be25 	b.w	801c548 <problem_fetch+0x1ae60>
 80168fe:	bf00      	nop
 8016900:	0802af34 	.word	0x0802af34
 8016904:	080239f4 	.word	0x080239f4
 8016908:	0802af44 	.word	0x0802af44
 801690c:	0802af54 	.word	0x0802af54
 8016910:	08023ae4 	.word	0x08023ae4
 8016914:	0802af68 	.word	0x0802af68
 8016918:	0802395c 	.word	0x0802395c
 801691c:	0802af78 	.word	0x0802af78
 8016920:	0802af84 	.word	0x0802af84
 8016924:	08023cf8 	.word	0x08023cf8
 8016928:	0802af94 	.word	0x0802af94
 801692c:	08024054 	.word	0x08024054
 8016930:	0802afa0 	.word	0x0802afa0
 8016934:	08027ee0 	.word	0x08027ee0
 8016938:	0802afac 	.word	0x0802afac
 801693c:	0802afc4 	.word	0x0802afc4
 8016940:	0802afd4 	.word	0x0802afd4
 8016944:	0802afe8 	.word	0x0802afe8
 8016948:	0802aff8 	.word	0x0802aff8
 801694c:	0802b00c 	.word	0x0802b00c
 8016950:	0802b01c 	.word	0x0802b01c
 8016954:	0802b030 	.word	0x0802b030
 8016958:	0802b038 	.word	0x0802b038
 801695c:	0802b044 	.word	0x0802b044
		case 627 :
			strcpy(p->name,"FISHIN FOR A COMPLIMENT");
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016966:	4aaa      	ldr	r2, [pc, #680]	; (8016c10 <problem_fetch+0x15528>)
 8016968:	461d      	mov	r5, r3
 801696a:	4614      	mov	r4, r2
 801696c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801696e:	6028      	str	r0, [r5, #0]
 8016970:	6069      	str	r1, [r5, #4]
 8016972:	60aa      	str	r2, [r5, #8]
 8016974:	60eb      	str	r3, [r5, #12]
 8016976:	cc03      	ldmia	r4!, {r0, r1}
 8016978:	6128      	str	r0, [r5, #16]
 801697a:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"6C+");
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016982:	4aa4      	ldr	r2, [pc, #656]	; (8016c14 <problem_fetch+0x1552c>)
 8016984:	6810      	ldr	r0, [r2, #0]
 8016986:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2205      	movs	r2, #5
 801698c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,D");
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	33a4      	adds	r3, #164	; 0xa4
 8016992:	49a1      	ldr	r1, [pc, #644]	; (8016c18 <problem_fetch+0x15530>)
 8016994:	461a      	mov	r2, r3
 8016996:	460b      	mov	r3, r1
 8016998:	cb03      	ldmia	r3!, {r0, r1}
 801699a:	6010      	str	r0, [r2, #0]
 801699c:	6051      	str	r1, [r2, #4]
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,12,13,18");
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	3304      	adds	r3, #4
 80169a6:	4a9d      	ldr	r2, [pc, #628]	; (8016c1c <problem_fetch+0x15534>)
 80169a8:	461c      	mov	r4, r3
 80169aa:	4613      	mov	r3, r2
 80169ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80169ae:	6020      	str	r0, [r4, #0]
 80169b0:	6061      	str	r1, [r4, #4]
 80169b2:	60a2      	str	r2, [r4, #8]
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80169be:	4998      	ldr	r1, [pc, #608]	; (8016c20 <problem_fetch+0x15538>)
 80169c0:	461a      	mov	r2, r3
 80169c2:	460b      	mov	r3, r1
 80169c4:	cb03      	ldmia	r3!, {r0, r1}
 80169c6:	6010      	str	r0, [r2, #0]
 80169c8:	6051      	str	r1, [r2, #4]
 80169ca:	881b      	ldrh	r3, [r3, #0]
 80169cc:	8113      	strh	r3, [r2, #8]
			break;
 80169ce:	f005 bdbb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 628 :
			strcpy(p->name,"サミシクナイト");
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80169d8:	4a92      	ldr	r2, [pc, #584]	; (8016c24 <problem_fetch+0x1553c>)
 80169da:	461d      	mov	r5, r3
 80169dc:	4614      	mov	r4, r2
 80169de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169e0:	6028      	str	r0, [r5, #0]
 80169e2:	6069      	str	r1, [r5, #4]
 80169e4:	60aa      	str	r2, [r5, #8]
 80169e6:	60eb      	str	r3, [r5, #12]
 80169e8:	6820      	ldr	r0, [r4, #0]
 80169ea:	6128      	str	r0, [r5, #16]
 80169ec:	88a3      	ldrh	r3, [r4, #4]
 80169ee:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"6B+");
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80169f6:	4a8c      	ldr	r2, [pc, #560]	; (8016c28 <problem_fetch+0x15540>)
 80169f8:	6810      	ldr	r0, [r2, #0]
 80169fa:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2209      	movs	r2, #9
 8016a00:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,G,B,E,C,G,G,I");
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	33a4      	adds	r3, #164	; 0xa4
 8016a06:	4a89      	ldr	r2, [pc, #548]	; (8016c2c <problem_fetch+0x15544>)
 8016a08:	461d      	mov	r5, r3
 8016a0a:	4614      	mov	r4, r2
 8016a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a0e:	6028      	str	r0, [r5, #0]
 8016a10:	6069      	str	r1, [r5, #4]
 8016a12:	60aa      	str	r2, [r5, #8]
 8016a14:	60eb      	str	r3, [r5, #12]
 8016a16:	8823      	ldrh	r3, [r4, #0]
 8016a18:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,5,9,10,12,13,15,17,18");
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	4a84      	ldr	r2, [pc, #528]	; (8016c30 <problem_fetch+0x15548>)
 8016a20:	461d      	mov	r5, r3
 8016a22:	4614      	mov	r4, r2
 8016a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a26:	6028      	str	r0, [r5, #0]
 8016a28:	6069      	str	r1, [r5, #4]
 8016a2a:	60aa      	str	r2, [r5, #8]
 8016a2c:	60eb      	str	r3, [r5, #12]
 8016a2e:	cc03      	ldmia	r4!, {r0, r1}
 8016a30:	6128      	str	r0, [r5, #16]
 8016a32:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016a3a:	4a7e      	ldr	r2, [pc, #504]	; (8016c34 <problem_fetch+0x1554c>)
 8016a3c:	461d      	mov	r5, r3
 8016a3e:	4614      	mov	r4, r2
 8016a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a42:	6028      	str	r0, [r5, #0]
 8016a44:	6069      	str	r1, [r5, #4]
 8016a46:	60aa      	str	r2, [r5, #8]
 8016a48:	60eb      	str	r3, [r5, #12]
 8016a4a:	8823      	ldrh	r3, [r4, #0]
 8016a4c:	822b      	strh	r3, [r5, #16]
			break;
 8016a4e:	f005 bd7b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 629 :
			strcpy(p->name,"NEIL1");
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016a58:	4a77      	ldr	r2, [pc, #476]	; (8016c38 <problem_fetch+0x15550>)
 8016a5a:	6810      	ldr	r0, [r2, #0]
 8016a5c:	6018      	str	r0, [r3, #0]
 8016a5e:	8892      	ldrh	r2, [r2, #4]
 8016a60:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016a68:	4a6f      	ldr	r2, [pc, #444]	; (8016c28 <problem_fetch+0x15540>)
 8016a6a:	6810      	ldr	r0, [r2, #0]
 8016a6c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	2208      	movs	r2, #8
 8016a72:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,B,C,D,C,A");
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	33a4      	adds	r3, #164	; 0xa4
 8016a78:	4a70      	ldr	r2, [pc, #448]	; (8016c3c <problem_fetch+0x15554>)
 8016a7a:	461c      	mov	r4, r3
 8016a7c:	4615      	mov	r5, r2
 8016a7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a80:	6020      	str	r0, [r4, #0]
 8016a82:	6061      	str	r1, [r4, #4]
 8016a84:	60a2      	str	r2, [r4, #8]
 8016a86:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,11,16,18");
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	3304      	adds	r3, #4
 8016a8c:	4a6c      	ldr	r2, [pc, #432]	; (8016c40 <problem_fetch+0x15558>)
 8016a8e:	461d      	mov	r5, r3
 8016a90:	4614      	mov	r4, r2
 8016a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a94:	6028      	str	r0, [r5, #0]
 8016a96:	6069      	str	r1, [r5, #4]
 8016a98:	60aa      	str	r2, [r5, #8]
 8016a9a:	60eb      	str	r3, [r5, #12]
 8016a9c:	6820      	ldr	r0, [r4, #0]
 8016a9e:	6128      	str	r0, [r5, #16]
 8016aa0:	7923      	ldrb	r3, [r4, #4]
 8016aa2:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016aaa:	4a66      	ldr	r2, [pc, #408]	; (8016c44 <problem_fetch+0x1555c>)
 8016aac:	461c      	mov	r4, r3
 8016aae:	4615      	mov	r5, r2
 8016ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ab2:	6020      	str	r0, [r4, #0]
 8016ab4:	6061      	str	r1, [r4, #4]
 8016ab6:	60a2      	str	r2, [r4, #8]
 8016ab8:	60e3      	str	r3, [r4, #12]
			break;
 8016aba:	f005 bd45 	b.w	801c548 <problem_fetch+0x1ae60>
		case 630 :
			strcpy(p->name,"TIAMAT");
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ac4:	4a60      	ldr	r2, [pc, #384]	; (8016c48 <problem_fetch+0x15560>)
 8016ac6:	6810      	ldr	r0, [r2, #0]
 8016ac8:	6018      	str	r0, [r3, #0]
 8016aca:	8891      	ldrh	r1, [r2, #4]
 8016acc:	7992      	ldrb	r2, [r2, #6]
 8016ace:	8099      	strh	r1, [r3, #4]
 8016ad0:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6B+");
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016ad8:	4a53      	ldr	r2, [pc, #332]	; (8016c28 <problem_fetch+0x15540>)
 8016ada:	6810      	ldr	r0, [r2, #0]
 8016adc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2207      	movs	r2, #7
 8016ae2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,E,I,G,I");
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	33a4      	adds	r3, #164	; 0xa4
 8016ae8:	4a58      	ldr	r2, [pc, #352]	; (8016c4c <problem_fetch+0x15564>)
 8016aea:	461c      	mov	r4, r3
 8016aec:	4613      	mov	r3, r2
 8016aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016af0:	6020      	str	r0, [r4, #0]
 8016af2:	6061      	str	r1, [r4, #4]
 8016af4:	60a2      	str	r2, [r4, #8]
 8016af6:	881b      	ldrh	r3, [r3, #0]
 8016af8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,15,18");
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	3304      	adds	r3, #4
 8016afe:	4a54      	ldr	r2, [pc, #336]	; (8016c50 <problem_fetch+0x15568>)
 8016b00:	461d      	mov	r5, r3
 8016b02:	4614      	mov	r4, r2
 8016b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b06:	6028      	str	r0, [r5, #0]
 8016b08:	6069      	str	r1, [r5, #4]
 8016b0a:	60aa      	str	r2, [r5, #8]
 8016b0c:	60eb      	str	r3, [r5, #12]
 8016b0e:	8823      	ldrh	r3, [r4, #0]
 8016b10:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016b18:	4a4e      	ldr	r2, [pc, #312]	; (8016c54 <problem_fetch+0x1556c>)
 8016b1a:	461c      	mov	r4, r3
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b20:	6020      	str	r0, [r4, #0]
 8016b22:	6061      	str	r1, [r4, #4]
 8016b24:	60a2      	str	r2, [r4, #8]
 8016b26:	881b      	ldrh	r3, [r3, #0]
 8016b28:	81a3      	strh	r3, [r4, #12]
			break;
 8016b2a:	f005 bd0d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 631 :
			strcpy(p->name,"MOON SHADOW");
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016b34:	4a48      	ldr	r2, [pc, #288]	; (8016c58 <problem_fetch+0x15570>)
 8016b36:	461c      	mov	r4, r3
 8016b38:	4613      	mov	r3, r2
 8016b3a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016b3c:	6020      	str	r0, [r4, #0]
 8016b3e:	6061      	str	r1, [r4, #4]
 8016b40:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016b48:	4a32      	ldr	r2, [pc, #200]	; (8016c14 <problem_fetch+0x1552c>)
 8016b4a:	6810      	ldr	r0, [r2, #0]
 8016b4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2208      	movs	r2, #8
 8016b52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,I,D,G,I");
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	33a4      	adds	r3, #164	; 0xa4
 8016b58:	4a40      	ldr	r2, [pc, #256]	; (8016c5c <problem_fetch+0x15574>)
 8016b5a:	461c      	mov	r4, r3
 8016b5c:	4615      	mov	r5, r2
 8016b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b60:	6020      	str	r0, [r4, #0]
 8016b62:	6061      	str	r1, [r4, #4]
 8016b64:	60a2      	str	r2, [r4, #8]
 8016b66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,14,11,15,18");
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	3304      	adds	r3, #4
 8016b6c:	4a3c      	ldr	r2, [pc, #240]	; (8016c60 <problem_fetch+0x15578>)
 8016b6e:	461d      	mov	r5, r3
 8016b70:	4614      	mov	r4, r2
 8016b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016b74:	6028      	str	r0, [r5, #0]
 8016b76:	6069      	str	r1, [r5, #4]
 8016b78:	60aa      	str	r2, [r5, #8]
 8016b7a:	60eb      	str	r3, [r5, #12]
 8016b7c:	6820      	ldr	r0, [r4, #0]
 8016b7e:	6128      	str	r0, [r5, #16]
 8016b80:	7923      	ldrb	r3, [r4, #4]
 8016b82:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016b8a:	4a2e      	ldr	r2, [pc, #184]	; (8016c44 <problem_fetch+0x1555c>)
 8016b8c:	461c      	mov	r4, r3
 8016b8e:	4615      	mov	r5, r2
 8016b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b92:	6020      	str	r0, [r4, #0]
 8016b94:	6061      	str	r1, [r4, #4]
 8016b96:	60a2      	str	r2, [r4, #8]
 8016b98:	60e3      	str	r3, [r4, #12]
			break;
 8016b9a:	f005 bcd5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 632 :
			strcpy(p->name,"DAS SCHNITZEL ALT");
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ba4:	4a2f      	ldr	r2, [pc, #188]	; (8016c64 <problem_fetch+0x1557c>)
 8016ba6:	461d      	mov	r5, r3
 8016ba8:	4614      	mov	r4, r2
 8016baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016bac:	6028      	str	r0, [r5, #0]
 8016bae:	6069      	str	r1, [r5, #4]
 8016bb0:	60aa      	str	r2, [r5, #8]
 8016bb2:	60eb      	str	r3, [r5, #12]
 8016bb4:	8823      	ldrh	r3, [r4, #0]
 8016bb6:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016bbe:	4a2a      	ldr	r2, [pc, #168]	; (8016c68 <problem_fetch+0x15580>)
 8016bc0:	6810      	ldr	r0, [r2, #0]
 8016bc2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2206      	movs	r2, #6
 8016bc8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,F,G,D");
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	33a4      	adds	r3, #164	; 0xa4
 8016bce:	4a27      	ldr	r2, [pc, #156]	; (8016c6c <problem_fetch+0x15584>)
 8016bd0:	461c      	mov	r4, r3
 8016bd2:	4613      	mov	r3, r2
 8016bd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016bd6:	6020      	str	r0, [r4, #0]
 8016bd8:	6061      	str	r1, [r4, #4]
 8016bda:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,13,14,18");
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	3304      	adds	r3, #4
 8016be0:	4a23      	ldr	r2, [pc, #140]	; (8016c70 <problem_fetch+0x15588>)
 8016be2:	461c      	mov	r4, r3
 8016be4:	4613      	mov	r3, r2
 8016be6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016be8:	6020      	str	r0, [r4, #0]
 8016bea:	6061      	str	r1, [r4, #4]
 8016bec:	60a2      	str	r2, [r4, #8]
 8016bee:	881a      	ldrh	r2, [r3, #0]
 8016bf0:	789b      	ldrb	r3, [r3, #2]
 8016bf2:	81a2      	strh	r2, [r4, #12]
 8016bf4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016bfc:	4a1d      	ldr	r2, [pc, #116]	; (8016c74 <problem_fetch+0x1558c>)
 8016bfe:	461c      	mov	r4, r3
 8016c00:	4613      	mov	r3, r2
 8016c02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016c04:	6020      	str	r0, [r4, #0]
 8016c06:	6061      	str	r1, [r4, #4]
 8016c08:	60a2      	str	r2, [r4, #8]
			break;
 8016c0a:	f005 bc9d 	b.w	801c548 <problem_fetch+0x1ae60>
 8016c0e:	bf00      	nop
 8016c10:	0802b054 	.word	0x0802b054
 8016c14:	080239f4 	.word	0x080239f4
 8016c18:	0802b06c 	.word	0x0802b06c
 8016c1c:	0802b078 	.word	0x0802b078
 8016c20:	08023e28 	.word	0x08023e28
 8016c24:	0802b088 	.word	0x0802b088
 8016c28:	0802395c 	.word	0x0802395c
 8016c2c:	0802b0a0 	.word	0x0802b0a0
 8016c30:	0802b0b4 	.word	0x0802b0b4
 8016c34:	08024940 	.word	0x08024940
 8016c38:	0802b0cc 	.word	0x0802b0cc
 8016c3c:	0802b0d4 	.word	0x0802b0d4
 8016c40:	0802b0e4 	.word	0x0802b0e4
 8016c44:	08023a80 	.word	0x08023a80
 8016c48:	0802b0fc 	.word	0x0802b0fc
 8016c4c:	0802b104 	.word	0x0802b104
 8016c50:	0802412c 	.word	0x0802412c
 8016c54:	080239d4 	.word	0x080239d4
 8016c58:	0802b114 	.word	0x0802b114
 8016c5c:	0802b120 	.word	0x0802b120
 8016c60:	0802b130 	.word	0x0802b130
 8016c64:	0802b148 	.word	0x0802b148
 8016c68:	08023a98 	.word	0x08023a98
 8016c6c:	0802b15c 	.word	0x0802b15c
 8016c70:	0802b168 	.word	0x0802b168
 8016c74:	0802393c 	.word	0x0802393c
		case 633 :
			strcpy(p->name,"ACG68");
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016c7e:	4ac2      	ldr	r2, [pc, #776]	; (8016f88 <problem_fetch+0x158a0>)
 8016c80:	6810      	ldr	r0, [r2, #0]
 8016c82:	6018      	str	r0, [r3, #0]
 8016c84:	8892      	ldrh	r2, [r2, #4]
 8016c86:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016c8e:	4abf      	ldr	r2, [pc, #764]	; (8016f8c <problem_fetch+0x158a4>)
 8016c90:	6810      	ldr	r0, [r2, #0]
 8016c92:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	2208      	movs	r2, #8
 8016c98:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,F,D,B,E,A");
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	33a4      	adds	r3, #164	; 0xa4
 8016c9e:	4abc      	ldr	r2, [pc, #752]	; (8016f90 <problem_fetch+0x158a8>)
 8016ca0:	461c      	mov	r4, r3
 8016ca2:	4615      	mov	r5, r2
 8016ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016ca6:	6020      	str	r0, [r4, #0]
 8016ca8:	6061      	str	r1, [r4, #4]
 8016caa:	60a2      	str	r2, [r4, #8]
 8016cac:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,6,16,18");
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	4ab8      	ldr	r2, [pc, #736]	; (8016f94 <problem_fetch+0x158ac>)
 8016cb4:	461d      	mov	r5, r3
 8016cb6:	4614      	mov	r4, r2
 8016cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016cba:	6028      	str	r0, [r5, #0]
 8016cbc:	6069      	str	r1, [r5, #4]
 8016cbe:	60aa      	str	r2, [r5, #8]
 8016cc0:	60eb      	str	r3, [r5, #12]
 8016cc2:	6820      	ldr	r0, [r4, #0]
 8016cc4:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016ccc:	4ab2      	ldr	r2, [pc, #712]	; (8016f98 <problem_fetch+0x158b0>)
 8016cce:	461c      	mov	r4, r3
 8016cd0:	4615      	mov	r5, r2
 8016cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016cd4:	6020      	str	r0, [r4, #0]
 8016cd6:	6061      	str	r1, [r4, #4]
 8016cd8:	60a2      	str	r2, [r4, #8]
 8016cda:	60e3      	str	r3, [r4, #12]
			break;
 8016cdc:	f005 bc34 	b.w	801c548 <problem_fetch+0x1ae60>
		case 634 :
			strcpy(p->name,"ROBERTDS#1");
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016ce6:	49ad      	ldr	r1, [pc, #692]	; (8016f9c <problem_fetch+0x158b4>)
 8016ce8:	461a      	mov	r2, r3
 8016cea:	460b      	mov	r3, r1
 8016cec:	cb03      	ldmia	r3!, {r0, r1}
 8016cee:	6010      	str	r0, [r2, #0]
 8016cf0:	6051      	str	r1, [r2, #4]
 8016cf2:	8819      	ldrh	r1, [r3, #0]
 8016cf4:	789b      	ldrb	r3, [r3, #2]
 8016cf6:	8111      	strh	r1, [r2, #8]
 8016cf8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d00:	4aa7      	ldr	r2, [pc, #668]	; (8016fa0 <problem_fetch+0x158b8>)
 8016d02:	6810      	ldr	r0, [r2, #0]
 8016d04:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2207      	movs	r2, #7
 8016d0a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,B,D,B,D,D");
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	33a4      	adds	r3, #164	; 0xa4
 8016d10:	4aa4      	ldr	r2, [pc, #656]	; (8016fa4 <problem_fetch+0x158bc>)
 8016d12:	461c      	mov	r4, r3
 8016d14:	4613      	mov	r3, r2
 8016d16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d18:	6020      	str	r0, [r4, #0]
 8016d1a:	6061      	str	r1, [r4, #4]
 8016d1c:	60a2      	str	r2, [r4, #8]
 8016d1e:	881b      	ldrh	r3, [r3, #0]
 8016d20:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,10,11,12,15,18");
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	3304      	adds	r3, #4
 8016d26:	4aa0      	ldr	r2, [pc, #640]	; (8016fa8 <problem_fetch+0x158c0>)
 8016d28:	461d      	mov	r5, r3
 8016d2a:	4614      	mov	r4, r2
 8016d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d2e:	6028      	str	r0, [r5, #0]
 8016d30:	6069      	str	r1, [r5, #4]
 8016d32:	60aa      	str	r2, [r5, #8]
 8016d34:	60eb      	str	r3, [r5, #12]
 8016d36:	8823      	ldrh	r3, [r4, #0]
 8016d38:	78a2      	ldrb	r2, [r4, #2]
 8016d3a:	822b      	strh	r3, [r5, #16]
 8016d3c:	4613      	mov	r3, r2
 8016d3e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016d46:	4a99      	ldr	r2, [pc, #612]	; (8016fac <problem_fetch+0x158c4>)
 8016d48:	461c      	mov	r4, r3
 8016d4a:	4613      	mov	r3, r2
 8016d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d4e:	6020      	str	r0, [r4, #0]
 8016d50:	6061      	str	r1, [r4, #4]
 8016d52:	60a2      	str	r2, [r4, #8]
 8016d54:	881b      	ldrh	r3, [r3, #0]
 8016d56:	81a3      	strh	r3, [r4, #12]
			break;
 8016d58:	f005 bbf6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 635 :
			strcpy(p->name,"DEATH EATER");
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016d62:	4a93      	ldr	r2, [pc, #588]	; (8016fb0 <problem_fetch+0x158c8>)
 8016d64:	461c      	mov	r4, r3
 8016d66:	4613      	mov	r3, r2
 8016d68:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d6a:	6020      	str	r0, [r4, #0]
 8016d6c:	6061      	str	r1, [r4, #4]
 8016d6e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016d76:	4a8a      	ldr	r2, [pc, #552]	; (8016fa0 <problem_fetch+0x158b8>)
 8016d78:	6810      	ldr	r0, [r2, #0]
 8016d7a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2207      	movs	r2, #7
 8016d80:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,I,J,G,I");
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	33a4      	adds	r3, #164	; 0xa4
 8016d86:	4a8b      	ldr	r2, [pc, #556]	; (8016fb4 <problem_fetch+0x158cc>)
 8016d88:	461c      	mov	r4, r3
 8016d8a:	4613      	mov	r3, r2
 8016d8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016d8e:	6020      	str	r0, [r4, #0]
 8016d90:	6061      	str	r1, [r4, #4]
 8016d92:	60a2      	str	r2, [r4, #8]
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,15,18");
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	3304      	adds	r3, #4
 8016d9c:	4a86      	ldr	r2, [pc, #536]	; (8016fb8 <problem_fetch+0x158d0>)
 8016d9e:	461d      	mov	r5, r3
 8016da0:	4614      	mov	r4, r2
 8016da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016da4:	6028      	str	r0, [r5, #0]
 8016da6:	6069      	str	r1, [r5, #4]
 8016da8:	60aa      	str	r2, [r5, #8]
 8016daa:	60eb      	str	r3, [r5, #12]
 8016dac:	8823      	ldrh	r3, [r4, #0]
 8016dae:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016db6:	4a81      	ldr	r2, [pc, #516]	; (8016fbc <problem_fetch+0x158d4>)
 8016db8:	461c      	mov	r4, r3
 8016dba:	4613      	mov	r3, r2
 8016dbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016dbe:	6020      	str	r0, [r4, #0]
 8016dc0:	6061      	str	r1, [r4, #4]
 8016dc2:	60a2      	str	r2, [r4, #8]
 8016dc4:	881b      	ldrh	r3, [r3, #0]
 8016dc6:	81a3      	strh	r3, [r4, #12]
			break;
 8016dc8:	f005 bbbe 	b.w	801c548 <problem_fetch+0x1ae60>
		case 636 :
			strcpy(p->name,"VISUALIZZA STOC......");
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016dd2:	4a7b      	ldr	r2, [pc, #492]	; (8016fc0 <problem_fetch+0x158d8>)
 8016dd4:	461d      	mov	r5, r3
 8016dd6:	4614      	mov	r4, r2
 8016dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dda:	6028      	str	r0, [r5, #0]
 8016ddc:	6069      	str	r1, [r5, #4]
 8016dde:	60aa      	str	r2, [r5, #8]
 8016de0:	60eb      	str	r3, [r5, #12]
 8016de2:	6820      	ldr	r0, [r4, #0]
 8016de4:	6128      	str	r0, [r5, #16]
 8016de6:	88a3      	ldrh	r3, [r4, #4]
 8016de8:	82ab      	strh	r3, [r5, #20]
			strcpy(p->grade,"7B");
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016df0:	4a74      	ldr	r2, [pc, #464]	; (8016fc4 <problem_fetch+0x158dc>)
 8016df2:	8811      	ldrh	r1, [r2, #0]
 8016df4:	7892      	ldrb	r2, [r2, #2]
 8016df6:	8019      	strh	r1, [r3, #0]
 8016df8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	2206      	movs	r2, #6
 8016dfe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,H,F,I");
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	33a4      	adds	r3, #164	; 0xa4
 8016e04:	4a70      	ldr	r2, [pc, #448]	; (8016fc8 <problem_fetch+0x158e0>)
 8016e06:	461c      	mov	r4, r3
 8016e08:	4613      	mov	r3, r2
 8016e0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e0c:	6020      	str	r0, [r4, #0]
 8016e0e:	6061      	str	r1, [r4, #4]
 8016e10:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,13,18");
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	3304      	adds	r3, #4
 8016e16:	4a6d      	ldr	r2, [pc, #436]	; (8016fcc <problem_fetch+0x158e4>)
 8016e18:	461c      	mov	r4, r3
 8016e1a:	4613      	mov	r3, r2
 8016e1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e1e:	6020      	str	r0, [r4, #0]
 8016e20:	6061      	str	r1, [r4, #4]
 8016e22:	60a2      	str	r2, [r4, #8]
 8016e24:	881a      	ldrh	r2, [r3, #0]
 8016e26:	789b      	ldrb	r3, [r3, #2]
 8016e28:	81a2      	strh	r2, [r4, #12]
 8016e2a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016e32:	4a67      	ldr	r2, [pc, #412]	; (8016fd0 <problem_fetch+0x158e8>)
 8016e34:	461c      	mov	r4, r3
 8016e36:	4613      	mov	r3, r2
 8016e38:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e3a:	6020      	str	r0, [r4, #0]
 8016e3c:	6061      	str	r1, [r4, #4]
 8016e3e:	60a2      	str	r2, [r4, #8]
			break;
 8016e40:	f005 bb82 	b.w	801c548 <problem_fetch+0x1ae60>
		case 637 :
			strcpy(p->name,"SHRINE1");
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016e4a:	4962      	ldr	r1, [pc, #392]	; (8016fd4 <problem_fetch+0x158ec>)
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	460b      	mov	r3, r1
 8016e50:	cb03      	ldmia	r3!, {r0, r1}
 8016e52:	6010      	str	r0, [r2, #0]
 8016e54:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7B+");
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016e5c:	4a5e      	ldr	r2, [pc, #376]	; (8016fd8 <problem_fetch+0x158f0>)
 8016e5e:	6810      	ldr	r0, [r2, #0]
 8016e60:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	2206      	movs	r2, #6
 8016e66:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,F,F,J,I");
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	33a4      	adds	r3, #164	; 0xa4
 8016e6c:	4a5b      	ldr	r2, [pc, #364]	; (8016fdc <problem_fetch+0x158f4>)
 8016e6e:	461c      	mov	r4, r3
 8016e70:	4613      	mov	r3, r2
 8016e72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e74:	6020      	str	r0, [r4, #0]
 8016e76:	6061      	str	r1, [r4, #4]
 8016e78:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,11,13,16,18");
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	3304      	adds	r3, #4
 8016e7e:	4a58      	ldr	r2, [pc, #352]	; (8016fe0 <problem_fetch+0x158f8>)
 8016e80:	461c      	mov	r4, r3
 8016e82:	4615      	mov	r5, r2
 8016e84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e86:	6020      	str	r0, [r4, #0]
 8016e88:	6061      	str	r1, [r4, #4]
 8016e8a:	60a2      	str	r2, [r4, #8]
 8016e8c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016e94:	4a4e      	ldr	r2, [pc, #312]	; (8016fd0 <problem_fetch+0x158e8>)
 8016e96:	461c      	mov	r4, r3
 8016e98:	4613      	mov	r3, r2
 8016e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016e9c:	6020      	str	r0, [r4, #0]
 8016e9e:	6061      	str	r1, [r4, #4]
 8016ea0:	60a2      	str	r2, [r4, #8]
			break;
 8016ea2:	f005 bb51 	b.w	801c548 <problem_fetch+0x1ae60>
		case 638 :
			strcpy(p->name,"SQUINCHER");
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016eac:	494d      	ldr	r1, [pc, #308]	; (8016fe4 <problem_fetch+0x158fc>)
 8016eae:	461a      	mov	r2, r3
 8016eb0:	460b      	mov	r3, r1
 8016eb2:	cb03      	ldmia	r3!, {r0, r1}
 8016eb4:	6010      	str	r0, [r2, #0]
 8016eb6:	6051      	str	r1, [r2, #4]
 8016eb8:	881b      	ldrh	r3, [r3, #0]
 8016eba:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016ec2:	4a37      	ldr	r2, [pc, #220]	; (8016fa0 <problem_fetch+0x158b8>)
 8016ec4:	6810      	ldr	r0, [r2, #0]
 8016ec6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2207      	movs	r2, #7
 8016ecc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,F,C,D,D");
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	33a4      	adds	r3, #164	; 0xa4
 8016ed2:	4a45      	ldr	r2, [pc, #276]	; (8016fe8 <problem_fetch+0x15900>)
 8016ed4:	461c      	mov	r4, r3
 8016ed6:	4613      	mov	r3, r2
 8016ed8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016eda:	6020      	str	r0, [r4, #0]
 8016edc:	6061      	str	r1, [r4, #4]
 8016ede:	60a2      	str	r2, [r4, #8]
 8016ee0:	881b      	ldrh	r3, [r3, #0]
 8016ee2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,11,13,15,18");
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	3304      	adds	r3, #4
 8016ee8:	4a40      	ldr	r2, [pc, #256]	; (8016fec <problem_fetch+0x15904>)
 8016eea:	461d      	mov	r5, r3
 8016eec:	4614      	mov	r4, r2
 8016eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ef0:	6028      	str	r0, [r5, #0]
 8016ef2:	6069      	str	r1, [r5, #4]
 8016ef4:	60aa      	str	r2, [r5, #8]
 8016ef6:	60eb      	str	r3, [r5, #12]
 8016ef8:	8823      	ldrh	r3, [r4, #0]
 8016efa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016f02:	4a2a      	ldr	r2, [pc, #168]	; (8016fac <problem_fetch+0x158c4>)
 8016f04:	461c      	mov	r4, r3
 8016f06:	4613      	mov	r3, r2
 8016f08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f0a:	6020      	str	r0, [r4, #0]
 8016f0c:	6061      	str	r1, [r4, #4]
 8016f0e:	60a2      	str	r2, [r4, #8]
 8016f10:	881b      	ldrh	r3, [r3, #0]
 8016f12:	81a3      	strh	r3, [r4, #12]
			break;
 8016f14:	f005 bb18 	b.w	801c548 <problem_fetch+0x1ae60>
		case 639 :
			strcpy(p->name,"ACG6 PLUS");
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8016f1e:	4934      	ldr	r1, [pc, #208]	; (8016ff0 <problem_fetch+0x15908>)
 8016f20:	461a      	mov	r2, r3
 8016f22:	460b      	mov	r3, r1
 8016f24:	cb03      	ldmia	r3!, {r0, r1}
 8016f26:	6010      	str	r0, [r2, #0]
 8016f28:	6051      	str	r1, [r2, #4]
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016f34:	4a2f      	ldr	r2, [pc, #188]	; (8016ff4 <problem_fetch+0x1590c>)
 8016f36:	8811      	ldrh	r1, [r2, #0]
 8016f38:	7892      	ldrb	r2, [r2, #2]
 8016f3a:	8019      	strh	r1, [r3, #0]
 8016f3c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2206      	movs	r2, #6
 8016f42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,E,C,I");
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	33a4      	adds	r3, #164	; 0xa4
 8016f48:	4a2b      	ldr	r2, [pc, #172]	; (8016ff8 <problem_fetch+0x15910>)
 8016f4a:	461c      	mov	r4, r3
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f50:	6020      	str	r0, [r4, #0]
 8016f52:	6061      	str	r1, [r4, #4]
 8016f54:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,16,16,18");
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	3304      	adds	r3, #4
 8016f5a:	4a28      	ldr	r2, [pc, #160]	; (8016ffc <problem_fetch+0x15914>)
 8016f5c:	461d      	mov	r5, r3
 8016f5e:	4614      	mov	r4, r2
 8016f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f62:	6028      	str	r0, [r5, #0]
 8016f64:	6069      	str	r1, [r5, #4]
 8016f66:	60aa      	str	r2, [r5, #8]
 8016f68:	60eb      	str	r3, [r5, #12]
 8016f6a:	7823      	ldrb	r3, [r4, #0]
 8016f6c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8016f74:	4a16      	ldr	r2, [pc, #88]	; (8016fd0 <problem_fetch+0x158e8>)
 8016f76:	461c      	mov	r4, r3
 8016f78:	4613      	mov	r3, r2
 8016f7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8016f7c:	6020      	str	r0, [r4, #0]
 8016f7e:	6061      	str	r1, [r4, #4]
 8016f80:	60a2      	str	r2, [r4, #8]
			break;
 8016f82:	f005 bae1 	b.w	801c548 <problem_fetch+0x1ae60>
 8016f86:	bf00      	nop
 8016f88:	0802b178 	.word	0x0802b178
 8016f8c:	080239f4 	.word	0x080239f4
 8016f90:	0802b180 	.word	0x0802b180
 8016f94:	0802b190 	.word	0x0802b190
 8016f98:	08023a80 	.word	0x08023a80
 8016f9c:	0802b1a4 	.word	0x0802b1a4
 8016fa0:	0802395c 	.word	0x0802395c
 8016fa4:	0802b1b0 	.word	0x0802b1b0
 8016fa8:	0802b1c0 	.word	0x0802b1c0
 8016fac:	08023ae4 	.word	0x08023ae4
 8016fb0:	0802b1d4 	.word	0x0802b1d4
 8016fb4:	0802b1e0 	.word	0x0802b1e0
 8016fb8:	0802b1f0 	.word	0x0802b1f0
 8016fbc:	080239d4 	.word	0x080239d4
 8016fc0:	0802b204 	.word	0x0802b204
 8016fc4:	08024054 	.word	0x08024054
 8016fc8:	0802b21c 	.word	0x0802b21c
 8016fcc:	08027d98 	.word	0x08027d98
 8016fd0:	08023cf8 	.word	0x08023cf8
 8016fd4:	0802b228 	.word	0x0802b228
 8016fd8:	08023a98 	.word	0x08023a98
 8016fdc:	0802b230 	.word	0x0802b230
 8016fe0:	0802b23c 	.word	0x0802b23c
 8016fe4:	0802b24c 	.word	0x0802b24c
 8016fe8:	0802b258 	.word	0x0802b258
 8016fec:	0802b268 	.word	0x0802b268
 8016ff0:	0802b27c 	.word	0x0802b27c
 8016ff4:	0802391c 	.word	0x0802391c
 8016ff8:	0802b288 	.word	0x0802b288
 8016ffc:	0802b294 	.word	0x0802b294
		case 640 :
			strcpy(p->name,"ROCKET");
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017006:	4aba      	ldr	r2, [pc, #744]	; (80172f0 <problem_fetch+0x15c08>)
 8017008:	6810      	ldr	r0, [r2, #0]
 801700a:	6018      	str	r0, [r3, #0]
 801700c:	8891      	ldrh	r1, [r2, #4]
 801700e:	7992      	ldrb	r2, [r2, #6]
 8017010:	8099      	strh	r1, [r3, #4]
 8017012:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801701a:	4ab6      	ldr	r2, [pc, #728]	; (80172f4 <problem_fetch+0x15c0c>)
 801701c:	8811      	ldrh	r1, [r2, #0]
 801701e:	7892      	ldrb	r2, [r2, #2]
 8017020:	8019      	strh	r1, [r3, #0]
 8017022:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2205      	movs	r2, #5
 8017028:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,H,F,I");
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	33a4      	adds	r3, #164	; 0xa4
 801702e:	49b2      	ldr	r1, [pc, #712]	; (80172f8 <problem_fetch+0x15c10>)
 8017030:	461a      	mov	r2, r3
 8017032:	460b      	mov	r3, r1
 8017034:	cb03      	ldmia	r3!, {r0, r1}
 8017036:	6010      	str	r0, [r2, #0]
 8017038:	6051      	str	r1, [r2, #4]
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,6,10,13,18");
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	3304      	adds	r3, #4
 8017042:	4aae      	ldr	r2, [pc, #696]	; (80172fc <problem_fetch+0x15c14>)
 8017044:	461c      	mov	r4, r3
 8017046:	4613      	mov	r3, r2
 8017048:	cb07      	ldmia	r3!, {r0, r1, r2}
 801704a:	6020      	str	r0, [r4, #0]
 801704c:	6061      	str	r1, [r4, #4]
 801704e:	60a2      	str	r2, [r4, #8]
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801705a:	49a9      	ldr	r1, [pc, #676]	; (8017300 <problem_fetch+0x15c18>)
 801705c:	461a      	mov	r2, r3
 801705e:	460b      	mov	r3, r1
 8017060:	cb03      	ldmia	r3!, {r0, r1}
 8017062:	6010      	str	r0, [r2, #0]
 8017064:	6051      	str	r1, [r2, #4]
 8017066:	881b      	ldrh	r3, [r3, #0]
 8017068:	8113      	strh	r3, [r2, #8]
			break;
 801706a:	f005 ba6d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 641 :
			strcpy(p->name,"GAMBERO");
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017074:	49a3      	ldr	r1, [pc, #652]	; (8017304 <problem_fetch+0x15c1c>)
 8017076:	461a      	mov	r2, r3
 8017078:	460b      	mov	r3, r1
 801707a:	cb03      	ldmia	r3!, {r0, r1}
 801707c:	6010      	str	r0, [r2, #0]
 801707e:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017086:	4aa0      	ldr	r2, [pc, #640]	; (8017308 <problem_fetch+0x15c20>)
 8017088:	8811      	ldrh	r1, [r2, #0]
 801708a:	7892      	ldrb	r2, [r2, #2]
 801708c:	8019      	strh	r1, [r3, #0]
 801708e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2206      	movs	r2, #6
 8017094:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,E,B,E,A");
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	33a4      	adds	r3, #164	; 0xa4
 801709a:	4a9c      	ldr	r2, [pc, #624]	; (801730c <problem_fetch+0x15c24>)
 801709c:	461c      	mov	r4, r3
 801709e:	4613      	mov	r3, r2
 80170a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170a2:	6020      	str	r0, [r4, #0]
 80170a4:	6061      	str	r1, [r4, #4]
 80170a6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,14,18");
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	3304      	adds	r3, #4
 80170ac:	4a98      	ldr	r2, [pc, #608]	; (8017310 <problem_fetch+0x15c28>)
 80170ae:	461c      	mov	r4, r3
 80170b0:	4613      	mov	r3, r2
 80170b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170b4:	6020      	str	r0, [r4, #0]
 80170b6:	6061      	str	r1, [r4, #4]
 80170b8:	60a2      	str	r2, [r4, #8]
 80170ba:	881a      	ldrh	r2, [r3, #0]
 80170bc:	789b      	ldrb	r3, [r3, #2]
 80170be:	81a2      	strh	r2, [r4, #12]
 80170c0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80170c8:	4a92      	ldr	r2, [pc, #584]	; (8017314 <problem_fetch+0x15c2c>)
 80170ca:	461c      	mov	r4, r3
 80170cc:	4613      	mov	r3, r2
 80170ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 80170d0:	6020      	str	r0, [r4, #0]
 80170d2:	6061      	str	r1, [r4, #4]
 80170d4:	60a2      	str	r2, [r4, #8]
			break;
 80170d6:	f005 ba37 	b.w	801c548 <problem_fetch+0x1ae60>
		case 642 :
			strcpy(p->name,"FIRST WORLD PROBLEM");
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80170e0:	4a8d      	ldr	r2, [pc, #564]	; (8017318 <problem_fetch+0x15c30>)
 80170e2:	461d      	mov	r5, r3
 80170e4:	4614      	mov	r4, r2
 80170e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80170e8:	6028      	str	r0, [r5, #0]
 80170ea:	6069      	str	r1, [r5, #4]
 80170ec:	60aa      	str	r2, [r5, #8]
 80170ee:	60eb      	str	r3, [r5, #12]
 80170f0:	6820      	ldr	r0, [r4, #0]
 80170f2:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80170fa:	4a88      	ldr	r2, [pc, #544]	; (801731c <problem_fetch+0x15c34>)
 80170fc:	6810      	ldr	r0, [r2, #0]
 80170fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2206      	movs	r2, #6
 8017104:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,C,E,C,D");
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	33a4      	adds	r3, #164	; 0xa4
 801710a:	4a85      	ldr	r2, [pc, #532]	; (8017320 <problem_fetch+0x15c38>)
 801710c:	461c      	mov	r4, r3
 801710e:	4613      	mov	r3, r2
 8017110:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017112:	6020      	str	r0, [r4, #0]
 8017114:	6061      	str	r1, [r4, #4]
 8017116:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,8,14,13,18");
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	3304      	adds	r3, #4
 801711c:	4a81      	ldr	r2, [pc, #516]	; (8017324 <problem_fetch+0x15c3c>)
 801711e:	461c      	mov	r4, r3
 8017120:	4613      	mov	r3, r2
 8017122:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017124:	6020      	str	r0, [r4, #0]
 8017126:	6061      	str	r1, [r4, #4]
 8017128:	60a2      	str	r2, [r4, #8]
 801712a:	881a      	ldrh	r2, [r3, #0]
 801712c:	789b      	ldrb	r3, [r3, #2]
 801712e:	81a2      	strh	r2, [r4, #12]
 8017130:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017138:	4a76      	ldr	r2, [pc, #472]	; (8017314 <problem_fetch+0x15c2c>)
 801713a:	461c      	mov	r4, r3
 801713c:	4613      	mov	r3, r2
 801713e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017140:	6020      	str	r0, [r4, #0]
 8017142:	6061      	str	r1, [r4, #4]
 8017144:	60a2      	str	r2, [r4, #8]
			break;
 8017146:	f005 b9ff 	b.w	801c548 <problem_fetch+0x1ae60>
		case 643 :
			strcpy(p->name,"POCKETLAND 2");
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017150:	4a75      	ldr	r2, [pc, #468]	; (8017328 <problem_fetch+0x15c40>)
 8017152:	461c      	mov	r4, r3
 8017154:	4613      	mov	r3, r2
 8017156:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017158:	6020      	str	r0, [r4, #0]
 801715a:	6061      	str	r1, [r4, #4]
 801715c:	60a2      	str	r2, [r4, #8]
 801715e:	781b      	ldrb	r3, [r3, #0]
 8017160:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017168:	4a67      	ldr	r2, [pc, #412]	; (8017308 <problem_fetch+0x15c20>)
 801716a:	8811      	ldrh	r1, [r2, #0]
 801716c:	7892      	ldrb	r2, [r2, #2]
 801716e:	8019      	strh	r1, [r3, #0]
 8017170:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2206      	movs	r2, #6
 8017176:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,D,G,H,E,I");
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	33a4      	adds	r3, #164	; 0xa4
 801717c:	4a6b      	ldr	r2, [pc, #428]	; (801732c <problem_fetch+0x15c44>)
 801717e:	461c      	mov	r4, r3
 8017180:	4613      	mov	r3, r2
 8017182:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017184:	6020      	str	r0, [r4, #0]
 8017186:	6061      	str	r1, [r4, #4]
 8017188:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	3304      	adds	r3, #4
 801718e:	4a68      	ldr	r2, [pc, #416]	; (8017330 <problem_fetch+0x15c48>)
 8017190:	461c      	mov	r4, r3
 8017192:	4615      	mov	r5, r2
 8017194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017196:	6020      	str	r0, [r4, #0]
 8017198:	6061      	str	r1, [r4, #4]
 801719a:	60a2      	str	r2, [r4, #8]
 801719c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80171a4:	4a5b      	ldr	r2, [pc, #364]	; (8017314 <problem_fetch+0x15c2c>)
 80171a6:	461c      	mov	r4, r3
 80171a8:	4613      	mov	r3, r2
 80171aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171ac:	6020      	str	r0, [r4, #0]
 80171ae:	6061      	str	r1, [r4, #4]
 80171b0:	60a2      	str	r2, [r4, #8]
			break;
 80171b2:	f005 b9c9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 644 :
			strcpy(p->name,"POCKETLAND");
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80171bc:	495d      	ldr	r1, [pc, #372]	; (8017334 <problem_fetch+0x15c4c>)
 80171be:	461a      	mov	r2, r3
 80171c0:	460b      	mov	r3, r1
 80171c2:	cb03      	ldmia	r3!, {r0, r1}
 80171c4:	6010      	str	r0, [r2, #0]
 80171c6:	6051      	str	r1, [r2, #4]
 80171c8:	8819      	ldrh	r1, [r3, #0]
 80171ca:	789b      	ldrb	r3, [r3, #2]
 80171cc:	8111      	strh	r1, [r2, #8]
 80171ce:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80171d6:	4a58      	ldr	r2, [pc, #352]	; (8017338 <problem_fetch+0x15c50>)
 80171d8:	8811      	ldrh	r1, [r2, #0]
 80171da:	7892      	ldrb	r2, [r2, #2]
 80171dc:	8019      	strh	r1, [r3, #0]
 80171de:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	2206      	movs	r2, #6
 80171e4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,G,G,G,A");
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	33a4      	adds	r3, #164	; 0xa4
 80171ea:	4a54      	ldr	r2, [pc, #336]	; (801733c <problem_fetch+0x15c54>)
 80171ec:	461c      	mov	r4, r3
 80171ee:	4613      	mov	r3, r2
 80171f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80171f2:	6020      	str	r0, [r4, #0]
 80171f4:	6061      	str	r1, [r4, #4]
 80171f6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	3304      	adds	r3, #4
 80171fc:	4a50      	ldr	r2, [pc, #320]	; (8017340 <problem_fetch+0x15c58>)
 80171fe:	461c      	mov	r4, r3
 8017200:	4615      	mov	r5, r2
 8017202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017204:	6020      	str	r0, [r4, #0]
 8017206:	6061      	str	r1, [r4, #4]
 8017208:	60a2      	str	r2, [r4, #8]
 801720a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017212:	4a40      	ldr	r2, [pc, #256]	; (8017314 <problem_fetch+0x15c2c>)
 8017214:	461c      	mov	r4, r3
 8017216:	4613      	mov	r3, r2
 8017218:	cb07      	ldmia	r3!, {r0, r1, r2}
 801721a:	6020      	str	r0, [r4, #0]
 801721c:	6061      	str	r1, [r4, #4]
 801721e:	60a2      	str	r2, [r4, #8]
			break;
 8017220:	f005 b992 	b.w	801c548 <problem_fetch+0x1ae60>
		case 645 :
			strcpy(p->name,"WLF46");
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801722a:	4a46      	ldr	r2, [pc, #280]	; (8017344 <problem_fetch+0x15c5c>)
 801722c:	6810      	ldr	r0, [r2, #0]
 801722e:	6018      	str	r0, [r3, #0]
 8017230:	8892      	ldrh	r2, [r2, #4]
 8017232:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801723a:	4a2e      	ldr	r2, [pc, #184]	; (80172f4 <problem_fetch+0x15c0c>)
 801723c:	8811      	ldrh	r1, [r2, #0]
 801723e:	7892      	ldrb	r2, [r2, #2]
 8017240:	8019      	strh	r1, [r3, #0]
 8017242:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2206      	movs	r2, #6
 8017248:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,G,I");
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	33a4      	adds	r3, #164	; 0xa4
 801724e:	4a3e      	ldr	r2, [pc, #248]	; (8017348 <problem_fetch+0x15c60>)
 8017250:	461c      	mov	r4, r3
 8017252:	4613      	mov	r3, r2
 8017254:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017256:	6020      	str	r0, [r4, #0]
 8017258:	6061      	str	r1, [r4, #4]
 801725a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,13,17,18");
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	3304      	adds	r3, #4
 8017260:	4a3a      	ldr	r2, [pc, #232]	; (801734c <problem_fetch+0x15c64>)
 8017262:	461c      	mov	r4, r3
 8017264:	4615      	mov	r5, r2
 8017266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017268:	6020      	str	r0, [r4, #0]
 801726a:	6061      	str	r1, [r4, #4]
 801726c:	60a2      	str	r2, [r4, #8]
 801726e:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017276:	4a27      	ldr	r2, [pc, #156]	; (8017314 <problem_fetch+0x15c2c>)
 8017278:	461c      	mov	r4, r3
 801727a:	4613      	mov	r3, r2
 801727c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801727e:	6020      	str	r0, [r4, #0]
 8017280:	6061      	str	r1, [r4, #4]
 8017282:	60a2      	str	r2, [r4, #8]
			break;
 8017284:	f005 b960 	b.w	801c548 <problem_fetch+0x1ae60>
		case 646 :
			strcpy(p->name,"HIEROGRIPIC");
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801728e:	4a30      	ldr	r2, [pc, #192]	; (8017350 <problem_fetch+0x15c68>)
 8017290:	461c      	mov	r4, r3
 8017292:	4613      	mov	r3, r2
 8017294:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017296:	6020      	str	r0, [r4, #0]
 8017298:	6061      	str	r1, [r4, #4]
 801729a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80172a2:	4a14      	ldr	r2, [pc, #80]	; (80172f4 <problem_fetch+0x15c0c>)
 80172a4:	8811      	ldrh	r1, [r2, #0]
 80172a6:	7892      	ldrb	r2, [r2, #2]
 80172a8:	8019      	strh	r1, [r3, #0]
 80172aa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2206      	movs	r2, #6
 80172b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,A,A");
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	33a4      	adds	r3, #164	; 0xa4
 80172b6:	4a27      	ldr	r2, [pc, #156]	; (8017354 <problem_fetch+0x15c6c>)
 80172b8:	461c      	mov	r4, r3
 80172ba:	4613      	mov	r3, r2
 80172bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172be:	6020      	str	r0, [r4, #0]
 80172c0:	6061      	str	r1, [r4, #4]
 80172c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,11,13,14,18");
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	3304      	adds	r3, #4
 80172c8:	4a23      	ldr	r2, [pc, #140]	; (8017358 <problem_fetch+0x15c70>)
 80172ca:	461c      	mov	r4, r3
 80172cc:	4615      	mov	r5, r2
 80172ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80172d0:	6020      	str	r0, [r4, #0]
 80172d2:	6061      	str	r1, [r4, #4]
 80172d4:	60a2      	str	r2, [r4, #8]
 80172d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80172de:	4a1f      	ldr	r2, [pc, #124]	; (801735c <problem_fetch+0x15c74>)
 80172e0:	461c      	mov	r4, r3
 80172e2:	4613      	mov	r3, r2
 80172e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80172e6:	6020      	str	r0, [r4, #0]
 80172e8:	6061      	str	r1, [r4, #4]
 80172ea:	60a2      	str	r2, [r4, #8]
			break;
 80172ec:	f005 b92c 	b.w	801c548 <problem_fetch+0x1ae60>
 80172f0:	0802b2a8 	.word	0x0802b2a8
 80172f4:	0802391c 	.word	0x0802391c
 80172f8:	0802b2b0 	.word	0x0802b2b0
 80172fc:	0802b2bc 	.word	0x0802b2bc
 8017300:	0802403c 	.word	0x0802403c
 8017304:	0802b2cc 	.word	0x0802b2cc
 8017308:	08024190 	.word	0x08024190
 801730c:	0802b2d4 	.word	0x0802b2d4
 8017310:	08028858 	.word	0x08028858
 8017314:	08023cf8 	.word	0x08023cf8
 8017318:	0802b2e0 	.word	0x0802b2e0
 801731c:	080239f4 	.word	0x080239f4
 8017320:	0802b2f4 	.word	0x0802b2f4
 8017324:	0802b300 	.word	0x0802b300
 8017328:	0802b310 	.word	0x0802b310
 801732c:	0802b320 	.word	0x0802b320
 8017330:	0802b32c 	.word	0x0802b32c
 8017334:	0802b33c 	.word	0x0802b33c
 8017338:	08024054 	.word	0x08024054
 801733c:	0802b348 	.word	0x0802b348
 8017340:	0802b354 	.word	0x0802b354
 8017344:	0802b364 	.word	0x0802b364
 8017348:	0802b36c 	.word	0x0802b36c
 801734c:	0802b378 	.word	0x0802b378
 8017350:	0802b388 	.word	0x0802b388
 8017354:	0802b394 	.word	0x0802b394
 8017358:	0802b3a0 	.word	0x0802b3a0
 801735c:	0802393c 	.word	0x0802393c
		case 647 :
			strcpy(p->name,"FRENCH INDUCED COMA");
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017366:	4aab      	ldr	r2, [pc, #684]	; (8017614 <problem_fetch+0x15f2c>)
 8017368:	461d      	mov	r5, r3
 801736a:	4614      	mov	r4, r2
 801736c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801736e:	6028      	str	r0, [r5, #0]
 8017370:	6069      	str	r1, [r5, #4]
 8017372:	60aa      	str	r2, [r5, #8]
 8017374:	60eb      	str	r3, [r5, #12]
 8017376:	6820      	ldr	r0, [r4, #0]
 8017378:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6B+");
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017380:	4aa5      	ldr	r2, [pc, #660]	; (8017618 <problem_fetch+0x15f30>)
 8017382:	6810      	ldr	r0, [r2, #0]
 8017384:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	2205      	movs	r2, #5
 801738a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,D,D,A");
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	33a4      	adds	r3, #164	; 0xa4
 8017390:	49a2      	ldr	r1, [pc, #648]	; (801761c <problem_fetch+0x15f34>)
 8017392:	461a      	mov	r2, r3
 8017394:	460b      	mov	r3, r1
 8017396:	cb03      	ldmia	r3!, {r0, r1}
 8017398:	6010      	str	r0, [r2, #0]
 801739a:	6051      	str	r1, [r2, #4]
 801739c:	881b      	ldrh	r3, [r3, #0]
 801739e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,11,15,18");
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	3304      	adds	r3, #4
 80173a4:	4a9e      	ldr	r2, [pc, #632]	; (8017620 <problem_fetch+0x15f38>)
 80173a6:	461c      	mov	r4, r3
 80173a8:	4613      	mov	r3, r2
 80173aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80173ac:	6020      	str	r0, [r4, #0]
 80173ae:	6061      	str	r1, [r4, #4]
 80173b0:	60a2      	str	r2, [r4, #8]
 80173b2:	881b      	ldrh	r3, [r3, #0]
 80173b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80173bc:	4999      	ldr	r1, [pc, #612]	; (8017624 <problem_fetch+0x15f3c>)
 80173be:	461a      	mov	r2, r3
 80173c0:	460b      	mov	r3, r1
 80173c2:	cb03      	ldmia	r3!, {r0, r1}
 80173c4:	6010      	str	r0, [r2, #0]
 80173c6:	6051      	str	r1, [r2, #4]
 80173c8:	881b      	ldrh	r3, [r3, #0]
 80173ca:	8113      	strh	r3, [r2, #8]
			break;
 80173cc:	f005 b8bc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 648 :
			strcpy(p->name,"YEEEEAHHH");
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80173d6:	4994      	ldr	r1, [pc, #592]	; (8017628 <problem_fetch+0x15f40>)
 80173d8:	461a      	mov	r2, r3
 80173da:	460b      	mov	r3, r1
 80173dc:	cb03      	ldmia	r3!, {r0, r1}
 80173de:	6010      	str	r0, [r2, #0]
 80173e0:	6051      	str	r1, [r2, #4]
 80173e2:	881b      	ldrh	r3, [r3, #0]
 80173e4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80173ec:	4a8f      	ldr	r2, [pc, #572]	; (801762c <problem_fetch+0x15f44>)
 80173ee:	8811      	ldrh	r1, [r2, #0]
 80173f0:	7892      	ldrb	r2, [r2, #2]
 80173f2:	8019      	strh	r1, [r3, #0]
 80173f4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 4;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2204      	movs	r2, #4
 80173fa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,I,G,I");
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	33a4      	adds	r3, #164	; 0xa4
 8017400:	498b      	ldr	r1, [pc, #556]	; (8017630 <problem_fetch+0x15f48>)
 8017402:	461a      	mov	r2, r3
 8017404:	460b      	mov	r3, r1
 8017406:	cb03      	ldmia	r3!, {r0, r1}
 8017408:	6010      	str	r0, [r2, #0]
 801740a:	6051      	str	r1, [r2, #4]
			strcpy(p->moveNumbers,"4,10,14,18");
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	3304      	adds	r3, #4
 8017410:	4988      	ldr	r1, [pc, #544]	; (8017634 <problem_fetch+0x15f4c>)
 8017412:	461a      	mov	r2, r3
 8017414:	460b      	mov	r3, r1
 8017416:	cb03      	ldmia	r3!, {r0, r1}
 8017418:	6010      	str	r0, [r2, #0]
 801741a:	6051      	str	r1, [r2, #4]
 801741c:	8819      	ldrh	r1, [r3, #0]
 801741e:	789b      	ldrb	r3, [r3, #2]
 8017420:	8111      	strh	r1, [r2, #8]
 8017422:	7293      	strb	r3, [r2, #10]
			strcpy(p->startFinish,"s,d,d,e");
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801742a:	4983      	ldr	r1, [pc, #524]	; (8017638 <problem_fetch+0x15f50>)
 801742c:	461a      	mov	r2, r3
 801742e:	460b      	mov	r3, r1
 8017430:	cb03      	ldmia	r3!, {r0, r1}
 8017432:	6010      	str	r0, [r2, #0]
 8017434:	6051      	str	r1, [r2, #4]
			break;
 8017436:	f005 b887 	b.w	801c548 <problem_fetch+0x1ae60>
		case 649 :
			strcpy(p->name,"OFD");
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017440:	4a7e      	ldr	r2, [pc, #504]	; (801763c <problem_fetch+0x15f54>)
 8017442:	6810      	ldr	r0, [r2, #0]
 8017444:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801744c:	4a7c      	ldr	r2, [pc, #496]	; (8017640 <problem_fetch+0x15f58>)
 801744e:	6810      	ldr	r0, [r2, #0]
 8017450:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	2206      	movs	r2, #6
 8017456:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	33a4      	adds	r3, #164	; 0xa4
 801745c:	4a79      	ldr	r2, [pc, #484]	; (8017644 <problem_fetch+0x15f5c>)
 801745e:	461c      	mov	r4, r3
 8017460:	4613      	mov	r3, r2
 8017462:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017464:	6020      	str	r0, [r4, #0]
 8017466:	6061      	str	r1, [r4, #4]
 8017468:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,12,14,18");
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	3304      	adds	r3, #4
 801746e:	4a76      	ldr	r2, [pc, #472]	; (8017648 <problem_fetch+0x15f60>)
 8017470:	461c      	mov	r4, r3
 8017472:	4613      	mov	r3, r2
 8017474:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017476:	6020      	str	r0, [r4, #0]
 8017478:	6061      	str	r1, [r4, #4]
 801747a:	60a2      	str	r2, [r4, #8]
 801747c:	881a      	ldrh	r2, [r3, #0]
 801747e:	789b      	ldrb	r3, [r3, #2]
 8017480:	81a2      	strh	r2, [r4, #12]
 8017482:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801748a:	4a70      	ldr	r2, [pc, #448]	; (801764c <problem_fetch+0x15f64>)
 801748c:	461c      	mov	r4, r3
 801748e:	4613      	mov	r3, r2
 8017490:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017492:	6020      	str	r0, [r4, #0]
 8017494:	6061      	str	r1, [r4, #4]
 8017496:	60a2      	str	r2, [r4, #8]
			break;
 8017498:	f005 b856 	b.w	801c548 <problem_fetch+0x1ae60>
		case 650 :
			strcpy(p->name,"GO BIG");
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80174a2:	4a6b      	ldr	r2, [pc, #428]	; (8017650 <problem_fetch+0x15f68>)
 80174a4:	6810      	ldr	r0, [r2, #0]
 80174a6:	6018      	str	r0, [r3, #0]
 80174a8:	8891      	ldrh	r1, [r2, #4]
 80174aa:	7992      	ldrb	r2, [r2, #6]
 80174ac:	8099      	strh	r1, [r3, #4]
 80174ae:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7B+");
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80174b6:	4a67      	ldr	r2, [pc, #412]	; (8017654 <problem_fetch+0x15f6c>)
 80174b8:	6810      	ldr	r0, [r2, #0]
 80174ba:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2205      	movs	r2, #5
 80174c0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,G,A,A");
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	33a4      	adds	r3, #164	; 0xa4
 80174c6:	4964      	ldr	r1, [pc, #400]	; (8017658 <problem_fetch+0x15f70>)
 80174c8:	461a      	mov	r2, r3
 80174ca:	460b      	mov	r3, r1
 80174cc:	cb03      	ldmia	r3!, {r0, r1}
 80174ce:	6010      	str	r0, [r2, #0]
 80174d0:	6051      	str	r1, [r2, #4]
 80174d2:	881b      	ldrh	r3, [r3, #0]
 80174d4:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,14,14,18");
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	3304      	adds	r3, #4
 80174da:	4a60      	ldr	r2, [pc, #384]	; (801765c <problem_fetch+0x15f74>)
 80174dc:	461c      	mov	r4, r3
 80174de:	4613      	mov	r3, r2
 80174e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80174e2:	6020      	str	r0, [r4, #0]
 80174e4:	6061      	str	r1, [r4, #4]
 80174e6:	60a2      	str	r2, [r4, #8]
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80174f2:	494c      	ldr	r1, [pc, #304]	; (8017624 <problem_fetch+0x15f3c>)
 80174f4:	461a      	mov	r2, r3
 80174f6:	460b      	mov	r3, r1
 80174f8:	cb03      	ldmia	r3!, {r0, r1}
 80174fa:	6010      	str	r0, [r2, #0]
 80174fc:	6051      	str	r1, [r2, #4]
 80174fe:	881b      	ldrh	r3, [r3, #0]
 8017500:	8113      	strh	r3, [r2, #8]
			break;
 8017502:	f005 b821 	b.w	801c548 <problem_fetch+0x1ae60>
		case 651 :
			strcpy(p->name,"VARIATION 2 6B+");
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801750c:	4a54      	ldr	r2, [pc, #336]	; (8017660 <problem_fetch+0x15f78>)
 801750e:	461c      	mov	r4, r3
 8017510:	4615      	mov	r5, r2
 8017512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017514:	6020      	str	r0, [r4, #0]
 8017516:	6061      	str	r1, [r4, #4]
 8017518:	60a2      	str	r2, [r4, #8]
 801751a:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017522:	4a3d      	ldr	r2, [pc, #244]	; (8017618 <problem_fetch+0x15f30>)
 8017524:	6810      	ldr	r0, [r2, #0]
 8017526:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2207      	movs	r2, #7
 801752c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,E,B,C,A,A");
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	33a4      	adds	r3, #164	; 0xa4
 8017532:	4a4c      	ldr	r2, [pc, #304]	; (8017664 <problem_fetch+0x15f7c>)
 8017534:	461c      	mov	r4, r3
 8017536:	4613      	mov	r3, r2
 8017538:	cb07      	ldmia	r3!, {r0, r1, r2}
 801753a:	6020      	str	r0, [r4, #0]
 801753c:	6061      	str	r1, [r4, #4]
 801753e:	60a2      	str	r2, [r4, #8]
 8017540:	881b      	ldrh	r3, [r3, #0]
 8017542:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,14,18");
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	3304      	adds	r3, #4
 8017548:	4a47      	ldr	r2, [pc, #284]	; (8017668 <problem_fetch+0x15f80>)
 801754a:	461d      	mov	r5, r3
 801754c:	4614      	mov	r4, r2
 801754e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017550:	6028      	str	r0, [r5, #0]
 8017552:	6069      	str	r1, [r5, #4]
 8017554:	60aa      	str	r2, [r5, #8]
 8017556:	60eb      	str	r3, [r5, #12]
 8017558:	8823      	ldrh	r3, [r4, #0]
 801755a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017562:	4a42      	ldr	r2, [pc, #264]	; (801766c <problem_fetch+0x15f84>)
 8017564:	461c      	mov	r4, r3
 8017566:	4613      	mov	r3, r2
 8017568:	cb07      	ldmia	r3!, {r0, r1, r2}
 801756a:	6020      	str	r0, [r4, #0]
 801756c:	6061      	str	r1, [r4, #4]
 801756e:	60a2      	str	r2, [r4, #8]
 8017570:	881b      	ldrh	r3, [r3, #0]
 8017572:	81a3      	strh	r3, [r4, #12]
			break;
 8017574:	f004 bfe8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 652 :
			strcpy(p->name,"ENDUROV6");
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801757e:	493c      	ldr	r1, [pc, #240]	; (8017670 <problem_fetch+0x15f88>)
 8017580:	461a      	mov	r2, r3
 8017582:	460b      	mov	r3, r1
 8017584:	cb03      	ldmia	r3!, {r0, r1}
 8017586:	6010      	str	r0, [r2, #0]
 8017588:	6051      	str	r1, [r2, #4]
 801758a:	781b      	ldrb	r3, [r3, #0]
 801758c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017594:	4a25      	ldr	r2, [pc, #148]	; (801762c <problem_fetch+0x15f44>)
 8017596:	8811      	ldrh	r1, [r2, #0]
 8017598:	7892      	ldrb	r2, [r2, #2]
 801759a:	8019      	strh	r1, [r3, #0]
 801759c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 13;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	220d      	movs	r2, #13
 80175a2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,H,G,F,A,D,E,G,C,B,E,I");
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	33a4      	adds	r3, #164	; 0xa4
 80175a8:	4a32      	ldr	r2, [pc, #200]	; (8017674 <problem_fetch+0x15f8c>)
 80175aa:	461d      	mov	r5, r3
 80175ac:	4614      	mov	r4, r2
 80175ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175b0:	6028      	str	r0, [r5, #0]
 80175b2:	6069      	str	r1, [r5, #4]
 80175b4:	60aa      	str	r2, [r5, #8]
 80175b6:	60eb      	str	r3, [r5, #12]
 80175b8:	cc03      	ldmia	r4!, {r0, r1}
 80175ba:	6128      	str	r0, [r5, #16]
 80175bc:	6169      	str	r1, [r5, #20]
 80175be:	8823      	ldrh	r3, [r4, #0]
 80175c0:	832b      	strh	r3, [r5, #24]
			strcpy(p->moveNumbers,"5,7,8,9,11,14,15,16,17,5,10,8,18");
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	3304      	adds	r3, #4
 80175c6:	4a2c      	ldr	r2, [pc, #176]	; (8017678 <problem_fetch+0x15f90>)
 80175c8:	4614      	mov	r4, r2
 80175ca:	469c      	mov	ip, r3
 80175cc:	f104 0e20 	add.w	lr, r4, #32
 80175d0:	4665      	mov	r5, ip
 80175d2:	4626      	mov	r6, r4
 80175d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80175d6:	6028      	str	r0, [r5, #0]
 80175d8:	6069      	str	r1, [r5, #4]
 80175da:	60aa      	str	r2, [r5, #8]
 80175dc:	60eb      	str	r3, [r5, #12]
 80175de:	3410      	adds	r4, #16
 80175e0:	f10c 0c10 	add.w	ip, ip, #16
 80175e4:	4574      	cmp	r4, lr
 80175e6:	d1f3      	bne.n	80175d0 <problem_fetch+0x15ee8>
 80175e8:	4663      	mov	r3, ip
 80175ea:	4622      	mov	r2, r4
 80175ec:	7812      	ldrb	r2, [r2, #0]
 80175ee:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,d,d,e");
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80175f6:	4a21      	ldr	r2, [pc, #132]	; (801767c <problem_fetch+0x15f94>)
 80175f8:	461d      	mov	r5, r3
 80175fa:	4614      	mov	r4, r2
 80175fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80175fe:	6028      	str	r0, [r5, #0]
 8017600:	6069      	str	r1, [r5, #4]
 8017602:	60aa      	str	r2, [r5, #8]
 8017604:	60eb      	str	r3, [r5, #12]
 8017606:	cc03      	ldmia	r4!, {r0, r1}
 8017608:	6128      	str	r0, [r5, #16]
 801760a:	6169      	str	r1, [r5, #20]
 801760c:	8823      	ldrh	r3, [r4, #0]
 801760e:	832b      	strh	r3, [r5, #24]
			break;
 8017610:	f004 bf9a 	b.w	801c548 <problem_fetch+0x1ae60>
 8017614:	0802b3b0 	.word	0x0802b3b0
 8017618:	0802395c 	.word	0x0802395c
 801761c:	0802b3c4 	.word	0x0802b3c4
 8017620:	0802b3d0 	.word	0x0802b3d0
 8017624:	08023e28 	.word	0x08023e28
 8017628:	0802b3e0 	.word	0x0802b3e0
 801762c:	0802391c 	.word	0x0802391c
 8017630:	0802b3ec 	.word	0x0802b3ec
 8017634:	08024e6c 	.word	0x08024e6c
 8017638:	08023ab0 	.word	0x08023ab0
 801763c:	0802b3f4 	.word	0x0802b3f4
 8017640:	08023afc 	.word	0x08023afc
 8017644:	0802b3f8 	.word	0x0802b3f8
 8017648:	0802ab38 	.word	0x0802ab38
 801764c:	08023cf8 	.word	0x08023cf8
 8017650:	0802b404 	.word	0x0802b404
 8017654:	08023a98 	.word	0x08023a98
 8017658:	0802b40c 	.word	0x0802b40c
 801765c:	0802b418 	.word	0x0802b418
 8017660:	0802b428 	.word	0x0802b428
 8017664:	0802b438 	.word	0x0802b438
 8017668:	0802b448 	.word	0x0802b448
 801766c:	080239d4 	.word	0x080239d4
 8017670:	0802b45c 	.word	0x0802b45c
 8017674:	0802b468 	.word	0x0802b468
 8017678:	0802b484 	.word	0x0802b484
 801767c:	0802b4a8 	.word	0x0802b4a8
		case 653 :
			strcpy(p->name,"OLDENBOAD4");
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017686:	49aa      	ldr	r1, [pc, #680]	; (8017930 <problem_fetch+0x16248>)
 8017688:	461a      	mov	r2, r3
 801768a:	460b      	mov	r3, r1
 801768c:	cb03      	ldmia	r3!, {r0, r1}
 801768e:	6010      	str	r0, [r2, #0]
 8017690:	6051      	str	r1, [r2, #4]
 8017692:	8819      	ldrh	r1, [r3, #0]
 8017694:	789b      	ldrb	r3, [r3, #2]
 8017696:	8111      	strh	r1, [r2, #8]
 8017698:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C+");
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80176a0:	4aa4      	ldr	r2, [pc, #656]	; (8017934 <problem_fetch+0x1624c>)
 80176a2:	6810      	ldr	r0, [r2, #0]
 80176a4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2207      	movs	r2, #7
 80176aa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,F,C,E,H,D");
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	33a4      	adds	r3, #164	; 0xa4
 80176b0:	4aa1      	ldr	r2, [pc, #644]	; (8017938 <problem_fetch+0x16250>)
 80176b2:	461c      	mov	r4, r3
 80176b4:	4613      	mov	r3, r2
 80176b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176b8:	6020      	str	r0, [r4, #0]
 80176ba:	6061      	str	r1, [r4, #4]
 80176bc:	60a2      	str	r2, [r4, #8]
 80176be:	881b      	ldrh	r3, [r3, #0]
 80176c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,11,13,16,10,18");
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	3304      	adds	r3, #4
 80176c6:	4a9d      	ldr	r2, [pc, #628]	; (801793c <problem_fetch+0x16254>)
 80176c8:	461d      	mov	r5, r3
 80176ca:	4614      	mov	r4, r2
 80176cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80176ce:	6028      	str	r0, [r5, #0]
 80176d0:	6069      	str	r1, [r5, #4]
 80176d2:	60aa      	str	r2, [r5, #8]
 80176d4:	60eb      	str	r3, [r5, #12]
 80176d6:	8823      	ldrh	r3, [r4, #0]
 80176d8:	78a2      	ldrb	r2, [r4, #2]
 80176da:	822b      	strh	r3, [r5, #16]
 80176dc:	4613      	mov	r3, r2
 80176de:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80176e6:	4a96      	ldr	r2, [pc, #600]	; (8017940 <problem_fetch+0x16258>)
 80176e8:	461c      	mov	r4, r3
 80176ea:	4613      	mov	r3, r2
 80176ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80176ee:	6020      	str	r0, [r4, #0]
 80176f0:	6061      	str	r1, [r4, #4]
 80176f2:	60a2      	str	r2, [r4, #8]
 80176f4:	881b      	ldrh	r3, [r3, #0]
 80176f6:	81a3      	strh	r3, [r4, #12]
			break;
 80176f8:	f004 bf26 	b.w	801c548 <problem_fetch+0x1ae60>
		case 654 :
			strcpy(p->name,"TB SAGA");
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017702:	4990      	ldr	r1, [pc, #576]	; (8017944 <problem_fetch+0x1625c>)
 8017704:	461a      	mov	r2, r3
 8017706:	460b      	mov	r3, r1
 8017708:	cb03      	ldmia	r3!, {r0, r1}
 801770a:	6010      	str	r0, [r2, #0]
 801770c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C");
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017714:	4a8c      	ldr	r2, [pc, #560]	; (8017948 <problem_fetch+0x16260>)
 8017716:	8811      	ldrh	r1, [r2, #0]
 8017718:	7892      	ldrb	r2, [r2, #2]
 801771a:	8019      	strh	r1, [r3, #0]
 801771c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2207      	movs	r2, #7
 8017722:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,J,G,H,D");
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	33a4      	adds	r3, #164	; 0xa4
 8017728:	4a88      	ldr	r2, [pc, #544]	; (801794c <problem_fetch+0x16264>)
 801772a:	461c      	mov	r4, r3
 801772c:	4613      	mov	r3, r2
 801772e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017730:	6020      	str	r0, [r4, #0]
 8017732:	6061      	str	r1, [r4, #4]
 8017734:	60a2      	str	r2, [r4, #8]
 8017736:	881b      	ldrh	r3, [r3, #0]
 8017738:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,16,18");
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	3304      	adds	r3, #4
 801773e:	4a84      	ldr	r2, [pc, #528]	; (8017950 <problem_fetch+0x16268>)
 8017740:	461d      	mov	r5, r3
 8017742:	4614      	mov	r4, r2
 8017744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017746:	6028      	str	r0, [r5, #0]
 8017748:	6069      	str	r1, [r5, #4]
 801774a:	60aa      	str	r2, [r5, #8]
 801774c:	60eb      	str	r3, [r5, #12]
 801774e:	8823      	ldrh	r3, [r4, #0]
 8017750:	78a2      	ldrb	r2, [r4, #2]
 8017752:	822b      	strh	r3, [r5, #16]
 8017754:	4613      	mov	r3, r2
 8017756:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801775e:	4a7d      	ldr	r2, [pc, #500]	; (8017954 <problem_fetch+0x1626c>)
 8017760:	461c      	mov	r4, r3
 8017762:	4613      	mov	r3, r2
 8017764:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017766:	6020      	str	r0, [r4, #0]
 8017768:	6061      	str	r1, [r4, #4]
 801776a:	60a2      	str	r2, [r4, #8]
 801776c:	881b      	ldrh	r3, [r3, #0]
 801776e:	81a3      	strh	r3, [r4, #12]
			break;
 8017770:	f004 beea 	b.w	801c548 <problem_fetch+0x1ae60>
		case 655 :
			strcpy(p->name,"THE WING");
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801777a:	4977      	ldr	r1, [pc, #476]	; (8017958 <problem_fetch+0x16270>)
 801777c:	461a      	mov	r2, r3
 801777e:	460b      	mov	r3, r1
 8017780:	cb03      	ldmia	r3!, {r0, r1}
 8017782:	6010      	str	r0, [r2, #0]
 8017784:	6051      	str	r1, [r2, #4]
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017790:	4a6d      	ldr	r2, [pc, #436]	; (8017948 <problem_fetch+0x16260>)
 8017792:	8811      	ldrh	r1, [r2, #0]
 8017794:	7892      	ldrb	r2, [r2, #2]
 8017796:	8019      	strh	r1, [r3, #0]
 8017798:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2207      	movs	r2, #7
 801779e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,C,F,D,D,D");
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	33a4      	adds	r3, #164	; 0xa4
 80177a4:	4a6d      	ldr	r2, [pc, #436]	; (801795c <problem_fetch+0x16274>)
 80177a6:	461c      	mov	r4, r3
 80177a8:	4613      	mov	r3, r2
 80177aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177ac:	6020      	str	r0, [r4, #0]
 80177ae:	6061      	str	r1, [r4, #4]
 80177b0:	60a2      	str	r2, [r4, #8]
 80177b2:	881b      	ldrh	r3, [r3, #0]
 80177b4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,11,11,15,18");
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	3304      	adds	r3, #4
 80177ba:	4a69      	ldr	r2, [pc, #420]	; (8017960 <problem_fetch+0x16278>)
 80177bc:	461d      	mov	r5, r3
 80177be:	4614      	mov	r4, r2
 80177c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177c2:	6028      	str	r0, [r5, #0]
 80177c4:	6069      	str	r1, [r5, #4]
 80177c6:	60aa      	str	r2, [r5, #8]
 80177c8:	60eb      	str	r3, [r5, #12]
 80177ca:	8823      	ldrh	r3, [r4, #0]
 80177cc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80177d4:	4a5a      	ldr	r2, [pc, #360]	; (8017940 <problem_fetch+0x16258>)
 80177d6:	461c      	mov	r4, r3
 80177d8:	4613      	mov	r3, r2
 80177da:	cb07      	ldmia	r3!, {r0, r1, r2}
 80177dc:	6020      	str	r0, [r4, #0]
 80177de:	6061      	str	r1, [r4, #4]
 80177e0:	60a2      	str	r2, [r4, #8]
 80177e2:	881b      	ldrh	r3, [r3, #0]
 80177e4:	81a3      	strh	r3, [r4, #12]
			break;
 80177e6:	f004 beaf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 656 :
			strcpy(p->name,"HER COMES THE QUEEN");
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80177f0:	4a5c      	ldr	r2, [pc, #368]	; (8017964 <problem_fetch+0x1627c>)
 80177f2:	461d      	mov	r5, r3
 80177f4:	4614      	mov	r4, r2
 80177f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80177f8:	6028      	str	r0, [r5, #0]
 80177fa:	6069      	str	r1, [r5, #4]
 80177fc:	60aa      	str	r2, [r5, #8]
 80177fe:	60eb      	str	r3, [r5, #12]
 8017800:	6820      	ldr	r0, [r4, #0]
 8017802:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"6C+");
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801780a:	4a4a      	ldr	r2, [pc, #296]	; (8017934 <problem_fetch+0x1624c>)
 801780c:	6810      	ldr	r0, [r2, #0]
 801780e:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	2205      	movs	r2, #5
 8017814:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,A,D");
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	33a4      	adds	r3, #164	; 0xa4
 801781a:	4953      	ldr	r1, [pc, #332]	; (8017968 <problem_fetch+0x16280>)
 801781c:	461a      	mov	r2, r3
 801781e:	460b      	mov	r3, r1
 8017820:	cb03      	ldmia	r3!, {r0, r1}
 8017822:	6010      	str	r0, [r2, #0]
 8017824:	6051      	str	r1, [r2, #4]
 8017826:	881b      	ldrh	r3, [r3, #0]
 8017828:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,11,14,18");
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3304      	adds	r3, #4
 801782e:	4a4f      	ldr	r2, [pc, #316]	; (801796c <problem_fetch+0x16284>)
 8017830:	461c      	mov	r4, r3
 8017832:	4613      	mov	r3, r2
 8017834:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017836:	6020      	str	r0, [r4, #0]
 8017838:	6061      	str	r1, [r4, #4]
 801783a:	60a2      	str	r2, [r4, #8]
 801783c:	781b      	ldrb	r3, [r3, #0]
 801783e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017846:	494a      	ldr	r1, [pc, #296]	; (8017970 <problem_fetch+0x16288>)
 8017848:	461a      	mov	r2, r3
 801784a:	460b      	mov	r3, r1
 801784c:	cb03      	ldmia	r3!, {r0, r1}
 801784e:	6010      	str	r0, [r2, #0]
 8017850:	6051      	str	r1, [r2, #4]
 8017852:	881b      	ldrh	r3, [r3, #0]
 8017854:	8113      	strh	r3, [r2, #8]
			break;
 8017856:	f004 be77 	b.w	801c548 <problem_fetch+0x1ae60>
		case 657 :
			strcpy(p->name,"EASY PINCH");
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017860:	4944      	ldr	r1, [pc, #272]	; (8017974 <problem_fetch+0x1628c>)
 8017862:	461a      	mov	r2, r3
 8017864:	460b      	mov	r3, r1
 8017866:	cb03      	ldmia	r3!, {r0, r1}
 8017868:	6010      	str	r0, [r2, #0]
 801786a:	6051      	str	r1, [r2, #4]
 801786c:	8819      	ldrh	r1, [r3, #0]
 801786e:	789b      	ldrb	r3, [r3, #2]
 8017870:	8111      	strh	r1, [r2, #8]
 8017872:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801787a:	4a3f      	ldr	r2, [pc, #252]	; (8017978 <problem_fetch+0x16290>)
 801787c:	6810      	ldr	r0, [r2, #0]
 801787e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	2206      	movs	r2, #6
 8017884:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,G,F,E,I");
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	33a4      	adds	r3, #164	; 0xa4
 801788a:	4a3c      	ldr	r2, [pc, #240]	; (801797c <problem_fetch+0x16294>)
 801788c:	461c      	mov	r4, r3
 801788e:	4613      	mov	r3, r2
 8017890:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017892:	6020      	str	r0, [r4, #0]
 8017894:	6061      	str	r1, [r4, #4]
 8017896:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,14,18");
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	3304      	adds	r3, #4
 801789c:	4a38      	ldr	r2, [pc, #224]	; (8017980 <problem_fetch+0x16298>)
 801789e:	461c      	mov	r4, r3
 80178a0:	4615      	mov	r5, r2
 80178a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80178a4:	6020      	str	r0, [r4, #0]
 80178a6:	6061      	str	r1, [r4, #4]
 80178a8:	60a2      	str	r2, [r4, #8]
 80178aa:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80178b2:	4a34      	ldr	r2, [pc, #208]	; (8017984 <problem_fetch+0x1629c>)
 80178b4:	461c      	mov	r4, r3
 80178b6:	4613      	mov	r3, r2
 80178b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178ba:	6020      	str	r0, [r4, #0]
 80178bc:	6061      	str	r1, [r4, #4]
 80178be:	60a2      	str	r2, [r4, #8]
			break;
 80178c0:	f004 be42 	b.w	801c548 <problem_fetch+0x1ae60>
		case 658 :
			strcpy(p->name,"TIRARONCHIE");
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80178ca:	4a2f      	ldr	r2, [pc, #188]	; (8017988 <problem_fetch+0x162a0>)
 80178cc:	461c      	mov	r4, r3
 80178ce:	4613      	mov	r3, r2
 80178d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178d2:	6020      	str	r0, [r4, #0]
 80178d4:	6061      	str	r1, [r4, #4]
 80178d6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80178de:	4a26      	ldr	r2, [pc, #152]	; (8017978 <problem_fetch+0x16290>)
 80178e0:	6810      	ldr	r0, [r2, #0]
 80178e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	2206      	movs	r2, #6
 80178e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,H,H,D");
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	33a4      	adds	r3, #164	; 0xa4
 80178ee:	4a27      	ldr	r2, [pc, #156]	; (801798c <problem_fetch+0x162a4>)
 80178f0:	461c      	mov	r4, r3
 80178f2:	4613      	mov	r3, r2
 80178f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80178f6:	6020      	str	r0, [r4, #0]
 80178f8:	6061      	str	r1, [r4, #4]
 80178fa:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,9,12,16,18");
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	3304      	adds	r3, #4
 8017900:	4a23      	ldr	r2, [pc, #140]	; (8017990 <problem_fetch+0x162a8>)
 8017902:	461c      	mov	r4, r3
 8017904:	4613      	mov	r3, r2
 8017906:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017908:	6020      	str	r0, [r4, #0]
 801790a:	6061      	str	r1, [r4, #4]
 801790c:	60a2      	str	r2, [r4, #8]
 801790e:	881a      	ldrh	r2, [r3, #0]
 8017910:	789b      	ldrb	r3, [r3, #2]
 8017912:	81a2      	strh	r2, [r4, #12]
 8017914:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801791c:	4a1d      	ldr	r2, [pc, #116]	; (8017994 <problem_fetch+0x162ac>)
 801791e:	461c      	mov	r4, r3
 8017920:	4613      	mov	r3, r2
 8017922:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017924:	6020      	str	r0, [r4, #0]
 8017926:	6061      	str	r1, [r4, #4]
 8017928:	60a2      	str	r2, [r4, #8]
			break;
 801792a:	f004 be0d 	b.w	801c548 <problem_fetch+0x1ae60>
 801792e:	bf00      	nop
 8017930:	0802b4c4 	.word	0x0802b4c4
 8017934:	080239f4 	.word	0x080239f4
 8017938:	0802b4d0 	.word	0x0802b4d0
 801793c:	0802b4e0 	.word	0x0802b4e0
 8017940:	080239d4 	.word	0x080239d4
 8017944:	0802b4f4 	.word	0x0802b4f4
 8017948:	08023a28 	.word	0x08023a28
 801794c:	0802b4fc 	.word	0x0802b4fc
 8017950:	0802b50c 	.word	0x0802b50c
 8017954:	08023ae4 	.word	0x08023ae4
 8017958:	0802b520 	.word	0x0802b520
 801795c:	0802b52c 	.word	0x0802b52c
 8017960:	0802b53c 	.word	0x0802b53c
 8017964:	0802b550 	.word	0x0802b550
 8017968:	0802b564 	.word	0x0802b564
 801796c:	08025090 	.word	0x08025090
 8017970:	08023e28 	.word	0x08023e28
 8017974:	0802b570 	.word	0x0802b570
 8017978:	08023afc 	.word	0x08023afc
 801797c:	0802b57c 	.word	0x0802b57c
 8017980:	0802b588 	.word	0x0802b588
 8017984:	08023cf8 	.word	0x08023cf8
 8017988:	0802b598 	.word	0x0802b598
 801798c:	08028874 	.word	0x08028874
 8017990:	0802b5a4 	.word	0x0802b5a4
 8017994:	0802393c 	.word	0x0802393c
		case 659 :
			strcpy(p->name,"THE REAL DEAL");
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801799e:	4ab1      	ldr	r2, [pc, #708]	; (8017c64 <problem_fetch+0x1657c>)
 80179a0:	461c      	mov	r4, r3
 80179a2:	4613      	mov	r3, r2
 80179a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80179a6:	6020      	str	r0, [r4, #0]
 80179a8:	6061      	str	r1, [r4, #4]
 80179aa:	60a2      	str	r2, [r4, #8]
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"8A");
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80179b6:	4aac      	ldr	r2, [pc, #688]	; (8017c68 <problem_fetch+0x16580>)
 80179b8:	8811      	ldrh	r1, [r2, #0]
 80179ba:	7892      	ldrb	r2, [r2, #2]
 80179bc:	8019      	strh	r1, [r3, #0]
 80179be:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2208      	movs	r2, #8
 80179c4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,I,H,I,E,B,A");
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	33a4      	adds	r3, #164	; 0xa4
 80179ca:	4aa8      	ldr	r2, [pc, #672]	; (8017c6c <problem_fetch+0x16584>)
 80179cc:	461c      	mov	r4, r3
 80179ce:	4615      	mov	r5, r2
 80179d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179d2:	6020      	str	r0, [r4, #0]
 80179d4:	6061      	str	r1, [r4, #4]
 80179d6:	60a2      	str	r2, [r4, #8]
 80179d8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,7,12,15,14,12,18");
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	3304      	adds	r3, #4
 80179de:	4aa4      	ldr	r2, [pc, #656]	; (8017c70 <problem_fetch+0x16588>)
 80179e0:	461d      	mov	r5, r3
 80179e2:	4614      	mov	r4, r2
 80179e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179e6:	6028      	str	r0, [r5, #0]
 80179e8:	6069      	str	r1, [r5, #4]
 80179ea:	60aa      	str	r2, [r5, #8]
 80179ec:	60eb      	str	r3, [r5, #12]
 80179ee:	6820      	ldr	r0, [r4, #0]
 80179f0:	6128      	str	r0, [r5, #16]
 80179f2:	7923      	ldrb	r3, [r4, #4]
 80179f4:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80179fc:	4a9d      	ldr	r2, [pc, #628]	; (8017c74 <problem_fetch+0x1658c>)
 80179fe:	461c      	mov	r4, r3
 8017a00:	4615      	mov	r5, r2
 8017a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a04:	6020      	str	r0, [r4, #0]
 8017a06:	6061      	str	r1, [r4, #4]
 8017a08:	60a2      	str	r2, [r4, #8]
 8017a0a:	60e3      	str	r3, [r4, #12]
			break;
 8017a0c:	f004 bd9c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 660 :
			strcpy(p->name,"AF CHRISTMAS TUBERCULOSIS");
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a16:	4a98      	ldr	r2, [pc, #608]	; (8017c78 <problem_fetch+0x16590>)
 8017a18:	461d      	mov	r5, r3
 8017a1a:	4614      	mov	r4, r2
 8017a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a1e:	6028      	str	r0, [r5, #0]
 8017a20:	6069      	str	r1, [r5, #4]
 8017a22:	60aa      	str	r2, [r5, #8]
 8017a24:	60eb      	str	r3, [r5, #12]
 8017a26:	cc03      	ldmia	r4!, {r0, r1}
 8017a28:	6128      	str	r0, [r5, #16]
 8017a2a:	6169      	str	r1, [r5, #20]
 8017a2c:	8823      	ldrh	r3, [r4, #0]
 8017a2e:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6C+");
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017a36:	4a91      	ldr	r2, [pc, #580]	; (8017c7c <problem_fetch+0x16594>)
 8017a38:	6810      	ldr	r0, [r2, #0]
 8017a3a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2207      	movs	r2, #7
 8017a40:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,I,I,I");
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	33a4      	adds	r3, #164	; 0xa4
 8017a46:	4a8e      	ldr	r2, [pc, #568]	; (8017c80 <problem_fetch+0x16598>)
 8017a48:	461c      	mov	r4, r3
 8017a4a:	4613      	mov	r3, r2
 8017a4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a4e:	6020      	str	r0, [r4, #0]
 8017a50:	6061      	str	r1, [r4, #4]
 8017a52:	60a2      	str	r2, [r4, #8]
 8017a54:	881b      	ldrh	r3, [r3, #0]
 8017a56:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,7,10,11,14,15,18");
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	3304      	adds	r3, #4
 8017a5c:	4a89      	ldr	r2, [pc, #548]	; (8017c84 <problem_fetch+0x1659c>)
 8017a5e:	461d      	mov	r5, r3
 8017a60:	4614      	mov	r4, r2
 8017a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017a64:	6028      	str	r0, [r5, #0]
 8017a66:	6069      	str	r1, [r5, #4]
 8017a68:	60aa      	str	r2, [r5, #8]
 8017a6a:	60eb      	str	r3, [r5, #12]
 8017a6c:	8823      	ldrh	r3, [r4, #0]
 8017a6e:	78a2      	ldrb	r2, [r4, #2]
 8017a70:	822b      	strh	r3, [r5, #16]
 8017a72:	4613      	mov	r3, r2
 8017a74:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017a7c:	4a82      	ldr	r2, [pc, #520]	; (8017c88 <problem_fetch+0x165a0>)
 8017a7e:	461c      	mov	r4, r3
 8017a80:	4613      	mov	r3, r2
 8017a82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017a84:	6020      	str	r0, [r4, #0]
 8017a86:	6061      	str	r1, [r4, #4]
 8017a88:	60a2      	str	r2, [r4, #8]
 8017a8a:	881b      	ldrh	r3, [r3, #0]
 8017a8c:	81a3      	strh	r3, [r4, #12]
			break;
 8017a8e:	f004 bd5b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 661 :
			strcpy(p->name,"AF EASY FOUR");
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017a98:	4a7c      	ldr	r2, [pc, #496]	; (8017c8c <problem_fetch+0x165a4>)
 8017a9a:	461c      	mov	r4, r3
 8017a9c:	4613      	mov	r3, r2
 8017a9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017aa0:	6020      	str	r0, [r4, #0]
 8017aa2:	6061      	str	r1, [r4, #4]
 8017aa4:	60a2      	str	r2, [r4, #8]
 8017aa6:	781b      	ldrb	r3, [r3, #0]
 8017aa8:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ab0:	4a77      	ldr	r2, [pc, #476]	; (8017c90 <problem_fetch+0x165a8>)
 8017ab2:	6810      	ldr	r0, [r2, #0]
 8017ab4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	2208      	movs	r2, #8
 8017aba:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,F,I,G,I");
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	33a4      	adds	r3, #164	; 0xa4
 8017ac0:	4a74      	ldr	r2, [pc, #464]	; (8017c94 <problem_fetch+0x165ac>)
 8017ac2:	461c      	mov	r4, r3
 8017ac4:	4615      	mov	r5, r2
 8017ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ac8:	6020      	str	r0, [r4, #0]
 8017aca:	6061      	str	r1, [r4, #4]
 8017acc:	60a2      	str	r2, [r4, #8]
 8017ace:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,13,14,15,18");
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	3304      	adds	r3, #4
 8017ad4:	4a70      	ldr	r2, [pc, #448]	; (8017c98 <problem_fetch+0x165b0>)
 8017ad6:	461d      	mov	r5, r3
 8017ad8:	4614      	mov	r4, r2
 8017ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017adc:	6028      	str	r0, [r5, #0]
 8017ade:	6069      	str	r1, [r5, #4]
 8017ae0:	60aa      	str	r2, [r5, #8]
 8017ae2:	60eb      	str	r3, [r5, #12]
 8017ae4:	6820      	ldr	r0, [r4, #0]
 8017ae6:	6128      	str	r0, [r5, #16]
 8017ae8:	7923      	ldrb	r3, [r4, #4]
 8017aea:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017af2:	4a60      	ldr	r2, [pc, #384]	; (8017c74 <problem_fetch+0x1658c>)
 8017af4:	461c      	mov	r4, r3
 8017af6:	4615      	mov	r5, r2
 8017af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017afa:	6020      	str	r0, [r4, #0]
 8017afc:	6061      	str	r1, [r4, #4]
 8017afe:	60a2      	str	r2, [r4, #8]
 8017b00:	60e3      	str	r3, [r4, #12]
			break;
 8017b02:	f004 bd21 	b.w	801c548 <problem_fetch+0x1ae60>
		case 662 :
			strcpy(p->name,"AF EASY ONE");
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b0c:	4a63      	ldr	r2, [pc, #396]	; (8017c9c <problem_fetch+0x165b4>)
 8017b0e:	461c      	mov	r4, r3
 8017b10:	4613      	mov	r3, r2
 8017b12:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b14:	6020      	str	r0, [r4, #0]
 8017b16:	6061      	str	r1, [r4, #4]
 8017b18:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b20:	4a5b      	ldr	r2, [pc, #364]	; (8017c90 <problem_fetch+0x165a8>)
 8017b22:	6810      	ldr	r0, [r2, #0]
 8017b24:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	2208      	movs	r2, #8
 8017b2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,J,K,H,J,G,K,I");
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	33a4      	adds	r3, #164	; 0xa4
 8017b30:	4a5b      	ldr	r2, [pc, #364]	; (8017ca0 <problem_fetch+0x165b8>)
 8017b32:	461c      	mov	r4, r3
 8017b34:	4615      	mov	r5, r2
 8017b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b38:	6020      	str	r0, [r4, #0]
 8017b3a:	6061      	str	r1, [r4, #4]
 8017b3c:	60a2      	str	r2, [r4, #8]
 8017b3e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,10,12,14,16,18");
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	3304      	adds	r3, #4
 8017b44:	4a57      	ldr	r2, [pc, #348]	; (8017ca4 <problem_fetch+0x165bc>)
 8017b46:	461d      	mov	r5, r3
 8017b48:	4614      	mov	r4, r2
 8017b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b4c:	6028      	str	r0, [r5, #0]
 8017b4e:	6069      	str	r1, [r5, #4]
 8017b50:	60aa      	str	r2, [r5, #8]
 8017b52:	60eb      	str	r3, [r5, #12]
 8017b54:	6820      	ldr	r0, [r4, #0]
 8017b56:	6128      	str	r0, [r5, #16]
 8017b58:	7923      	ldrb	r3, [r4, #4]
 8017b5a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017b62:	4a44      	ldr	r2, [pc, #272]	; (8017c74 <problem_fetch+0x1658c>)
 8017b64:	461c      	mov	r4, r3
 8017b66:	4615      	mov	r5, r2
 8017b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b6a:	6020      	str	r0, [r4, #0]
 8017b6c:	6061      	str	r1, [r4, #4]
 8017b6e:	60a2      	str	r2, [r4, #8]
 8017b70:	60e3      	str	r3, [r4, #12]
			break;
 8017b72:	f004 bce9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 663 :
			strcpy(p->name,"HOLD THE SWING");
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017b7c:	4a4a      	ldr	r2, [pc, #296]	; (8017ca8 <problem_fetch+0x165c0>)
 8017b7e:	461c      	mov	r4, r3
 8017b80:	4613      	mov	r3, r2
 8017b82:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017b84:	6020      	str	r0, [r4, #0]
 8017b86:	6061      	str	r1, [r4, #4]
 8017b88:	60a2      	str	r2, [r4, #8]
 8017b8a:	881a      	ldrh	r2, [r3, #0]
 8017b8c:	789b      	ldrb	r3, [r3, #2]
 8017b8e:	81a2      	strh	r2, [r4, #12]
 8017b90:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017b98:	4a44      	ldr	r2, [pc, #272]	; (8017cac <problem_fetch+0x165c4>)
 8017b9a:	8811      	ldrh	r1, [r2, #0]
 8017b9c:	7892      	ldrb	r2, [r2, #2]
 8017b9e:	8019      	strh	r1, [r3, #0]
 8017ba0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2207      	movs	r2, #7
 8017ba6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,G,E,I,E,I");
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	33a4      	adds	r3, #164	; 0xa4
 8017bac:	4a40      	ldr	r2, [pc, #256]	; (8017cb0 <problem_fetch+0x165c8>)
 8017bae:	461c      	mov	r4, r3
 8017bb0:	4613      	mov	r3, r2
 8017bb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017bb4:	6020      	str	r0, [r4, #0]
 8017bb6:	6061      	str	r1, [r4, #4]
 8017bb8:	60a2      	str	r2, [r4, #8]
 8017bba:	881b      	ldrh	r3, [r3, #0]
 8017bbc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,14,18");
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	3304      	adds	r3, #4
 8017bc2:	4a3c      	ldr	r2, [pc, #240]	; (8017cb4 <problem_fetch+0x165cc>)
 8017bc4:	461d      	mov	r5, r3
 8017bc6:	4614      	mov	r4, r2
 8017bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bca:	6028      	str	r0, [r5, #0]
 8017bcc:	6069      	str	r1, [r5, #4]
 8017bce:	60aa      	str	r2, [r5, #8]
 8017bd0:	60eb      	str	r3, [r5, #12]
 8017bd2:	8823      	ldrh	r3, [r4, #0]
 8017bd4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017bdc:	4a36      	ldr	r2, [pc, #216]	; (8017cb8 <problem_fetch+0x165d0>)
 8017bde:	461c      	mov	r4, r3
 8017be0:	4613      	mov	r3, r2
 8017be2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017be4:	6020      	str	r0, [r4, #0]
 8017be6:	6061      	str	r1, [r4, #4]
 8017be8:	60a2      	str	r2, [r4, #8]
 8017bea:	881b      	ldrh	r3, [r3, #0]
 8017bec:	81a3      	strh	r3, [r4, #12]
			break;
 8017bee:	f004 bcab 	b.w	801c548 <problem_fetch+0x1ae60>
		case 664 :
			strcpy(p->name,"DIAGONALE");
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017bf8:	4930      	ldr	r1, [pc, #192]	; (8017cbc <problem_fetch+0x165d4>)
 8017bfa:	461a      	mov	r2, r3
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	cb03      	ldmia	r3!, {r0, r1}
 8017c00:	6010      	str	r0, [r2, #0]
 8017c02:	6051      	str	r1, [r2, #4]
 8017c04:	881b      	ldrh	r3, [r3, #0]
 8017c06:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017c0e:	4a2c      	ldr	r2, [pc, #176]	; (8017cc0 <problem_fetch+0x165d8>)
 8017c10:	8811      	ldrh	r1, [r2, #0]
 8017c12:	7892      	ldrb	r2, [r2, #2]
 8017c14:	8019      	strh	r1, [r3, #0]
 8017c16:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2205      	movs	r2, #5
 8017c1c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,F,D,A");
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	33a4      	adds	r3, #164	; 0xa4
 8017c22:	4928      	ldr	r1, [pc, #160]	; (8017cc4 <problem_fetch+0x165dc>)
 8017c24:	461a      	mov	r2, r3
 8017c26:	460b      	mov	r3, r1
 8017c28:	cb03      	ldmia	r3!, {r0, r1}
 8017c2a:	6010      	str	r0, [r2, #0]
 8017c2c:	6051      	str	r1, [r2, #4]
 8017c2e:	881b      	ldrh	r3, [r3, #0]
 8017c30:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,11,15,18");
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	3304      	adds	r3, #4
 8017c36:	4a24      	ldr	r2, [pc, #144]	; (8017cc8 <problem_fetch+0x165e0>)
 8017c38:	461c      	mov	r4, r3
 8017c3a:	4613      	mov	r3, r2
 8017c3c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017c3e:	6020      	str	r0, [r4, #0]
 8017c40:	6061      	str	r1, [r4, #4]
 8017c42:	60a2      	str	r2, [r4, #8]
 8017c44:	781b      	ldrb	r3, [r3, #0]
 8017c46:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017c4e:	491f      	ldr	r1, [pc, #124]	; (8017ccc <problem_fetch+0x165e4>)
 8017c50:	461a      	mov	r2, r3
 8017c52:	460b      	mov	r3, r1
 8017c54:	cb03      	ldmia	r3!, {r0, r1}
 8017c56:	6010      	str	r0, [r2, #0]
 8017c58:	6051      	str	r1, [r2, #4]
 8017c5a:	881b      	ldrh	r3, [r3, #0]
 8017c5c:	8113      	strh	r3, [r2, #8]
			break;
 8017c5e:	f004 bc73 	b.w	801c548 <problem_fetch+0x1ae60>
 8017c62:	bf00      	nop
 8017c64:	0802b5b4 	.word	0x0802b5b4
 8017c68:	08025cc0 	.word	0x08025cc0
 8017c6c:	0802b5c4 	.word	0x0802b5c4
 8017c70:	0802b5d4 	.word	0x0802b5d4
 8017c74:	08023b6c 	.word	0x08023b6c
 8017c78:	0802b5ec 	.word	0x0802b5ec
 8017c7c:	080239f4 	.word	0x080239f4
 8017c80:	0802b608 	.word	0x0802b608
 8017c84:	0802b618 	.word	0x0802b618
 8017c88:	08023ae4 	.word	0x08023ae4
 8017c8c:	0802b62c 	.word	0x0802b62c
 8017c90:	0802395c 	.word	0x0802395c
 8017c94:	0802b63c 	.word	0x0802b63c
 8017c98:	0802b64c 	.word	0x0802b64c
 8017c9c:	0802b664 	.word	0x0802b664
 8017ca0:	0802b670 	.word	0x0802b670
 8017ca4:	0802b680 	.word	0x0802b680
 8017ca8:	0802b698 	.word	0x0802b698
 8017cac:	08023a28 	.word	0x08023a28
 8017cb0:	0802b6a8 	.word	0x0802b6a8
 8017cb4:	0802b6b8 	.word	0x0802b6b8
 8017cb8:	080239d4 	.word	0x080239d4
 8017cbc:	0802b6cc 	.word	0x0802b6cc
 8017cc0:	08024054 	.word	0x08024054
 8017cc4:	0802b6d8 	.word	0x0802b6d8
 8017cc8:	0802b6e4 	.word	0x0802b6e4
 8017ccc:	08023e28 	.word	0x08023e28
		case 665 :
			strcpy(p->name,"ACG59");
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017cd6:	4ac3      	ldr	r2, [pc, #780]	; (8017fe4 <problem_fetch+0x168fc>)
 8017cd8:	6810      	ldr	r0, [r2, #0]
 8017cda:	6018      	str	r0, [r3, #0]
 8017cdc:	8892      	ldrh	r2, [r2, #4]
 8017cde:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ce6:	4ac0      	ldr	r2, [pc, #768]	; (8017fe8 <problem_fetch+0x16900>)
 8017ce8:	8811      	ldrh	r1, [r2, #0]
 8017cea:	7892      	ldrb	r2, [r2, #2]
 8017cec:	8019      	strh	r1, [r3, #0]
 8017cee:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2208      	movs	r2, #8
 8017cf4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,D,E,F,I");
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	33a4      	adds	r3, #164	; 0xa4
 8017cfa:	4abc      	ldr	r2, [pc, #752]	; (8017fec <problem_fetch+0x16904>)
 8017cfc:	461c      	mov	r4, r3
 8017cfe:	4615      	mov	r5, r2
 8017d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d02:	6020      	str	r0, [r4, #0]
 8017d04:	6061      	str	r1, [r4, #4]
 8017d06:	60a2      	str	r2, [r4, #8]
 8017d08:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,15,16,11,18");
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	3304      	adds	r3, #4
 8017d0e:	4ab8      	ldr	r2, [pc, #736]	; (8017ff0 <problem_fetch+0x16908>)
 8017d10:	461d      	mov	r5, r3
 8017d12:	4614      	mov	r4, r2
 8017d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d16:	6028      	str	r0, [r5, #0]
 8017d18:	6069      	str	r1, [r5, #4]
 8017d1a:	60aa      	str	r2, [r5, #8]
 8017d1c:	60eb      	str	r3, [r5, #12]
 8017d1e:	6820      	ldr	r0, [r4, #0]
 8017d20:	6128      	str	r0, [r5, #16]
 8017d22:	7923      	ldrb	r3, [r4, #4]
 8017d24:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017d2c:	4ab1      	ldr	r2, [pc, #708]	; (8017ff4 <problem_fetch+0x1690c>)
 8017d2e:	461c      	mov	r4, r3
 8017d30:	4615      	mov	r5, r2
 8017d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017d34:	6020      	str	r0, [r4, #0]
 8017d36:	6061      	str	r1, [r4, #4]
 8017d38:	60a2      	str	r2, [r4, #8]
 8017d3a:	60e3      	str	r3, [r4, #12]
			break;
 8017d3c:	f004 bc04 	b.w	801c548 <problem_fetch+0x1ae60>
		case 666 :
			strcpy(p->name,"ACG56");
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017d46:	4aac      	ldr	r2, [pc, #688]	; (8017ff8 <problem_fetch+0x16910>)
 8017d48:	6810      	ldr	r0, [r2, #0]
 8017d4a:	6018      	str	r0, [r3, #0]
 8017d4c:	8892      	ldrh	r2, [r2, #4]
 8017d4e:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017d56:	4aa9      	ldr	r2, [pc, #676]	; (8017ffc <problem_fetch+0x16914>)
 8017d58:	8811      	ldrh	r1, [r2, #0]
 8017d5a:	7892      	ldrb	r2, [r2, #2]
 8017d5c:	8019      	strh	r1, [r3, #0]
 8017d5e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2207      	movs	r2, #7
 8017d64:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,E,C,B,A");
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	33a4      	adds	r3, #164	; 0xa4
 8017d6a:	4aa5      	ldr	r2, [pc, #660]	; (8018000 <problem_fetch+0x16918>)
 8017d6c:	461c      	mov	r4, r3
 8017d6e:	4613      	mov	r3, r2
 8017d70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017d72:	6020      	str	r0, [r4, #0]
 8017d74:	6061      	str	r1, [r4, #4]
 8017d76:	60a2      	str	r2, [r4, #8]
 8017d78:	881b      	ldrh	r3, [r3, #0]
 8017d7a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,13,16,16,10,18");
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	3304      	adds	r3, #4
 8017d80:	4aa0      	ldr	r2, [pc, #640]	; (8018004 <problem_fetch+0x1691c>)
 8017d82:	461d      	mov	r5, r3
 8017d84:	4614      	mov	r4, r2
 8017d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017d88:	6028      	str	r0, [r5, #0]
 8017d8a:	6069      	str	r1, [r5, #4]
 8017d8c:	60aa      	str	r2, [r5, #8]
 8017d8e:	60eb      	str	r3, [r5, #12]
 8017d90:	6820      	ldr	r0, [r4, #0]
 8017d92:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017d9a:	4a9b      	ldr	r2, [pc, #620]	; (8018008 <problem_fetch+0x16920>)
 8017d9c:	461c      	mov	r4, r3
 8017d9e:	4613      	mov	r3, r2
 8017da0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017da2:	6020      	str	r0, [r4, #0]
 8017da4:	6061      	str	r1, [r4, #4]
 8017da6:	60a2      	str	r2, [r4, #8]
 8017da8:	881b      	ldrh	r3, [r3, #0]
 8017daa:	81a3      	strh	r3, [r4, #12]
			break;
 8017dac:	f004 bbcc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 667 :
			strcpy(p->name,"LAGO NERO");
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017db6:	4995      	ldr	r1, [pc, #596]	; (801800c <problem_fetch+0x16924>)
 8017db8:	461a      	mov	r2, r3
 8017dba:	460b      	mov	r3, r1
 8017dbc:	cb03      	ldmia	r3!, {r0, r1}
 8017dbe:	6010      	str	r0, [r2, #0]
 8017dc0:	6051      	str	r1, [r2, #4]
 8017dc2:	881b      	ldrh	r3, [r3, #0]
 8017dc4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017dcc:	4a90      	ldr	r2, [pc, #576]	; (8018010 <problem_fetch+0x16928>)
 8017dce:	6810      	ldr	r0, [r2, #0]
 8017dd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2208      	movs	r2, #8
 8017dd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,F,C,D,E,D");
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	33a4      	adds	r3, #164	; 0xa4
 8017ddc:	4a8d      	ldr	r2, [pc, #564]	; (8018014 <problem_fetch+0x1692c>)
 8017dde:	461c      	mov	r4, r3
 8017de0:	4615      	mov	r5, r2
 8017de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017de4:	6020      	str	r0, [r4, #0]
 8017de6:	6061      	str	r1, [r4, #4]
 8017de8:	60a2      	str	r2, [r4, #8]
 8017dea:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,11,13,15,16,18");
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	3304      	adds	r3, #4
 8017df0:	4a89      	ldr	r2, [pc, #548]	; (8018018 <problem_fetch+0x16930>)
 8017df2:	461d      	mov	r5, r3
 8017df4:	4614      	mov	r4, r2
 8017df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017df8:	6028      	str	r0, [r5, #0]
 8017dfa:	6069      	str	r1, [r5, #4]
 8017dfc:	60aa      	str	r2, [r5, #8]
 8017dfe:	60eb      	str	r3, [r5, #12]
 8017e00:	6820      	ldr	r0, [r4, #0]
 8017e02:	6128      	str	r0, [r5, #16]
 8017e04:	7923      	ldrb	r3, [r4, #4]
 8017e06:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017e0e:	4a79      	ldr	r2, [pc, #484]	; (8017ff4 <problem_fetch+0x1690c>)
 8017e10:	461c      	mov	r4, r3
 8017e12:	4615      	mov	r5, r2
 8017e14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e16:	6020      	str	r0, [r4, #0]
 8017e18:	6061      	str	r1, [r4, #4]
 8017e1a:	60a2      	str	r2, [r4, #8]
 8017e1c:	60e3      	str	r3, [r4, #12]
			break;
 8017e1e:	f004 bb93 	b.w	801c548 <problem_fetch+0x1ae60>
		case 668 :
			strcpy(p->name,"BP");
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017e28:	4a7c      	ldr	r2, [pc, #496]	; (801801c <problem_fetch+0x16934>)
 8017e2a:	8811      	ldrh	r1, [r2, #0]
 8017e2c:	7892      	ldrb	r2, [r2, #2]
 8017e2e:	8019      	strh	r1, [r3, #0]
 8017e30:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017e38:	4a75      	ldr	r2, [pc, #468]	; (8018010 <problem_fetch+0x16928>)
 8017e3a:	6810      	ldr	r0, [r2, #0]
 8017e3c:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	2209      	movs	r2, #9
 8017e42:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,E,I,H,J,H,I");
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	33a4      	adds	r3, #164	; 0xa4
 8017e48:	4a75      	ldr	r2, [pc, #468]	; (8018020 <problem_fetch+0x16938>)
 8017e4a:	461d      	mov	r5, r3
 8017e4c:	4614      	mov	r4, r2
 8017e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e50:	6028      	str	r0, [r5, #0]
 8017e52:	6069      	str	r1, [r5, #4]
 8017e54:	60aa      	str	r2, [r5, #8]
 8017e56:	60eb      	str	r3, [r5, #12]
 8017e58:	8823      	ldrh	r3, [r4, #0]
 8017e5a:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,8,10,12,13,16,18");
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	3304      	adds	r3, #4
 8017e60:	4a70      	ldr	r2, [pc, #448]	; (8018024 <problem_fetch+0x1693c>)
 8017e62:	461c      	mov	r4, r3
 8017e64:	4615      	mov	r5, r2
 8017e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017e68:	6020      	str	r0, [r4, #0]
 8017e6a:	6061      	str	r1, [r4, #4]
 8017e6c:	60a2      	str	r2, [r4, #8]
 8017e6e:	60e3      	str	r3, [r4, #12]
 8017e70:	6828      	ldr	r0, [r5, #0]
 8017e72:	6120      	str	r0, [r4, #16]
 8017e74:	88ab      	ldrh	r3, [r5, #4]
 8017e76:	79aa      	ldrb	r2, [r5, #6]
 8017e78:	82a3      	strh	r3, [r4, #20]
 8017e7a:	4613      	mov	r3, r2
 8017e7c:	75a3      	strb	r3, [r4, #22]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017e84:	4a68      	ldr	r2, [pc, #416]	; (8018028 <problem_fetch+0x16940>)
 8017e86:	461d      	mov	r5, r3
 8017e88:	4614      	mov	r4, r2
 8017e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017e8c:	6028      	str	r0, [r5, #0]
 8017e8e:	6069      	str	r1, [r5, #4]
 8017e90:	60aa      	str	r2, [r5, #8]
 8017e92:	60eb      	str	r3, [r5, #12]
 8017e94:	8823      	ldrh	r3, [r4, #0]
 8017e96:	822b      	strh	r3, [r5, #16]
			break;
 8017e98:	f004 bb56 	b.w	801c548 <problem_fetch+0x1ae60>
		case 669 :
			strcpy(p->name,"JAGUAR SHARK HARD");
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017ea2:	4a62      	ldr	r2, [pc, #392]	; (801802c <problem_fetch+0x16944>)
 8017ea4:	461d      	mov	r5, r3
 8017ea6:	4614      	mov	r4, r2
 8017ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017eaa:	6028      	str	r0, [r5, #0]
 8017eac:	6069      	str	r1, [r5, #4]
 8017eae:	60aa      	str	r2, [r5, #8]
 8017eb0:	60eb      	str	r3, [r5, #12]
 8017eb2:	8823      	ldrh	r3, [r4, #0]
 8017eb4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017ebc:	4a5c      	ldr	r2, [pc, #368]	; (8018030 <problem_fetch+0x16948>)
 8017ebe:	6810      	ldr	r0, [r2, #0]
 8017ec0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	2206      	movs	r2, #6
 8017ec6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,E,I");
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	33a4      	adds	r3, #164	; 0xa4
 8017ecc:	4a59      	ldr	r2, [pc, #356]	; (8018034 <problem_fetch+0x1694c>)
 8017ece:	461c      	mov	r4, r3
 8017ed0:	4613      	mov	r3, r2
 8017ed2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017ed4:	6020      	str	r0, [r4, #0]
 8017ed6:	6061      	str	r1, [r4, #4]
 8017ed8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,13,16,18");
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	3304      	adds	r3, #4
 8017ede:	4a56      	ldr	r2, [pc, #344]	; (8018038 <problem_fetch+0x16950>)
 8017ee0:	461d      	mov	r5, r3
 8017ee2:	4614      	mov	r4, r2
 8017ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ee6:	6028      	str	r0, [r5, #0]
 8017ee8:	6069      	str	r1, [r5, #4]
 8017eea:	60aa      	str	r2, [r5, #8]
 8017eec:	60eb      	str	r3, [r5, #12]
 8017eee:	7823      	ldrb	r3, [r4, #0]
 8017ef0:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017ef8:	4a50      	ldr	r2, [pc, #320]	; (801803c <problem_fetch+0x16954>)
 8017efa:	461c      	mov	r4, r3
 8017efc:	4613      	mov	r3, r2
 8017efe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f00:	6020      	str	r0, [r4, #0]
 8017f02:	6061      	str	r1, [r4, #4]
 8017f04:	60a2      	str	r2, [r4, #8]
			break;
 8017f06:	f004 bb1f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 670 :
			strcpy(p->name,"IL MANFRUITO");
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017f10:	4a4b      	ldr	r2, [pc, #300]	; (8018040 <problem_fetch+0x16958>)
 8017f12:	461c      	mov	r4, r3
 8017f14:	4613      	mov	r3, r2
 8017f16:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f18:	6020      	str	r0, [r4, #0]
 8017f1a:	6061      	str	r1, [r4, #4]
 8017f1c:	60a2      	str	r2, [r4, #8]
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7C");
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f28:	4a46      	ldr	r2, [pc, #280]	; (8018044 <problem_fetch+0x1695c>)
 8017f2a:	8811      	ldrh	r1, [r2, #0]
 8017f2c:	7892      	ldrb	r2, [r2, #2]
 8017f2e:	8019      	strh	r1, [r3, #0]
 8017f30:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2206      	movs	r2, #6
 8017f36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,E,E,F,G,G");
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	33a4      	adds	r3, #164	; 0xa4
 8017f3c:	4a42      	ldr	r2, [pc, #264]	; (8018048 <problem_fetch+0x16960>)
 8017f3e:	461c      	mov	r4, r3
 8017f40:	4613      	mov	r3, r2
 8017f42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f44:	6020      	str	r0, [r4, #0]
 8017f46:	6061      	str	r1, [r4, #4]
 8017f48:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"18,6,9,13,4,17");
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	3304      	adds	r3, #4
 8017f4e:	4a3f      	ldr	r2, [pc, #252]	; (801804c <problem_fetch+0x16964>)
 8017f50:	461c      	mov	r4, r3
 8017f52:	4613      	mov	r3, r2
 8017f54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f56:	6020      	str	r0, [r4, #0]
 8017f58:	6061      	str	r1, [r4, #4]
 8017f5a:	60a2      	str	r2, [r4, #8]
 8017f5c:	881a      	ldrh	r2, [r3, #0]
 8017f5e:	789b      	ldrb	r3, [r3, #2]
 8017f60:	81a2      	strh	r2, [r4, #12]
 8017f62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"e,s,d,d,s,d");
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017f6a:	4a39      	ldr	r2, [pc, #228]	; (8018050 <problem_fetch+0x16968>)
 8017f6c:	461c      	mov	r4, r3
 8017f6e:	4613      	mov	r3, r2
 8017f70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f72:	6020      	str	r0, [r4, #0]
 8017f74:	6061      	str	r1, [r4, #4]
 8017f76:	60a2      	str	r2, [r4, #8]
			break;
 8017f78:	f004 bae6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 671 :
			strcpy(p->name,"ROCK N LOCK");
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8017f82:	4a34      	ldr	r2, [pc, #208]	; (8018054 <problem_fetch+0x1696c>)
 8017f84:	461c      	mov	r4, r3
 8017f86:	4613      	mov	r3, r2
 8017f88:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017f8a:	6020      	str	r0, [r4, #0]
 8017f8c:	6061      	str	r1, [r4, #4]
 8017f8e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8017f96:	4a14      	ldr	r2, [pc, #80]	; (8017fe8 <problem_fetch+0x16900>)
 8017f98:	8811      	ldrh	r1, [r2, #0]
 8017f9a:	7892      	ldrb	r2, [r2, #2]
 8017f9c:	8019      	strh	r1, [r3, #0]
 8017f9e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2206      	movs	r2, #6
 8017fa4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,I,G,I");
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	33a4      	adds	r3, #164	; 0xa4
 8017faa:	4a2b      	ldr	r2, [pc, #172]	; (8018058 <problem_fetch+0x16970>)
 8017fac:	461c      	mov	r4, r3
 8017fae:	4613      	mov	r3, r2
 8017fb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017fb2:	6020      	str	r0, [r4, #0]
 8017fb4:	6061      	str	r1, [r4, #4]
 8017fb6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,10,14,17,18");
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	3304      	adds	r3, #4
 8017fbc:	4a27      	ldr	r2, [pc, #156]	; (801805c <problem_fetch+0x16974>)
 8017fbe:	461c      	mov	r4, r3
 8017fc0:	4615      	mov	r5, r2
 8017fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017fc4:	6020      	str	r0, [r4, #0]
 8017fc6:	6061      	str	r1, [r4, #4]
 8017fc8:	60a2      	str	r2, [r4, #8]
 8017fca:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8017fd2:	4a1a      	ldr	r2, [pc, #104]	; (801803c <problem_fetch+0x16954>)
 8017fd4:	461c      	mov	r4, r3
 8017fd6:	4613      	mov	r3, r2
 8017fd8:	cb07      	ldmia	r3!, {r0, r1, r2}
 8017fda:	6020      	str	r0, [r4, #0]
 8017fdc:	6061      	str	r1, [r4, #4]
 8017fde:	60a2      	str	r2, [r4, #8]
			break;
 8017fe0:	f004 bab2 	b.w	801c548 <problem_fetch+0x1ae60>
 8017fe4:	0802b6f4 	.word	0x0802b6f4
 8017fe8:	08023a28 	.word	0x08023a28
 8017fec:	0802b6fc 	.word	0x0802b6fc
 8017ff0:	0802b70c 	.word	0x0802b70c
 8017ff4:	08023a80 	.word	0x08023a80
 8017ff8:	0802b724 	.word	0x0802b724
 8017ffc:	0802391c 	.word	0x0802391c
 8018000:	0802b72c 	.word	0x0802b72c
 8018004:	0802b73c 	.word	0x0802b73c
 8018008:	08023ae4 	.word	0x08023ae4
 801800c:	0802b750 	.word	0x0802b750
 8018010:	0802395c 	.word	0x0802395c
 8018014:	0802b75c 	.word	0x0802b75c
 8018018:	0802b76c 	.word	0x0802b76c
 801801c:	0802b784 	.word	0x0802b784
 8018020:	0802b788 	.word	0x0802b788
 8018024:	0802b79c 	.word	0x0802b79c
 8018028:	08024940 	.word	0x08024940
 801802c:	0802b7b4 	.word	0x0802b7b4
 8018030:	08023a98 	.word	0x08023a98
 8018034:	0802b7c8 	.word	0x0802b7c8
 8018038:	0802b7d4 	.word	0x0802b7d4
 801803c:	08023cf8 	.word	0x08023cf8
 8018040:	0802b7e8 	.word	0x0802b7e8
 8018044:	08024190 	.word	0x08024190
 8018048:	0802b7f8 	.word	0x0802b7f8
 801804c:	0802b804 	.word	0x0802b804
 8018050:	0802b814 	.word	0x0802b814
 8018054:	0802b820 	.word	0x0802b820
 8018058:	0802b82c 	.word	0x0802b82c
 801805c:	0802b354 	.word	0x0802b354
		case 672 :
			strcpy(p->name,"CRAYON PONYFISH");
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018066:	4aab      	ldr	r2, [pc, #684]	; (8018314 <problem_fetch+0x16c2c>)
 8018068:	461c      	mov	r4, r3
 801806a:	4615      	mov	r5, r2
 801806c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801806e:	6020      	str	r0, [r4, #0]
 8018070:	6061      	str	r1, [r4, #4]
 8018072:	60a2      	str	r2, [r4, #8]
 8018074:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801807c:	4aa6      	ldr	r2, [pc, #664]	; (8018318 <problem_fetch+0x16c30>)
 801807e:	6810      	ldr	r0, [r2, #0]
 8018080:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2205      	movs	r2, #5
 8018086:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,I,D");
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	33a4      	adds	r3, #164	; 0xa4
 801808c:	49a3      	ldr	r1, [pc, #652]	; (801831c <problem_fetch+0x16c34>)
 801808e:	461a      	mov	r2, r3
 8018090:	460b      	mov	r3, r1
 8018092:	cb03      	ldmia	r3!, {r0, r1}
 8018094:	6010      	str	r0, [r2, #0]
 8018096:	6051      	str	r1, [r2, #4]
 8018098:	881b      	ldrh	r3, [r3, #0]
 801809a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,14,18");
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	3304      	adds	r3, #4
 80180a0:	4a9f      	ldr	r2, [pc, #636]	; (8018320 <problem_fetch+0x16c38>)
 80180a2:	461c      	mov	r4, r3
 80180a4:	4613      	mov	r3, r2
 80180a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180a8:	6020      	str	r0, [r4, #0]
 80180aa:	6061      	str	r1, [r4, #4]
 80180ac:	60a2      	str	r2, [r4, #8]
 80180ae:	881b      	ldrh	r3, [r3, #0]
 80180b0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80180b8:	499a      	ldr	r1, [pc, #616]	; (8018324 <problem_fetch+0x16c3c>)
 80180ba:	461a      	mov	r2, r3
 80180bc:	460b      	mov	r3, r1
 80180be:	cb03      	ldmia	r3!, {r0, r1}
 80180c0:	6010      	str	r0, [r2, #0]
 80180c2:	6051      	str	r1, [r2, #4]
 80180c4:	881b      	ldrh	r3, [r3, #0]
 80180c6:	8113      	strh	r3, [r2, #8]
			break;
 80180c8:	f004 ba3e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 673 :
			strcpy(p->name,"JAGUAR SHARK");
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80180d2:	4a95      	ldr	r2, [pc, #596]	; (8018328 <problem_fetch+0x16c40>)
 80180d4:	461c      	mov	r4, r3
 80180d6:	4613      	mov	r3, r2
 80180d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80180da:	6020      	str	r0, [r4, #0]
 80180dc:	6061      	str	r1, [r4, #4]
 80180de:	60a2      	str	r2, [r4, #8]
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80180ea:	4a8b      	ldr	r2, [pc, #556]	; (8018318 <problem_fetch+0x16c30>)
 80180ec:	6810      	ldr	r0, [r2, #0]
 80180ee:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2207      	movs	r2, #7
 80180f4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,C,D,E,I");
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	33a4      	adds	r3, #164	; 0xa4
 80180fa:	4a8c      	ldr	r2, [pc, #560]	; (801832c <problem_fetch+0x16c44>)
 80180fc:	461c      	mov	r4, r3
 80180fe:	4613      	mov	r3, r2
 8018100:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018102:	6020      	str	r0, [r4, #0]
 8018104:	6061      	str	r1, [r4, #4]
 8018106:	60a2      	str	r2, [r4, #8]
 8018108:	881b      	ldrh	r3, [r3, #0]
 801810a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,12,13,15,16,18");
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	3304      	adds	r3, #4
 8018110:	4a87      	ldr	r2, [pc, #540]	; (8018330 <problem_fetch+0x16c48>)
 8018112:	461d      	mov	r5, r3
 8018114:	4614      	mov	r4, r2
 8018116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018118:	6028      	str	r0, [r5, #0]
 801811a:	6069      	str	r1, [r5, #4]
 801811c:	60aa      	str	r2, [r5, #8]
 801811e:	60eb      	str	r3, [r5, #12]
 8018120:	6820      	ldr	r0, [r4, #0]
 8018122:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801812a:	4a82      	ldr	r2, [pc, #520]	; (8018334 <problem_fetch+0x16c4c>)
 801812c:	461c      	mov	r4, r3
 801812e:	4613      	mov	r3, r2
 8018130:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018132:	6020      	str	r0, [r4, #0]
 8018134:	6061      	str	r1, [r4, #4]
 8018136:	60a2      	str	r2, [r4, #8]
 8018138:	881b      	ldrh	r3, [r3, #0]
 801813a:	81a3      	strh	r3, [r4, #12]
			break;
 801813c:	f004 ba04 	b.w	801c548 <problem_fetch+0x1ae60>
		case 674 :
			strcpy(p->name,"CEPPODE...");
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018146:	497c      	ldr	r1, [pc, #496]	; (8018338 <problem_fetch+0x16c50>)
 8018148:	461a      	mov	r2, r3
 801814a:	460b      	mov	r3, r1
 801814c:	cb03      	ldmia	r3!, {r0, r1}
 801814e:	6010      	str	r0, [r2, #0]
 8018150:	6051      	str	r1, [r2, #4]
 8018152:	8819      	ldrh	r1, [r3, #0]
 8018154:	789b      	ldrb	r3, [r3, #2]
 8018156:	8111      	strh	r1, [r2, #8]
 8018158:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018160:	4a76      	ldr	r2, [pc, #472]	; (801833c <problem_fetch+0x16c54>)
 8018162:	8811      	ldrh	r1, [r2, #0]
 8018164:	7892      	ldrb	r2, [r2, #2]
 8018166:	8019      	strh	r1, [r3, #0]
 8018168:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	2207      	movs	r2, #7
 801816e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,E,H,D,D");
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	33a4      	adds	r3, #164	; 0xa4
 8018174:	4a72      	ldr	r2, [pc, #456]	; (8018340 <problem_fetch+0x16c58>)
 8018176:	461c      	mov	r4, r3
 8018178:	4613      	mov	r3, r2
 801817a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801817c:	6020      	str	r0, [r4, #0]
 801817e:	6061      	str	r1, [r4, #4]
 8018180:	60a2      	str	r2, [r4, #8]
 8018182:	881b      	ldrh	r3, [r3, #0]
 8018184:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,9,12,15,18");
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	3304      	adds	r3, #4
 801818a:	4a6e      	ldr	r2, [pc, #440]	; (8018344 <problem_fetch+0x16c5c>)
 801818c:	461d      	mov	r5, r3
 801818e:	4614      	mov	r4, r2
 8018190:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018192:	6028      	str	r0, [r5, #0]
 8018194:	6069      	str	r1, [r5, #4]
 8018196:	60aa      	str	r2, [r5, #8]
 8018198:	60eb      	str	r3, [r5, #12]
 801819a:	7823      	ldrb	r3, [r4, #0]
 801819c:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80181a4:	4a68      	ldr	r2, [pc, #416]	; (8018348 <problem_fetch+0x16c60>)
 80181a6:	461c      	mov	r4, r3
 80181a8:	4613      	mov	r3, r2
 80181aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181ac:	6020      	str	r0, [r4, #0]
 80181ae:	6061      	str	r1, [r4, #4]
 80181b0:	60a2      	str	r2, [r4, #8]
 80181b2:	881b      	ldrh	r3, [r3, #0]
 80181b4:	81a3      	strh	r3, [r4, #12]
			break;
 80181b6:	f004 b9c7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 675 :
			strcpy(p->name,"NITERÓI 01");
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80181c0:	4a62      	ldr	r2, [pc, #392]	; (801834c <problem_fetch+0x16c64>)
 80181c2:	461c      	mov	r4, r3
 80181c4:	4613      	mov	r3, r2
 80181c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80181c8:	6020      	str	r0, [r4, #0]
 80181ca:	6061      	str	r1, [r4, #4]
 80181cc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C+");
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80181d4:	4a5e      	ldr	r2, [pc, #376]	; (8018350 <problem_fetch+0x16c68>)
 80181d6:	6810      	ldr	r0, [r2, #0]
 80181d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	2209      	movs	r2, #9
 80181de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,D,C,E,D,G,G,I");
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	33a4      	adds	r3, #164	; 0xa4
 80181e4:	4a5b      	ldr	r2, [pc, #364]	; (8018354 <problem_fetch+0x16c6c>)
 80181e6:	461d      	mov	r5, r3
 80181e8:	4614      	mov	r4, r2
 80181ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181ec:	6028      	str	r0, [r5, #0]
 80181ee:	6069      	str	r1, [r5, #4]
 80181f0:	60aa      	str	r2, [r5, #8]
 80181f2:	60eb      	str	r3, [r5, #12]
 80181f4:	8823      	ldrh	r3, [r4, #0]
 80181f6:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,7,8,9,11,14,15,18");
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	3304      	adds	r3, #4
 80181fc:	4a56      	ldr	r2, [pc, #344]	; (8018358 <problem_fetch+0x16c70>)
 80181fe:	461d      	mov	r5, r3
 8018200:	4614      	mov	r4, r2
 8018202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018204:	6028      	str	r0, [r5, #0]
 8018206:	6069      	str	r1, [r5, #4]
 8018208:	60aa      	str	r2, [r5, #8]
 801820a:	60eb      	str	r3, [r5, #12]
 801820c:	6820      	ldr	r0, [r4, #0]
 801820e:	6128      	str	r0, [r5, #16]
 8018210:	88a3      	ldrh	r3, [r4, #4]
 8018212:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801821a:	4a50      	ldr	r2, [pc, #320]	; (801835c <problem_fetch+0x16c74>)
 801821c:	461d      	mov	r5, r3
 801821e:	4614      	mov	r4, r2
 8018220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018222:	6028      	str	r0, [r5, #0]
 8018224:	6069      	str	r1, [r5, #4]
 8018226:	60aa      	str	r2, [r5, #8]
 8018228:	60eb      	str	r3, [r5, #12]
 801822a:	8823      	ldrh	r3, [r4, #0]
 801822c:	822b      	strh	r3, [r5, #16]
			break;
 801822e:	f004 b98b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 676 :
			strcpy(p->name,"HAMPUS NEDERLAG");
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018238:	4a49      	ldr	r2, [pc, #292]	; (8018360 <problem_fetch+0x16c78>)
 801823a:	461c      	mov	r4, r3
 801823c:	4615      	mov	r5, r2
 801823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018240:	6020      	str	r0, [r4, #0]
 8018242:	6061      	str	r1, [r4, #4]
 8018244:	60a2      	str	r2, [r4, #8]
 8018246:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801824e:	4a45      	ldr	r2, [pc, #276]	; (8018364 <problem_fetch+0x16c7c>)
 8018250:	6810      	ldr	r0, [r2, #0]
 8018252:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2207      	movs	r2, #7
 8018258:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,G,D,E,B,D");
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	33a4      	adds	r3, #164	; 0xa4
 801825e:	4a42      	ldr	r2, [pc, #264]	; (8018368 <problem_fetch+0x16c80>)
 8018260:	461c      	mov	r4, r3
 8018262:	4613      	mov	r3, r2
 8018264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018266:	6020      	str	r0, [r4, #0]
 8018268:	6061      	str	r1, [r4, #4]
 801826a:	60a2      	str	r2, [r4, #8]
 801826c:	881b      	ldrh	r3, [r3, #0]
 801826e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,11,12,15,18");
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	3304      	adds	r3, #4
 8018274:	4a3d      	ldr	r2, [pc, #244]	; (801836c <problem_fetch+0x16c84>)
 8018276:	461d      	mov	r5, r3
 8018278:	4614      	mov	r4, r2
 801827a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801827c:	6028      	str	r0, [r5, #0]
 801827e:	6069      	str	r1, [r5, #4]
 8018280:	60aa      	str	r2, [r5, #8]
 8018282:	60eb      	str	r3, [r5, #12]
 8018284:	8823      	ldrh	r3, [r4, #0]
 8018286:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801828e:	4a2e      	ldr	r2, [pc, #184]	; (8018348 <problem_fetch+0x16c60>)
 8018290:	461c      	mov	r4, r3
 8018292:	4613      	mov	r3, r2
 8018294:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018296:	6020      	str	r0, [r4, #0]
 8018298:	6061      	str	r1, [r4, #4]
 801829a:	60a2      	str	r2, [r4, #8]
 801829c:	881b      	ldrh	r3, [r3, #0]
 801829e:	81a3      	strh	r3, [r4, #12]
			break;
 80182a0:	f004 b952 	b.w	801c548 <problem_fetch+0x1ae60>
		case 677 :
			strcpy(p->name,"GRAYLING");
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80182aa:	4931      	ldr	r1, [pc, #196]	; (8018370 <problem_fetch+0x16c88>)
 80182ac:	461a      	mov	r2, r3
 80182ae:	460b      	mov	r3, r1
 80182b0:	cb03      	ldmia	r3!, {r0, r1}
 80182b2:	6010      	str	r0, [r2, #0]
 80182b4:	6051      	str	r1, [r2, #4]
 80182b6:	781b      	ldrb	r3, [r3, #0]
 80182b8:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80182c0:	4a23      	ldr	r2, [pc, #140]	; (8018350 <problem_fetch+0x16c68>)
 80182c2:	6810      	ldr	r0, [r2, #0]
 80182c4:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	2208      	movs	r2, #8
 80182ca:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,G,F,E,D,D");
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	33a4      	adds	r3, #164	; 0xa4
 80182d0:	4a28      	ldr	r2, [pc, #160]	; (8018374 <problem_fetch+0x16c8c>)
 80182d2:	461c      	mov	r4, r3
 80182d4:	4615      	mov	r5, r2
 80182d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182d8:	6020      	str	r0, [r4, #0]
 80182da:	6061      	str	r1, [r4, #4]
 80182dc:	60a2      	str	r2, [r4, #8]
 80182de:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,8,9,11,12,15,18");
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	3304      	adds	r3, #4
 80182e4:	4a24      	ldr	r2, [pc, #144]	; (8018378 <problem_fetch+0x16c90>)
 80182e6:	461d      	mov	r5, r3
 80182e8:	4614      	mov	r4, r2
 80182ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80182ec:	6028      	str	r0, [r5, #0]
 80182ee:	6069      	str	r1, [r5, #4]
 80182f0:	60aa      	str	r2, [r5, #8]
 80182f2:	60eb      	str	r3, [r5, #12]
 80182f4:	6820      	ldr	r0, [r4, #0]
 80182f6:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80182fe:	4a1f      	ldr	r2, [pc, #124]	; (801837c <problem_fetch+0x16c94>)
 8018300:	461c      	mov	r4, r3
 8018302:	4615      	mov	r5, r2
 8018304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018306:	6020      	str	r0, [r4, #0]
 8018308:	6061      	str	r1, [r4, #4]
 801830a:	60a2      	str	r2, [r4, #8]
 801830c:	60e3      	str	r3, [r4, #12]
			break;
 801830e:	f004 b91b 	b.w	801c548 <problem_fetch+0x1ae60>
 8018312:	bf00      	nop
 8018314:	0802b838 	.word	0x0802b838
 8018318:	08023afc 	.word	0x08023afc
 801831c:	0802b848 	.word	0x0802b848
 8018320:	0802775c 	.word	0x0802775c
 8018324:	08023e28 	.word	0x08023e28
 8018328:	0802b854 	.word	0x0802b854
 801832c:	0802b864 	.word	0x0802b864
 8018330:	0802b874 	.word	0x0802b874
 8018334:	08023ae4 	.word	0x08023ae4
 8018338:	0802b888 	.word	0x0802b888
 801833c:	0802391c 	.word	0x0802391c
 8018340:	0802b894 	.word	0x0802b894
 8018344:	0802b8a4 	.word	0x0802b8a4
 8018348:	080239d4 	.word	0x080239d4
 801834c:	0802b8b8 	.word	0x0802b8b8
 8018350:	080239f4 	.word	0x080239f4
 8018354:	0802b8c4 	.word	0x0802b8c4
 8018358:	0802b8d8 	.word	0x0802b8d8
 801835c:	08024940 	.word	0x08024940
 8018360:	0802b8f0 	.word	0x0802b8f0
 8018364:	0802395c 	.word	0x0802395c
 8018368:	0802b900 	.word	0x0802b900
 801836c:	0802b910 	.word	0x0802b910
 8018370:	0802b924 	.word	0x0802b924
 8018374:	0802b930 	.word	0x0802b930
 8018378:	0802b940 	.word	0x0802b940
 801837c:	08023b6c 	.word	0x08023b6c
		case 678 :
			strcpy(p->name,"TAMAS DYNOMITE");
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018386:	4aaa      	ldr	r2, [pc, #680]	; (8018630 <problem_fetch+0x16f48>)
 8018388:	461c      	mov	r4, r3
 801838a:	4613      	mov	r3, r2
 801838c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801838e:	6020      	str	r0, [r4, #0]
 8018390:	6061      	str	r1, [r4, #4]
 8018392:	60a2      	str	r2, [r4, #8]
 8018394:	881a      	ldrh	r2, [r3, #0]
 8018396:	789b      	ldrb	r3, [r3, #2]
 8018398:	81a2      	strh	r2, [r4, #12]
 801839a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C");
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80183a2:	4aa4      	ldr	r2, [pc, #656]	; (8018634 <problem_fetch+0x16f4c>)
 80183a4:	8811      	ldrh	r1, [r2, #0]
 80183a6:	7892      	ldrb	r2, [r2, #2]
 80183a8:	8019      	strh	r1, [r3, #0]
 80183aa:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	2206      	movs	r2, #6
 80183b0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,D,D");
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	33a4      	adds	r3, #164	; 0xa4
 80183b6:	4aa0      	ldr	r2, [pc, #640]	; (8018638 <problem_fetch+0x16f50>)
 80183b8:	461c      	mov	r4, r3
 80183ba:	4613      	mov	r3, r2
 80183bc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183be:	6020      	str	r0, [r4, #0]
 80183c0:	6061      	str	r1, [r4, #4]
 80183c2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,5,10,13,15,18");
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	3304      	adds	r3, #4
 80183c8:	4a9c      	ldr	r2, [pc, #624]	; (801863c <problem_fetch+0x16f54>)
 80183ca:	461c      	mov	r4, r3
 80183cc:	4615      	mov	r5, r2
 80183ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183d0:	6020      	str	r0, [r4, #0]
 80183d2:	6061      	str	r1, [r4, #4]
 80183d4:	60a2      	str	r2, [r4, #8]
 80183d6:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80183de:	4a98      	ldr	r2, [pc, #608]	; (8018640 <problem_fetch+0x16f58>)
 80183e0:	461c      	mov	r4, r3
 80183e2:	4613      	mov	r3, r2
 80183e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183e6:	6020      	str	r0, [r4, #0]
 80183e8:	6061      	str	r1, [r4, #4]
 80183ea:	60a2      	str	r2, [r4, #8]
			break;
 80183ec:	f004 b8ac 	b.w	801c548 <problem_fetch+0x1ae60>
		case 679 :
			strcpy(p->name,"SCHWERE LEITER");
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80183f6:	4a93      	ldr	r2, [pc, #588]	; (8018644 <problem_fetch+0x16f5c>)
 80183f8:	461c      	mov	r4, r3
 80183fa:	4613      	mov	r3, r2
 80183fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80183fe:	6020      	str	r0, [r4, #0]
 8018400:	6061      	str	r1, [r4, #4]
 8018402:	60a2      	str	r2, [r4, #8]
 8018404:	881a      	ldrh	r2, [r3, #0]
 8018406:	789b      	ldrb	r3, [r3, #2]
 8018408:	81a2      	strh	r2, [r4, #12]
 801840a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018412:	4a8d      	ldr	r2, [pc, #564]	; (8018648 <problem_fetch+0x16f60>)
 8018414:	8811      	ldrh	r1, [r2, #0]
 8018416:	7892      	ldrb	r2, [r2, #2]
 8018418:	8019      	strh	r1, [r3, #0]
 801841a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2207      	movs	r2, #7
 8018420:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,E,E,E,E,D");
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	33a4      	adds	r3, #164	; 0xa4
 8018426:	4a89      	ldr	r2, [pc, #548]	; (801864c <problem_fetch+0x16f64>)
 8018428:	461c      	mov	r4, r3
 801842a:	4613      	mov	r3, r2
 801842c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801842e:	6020      	str	r0, [r4, #0]
 8018430:	6061      	str	r1, [r4, #4]
 8018432:	60a2      	str	r2, [r4, #8]
 8018434:	881b      	ldrh	r3, [r3, #0]
 8018436:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,8,9,12,14,16,18");
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	3304      	adds	r3, #4
 801843c:	4a84      	ldr	r2, [pc, #528]	; (8018650 <problem_fetch+0x16f68>)
 801843e:	461d      	mov	r5, r3
 8018440:	4614      	mov	r4, r2
 8018442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018444:	6028      	str	r0, [r5, #0]
 8018446:	6069      	str	r1, [r5, #4]
 8018448:	60aa      	str	r2, [r5, #8]
 801844a:	60eb      	str	r3, [r5, #12]
 801844c:	8823      	ldrh	r3, [r4, #0]
 801844e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018456:	4a7f      	ldr	r2, [pc, #508]	; (8018654 <problem_fetch+0x16f6c>)
 8018458:	461c      	mov	r4, r3
 801845a:	4613      	mov	r3, r2
 801845c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801845e:	6020      	str	r0, [r4, #0]
 8018460:	6061      	str	r1, [r4, #4]
 8018462:	60a2      	str	r2, [r4, #8]
 8018464:	881b      	ldrh	r3, [r3, #0]
 8018466:	81a3      	strh	r3, [r4, #12]
			break;
 8018468:	f004 b86e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 680 :
			strcpy(p->name,"MARK'S FAVORITE PROBLEM");
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018472:	4a79      	ldr	r2, [pc, #484]	; (8018658 <problem_fetch+0x16f70>)
 8018474:	461d      	mov	r5, r3
 8018476:	4614      	mov	r4, r2
 8018478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801847a:	6028      	str	r0, [r5, #0]
 801847c:	6069      	str	r1, [r5, #4]
 801847e:	60aa      	str	r2, [r5, #8]
 8018480:	60eb      	str	r3, [r5, #12]
 8018482:	cc03      	ldmia	r4!, {r0, r1}
 8018484:	6128      	str	r0, [r5, #16]
 8018486:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7B");
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801848e:	4a73      	ldr	r2, [pc, #460]	; (801865c <problem_fetch+0x16f74>)
 8018490:	8811      	ldrh	r1, [r2, #0]
 8018492:	7892      	ldrb	r2, [r2, #2]
 8018494:	8019      	strh	r1, [r3, #0]
 8018496:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2207      	movs	r2, #7
 801849c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,F,F,G");
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	33a4      	adds	r3, #164	; 0xa4
 80184a2:	4a6f      	ldr	r2, [pc, #444]	; (8018660 <problem_fetch+0x16f78>)
 80184a4:	461c      	mov	r4, r3
 80184a6:	4613      	mov	r3, r2
 80184a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184aa:	6020      	str	r0, [r4, #0]
 80184ac:	6061      	str	r1, [r4, #4]
 80184ae:	60a2      	str	r2, [r4, #8]
 80184b0:	881b      	ldrh	r3, [r3, #0]
 80184b2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,5,18,6,13,11,15");
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	3304      	adds	r3, #4
 80184b8:	4a6a      	ldr	r2, [pc, #424]	; (8018664 <problem_fetch+0x16f7c>)
 80184ba:	461d      	mov	r5, r3
 80184bc:	4614      	mov	r4, r2
 80184be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184c0:	6028      	str	r0, [r5, #0]
 80184c2:	6069      	str	r1, [r5, #4]
 80184c4:	60aa      	str	r2, [r5, #8]
 80184c6:	60eb      	str	r3, [r5, #12]
 80184c8:	8823      	ldrh	r3, [r4, #0]
 80184ca:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,e,s,d,d,d");
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80184d2:	4a65      	ldr	r2, [pc, #404]	; (8018668 <problem_fetch+0x16f80>)
 80184d4:	461c      	mov	r4, r3
 80184d6:	4613      	mov	r3, r2
 80184d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80184da:	6020      	str	r0, [r4, #0]
 80184dc:	6061      	str	r1, [r4, #4]
 80184de:	60a2      	str	r2, [r4, #8]
 80184e0:	881b      	ldrh	r3, [r3, #0]
 80184e2:	81a3      	strh	r3, [r4, #12]
			break;
 80184e4:	f004 b830 	b.w	801c548 <problem_fetch+0x1ae60>
		case 681 :
			strcpy(p->name,"SUC");
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80184ee:	4a5f      	ldr	r2, [pc, #380]	; (801866c <problem_fetch+0x16f84>)
 80184f0:	6810      	ldr	r0, [r2, #0]
 80184f2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"7A+");
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80184fa:	4a5d      	ldr	r2, [pc, #372]	; (8018670 <problem_fetch+0x16f88>)
 80184fc:	6810      	ldr	r0, [r2, #0]
 80184fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2206      	movs	r2, #6
 8018504:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,F,B,G,I");
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	33a4      	adds	r3, #164	; 0xa4
 801850a:	4a5a      	ldr	r2, [pc, #360]	; (8018674 <problem_fetch+0x16f8c>)
 801850c:	461c      	mov	r4, r3
 801850e:	4613      	mov	r3, r2
 8018510:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018512:	6020      	str	r0, [r4, #0]
 8018514:	6061      	str	r1, [r4, #4]
 8018516:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,11,15,17,18");
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	3304      	adds	r3, #4
 801851c:	4a56      	ldr	r2, [pc, #344]	; (8018678 <problem_fetch+0x16f90>)
 801851e:	461c      	mov	r4, r3
 8018520:	4615      	mov	r5, r2
 8018522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018524:	6020      	str	r0, [r4, #0]
 8018526:	6061      	str	r1, [r4, #4]
 8018528:	60a2      	str	r2, [r4, #8]
 801852a:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018532:	4a43      	ldr	r2, [pc, #268]	; (8018640 <problem_fetch+0x16f58>)
 8018534:	461c      	mov	r4, r3
 8018536:	4613      	mov	r3, r2
 8018538:	cb07      	ldmia	r3!, {r0, r1, r2}
 801853a:	6020      	str	r0, [r4, #0]
 801853c:	6061      	str	r1, [r4, #4]
 801853e:	60a2      	str	r2, [r4, #8]
			break;
 8018540:	f004 b802 	b.w	801c548 <problem_fetch+0x1ae60>
		case 682 :
			strcpy(p->name,"ON OUR HEEL");
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801854a:	4a4c      	ldr	r2, [pc, #304]	; (801867c <problem_fetch+0x16f94>)
 801854c:	461c      	mov	r4, r3
 801854e:	4613      	mov	r3, r2
 8018550:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018552:	6020      	str	r0, [r4, #0]
 8018554:	6061      	str	r1, [r4, #4]
 8018556:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801855e:	4a35      	ldr	r2, [pc, #212]	; (8018634 <problem_fetch+0x16f4c>)
 8018560:	8811      	ldrh	r1, [r2, #0]
 8018562:	7892      	ldrb	r2, [r2, #2]
 8018564:	8019      	strh	r1, [r3, #0]
 8018566:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	2207      	movs	r2, #7
 801856c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,C,E,D");
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	33a4      	adds	r3, #164	; 0xa4
 8018572:	4a43      	ldr	r2, [pc, #268]	; (8018680 <problem_fetch+0x16f98>)
 8018574:	461c      	mov	r4, r3
 8018576:	4613      	mov	r3, r2
 8018578:	cb07      	ldmia	r3!, {r0, r1, r2}
 801857a:	6020      	str	r0, [r4, #0]
 801857c:	6061      	str	r1, [r4, #4]
 801857e:	60a2      	str	r2, [r4, #8]
 8018580:	881b      	ldrh	r3, [r3, #0]
 8018582:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,16,18");
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	3304      	adds	r3, #4
 8018588:	4a3e      	ldr	r2, [pc, #248]	; (8018684 <problem_fetch+0x16f9c>)
 801858a:	461d      	mov	r5, r3
 801858c:	4614      	mov	r4, r2
 801858e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018590:	6028      	str	r0, [r5, #0]
 8018592:	6069      	str	r1, [r5, #4]
 8018594:	60aa      	str	r2, [r5, #8]
 8018596:	60eb      	str	r3, [r5, #12]
 8018598:	8823      	ldrh	r3, [r4, #0]
 801859a:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80185a2:	4a39      	ldr	r2, [pc, #228]	; (8018688 <problem_fetch+0x16fa0>)
 80185a4:	461c      	mov	r4, r3
 80185a6:	4613      	mov	r3, r2
 80185a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185aa:	6020      	str	r0, [r4, #0]
 80185ac:	6061      	str	r1, [r4, #4]
 80185ae:	60a2      	str	r2, [r4, #8]
 80185b0:	881b      	ldrh	r3, [r3, #0]
 80185b2:	81a3      	strh	r3, [r4, #12]
			break;
 80185b4:	f003 bfc8 	b.w	801c548 <problem_fetch+0x1ae60>
		case 683 :
			strcpy(p->name,"LOUDREIGN");
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80185be:	4933      	ldr	r1, [pc, #204]	; (801868c <problem_fetch+0x16fa4>)
 80185c0:	461a      	mov	r2, r3
 80185c2:	460b      	mov	r3, r1
 80185c4:	cb03      	ldmia	r3!, {r0, r1}
 80185c6:	6010      	str	r0, [r2, #0]
 80185c8:	6051      	str	r1, [r2, #4]
 80185ca:	881b      	ldrh	r3, [r3, #0]
 80185cc:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80185d4:	4a2e      	ldr	r2, [pc, #184]	; (8018690 <problem_fetch+0x16fa8>)
 80185d6:	6810      	ldr	r0, [r2, #0]
 80185d8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2207      	movs	r2, #7
 80185de:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,I,J,E,E,A");
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	33a4      	adds	r3, #164	; 0xa4
 80185e4:	4a2b      	ldr	r2, [pc, #172]	; (8018694 <problem_fetch+0x16fac>)
 80185e6:	461c      	mov	r4, r3
 80185e8:	4613      	mov	r3, r2
 80185ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80185ec:	6020      	str	r0, [r4, #0]
 80185ee:	6061      	str	r1, [r4, #4]
 80185f0:	60a2      	str	r2, [r4, #8]
 80185f2:	881b      	ldrh	r3, [r3, #0]
 80185f4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,14,16,18");
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	3304      	adds	r3, #4
 80185fa:	4a27      	ldr	r2, [pc, #156]	; (8018698 <problem_fetch+0x16fb0>)
 80185fc:	461d      	mov	r5, r3
 80185fe:	4614      	mov	r4, r2
 8018600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018602:	6028      	str	r0, [r5, #0]
 8018604:	6069      	str	r1, [r5, #4]
 8018606:	60aa      	str	r2, [r5, #8]
 8018608:	60eb      	str	r3, [r5, #12]
 801860a:	8823      	ldrh	r3, [r4, #0]
 801860c:	78a2      	ldrb	r2, [r4, #2]
 801860e:	822b      	strh	r3, [r5, #16]
 8018610:	4613      	mov	r3, r2
 8018612:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801861a:	4a0e      	ldr	r2, [pc, #56]	; (8018654 <problem_fetch+0x16f6c>)
 801861c:	461c      	mov	r4, r3
 801861e:	4613      	mov	r3, r2
 8018620:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018622:	6020      	str	r0, [r4, #0]
 8018624:	6061      	str	r1, [r4, #4]
 8018626:	60a2      	str	r2, [r4, #8]
 8018628:	881b      	ldrh	r3, [r3, #0]
 801862a:	81a3      	strh	r3, [r4, #12]
			break;
 801862c:	f003 bf8c 	b.w	801c548 <problem_fetch+0x1ae60>
 8018630:	0802b954 	.word	0x0802b954
 8018634:	08023a28 	.word	0x08023a28
 8018638:	0802b964 	.word	0x0802b964
 801863c:	0802b970 	.word	0x0802b970
 8018640:	0802393c 	.word	0x0802393c
 8018644:	0802b980 	.word	0x0802b980
 8018648:	0802391c 	.word	0x0802391c
 801864c:	0802b990 	.word	0x0802b990
 8018650:	0802b9a0 	.word	0x0802b9a0
 8018654:	08023ae4 	.word	0x08023ae4
 8018658:	0802b9b4 	.word	0x0802b9b4
 801865c:	08024054 	.word	0x08024054
 8018660:	0802b9cc 	.word	0x0802b9cc
 8018664:	0802b9dc 	.word	0x0802b9dc
 8018668:	0802b9f0 	.word	0x0802b9f0
 801866c:	0802ba00 	.word	0x0802ba00
 8018670:	08023afc 	.word	0x08023afc
 8018674:	0802ba04 	.word	0x0802ba04
 8018678:	0802ba10 	.word	0x0802ba10
 801867c:	0802ba20 	.word	0x0802ba20
 8018680:	0802ba2c 	.word	0x0802ba2c
 8018684:	0802ba3c 	.word	0x0802ba3c
 8018688:	080239d4 	.word	0x080239d4
 801868c:	0802ba50 	.word	0x0802ba50
 8018690:	0802395c 	.word	0x0802395c
 8018694:	0802ba5c 	.word	0x0802ba5c
 8018698:	0802ba6c 	.word	0x0802ba6c
		case 684 :
			strcpy(p->name,"AB4");
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80186a2:	4ab8      	ldr	r2, [pc, #736]	; (8018984 <problem_fetch+0x1729c>)
 80186a4:	6810      	ldr	r0, [r2, #0]
 80186a6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80186a8:	687b      	ldr	r3, [r7, #4]
 80186aa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80186ae:	4ab6      	ldr	r2, [pc, #728]	; (8018988 <problem_fetch+0x172a0>)
 80186b0:	6810      	ldr	r0, [r2, #0]
 80186b2:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	2209      	movs	r2, #9
 80186b8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,F,F,I,I,K,I");
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	33a4      	adds	r3, #164	; 0xa4
 80186be:	4ab3      	ldr	r2, [pc, #716]	; (801898c <problem_fetch+0x172a4>)
 80186c0:	461d      	mov	r5, r3
 80186c2:	4614      	mov	r4, r2
 80186c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186c6:	6028      	str	r0, [r5, #0]
 80186c8:	6069      	str	r1, [r5, #4]
 80186ca:	60aa      	str	r2, [r5, #8]
 80186cc:	60eb      	str	r3, [r5, #12]
 80186ce:	8823      	ldrh	r3, [r4, #0]
 80186d0:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,11,13,14,15,16,18");
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	3304      	adds	r3, #4
 80186d6:	4aae      	ldr	r2, [pc, #696]	; (8018990 <problem_fetch+0x172a8>)
 80186d8:	461d      	mov	r5, r3
 80186da:	4614      	mov	r4, r2
 80186dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186de:	6028      	str	r0, [r5, #0]
 80186e0:	6069      	str	r1, [r5, #4]
 80186e2:	60aa      	str	r2, [r5, #8]
 80186e4:	60eb      	str	r3, [r5, #12]
 80186e6:	cc03      	ldmia	r4!, {r0, r1}
 80186e8:	6128      	str	r0, [r5, #16]
 80186ea:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80186f2:	4aa8      	ldr	r2, [pc, #672]	; (8018994 <problem_fetch+0x172ac>)
 80186f4:	461d      	mov	r5, r3
 80186f6:	4614      	mov	r4, r2
 80186f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80186fa:	6028      	str	r0, [r5, #0]
 80186fc:	6069      	str	r1, [r5, #4]
 80186fe:	60aa      	str	r2, [r5, #8]
 8018700:	60eb      	str	r3, [r5, #12]
 8018702:	8823      	ldrh	r3, [r4, #0]
 8018704:	822b      	strh	r3, [r5, #16]
			break;
 8018706:	f003 bf1f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 685 :
			strcpy(p->name,"LACERQUA");
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018710:	49a1      	ldr	r1, [pc, #644]	; (8018998 <problem_fetch+0x172b0>)
 8018712:	461a      	mov	r2, r3
 8018714:	460b      	mov	r3, r1
 8018716:	cb03      	ldmia	r3!, {r0, r1}
 8018718:	6010      	str	r0, [r2, #0]
 801871a:	6051      	str	r1, [r2, #4]
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018726:	4a9d      	ldr	r2, [pc, #628]	; (801899c <problem_fetch+0x172b4>)
 8018728:	6810      	ldr	r0, [r2, #0]
 801872a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	2205      	movs	r2, #5
 8018730:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,G,D");
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	33a4      	adds	r3, #164	; 0xa4
 8018736:	499a      	ldr	r1, [pc, #616]	; (80189a0 <problem_fetch+0x172b8>)
 8018738:	461a      	mov	r2, r3
 801873a:	460b      	mov	r3, r1
 801873c:	cb03      	ldmia	r3!, {r0, r1}
 801873e:	6010      	str	r0, [r2, #0]
 8018740:	6051      	str	r1, [r2, #4]
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,9,14,18");
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	3304      	adds	r3, #4
 801874a:	4a96      	ldr	r2, [pc, #600]	; (80189a4 <problem_fetch+0x172bc>)
 801874c:	461c      	mov	r4, r3
 801874e:	4613      	mov	r3, r2
 8018750:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018752:	6020      	str	r0, [r4, #0]
 8018754:	6061      	str	r1, [r4, #4]
 8018756:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801875e:	4992      	ldr	r1, [pc, #584]	; (80189a8 <problem_fetch+0x172c0>)
 8018760:	461a      	mov	r2, r3
 8018762:	460b      	mov	r3, r1
 8018764:	cb03      	ldmia	r3!, {r0, r1}
 8018766:	6010      	str	r0, [r2, #0]
 8018768:	6051      	str	r1, [r2, #4]
 801876a:	881b      	ldrh	r3, [r3, #0]
 801876c:	8113      	strh	r3, [r2, #8]
			break;
 801876e:	f003 beeb 	b.w	801c548 <problem_fetch+0x1ae60>
		case 686 :
			strcpy(p->name,"ZEUS");
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018778:	4a8c      	ldr	r2, [pc, #560]	; (80189ac <problem_fetch+0x172c4>)
 801877a:	6810      	ldr	r0, [r2, #0]
 801877c:	6018      	str	r0, [r3, #0]
 801877e:	7912      	ldrb	r2, [r2, #4]
 8018780:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018788:	4a89      	ldr	r2, [pc, #548]	; (80189b0 <problem_fetch+0x172c8>)
 801878a:	8811      	ldrh	r1, [r2, #0]
 801878c:	7892      	ldrb	r2, [r2, #2]
 801878e:	8019      	strh	r1, [r3, #0]
 8018790:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	2205      	movs	r2, #5
 8018796:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,B,D,D");
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	33a4      	adds	r3, #164	; 0xa4
 801879c:	4985      	ldr	r1, [pc, #532]	; (80189b4 <problem_fetch+0x172cc>)
 801879e:	461a      	mov	r2, r3
 80187a0:	460b      	mov	r3, r1
 80187a2:	cb03      	ldmia	r3!, {r0, r1}
 80187a4:	6010      	str	r0, [r2, #0]
 80187a6:	6051      	str	r1, [r2, #4]
 80187a8:	881b      	ldrh	r3, [r3, #0]
 80187aa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,10,15,18");
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	3304      	adds	r3, #4
 80187b0:	4a81      	ldr	r2, [pc, #516]	; (80189b8 <problem_fetch+0x172d0>)
 80187b2:	461c      	mov	r4, r3
 80187b4:	4613      	mov	r3, r2
 80187b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80187b8:	6020      	str	r0, [r4, #0]
 80187ba:	6061      	str	r1, [r4, #4]
 80187bc:	60a2      	str	r2, [r4, #8]
 80187be:	881b      	ldrh	r3, [r3, #0]
 80187c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80187c8:	4977      	ldr	r1, [pc, #476]	; (80189a8 <problem_fetch+0x172c0>)
 80187ca:	461a      	mov	r2, r3
 80187cc:	460b      	mov	r3, r1
 80187ce:	cb03      	ldmia	r3!, {r0, r1}
 80187d0:	6010      	str	r0, [r2, #0]
 80187d2:	6051      	str	r1, [r2, #4]
 80187d4:	881b      	ldrh	r3, [r3, #0]
 80187d6:	8113      	strh	r3, [r2, #8]
			break;
 80187d8:	f003 beb6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 687 :
			strcpy(p->name,"AB3");
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80187e2:	4a76      	ldr	r2, [pc, #472]	; (80189bc <problem_fetch+0x172d4>)
 80187e4:	6810      	ldr	r0, [r2, #0]
 80187e6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80187ee:	4a66      	ldr	r2, [pc, #408]	; (8018988 <problem_fetch+0x172a0>)
 80187f0:	6810      	ldr	r0, [r2, #0]
 80187f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2208      	movs	r2, #8
 80187f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,F,G,E,I");
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	33a4      	adds	r3, #164	; 0xa4
 80187fe:	4a70      	ldr	r2, [pc, #448]	; (80189c0 <problem_fetch+0x172d8>)
 8018800:	461c      	mov	r4, r3
 8018802:	4615      	mov	r5, r2
 8018804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018806:	6020      	str	r0, [r4, #0]
 8018808:	6061      	str	r1, [r4, #4]
 801880a:	60a2      	str	r2, [r4, #8]
 801880c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,14,16,18");
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	3304      	adds	r3, #4
 8018812:	4a6c      	ldr	r2, [pc, #432]	; (80189c4 <problem_fetch+0x172dc>)
 8018814:	461d      	mov	r5, r3
 8018816:	4614      	mov	r4, r2
 8018818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801881a:	6028      	str	r0, [r5, #0]
 801881c:	6069      	str	r1, [r5, #4]
 801881e:	60aa      	str	r2, [r5, #8]
 8018820:	60eb      	str	r3, [r5, #12]
 8018822:	6820      	ldr	r0, [r4, #0]
 8018824:	6128      	str	r0, [r5, #16]
 8018826:	7923      	ldrb	r3, [r4, #4]
 8018828:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018830:	4a65      	ldr	r2, [pc, #404]	; (80189c8 <problem_fetch+0x172e0>)
 8018832:	461c      	mov	r4, r3
 8018834:	4615      	mov	r5, r2
 8018836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018838:	6020      	str	r0, [r4, #0]
 801883a:	6061      	str	r1, [r4, #4]
 801883c:	60a2      	str	r2, [r4, #8]
 801883e:	60e3      	str	r3, [r4, #12]
			break;
 8018840:	f003 be82 	b.w	801c548 <problem_fetch+0x1ae60>
		case 688 :
			strcpy(p->name,"SAREVOK");
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801884a:	4960      	ldr	r1, [pc, #384]	; (80189cc <problem_fetch+0x172e4>)
 801884c:	461a      	mov	r2, r3
 801884e:	460b      	mov	r3, r1
 8018850:	cb03      	ldmia	r3!, {r0, r1}
 8018852:	6010      	str	r0, [r2, #0]
 8018854:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801885c:	4a5c      	ldr	r2, [pc, #368]	; (80189d0 <problem_fetch+0x172e8>)
 801885e:	8811      	ldrh	r1, [r2, #0]
 8018860:	7892      	ldrb	r2, [r2, #2]
 8018862:	8019      	strh	r1, [r3, #0]
 8018864:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	2205      	movs	r2, #5
 801886a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,I,G,I");
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	33a4      	adds	r3, #164	; 0xa4
 8018870:	4958      	ldr	r1, [pc, #352]	; (80189d4 <problem_fetch+0x172ec>)
 8018872:	461a      	mov	r2, r3
 8018874:	460b      	mov	r3, r1
 8018876:	cb03      	ldmia	r3!, {r0, r1}
 8018878:	6010      	str	r0, [r2, #0]
 801887a:	6051      	str	r1, [r2, #4]
 801887c:	881b      	ldrh	r3, [r3, #0]
 801887e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,8,9,14,18");
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	3304      	adds	r3, #4
 8018884:	4a54      	ldr	r2, [pc, #336]	; (80189d8 <problem_fetch+0x172f0>)
 8018886:	461c      	mov	r4, r3
 8018888:	4613      	mov	r3, r2
 801888a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801888c:	6020      	str	r0, [r4, #0]
 801888e:	6061      	str	r1, [r4, #4]
 8018890:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018898:	4943      	ldr	r1, [pc, #268]	; (80189a8 <problem_fetch+0x172c0>)
 801889a:	461a      	mov	r2, r3
 801889c:	460b      	mov	r3, r1
 801889e:	cb03      	ldmia	r3!, {r0, r1}
 80188a0:	6010      	str	r0, [r2, #0]
 80188a2:	6051      	str	r1, [r2, #4]
 80188a4:	881b      	ldrh	r3, [r3, #0]
 80188a6:	8113      	strh	r3, [r2, #8]
			break;
 80188a8:	f003 be4e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 689 :
			strcpy(p->name,"KEEP IT TIGHT, YO");
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80188b2:	4a4a      	ldr	r2, [pc, #296]	; (80189dc <problem_fetch+0x172f4>)
 80188b4:	461d      	mov	r5, r3
 80188b6:	4614      	mov	r4, r2
 80188b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80188ba:	6028      	str	r0, [r5, #0]
 80188bc:	6069      	str	r1, [r5, #4]
 80188be:	60aa      	str	r2, [r5, #8]
 80188c0:	60eb      	str	r3, [r5, #12]
 80188c2:	8823      	ldrh	r3, [r4, #0]
 80188c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80188cc:	4a44      	ldr	r2, [pc, #272]	; (80189e0 <problem_fetch+0x172f8>)
 80188ce:	6810      	ldr	r0, [r2, #0]
 80188d0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2206      	movs	r2, #6
 80188d6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,G,D");
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	33a4      	adds	r3, #164	; 0xa4
 80188dc:	4a41      	ldr	r2, [pc, #260]	; (80189e4 <problem_fetch+0x172fc>)
 80188de:	461c      	mov	r4, r3
 80188e0:	4613      	mov	r3, r2
 80188e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80188e4:	6020      	str	r0, [r4, #0]
 80188e6:	6061      	str	r1, [r4, #4]
 80188e8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,15,18");
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	3304      	adds	r3, #4
 80188ee:	4a3e      	ldr	r2, [pc, #248]	; (80189e8 <problem_fetch+0x17300>)
 80188f0:	461c      	mov	r4, r3
 80188f2:	4615      	mov	r5, r2
 80188f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188f6:	6020      	str	r0, [r4, #0]
 80188f8:	6061      	str	r1, [r4, #4]
 80188fa:	60a2      	str	r2, [r4, #8]
 80188fc:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018904:	4a39      	ldr	r2, [pc, #228]	; (80189ec <problem_fetch+0x17304>)
 8018906:	461c      	mov	r4, r3
 8018908:	4613      	mov	r3, r2
 801890a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801890c:	6020      	str	r0, [r4, #0]
 801890e:	6061      	str	r1, [r4, #4]
 8018910:	60a2      	str	r2, [r4, #8]
			break;
 8018912:	f003 be19 	b.w	801c548 <problem_fetch+0x1ae60>
		case 690 :
			strcpy(p->name,"ACG49");
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801891c:	4a34      	ldr	r2, [pc, #208]	; (80189f0 <problem_fetch+0x17308>)
 801891e:	6810      	ldr	r0, [r2, #0]
 8018920:	6018      	str	r0, [r3, #0]
 8018922:	8892      	ldrh	r2, [r2, #4]
 8018924:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801892c:	4a31      	ldr	r2, [pc, #196]	; (80189f4 <problem_fetch+0x1730c>)
 801892e:	6810      	ldr	r0, [r2, #0]
 8018930:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	2208      	movs	r2, #8
 8018936:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,D,E,I,D,B,I");
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	33a4      	adds	r3, #164	; 0xa4
 801893c:	4a2e      	ldr	r2, [pc, #184]	; (80189f8 <problem_fetch+0x17310>)
 801893e:	461c      	mov	r4, r3
 8018940:	4615      	mov	r5, r2
 8018942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018944:	6020      	str	r0, [r4, #0]
 8018946:	6061      	str	r1, [r4, #4]
 8018948:	60a2      	str	r2, [r4, #8]
 801894a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,15,16,10,11,6,18");
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	3304      	adds	r3, #4
 8018950:	4a2a      	ldr	r2, [pc, #168]	; (80189fc <problem_fetch+0x17314>)
 8018952:	461d      	mov	r5, r3
 8018954:	4614      	mov	r4, r2
 8018956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018958:	6028      	str	r0, [r5, #0]
 801895a:	6069      	str	r1, [r5, #4]
 801895c:	60aa      	str	r2, [r5, #8]
 801895e:	60eb      	str	r3, [r5, #12]
 8018960:	6820      	ldr	r0, [r4, #0]
 8018962:	6128      	str	r0, [r5, #16]
 8018964:	7923      	ldrb	r3, [r4, #4]
 8018966:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801896e:	4a16      	ldr	r2, [pc, #88]	; (80189c8 <problem_fetch+0x172e0>)
 8018970:	461c      	mov	r4, r3
 8018972:	4615      	mov	r5, r2
 8018974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018976:	6020      	str	r0, [r4, #0]
 8018978:	6061      	str	r1, [r4, #4]
 801897a:	60a2      	str	r2, [r4, #8]
 801897c:	60e3      	str	r3, [r4, #12]
			break;
 801897e:	f003 bde3 	b.w	801c548 <problem_fetch+0x1ae60>
 8018982:	bf00      	nop
 8018984:	0802ba80 	.word	0x0802ba80
 8018988:	0802395c 	.word	0x0802395c
 801898c:	0802ba84 	.word	0x0802ba84
 8018990:	0802ba98 	.word	0x0802ba98
 8018994:	08024940 	.word	0x08024940
 8018998:	0802bab0 	.word	0x0802bab0
 801899c:	08023a98 	.word	0x08023a98
 80189a0:	0802babc 	.word	0x0802babc
 80189a4:	0802bac8 	.word	0x0802bac8
 80189a8:	08023e28 	.word	0x08023e28
 80189ac:	0802bad4 	.word	0x0802bad4
 80189b0:	08023a28 	.word	0x08023a28
 80189b4:	0802badc 	.word	0x0802badc
 80189b8:	08028494 	.word	0x08028494
 80189bc:	0802bae8 	.word	0x0802bae8
 80189c0:	0802baec 	.word	0x0802baec
 80189c4:	0802bafc 	.word	0x0802bafc
 80189c8:	08023a80 	.word	0x08023a80
 80189cc:	0802bb14 	.word	0x0802bb14
 80189d0:	08024190 	.word	0x08024190
 80189d4:	08027478 	.word	0x08027478
 80189d8:	080296dc 	.word	0x080296dc
 80189dc:	0802bb1c 	.word	0x0802bb1c
 80189e0:	08023afc 	.word	0x08023afc
 80189e4:	0802bb30 	.word	0x0802bb30
 80189e8:	08027b10 	.word	0x08027b10
 80189ec:	08023cf8 	.word	0x08023cf8
 80189f0:	0802bb3c 	.word	0x0802bb3c
 80189f4:	080239f4 	.word	0x080239f4
 80189f8:	0802bb44 	.word	0x0802bb44
 80189fc:	0802bb54 	.word	0x0802bb54
		case 691 :
			strcpy(p->name,"FUNKED JAM");
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a06:	49ae      	ldr	r1, [pc, #696]	; (8018cc0 <problem_fetch+0x175d8>)
 8018a08:	461a      	mov	r2, r3
 8018a0a:	460b      	mov	r3, r1
 8018a0c:	cb03      	ldmia	r3!, {r0, r1}
 8018a0e:	6010      	str	r0, [r2, #0]
 8018a10:	6051      	str	r1, [r2, #4]
 8018a12:	8819      	ldrh	r1, [r3, #0]
 8018a14:	789b      	ldrb	r3, [r3, #2]
 8018a16:	8111      	strh	r1, [r2, #8]
 8018a18:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"8A");
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a20:	4aa8      	ldr	r2, [pc, #672]	; (8018cc4 <problem_fetch+0x175dc>)
 8018a22:	8811      	ldrh	r1, [r2, #0]
 8018a24:	7892      	ldrb	r2, [r2, #2]
 8018a26:	8019      	strh	r1, [r3, #0]
 8018a28:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2208      	movs	r2, #8
 8018a2e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,D,B,G,H,C,D");
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	33a4      	adds	r3, #164	; 0xa4
 8018a34:	4aa4      	ldr	r2, [pc, #656]	; (8018cc8 <problem_fetch+0x175e0>)
 8018a36:	461c      	mov	r4, r3
 8018a38:	4615      	mov	r5, r2
 8018a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a3c:	6020      	str	r0, [r4, #0]
 8018a3e:	6061      	str	r1, [r4, #4]
 8018a40:	60a2      	str	r2, [r4, #8]
 8018a42:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,7,10,10,13,16,18");
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	3304      	adds	r3, #4
 8018a48:	4aa0      	ldr	r2, [pc, #640]	; (8018ccc <problem_fetch+0x175e4>)
 8018a4a:	461d      	mov	r5, r3
 8018a4c:	4614      	mov	r4, r2
 8018a4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018a50:	6028      	str	r0, [r5, #0]
 8018a52:	6069      	str	r1, [r5, #4]
 8018a54:	60aa      	str	r2, [r5, #8]
 8018a56:	60eb      	str	r3, [r5, #12]
 8018a58:	6820      	ldr	r0, [r4, #0]
 8018a5a:	6128      	str	r0, [r5, #16]
 8018a5c:	7923      	ldrb	r3, [r4, #4]
 8018a5e:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018a66:	4a9a      	ldr	r2, [pc, #616]	; (8018cd0 <problem_fetch+0x175e8>)
 8018a68:	461c      	mov	r4, r3
 8018a6a:	4615      	mov	r5, r2
 8018a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018a6e:	6020      	str	r0, [r4, #0]
 8018a70:	6061      	str	r1, [r4, #4]
 8018a72:	60a2      	str	r2, [r4, #8]
 8018a74:	60e3      	str	r3, [r4, #12]
			break;
 8018a76:	f003 bd67 	b.w	801c548 <problem_fetch+0x1ae60>
		case 692 :
			strcpy(p->name,"SNIFFING DOG");
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018a80:	4a94      	ldr	r2, [pc, #592]	; (8018cd4 <problem_fetch+0x175ec>)
 8018a82:	461c      	mov	r4, r3
 8018a84:	4613      	mov	r3, r2
 8018a86:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018a88:	6020      	str	r0, [r4, #0]
 8018a8a:	6061      	str	r1, [r4, #4]
 8018a8c:	60a2      	str	r2, [r4, #8]
 8018a8e:	781b      	ldrb	r3, [r3, #0]
 8018a90:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018a98:	4a8f      	ldr	r2, [pc, #572]	; (8018cd8 <problem_fetch+0x175f0>)
 8018a9a:	6810      	ldr	r0, [r2, #0]
 8018a9c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	2207      	movs	r2, #7
 8018aa2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,J,I");
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	33a4      	adds	r3, #164	; 0xa4
 8018aa8:	4a8c      	ldr	r2, [pc, #560]	; (8018cdc <problem_fetch+0x175f4>)
 8018aaa:	461c      	mov	r4, r3
 8018aac:	4613      	mov	r3, r2
 8018aae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ab0:	6020      	str	r0, [r4, #0]
 8018ab2:	6061      	str	r1, [r4, #4]
 8018ab4:	60a2      	str	r2, [r4, #8]
 8018ab6:	881b      	ldrh	r3, [r3, #0]
 8018ab8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	3304      	adds	r3, #4
 8018abe:	4a88      	ldr	r2, [pc, #544]	; (8018ce0 <problem_fetch+0x175f8>)
 8018ac0:	461d      	mov	r5, r3
 8018ac2:	4614      	mov	r4, r2
 8018ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ac6:	6028      	str	r0, [r5, #0]
 8018ac8:	6069      	str	r1, [r5, #4]
 8018aca:	60aa      	str	r2, [r5, #8]
 8018acc:	60eb      	str	r3, [r5, #12]
 8018ace:	8823      	ldrh	r3, [r4, #0]
 8018ad0:	78a2      	ldrb	r2, [r4, #2]
 8018ad2:	822b      	strh	r3, [r5, #16]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018ade:	4a81      	ldr	r2, [pc, #516]	; (8018ce4 <problem_fetch+0x175fc>)
 8018ae0:	461c      	mov	r4, r3
 8018ae2:	4613      	mov	r3, r2
 8018ae4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018ae6:	6020      	str	r0, [r4, #0]
 8018ae8:	6061      	str	r1, [r4, #4]
 8018aea:	60a2      	str	r2, [r4, #8]
 8018aec:	881b      	ldrh	r3, [r3, #0]
 8018aee:	81a3      	strh	r3, [r4, #12]
			break;
 8018af0:	f003 bd2a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 693 :
			strcpy(p->name,"ACG48");
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018afa:	4a7b      	ldr	r2, [pc, #492]	; (8018ce8 <problem_fetch+0x17600>)
 8018afc:	6810      	ldr	r0, [r2, #0]
 8018afe:	6018      	str	r0, [r3, #0]
 8018b00:	8892      	ldrh	r2, [r2, #4]
 8018b02:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b0a:	4a78      	ldr	r2, [pc, #480]	; (8018cec <problem_fetch+0x17604>)
 8018b0c:	8811      	ldrh	r1, [r2, #0]
 8018b0e:	7892      	ldrb	r2, [r2, #2]
 8018b10:	8019      	strh	r1, [r3, #0]
 8018b12:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2207      	movs	r2, #7
 8018b18:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,F,B,D,A");
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	33a4      	adds	r3, #164	; 0xa4
 8018b1e:	4a74      	ldr	r2, [pc, #464]	; (8018cf0 <problem_fetch+0x17608>)
 8018b20:	461c      	mov	r4, r3
 8018b22:	4613      	mov	r3, r2
 8018b24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b26:	6020      	str	r0, [r4, #0]
 8018b28:	6061      	str	r1, [r4, #4]
 8018b2a:	60a2      	str	r2, [r4, #8]
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,9,10,11,12,15,18");
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	3304      	adds	r3, #4
 8018b34:	4a6f      	ldr	r2, [pc, #444]	; (8018cf4 <problem_fetch+0x1760c>)
 8018b36:	461d      	mov	r5, r3
 8018b38:	4614      	mov	r4, r2
 8018b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b3c:	6028      	str	r0, [r5, #0]
 8018b3e:	6069      	str	r1, [r5, #4]
 8018b40:	60aa      	str	r2, [r5, #8]
 8018b42:	60eb      	str	r3, [r5, #12]
 8018b44:	8823      	ldrh	r3, [r4, #0]
 8018b46:	78a2      	ldrb	r2, [r4, #2]
 8018b48:	822b      	strh	r3, [r5, #16]
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018b54:	4a63      	ldr	r2, [pc, #396]	; (8018ce4 <problem_fetch+0x175fc>)
 8018b56:	461c      	mov	r4, r3
 8018b58:	4613      	mov	r3, r2
 8018b5a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b5c:	6020      	str	r0, [r4, #0]
 8018b5e:	6061      	str	r1, [r4, #4]
 8018b60:	60a2      	str	r2, [r4, #8]
 8018b62:	881b      	ldrh	r3, [r3, #0]
 8018b64:	81a3      	strh	r3, [r4, #12]
			break;
 8018b66:	f003 bcef 	b.w	801c548 <problem_fetch+0x1ae60>
		case 694 :
			strcpy(p->name,"ROCK LOBSTER");
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018b70:	4a61      	ldr	r2, [pc, #388]	; (8018cf8 <problem_fetch+0x17610>)
 8018b72:	461c      	mov	r4, r3
 8018b74:	4613      	mov	r3, r2
 8018b76:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018b78:	6020      	str	r0, [r4, #0]
 8018b7a:	6061      	str	r1, [r4, #4]
 8018b7c:	60a2      	str	r2, [r4, #8]
 8018b7e:	781b      	ldrb	r3, [r3, #0]
 8018b80:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018b88:	4a5c      	ldr	r2, [pc, #368]	; (8018cfc <problem_fetch+0x17614>)
 8018b8a:	6810      	ldr	r0, [r2, #0]
 8018b8c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	2208      	movs	r2, #8
 8018b92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,E,E,A,E,A,E,I");
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	33a4      	adds	r3, #164	; 0xa4
 8018b98:	4a59      	ldr	r2, [pc, #356]	; (8018d00 <problem_fetch+0x17618>)
 8018b9a:	461c      	mov	r4, r3
 8018b9c:	4615      	mov	r5, r2
 8018b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ba0:	6020      	str	r0, [r4, #0]
 8018ba2:	6061      	str	r1, [r4, #4]
 8018ba4:	60a2      	str	r2, [r4, #8]
 8018ba6:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,16,18");
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	3304      	adds	r3, #4
 8018bac:	4a55      	ldr	r2, [pc, #340]	; (8018d04 <problem_fetch+0x1761c>)
 8018bae:	461d      	mov	r5, r3
 8018bb0:	4614      	mov	r4, r2
 8018bb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bb4:	6028      	str	r0, [r5, #0]
 8018bb6:	6069      	str	r1, [r5, #4]
 8018bb8:	60aa      	str	r2, [r5, #8]
 8018bba:	60eb      	str	r3, [r5, #12]
 8018bbc:	6820      	ldr	r0, [r4, #0]
 8018bbe:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018bc6:	4a42      	ldr	r2, [pc, #264]	; (8018cd0 <problem_fetch+0x175e8>)
 8018bc8:	461c      	mov	r4, r3
 8018bca:	4615      	mov	r5, r2
 8018bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018bce:	6020      	str	r0, [r4, #0]
 8018bd0:	6061      	str	r1, [r4, #4]
 8018bd2:	60a2      	str	r2, [r4, #8]
 8018bd4:	60e3      	str	r3, [r4, #12]
			break;
 8018bd6:	f003 bcb7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 695 :
			strcpy(p->name,"UNKNOWN");
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018be0:	4949      	ldr	r1, [pc, #292]	; (8018d08 <problem_fetch+0x17620>)
 8018be2:	461a      	mov	r2, r3
 8018be4:	460b      	mov	r3, r1
 8018be6:	cb03      	ldmia	r3!, {r0, r1}
 8018be8:	6010      	str	r0, [r2, #0]
 8018bea:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6C+");
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018bf2:	4a42      	ldr	r2, [pc, #264]	; (8018cfc <problem_fetch+0x17614>)
 8018bf4:	6810      	ldr	r0, [r2, #0]
 8018bf6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	2208      	movs	r2, #8
 8018bfc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,H,J,E,I,D,I");
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	33a4      	adds	r3, #164	; 0xa4
 8018c02:	4a42      	ldr	r2, [pc, #264]	; (8018d0c <problem_fetch+0x17624>)
 8018c04:	461c      	mov	r4, r3
 8018c06:	4615      	mov	r5, r2
 8018c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c0a:	6020      	str	r0, [r4, #0]
 8018c0c:	6061      	str	r1, [r4, #4]
 8018c0e:	60a2      	str	r2, [r4, #8]
 8018c10:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,8,7,12,15,18,18");
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	3304      	adds	r3, #4
 8018c16:	4a3e      	ldr	r2, [pc, #248]	; (8018d10 <problem_fetch+0x17628>)
 8018c18:	461d      	mov	r5, r3
 8018c1a:	4614      	mov	r4, r2
 8018c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c1e:	6028      	str	r0, [r5, #0]
 8018c20:	6069      	str	r1, [r5, #4]
 8018c22:	60aa      	str	r2, [r5, #8]
 8018c24:	60eb      	str	r3, [r5, #12]
 8018c26:	6820      	ldr	r0, [r4, #0]
 8018c28:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e,e");
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018c30:	4a38      	ldr	r2, [pc, #224]	; (8018d14 <problem_fetch+0x1762c>)
 8018c32:	461c      	mov	r4, r3
 8018c34:	4615      	mov	r5, r2
 8018c36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018c38:	6020      	str	r0, [r4, #0]
 8018c3a:	6061      	str	r1, [r4, #4]
 8018c3c:	60a2      	str	r2, [r4, #8]
 8018c3e:	60e3      	str	r3, [r4, #12]
			break;
 8018c40:	f003 bc82 	b.w	801c548 <problem_fetch+0x1ae60>
		case 696 :
			strcpy(p->name,"ACG46");
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018c4a:	4a33      	ldr	r2, [pc, #204]	; (8018d18 <problem_fetch+0x17630>)
 8018c4c:	6810      	ldr	r0, [r2, #0]
 8018c4e:	6018      	str	r0, [r3, #0]
 8018c50:	8892      	ldrh	r2, [r2, #4]
 8018c52:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018c5a:	4a30      	ldr	r2, [pc, #192]	; (8018d1c <problem_fetch+0x17634>)
 8018c5c:	8811      	ldrh	r1, [r2, #0]
 8018c5e:	7892      	ldrb	r2, [r2, #2]
 8018c60:	8019      	strh	r1, [r3, #0]
 8018c62:	709a      	strb	r2, [r3, #2]
			p->moveSize = 10;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	220a      	movs	r2, #10
 8018c68:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,B,G,F,I,E,I,D");
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	33a4      	adds	r3, #164	; 0xa4
 8018c6e:	4a2c      	ldr	r2, [pc, #176]	; (8018d20 <problem_fetch+0x17638>)
 8018c70:	461d      	mov	r5, r3
 8018c72:	4614      	mov	r4, r2
 8018c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c76:	6028      	str	r0, [r5, #0]
 8018c78:	6069      	str	r1, [r5, #4]
 8018c7a:	60aa      	str	r2, [r5, #8]
 8018c7c:	60eb      	str	r3, [r5, #12]
 8018c7e:	6820      	ldr	r0, [r4, #0]
 8018c80:	6128      	str	r0, [r5, #16]
			strcpy(p->moveNumbers,"5,6,9,10,10,13,14,16,7,18");
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	3304      	adds	r3, #4
 8018c86:	4a27      	ldr	r2, [pc, #156]	; (8018d24 <problem_fetch+0x1763c>)
 8018c88:	461d      	mov	r5, r3
 8018c8a:	4614      	mov	r4, r2
 8018c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c8e:	6028      	str	r0, [r5, #0]
 8018c90:	6069      	str	r1, [r5, #4]
 8018c92:	60aa      	str	r2, [r5, #8]
 8018c94:	60eb      	str	r3, [r5, #12]
 8018c96:	cc03      	ldmia	r4!, {r0, r1}
 8018c98:	6128      	str	r0, [r5, #16]
 8018c9a:	6169      	str	r1, [r5, #20]
 8018c9c:	8823      	ldrh	r3, [r4, #0]
 8018c9e:	832b      	strh	r3, [r5, #24]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,e");
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018ca6:	4a20      	ldr	r2, [pc, #128]	; (8018d28 <problem_fetch+0x17640>)
 8018ca8:	461d      	mov	r5, r3
 8018caa:	4614      	mov	r4, r2
 8018cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cae:	6028      	str	r0, [r5, #0]
 8018cb0:	6069      	str	r1, [r5, #4]
 8018cb2:	60aa      	str	r2, [r5, #8]
 8018cb4:	60eb      	str	r3, [r5, #12]
 8018cb6:	6820      	ldr	r0, [r4, #0]
 8018cb8:	6128      	str	r0, [r5, #16]
			break;
 8018cba:	f003 bc45 	b.w	801c548 <problem_fetch+0x1ae60>
 8018cbe:	bf00      	nop
 8018cc0:	0802bb6c 	.word	0x0802bb6c
 8018cc4:	08025cc0 	.word	0x08025cc0
 8018cc8:	0802bb78 	.word	0x0802bb78
 8018ccc:	0802bb88 	.word	0x0802bb88
 8018cd0:	08023a80 	.word	0x08023a80
 8018cd4:	0802bba0 	.word	0x0802bba0
 8018cd8:	0802395c 	.word	0x0802395c
 8018cdc:	0802bbb0 	.word	0x0802bbb0
 8018ce0:	0802bbc0 	.word	0x0802bbc0
 8018ce4:	08023ae4 	.word	0x08023ae4
 8018ce8:	0802bbd4 	.word	0x0802bbd4
 8018cec:	0802391c 	.word	0x0802391c
 8018cf0:	0802bbdc 	.word	0x0802bbdc
 8018cf4:	0802bbec 	.word	0x0802bbec
 8018cf8:	0802bc00 	.word	0x0802bc00
 8018cfc:	080239f4 	.word	0x080239f4
 8018d00:	0802bc10 	.word	0x0802bc10
 8018d04:	0802bc20 	.word	0x0802bc20
 8018d08:	0802bc34 	.word	0x0802bc34
 8018d0c:	0802bc3c 	.word	0x0802bc3c
 8018d10:	0802bc4c 	.word	0x0802bc4c
 8018d14:	0802bc60 	.word	0x0802bc60
 8018d18:	0802bc70 	.word	0x0802bc70
 8018d1c:	08023a28 	.word	0x08023a28
 8018d20:	0802bc78 	.word	0x0802bc78
 8018d24:	0802bc8c 	.word	0x0802bc8c
 8018d28:	08024204 	.word	0x08024204
		case 697 :
			strcpy(p->name,"GS VR #1");
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018d32:	49bf      	ldr	r1, [pc, #764]	; (8019030 <problem_fetch+0x17948>)
 8018d34:	461a      	mov	r2, r3
 8018d36:	460b      	mov	r3, r1
 8018d38:	cb03      	ldmia	r3!, {r0, r1}
 8018d3a:	6010      	str	r0, [r2, #0]
 8018d3c:	6051      	str	r1, [r2, #4]
 8018d3e:	781b      	ldrb	r3, [r3, #0]
 8018d40:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018d48:	4aba      	ldr	r2, [pc, #744]	; (8019034 <problem_fetch+0x1794c>)
 8018d4a:	6810      	ldr	r0, [r2, #0]
 8018d4c:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	2208      	movs	r2, #8
 8018d52:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,B,E,C,E,D");
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	33a4      	adds	r3, #164	; 0xa4
 8018d58:	4ab7      	ldr	r2, [pc, #732]	; (8019038 <problem_fetch+0x17950>)
 8018d5a:	461c      	mov	r4, r3
 8018d5c:	4615      	mov	r5, r2
 8018d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d60:	6020      	str	r0, [r4, #0]
 8018d62:	6061      	str	r1, [r4, #4]
 8018d64:	60a2      	str	r2, [r4, #8]
 8018d66:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,10,12,13,16,18");
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	3304      	adds	r3, #4
 8018d6c:	4ab3      	ldr	r2, [pc, #716]	; (801903c <problem_fetch+0x17954>)
 8018d6e:	461d      	mov	r5, r3
 8018d70:	4614      	mov	r4, r2
 8018d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d74:	6028      	str	r0, [r5, #0]
 8018d76:	6069      	str	r1, [r5, #4]
 8018d78:	60aa      	str	r2, [r5, #8]
 8018d7a:	60eb      	str	r3, [r5, #12]
 8018d7c:	6820      	ldr	r0, [r4, #0]
 8018d7e:	6128      	str	r0, [r5, #16]
 8018d80:	7923      	ldrb	r3, [r4, #4]
 8018d82:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018d8a:	4aad      	ldr	r2, [pc, #692]	; (8019040 <problem_fetch+0x17958>)
 8018d8c:	461c      	mov	r4, r3
 8018d8e:	4615      	mov	r5, r2
 8018d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d92:	6020      	str	r0, [r4, #0]
 8018d94:	6061      	str	r1, [r4, #4]
 8018d96:	60a2      	str	r2, [r4, #8]
 8018d98:	60e3      	str	r3, [r4, #12]
			break;
 8018d9a:	f003 bbd5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 698 :
			strcpy(p->name,"COLPA DEL NONNO");
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018da4:	4aa7      	ldr	r2, [pc, #668]	; (8019044 <problem_fetch+0x1795c>)
 8018da6:	461c      	mov	r4, r3
 8018da8:	4615      	mov	r5, r2
 8018daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dac:	6020      	str	r0, [r4, #0]
 8018dae:	6061      	str	r1, [r4, #4]
 8018db0:	60a2      	str	r2, [r4, #8]
 8018db2:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018dba:	4a9e      	ldr	r2, [pc, #632]	; (8019034 <problem_fetch+0x1794c>)
 8018dbc:	6810      	ldr	r0, [r2, #0]
 8018dbe:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	2207      	movs	r2, #7
 8018dc4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,B,E,B,D");
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	33a4      	adds	r3, #164	; 0xa4
 8018dca:	4a9f      	ldr	r2, [pc, #636]	; (8019048 <problem_fetch+0x17960>)
 8018dcc:	461c      	mov	r4, r3
 8018dce:	4613      	mov	r3, r2
 8018dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018dd2:	6020      	str	r0, [r4, #0]
 8018dd4:	6061      	str	r1, [r4, #4]
 8018dd6:	60a2      	str	r2, [r4, #8]
 8018dd8:	881b      	ldrh	r3, [r3, #0]
 8018dda:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,14,15,18");
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	3304      	adds	r3, #4
 8018de0:	4a9a      	ldr	r2, [pc, #616]	; (801904c <problem_fetch+0x17964>)
 8018de2:	461d      	mov	r5, r3
 8018de4:	4614      	mov	r4, r2
 8018de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018de8:	6028      	str	r0, [r5, #0]
 8018dea:	6069      	str	r1, [r5, #4]
 8018dec:	60aa      	str	r2, [r5, #8]
 8018dee:	60eb      	str	r3, [r5, #12]
 8018df0:	8823      	ldrh	r3, [r4, #0]
 8018df2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018dfa:	4a95      	ldr	r2, [pc, #596]	; (8019050 <problem_fetch+0x17968>)
 8018dfc:	461c      	mov	r4, r3
 8018dfe:	4613      	mov	r3, r2
 8018e00:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e02:	6020      	str	r0, [r4, #0]
 8018e04:	6061      	str	r1, [r4, #4]
 8018e06:	60a2      	str	r2, [r4, #8]
 8018e08:	881b      	ldrh	r3, [r3, #0]
 8018e0a:	81a3      	strh	r3, [r4, #12]
			break;
 8018e0c:	f003 bb9c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 699 :
			strcpy(p->name,"LIP GRIP");
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e16:	498f      	ldr	r1, [pc, #572]	; (8019054 <problem_fetch+0x1796c>)
 8018e18:	461a      	mov	r2, r3
 8018e1a:	460b      	mov	r3, r1
 8018e1c:	cb03      	ldmia	r3!, {r0, r1}
 8018e1e:	6010      	str	r0, [r2, #0]
 8018e20:	6051      	str	r1, [r2, #4]
 8018e22:	781b      	ldrb	r3, [r3, #0]
 8018e24:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A+");
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e2c:	4a8a      	ldr	r2, [pc, #552]	; (8019058 <problem_fetch+0x17970>)
 8018e2e:	6810      	ldr	r0, [r2, #0]
 8018e30:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2206      	movs	r2, #6
 8018e36:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,K,I");
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	33a4      	adds	r3, #164	; 0xa4
 8018e3c:	4a87      	ldr	r2, [pc, #540]	; (801905c <problem_fetch+0x17974>)
 8018e3e:	461c      	mov	r4, r3
 8018e40:	4613      	mov	r3, r2
 8018e42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e44:	6020      	str	r0, [r4, #0]
 8018e46:	6061      	str	r1, [r4, #4]
 8018e48:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,4,9,13,14,18");
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	3304      	adds	r3, #4
 8018e4e:	4a84      	ldr	r2, [pc, #528]	; (8019060 <problem_fetch+0x17978>)
 8018e50:	461c      	mov	r4, r3
 8018e52:	4613      	mov	r3, r2
 8018e54:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e56:	6020      	str	r0, [r4, #0]
 8018e58:	6061      	str	r1, [r4, #4]
 8018e5a:	60a2      	str	r2, [r4, #8]
 8018e5c:	881a      	ldrh	r2, [r3, #0]
 8018e5e:	789b      	ldrb	r3, [r3, #2]
 8018e60:	81a2      	strh	r2, [r4, #12]
 8018e62:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018e6a:	4a7e      	ldr	r2, [pc, #504]	; (8019064 <problem_fetch+0x1797c>)
 8018e6c:	461c      	mov	r4, r3
 8018e6e:	4613      	mov	r3, r2
 8018e70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018e72:	6020      	str	r0, [r4, #0]
 8018e74:	6061      	str	r1, [r4, #4]
 8018e76:	60a2      	str	r2, [r4, #8]
			break;
 8018e78:	f003 bb66 	b.w	801c548 <problem_fetch+0x1ae60>
		case 700 :
			strcpy(p->name,"ACG43");
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018e82:	4a79      	ldr	r2, [pc, #484]	; (8019068 <problem_fetch+0x17980>)
 8018e84:	6810      	ldr	r0, [r2, #0]
 8018e86:	6018      	str	r0, [r3, #0]
 8018e88:	8892      	ldrh	r2, [r2, #4]
 8018e8a:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018e92:	4a76      	ldr	r2, [pc, #472]	; (801906c <problem_fetch+0x17984>)
 8018e94:	6810      	ldr	r0, [r2, #0]
 8018e96:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2208      	movs	r2, #8
 8018e9c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,D,E,A,A,B,D");
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	33a4      	adds	r3, #164	; 0xa4
 8018ea2:	4a73      	ldr	r2, [pc, #460]	; (8019070 <problem_fetch+0x17988>)
 8018ea4:	461c      	mov	r4, r3
 8018ea6:	4615      	mov	r5, r2
 8018ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018eaa:	6020      	str	r0, [r4, #0]
 8018eac:	6061      	str	r1, [r4, #4]
 8018eae:	60a2      	str	r2, [r4, #8]
 8018eb0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,14,14,9,6,18");
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	3304      	adds	r3, #4
 8018eb6:	4a6f      	ldr	r2, [pc, #444]	; (8019074 <problem_fetch+0x1798c>)
 8018eb8:	461d      	mov	r5, r3
 8018eba:	4614      	mov	r4, r2
 8018ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ebe:	6028      	str	r0, [r5, #0]
 8018ec0:	6069      	str	r1, [r5, #4]
 8018ec2:	60aa      	str	r2, [r5, #8]
 8018ec4:	60eb      	str	r3, [r5, #12]
 8018ec6:	6820      	ldr	r0, [r4, #0]
 8018ec8:	6128      	str	r0, [r5, #16]
 8018eca:	7923      	ldrb	r3, [r4, #4]
 8018ecc:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018ed4:	4a68      	ldr	r2, [pc, #416]	; (8019078 <problem_fetch+0x17990>)
 8018ed6:	461c      	mov	r4, r3
 8018ed8:	4615      	mov	r5, r2
 8018eda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018edc:	6020      	str	r0, [r4, #0]
 8018ede:	6061      	str	r1, [r4, #4]
 8018ee0:	60a2      	str	r2, [r4, #8]
 8018ee2:	60e3      	str	r3, [r4, #12]
			break;
 8018ee4:	f003 bb30 	b.w	801c548 <problem_fetch+0x1ae60>
		case 701 :
			strcpy(p->name,"AB1");
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018eee:	4a63      	ldr	r2, [pc, #396]	; (801907c <problem_fetch+0x17994>)
 8018ef0:	6810      	ldr	r0, [r2, #0]
 8018ef2:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018efa:	4a4e      	ldr	r2, [pc, #312]	; (8019034 <problem_fetch+0x1794c>)
 8018efc:	6810      	ldr	r0, [r2, #0]
 8018efe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2208      	movs	r2, #8
 8018f04:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,A,E,A,D,A");
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	33a4      	adds	r3, #164	; 0xa4
 8018f0a:	4a5d      	ldr	r2, [pc, #372]	; (8019080 <problem_fetch+0x17998>)
 8018f0c:	461c      	mov	r4, r3
 8018f0e:	4615      	mov	r5, r2
 8018f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f12:	6020      	str	r0, [r4, #0]
 8018f14:	6061      	str	r1, [r4, #4]
 8018f16:	60a2      	str	r2, [r4, #8]
 8018f18:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,9,12,14,15,18");
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	3304      	adds	r3, #4
 8018f1e:	4a59      	ldr	r2, [pc, #356]	; (8019084 <problem_fetch+0x1799c>)
 8018f20:	461d      	mov	r5, r3
 8018f22:	4614      	mov	r4, r2
 8018f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f26:	6028      	str	r0, [r5, #0]
 8018f28:	6069      	str	r1, [r5, #4]
 8018f2a:	60aa      	str	r2, [r5, #8]
 8018f2c:	60eb      	str	r3, [r5, #12]
 8018f2e:	6820      	ldr	r0, [r4, #0]
 8018f30:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018f38:	4a41      	ldr	r2, [pc, #260]	; (8019040 <problem_fetch+0x17958>)
 8018f3a:	461c      	mov	r4, r3
 8018f3c:	4615      	mov	r5, r2
 8018f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f40:	6020      	str	r0, [r4, #0]
 8018f42:	6061      	str	r1, [r4, #4]
 8018f44:	60a2      	str	r2, [r4, #8]
 8018f46:	60e3      	str	r3, [r4, #12]
			break;
 8018f48:	f003 bafe 	b.w	801c548 <problem_fetch+0x1ae60>
		case 702 :
			strcpy(p->name,"CAROLYN");
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018f52:	494d      	ldr	r1, [pc, #308]	; (8019088 <problem_fetch+0x179a0>)
 8018f54:	461a      	mov	r2, r3
 8018f56:	460b      	mov	r3, r1
 8018f58:	cb03      	ldmia	r3!, {r0, r1}
 8018f5a:	6010      	str	r0, [r2, #0]
 8018f5c:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018f64:	4a33      	ldr	r2, [pc, #204]	; (8019034 <problem_fetch+0x1794c>)
 8018f66:	6810      	ldr	r0, [r2, #0]
 8018f68:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	2207      	movs	r2, #7
 8018f6e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,I,G,I");
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	33a4      	adds	r3, #164	; 0xa4
 8018f74:	4a45      	ldr	r2, [pc, #276]	; (801908c <problem_fetch+0x179a4>)
 8018f76:	461c      	mov	r4, r3
 8018f78:	4613      	mov	r3, r2
 8018f7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018f7c:	6020      	str	r0, [r4, #0]
 8018f7e:	6061      	str	r1, [r4, #4]
 8018f80:	60a2      	str	r2, [r4, #8]
 8018f82:	881b      	ldrh	r3, [r3, #0]
 8018f84:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,14,17,18");
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	3304      	adds	r3, #4
 8018f8a:	4a41      	ldr	r2, [pc, #260]	; (8019090 <problem_fetch+0x179a8>)
 8018f8c:	461d      	mov	r5, r3
 8018f8e:	4614      	mov	r4, r2
 8018f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f92:	6028      	str	r0, [r5, #0]
 8018f94:	6069      	str	r1, [r5, #4]
 8018f96:	60aa      	str	r2, [r5, #8]
 8018f98:	60eb      	str	r3, [r5, #12]
 8018f9a:	8823      	ldrh	r3, [r4, #0]
 8018f9c:	78a2      	ldrb	r2, [r4, #2]
 8018f9e:	822b      	strh	r3, [r5, #16]
 8018fa0:	4613      	mov	r3, r2
 8018fa2:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8018faa:	4a3a      	ldr	r2, [pc, #232]	; (8019094 <problem_fetch+0x179ac>)
 8018fac:	461c      	mov	r4, r3
 8018fae:	4613      	mov	r3, r2
 8018fb0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8018fb2:	6020      	str	r0, [r4, #0]
 8018fb4:	6061      	str	r1, [r4, #4]
 8018fb6:	60a2      	str	r2, [r4, #8]
 8018fb8:	881b      	ldrh	r3, [r3, #0]
 8018fba:	81a3      	strh	r3, [r4, #12]
			break;
 8018fbc:	f003 bac4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 703 :
			strcpy(p->name,"ACG37");
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8018fc6:	4a34      	ldr	r2, [pc, #208]	; (8019098 <problem_fetch+0x179b0>)
 8018fc8:	6810      	ldr	r0, [r2, #0]
 8018fca:	6018      	str	r0, [r3, #0]
 8018fcc:	8892      	ldrh	r2, [r2, #4]
 8018fce:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A");
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8018fd6:	4a31      	ldr	r2, [pc, #196]	; (801909c <problem_fetch+0x179b4>)
 8018fd8:	8811      	ldrh	r1, [r2, #0]
 8018fda:	7892      	ldrb	r2, [r2, #2]
 8018fdc:	8019      	strh	r1, [r3, #0]
 8018fde:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2208      	movs	r2, #8
 8018fe4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,G,C,C,A");
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	33a4      	adds	r3, #164	; 0xa4
 8018fea:	4a2d      	ldr	r2, [pc, #180]	; (80190a0 <problem_fetch+0x179b8>)
 8018fec:	461c      	mov	r4, r3
 8018fee:	4615      	mov	r5, r2
 8018ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018ff2:	6020      	str	r0, [r4, #0]
 8018ff4:	6061      	str	r1, [r4, #4]
 8018ff6:	60a2      	str	r2, [r4, #8]
 8018ff8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,14,16,13,18");
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	3304      	adds	r3, #4
 8018ffe:	4a29      	ldr	r2, [pc, #164]	; (80190a4 <problem_fetch+0x179bc>)
 8019000:	461d      	mov	r5, r3
 8019002:	4614      	mov	r4, r2
 8019004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019006:	6028      	str	r0, [r5, #0]
 8019008:	6069      	str	r1, [r5, #4]
 801900a:	60aa      	str	r2, [r5, #8]
 801900c:	60eb      	str	r3, [r5, #12]
 801900e:	6820      	ldr	r0, [r4, #0]
 8019010:	6128      	str	r0, [r5, #16]
 8019012:	88a3      	ldrh	r3, [r4, #4]
 8019014:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801901c:	4a16      	ldr	r2, [pc, #88]	; (8019078 <problem_fetch+0x17990>)
 801901e:	461c      	mov	r4, r3
 8019020:	4615      	mov	r5, r2
 8019022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019024:	6020      	str	r0, [r4, #0]
 8019026:	6061      	str	r1, [r4, #4]
 8019028:	60a2      	str	r2, [r4, #8]
 801902a:	60e3      	str	r3, [r4, #12]
			break;
 801902c:	f003 ba8c 	b.w	801c548 <problem_fetch+0x1ae60>
 8019030:	0802bca8 	.word	0x0802bca8
 8019034:	0802395c 	.word	0x0802395c
 8019038:	0802bcb4 	.word	0x0802bcb4
 801903c:	0802bcc4 	.word	0x0802bcc4
 8019040:	08023a80 	.word	0x08023a80
 8019044:	0802bcdc 	.word	0x0802bcdc
 8019048:	08029c50 	.word	0x08029c50
 801904c:	0802bcec 	.word	0x0802bcec
 8019050:	080239d4 	.word	0x080239d4
 8019054:	0802bd00 	.word	0x0802bd00
 8019058:	08023afc 	.word	0x08023afc
 801905c:	0802bd0c 	.word	0x0802bd0c
 8019060:	0802bd18 	.word	0x0802bd18
 8019064:	08023cf8 	.word	0x08023cf8
 8019068:	0802bd28 	.word	0x0802bd28
 801906c:	080239f4 	.word	0x080239f4
 8019070:	0802bd30 	.word	0x0802bd30
 8019074:	0802bd40 	.word	0x0802bd40
 8019078:	08023b6c 	.word	0x08023b6c
 801907c:	0802bd58 	.word	0x0802bd58
 8019080:	0802bd5c 	.word	0x0802bd5c
 8019084:	0802bd6c 	.word	0x0802bd6c
 8019088:	0802bd80 	.word	0x0802bd80
 801908c:	0802bd88 	.word	0x0802bd88
 8019090:	08026344 	.word	0x08026344
 8019094:	08023ae4 	.word	0x08023ae4
 8019098:	0802bd98 	.word	0x0802bd98
 801909c:	0802391c 	.word	0x0802391c
 80190a0:	0802bda0 	.word	0x0802bda0
 80190a4:	0802bdb0 	.word	0x0802bdb0
		case 704 :
			strcpy(p->name,"BATTLE OF THE PUDGE");
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80190ae:	4abc      	ldr	r2, [pc, #752]	; (80193a0 <problem_fetch+0x17cb8>)
 80190b0:	461d      	mov	r5, r3
 80190b2:	4614      	mov	r4, r2
 80190b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190b6:	6028      	str	r0, [r5, #0]
 80190b8:	6069      	str	r1, [r5, #4]
 80190ba:	60aa      	str	r2, [r5, #8]
 80190bc:	60eb      	str	r3, [r5, #12]
 80190be:	6820      	ldr	r0, [r4, #0]
 80190c0:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80190c8:	4ab6      	ldr	r2, [pc, #728]	; (80193a4 <problem_fetch+0x17cbc>)
 80190ca:	6810      	ldr	r0, [r2, #0]
 80190cc:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	2207      	movs	r2, #7
 80190d2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,C,D,E,E,H,I");
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	33a4      	adds	r3, #164	; 0xa4
 80190d8:	4ab3      	ldr	r2, [pc, #716]	; (80193a8 <problem_fetch+0x17cc0>)
 80190da:	461c      	mov	r4, r3
 80190dc:	4613      	mov	r3, r2
 80190de:	cb07      	ldmia	r3!, {r0, r1, r2}
 80190e0:	6020      	str	r0, [r4, #0]
 80190e2:	6061      	str	r1, [r4, #4]
 80190e4:	60a2      	str	r2, [r4, #8]
 80190e6:	881b      	ldrh	r3, [r3, #0]
 80190e8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"18,5,11,8,16,5,10");
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	3304      	adds	r3, #4
 80190ee:	4aaf      	ldr	r2, [pc, #700]	; (80193ac <problem_fetch+0x17cc4>)
 80190f0:	461d      	mov	r5, r3
 80190f2:	4614      	mov	r4, r2
 80190f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190f6:	6028      	str	r0, [r5, #0]
 80190f8:	6069      	str	r1, [r5, #4]
 80190fa:	60aa      	str	r2, [r5, #8]
 80190fc:	60eb      	str	r3, [r5, #12]
 80190fe:	8823      	ldrh	r3, [r4, #0]
 8019100:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"e,s,d,d,d,s,d");
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019108:	4aa9      	ldr	r2, [pc, #676]	; (80193b0 <problem_fetch+0x17cc8>)
 801910a:	461c      	mov	r4, r3
 801910c:	4613      	mov	r3, r2
 801910e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019110:	6020      	str	r0, [r4, #0]
 8019112:	6061      	str	r1, [r4, #4]
 8019114:	60a2      	str	r2, [r4, #8]
 8019116:	881b      	ldrh	r3, [r3, #0]
 8019118:	81a3      	strh	r3, [r4, #12]
			break;
 801911a:	f003 ba15 	b.w	801c548 <problem_fetch+0x1ae60>
		case 705 :
			strcpy(p->name,"THIS IS NOW...");
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019124:	4aa3      	ldr	r2, [pc, #652]	; (80193b4 <problem_fetch+0x17ccc>)
 8019126:	461c      	mov	r4, r3
 8019128:	4613      	mov	r3, r2
 801912a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801912c:	6020      	str	r0, [r4, #0]
 801912e:	6061      	str	r1, [r4, #4]
 8019130:	60a2      	str	r2, [r4, #8]
 8019132:	881a      	ldrh	r2, [r3, #0]
 8019134:	789b      	ldrb	r3, [r3, #2]
 8019136:	81a2      	strh	r2, [r4, #12]
 8019138:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"6C+");
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019140:	4a9d      	ldr	r2, [pc, #628]	; (80193b8 <problem_fetch+0x17cd0>)
 8019142:	6810      	ldr	r0, [r2, #0]
 8019144:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2206      	movs	r2, #6
 801914a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,I,E,D,B,D");
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	33a4      	adds	r3, #164	; 0xa4
 8019150:	4a9a      	ldr	r2, [pc, #616]	; (80193bc <problem_fetch+0x17cd4>)
 8019152:	461c      	mov	r4, r3
 8019154:	4613      	mov	r3, r2
 8019156:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019158:	6020      	str	r0, [r4, #0]
 801915a:	6061      	str	r1, [r4, #4]
 801915c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,12,15,15,18");
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	3304      	adds	r3, #4
 8019162:	4a97      	ldr	r2, [pc, #604]	; (80193c0 <problem_fetch+0x17cd8>)
 8019164:	461d      	mov	r5, r3
 8019166:	4614      	mov	r4, r2
 8019168:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801916a:	6028      	str	r0, [r5, #0]
 801916c:	6069      	str	r1, [r5, #4]
 801916e:	60aa      	str	r2, [r5, #8]
 8019170:	60eb      	str	r3, [r5, #12]
 8019172:	7823      	ldrb	r3, [r4, #0]
 8019174:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801917c:	4a91      	ldr	r2, [pc, #580]	; (80193c4 <problem_fetch+0x17cdc>)
 801917e:	461c      	mov	r4, r3
 8019180:	4613      	mov	r3, r2
 8019182:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019184:	6020      	str	r0, [r4, #0]
 8019186:	6061      	str	r1, [r4, #4]
 8019188:	60a2      	str	r2, [r4, #8]
			break;
 801918a:	f003 b9dd 	b.w	801c548 <problem_fetch+0x1ae60>
		case 706 :
			strcpy(p->name,"ACG31");
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019194:	4a8c      	ldr	r2, [pc, #560]	; (80193c8 <problem_fetch+0x17ce0>)
 8019196:	6810      	ldr	r0, [r2, #0]
 8019198:	6018      	str	r0, [r3, #0]
 801919a:	8892      	ldrh	r2, [r2, #4]
 801919c:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C+");
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80191a4:	4a84      	ldr	r2, [pc, #528]	; (80193b8 <problem_fetch+0x17cd0>)
 80191a6:	6810      	ldr	r0, [r2, #0]
 80191a8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	2206      	movs	r2, #6
 80191ae:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,H,C,E,A");
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	33a4      	adds	r3, #164	; 0xa4
 80191b4:	4a85      	ldr	r2, [pc, #532]	; (80193cc <problem_fetch+0x17ce4>)
 80191b6:	461c      	mov	r4, r3
 80191b8:	4613      	mov	r3, r2
 80191ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80191bc:	6020      	str	r0, [r4, #0]
 80191be:	6061      	str	r1, [r4, #4]
 80191c0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,10,13,13,16,18");
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	3304      	adds	r3, #4
 80191c6:	4a82      	ldr	r2, [pc, #520]	; (80193d0 <problem_fetch+0x17ce8>)
 80191c8:	461d      	mov	r5, r3
 80191ca:	4614      	mov	r4, r2
 80191cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80191ce:	6028      	str	r0, [r5, #0]
 80191d0:	6069      	str	r1, [r5, #4]
 80191d2:	60aa      	str	r2, [r5, #8]
 80191d4:	60eb      	str	r3, [r5, #12]
 80191d6:	7823      	ldrb	r3, [r4, #0]
 80191d8:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80191e0:	4a78      	ldr	r2, [pc, #480]	; (80193c4 <problem_fetch+0x17cdc>)
 80191e2:	461c      	mov	r4, r3
 80191e4:	4613      	mov	r3, r2
 80191e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80191e8:	6020      	str	r0, [r4, #0]
 80191ea:	6061      	str	r1, [r4, #4]
 80191ec:	60a2      	str	r2, [r4, #8]
			break;
 80191ee:	f003 b9ab 	b.w	801c548 <problem_fetch+0x1ae60>
		case 707 :
			strcpy(p->name,"ACG30");
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80191f8:	4a76      	ldr	r2, [pc, #472]	; (80193d4 <problem_fetch+0x17cec>)
 80191fa:	6810      	ldr	r0, [r2, #0]
 80191fc:	6018      	str	r0, [r3, #0]
 80191fe:	8892      	ldrh	r2, [r2, #4]
 8019200:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019208:	4a73      	ldr	r2, [pc, #460]	; (80193d8 <problem_fetch+0x17cf0>)
 801920a:	8811      	ldrh	r1, [r2, #0]
 801920c:	7892      	ldrb	r2, [r2, #2]
 801920e:	8019      	strh	r1, [r3, #0]
 8019210:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	2208      	movs	r2, #8
 8019216:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,E,F,G,G,I,I");
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	33a4      	adds	r3, #164	; 0xa4
 801921c:	4a6f      	ldr	r2, [pc, #444]	; (80193dc <problem_fetch+0x17cf4>)
 801921e:	461c      	mov	r4, r3
 8019220:	4615      	mov	r5, r2
 8019222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019224:	6020      	str	r0, [r4, #0]
 8019226:	6061      	str	r1, [r4, #4]
 8019228:	60a2      	str	r2, [r4, #8]
 801922a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,11,8,11,6,15,14,18");
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	3304      	adds	r3, #4
 8019230:	4a6b      	ldr	r2, [pc, #428]	; (80193e0 <problem_fetch+0x17cf8>)
 8019232:	461d      	mov	r5, r3
 8019234:	4614      	mov	r4, r2
 8019236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019238:	6028      	str	r0, [r5, #0]
 801923a:	6069      	str	r1, [r5, #4]
 801923c:	60aa      	str	r2, [r5, #8]
 801923e:	60eb      	str	r3, [r5, #12]
 8019240:	6820      	ldr	r0, [r4, #0]
 8019242:	6128      	str	r0, [r5, #16]
 8019244:	7923      	ldrb	r3, [r4, #4]
 8019246:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,s,d,d,e");
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801924e:	4a65      	ldr	r2, [pc, #404]	; (80193e4 <problem_fetch+0x17cfc>)
 8019250:	461c      	mov	r4, r3
 8019252:	4615      	mov	r5, r2
 8019254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019256:	6020      	str	r0, [r4, #0]
 8019258:	6061      	str	r1, [r4, #4]
 801925a:	60a2      	str	r2, [r4, #8]
 801925c:	60e3      	str	r3, [r4, #12]
			break;
 801925e:	f003 b973 	b.w	801c548 <problem_fetch+0x1ae60>
		case 708 :
			strcpy(p->name,"ACG29");
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019268:	4a5f      	ldr	r2, [pc, #380]	; (80193e8 <problem_fetch+0x17d00>)
 801926a:	6810      	ldr	r0, [r2, #0]
 801926c:	6018      	str	r0, [r3, #0]
 801926e:	8892      	ldrh	r2, [r2, #4]
 8019270:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019278:	4a57      	ldr	r2, [pc, #348]	; (80193d8 <problem_fetch+0x17cf0>)
 801927a:	8811      	ldrh	r1, [r2, #0]
 801927c:	7892      	ldrb	r2, [r2, #2]
 801927e:	8019      	strh	r1, [r3, #0]
 8019280:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	2207      	movs	r2, #7
 8019286:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,F,E,H,D");
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	33a4      	adds	r3, #164	; 0xa4
 801928c:	4a57      	ldr	r2, [pc, #348]	; (80193ec <problem_fetch+0x17d04>)
 801928e:	461c      	mov	r4, r3
 8019290:	4613      	mov	r3, r2
 8019292:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019294:	6020      	str	r0, [r4, #0]
 8019296:	6061      	str	r1, [r4, #4]
 8019298:	60a2      	str	r2, [r4, #8]
 801929a:	881b      	ldrh	r3, [r3, #0]
 801929c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,11,14,16,18");
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	3304      	adds	r3, #4
 80192a2:	4a53      	ldr	r2, [pc, #332]	; (80193f0 <problem_fetch+0x17d08>)
 80192a4:	461d      	mov	r5, r3
 80192a6:	4614      	mov	r4, r2
 80192a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80192aa:	6028      	str	r0, [r5, #0]
 80192ac:	6069      	str	r1, [r5, #4]
 80192ae:	60aa      	str	r2, [r5, #8]
 80192b0:	60eb      	str	r3, [r5, #12]
 80192b2:	8823      	ldrh	r3, [r4, #0]
 80192b4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80192bc:	4a4d      	ldr	r2, [pc, #308]	; (80193f4 <problem_fetch+0x17d0c>)
 80192be:	461c      	mov	r4, r3
 80192c0:	4613      	mov	r3, r2
 80192c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80192c4:	6020      	str	r0, [r4, #0]
 80192c6:	6061      	str	r1, [r4, #4]
 80192c8:	60a2      	str	r2, [r4, #8]
 80192ca:	881b      	ldrh	r3, [r3, #0]
 80192cc:	81a3      	strh	r3, [r4, #12]
			break;
 80192ce:	f003 b93b 	b.w	801c548 <problem_fetch+0x1ae60>
		case 709 :
			strcpy(p->name,"L9");
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80192d8:	4a47      	ldr	r2, [pc, #284]	; (80193f8 <problem_fetch+0x17d10>)
 80192da:	8811      	ldrh	r1, [r2, #0]
 80192dc:	7892      	ldrb	r2, [r2, #2]
 80192de:	8019      	strh	r1, [r3, #0]
 80192e0:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80192e8:	4a44      	ldr	r2, [pc, #272]	; (80193fc <problem_fetch+0x17d14>)
 80192ea:	6810      	ldr	r0, [r2, #0]
 80192ec:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	2206      	movs	r2, #6
 80192f2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,E,C,D");
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	33a4      	adds	r3, #164	; 0xa4
 80192f8:	4a41      	ldr	r2, [pc, #260]	; (8019400 <problem_fetch+0x17d18>)
 80192fa:	461c      	mov	r4, r3
 80192fc:	4613      	mov	r3, r2
 80192fe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019300:	6020      	str	r0, [r4, #0]
 8019302:	6061      	str	r1, [r4, #4]
 8019304:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,13,18");
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	3304      	adds	r3, #4
 801930a:	4a3e      	ldr	r2, [pc, #248]	; (8019404 <problem_fetch+0x17d1c>)
 801930c:	461c      	mov	r4, r3
 801930e:	4613      	mov	r3, r2
 8019310:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019312:	6020      	str	r0, [r4, #0]
 8019314:	6061      	str	r1, [r4, #4]
 8019316:	60a2      	str	r2, [r4, #8]
 8019318:	881a      	ldrh	r2, [r3, #0]
 801931a:	789b      	ldrb	r3, [r3, #2]
 801931c:	81a2      	strh	r2, [r4, #12]
 801931e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019326:	4a27      	ldr	r2, [pc, #156]	; (80193c4 <problem_fetch+0x17cdc>)
 8019328:	461c      	mov	r4, r3
 801932a:	4613      	mov	r3, r2
 801932c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801932e:	6020      	str	r0, [r4, #0]
 8019330:	6061      	str	r1, [r4, #4]
 8019332:	60a2      	str	r2, [r4, #8]
			break;
 8019334:	f003 b908 	b.w	801c548 <problem_fetch+0x1ae60>
		case 710 :
			strcpy(p->name,"FLAPODROM");
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801933e:	4932      	ldr	r1, [pc, #200]	; (8019408 <problem_fetch+0x17d20>)
 8019340:	461a      	mov	r2, r3
 8019342:	460b      	mov	r3, r1
 8019344:	cb03      	ldmia	r3!, {r0, r1}
 8019346:	6010      	str	r0, [r2, #0]
 8019348:	6051      	str	r1, [r2, #4]
 801934a:	881b      	ldrh	r3, [r3, #0]
 801934c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019354:	4a18      	ldr	r2, [pc, #96]	; (80193b8 <problem_fetch+0x17cd0>)
 8019356:	6810      	ldr	r0, [r2, #0]
 8019358:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	2206      	movs	r2, #6
 801935e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,H,E,I,I");
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	33a4      	adds	r3, #164	; 0xa4
 8019364:	4a29      	ldr	r2, [pc, #164]	; (801940c <problem_fetch+0x17d24>)
 8019366:	461c      	mov	r4, r3
 8019368:	4613      	mov	r3, r2
 801936a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801936c:	6020      	str	r0, [r4, #0]
 801936e:	6061      	str	r1, [r4, #4]
 8019370:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	3304      	adds	r3, #4
 8019376:	4a26      	ldr	r2, [pc, #152]	; (8019410 <problem_fetch+0x17d28>)
 8019378:	461c      	mov	r4, r3
 801937a:	4615      	mov	r5, r2
 801937c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801937e:	6020      	str	r0, [r4, #0]
 8019380:	6061      	str	r1, [r4, #4]
 8019382:	60a2      	str	r2, [r4, #8]
 8019384:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801938c:	4a21      	ldr	r2, [pc, #132]	; (8019414 <problem_fetch+0x17d2c>)
 801938e:	461c      	mov	r4, r3
 8019390:	4613      	mov	r3, r2
 8019392:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019394:	6020      	str	r0, [r4, #0]
 8019396:	6061      	str	r1, [r4, #4]
 8019398:	60a2      	str	r2, [r4, #8]
			break;
 801939a:	f003 b8d5 	b.w	801c548 <problem_fetch+0x1ae60>
 801939e:	bf00      	nop
 80193a0:	0802bdc8 	.word	0x0802bdc8
 80193a4:	08023afc 	.word	0x08023afc
 80193a8:	0802bddc 	.word	0x0802bddc
 80193ac:	0802bdec 	.word	0x0802bdec
 80193b0:	0802be00 	.word	0x0802be00
 80193b4:	0802be10 	.word	0x0802be10
 80193b8:	080239f4 	.word	0x080239f4
 80193bc:	0802be20 	.word	0x0802be20
 80193c0:	0802be2c 	.word	0x0802be2c
 80193c4:	08023cf8 	.word	0x08023cf8
 80193c8:	0802be40 	.word	0x0802be40
 80193cc:	0802be48 	.word	0x0802be48
 80193d0:	0802be54 	.word	0x0802be54
 80193d4:	0802be68 	.word	0x0802be68
 80193d8:	08023a28 	.word	0x08023a28
 80193dc:	0802be70 	.word	0x0802be70
 80193e0:	0802be80 	.word	0x0802be80
 80193e4:	08026c04 	.word	0x08026c04
 80193e8:	0802be98 	.word	0x0802be98
 80193ec:	0802bea0 	.word	0x0802bea0
 80193f0:	0802beb0 	.word	0x0802beb0
 80193f4:	080239d4 	.word	0x080239d4
 80193f8:	0802bec4 	.word	0x0802bec4
 80193fc:	0802395c 	.word	0x0802395c
 8019400:	0802bec8 	.word	0x0802bec8
 8019404:	0802bed4 	.word	0x0802bed4
 8019408:	0802bee4 	.word	0x0802bee4
 801940c:	0802bef0 	.word	0x0802bef0
 8019410:	0802befc 	.word	0x0802befc
 8019414:	0802393c 	.word	0x0802393c
		case 711 :
			strcpy(p->name,"SWIM AND GO");
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801941e:	4ac0      	ldr	r2, [pc, #768]	; (8019720 <problem_fetch+0x18038>)
 8019420:	461c      	mov	r4, r3
 8019422:	4613      	mov	r3, r2
 8019424:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019426:	6020      	str	r0, [r4, #0]
 8019428:	6061      	str	r1, [r4, #4]
 801942a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019432:	4abc      	ldr	r2, [pc, #752]	; (8019724 <problem_fetch+0x1803c>)
 8019434:	6810      	ldr	r0, [r2, #0]
 8019436:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	2206      	movs	r2, #6
 801943c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,C,I,D");
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	33a4      	adds	r3, #164	; 0xa4
 8019442:	4ab9      	ldr	r2, [pc, #740]	; (8019728 <problem_fetch+0x18040>)
 8019444:	461c      	mov	r4, r3
 8019446:	4613      	mov	r3, r2
 8019448:	cb07      	ldmia	r3!, {r0, r1, r2}
 801944a:	6020      	str	r0, [r4, #0]
 801944c:	6061      	str	r1, [r4, #4]
 801944e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,6,10,13,14,18");
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	3304      	adds	r3, #4
 8019454:	4ab5      	ldr	r2, [pc, #724]	; (801972c <problem_fetch+0x18044>)
 8019456:	461c      	mov	r4, r3
 8019458:	4615      	mov	r5, r2
 801945a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801945c:	6020      	str	r0, [r4, #0]
 801945e:	6061      	str	r1, [r4, #4]
 8019460:	60a2      	str	r2, [r4, #8]
 8019462:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801946a:	4ab1      	ldr	r2, [pc, #708]	; (8019730 <problem_fetch+0x18048>)
 801946c:	461c      	mov	r4, r3
 801946e:	4613      	mov	r3, r2
 8019470:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019472:	6020      	str	r0, [r4, #0]
 8019474:	6061      	str	r1, [r4, #4]
 8019476:	60a2      	str	r2, [r4, #8]
			break;
 8019478:	f003 b866 	b.w	801c548 <problem_fetch+0x1ae60>
		case 712 :
			strcpy(p->name,"SWIMMING GOAT");
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019482:	4aac      	ldr	r2, [pc, #688]	; (8019734 <problem_fetch+0x1804c>)
 8019484:	461c      	mov	r4, r3
 8019486:	4613      	mov	r3, r2
 8019488:	cb07      	ldmia	r3!, {r0, r1, r2}
 801948a:	6020      	str	r0, [r4, #0]
 801948c:	6061      	str	r1, [r4, #4]
 801948e:	60a2      	str	r2, [r4, #8]
 8019490:	881b      	ldrh	r3, [r3, #0]
 8019492:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801949a:	4aa2      	ldr	r2, [pc, #648]	; (8019724 <problem_fetch+0x1803c>)
 801949c:	6810      	ldr	r0, [r2, #0]
 801949e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2206      	movs	r2, #6
 80194a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,I,I,D");
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	33a4      	adds	r3, #164	; 0xa4
 80194aa:	4aa3      	ldr	r2, [pc, #652]	; (8019738 <problem_fetch+0x18050>)
 80194ac:	461c      	mov	r4, r3
 80194ae:	4613      	mov	r3, r2
 80194b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194b2:	6020      	str	r0, [r4, #0]
 80194b4:	6061      	str	r1, [r4, #4]
 80194b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,10,13,14,7,18");
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	3304      	adds	r3, #4
 80194bc:	4a9f      	ldr	r2, [pc, #636]	; (801973c <problem_fetch+0x18054>)
 80194be:	461c      	mov	r4, r3
 80194c0:	4615      	mov	r5, r2
 80194c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80194c4:	6020      	str	r0, [r4, #0]
 80194c6:	6061      	str	r1, [r4, #4]
 80194c8:	60a2      	str	r2, [r4, #8]
 80194ca:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80194d2:	4a9b      	ldr	r2, [pc, #620]	; (8019740 <problem_fetch+0x18058>)
 80194d4:	461c      	mov	r4, r3
 80194d6:	4613      	mov	r3, r2
 80194d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80194da:	6020      	str	r0, [r4, #0]
 80194dc:	6061      	str	r1, [r4, #4]
 80194de:	60a2      	str	r2, [r4, #8]
			break;
 80194e0:	f003 b832 	b.w	801c548 <problem_fetch+0x1ae60>
		case 713 :
			strcpy(p->name,"NORTHSIDE");
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80194ea:	4996      	ldr	r1, [pc, #600]	; (8019744 <problem_fetch+0x1805c>)
 80194ec:	461a      	mov	r2, r3
 80194ee:	460b      	mov	r3, r1
 80194f0:	cb03      	ldmia	r3!, {r0, r1}
 80194f2:	6010      	str	r0, [r2, #0]
 80194f4:	6051      	str	r1, [r2, #4]
 80194f6:	881b      	ldrh	r3, [r3, #0]
 80194f8:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019500:	4a91      	ldr	r2, [pc, #580]	; (8019748 <problem_fetch+0x18060>)
 8019502:	8811      	ldrh	r1, [r2, #0]
 8019504:	7892      	ldrb	r2, [r2, #2]
 8019506:	8019      	strh	r1, [r3, #0]
 8019508:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	2206      	movs	r2, #6
 801950e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,E,E,H,J");
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	33a4      	adds	r3, #164	; 0xa4
 8019514:	4a8d      	ldr	r2, [pc, #564]	; (801974c <problem_fetch+0x18064>)
 8019516:	461c      	mov	r4, r3
 8019518:	4613      	mov	r3, r2
 801951a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801951c:	6020      	str	r0, [r4, #0]
 801951e:	6061      	str	r1, [r4, #4]
 8019520:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"15,18,8,12,5,5");
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	3304      	adds	r3, #4
 8019526:	4a8a      	ldr	r2, [pc, #552]	; (8019750 <problem_fetch+0x18068>)
 8019528:	461c      	mov	r4, r3
 801952a:	4613      	mov	r3, r2
 801952c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801952e:	6020      	str	r0, [r4, #0]
 8019530:	6061      	str	r1, [r4, #4]
 8019532:	60a2      	str	r2, [r4, #8]
 8019534:	881a      	ldrh	r2, [r3, #0]
 8019536:	789b      	ldrb	r3, [r3, #2]
 8019538:	81a2      	strh	r2, [r4, #12]
 801953a:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"d,e,d,d,s,s");
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019542:	4a84      	ldr	r2, [pc, #528]	; (8019754 <problem_fetch+0x1806c>)
 8019544:	461c      	mov	r4, r3
 8019546:	4613      	mov	r3, r2
 8019548:	cb07      	ldmia	r3!, {r0, r1, r2}
 801954a:	6020      	str	r0, [r4, #0]
 801954c:	6061      	str	r1, [r4, #4]
 801954e:	60a2      	str	r2, [r4, #8]
			break;
 8019550:	f002 bffa 	b.w	801c548 <problem_fetch+0x1ae60>
		case 714 :
			strcpy(p->name,"DESTINY'S GRANDMA");
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801955a:	4a7f      	ldr	r2, [pc, #508]	; (8019758 <problem_fetch+0x18070>)
 801955c:	461d      	mov	r5, r3
 801955e:	4614      	mov	r4, r2
 8019560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019562:	6028      	str	r0, [r5, #0]
 8019564:	6069      	str	r1, [r5, #4]
 8019566:	60aa      	str	r2, [r5, #8]
 8019568:	60eb      	str	r3, [r5, #12]
 801956a:	8823      	ldrh	r3, [r4, #0]
 801956c:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019574:	4a6b      	ldr	r2, [pc, #428]	; (8019724 <problem_fetch+0x1803c>)
 8019576:	6810      	ldr	r0, [r2, #0]
 8019578:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2208      	movs	r2, #8
 801957e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,H,G,I,G,I");
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	33a4      	adds	r3, #164	; 0xa4
 8019584:	4a75      	ldr	r2, [pc, #468]	; (801975c <problem_fetch+0x18074>)
 8019586:	461c      	mov	r4, r3
 8019588:	4615      	mov	r5, r2
 801958a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801958c:	6020      	str	r0, [r4, #0]
 801958e:	6061      	str	r1, [r4, #4]
 8019590:	60a2      	str	r2, [r4, #8]
 8019592:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,10,14,14,17,18");
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	3304      	adds	r3, #4
 8019598:	4a71      	ldr	r2, [pc, #452]	; (8019760 <problem_fetch+0x18078>)
 801959a:	461d      	mov	r5, r3
 801959c:	4614      	mov	r4, r2
 801959e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195a0:	6028      	str	r0, [r5, #0]
 80195a2:	6069      	str	r1, [r5, #4]
 80195a4:	60aa      	str	r2, [r5, #8]
 80195a6:	60eb      	str	r3, [r5, #12]
 80195a8:	6820      	ldr	r0, [r4, #0]
 80195aa:	6128      	str	r0, [r5, #16]
 80195ac:	7923      	ldrb	r3, [r4, #4]
 80195ae:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80195b6:	4a6b      	ldr	r2, [pc, #428]	; (8019764 <problem_fetch+0x1807c>)
 80195b8:	461c      	mov	r4, r3
 80195ba:	4615      	mov	r5, r2
 80195bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195be:	6020      	str	r0, [r4, #0]
 80195c0:	6061      	str	r1, [r4, #4]
 80195c2:	60a2      	str	r2, [r4, #8]
 80195c4:	60e3      	str	r3, [r4, #12]
			break;
 80195c6:	f002 bfbf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 715 :
			strcpy(p->name,"3/5TH A MAN");
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80195d0:	4a65      	ldr	r2, [pc, #404]	; (8019768 <problem_fetch+0x18080>)
 80195d2:	461c      	mov	r4, r3
 80195d4:	4613      	mov	r3, r2
 80195d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195d8:	6020      	str	r0, [r4, #0]
 80195da:	6061      	str	r1, [r4, #4]
 80195dc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A+");
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80195e4:	4a61      	ldr	r2, [pc, #388]	; (801976c <problem_fetch+0x18084>)
 80195e6:	6810      	ldr	r0, [r2, #0]
 80195e8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	2207      	movs	r2, #7
 80195ee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,K,E,I,H,I");
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	33a4      	adds	r3, #164	; 0xa4
 80195f4:	4a5e      	ldr	r2, [pc, #376]	; (8019770 <problem_fetch+0x18088>)
 80195f6:	461c      	mov	r4, r3
 80195f8:	4613      	mov	r3, r2
 80195fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 80195fc:	6020      	str	r0, [r4, #0]
 80195fe:	6061      	str	r1, [r4, #4]
 8019600:	60a2      	str	r2, [r4, #8]
 8019602:	881b      	ldrh	r3, [r3, #0]
 8019604:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,12,14,8,9,16,18");
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	3304      	adds	r3, #4
 801960a:	4a5a      	ldr	r2, [pc, #360]	; (8019774 <problem_fetch+0x1808c>)
 801960c:	461d      	mov	r5, r3
 801960e:	4614      	mov	r4, r2
 8019610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019612:	6028      	str	r0, [r5, #0]
 8019614:	6069      	str	r1, [r5, #4]
 8019616:	60aa      	str	r2, [r5, #8]
 8019618:	60eb      	str	r3, [r5, #12]
 801961a:	8823      	ldrh	r3, [r4, #0]
 801961c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019624:	4a54      	ldr	r2, [pc, #336]	; (8019778 <problem_fetch+0x18090>)
 8019626:	461c      	mov	r4, r3
 8019628:	4613      	mov	r3, r2
 801962a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801962c:	6020      	str	r0, [r4, #0]
 801962e:	6061      	str	r1, [r4, #4]
 8019630:	60a2      	str	r2, [r4, #8]
 8019632:	881b      	ldrh	r3, [r3, #0]
 8019634:	81a3      	strh	r3, [r4, #12]
			break;
 8019636:	f002 bf87 	b.w	801c548 <problem_fetch+0x1ae60>
		case 716 :
			strcpy(p->name,"5 FINGER DISCOUNT");
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019640:	4a4e      	ldr	r2, [pc, #312]	; (801977c <problem_fetch+0x18094>)
 8019642:	461d      	mov	r5, r3
 8019644:	4614      	mov	r4, r2
 8019646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019648:	6028      	str	r0, [r5, #0]
 801964a:	6069      	str	r1, [r5, #4]
 801964c:	60aa      	str	r2, [r5, #8]
 801964e:	60eb      	str	r3, [r5, #12]
 8019650:	8823      	ldrh	r3, [r4, #0]
 8019652:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801965a:	4a44      	ldr	r2, [pc, #272]	; (801976c <problem_fetch+0x18084>)
 801965c:	6810      	ldr	r0, [r2, #0]
 801965e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	2208      	movs	r2, #8
 8019664:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,B,D,E,E,E,G");
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	33a4      	adds	r3, #164	; 0xa4
 801966a:	4a45      	ldr	r2, [pc, #276]	; (8019780 <problem_fetch+0x18098>)
 801966c:	461c      	mov	r4, r3
 801966e:	4615      	mov	r5, r2
 8019670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019672:	6020      	str	r0, [r4, #0]
 8019674:	6061      	str	r1, [r4, #4]
 8019676:	60a2      	str	r2, [r4, #8]
 8019678:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,12,18,6,8,14,4");
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	3304      	adds	r3, #4
 801967e:	4a41      	ldr	r2, [pc, #260]	; (8019784 <problem_fetch+0x1809c>)
 8019680:	461d      	mov	r5, r3
 8019682:	4614      	mov	r4, r2
 8019684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019686:	6028      	str	r0, [r5, #0]
 8019688:	6069      	str	r1, [r5, #4]
 801968a:	60aa      	str	r2, [r5, #8]
 801968c:	60eb      	str	r3, [r5, #12]
 801968e:	6820      	ldr	r0, [r4, #0]
 8019690:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,e,d,d,d,s");
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019698:	4a3b      	ldr	r2, [pc, #236]	; (8019788 <problem_fetch+0x180a0>)
 801969a:	461c      	mov	r4, r3
 801969c:	4615      	mov	r5, r2
 801969e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196a0:	6020      	str	r0, [r4, #0]
 80196a2:	6061      	str	r1, [r4, #4]
 80196a4:	60a2      	str	r2, [r4, #8]
 80196a6:	60e3      	str	r3, [r4, #12]
			break;
 80196a8:	f002 bf4e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 717 :
			strcpy(p->name,"THE SENDTRAIN");
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80196b2:	4a36      	ldr	r2, [pc, #216]	; (801978c <problem_fetch+0x180a4>)
 80196b4:	461c      	mov	r4, r3
 80196b6:	4613      	mov	r3, r2
 80196b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80196ba:	6020      	str	r0, [r4, #0]
 80196bc:	6061      	str	r1, [r4, #4]
 80196be:	60a2      	str	r2, [r4, #8]
 80196c0:	881b      	ldrh	r3, [r3, #0]
 80196c2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80196ca:	4a31      	ldr	r2, [pc, #196]	; (8019790 <problem_fetch+0x180a8>)
 80196cc:	8811      	ldrh	r1, [r2, #0]
 80196ce:	7892      	ldrb	r2, [r2, #2]
 80196d0:	8019      	strh	r1, [r3, #0]
 80196d2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	2208      	movs	r2, #8
 80196d8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,G,G,G,I,I,J");
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	33a4      	adds	r3, #164	; 0xa4
 80196de:	4a2d      	ldr	r2, [pc, #180]	; (8019794 <problem_fetch+0x180ac>)
 80196e0:	461c      	mov	r4, r3
 80196e2:	4615      	mov	r5, r2
 80196e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196e6:	6020      	str	r0, [r4, #0]
 80196e8:	6061      	str	r1, [r4, #4]
 80196ea:	60a2      	str	r2, [r4, #8]
 80196ec:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,4,6,9,15,14,18,7");
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	3304      	adds	r3, #4
 80196f2:	4a29      	ldr	r2, [pc, #164]	; (8019798 <problem_fetch+0x180b0>)
 80196f4:	461d      	mov	r5, r3
 80196f6:	4614      	mov	r4, r2
 80196f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196fa:	6028      	str	r0, [r5, #0]
 80196fc:	6069      	str	r1, [r5, #4]
 80196fe:	60aa      	str	r2, [r5, #8]
 8019700:	60eb      	str	r3, [r5, #12]
 8019702:	6820      	ldr	r0, [r4, #0]
 8019704:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,s,d,d,d,d,e,d");
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801970c:	4a23      	ldr	r2, [pc, #140]	; (801979c <problem_fetch+0x180b4>)
 801970e:	461c      	mov	r4, r3
 8019710:	4615      	mov	r5, r2
 8019712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019714:	6020      	str	r0, [r4, #0]
 8019716:	6061      	str	r1, [r4, #4]
 8019718:	60a2      	str	r2, [r4, #8]
 801971a:	60e3      	str	r3, [r4, #12]
			break;
 801971c:	f002 bf14 	b.w	801c548 <problem_fetch+0x1ae60>
 8019720:	0802bf0c 	.word	0x0802bf0c
 8019724:	0802395c 	.word	0x0802395c
 8019728:	0802bf18 	.word	0x0802bf18
 801972c:	0802bf24 	.word	0x0802bf24
 8019730:	0802393c 	.word	0x0802393c
 8019734:	0802bf34 	.word	0x0802bf34
 8019738:	0802bf44 	.word	0x0802bf44
 801973c:	0802bf50 	.word	0x0802bf50
 8019740:	08023cf8 	.word	0x08023cf8
 8019744:	0802bf60 	.word	0x0802bf60
 8019748:	0802391c 	.word	0x0802391c
 801974c:	0802bf6c 	.word	0x0802bf6c
 8019750:	0802bf78 	.word	0x0802bf78
 8019754:	0802bf88 	.word	0x0802bf88
 8019758:	0802bf94 	.word	0x0802bf94
 801975c:	0802bfa8 	.word	0x0802bfa8
 8019760:	0802bfb8 	.word	0x0802bfb8
 8019764:	08023b6c 	.word	0x08023b6c
 8019768:	0802bfd0 	.word	0x0802bfd0
 801976c:	08023afc 	.word	0x08023afc
 8019770:	0802bfdc 	.word	0x0802bfdc
 8019774:	0802bfec 	.word	0x0802bfec
 8019778:	08023ae4 	.word	0x08023ae4
 801977c:	0802c000 	.word	0x0802c000
 8019780:	0802c014 	.word	0x0802c014
 8019784:	0802c024 	.word	0x0802c024
 8019788:	0802c038 	.word	0x0802c038
 801978c:	0802c048 	.word	0x0802c048
 8019790:	08023a28 	.word	0x08023a28
 8019794:	0802c058 	.word	0x0802c058
 8019798:	0802c068 	.word	0x0802c068
 801979c:	0802c07c 	.word	0x0802c07c
		case 718 :
			strcpy(p->name,"SANTOKU SNATCH");
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80197a6:	4aaf      	ldr	r2, [pc, #700]	; (8019a64 <problem_fetch+0x1837c>)
 80197a8:	461c      	mov	r4, r3
 80197aa:	4613      	mov	r3, r2
 80197ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197ae:	6020      	str	r0, [r4, #0]
 80197b0:	6061      	str	r1, [r4, #4]
 80197b2:	60a2      	str	r2, [r4, #8]
 80197b4:	881a      	ldrh	r2, [r3, #0]
 80197b6:	789b      	ldrb	r3, [r3, #2]
 80197b8:	81a2      	strh	r2, [r4, #12]
 80197ba:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A+");
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80197c2:	4aa9      	ldr	r2, [pc, #676]	; (8019a68 <problem_fetch+0x18380>)
 80197c4:	6810      	ldr	r0, [r2, #0]
 80197c6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	2207      	movs	r2, #7
 80197cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,C,F,F,J,I");
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	33a4      	adds	r3, #164	; 0xa4
 80197d2:	4aa6      	ldr	r2, [pc, #664]	; (8019a6c <problem_fetch+0x18384>)
 80197d4:	461c      	mov	r4, r3
 80197d6:	4613      	mov	r3, r2
 80197d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80197da:	6020      	str	r0, [r4, #0]
 80197dc:	6061      	str	r1, [r4, #4]
 80197de:	60a2      	str	r2, [r4, #8]
 80197e0:	881b      	ldrh	r3, [r3, #0]
 80197e2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	3304      	adds	r3, #4
 80197e8:	4aa1      	ldr	r2, [pc, #644]	; (8019a70 <problem_fetch+0x18388>)
 80197ea:	461d      	mov	r5, r3
 80197ec:	4614      	mov	r4, r2
 80197ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197f0:	6028      	str	r0, [r5, #0]
 80197f2:	6069      	str	r1, [r5, #4]
 80197f4:	60aa      	str	r2, [r5, #8]
 80197f6:	60eb      	str	r3, [r5, #12]
 80197f8:	8823      	ldrh	r3, [r4, #0]
 80197fa:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019802:	4a9c      	ldr	r2, [pc, #624]	; (8019a74 <problem_fetch+0x1838c>)
 8019804:	461c      	mov	r4, r3
 8019806:	4613      	mov	r3, r2
 8019808:	cb07      	ldmia	r3!, {r0, r1, r2}
 801980a:	6020      	str	r0, [r4, #0]
 801980c:	6061      	str	r1, [r4, #4]
 801980e:	60a2      	str	r2, [r4, #8]
 8019810:	881b      	ldrh	r3, [r3, #0]
 8019812:	81a3      	strh	r3, [r4, #12]
			break;
 8019814:	f002 be98 	b.w	801c548 <problem_fetch+0x1ae60>
		case 719 :
			strcpy(p->name,"MY IDEA ?");
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801981e:	4996      	ldr	r1, [pc, #600]	; (8019a78 <problem_fetch+0x18390>)
 8019820:	461a      	mov	r2, r3
 8019822:	460b      	mov	r3, r1
 8019824:	cb03      	ldmia	r3!, {r0, r1}
 8019826:	6010      	str	r0, [r2, #0]
 8019828:	6051      	str	r1, [r2, #4]
 801982a:	881b      	ldrh	r3, [r3, #0]
 801982c:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019834:	4a91      	ldr	r2, [pc, #580]	; (8019a7c <problem_fetch+0x18394>)
 8019836:	8811      	ldrh	r1, [r2, #0]
 8019838:	7892      	ldrb	r2, [r2, #2]
 801983a:	8019      	strh	r1, [r3, #0]
 801983c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	2207      	movs	r2, #7
 8019842:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,C,H,C,C,A");
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	33a4      	adds	r3, #164	; 0xa4
 8019848:	4a8d      	ldr	r2, [pc, #564]	; (8019a80 <problem_fetch+0x18398>)
 801984a:	461c      	mov	r4, r3
 801984c:	4613      	mov	r3, r2
 801984e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019850:	6020      	str	r0, [r4, #0]
 8019852:	6061      	str	r1, [r4, #4]
 8019854:	60a2      	str	r2, [r4, #8]
 8019856:	881b      	ldrh	r3, [r3, #0]
 8019858:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,10,13,16,18");
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	3304      	adds	r3, #4
 801985e:	4a89      	ldr	r2, [pc, #548]	; (8019a84 <problem_fetch+0x1839c>)
 8019860:	461d      	mov	r5, r3
 8019862:	4614      	mov	r4, r2
 8019864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019866:	6028      	str	r0, [r5, #0]
 8019868:	6069      	str	r1, [r5, #4]
 801986a:	60aa      	str	r2, [r5, #8]
 801986c:	60eb      	str	r3, [r5, #12]
 801986e:	8823      	ldrh	r3, [r4, #0]
 8019870:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019878:	4a83      	ldr	r2, [pc, #524]	; (8019a88 <problem_fetch+0x183a0>)
 801987a:	461c      	mov	r4, r3
 801987c:	4613      	mov	r3, r2
 801987e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019880:	6020      	str	r0, [r4, #0]
 8019882:	6061      	str	r1, [r4, #4]
 8019884:	60a2      	str	r2, [r4, #8]
 8019886:	881b      	ldrh	r3, [r3, #0]
 8019888:	81a3      	strh	r3, [r4, #12]
			break;
 801988a:	f002 be5d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 720 :
			strcpy(p->name,"RUSTY MORNING");
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019894:	4a7d      	ldr	r2, [pc, #500]	; (8019a8c <problem_fetch+0x183a4>)
 8019896:	461c      	mov	r4, r3
 8019898:	4613      	mov	r3, r2
 801989a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801989c:	6020      	str	r0, [r4, #0]
 801989e:	6061      	str	r1, [r4, #4]
 80198a0:	60a2      	str	r2, [r4, #8]
 80198a2:	881b      	ldrh	r3, [r3, #0]
 80198a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80198ac:	4a78      	ldr	r2, [pc, #480]	; (8019a90 <problem_fetch+0x183a8>)
 80198ae:	6810      	ldr	r0, [r2, #0]
 80198b0:	6018      	str	r0, [r3, #0]
			p->moveSize = 9;
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2209      	movs	r2, #9
 80198b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,I,H,I,E,E,A");
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	33a4      	adds	r3, #164	; 0xa4
 80198bc:	4a75      	ldr	r2, [pc, #468]	; (8019a94 <problem_fetch+0x183ac>)
 80198be:	461d      	mov	r5, r3
 80198c0:	4614      	mov	r4, r2
 80198c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198c4:	6028      	str	r0, [r5, #0]
 80198c6:	6069      	str	r1, [r5, #4]
 80198c8:	60aa      	str	r2, [r5, #8]
 80198ca:	60eb      	str	r3, [r5, #12]
 80198cc:	8823      	ldrh	r3, [r4, #0]
 80198ce:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,14,16,18");
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	3304      	adds	r3, #4
 80198d4:	4a70      	ldr	r2, [pc, #448]	; (8019a98 <problem_fetch+0x183b0>)
 80198d6:	461d      	mov	r5, r3
 80198d8:	4614      	mov	r4, r2
 80198da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198dc:	6028      	str	r0, [r5, #0]
 80198de:	6069      	str	r1, [r5, #4]
 80198e0:	60aa      	str	r2, [r5, #8]
 80198e2:	60eb      	str	r3, [r5, #12]
 80198e4:	cc03      	ldmia	r4!, {r0, r1}
 80198e6:	6128      	str	r0, [r5, #16]
 80198e8:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,e");
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80198f0:	4a6a      	ldr	r2, [pc, #424]	; (8019a9c <problem_fetch+0x183b4>)
 80198f2:	461d      	mov	r5, r3
 80198f4:	4614      	mov	r4, r2
 80198f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80198f8:	6028      	str	r0, [r5, #0]
 80198fa:	6069      	str	r1, [r5, #4]
 80198fc:	60aa      	str	r2, [r5, #8]
 80198fe:	60eb      	str	r3, [r5, #12]
 8019900:	8823      	ldrh	r3, [r4, #0]
 8019902:	822b      	strh	r3, [r5, #16]
			break;
 8019904:	f002 be20 	b.w	801c548 <problem_fetch+0x1ae60>
		case 721 :
			strcpy(p->name,"POMPOUS POMPADOUR");
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801990e:	4a64      	ldr	r2, [pc, #400]	; (8019aa0 <problem_fetch+0x183b8>)
 8019910:	461d      	mov	r5, r3
 8019912:	4614      	mov	r4, r2
 8019914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019916:	6028      	str	r0, [r5, #0]
 8019918:	6069      	str	r1, [r5, #4]
 801991a:	60aa      	str	r2, [r5, #8]
 801991c:	60eb      	str	r3, [r5, #12]
 801991e:	8823      	ldrh	r3, [r4, #0]
 8019920:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"6C");
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019928:	4a54      	ldr	r2, [pc, #336]	; (8019a7c <problem_fetch+0x18394>)
 801992a:	8811      	ldrh	r1, [r2, #0]
 801992c:	7892      	ldrb	r2, [r2, #2]
 801992e:	8019      	strh	r1, [r3, #0]
 8019930:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	2206      	movs	r2, #6
 8019936:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,C,E,A");
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	33a4      	adds	r3, #164	; 0xa4
 801993c:	4a59      	ldr	r2, [pc, #356]	; (8019aa4 <problem_fetch+0x183bc>)
 801993e:	461c      	mov	r4, r3
 8019940:	4613      	mov	r3, r2
 8019942:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019944:	6020      	str	r0, [r4, #0]
 8019946:	6061      	str	r1, [r4, #4]
 8019948:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,10,13,16,18");
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	3304      	adds	r3, #4
 801994e:	4a56      	ldr	r2, [pc, #344]	; (8019aa8 <problem_fetch+0x183c0>)
 8019950:	461c      	mov	r4, r3
 8019952:	4615      	mov	r5, r2
 8019954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019956:	6020      	str	r0, [r4, #0]
 8019958:	6061      	str	r1, [r4, #4]
 801995a:	60a2      	str	r2, [r4, #8]
 801995c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019964:	4a51      	ldr	r2, [pc, #324]	; (8019aac <problem_fetch+0x183c4>)
 8019966:	461c      	mov	r4, r3
 8019968:	4613      	mov	r3, r2
 801996a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801996c:	6020      	str	r0, [r4, #0]
 801996e:	6061      	str	r1, [r4, #4]
 8019970:	60a2      	str	r2, [r4, #8]
			break;
 8019972:	f002 bde9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 722 :
			strcpy(p->name,"KEEP YOUR FEET DRY");
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801997c:	4a4c      	ldr	r2, [pc, #304]	; (8019ab0 <problem_fetch+0x183c8>)
 801997e:	461d      	mov	r5, r3
 8019980:	4614      	mov	r4, r2
 8019982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019984:	6028      	str	r0, [r5, #0]
 8019986:	6069      	str	r1, [r5, #4]
 8019988:	60aa      	str	r2, [r5, #8]
 801998a:	60eb      	str	r3, [r5, #12]
 801998c:	8823      	ldrh	r3, [r4, #0]
 801998e:	78a2      	ldrb	r2, [r4, #2]
 8019990:	822b      	strh	r3, [r5, #16]
 8019992:	4613      	mov	r3, r2
 8019994:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801999c:	4a3c      	ldr	r2, [pc, #240]	; (8019a90 <problem_fetch+0x183a8>)
 801999e:	6810      	ldr	r0, [r2, #0]
 80199a0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	2206      	movs	r2, #6
 80199a6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,D,D,D");
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	33a4      	adds	r3, #164	; 0xa4
 80199ac:	4a41      	ldr	r2, [pc, #260]	; (8019ab4 <problem_fetch+0x183cc>)
 80199ae:	461c      	mov	r4, r3
 80199b0:	4613      	mov	r3, r2
 80199b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199b4:	6020      	str	r0, [r4, #0]
 80199b6:	6061      	str	r1, [r4, #4]
 80199b8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,5,9,11,15,18");
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	3304      	adds	r3, #4
 80199be:	4a3e      	ldr	r2, [pc, #248]	; (8019ab8 <problem_fetch+0x183d0>)
 80199c0:	461c      	mov	r4, r3
 80199c2:	4613      	mov	r3, r2
 80199c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199c6:	6020      	str	r0, [r4, #0]
 80199c8:	6061      	str	r1, [r4, #4]
 80199ca:	60a2      	str	r2, [r4, #8]
 80199cc:	881a      	ldrh	r2, [r3, #0]
 80199ce:	789b      	ldrb	r3, [r3, #2]
 80199d0:	81a2      	strh	r2, [r4, #12]
 80199d2:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 80199da:	4a38      	ldr	r2, [pc, #224]	; (8019abc <problem_fetch+0x183d4>)
 80199dc:	461c      	mov	r4, r3
 80199de:	4613      	mov	r3, r2
 80199e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80199e2:	6020      	str	r0, [r4, #0]
 80199e4:	6061      	str	r1, [r4, #4]
 80199e6:	60a2      	str	r2, [r4, #8]
			break;
 80199e8:	f002 bdae 	b.w	801c548 <problem_fetch+0x1ae60>
		case 723 :
			strcpy(p->name,"WARM UP A5");
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80199f2:	4933      	ldr	r1, [pc, #204]	; (8019ac0 <problem_fetch+0x183d8>)
 80199f4:	461a      	mov	r2, r3
 80199f6:	460b      	mov	r3, r1
 80199f8:	cb03      	ldmia	r3!, {r0, r1}
 80199fa:	6010      	str	r0, [r2, #0]
 80199fc:	6051      	str	r1, [r2, #4]
 80199fe:	8819      	ldrh	r1, [r3, #0]
 8019a00:	789b      	ldrb	r3, [r3, #2]
 8019a02:	8111      	strh	r1, [r2, #8]
 8019a04:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019a0c:	4a20      	ldr	r2, [pc, #128]	; (8019a90 <problem_fetch+0x183a8>)
 8019a0e:	6810      	ldr	r0, [r2, #0]
 8019a10:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	2207      	movs	r2, #7
 8019a16:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,F,E,H,I");
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	33a4      	adds	r3, #164	; 0xa4
 8019a1c:	4a29      	ldr	r2, [pc, #164]	; (8019ac4 <problem_fetch+0x183dc>)
 8019a1e:	461c      	mov	r4, r3
 8019a20:	4613      	mov	r3, r2
 8019a22:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a24:	6020      	str	r0, [r4, #0]
 8019a26:	6061      	str	r1, [r4, #4]
 8019a28:	60a2      	str	r2, [r4, #8]
 8019a2a:	881b      	ldrh	r3, [r3, #0]
 8019a2c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,6,8,11,14,16,18");
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	3304      	adds	r3, #4
 8019a32:	4a25      	ldr	r2, [pc, #148]	; (8019ac8 <problem_fetch+0x183e0>)
 8019a34:	461d      	mov	r5, r3
 8019a36:	4614      	mov	r4, r2
 8019a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019a3a:	6028      	str	r0, [r5, #0]
 8019a3c:	6069      	str	r1, [r5, #4]
 8019a3e:	60aa      	str	r2, [r5, #8]
 8019a40:	60eb      	str	r3, [r5, #12]
 8019a42:	8823      	ldrh	r3, [r4, #0]
 8019a44:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019a4c:	4a0e      	ldr	r2, [pc, #56]	; (8019a88 <problem_fetch+0x183a0>)
 8019a4e:	461c      	mov	r4, r3
 8019a50:	4613      	mov	r3, r2
 8019a52:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019a54:	6020      	str	r0, [r4, #0]
 8019a56:	6061      	str	r1, [r4, #4]
 8019a58:	60a2      	str	r2, [r4, #8]
 8019a5a:	881b      	ldrh	r3, [r3, #0]
 8019a5c:	81a3      	strh	r3, [r4, #12]
			break;
 8019a5e:	f002 bd73 	b.w	801c548 <problem_fetch+0x1ae60>
 8019a62:	bf00      	nop
 8019a64:	0802c08c 	.word	0x0802c08c
 8019a68:	08023afc 	.word	0x08023afc
 8019a6c:	0802c09c 	.word	0x0802c09c
 8019a70:	08024eec 	.word	0x08024eec
 8019a74:	08023ae4 	.word	0x08023ae4
 8019a78:	0802c0ac 	.word	0x0802c0ac
 8019a7c:	08023a28 	.word	0x08023a28
 8019a80:	0802c0b8 	.word	0x0802c0b8
 8019a84:	0802c0c8 	.word	0x0802c0c8
 8019a88:	080239d4 	.word	0x080239d4
 8019a8c:	0802c0dc 	.word	0x0802c0dc
 8019a90:	0802395c 	.word	0x0802395c
 8019a94:	0802c0ec 	.word	0x0802c0ec
 8019a98:	08028138 	.word	0x08028138
 8019a9c:	08024940 	.word	0x08024940
 8019aa0:	0802c100 	.word	0x0802c100
 8019aa4:	0802c114 	.word	0x0802c114
 8019aa8:	08026030 	.word	0x08026030
 8019aac:	08023cf8 	.word	0x08023cf8
 8019ab0:	0802c120 	.word	0x0802c120
 8019ab4:	0802c134 	.word	0x0802c134
 8019ab8:	0802c140 	.word	0x0802c140
 8019abc:	0802393c 	.word	0x0802393c
 8019ac0:	0802c150 	.word	0x0802c150
 8019ac4:	0802c15c 	.word	0x0802c15c
 8019ac8:	08023fa8 	.word	0x08023fa8
		case 724 :
			strcpy(p->name,"WARM UP A3");
 8019acc:	687b      	ldr	r3, [r7, #4]
 8019ace:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ad2:	49a8      	ldr	r1, [pc, #672]	; (8019d74 <problem_fetch+0x1868c>)
 8019ad4:	461a      	mov	r2, r3
 8019ad6:	460b      	mov	r3, r1
 8019ad8:	cb03      	ldmia	r3!, {r0, r1}
 8019ada:	6010      	str	r0, [r2, #0]
 8019adc:	6051      	str	r1, [r2, #4]
 8019ade:	8819      	ldrh	r1, [r3, #0]
 8019ae0:	789b      	ldrb	r3, [r3, #2]
 8019ae2:	8111      	strh	r1, [r2, #8]
 8019ae4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019aec:	4aa2      	ldr	r2, [pc, #648]	; (8019d78 <problem_fetch+0x18690>)
 8019aee:	6810      	ldr	r0, [r2, #0]
 8019af0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	2206      	movs	r2, #6
 8019af6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,G,I,I");
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	33a4      	adds	r3, #164	; 0xa4
 8019afc:	4a9f      	ldr	r2, [pc, #636]	; (8019d7c <problem_fetch+0x18694>)
 8019afe:	461c      	mov	r4, r3
 8019b00:	4613      	mov	r3, r2
 8019b02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b04:	6020      	str	r0, [r4, #0]
 8019b06:	6061      	str	r1, [r4, #4]
 8019b08:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,14,14,18");
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	3304      	adds	r3, #4
 8019b0e:	4a9c      	ldr	r2, [pc, #624]	; (8019d80 <problem_fetch+0x18698>)
 8019b10:	461c      	mov	r4, r3
 8019b12:	4615      	mov	r5, r2
 8019b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019b16:	6020      	str	r0, [r4, #0]
 8019b18:	6061      	str	r1, [r4, #4]
 8019b1a:	60a2      	str	r2, [r4, #8]
 8019b1c:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019b24:	4a97      	ldr	r2, [pc, #604]	; (8019d84 <problem_fetch+0x1869c>)
 8019b26:	461c      	mov	r4, r3
 8019b28:	4613      	mov	r3, r2
 8019b2a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b2c:	6020      	str	r0, [r4, #0]
 8019b2e:	6061      	str	r1, [r4, #4]
 8019b30:	60a2      	str	r2, [r4, #8]
			break;
 8019b32:	f002 bd09 	b.w	801c548 <problem_fetch+0x1ae60>
		case 725 :
			strcpy(p->name,"WARM UP A2");
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019b3c:	4992      	ldr	r1, [pc, #584]	; (8019d88 <problem_fetch+0x186a0>)
 8019b3e:	461a      	mov	r2, r3
 8019b40:	460b      	mov	r3, r1
 8019b42:	cb03      	ldmia	r3!, {r0, r1}
 8019b44:	6010      	str	r0, [r2, #0]
 8019b46:	6051      	str	r1, [r2, #4]
 8019b48:	8819      	ldrh	r1, [r3, #0]
 8019b4a:	789b      	ldrb	r3, [r3, #2]
 8019b4c:	8111      	strh	r1, [r2, #8]
 8019b4e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019b56:	4a88      	ldr	r2, [pc, #544]	; (8019d78 <problem_fetch+0x18690>)
 8019b58:	6810      	ldr	r0, [r2, #0]
 8019b5a:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2207      	movs	r2, #7
 8019b60:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,G,E,D,I,A");
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	33a4      	adds	r3, #164	; 0xa4
 8019b66:	4a89      	ldr	r2, [pc, #548]	; (8019d8c <problem_fetch+0x186a4>)
 8019b68:	461c      	mov	r4, r3
 8019b6a:	4613      	mov	r3, r2
 8019b6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b6e:	6020      	str	r0, [r4, #0]
 8019b70:	6061      	str	r1, [r4, #4]
 8019b72:	60a2      	str	r2, [r4, #8]
 8019b74:	881b      	ldrh	r3, [r3, #0]
 8019b76:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,7,18");
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	3304      	adds	r3, #4
 8019b7c:	4a84      	ldr	r2, [pc, #528]	; (8019d90 <problem_fetch+0x186a8>)
 8019b7e:	461d      	mov	r5, r3
 8019b80:	4614      	mov	r4, r2
 8019b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b84:	6028      	str	r0, [r5, #0]
 8019b86:	6069      	str	r1, [r5, #4]
 8019b88:	60aa      	str	r2, [r5, #8]
 8019b8a:	60eb      	str	r3, [r5, #12]
 8019b8c:	7823      	ldrb	r3, [r4, #0]
 8019b8e:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019b96:	4a7f      	ldr	r2, [pc, #508]	; (8019d94 <problem_fetch+0x186ac>)
 8019b98:	461c      	mov	r4, r3
 8019b9a:	4613      	mov	r3, r2
 8019b9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019b9e:	6020      	str	r0, [r4, #0]
 8019ba0:	6061      	str	r1, [r4, #4]
 8019ba2:	60a2      	str	r2, [r4, #8]
 8019ba4:	881b      	ldrh	r3, [r3, #0]
 8019ba6:	81a3      	strh	r3, [r4, #12]
			break;
 8019ba8:	f002 bcce 	b.w	801c548 <problem_fetch+0x1ae60>
		case 726 :
			strcpy(p->name,"WARM UP A1");
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019bb2:	4979      	ldr	r1, [pc, #484]	; (8019d98 <problem_fetch+0x186b0>)
 8019bb4:	461a      	mov	r2, r3
 8019bb6:	460b      	mov	r3, r1
 8019bb8:	cb03      	ldmia	r3!, {r0, r1}
 8019bba:	6010      	str	r0, [r2, #0]
 8019bbc:	6051      	str	r1, [r2, #4]
 8019bbe:	8819      	ldrh	r1, [r3, #0]
 8019bc0:	789b      	ldrb	r3, [r3, #2]
 8019bc2:	8111      	strh	r1, [r2, #8]
 8019bc4:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019bcc:	4a6a      	ldr	r2, [pc, #424]	; (8019d78 <problem_fetch+0x18690>)
 8019bce:	6810      	ldr	r0, [r2, #0]
 8019bd0:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	2206      	movs	r2, #6
 8019bd6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,E,F,D,D");
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	33a4      	adds	r3, #164	; 0xa4
 8019bdc:	4a6f      	ldr	r2, [pc, #444]	; (8019d9c <problem_fetch+0x186b4>)
 8019bde:	461c      	mov	r4, r3
 8019be0:	4613      	mov	r3, r2
 8019be2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019be4:	6020      	str	r0, [r4, #0]
 8019be6:	6061      	str	r1, [r4, #4]
 8019be8:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,11,15,18");
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	3304      	adds	r3, #4
 8019bee:	4a6c      	ldr	r2, [pc, #432]	; (8019da0 <problem_fetch+0x186b8>)
 8019bf0:	461c      	mov	r4, r3
 8019bf2:	4613      	mov	r3, r2
 8019bf4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019bf6:	6020      	str	r0, [r4, #0]
 8019bf8:	6061      	str	r1, [r4, #4]
 8019bfa:	60a2      	str	r2, [r4, #8]
 8019bfc:	881a      	ldrh	r2, [r3, #0]
 8019bfe:	789b      	ldrb	r3, [r3, #2]
 8019c00:	81a2      	strh	r2, [r4, #12]
 8019c02:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019c0a:	4a66      	ldr	r2, [pc, #408]	; (8019da4 <problem_fetch+0x186bc>)
 8019c0c:	461c      	mov	r4, r3
 8019c0e:	4613      	mov	r3, r2
 8019c10:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c12:	6020      	str	r0, [r4, #0]
 8019c14:	6061      	str	r1, [r4, #4]
 8019c16:	60a2      	str	r2, [r4, #8]
			break;
 8019c18:	f002 bc96 	b.w	801c548 <problem_fetch+0x1ae60>
		case 727 :
			strcpy(p->name,"MARYJANEFIGAROTTA");
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c22:	4a61      	ldr	r2, [pc, #388]	; (8019da8 <problem_fetch+0x186c0>)
 8019c24:	461d      	mov	r5, r3
 8019c26:	4614      	mov	r4, r2
 8019c28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c2a:	6028      	str	r0, [r5, #0]
 8019c2c:	6069      	str	r1, [r5, #4]
 8019c2e:	60aa      	str	r2, [r5, #8]
 8019c30:	60eb      	str	r3, [r5, #12]
 8019c32:	8823      	ldrh	r3, [r4, #0]
 8019c34:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019c3c:	4a5b      	ldr	r2, [pc, #364]	; (8019dac <problem_fetch+0x186c4>)
 8019c3e:	6810      	ldr	r0, [r2, #0]
 8019c40:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	2205      	movs	r2, #5
 8019c46:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,H,I,I");
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	33a4      	adds	r3, #164	; 0xa4
 8019c4c:	4958      	ldr	r1, [pc, #352]	; (8019db0 <problem_fetch+0x186c8>)
 8019c4e:	461a      	mov	r2, r3
 8019c50:	460b      	mov	r3, r1
 8019c52:	cb03      	ldmia	r3!, {r0, r1}
 8019c54:	6010      	str	r0, [r2, #0]
 8019c56:	6051      	str	r1, [r2, #4]
 8019c58:	881b      	ldrh	r3, [r3, #0]
 8019c5a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,5,10,15,18");
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	3304      	adds	r3, #4
 8019c60:	4a54      	ldr	r2, [pc, #336]	; (8019db4 <problem_fetch+0x186cc>)
 8019c62:	461c      	mov	r4, r3
 8019c64:	4613      	mov	r3, r2
 8019c66:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c68:	6020      	str	r0, [r4, #0]
 8019c6a:	6061      	str	r1, [r4, #4]
 8019c6c:	60a2      	str	r2, [r4, #8]
 8019c6e:	781b      	ldrb	r3, [r3, #0]
 8019c70:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019c78:	494f      	ldr	r1, [pc, #316]	; (8019db8 <problem_fetch+0x186d0>)
 8019c7a:	461a      	mov	r2, r3
 8019c7c:	460b      	mov	r3, r1
 8019c7e:	cb03      	ldmia	r3!, {r0, r1}
 8019c80:	6010      	str	r0, [r2, #0]
 8019c82:	6051      	str	r1, [r2, #4]
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	8113      	strh	r3, [r2, #8]
			break;
 8019c88:	f002 bc5e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 728 :
			strcpy(p->name,"BROWN FROWN");
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019c92:	4a4a      	ldr	r2, [pc, #296]	; (8019dbc <problem_fetch+0x186d4>)
 8019c94:	461c      	mov	r4, r3
 8019c96:	4613      	mov	r3, r2
 8019c98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019c9a:	6020      	str	r0, [r4, #0]
 8019c9c:	6061      	str	r1, [r4, #4]
 8019c9e:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ca6:	4a34      	ldr	r2, [pc, #208]	; (8019d78 <problem_fetch+0x18690>)
 8019ca8:	6810      	ldr	r0, [r2, #0]
 8019caa:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	2208      	movs	r2, #8
 8019cb0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,C,H,F,C,E,D");
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	33a4      	adds	r3, #164	; 0xa4
 8019cb6:	4a42      	ldr	r2, [pc, #264]	; (8019dc0 <problem_fetch+0x186d8>)
 8019cb8:	461c      	mov	r4, r3
 8019cba:	4615      	mov	r5, r2
 8019cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cbe:	6020      	str	r0, [r4, #0]
 8019cc0:	6061      	str	r1, [r4, #4]
 8019cc2:	60a2      	str	r2, [r4, #8]
 8019cc4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,11,13,16,18");
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	3304      	adds	r3, #4
 8019cca:	4a3e      	ldr	r2, [pc, #248]	; (8019dc4 <problem_fetch+0x186dc>)
 8019ccc:	461d      	mov	r5, r3
 8019cce:	4614      	mov	r4, r2
 8019cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019cd2:	6028      	str	r0, [r5, #0]
 8019cd4:	6069      	str	r1, [r5, #4]
 8019cd6:	60aa      	str	r2, [r5, #8]
 8019cd8:	60eb      	str	r3, [r5, #12]
 8019cda:	6820      	ldr	r0, [r4, #0]
 8019cdc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019ce4:	4a38      	ldr	r2, [pc, #224]	; (8019dc8 <problem_fetch+0x186e0>)
 8019ce6:	461c      	mov	r4, r3
 8019ce8:	4615      	mov	r5, r2
 8019cea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019cec:	6020      	str	r0, [r4, #0]
 8019cee:	6061      	str	r1, [r4, #4]
 8019cf0:	60a2      	str	r2, [r4, #8]
 8019cf2:	60e3      	str	r3, [r4, #12]
			break;
 8019cf4:	f002 bc28 	b.w	801c548 <problem_fetch+0x1ae60>
		case 729 :
			strcpy(p->name,"LU'S FINEST");
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019cfe:	4a33      	ldr	r2, [pc, #204]	; (8019dcc <problem_fetch+0x186e4>)
 8019d00:	461c      	mov	r4, r3
 8019d02:	4613      	mov	r3, r2
 8019d04:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019d06:	6020      	str	r0, [r4, #0]
 8019d08:	6061      	str	r1, [r4, #4]
 8019d0a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7A");
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019d12:	4a2f      	ldr	r2, [pc, #188]	; (8019dd0 <problem_fetch+0x186e8>)
 8019d14:	8811      	ldrh	r1, [r2, #0]
 8019d16:	7892      	ldrb	r2, [r2, #2]
 8019d18:	8019      	strh	r1, [r3, #0]
 8019d1a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 9;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	2209      	movs	r2, #9
 8019d20:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,D,B,G,E,F,J,H,I");
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	33a4      	adds	r3, #164	; 0xa4
 8019d26:	4a2b      	ldr	r2, [pc, #172]	; (8019dd4 <problem_fetch+0x186ec>)
 8019d28:	461d      	mov	r5, r3
 8019d2a:	4614      	mov	r4, r2
 8019d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d2e:	6028      	str	r0, [r5, #0]
 8019d30:	6069      	str	r1, [r5, #4]
 8019d32:	60aa      	str	r2, [r5, #8]
 8019d34:	60eb      	str	r3, [r5, #12]
 8019d36:	8823      	ldrh	r3, [r4, #0]
 8019d38:	822b      	strh	r3, [r5, #16]
			strcpy(p->moveNumbers,"6,7,10,4,12,13,13,16,18");
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	3304      	adds	r3, #4
 8019d3e:	4a26      	ldr	r2, [pc, #152]	; (8019dd8 <problem_fetch+0x186f0>)
 8019d40:	461d      	mov	r5, r3
 8019d42:	4614      	mov	r4, r2
 8019d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d46:	6028      	str	r0, [r5, #0]
 8019d48:	6069      	str	r1, [r5, #4]
 8019d4a:	60aa      	str	r2, [r5, #8]
 8019d4c:	60eb      	str	r3, [r5, #12]
 8019d4e:	cc03      	ldmia	r4!, {r0, r1}
 8019d50:	6128      	str	r0, [r5, #16]
 8019d52:	6169      	str	r1, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,e");
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019d5a:	4a20      	ldr	r2, [pc, #128]	; (8019ddc <problem_fetch+0x186f4>)
 8019d5c:	461d      	mov	r5, r3
 8019d5e:	4614      	mov	r4, r2
 8019d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019d62:	6028      	str	r0, [r5, #0]
 8019d64:	6069      	str	r1, [r5, #4]
 8019d66:	60aa      	str	r2, [r5, #8]
 8019d68:	60eb      	str	r3, [r5, #12]
 8019d6a:	8823      	ldrh	r3, [r4, #0]
 8019d6c:	822b      	strh	r3, [r5, #16]
			break;
 8019d6e:	f002 bbeb 	b.w	801c548 <problem_fetch+0x1ae60>
 8019d72:	bf00      	nop
 8019d74:	0802c16c 	.word	0x0802c16c
 8019d78:	0802395c 	.word	0x0802395c
 8019d7c:	0802c178 	.word	0x0802c178
 8019d80:	0802befc 	.word	0x0802befc
 8019d84:	0802393c 	.word	0x0802393c
 8019d88:	0802c184 	.word	0x0802c184
 8019d8c:	0802c190 	.word	0x0802c190
 8019d90:	0802c1a0 	.word	0x0802c1a0
 8019d94:	080239d4 	.word	0x080239d4
 8019d98:	0802c1b4 	.word	0x0802c1b4
 8019d9c:	0802c1c0 	.word	0x0802c1c0
 8019da0:	0802c1cc 	.word	0x0802c1cc
 8019da4:	08023cf8 	.word	0x08023cf8
 8019da8:	0802c1dc 	.word	0x0802c1dc
 8019dac:	08023afc 	.word	0x08023afc
 8019db0:	0802c1f0 	.word	0x0802c1f0
 8019db4:	0802c1fc 	.word	0x0802c1fc
 8019db8:	0802403c 	.word	0x0802403c
 8019dbc:	0802c20c 	.word	0x0802c20c
 8019dc0:	0802c218 	.word	0x0802c218
 8019dc4:	0802c228 	.word	0x0802c228
 8019dc8:	08023b6c 	.word	0x08023b6c
 8019dcc:	0802c23c 	.word	0x0802c23c
 8019dd0:	0802391c 	.word	0x0802391c
 8019dd4:	0802c248 	.word	0x0802c248
 8019dd8:	0802c25c 	.word	0x0802c25c
 8019ddc:	08025814 	.word	0x08025814
		case 730 :
			strcpy(p->name,"MADDEKÈ");
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019de6:	49c0      	ldr	r1, [pc, #768]	; (801a0e8 <problem_fetch+0x18a00>)
 8019de8:	461a      	mov	r2, r3
 8019dea:	460b      	mov	r3, r1
 8019dec:	cb03      	ldmia	r3!, {r0, r1}
 8019dee:	6010      	str	r0, [r2, #0]
 8019df0:	6051      	str	r1, [r2, #4]
 8019df2:	781b      	ldrb	r3, [r3, #0]
 8019df4:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019dfc:	4abb      	ldr	r2, [pc, #748]	; (801a0ec <problem_fetch+0x18a04>)
 8019dfe:	6810      	ldr	r0, [r2, #0]
 8019e00:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	2205      	movs	r2, #5
 8019e06:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,I,G,G,D");
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	33a4      	adds	r3, #164	; 0xa4
 8019e0c:	49b8      	ldr	r1, [pc, #736]	; (801a0f0 <problem_fetch+0x18a08>)
 8019e0e:	461a      	mov	r2, r3
 8019e10:	460b      	mov	r3, r1
 8019e12:	cb03      	ldmia	r3!, {r0, r1}
 8019e14:	6010      	str	r0, [r2, #0]
 8019e16:	6051      	str	r1, [r2, #4]
 8019e18:	881b      	ldrh	r3, [r3, #0]
 8019e1a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,7,10,14,18");
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	3304      	adds	r3, #4
 8019e20:	4ab4      	ldr	r2, [pc, #720]	; (801a0f4 <problem_fetch+0x18a0c>)
 8019e22:	461c      	mov	r4, r3
 8019e24:	4613      	mov	r3, r2
 8019e26:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e28:	6020      	str	r0, [r4, #0]
 8019e2a:	6061      	str	r1, [r4, #4]
 8019e2c:	60a2      	str	r2, [r4, #8]
 8019e2e:	781b      	ldrb	r3, [r3, #0]
 8019e30:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019e38:	49af      	ldr	r1, [pc, #700]	; (801a0f8 <problem_fetch+0x18a10>)
 8019e3a:	461a      	mov	r2, r3
 8019e3c:	460b      	mov	r3, r1
 8019e3e:	cb03      	ldmia	r3!, {r0, r1}
 8019e40:	6010      	str	r0, [r2, #0]
 8019e42:	6051      	str	r1, [r2, #4]
 8019e44:	881b      	ldrh	r3, [r3, #0]
 8019e46:	8113      	strh	r3, [r2, #8]
			break;
 8019e48:	f002 bb7e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 731 :
			strcpy(p->name,"MEZZIF");
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019e52:	4aaa      	ldr	r2, [pc, #680]	; (801a0fc <problem_fetch+0x18a14>)
 8019e54:	6810      	ldr	r0, [r2, #0]
 8019e56:	6018      	str	r0, [r3, #0]
 8019e58:	8891      	ldrh	r1, [r2, #4]
 8019e5a:	7992      	ldrb	r2, [r2, #6]
 8019e5c:	8099      	strh	r1, [r3, #4]
 8019e5e:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7C+");
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019e66:	4aa6      	ldr	r2, [pc, #664]	; (801a100 <problem_fetch+0x18a18>)
 8019e68:	6810      	ldr	r0, [r2, #0]
 8019e6a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	2206      	movs	r2, #6
 8019e70:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,C,E,F,J,I");
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	33a4      	adds	r3, #164	; 0xa4
 8019e76:	4aa3      	ldr	r2, [pc, #652]	; (801a104 <problem_fetch+0x18a1c>)
 8019e78:	461c      	mov	r4, r3
 8019e7a:	4613      	mov	r3, r2
 8019e7c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e7e:	6020      	str	r0, [r4, #0]
 8019e80:	6061      	str	r1, [r4, #4]
 8019e82:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,9,13,12,18");
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	3304      	adds	r3, #4
 8019e88:	4a9f      	ldr	r2, [pc, #636]	; (801a108 <problem_fetch+0x18a20>)
 8019e8a:	461c      	mov	r4, r3
 8019e8c:	4613      	mov	r3, r2
 8019e8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019e90:	6020      	str	r0, [r4, #0]
 8019e92:	6061      	str	r1, [r4, #4]
 8019e94:	60a2      	str	r2, [r4, #8]
 8019e96:	881a      	ldrh	r2, [r3, #0]
 8019e98:	789b      	ldrb	r3, [r3, #2]
 8019e9a:	81a2      	strh	r2, [r4, #12]
 8019e9c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019ea4:	4a99      	ldr	r2, [pc, #612]	; (801a10c <problem_fetch+0x18a24>)
 8019ea6:	461c      	mov	r4, r3
 8019ea8:	4613      	mov	r3, r2
 8019eaa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019eac:	6020      	str	r0, [r4, #0]
 8019eae:	6061      	str	r1, [r4, #4]
 8019eb0:	60a2      	str	r2, [r4, #8]
			break;
 8019eb2:	f002 bb49 	b.w	801c548 <problem_fetch+0x1ae60>
		case 732 :
			strcpy(p->name,"BIG HOLDZ");
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019ebc:	4994      	ldr	r1, [pc, #592]	; (801a110 <problem_fetch+0x18a28>)
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	460b      	mov	r3, r1
 8019ec2:	cb03      	ldmia	r3!, {r0, r1}
 8019ec4:	6010      	str	r0, [r2, #0]
 8019ec6:	6051      	str	r1, [r2, #4]
 8019ec8:	881b      	ldrh	r3, [r3, #0]
 8019eca:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6B+");
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019ed2:	4a90      	ldr	r2, [pc, #576]	; (801a114 <problem_fetch+0x18a2c>)
 8019ed4:	6810      	ldr	r0, [r2, #0]
 8019ed6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2205      	movs	r2, #5
 8019edc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,A");
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	33a4      	adds	r3, #164	; 0xa4
 8019ee2:	498d      	ldr	r1, [pc, #564]	; (801a118 <problem_fetch+0x18a30>)
 8019ee4:	461a      	mov	r2, r3
 8019ee6:	460b      	mov	r3, r1
 8019ee8:	cb03      	ldmia	r3!, {r0, r1}
 8019eea:	6010      	str	r0, [r2, #0]
 8019eec:	6051      	str	r1, [r2, #4]
 8019eee:	881b      	ldrh	r3, [r3, #0]
 8019ef0:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,10,13,16,18");
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	3304      	adds	r3, #4
 8019ef6:	4a89      	ldr	r2, [pc, #548]	; (801a11c <problem_fetch+0x18a34>)
 8019ef8:	461c      	mov	r4, r3
 8019efa:	4613      	mov	r3, r2
 8019efc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019efe:	6020      	str	r0, [r4, #0]
 8019f00:	6061      	str	r1, [r4, #4]
 8019f02:	60a2      	str	r2, [r4, #8]
 8019f04:	881b      	ldrh	r3, [r3, #0]
 8019f06:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019f0e:	497a      	ldr	r1, [pc, #488]	; (801a0f8 <problem_fetch+0x18a10>)
 8019f10:	461a      	mov	r2, r3
 8019f12:	460b      	mov	r3, r1
 8019f14:	cb03      	ldmia	r3!, {r0, r1}
 8019f16:	6010      	str	r0, [r2, #0]
 8019f18:	6051      	str	r1, [r2, #4]
 8019f1a:	881b      	ldrh	r3, [r3, #0]
 8019f1c:	8113      	strh	r3, [r2, #8]
			break;
 8019f1e:	f002 bb13 	b.w	801c548 <problem_fetch+0x1ae60>
		case 733 :
			strcpy(p->name,"TIA");
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f28:	4a7d      	ldr	r2, [pc, #500]	; (801a120 <problem_fetch+0x18a38>)
 8019f2a:	6810      	ldr	r0, [r2, #0]
 8019f2c:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019f34:	4a77      	ldr	r2, [pc, #476]	; (801a114 <problem_fetch+0x18a2c>)
 8019f36:	6810      	ldr	r0, [r2, #0]
 8019f38:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	2207      	movs	r2, #7
 8019f3e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,F,E,I,H,I");
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	33a4      	adds	r3, #164	; 0xa4
 8019f44:	4a77      	ldr	r2, [pc, #476]	; (801a124 <problem_fetch+0x18a3c>)
 8019f46:	461c      	mov	r4, r3
 8019f48:	4613      	mov	r3, r2
 8019f4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f4c:	6020      	str	r0, [r4, #0]
 8019f4e:	6061      	str	r1, [r4, #4]
 8019f50:	60a2      	str	r2, [r4, #8]
 8019f52:	881b      	ldrh	r3, [r3, #0]
 8019f54:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,11,12,14,16,18");
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	3304      	adds	r3, #4
 8019f5a:	4a73      	ldr	r2, [pc, #460]	; (801a128 <problem_fetch+0x18a40>)
 8019f5c:	461d      	mov	r5, r3
 8019f5e:	4614      	mov	r4, r2
 8019f60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f62:	6028      	str	r0, [r5, #0]
 8019f64:	6069      	str	r1, [r5, #4]
 8019f66:	60aa      	str	r2, [r5, #8]
 8019f68:	60eb      	str	r3, [r5, #12]
 8019f6a:	8823      	ldrh	r3, [r4, #0]
 8019f6c:	78a2      	ldrb	r2, [r4, #2]
 8019f6e:	822b      	strh	r3, [r5, #16]
 8019f70:	4613      	mov	r3, r2
 8019f72:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019f7a:	4a6c      	ldr	r2, [pc, #432]	; (801a12c <problem_fetch+0x18a44>)
 8019f7c:	461c      	mov	r4, r3
 8019f7e:	4613      	mov	r3, r2
 8019f80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019f82:	6020      	str	r0, [r4, #0]
 8019f84:	6061      	str	r1, [r4, #4]
 8019f86:	60a2      	str	r2, [r4, #8]
 8019f88:	881b      	ldrh	r3, [r3, #0]
 8019f8a:	81a3      	strh	r3, [r4, #12]
			break;
 8019f8c:	f002 badc 	b.w	801c548 <problem_fetch+0x1ae60>
		case 734 :
			strcpy(p->name,"LEOCREMAFLANDERS");
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8019f96:	4a66      	ldr	r2, [pc, #408]	; (801a130 <problem_fetch+0x18a48>)
 8019f98:	461d      	mov	r5, r3
 8019f9a:	4614      	mov	r4, r2
 8019f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019f9e:	6028      	str	r0, [r5, #0]
 8019fa0:	6069      	str	r1, [r5, #4]
 8019fa2:	60aa      	str	r2, [r5, #8]
 8019fa4:	60eb      	str	r3, [r5, #12]
 8019fa6:	7823      	ldrb	r3, [r4, #0]
 8019fa8:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7C");
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8019fb0:	4a60      	ldr	r2, [pc, #384]	; (801a134 <problem_fetch+0x18a4c>)
 8019fb2:	8811      	ldrh	r1, [r2, #0]
 8019fb4:	7892      	ldrb	r2, [r2, #2]
 8019fb6:	8019      	strh	r1, [r3, #0]
 8019fb8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	2207      	movs	r2, #7
 8019fbe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,B,C,E,F,H,I");
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	33a4      	adds	r3, #164	; 0xa4
 8019fc4:	4a5c      	ldr	r2, [pc, #368]	; (801a138 <problem_fetch+0x18a50>)
 8019fc6:	461c      	mov	r4, r3
 8019fc8:	4613      	mov	r3, r2
 8019fca:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019fcc:	6020      	str	r0, [r4, #0]
 8019fce:	6061      	str	r1, [r4, #4]
 8019fd0:	60a2      	str	r2, [r4, #8]
 8019fd2:	881b      	ldrh	r3, [r3, #0]
 8019fd4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"12,6,5,9,13,12,18");
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	3304      	adds	r3, #4
 8019fda:	4a58      	ldr	r2, [pc, #352]	; (801a13c <problem_fetch+0x18a54>)
 8019fdc:	461d      	mov	r5, r3
 8019fde:	4614      	mov	r4, r2
 8019fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019fe2:	6028      	str	r0, [r5, #0]
 8019fe4:	6069      	str	r1, [r5, #4]
 8019fe6:	60aa      	str	r2, [r5, #8]
 8019fe8:	60eb      	str	r3, [r5, #12]
 8019fea:	8823      	ldrh	r3, [r4, #0]
 8019fec:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 8019ff4:	4a52      	ldr	r2, [pc, #328]	; (801a140 <problem_fetch+0x18a58>)
 8019ff6:	461c      	mov	r4, r3
 8019ff8:	4613      	mov	r3, r2
 8019ffa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8019ffc:	6020      	str	r0, [r4, #0]
 8019ffe:	6061      	str	r1, [r4, #4]
 801a000:	60a2      	str	r2, [r4, #8]
 801a002:	881b      	ldrh	r3, [r3, #0]
 801a004:	81a3      	strh	r3, [r4, #12]
			break;
 801a006:	f002 ba9f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 735 :
			strcpy(p->name,"MAFFEI");
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a010:	4a4c      	ldr	r2, [pc, #304]	; (801a144 <problem_fetch+0x18a5c>)
 801a012:	6810      	ldr	r0, [r2, #0]
 801a014:	6018      	str	r0, [r3, #0]
 801a016:	8891      	ldrh	r1, [r2, #4]
 801a018:	7992      	ldrb	r2, [r2, #6]
 801a01a:	8099      	strh	r1, [r3, #4]
 801a01c:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"6C");
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a024:	4a48      	ldr	r2, [pc, #288]	; (801a148 <problem_fetch+0x18a60>)
 801a026:	8811      	ldrh	r1, [r2, #0]
 801a028:	7892      	ldrb	r2, [r2, #2]
 801a02a:	8019      	strh	r1, [r3, #0]
 801a02c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2205      	movs	r2, #5
 801a032:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,A,E,D");
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	33a4      	adds	r3, #164	; 0xa4
 801a038:	4944      	ldr	r1, [pc, #272]	; (801a14c <problem_fetch+0x18a64>)
 801a03a:	461a      	mov	r2, r3
 801a03c:	460b      	mov	r3, r1
 801a03e:	cb03      	ldmia	r3!, {r0, r1}
 801a040:	6010      	str	r0, [r2, #0]
 801a042:	6051      	str	r1, [r2, #4]
 801a044:	881b      	ldrh	r3, [r3, #0]
 801a046:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,12,14,8,18");
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	3304      	adds	r3, #4
 801a04c:	4a40      	ldr	r2, [pc, #256]	; (801a150 <problem_fetch+0x18a68>)
 801a04e:	461c      	mov	r4, r3
 801a050:	4613      	mov	r3, r2
 801a052:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a054:	6020      	str	r0, [r4, #0]
 801a056:	6061      	str	r1, [r4, #4]
 801a058:	60a2      	str	r2, [r4, #8]
 801a05a:	781b      	ldrb	r3, [r3, #0]
 801a05c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a064:	4924      	ldr	r1, [pc, #144]	; (801a0f8 <problem_fetch+0x18a10>)
 801a066:	461a      	mov	r2, r3
 801a068:	460b      	mov	r3, r1
 801a06a:	cb03      	ldmia	r3!, {r0, r1}
 801a06c:	6010      	str	r0, [r2, #0]
 801a06e:	6051      	str	r1, [r2, #4]
 801a070:	881b      	ldrh	r3, [r3, #0]
 801a072:	8113      	strh	r3, [r2, #8]
			break;
 801a074:	f002 ba68 	b.w	801c548 <problem_fetch+0x1ae60>
		case 736 :
			strcpy(p->name,"BUIONE");
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a07e:	4a35      	ldr	r2, [pc, #212]	; (801a154 <problem_fetch+0x18a6c>)
 801a080:	6810      	ldr	r0, [r2, #0]
 801a082:	6018      	str	r0, [r3, #0]
 801a084:	8891      	ldrh	r1, [r2, #4]
 801a086:	7992      	ldrb	r2, [r2, #6]
 801a088:	8099      	strh	r1, [r3, #4]
 801a08a:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a092:	4a31      	ldr	r2, [pc, #196]	; (801a158 <problem_fetch+0x18a70>)
 801a094:	8811      	ldrh	r1, [r2, #0]
 801a096:	7892      	ldrb	r2, [r2, #2]
 801a098:	8019      	strh	r1, [r3, #0]
 801a09a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	2206      	movs	r2, #6
 801a0a0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,B,A");
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	33a4      	adds	r3, #164	; 0xa4
 801a0a6:	4a2d      	ldr	r2, [pc, #180]	; (801a15c <problem_fetch+0x18a74>)
 801a0a8:	461c      	mov	r4, r3
 801a0aa:	4613      	mov	r3, r2
 801a0ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a0ae:	6020      	str	r0, [r4, #0]
 801a0b0:	6061      	str	r1, [r4, #4]
 801a0b2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,8,9,12,15,18");
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	3304      	adds	r3, #4
 801a0b8:	4a29      	ldr	r2, [pc, #164]	; (801a160 <problem_fetch+0x18a78>)
 801a0ba:	461c      	mov	r4, r3
 801a0bc:	4613      	mov	r3, r2
 801a0be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a0c0:	6020      	str	r0, [r4, #0]
 801a0c2:	6061      	str	r1, [r4, #4]
 801a0c4:	60a2      	str	r2, [r4, #8]
 801a0c6:	881a      	ldrh	r2, [r3, #0]
 801a0c8:	789b      	ldrb	r3, [r3, #2]
 801a0ca:	81a2      	strh	r2, [r4, #12]
 801a0cc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a0d4:	4a23      	ldr	r2, [pc, #140]	; (801a164 <problem_fetch+0x18a7c>)
 801a0d6:	461c      	mov	r4, r3
 801a0d8:	4613      	mov	r3, r2
 801a0da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a0dc:	6020      	str	r0, [r4, #0]
 801a0de:	6061      	str	r1, [r4, #4]
 801a0e0:	60a2      	str	r2, [r4, #8]
			break;
 801a0e2:	f002 ba31 	b.w	801c548 <problem_fetch+0x1ae60>
 801a0e6:	bf00      	nop
 801a0e8:	0802c274 	.word	0x0802c274
 801a0ec:	08023a98 	.word	0x08023a98
 801a0f0:	0802c280 	.word	0x0802c280
 801a0f4:	0802c28c 	.word	0x0802c28c
 801a0f8:	08023e28 	.word	0x08023e28
 801a0fc:	0802c29c 	.word	0x0802c29c
 801a100:	08023f68 	.word	0x08023f68
 801a104:	0802c2a4 	.word	0x0802c2a4
 801a108:	0802c2b0 	.word	0x0802c2b0
 801a10c:	0802393c 	.word	0x0802393c
 801a110:	0802c2c0 	.word	0x0802c2c0
 801a114:	0802395c 	.word	0x0802395c
 801a118:	0802c2cc 	.word	0x0802c2cc
 801a11c:	0802c2d8 	.word	0x0802c2d8
 801a120:	0802c2e8 	.word	0x0802c2e8
 801a124:	0802c2ec 	.word	0x0802c2ec
 801a128:	0802c2fc 	.word	0x0802c2fc
 801a12c:	08023ae4 	.word	0x08023ae4
 801a130:	0802c310 	.word	0x0802c310
 801a134:	08024190 	.word	0x08024190
 801a138:	0802c324 	.word	0x0802c324
 801a13c:	0802c334 	.word	0x0802c334
 801a140:	0802c348 	.word	0x0802c348
 801a144:	0802c358 	.word	0x0802c358
 801a148:	08023a28 	.word	0x08023a28
 801a14c:	0802c360 	.word	0x0802c360
 801a150:	0802c36c 	.word	0x0802c36c
 801a154:	0802c37c 	.word	0x0802c37c
 801a158:	0802391c 	.word	0x0802391c
 801a15c:	0802c384 	.word	0x0802c384
 801a160:	08027ee0 	.word	0x08027ee0
 801a164:	08023cf8 	.word	0x08023cf8
		case 737 :
			strcpy(p->name,"A'TRAZIONE");
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a16e:	49ab      	ldr	r1, [pc, #684]	; (801a41c <problem_fetch+0x18d34>)
 801a170:	461a      	mov	r2, r3
 801a172:	460b      	mov	r3, r1
 801a174:	cb03      	ldmia	r3!, {r0, r1}
 801a176:	6010      	str	r0, [r2, #0]
 801a178:	6051      	str	r1, [r2, #4]
 801a17a:	8819      	ldrh	r1, [r3, #0]
 801a17c:	789b      	ldrb	r3, [r3, #2]
 801a17e:	8111      	strh	r1, [r2, #8]
 801a180:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B+");
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a188:	4aa5      	ldr	r2, [pc, #660]	; (801a420 <problem_fetch+0x18d38>)
 801a18a:	6810      	ldr	r0, [r2, #0]
 801a18c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2206      	movs	r2, #6
 801a192:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,J,K,G,D");
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	33a4      	adds	r3, #164	; 0xa4
 801a198:	4aa2      	ldr	r2, [pc, #648]	; (801a424 <problem_fetch+0x18d3c>)
 801a19a:	461c      	mov	r4, r3
 801a19c:	4613      	mov	r3, r2
 801a19e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1a0:	6020      	str	r0, [r4, #0]
 801a1a2:	6061      	str	r1, [r4, #4]
 801a1a4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,10,13,14,17,18");
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	3304      	adds	r3, #4
 801a1aa:	4a9f      	ldr	r2, [pc, #636]	; (801a428 <problem_fetch+0x18d40>)
 801a1ac:	461d      	mov	r5, r3
 801a1ae:	4614      	mov	r4, r2
 801a1b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1b2:	6028      	str	r0, [r5, #0]
 801a1b4:	6069      	str	r1, [r5, #4]
 801a1b6:	60aa      	str	r2, [r5, #8]
 801a1b8:	60eb      	str	r3, [r5, #12]
 801a1ba:	7823      	ldrb	r3, [r4, #0]
 801a1bc:	742b      	strb	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a1c4:	4a99      	ldr	r2, [pc, #612]	; (801a42c <problem_fetch+0x18d44>)
 801a1c6:	461c      	mov	r4, r3
 801a1c8:	4613      	mov	r3, r2
 801a1ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a1cc:	6020      	str	r0, [r4, #0]
 801a1ce:	6061      	str	r1, [r4, #4]
 801a1d0:	60a2      	str	r2, [r4, #8]
			break;
 801a1d2:	f002 b9b9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 738 :
			strcpy(p->name,"FROM VALCHIUSELLAWITHLOVE");
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a1dc:	4a94      	ldr	r2, [pc, #592]	; (801a430 <problem_fetch+0x18d48>)
 801a1de:	461d      	mov	r5, r3
 801a1e0:	4614      	mov	r4, r2
 801a1e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a1e4:	6028      	str	r0, [r5, #0]
 801a1e6:	6069      	str	r1, [r5, #4]
 801a1e8:	60aa      	str	r2, [r5, #8]
 801a1ea:	60eb      	str	r3, [r5, #12]
 801a1ec:	cc03      	ldmia	r4!, {r0, r1}
 801a1ee:	6128      	str	r0, [r5, #16]
 801a1f0:	6169      	str	r1, [r5, #20]
 801a1f2:	8823      	ldrh	r3, [r4, #0]
 801a1f4:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"7A+");
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a1fc:	4a8d      	ldr	r2, [pc, #564]	; (801a434 <problem_fetch+0x18d4c>)
 801a1fe:	6810      	ldr	r0, [r2, #0]
 801a200:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	2205      	movs	r2, #5
 801a206:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,C,I,E,D");
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	33a4      	adds	r3, #164	; 0xa4
 801a20c:	498a      	ldr	r1, [pc, #552]	; (801a438 <problem_fetch+0x18d50>)
 801a20e:	461a      	mov	r2, r3
 801a210:	460b      	mov	r3, r1
 801a212:	cb03      	ldmia	r3!, {r0, r1}
 801a214:	6010      	str	r0, [r2, #0]
 801a216:	6051      	str	r1, [r2, #4]
 801a218:	881b      	ldrh	r3, [r3, #0]
 801a21a:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,8,10,14,18");
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	3304      	adds	r3, #4
 801a220:	4a86      	ldr	r2, [pc, #536]	; (801a43c <problem_fetch+0x18d54>)
 801a222:	461c      	mov	r4, r3
 801a224:	4613      	mov	r3, r2
 801a226:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a228:	6020      	str	r0, [r4, #0]
 801a22a:	6061      	str	r1, [r4, #4]
 801a22c:	60a2      	str	r2, [r4, #8]
 801a22e:	781b      	ldrb	r3, [r3, #0]
 801a230:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a238:	4981      	ldr	r1, [pc, #516]	; (801a440 <problem_fetch+0x18d58>)
 801a23a:	461a      	mov	r2, r3
 801a23c:	460b      	mov	r3, r1
 801a23e:	cb03      	ldmia	r3!, {r0, r1}
 801a240:	6010      	str	r0, [r2, #0]
 801a242:	6051      	str	r1, [r2, #4]
 801a244:	881b      	ldrh	r3, [r3, #0]
 801a246:	8113      	strh	r3, [r2, #8]
			break;
 801a248:	f002 b97e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 739 :
			strcpy(p->name,"TIME TO PLAY");
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a252:	4a7c      	ldr	r2, [pc, #496]	; (801a444 <problem_fetch+0x18d5c>)
 801a254:	461c      	mov	r4, r3
 801a256:	4613      	mov	r3, r2
 801a258:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a25a:	6020      	str	r0, [r4, #0]
 801a25c:	6061      	str	r1, [r4, #4]
 801a25e:	60a2      	str	r2, [r4, #8]
 801a260:	781b      	ldrb	r3, [r3, #0]
 801a262:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C+");
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a26a:	4a77      	ldr	r2, [pc, #476]	; (801a448 <problem_fetch+0x18d60>)
 801a26c:	6810      	ldr	r0, [r2, #0]
 801a26e:	6018      	str	r0, [r3, #0]
			p->moveSize = 11;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	220b      	movs	r2, #11
 801a274:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,H,D,D,B,C,G,H,I");
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	33a4      	adds	r3, #164	; 0xa4
 801a27a:	4a74      	ldr	r2, [pc, #464]	; (801a44c <problem_fetch+0x18d64>)
 801a27c:	461d      	mov	r5, r3
 801a27e:	4614      	mov	r4, r2
 801a280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a282:	6028      	str	r0, [r5, #0]
 801a284:	6069      	str	r1, [r5, #4]
 801a286:	60aa      	str	r2, [r5, #8]
 801a288:	60eb      	str	r3, [r5, #12]
 801a28a:	6820      	ldr	r0, [r4, #0]
 801a28c:	6128      	str	r0, [r5, #16]
 801a28e:	88a3      	ldrh	r3, [r4, #4]
 801a290:	82ab      	strh	r3, [r5, #20]
			strcpy(p->moveNumbers,"4,7,10,12,11,15,6,16,17,16,18");
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	3304      	adds	r3, #4
 801a296:	4a6e      	ldr	r2, [pc, #440]	; (801a450 <problem_fetch+0x18d68>)
 801a298:	461d      	mov	r5, r3
 801a29a:	4614      	mov	r4, r2
 801a29c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a29e:	6028      	str	r0, [r5, #0]
 801a2a0:	6069      	str	r1, [r5, #4]
 801a2a2:	60aa      	str	r2, [r5, #8]
 801a2a4:	60eb      	str	r3, [r5, #12]
 801a2a6:	cc07      	ldmia	r4!, {r0, r1, r2}
 801a2a8:	6128      	str	r0, [r5, #16]
 801a2aa:	6169      	str	r1, [r5, #20]
 801a2ac:	61aa      	str	r2, [r5, #24]
 801a2ae:	8823      	ldrh	r3, [r4, #0]
 801a2b0:	83ab      	strh	r3, [r5, #28]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,d,d,d,e");
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a2b8:	4a66      	ldr	r2, [pc, #408]	; (801a454 <problem_fetch+0x18d6c>)
 801a2ba:	461d      	mov	r5, r3
 801a2bc:	4614      	mov	r4, r2
 801a2be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a2c0:	6028      	str	r0, [r5, #0]
 801a2c2:	6069      	str	r1, [r5, #4]
 801a2c4:	60aa      	str	r2, [r5, #8]
 801a2c6:	60eb      	str	r3, [r5, #12]
 801a2c8:	6820      	ldr	r0, [r4, #0]
 801a2ca:	6128      	str	r0, [r5, #16]
 801a2cc:	88a3      	ldrh	r3, [r4, #4]
 801a2ce:	82ab      	strh	r3, [r5, #20]
			break;
 801a2d0:	f002 b93a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 740 :
			strcpy(p->name,"KIDSPROBLEM");
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a2da:	4a5f      	ldr	r2, [pc, #380]	; (801a458 <problem_fetch+0x18d70>)
 801a2dc:	461c      	mov	r4, r3
 801a2de:	4613      	mov	r3, r2
 801a2e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a2e2:	6020      	str	r0, [r4, #0]
 801a2e4:	6061      	str	r1, [r4, #4]
 801a2e6:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6C");
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a2ee:	4a5b      	ldr	r2, [pc, #364]	; (801a45c <problem_fetch+0x18d74>)
 801a2f0:	8811      	ldrh	r1, [r2, #0]
 801a2f2:	7892      	ldrb	r2, [r2, #2]
 801a2f4:	8019      	strh	r1, [r3, #0]
 801a2f6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	2208      	movs	r2, #8
 801a2fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,G,B,C,H,E,D");
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	33a4      	adds	r3, #164	; 0xa4
 801a302:	4a57      	ldr	r2, [pc, #348]	; (801a460 <problem_fetch+0x18d78>)
 801a304:	461c      	mov	r4, r3
 801a306:	4615      	mov	r5, r2
 801a308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a30a:	6020      	str	r0, [r4, #0]
 801a30c:	6061      	str	r1, [r4, #4]
 801a30e:	60a2      	str	r2, [r4, #8]
 801a310:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,9,10,13,13,16,18");
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	3304      	adds	r3, #4
 801a316:	4a53      	ldr	r2, [pc, #332]	; (801a464 <problem_fetch+0x18d7c>)
 801a318:	461d      	mov	r5, r3
 801a31a:	4614      	mov	r4, r2
 801a31c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a31e:	6028      	str	r0, [r5, #0]
 801a320:	6069      	str	r1, [r5, #4]
 801a322:	60aa      	str	r2, [r5, #8]
 801a324:	60eb      	str	r3, [r5, #12]
 801a326:	6820      	ldr	r0, [r4, #0]
 801a328:	6128      	str	r0, [r5, #16]
 801a32a:	7923      	ldrb	r3, [r4, #4]
 801a32c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a334:	4a4c      	ldr	r2, [pc, #304]	; (801a468 <problem_fetch+0x18d80>)
 801a336:	461c      	mov	r4, r3
 801a338:	4615      	mov	r5, r2
 801a33a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a33c:	6020      	str	r0, [r4, #0]
 801a33e:	6061      	str	r1, [r4, #4]
 801a340:	60a2      	str	r2, [r4, #8]
 801a342:	60e3      	str	r3, [r4, #12]
			break;
 801a344:	f002 b900 	b.w	801c548 <problem_fetch+0x1ae60>
		case 741 :
			strcpy(p->name,"DUBUCHI");
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a34e:	4947      	ldr	r1, [pc, #284]	; (801a46c <problem_fetch+0x18d84>)
 801a350:	461a      	mov	r2, r3
 801a352:	460b      	mov	r3, r1
 801a354:	cb03      	ldmia	r3!, {r0, r1}
 801a356:	6010      	str	r0, [r2, #0]
 801a358:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a360:	4a34      	ldr	r2, [pc, #208]	; (801a434 <problem_fetch+0x18d4c>)
 801a362:	6810      	ldr	r0, [r2, #0]
 801a364:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	2206      	movs	r2, #6
 801a36a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,G,C,C,A");
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	33a4      	adds	r3, #164	; 0xa4
 801a370:	4a3f      	ldr	r2, [pc, #252]	; (801a470 <problem_fetch+0x18d88>)
 801a372:	461c      	mov	r4, r3
 801a374:	4613      	mov	r3, r2
 801a376:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a378:	6020      	str	r0, [r4, #0]
 801a37a:	6061      	str	r1, [r4, #4]
 801a37c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	3304      	adds	r3, #4
 801a382:	4a3c      	ldr	r2, [pc, #240]	; (801a474 <problem_fetch+0x18d8c>)
 801a384:	461c      	mov	r4, r3
 801a386:	4615      	mov	r5, r2
 801a388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a38a:	6020      	str	r0, [r4, #0]
 801a38c:	6061      	str	r1, [r4, #4]
 801a38e:	60a2      	str	r2, [r4, #8]
 801a390:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a398:	4a24      	ldr	r2, [pc, #144]	; (801a42c <problem_fetch+0x18d44>)
 801a39a:	461c      	mov	r4, r3
 801a39c:	4613      	mov	r3, r2
 801a39e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3a0:	6020      	str	r0, [r4, #0]
 801a3a2:	6061      	str	r1, [r4, #4]
 801a3a4:	60a2      	str	r2, [r4, #8]
			break;
 801a3a6:	f002 b8cf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 742 :
			strcpy(p->name,"FULCO");
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a3b0:	4a31      	ldr	r2, [pc, #196]	; (801a478 <problem_fetch+0x18d90>)
 801a3b2:	6810      	ldr	r0, [r2, #0]
 801a3b4:	6018      	str	r0, [r3, #0]
 801a3b6:	8892      	ldrh	r2, [r2, #4]
 801a3b8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a3c0:	4a26      	ldr	r2, [pc, #152]	; (801a45c <problem_fetch+0x18d74>)
 801a3c2:	8811      	ldrh	r1, [r2, #0]
 801a3c4:	7892      	ldrb	r2, [r2, #2]
 801a3c6:	8019      	strh	r1, [r3, #0]
 801a3c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2207      	movs	r2, #7
 801a3ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,D,G,E,D");
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	33a4      	adds	r3, #164	; 0xa4
 801a3d4:	4a29      	ldr	r2, [pc, #164]	; (801a47c <problem_fetch+0x18d94>)
 801a3d6:	461c      	mov	r4, r3
 801a3d8:	4613      	mov	r3, r2
 801a3da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a3dc:	6020      	str	r0, [r4, #0]
 801a3de:	6061      	str	r1, [r4, #4]
 801a3e0:	60a2      	str	r2, [r4, #8]
 801a3e2:	881b      	ldrh	r3, [r3, #0]
 801a3e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,9,11,14,16,18");
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	3304      	adds	r3, #4
 801a3ea:	4a25      	ldr	r2, [pc, #148]	; (801a480 <problem_fetch+0x18d98>)
 801a3ec:	461d      	mov	r5, r3
 801a3ee:	4614      	mov	r4, r2
 801a3f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a3f2:	6028      	str	r0, [r5, #0]
 801a3f4:	6069      	str	r1, [r5, #4]
 801a3f6:	60aa      	str	r2, [r5, #8]
 801a3f8:	60eb      	str	r3, [r5, #12]
 801a3fa:	8823      	ldrh	r3, [r4, #0]
 801a3fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a404:	4a1f      	ldr	r2, [pc, #124]	; (801a484 <problem_fetch+0x18d9c>)
 801a406:	461c      	mov	r4, r3
 801a408:	4613      	mov	r3, r2
 801a40a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a40c:	6020      	str	r0, [r4, #0]
 801a40e:	6061      	str	r1, [r4, #4]
 801a410:	60a2      	str	r2, [r4, #8]
 801a412:	881b      	ldrh	r3, [r3, #0]
 801a414:	81a3      	strh	r3, [r4, #12]
			break;
 801a416:	f002 b897 	b.w	801c548 <problem_fetch+0x1ae60>
 801a41a:	bf00      	nop
 801a41c:	0802c390 	.word	0x0802c390
 801a420:	08023a98 	.word	0x08023a98
 801a424:	0802c39c 	.word	0x0802c39c
 801a428:	0802c3a8 	.word	0x0802c3a8
 801a42c:	08023cf8 	.word	0x08023cf8
 801a430:	0802c3bc 	.word	0x0802c3bc
 801a434:	08023afc 	.word	0x08023afc
 801a438:	0802c3d8 	.word	0x0802c3d8
 801a43c:	08024c64 	.word	0x08024c64
 801a440:	08023e28 	.word	0x08023e28
 801a444:	0802c3e4 	.word	0x0802c3e4
 801a448:	080239f4 	.word	0x080239f4
 801a44c:	0802c3f4 	.word	0x0802c3f4
 801a450:	0802c40c 	.word	0x0802c40c
 801a454:	0802c42c 	.word	0x0802c42c
 801a458:	0802c444 	.word	0x0802c444
 801a45c:	08023a28 	.word	0x08023a28
 801a460:	0802c450 	.word	0x0802c450
 801a464:	0802c460 	.word	0x0802c460
 801a468:	08023a80 	.word	0x08023a80
 801a46c:	0802c478 	.word	0x0802c478
 801a470:	0802c480 	.word	0x0802c480
 801a474:	0802b32c 	.word	0x0802b32c
 801a478:	0802c48c 	.word	0x0802c48c
 801a47c:	0802c494 	.word	0x0802c494
 801a480:	08024668 	.word	0x08024668
 801a484:	080239d4 	.word	0x080239d4
		case 743 :
			strcpy(p->name,"KICKER 2");
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a48e:	49c3      	ldr	r1, [pc, #780]	; (801a79c <problem_fetch+0x190b4>)
 801a490:	461a      	mov	r2, r3
 801a492:	460b      	mov	r3, r1
 801a494:	cb03      	ldmia	r3!, {r0, r1}
 801a496:	6010      	str	r0, [r2, #0]
 801a498:	6051      	str	r1, [r2, #4]
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a4a4:	4abe      	ldr	r2, [pc, #760]	; (801a7a0 <problem_fetch+0x190b8>)
 801a4a6:	8811      	ldrh	r1, [r2, #0]
 801a4a8:	7892      	ldrb	r2, [r2, #2]
 801a4aa:	8019      	strh	r1, [r3, #0]
 801a4ac:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2207      	movs	r2, #7
 801a4b2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,G,E,I");
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	33a4      	adds	r3, #164	; 0xa4
 801a4b8:	4aba      	ldr	r2, [pc, #744]	; (801a7a4 <problem_fetch+0x190bc>)
 801a4ba:	461c      	mov	r4, r3
 801a4bc:	4613      	mov	r3, r2
 801a4be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4c0:	6020      	str	r0, [r4, #0]
 801a4c2:	6061      	str	r1, [r4, #4]
 801a4c4:	60a2      	str	r2, [r4, #8]
 801a4c6:	881b      	ldrh	r3, [r3, #0]
 801a4c8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,9,12,14,14,18");
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	3304      	adds	r3, #4
 801a4ce:	4ab6      	ldr	r2, [pc, #728]	; (801a7a8 <problem_fetch+0x190c0>)
 801a4d0:	461d      	mov	r5, r3
 801a4d2:	4614      	mov	r4, r2
 801a4d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a4d6:	6028      	str	r0, [r5, #0]
 801a4d8:	6069      	str	r1, [r5, #4]
 801a4da:	60aa      	str	r2, [r5, #8]
 801a4dc:	60eb      	str	r3, [r5, #12]
 801a4de:	8823      	ldrh	r3, [r4, #0]
 801a4e0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a4e8:	4ab0      	ldr	r2, [pc, #704]	; (801a7ac <problem_fetch+0x190c4>)
 801a4ea:	461c      	mov	r4, r3
 801a4ec:	4613      	mov	r3, r2
 801a4ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a4f0:	6020      	str	r0, [r4, #0]
 801a4f2:	6061      	str	r1, [r4, #4]
 801a4f4:	60a2      	str	r2, [r4, #8]
 801a4f6:	881b      	ldrh	r3, [r3, #0]
 801a4f8:	81a3      	strh	r3, [r4, #12]
			break;
 801a4fa:	f002 b825 	b.w	801c548 <problem_fetch+0x1ae60>
		case 744 :
			strcpy(p->name,"KICKER");
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a504:	4aaa      	ldr	r2, [pc, #680]	; (801a7b0 <problem_fetch+0x190c8>)
 801a506:	6810      	ldr	r0, [r2, #0]
 801a508:	6018      	str	r0, [r3, #0]
 801a50a:	8891      	ldrh	r1, [r2, #4]
 801a50c:	7992      	ldrb	r2, [r2, #6]
 801a50e:	8099      	strh	r1, [r3, #4]
 801a510:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A+");
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a518:	4aa6      	ldr	r2, [pc, #664]	; (801a7b4 <problem_fetch+0x190cc>)
 801a51a:	6810      	ldr	r0, [r2, #0]
 801a51c:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	2206      	movs	r2, #6
 801a522:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,D,E,B,E,D");
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	33a4      	adds	r3, #164	; 0xa4
 801a528:	4aa3      	ldr	r2, [pc, #652]	; (801a7b8 <problem_fetch+0x190d0>)
 801a52a:	461c      	mov	r4, r3
 801a52c:	4613      	mov	r3, r2
 801a52e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a530:	6020      	str	r0, [r4, #0]
 801a532:	6061      	str	r1, [r4, #4]
 801a534:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,7,9,12,14,18");
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	3304      	adds	r3, #4
 801a53a:	4aa0      	ldr	r2, [pc, #640]	; (801a7bc <problem_fetch+0x190d4>)
 801a53c:	461c      	mov	r4, r3
 801a53e:	4613      	mov	r3, r2
 801a540:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a542:	6020      	str	r0, [r4, #0]
 801a544:	6061      	str	r1, [r4, #4]
 801a546:	60a2      	str	r2, [r4, #8]
 801a548:	881a      	ldrh	r2, [r3, #0]
 801a54a:	789b      	ldrb	r3, [r3, #2]
 801a54c:	81a2      	strh	r2, [r4, #12]
 801a54e:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a556:	4a9a      	ldr	r2, [pc, #616]	; (801a7c0 <problem_fetch+0x190d8>)
 801a558:	461c      	mov	r4, r3
 801a55a:	4613      	mov	r3, r2
 801a55c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a55e:	6020      	str	r0, [r4, #0]
 801a560:	6061      	str	r1, [r4, #4]
 801a562:	60a2      	str	r2, [r4, #8]
			break;
 801a564:	f001 bff0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 745 :
			strcpy(p->name,"GRÜMPU-TURNIER");
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a56e:	4a95      	ldr	r2, [pc, #596]	; (801a7c4 <problem_fetch+0x190dc>)
 801a570:	461c      	mov	r4, r3
 801a572:	4615      	mov	r5, r2
 801a574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a576:	6020      	str	r0, [r4, #0]
 801a578:	6061      	str	r1, [r4, #4]
 801a57a:	60a2      	str	r2, [r4, #8]
 801a57c:	60e3      	str	r3, [r4, #12]
			strcpy(p->grade,"6B+");
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a584:	4a90      	ldr	r2, [pc, #576]	; (801a7c8 <problem_fetch+0x190e0>)
 801a586:	6810      	ldr	r0, [r2, #0]
 801a588:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	2207      	movs	r2, #7
 801a58e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,A,E,A,E,A");
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	33a4      	adds	r3, #164	; 0xa4
 801a594:	4a8d      	ldr	r2, [pc, #564]	; (801a7cc <problem_fetch+0x190e4>)
 801a596:	461c      	mov	r4, r3
 801a598:	4613      	mov	r3, r2
 801a59a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a59c:	6020      	str	r0, [r4, #0]
 801a59e:	6061      	str	r1, [r4, #4]
 801a5a0:	60a2      	str	r2, [r4, #8]
 801a5a2:	881b      	ldrh	r3, [r3, #0]
 801a5a4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,9,9,12,14,16,18");
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	3304      	adds	r3, #4
 801a5aa:	4a89      	ldr	r2, [pc, #548]	; (801a7d0 <problem_fetch+0x190e8>)
 801a5ac:	461d      	mov	r5, r3
 801a5ae:	4614      	mov	r4, r2
 801a5b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5b2:	6028      	str	r0, [r5, #0]
 801a5b4:	6069      	str	r1, [r5, #4]
 801a5b6:	60aa      	str	r2, [r5, #8]
 801a5b8:	60eb      	str	r3, [r5, #12]
 801a5ba:	8823      	ldrh	r3, [r4, #0]
 801a5bc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a5c4:	4a79      	ldr	r2, [pc, #484]	; (801a7ac <problem_fetch+0x190c4>)
 801a5c6:	461c      	mov	r4, r3
 801a5c8:	4613      	mov	r3, r2
 801a5ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a5cc:	6020      	str	r0, [r4, #0]
 801a5ce:	6061      	str	r1, [r4, #4]
 801a5d0:	60a2      	str	r2, [r4, #8]
 801a5d2:	881b      	ldrh	r3, [r3, #0]
 801a5d4:	81a3      	strh	r3, [r4, #12]
			break;
 801a5d6:	f001 bfb7 	b.w	801c548 <problem_fetch+0x1ae60>
		case 746 :
			strcpy(p->name,"LADYBUG RIGHT VAR");
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a5e0:	4a7c      	ldr	r2, [pc, #496]	; (801a7d4 <problem_fetch+0x190ec>)
 801a5e2:	461d      	mov	r5, r3
 801a5e4:	4614      	mov	r4, r2
 801a5e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a5e8:	6028      	str	r0, [r5, #0]
 801a5ea:	6069      	str	r1, [r5, #4]
 801a5ec:	60aa      	str	r2, [r5, #8]
 801a5ee:	60eb      	str	r3, [r5, #12]
 801a5f0:	8823      	ldrh	r3, [r4, #0]
 801a5f2:	822b      	strh	r3, [r5, #16]
			strcpy(p->grade,"7A+");
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a5fa:	4a6e      	ldr	r2, [pc, #440]	; (801a7b4 <problem_fetch+0x190cc>)
 801a5fc:	6810      	ldr	r0, [r2, #0]
 801a5fe:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	2208      	movs	r2, #8
 801a604:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,C,F,A,E,I");
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	33a4      	adds	r3, #164	; 0xa4
 801a60a:	4a73      	ldr	r2, [pc, #460]	; (801a7d8 <problem_fetch+0x190f0>)
 801a60c:	461c      	mov	r4, r3
 801a60e:	4615      	mov	r5, r2
 801a610:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a612:	6020      	str	r0, [r4, #0]
 801a614:	6061      	str	r1, [r4, #4]
 801a616:	60a2      	str	r2, [r4, #8]
 801a618:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,10,13,11,9,16,18");
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	3304      	adds	r3, #4
 801a61e:	4a6f      	ldr	r2, [pc, #444]	; (801a7dc <problem_fetch+0x190f4>)
 801a620:	461d      	mov	r5, r3
 801a622:	4614      	mov	r4, r2
 801a624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a626:	6028      	str	r0, [r5, #0]
 801a628:	6069      	str	r1, [r5, #4]
 801a62a:	60aa      	str	r2, [r5, #8]
 801a62c:	60eb      	str	r3, [r5, #12]
 801a62e:	6820      	ldr	r0, [r4, #0]
 801a630:	6128      	str	r0, [r5, #16]
 801a632:	7923      	ldrb	r3, [r4, #4]
 801a634:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a63c:	4a68      	ldr	r2, [pc, #416]	; (801a7e0 <problem_fetch+0x190f8>)
 801a63e:	461c      	mov	r4, r3
 801a640:	4615      	mov	r5, r2
 801a642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a644:	6020      	str	r0, [r4, #0]
 801a646:	6061      	str	r1, [r4, #4]
 801a648:	60a2      	str	r2, [r4, #8]
 801a64a:	60e3      	str	r3, [r4, #12]
			break;
 801a64c:	f001 bf7c 	b.w	801c548 <problem_fetch+0x1ae60>
		case 747 :
			strcpy(p->name,"NANO");
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a656:	4a63      	ldr	r2, [pc, #396]	; (801a7e4 <problem_fetch+0x190fc>)
 801a658:	6810      	ldr	r0, [r2, #0]
 801a65a:	6018      	str	r0, [r3, #0]
 801a65c:	7912      	ldrb	r2, [r2, #4]
 801a65e:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a666:	4a53      	ldr	r2, [pc, #332]	; (801a7b4 <problem_fetch+0x190cc>)
 801a668:	6810      	ldr	r0, [r2, #0]
 801a66a:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	2205      	movs	r2, #5
 801a670:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,I,H,K,I");
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	33a4      	adds	r3, #164	; 0xa4
 801a676:	495c      	ldr	r1, [pc, #368]	; (801a7e8 <problem_fetch+0x19100>)
 801a678:	461a      	mov	r2, r3
 801a67a:	460b      	mov	r3, r1
 801a67c:	cb03      	ldmia	r3!, {r0, r1}
 801a67e:	6010      	str	r0, [r2, #0]
 801a680:	6051      	str	r1, [r2, #4]
 801a682:	881b      	ldrh	r3, [r3, #0]
 801a684:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,10,12,14,18");
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	3304      	adds	r3, #4
 801a68a:	4a58      	ldr	r2, [pc, #352]	; (801a7ec <problem_fetch+0x19104>)
 801a68c:	461c      	mov	r4, r3
 801a68e:	4613      	mov	r3, r2
 801a690:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a692:	6020      	str	r0, [r4, #0]
 801a694:	6061      	str	r1, [r4, #4]
 801a696:	60a2      	str	r2, [r4, #8]
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a6a2:	4953      	ldr	r1, [pc, #332]	; (801a7f0 <problem_fetch+0x19108>)
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	460b      	mov	r3, r1
 801a6a8:	cb03      	ldmia	r3!, {r0, r1}
 801a6aa:	6010      	str	r0, [r2, #0]
 801a6ac:	6051      	str	r1, [r2, #4]
 801a6ae:	881b      	ldrh	r3, [r3, #0]
 801a6b0:	8113      	strh	r3, [r2, #8]
			break;
 801a6b2:	f001 bf49 	b.w	801c548 <problem_fetch+0x1ae60>
		case 748 :
			strcpy(p->name,"REALE");
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a6bc:	4a4d      	ldr	r2, [pc, #308]	; (801a7f4 <problem_fetch+0x1910c>)
 801a6be:	6810      	ldr	r0, [r2, #0]
 801a6c0:	6018      	str	r0, [r3, #0]
 801a6c2:	8892      	ldrh	r2, [r2, #4]
 801a6c4:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6C");
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a6cc:	4a4a      	ldr	r2, [pc, #296]	; (801a7f8 <problem_fetch+0x19110>)
 801a6ce:	8811      	ldrh	r1, [r2, #0]
 801a6d0:	7892      	ldrb	r2, [r2, #2]
 801a6d2:	8019      	strh	r1, [r3, #0]
 801a6d4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2207      	movs	r2, #7
 801a6da:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,F,G,K,I");
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	33a4      	adds	r3, #164	; 0xa4
 801a6e0:	4a46      	ldr	r2, [pc, #280]	; (801a7fc <problem_fetch+0x19114>)
 801a6e2:	461c      	mov	r4, r3
 801a6e4:	4613      	mov	r3, r2
 801a6e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a6e8:	6020      	str	r0, [r4, #0]
 801a6ea:	6061      	str	r1, [r4, #4]
 801a6ec:	60a2      	str	r2, [r4, #8]
 801a6ee:	881b      	ldrh	r3, [r3, #0]
 801a6f0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,14,16,18");
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	3304      	adds	r3, #4
 801a6f6:	4a42      	ldr	r2, [pc, #264]	; (801a800 <problem_fetch+0x19118>)
 801a6f8:	461d      	mov	r5, r3
 801a6fa:	4614      	mov	r4, r2
 801a6fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a6fe:	6028      	str	r0, [r5, #0]
 801a700:	6069      	str	r1, [r5, #4]
 801a702:	60aa      	str	r2, [r5, #8]
 801a704:	60eb      	str	r3, [r5, #12]
 801a706:	8823      	ldrh	r3, [r4, #0]
 801a708:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a710:	4a3c      	ldr	r2, [pc, #240]	; (801a804 <problem_fetch+0x1911c>)
 801a712:	461c      	mov	r4, r3
 801a714:	4613      	mov	r3, r2
 801a716:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a718:	6020      	str	r0, [r4, #0]
 801a71a:	6061      	str	r1, [r4, #4]
 801a71c:	60a2      	str	r2, [r4, #8]
 801a71e:	881b      	ldrh	r3, [r3, #0]
 801a720:	81a3      	strh	r3, [r4, #12]
			break;
 801a722:	f001 bf11 	b.w	801c548 <problem_fetch+0x1ae60>
		case 749 :
			strcpy(p->name,"UNDERTAKER");
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a72c:	4936      	ldr	r1, [pc, #216]	; (801a808 <problem_fetch+0x19120>)
 801a72e:	461a      	mov	r2, r3
 801a730:	460b      	mov	r3, r1
 801a732:	cb03      	ldmia	r3!, {r0, r1}
 801a734:	6010      	str	r0, [r2, #0]
 801a736:	6051      	str	r1, [r2, #4]
 801a738:	8819      	ldrh	r1, [r3, #0]
 801a73a:	789b      	ldrb	r3, [r3, #2]
 801a73c:	8111      	strh	r1, [r2, #8]
 801a73e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7B");
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a746:	4a31      	ldr	r2, [pc, #196]	; (801a80c <problem_fetch+0x19124>)
 801a748:	8811      	ldrh	r1, [r2, #0]
 801a74a:	7892      	ldrb	r2, [r2, #2]
 801a74c:	8019      	strh	r1, [r3, #0]
 801a74e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	2205      	movs	r2, #5
 801a754:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,B,E,D");
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	33a4      	adds	r3, #164	; 0xa4
 801a75a:	492d      	ldr	r1, [pc, #180]	; (801a810 <problem_fetch+0x19128>)
 801a75c:	461a      	mov	r2, r3
 801a75e:	460b      	mov	r3, r1
 801a760:	cb03      	ldmia	r3!, {r0, r1}
 801a762:	6010      	str	r0, [r2, #0]
 801a764:	6051      	str	r1, [r2, #4]
 801a766:	881b      	ldrh	r3, [r3, #0]
 801a768:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,9,12,14,18");
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	3304      	adds	r3, #4
 801a76e:	4a29      	ldr	r2, [pc, #164]	; (801a814 <problem_fetch+0x1912c>)
 801a770:	461c      	mov	r4, r3
 801a772:	4613      	mov	r3, r2
 801a774:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a776:	6020      	str	r0, [r4, #0]
 801a778:	6061      	str	r1, [r4, #4]
 801a77a:	60a2      	str	r2, [r4, #8]
 801a77c:	781b      	ldrb	r3, [r3, #0]
 801a77e:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a786:	491a      	ldr	r1, [pc, #104]	; (801a7f0 <problem_fetch+0x19108>)
 801a788:	461a      	mov	r2, r3
 801a78a:	460b      	mov	r3, r1
 801a78c:	cb03      	ldmia	r3!, {r0, r1}
 801a78e:	6010      	str	r0, [r2, #0]
 801a790:	6051      	str	r1, [r2, #4]
 801a792:	881b      	ldrh	r3, [r3, #0]
 801a794:	8113      	strh	r3, [r2, #8]
			break;
 801a796:	f001 bed7 	b.w	801c548 <problem_fetch+0x1ae60>
 801a79a:	bf00      	nop
 801a79c:	0802c4a4 	.word	0x0802c4a4
 801a7a0:	0802391c 	.word	0x0802391c
 801a7a4:	0802c4b0 	.word	0x0802c4b0
 801a7a8:	0802c4c0 	.word	0x0802c4c0
 801a7ac:	08023ae4 	.word	0x08023ae4
 801a7b0:	0802c4d4 	.word	0x0802c4d4
 801a7b4:	08023afc 	.word	0x08023afc
 801a7b8:	0802c4dc 	.word	0x0802c4dc
 801a7bc:	0802c4e8 	.word	0x0802c4e8
 801a7c0:	08023cf8 	.word	0x08023cf8
 801a7c4:	0802c4f8 	.word	0x0802c4f8
 801a7c8:	0802395c 	.word	0x0802395c
 801a7cc:	0802c508 	.word	0x0802c508
 801a7d0:	0802c518 	.word	0x0802c518
 801a7d4:	0802c52c 	.word	0x0802c52c
 801a7d8:	0802c540 	.word	0x0802c540
 801a7dc:	0802c550 	.word	0x0802c550
 801a7e0:	08023a80 	.word	0x08023a80
 801a7e4:	0802c568 	.word	0x0802c568
 801a7e8:	0802c570 	.word	0x0802c570
 801a7ec:	0802c57c 	.word	0x0802c57c
 801a7f0:	08023e28 	.word	0x08023e28
 801a7f4:	0802c58c 	.word	0x0802c58c
 801a7f8:	08023a28 	.word	0x08023a28
 801a7fc:	0802c594 	.word	0x0802c594
 801a800:	0802c5a4 	.word	0x0802c5a4
 801a804:	080239d4 	.word	0x080239d4
 801a808:	0802c5b8 	.word	0x0802c5b8
 801a80c:	08024054 	.word	0x08024054
 801a810:	0802c5c4 	.word	0x0802c5c4
 801a814:	08023f78 	.word	0x08023f78
		case 750 :
			strcpy(p->name,"COGUARO");
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a81e:	49c0      	ldr	r1, [pc, #768]	; (801ab20 <problem_fetch+0x19438>)
 801a820:	461a      	mov	r2, r3
 801a822:	460b      	mov	r3, r1
 801a824:	cb03      	ldmia	r3!, {r0, r1}
 801a826:	6010      	str	r0, [r2, #0]
 801a828:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a830:	4abc      	ldr	r2, [pc, #752]	; (801ab24 <problem_fetch+0x1943c>)
 801a832:	6810      	ldr	r0, [r2, #0]
 801a834:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	2205      	movs	r2, #5
 801a83a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,H,G,I");
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	33a4      	adds	r3, #164	; 0xa4
 801a840:	49b9      	ldr	r1, [pc, #740]	; (801ab28 <problem_fetch+0x19440>)
 801a842:	461a      	mov	r2, r3
 801a844:	460b      	mov	r3, r1
 801a846:	cb03      	ldmia	r3!, {r0, r1}
 801a848:	6010      	str	r0, [r2, #0]
 801a84a:	6051      	str	r1, [r2, #4]
 801a84c:	881b      	ldrh	r3, [r3, #0]
 801a84e:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,8,8,14,18");
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	3304      	adds	r3, #4
 801a854:	4ab5      	ldr	r2, [pc, #724]	; (801ab2c <problem_fetch+0x19444>)
 801a856:	461c      	mov	r4, r3
 801a858:	4613      	mov	r3, r2
 801a85a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a85c:	6020      	str	r0, [r4, #0]
 801a85e:	6061      	str	r1, [r4, #4]
 801a860:	60a2      	str	r2, [r4, #8]
			strcpy(p->startFinish,"s,d,d,d,e");
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a868:	49b1      	ldr	r1, [pc, #708]	; (801ab30 <problem_fetch+0x19448>)
 801a86a:	461a      	mov	r2, r3
 801a86c:	460b      	mov	r3, r1
 801a86e:	cb03      	ldmia	r3!, {r0, r1}
 801a870:	6010      	str	r0, [r2, #0]
 801a872:	6051      	str	r1, [r2, #4]
 801a874:	881b      	ldrh	r3, [r3, #0]
 801a876:	8113      	strh	r3, [r2, #8]
			break;
 801a878:	f001 be66 	b.w	801c548 <problem_fetch+0x1ae60>
		case 751 :
			strcpy(p->name,"SMOKING AREA");
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a882:	4aac      	ldr	r2, [pc, #688]	; (801ab34 <problem_fetch+0x1944c>)
 801a884:	461c      	mov	r4, r3
 801a886:	4613      	mov	r3, r2
 801a888:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a88a:	6020      	str	r0, [r4, #0]
 801a88c:	6061      	str	r1, [r4, #4]
 801a88e:	60a2      	str	r2, [r4, #8]
 801a890:	781b      	ldrb	r3, [r3, #0]
 801a892:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a89a:	4aa7      	ldr	r2, [pc, #668]	; (801ab38 <problem_fetch+0x19450>)
 801a89c:	8811      	ldrh	r1, [r2, #0]
 801a89e:	7892      	ldrb	r2, [r2, #2]
 801a8a0:	8019      	strh	r1, [r3, #0]
 801a8a2:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2206      	movs	r2, #6
 801a8a8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,E,I");
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	33a4      	adds	r3, #164	; 0xa4
 801a8ae:	4aa3      	ldr	r2, [pc, #652]	; (801ab3c <problem_fetch+0x19454>)
 801a8b0:	461c      	mov	r4, r3
 801a8b2:	4613      	mov	r3, r2
 801a8b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8b6:	6020      	str	r0, [r4, #0]
 801a8b8:	6061      	str	r1, [r4, #4]
 801a8ba:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,16,18");
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	3304      	adds	r3, #4
 801a8c0:	4a9f      	ldr	r2, [pc, #636]	; (801ab40 <problem_fetch+0x19458>)
 801a8c2:	461c      	mov	r4, r3
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8c8:	6020      	str	r0, [r4, #0]
 801a8ca:	6061      	str	r1, [r4, #4]
 801a8cc:	60a2      	str	r2, [r4, #8]
 801a8ce:	881a      	ldrh	r2, [r3, #0]
 801a8d0:	789b      	ldrb	r3, [r3, #2]
 801a8d2:	81a2      	strh	r2, [r4, #12]
 801a8d4:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a8dc:	4a99      	ldr	r2, [pc, #612]	; (801ab44 <problem_fetch+0x1945c>)
 801a8de:	461c      	mov	r4, r3
 801a8e0:	4613      	mov	r3, r2
 801a8e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a8e4:	6020      	str	r0, [r4, #0]
 801a8e6:	6061      	str	r1, [r4, #4]
 801a8e8:	60a2      	str	r2, [r4, #8]
			break;
 801a8ea:	f001 be2d 	b.w	801c548 <problem_fetch+0x1ae60>
		case 752 :
			strcpy(p->name,"BOGLI FOR PRESIDENT");
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a8f4:	4a94      	ldr	r2, [pc, #592]	; (801ab48 <problem_fetch+0x19460>)
 801a8f6:	461d      	mov	r5, r3
 801a8f8:	4614      	mov	r4, r2
 801a8fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a8fc:	6028      	str	r0, [r5, #0]
 801a8fe:	6069      	str	r1, [r5, #4]
 801a900:	60aa      	str	r2, [r5, #8]
 801a902:	60eb      	str	r3, [r5, #12]
 801a904:	6820      	ldr	r0, [r4, #0]
 801a906:	6128      	str	r0, [r5, #16]
			strcpy(p->grade,"7A+");
 801a908:	687b      	ldr	r3, [r7, #4]
 801a90a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a90e:	4a85      	ldr	r2, [pc, #532]	; (801ab24 <problem_fetch+0x1943c>)
 801a910:	6810      	ldr	r0, [r2, #0]
 801a912:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2207      	movs	r2, #7
 801a918:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,D,D,A,A");
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	33a4      	adds	r3, #164	; 0xa4
 801a91e:	4a8b      	ldr	r2, [pc, #556]	; (801ab4c <problem_fetch+0x19464>)
 801a920:	461c      	mov	r4, r3
 801a922:	4613      	mov	r3, r2
 801a924:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a926:	6020      	str	r0, [r4, #0]
 801a928:	6061      	str	r1, [r4, #4]
 801a92a:	60a2      	str	r2, [r4, #8]
 801a92c:	881b      	ldrh	r3, [r3, #0]
 801a92e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,11,15,14,18");
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	3304      	adds	r3, #4
 801a934:	4a86      	ldr	r2, [pc, #536]	; (801ab50 <problem_fetch+0x19468>)
 801a936:	461d      	mov	r5, r3
 801a938:	4614      	mov	r4, r2
 801a93a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a93c:	6028      	str	r0, [r5, #0]
 801a93e:	6069      	str	r1, [r5, #4]
 801a940:	60aa      	str	r2, [r5, #8]
 801a942:	60eb      	str	r3, [r5, #12]
 801a944:	8823      	ldrh	r3, [r4, #0]
 801a946:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a94e:	4a81      	ldr	r2, [pc, #516]	; (801ab54 <problem_fetch+0x1946c>)
 801a950:	461c      	mov	r4, r3
 801a952:	4613      	mov	r3, r2
 801a954:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a956:	6020      	str	r0, [r4, #0]
 801a958:	6061      	str	r1, [r4, #4]
 801a95a:	60a2      	str	r2, [r4, #8]
 801a95c:	881b      	ldrh	r3, [r3, #0]
 801a95e:	81a3      	strh	r3, [r4, #12]
			break;
 801a960:	f001 bdf2 	b.w	801c548 <problem_fetch+0x1ae60>
		case 753 :
			strcpy(p->name,"DU SPICCI");
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a96a:	497b      	ldr	r1, [pc, #492]	; (801ab58 <problem_fetch+0x19470>)
 801a96c:	461a      	mov	r2, r3
 801a96e:	460b      	mov	r3, r1
 801a970:	cb03      	ldmia	r3!, {r0, r1}
 801a972:	6010      	str	r0, [r2, #0]
 801a974:	6051      	str	r1, [r2, #4]
 801a976:	881b      	ldrh	r3, [r3, #0]
 801a978:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C+");
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a980:	4a76      	ldr	r2, [pc, #472]	; (801ab5c <problem_fetch+0x19474>)
 801a982:	6810      	ldr	r0, [r2, #0]
 801a984:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	2206      	movs	r2, #6
 801a98a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,I,D,E,D");
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	33a4      	adds	r3, #164	; 0xa4
 801a990:	4a73      	ldr	r2, [pc, #460]	; (801ab60 <problem_fetch+0x19478>)
 801a992:	461c      	mov	r4, r3
 801a994:	4613      	mov	r3, r2
 801a996:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a998:	6020      	str	r0, [r4, #0]
 801a99a:	6061      	str	r1, [r4, #4]
 801a99c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,11,14,18");
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	3304      	adds	r3, #4
 801a9a2:	4a70      	ldr	r2, [pc, #448]	; (801ab64 <problem_fetch+0x1947c>)
 801a9a4:	461c      	mov	r4, r3
 801a9a6:	4615      	mov	r5, r2
 801a9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a9aa:	6020      	str	r0, [r4, #0]
 801a9ac:	6061      	str	r1, [r4, #4]
 801a9ae:	60a2      	str	r2, [r4, #8]
 801a9b0:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801a9b8:	4a6b      	ldr	r2, [pc, #428]	; (801ab68 <problem_fetch+0x19480>)
 801a9ba:	461c      	mov	r4, r3
 801a9bc:	4613      	mov	r3, r2
 801a9be:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9c0:	6020      	str	r0, [r4, #0]
 801a9c2:	6061      	str	r1, [r4, #4]
 801a9c4:	60a2      	str	r2, [r4, #8]
			break;
 801a9c6:	f001 bdbf 	b.w	801c548 <problem_fetch+0x1ae60>
		case 754 :
			strcpy(p->name,"CALLA");
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801a9d0:	4a66      	ldr	r2, [pc, #408]	; (801ab6c <problem_fetch+0x19484>)
 801a9d2:	6810      	ldr	r0, [r2, #0]
 801a9d4:	6018      	str	r0, [r3, #0]
 801a9d6:	8892      	ldrh	r2, [r2, #4]
 801a9d8:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801a9e0:	4a63      	ldr	r2, [pc, #396]	; (801ab70 <problem_fetch+0x19488>)
 801a9e2:	6810      	ldr	r0, [r2, #0]
 801a9e4:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	2207      	movs	r2, #7
 801a9ea:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,F,G,E,I");
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	33a4      	adds	r3, #164	; 0xa4
 801a9f0:	4a60      	ldr	r2, [pc, #384]	; (801ab74 <problem_fetch+0x1948c>)
 801a9f2:	461c      	mov	r4, r3
 801a9f4:	4613      	mov	r3, r2
 801a9f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801a9f8:	6020      	str	r0, [r4, #0]
 801a9fa:	6061      	str	r1, [r4, #4]
 801a9fc:	60a2      	str	r2, [r4, #8]
 801a9fe:	881b      	ldrh	r3, [r3, #0]
 801aa00:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,13,14,16,18");
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	3304      	adds	r3, #4
 801aa06:	4a5c      	ldr	r2, [pc, #368]	; (801ab78 <problem_fetch+0x19490>)
 801aa08:	461d      	mov	r5, r3
 801aa0a:	4614      	mov	r4, r2
 801aa0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aa0e:	6028      	str	r0, [r5, #0]
 801aa10:	6069      	str	r1, [r5, #4]
 801aa12:	60aa      	str	r2, [r5, #8]
 801aa14:	60eb      	str	r3, [r5, #12]
 801aa16:	8823      	ldrh	r3, [r4, #0]
 801aa18:	78a2      	ldrb	r2, [r4, #2]
 801aa1a:	822b      	strh	r3, [r5, #16]
 801aa1c:	4613      	mov	r3, r2
 801aa1e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801aa26:	4a55      	ldr	r2, [pc, #340]	; (801ab7c <problem_fetch+0x19494>)
 801aa28:	461c      	mov	r4, r3
 801aa2a:	4613      	mov	r3, r2
 801aa2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa2e:	6020      	str	r0, [r4, #0]
 801aa30:	6061      	str	r1, [r4, #4]
 801aa32:	60a2      	str	r2, [r4, #8]
 801aa34:	881b      	ldrh	r3, [r3, #0]
 801aa36:	81a3      	strh	r3, [r4, #12]
			break;
 801aa38:	f001 bd86 	b.w	801c548 <problem_fetch+0x1ae60>
		case 755 :
			strcpy(p->name,"FA");
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aa42:	4a4f      	ldr	r2, [pc, #316]	; (801ab80 <problem_fetch+0x19498>)
 801aa44:	8811      	ldrh	r1, [r2, #0]
 801aa46:	7892      	ldrb	r2, [r2, #2]
 801aa48:	8019      	strh	r1, [r3, #0]
 801aa4a:	709a      	strb	r2, [r3, #2]
			strcpy(p->grade,"6B+");
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aa52:	4a47      	ldr	r2, [pc, #284]	; (801ab70 <problem_fetch+0x19488>)
 801aa54:	6810      	ldr	r0, [r2, #0]
 801aa56:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	2206      	movs	r2, #6
 801aa5c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,H,E,D");
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	33a4      	adds	r3, #164	; 0xa4
 801aa62:	4a48      	ldr	r2, [pc, #288]	; (801ab84 <problem_fetch+0x1949c>)
 801aa64:	461c      	mov	r4, r3
 801aa66:	4613      	mov	r3, r2
 801aa68:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa6a:	6020      	str	r0, [r4, #0]
 801aa6c:	6061      	str	r1, [r4, #4]
 801aa6e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	3304      	adds	r3, #4
 801aa74:	4a44      	ldr	r2, [pc, #272]	; (801ab88 <problem_fetch+0x194a0>)
 801aa76:	461c      	mov	r4, r3
 801aa78:	4613      	mov	r3, r2
 801aa7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa7c:	6020      	str	r0, [r4, #0]
 801aa7e:	6061      	str	r1, [r4, #4]
 801aa80:	60a2      	str	r2, [r4, #8]
 801aa82:	881a      	ldrh	r2, [r3, #0]
 801aa84:	789b      	ldrb	r3, [r3, #2]
 801aa86:	81a2      	strh	r2, [r4, #12]
 801aa88:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801aa90:	4a2c      	ldr	r2, [pc, #176]	; (801ab44 <problem_fetch+0x1945c>)
 801aa92:	461c      	mov	r4, r3
 801aa94:	4613      	mov	r3, r2
 801aa96:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aa98:	6020      	str	r0, [r4, #0]
 801aa9a:	6061      	str	r1, [r4, #4]
 801aa9c:	60a2      	str	r2, [r4, #8]
			break;
 801aa9e:	f001 bd53 	b.w	801c548 <problem_fetch+0x1ae60>
		case 756 :
			strcpy(p->name,"BLACK HOLE");
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aaa8:	4938      	ldr	r1, [pc, #224]	; (801ab8c <problem_fetch+0x194a4>)
 801aaaa:	461a      	mov	r2, r3
 801aaac:	460b      	mov	r3, r1
 801aaae:	cb03      	ldmia	r3!, {r0, r1}
 801aab0:	6010      	str	r0, [r2, #0]
 801aab2:	6051      	str	r1, [r2, #4]
 801aab4:	8819      	ldrh	r1, [r3, #0]
 801aab6:	789b      	ldrb	r3, [r3, #2]
 801aab8:	8111      	strh	r1, [r2, #8]
 801aaba:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aac2:	4a2b      	ldr	r2, [pc, #172]	; (801ab70 <problem_fetch+0x19488>)
 801aac4:	6810      	ldr	r0, [r2, #0]
 801aac6:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2207      	movs	r2, #7
 801aacc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,I,J,G,G,D");
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	33a4      	adds	r3, #164	; 0xa4
 801aad2:	4a2f      	ldr	r2, [pc, #188]	; (801ab90 <problem_fetch+0x194a8>)
 801aad4:	461c      	mov	r4, r3
 801aad6:	4613      	mov	r3, r2
 801aad8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801aada:	6020      	str	r0, [r4, #0]
 801aadc:	6061      	str	r1, [r4, #4]
 801aade:	60a2      	str	r2, [r4, #8]
 801aae0:	881b      	ldrh	r3, [r3, #0]
 801aae2:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,7,10,13,15,17,18");
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	3304      	adds	r3, #4
 801aae8:	4a2a      	ldr	r2, [pc, #168]	; (801ab94 <problem_fetch+0x194ac>)
 801aaea:	461d      	mov	r5, r3
 801aaec:	4614      	mov	r4, r2
 801aaee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aaf0:	6028      	str	r0, [r5, #0]
 801aaf2:	6069      	str	r1, [r5, #4]
 801aaf4:	60aa      	str	r2, [r5, #8]
 801aaf6:	60eb      	str	r3, [r5, #12]
 801aaf8:	8823      	ldrh	r3, [r4, #0]
 801aafa:	78a2      	ldrb	r2, [r4, #2]
 801aafc:	822b      	strh	r3, [r5, #16]
 801aafe:	4613      	mov	r3, r2
 801ab00:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ab08:	4a1c      	ldr	r2, [pc, #112]	; (801ab7c <problem_fetch+0x19494>)
 801ab0a:	461c      	mov	r4, r3
 801ab0c:	4613      	mov	r3, r2
 801ab0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ab10:	6020      	str	r0, [r4, #0]
 801ab12:	6061      	str	r1, [r4, #4]
 801ab14:	60a2      	str	r2, [r4, #8]
 801ab16:	881b      	ldrh	r3, [r3, #0]
 801ab18:	81a3      	strh	r3, [r4, #12]
			break;
 801ab1a:	f001 bd15 	b.w	801c548 <problem_fetch+0x1ae60>
 801ab1e:	bf00      	nop
 801ab20:	0802c5d0 	.word	0x0802c5d0
 801ab24:	08023afc 	.word	0x08023afc
 801ab28:	0802c5d8 	.word	0x0802c5d8
 801ab2c:	0802c5e4 	.word	0x0802c5e4
 801ab30:	08023e28 	.word	0x08023e28
 801ab34:	0802c5f0 	.word	0x0802c5f0
 801ab38:	08023a28 	.word	0x08023a28
 801ab3c:	0802c600 	.word	0x0802c600
 801ab40:	0802c60c 	.word	0x0802c60c
 801ab44:	08023cf8 	.word	0x08023cf8
 801ab48:	0802c61c 	.word	0x0802c61c
 801ab4c:	0802c630 	.word	0x0802c630
 801ab50:	0802c640 	.word	0x0802c640
 801ab54:	080239d4 	.word	0x080239d4
 801ab58:	0802c654 	.word	0x0802c654
 801ab5c:	080239f4 	.word	0x080239f4
 801ab60:	0802c660 	.word	0x0802c660
 801ab64:	0802c66c 	.word	0x0802c66c
 801ab68:	0802393c 	.word	0x0802393c
 801ab6c:	0802c67c 	.word	0x0802c67c
 801ab70:	0802395c 	.word	0x0802395c
 801ab74:	0802c684 	.word	0x0802c684
 801ab78:	08029ad0 	.word	0x08029ad0
 801ab7c:	08023ae4 	.word	0x08023ae4
 801ab80:	0802c694 	.word	0x0802c694
 801ab84:	0802c698 	.word	0x0802c698
 801ab88:	080283fc 	.word	0x080283fc
 801ab8c:	0802c6a4 	.word	0x0802c6a4
 801ab90:	0802c6b0 	.word	0x0802c6b0
 801ab94:	0802c6c0 	.word	0x0802c6c0
		case 757 :
			strcpy(p->name,"MATCH GAME");
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ab9e:	49ad      	ldr	r1, [pc, #692]	; (801ae54 <problem_fetch+0x1976c>)
 801aba0:	461a      	mov	r2, r3
 801aba2:	460b      	mov	r3, r1
 801aba4:	cb03      	ldmia	r3!, {r0, r1}
 801aba6:	6010      	str	r0, [r2, #0]
 801aba8:	6051      	str	r1, [r2, #4]
 801abaa:	8819      	ldrh	r1, [r3, #0]
 801abac:	789b      	ldrb	r3, [r3, #2]
 801abae:	8111      	strh	r1, [r2, #8]
 801abb0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801abb8:	4aa7      	ldr	r2, [pc, #668]	; (801ae58 <problem_fetch+0x19770>)
 801abba:	6810      	ldr	r0, [r2, #0]
 801abbc:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2205      	movs	r2, #5
 801abc2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,I,G,I");
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	33a4      	adds	r3, #164	; 0xa4
 801abc8:	49a4      	ldr	r1, [pc, #656]	; (801ae5c <problem_fetch+0x19774>)
 801abca:	461a      	mov	r2, r3
 801abcc:	460b      	mov	r3, r1
 801abce:	cb03      	ldmia	r3!, {r0, r1}
 801abd0:	6010      	str	r0, [r2, #0]
 801abd2:	6051      	str	r1, [r2, #4]
 801abd4:	881b      	ldrh	r3, [r3, #0]
 801abd6:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"4,6,10,14,18");
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	3304      	adds	r3, #4
 801abdc:	4aa0      	ldr	r2, [pc, #640]	; (801ae60 <problem_fetch+0x19778>)
 801abde:	461c      	mov	r4, r3
 801abe0:	4613      	mov	r3, r2
 801abe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801abe4:	6020      	str	r0, [r4, #0]
 801abe6:	6061      	str	r1, [r4, #4]
 801abe8:	60a2      	str	r2, [r4, #8]
 801abea:	781b      	ldrb	r3, [r3, #0]
 801abec:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,e");
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801abf4:	499b      	ldr	r1, [pc, #620]	; (801ae64 <problem_fetch+0x1977c>)
 801abf6:	461a      	mov	r2, r3
 801abf8:	460b      	mov	r3, r1
 801abfa:	cb03      	ldmia	r3!, {r0, r1}
 801abfc:	6010      	str	r0, [r2, #0]
 801abfe:	6051      	str	r1, [r2, #4]
 801ac00:	881b      	ldrh	r3, [r3, #0]
 801ac02:	8113      	strh	r3, [r2, #8]
			break;
 801ac04:	f001 bca0 	b.w	801c548 <problem_fetch+0x1ae60>
		case 758 :
			strcpy(p->name,"USE THE BIG ONES");
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac0e:	4a96      	ldr	r2, [pc, #600]	; (801ae68 <problem_fetch+0x19780>)
 801ac10:	461d      	mov	r5, r3
 801ac12:	4614      	mov	r4, r2
 801ac14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac16:	6028      	str	r0, [r5, #0]
 801ac18:	6069      	str	r1, [r5, #4]
 801ac1a:	60aa      	str	r2, [r5, #8]
 801ac1c:	60eb      	str	r3, [r5, #12]
 801ac1e:	7823      	ldrb	r3, [r4, #0]
 801ac20:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"6B+");
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac28:	4a8b      	ldr	r2, [pc, #556]	; (801ae58 <problem_fetch+0x19770>)
 801ac2a:	6810      	ldr	r0, [r2, #0]
 801ac2c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	2207      	movs	r2, #7
 801ac32:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,F,C,D,A");
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	33a4      	adds	r3, #164	; 0xa4
 801ac38:	4a8c      	ldr	r2, [pc, #560]	; (801ae6c <problem_fetch+0x19784>)
 801ac3a:	461c      	mov	r4, r3
 801ac3c:	4613      	mov	r3, r2
 801ac3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac40:	6020      	str	r0, [r4, #0]
 801ac42:	6061      	str	r1, [r4, #4]
 801ac44:	60a2      	str	r2, [r4, #8]
 801ac46:	881b      	ldrh	r3, [r3, #0]
 801ac48:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,11,13,15,18");
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	3304      	adds	r3, #4
 801ac4e:	4a88      	ldr	r2, [pc, #544]	; (801ae70 <problem_fetch+0x19788>)
 801ac50:	461d      	mov	r5, r3
 801ac52:	4614      	mov	r4, r2
 801ac54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ac56:	6028      	str	r0, [r5, #0]
 801ac58:	6069      	str	r1, [r5, #4]
 801ac5a:	60aa      	str	r2, [r5, #8]
 801ac5c:	60eb      	str	r3, [r5, #12]
 801ac5e:	8823      	ldrh	r3, [r4, #0]
 801ac60:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ac68:	4a82      	ldr	r2, [pc, #520]	; (801ae74 <problem_fetch+0x1978c>)
 801ac6a:	461c      	mov	r4, r3
 801ac6c:	4613      	mov	r3, r2
 801ac6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac70:	6020      	str	r0, [r4, #0]
 801ac72:	6061      	str	r1, [r4, #4]
 801ac74:	60a2      	str	r2, [r4, #8]
 801ac76:	881b      	ldrh	r3, [r3, #0]
 801ac78:	81a3      	strh	r3, [r4, #12]
			break;
 801ac7a:	f001 bc65 	b.w	801c548 <problem_fetch+0x1ae60>
		case 759 :
			strcpy(p->name,"KANG MINA IOI");
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ac84:	4a7c      	ldr	r2, [pc, #496]	; (801ae78 <problem_fetch+0x19790>)
 801ac86:	461c      	mov	r4, r3
 801ac88:	4613      	mov	r3, r2
 801ac8a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ac8c:	6020      	str	r0, [r4, #0]
 801ac8e:	6061      	str	r1, [r4, #4]
 801ac90:	60a2      	str	r2, [r4, #8]
 801ac92:	881b      	ldrh	r3, [r3, #0]
 801ac94:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A");
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ac9c:	4a77      	ldr	r2, [pc, #476]	; (801ae7c <problem_fetch+0x19794>)
 801ac9e:	8811      	ldrh	r1, [r2, #0]
 801aca0:	7892      	ldrb	r2, [r2, #2]
 801aca2:	8019      	strh	r1, [r3, #0]
 801aca4:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	2208      	movs	r2, #8
 801acaa:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,E,B,B,A,D,E,I");
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	33a4      	adds	r3, #164	; 0xa4
 801acb0:	4a73      	ldr	r2, [pc, #460]	; (801ae80 <problem_fetch+0x19798>)
 801acb2:	461c      	mov	r4, r3
 801acb4:	4615      	mov	r5, r2
 801acb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acb8:	6020      	str	r0, [r4, #0]
 801acba:	6061      	str	r1, [r4, #4]
 801acbc:	60a2      	str	r2, [r4, #8]
 801acbe:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,9,10,12,14,15,16,18");
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	3304      	adds	r3, #4
 801acc4:	4a6f      	ldr	r2, [pc, #444]	; (801ae84 <problem_fetch+0x1979c>)
 801acc6:	461d      	mov	r5, r3
 801acc8:	4614      	mov	r4, r2
 801acca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801accc:	6028      	str	r0, [r5, #0]
 801acce:	6069      	str	r1, [r5, #4]
 801acd0:	60aa      	str	r2, [r5, #8]
 801acd2:	60eb      	str	r3, [r5, #12]
 801acd4:	6820      	ldr	r0, [r4, #0]
 801acd6:	6128      	str	r0, [r5, #16]
 801acd8:	88a3      	ldrh	r3, [r4, #4]
 801acda:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ace2:	4a69      	ldr	r2, [pc, #420]	; (801ae88 <problem_fetch+0x197a0>)
 801ace4:	461c      	mov	r4, r3
 801ace6:	4615      	mov	r5, r2
 801ace8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801acea:	6020      	str	r0, [r4, #0]
 801acec:	6061      	str	r1, [r4, #4]
 801acee:	60a2      	str	r2, [r4, #8]
 801acf0:	60e3      	str	r3, [r4, #12]
			break;
 801acf2:	f001 bc29 	b.w	801c548 <problem_fetch+0x1ae60>
		case 760 :
			strcpy(p->name,"ACG21");
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801acfc:	4a63      	ldr	r2, [pc, #396]	; (801ae8c <problem_fetch+0x197a4>)
 801acfe:	6810      	ldr	r0, [r2, #0]
 801ad00:	6018      	str	r0, [r3, #0]
 801ad02:	8892      	ldrh	r2, [r2, #4]
 801ad04:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7B");
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad0c:	4a60      	ldr	r2, [pc, #384]	; (801ae90 <problem_fetch+0x197a8>)
 801ad0e:	8811      	ldrh	r1, [r2, #0]
 801ad10:	7892      	ldrb	r2, [r2, #2]
 801ad12:	8019      	strh	r1, [r3, #0]
 801ad14:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	2208      	movs	r2, #8
 801ad1a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,E,I,G,B,E,C,A");
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	33a4      	adds	r3, #164	; 0xa4
 801ad20:	4a5c      	ldr	r2, [pc, #368]	; (801ae94 <problem_fetch+0x197ac>)
 801ad22:	461c      	mov	r4, r3
 801ad24:	4615      	mov	r5, r2
 801ad26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad28:	6020      	str	r0, [r4, #0]
 801ad2a:	6061      	str	r1, [r4, #4]
 801ad2c:	60a2      	str	r2, [r4, #8]
 801ad2e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,10,10,10,14,16,18");
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	3304      	adds	r3, #4
 801ad34:	4a58      	ldr	r2, [pc, #352]	; (801ae98 <problem_fetch+0x197b0>)
 801ad36:	461d      	mov	r5, r3
 801ad38:	4614      	mov	r4, r2
 801ad3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad3c:	6028      	str	r0, [r5, #0]
 801ad3e:	6069      	str	r1, [r5, #4]
 801ad40:	60aa      	str	r2, [r5, #8]
 801ad42:	60eb      	str	r3, [r5, #12]
 801ad44:	6820      	ldr	r0, [r4, #0]
 801ad46:	6128      	str	r0, [r5, #16]
 801ad48:	88a3      	ldrh	r3, [r4, #4]
 801ad4a:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ad52:	4a4d      	ldr	r2, [pc, #308]	; (801ae88 <problem_fetch+0x197a0>)
 801ad54:	461c      	mov	r4, r3
 801ad56:	4615      	mov	r5, r2
 801ad58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad5a:	6020      	str	r0, [r4, #0]
 801ad5c:	6061      	str	r1, [r4, #4]
 801ad5e:	60a2      	str	r2, [r4, #8]
 801ad60:	60e3      	str	r3, [r4, #12]
			break;
 801ad62:	f001 bbf1 	b.w	801c548 <problem_fetch+0x1ae60>
		case 761 :
			strcpy(p->name,"LANKY BASTARD");
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ad6c:	4a4b      	ldr	r2, [pc, #300]	; (801ae9c <problem_fetch+0x197b4>)
 801ad6e:	461c      	mov	r4, r3
 801ad70:	4613      	mov	r3, r2
 801ad72:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ad74:	6020      	str	r0, [r4, #0]
 801ad76:	6061      	str	r1, [r4, #4]
 801ad78:	60a2      	str	r2, [r4, #8]
 801ad7a:	881b      	ldrh	r3, [r3, #0]
 801ad7c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ad84:	4a46      	ldr	r2, [pc, #280]	; (801aea0 <problem_fetch+0x197b8>)
 801ad86:	8811      	ldrh	r1, [r2, #0]
 801ad88:	7892      	ldrb	r2, [r2, #2]
 801ad8a:	8019      	strh	r1, [r3, #0]
 801ad8c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	2207      	movs	r2, #7
 801ad92:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,I,H,K,E,D");
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	33a4      	adds	r3, #164	; 0xa4
 801ad98:	4a42      	ldr	r2, [pc, #264]	; (801aea4 <problem_fetch+0x197bc>)
 801ad9a:	461c      	mov	r4, r3
 801ad9c:	4613      	mov	r3, r2
 801ad9e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ada0:	6020      	str	r0, [r4, #0]
 801ada2:	6061      	str	r1, [r4, #4]
 801ada4:	60a2      	str	r2, [r4, #8]
 801ada6:	881b      	ldrh	r3, [r3, #0]
 801ada8:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,9,12,14,16,18");
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	3304      	adds	r3, #4
 801adae:	4a3e      	ldr	r2, [pc, #248]	; (801aea8 <problem_fetch+0x197c0>)
 801adb0:	461d      	mov	r5, r3
 801adb2:	4614      	mov	r4, r2
 801adb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801adb6:	6028      	str	r0, [r5, #0]
 801adb8:	6069      	str	r1, [r5, #4]
 801adba:	60aa      	str	r2, [r5, #8]
 801adbc:	60eb      	str	r3, [r5, #12]
 801adbe:	8823      	ldrh	r3, [r4, #0]
 801adc0:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801adc8:	4a2a      	ldr	r2, [pc, #168]	; (801ae74 <problem_fetch+0x1978c>)
 801adca:	461c      	mov	r4, r3
 801adcc:	4613      	mov	r3, r2
 801adce:	cb07      	ldmia	r3!, {r0, r1, r2}
 801add0:	6020      	str	r0, [r4, #0]
 801add2:	6061      	str	r1, [r4, #4]
 801add4:	60a2      	str	r2, [r4, #8]
 801add6:	881b      	ldrh	r3, [r3, #0]
 801add8:	81a3      	strh	r3, [r4, #12]
			break;
 801adda:	f001 bbb5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 762 :
			strcpy(p->name,"TESS WIDE");
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ade4:	4931      	ldr	r1, [pc, #196]	; (801aeac <problem_fetch+0x197c4>)
 801ade6:	461a      	mov	r2, r3
 801ade8:	460b      	mov	r3, r1
 801adea:	cb03      	ldmia	r3!, {r0, r1}
 801adec:	6010      	str	r0, [r2, #0]
 801adee:	6051      	str	r1, [r2, #4]
 801adf0:	881b      	ldrh	r3, [r3, #0]
 801adf2:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801adfa:	4a29      	ldr	r2, [pc, #164]	; (801aea0 <problem_fetch+0x197b8>)
 801adfc:	8811      	ldrh	r1, [r2, #0]
 801adfe:	7892      	ldrb	r2, [r2, #2]
 801ae00:	8019      	strh	r1, [r3, #0]
 801ae02:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	2207      	movs	r2, #7
 801ae08:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,E,H,C,D,D");
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	33a4      	adds	r3, #164	; 0xa4
 801ae0e:	4a28      	ldr	r2, [pc, #160]	; (801aeb0 <problem_fetch+0x197c8>)
 801ae10:	461c      	mov	r4, r3
 801ae12:	4613      	mov	r3, r2
 801ae14:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ae16:	6020      	str	r0, [r4, #0]
 801ae18:	6061      	str	r1, [r4, #4]
 801ae1a:	60a2      	str	r2, [r4, #8]
 801ae1c:	881b      	ldrh	r3, [r3, #0]
 801ae1e:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,13,15,18");
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	3304      	adds	r3, #4
 801ae24:	4a23      	ldr	r2, [pc, #140]	; (801aeb4 <problem_fetch+0x197cc>)
 801ae26:	461d      	mov	r5, r3
 801ae28:	4614      	mov	r4, r2
 801ae2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ae2c:	6028      	str	r0, [r5, #0]
 801ae2e:	6069      	str	r1, [r5, #4]
 801ae30:	60aa      	str	r2, [r5, #8]
 801ae32:	60eb      	str	r3, [r5, #12]
 801ae34:	8823      	ldrh	r3, [r4, #0]
 801ae36:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ae3e:	4a1e      	ldr	r2, [pc, #120]	; (801aeb8 <problem_fetch+0x197d0>)
 801ae40:	461c      	mov	r4, r3
 801ae42:	4613      	mov	r3, r2
 801ae44:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ae46:	6020      	str	r0, [r4, #0]
 801ae48:	6061      	str	r1, [r4, #4]
 801ae4a:	60a2      	str	r2, [r4, #8]
 801ae4c:	881b      	ldrh	r3, [r3, #0]
 801ae4e:	81a3      	strh	r3, [r4, #12]
			break;
 801ae50:	f001 bb7a 	b.w	801c548 <problem_fetch+0x1ae60>
 801ae54:	0802c6d4 	.word	0x0802c6d4
 801ae58:	0802395c 	.word	0x0802395c
 801ae5c:	0802c6e0 	.word	0x0802c6e0
 801ae60:	0802c6ec 	.word	0x0802c6ec
 801ae64:	0802403c 	.word	0x0802403c
 801ae68:	0802c6fc 	.word	0x0802c6fc
 801ae6c:	0802c710 	.word	0x0802c710
 801ae70:	0802c720 	.word	0x0802c720
 801ae74:	08023ae4 	.word	0x08023ae4
 801ae78:	0802c734 	.word	0x0802c734
 801ae7c:	0802391c 	.word	0x0802391c
 801ae80:	0802c744 	.word	0x0802c744
 801ae84:	0802c754 	.word	0x0802c754
 801ae88:	08023b6c 	.word	0x08023b6c
 801ae8c:	0802c76c 	.word	0x0802c76c
 801ae90:	08024054 	.word	0x08024054
 801ae94:	0802c774 	.word	0x0802c774
 801ae98:	0802c784 	.word	0x0802c784
 801ae9c:	0802c79c 	.word	0x0802c79c
 801aea0:	08023a28 	.word	0x08023a28
 801aea4:	0802c7ac 	.word	0x0802c7ac
 801aea8:	0802c7bc 	.word	0x0802c7bc
 801aeac:	0802c7d0 	.word	0x0802c7d0
 801aeb0:	0802c7dc 	.word	0x0802c7dc
 801aeb4:	0802c7ec 	.word	0x0802c7ec
 801aeb8:	080239d4 	.word	0x080239d4
		case 763 :
			strcpy(p->name,"ACG19");
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aec2:	4abb      	ldr	r2, [pc, #748]	; (801b1b0 <problem_fetch+0x19ac8>)
 801aec4:	6810      	ldr	r0, [r2, #0]
 801aec6:	6018      	str	r0, [r3, #0]
 801aec8:	8892      	ldrh	r2, [r2, #4]
 801aeca:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801aed2:	4ab8      	ldr	r2, [pc, #736]	; (801b1b4 <problem_fetch+0x19acc>)
 801aed4:	6810      	ldr	r0, [r2, #0]
 801aed6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	2208      	movs	r2, #8
 801aedc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,J,G,B,E,E,I,I");
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	33a4      	adds	r3, #164	; 0xa4
 801aee2:	4ab5      	ldr	r2, [pc, #724]	; (801b1b8 <problem_fetch+0x19ad0>)
 801aee4:	461c      	mov	r4, r3
 801aee6:	4615      	mov	r5, r2
 801aee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801aeea:	6020      	str	r0, [r4, #0]
 801aeec:	6061      	str	r1, [r4, #4]
 801aeee:	60a2      	str	r2, [r4, #8]
 801aef0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,9,10,12,14,14,18");
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	3304      	adds	r3, #4
 801aef6:	4ab1      	ldr	r2, [pc, #708]	; (801b1bc <problem_fetch+0x19ad4>)
 801aef8:	461d      	mov	r5, r3
 801aefa:	4614      	mov	r4, r2
 801aefc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aefe:	6028      	str	r0, [r5, #0]
 801af00:	6069      	str	r1, [r5, #4]
 801af02:	60aa      	str	r2, [r5, #8]
 801af04:	60eb      	str	r3, [r5, #12]
 801af06:	6820      	ldr	r0, [r4, #0]
 801af08:	6128      	str	r0, [r5, #16]
 801af0a:	7923      	ldrb	r3, [r4, #4]
 801af0c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801af14:	4aaa      	ldr	r2, [pc, #680]	; (801b1c0 <problem_fetch+0x19ad8>)
 801af16:	461c      	mov	r4, r3
 801af18:	4615      	mov	r5, r2
 801af1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af1c:	6020      	str	r0, [r4, #0]
 801af1e:	6061      	str	r1, [r4, #4]
 801af20:	60a2      	str	r2, [r4, #8]
 801af22:	60e3      	str	r3, [r4, #12]
			break;
 801af24:	f001 bb10 	b.w	801c548 <problem_fetch+0x1ae60>
		case 764 :
			strcpy(p->name,"BLACK CAT'S");
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af2e:	4aa5      	ldr	r2, [pc, #660]	; (801b1c4 <problem_fetch+0x19adc>)
 801af30:	461c      	mov	r4, r3
 801af32:	4613      	mov	r3, r2
 801af34:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af36:	6020      	str	r0, [r4, #0]
 801af38:	6061      	str	r1, [r4, #4]
 801af3a:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7C+");
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801af42:	4aa1      	ldr	r2, [pc, #644]	; (801b1c8 <problem_fetch+0x19ae0>)
 801af44:	6810      	ldr	r0, [r2, #0]
 801af46:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	2206      	movs	r2, #6
 801af4c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,E,D,J,I,I");
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	33a4      	adds	r3, #164	; 0xa4
 801af52:	4a9e      	ldr	r2, [pc, #632]	; (801b1cc <problem_fetch+0x19ae4>)
 801af54:	461c      	mov	r4, r3
 801af56:	4613      	mov	r3, r2
 801af58:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af5a:	6020      	str	r0, [r4, #0]
 801af5c:	6061      	str	r1, [r4, #4]
 801af5e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,11,12,15,18");
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	3304      	adds	r3, #4
 801af64:	4a9a      	ldr	r2, [pc, #616]	; (801b1d0 <problem_fetch+0x19ae8>)
 801af66:	461c      	mov	r4, r3
 801af68:	4615      	mov	r5, r2
 801af6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801af6c:	6020      	str	r0, [r4, #0]
 801af6e:	6061      	str	r1, [r4, #4]
 801af70:	60a2      	str	r2, [r4, #8]
 801af72:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801af7a:	4a96      	ldr	r2, [pc, #600]	; (801b1d4 <problem_fetch+0x19aec>)
 801af7c:	461c      	mov	r4, r3
 801af7e:	4613      	mov	r3, r2
 801af80:	cb07      	ldmia	r3!, {r0, r1, r2}
 801af82:	6020      	str	r0, [r4, #0]
 801af84:	6061      	str	r1, [r4, #4]
 801af86:	60a2      	str	r2, [r4, #8]
			break;
 801af88:	f001 bade 	b.w	801c548 <problem_fetch+0x1ae60>
		case 765 :
			strcpy(p->name,"SUBMARINE");
 801af8c:	687b      	ldr	r3, [r7, #4]
 801af8e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801af92:	4991      	ldr	r1, [pc, #580]	; (801b1d8 <problem_fetch+0x19af0>)
 801af94:	461a      	mov	r2, r3
 801af96:	460b      	mov	r3, r1
 801af98:	cb03      	ldmia	r3!, {r0, r1}
 801af9a:	6010      	str	r0, [r2, #0]
 801af9c:	6051      	str	r1, [r2, #4]
 801af9e:	881b      	ldrh	r3, [r3, #0]
 801afa0:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B+");
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801afa8:	4a8c      	ldr	r2, [pc, #560]	; (801b1dc <problem_fetch+0x19af4>)
 801afaa:	6810      	ldr	r0, [r2, #0]
 801afac:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	2206      	movs	r2, #6
 801afb2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,E,I,I");
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	33a4      	adds	r3, #164	; 0xa4
 801afb8:	4a89      	ldr	r2, [pc, #548]	; (801b1e0 <problem_fetch+0x19af8>)
 801afba:	461c      	mov	r4, r3
 801afbc:	4613      	mov	r3, r2
 801afbe:	cb07      	ldmia	r3!, {r0, r1, r2}
 801afc0:	6020      	str	r0, [r4, #0]
 801afc2:	6061      	str	r1, [r4, #4]
 801afc4:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,12,14,15,18");
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	3304      	adds	r3, #4
 801afca:	4a86      	ldr	r2, [pc, #536]	; (801b1e4 <problem_fetch+0x19afc>)
 801afcc:	461c      	mov	r4, r3
 801afce:	4615      	mov	r5, r2
 801afd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801afd2:	6020      	str	r0, [r4, #0]
 801afd4:	6061      	str	r1, [r4, #4]
 801afd6:	60a2      	str	r2, [r4, #8]
 801afd8:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801afe0:	4a7c      	ldr	r2, [pc, #496]	; (801b1d4 <problem_fetch+0x19aec>)
 801afe2:	461c      	mov	r4, r3
 801afe4:	4613      	mov	r3, r2
 801afe6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801afe8:	6020      	str	r0, [r4, #0]
 801afea:	6061      	str	r1, [r4, #4]
 801afec:	60a2      	str	r2, [r4, #8]
			break;
 801afee:	f001 baab 	b.w	801c548 <problem_fetch+0x1ae60>
		case 766 :
			strcpy(p->name,"LINK TO THE PAST");
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801aff8:	4a7b      	ldr	r2, [pc, #492]	; (801b1e8 <problem_fetch+0x19b00>)
 801affa:	461d      	mov	r5, r3
 801affc:	4614      	mov	r4, r2
 801affe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b000:	6028      	str	r0, [r5, #0]
 801b002:	6069      	str	r1, [r5, #4]
 801b004:	60aa      	str	r2, [r5, #8]
 801b006:	60eb      	str	r3, [r5, #12]
 801b008:	7823      	ldrb	r3, [r4, #0]
 801b00a:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7A");
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b012:	4a76      	ldr	r2, [pc, #472]	; (801b1ec <problem_fetch+0x19b04>)
 801b014:	8811      	ldrh	r1, [r2, #0]
 801b016:	7892      	ldrb	r2, [r2, #2]
 801b018:	8019      	strh	r1, [r3, #0]
 801b01a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2207      	movs	r2, #7
 801b020:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,A,E,E,H,D");
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	33a4      	adds	r3, #164	; 0xa4
 801b026:	4a72      	ldr	r2, [pc, #456]	; (801b1f0 <problem_fetch+0x19b08>)
 801b028:	461c      	mov	r4, r3
 801b02a:	4613      	mov	r3, r2
 801b02c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b02e:	6020      	str	r0, [r4, #0]
 801b030:	6061      	str	r1, [r4, #4]
 801b032:	60a2      	str	r2, [r4, #8]
 801b034:	881b      	ldrh	r3, [r3, #0]
 801b036:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,14,16,18");
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	3304      	adds	r3, #4
 801b03c:	4a6d      	ldr	r2, [pc, #436]	; (801b1f4 <problem_fetch+0x19b0c>)
 801b03e:	461d      	mov	r5, r3
 801b040:	4614      	mov	r4, r2
 801b042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b044:	6028      	str	r0, [r5, #0]
 801b046:	6069      	str	r1, [r5, #4]
 801b048:	60aa      	str	r2, [r5, #8]
 801b04a:	60eb      	str	r3, [r5, #12]
 801b04c:	8823      	ldrh	r3, [r4, #0]
 801b04e:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b056:	4a68      	ldr	r2, [pc, #416]	; (801b1f8 <problem_fetch+0x19b10>)
 801b058:	461c      	mov	r4, r3
 801b05a:	4613      	mov	r3, r2
 801b05c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b05e:	6020      	str	r0, [r4, #0]
 801b060:	6061      	str	r1, [r4, #4]
 801b062:	60a2      	str	r2, [r4, #8]
 801b064:	881b      	ldrh	r3, [r3, #0]
 801b066:	81a3      	strh	r3, [r4, #12]
			break;
 801b068:	f001 ba6e 	b.w	801c548 <problem_fetch+0x1ae60>
		case 767 :
			strcpy(p->name,"SALAD NIGHTS");
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b072:	4a62      	ldr	r2, [pc, #392]	; (801b1fc <problem_fetch+0x19b14>)
 801b074:	461c      	mov	r4, r3
 801b076:	4613      	mov	r3, r2
 801b078:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b07a:	6020      	str	r0, [r4, #0]
 801b07c:	6061      	str	r1, [r4, #4]
 801b07e:	60a2      	str	r2, [r4, #8]
 801b080:	781b      	ldrb	r3, [r3, #0]
 801b082:	7323      	strb	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b08a:	4a5d      	ldr	r2, [pc, #372]	; (801b200 <problem_fetch+0x19b18>)
 801b08c:	6810      	ldr	r0, [r2, #0]
 801b08e:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	2208      	movs	r2, #8
 801b094:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,K,H,I,E,D");
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	33a4      	adds	r3, #164	; 0xa4
 801b09a:	4a5a      	ldr	r2, [pc, #360]	; (801b204 <problem_fetch+0x19b1c>)
 801b09c:	461c      	mov	r4, r3
 801b09e:	4615      	mov	r5, r2
 801b0a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0a2:	6020      	str	r0, [r4, #0]
 801b0a4:	6061      	str	r1, [r4, #4]
 801b0a6:	60a2      	str	r2, [r4, #8]
 801b0a8:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,9,12,14,14,18");
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	3304      	adds	r3, #4
 801b0ae:	4a56      	ldr	r2, [pc, #344]	; (801b208 <problem_fetch+0x19b20>)
 801b0b0:	461d      	mov	r5, r3
 801b0b2:	4614      	mov	r4, r2
 801b0b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0b6:	6028      	str	r0, [r5, #0]
 801b0b8:	6069      	str	r1, [r5, #4]
 801b0ba:	60aa      	str	r2, [r5, #8]
 801b0bc:	60eb      	str	r3, [r5, #12]
 801b0be:	6820      	ldr	r0, [r4, #0]
 801b0c0:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b0c8:	4a3d      	ldr	r2, [pc, #244]	; (801b1c0 <problem_fetch+0x19ad8>)
 801b0ca:	461c      	mov	r4, r3
 801b0cc:	4615      	mov	r5, r2
 801b0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0d0:	6020      	str	r0, [r4, #0]
 801b0d2:	6061      	str	r1, [r4, #4]
 801b0d4:	60a2      	str	r2, [r4, #8]
 801b0d6:	60e3      	str	r3, [r4, #12]
			break;
 801b0d8:	f001 ba36 	b.w	801c548 <problem_fetch+0x1ae60>
		case 768 :
			strcpy(p->name,"ONE");
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b0e2:	4a4a      	ldr	r2, [pc, #296]	; (801b20c <problem_fetch+0x19b24>)
 801b0e4:	6810      	ldr	r0, [r2, #0]
 801b0e6:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b0ee:	4a31      	ldr	r2, [pc, #196]	; (801b1b4 <problem_fetch+0x19acc>)
 801b0f0:	6810      	ldr	r0, [r2, #0]
 801b0f2:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	2206      	movs	r2, #6
 801b0f8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,E,C,E,I");
 801b0fa:	687b      	ldr	r3, [r7, #4]
 801b0fc:	33a4      	adds	r3, #164	; 0xa4
 801b0fe:	4a44      	ldr	r2, [pc, #272]	; (801b210 <problem_fetch+0x19b28>)
 801b100:	461c      	mov	r4, r3
 801b102:	4613      	mov	r3, r2
 801b104:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b106:	6020      	str	r0, [r4, #0]
 801b108:	6061      	str	r1, [r4, #4]
 801b10a:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,9,13,16,18");
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	3304      	adds	r3, #4
 801b110:	4a40      	ldr	r2, [pc, #256]	; (801b214 <problem_fetch+0x19b2c>)
 801b112:	461c      	mov	r4, r3
 801b114:	4613      	mov	r3, r2
 801b116:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b118:	6020      	str	r0, [r4, #0]
 801b11a:	6061      	str	r1, [r4, #4]
 801b11c:	60a2      	str	r2, [r4, #8]
 801b11e:	881a      	ldrh	r2, [r3, #0]
 801b120:	789b      	ldrb	r3, [r3, #2]
 801b122:	81a2      	strh	r2, [r4, #12]
 801b124:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b12c:	4a29      	ldr	r2, [pc, #164]	; (801b1d4 <problem_fetch+0x19aec>)
 801b12e:	461c      	mov	r4, r3
 801b130:	4613      	mov	r3, r2
 801b132:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b134:	6020      	str	r0, [r4, #0]
 801b136:	6061      	str	r1, [r4, #4]
 801b138:	60a2      	str	r2, [r4, #8]
			break;
 801b13a:	f001 ba05 	b.w	801c548 <problem_fetch+0x1ae60>
		case 769 :
			strcpy(p->name,"DRAGONS DEN");
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b144:	4a34      	ldr	r2, [pc, #208]	; (801b218 <problem_fetch+0x19b30>)
 801b146:	461c      	mov	r4, r3
 801b148:	4613      	mov	r3, r2
 801b14a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b14c:	6020      	str	r0, [r4, #0]
 801b14e:	6061      	str	r1, [r4, #4]
 801b150:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b158:	4a16      	ldr	r2, [pc, #88]	; (801b1b4 <problem_fetch+0x19acc>)
 801b15a:	6810      	ldr	r0, [r2, #0]
 801b15c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	2207      	movs	r2, #7
 801b162:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,K,H,J,G,I");
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	33a4      	adds	r3, #164	; 0xa4
 801b168:	4a2c      	ldr	r2, [pc, #176]	; (801b21c <problem_fetch+0x19b34>)
 801b16a:	461c      	mov	r4, r3
 801b16c:	4613      	mov	r3, r2
 801b16e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b170:	6020      	str	r0, [r4, #0]
 801b172:	6061      	str	r1, [r4, #4]
 801b174:	60a2      	str	r2, [r4, #8]
 801b176:	881b      	ldrh	r3, [r3, #0]
 801b178:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,10,13,15,18");
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	3304      	adds	r3, #4
 801b17e:	4a28      	ldr	r2, [pc, #160]	; (801b220 <problem_fetch+0x19b38>)
 801b180:	461d      	mov	r5, r3
 801b182:	4614      	mov	r4, r2
 801b184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b186:	6028      	str	r0, [r5, #0]
 801b188:	6069      	str	r1, [r5, #4]
 801b18a:	60aa      	str	r2, [r5, #8]
 801b18c:	60eb      	str	r3, [r5, #12]
 801b18e:	8823      	ldrh	r3, [r4, #0]
 801b190:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b198:	4a17      	ldr	r2, [pc, #92]	; (801b1f8 <problem_fetch+0x19b10>)
 801b19a:	461c      	mov	r4, r3
 801b19c:	4613      	mov	r3, r2
 801b19e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b1a0:	6020      	str	r0, [r4, #0]
 801b1a2:	6061      	str	r1, [r4, #4]
 801b1a4:	60a2      	str	r2, [r4, #8]
 801b1a6:	881b      	ldrh	r3, [r3, #0]
 801b1a8:	81a3      	strh	r3, [r4, #12]
			break;
 801b1aa:	f001 b9cd 	b.w	801c548 <problem_fetch+0x1ae60>
 801b1ae:	bf00      	nop
 801b1b0:	0802c800 	.word	0x0802c800
 801b1b4:	0802395c 	.word	0x0802395c
 801b1b8:	0802c808 	.word	0x0802c808
 801b1bc:	0802c818 	.word	0x0802c818
 801b1c0:	08023a80 	.word	0x08023a80
 801b1c4:	0802c830 	.word	0x0802c830
 801b1c8:	08023f68 	.word	0x08023f68
 801b1cc:	0802c83c 	.word	0x0802c83c
 801b1d0:	08028f5c 	.word	0x08028f5c
 801b1d4:	08023cf8 	.word	0x08023cf8
 801b1d8:	0802c848 	.word	0x0802c848
 801b1dc:	08023a98 	.word	0x08023a98
 801b1e0:	0802b3f8 	.word	0x0802b3f8
 801b1e4:	0802c854 	.word	0x0802c854
 801b1e8:	0802c864 	.word	0x0802c864
 801b1ec:	0802391c 	.word	0x0802391c
 801b1f0:	0802c878 	.word	0x0802c878
 801b1f4:	08024b9c 	.word	0x08024b9c
 801b1f8:	080239d4 	.word	0x080239d4
 801b1fc:	0802c888 	.word	0x0802c888
 801b200:	08023afc 	.word	0x08023afc
 801b204:	0802c898 	.word	0x0802c898
 801b208:	0802c8a8 	.word	0x0802c8a8
 801b20c:	0802c8bc 	.word	0x0802c8bc
 801b210:	0802c8c0 	.word	0x0802c8c0
 801b214:	080283fc 	.word	0x080283fc
 801b218:	0802c8cc 	.word	0x0802c8cc
 801b21c:	0802c8d8 	.word	0x0802c8d8
 801b220:	0802c8e8 	.word	0x0802c8e8
		case 770 :
			strcpy(p->name,"GOOD TIMES");
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b22a:	49c2      	ldr	r1, [pc, #776]	; (801b534 <problem_fetch+0x19e4c>)
 801b22c:	461a      	mov	r2, r3
 801b22e:	460b      	mov	r3, r1
 801b230:	cb03      	ldmia	r3!, {r0, r1}
 801b232:	6010      	str	r0, [r2, #0]
 801b234:	6051      	str	r1, [r2, #4]
 801b236:	8819      	ldrh	r1, [r3, #0]
 801b238:	789b      	ldrb	r3, [r3, #2]
 801b23a:	8111      	strh	r1, [r2, #8]
 801b23c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b244:	4abc      	ldr	r2, [pc, #752]	; (801b538 <problem_fetch+0x19e50>)
 801b246:	6810      	ldr	r0, [r2, #0]
 801b248:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	2207      	movs	r2, #7
 801b24e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,C,D,A");
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	33a4      	adds	r3, #164	; 0xa4
 801b254:	4ab9      	ldr	r2, [pc, #740]	; (801b53c <problem_fetch+0x19e54>)
 801b256:	461c      	mov	r4, r3
 801b258:	4613      	mov	r3, r2
 801b25a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b25c:	6020      	str	r0, [r4, #0]
 801b25e:	6061      	str	r1, [r4, #4]
 801b260:	60a2      	str	r2, [r4, #8]
 801b262:	881b      	ldrh	r3, [r3, #0]
 801b264:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,13,15,18");
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	3304      	adds	r3, #4
 801b26a:	4ab5      	ldr	r2, [pc, #724]	; (801b540 <problem_fetch+0x19e58>)
 801b26c:	461d      	mov	r5, r3
 801b26e:	4614      	mov	r4, r2
 801b270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b272:	6028      	str	r0, [r5, #0]
 801b274:	6069      	str	r1, [r5, #4]
 801b276:	60aa      	str	r2, [r5, #8]
 801b278:	60eb      	str	r3, [r5, #12]
 801b27a:	8823      	ldrh	r3, [r4, #0]
 801b27c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b284:	4aaf      	ldr	r2, [pc, #700]	; (801b544 <problem_fetch+0x19e5c>)
 801b286:	461c      	mov	r4, r3
 801b288:	4613      	mov	r3, r2
 801b28a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b28c:	6020      	str	r0, [r4, #0]
 801b28e:	6061      	str	r1, [r4, #4]
 801b290:	60a2      	str	r2, [r4, #8]
 801b292:	881b      	ldrh	r3, [r3, #0]
 801b294:	81a3      	strh	r3, [r4, #12]
			break;
 801b296:	f001 b957 	b.w	801c548 <problem_fetch+0x1ae60>
		case 771 :
			strcpy(p->name,"NOT TOO BAD");
 801b29a:	687b      	ldr	r3, [r7, #4]
 801b29c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b2a0:	4aa9      	ldr	r2, [pc, #676]	; (801b548 <problem_fetch+0x19e60>)
 801b2a2:	461c      	mov	r4, r3
 801b2a4:	4613      	mov	r3, r2
 801b2a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b2a8:	6020      	str	r0, [r4, #0]
 801b2aa:	6061      	str	r1, [r4, #4]
 801b2ac:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b2b4:	4aa0      	ldr	r2, [pc, #640]	; (801b538 <problem_fetch+0x19e50>)
 801b2b6:	6810      	ldr	r0, [r2, #0]
 801b2b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	2208      	movs	r2, #8
 801b2be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,F,D,I,E,D");
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	33a4      	adds	r3, #164	; 0xa4
 801b2c4:	4aa1      	ldr	r2, [pc, #644]	; (801b54c <problem_fetch+0x19e64>)
 801b2c6:	461c      	mov	r4, r3
 801b2c8:	4615      	mov	r5, r2
 801b2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2cc:	6020      	str	r0, [r4, #0]
 801b2ce:	6061      	str	r1, [r4, #4]
 801b2d0:	60a2      	str	r2, [r4, #8]
 801b2d2:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,5,8,11,11,14,16,18");
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	3304      	adds	r3, #4
 801b2d8:	4a9d      	ldr	r2, [pc, #628]	; (801b550 <problem_fetch+0x19e68>)
 801b2da:	461d      	mov	r5, r3
 801b2dc:	4614      	mov	r4, r2
 801b2de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b2e0:	6028      	str	r0, [r5, #0]
 801b2e2:	6069      	str	r1, [r5, #4]
 801b2e4:	60aa      	str	r2, [r5, #8]
 801b2e6:	60eb      	str	r3, [r5, #12]
 801b2e8:	6820      	ldr	r0, [r4, #0]
 801b2ea:	6128      	str	r0, [r5, #16]
 801b2ec:	7923      	ldrb	r3, [r4, #4]
 801b2ee:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b2f6:	4a97      	ldr	r2, [pc, #604]	; (801b554 <problem_fetch+0x19e6c>)
 801b2f8:	461c      	mov	r4, r3
 801b2fa:	4615      	mov	r5, r2
 801b2fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b2fe:	6020      	str	r0, [r4, #0]
 801b300:	6061      	str	r1, [r4, #4]
 801b302:	60a2      	str	r2, [r4, #8]
 801b304:	60e3      	str	r3, [r4, #12]
			break;
 801b306:	f001 b91f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 772 :
			strcpy(p->name,"VERITGO");
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b310:	4991      	ldr	r1, [pc, #580]	; (801b558 <problem_fetch+0x19e70>)
 801b312:	461a      	mov	r2, r3
 801b314:	460b      	mov	r3, r1
 801b316:	cb03      	ldmia	r3!, {r0, r1}
 801b318:	6010      	str	r0, [r2, #0]
 801b31a:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"6B+");
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b322:	4a85      	ldr	r2, [pc, #532]	; (801b538 <problem_fetch+0x19e50>)
 801b324:	6810      	ldr	r0, [r2, #0]
 801b326:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	2206      	movs	r2, #6
 801b32c:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,J,H,F,H,D");
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	33a4      	adds	r3, #164	; 0xa4
 801b332:	4a8a      	ldr	r2, [pc, #552]	; (801b55c <problem_fetch+0x19e74>)
 801b334:	461c      	mov	r4, r3
 801b336:	4613      	mov	r3, r2
 801b338:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b33a:	6020      	str	r0, [r4, #0]
 801b33c:	6061      	str	r1, [r4, #4]
 801b33e:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,5,10,13,16,18");
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	3304      	adds	r3, #4
 801b344:	4a86      	ldr	r2, [pc, #536]	; (801b560 <problem_fetch+0x19e78>)
 801b346:	461c      	mov	r4, r3
 801b348:	4615      	mov	r5, r2
 801b34a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b34c:	6020      	str	r0, [r4, #0]
 801b34e:	6061      	str	r1, [r4, #4]
 801b350:	60a2      	str	r2, [r4, #8]
 801b352:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b35a:	4a82      	ldr	r2, [pc, #520]	; (801b564 <problem_fetch+0x19e7c>)
 801b35c:	461c      	mov	r4, r3
 801b35e:	4613      	mov	r3, r2
 801b360:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b362:	6020      	str	r0, [r4, #0]
 801b364:	6061      	str	r1, [r4, #4]
 801b366:	60a2      	str	r2, [r4, #8]
			break;
 801b368:	f001 b8ee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 773 :
			strcpy(p->name,"MASTERFUL GAP");
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b372:	4a7d      	ldr	r2, [pc, #500]	; (801b568 <problem_fetch+0x19e80>)
 801b374:	461c      	mov	r4, r3
 801b376:	4613      	mov	r3, r2
 801b378:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b37a:	6020      	str	r0, [r4, #0]
 801b37c:	6061      	str	r1, [r4, #4]
 801b37e:	60a2      	str	r2, [r4, #8]
 801b380:	881b      	ldrh	r3, [r3, #0]
 801b382:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"7A+");
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b38a:	4a78      	ldr	r2, [pc, #480]	; (801b56c <problem_fetch+0x19e84>)
 801b38c:	6810      	ldr	r0, [r2, #0]
 801b38e:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	2207      	movs	r2, #7
 801b394:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,B,C,C,E,F,I");
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	33a4      	adds	r3, #164	; 0xa4
 801b39a:	4a75      	ldr	r2, [pc, #468]	; (801b570 <problem_fetch+0x19e88>)
 801b39c:	461c      	mov	r4, r3
 801b39e:	4613      	mov	r3, r2
 801b3a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3a2:	6020      	str	r0, [r4, #0]
 801b3a4:	6061      	str	r1, [r4, #4]
 801b3a6:	60a2      	str	r2, [r4, #8]
 801b3a8:	881b      	ldrh	r3, [r3, #0]
 801b3aa:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,6,5,13,16,11,18");
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	3304      	adds	r3, #4
 801b3b0:	4a70      	ldr	r2, [pc, #448]	; (801b574 <problem_fetch+0x19e8c>)
 801b3b2:	461d      	mov	r5, r3
 801b3b4:	4614      	mov	r4, r2
 801b3b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b3b8:	6028      	str	r0, [r5, #0]
 801b3ba:	6069      	str	r1, [r5, #4]
 801b3bc:	60aa      	str	r2, [r5, #8]
 801b3be:	60eb      	str	r3, [r5, #12]
 801b3c0:	8823      	ldrh	r3, [r4, #0]
 801b3c2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"d,s,s,d,d,d,e");
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b3ca:	4a6b      	ldr	r2, [pc, #428]	; (801b578 <problem_fetch+0x19e90>)
 801b3cc:	461c      	mov	r4, r3
 801b3ce:	4613      	mov	r3, r2
 801b3d0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b3d2:	6020      	str	r0, [r4, #0]
 801b3d4:	6061      	str	r1, [r4, #4]
 801b3d6:	60a2      	str	r2, [r4, #8]
 801b3d8:	881b      	ldrh	r3, [r3, #0]
 801b3da:	81a3      	strh	r3, [r4, #12]
			break;
 801b3dc:	f001 b8b4 	b.w	801c548 <problem_fetch+0x1ae60>
		case 774 :
			strcpy(p->name,"SUPERNOVA");
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b3e6:	4965      	ldr	r1, [pc, #404]	; (801b57c <problem_fetch+0x19e94>)
 801b3e8:	461a      	mov	r2, r3
 801b3ea:	460b      	mov	r3, r1
 801b3ec:	cb03      	ldmia	r3!, {r0, r1}
 801b3ee:	6010      	str	r0, [r2, #0]
 801b3f0:	6051      	str	r1, [r2, #4]
 801b3f2:	881b      	ldrh	r3, [r3, #0]
 801b3f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b3fc:	4a60      	ldr	r2, [pc, #384]	; (801b580 <problem_fetch+0x19e98>)
 801b3fe:	8811      	ldrh	r1, [r2, #0]
 801b400:	7892      	ldrb	r2, [r2, #2]
 801b402:	8019      	strh	r1, [r3, #0]
 801b404:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	2207      	movs	r2, #7
 801b40a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,F,F,H,D");
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	33a4      	adds	r3, #164	; 0xa4
 801b410:	4a5c      	ldr	r2, [pc, #368]	; (801b584 <problem_fetch+0x19e9c>)
 801b412:	461c      	mov	r4, r3
 801b414:	4613      	mov	r3, r2
 801b416:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b418:	6020      	str	r0, [r4, #0]
 801b41a:	6061      	str	r1, [r4, #4]
 801b41c:	60a2      	str	r2, [r4, #8]
 801b41e:	881b      	ldrh	r3, [r3, #0]
 801b420:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,8,11,13,16,18");
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	3304      	adds	r3, #4
 801b426:	4a58      	ldr	r2, [pc, #352]	; (801b588 <problem_fetch+0x19ea0>)
 801b428:	461d      	mov	r5, r3
 801b42a:	4614      	mov	r4, r2
 801b42c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b42e:	6028      	str	r0, [r5, #0]
 801b430:	6069      	str	r1, [r5, #4]
 801b432:	60aa      	str	r2, [r5, #8]
 801b434:	60eb      	str	r3, [r5, #12]
 801b436:	8823      	ldrh	r3, [r4, #0]
 801b438:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b440:	4a52      	ldr	r2, [pc, #328]	; (801b58c <problem_fetch+0x19ea4>)
 801b442:	461c      	mov	r4, r3
 801b444:	4613      	mov	r3, r2
 801b446:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b448:	6020      	str	r0, [r4, #0]
 801b44a:	6061      	str	r1, [r4, #4]
 801b44c:	60a2      	str	r2, [r4, #8]
 801b44e:	881b      	ldrh	r3, [r3, #0]
 801b450:	81a3      	strh	r3, [r4, #12]
			break;
 801b452:	f001 b879 	b.w	801c548 <problem_fetch+0x1ae60>
		case 775 :
			strcpy(p->name,"ACG10");
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b45c:	4a4c      	ldr	r2, [pc, #304]	; (801b590 <problem_fetch+0x19ea8>)
 801b45e:	6810      	ldr	r0, [r2, #0]
 801b460:	6018      	str	r0, [r3, #0]
 801b462:	8892      	ldrh	r2, [r2, #4]
 801b464:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b46c:	4a32      	ldr	r2, [pc, #200]	; (801b538 <problem_fetch+0x19e50>)
 801b46e:	6810      	ldr	r0, [r2, #0]
 801b470:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	2207      	movs	r2, #7
 801b476:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,G,G,E,B,I");
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	33a4      	adds	r3, #164	; 0xa4
 801b47c:	4a45      	ldr	r2, [pc, #276]	; (801b594 <problem_fetch+0x19eac>)
 801b47e:	461c      	mov	r4, r3
 801b480:	4613      	mov	r3, r2
 801b482:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b484:	6020      	str	r0, [r4, #0]
 801b486:	6061      	str	r1, [r4, #4]
 801b488:	60a2      	str	r2, [r4, #8]
 801b48a:	881b      	ldrh	r3, [r3, #0]
 801b48c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,15,14,12,10,18");
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	3304      	adds	r3, #4
 801b492:	4a41      	ldr	r2, [pc, #260]	; (801b598 <problem_fetch+0x19eb0>)
 801b494:	461d      	mov	r5, r3
 801b496:	4614      	mov	r4, r2
 801b498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b49a:	6028      	str	r0, [r5, #0]
 801b49c:	6069      	str	r1, [r5, #4]
 801b49e:	60aa      	str	r2, [r5, #8]
 801b4a0:	60eb      	str	r3, [r5, #12]
 801b4a2:	8823      	ldrh	r3, [r4, #0]
 801b4a4:	78a2      	ldrb	r2, [r4, #2]
 801b4a6:	822b      	strh	r3, [r5, #16]
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b4b2:	4a36      	ldr	r2, [pc, #216]	; (801b58c <problem_fetch+0x19ea4>)
 801b4b4:	461c      	mov	r4, r3
 801b4b6:	4613      	mov	r3, r2
 801b4b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b4ba:	6020      	str	r0, [r4, #0]
 801b4bc:	6061      	str	r1, [r4, #4]
 801b4be:	60a2      	str	r2, [r4, #8]
 801b4c0:	881b      	ldrh	r3, [r3, #0]
 801b4c2:	81a3      	strh	r3, [r4, #12]
			break;
 801b4c4:	f001 b840 	b.w	801c548 <problem_fetch+0x1ae60>
		case 776 :
			strcpy(p->name,"ACG8");
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b4ce:	4a33      	ldr	r2, [pc, #204]	; (801b59c <problem_fetch+0x19eb4>)
 801b4d0:	6810      	ldr	r0, [r2, #0]
 801b4d2:	6018      	str	r0, [r3, #0]
 801b4d4:	7912      	ldrb	r2, [r2, #4]
 801b4d6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b4de:	4a16      	ldr	r2, [pc, #88]	; (801b538 <problem_fetch+0x19e50>)
 801b4e0:	6810      	ldr	r0, [r2, #0]
 801b4e2:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2207      	movs	r2, #7
 801b4e8:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,E,E,A,E,D");
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	33a4      	adds	r3, #164	; 0xa4
 801b4ee:	4a2c      	ldr	r2, [pc, #176]	; (801b5a0 <problem_fetch+0x19eb8>)
 801b4f0:	461c      	mov	r4, r3
 801b4f2:	4613      	mov	r3, r2
 801b4f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b4f6:	6020      	str	r0, [r4, #0]
 801b4f8:	6061      	str	r1, [r4, #4]
 801b4fa:	60a2      	str	r2, [r4, #8]
 801b4fc:	881b      	ldrh	r3, [r3, #0]
 801b4fe:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,12,14,14,18");
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	3304      	adds	r3, #4
 801b504:	4a27      	ldr	r2, [pc, #156]	; (801b5a4 <problem_fetch+0x19ebc>)
 801b506:	461d      	mov	r5, r3
 801b508:	4614      	mov	r4, r2
 801b50a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b50c:	6028      	str	r0, [r5, #0]
 801b50e:	6069      	str	r1, [r5, #4]
 801b510:	60aa      	str	r2, [r5, #8]
 801b512:	60eb      	str	r3, [r5, #12]
 801b514:	8823      	ldrh	r3, [r4, #0]
 801b516:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b51e:	4a09      	ldr	r2, [pc, #36]	; (801b544 <problem_fetch+0x19e5c>)
 801b520:	461c      	mov	r4, r3
 801b522:	4613      	mov	r3, r2
 801b524:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b526:	6020      	str	r0, [r4, #0]
 801b528:	6061      	str	r1, [r4, #4]
 801b52a:	60a2      	str	r2, [r4, #8]
 801b52c:	881b      	ldrh	r3, [r3, #0]
 801b52e:	81a3      	strh	r3, [r4, #12]
			break;
 801b530:	f001 b80a 	b.w	801c548 <problem_fetch+0x1ae60>
 801b534:	0802c8fc 	.word	0x0802c8fc
 801b538:	0802395c 	.word	0x0802395c
 801b53c:	0802c908 	.word	0x0802c908
 801b540:	0802c918 	.word	0x0802c918
 801b544:	080239d4 	.word	0x080239d4
 801b548:	0802c92c 	.word	0x0802c92c
 801b54c:	0802c938 	.word	0x0802c938
 801b550:	0802c948 	.word	0x0802c948
 801b554:	08023a80 	.word	0x08023a80
 801b558:	0802c960 	.word	0x0802c960
 801b55c:	0802c968 	.word	0x0802c968
 801b560:	0802600c 	.word	0x0802600c
 801b564:	0802393c 	.word	0x0802393c
 801b568:	0802c974 	.word	0x0802c974
 801b56c:	08023afc 	.word	0x08023afc
 801b570:	0802c984 	.word	0x0802c984
 801b574:	0802c994 	.word	0x0802c994
 801b578:	0802c348 	.word	0x0802c348
 801b57c:	0802c9a8 	.word	0x0802c9a8
 801b580:	0802391c 	.word	0x0802391c
 801b584:	0802c9b4 	.word	0x0802c9b4
 801b588:	08024eec 	.word	0x08024eec
 801b58c:	08023ae4 	.word	0x08023ae4
 801b590:	0802c9c4 	.word	0x0802c9c4
 801b594:	0802c9cc 	.word	0x0802c9cc
 801b598:	0802c9dc 	.word	0x0802c9dc
 801b59c:	0802c9f0 	.word	0x0802c9f0
 801b5a0:	0802c9f8 	.word	0x0802c9f8
 801b5a4:	0802ca08 	.word	0x0802ca08
		case 777 :
			strcpy(p->name,"ACG6");
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b5ae:	4ac1      	ldr	r2, [pc, #772]	; (801b8b4 <problem_fetch+0x1a1cc>)
 801b5b0:	6810      	ldr	r0, [r2, #0]
 801b5b2:	6018      	str	r0, [r3, #0]
 801b5b4:	7912      	ldrb	r2, [r2, #4]
 801b5b6:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7A");
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b5be:	4abe      	ldr	r2, [pc, #760]	; (801b8b8 <problem_fetch+0x1a1d0>)
 801b5c0:	8811      	ldrh	r1, [r2, #0]
 801b5c2:	7892      	ldrb	r2, [r2, #2]
 801b5c4:	8019      	strh	r1, [r3, #0]
 801b5c6:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	2208      	movs	r2, #8
 801b5cc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,G,C,C,C,E,I");
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	33a4      	adds	r3, #164	; 0xa4
 801b5d2:	4aba      	ldr	r2, [pc, #744]	; (801b8bc <problem_fetch+0x1a1d4>)
 801b5d4:	461c      	mov	r4, r3
 801b5d6:	4615      	mov	r5, r2
 801b5d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b5da:	6020      	str	r0, [r4, #0]
 801b5dc:	6061      	str	r1, [r4, #4]
 801b5de:	60a2      	str	r2, [r4, #8]
 801b5e0:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,10,8,13,16,16,18");
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	3304      	adds	r3, #4
 801b5e6:	4ab6      	ldr	r2, [pc, #728]	; (801b8c0 <problem_fetch+0x1a1d8>)
 801b5e8:	461d      	mov	r5, r3
 801b5ea:	4614      	mov	r4, r2
 801b5ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b5ee:	6028      	str	r0, [r5, #0]
 801b5f0:	6069      	str	r1, [r5, #4]
 801b5f2:	60aa      	str	r2, [r5, #8]
 801b5f4:	60eb      	str	r3, [r5, #12]
 801b5f6:	6820      	ldr	r0, [r4, #0]
 801b5f8:	6128      	str	r0, [r5, #16]
 801b5fa:	88a3      	ldrh	r3, [r4, #4]
 801b5fc:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801b5fe:	687b      	ldr	r3, [r7, #4]
 801b600:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b604:	4aaf      	ldr	r2, [pc, #700]	; (801b8c4 <problem_fetch+0x1a1dc>)
 801b606:	461c      	mov	r4, r3
 801b608:	4615      	mov	r5, r2
 801b60a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b60c:	6020      	str	r0, [r4, #0]
 801b60e:	6061      	str	r1, [r4, #4]
 801b610:	60a2      	str	r2, [r4, #8]
 801b612:	60e3      	str	r3, [r4, #12]
			break;
 801b614:	f000 bf98 	b.w	801c548 <problem_fetch+0x1ae60>
		case 778 :
			strcpy(p->name,"ACG5");
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b61e:	4aaa      	ldr	r2, [pc, #680]	; (801b8c8 <problem_fetch+0x1a1e0>)
 801b620:	6810      	ldr	r0, [r2, #0]
 801b622:	6018      	str	r0, [r3, #0]
 801b624:	7912      	ldrb	r2, [r2, #4]
 801b626:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b62e:	4aa7      	ldr	r2, [pc, #668]	; (801b8cc <problem_fetch+0x1a1e4>)
 801b630:	6810      	ldr	r0, [r2, #0]
 801b632:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	2208      	movs	r2, #8
 801b638:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,C,E,B,E,E,H,D");
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	33a4      	adds	r3, #164	; 0xa4
 801b63e:	4aa4      	ldr	r2, [pc, #656]	; (801b8d0 <problem_fetch+0x1a1e8>)
 801b640:	461c      	mov	r4, r3
 801b642:	4615      	mov	r5, r2
 801b644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b646:	6020      	str	r0, [r4, #0]
 801b648:	6061      	str	r1, [r4, #4]
 801b64a:	60a2      	str	r2, [r4, #8]
 801b64c:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,8,10,12,14,16,18");
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	3304      	adds	r3, #4
 801b652:	4aa0      	ldr	r2, [pc, #640]	; (801b8d4 <problem_fetch+0x1a1ec>)
 801b654:	461d      	mov	r5, r3
 801b656:	4614      	mov	r4, r2
 801b658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b65a:	6028      	str	r0, [r5, #0]
 801b65c:	6069      	str	r1, [r5, #4]
 801b65e:	60aa      	str	r2, [r5, #8]
 801b660:	60eb      	str	r3, [r5, #12]
 801b662:	6820      	ldr	r0, [r4, #0]
 801b664:	6128      	str	r0, [r5, #16]
 801b666:	7923      	ldrb	r3, [r4, #4]
 801b668:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b670:	4a99      	ldr	r2, [pc, #612]	; (801b8d8 <problem_fetch+0x1a1f0>)
 801b672:	461c      	mov	r4, r3
 801b674:	4615      	mov	r5, r2
 801b676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b678:	6020      	str	r0, [r4, #0]
 801b67a:	6061      	str	r1, [r4, #4]
 801b67c:	60a2      	str	r2, [r4, #8]
 801b67e:	60e3      	str	r3, [r4, #12]
			break;
 801b680:	f000 bf62 	b.w	801c548 <problem_fetch+0x1ae60>
		case 779 :
			strcpy(p->name,"E-16");
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b68a:	4a94      	ldr	r2, [pc, #592]	; (801b8dc <problem_fetch+0x1a1f4>)
 801b68c:	6810      	ldr	r0, [r2, #0]
 801b68e:	6018      	str	r0, [r3, #0]
 801b690:	7912      	ldrb	r2, [r2, #4]
 801b692:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"6B+");
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b69a:	4a8c      	ldr	r2, [pc, #560]	; (801b8cc <problem_fetch+0x1a1e4>)
 801b69c:	6810      	ldr	r0, [r2, #0]
 801b69e:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2206      	movs	r2, #6
 801b6a4:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,C,E,C,E,A");
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	33a4      	adds	r3, #164	; 0xa4
 801b6aa:	4a8d      	ldr	r2, [pc, #564]	; (801b8e0 <problem_fetch+0x1a1f8>)
 801b6ac:	461c      	mov	r4, r3
 801b6ae:	4613      	mov	r3, r2
 801b6b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6b2:	6020      	str	r0, [r4, #0]
 801b6b4:	6061      	str	r1, [r4, #4]
 801b6b6:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,8,9,13,16,18");
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	3304      	adds	r3, #4
 801b6bc:	4a89      	ldr	r2, [pc, #548]	; (801b8e4 <problem_fetch+0x1a1fc>)
 801b6be:	461c      	mov	r4, r3
 801b6c0:	4613      	mov	r3, r2
 801b6c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6c4:	6020      	str	r0, [r4, #0]
 801b6c6:	6061      	str	r1, [r4, #4]
 801b6c8:	60a2      	str	r2, [r4, #8]
 801b6ca:	881a      	ldrh	r2, [r3, #0]
 801b6cc:	789b      	ldrb	r3, [r3, #2]
 801b6ce:	81a2      	strh	r2, [r4, #12]
 801b6d0:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b6d8:	4a83      	ldr	r2, [pc, #524]	; (801b8e8 <problem_fetch+0x1a200>)
 801b6da:	461c      	mov	r4, r3
 801b6dc:	4613      	mov	r3, r2
 801b6de:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b6e0:	6020      	str	r0, [r4, #0]
 801b6e2:	6061      	str	r1, [r4, #4]
 801b6e4:	60a2      	str	r2, [r4, #8]
			break;
 801b6e6:	f000 bf2f 	b.w	801c548 <problem_fetch+0x1ae60>
		case 780 :
			strcpy(p->name,"SCHWARTZ SCHNEIDER");
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b6f0:	4a7e      	ldr	r2, [pc, #504]	; (801b8ec <problem_fetch+0x1a204>)
 801b6f2:	461d      	mov	r5, r3
 801b6f4:	4614      	mov	r4, r2
 801b6f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b6f8:	6028      	str	r0, [r5, #0]
 801b6fa:	6069      	str	r1, [r5, #4]
 801b6fc:	60aa      	str	r2, [r5, #8]
 801b6fe:	60eb      	str	r3, [r5, #12]
 801b700:	8823      	ldrh	r3, [r4, #0]
 801b702:	78a2      	ldrb	r2, [r4, #2]
 801b704:	822b      	strh	r3, [r5, #16]
 801b706:	4613      	mov	r3, r2
 801b708:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"7A+");
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b710:	4a77      	ldr	r2, [pc, #476]	; (801b8f0 <problem_fetch+0x1a208>)
 801b712:	6810      	ldr	r0, [r2, #0]
 801b714:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	2207      	movs	r2, #7
 801b71a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,D,B,D,E,I");
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	33a4      	adds	r3, #164	; 0xa4
 801b720:	4a74      	ldr	r2, [pc, #464]	; (801b8f4 <problem_fetch+0x1a20c>)
 801b722:	461c      	mov	r4, r3
 801b724:	4613      	mov	r3, r2
 801b726:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b728:	6020      	str	r0, [r4, #0]
 801b72a:	6061      	str	r1, [r4, #4]
 801b72c:	60a2      	str	r2, [r4, #8]
 801b72e:	881b      	ldrh	r3, [r3, #0]
 801b730:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,10,11,6,15,16,18");
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	3304      	adds	r3, #4
 801b736:	4a70      	ldr	r2, [pc, #448]	; (801b8f8 <problem_fetch+0x1a210>)
 801b738:	461d      	mov	r5, r3
 801b73a:	4614      	mov	r4, r2
 801b73c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b73e:	6028      	str	r0, [r5, #0]
 801b740:	6069      	str	r1, [r5, #4]
 801b742:	60aa      	str	r2, [r5, #8]
 801b744:	60eb      	str	r3, [r5, #12]
 801b746:	8823      	ldrh	r3, [r4, #0]
 801b748:	78a2      	ldrb	r2, [r4, #2]
 801b74a:	822b      	strh	r3, [r5, #16]
 801b74c:	4613      	mov	r3, r2
 801b74e:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b756:	4a69      	ldr	r2, [pc, #420]	; (801b8fc <problem_fetch+0x1a214>)
 801b758:	461c      	mov	r4, r3
 801b75a:	4613      	mov	r3, r2
 801b75c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b75e:	6020      	str	r0, [r4, #0]
 801b760:	6061      	str	r1, [r4, #4]
 801b762:	60a2      	str	r2, [r4, #8]
 801b764:	881b      	ldrh	r3, [r3, #0]
 801b766:	81a3      	strh	r3, [r4, #12]
			break;
 801b768:	f000 beee 	b.w	801c548 <problem_fetch+0x1ae60>
		case 781 :
			strcpy(p->name,"MELET VAR");
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b772:	4963      	ldr	r1, [pc, #396]	; (801b900 <problem_fetch+0x1a218>)
 801b774:	461a      	mov	r2, r3
 801b776:	460b      	mov	r3, r1
 801b778:	cb03      	ldmia	r3!, {r0, r1}
 801b77a:	6010      	str	r0, [r2, #0]
 801b77c:	6051      	str	r1, [r2, #4]
 801b77e:	881b      	ldrh	r3, [r3, #0]
 801b780:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7B");
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b788:	4a5e      	ldr	r2, [pc, #376]	; (801b904 <problem_fetch+0x1a21c>)
 801b78a:	8811      	ldrh	r1, [r2, #0]
 801b78c:	7892      	ldrb	r2, [r2, #2]
 801b78e:	8019      	strh	r1, [r3, #0]
 801b790:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2205      	movs	r2, #5
 801b796:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,H,C,G,A");
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	33a4      	adds	r3, #164	; 0xa4
 801b79c:	495a      	ldr	r1, [pc, #360]	; (801b908 <problem_fetch+0x1a220>)
 801b79e:	461a      	mov	r2, r3
 801b7a0:	460b      	mov	r3, r1
 801b7a2:	cb03      	ldmia	r3!, {r0, r1}
 801b7a4:	6010      	str	r0, [r2, #0]
 801b7a6:	6051      	str	r1, [r2, #4]
 801b7a8:	881b      	ldrh	r3, [r3, #0]
 801b7aa:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"5,10,13,17,18");
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	3304      	adds	r3, #4
 801b7b0:	4a56      	ldr	r2, [pc, #344]	; (801b90c <problem_fetch+0x1a224>)
 801b7b2:	461c      	mov	r4, r3
 801b7b4:	4613      	mov	r3, r2
 801b7b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b7b8:	6020      	str	r0, [r4, #0]
 801b7ba:	6061      	str	r1, [r4, #4]
 801b7bc:	60a2      	str	r2, [r4, #8]
 801b7be:	881b      	ldrh	r3, [r3, #0]
 801b7c0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b7c8:	4951      	ldr	r1, [pc, #324]	; (801b910 <problem_fetch+0x1a228>)
 801b7ca:	461a      	mov	r2, r3
 801b7cc:	460b      	mov	r3, r1
 801b7ce:	cb03      	ldmia	r3!, {r0, r1}
 801b7d0:	6010      	str	r0, [r2, #0]
 801b7d2:	6051      	str	r1, [r2, #4]
 801b7d4:	881b      	ldrh	r3, [r3, #0]
 801b7d6:	8113      	strh	r3, [r2, #8]
			break;
 801b7d8:	f000 beb6 	b.w	801c548 <problem_fetch+0x1ae60>
		case 782 :
			strcpy(p->name,"MELET");
 801b7dc:	687b      	ldr	r3, [r7, #4]
 801b7de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b7e2:	4a4c      	ldr	r2, [pc, #304]	; (801b914 <problem_fetch+0x1a22c>)
 801b7e4:	6810      	ldr	r0, [r2, #0]
 801b7e6:	6018      	str	r0, [r3, #0]
 801b7e8:	8892      	ldrh	r2, [r2, #4]
 801b7ea:	809a      	strh	r2, [r3, #4]
			strcpy(p->grade,"7A+");
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b7f2:	4a3f      	ldr	r2, [pc, #252]	; (801b8f0 <problem_fetch+0x1a208>)
 801b7f4:	6810      	ldr	r0, [r2, #0]
 801b7f6:	6018      	str	r0, [r3, #0]
			p->moveSize = 5;
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	2205      	movs	r2, #5
 801b7fc:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,H,I,J");
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	33a4      	adds	r3, #164	; 0xa4
 801b802:	4945      	ldr	r1, [pc, #276]	; (801b918 <problem_fetch+0x1a230>)
 801b804:	461a      	mov	r2, r3
 801b806:	460b      	mov	r3, r1
 801b808:	cb03      	ldmia	r3!, {r0, r1}
 801b80a:	6010      	str	r0, [r2, #0]
 801b80c:	6051      	str	r1, [r2, #4]
 801b80e:	881b      	ldrh	r3, [r3, #0]
 801b810:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"13,16,10,18,5");
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	3304      	adds	r3, #4
 801b816:	4a41      	ldr	r2, [pc, #260]	; (801b91c <problem_fetch+0x1a234>)
 801b818:	461c      	mov	r4, r3
 801b81a:	4613      	mov	r3, r2
 801b81c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b81e:	6020      	str	r0, [r4, #0]
 801b820:	6061      	str	r1, [r4, #4]
 801b822:	60a2      	str	r2, [r4, #8]
 801b824:	881b      	ldrh	r3, [r3, #0]
 801b826:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"d,d,d,e,s");
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b82e:	493c      	ldr	r1, [pc, #240]	; (801b920 <problem_fetch+0x1a238>)
 801b830:	461a      	mov	r2, r3
 801b832:	460b      	mov	r3, r1
 801b834:	cb03      	ldmia	r3!, {r0, r1}
 801b836:	6010      	str	r0, [r2, #0]
 801b838:	6051      	str	r1, [r2, #4]
 801b83a:	881b      	ldrh	r3, [r3, #0]
 801b83c:	8113      	strh	r3, [r2, #8]
			break;
 801b83e:	f000 be83 	b.w	801c548 <problem_fetch+0x1ae60>
		case 783 :
			strcpy(p->name,"LADYBUG'S HEEL");
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b848:	4a36      	ldr	r2, [pc, #216]	; (801b924 <problem_fetch+0x1a23c>)
 801b84a:	461c      	mov	r4, r3
 801b84c:	4613      	mov	r3, r2
 801b84e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b850:	6020      	str	r0, [r4, #0]
 801b852:	6061      	str	r1, [r4, #4]
 801b854:	60a2      	str	r2, [r4, #8]
 801b856:	881a      	ldrh	r2, [r3, #0]
 801b858:	789b      	ldrb	r3, [r3, #2]
 801b85a:	81a2      	strh	r2, [r4, #12]
 801b85c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->grade,"7A");
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b864:	4a14      	ldr	r2, [pc, #80]	; (801b8b8 <problem_fetch+0x1a1d0>)
 801b866:	8811      	ldrh	r1, [r2, #0]
 801b868:	7892      	ldrb	r2, [r2, #2]
 801b86a:	8019      	strh	r1, [r3, #0]
 801b86c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	2206      	movs	r2, #6
 801b872:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,H,C,H,D");
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	33a4      	adds	r3, #164	; 0xa4
 801b878:	4a2b      	ldr	r2, [pc, #172]	; (801b928 <problem_fetch+0x1a240>)
 801b87a:	461c      	mov	r4, r3
 801b87c:	4613      	mov	r3, r2
 801b87e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b880:	6020      	str	r0, [r4, #0]
 801b882:	6061      	str	r1, [r4, #4]
 801b884:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,6,10,13,16,18");
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	3304      	adds	r3, #4
 801b88a:	4a28      	ldr	r2, [pc, #160]	; (801b92c <problem_fetch+0x1a244>)
 801b88c:	461c      	mov	r4, r3
 801b88e:	4615      	mov	r5, r2
 801b890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b892:	6020      	str	r0, [r4, #0]
 801b894:	6061      	str	r1, [r4, #4]
 801b896:	60a2      	str	r2, [r4, #8]
 801b898:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,s,d,d,d,e");
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b8a0:	4a23      	ldr	r2, [pc, #140]	; (801b930 <problem_fetch+0x1a248>)
 801b8a2:	461c      	mov	r4, r3
 801b8a4:	4613      	mov	r3, r2
 801b8a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b8a8:	6020      	str	r0, [r4, #0]
 801b8aa:	6061      	str	r1, [r4, #4]
 801b8ac:	60a2      	str	r2, [r4, #8]
			break;
 801b8ae:	f000 be4b 	b.w	801c548 <problem_fetch+0x1ae60>
 801b8b2:	bf00      	nop
 801b8b4:	0802ca1c 	.word	0x0802ca1c
 801b8b8:	0802391c 	.word	0x0802391c
 801b8bc:	0802ca24 	.word	0x0802ca24
 801b8c0:	0802ca34 	.word	0x0802ca34
 801b8c4:	08023b6c 	.word	0x08023b6c
 801b8c8:	0802ca4c 	.word	0x0802ca4c
 801b8cc:	0802395c 	.word	0x0802395c
 801b8d0:	0802ca54 	.word	0x0802ca54
 801b8d4:	0802ca64 	.word	0x0802ca64
 801b8d8:	08023a80 	.word	0x08023a80
 801b8dc:	0802ca7c 	.word	0x0802ca7c
 801b8e0:	0802ca84 	.word	0x0802ca84
 801b8e4:	0802ca90 	.word	0x0802ca90
 801b8e8:	08023cf8 	.word	0x08023cf8
 801b8ec:	0802caa0 	.word	0x0802caa0
 801b8f0:	08023afc 	.word	0x08023afc
 801b8f4:	0802cab4 	.word	0x0802cab4
 801b8f8:	0802cac4 	.word	0x0802cac4
 801b8fc:	08023ae4 	.word	0x08023ae4
 801b900:	0802cad8 	.word	0x0802cad8
 801b904:	08024054 	.word	0x08024054
 801b908:	0802cae4 	.word	0x0802cae4
 801b90c:	08027ad0 	.word	0x08027ad0
 801b910:	08023e28 	.word	0x08023e28
 801b914:	0802caf0 	.word	0x0802caf0
 801b918:	0802caf8 	.word	0x0802caf8
 801b91c:	0802cb04 	.word	0x0802cb04
 801b920:	08025068 	.word	0x08025068
 801b924:	0802cb14 	.word	0x0802cb14
 801b928:	0802cb24 	.word	0x0802cb24
 801b92c:	0802cb30 	.word	0x0802cb30
 801b930:	0802393c 	.word	0x0802393c
		case 784 :
			strcpy(p->name,"LADYBUG");
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b93a:	49a5      	ldr	r1, [pc, #660]	; (801bbd0 <problem_fetch+0x1a4e8>)
 801b93c:	461a      	mov	r2, r3
 801b93e:	460b      	mov	r3, r1
 801b940:	cb03      	ldmia	r3!, {r0, r1}
 801b942:	6010      	str	r0, [r2, #0]
 801b944:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7A+");
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b94c:	4aa1      	ldr	r2, [pc, #644]	; (801bbd4 <problem_fetch+0x1a4ec>)
 801b94e:	6810      	ldr	r0, [r2, #0]
 801b950:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801b952:	687b      	ldr	r3, [r7, #4]
 801b954:	2208      	movs	r2, #8
 801b956:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"A,A,C,D,F,G,H,J");
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	33a4      	adds	r3, #164	; 0xa4
 801b95c:	4a9e      	ldr	r2, [pc, #632]	; (801bbd8 <problem_fetch+0x1a4f0>)
 801b95e:	461c      	mov	r4, r3
 801b960:	4615      	mov	r5, r2
 801b962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b964:	6020      	str	r0, [r4, #0]
 801b966:	6061      	str	r1, [r4, #4]
 801b968:	60a2      	str	r2, [r4, #8]
 801b96a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"9,14,13,18,11,6,10,5");
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	3304      	adds	r3, #4
 801b970:	4a9a      	ldr	r2, [pc, #616]	; (801bbdc <problem_fetch+0x1a4f4>)
 801b972:	461d      	mov	r5, r3
 801b974:	4614      	mov	r4, r2
 801b976:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b978:	6028      	str	r0, [r5, #0]
 801b97a:	6069      	str	r1, [r5, #4]
 801b97c:	60aa      	str	r2, [r5, #8]
 801b97e:	60eb      	str	r3, [r5, #12]
 801b980:	6820      	ldr	r0, [r4, #0]
 801b982:	6128      	str	r0, [r5, #16]
 801b984:	7923      	ldrb	r3, [r4, #4]
 801b986:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"d,d,d,e,d,s,d,s");
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b98e:	4a94      	ldr	r2, [pc, #592]	; (801bbe0 <problem_fetch+0x1a4f8>)
 801b990:	461c      	mov	r4, r3
 801b992:	4615      	mov	r5, r2
 801b994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b996:	6020      	str	r0, [r4, #0]
 801b998:	6061      	str	r1, [r4, #4]
 801b99a:	60a2      	str	r2, [r4, #8]
 801b99c:	60e3      	str	r3, [r4, #12]
			break;
 801b99e:	f000 bdd3 	b.w	801c548 <problem_fetch+0x1ae60>
		case 785 :
			strcpy(p->name,"ANA");
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801b9a8:	4a8e      	ldr	r2, [pc, #568]	; (801bbe4 <problem_fetch+0x1a4fc>)
 801b9aa:	6810      	ldr	r0, [r2, #0]
 801b9ac:	6018      	str	r0, [r3, #0]
			strcpy(p->grade,"6B+");
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801b9b4:	4a8c      	ldr	r2, [pc, #560]	; (801bbe8 <problem_fetch+0x1a500>)
 801b9b6:	6810      	ldr	r0, [r2, #0]
 801b9b8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	2206      	movs	r2, #6
 801b9be:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,H,E,D");
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	33a4      	adds	r3, #164	; 0xa4
 801b9c4:	4a89      	ldr	r2, [pc, #548]	; (801bbec <problem_fetch+0x1a504>)
 801b9c6:	461c      	mov	r4, r3
 801b9c8:	4613      	mov	r3, r2
 801b9ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9cc:	6020      	str	r0, [r4, #0]
 801b9ce:	6061      	str	r1, [r4, #4]
 801b9d0:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,7,10,13,16,18");
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	3304      	adds	r3, #4
 801b9d6:	4a86      	ldr	r2, [pc, #536]	; (801bbf0 <problem_fetch+0x1a508>)
 801b9d8:	461c      	mov	r4, r3
 801b9da:	4615      	mov	r5, r2
 801b9dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b9de:	6020      	str	r0, [r4, #0]
 801b9e0:	6061      	str	r1, [r4, #4]
 801b9e2:	60a2      	str	r2, [r4, #8]
 801b9e4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801b9ec:	4a81      	ldr	r2, [pc, #516]	; (801bbf4 <problem_fetch+0x1a50c>)
 801b9ee:	461c      	mov	r4, r3
 801b9f0:	4613      	mov	r3, r2
 801b9f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801b9f4:	6020      	str	r0, [r4, #0]
 801b9f6:	6061      	str	r1, [r4, #4]
 801b9f8:	60a2      	str	r2, [r4, #8]
			break;
 801b9fa:	f000 bda5 	b.w	801c548 <problem_fetch+0x1ae60>
		case 786 :
			strcpy(p->name,"CHEETAHSAURUS");
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba04:	4a7c      	ldr	r2, [pc, #496]	; (801bbf8 <problem_fetch+0x1a510>)
 801ba06:	461c      	mov	r4, r3
 801ba08:	4613      	mov	r3, r2
 801ba0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801ba0c:	6020      	str	r0, [r4, #0]
 801ba0e:	6061      	str	r1, [r4, #4]
 801ba10:	60a2      	str	r2, [r4, #8]
 801ba12:	881b      	ldrh	r3, [r3, #0]
 801ba14:	81a3      	strh	r3, [r4, #12]
			strcpy(p->grade,"6C");
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba1c:	4a77      	ldr	r2, [pc, #476]	; (801bbfc <problem_fetch+0x1a514>)
 801ba1e:	8811      	ldrh	r1, [r2, #0]
 801ba20:	7892      	ldrb	r2, [r2, #2]
 801ba22:	8019      	strh	r1, [r3, #0]
 801ba24:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	2208      	movs	r2, #8
 801ba2a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,E,H,G,I,G,I");
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	33a4      	adds	r3, #164	; 0xa4
 801ba30:	4a73      	ldr	r2, [pc, #460]	; (801bc00 <problem_fetch+0x1a518>)
 801ba32:	461c      	mov	r4, r3
 801ba34:	4615      	mov	r5, r2
 801ba36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba38:	6020      	str	r0, [r4, #0]
 801ba3a:	6061      	str	r1, [r4, #4]
 801ba3c:	60a2      	str	r2, [r4, #8]
 801ba3e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,9,12,14,15,17,18");
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	3304      	adds	r3, #4
 801ba44:	4a6f      	ldr	r2, [pc, #444]	; (801bc04 <problem_fetch+0x1a51c>)
 801ba46:	461d      	mov	r5, r3
 801ba48:	4614      	mov	r4, r2
 801ba4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba4c:	6028      	str	r0, [r5, #0]
 801ba4e:	6069      	str	r1, [r5, #4]
 801ba50:	60aa      	str	r2, [r5, #8]
 801ba52:	60eb      	str	r3, [r5, #12]
 801ba54:	6820      	ldr	r0, [r4, #0]
 801ba56:	6128      	str	r0, [r5, #16]
 801ba58:	7923      	ldrb	r3, [r4, #4]
 801ba5a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801ba62:	4a69      	ldr	r2, [pc, #420]	; (801bc08 <problem_fetch+0x1a520>)
 801ba64:	461c      	mov	r4, r3
 801ba66:	4615      	mov	r5, r2
 801ba68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ba6a:	6020      	str	r0, [r4, #0]
 801ba6c:	6061      	str	r1, [r4, #4]
 801ba6e:	60a2      	str	r2, [r4, #8]
 801ba70:	60e3      	str	r3, [r4, #12]
			break;
 801ba72:	f000 bd69 	b.w	801c548 <problem_fetch+0x1ae60>
		case 787 :
			strcpy(p->name,"WAR OF THE TODDS");
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801ba7c:	4a63      	ldr	r2, [pc, #396]	; (801bc0c <problem_fetch+0x1a524>)
 801ba7e:	461d      	mov	r5, r3
 801ba80:	4614      	mov	r4, r2
 801ba82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba84:	6028      	str	r0, [r5, #0]
 801ba86:	6069      	str	r1, [r5, #4]
 801ba88:	60aa      	str	r2, [r5, #8]
 801ba8a:	60eb      	str	r3, [r5, #12]
 801ba8c:	7823      	ldrb	r3, [r4, #0]
 801ba8e:	742b      	strb	r3, [r5, #16]
			strcpy(p->grade,"7B+");
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801ba96:	4a5e      	ldr	r2, [pc, #376]	; (801bc10 <problem_fetch+0x1a528>)
 801ba98:	6810      	ldr	r0, [r2, #0]
 801ba9a:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2206      	movs	r2, #6
 801baa0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,G,I,I,H,D");
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	33a4      	adds	r3, #164	; 0xa4
 801baa6:	4a5b      	ldr	r2, [pc, #364]	; (801bc14 <problem_fetch+0x1a52c>)
 801baa8:	461c      	mov	r4, r3
 801baaa:	4613      	mov	r3, r2
 801baac:	cb07      	ldmia	r3!, {r0, r1, r2}
 801baae:	6020      	str	r0, [r4, #0]
 801bab0:	6061      	str	r1, [r4, #4]
 801bab2:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,9,15,16,18");
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	3304      	adds	r3, #4
 801bab8:	4a57      	ldr	r2, [pc, #348]	; (801bc18 <problem_fetch+0x1a530>)
 801baba:	461c      	mov	r4, r3
 801babc:	4613      	mov	r3, r2
 801babe:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bac0:	6020      	str	r0, [r4, #0]
 801bac2:	6061      	str	r1, [r4, #4]
 801bac4:	60a2      	str	r2, [r4, #8]
 801bac6:	881a      	ldrh	r2, [r3, #0]
 801bac8:	789b      	ldrb	r3, [r3, #2]
 801baca:	81a2      	strh	r2, [r4, #12]
 801bacc:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bad4:	4a47      	ldr	r2, [pc, #284]	; (801bbf4 <problem_fetch+0x1a50c>)
 801bad6:	461c      	mov	r4, r3
 801bad8:	4613      	mov	r3, r2
 801bada:	cb07      	ldmia	r3!, {r0, r1, r2}
 801badc:	6020      	str	r0, [r4, #0]
 801bade:	6061      	str	r1, [r4, #4]
 801bae0:	60a2      	str	r2, [r4, #8]
			break;
 801bae2:	f000 bd31 	b.w	801c548 <problem_fetch+0x1ae60>
		case 788 :
			strcpy(p->name,"AMIT 1.1");
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801baec:	494b      	ldr	r1, [pc, #300]	; (801bc1c <problem_fetch+0x1a534>)
 801baee:	461a      	mov	r2, r3
 801baf0:	460b      	mov	r3, r1
 801baf2:	cb03      	ldmia	r3!, {r0, r1}
 801baf4:	6010      	str	r0, [r2, #0]
 801baf6:	6051      	str	r1, [r2, #4]
 801baf8:	781b      	ldrb	r3, [r3, #0]
 801bafa:	7213      	strb	r3, [r2, #8]
			strcpy(p->grade,"6C");
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bb02:	4a3e      	ldr	r2, [pc, #248]	; (801bbfc <problem_fetch+0x1a514>)
 801bb04:	8811      	ldrh	r1, [r2, #0]
 801bb06:	7892      	ldrb	r2, [r2, #2]
 801bb08:	8019      	strh	r1, [r3, #0]
 801bb0a:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	2206      	movs	r2, #6
 801bb10:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,H,C,E,D,D");
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	33a4      	adds	r3, #164	; 0xa4
 801bb16:	4a42      	ldr	r2, [pc, #264]	; (801bc20 <problem_fetch+0x1a538>)
 801bb18:	461c      	mov	r4, r3
 801bb1a:	4613      	mov	r3, r2
 801bb1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb1e:	6020      	str	r0, [r4, #0]
 801bb20:	6061      	str	r1, [r4, #4]
 801bb22:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"4,8,8,12,15,18");
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	3304      	adds	r3, #4
 801bb28:	4a3e      	ldr	r2, [pc, #248]	; (801bc24 <problem_fetch+0x1a53c>)
 801bb2a:	461c      	mov	r4, r3
 801bb2c:	4613      	mov	r3, r2
 801bb2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb30:	6020      	str	r0, [r4, #0]
 801bb32:	6061      	str	r1, [r4, #4]
 801bb34:	60a2      	str	r2, [r4, #8]
 801bb36:	881a      	ldrh	r2, [r3, #0]
 801bb38:	789b      	ldrb	r3, [r3, #2]
 801bb3a:	81a2      	strh	r2, [r4, #12]
 801bb3c:	73a3      	strb	r3, [r4, #14]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bb44:	4a2b      	ldr	r2, [pc, #172]	; (801bbf4 <problem_fetch+0x1a50c>)
 801bb46:	461c      	mov	r4, r3
 801bb48:	4613      	mov	r3, r2
 801bb4a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb4c:	6020      	str	r0, [r4, #0]
 801bb4e:	6061      	str	r1, [r4, #4]
 801bb50:	60a2      	str	r2, [r4, #8]
			break;
 801bb52:	f000 bcf9 	b.w	801c548 <problem_fetch+0x1ae60>
		case 789 :
			strcpy(p->name,"CRANKSHAFT");
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bb5c:	4932      	ldr	r1, [pc, #200]	; (801bc28 <problem_fetch+0x1a540>)
 801bb5e:	461a      	mov	r2, r3
 801bb60:	460b      	mov	r3, r1
 801bb62:	cb03      	ldmia	r3!, {r0, r1}
 801bb64:	6010      	str	r0, [r2, #0]
 801bb66:	6051      	str	r1, [r2, #4]
 801bb68:	8819      	ldrh	r1, [r3, #0]
 801bb6a:	789b      	ldrb	r3, [r3, #2]
 801bb6c:	8111      	strh	r1, [r2, #8]
 801bb6e:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bb76:	4a21      	ldr	r2, [pc, #132]	; (801bbfc <problem_fetch+0x1a514>)
 801bb78:	8811      	ldrh	r1, [r2, #0]
 801bb7a:	7892      	ldrb	r2, [r2, #2]
 801bb7c:	8019      	strh	r1, [r3, #0]
 801bb7e:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	2207      	movs	r2, #7
 801bb84:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,H,G,F,E,B,D");
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	33a4      	adds	r3, #164	; 0xa4
 801bb8a:	4a28      	ldr	r2, [pc, #160]	; (801bc2c <problem_fetch+0x1a544>)
 801bb8c:	461c      	mov	r4, r3
 801bb8e:	4613      	mov	r3, r2
 801bb90:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bb92:	6020      	str	r0, [r4, #0]
 801bb94:	6061      	str	r1, [r4, #4]
 801bb96:	60a2      	str	r2, [r4, #8]
 801bb98:	881b      	ldrh	r3, [r3, #0]
 801bb9a:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,5,9,11,12,15,18");
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	3304      	adds	r3, #4
 801bba0:	4a23      	ldr	r2, [pc, #140]	; (801bc30 <problem_fetch+0x1a548>)
 801bba2:	461d      	mov	r5, r3
 801bba4:	4614      	mov	r4, r2
 801bba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bba8:	6028      	str	r0, [r5, #0]
 801bbaa:	6069      	str	r1, [r5, #4]
 801bbac:	60aa      	str	r2, [r5, #8]
 801bbae:	60eb      	str	r3, [r5, #12]
 801bbb0:	8823      	ldrh	r3, [r4, #0]
 801bbb2:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bbba:	4a1e      	ldr	r2, [pc, #120]	; (801bc34 <problem_fetch+0x1a54c>)
 801bbbc:	461c      	mov	r4, r3
 801bbbe:	4613      	mov	r3, r2
 801bbc0:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bbc2:	6020      	str	r0, [r4, #0]
 801bbc4:	6061      	str	r1, [r4, #4]
 801bbc6:	60a2      	str	r2, [r4, #8]
 801bbc8:	881b      	ldrh	r3, [r3, #0]
 801bbca:	81a3      	strh	r3, [r4, #12]
			break;
 801bbcc:	f000 bcbc 	b.w	801c548 <problem_fetch+0x1ae60>
 801bbd0:	0802cb40 	.word	0x0802cb40
 801bbd4:	08023afc 	.word	0x08023afc
 801bbd8:	0802cb48 	.word	0x0802cb48
 801bbdc:	0802cb58 	.word	0x0802cb58
 801bbe0:	0802cb70 	.word	0x0802cb70
 801bbe4:	0802cb80 	.word	0x0802cb80
 801bbe8:	0802395c 	.word	0x0802395c
 801bbec:	0802cb84 	.word	0x0802cb84
 801bbf0:	0802b32c 	.word	0x0802b32c
 801bbf4:	08023cf8 	.word	0x08023cf8
 801bbf8:	0802cb90 	.word	0x0802cb90
 801bbfc:	08023a28 	.word	0x08023a28
 801bc00:	0802cba0 	.word	0x0802cba0
 801bc04:	0802cbb0 	.word	0x0802cbb0
 801bc08:	08023b6c 	.word	0x08023b6c
 801bc0c:	0802cbc8 	.word	0x0802cbc8
 801bc10:	08023a98 	.word	0x08023a98
 801bc14:	0802cbdc 	.word	0x0802cbdc
 801bc18:	0802cbe8 	.word	0x0802cbe8
 801bc1c:	0802cbf8 	.word	0x0802cbf8
 801bc20:	0802cc04 	.word	0x0802cc04
 801bc24:	08027a6c 	.word	0x08027a6c
 801bc28:	0802cc10 	.word	0x0802cc10
 801bc2c:	0802cc1c 	.word	0x0802cc1c
 801bc30:	0802cc2c 	.word	0x0802cc2c
 801bc34:	080239d4 	.word	0x080239d4
		case 790 :
			strcpy(p->name,"THE LADDER");
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bc3e:	49b6      	ldr	r1, [pc, #728]	; (801bf18 <problem_fetch+0x1a830>)
 801bc40:	461a      	mov	r2, r3
 801bc42:	460b      	mov	r3, r1
 801bc44:	cb03      	ldmia	r3!, {r0, r1}
 801bc46:	6010      	str	r0, [r2, #0]
 801bc48:	6051      	str	r1, [r2, #4]
 801bc4a:	8819      	ldrh	r1, [r3, #0]
 801bc4c:	789b      	ldrb	r3, [r3, #2]
 801bc4e:	8111      	strh	r1, [r2, #8]
 801bc50:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bc58:	4ab0      	ldr	r2, [pc, #704]	; (801bf1c <problem_fetch+0x1a834>)
 801bc5a:	6810      	ldr	r0, [r2, #0]
 801bc5c:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	2207      	movs	r2, #7
 801bc62:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,J,I,J,I,K,I");
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	33a4      	adds	r3, #164	; 0xa4
 801bc68:	4aad      	ldr	r2, [pc, #692]	; (801bf20 <problem_fetch+0x1a838>)
 801bc6a:	461c      	mov	r4, r3
 801bc6c:	4613      	mov	r3, r2
 801bc6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bc70:	6020      	str	r0, [r4, #0]
 801bc72:	6061      	str	r1, [r4, #4]
 801bc74:	60a2      	str	r2, [r4, #8]
 801bc76:	881b      	ldrh	r3, [r3, #0]
 801bc78:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,10,13,15,16,18");
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	3304      	adds	r3, #4
 801bc7e:	4aa9      	ldr	r2, [pc, #676]	; (801bf24 <problem_fetch+0x1a83c>)
 801bc80:	461d      	mov	r5, r3
 801bc82:	4614      	mov	r4, r2
 801bc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bc86:	6028      	str	r0, [r5, #0]
 801bc88:	6069      	str	r1, [r5, #4]
 801bc8a:	60aa      	str	r2, [r5, #8]
 801bc8c:	60eb      	str	r3, [r5, #12]
 801bc8e:	8823      	ldrh	r3, [r4, #0]
 801bc90:	78a2      	ldrb	r2, [r4, #2]
 801bc92:	822b      	strh	r3, [r5, #16]
 801bc94:	4613      	mov	r3, r2
 801bc96:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bc9e:	4aa2      	ldr	r2, [pc, #648]	; (801bf28 <problem_fetch+0x1a840>)
 801bca0:	461c      	mov	r4, r3
 801bca2:	4613      	mov	r3, r2
 801bca4:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bca6:	6020      	str	r0, [r4, #0]
 801bca8:	6061      	str	r1, [r4, #4]
 801bcaa:	60a2      	str	r2, [r4, #8]
 801bcac:	881b      	ldrh	r3, [r3, #0]
 801bcae:	81a3      	strh	r3, [r4, #12]
			break;
 801bcb0:	f000 bc4a 	b.w	801c548 <problem_fetch+0x1ae60>
		case 791 :
			strcpy(p->name,"SALAD DAYS");
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bcba:	499c      	ldr	r1, [pc, #624]	; (801bf2c <problem_fetch+0x1a844>)
 801bcbc:	461a      	mov	r2, r3
 801bcbe:	460b      	mov	r3, r1
 801bcc0:	cb03      	ldmia	r3!, {r0, r1}
 801bcc2:	6010      	str	r0, [r2, #0]
 801bcc4:	6051      	str	r1, [r2, #4]
 801bcc6:	8819      	ldrh	r1, [r3, #0]
 801bcc8:	789b      	ldrb	r3, [r3, #2]
 801bcca:	8111      	strh	r1, [r2, #8]
 801bccc:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bcd4:	4a96      	ldr	r2, [pc, #600]	; (801bf30 <problem_fetch+0x1a848>)
 801bcd6:	8811      	ldrh	r1, [r2, #0]
 801bcd8:	7892      	ldrb	r2, [r2, #2]
 801bcda:	8019      	strh	r1, [r3, #0]
 801bcdc:	709a      	strb	r2, [r3, #2]
			p->moveSize = 12;
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	220c      	movs	r2, #12
 801bce2:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,I,H,K,B,D,H,G,G,A");
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	33a4      	adds	r3, #164	; 0xa4
 801bce8:	4a92      	ldr	r2, [pc, #584]	; (801bf34 <problem_fetch+0x1a84c>)
 801bcea:	461d      	mov	r5, r3
 801bcec:	4614      	mov	r4, r2
 801bcee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bcf0:	6028      	str	r0, [r5, #0]
 801bcf2:	6069      	str	r1, [r5, #4]
 801bcf4:	60aa      	str	r2, [r5, #8]
 801bcf6:	60eb      	str	r3, [r5, #12]
 801bcf8:	cc03      	ldmia	r4!, {r0, r1}
 801bcfa:	6128      	str	r0, [r5, #16]
 801bcfc:	6169      	str	r1, [r5, #20]
			strcpy(p->moveNumbers,"5,6,8,10,12,14,15,15,16,17,17,18");
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	3304      	adds	r3, #4
 801bd02:	4a8d      	ldr	r2, [pc, #564]	; (801bf38 <problem_fetch+0x1a850>)
 801bd04:	4614      	mov	r4, r2
 801bd06:	469c      	mov	ip, r3
 801bd08:	f104 0e20 	add.w	lr, r4, #32
 801bd0c:	4665      	mov	r5, ip
 801bd0e:	4626      	mov	r6, r4
 801bd10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801bd12:	6028      	str	r0, [r5, #0]
 801bd14:	6069      	str	r1, [r5, #4]
 801bd16:	60aa      	str	r2, [r5, #8]
 801bd18:	60eb      	str	r3, [r5, #12]
 801bd1a:	3410      	adds	r4, #16
 801bd1c:	f10c 0c10 	add.w	ip, ip, #16
 801bd20:	4574      	cmp	r4, lr
 801bd22:	d1f3      	bne.n	801bd0c <problem_fetch+0x1a624>
 801bd24:	4663      	mov	r3, ip
 801bd26:	4622      	mov	r2, r4
 801bd28:	7812      	ldrb	r2, [r2, #0]
 801bd2a:	701a      	strb	r2, [r3, #0]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,d,d,d,d,e");
 801bd2c:	687b      	ldr	r3, [r7, #4]
 801bd2e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bd32:	4a82      	ldr	r2, [pc, #520]	; (801bf3c <problem_fetch+0x1a854>)
 801bd34:	461d      	mov	r5, r3
 801bd36:	4614      	mov	r4, r2
 801bd38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd3a:	6028      	str	r0, [r5, #0]
 801bd3c:	6069      	str	r1, [r5, #4]
 801bd3e:	60aa      	str	r2, [r5, #8]
 801bd40:	60eb      	str	r3, [r5, #12]
 801bd42:	cc03      	ldmia	r4!, {r0, r1}
 801bd44:	6128      	str	r0, [r5, #16]
 801bd46:	6169      	str	r1, [r5, #20]
			break;
 801bd48:	e3fe      	b.n	801c548 <problem_fetch+0x1ae60>
		case 792 :
			strcpy(p->name,"SHAKEN NOT STIRRED");
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bd50:	4a7b      	ldr	r2, [pc, #492]	; (801bf40 <problem_fetch+0x1a858>)
 801bd52:	461d      	mov	r5, r3
 801bd54:	4614      	mov	r4, r2
 801bd56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd58:	6028      	str	r0, [r5, #0]
 801bd5a:	6069      	str	r1, [r5, #4]
 801bd5c:	60aa      	str	r2, [r5, #8]
 801bd5e:	60eb      	str	r3, [r5, #12]
 801bd60:	8823      	ldrh	r3, [r4, #0]
 801bd62:	78a2      	ldrb	r2, [r4, #2]
 801bd64:	822b      	strh	r3, [r5, #16]
 801bd66:	4613      	mov	r3, r2
 801bd68:	74ab      	strb	r3, [r5, #18]
			strcpy(p->grade,"6B+");
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bd70:	4a6a      	ldr	r2, [pc, #424]	; (801bf1c <problem_fetch+0x1a834>)
 801bd72:	6810      	ldr	r0, [r2, #0]
 801bd74:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	2207      	movs	r2, #7
 801bd7a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,H,F,E,A,D,A");
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	33a4      	adds	r3, #164	; 0xa4
 801bd80:	4a70      	ldr	r2, [pc, #448]	; (801bf44 <problem_fetch+0x1a85c>)
 801bd82:	461c      	mov	r4, r3
 801bd84:	4613      	mov	r3, r2
 801bd86:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bd88:	6020      	str	r0, [r4, #0]
 801bd8a:	6061      	str	r1, [r4, #4]
 801bd8c:	60a2      	str	r2, [r4, #8]
 801bd8e:	881b      	ldrh	r3, [r3, #0]
 801bd90:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,8,11,12,14,15,18");
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	3304      	adds	r3, #4
 801bd96:	4a6c      	ldr	r2, [pc, #432]	; (801bf48 <problem_fetch+0x1a860>)
 801bd98:	461d      	mov	r5, r3
 801bd9a:	4614      	mov	r4, r2
 801bd9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bd9e:	6028      	str	r0, [r5, #0]
 801bda0:	6069      	str	r1, [r5, #4]
 801bda2:	60aa      	str	r2, [r5, #8]
 801bda4:	60eb      	str	r3, [r5, #12]
 801bda6:	8823      	ldrh	r3, [r4, #0]
 801bda8:	78a2      	ldrb	r2, [r4, #2]
 801bdaa:	822b      	strh	r3, [r5, #16]
 801bdac:	4613      	mov	r3, r2
 801bdae:	74ab      	strb	r3, [r5, #18]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bdb6:	4a5c      	ldr	r2, [pc, #368]	; (801bf28 <problem_fetch+0x1a840>)
 801bdb8:	461c      	mov	r4, r3
 801bdba:	4613      	mov	r3, r2
 801bdbc:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdbe:	6020      	str	r0, [r4, #0]
 801bdc0:	6061      	str	r1, [r4, #4]
 801bdc2:	60a2      	str	r2, [r4, #8]
 801bdc4:	881b      	ldrh	r3, [r3, #0]
 801bdc6:	81a3      	strh	r3, [r4, #12]
			break;
 801bdc8:	e3be      	b.n	801c548 <problem_fetch+0x1ae60>
		case 793 :
			strcpy(p->name,"SNAGGLEPUSS");
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bdd0:	4a5e      	ldr	r2, [pc, #376]	; (801bf4c <problem_fetch+0x1a864>)
 801bdd2:	461c      	mov	r4, r3
 801bdd4:	4613      	mov	r3, r2
 801bdd6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdd8:	6020      	str	r0, [r4, #0]
 801bdda:	6061      	str	r1, [r4, #4]
 801bddc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"6B+");
 801bdde:	687b      	ldr	r3, [r7, #4]
 801bde0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bde4:	4a4d      	ldr	r2, [pc, #308]	; (801bf1c <problem_fetch+0x1a834>)
 801bde6:	6810      	ldr	r0, [r2, #0]
 801bde8:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	2206      	movs	r2, #6
 801bdee:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,K,H,I,H,I");
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	33a4      	adds	r3, #164	; 0xa4
 801bdf4:	4a56      	ldr	r2, [pc, #344]	; (801bf50 <problem_fetch+0x1a868>)
 801bdf6:	461c      	mov	r4, r3
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bdfc:	6020      	str	r0, [r4, #0]
 801bdfe:	6061      	str	r1, [r4, #4]
 801be00:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,12,14,16,18");
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	3304      	adds	r3, #4
 801be06:	4a53      	ldr	r2, [pc, #332]	; (801bf54 <problem_fetch+0x1a86c>)
 801be08:	461c      	mov	r4, r3
 801be0a:	4615      	mov	r5, r2
 801be0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be0e:	6020      	str	r0, [r4, #0]
 801be10:	6061      	str	r1, [r4, #4]
 801be12:	60a2      	str	r2, [r4, #8]
 801be14:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801be1c:	4a4e      	ldr	r2, [pc, #312]	; (801bf58 <problem_fetch+0x1a870>)
 801be1e:	461c      	mov	r4, r3
 801be20:	4613      	mov	r3, r2
 801be22:	cb07      	ldmia	r3!, {r0, r1, r2}
 801be24:	6020      	str	r0, [r4, #0]
 801be26:	6061      	str	r1, [r4, #4]
 801be28:	60a2      	str	r2, [r4, #8]
			break;
 801be2a:	e38d      	b.n	801c548 <problem_fetch+0x1ae60>
		case 794 :
			strcpy(p->name,"E-Z CHEESE");
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801be32:	494a      	ldr	r1, [pc, #296]	; (801bf5c <problem_fetch+0x1a874>)
 801be34:	461a      	mov	r2, r3
 801be36:	460b      	mov	r3, r1
 801be38:	cb03      	ldmia	r3!, {r0, r1}
 801be3a:	6010      	str	r0, [r2, #0]
 801be3c:	6051      	str	r1, [r2, #4]
 801be3e:	8819      	ldrh	r1, [r3, #0]
 801be40:	789b      	ldrb	r3, [r3, #2]
 801be42:	8111      	strh	r1, [r2, #8]
 801be44:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6B+");
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801be4c:	4a33      	ldr	r2, [pc, #204]	; (801bf1c <problem_fetch+0x1a834>)
 801be4e:	6810      	ldr	r0, [r2, #0]
 801be50:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	2208      	movs	r2, #8
 801be56:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,E,H,H,J,G,H,D");
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	33a4      	adds	r3, #164	; 0xa4
 801be5c:	4a40      	ldr	r2, [pc, #256]	; (801bf60 <problem_fetch+0x1a878>)
 801be5e:	461c      	mov	r4, r3
 801be60:	4615      	mov	r5, r2
 801be62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be64:	6020      	str	r0, [r4, #0]
 801be66:	6061      	str	r1, [r4, #4]
 801be68:	60a2      	str	r2, [r4, #8]
 801be6a:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,8,10,12,13,15,16,18");
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	3304      	adds	r3, #4
 801be70:	4a3c      	ldr	r2, [pc, #240]	; (801bf64 <problem_fetch+0x1a87c>)
 801be72:	461d      	mov	r5, r3
 801be74:	4614      	mov	r4, r2
 801be76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801be78:	6028      	str	r0, [r5, #0]
 801be7a:	6069      	str	r1, [r5, #4]
 801be7c:	60aa      	str	r2, [r5, #8]
 801be7e:	60eb      	str	r3, [r5, #12]
 801be80:	6820      	ldr	r0, [r4, #0]
 801be82:	6128      	str	r0, [r5, #16]
 801be84:	88a3      	ldrh	r3, [r4, #4]
 801be86:	82ab      	strh	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801be88:	687b      	ldr	r3, [r7, #4]
 801be8a:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801be8e:	4a36      	ldr	r2, [pc, #216]	; (801bf68 <problem_fetch+0x1a880>)
 801be90:	461c      	mov	r4, r3
 801be92:	4615      	mov	r5, r2
 801be94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801be96:	6020      	str	r0, [r4, #0]
 801be98:	6061      	str	r1, [r4, #4]
 801be9a:	60a2      	str	r2, [r4, #8]
 801be9c:	60e3      	str	r3, [r4, #12]
			break;
 801be9e:	e353      	b.n	801c548 <problem_fetch+0x1ae60>
		case 795 :
			strcpy(p->name,"TODD, DARK AND HANDSOME");
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bea6:	4a31      	ldr	r2, [pc, #196]	; (801bf6c <problem_fetch+0x1a884>)
 801bea8:	461d      	mov	r5, r3
 801beaa:	4614      	mov	r4, r2
 801beac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801beae:	6028      	str	r0, [r5, #0]
 801beb0:	6069      	str	r1, [r5, #4]
 801beb2:	60aa      	str	r2, [r5, #8]
 801beb4:	60eb      	str	r3, [r5, #12]
 801beb6:	cc03      	ldmia	r4!, {r0, r1}
 801beb8:	6128      	str	r0, [r5, #16]
 801beba:	6169      	str	r1, [r5, #20]
			strcpy(p->grade,"7C");
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bec2:	4a2b      	ldr	r2, [pc, #172]	; (801bf70 <problem_fetch+0x1a888>)
 801bec4:	8811      	ldrh	r1, [r2, #0]
 801bec6:	7892      	ldrb	r2, [r2, #2]
 801bec8:	8019      	strh	r1, [r3, #0]
 801beca:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2208      	movs	r2, #8
 801bed0:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,G,H,C,C,H,G,I");
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	33a4      	adds	r3, #164	; 0xa4
 801bed6:	4a27      	ldr	r2, [pc, #156]	; (801bf74 <problem_fetch+0x1a88c>)
 801bed8:	461c      	mov	r4, r3
 801beda:	4615      	mov	r5, r2
 801bedc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bede:	6020      	str	r0, [r4, #0]
 801bee0:	6061      	str	r1, [r4, #4]
 801bee2:	60a2      	str	r2, [r4, #8]
 801bee4:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"4,6,8,8,13,16,17,18");
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	3304      	adds	r3, #4
 801beea:	4a23      	ldr	r2, [pc, #140]	; (801bf78 <problem_fetch+0x1a890>)
 801beec:	461d      	mov	r5, r3
 801beee:	4614      	mov	r4, r2
 801bef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801bef2:	6028      	str	r0, [r5, #0]
 801bef4:	6069      	str	r1, [r5, #4]
 801bef6:	60aa      	str	r2, [r5, #8]
 801bef8:	60eb      	str	r3, [r5, #12]
 801befa:	6820      	ldr	r0, [r4, #0]
 801befc:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bf04:	4a1d      	ldr	r2, [pc, #116]	; (801bf7c <problem_fetch+0x1a894>)
 801bf06:	461c      	mov	r4, r3
 801bf08:	4615      	mov	r5, r2
 801bf0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bf0c:	6020      	str	r0, [r4, #0]
 801bf0e:	6061      	str	r1, [r4, #4]
 801bf10:	60a2      	str	r2, [r4, #8]
 801bf12:	60e3      	str	r3, [r4, #12]
			break;
 801bf14:	e318      	b.n	801c548 <problem_fetch+0x1ae60>
 801bf16:	bf00      	nop
 801bf18:	0802cc40 	.word	0x0802cc40
 801bf1c:	0802395c 	.word	0x0802395c
 801bf20:	0802cc4c 	.word	0x0802cc4c
 801bf24:	0802bbc0 	.word	0x0802bbc0
 801bf28:	08023ae4 	.word	0x08023ae4
 801bf2c:	0802cc5c 	.word	0x0802cc5c
 801bf30:	0802391c 	.word	0x0802391c
 801bf34:	0802cc68 	.word	0x0802cc68
 801bf38:	0802cc80 	.word	0x0802cc80
 801bf3c:	0802cca4 	.word	0x0802cca4
 801bf40:	0802ccbc 	.word	0x0802ccbc
 801bf44:	0802ccd0 	.word	0x0802ccd0
 801bf48:	0802cce0 	.word	0x0802cce0
 801bf4c:	0802ccf4 	.word	0x0802ccf4
 801bf50:	0802cd00 	.word	0x0802cd00
 801bf54:	08028a30 	.word	0x08028a30
 801bf58:	08023cf8 	.word	0x08023cf8
 801bf5c:	0802cd0c 	.word	0x0802cd0c
 801bf60:	0802cd18 	.word	0x0802cd18
 801bf64:	0802cd28 	.word	0x0802cd28
 801bf68:	08023b6c 	.word	0x08023b6c
 801bf6c:	0802cd40 	.word	0x0802cd40
 801bf70:	08024190 	.word	0x08024190
 801bf74:	0802cd58 	.word	0x0802cd58
 801bf78:	0802cd68 	.word	0x0802cd68
 801bf7c:	08023a80 	.word	0x08023a80
		case 796 :
			strcpy(p->name,"HAN DUO");
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bf86:	49a4      	ldr	r1, [pc, #656]	; (801c218 <problem_fetch+0x1ab30>)
 801bf88:	461a      	mov	r2, r3
 801bf8a:	460b      	mov	r3, r1
 801bf8c:	cb03      	ldmia	r3!, {r0, r1}
 801bf8e:	6010      	str	r0, [r2, #0]
 801bf90:	6051      	str	r1, [r2, #4]
			strcpy(p->grade,"7C");
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801bf98:	4aa0      	ldr	r2, [pc, #640]	; (801c21c <problem_fetch+0x1ab34>)
 801bf9a:	8811      	ldrh	r1, [r2, #0]
 801bf9c:	7892      	ldrb	r2, [r2, #2]
 801bf9e:	8019      	strh	r1, [r3, #0]
 801bfa0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	2205      	movs	r2, #5
 801bfa6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,F,E,H,I");
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	33a4      	adds	r3, #164	; 0xa4
 801bfac:	499c      	ldr	r1, [pc, #624]	; (801c220 <problem_fetch+0x1ab38>)
 801bfae:	461a      	mov	r2, r3
 801bfb0:	460b      	mov	r3, r1
 801bfb2:	cb03      	ldmia	r3!, {r0, r1}
 801bfb4:	6010      	str	r0, [r2, #0]
 801bfb6:	6051      	str	r1, [r2, #4]
 801bfb8:	881b      	ldrh	r3, [r3, #0]
 801bfba:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,11,14,13,18");
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	3304      	adds	r3, #4
 801bfc0:	4a98      	ldr	r2, [pc, #608]	; (801c224 <problem_fetch+0x1ab3c>)
 801bfc2:	461c      	mov	r4, r3
 801bfc4:	4613      	mov	r3, r2
 801bfc6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bfc8:	6020      	str	r0, [r4, #0]
 801bfca:	6061      	str	r1, [r4, #4]
 801bfcc:	60a2      	str	r2, [r4, #8]
 801bfce:	881b      	ldrh	r3, [r3, #0]
 801bfd0:	81a3      	strh	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801bfd8:	4993      	ldr	r1, [pc, #588]	; (801c228 <problem_fetch+0x1ab40>)
 801bfda:	461a      	mov	r2, r3
 801bfdc:	460b      	mov	r3, r1
 801bfde:	cb03      	ldmia	r3!, {r0, r1}
 801bfe0:	6010      	str	r0, [r2, #0]
 801bfe2:	6051      	str	r1, [r2, #4]
 801bfe4:	881b      	ldrh	r3, [r3, #0]
 801bfe6:	8113      	strh	r3, [r2, #8]
			break;
 801bfe8:	e2ae      	b.n	801c548 <problem_fetch+0x1ae60>
		case 797 :
			strcpy(p->name,"SINGLE DURA");
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801bff0:	4a8e      	ldr	r2, [pc, #568]	; (801c22c <problem_fetch+0x1ab44>)
 801bff2:	461c      	mov	r4, r3
 801bff4:	4613      	mov	r3, r2
 801bff6:	cb07      	ldmia	r3!, {r0, r1, r2}
 801bff8:	6020      	str	r0, [r4, #0]
 801bffa:	6061      	str	r1, [r4, #4]
 801bffc:	60a2      	str	r2, [r4, #8]
			strcpy(p->grade,"7B");
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c004:	4a8a      	ldr	r2, [pc, #552]	; (801c230 <problem_fetch+0x1ab48>)
 801c006:	8811      	ldrh	r1, [r2, #0]
 801c008:	7892      	ldrb	r2, [r2, #2]
 801c00a:	8019      	strh	r1, [r3, #0]
 801c00c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 5;
 801c00e:	687b      	ldr	r3, [r7, #4]
 801c010:	2205      	movs	r2, #5
 801c012:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,G,D,D,A");
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	33a4      	adds	r3, #164	; 0xa4
 801c018:	4986      	ldr	r1, [pc, #536]	; (801c234 <problem_fetch+0x1ab4c>)
 801c01a:	461a      	mov	r2, r3
 801c01c:	460b      	mov	r3, r1
 801c01e:	cb03      	ldmia	r3!, {r0, r1}
 801c020:	6010      	str	r0, [r2, #0]
 801c022:	6051      	str	r1, [r2, #4]
 801c024:	881b      	ldrh	r3, [r3, #0]
 801c026:	8113      	strh	r3, [r2, #8]
			strcpy(p->moveNumbers,"6,9,11,15,18");
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	3304      	adds	r3, #4
 801c02c:	4a82      	ldr	r2, [pc, #520]	; (801c238 <problem_fetch+0x1ab50>)
 801c02e:	461c      	mov	r4, r3
 801c030:	4613      	mov	r3, r2
 801c032:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c034:	6020      	str	r0, [r4, #0]
 801c036:	6061      	str	r1, [r4, #4]
 801c038:	60a2      	str	r2, [r4, #8]
 801c03a:	781b      	ldrb	r3, [r3, #0]
 801c03c:	7323      	strb	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,e");
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c044:	4978      	ldr	r1, [pc, #480]	; (801c228 <problem_fetch+0x1ab40>)
 801c046:	461a      	mov	r2, r3
 801c048:	460b      	mov	r3, r1
 801c04a:	cb03      	ldmia	r3!, {r0, r1}
 801c04c:	6010      	str	r0, [r2, #0]
 801c04e:	6051      	str	r1, [r2, #4]
 801c050:	881b      	ldrh	r3, [r3, #0]
 801c052:	8113      	strh	r3, [r2, #8]
			break;
 801c054:	e278      	b.n	801c548 <problem_fetch+0x1ae60>
		case 798 :
			strcpy(p->name,"GUNTER");
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c05c:	4a77      	ldr	r2, [pc, #476]	; (801c23c <problem_fetch+0x1ab54>)
 801c05e:	6810      	ldr	r0, [r2, #0]
 801c060:	6018      	str	r0, [r3, #0]
 801c062:	8891      	ldrh	r1, [r2, #4]
 801c064:	7992      	ldrb	r2, [r2, #6]
 801c066:	8099      	strh	r1, [r3, #4]
 801c068:	719a      	strb	r2, [r3, #6]
			strcpy(p->grade,"7A");
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c070:	4a73      	ldr	r2, [pc, #460]	; (801c240 <problem_fetch+0x1ab58>)
 801c072:	8811      	ldrh	r1, [r2, #0]
 801c074:	7892      	ldrb	r2, [r2, #2]
 801c076:	8019      	strh	r1, [r3, #0]
 801c078:	709a      	strb	r2, [r3, #2]
			p->moveSize = 6;
 801c07a:	687b      	ldr	r3, [r7, #4]
 801c07c:	2206      	movs	r2, #6
 801c07e:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,K,H,E,B,D");
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	33a4      	adds	r3, #164	; 0xa4
 801c084:	4a6f      	ldr	r2, [pc, #444]	; (801c244 <problem_fetch+0x1ab5c>)
 801c086:	461c      	mov	r4, r3
 801c088:	4613      	mov	r3, r2
 801c08a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c08c:	6020      	str	r0, [r4, #0]
 801c08e:	6061      	str	r1, [r4, #4]
 801c090:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"5,9,10,12,15,18");
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	3304      	adds	r3, #4
 801c096:	4a6c      	ldr	r2, [pc, #432]	; (801c248 <problem_fetch+0x1ab60>)
 801c098:	461c      	mov	r4, r3
 801c09a:	4615      	mov	r5, r2
 801c09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c09e:	6020      	str	r0, [r4, #0]
 801c0a0:	6061      	str	r1, [r4, #4]
 801c0a2:	60a2      	str	r2, [r4, #8]
 801c0a4:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c0ac:	4a67      	ldr	r2, [pc, #412]	; (801c24c <problem_fetch+0x1ab64>)
 801c0ae:	461c      	mov	r4, r3
 801c0b0:	4613      	mov	r3, r2
 801c0b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c0b4:	6020      	str	r0, [r4, #0]
 801c0b6:	6061      	str	r1, [r4, #4]
 801c0b8:	60a2      	str	r2, [r4, #8]
			break;
 801c0ba:	e245      	b.n	801c548 <problem_fetch+0x1ae60>
		case 799 :
			strcpy(p->name,"MAN WALKS DOWN THE STREET");
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c0c2:	4a63      	ldr	r2, [pc, #396]	; (801c250 <problem_fetch+0x1ab68>)
 801c0c4:	461d      	mov	r5, r3
 801c0c6:	4614      	mov	r4, r2
 801c0c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c0ca:	6028      	str	r0, [r5, #0]
 801c0cc:	6069      	str	r1, [r5, #4]
 801c0ce:	60aa      	str	r2, [r5, #8]
 801c0d0:	60eb      	str	r3, [r5, #12]
 801c0d2:	cc03      	ldmia	r4!, {r0, r1}
 801c0d4:	6128      	str	r0, [r5, #16]
 801c0d6:	6169      	str	r1, [r5, #20]
 801c0d8:	8823      	ldrh	r3, [r4, #0]
 801c0da:	832b      	strh	r3, [r5, #24]
			strcpy(p->grade,"6B+");
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c0e2:	4a5c      	ldr	r2, [pc, #368]	; (801c254 <problem_fetch+0x1ab6c>)
 801c0e4:	6810      	ldr	r0, [r2, #0]
 801c0e6:	6018      	str	r0, [r3, #0]
			p->moveSize = 8;
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	2208      	movs	r2, #8
 801c0ec:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,H,E,B,E,B,E,A");
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	33a4      	adds	r3, #164	; 0xa4
 801c0f2:	4a59      	ldr	r2, [pc, #356]	; (801c258 <problem_fetch+0x1ab70>)
 801c0f4:	461c      	mov	r4, r3
 801c0f6:	4615      	mov	r5, r2
 801c0f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c0fa:	6020      	str	r0, [r4, #0]
 801c0fc:	6061      	str	r1, [r4, #4]
 801c0fe:	60a2      	str	r2, [r4, #8]
 801c100:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,10,12,15,16,18");
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	3304      	adds	r3, #4
 801c106:	4a55      	ldr	r2, [pc, #340]	; (801c25c <problem_fetch+0x1ab74>)
 801c108:	461d      	mov	r5, r3
 801c10a:	4614      	mov	r4, r2
 801c10c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c10e:	6028      	str	r0, [r5, #0]
 801c110:	6069      	str	r1, [r5, #4]
 801c112:	60aa      	str	r2, [r5, #8]
 801c114:	60eb      	str	r3, [r5, #12]
 801c116:	6820      	ldr	r0, [r4, #0]
 801c118:	6128      	str	r0, [r5, #16]
 801c11a:	7923      	ldrb	r3, [r4, #4]
 801c11c:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,s,d,d,d,d,d,e");
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c124:	4a4e      	ldr	r2, [pc, #312]	; (801c260 <problem_fetch+0x1ab78>)
 801c126:	461c      	mov	r4, r3
 801c128:	4615      	mov	r5, r2
 801c12a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c12c:	6020      	str	r0, [r4, #0]
 801c12e:	6061      	str	r1, [r4, #4]
 801c130:	60a2      	str	r2, [r4, #8]
 801c132:	60e3      	str	r3, [r4, #12]
			break;
 801c134:	e208      	b.n	801c548 <problem_fetch+0x1ae60>
		case 800 :
			strcpy(p->name,"CHAD");
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c13c:	4a49      	ldr	r2, [pc, #292]	; (801c264 <problem_fetch+0x1ab7c>)
 801c13e:	6810      	ldr	r0, [r2, #0]
 801c140:	6018      	str	r0, [r3, #0]
 801c142:	7912      	ldrb	r2, [r2, #4]
 801c144:	711a      	strb	r2, [r3, #4]
			strcpy(p->grade,"7B+");
 801c146:	687b      	ldr	r3, [r7, #4]
 801c148:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c14c:	4a46      	ldr	r2, [pc, #280]	; (801c268 <problem_fetch+0x1ab80>)
 801c14e:	6810      	ldr	r0, [r2, #0]
 801c150:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	2207      	movs	r2, #7
 801c156:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,E,D");
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	33a4      	adds	r3, #164	; 0xa4
 801c15c:	4a43      	ldr	r2, [pc, #268]	; (801c26c <problem_fetch+0x1ab84>)
 801c15e:	461c      	mov	r4, r3
 801c160:	4613      	mov	r3, r2
 801c162:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c164:	6020      	str	r0, [r4, #0]
 801c166:	6061      	str	r1, [r4, #4]
 801c168:	60a2      	str	r2, [r4, #8]
 801c16a:	881b      	ldrh	r3, [r3, #0]
 801c16c:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,16,18");
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	3304      	adds	r3, #4
 801c172:	4a3f      	ldr	r2, [pc, #252]	; (801c270 <problem_fetch+0x1ab88>)
 801c174:	461d      	mov	r5, r3
 801c176:	4614      	mov	r4, r2
 801c178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c17a:	6028      	str	r0, [r5, #0]
 801c17c:	6069      	str	r1, [r5, #4]
 801c17e:	60aa      	str	r2, [r5, #8]
 801c180:	60eb      	str	r3, [r5, #12]
 801c182:	8823      	ldrh	r3, [r4, #0]
 801c184:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c18c:	4a39      	ldr	r2, [pc, #228]	; (801c274 <problem_fetch+0x1ab8c>)
 801c18e:	461c      	mov	r4, r3
 801c190:	4613      	mov	r3, r2
 801c192:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c194:	6020      	str	r0, [r4, #0]
 801c196:	6061      	str	r1, [r4, #4]
 801c198:	60a2      	str	r2, [r4, #8]
 801c19a:	881b      	ldrh	r3, [r3, #0]
 801c19c:	81a3      	strh	r3, [r4, #12]
			break;
 801c19e:	e1d3      	b.n	801c548 <problem_fetch+0x1ae60>
		case 801 :
			strcpy(p->name,"PROBLEM 19");
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c1a6:	4934      	ldr	r1, [pc, #208]	; (801c278 <problem_fetch+0x1ab90>)
 801c1a8:	461a      	mov	r2, r3
 801c1aa:	460b      	mov	r3, r1
 801c1ac:	cb03      	ldmia	r3!, {r0, r1}
 801c1ae:	6010      	str	r0, [r2, #0]
 801c1b0:	6051      	str	r1, [r2, #4]
 801c1b2:	8819      	ldrh	r1, [r3, #0]
 801c1b4:	789b      	ldrb	r3, [r3, #2]
 801c1b6:	8111      	strh	r1, [r2, #8]
 801c1b8:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"6C");
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c1c0:	4a2e      	ldr	r2, [pc, #184]	; (801c27c <problem_fetch+0x1ab94>)
 801c1c2:	8811      	ldrh	r1, [r2, #0]
 801c1c4:	7892      	ldrb	r2, [r2, #2]
 801c1c6:	8019      	strh	r1, [r3, #0]
 801c1c8:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	2207      	movs	r2, #7
 801c1ce:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"J,D,E,F,G,H,A");
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	33a4      	adds	r3, #164	; 0xa4
 801c1d4:	4a2a      	ldr	r2, [pc, #168]	; (801c280 <problem_fetch+0x1ab98>)
 801c1d6:	461c      	mov	r4, r3
 801c1d8:	4613      	mov	r3, r2
 801c1da:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c1dc:	6020      	str	r0, [r4, #0]
 801c1de:	6061      	str	r1, [r4, #4]
 801c1e0:	60a2      	str	r2, [r4, #8]
 801c1e2:	881b      	ldrh	r3, [r3, #0]
 801c1e4:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,15,12,11,9,8,18");
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	3304      	adds	r3, #4
 801c1ea:	4a26      	ldr	r2, [pc, #152]	; (801c284 <problem_fetch+0x1ab9c>)
 801c1ec:	461d      	mov	r5, r3
 801c1ee:	4614      	mov	r4, r2
 801c1f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c1f2:	6028      	str	r0, [r5, #0]
 801c1f4:	6069      	str	r1, [r5, #4]
 801c1f6:	60aa      	str	r2, [r5, #8]
 801c1f8:	60eb      	str	r3, [r5, #12]
 801c1fa:	8823      	ldrh	r3, [r4, #0]
 801c1fc:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c204:	4a1b      	ldr	r2, [pc, #108]	; (801c274 <problem_fetch+0x1ab8c>)
 801c206:	461c      	mov	r4, r3
 801c208:	4613      	mov	r3, r2
 801c20a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c20c:	6020      	str	r0, [r4, #0]
 801c20e:	6061      	str	r1, [r4, #4]
 801c210:	60a2      	str	r2, [r4, #8]
 801c212:	881b      	ldrh	r3, [r3, #0]
 801c214:	81a3      	strh	r3, [r4, #12]
			break;
 801c216:	e197      	b.n	801c548 <problem_fetch+0x1ae60>
 801c218:	0802cd7c 	.word	0x0802cd7c
 801c21c:	08024190 	.word	0x08024190
 801c220:	0802cd84 	.word	0x0802cd84
 801c224:	0802cd90 	.word	0x0802cd90
 801c228:	08023e28 	.word	0x08023e28
 801c22c:	0802cda0 	.word	0x0802cda0
 801c230:	08024054 	.word	0x08024054
 801c234:	0802cdac 	.word	0x0802cdac
 801c238:	0802cdb8 	.word	0x0802cdb8
 801c23c:	0802cdc8 	.word	0x0802cdc8
 801c240:	0802391c 	.word	0x0802391c
 801c244:	0802cdd0 	.word	0x0802cdd0
 801c248:	0802cddc 	.word	0x0802cddc
 801c24c:	08023cf8 	.word	0x08023cf8
 801c250:	0802cdec 	.word	0x0802cdec
 801c254:	0802395c 	.word	0x0802395c
 801c258:	0802ce08 	.word	0x0802ce08
 801c25c:	0802ce18 	.word	0x0802ce18
 801c260:	08023a80 	.word	0x08023a80
 801c264:	0802ce30 	.word	0x0802ce30
 801c268:	08023a98 	.word	0x08023a98
 801c26c:	0802ce38 	.word	0x0802ce38
 801c270:	0802ce48 	.word	0x0802ce48
 801c274:	08023ae4 	.word	0x08023ae4
 801c278:	0802ce5c 	.word	0x0802ce5c
 801c27c:	08023a28 	.word	0x08023a28
 801c280:	0802ce68 	.word	0x0802ce68
 801c284:	0802ce78 	.word	0x0802ce78
		case 802 :
			strcpy(p->name,"PROBLEM 17");
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c28e:	49b0      	ldr	r1, [pc, #704]	; (801c550 <problem_fetch+0x1ae68>)
 801c290:	461a      	mov	r2, r3
 801c292:	460b      	mov	r3, r1
 801c294:	cb03      	ldmia	r3!, {r0, r1}
 801c296:	6010      	str	r0, [r2, #0]
 801c298:	6051      	str	r1, [r2, #4]
 801c29a:	8819      	ldrh	r1, [r3, #0]
 801c29c:	789b      	ldrb	r3, [r3, #2]
 801c29e:	8111      	strh	r1, [r2, #8]
 801c2a0:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c2a8:	4aaa      	ldr	r2, [pc, #680]	; (801c554 <problem_fetch+0x1ae6c>)
 801c2aa:	8811      	ldrh	r1, [r2, #0]
 801c2ac:	7892      	ldrb	r2, [r2, #2]
 801c2ae:	8019      	strh	r1, [r3, #0]
 801c2b0:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	2207      	movs	r2, #7
 801c2b6:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"H,B,E,E,G,C,A");
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	33a4      	adds	r3, #164	; 0xa4
 801c2bc:	4aa6      	ldr	r2, [pc, #664]	; (801c558 <problem_fetch+0x1ae70>)
 801c2be:	461c      	mov	r4, r3
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2c4:	6020      	str	r0, [r4, #0]
 801c2c6:	6061      	str	r1, [r4, #4]
 801c2c8:	60a2      	str	r2, [r4, #8]
 801c2ca:	881b      	ldrh	r3, [r3, #0]
 801c2cc:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,9,12,15,16,18");
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	3304      	adds	r3, #4
 801c2d2:	4aa2      	ldr	r2, [pc, #648]	; (801c55c <problem_fetch+0x1ae74>)
 801c2d4:	461d      	mov	r5, r3
 801c2d6:	4614      	mov	r4, r2
 801c2d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c2da:	6028      	str	r0, [r5, #0]
 801c2dc:	6069      	str	r1, [r5, #4]
 801c2de:	60aa      	str	r2, [r5, #8]
 801c2e0:	60eb      	str	r3, [r5, #12]
 801c2e2:	8823      	ldrh	r3, [r4, #0]
 801c2e4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,d,d,d,d,d,e");
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c2ec:	4a9c      	ldr	r2, [pc, #624]	; (801c560 <problem_fetch+0x1ae78>)
 801c2ee:	461c      	mov	r4, r3
 801c2f0:	4613      	mov	r3, r2
 801c2f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c2f4:	6020      	str	r0, [r4, #0]
 801c2f6:	6061      	str	r1, [r4, #4]
 801c2f8:	60a2      	str	r2, [r4, #8]
 801c2fa:	881b      	ldrh	r3, [r3, #0]
 801c2fc:	81a3      	strh	r3, [r4, #12]
			break;
 801c2fe:	e123      	b.n	801c548 <problem_fetch+0x1ae60>
		case 803 :
			strcpy(p->name,"PROBLEM 12");
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c306:	4997      	ldr	r1, [pc, #604]	; (801c564 <problem_fetch+0x1ae7c>)
 801c308:	461a      	mov	r2, r3
 801c30a:	460b      	mov	r3, r1
 801c30c:	cb03      	ldmia	r3!, {r0, r1}
 801c30e:	6010      	str	r0, [r2, #0]
 801c310:	6051      	str	r1, [r2, #4]
 801c312:	8819      	ldrh	r1, [r3, #0]
 801c314:	789b      	ldrb	r3, [r3, #2]
 801c316:	8111      	strh	r1, [r2, #8]
 801c318:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A+");
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c320:	4a91      	ldr	r2, [pc, #580]	; (801c568 <problem_fetch+0x1ae80>)
 801c322:	6810      	ldr	r0, [r2, #0]
 801c324:	6018      	str	r0, [r3, #0]
			p->moveSize = 6;
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	2206      	movs	r2, #6
 801c32a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"G,K,H,G,B,A");
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	33a4      	adds	r3, #164	; 0xa4
 801c330:	4a8e      	ldr	r2, [pc, #568]	; (801c56c <problem_fetch+0x1ae84>)
 801c332:	461c      	mov	r4, r3
 801c334:	4613      	mov	r3, r2
 801c336:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c338:	6020      	str	r0, [r4, #0]
 801c33a:	6061      	str	r1, [r4, #4]
 801c33c:	60a2      	str	r2, [r4, #8]
			strcpy(p->moveNumbers,"6,9,12,14,15,18");
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	3304      	adds	r3, #4
 801c342:	4a8b      	ldr	r2, [pc, #556]	; (801c570 <problem_fetch+0x1ae88>)
 801c344:	461c      	mov	r4, r3
 801c346:	4615      	mov	r5, r2
 801c348:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c34a:	6020      	str	r0, [r4, #0]
 801c34c:	6061      	str	r1, [r4, #4]
 801c34e:	60a2      	str	r2, [r4, #8]
 801c350:	60e3      	str	r3, [r4, #12]
			strcpy(p->startFinish,"s,d,d,d,d,e");
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c358:	4a86      	ldr	r2, [pc, #536]	; (801c574 <problem_fetch+0x1ae8c>)
 801c35a:	461c      	mov	r4, r3
 801c35c:	4613      	mov	r3, r2
 801c35e:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c360:	6020      	str	r0, [r4, #0]
 801c362:	6061      	str	r1, [r4, #4]
 801c364:	60a2      	str	r2, [r4, #8]
			break;
 801c366:	e0ef      	b.n	801c548 <problem_fetch+0x1ae60>
		case 804 :
			strcpy(p->name,"PROBLEM 11");
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c36e:	4982      	ldr	r1, [pc, #520]	; (801c578 <problem_fetch+0x1ae90>)
 801c370:	461a      	mov	r2, r3
 801c372:	460b      	mov	r3, r1
 801c374:	cb03      	ldmia	r3!, {r0, r1}
 801c376:	6010      	str	r0, [r2, #0]
 801c378:	6051      	str	r1, [r2, #4]
 801c37a:	8819      	ldrh	r1, [r3, #0]
 801c37c:	789b      	ldrb	r3, [r3, #2]
 801c37e:	8111      	strh	r1, [r2, #8]
 801c380:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c388:	4a72      	ldr	r2, [pc, #456]	; (801c554 <problem_fetch+0x1ae6c>)
 801c38a:	8811      	ldrh	r1, [r2, #0]
 801c38c:	7892      	ldrb	r2, [r2, #2]
 801c38e:	8019      	strh	r1, [r3, #0]
 801c390:	709a      	strb	r2, [r3, #2]
			p->moveSize = 7;
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	2207      	movs	r2, #7
 801c396:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,B,E,B,E,E,I");
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	33a4      	adds	r3, #164	; 0xa4
 801c39c:	4a77      	ldr	r2, [pc, #476]	; (801c57c <problem_fetch+0x1ae94>)
 801c39e:	461c      	mov	r4, r3
 801c3a0:	4613      	mov	r3, r2
 801c3a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c3a4:	6020      	str	r0, [r4, #0]
 801c3a6:	6061      	str	r1, [r4, #4]
 801c3a8:	60a2      	str	r2, [r4, #8]
 801c3aa:	881b      	ldrh	r3, [r3, #0]
 801c3ac:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,6,8,10,14,16,18");
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	3304      	adds	r3, #4
 801c3b2:	4a73      	ldr	r2, [pc, #460]	; (801c580 <problem_fetch+0x1ae98>)
 801c3b4:	461d      	mov	r5, r3
 801c3b6:	4614      	mov	r4, r2
 801c3b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c3ba:	6028      	str	r0, [r5, #0]
 801c3bc:	6069      	str	r1, [r5, #4]
 801c3be:	60aa      	str	r2, [r5, #8]
 801c3c0:	60eb      	str	r3, [r5, #12]
 801c3c2:	8823      	ldrh	r3, [r4, #0]
 801c3c4:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c3cc:	4a6d      	ldr	r2, [pc, #436]	; (801c584 <problem_fetch+0x1ae9c>)
 801c3ce:	461c      	mov	r4, r3
 801c3d0:	4613      	mov	r3, r2
 801c3d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c3d4:	6020      	str	r0, [r4, #0]
 801c3d6:	6061      	str	r1, [r4, #4]
 801c3d8:	60a2      	str	r2, [r4, #8]
 801c3da:	881b      	ldrh	r3, [r3, #0]
 801c3dc:	81a3      	strh	r3, [r4, #12]
			break;
 801c3de:	e0b3      	b.n	801c548 <problem_fetch+0x1ae60>
		case 805 :
			strcpy(p->name,"PROBLEM 5");
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c3e6:	4968      	ldr	r1, [pc, #416]	; (801c588 <problem_fetch+0x1aea0>)
 801c3e8:	461a      	mov	r2, r3
 801c3ea:	460b      	mov	r3, r1
 801c3ec:	cb03      	ldmia	r3!, {r0, r1}
 801c3ee:	6010      	str	r0, [r2, #0]
 801c3f0:	6051      	str	r1, [r2, #4]
 801c3f2:	881b      	ldrh	r3, [r3, #0]
 801c3f4:	8113      	strh	r3, [r2, #8]
			strcpy(p->grade,"7A");
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c3fc:	4a55      	ldr	r2, [pc, #340]	; (801c554 <problem_fetch+0x1ae6c>)
 801c3fe:	8811      	ldrh	r1, [r2, #0]
 801c400:	7892      	ldrb	r2, [r2, #2]
 801c402:	8019      	strh	r1, [r3, #0]
 801c404:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	2208      	movs	r2, #8
 801c40a:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"C,D,A,F,F,I,E,D");
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	33a4      	adds	r3, #164	; 0xa4
 801c410:	4a5e      	ldr	r2, [pc, #376]	; (801c58c <problem_fetch+0x1aea4>)
 801c412:	461c      	mov	r4, r3
 801c414:	4615      	mov	r5, r2
 801c416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c418:	6020      	str	r0, [r4, #0]
 801c41a:	6061      	str	r1, [r4, #4]
 801c41c:	60a2      	str	r2, [r4, #8]
 801c41e:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"5,7,9,11,13,14,16,18");
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	3304      	adds	r3, #4
 801c424:	4a5a      	ldr	r2, [pc, #360]	; (801c590 <problem_fetch+0x1aea8>)
 801c426:	461d      	mov	r5, r3
 801c428:	4614      	mov	r4, r2
 801c42a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c42c:	6028      	str	r0, [r5, #0]
 801c42e:	6069      	str	r1, [r5, #4]
 801c430:	60aa      	str	r2, [r5, #8]
 801c432:	60eb      	str	r3, [r5, #12]
 801c434:	6820      	ldr	r0, [r4, #0]
 801c436:	6128      	str	r0, [r5, #16]
 801c438:	7923      	ldrb	r3, [r4, #4]
 801c43a:	752b      	strb	r3, [r5, #20]
			strcpy(p->startFinish,"s,d,d,d,d,d,d,e");
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c442:	4a54      	ldr	r2, [pc, #336]	; (801c594 <problem_fetch+0x1aeac>)
 801c444:	461c      	mov	r4, r3
 801c446:	4615      	mov	r5, r2
 801c448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c44a:	6020      	str	r0, [r4, #0]
 801c44c:	6061      	str	r1, [r4, #4]
 801c44e:	60a2      	str	r2, [r4, #8]
 801c450:	60e3      	str	r3, [r4, #12]
			break;
 801c452:	e079      	b.n	801c548 <problem_fetch+0x1ae60>
		case 806 :
			strcpy(p->name,"HARD TIMES");
 801c454:	687b      	ldr	r3, [r7, #4]
 801c456:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c45a:	494f      	ldr	r1, [pc, #316]	; (801c598 <problem_fetch+0x1aeb0>)
 801c45c:	461a      	mov	r2, r3
 801c45e:	460b      	mov	r3, r1
 801c460:	cb03      	ldmia	r3!, {r0, r1}
 801c462:	6010      	str	r0, [r2, #0]
 801c464:	6051      	str	r1, [r2, #4]
 801c466:	8819      	ldrh	r1, [r3, #0]
 801c468:	789b      	ldrb	r3, [r3, #2]
 801c46a:	8111      	strh	r1, [r2, #8]
 801c46c:	7293      	strb	r3, [r2, #10]
			strcpy(p->grade,"7A");
 801c46e:	687b      	ldr	r3, [r7, #4]
 801c470:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c474:	4a37      	ldr	r2, [pc, #220]	; (801c554 <problem_fetch+0x1ae6c>)
 801c476:	8811      	ldrh	r1, [r2, #0]
 801c478:	7892      	ldrb	r2, [r2, #2]
 801c47a:	8019      	strh	r1, [r3, #0]
 801c47c:	709a      	strb	r2, [r3, #2]
			p->moveSize = 8;
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	2208      	movs	r2, #8
 801c482:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"B,E,E,E,E,G,I,J");
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	33a4      	adds	r3, #164	; 0xa4
 801c488:	4a44      	ldr	r2, [pc, #272]	; (801c59c <problem_fetch+0x1aeb4>)
 801c48a:	461c      	mov	r4, r3
 801c48c:	4615      	mov	r5, r2
 801c48e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c490:	6020      	str	r0, [r4, #0]
 801c492:	6061      	str	r1, [r4, #4]
 801c494:	60a2      	str	r2, [r4, #8]
 801c496:	60e3      	str	r3, [r4, #12]
			strcpy(p->moveNumbers,"10,6,8,12,16,4,18,5");
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	3304      	adds	r3, #4
 801c49c:	4a40      	ldr	r2, [pc, #256]	; (801c5a0 <problem_fetch+0x1aeb8>)
 801c49e:	461d      	mov	r5, r3
 801c4a0:	4614      	mov	r4, r2
 801c4a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4a4:	6028      	str	r0, [r5, #0]
 801c4a6:	6069      	str	r1, [r5, #4]
 801c4a8:	60aa      	str	r2, [r5, #8]
 801c4aa:	60eb      	str	r3, [r5, #12]
 801c4ac:	6820      	ldr	r0, [r4, #0]
 801c4ae:	6128      	str	r0, [r5, #16]
			strcpy(p->startFinish,"d,d,d,d,d,s,e,s");
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c4b6:	4a3b      	ldr	r2, [pc, #236]	; (801c5a4 <problem_fetch+0x1aebc>)
 801c4b8:	461c      	mov	r4, r3
 801c4ba:	4615      	mov	r5, r2
 801c4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c4be:	6020      	str	r0, [r4, #0]
 801c4c0:	6061      	str	r1, [r4, #4]
 801c4c2:	60a2      	str	r2, [r4, #8]
 801c4c4:	60e3      	str	r3, [r4, #12]
			break;
 801c4c6:	e03f      	b.n	801c548 <problem_fetch+0x1ae60>
		case 807 :
			strcpy(p->name,"FAR FROM THE MADDING CROWD");
 801c4c8:	687b      	ldr	r3, [r7, #4]
 801c4ca:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801c4ce:	4a36      	ldr	r2, [pc, #216]	; (801c5a8 <problem_fetch+0x1aec0>)
 801c4d0:	461d      	mov	r5, r3
 801c4d2:	4614      	mov	r4, r2
 801c4d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c4d6:	6028      	str	r0, [r5, #0]
 801c4d8:	6069      	str	r1, [r5, #4]
 801c4da:	60aa      	str	r2, [r5, #8]
 801c4dc:	60eb      	str	r3, [r5, #12]
 801c4de:	cc03      	ldmia	r4!, {r0, r1}
 801c4e0:	6128      	str	r0, [r5, #16]
 801c4e2:	6169      	str	r1, [r5, #20]
 801c4e4:	8823      	ldrh	r3, [r4, #0]
 801c4e6:	78a2      	ldrb	r2, [r4, #2]
 801c4e8:	832b      	strh	r3, [r5, #24]
 801c4ea:	4613      	mov	r3, r2
 801c4ec:	76ab      	strb	r3, [r5, #26]
			strcpy(p->grade,"6B+");
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801c4f4:	4a2d      	ldr	r2, [pc, #180]	; (801c5ac <problem_fetch+0x1aec4>)
 801c4f6:	6810      	ldr	r0, [r2, #0]
 801c4f8:	6018      	str	r0, [r3, #0]
			p->moveSize = 7;
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	2207      	movs	r2, #7
 801c4fe:	601a      	str	r2, [r3, #0]
			strcpy(p->moveLetters,"E,C,E,F,C,D,D");
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	33a4      	adds	r3, #164	; 0xa4
 801c504:	4a2a      	ldr	r2, [pc, #168]	; (801c5b0 <problem_fetch+0x1aec8>)
 801c506:	461c      	mov	r4, r3
 801c508:	4613      	mov	r3, r2
 801c50a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c50c:	6020      	str	r0, [r4, #0]
 801c50e:	6061      	str	r1, [r4, #4]
 801c510:	60a2      	str	r2, [r4, #8]
 801c512:	881b      	ldrh	r3, [r3, #0]
 801c514:	81a3      	strh	r3, [r4, #12]
			strcpy(p->moveNumbers,"6,5,8,11,13,15,18");
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	3304      	adds	r3, #4
 801c51a:	4a26      	ldr	r2, [pc, #152]	; (801c5b4 <problem_fetch+0x1aecc>)
 801c51c:	461d      	mov	r5, r3
 801c51e:	4614      	mov	r4, r2
 801c520:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c522:	6028      	str	r0, [r5, #0]
 801c524:	6069      	str	r1, [r5, #4]
 801c526:	60aa      	str	r2, [r5, #8]
 801c528:	60eb      	str	r3, [r5, #12]
 801c52a:	8823      	ldrh	r3, [r4, #0]
 801c52c:	822b      	strh	r3, [r5, #16]
			strcpy(p->startFinish,"s,s,d,d,d,d,e");
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f503 73d6 	add.w	r3, r3, #428	; 0x1ac
 801c534:	4a13      	ldr	r2, [pc, #76]	; (801c584 <problem_fetch+0x1ae9c>)
 801c536:	461c      	mov	r4, r3
 801c538:	4613      	mov	r3, r2
 801c53a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801c53c:	6020      	str	r0, [r4, #0]
 801c53e:	6061      	str	r1, [r4, #4]
 801c540:	60a2      	str	r2, [r4, #8]
 801c542:	881b      	ldrh	r3, [r3, #0]
 801c544:	81a3      	strh	r3, [r4, #12]
			break;
 801c546:	bf00      	nop
	}
}
 801c548:	bf00      	nop
 801c54a:	370c      	adds	r7, #12
 801c54c:	46bd      	mov	sp, r7
 801c54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c550:	0802ce8c 	.word	0x0802ce8c
 801c554:	0802391c 	.word	0x0802391c
 801c558:	0802ce98 	.word	0x0802ce98
 801c55c:	0802cea8 	.word	0x0802cea8
 801c560:	08023ae4 	.word	0x08023ae4
 801c564:	0802cebc 	.word	0x0802cebc
 801c568:	08023afc 	.word	0x08023afc
 801c56c:	0802cec8 	.word	0x0802cec8
 801c570:	0802ced4 	.word	0x0802ced4
 801c574:	08023cf8 	.word	0x08023cf8
 801c578:	0802cee4 	.word	0x0802cee4
 801c57c:	08028730 	.word	0x08028730
 801c580:	0802cef0 	.word	0x0802cef0
 801c584:	080239d4 	.word	0x080239d4
 801c588:	0802cf04 	.word	0x0802cf04
 801c58c:	0802cf10 	.word	0x0802cf10
 801c590:	0802cf20 	.word	0x0802cf20
 801c594:	08023b6c 	.word	0x08023b6c
 801c598:	0802cf38 	.word	0x0802cf38
 801c59c:	0802cf44 	.word	0x0802cf44
 801c5a0:	0802cf54 	.word	0x0802cf54
 801c5a4:	0802cf68 	.word	0x0802cf68
 801c5a8:	0802cf78 	.word	0x0802cf78
 801c5ac:	0802395c 	.word	0x0802395c
 801c5b0:	0802cf94 	.word	0x0802cf94
 801c5b4:	0802cfa4 	.word	0x0802cfa4

0801c5b8 <PRINTF>:
#include <string.h>
#include <stdio.h>



void PRINTF(char str[50]){
 801c5b8:	b580      	push	{r7, lr}
 801c5ba:	b090      	sub	sp, #64	; 0x40
 801c5bc:	af00      	add	r7, sp, #0
 801c5be:	6078      	str	r0, [r7, #4]
  char msg[50];
  int msg_len;
  msg_len = sprintf(msg, str);
 801c5c0:	f107 0308 	add.w	r3, r7, #8
 801c5c4:	6879      	ldr	r1, [r7, #4]
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	f005 fc64 	bl	8021e94 <siprintf>
 801c5cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
 801c5ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5d0:	b29a      	uxth	r2, r3
 801c5d2:	f107 0108 	add.w	r1, r7, #8
 801c5d6:	f241 3388 	movw	r3, #5000	; 0x1388
 801c5da:	4803      	ldr	r0, [pc, #12]	; (801c5e8 <PRINTF+0x30>)
 801c5dc:	f004 fcfd 	bl	8020fda <HAL_UART_Transmit>
}
 801c5e0:	bf00      	nop
 801c5e2:	3740      	adds	r7, #64	; 0x40
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}
 801c5e8:	20005518 	.word	0x20005518

0801c5ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b082      	sub	sp, #8
 801c5f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	607b      	str	r3, [r7, #4]
 801c5f6:	4b10      	ldr	r3, [pc, #64]	; (801c638 <MX_DMA_Init+0x4c>)
 801c5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c5fa:	4a0f      	ldr	r2, [pc, #60]	; (801c638 <MX_DMA_Init+0x4c>)
 801c5fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c600:	6313      	str	r3, [r2, #48]	; 0x30
 801c602:	4b0d      	ldr	r3, [pc, #52]	; (801c638 <MX_DMA_Init+0x4c>)
 801c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c60a:	607b      	str	r3, [r7, #4]
 801c60c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 801c60e:	2200      	movs	r2, #0
 801c610:	2100      	movs	r1, #0
 801c612:	200f      	movs	r0, #15
 801c614:	f001 fc93 	bl	801df3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 801c618:	200f      	movs	r0, #15
 801c61a:	f001 fcac 	bl	801df76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 801c61e:	2200      	movs	r2, #0
 801c620:	2100      	movs	r1, #0
 801c622:	2010      	movs	r0, #16
 801c624:	f001 fc8b 	bl	801df3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 801c628:	2010      	movs	r0, #16
 801c62a:	f001 fca4 	bl	801df76 <HAL_NVIC_EnableIRQ>

}
 801c62e:	bf00      	nop
 801c630:	3708      	adds	r7, #8
 801c632:	46bd      	mov	sp, r7
 801c634:	bd80      	pop	{r7, pc}
 801c636:	bf00      	nop
 801c638:	40023800 	.word	0x40023800

0801c63c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801c63c:	b580      	push	{r7, lr}
 801c63e:	b08a      	sub	sp, #40	; 0x28
 801c640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c642:	f107 0314 	add.w	r3, r7, #20
 801c646:	2200      	movs	r2, #0
 801c648:	601a      	str	r2, [r3, #0]
 801c64a:	605a      	str	r2, [r3, #4]
 801c64c:	609a      	str	r2, [r3, #8]
 801c64e:	60da      	str	r2, [r3, #12]
 801c650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801c652:	2300      	movs	r3, #0
 801c654:	613b      	str	r3, [r7, #16]
 801c656:	4b52      	ldr	r3, [pc, #328]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c65a:	4a51      	ldr	r2, [pc, #324]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c65c:	f043 0304 	orr.w	r3, r3, #4
 801c660:	6313      	str	r3, [r2, #48]	; 0x30
 801c662:	4b4f      	ldr	r3, [pc, #316]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c666:	f003 0304 	and.w	r3, r3, #4
 801c66a:	613b      	str	r3, [r7, #16]
 801c66c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801c66e:	2300      	movs	r3, #0
 801c670:	60fb      	str	r3, [r7, #12]
 801c672:	4b4b      	ldr	r3, [pc, #300]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c676:	4a4a      	ldr	r2, [pc, #296]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c67c:	6313      	str	r3, [r2, #48]	; 0x30
 801c67e:	4b48      	ldr	r3, [pc, #288]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c686:	60fb      	str	r3, [r7, #12]
 801c688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801c68a:	2300      	movs	r3, #0
 801c68c:	60bb      	str	r3, [r7, #8]
 801c68e:	4b44      	ldr	r3, [pc, #272]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c692:	4a43      	ldr	r2, [pc, #268]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c694:	f043 0301 	orr.w	r3, r3, #1
 801c698:	6313      	str	r3, [r2, #48]	; 0x30
 801c69a:	4b41      	ldr	r3, [pc, #260]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c69e:	f003 0301 	and.w	r3, r3, #1
 801c6a2:	60bb      	str	r3, [r7, #8]
 801c6a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801c6a6:	2300      	movs	r3, #0
 801c6a8:	607b      	str	r3, [r7, #4]
 801c6aa:	4b3d      	ldr	r3, [pc, #244]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ae:	4a3c      	ldr	r2, [pc, #240]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c6b0:	f043 0302 	orr.w	r3, r3, #2
 801c6b4:	6313      	str	r3, [r2, #48]	; 0x30
 801c6b6:	4b3a      	ldr	r3, [pc, #232]	; (801c7a0 <MX_GPIO_Init+0x164>)
 801c6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6ba:	f003 0302 	and.w	r3, r3, #2
 801c6be:	607b      	str	r3, [r7, #4]
 801c6c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c6c8:	4836      	ldr	r0, [pc, #216]	; (801c7a4 <MX_GPIO_Init+0x168>)
 801c6ca:	f002 f999 	bl	801ea00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801c6ce:	2200      	movs	r2, #0
 801c6d0:	2180      	movs	r1, #128	; 0x80
 801c6d2:	4835      	ldr	r0, [pc, #212]	; (801c7a8 <MX_GPIO_Init+0x16c>)
 801c6d4:	f002 f994 	bl	801ea00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 801c6d8:	2200      	movs	r2, #0
 801c6da:	f44f 7140 	mov.w	r1, #768	; 0x300
 801c6de:	4833      	ldr	r0, [pc, #204]	; (801c7ac <MX_GPIO_Init+0x170>)
 801c6e0:	f002 f98e 	bl	801ea00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 801c6e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c6e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801c6ea:	4b31      	ldr	r3, [pc, #196]	; (801c7b0 <MX_GPIO_Init+0x174>)
 801c6ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 801c6f2:	f107 0314 	add.w	r3, r7, #20
 801c6f6:	4619      	mov	r1, r3
 801c6f8:	482b      	ldr	r0, [pc, #172]	; (801c7a8 <MX_GPIO_Init+0x16c>)
 801c6fa:	f001 ffe7 	bl	801e6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 801c6fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801c702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c704:	2301      	movs	r3, #1
 801c706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c708:	2300      	movs	r3, #0
 801c70a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c70c:	2300      	movs	r3, #0
 801c70e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c710:	f107 0314 	add.w	r3, r7, #20
 801c714:	4619      	mov	r1, r3
 801c716:	4823      	ldr	r0, [pc, #140]	; (801c7a4 <MX_GPIO_Init+0x168>)
 801c718:	f001 ffd8 	bl	801e6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801c71c:	2380      	movs	r3, #128	; 0x80
 801c71e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c720:	2301      	movs	r3, #1
 801c722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c724:	2300      	movs	r3, #0
 801c726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c728:	2300      	movs	r3, #0
 801c72a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c72c:	f107 0314 	add.w	r3, r7, #20
 801c730:	4619      	mov	r1, r3
 801c732:	481d      	ldr	r0, [pc, #116]	; (801c7a8 <MX_GPIO_Init+0x16c>)
 801c734:	f001 ffca 	bl	801e6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801c738:	f44f 7340 	mov.w	r3, #768	; 0x300
 801c73c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801c73e:	2301      	movs	r3, #1
 801c740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c742:	2300      	movs	r3, #0
 801c744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c746:	2300      	movs	r3, #0
 801c748:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c74a:	f107 0314 	add.w	r3, r7, #20
 801c74e:	4619      	mov	r1, r3
 801c750:	4816      	ldr	r0, [pc, #88]	; (801c7ac <MX_GPIO_Init+0x170>)
 801c752:	f001 ffbb 	bl	801e6cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 801c756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c75a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c75c:	2300      	movs	r3, #0
 801c75e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c760:	2301      	movs	r3, #1
 801c762:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c764:	f107 0314 	add.w	r3, r7, #20
 801c768:	4619      	mov	r1, r3
 801c76a:	4810      	ldr	r0, [pc, #64]	; (801c7ac <MX_GPIO_Init+0x170>)
 801c76c:	f001 ffae 	bl	801e6cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 801c770:	2338      	movs	r3, #56	; 0x38
 801c772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c774:	2300      	movs	r3, #0
 801c776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c778:	2301      	movs	r3, #1
 801c77a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c77c:	f107 0314 	add.w	r3, r7, #20
 801c780:	4619      	mov	r1, r3
 801c782:	4808      	ldr	r0, [pc, #32]	; (801c7a4 <MX_GPIO_Init+0x168>)
 801c784:	f001 ffa2 	bl	801e6cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 801c788:	2200      	movs	r2, #0
 801c78a:	2100      	movs	r1, #0
 801c78c:	2028      	movs	r0, #40	; 0x28
 801c78e:	f001 fbd6 	bl	801df3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801c792:	2028      	movs	r0, #40	; 0x28
 801c794:	f001 fbef 	bl	801df76 <HAL_NVIC_EnableIRQ>

}
 801c798:	bf00      	nop
 801c79a:	3728      	adds	r7, #40	; 0x28
 801c79c:	46bd      	mov	sp, r7
 801c79e:	bd80      	pop	{r7, pc}
 801c7a0:	40023800 	.word	0x40023800
 801c7a4:	40020400 	.word	0x40020400
 801c7a8:	40020800 	.word	0x40020800
 801c7ac:	40020000 	.word	0x40020000
 801c7b0:	10210000 	.word	0x10210000

0801c7b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801c7b4:	b580      	push	{r7, lr}
 801c7b6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 801c7b8:	4b12      	ldr	r3, [pc, #72]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7ba:	4a13      	ldr	r2, [pc, #76]	; (801c808 <MX_I2C1_Init+0x54>)
 801c7bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 801c7be:	4b11      	ldr	r3, [pc, #68]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7c0:	4a12      	ldr	r2, [pc, #72]	; (801c80c <MX_I2C1_Init+0x58>)
 801c7c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 801c7c4:	4b0f      	ldr	r3, [pc, #60]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7c6:	2200      	movs	r2, #0
 801c7c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 801c7ca:	4b0e      	ldr	r3, [pc, #56]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c7d0:	4b0c      	ldr	r3, [pc, #48]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801c7d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c7d8:	4b0a      	ldr	r3, [pc, #40]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7da:	2200      	movs	r2, #0
 801c7dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 801c7de:	4b09      	ldr	r3, [pc, #36]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c7e4:	4b07      	ldr	r3, [pc, #28]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7e6:	2200      	movs	r2, #0
 801c7e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c7ea:	4b06      	ldr	r3, [pc, #24]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7ec:	2200      	movs	r2, #0
 801c7ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801c7f0:	4804      	ldr	r0, [pc, #16]	; (801c804 <MX_I2C1_Init+0x50>)
 801c7f2:	f002 f937 	bl	801ea64 <HAL_I2C_Init>
 801c7f6:	4603      	mov	r3, r0
 801c7f8:	2b00      	cmp	r3, #0
 801c7fa:	d001      	beq.n	801c800 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 801c7fc:	f000 fe38 	bl	801d470 <Error_Handler>
  }

}
 801c800:	bf00      	nop
 801c802:	bd80      	pop	{r7, pc}
 801c804:	20005344 	.word	0x20005344
 801c808:	40005400 	.word	0x40005400
 801c80c:	000186a0 	.word	0x000186a0

0801c810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c810:	b580      	push	{r7, lr}
 801c812:	b08a      	sub	sp, #40	; 0x28
 801c814:	af00      	add	r7, sp, #0
 801c816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c818:	f107 0314 	add.w	r3, r7, #20
 801c81c:	2200      	movs	r2, #0
 801c81e:	601a      	str	r2, [r3, #0]
 801c820:	605a      	str	r2, [r3, #4]
 801c822:	609a      	str	r2, [r3, #8]
 801c824:	60da      	str	r2, [r3, #12]
 801c826:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	4a19      	ldr	r2, [pc, #100]	; (801c894 <HAL_I2C_MspInit+0x84>)
 801c82e:	4293      	cmp	r3, r2
 801c830:	d12b      	bne.n	801c88a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801c832:	2300      	movs	r3, #0
 801c834:	613b      	str	r3, [r7, #16]
 801c836:	4b18      	ldr	r3, [pc, #96]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c83a:	4a17      	ldr	r2, [pc, #92]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c83c:	f043 0302 	orr.w	r3, r3, #2
 801c840:	6313      	str	r3, [r2, #48]	; 0x30
 801c842:	4b15      	ldr	r3, [pc, #84]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c846:	f003 0302 	and.w	r3, r3, #2
 801c84a:	613b      	str	r3, [r7, #16]
 801c84c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801c84e:	23c0      	movs	r3, #192	; 0xc0
 801c850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c852:	2312      	movs	r3, #18
 801c854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c856:	2301      	movs	r3, #1
 801c858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c85a:	2303      	movs	r3, #3
 801c85c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c85e:	2304      	movs	r3, #4
 801c860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c862:	f107 0314 	add.w	r3, r7, #20
 801c866:	4619      	mov	r1, r3
 801c868:	480c      	ldr	r0, [pc, #48]	; (801c89c <HAL_I2C_MspInit+0x8c>)
 801c86a:	f001 ff2f 	bl	801e6cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801c86e:	2300      	movs	r3, #0
 801c870:	60fb      	str	r3, [r7, #12]
 801c872:	4b09      	ldr	r3, [pc, #36]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c876:	4a08      	ldr	r2, [pc, #32]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c878:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c87c:	6413      	str	r3, [r2, #64]	; 0x40
 801c87e:	4b06      	ldr	r3, [pc, #24]	; (801c898 <HAL_I2C_MspInit+0x88>)
 801c880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c886:	60fb      	str	r3, [r7, #12]
 801c888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801c88a:	bf00      	nop
 801c88c:	3728      	adds	r7, #40	; 0x28
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}
 801c892:	bf00      	nop
 801c894:	40005400 	.word	0x40005400
 801c898:	40023800 	.word	0x40023800
 801c89c:	40020400 	.word	0x40020400

0801c8a0 <read_GPIO>:

//#define debug_output



uint8_t read_GPIO(){
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4)){			// if GPIO is low
 801c8a4:	2110      	movs	r1, #16
 801c8a6:	4824      	ldr	r0, [pc, #144]	; (801c938 <read_GPIO+0x98>)
 801c8a8:	f002 f892 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c8ac:	4603      	mov	r3, r0
 801c8ae:	2b00      	cmp	r3, #0
 801c8b0:	d109      	bne.n	801c8c6 <read_GPIO+0x26>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4));	// wait till GPIO return high
 801c8b2:	bf00      	nop
 801c8b4:	2110      	movs	r1, #16
 801c8b6:	4820      	ldr	r0, [pc, #128]	; (801c938 <read_GPIO+0x98>)
 801c8b8:	f002 f88a 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c8bc:	4603      	mov	r3, r0
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d0f8      	beq.n	801c8b4 <read_GPIO+0x14>
		return 1;
 801c8c2:	2301      	movs	r3, #1
 801c8c4:	e035      	b.n	801c932 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)){
 801c8c6:	2120      	movs	r1, #32
 801c8c8:	481b      	ldr	r0, [pc, #108]	; (801c938 <read_GPIO+0x98>)
 801c8ca:	f002 f881 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c8ce:	4603      	mov	r3, r0
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d109      	bne.n	801c8e8 <read_GPIO+0x48>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5));
 801c8d4:	bf00      	nop
 801c8d6:	2120      	movs	r1, #32
 801c8d8:	4817      	ldr	r0, [pc, #92]	; (801c938 <read_GPIO+0x98>)
 801c8da:	f002 f879 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c8de:	4603      	mov	r3, r0
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d0f8      	beq.n	801c8d6 <read_GPIO+0x36>
		return 2;
 801c8e4:	2302      	movs	r3, #2
 801c8e6:	e024      	b.n	801c932 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3)){
 801c8e8:	2108      	movs	r1, #8
 801c8ea:	4813      	ldr	r0, [pc, #76]	; (801c938 <read_GPIO+0x98>)
 801c8ec:	f002 f870 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c8f0:	4603      	mov	r3, r0
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d109      	bne.n	801c90a <read_GPIO+0x6a>
		while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3));
 801c8f6:	bf00      	nop
 801c8f8:	2108      	movs	r1, #8
 801c8fa:	480f      	ldr	r0, [pc, #60]	; (801c938 <read_GPIO+0x98>)
 801c8fc:	f002 f868 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c900:	4603      	mov	r3, r0
 801c902:	2b00      	cmp	r3, #0
 801c904:	d0f8      	beq.n	801c8f8 <read_GPIO+0x58>
		return 3;
 801c906:	2303      	movs	r3, #3
 801c908:	e013      	b.n	801c932 <read_GPIO+0x92>
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 801c90a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c90e:	480b      	ldr	r0, [pc, #44]	; (801c93c <read_GPIO+0x9c>)
 801c910:	f002 f85e 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c914:	4603      	mov	r3, r0
 801c916:	2b00      	cmp	r3, #0
 801c918:	d10a      	bne.n	801c930 <read_GPIO+0x90>
		while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10));
 801c91a:	bf00      	nop
 801c91c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c920:	4806      	ldr	r0, [pc, #24]	; (801c93c <read_GPIO+0x9c>)
 801c922:	f002 f855 	bl	801e9d0 <HAL_GPIO_ReadPin>
 801c926:	4603      	mov	r3, r0
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d0f7      	beq.n	801c91c <read_GPIO+0x7c>
		return 4;
 801c92c:	2304      	movs	r3, #4
 801c92e:	e000      	b.n	801c932 <read_GPIO+0x92>
	}

	return 99;
 801c930:	2363      	movs	r3, #99	; 0x63
}
 801c932:	4618      	mov	r0, r3
 801c934:	bd80      	pop	{r7, pc}
 801c936:	bf00      	nop
 801c938:	40020400 	.word	0x40020400
 801c93c:	40020000 	.word	0x40020000

0801c940 <write_GPIO>:



void write_GPIO(uint8_t riga){
 801c940:	b580      	push	{r7, lr}
 801c942:	b084      	sub	sp, #16
 801c944:	af00      	add	r7, sp, #0
 801c946:	4603      	mov	r3, r0
 801c948:	71fb      	strb	r3, [r7, #7]

	GPIO_PinState state_row1 = GPIO_PIN_SET;
 801c94a:	2301      	movs	r3, #1
 801c94c:	73fb      	strb	r3, [r7, #15]
	GPIO_PinState state_row2 = GPIO_PIN_SET;
 801c94e:	2301      	movs	r3, #1
 801c950:	73bb      	strb	r3, [r7, #14]
	GPIO_PinState state_row3 = GPIO_PIN_SET;
 801c952:	2301      	movs	r3, #1
 801c954:	737b      	strb	r3, [r7, #13]
	GPIO_PinState state_row4 = GPIO_PIN_SET;
 801c956:	2301      	movs	r3, #1
 801c958:	733b      	strb	r3, [r7, #12]

	if(riga==1){
 801c95a:	79fb      	ldrb	r3, [r7, #7]
 801c95c:	2b01      	cmp	r3, #1
 801c95e:	d102      	bne.n	801c966 <write_GPIO+0x26>
		state_row1 = GPIO_PIN_RESET;
 801c960:	2300      	movs	r3, #0
 801c962:	73fb      	strb	r3, [r7, #15]
 801c964:	e010      	b.n	801c988 <write_GPIO+0x48>
	}else if(riga==2){
 801c966:	79fb      	ldrb	r3, [r7, #7]
 801c968:	2b02      	cmp	r3, #2
 801c96a:	d102      	bne.n	801c972 <write_GPIO+0x32>
		state_row2 = GPIO_PIN_RESET;
 801c96c:	2300      	movs	r3, #0
 801c96e:	73bb      	strb	r3, [r7, #14]
 801c970:	e00a      	b.n	801c988 <write_GPIO+0x48>
	}else if(riga==3){
 801c972:	79fb      	ldrb	r3, [r7, #7]
 801c974:	2b03      	cmp	r3, #3
 801c976:	d102      	bne.n	801c97e <write_GPIO+0x3e>
		state_row3 = GPIO_PIN_RESET;
 801c978:	2300      	movs	r3, #0
 801c97a:	737b      	strb	r3, [r7, #13]
 801c97c:	e004      	b.n	801c988 <write_GPIO+0x48>
	}else if(riga==4){
 801c97e:	79fb      	ldrb	r3, [r7, #7]
 801c980:	2b04      	cmp	r3, #4
 801c982:	d101      	bne.n	801c988 <write_GPIO+0x48>
		state_row4 = GPIO_PIN_RESET;
 801c984:	2300      	movs	r3, #0
 801c986:	733b      	strb	r3, [r7, #12]
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, state_row1);
 801c988:	7bfb      	ldrb	r3, [r7, #15]
 801c98a:	461a      	mov	r2, r3
 801c98c:	2180      	movs	r1, #128	; 0x80
 801c98e:	480e      	ldr	r0, [pc, #56]	; (801c9c8 <write_GPIO+0x88>)
 801c990:	f002 f836 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, state_row2);
 801c994:	7bbb      	ldrb	r3, [r7, #14]
 801c996:	461a      	mov	r2, r3
 801c998:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c99c:	480b      	ldr	r0, [pc, #44]	; (801c9cc <write_GPIO+0x8c>)
 801c99e:	f002 f82f 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, state_row3);
 801c9a2:	7b7b      	ldrb	r3, [r7, #13]
 801c9a4:	461a      	mov	r2, r3
 801c9a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801c9aa:	4808      	ldr	r0, [pc, #32]	; (801c9cc <write_GPIO+0x8c>)
 801c9ac:	f002 f828 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, state_row4);
 801c9b0:	7b3b      	ldrb	r3, [r7, #12]
 801c9b2:	461a      	mov	r2, r3
 801c9b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c9b8:	4805      	ldr	r0, [pc, #20]	; (801c9d0 <write_GPIO+0x90>)
 801c9ba:	f002 f821 	bl	801ea00 <HAL_GPIO_WritePin>
}
 801c9be:	bf00      	nop
 801c9c0:	3710      	adds	r7, #16
 801c9c2:	46bd      	mov	sp, r7
 801c9c4:	bd80      	pop	{r7, pc}
 801c9c6:	bf00      	nop
 801c9c8:	40020800 	.word	0x40020800
 801c9cc:	40020000 	.word	0x40020000
 801c9d0:	40020400 	.word	0x40020400

0801c9d4 <decode_key>:



uint8_t decode_key(uint8_t row, uint8_t col){
 801c9d4:	b480      	push	{r7}
 801c9d6:	b085      	sub	sp, #20
 801c9d8:	af00      	add	r7, sp, #0
 801c9da:	4603      	mov	r3, r0
 801c9dc:	460a      	mov	r2, r1
 801c9de:	71fb      	strb	r3, [r7, #7]
 801c9e0:	4613      	mov	r3, r2
 801c9e2:	71bb      	strb	r3, [r7, #6]
	uint8_t key;

	switch(row){
 801c9e4:	79fb      	ldrb	r3, [r7, #7]
 801c9e6:	3b01      	subs	r3, #1
 801c9e8:	2b03      	cmp	r3, #3
 801c9ea:	d85f      	bhi.n	801caac <decode_key+0xd8>
 801c9ec:	a201      	add	r2, pc, #4	; (adr r2, 801c9f4 <decode_key+0x20>)
 801c9ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c9f2:	bf00      	nop
 801c9f4:	0801ca05 	.word	0x0801ca05
 801c9f8:	0801ca2f 	.word	0x0801ca2f
 801c9fc:	0801ca59 	.word	0x0801ca59
 801ca00:	0801ca83 	.word	0x0801ca83
		case(1):
			if (col==1) key=1;
 801ca04:	79bb      	ldrb	r3, [r7, #6]
 801ca06:	2b01      	cmp	r3, #1
 801ca08:	d101      	bne.n	801ca0e <decode_key+0x3a>
 801ca0a:	2301      	movs	r3, #1
 801ca0c:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=2;
 801ca0e:	79bb      	ldrb	r3, [r7, #6]
 801ca10:	2b02      	cmp	r3, #2
 801ca12:	d101      	bne.n	801ca18 <decode_key+0x44>
 801ca14:	2302      	movs	r3, #2
 801ca16:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=3;
 801ca18:	79bb      	ldrb	r3, [r7, #6]
 801ca1a:	2b03      	cmp	r3, #3
 801ca1c:	d101      	bne.n	801ca22 <decode_key+0x4e>
 801ca1e:	2303      	movs	r3, #3
 801ca20:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=10;
 801ca22:	79bb      	ldrb	r3, [r7, #6]
 801ca24:	2b04      	cmp	r3, #4
 801ca26:	d144      	bne.n	801cab2 <decode_key+0xde>
 801ca28:	230a      	movs	r3, #10
 801ca2a:	73fb      	strb	r3, [r7, #15]
			break;
 801ca2c:	e041      	b.n	801cab2 <decode_key+0xde>
		case(2):
			if (col==1) key=4;
 801ca2e:	79bb      	ldrb	r3, [r7, #6]
 801ca30:	2b01      	cmp	r3, #1
 801ca32:	d101      	bne.n	801ca38 <decode_key+0x64>
 801ca34:	2304      	movs	r3, #4
 801ca36:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=5;
 801ca38:	79bb      	ldrb	r3, [r7, #6]
 801ca3a:	2b02      	cmp	r3, #2
 801ca3c:	d101      	bne.n	801ca42 <decode_key+0x6e>
 801ca3e:	2305      	movs	r3, #5
 801ca40:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=6;
 801ca42:	79bb      	ldrb	r3, [r7, #6]
 801ca44:	2b03      	cmp	r3, #3
 801ca46:	d101      	bne.n	801ca4c <decode_key+0x78>
 801ca48:	2306      	movs	r3, #6
 801ca4a:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=20;
 801ca4c:	79bb      	ldrb	r3, [r7, #6]
 801ca4e:	2b04      	cmp	r3, #4
 801ca50:	d131      	bne.n	801cab6 <decode_key+0xe2>
 801ca52:	2314      	movs	r3, #20
 801ca54:	73fb      	strb	r3, [r7, #15]
			break;
 801ca56:	e02e      	b.n	801cab6 <decode_key+0xe2>
		case(3):
			if (col==1) key=7;
 801ca58:	79bb      	ldrb	r3, [r7, #6]
 801ca5a:	2b01      	cmp	r3, #1
 801ca5c:	d101      	bne.n	801ca62 <decode_key+0x8e>
 801ca5e:	2307      	movs	r3, #7
 801ca60:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=8;
 801ca62:	79bb      	ldrb	r3, [r7, #6]
 801ca64:	2b02      	cmp	r3, #2
 801ca66:	d101      	bne.n	801ca6c <decode_key+0x98>
 801ca68:	2308      	movs	r3, #8
 801ca6a:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=9;
 801ca6c:	79bb      	ldrb	r3, [r7, #6]
 801ca6e:	2b03      	cmp	r3, #3
 801ca70:	d101      	bne.n	801ca76 <decode_key+0xa2>
 801ca72:	2309      	movs	r3, #9
 801ca74:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=30;
 801ca76:	79bb      	ldrb	r3, [r7, #6]
 801ca78:	2b04      	cmp	r3, #4
 801ca7a:	d11e      	bne.n	801caba <decode_key+0xe6>
 801ca7c:	231e      	movs	r3, #30
 801ca7e:	73fb      	strb	r3, [r7, #15]
			break;
 801ca80:	e01b      	b.n	801caba <decode_key+0xe6>
		case(4):
			if (col==1) key=40;
 801ca82:	79bb      	ldrb	r3, [r7, #6]
 801ca84:	2b01      	cmp	r3, #1
 801ca86:	d101      	bne.n	801ca8c <decode_key+0xb8>
 801ca88:	2328      	movs	r3, #40	; 0x28
 801ca8a:	73fb      	strb	r3, [r7, #15]
			if (col==2) key=0;
 801ca8c:	79bb      	ldrb	r3, [r7, #6]
 801ca8e:	2b02      	cmp	r3, #2
 801ca90:	d101      	bne.n	801ca96 <decode_key+0xc2>
 801ca92:	2300      	movs	r3, #0
 801ca94:	73fb      	strb	r3, [r7, #15]
			if (col==3) key=50;
 801ca96:	79bb      	ldrb	r3, [r7, #6]
 801ca98:	2b03      	cmp	r3, #3
 801ca9a:	d101      	bne.n	801caa0 <decode_key+0xcc>
 801ca9c:	2332      	movs	r3, #50	; 0x32
 801ca9e:	73fb      	strb	r3, [r7, #15]
			if (col==4) key=60;
 801caa0:	79bb      	ldrb	r3, [r7, #6]
 801caa2:	2b04      	cmp	r3, #4
 801caa4:	d10b      	bne.n	801cabe <decode_key+0xea>
 801caa6:	233c      	movs	r3, #60	; 0x3c
 801caa8:	73fb      	strb	r3, [r7, #15]
			break;
 801caaa:	e008      	b.n	801cabe <decode_key+0xea>
		default:
			key=99;
 801caac:	2363      	movs	r3, #99	; 0x63
 801caae:	73fb      	strb	r3, [r7, #15]
			break;
 801cab0:	e006      	b.n	801cac0 <decode_key+0xec>
			break;
 801cab2:	bf00      	nop
 801cab4:	e004      	b.n	801cac0 <decode_key+0xec>
			break;
 801cab6:	bf00      	nop
 801cab8:	e002      	b.n	801cac0 <decode_key+0xec>
			break;
 801caba:	bf00      	nop
 801cabc:	e000      	b.n	801cac0 <decode_key+0xec>
			break;
 801cabe:	bf00      	nop
	}

	return key;
 801cac0:	7bfb      	ldrb	r3, [r7, #15]
}
 801cac2:	4618      	mov	r0, r3
 801cac4:	3714      	adds	r7, #20
 801cac6:	46bd      	mov	sp, r7
 801cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cacc:	4770      	bx	lr
 801cace:	bf00      	nop

0801cad0 <read_key>:



// Perform a polling on each row in order to detect the selection of a key
uint8_t read_key(){
 801cad0:	b580      	push	{r7, lr}
 801cad2:	b082      	sub	sp, #8
 801cad4:	af00      	add	r7, sp, #0

	uint8_t key = 99;     		// 99 is the DISCARD number
 801cad6:	2363      	movs	r3, #99	; 0x63
 801cad8:	71fb      	strb	r3, [r7, #7]
	uint8_t col_read = 99;
 801cada:	2363      	movs	r3, #99	; 0x63
 801cadc:	71bb      	strb	r3, [r7, #6]

	// stay in polling and wait for a button to be pressed
	while(true){

		// *** FIRST row
		write_GPIO(1);								// write 4 status of row GPIO (enable GPIO of row1)
 801cade:	2001      	movs	r0, #1
 801cae0:	f7ff ff2e 	bl	801c940 <write_GPIO>
		col_read = read_GPIO();						// read 4 status of col GPIO
 801cae4:	f7ff fedc 	bl	801c8a0 <read_GPIO>
 801cae8:	4603      	mov	r3, r0
 801caea:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99) {
 801caec:	79bb      	ldrb	r3, [r7, #6]
 801caee:	2b63      	cmp	r3, #99	; 0x63
 801caf0:	d008      	beq.n	801cb04 <read_key+0x34>
			key = decode_key(1, col_read);		// decode which button has been pressed
 801caf2:	79bb      	ldrb	r3, [r7, #6]
 801caf4:	4619      	mov	r1, r3
 801caf6:	2001      	movs	r0, #1
 801caf8:	f7ff ff6c 	bl	801c9d4 <decode_key>
 801cafc:	4603      	mov	r3, r0
 801cafe:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb00:	79fb      	ldrb	r3, [r7, #7]
 801cb02:	e037      	b.n	801cb74 <read_key+0xa4>
		}

		// *** SECOND row
		write_GPIO(2);
 801cb04:	2002      	movs	r0, #2
 801cb06:	f7ff ff1b 	bl	801c940 <write_GPIO>
		col_read = read_GPIO();
 801cb0a:	f7ff fec9 	bl	801c8a0 <read_GPIO>
 801cb0e:	4603      	mov	r3, r0
 801cb10:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cb12:	79bb      	ldrb	r3, [r7, #6]
 801cb14:	2b63      	cmp	r3, #99	; 0x63
 801cb16:	d008      	beq.n	801cb2a <read_key+0x5a>
			key = decode_key(2, col_read);
 801cb18:	79bb      	ldrb	r3, [r7, #6]
 801cb1a:	4619      	mov	r1, r3
 801cb1c:	2002      	movs	r0, #2
 801cb1e:	f7ff ff59 	bl	801c9d4 <decode_key>
 801cb22:	4603      	mov	r3, r0
 801cb24:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb26:	79fb      	ldrb	r3, [r7, #7]
 801cb28:	e024      	b.n	801cb74 <read_key+0xa4>
		}

		// *** THIRD row
		write_GPIO(3);
 801cb2a:	2003      	movs	r0, #3
 801cb2c:	f7ff ff08 	bl	801c940 <write_GPIO>
		col_read = read_GPIO();
 801cb30:	f7ff feb6 	bl	801c8a0 <read_GPIO>
 801cb34:	4603      	mov	r3, r0
 801cb36:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cb38:	79bb      	ldrb	r3, [r7, #6]
 801cb3a:	2b63      	cmp	r3, #99	; 0x63
 801cb3c:	d008      	beq.n	801cb50 <read_key+0x80>
			key = decode_key(3, col_read);
 801cb3e:	79bb      	ldrb	r3, [r7, #6]
 801cb40:	4619      	mov	r1, r3
 801cb42:	2003      	movs	r0, #3
 801cb44:	f7ff ff46 	bl	801c9d4 <decode_key>
 801cb48:	4603      	mov	r3, r0
 801cb4a:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb4c:	79fb      	ldrb	r3, [r7, #7]
 801cb4e:	e011      	b.n	801cb74 <read_key+0xa4>
		}

		// *** FORTH row
		write_GPIO(4);
 801cb50:	2004      	movs	r0, #4
 801cb52:	f7ff fef5 	bl	801c940 <write_GPIO>
		col_read = read_GPIO();
 801cb56:	f7ff fea3 	bl	801c8a0 <read_GPIO>
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	71bb      	strb	r3, [r7, #6]
		if(col_read != 99){
 801cb5e:	79bb      	ldrb	r3, [r7, #6]
 801cb60:	2b63      	cmp	r3, #99	; 0x63
 801cb62:	d0bc      	beq.n	801cade <read_key+0xe>
			key = decode_key(4, col_read);
 801cb64:	79bb      	ldrb	r3, [r7, #6]
 801cb66:	4619      	mov	r1, r3
 801cb68:	2004      	movs	r0, #4
 801cb6a:	f7ff ff33 	bl	801c9d4 <decode_key>
 801cb6e:	4603      	mov	r3, r0
 801cb70:	71fb      	strb	r3, [r7, #7]
			return key;
 801cb72:	79fb      	ldrb	r3, [r7, #7]
		}
	}

	return 99;
}
 801cb74:	4618      	mov	r0, r3
 801cb76:	3708      	adds	r7, #8
 801cb78:	46bd      	mov	sp, r7
 801cb7a:	bd80      	pop	{r7, pc}
 801cb7c:	0000      	movs	r0, r0
	...

0801cb80 <keypad_getNumber>:



uint32_t keypad_getNumber(){
 801cb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb82:	b087      	sub	sp, #28
 801cb84:	af00      	add	r7, sp, #0

	uint8_t inputDigit[10];
	uint32_t number=0;
 801cb86:	2300      	movs	r3, #0
 801cb88:	617b      	str	r3, [r7, #20]
	uint8_t key;
	uint8_t i=0;
 801cb8a:	2300      	movs	r3, #0
 801cb8c:	74fb      	strb	r3, [r7, #19]

#ifdef debug_output
	PRINTF("\n\r The digits selected are: ");
#endif

	lcd16x2_i2c_printf("-> A to select");
 801cb8e:	4860      	ldr	r0, [pc, #384]	; (801cd10 <keypad_getNumber+0x190>)
 801cb90:	f000 f9e6 	bl	801cf60 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 801cb94:	f000 f9d2 	bl	801cf3c <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("ID:  ");
 801cb98:	485e      	ldr	r0, [pc, #376]	; (801cd14 <keypad_getNumber+0x194>)
 801cb9a:	f000 f9e1 	bl	801cf60 <lcd16x2_i2c_printf>
	// until I press the ENTER button do:
	while(true){

		key = read_key();		// returns the digit input
 801cb9e:	f7ff ff97 	bl	801cad0 <read_key>
 801cba2:	4603      	mov	r3, r0
 801cba4:	72fb      	strb	r3, [r7, #11]

		if(key==99){
 801cba6:	7afb      	ldrb	r3, [r7, #11]
 801cba8:	2b63      	cmp	r3, #99	; 0x63
 801cbaa:	d103      	bne.n	801cbb4 <keypad_getNumber+0x34>
			lcd16x2_i2c_printf("Error...");
 801cbac:	485a      	ldr	r0, [pc, #360]	; (801cd18 <keypad_getNumber+0x198>)
 801cbae:	f000 f9d7 	bl	801cf60 <lcd16x2_i2c_printf>
 801cbb2:	e04c      	b.n	801cc4e <keypad_getNumber+0xce>
		}else if(key==10){			// A, exit insertion number
 801cbb4:	7afb      	ldrb	r3, [r7, #11]
 801cbb6:	2b0a      	cmp	r3, #10
 801cbb8:	d106      	bne.n	801cbc8 <keypad_getNumber+0x48>
			lcd16x2_i2c_printf(";");
 801cbba:	4858      	ldr	r0, [pc, #352]	; (801cd1c <keypad_getNumber+0x19c>)
 801cbbc:	f000 f9d0 	bl	801cf60 <lcd16x2_i2c_printf>
			break;
 801cbc0:	bf00      	nop

		key=99;
	}

	// Transform the array in number
	for(int j=i; j>0; j--){
 801cbc2:	7cfb      	ldrb	r3, [r7, #19]
 801cbc4:	60fb      	str	r3, [r7, #12]
 801cbc6:	e07f      	b.n	801ccc8 <keypad_getNumber+0x148>
		}else if(key==20){		// B, nothing
 801cbc8:	7afb      	ldrb	r3, [r7, #11]
 801cbca:	2b14      	cmp	r3, #20
 801cbcc:	d103      	bne.n	801cbd6 <keypad_getNumber+0x56>
			lcd16x2_i2c_printf("B");
 801cbce:	4854      	ldr	r0, [pc, #336]	; (801cd20 <keypad_getNumber+0x1a0>)
 801cbd0:	f000 f9c6 	bl	801cf60 <lcd16x2_i2c_printf>
 801cbd4:	e03b      	b.n	801cc4e <keypad_getNumber+0xce>
		}else if(key==30){		// C, easter egg
 801cbd6:	7afb      	ldrb	r3, [r7, #11]
 801cbd8:	2b1e      	cmp	r3, #30
 801cbda:	d104      	bne.n	801cbe6 <keypad_getNumber+0x66>
			lcd16x2_i2c_printf("C");
 801cbdc:	4851      	ldr	r0, [pc, #324]	; (801cd24 <keypad_getNumber+0x1a4>)
 801cbde:	f000 f9bf 	bl	801cf60 <lcd16x2_i2c_printf>
			return 0;
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	e08b      	b.n	801ccfe <keypad_getNumber+0x17e>
		}else if(key==40){		// *, nothing
 801cbe6:	7afb      	ldrb	r3, [r7, #11]
 801cbe8:	2b28      	cmp	r3, #40	; 0x28
 801cbea:	d106      	bne.n	801cbfa <keypad_getNumber+0x7a>
			lcd16x2_i2c_printf("*");
 801cbec:	484e      	ldr	r0, [pc, #312]	; (801cd28 <keypad_getNumber+0x1a8>)
 801cbee:	f000 f9b7 	bl	801cf60 <lcd16x2_i2c_printf>
			PRINTF("* ");
 801cbf2:	484e      	ldr	r0, [pc, #312]	; (801cd2c <keypad_getNumber+0x1ac>)
 801cbf4:	f7ff fce0 	bl	801c5b8 <PRINTF>
 801cbf8:	e029      	b.n	801cc4e <keypad_getNumber+0xce>
		}else if(key==50){		// #, nothing
 801cbfa:	7afb      	ldrb	r3, [r7, #11]
 801cbfc:	2b32      	cmp	r3, #50	; 0x32
 801cbfe:	d106      	bne.n	801cc0e <keypad_getNumber+0x8e>
			lcd16x2_i2c_printf("#");
 801cc00:	484b      	ldr	r0, [pc, #300]	; (801cd30 <keypad_getNumber+0x1b0>)
 801cc02:	f000 f9ad 	bl	801cf60 <lcd16x2_i2c_printf>
			PRINTF("# ");
 801cc06:	484b      	ldr	r0, [pc, #300]	; (801cd34 <keypad_getNumber+0x1b4>)
 801cc08:	f7ff fcd6 	bl	801c5b8 <PRINTF>
 801cc0c:	e01f      	b.n	801cc4e <keypad_getNumber+0xce>
		}else if(key==60){		// D, disco mode
 801cc0e:	7afb      	ldrb	r3, [r7, #11]
 801cc10:	2b3c      	cmp	r3, #60	; 0x3c
 801cc12:	d105      	bne.n	801cc20 <keypad_getNumber+0xa0>
			lcd16x2_i2c_printf("D");
 801cc14:	4848      	ldr	r0, [pc, #288]	; (801cd38 <keypad_getNumber+0x1b8>)
 801cc16:	f000 f9a3 	bl	801cf60 <lcd16x2_i2c_printf>
			return 10000;
 801cc1a:	f242 7310 	movw	r3, #10000	; 0x2710
 801cc1e:	e06e      	b.n	801ccfe <keypad_getNumber+0x17e>
		}else if(key>=0 && key<=9){	// number keys
 801cc20:	7afb      	ldrb	r3, [r7, #11]
 801cc22:	2b09      	cmp	r3, #9
 801cc24:	d813      	bhi.n	801cc4e <keypad_getNumber+0xce>
			inputDigit[i] = key;
 801cc26:	7cfb      	ldrb	r3, [r7, #19]
 801cc28:	f107 0218 	add.w	r2, r7, #24
 801cc2c:	4413      	add	r3, r2
 801cc2e:	7afa      	ldrb	r2, [r7, #11]
 801cc30:	f803 2c18 	strb.w	r2, [r3, #-24]
			lcd16x2_i2c_printf("%d", inputDigit[i]);
 801cc34:	7cfb      	ldrb	r3, [r7, #19]
 801cc36:	f107 0218 	add.w	r2, r7, #24
 801cc3a:	4413      	add	r3, r2
 801cc3c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cc40:	4619      	mov	r1, r3
 801cc42:	483e      	ldr	r0, [pc, #248]	; (801cd3c <keypad_getNumber+0x1bc>)
 801cc44:	f000 f98c 	bl	801cf60 <lcd16x2_i2c_printf>
			i+=1;
 801cc48:	7cfb      	ldrb	r3, [r7, #19]
 801cc4a:	3301      	adds	r3, #1
 801cc4c:	74fb      	strb	r3, [r7, #19]
		key=99;
 801cc4e:	2363      	movs	r3, #99	; 0x63
 801cc50:	72fb      	strb	r3, [r7, #11]
		key = read_key();		// returns the digit input
 801cc52:	e7a4      	b.n	801cb9e <keypad_getNumber+0x1e>
		number += pow(10, j-1)*inputDigit[i-j];
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	3b01      	subs	r3, #1
 801cc58:	4618      	mov	r0, r3
 801cc5a:	f7e3 fc6b 	bl	8000534 <__aeabi_i2d>
 801cc5e:	4603      	mov	r3, r0
 801cc60:	460c      	mov	r4, r1
 801cc62:	ec44 3b11 	vmov	d1, r3, r4
 801cc66:	ed9f 0b28 	vldr	d0, [pc, #160]	; 801cd08 <keypad_getNumber+0x188>
 801cc6a:	f005 fd3f 	bl	80226ec <pow>
 801cc6e:	ec56 5b10 	vmov	r5, r6, d0
 801cc72:	7cfa      	ldrb	r2, [r7, #19]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	1ad3      	subs	r3, r2, r3
 801cc78:	f107 0218 	add.w	r2, r7, #24
 801cc7c:	4413      	add	r3, r2
 801cc7e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cc82:	4618      	mov	r0, r3
 801cc84:	f7e3 fc56 	bl	8000534 <__aeabi_i2d>
 801cc88:	4603      	mov	r3, r0
 801cc8a:	460c      	mov	r4, r1
 801cc8c:	461a      	mov	r2, r3
 801cc8e:	4623      	mov	r3, r4
 801cc90:	4628      	mov	r0, r5
 801cc92:	4631      	mov	r1, r6
 801cc94:	f7e3 fcb8 	bl	8000608 <__aeabi_dmul>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	460c      	mov	r4, r1
 801cc9c:	4625      	mov	r5, r4
 801cc9e:	461c      	mov	r4, r3
 801cca0:	6978      	ldr	r0, [r7, #20]
 801cca2:	f7e3 fc37 	bl	8000514 <__aeabi_ui2d>
 801cca6:	4602      	mov	r2, r0
 801cca8:	460b      	mov	r3, r1
 801ccaa:	4620      	mov	r0, r4
 801ccac:	4629      	mov	r1, r5
 801ccae:	f7e3 faf5 	bl	800029c <__adddf3>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	460c      	mov	r4, r1
 801ccb6:	4618      	mov	r0, r3
 801ccb8:	4621      	mov	r1, r4
 801ccba:	f7e3 ff55 	bl	8000b68 <__aeabi_d2uiz>
 801ccbe:	4603      	mov	r3, r0
 801ccc0:	617b      	str	r3, [r7, #20]
	for(int j=i; j>0; j--){
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	3b01      	subs	r3, #1
 801ccc6:	60fb      	str	r3, [r7, #12]
 801ccc8:	68fb      	ldr	r3, [r7, #12]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	dcc2      	bgt.n	801cc54 <keypad_getNumber+0xd4>
	}

#ifdef debug_output
	PRINTF32("\n\r     Final number obtained is: %d", number);
#endif
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 801ccce:	2200      	movs	r2, #0
 801ccd0:	2180      	movs	r1, #128	; 0x80
 801ccd2:	481b      	ldr	r0, [pc, #108]	; (801cd40 <keypad_getNumber+0x1c0>)
 801ccd4:	f001 fe94 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 801ccd8:	2200      	movs	r2, #0
 801ccda:	f44f 7100 	mov.w	r1, #512	; 0x200
 801ccde:	4819      	ldr	r0, [pc, #100]	; (801cd44 <keypad_getNumber+0x1c4>)
 801cce0:	f001 fe8e 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 801cce4:	2200      	movs	r2, #0
 801cce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801ccea:	4816      	ldr	r0, [pc, #88]	; (801cd44 <keypad_getNumber+0x1c4>)
 801ccec:	f001 fe88 	bl	801ea00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 801ccf0:	2200      	movs	r2, #0
 801ccf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801ccf6:	4814      	ldr	r0, [pc, #80]	; (801cd48 <keypad_getNumber+0x1c8>)
 801ccf8:	f001 fe82 	bl	801ea00 <HAL_GPIO_WritePin>
	return number;
 801ccfc:	697b      	ldr	r3, [r7, #20]
}
 801ccfe:	4618      	mov	r0, r3
 801cd00:	371c      	adds	r7, #28
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd06:	bf00      	nop
 801cd08:	00000000 	.word	0x00000000
 801cd0c:	40240000 	.word	0x40240000
 801cd10:	0802cfb8 	.word	0x0802cfb8
 801cd14:	0802cfc8 	.word	0x0802cfc8
 801cd18:	0802cfd0 	.word	0x0802cfd0
 801cd1c:	0802cfdc 	.word	0x0802cfdc
 801cd20:	0802cfe0 	.word	0x0802cfe0
 801cd24:	0802cfe4 	.word	0x0802cfe4
 801cd28:	0802cfe8 	.word	0x0802cfe8
 801cd2c:	0802cfec 	.word	0x0802cfec
 801cd30:	0802cff0 	.word	0x0802cff0
 801cd34:	0802cff4 	.word	0x0802cff4
 801cd38:	0802cff8 	.word	0x0802cff8
 801cd3c:	0802cffc 	.word	0x0802cffc
 801cd40:	40020800 	.word	0x40020800
 801cd44:	40020000 	.word	0x40020000
 801cd48:	40020400 	.word	0x40020400

0801cd4c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af02      	add	r7, sp, #8
 801cd52:	4603      	mov	r3, r0
 801cd54:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 801cd56:	79fb      	ldrb	r3, [r7, #7]
 801cd58:	011b      	lsls	r3, r3, #4
 801cd5a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 801cd5c:	79fb      	ldrb	r3, [r7, #7]
 801cd5e:	f023 030f 	bic.w	r3, r3, #15
 801cd62:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cd64:	7bbb      	ldrb	r3, [r7, #14]
 801cd66:	f043 030c 	orr.w	r3, r3, #12
 801cd6a:	b2db      	uxtb	r3, r3
 801cd6c:	723b      	strb	r3, [r7, #8]
 801cd6e:	7bbb      	ldrb	r3, [r7, #14]
 801cd70:	f043 0308 	orr.w	r3, r3, #8
 801cd74:	b2db      	uxtb	r3, r3
 801cd76:	727b      	strb	r3, [r7, #9]
 801cd78:	7bfb      	ldrb	r3, [r7, #15]
 801cd7a:	f043 030c 	orr.w	r3, r3, #12
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	72bb      	strb	r3, [r7, #10]
 801cd82:	7bfb      	ldrb	r3, [r7, #15]
 801cd84:	f043 0308 	orr.w	r3, r3, #8
 801cd88:	b2db      	uxtb	r3, r3
 801cd8a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cd8c:	4b07      	ldr	r3, [pc, #28]	; (801cdac <lcd16x2_i2c_sendCommand+0x60>)
 801cd8e:	6818      	ldr	r0, [r3, #0]
 801cd90:	4b07      	ldr	r3, [pc, #28]	; (801cdb0 <lcd16x2_i2c_sendCommand+0x64>)
 801cd92:	781b      	ldrb	r3, [r3, #0]
 801cd94:	b299      	uxth	r1, r3
 801cd96:	f107 0208 	add.w	r2, r7, #8
 801cd9a:	23c8      	movs	r3, #200	; 0xc8
 801cd9c:	9300      	str	r3, [sp, #0]
 801cd9e:	2304      	movs	r3, #4
 801cda0:	f001 ff98 	bl	801ecd4 <HAL_I2C_Master_Transmit>
}
 801cda4:	bf00      	nop
 801cda6:	3710      	adds	r7, #16
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}
 801cdac:	200000a0 	.word	0x200000a0
 801cdb0:	200000a4 	.word	0x200000a4

0801cdb4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b086      	sub	sp, #24
 801cdb8:	af02      	add	r7, sp, #8
 801cdba:	4603      	mov	r3, r0
 801cdbc:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 801cdbe:	79fb      	ldrb	r3, [r7, #7]
 801cdc0:	011b      	lsls	r3, r3, #4
 801cdc2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 801cdc4:	79fb      	ldrb	r3, [r7, #7]
 801cdc6:	f023 030f 	bic.w	r3, r3, #15
 801cdca:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 801cdcc:	7bbb      	ldrb	r3, [r7, #14]
 801cdce:	f043 030d 	orr.w	r3, r3, #13
 801cdd2:	b2db      	uxtb	r3, r3
 801cdd4:	723b      	strb	r3, [r7, #8]
 801cdd6:	7bbb      	ldrb	r3, [r7, #14]
 801cdd8:	f043 0309 	orr.w	r3, r3, #9
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	727b      	strb	r3, [r7, #9]
 801cde0:	7bfb      	ldrb	r3, [r7, #15]
 801cde2:	f043 030d 	orr.w	r3, r3, #13
 801cde6:	b2db      	uxtb	r3, r3
 801cde8:	72bb      	strb	r3, [r7, #10]
 801cdea:	7bfb      	ldrb	r3, [r7, #15]
 801cdec:	f043 0309 	orr.w	r3, r3, #9
 801cdf0:	b2db      	uxtb	r3, r3
 801cdf2:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 801cdf4:	4b07      	ldr	r3, [pc, #28]	; (801ce14 <lcd16x2_i2c_sendData+0x60>)
 801cdf6:	6818      	ldr	r0, [r3, #0]
 801cdf8:	4b07      	ldr	r3, [pc, #28]	; (801ce18 <lcd16x2_i2c_sendData+0x64>)
 801cdfa:	781b      	ldrb	r3, [r3, #0]
 801cdfc:	b299      	uxth	r1, r3
 801cdfe:	f107 0208 	add.w	r2, r7, #8
 801ce02:	23c8      	movs	r3, #200	; 0xc8
 801ce04:	9300      	str	r3, [sp, #0]
 801ce06:	2304      	movs	r3, #4
 801ce08:	f001 ff64 	bl	801ecd4 <HAL_I2C_Master_Transmit>
}
 801ce0c:	bf00      	nop
 801ce0e:	3710      	adds	r7, #16
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	200000a0 	.word	0x200000a0
 801ce18:	200000a4 	.word	0x200000a4

0801ce1c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b082      	sub	sp, #8
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 801ce24:	2032      	movs	r0, #50	; 0x32
 801ce26:	f000 ff8d 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 801ce2a:	4a30      	ldr	r2, [pc, #192]	; (801ceec <lcd16x2_i2c_init+0xd0>)
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 801ce30:	4b2e      	ldr	r3, [pc, #184]	; (801ceec <lcd16x2_i2c_init+0xd0>)
 801ce32:	6818      	ldr	r0, [r3, #0]
 801ce34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801ce38:	2205      	movs	r2, #5
 801ce3a:	214e      	movs	r1, #78	; 0x4e
 801ce3c:	f002 f848 	bl	801eed0 <HAL_I2C_IsDeviceReady>
 801ce40:	4603      	mov	r3, r0
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d010      	beq.n	801ce68 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 801ce46:	4b29      	ldr	r3, [pc, #164]	; (801ceec <lcd16x2_i2c_init+0xd0>)
 801ce48:	6818      	ldr	r0, [r3, #0]
 801ce4a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801ce4e:	2205      	movs	r2, #5
 801ce50:	217e      	movs	r1, #126	; 0x7e
 801ce52:	f002 f83d 	bl	801eed0 <HAL_I2C_IsDeviceReady>
 801ce56:	4603      	mov	r3, r0
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d001      	beq.n	801ce60 <lcd16x2_i2c_init+0x44>
    {
      return false;
 801ce5c:	2300      	movs	r3, #0
 801ce5e:	e040      	b.n	801cee2 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 801ce60:	4b23      	ldr	r3, [pc, #140]	; (801cef0 <lcd16x2_i2c_init+0xd4>)
 801ce62:	227e      	movs	r2, #126	; 0x7e
 801ce64:	701a      	strb	r2, [r3, #0]
 801ce66:	e002      	b.n	801ce6e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 801ce68:	4b21      	ldr	r3, [pc, #132]	; (801cef0 <lcd16x2_i2c_init+0xd4>)
 801ce6a:	224e      	movs	r2, #78	; 0x4e
 801ce6c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 801ce6e:	202d      	movs	r0, #45	; 0x2d
 801ce70:	f000 ff68 	bl	801dd44 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 801ce74:	2030      	movs	r0, #48	; 0x30
 801ce76:	f7ff ff69 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 801ce7a:	2005      	movs	r0, #5
 801ce7c:	f000 ff62 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801ce80:	2030      	movs	r0, #48	; 0x30
 801ce82:	f7ff ff63 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ce86:	2001      	movs	r0, #1
 801ce88:	f000 ff5c 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 801ce8c:	2030      	movs	r0, #48	; 0x30
 801ce8e:	f7ff ff5d 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce92:	2008      	movs	r0, #8
 801ce94:	f000 ff56 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 801ce98:	2020      	movs	r0, #32
 801ce9a:	f7ff ff57 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 801ce9e:	2008      	movs	r0, #8
 801cea0:	f000 ff50 	bl	801dd44 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 801cea4:	2028      	movs	r0, #40	; 0x28
 801cea6:	f7ff ff51 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ceaa:	2001      	movs	r0, #1
 801ceac:	f000 ff4a 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 801ceb0:	2008      	movs	r0, #8
 801ceb2:	f7ff ff4b 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801ceb6:	2001      	movs	r0, #1
 801ceb8:	f000 ff44 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801cebc:	2001      	movs	r0, #1
 801cebe:	f7ff ff45 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801cec2:	2003      	movs	r0, #3
 801cec4:	f000 ff3e 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 801cec8:	2006      	movs	r0, #6
 801ceca:	f7ff ff3f 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 801cece:	2001      	movs	r0, #1
 801ced0:	f000 ff38 	bl	801dd44 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 801ced4:	200c      	movs	r0, #12
 801ced6:	f7ff ff39 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801ceda:	2003      	movs	r0, #3
 801cedc:	f000 ff32 	bl	801dd44 <HAL_Delay>

  return true;
 801cee0:	2301      	movs	r3, #1
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3708      	adds	r7, #8
 801cee6:	46bd      	mov	sp, r7
 801cee8:	bd80      	pop	{r7, pc}
 801ceea:	bf00      	nop
 801ceec:	200000a0 	.word	0x200000a0
 801cef0:	200000a4 	.word	0x200000a4

0801cef4 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 801cef4:	b580      	push	{r7, lr}
 801cef6:	b084      	sub	sp, #16
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	4603      	mov	r3, r0
 801cefc:	460a      	mov	r2, r1
 801cefe:	71fb      	strb	r3, [r7, #7]
 801cf00:	4613      	mov	r3, r2
 801cf02:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 801cf04:	79bb      	ldrb	r3, [r7, #6]
 801cf06:	f003 030f 	and.w	r3, r3, #15
 801cf0a:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 801cf0c:	79fb      	ldrb	r3, [r7, #7]
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d108      	bne.n	801cf24 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 801cf12:	7bfb      	ldrb	r3, [r7, #15]
 801cf14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801cf18:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cf1a:	7bfb      	ldrb	r3, [r7, #15]
 801cf1c:	4618      	mov	r0, r3
 801cf1e:	f7ff ff15 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 801cf22:	e007      	b.n	801cf34 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 801cf24:	7bfb      	ldrb	r3, [r7, #15]
 801cf26:	f063 033f 	orn	r3, r3, #63	; 0x3f
 801cf2a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 801cf2c:	7bfb      	ldrb	r3, [r7, #15]
 801cf2e:	4618      	mov	r0, r3
 801cf30:	f7ff ff0c 	bl	801cd4c <lcd16x2_i2c_sendCommand>
}
 801cf34:	bf00      	nop
 801cf36:	3710      	adds	r7, #16
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd80      	pop	{r7, pc}

0801cf3c <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 801cf40:	2100      	movs	r1, #0
 801cf42:	2001      	movs	r0, #1
 801cf44:	f7ff ffd6 	bl	801cef4 <lcd16x2_i2c_setCursor>
}
 801cf48:	bf00      	nop
 801cf4a:	bd80      	pop	{r7, pc}

0801cf4c <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 801cf50:	2001      	movs	r0, #1
 801cf52:	f7ff fefb 	bl	801cd4c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 801cf56:	2003      	movs	r0, #3
 801cf58:	f000 fef4 	bl	801dd44 <HAL_Delay>
}
 801cf5c:	bf00      	nop
 801cf5e:	bd80      	pop	{r7, pc}

0801cf60 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 801cf60:	b40f      	push	{r0, r1, r2, r3}
 801cf62:	b590      	push	{r4, r7, lr}
 801cf64:	b089      	sub	sp, #36	; 0x24
 801cf66:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 801cf68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801cf6c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 801cf6e:	f107 0308 	add.w	r3, r7, #8
 801cf72:	687a      	ldr	r2, [r7, #4]
 801cf74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801cf76:	4618      	mov	r0, r3
 801cf78:	f004 ffca 	bl	8021f10 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	77fb      	strb	r3, [r7, #31]
 801cf80:	e00b      	b.n	801cf9a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 801cf82:	7ffb      	ldrb	r3, [r7, #31]
 801cf84:	f107 0220 	add.w	r2, r7, #32
 801cf88:	4413      	add	r3, r2
 801cf8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f7ff ff10 	bl	801cdb4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 801cf94:	7ffb      	ldrb	r3, [r7, #31]
 801cf96:	3301      	adds	r3, #1
 801cf98:	77fb      	strb	r3, [r7, #31]
 801cf9a:	7ffc      	ldrb	r4, [r7, #31]
 801cf9c:	f107 0308 	add.w	r3, r7, #8
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7e3 f91d 	bl	80001e0 <strlen>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	429c      	cmp	r4, r3
 801cfaa:	d202      	bcs.n	801cfb2 <lcd16x2_i2c_printf+0x52>
 801cfac:	7ffb      	ldrb	r3, [r7, #31]
 801cfae:	2b0f      	cmp	r3, #15
 801cfb0:	d9e7      	bls.n	801cf82 <lcd16x2_i2c_printf+0x22>
  }
}
 801cfb2:	bf00      	nop
 801cfb4:	3724      	adds	r7, #36	; 0x24
 801cfb6:	46bd      	mov	sp, r7
 801cfb8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801cfbc:	b004      	add	sp, #16
 801cfbe:	4770      	bx	lr

0801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>:




// When DMA finishes a send triggers a flag and stops the data transfer
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]

	if(htim == &htim2){
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	4a0b      	ldr	r2, [pc, #44]	; (801cff8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cfcc:	4293      	cmp	r3, r2
 801cfce:	d103      	bne.n	801cfd8 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_1);
 801cfd0:	2100      	movs	r1, #0
 801cfd2:	4809      	ldr	r0, [pc, #36]	; (801cff8 <HAL_TIM_PWM_PulseFinishedCallback+0x38>)
 801cfd4:	f003 f87c 	bl	80200d0 <HAL_TIM_PWM_Stop_DMA>
	}

	if(htim == &htim3){
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	4a08      	ldr	r2, [pc, #32]	; (801cffc <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cfdc:	4293      	cmp	r3, r2
 801cfde:	d103      	bne.n	801cfe8 <HAL_TIM_PWM_PulseFinishedCallback+0x28>
		HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 801cfe0:	2100      	movs	r1, #0
 801cfe2:	4806      	ldr	r0, [pc, #24]	; (801cffc <HAL_TIM_PWM_PulseFinishedCallback+0x3c>)
 801cfe4:	f003 f874 	bl	80200d0 <HAL_TIM_PWM_Stop_DMA>
	}

	datasentflag = 1;
 801cfe8:	4b05      	ldr	r3, [pc, #20]	; (801d000 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 801cfea:	2201      	movs	r2, #1
 801cfec:	601a      	str	r2, [r3, #0]
}
 801cfee:	bf00      	nop
 801cff0:	3708      	adds	r7, #8
 801cff2:	46bd      	mov	sp, r7
 801cff4:	bd80      	pop	{r7, pc}
 801cff6:	bf00      	nop
 801cff8:	20005498 	.word	0x20005498
 801cffc:	200053f8 	.word	0x200053f8
 801d000:	20000090 	.word	0x20000090

0801d004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801d004:	b5b0      	push	{r4, r5, r7, lr}
 801d006:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801d00a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801d00c:	f000 fe28 	bl	801dc60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801d010:	f000 f948 	bl	801d2a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801d014:	f7ff fb12 	bl	801c63c <MX_GPIO_Init>
  MX_DMA_Init();
 801d018:	f7ff fae8 	bl	801c5ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 801d01c:	f000 fcfe 	bl	801da1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 801d020:	f000 fb08 	bl	801d634 <MX_TIM2_Init>
  MX_I2C1_Init();
 801d024:	f7ff fbc6 	bl	801c7b4 <MX_I2C1_Init>
  MX_TIM3_Init();
 801d028:	f000 fb78 	bl	801d71c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 801d02c:	f000 fd20 	bl	801da70 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  // *********************************************
  // 			LCD initialization
  // *********************************************
  if(lcd16x2_i2c_init(&hi2c1)){
 801d030:	4889      	ldr	r0, [pc, #548]	; (801d258 <main+0x254>)
 801d032:	f7ff fef3 	bl	801ce1c <lcd16x2_i2c_init>
 801d036:	4603      	mov	r3, r0
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d004      	beq.n	801d046 <main+0x42>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 801d03c:	2201      	movs	r2, #1
 801d03e:	2120      	movs	r1, #32
 801d040:	4886      	ldr	r0, [pc, #536]	; (801d25c <main+0x258>)
 801d042:	f001 fcdd 	bl	801ea00 <HAL_GPIO_WritePin>
  }
  lcd16x2_i2c_clear();
 801d046:	f7ff ff81 	bl	801cf4c <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d04a:	f7ff ff77 	bl	801cf3c <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d04e:	f7ff ff7d 	bl	801cf4c <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("      RESET       ");
 801d052:	4883      	ldr	r0, [pc, #524]	; (801d260 <main+0x25c>)
 801d054:	f7ff ff84 	bl	801cf60 <lcd16x2_i2c_printf>

  HAL_Delay(1000);
 801d058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801d05c:	f000 fe72 	bl	801dd44 <HAL_Delay>

  // Enable HC 05 bluetooth module
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 801d060:	2201      	movs	r2, #1
 801d062:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d066:	487f      	ldr	r0, [pc, #508]	; (801d264 <main+0x260>)
 801d068:	f001 fcca 	bl	801ea00 <HAL_GPIO_WritePin>

  // enable interrupt for the UART
  //__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
  HAL_UART_Receive_IT(&huart6, buffer, 50);
 801d06c:	2232      	movs	r2, #50	; 0x32
 801d06e:	497e      	ldr	r1, [pc, #504]	; (801d268 <main+0x264>)
 801d070:	487e      	ldr	r0, [pc, #504]	; (801d26c <main+0x268>)
 801d072:	f004 f84b 	bl	802110c <HAL_UART_Receive_IT>


  // Welcome message
  lcd16x2_i2c_clear();
 801d076:	f7ff ff69 	bl	801cf4c <lcd16x2_i2c_clear>
  lcd16x2_i2c_2ndLine();
 801d07a:	f7ff ff5f 	bl	801cf3c <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_clear();
 801d07e:	f7ff ff65 	bl	801cf4c <lcd16x2_i2c_clear>
  lcd16x2_i2c_printf("><>   FISH   <><");
 801d082:	487b      	ldr	r0, [pc, #492]	; (801d270 <main+0x26c>)
 801d084:	f7ff ff6c 	bl	801cf60 <lcd16x2_i2c_printf>
  lcd16x2_i2c_2ndLine();
 801d088:	f7ff ff58 	bl	801cf3c <lcd16x2_i2c_2ndLine>
  lcd16x2_i2c_printf("===   BOARD  ===");
 801d08c:	4879      	ldr	r0, [pc, #484]	; (801d274 <main+0x270>)
 801d08e:	f7ff ff67 	bl	801cf60 <lcd16x2_i2c_printf>


  // Struct definition
  Problem p;			    			// struct that contains the info related to the problem
  uint32_t problemID = 0;				// ID that reppresents the number of the problem
 801d092:	2300      	movs	r3, #0
 801d094:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // If the blue button is pressed
	  if(BLUE_BUTTON){
 801d098:	4b77      	ldr	r3, [pc, #476]	; (801d278 <main+0x274>)
 801d09a:	781b      	ldrb	r3, [r3, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d070      	beq.n	801d182 <main+0x17e>
		  lcd16x2_i2c_clear();					// clear the LCD display
 801d0a0:	f7ff ff54 	bl	801cf4c <lcd16x2_i2c_clear>

		  problemID = keypad_getNumber();		// Listen for the key pressed on the keypad
 801d0a4:	f7ff fd6c 	bl	801cb80 <keypad_getNumber>
 801d0a8:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250

		  if(problemID==10000){					// If pressed button is disco mode
 801d0ac:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801d0b0:	f242 7210 	movw	r2, #10000	; 0x2710
 801d0b4:	4293      	cmp	r3, r2
 801d0b6:	d13e      	bne.n	801d136 <main+0x132>
			  uint8_t mode=0;
 801d0b8:	2300      	movs	r3, #0
 801d0ba:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257

			  while(1){

				  if(mode==0){
 801d0be:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d10f      	bne.n	801d0e6 <main+0xe2>
					  lcd16x2_i2c_clear();
 801d0c6:	f7ff ff41 	bl	801cf4c <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d0ca:	486c      	ldr	r0, [pc, #432]	; (801d27c <main+0x278>)
 801d0cc:	f7ff ff48 	bl	801cf60 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d0d0:	f7ff ff34 	bl	801cf3c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    /(^-^)/ ");
 801d0d4:	486a      	ldr	r0, [pc, #424]	; (801d280 <main+0x27c>)
 801d0d6:	f7ff ff43 	bl	801cf60 <lcd16x2_i2c_printf>
					  mode +=1;
 801d0da:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d0de:	3301      	adds	r3, #1
 801d0e0:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 801d0e4:	e01f      	b.n	801d126 <main+0x122>
				  }else if(mode==2){
 801d0e6:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d0ea:	2b02      	cmp	r3, #2
 801d0ec:	d10f      	bne.n	801d10e <main+0x10a>
					  lcd16x2_i2c_clear();
 801d0ee:	f7ff ff2d 	bl	801cf4c <lcd16x2_i2c_clear>
					  lcd16x2_i2c_printf("DISCO MODE");
 801d0f2:	4862      	ldr	r0, [pc, #392]	; (801d27c <main+0x278>)
 801d0f4:	f7ff ff34 	bl	801cf60 <lcd16x2_i2c_printf>
					  lcd16x2_i2c_2ndLine();
 801d0f8:	f7ff ff20 	bl	801cf3c <lcd16x2_i2c_2ndLine>
					  lcd16x2_i2c_printf("    -(^-^)-  ");
 801d0fc:	4861      	ldr	r0, [pc, #388]	; (801d284 <main+0x280>)
 801d0fe:	f7ff ff2f 	bl	801cf60 <lcd16x2_i2c_printf>
					  mode +=1;
 801d102:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d106:	3301      	adds	r3, #1
 801d108:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 801d10c:	e00b      	b.n	801d126 <main+0x122>
				  }else{
					  mode +=1;
 801d10e:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d112:	3301      	adds	r3, #1
 801d114:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					  if(mode==4) mode=0;
 801d118:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 801d11c:	2b04      	cmp	r3, #4
 801d11e:	d102      	bne.n	801d126 <main+0x122>
 801d120:	2300      	movs	r3, #0
 801d122:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				  }
				  LED_randSetRand();
 801d126:	f7e4 f90d 	bl	8001344 <LED_randSetRand>

				  // Sends to LED strip signal
				  WS2811_Send();
 801d12a:	f7e4 f947 	bl	80013bc <WS2811_Send>

				  HAL_Delay(250);
 801d12e:	20fa      	movs	r0, #250	; 0xfa
 801d130:	f000 fe08 	bl	801dd44 <HAL_Delay>
				  if(mode==0){
 801d134:	e7c3      	b.n	801d0be <main+0xba>


		  }else{								// Otherwise search correct problem


			  problem_fetch(&p,problemID);		// Update the struct with teh info from the ID
 801d136:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801d13a:	1d3b      	adds	r3, r7, #4
 801d13c:	4611      	mov	r1, r2
 801d13e:	4618      	mov	r0, r3
 801d140:	f7e4 fad2 	bl	80016e8 <problem_fetch>

			  problem_genArray(&p);				// Generate a matrix containing colors for each LED according to problem
 801d144:	1d3b      	adds	r3, r7, #4
 801d146:	4618      	mov	r0, r3
 801d148:	f7e3 ff88 	bl	800105c <problem_genArray>

			  // Display on led boulder info
			  lcd16x2_i2c_clear();
 801d14c:	f7ff fefe 	bl	801cf4c <lcd16x2_i2c_clear>
			  lcd16x2_i2c_printf("Name:");
 801d150:	484d      	ldr	r0, [pc, #308]	; (801d288 <main+0x284>)
 801d152:	f7ff ff05 	bl	801cf60 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.name);
 801d156:	1d3b      	adds	r3, r7, #4
 801d158:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d15c:	4618      	mov	r0, r3
 801d15e:	f7ff feff 	bl	801cf60 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_2ndLine();
 801d162:	f7ff feeb 	bl	801cf3c <lcd16x2_i2c_2ndLine>
			  lcd16x2_i2c_printf("Grad:");
 801d166:	4849      	ldr	r0, [pc, #292]	; (801d28c <main+0x288>)
 801d168:	f7ff fefa 	bl	801cf60 <lcd16x2_i2c_printf>
			  lcd16x2_i2c_printf(p.grade);
 801d16c:	1d3b      	adds	r3, r7, #4
 801d16e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d172:	4618      	mov	r0, r3
 801d174:	f7ff fef4 	bl	801cf60 <lcd16x2_i2c_printf>

			  WS2811_Send();					// Sends to LED strip signal
 801d178:	f7e4 f920 	bl	80013bc <WS2811_Send>

			  BLUE_BUTTON = false;				// Reset blue button flag
 801d17c:	4b3e      	ldr	r3, [pc, #248]	; (801d278 <main+0x274>)
 801d17e:	2200      	movs	r2, #0
 801d180:	701a      	strb	r2, [r3, #0]
		  }
	  }


		// If the message is received from bluetooth
	 if(blt_rx[0] && blt_rx[1] && blt_rx[2] && blt_rx[3] && blt_rx[4] && blt_rx[5]){
 801d182:	4b43      	ldr	r3, [pc, #268]	; (801d290 <main+0x28c>)
 801d184:	781b      	ldrb	r3, [r3, #0]
 801d186:	2b00      	cmp	r3, #0
 801d188:	d086      	beq.n	801d098 <main+0x94>
 801d18a:	4b41      	ldr	r3, [pc, #260]	; (801d290 <main+0x28c>)
 801d18c:	785b      	ldrb	r3, [r3, #1]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d082      	beq.n	801d098 <main+0x94>
 801d192:	4b3f      	ldr	r3, [pc, #252]	; (801d290 <main+0x28c>)
 801d194:	789b      	ldrb	r3, [r3, #2]
 801d196:	2b00      	cmp	r3, #0
 801d198:	f43f af7e 	beq.w	801d098 <main+0x94>
 801d19c:	4b3c      	ldr	r3, [pc, #240]	; (801d290 <main+0x28c>)
 801d19e:	78db      	ldrb	r3, [r3, #3]
 801d1a0:	2b00      	cmp	r3, #0
 801d1a2:	f43f af79 	beq.w	801d098 <main+0x94>
 801d1a6:	4b3a      	ldr	r3, [pc, #232]	; (801d290 <main+0x28c>)
 801d1a8:	791b      	ldrb	r3, [r3, #4]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	f43f af74 	beq.w	801d098 <main+0x94>
 801d1b0:	4b37      	ldr	r3, [pc, #220]	; (801d290 <main+0x28c>)
 801d1b2:	795b      	ldrb	r3, [r3, #5]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	f43f af6f 	beq.w	801d098 <main+0x94>

		MessageHandler(&p);
 801d1ba:	1d3b      	adds	r3, r7, #4
 801d1bc:	4618      	mov	r0, r3
 801d1be:	f7e4 f9b9 	bl	8001534 <MessageHandler>

		problem_genArray(&p);				// Generate matrix of color values from problem
 801d1c2:	1d3b      	adds	r3, r7, #4
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f7e3 ff49 	bl	800105c <problem_genArray>

		//WS2811_Send();					// Send PWM to LEDs

		// Display on led boulder info
		lcd16x2_i2c_clear();
 801d1ca:	f7ff febf 	bl	801cf4c <lcd16x2_i2c_clear>
		lcd16x2_i2c_2ndLine();
 801d1ce:	f7ff feb5 	bl	801cf3c <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_clear();
 801d1d2:	f7ff febb 	bl	801cf4c <lcd16x2_i2c_clear>
		lcd16x2_i2c_printf("Name:");
 801d1d6:	482c      	ldr	r0, [pc, #176]	; (801d288 <main+0x284>)
 801d1d8:	f7ff fec2 	bl	801cf60 <lcd16x2_i2c_printf>
		lcd16x2_i2c_printf(p.name);
 801d1dc:	1d3b      	adds	r3, r7, #4
 801d1de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 801d1e2:	4618      	mov	r0, r3
 801d1e4:	f7ff febc 	bl	801cf60 <lcd16x2_i2c_printf>
		lcd16x2_i2c_2ndLine();
 801d1e8:	f7ff fea8 	bl	801cf3c <lcd16x2_i2c_2ndLine>
		lcd16x2_i2c_printf("Grad:");
 801d1ec:	4827      	ldr	r0, [pc, #156]	; (801d28c <main+0x288>)
 801d1ee:	f7ff feb7 	bl	801cf60 <lcd16x2_i2c_printf>
		lcd16x2_i2c_printf(p.grade);
 801d1f2:	1d3b      	adds	r3, r7, #4
 801d1f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7ff feb1 	bl	801cf60 <lcd16x2_i2c_printf>

		msgLen = sprintf(msgDebug, "\n\rInfo sent to LCD");
 801d1fe:	4a25      	ldr	r2, [pc, #148]	; (801d294 <main+0x290>)
 801d200:	4b25      	ldr	r3, [pc, #148]	; (801d298 <main+0x294>)
 801d202:	4615      	mov	r5, r2
 801d204:	461c      	mov	r4, r3
 801d206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801d208:	6028      	str	r0, [r5, #0]
 801d20a:	6069      	str	r1, [r5, #4]
 801d20c:	60aa      	str	r2, [r5, #8]
 801d20e:	60eb      	str	r3, [r5, #12]
 801d210:	8823      	ldrh	r3, [r4, #0]
 801d212:	78a2      	ldrb	r2, [r4, #2]
 801d214:	822b      	strh	r3, [r5, #16]
 801d216:	4613      	mov	r3, r2
 801d218:	74ab      	strb	r3, [r5, #18]
 801d21a:	2212      	movs	r2, #18
 801d21c:	4b1f      	ldr	r3, [pc, #124]	; (801d29c <main+0x298>)
 801d21e:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)msgDebug, msgLen, 10);
 801d220:	4b1e      	ldr	r3, [pc, #120]	; (801d29c <main+0x298>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	b29a      	uxth	r2, r3
 801d226:	230a      	movs	r3, #10
 801d228:	491a      	ldr	r1, [pc, #104]	; (801d294 <main+0x290>)
 801d22a:	481d      	ldr	r0, [pc, #116]	; (801d2a0 <main+0x29c>)
 801d22c:	f003 fed5 	bl	8020fda <HAL_UART_Transmit>

		blt_rx[0] = 0;
 801d230:	4b17      	ldr	r3, [pc, #92]	; (801d290 <main+0x28c>)
 801d232:	2200      	movs	r2, #0
 801d234:	701a      	strb	r2, [r3, #0]
		blt_rx[1] = 0;
 801d236:	4b16      	ldr	r3, [pc, #88]	; (801d290 <main+0x28c>)
 801d238:	2200      	movs	r2, #0
 801d23a:	705a      	strb	r2, [r3, #1]
		blt_rx[2] = 0;
 801d23c:	4b14      	ldr	r3, [pc, #80]	; (801d290 <main+0x28c>)
 801d23e:	2200      	movs	r2, #0
 801d240:	709a      	strb	r2, [r3, #2]
		blt_rx[3] = 0;
 801d242:	4b13      	ldr	r3, [pc, #76]	; (801d290 <main+0x28c>)
 801d244:	2200      	movs	r2, #0
 801d246:	70da      	strb	r2, [r3, #3]
		blt_rx[4] = 0;
 801d248:	4b11      	ldr	r3, [pc, #68]	; (801d290 <main+0x28c>)
 801d24a:	2200      	movs	r2, #0
 801d24c:	711a      	strb	r2, [r3, #4]
		blt_rx[5] = 0;
 801d24e:	4b10      	ldr	r3, [pc, #64]	; (801d290 <main+0x28c>)
 801d250:	2200      	movs	r2, #0
 801d252:	715a      	strb	r2, [r3, #5]
	  if(BLUE_BUTTON){
 801d254:	e720      	b.n	801d098 <main+0x94>
 801d256:	bf00      	nop
 801d258:	20005344 	.word	0x20005344
 801d25c:	40020000 	.word	0x40020000
 801d260:	0802d000 	.word	0x0802d000
 801d264:	40020400 	.word	0x40020400
 801d268:	20002be4 	.word	0x20002be4
 801d26c:	200054d8 	.word	0x200054d8
 801d270:	0802d014 	.word	0x0802d014
 801d274:	0802d028 	.word	0x0802d028
 801d278:	200000a5 	.word	0x200000a5
 801d27c:	0802d03c 	.word	0x0802d03c
 801d280:	0802d048 	.word	0x0802d048
 801d284:	0802d058 	.word	0x0802d058
 801d288:	0802d068 	.word	0x0802d068
 801d28c:	0802d070 	.word	0x0802d070
 801d290:	20000098 	.word	0x20000098
 801d294:	20002b64 	.word	0x20002b64
 801d298:	0802d078 	.word	0x0802d078
 801d29c:	20000094 	.word	0x20000094
 801d2a0:	20005518 	.word	0x20005518

0801d2a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b094      	sub	sp, #80	; 0x50
 801d2a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801d2aa:	f107 0320 	add.w	r3, r7, #32
 801d2ae:	2230      	movs	r2, #48	; 0x30
 801d2b0:	2100      	movs	r1, #0
 801d2b2:	4618      	mov	r0, r3
 801d2b4:	f004 fdb1 	bl	8021e1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801d2b8:	f107 030c 	add.w	r3, r7, #12
 801d2bc:	2200      	movs	r2, #0
 801d2be:	601a      	str	r2, [r3, #0]
 801d2c0:	605a      	str	r2, [r3, #4]
 801d2c2:	609a      	str	r2, [r3, #8]
 801d2c4:	60da      	str	r2, [r3, #12]
 801d2c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801d2c8:	2300      	movs	r3, #0
 801d2ca:	60bb      	str	r3, [r7, #8]
 801d2cc:	4b28      	ldr	r3, [pc, #160]	; (801d370 <SystemClock_Config+0xcc>)
 801d2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2d0:	4a27      	ldr	r2, [pc, #156]	; (801d370 <SystemClock_Config+0xcc>)
 801d2d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d2d6:	6413      	str	r3, [r2, #64]	; 0x40
 801d2d8:	4b25      	ldr	r3, [pc, #148]	; (801d370 <SystemClock_Config+0xcc>)
 801d2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d2e0:	60bb      	str	r3, [r7, #8]
 801d2e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	607b      	str	r3, [r7, #4]
 801d2e8:	4b22      	ldr	r3, [pc, #136]	; (801d374 <SystemClock_Config+0xd0>)
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801d2f0:	4a20      	ldr	r2, [pc, #128]	; (801d374 <SystemClock_Config+0xd0>)
 801d2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801d2f6:	6013      	str	r3, [r2, #0]
 801d2f8:	4b1e      	ldr	r3, [pc, #120]	; (801d374 <SystemClock_Config+0xd0>)
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801d300:	607b      	str	r3, [r7, #4]
 801d302:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 801d304:	2302      	movs	r3, #2
 801d306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801d308:	2301      	movs	r3, #1
 801d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801d30c:	2310      	movs	r3, #16
 801d30e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801d310:	2302      	movs	r3, #2
 801d312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801d314:	2300      	movs	r3, #0
 801d316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 801d318:	2308      	movs	r3, #8
 801d31a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 801d31c:	2348      	movs	r3, #72	; 0x48
 801d31e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801d320:	2302      	movs	r3, #2
 801d322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 801d324:	2307      	movs	r3, #7
 801d326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801d328:	f107 0320 	add.w	r3, r7, #32
 801d32c:	4618      	mov	r0, r3
 801d32e:	f002 f907 	bl	801f540 <HAL_RCC_OscConfig>
 801d332:	4603      	mov	r3, r0
 801d334:	2b00      	cmp	r3, #0
 801d336:	d001      	beq.n	801d33c <SystemClock_Config+0x98>
  {
    Error_Handler();
 801d338:	f000 f89a 	bl	801d470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801d33c:	230f      	movs	r3, #15
 801d33e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801d340:	2302      	movs	r3, #2
 801d342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801d344:	2300      	movs	r3, #0
 801d346:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 801d348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d34c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801d34e:	2300      	movs	r3, #0
 801d350:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801d352:	f107 030c 	add.w	r3, r7, #12
 801d356:	2102      	movs	r1, #2
 801d358:	4618      	mov	r0, r3
 801d35a:	f002 fb61 	bl	801fa20 <HAL_RCC_ClockConfig>
 801d35e:	4603      	mov	r3, r0
 801d360:	2b00      	cmp	r3, #0
 801d362:	d001      	beq.n	801d368 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 801d364:	f000 f884 	bl	801d470 <Error_Handler>
  }
}
 801d368:	bf00      	nop
 801d36a:	3750      	adds	r7, #80	; 0x50
 801d36c:	46bd      	mov	sp, r7
 801d36e:	bd80      	pop	{r7, pc}
 801d370:	40023800 	.word	0x40023800
 801d374:	40007000 	.word	0x40007000

0801d378 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 801d378:	b480      	push	{r7}
 801d37a:	b083      	sub	sp, #12
 801d37c:	af00      	add	r7, sp, #0
 801d37e:	4603      	mov	r3, r0
 801d380:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 801d382:	88fb      	ldrh	r3, [r7, #6]
 801d384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d388:	d102      	bne.n	801d390 <HAL_GPIO_EXTI_Callback+0x18>
		BLUE_BUTTON = true;
 801d38a:	4b04      	ldr	r3, [pc, #16]	; (801d39c <HAL_GPIO_EXTI_Callback+0x24>)
 801d38c:	2201      	movs	r2, #1
 801d38e:	701a      	strb	r2, [r3, #0]
	}
}
 801d390:	bf00      	nop
 801d392:	370c      	adds	r7, #12
 801d394:	46bd      	mov	sp, r7
 801d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d39a:	4770      	bx	lr
 801d39c:	200000a5 	.word	0x200000a5

0801d3a0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b082      	sub	sp, #8
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	6078      	str	r0, [r7, #4]

	if(huart==&huart6){
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	4a27      	ldr	r2, [pc, #156]	; (801d448 <HAL_UART_RxCpltCallback+0xa8>)
 801d3ac:	4293      	cmp	r3, r2
 801d3ae:	d146      	bne.n	801d43e <HAL_UART_RxCpltCallback+0x9e>

		if(buffer[0] == '1'){								// receive NAME
 801d3b0:	4b26      	ldr	r3, [pc, #152]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3b2:	781b      	ldrb	r3, [r3, #0]
 801d3b4:	2b31      	cmp	r3, #49	; 0x31
 801d3b6:	d107      	bne.n	801d3c8 <HAL_UART_RxCpltCallback+0x28>
			strcpy(name_buff,buffer);
 801d3b8:	4924      	ldr	r1, [pc, #144]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3ba:	4825      	ldr	r0, [pc, #148]	; (801d450 <HAL_UART_RxCpltCallback+0xb0>)
 801d3bc:	f004 fd8a 	bl	8021ed4 <strcpy>
			blt_rx[0] = 1;
 801d3c0:	4b24      	ldr	r3, [pc, #144]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d3c2:	2201      	movs	r2, #1
 801d3c4:	701a      	strb	r2, [r3, #0]
		}else if(id_buffer[0] == '6'){						// receive START FINISH
			strcpy(startFinish_buff,buffer);
			blt_rx[5] = 1;
		}
	}
}
 801d3c6:	e03a      	b.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
		}else if(buffer[0] == '2'){							// receive GRADE
 801d3c8:	4b20      	ldr	r3, [pc, #128]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3ca:	781b      	ldrb	r3, [r3, #0]
 801d3cc:	2b32      	cmp	r3, #50	; 0x32
 801d3ce:	d107      	bne.n	801d3e0 <HAL_UART_RxCpltCallback+0x40>
			strcpy(grade_buff,buffer);
 801d3d0:	491e      	ldr	r1, [pc, #120]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3d2:	4821      	ldr	r0, [pc, #132]	; (801d458 <HAL_UART_RxCpltCallback+0xb8>)
 801d3d4:	f004 fd7e 	bl	8021ed4 <strcpy>
			blt_rx[1] = 1;
 801d3d8:	4b1e      	ldr	r3, [pc, #120]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d3da:	2201      	movs	r2, #1
 801d3dc:	705a      	strb	r2, [r3, #1]
}
 801d3de:	e02e      	b.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
		}else if(buffer[0] == '3'){							// receive N MOVES
 801d3e0:	4b1a      	ldr	r3, [pc, #104]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3e2:	781b      	ldrb	r3, [r3, #0]
 801d3e4:	2b33      	cmp	r3, #51	; 0x33
 801d3e6:	d107      	bne.n	801d3f8 <HAL_UART_RxCpltCallback+0x58>
			strcpy(nHolds_buff,buffer);
 801d3e8:	4918      	ldr	r1, [pc, #96]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d3ea:	481c      	ldr	r0, [pc, #112]	; (801d45c <HAL_UART_RxCpltCallback+0xbc>)
 801d3ec:	f004 fd72 	bl	8021ed4 <strcpy>
			blt_rx[2] = 1;
 801d3f0:	4b18      	ldr	r3, [pc, #96]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d3f2:	2201      	movs	r2, #1
 801d3f4:	709a      	strb	r2, [r3, #2]
}
 801d3f6:	e022      	b.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
		}else if(id_buffer[0] == '4'){						// receive LETTER MOVES
 801d3f8:	4b19      	ldr	r3, [pc, #100]	; (801d460 <HAL_UART_RxCpltCallback+0xc0>)
 801d3fa:	781b      	ldrb	r3, [r3, #0]
 801d3fc:	2b34      	cmp	r3, #52	; 0x34
 801d3fe:	d107      	bne.n	801d410 <HAL_UART_RxCpltCallback+0x70>
			strcpy(moveLetter_buff,buffer);
 801d400:	4912      	ldr	r1, [pc, #72]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d402:	4818      	ldr	r0, [pc, #96]	; (801d464 <HAL_UART_RxCpltCallback+0xc4>)
 801d404:	f004 fd66 	bl	8021ed4 <strcpy>
			blt_rx[3] = 1;
 801d408:	4b12      	ldr	r3, [pc, #72]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d40a:	2201      	movs	r2, #1
 801d40c:	70da      	strb	r2, [r3, #3]
}
 801d40e:	e016      	b.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
		}else if(id_buffer[0] == '5'){						// receive NUMBER MOVES
 801d410:	4b13      	ldr	r3, [pc, #76]	; (801d460 <HAL_UART_RxCpltCallback+0xc0>)
 801d412:	781b      	ldrb	r3, [r3, #0]
 801d414:	2b35      	cmp	r3, #53	; 0x35
 801d416:	d107      	bne.n	801d428 <HAL_UART_RxCpltCallback+0x88>
			strcpy(moveNumber_buff,buffer);
 801d418:	490c      	ldr	r1, [pc, #48]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d41a:	4813      	ldr	r0, [pc, #76]	; (801d468 <HAL_UART_RxCpltCallback+0xc8>)
 801d41c:	f004 fd5a 	bl	8021ed4 <strcpy>
			blt_rx[4] = 1;
 801d420:	4b0c      	ldr	r3, [pc, #48]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d422:	2201      	movs	r2, #1
 801d424:	711a      	strb	r2, [r3, #4]
}
 801d426:	e00a      	b.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
		}else if(id_buffer[0] == '6'){						// receive START FINISH
 801d428:	4b0d      	ldr	r3, [pc, #52]	; (801d460 <HAL_UART_RxCpltCallback+0xc0>)
 801d42a:	781b      	ldrb	r3, [r3, #0]
 801d42c:	2b36      	cmp	r3, #54	; 0x36
 801d42e:	d106      	bne.n	801d43e <HAL_UART_RxCpltCallback+0x9e>
			strcpy(startFinish_buff,buffer);
 801d430:	4906      	ldr	r1, [pc, #24]	; (801d44c <HAL_UART_RxCpltCallback+0xac>)
 801d432:	480e      	ldr	r0, [pc, #56]	; (801d46c <HAL_UART_RxCpltCallback+0xcc>)
 801d434:	f004 fd4e 	bl	8021ed4 <strcpy>
			blt_rx[5] = 1;
 801d438:	4b06      	ldr	r3, [pc, #24]	; (801d454 <HAL_UART_RxCpltCallback+0xb4>)
 801d43a:	2201      	movs	r2, #1
 801d43c:	715a      	strb	r2, [r3, #5]
}
 801d43e:	bf00      	nop
 801d440:	3708      	adds	r7, #8
 801d442:	46bd      	mov	sp, r7
 801d444:	bd80      	pop	{r7, pc}
 801d446:	bf00      	nop
 801d448:	200054d8 	.word	0x200054d8
 801d44c:	20002be4 	.word	0x20002be4
 801d450:	20002c18 	.word	0x20002c18
 801d454:	20000098 	.word	0x20000098
 801d458:	200000e8 	.word	0x200000e8
 801d45c:	20005310 	.word	0x20005310
 801d460:	20002b28 	.word	0x20002b28
 801d464:	20002b30 	.word	0x20002b30
 801d468:	200000b4 	.word	0x200000b4
 801d46c:	20002af4 	.word	0x20002af4

0801d470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801d470:	b480      	push	{r7}
 801d472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 801d474:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 801d476:	e7fe      	b.n	801d476 <Error_Handler+0x6>

0801d478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b082      	sub	sp, #8
 801d47c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801d47e:	2300      	movs	r3, #0
 801d480:	607b      	str	r3, [r7, #4]
 801d482:	4b14      	ldr	r3, [pc, #80]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d486:	4a13      	ldr	r2, [pc, #76]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801d48c:	6453      	str	r3, [r2, #68]	; 0x44
 801d48e:	4b11      	ldr	r3, [pc, #68]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d496:	607b      	str	r3, [r7, #4]
 801d498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801d49a:	2300      	movs	r3, #0
 801d49c:	603b      	str	r3, [r7, #0]
 801d49e:	4b0d      	ldr	r3, [pc, #52]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4a2:	4a0c      	ldr	r2, [pc, #48]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d4a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d4a8:	6413      	str	r3, [r2, #64]	; 0x40
 801d4aa:	4b0a      	ldr	r3, [pc, #40]	; (801d4d4 <HAL_MspInit+0x5c>)
 801d4ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d4ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d4b2:	603b      	str	r3, [r7, #0]
 801d4b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 801d4b6:	2007      	movs	r0, #7
 801d4b8:	f000 fd36 	bl	801df28 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 801d4bc:	2200      	movs	r2, #0
 801d4be:	2100      	movs	r1, #0
 801d4c0:	2051      	movs	r0, #81	; 0x51
 801d4c2:	f000 fd3c 	bl	801df3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 801d4c6:	2051      	movs	r0, #81	; 0x51
 801d4c8:	f000 fd55 	bl	801df76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801d4cc:	bf00      	nop
 801d4ce:	3708      	adds	r7, #8
 801d4d0:	46bd      	mov	sp, r7
 801d4d2:	bd80      	pop	{r7, pc}
 801d4d4:	40023800 	.word	0x40023800

0801d4d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801d4d8:	b480      	push	{r7}
 801d4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 801d4dc:	e7fe      	b.n	801d4dc <NMI_Handler+0x4>

0801d4de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801d4de:	b480      	push	{r7}
 801d4e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801d4e2:	e7fe      	b.n	801d4e2 <HardFault_Handler+0x4>

0801d4e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801d4e4:	b480      	push	{r7}
 801d4e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801d4e8:	e7fe      	b.n	801d4e8 <MemManage_Handler+0x4>

0801d4ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801d4ea:	b480      	push	{r7}
 801d4ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801d4ee:	e7fe      	b.n	801d4ee <BusFault_Handler+0x4>

0801d4f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801d4f0:	b480      	push	{r7}
 801d4f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801d4f4:	e7fe      	b.n	801d4f4 <UsageFault_Handler+0x4>

0801d4f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801d4f6:	b480      	push	{r7}
 801d4f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801d4fa:	bf00      	nop
 801d4fc:	46bd      	mov	sp, r7
 801d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d502:	4770      	bx	lr

0801d504 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801d504:	b480      	push	{r7}
 801d506:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801d508:	bf00      	nop
 801d50a:	46bd      	mov	sp, r7
 801d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d510:	4770      	bx	lr

0801d512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801d512:	b480      	push	{r7}
 801d514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801d516:	bf00      	nop
 801d518:	46bd      	mov	sp, r7
 801d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d51e:	4770      	bx	lr

0801d520 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801d524:	f000 fbee 	bl	801dd04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801d528:	bf00      	nop
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 801d530:	4802      	ldr	r0, [pc, #8]	; (801d53c <DMA1_Stream4_IRQHandler+0x10>)
 801d532:	f000 fe63 	bl	801e1fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 801d536:	bf00      	nop
 801d538:	bd80      	pop	{r7, pc}
 801d53a:	bf00      	nop
 801d53c:	20005438 	.word	0x20005438

0801d540 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 801d540:	b580      	push	{r7, lr}
 801d542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 801d544:	4802      	ldr	r0, [pc, #8]	; (801d550 <DMA1_Stream5_IRQHandler+0x10>)
 801d546:	f000 fe59 	bl	801e1fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 801d54a:	bf00      	nop
 801d54c:	bd80      	pop	{r7, pc}
 801d54e:	bf00      	nop
 801d550:	20005398 	.word	0x20005398

0801d554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 801d554:	b580      	push	{r7, lr}
 801d556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 801d558:	4802      	ldr	r0, [pc, #8]	; (801d564 <TIM2_IRQHandler+0x10>)
 801d55a:	f002 fe5f 	bl	802021c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 801d55e:	bf00      	nop
 801d560:	bd80      	pop	{r7, pc}
 801d562:	bf00      	nop
 801d564:	20005498 	.word	0x20005498

0801d568 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 801d568:	b580      	push	{r7, lr}
 801d56a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 801d56c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801d570:	f001 fa60 	bl	801ea34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 801d574:	bf00      	nop
 801d576:	bd80      	pop	{r7, pc}

0801d578 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 801d578:	b580      	push	{r7, lr}
 801d57a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 801d57c:	4802      	ldr	r0, [pc, #8]	; (801d588 <USART6_IRQHandler+0x10>)
 801d57e:	f003 fe1b 	bl	80211b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 801d582:	bf00      	nop
 801d584:	bd80      	pop	{r7, pc}
 801d586:	bf00      	nop
 801d588:	200054d8 	.word	0x200054d8

0801d58c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 801d58c:	b480      	push	{r7}
 801d58e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 801d590:	bf00      	nop
 801d592:	46bd      	mov	sp, r7
 801d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d598:	4770      	bx	lr
	...

0801d59c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801d59c:	b580      	push	{r7, lr}
 801d59e:	b086      	sub	sp, #24
 801d5a0:	af00      	add	r7, sp, #0
 801d5a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801d5a4:	4a14      	ldr	r2, [pc, #80]	; (801d5f8 <_sbrk+0x5c>)
 801d5a6:	4b15      	ldr	r3, [pc, #84]	; (801d5fc <_sbrk+0x60>)
 801d5a8:	1ad3      	subs	r3, r2, r3
 801d5aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801d5ac:	697b      	ldr	r3, [r7, #20]
 801d5ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801d5b0:	4b13      	ldr	r3, [pc, #76]	; (801d600 <_sbrk+0x64>)
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d102      	bne.n	801d5be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 801d5b8:	4b11      	ldr	r3, [pc, #68]	; (801d600 <_sbrk+0x64>)
 801d5ba:	4a12      	ldr	r2, [pc, #72]	; (801d604 <_sbrk+0x68>)
 801d5bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801d5be:	4b10      	ldr	r3, [pc, #64]	; (801d600 <_sbrk+0x64>)
 801d5c0:	681a      	ldr	r2, [r3, #0]
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	4413      	add	r3, r2
 801d5c6:	693a      	ldr	r2, [r7, #16]
 801d5c8:	429a      	cmp	r2, r3
 801d5ca:	d207      	bcs.n	801d5dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 801d5cc:	f004 fbf0 	bl	8021db0 <__errno>
 801d5d0:	4602      	mov	r2, r0
 801d5d2:	230c      	movs	r3, #12
 801d5d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 801d5d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d5da:	e009      	b.n	801d5f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801d5dc:	4b08      	ldr	r3, [pc, #32]	; (801d600 <_sbrk+0x64>)
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801d5e2:	4b07      	ldr	r3, [pc, #28]	; (801d600 <_sbrk+0x64>)
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	4413      	add	r3, r2
 801d5ea:	4a05      	ldr	r2, [pc, #20]	; (801d600 <_sbrk+0x64>)
 801d5ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
}
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	3718      	adds	r7, #24
 801d5f4:	46bd      	mov	sp, r7
 801d5f6:	bd80      	pop	{r7, pc}
 801d5f8:	20018000 	.word	0x20018000
 801d5fc:	00000400 	.word	0x00000400
 801d600:	200000a8 	.word	0x200000a8
 801d604:	20005560 	.word	0x20005560

0801d608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801d608:	b480      	push	{r7}
 801d60a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801d60c:	4b08      	ldr	r3, [pc, #32]	; (801d630 <SystemInit+0x28>)
 801d60e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d612:	4a07      	ldr	r2, [pc, #28]	; (801d630 <SystemInit+0x28>)
 801d614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801d618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801d61c:	4b04      	ldr	r3, [pc, #16]	; (801d630 <SystemInit+0x28>)
 801d61e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801d622:	609a      	str	r2, [r3, #8]
#endif
}
 801d624:	bf00      	nop
 801d626:	46bd      	mov	sp, r7
 801d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d62c:	4770      	bx	lr
 801d62e:	bf00      	nop
 801d630:	e000ed00 	.word	0xe000ed00

0801d634 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim2_ch1;
DMA_HandleTypeDef hdma_tim3_ch1_trig;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 801d634:	b580      	push	{r7, lr}
 801d636:	b08e      	sub	sp, #56	; 0x38
 801d638:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d63a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d63e:	2200      	movs	r2, #0
 801d640:	601a      	str	r2, [r3, #0]
 801d642:	605a      	str	r2, [r3, #4]
 801d644:	609a      	str	r2, [r3, #8]
 801d646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d648:	f107 0320 	add.w	r3, r7, #32
 801d64c:	2200      	movs	r2, #0
 801d64e:	601a      	str	r2, [r3, #0]
 801d650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d652:	1d3b      	adds	r3, r7, #4
 801d654:	2200      	movs	r2, #0
 801d656:	601a      	str	r2, [r3, #0]
 801d658:	605a      	str	r2, [r3, #4]
 801d65a:	609a      	str	r2, [r3, #8]
 801d65c:	60da      	str	r2, [r3, #12]
 801d65e:	611a      	str	r2, [r3, #16]
 801d660:	615a      	str	r2, [r3, #20]
 801d662:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 801d664:	4b2c      	ldr	r3, [pc, #176]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801d66a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 801d66c:	4b2a      	ldr	r3, [pc, #168]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d66e:	2200      	movs	r2, #0
 801d670:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d672:	4b29      	ldr	r3, [pc, #164]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d674:	2200      	movs	r2, #0
 801d676:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90-1;
 801d678:	4b27      	ldr	r3, [pc, #156]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d67a:	2259      	movs	r2, #89	; 0x59
 801d67c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d67e:	4b26      	ldr	r3, [pc, #152]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d680:	2200      	movs	r2, #0
 801d682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d684:	4b24      	ldr	r3, [pc, #144]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d686:	2280      	movs	r2, #128	; 0x80
 801d688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801d68a:	4823      	ldr	r0, [pc, #140]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d68c:	f002 fbba 	bl	801fe04 <HAL_TIM_Base_Init>
 801d690:	4603      	mov	r3, r0
 801d692:	2b00      	cmp	r3, #0
 801d694:	d001      	beq.n	801d69a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801d696:	f7ff feeb 	bl	801d470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d69a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d69e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801d6a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d6a4:	4619      	mov	r1, r3
 801d6a6:	481c      	ldr	r0, [pc, #112]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d6a8:	f002 ff86 	bl	80205b8 <HAL_TIM_ConfigClockSource>
 801d6ac:	4603      	mov	r3, r0
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d001      	beq.n	801d6b6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 801d6b2:	f7ff fedd 	bl	801d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801d6b6:	4818      	ldr	r0, [pc, #96]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d6b8:	f002 fbcf 	bl	801fe5a <HAL_TIM_PWM_Init>
 801d6bc:	4603      	mov	r3, r0
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d001      	beq.n	801d6c6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 801d6c2:	f7ff fed5 	bl	801d470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d6ca:	2300      	movs	r3, #0
 801d6cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801d6ce:	f107 0320 	add.w	r3, r7, #32
 801d6d2:	4619      	mov	r1, r3
 801d6d4:	4810      	ldr	r0, [pc, #64]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d6d6:	f003 fbb1 	bl	8020e3c <HAL_TIMEx_MasterConfigSynchronization>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	d001      	beq.n	801d6e4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 801d6e0:	f7ff fec6 	bl	801d470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d6e4:	2360      	movs	r3, #96	; 0x60
 801d6e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d6e8:	2301      	movs	r3, #1
 801d6ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d6f4:	1d3b      	adds	r3, r7, #4
 801d6f6:	2200      	movs	r2, #0
 801d6f8:	4619      	mov	r1, r3
 801d6fa:	4807      	ldr	r0, [pc, #28]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d6fc:	f002 fe96 	bl	802042c <HAL_TIM_PWM_ConfigChannel>
 801d700:	4603      	mov	r3, r0
 801d702:	2b00      	cmp	r3, #0
 801d704:	d001      	beq.n	801d70a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 801d706:	f7ff feb3 	bl	801d470 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 801d70a:	4803      	ldr	r0, [pc, #12]	; (801d718 <MX_TIM2_Init+0xe4>)
 801d70c:	f000 f928 	bl	801d960 <HAL_TIM_MspPostInit>

}
 801d710:	bf00      	nop
 801d712:	3738      	adds	r7, #56	; 0x38
 801d714:	46bd      	mov	sp, r7
 801d716:	bd80      	pop	{r7, pc}
 801d718:	20005498 	.word	0x20005498

0801d71c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b08e      	sub	sp, #56	; 0x38
 801d720:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801d722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d726:	2200      	movs	r2, #0
 801d728:	601a      	str	r2, [r3, #0]
 801d72a:	605a      	str	r2, [r3, #4]
 801d72c:	609a      	str	r2, [r3, #8]
 801d72e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801d730:	f107 0320 	add.w	r3, r7, #32
 801d734:	2200      	movs	r2, #0
 801d736:	601a      	str	r2, [r3, #0]
 801d738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801d73a:	1d3b      	adds	r3, r7, #4
 801d73c:	2200      	movs	r2, #0
 801d73e:	601a      	str	r2, [r3, #0]
 801d740:	605a      	str	r2, [r3, #4]
 801d742:	609a      	str	r2, [r3, #8]
 801d744:	60da      	str	r2, [r3, #12]
 801d746:	611a      	str	r2, [r3, #16]
 801d748:	615a      	str	r2, [r3, #20]
 801d74a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 801d74c:	4b2c      	ldr	r3, [pc, #176]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d74e:	4a2d      	ldr	r2, [pc, #180]	; (801d804 <MX_TIM3_Init+0xe8>)
 801d750:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 801d752:	4b2b      	ldr	r3, [pc, #172]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d754:	2200      	movs	r2, #0
 801d756:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801d758:	4b29      	ldr	r3, [pc, #164]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d75a:	2200      	movs	r2, #0
 801d75c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90-1;
 801d75e:	4b28      	ldr	r3, [pc, #160]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d760:	2259      	movs	r2, #89	; 0x59
 801d762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801d764:	4b26      	ldr	r3, [pc, #152]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d766:	2200      	movs	r2, #0
 801d768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801d76a:	4b25      	ldr	r3, [pc, #148]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d76c:	2280      	movs	r2, #128	; 0x80
 801d76e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801d770:	4823      	ldr	r0, [pc, #140]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d772:	f002 fb47 	bl	801fe04 <HAL_TIM_Base_Init>
 801d776:	4603      	mov	r3, r0
 801d778:	2b00      	cmp	r3, #0
 801d77a:	d001      	beq.n	801d780 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 801d77c:	f7ff fe78 	bl	801d470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801d780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d784:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 801d786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d78a:	4619      	mov	r1, r3
 801d78c:	481c      	ldr	r0, [pc, #112]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d78e:	f002 ff13 	bl	80205b8 <HAL_TIM_ConfigClockSource>
 801d792:	4603      	mov	r3, r0
 801d794:	2b00      	cmp	r3, #0
 801d796:	d001      	beq.n	801d79c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 801d798:	f7ff fe6a 	bl	801d470 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 801d79c:	4818      	ldr	r0, [pc, #96]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d79e:	f002 fb5c 	bl	801fe5a <HAL_TIM_PWM_Init>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	d001      	beq.n	801d7ac <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 801d7a8:	f7ff fe62 	bl	801d470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801d7ac:	2300      	movs	r3, #0
 801d7ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801d7b0:	2300      	movs	r3, #0
 801d7b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 801d7b4:	f107 0320 	add.w	r3, r7, #32
 801d7b8:	4619      	mov	r1, r3
 801d7ba:	4811      	ldr	r0, [pc, #68]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d7bc:	f003 fb3e 	bl	8020e3c <HAL_TIMEx_MasterConfigSynchronization>
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d001      	beq.n	801d7ca <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 801d7c6:	f7ff fe53 	bl	801d470 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801d7ca:	2360      	movs	r3, #96	; 0x60
 801d7cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 801d7ce:	2301      	movs	r3, #1
 801d7d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801d7d2:	2300      	movs	r3, #0
 801d7d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801d7d6:	2300      	movs	r3, #0
 801d7d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801d7da:	1d3b      	adds	r3, r7, #4
 801d7dc:	2200      	movs	r2, #0
 801d7de:	4619      	mov	r1, r3
 801d7e0:	4807      	ldr	r0, [pc, #28]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d7e2:	f002 fe23 	bl	802042c <HAL_TIM_PWM_ConfigChannel>
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d001      	beq.n	801d7f0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 801d7ec:	f7ff fe40 	bl	801d470 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 801d7f0:	4803      	ldr	r0, [pc, #12]	; (801d800 <MX_TIM3_Init+0xe4>)
 801d7f2:	f000 f8b5 	bl	801d960 <HAL_TIM_MspPostInit>

}
 801d7f6:	bf00      	nop
 801d7f8:	3738      	adds	r7, #56	; 0x38
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	bd80      	pop	{r7, pc}
 801d7fe:	bf00      	nop
 801d800:	200053f8 	.word	0x200053f8
 801d804:	40000400 	.word	0x40000400

0801d808 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b084      	sub	sp, #16
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	681b      	ldr	r3, [r3, #0]
 801d814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d818:	d147      	bne.n	801d8aa <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801d81a:	2300      	movs	r3, #0
 801d81c:	60fb      	str	r3, [r7, #12]
 801d81e:	4b4a      	ldr	r3, [pc, #296]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d822:	4a49      	ldr	r2, [pc, #292]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d824:	f043 0301 	orr.w	r3, r3, #1
 801d828:	6413      	str	r3, [r2, #64]	; 0x40
 801d82a:	4b47      	ldr	r3, [pc, #284]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d82e:	f003 0301 	and.w	r3, r3, #1
 801d832:	60fb      	str	r3, [r7, #12]
 801d834:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 801d836:	4b45      	ldr	r3, [pc, #276]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d838:	4a45      	ldr	r2, [pc, #276]	; (801d950 <HAL_TIM_Base_MspInit+0x148>)
 801d83a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 801d83c:	4b43      	ldr	r3, [pc, #268]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d83e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 801d842:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d844:	4b41      	ldr	r3, [pc, #260]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d846:	2240      	movs	r2, #64	; 0x40
 801d848:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 801d84a:	4b40      	ldr	r3, [pc, #256]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d84c:	2200      	movs	r2, #0
 801d84e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 801d850:	4b3e      	ldr	r3, [pc, #248]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d852:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d856:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d858:	4b3c      	ldr	r3, [pc, #240]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d85a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d85e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d860:	4b3a      	ldr	r3, [pc, #232]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d866:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 801d868:	4b38      	ldr	r3, [pc, #224]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d86a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d86e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 801d870:	4b36      	ldr	r3, [pc, #216]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d872:	2200      	movs	r2, #0
 801d874:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d876:	4b35      	ldr	r3, [pc, #212]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d878:	2200      	movs	r2, #0
 801d87a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 801d87c:	4833      	ldr	r0, [pc, #204]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d87e:	f000 fb95 	bl	801dfac <HAL_DMA_Init>
 801d882:	4603      	mov	r3, r0
 801d884:	2b00      	cmp	r3, #0
 801d886:	d001      	beq.n	801d88c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 801d888:	f7ff fdf2 	bl	801d470 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	4a2f      	ldr	r2, [pc, #188]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d890:	625a      	str	r2, [r3, #36]	; 0x24
 801d892:	4a2e      	ldr	r2, [pc, #184]	; (801d94c <HAL_TIM_Base_MspInit+0x144>)
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801d898:	2200      	movs	r2, #0
 801d89a:	2100      	movs	r1, #0
 801d89c:	201c      	movs	r0, #28
 801d89e:	f000 fb4e 	bl	801df3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801d8a2:	201c      	movs	r0, #28
 801d8a4:	f000 fb67 	bl	801df76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 801d8a8:	e049      	b.n	801d93e <HAL_TIM_Base_MspInit+0x136>
  else if(tim_baseHandle->Instance==TIM3)
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	4a29      	ldr	r2, [pc, #164]	; (801d954 <HAL_TIM_Base_MspInit+0x14c>)
 801d8b0:	4293      	cmp	r3, r2
 801d8b2:	d144      	bne.n	801d93e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	60bb      	str	r3, [r7, #8]
 801d8b8:	4b23      	ldr	r3, [pc, #140]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d8ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8bc:	4a22      	ldr	r2, [pc, #136]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d8be:	f043 0302 	orr.w	r3, r3, #2
 801d8c2:	6413      	str	r3, [r2, #64]	; 0x40
 801d8c4:	4b20      	ldr	r3, [pc, #128]	; (801d948 <HAL_TIM_Base_MspInit+0x140>)
 801d8c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d8c8:	f003 0302 	and.w	r3, r3, #2
 801d8cc:	60bb      	str	r3, [r7, #8]
 801d8ce:	68bb      	ldr	r3, [r7, #8]
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 801d8d0:	4b21      	ldr	r3, [pc, #132]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8d2:	4a22      	ldr	r2, [pc, #136]	; (801d95c <HAL_TIM_Base_MspInit+0x154>)
 801d8d4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 801d8d6:	4b20      	ldr	r3, [pc, #128]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8d8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 801d8dc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 801d8de:	4b1e      	ldr	r3, [pc, #120]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8e0:	2240      	movs	r2, #64	; 0x40
 801d8e2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 801d8e4:	4b1c      	ldr	r3, [pc, #112]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 801d8ea:	4b1b      	ldr	r3, [pc, #108]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d8f0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 801d8f2:	4b19      	ldr	r3, [pc, #100]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d8f8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 801d8fa:	4b17      	ldr	r3, [pc, #92]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d8fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801d900:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_CIRCULAR;
 801d902:	4b15      	ldr	r3, [pc, #84]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d904:	f44f 7280 	mov.w	r2, #256	; 0x100
 801d908:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 801d90a:	4b13      	ldr	r3, [pc, #76]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d90c:	2200      	movs	r2, #0
 801d90e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801d910:	4b11      	ldr	r3, [pc, #68]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d912:	2200      	movs	r2, #0
 801d914:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 801d916:	4810      	ldr	r0, [pc, #64]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d918:	f000 fb48 	bl	801dfac <HAL_DMA_Init>
 801d91c:	4603      	mov	r3, r0
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d001      	beq.n	801d926 <HAL_TIM_Base_MspInit+0x11e>
      Error_Handler();
 801d922:	f7ff fda5 	bl	801d470 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 801d926:	687b      	ldr	r3, [r7, #4]
 801d928:	4a0b      	ldr	r2, [pc, #44]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d92a:	625a      	str	r2, [r3, #36]	; 0x24
 801d92c:	4a0a      	ldr	r2, [pc, #40]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	4a08      	ldr	r2, [pc, #32]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d936:	639a      	str	r2, [r3, #56]	; 0x38
 801d938:	4a07      	ldr	r2, [pc, #28]	; (801d958 <HAL_TIM_Base_MspInit+0x150>)
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	6393      	str	r3, [r2, #56]	; 0x38
}
 801d93e:	bf00      	nop
 801d940:	3710      	adds	r7, #16
 801d942:	46bd      	mov	sp, r7
 801d944:	bd80      	pop	{r7, pc}
 801d946:	bf00      	nop
 801d948:	40023800 	.word	0x40023800
 801d94c:	20005398 	.word	0x20005398
 801d950:	40026088 	.word	0x40026088
 801d954:	40000400 	.word	0x40000400
 801d958:	20005438 	.word	0x20005438
 801d95c:	40026070 	.word	0x40026070

0801d960 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801d960:	b580      	push	{r7, lr}
 801d962:	b08a      	sub	sp, #40	; 0x28
 801d964:	af00      	add	r7, sp, #0
 801d966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d968:	f107 0314 	add.w	r3, r7, #20
 801d96c:	2200      	movs	r2, #0
 801d96e:	601a      	str	r2, [r3, #0]
 801d970:	605a      	str	r2, [r3, #4]
 801d972:	609a      	str	r2, [r3, #8]
 801d974:	60da      	str	r2, [r3, #12]
 801d976:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	681b      	ldr	r3, [r3, #0]
 801d97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d980:	d11e      	bne.n	801d9c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d982:	2300      	movs	r3, #0
 801d984:	613b      	str	r3, [r7, #16]
 801d986:	4b22      	ldr	r3, [pc, #136]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d98a:	4a21      	ldr	r2, [pc, #132]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d98c:	f043 0301 	orr.w	r3, r3, #1
 801d990:	6313      	str	r3, [r2, #48]	; 0x30
 801d992:	4b1f      	ldr	r3, [pc, #124]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d996:	f003 0301 	and.w	r3, r3, #1
 801d99a:	613b      	str	r3, [r7, #16]
 801d99c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801d99e:	2301      	movs	r3, #1
 801d9a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d9a2:	2302      	movs	r3, #2
 801d9a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9a6:	2300      	movs	r3, #0
 801d9a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d9aa:	2300      	movs	r3, #0
 801d9ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9b2:	f107 0314 	add.w	r3, r7, #20
 801d9b6:	4619      	mov	r1, r3
 801d9b8:	4816      	ldr	r0, [pc, #88]	; (801da14 <HAL_TIM_MspPostInit+0xb4>)
 801d9ba:	f000 fe87 	bl	801e6cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 801d9be:	e022      	b.n	801da06 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	681b      	ldr	r3, [r3, #0]
 801d9c4:	4a14      	ldr	r2, [pc, #80]	; (801da18 <HAL_TIM_MspPostInit+0xb8>)
 801d9c6:	4293      	cmp	r3, r2
 801d9c8:	d11d      	bne.n	801da06 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	60fb      	str	r3, [r7, #12]
 801d9ce:	4b10      	ldr	r3, [pc, #64]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9d2:	4a0f      	ldr	r2, [pc, #60]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d9d4:	f043 0301 	orr.w	r3, r3, #1
 801d9d8:	6313      	str	r3, [r2, #48]	; 0x30
 801d9da:	4b0d      	ldr	r3, [pc, #52]	; (801da10 <HAL_TIM_MspPostInit+0xb0>)
 801d9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9de:	f003 0301 	and.w	r3, r3, #1
 801d9e2:	60fb      	str	r3, [r7, #12]
 801d9e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801d9e6:	2340      	movs	r3, #64	; 0x40
 801d9e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d9ea:	2302      	movs	r3, #2
 801d9ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9ee:	2300      	movs	r3, #0
 801d9f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801d9f6:	2302      	movs	r3, #2
 801d9f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d9fa:	f107 0314 	add.w	r3, r7, #20
 801d9fe:	4619      	mov	r1, r3
 801da00:	4804      	ldr	r0, [pc, #16]	; (801da14 <HAL_TIM_MspPostInit+0xb4>)
 801da02:	f000 fe63 	bl	801e6cc <HAL_GPIO_Init>
}
 801da06:	bf00      	nop
 801da08:	3728      	adds	r7, #40	; 0x28
 801da0a:	46bd      	mov	sp, r7
 801da0c:	bd80      	pop	{r7, pc}
 801da0e:	bf00      	nop
 801da10:	40023800 	.word	0x40023800
 801da14:	40020000 	.word	0x40020000
 801da18:	40000400 	.word	0x40000400

0801da1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801da20:	4b11      	ldr	r3, [pc, #68]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da22:	4a12      	ldr	r2, [pc, #72]	; (801da6c <MX_USART2_UART_Init+0x50>)
 801da24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801da26:	4b10      	ldr	r3, [pc, #64]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801da2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801da2e:	4b0e      	ldr	r3, [pc, #56]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da30:	2200      	movs	r2, #0
 801da32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801da34:	4b0c      	ldr	r3, [pc, #48]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da36:	2200      	movs	r2, #0
 801da38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 801da3a:	4b0b      	ldr	r3, [pc, #44]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da3c:	2200      	movs	r2, #0
 801da3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801da40:	4b09      	ldr	r3, [pc, #36]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da42:	220c      	movs	r2, #12
 801da44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801da46:	4b08      	ldr	r3, [pc, #32]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da48:	2200      	movs	r2, #0
 801da4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801da4c:	4b06      	ldr	r3, [pc, #24]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da4e:	2200      	movs	r2, #0
 801da50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801da52:	4805      	ldr	r0, [pc, #20]	; (801da68 <MX_USART2_UART_Init+0x4c>)
 801da54:	f003 fa74 	bl	8020f40 <HAL_UART_Init>
 801da58:	4603      	mov	r3, r0
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	d001      	beq.n	801da62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801da5e:	f7ff fd07 	bl	801d470 <Error_Handler>
  }

}
 801da62:	bf00      	nop
 801da64:	bd80      	pop	{r7, pc}
 801da66:	bf00      	nop
 801da68:	20005518 	.word	0x20005518
 801da6c:	40004400 	.word	0x40004400

0801da70 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 801da70:	b580      	push	{r7, lr}
 801da72:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 801da74:	4b11      	ldr	r3, [pc, #68]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da76:	4a12      	ldr	r2, [pc, #72]	; (801dac0 <MX_USART6_UART_Init+0x50>)
 801da78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 801da7a:	4b10      	ldr	r3, [pc, #64]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801da80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801da82:	4b0e      	ldr	r3, [pc, #56]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da84:	2200      	movs	r2, #0
 801da86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 801da88:	4b0c      	ldr	r3, [pc, #48]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da8a:	2200      	movs	r2, #0
 801da8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801da8e:	4b0b      	ldr	r3, [pc, #44]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da90:	2200      	movs	r2, #0
 801da92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801da94:	4b09      	ldr	r3, [pc, #36]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da96:	220c      	movs	r2, #12
 801da98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801da9a:	4b08      	ldr	r3, [pc, #32]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801da9c:	2200      	movs	r2, #0
 801da9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801daa0:	4b06      	ldr	r3, [pc, #24]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801daa2:	2200      	movs	r2, #0
 801daa4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801daa6:	4805      	ldr	r0, [pc, #20]	; (801dabc <MX_USART6_UART_Init+0x4c>)
 801daa8:	f003 fa4a 	bl	8020f40 <HAL_UART_Init>
 801daac:	4603      	mov	r3, r0
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d001      	beq.n	801dab6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 801dab2:	f7ff fcdd 	bl	801d470 <Error_Handler>
  }

}
 801dab6:	bf00      	nop
 801dab8:	bd80      	pop	{r7, pc}
 801daba:	bf00      	nop
 801dabc:	200054d8 	.word	0x200054d8
 801dac0:	40011400 	.word	0x40011400

0801dac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801dac4:	b580      	push	{r7, lr}
 801dac6:	b08c      	sub	sp, #48	; 0x30
 801dac8:	af00      	add	r7, sp, #0
 801daca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dacc:	f107 031c 	add.w	r3, r7, #28
 801dad0:	2200      	movs	r2, #0
 801dad2:	601a      	str	r2, [r3, #0]
 801dad4:	605a      	str	r2, [r3, #4]
 801dad6:	609a      	str	r2, [r3, #8]
 801dad8:	60da      	str	r2, [r3, #12]
 801dada:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	4a45      	ldr	r2, [pc, #276]	; (801dbf8 <HAL_UART_MspInit+0x134>)
 801dae2:	4293      	cmp	r3, r2
 801dae4:	d12c      	bne.n	801db40 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801dae6:	2300      	movs	r3, #0
 801dae8:	61bb      	str	r3, [r7, #24]
 801daea:	4b44      	ldr	r3, [pc, #272]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801daec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801daee:	4a43      	ldr	r2, [pc, #268]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801daf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801daf4:	6413      	str	r3, [r2, #64]	; 0x40
 801daf6:	4b41      	ldr	r3, [pc, #260]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801daf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801dafe:	61bb      	str	r3, [r7, #24]
 801db00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801db02:	2300      	movs	r3, #0
 801db04:	617b      	str	r3, [r7, #20]
 801db06:	4b3d      	ldr	r3, [pc, #244]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db0a:	4a3c      	ldr	r2, [pc, #240]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db0c:	f043 0301 	orr.w	r3, r3, #1
 801db10:	6313      	str	r3, [r2, #48]	; 0x30
 801db12:	4b3a      	ldr	r3, [pc, #232]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db16:	f003 0301 	and.w	r3, r3, #1
 801db1a:	617b      	str	r3, [r7, #20]
 801db1c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 801db1e:	230c      	movs	r3, #12
 801db20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801db22:	2302      	movs	r3, #2
 801db24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801db26:	2300      	movs	r3, #0
 801db28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801db2a:	2300      	movs	r3, #0
 801db2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801db2e:	2307      	movs	r3, #7
 801db30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801db32:	f107 031c 	add.w	r3, r7, #28
 801db36:	4619      	mov	r1, r3
 801db38:	4831      	ldr	r0, [pc, #196]	; (801dc00 <HAL_UART_MspInit+0x13c>)
 801db3a:	f000 fdc7 	bl	801e6cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 801db3e:	e057      	b.n	801dbf0 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART6)
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	4a2f      	ldr	r2, [pc, #188]	; (801dc04 <HAL_UART_MspInit+0x140>)
 801db46:	4293      	cmp	r3, r2
 801db48:	d152      	bne.n	801dbf0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 801db4a:	2300      	movs	r3, #0
 801db4c:	613b      	str	r3, [r7, #16]
 801db4e:	4b2b      	ldr	r3, [pc, #172]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db52:	4a2a      	ldr	r2, [pc, #168]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db54:	f043 0320 	orr.w	r3, r3, #32
 801db58:	6453      	str	r3, [r2, #68]	; 0x44
 801db5a:	4b28      	ldr	r3, [pc, #160]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801db5e:	f003 0320 	and.w	r3, r3, #32
 801db62:	613b      	str	r3, [r7, #16]
 801db64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801db66:	2300      	movs	r3, #0
 801db68:	60fb      	str	r3, [r7, #12]
 801db6a:	4b24      	ldr	r3, [pc, #144]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db6e:	4a23      	ldr	r2, [pc, #140]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db70:	f043 0304 	orr.w	r3, r3, #4
 801db74:	6313      	str	r3, [r2, #48]	; 0x30
 801db76:	4b21      	ldr	r3, [pc, #132]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db7a:	f003 0304 	and.w	r3, r3, #4
 801db7e:	60fb      	str	r3, [r7, #12]
 801db80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801db82:	2300      	movs	r3, #0
 801db84:	60bb      	str	r3, [r7, #8]
 801db86:	4b1d      	ldr	r3, [pc, #116]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db8a:	4a1c      	ldr	r2, [pc, #112]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db8c:	f043 0301 	orr.w	r3, r3, #1
 801db90:	6313      	str	r3, [r2, #48]	; 0x30
 801db92:	4b1a      	ldr	r3, [pc, #104]	; (801dbfc <HAL_UART_MspInit+0x138>)
 801db94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db96:	f003 0301 	and.w	r3, r3, #1
 801db9a:	60bb      	str	r3, [r7, #8]
 801db9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801db9e:	2340      	movs	r3, #64	; 0x40
 801dba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dba2:	2302      	movs	r3, #2
 801dba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dba6:	2300      	movs	r3, #0
 801dba8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801dbaa:	2301      	movs	r3, #1
 801dbac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801dbae:	2308      	movs	r3, #8
 801dbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801dbb2:	f107 031c 	add.w	r3, r7, #28
 801dbb6:	4619      	mov	r1, r3
 801dbb8:	4813      	ldr	r0, [pc, #76]	; (801dc08 <HAL_UART_MspInit+0x144>)
 801dbba:	f000 fd87 	bl	801e6cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 801dbbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dbc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dbc4:	2302      	movs	r3, #2
 801dbc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801dbc8:	2301      	movs	r3, #1
 801dbca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801dbcc:	2301      	movs	r3, #1
 801dbce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 801dbd0:	2308      	movs	r3, #8
 801dbd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dbd4:	f107 031c 	add.w	r3, r7, #28
 801dbd8:	4619      	mov	r1, r3
 801dbda:	4809      	ldr	r0, [pc, #36]	; (801dc00 <HAL_UART_MspInit+0x13c>)
 801dbdc:	f000 fd76 	bl	801e6cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 801dbe0:	2200      	movs	r2, #0
 801dbe2:	2100      	movs	r1, #0
 801dbe4:	2047      	movs	r0, #71	; 0x47
 801dbe6:	f000 f9aa 	bl	801df3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 801dbea:	2047      	movs	r0, #71	; 0x47
 801dbec:	f000 f9c3 	bl	801df76 <HAL_NVIC_EnableIRQ>
}
 801dbf0:	bf00      	nop
 801dbf2:	3730      	adds	r7, #48	; 0x30
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	40004400 	.word	0x40004400
 801dbfc:	40023800 	.word	0x40023800
 801dc00:	40020000 	.word	0x40020000
 801dc04:	40011400 	.word	0x40011400
 801dc08:	40020800 	.word	0x40020800

0801dc0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 801dc0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 801dc44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801dc10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801dc12:	e003      	b.n	801dc1c <LoopCopyDataInit>

0801dc14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 801dc14:	4b0c      	ldr	r3, [pc, #48]	; (801dc48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801dc16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801dc18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801dc1a:	3104      	adds	r1, #4

0801dc1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801dc1c:	480b      	ldr	r0, [pc, #44]	; (801dc4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801dc1e:	4b0c      	ldr	r3, [pc, #48]	; (801dc50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801dc20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801dc22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 801dc24:	d3f6      	bcc.n	801dc14 <CopyDataInit>
  ldr  r2, =_sbss
 801dc26:	4a0b      	ldr	r2, [pc, #44]	; (801dc54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801dc28:	e002      	b.n	801dc30 <LoopFillZerobss>

0801dc2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801dc2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801dc2c:	f842 3b04 	str.w	r3, [r2], #4

0801dc30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801dc30:	4b09      	ldr	r3, [pc, #36]	; (801dc58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801dc32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 801dc34:	d3f9      	bcc.n	801dc2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801dc36:	f7ff fce7 	bl	801d608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801dc3a:	f004 f8bf 	bl	8021dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801dc3e:	f7ff f9e1 	bl	801d004 <main>
  bx  lr    
 801dc42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 801dc44:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 801dc48:	0802d138 	.word	0x0802d138
  ldr  r0, =_sdata
 801dc4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801dc50:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 801dc54:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 801dc58:	20005560 	.word	0x20005560

0801dc5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801dc5c:	e7fe      	b.n	801dc5c <ADC_IRQHandler>
	...

0801dc60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801dc60:	b580      	push	{r7, lr}
 801dc62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801dc64:	4b0e      	ldr	r3, [pc, #56]	; (801dca0 <HAL_Init+0x40>)
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	4a0d      	ldr	r2, [pc, #52]	; (801dca0 <HAL_Init+0x40>)
 801dc6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801dc6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 801dc70:	4b0b      	ldr	r3, [pc, #44]	; (801dca0 <HAL_Init+0x40>)
 801dc72:	681b      	ldr	r3, [r3, #0]
 801dc74:	4a0a      	ldr	r2, [pc, #40]	; (801dca0 <HAL_Init+0x40>)
 801dc76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801dc7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801dc7c:	4b08      	ldr	r3, [pc, #32]	; (801dca0 <HAL_Init+0x40>)
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4a07      	ldr	r2, [pc, #28]	; (801dca0 <HAL_Init+0x40>)
 801dc82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801dc86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801dc88:	2003      	movs	r0, #3
 801dc8a:	f000 f94d 	bl	801df28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801dc8e:	2000      	movs	r0, #0
 801dc90:	f000 f808 	bl	801dca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801dc94:	f7ff fbf0 	bl	801d478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801dc98:	2300      	movs	r3, #0
}
 801dc9a:	4618      	mov	r0, r3
 801dc9c:	bd80      	pop	{r7, pc}
 801dc9e:	bf00      	nop
 801dca0:	40023c00 	.word	0x40023c00

0801dca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b082      	sub	sp, #8
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 801dcac:	4b12      	ldr	r3, [pc, #72]	; (801dcf8 <HAL_InitTick+0x54>)
 801dcae:	681a      	ldr	r2, [r3, #0]
 801dcb0:	4b12      	ldr	r3, [pc, #72]	; (801dcfc <HAL_InitTick+0x58>)
 801dcb2:	781b      	ldrb	r3, [r3, #0]
 801dcb4:	4619      	mov	r1, r3
 801dcb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801dcba:	fbb3 f3f1 	udiv	r3, r3, r1
 801dcbe:	fbb2 f3f3 	udiv	r3, r2, r3
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f000 f965 	bl	801df92 <HAL_SYSTICK_Config>
 801dcc8:	4603      	mov	r3, r0
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d001      	beq.n	801dcd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801dcce:	2301      	movs	r3, #1
 801dcd0:	e00e      	b.n	801dcf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	2b0f      	cmp	r3, #15
 801dcd6:	d80a      	bhi.n	801dcee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801dcd8:	2200      	movs	r2, #0
 801dcda:	6879      	ldr	r1, [r7, #4]
 801dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dce0:	f000 f92d 	bl	801df3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801dce4:	4a06      	ldr	r2, [pc, #24]	; (801dd00 <HAL_InitTick+0x5c>)
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801dcea:	2300      	movs	r3, #0
 801dcec:	e000      	b.n	801dcf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801dcee:	2301      	movs	r3, #1
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	3708      	adds	r7, #8
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	bd80      	pop	{r7, pc}
 801dcf8:	20000000 	.word	0x20000000
 801dcfc:	20000008 	.word	0x20000008
 801dd00:	20000004 	.word	0x20000004

0801dd04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801dd04:	b480      	push	{r7}
 801dd06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801dd08:	4b06      	ldr	r3, [pc, #24]	; (801dd24 <HAL_IncTick+0x20>)
 801dd0a:	781b      	ldrb	r3, [r3, #0]
 801dd0c:	461a      	mov	r2, r3
 801dd0e:	4b06      	ldr	r3, [pc, #24]	; (801dd28 <HAL_IncTick+0x24>)
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	4413      	add	r3, r2
 801dd14:	4a04      	ldr	r2, [pc, #16]	; (801dd28 <HAL_IncTick+0x24>)
 801dd16:	6013      	str	r3, [r2, #0]
}
 801dd18:	bf00      	nop
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd20:	4770      	bx	lr
 801dd22:	bf00      	nop
 801dd24:	20000008 	.word	0x20000008
 801dd28:	20005558 	.word	0x20005558

0801dd2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801dd2c:	b480      	push	{r7}
 801dd2e:	af00      	add	r7, sp, #0
  return uwTick;
 801dd30:	4b03      	ldr	r3, [pc, #12]	; (801dd40 <HAL_GetTick+0x14>)
 801dd32:	681b      	ldr	r3, [r3, #0]
}
 801dd34:	4618      	mov	r0, r3
 801dd36:	46bd      	mov	sp, r7
 801dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd3c:	4770      	bx	lr
 801dd3e:	bf00      	nop
 801dd40:	20005558 	.word	0x20005558

0801dd44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801dd44:	b580      	push	{r7, lr}
 801dd46:	b084      	sub	sp, #16
 801dd48:	af00      	add	r7, sp, #0
 801dd4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801dd4c:	f7ff ffee 	bl	801dd2c <HAL_GetTick>
 801dd50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd5c:	d005      	beq.n	801dd6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801dd5e:	4b09      	ldr	r3, [pc, #36]	; (801dd84 <HAL_Delay+0x40>)
 801dd60:	781b      	ldrb	r3, [r3, #0]
 801dd62:	461a      	mov	r2, r3
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	4413      	add	r3, r2
 801dd68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 801dd6a:	bf00      	nop
 801dd6c:	f7ff ffde 	bl	801dd2c <HAL_GetTick>
 801dd70:	4602      	mov	r2, r0
 801dd72:	68bb      	ldr	r3, [r7, #8]
 801dd74:	1ad3      	subs	r3, r2, r3
 801dd76:	68fa      	ldr	r2, [r7, #12]
 801dd78:	429a      	cmp	r2, r3
 801dd7a:	d8f7      	bhi.n	801dd6c <HAL_Delay+0x28>
  {
  }
}
 801dd7c:	bf00      	nop
 801dd7e:	3710      	adds	r7, #16
 801dd80:	46bd      	mov	sp, r7
 801dd82:	bd80      	pop	{r7, pc}
 801dd84:	20000008 	.word	0x20000008

0801dd88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801dd88:	b480      	push	{r7}
 801dd8a:	b085      	sub	sp, #20
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801dd90:	687b      	ldr	r3, [r7, #4]
 801dd92:	f003 0307 	and.w	r3, r3, #7
 801dd96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801dd98:	4b0c      	ldr	r3, [pc, #48]	; (801ddcc <__NVIC_SetPriorityGrouping+0x44>)
 801dd9a:	68db      	ldr	r3, [r3, #12]
 801dd9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801dd9e:	68ba      	ldr	r2, [r7, #8]
 801dda0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801dda4:	4013      	ands	r3, r2
 801dda6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801dda8:	68fb      	ldr	r3, [r7, #12]
 801ddaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801ddac:	68bb      	ldr	r3, [r7, #8]
 801ddae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801ddb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801ddb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ddb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801ddba:	4a04      	ldr	r2, [pc, #16]	; (801ddcc <__NVIC_SetPriorityGrouping+0x44>)
 801ddbc:	68bb      	ldr	r3, [r7, #8]
 801ddbe:	60d3      	str	r3, [r2, #12]
}
 801ddc0:	bf00      	nop
 801ddc2:	3714      	adds	r7, #20
 801ddc4:	46bd      	mov	sp, r7
 801ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddca:	4770      	bx	lr
 801ddcc:	e000ed00 	.word	0xe000ed00

0801ddd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801ddd0:	b480      	push	{r7}
 801ddd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801ddd4:	4b04      	ldr	r3, [pc, #16]	; (801dde8 <__NVIC_GetPriorityGrouping+0x18>)
 801ddd6:	68db      	ldr	r3, [r3, #12]
 801ddd8:	0a1b      	lsrs	r3, r3, #8
 801ddda:	f003 0307 	and.w	r3, r3, #7
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	46bd      	mov	sp, r7
 801dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dde6:	4770      	bx	lr
 801dde8:	e000ed00 	.word	0xe000ed00

0801ddec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801ddec:	b480      	push	{r7}
 801ddee:	b083      	sub	sp, #12
 801ddf0:	af00      	add	r7, sp, #0
 801ddf2:	4603      	mov	r3, r0
 801ddf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ddf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	db0b      	blt.n	801de16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ddfe:	79fb      	ldrb	r3, [r7, #7]
 801de00:	f003 021f 	and.w	r2, r3, #31
 801de04:	4907      	ldr	r1, [pc, #28]	; (801de24 <__NVIC_EnableIRQ+0x38>)
 801de06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de0a:	095b      	lsrs	r3, r3, #5
 801de0c:	2001      	movs	r0, #1
 801de0e:	fa00 f202 	lsl.w	r2, r0, r2
 801de12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 801de16:	bf00      	nop
 801de18:	370c      	adds	r7, #12
 801de1a:	46bd      	mov	sp, r7
 801de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de20:	4770      	bx	lr
 801de22:	bf00      	nop
 801de24:	e000e100 	.word	0xe000e100

0801de28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801de28:	b480      	push	{r7}
 801de2a:	b083      	sub	sp, #12
 801de2c:	af00      	add	r7, sp, #0
 801de2e:	4603      	mov	r3, r0
 801de30:	6039      	str	r1, [r7, #0]
 801de32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801de34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de38:	2b00      	cmp	r3, #0
 801de3a:	db0a      	blt.n	801de52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801de3c:	683b      	ldr	r3, [r7, #0]
 801de3e:	b2da      	uxtb	r2, r3
 801de40:	490c      	ldr	r1, [pc, #48]	; (801de74 <__NVIC_SetPriority+0x4c>)
 801de42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801de46:	0112      	lsls	r2, r2, #4
 801de48:	b2d2      	uxtb	r2, r2
 801de4a:	440b      	add	r3, r1
 801de4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801de50:	e00a      	b.n	801de68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801de52:	683b      	ldr	r3, [r7, #0]
 801de54:	b2da      	uxtb	r2, r3
 801de56:	4908      	ldr	r1, [pc, #32]	; (801de78 <__NVIC_SetPriority+0x50>)
 801de58:	79fb      	ldrb	r3, [r7, #7]
 801de5a:	f003 030f 	and.w	r3, r3, #15
 801de5e:	3b04      	subs	r3, #4
 801de60:	0112      	lsls	r2, r2, #4
 801de62:	b2d2      	uxtb	r2, r2
 801de64:	440b      	add	r3, r1
 801de66:	761a      	strb	r2, [r3, #24]
}
 801de68:	bf00      	nop
 801de6a:	370c      	adds	r7, #12
 801de6c:	46bd      	mov	sp, r7
 801de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de72:	4770      	bx	lr
 801de74:	e000e100 	.word	0xe000e100
 801de78:	e000ed00 	.word	0xe000ed00

0801de7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801de7c:	b480      	push	{r7}
 801de7e:	b089      	sub	sp, #36	; 0x24
 801de80:	af00      	add	r7, sp, #0
 801de82:	60f8      	str	r0, [r7, #12]
 801de84:	60b9      	str	r1, [r7, #8]
 801de86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	f003 0307 	and.w	r3, r3, #7
 801de8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801de90:	69fb      	ldr	r3, [r7, #28]
 801de92:	f1c3 0307 	rsb	r3, r3, #7
 801de96:	2b04      	cmp	r3, #4
 801de98:	bf28      	it	cs
 801de9a:	2304      	movcs	r3, #4
 801de9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801de9e:	69fb      	ldr	r3, [r7, #28]
 801dea0:	3304      	adds	r3, #4
 801dea2:	2b06      	cmp	r3, #6
 801dea4:	d902      	bls.n	801deac <NVIC_EncodePriority+0x30>
 801dea6:	69fb      	ldr	r3, [r7, #28]
 801dea8:	3b03      	subs	r3, #3
 801deaa:	e000      	b.n	801deae <NVIC_EncodePriority+0x32>
 801deac:	2300      	movs	r3, #0
 801deae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801deb0:	f04f 32ff 	mov.w	r2, #4294967295
 801deb4:	69bb      	ldr	r3, [r7, #24]
 801deb6:	fa02 f303 	lsl.w	r3, r2, r3
 801deba:	43da      	mvns	r2, r3
 801debc:	68bb      	ldr	r3, [r7, #8]
 801debe:	401a      	ands	r2, r3
 801dec0:	697b      	ldr	r3, [r7, #20]
 801dec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801dec4:	f04f 31ff 	mov.w	r1, #4294967295
 801dec8:	697b      	ldr	r3, [r7, #20]
 801deca:	fa01 f303 	lsl.w	r3, r1, r3
 801dece:	43d9      	mvns	r1, r3
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ded4:	4313      	orrs	r3, r2
         );
}
 801ded6:	4618      	mov	r0, r3
 801ded8:	3724      	adds	r7, #36	; 0x24
 801deda:	46bd      	mov	sp, r7
 801dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee0:	4770      	bx	lr
	...

0801dee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801dee4:	b580      	push	{r7, lr}
 801dee6:	b082      	sub	sp, #8
 801dee8:	af00      	add	r7, sp, #0
 801deea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	3b01      	subs	r3, #1
 801def0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801def4:	d301      	bcc.n	801defa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801def6:	2301      	movs	r3, #1
 801def8:	e00f      	b.n	801df1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801defa:	4a0a      	ldr	r2, [pc, #40]	; (801df24 <SysTick_Config+0x40>)
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	3b01      	subs	r3, #1
 801df00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801df02:	210f      	movs	r1, #15
 801df04:	f04f 30ff 	mov.w	r0, #4294967295
 801df08:	f7ff ff8e 	bl	801de28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801df0c:	4b05      	ldr	r3, [pc, #20]	; (801df24 <SysTick_Config+0x40>)
 801df0e:	2200      	movs	r2, #0
 801df10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801df12:	4b04      	ldr	r3, [pc, #16]	; (801df24 <SysTick_Config+0x40>)
 801df14:	2207      	movs	r2, #7
 801df16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801df18:	2300      	movs	r3, #0
}
 801df1a:	4618      	mov	r0, r3
 801df1c:	3708      	adds	r7, #8
 801df1e:	46bd      	mov	sp, r7
 801df20:	bd80      	pop	{r7, pc}
 801df22:	bf00      	nop
 801df24:	e000e010 	.word	0xe000e010

0801df28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801df28:	b580      	push	{r7, lr}
 801df2a:	b082      	sub	sp, #8
 801df2c:	af00      	add	r7, sp, #0
 801df2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801df30:	6878      	ldr	r0, [r7, #4]
 801df32:	f7ff ff29 	bl	801dd88 <__NVIC_SetPriorityGrouping>
}
 801df36:	bf00      	nop
 801df38:	3708      	adds	r7, #8
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}

0801df3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801df3e:	b580      	push	{r7, lr}
 801df40:	b086      	sub	sp, #24
 801df42:	af00      	add	r7, sp, #0
 801df44:	4603      	mov	r3, r0
 801df46:	60b9      	str	r1, [r7, #8]
 801df48:	607a      	str	r2, [r7, #4]
 801df4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801df4c:	2300      	movs	r3, #0
 801df4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801df50:	f7ff ff3e 	bl	801ddd0 <__NVIC_GetPriorityGrouping>
 801df54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801df56:	687a      	ldr	r2, [r7, #4]
 801df58:	68b9      	ldr	r1, [r7, #8]
 801df5a:	6978      	ldr	r0, [r7, #20]
 801df5c:	f7ff ff8e 	bl	801de7c <NVIC_EncodePriority>
 801df60:	4602      	mov	r2, r0
 801df62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801df66:	4611      	mov	r1, r2
 801df68:	4618      	mov	r0, r3
 801df6a:	f7ff ff5d 	bl	801de28 <__NVIC_SetPriority>
}
 801df6e:	bf00      	nop
 801df70:	3718      	adds	r7, #24
 801df72:	46bd      	mov	sp, r7
 801df74:	bd80      	pop	{r7, pc}

0801df76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801df76:	b580      	push	{r7, lr}
 801df78:	b082      	sub	sp, #8
 801df7a:	af00      	add	r7, sp, #0
 801df7c:	4603      	mov	r3, r0
 801df7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801df80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801df84:	4618      	mov	r0, r3
 801df86:	f7ff ff31 	bl	801ddec <__NVIC_EnableIRQ>
}
 801df8a:	bf00      	nop
 801df8c:	3708      	adds	r7, #8
 801df8e:	46bd      	mov	sp, r7
 801df90:	bd80      	pop	{r7, pc}

0801df92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801df92:	b580      	push	{r7, lr}
 801df94:	b082      	sub	sp, #8
 801df96:	af00      	add	r7, sp, #0
 801df98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801df9a:	6878      	ldr	r0, [r7, #4]
 801df9c:	f7ff ffa2 	bl	801dee4 <SysTick_Config>
 801dfa0:	4603      	mov	r3, r0
}
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	3708      	adds	r7, #8
 801dfa6:	46bd      	mov	sp, r7
 801dfa8:	bd80      	pop	{r7, pc}
	...

0801dfac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801dfac:	b580      	push	{r7, lr}
 801dfae:	b086      	sub	sp, #24
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801dfb8:	f7ff feb8 	bl	801dd2c <HAL_GetTick>
 801dfbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d101      	bne.n	801dfc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 801dfc4:	2301      	movs	r3, #1
 801dfc6:	e099      	b.n	801e0fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	2200      	movs	r2, #0
 801dfcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2202      	movs	r2, #2
 801dfd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	681b      	ldr	r3, [r3, #0]
 801dfdc:	681a      	ldr	r2, [r3, #0]
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	f022 0201 	bic.w	r2, r2, #1
 801dfe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801dfe8:	e00f      	b.n	801e00a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801dfea:	f7ff fe9f 	bl	801dd2c <HAL_GetTick>
 801dfee:	4602      	mov	r2, r0
 801dff0:	693b      	ldr	r3, [r7, #16]
 801dff2:	1ad3      	subs	r3, r2, r3
 801dff4:	2b05      	cmp	r3, #5
 801dff6:	d908      	bls.n	801e00a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	2220      	movs	r2, #32
 801dffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	2203      	movs	r2, #3
 801e002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 801e006:	2303      	movs	r3, #3
 801e008:	e078      	b.n	801e0fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	f003 0301 	and.w	r3, r3, #1
 801e014:	2b00      	cmp	r3, #0
 801e016:	d1e8      	bne.n	801dfea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	681b      	ldr	r3, [r3, #0]
 801e01e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801e020:	697a      	ldr	r2, [r7, #20]
 801e022:	4b38      	ldr	r3, [pc, #224]	; (801e104 <HAL_DMA_Init+0x158>)
 801e024:	4013      	ands	r3, r2
 801e026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	685a      	ldr	r2, [r3, #4]
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	689b      	ldr	r3, [r3, #8]
 801e030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	691b      	ldr	r3, [r3, #16]
 801e03c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801e042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	699b      	ldr	r3, [r3, #24]
 801e048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801e04e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	6a1b      	ldr	r3, [r3, #32]
 801e054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 801e056:	697a      	ldr	r2, [r7, #20]
 801e058:	4313      	orrs	r3, r2
 801e05a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e060:	2b04      	cmp	r3, #4
 801e062:	d107      	bne.n	801e074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e06c:	4313      	orrs	r3, r2
 801e06e:	697a      	ldr	r2, [r7, #20]
 801e070:	4313      	orrs	r3, r2
 801e072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	697a      	ldr	r2, [r7, #20]
 801e07a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	681b      	ldr	r3, [r3, #0]
 801e080:	695b      	ldr	r3, [r3, #20]
 801e082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801e084:	697b      	ldr	r3, [r7, #20]
 801e086:	f023 0307 	bic.w	r3, r3, #7
 801e08a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e090:	697a      	ldr	r2, [r7, #20]
 801e092:	4313      	orrs	r3, r2
 801e094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e09a:	2b04      	cmp	r3, #4
 801e09c:	d117      	bne.n	801e0ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0a2:	697a      	ldr	r2, [r7, #20]
 801e0a4:	4313      	orrs	r3, r2
 801e0a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d00e      	beq.n	801e0ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801e0b0:	6878      	ldr	r0, [r7, #4]
 801e0b2:	f000 fa91 	bl	801e5d8 <DMA_CheckFifoParam>
 801e0b6:	4603      	mov	r3, r0
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d008      	beq.n	801e0ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	2240      	movs	r2, #64	; 0x40
 801e0c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	2201      	movs	r2, #1
 801e0c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 801e0ca:	2301      	movs	r3, #1
 801e0cc:	e016      	b.n	801e0fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	697a      	ldr	r2, [r7, #20]
 801e0d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801e0d6:	6878      	ldr	r0, [r7, #4]
 801e0d8:	f000 fa48 	bl	801e56c <DMA_CalcBaseAndBitshift>
 801e0dc:	4603      	mov	r3, r0
 801e0de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e0e4:	223f      	movs	r2, #63	; 0x3f
 801e0e6:	409a      	lsls	r2, r3
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	2200      	movs	r2, #0
 801e0f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	2201      	movs	r2, #1
 801e0f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 801e0fa:	2300      	movs	r3, #0
}
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	3718      	adds	r7, #24
 801e100:	46bd      	mov	sp, r7
 801e102:	bd80      	pop	{r7, pc}
 801e104:	f010803f 	.word	0xf010803f

0801e108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e108:	b580      	push	{r7, lr}
 801e10a:	b086      	sub	sp, #24
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	60f8      	str	r0, [r7, #12]
 801e110:	60b9      	str	r1, [r7, #8]
 801e112:	607a      	str	r2, [r7, #4]
 801e114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801e116:	2300      	movs	r3, #0
 801e118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e11a:	68fb      	ldr	r3, [r7, #12]
 801e11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e11e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 801e120:	68fb      	ldr	r3, [r7, #12]
 801e122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e126:	2b01      	cmp	r3, #1
 801e128:	d101      	bne.n	801e12e <HAL_DMA_Start_IT+0x26>
 801e12a:	2302      	movs	r3, #2
 801e12c:	e040      	b.n	801e1b0 <HAL_DMA_Start_IT+0xa8>
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	2201      	movs	r2, #1
 801e132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 801e136:	68fb      	ldr	r3, [r7, #12]
 801e138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e13c:	b2db      	uxtb	r3, r3
 801e13e:	2b01      	cmp	r3, #1
 801e140:	d12f      	bne.n	801e1a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	2202      	movs	r2, #2
 801e146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801e14a:	68fb      	ldr	r3, [r7, #12]
 801e14c:	2200      	movs	r2, #0
 801e14e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801e150:	683b      	ldr	r3, [r7, #0]
 801e152:	687a      	ldr	r2, [r7, #4]
 801e154:	68b9      	ldr	r1, [r7, #8]
 801e156:	68f8      	ldr	r0, [r7, #12]
 801e158:	f000 f9da 	bl	801e510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e15c:	68fb      	ldr	r3, [r7, #12]
 801e15e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e160:	223f      	movs	r2, #63	; 0x3f
 801e162:	409a      	lsls	r2, r3
 801e164:	693b      	ldr	r3, [r7, #16]
 801e166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 801e168:	68fb      	ldr	r3, [r7, #12]
 801e16a:	681b      	ldr	r3, [r3, #0]
 801e16c:	681a      	ldr	r2, [r3, #0]
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	f042 0216 	orr.w	r2, r2, #22
 801e176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d007      	beq.n	801e190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	681b      	ldr	r3, [r3, #0]
 801e184:	681a      	ldr	r2, [r3, #0]
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	f042 0208 	orr.w	r2, r2, #8
 801e18e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	681a      	ldr	r2, [r3, #0]
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	f042 0201 	orr.w	r2, r2, #1
 801e19e:	601a      	str	r2, [r3, #0]
 801e1a0:	e005      	b.n	801e1ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	2200      	movs	r2, #0
 801e1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801e1aa:	2302      	movs	r3, #2
 801e1ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 801e1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801e1b0:	4618      	mov	r0, r3
 801e1b2:	3718      	adds	r7, #24
 801e1b4:	46bd      	mov	sp, r7
 801e1b6:	bd80      	pop	{r7, pc}

0801e1b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801e1b8:	b480      	push	{r7}
 801e1ba:	b083      	sub	sp, #12
 801e1bc:	af00      	add	r7, sp, #0
 801e1be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e1c6:	b2db      	uxtb	r3, r3
 801e1c8:	2b02      	cmp	r3, #2
 801e1ca:	d004      	beq.n	801e1d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801e1cc:	687b      	ldr	r3, [r7, #4]
 801e1ce:	2280      	movs	r2, #128	; 0x80
 801e1d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	e00c      	b.n	801e1f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	2205      	movs	r2, #5
 801e1da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801e1de:	687b      	ldr	r3, [r7, #4]
 801e1e0:	681b      	ldr	r3, [r3, #0]
 801e1e2:	681a      	ldr	r2, [r3, #0]
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	f022 0201 	bic.w	r2, r2, #1
 801e1ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801e1ee:	2300      	movs	r3, #0
}
 801e1f0:	4618      	mov	r0, r3
 801e1f2:	370c      	adds	r7, #12
 801e1f4:	46bd      	mov	sp, r7
 801e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1fa:	4770      	bx	lr

0801e1fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801e1fc:	b580      	push	{r7, lr}
 801e1fe:	b086      	sub	sp, #24
 801e200:	af00      	add	r7, sp, #0
 801e202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 801e204:	2300      	movs	r3, #0
 801e206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 801e208:	4b92      	ldr	r3, [pc, #584]	; (801e454 <HAL_DMA_IRQHandler+0x258>)
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	4a92      	ldr	r2, [pc, #584]	; (801e458 <HAL_DMA_IRQHandler+0x25c>)
 801e20e:	fba2 2303 	umull	r2, r3, r2, r3
 801e212:	0a9b      	lsrs	r3, r3, #10
 801e214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801e21a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 801e21c:	693b      	ldr	r3, [r7, #16]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e226:	2208      	movs	r2, #8
 801e228:	409a      	lsls	r2, r3
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	4013      	ands	r3, r2
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d01a      	beq.n	801e268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801e232:	687b      	ldr	r3, [r7, #4]
 801e234:	681b      	ldr	r3, [r3, #0]
 801e236:	681b      	ldr	r3, [r3, #0]
 801e238:	f003 0304 	and.w	r3, r3, #4
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d013      	beq.n	801e268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	681b      	ldr	r3, [r3, #0]
 801e244:	681a      	ldr	r2, [r3, #0]
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	f022 0204 	bic.w	r2, r2, #4
 801e24e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e254:	2208      	movs	r2, #8
 801e256:	409a      	lsls	r2, r3
 801e258:	693b      	ldr	r3, [r7, #16]
 801e25a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e260:	f043 0201 	orr.w	r2, r3, #1
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e26c:	2201      	movs	r2, #1
 801e26e:	409a      	lsls	r2, r3
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	4013      	ands	r3, r2
 801e274:	2b00      	cmp	r3, #0
 801e276:	d012      	beq.n	801e29e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	695b      	ldr	r3, [r3, #20]
 801e27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e282:	2b00      	cmp	r3, #0
 801e284:	d00b      	beq.n	801e29e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e28a:	2201      	movs	r2, #1
 801e28c:	409a      	lsls	r2, r3
 801e28e:	693b      	ldr	r3, [r7, #16]
 801e290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e296:	f043 0202 	orr.w	r2, r3, #2
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2a2:	2204      	movs	r2, #4
 801e2a4:	409a      	lsls	r2, r3
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	4013      	ands	r3, r2
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d012      	beq.n	801e2d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	f003 0302 	and.w	r3, r3, #2
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d00b      	beq.n	801e2d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2c0:	2204      	movs	r2, #4
 801e2c2:	409a      	lsls	r2, r3
 801e2c4:	693b      	ldr	r3, [r7, #16]
 801e2c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e2cc:	f043 0204 	orr.w	r2, r3, #4
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2d8:	2210      	movs	r2, #16
 801e2da:	409a      	lsls	r2, r3
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	4013      	ands	r3, r2
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d043      	beq.n	801e36c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	681b      	ldr	r3, [r3, #0]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	f003 0308 	and.w	r3, r3, #8
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d03c      	beq.n	801e36c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e2f6:	2210      	movs	r2, #16
 801e2f8:	409a      	lsls	r2, r3
 801e2fa:	693b      	ldr	r3, [r7, #16]
 801e2fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d018      	beq.n	801e33e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e316:	2b00      	cmp	r3, #0
 801e318:	d108      	bne.n	801e32c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e31e:	2b00      	cmp	r3, #0
 801e320:	d024      	beq.n	801e36c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e326:	6878      	ldr	r0, [r7, #4]
 801e328:	4798      	blx	r3
 801e32a:	e01f      	b.n	801e36c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e330:	2b00      	cmp	r3, #0
 801e332:	d01b      	beq.n	801e36c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	4798      	blx	r3
 801e33c:	e016      	b.n	801e36c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	681b      	ldr	r3, [r3, #0]
 801e344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d107      	bne.n	801e35c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	681a      	ldr	r2, [r3, #0]
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	f022 0208 	bic.w	r2, r2, #8
 801e35a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e360:	2b00      	cmp	r3, #0
 801e362:	d003      	beq.n	801e36c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e368:	6878      	ldr	r0, [r7, #4]
 801e36a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e370:	2220      	movs	r2, #32
 801e372:	409a      	lsls	r2, r3
 801e374:	68fb      	ldr	r3, [r7, #12]
 801e376:	4013      	ands	r3, r2
 801e378:	2b00      	cmp	r3, #0
 801e37a:	f000 808e 	beq.w	801e49a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f003 0310 	and.w	r3, r3, #16
 801e388:	2b00      	cmp	r3, #0
 801e38a:	f000 8086 	beq.w	801e49a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e392:	2220      	movs	r2, #32
 801e394:	409a      	lsls	r2, r3
 801e396:	693b      	ldr	r3, [r7, #16]
 801e398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801e3a0:	b2db      	uxtb	r3, r3
 801e3a2:	2b05      	cmp	r3, #5
 801e3a4:	d136      	bne.n	801e414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	681a      	ldr	r2, [r3, #0]
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	f022 0216 	bic.w	r2, r2, #22
 801e3b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	681b      	ldr	r3, [r3, #0]
 801e3ba:	695a      	ldr	r2, [r3, #20]
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801e3c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d103      	bne.n	801e3d6 <HAL_DMA_IRQHandler+0x1da>
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	d007      	beq.n	801e3e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	681a      	ldr	r2, [r3, #0]
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	f022 0208 	bic.w	r2, r2, #8
 801e3e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e3ea:	223f      	movs	r2, #63	; 0x3f
 801e3ec:	409a      	lsls	r2, r3
 801e3ee:	693b      	ldr	r3, [r7, #16]
 801e3f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	2200      	movs	r2, #0
 801e3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	2201      	movs	r2, #1
 801e3fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e406:	2b00      	cmp	r3, #0
 801e408:	d07d      	beq.n	801e506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e40e:	6878      	ldr	r0, [r7, #4]
 801e410:	4798      	blx	r3
        }
        return;
 801e412:	e078      	b.n	801e506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d01c      	beq.n	801e45c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	681b      	ldr	r3, [r3, #0]
 801e426:	681b      	ldr	r3, [r3, #0]
 801e428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801e42c:	2b00      	cmp	r3, #0
 801e42e:	d108      	bne.n	801e442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e434:	2b00      	cmp	r3, #0
 801e436:	d030      	beq.n	801e49a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e43c:	6878      	ldr	r0, [r7, #4]
 801e43e:	4798      	blx	r3
 801e440:	e02b      	b.n	801e49a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e446:	2b00      	cmp	r3, #0
 801e448:	d027      	beq.n	801e49a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e44e:	6878      	ldr	r0, [r7, #4]
 801e450:	4798      	blx	r3
 801e452:	e022      	b.n	801e49a <HAL_DMA_IRQHandler+0x29e>
 801e454:	20000000 	.word	0x20000000
 801e458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e466:	2b00      	cmp	r3, #0
 801e468:	d10f      	bne.n	801e48a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	681b      	ldr	r3, [r3, #0]
 801e46e:	681a      	ldr	r2, [r3, #0]
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	f022 0210 	bic.w	r2, r2, #16
 801e478:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	2200      	movs	r2, #0
 801e47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801e482:	687b      	ldr	r3, [r7, #4]
 801e484:	2201      	movs	r2, #1
 801e486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d003      	beq.n	801e49a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e496:	6878      	ldr	r0, [r7, #4]
 801e498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d032      	beq.n	801e508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 801e4a2:	687b      	ldr	r3, [r7, #4]
 801e4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801e4a6:	f003 0301 	and.w	r3, r3, #1
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d022      	beq.n	801e4f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 801e4ae:	687b      	ldr	r3, [r7, #4]
 801e4b0:	2205      	movs	r2, #5
 801e4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	681a      	ldr	r2, [r3, #0]
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	f022 0201 	bic.w	r2, r2, #1
 801e4c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 801e4c6:	68bb      	ldr	r3, [r7, #8]
 801e4c8:	3301      	adds	r3, #1
 801e4ca:	60bb      	str	r3, [r7, #8]
 801e4cc:	697a      	ldr	r2, [r7, #20]
 801e4ce:	429a      	cmp	r2, r3
 801e4d0:	d307      	bcc.n	801e4e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	681b      	ldr	r3, [r3, #0]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	f003 0301 	and.w	r3, r3, #1
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d1f2      	bne.n	801e4c6 <HAL_DMA_IRQHandler+0x2ca>
 801e4e0:	e000      	b.n	801e4e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801e4e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	2200      	movs	r2, #0
 801e4e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	2201      	movs	r2, #1
 801e4f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 801e4f4:	687b      	ldr	r3, [r7, #4]
 801e4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d005      	beq.n	801e508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e500:	6878      	ldr	r0, [r7, #4]
 801e502:	4798      	blx	r3
 801e504:	e000      	b.n	801e508 <HAL_DMA_IRQHandler+0x30c>
        return;
 801e506:	bf00      	nop
    }
  }
}
 801e508:	3718      	adds	r7, #24
 801e50a:	46bd      	mov	sp, r7
 801e50c:	bd80      	pop	{r7, pc}
 801e50e:	bf00      	nop

0801e510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801e510:	b480      	push	{r7}
 801e512:	b085      	sub	sp, #20
 801e514:	af00      	add	r7, sp, #0
 801e516:	60f8      	str	r0, [r7, #12]
 801e518:	60b9      	str	r1, [r7, #8]
 801e51a:	607a      	str	r2, [r7, #4]
 801e51c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801e51e:	68fb      	ldr	r3, [r7, #12]
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	681a      	ldr	r2, [r3, #0]
 801e524:	68fb      	ldr	r3, [r7, #12]
 801e526:	681b      	ldr	r3, [r3, #0]
 801e528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801e52c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	683a      	ldr	r2, [r7, #0]
 801e534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801e536:	68fb      	ldr	r3, [r7, #12]
 801e538:	689b      	ldr	r3, [r3, #8]
 801e53a:	2b40      	cmp	r3, #64	; 0x40
 801e53c:	d108      	bne.n	801e550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	687a      	ldr	r2, [r7, #4]
 801e544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 801e546:	68fb      	ldr	r3, [r7, #12]
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	68ba      	ldr	r2, [r7, #8]
 801e54c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801e54e:	e007      	b.n	801e560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801e550:	68fb      	ldr	r3, [r7, #12]
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	68ba      	ldr	r2, [r7, #8]
 801e556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	681b      	ldr	r3, [r3, #0]
 801e55c:	687a      	ldr	r2, [r7, #4]
 801e55e:	60da      	str	r2, [r3, #12]
}
 801e560:	bf00      	nop
 801e562:	3714      	adds	r7, #20
 801e564:	46bd      	mov	sp, r7
 801e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e56a:	4770      	bx	lr

0801e56c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801e56c:	b480      	push	{r7}
 801e56e:	b085      	sub	sp, #20
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	b2db      	uxtb	r3, r3
 801e57a:	3b10      	subs	r3, #16
 801e57c:	4a14      	ldr	r2, [pc, #80]	; (801e5d0 <DMA_CalcBaseAndBitshift+0x64>)
 801e57e:	fba2 2303 	umull	r2, r3, r2, r3
 801e582:	091b      	lsrs	r3, r3, #4
 801e584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 801e586:	4a13      	ldr	r2, [pc, #76]	; (801e5d4 <DMA_CalcBaseAndBitshift+0x68>)
 801e588:	68fb      	ldr	r3, [r7, #12]
 801e58a:	4413      	add	r3, r2
 801e58c:	781b      	ldrb	r3, [r3, #0]
 801e58e:	461a      	mov	r2, r3
 801e590:	687b      	ldr	r3, [r7, #4]
 801e592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	2b03      	cmp	r3, #3
 801e598:	d909      	bls.n	801e5ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e5a2:	f023 0303 	bic.w	r3, r3, #3
 801e5a6:	1d1a      	adds	r2, r3, #4
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	659a      	str	r2, [r3, #88]	; 0x58
 801e5ac:	e007      	b.n	801e5be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801e5b6:	f023 0303 	bic.w	r3, r3, #3
 801e5ba:	687a      	ldr	r2, [r7, #4]
 801e5bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 801e5c2:	4618      	mov	r0, r3
 801e5c4:	3714      	adds	r7, #20
 801e5c6:	46bd      	mov	sp, r7
 801e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5cc:	4770      	bx	lr
 801e5ce:	bf00      	nop
 801e5d0:	aaaaaaab 	.word	0xaaaaaaab
 801e5d4:	0802d0a4 	.word	0x0802d0a4

0801e5d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801e5d8:	b480      	push	{r7}
 801e5da:	b085      	sub	sp, #20
 801e5dc:	af00      	add	r7, sp, #0
 801e5de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	699b      	ldr	r3, [r3, #24]
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d11f      	bne.n	801e632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801e5f2:	68bb      	ldr	r3, [r7, #8]
 801e5f4:	2b03      	cmp	r3, #3
 801e5f6:	d855      	bhi.n	801e6a4 <DMA_CheckFifoParam+0xcc>
 801e5f8:	a201      	add	r2, pc, #4	; (adr r2, 801e600 <DMA_CheckFifoParam+0x28>)
 801e5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e5fe:	bf00      	nop
 801e600:	0801e611 	.word	0x0801e611
 801e604:	0801e623 	.word	0x0801e623
 801e608:	0801e611 	.word	0x0801e611
 801e60c:	0801e6a5 	.word	0x0801e6a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e618:	2b00      	cmp	r3, #0
 801e61a:	d045      	beq.n	801e6a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 801e61c:	2301      	movs	r3, #1
 801e61e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e620:	e042      	b.n	801e6a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e62a:	d13f      	bne.n	801e6ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 801e62c:	2301      	movs	r3, #1
 801e62e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e630:	e03c      	b.n	801e6ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	699b      	ldr	r3, [r3, #24]
 801e636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e63a:	d121      	bne.n	801e680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 801e63c:	68bb      	ldr	r3, [r7, #8]
 801e63e:	2b03      	cmp	r3, #3
 801e640:	d836      	bhi.n	801e6b0 <DMA_CheckFifoParam+0xd8>
 801e642:	a201      	add	r2, pc, #4	; (adr r2, 801e648 <DMA_CheckFifoParam+0x70>)
 801e644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e648:	0801e659 	.word	0x0801e659
 801e64c:	0801e65f 	.word	0x0801e65f
 801e650:	0801e659 	.word	0x0801e659
 801e654:	0801e671 	.word	0x0801e671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 801e658:	2301      	movs	r3, #1
 801e65a:	73fb      	strb	r3, [r7, #15]
      break;
 801e65c:	e02f      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e666:	2b00      	cmp	r3, #0
 801e668:	d024      	beq.n	801e6b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 801e66a:	2301      	movs	r3, #1
 801e66c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801e66e:	e021      	b.n	801e6b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801e678:	d11e      	bne.n	801e6b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 801e67a:	2301      	movs	r3, #1
 801e67c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 801e67e:	e01b      	b.n	801e6b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 801e680:	68bb      	ldr	r3, [r7, #8]
 801e682:	2b02      	cmp	r3, #2
 801e684:	d902      	bls.n	801e68c <DMA_CheckFifoParam+0xb4>
 801e686:	2b03      	cmp	r3, #3
 801e688:	d003      	beq.n	801e692 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 801e68a:	e018      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 801e68c:	2301      	movs	r3, #1
 801e68e:	73fb      	strb	r3, [r7, #15]
      break;
 801e690:	e015      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801e69a:	2b00      	cmp	r3, #0
 801e69c:	d00e      	beq.n	801e6bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 801e69e:	2301      	movs	r3, #1
 801e6a0:	73fb      	strb	r3, [r7, #15]
      break;
 801e6a2:	e00b      	b.n	801e6bc <DMA_CheckFifoParam+0xe4>
      break;
 801e6a4:	bf00      	nop
 801e6a6:	e00a      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;
 801e6a8:	bf00      	nop
 801e6aa:	e008      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;
 801e6ac:	bf00      	nop
 801e6ae:	e006      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;
 801e6b0:	bf00      	nop
 801e6b2:	e004      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;
 801e6b4:	bf00      	nop
 801e6b6:	e002      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;   
 801e6b8:	bf00      	nop
 801e6ba:	e000      	b.n	801e6be <DMA_CheckFifoParam+0xe6>
      break;
 801e6bc:	bf00      	nop
    }
  } 
  
  return status; 
 801e6be:	7bfb      	ldrb	r3, [r7, #15]
}
 801e6c0:	4618      	mov	r0, r3
 801e6c2:	3714      	adds	r7, #20
 801e6c4:	46bd      	mov	sp, r7
 801e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6ca:	4770      	bx	lr

0801e6cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801e6cc:	b480      	push	{r7}
 801e6ce:	b089      	sub	sp, #36	; 0x24
 801e6d0:	af00      	add	r7, sp, #0
 801e6d2:	6078      	str	r0, [r7, #4]
 801e6d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 801e6d6:	2300      	movs	r3, #0
 801e6d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801e6da:	2300      	movs	r3, #0
 801e6dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801e6de:	2300      	movs	r3, #0
 801e6e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e6e2:	2300      	movs	r3, #0
 801e6e4:	61fb      	str	r3, [r7, #28]
 801e6e6:	e159      	b.n	801e99c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 801e6e8:	2201      	movs	r2, #1
 801e6ea:	69fb      	ldr	r3, [r7, #28]
 801e6ec:	fa02 f303 	lsl.w	r3, r2, r3
 801e6f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801e6f2:	683b      	ldr	r3, [r7, #0]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	697a      	ldr	r2, [r7, #20]
 801e6f8:	4013      	ands	r3, r2
 801e6fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801e6fc:	693a      	ldr	r2, [r7, #16]
 801e6fe:	697b      	ldr	r3, [r7, #20]
 801e700:	429a      	cmp	r2, r3
 801e702:	f040 8148 	bne.w	801e996 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	685b      	ldr	r3, [r3, #4]
 801e70a:	2b01      	cmp	r3, #1
 801e70c:	d00b      	beq.n	801e726 <HAL_GPIO_Init+0x5a>
 801e70e:	683b      	ldr	r3, [r7, #0]
 801e710:	685b      	ldr	r3, [r3, #4]
 801e712:	2b02      	cmp	r3, #2
 801e714:	d007      	beq.n	801e726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e716:	683b      	ldr	r3, [r7, #0]
 801e718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 801e71a:	2b11      	cmp	r3, #17
 801e71c:	d003      	beq.n	801e726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e71e:	683b      	ldr	r3, [r7, #0]
 801e720:	685b      	ldr	r3, [r3, #4]
 801e722:	2b12      	cmp	r3, #18
 801e724:	d130      	bne.n	801e788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	689b      	ldr	r3, [r3, #8]
 801e72a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 801e72c:	69fb      	ldr	r3, [r7, #28]
 801e72e:	005b      	lsls	r3, r3, #1
 801e730:	2203      	movs	r2, #3
 801e732:	fa02 f303 	lsl.w	r3, r2, r3
 801e736:	43db      	mvns	r3, r3
 801e738:	69ba      	ldr	r2, [r7, #24]
 801e73a:	4013      	ands	r3, r2
 801e73c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801e73e:	683b      	ldr	r3, [r7, #0]
 801e740:	68da      	ldr	r2, [r3, #12]
 801e742:	69fb      	ldr	r3, [r7, #28]
 801e744:	005b      	lsls	r3, r3, #1
 801e746:	fa02 f303 	lsl.w	r3, r2, r3
 801e74a:	69ba      	ldr	r2, [r7, #24]
 801e74c:	4313      	orrs	r3, r2
 801e74e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	69ba      	ldr	r2, [r7, #24]
 801e754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	685b      	ldr	r3, [r3, #4]
 801e75a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801e75c:	2201      	movs	r2, #1
 801e75e:	69fb      	ldr	r3, [r7, #28]
 801e760:	fa02 f303 	lsl.w	r3, r2, r3
 801e764:	43db      	mvns	r3, r3
 801e766:	69ba      	ldr	r2, [r7, #24]
 801e768:	4013      	ands	r3, r2
 801e76a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 801e76c:	683b      	ldr	r3, [r7, #0]
 801e76e:	685b      	ldr	r3, [r3, #4]
 801e770:	091b      	lsrs	r3, r3, #4
 801e772:	f003 0201 	and.w	r2, r3, #1
 801e776:	69fb      	ldr	r3, [r7, #28]
 801e778:	fa02 f303 	lsl.w	r3, r2, r3
 801e77c:	69ba      	ldr	r2, [r7, #24]
 801e77e:	4313      	orrs	r3, r2
 801e780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	69ba      	ldr	r2, [r7, #24]
 801e786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	68db      	ldr	r3, [r3, #12]
 801e78c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 801e78e:	69fb      	ldr	r3, [r7, #28]
 801e790:	005b      	lsls	r3, r3, #1
 801e792:	2203      	movs	r2, #3
 801e794:	fa02 f303 	lsl.w	r3, r2, r3
 801e798:	43db      	mvns	r3, r3
 801e79a:	69ba      	ldr	r2, [r7, #24]
 801e79c:	4013      	ands	r3, r2
 801e79e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801e7a0:	683b      	ldr	r3, [r7, #0]
 801e7a2:	689a      	ldr	r2, [r3, #8]
 801e7a4:	69fb      	ldr	r3, [r7, #28]
 801e7a6:	005b      	lsls	r3, r3, #1
 801e7a8:	fa02 f303 	lsl.w	r3, r2, r3
 801e7ac:	69ba      	ldr	r2, [r7, #24]
 801e7ae:	4313      	orrs	r3, r2
 801e7b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	69ba      	ldr	r2, [r7, #24]
 801e7b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801e7b8:	683b      	ldr	r3, [r7, #0]
 801e7ba:	685b      	ldr	r3, [r3, #4]
 801e7bc:	2b02      	cmp	r3, #2
 801e7be:	d003      	beq.n	801e7c8 <HAL_GPIO_Init+0xfc>
 801e7c0:	683b      	ldr	r3, [r7, #0]
 801e7c2:	685b      	ldr	r3, [r3, #4]
 801e7c4:	2b12      	cmp	r3, #18
 801e7c6:	d123      	bne.n	801e810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801e7c8:	69fb      	ldr	r3, [r7, #28]
 801e7ca:	08da      	lsrs	r2, r3, #3
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	3208      	adds	r2, #8
 801e7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e7d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 801e7d6:	69fb      	ldr	r3, [r7, #28]
 801e7d8:	f003 0307 	and.w	r3, r3, #7
 801e7dc:	009b      	lsls	r3, r3, #2
 801e7de:	220f      	movs	r2, #15
 801e7e0:	fa02 f303 	lsl.w	r3, r2, r3
 801e7e4:	43db      	mvns	r3, r3
 801e7e6:	69ba      	ldr	r2, [r7, #24]
 801e7e8:	4013      	ands	r3, r2
 801e7ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801e7ec:	683b      	ldr	r3, [r7, #0]
 801e7ee:	691a      	ldr	r2, [r3, #16]
 801e7f0:	69fb      	ldr	r3, [r7, #28]
 801e7f2:	f003 0307 	and.w	r3, r3, #7
 801e7f6:	009b      	lsls	r3, r3, #2
 801e7f8:	fa02 f303 	lsl.w	r3, r2, r3
 801e7fc:	69ba      	ldr	r2, [r7, #24]
 801e7fe:	4313      	orrs	r3, r2
 801e800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801e802:	69fb      	ldr	r3, [r7, #28]
 801e804:	08da      	lsrs	r2, r3, #3
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	3208      	adds	r2, #8
 801e80a:	69b9      	ldr	r1, [r7, #24]
 801e80c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	681b      	ldr	r3, [r3, #0]
 801e814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 801e816:	69fb      	ldr	r3, [r7, #28]
 801e818:	005b      	lsls	r3, r3, #1
 801e81a:	2203      	movs	r2, #3
 801e81c:	fa02 f303 	lsl.w	r3, r2, r3
 801e820:	43db      	mvns	r3, r3
 801e822:	69ba      	ldr	r2, [r7, #24]
 801e824:	4013      	ands	r3, r2
 801e826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	685b      	ldr	r3, [r3, #4]
 801e82c:	f003 0203 	and.w	r2, r3, #3
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	005b      	lsls	r3, r3, #1
 801e834:	fa02 f303 	lsl.w	r3, r2, r3
 801e838:	69ba      	ldr	r2, [r7, #24]
 801e83a:	4313      	orrs	r3, r2
 801e83c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	69ba      	ldr	r2, [r7, #24]
 801e842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801e844:	683b      	ldr	r3, [r7, #0]
 801e846:	685b      	ldr	r3, [r3, #4]
 801e848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	f000 80a2 	beq.w	801e996 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801e852:	2300      	movs	r3, #0
 801e854:	60fb      	str	r3, [r7, #12]
 801e856:	4b56      	ldr	r3, [pc, #344]	; (801e9b0 <HAL_GPIO_Init+0x2e4>)
 801e858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e85a:	4a55      	ldr	r2, [pc, #340]	; (801e9b0 <HAL_GPIO_Init+0x2e4>)
 801e85c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801e860:	6453      	str	r3, [r2, #68]	; 0x44
 801e862:	4b53      	ldr	r3, [pc, #332]	; (801e9b0 <HAL_GPIO_Init+0x2e4>)
 801e864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801e86a:	60fb      	str	r3, [r7, #12]
 801e86c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801e86e:	4a51      	ldr	r2, [pc, #324]	; (801e9b4 <HAL_GPIO_Init+0x2e8>)
 801e870:	69fb      	ldr	r3, [r7, #28]
 801e872:	089b      	lsrs	r3, r3, #2
 801e874:	3302      	adds	r3, #2
 801e876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e87a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 801e87c:	69fb      	ldr	r3, [r7, #28]
 801e87e:	f003 0303 	and.w	r3, r3, #3
 801e882:	009b      	lsls	r3, r3, #2
 801e884:	220f      	movs	r2, #15
 801e886:	fa02 f303 	lsl.w	r3, r2, r3
 801e88a:	43db      	mvns	r3, r3
 801e88c:	69ba      	ldr	r2, [r7, #24]
 801e88e:	4013      	ands	r3, r2
 801e890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	4a48      	ldr	r2, [pc, #288]	; (801e9b8 <HAL_GPIO_Init+0x2ec>)
 801e896:	4293      	cmp	r3, r2
 801e898:	d019      	beq.n	801e8ce <HAL_GPIO_Init+0x202>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	4a47      	ldr	r2, [pc, #284]	; (801e9bc <HAL_GPIO_Init+0x2f0>)
 801e89e:	4293      	cmp	r3, r2
 801e8a0:	d013      	beq.n	801e8ca <HAL_GPIO_Init+0x1fe>
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	4a46      	ldr	r2, [pc, #280]	; (801e9c0 <HAL_GPIO_Init+0x2f4>)
 801e8a6:	4293      	cmp	r3, r2
 801e8a8:	d00d      	beq.n	801e8c6 <HAL_GPIO_Init+0x1fa>
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	4a45      	ldr	r2, [pc, #276]	; (801e9c4 <HAL_GPIO_Init+0x2f8>)
 801e8ae:	4293      	cmp	r3, r2
 801e8b0:	d007      	beq.n	801e8c2 <HAL_GPIO_Init+0x1f6>
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	4a44      	ldr	r2, [pc, #272]	; (801e9c8 <HAL_GPIO_Init+0x2fc>)
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	d101      	bne.n	801e8be <HAL_GPIO_Init+0x1f2>
 801e8ba:	2304      	movs	r3, #4
 801e8bc:	e008      	b.n	801e8d0 <HAL_GPIO_Init+0x204>
 801e8be:	2307      	movs	r3, #7
 801e8c0:	e006      	b.n	801e8d0 <HAL_GPIO_Init+0x204>
 801e8c2:	2303      	movs	r3, #3
 801e8c4:	e004      	b.n	801e8d0 <HAL_GPIO_Init+0x204>
 801e8c6:	2302      	movs	r3, #2
 801e8c8:	e002      	b.n	801e8d0 <HAL_GPIO_Init+0x204>
 801e8ca:	2301      	movs	r3, #1
 801e8cc:	e000      	b.n	801e8d0 <HAL_GPIO_Init+0x204>
 801e8ce:	2300      	movs	r3, #0
 801e8d0:	69fa      	ldr	r2, [r7, #28]
 801e8d2:	f002 0203 	and.w	r2, r2, #3
 801e8d6:	0092      	lsls	r2, r2, #2
 801e8d8:	4093      	lsls	r3, r2
 801e8da:	69ba      	ldr	r2, [r7, #24]
 801e8dc:	4313      	orrs	r3, r2
 801e8de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801e8e0:	4934      	ldr	r1, [pc, #208]	; (801e9b4 <HAL_GPIO_Init+0x2e8>)
 801e8e2:	69fb      	ldr	r3, [r7, #28]
 801e8e4:	089b      	lsrs	r3, r3, #2
 801e8e6:	3302      	adds	r3, #2
 801e8e8:	69ba      	ldr	r2, [r7, #24]
 801e8ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801e8ee:	4b37      	ldr	r3, [pc, #220]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e8f4:	693b      	ldr	r3, [r7, #16]
 801e8f6:	43db      	mvns	r3, r3
 801e8f8:	69ba      	ldr	r2, [r7, #24]
 801e8fa:	4013      	ands	r3, r2
 801e8fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801e8fe:	683b      	ldr	r3, [r7, #0]
 801e900:	685b      	ldr	r3, [r3, #4]
 801e902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801e906:	2b00      	cmp	r3, #0
 801e908:	d003      	beq.n	801e912 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 801e90a:	69ba      	ldr	r2, [r7, #24]
 801e90c:	693b      	ldr	r3, [r7, #16]
 801e90e:	4313      	orrs	r3, r2
 801e910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801e912:	4a2e      	ldr	r2, [pc, #184]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e914:	69bb      	ldr	r3, [r7, #24]
 801e916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 801e918:	4b2c      	ldr	r3, [pc, #176]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e91a:	685b      	ldr	r3, [r3, #4]
 801e91c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e91e:	693b      	ldr	r3, [r7, #16]
 801e920:	43db      	mvns	r3, r3
 801e922:	69ba      	ldr	r2, [r7, #24]
 801e924:	4013      	ands	r3, r2
 801e926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801e928:	683b      	ldr	r3, [r7, #0]
 801e92a:	685b      	ldr	r3, [r3, #4]
 801e92c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801e930:	2b00      	cmp	r3, #0
 801e932:	d003      	beq.n	801e93c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 801e934:	69ba      	ldr	r2, [r7, #24]
 801e936:	693b      	ldr	r3, [r7, #16]
 801e938:	4313      	orrs	r3, r2
 801e93a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801e93c:	4a23      	ldr	r2, [pc, #140]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e93e:	69bb      	ldr	r3, [r7, #24]
 801e940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801e942:	4b22      	ldr	r3, [pc, #136]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e944:	689b      	ldr	r3, [r3, #8]
 801e946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e948:	693b      	ldr	r3, [r7, #16]
 801e94a:	43db      	mvns	r3, r3
 801e94c:	69ba      	ldr	r2, [r7, #24]
 801e94e:	4013      	ands	r3, r2
 801e950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801e952:	683b      	ldr	r3, [r7, #0]
 801e954:	685b      	ldr	r3, [r3, #4]
 801e956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d003      	beq.n	801e966 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 801e95e:	69ba      	ldr	r2, [r7, #24]
 801e960:	693b      	ldr	r3, [r7, #16]
 801e962:	4313      	orrs	r3, r2
 801e964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801e966:	4a19      	ldr	r2, [pc, #100]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e968:	69bb      	ldr	r3, [r7, #24]
 801e96a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801e96c:	4b17      	ldr	r3, [pc, #92]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e96e:	68db      	ldr	r3, [r3, #12]
 801e970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801e972:	693b      	ldr	r3, [r7, #16]
 801e974:	43db      	mvns	r3, r3
 801e976:	69ba      	ldr	r2, [r7, #24]
 801e978:	4013      	ands	r3, r2
 801e97a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801e97c:	683b      	ldr	r3, [r7, #0]
 801e97e:	685b      	ldr	r3, [r3, #4]
 801e980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e984:	2b00      	cmp	r3, #0
 801e986:	d003      	beq.n	801e990 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 801e988:	69ba      	ldr	r2, [r7, #24]
 801e98a:	693b      	ldr	r3, [r7, #16]
 801e98c:	4313      	orrs	r3, r2
 801e98e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801e990:	4a0e      	ldr	r2, [pc, #56]	; (801e9cc <HAL_GPIO_Init+0x300>)
 801e992:	69bb      	ldr	r3, [r7, #24]
 801e994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801e996:	69fb      	ldr	r3, [r7, #28]
 801e998:	3301      	adds	r3, #1
 801e99a:	61fb      	str	r3, [r7, #28]
 801e99c:	69fb      	ldr	r3, [r7, #28]
 801e99e:	2b0f      	cmp	r3, #15
 801e9a0:	f67f aea2 	bls.w	801e6e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 801e9a4:	bf00      	nop
 801e9a6:	3724      	adds	r7, #36	; 0x24
 801e9a8:	46bd      	mov	sp, r7
 801e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ae:	4770      	bx	lr
 801e9b0:	40023800 	.word	0x40023800
 801e9b4:	40013800 	.word	0x40013800
 801e9b8:	40020000 	.word	0x40020000
 801e9bc:	40020400 	.word	0x40020400
 801e9c0:	40020800 	.word	0x40020800
 801e9c4:	40020c00 	.word	0x40020c00
 801e9c8:	40021000 	.word	0x40021000
 801e9cc:	40013c00 	.word	0x40013c00

0801e9d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801e9d0:	b480      	push	{r7}
 801e9d2:	b085      	sub	sp, #20
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
 801e9d8:	460b      	mov	r3, r1
 801e9da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	691a      	ldr	r2, [r3, #16]
 801e9e0:	887b      	ldrh	r3, [r7, #2]
 801e9e2:	4013      	ands	r3, r2
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d002      	beq.n	801e9ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801e9e8:	2301      	movs	r3, #1
 801e9ea:	73fb      	strb	r3, [r7, #15]
 801e9ec:	e001      	b.n	801e9f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801e9ee:	2300      	movs	r3, #0
 801e9f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801e9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	3714      	adds	r7, #20
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fe:	4770      	bx	lr

0801ea00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ea00:	b480      	push	{r7}
 801ea02:	b083      	sub	sp, #12
 801ea04:	af00      	add	r7, sp, #0
 801ea06:	6078      	str	r0, [r7, #4]
 801ea08:	460b      	mov	r3, r1
 801ea0a:	807b      	strh	r3, [r7, #2]
 801ea0c:	4613      	mov	r3, r2
 801ea0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801ea10:	787b      	ldrb	r3, [r7, #1]
 801ea12:	2b00      	cmp	r3, #0
 801ea14:	d003      	beq.n	801ea1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ea16:	887a      	ldrh	r2, [r7, #2]
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 801ea1c:	e003      	b.n	801ea26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 801ea1e:	887b      	ldrh	r3, [r7, #2]
 801ea20:	041a      	lsls	r2, r3, #16
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	619a      	str	r2, [r3, #24]
}
 801ea26:	bf00      	nop
 801ea28:	370c      	adds	r7, #12
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea30:	4770      	bx	lr
	...

0801ea34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801ea34:	b580      	push	{r7, lr}
 801ea36:	b082      	sub	sp, #8
 801ea38:	af00      	add	r7, sp, #0
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801ea3e:	4b08      	ldr	r3, [pc, #32]	; (801ea60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ea40:	695a      	ldr	r2, [r3, #20]
 801ea42:	88fb      	ldrh	r3, [r7, #6]
 801ea44:	4013      	ands	r3, r2
 801ea46:	2b00      	cmp	r3, #0
 801ea48:	d006      	beq.n	801ea58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801ea4a:	4a05      	ldr	r2, [pc, #20]	; (801ea60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801ea4c:	88fb      	ldrh	r3, [r7, #6]
 801ea4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801ea50:	88fb      	ldrh	r3, [r7, #6]
 801ea52:	4618      	mov	r0, r3
 801ea54:	f7fe fc90 	bl	801d378 <HAL_GPIO_EXTI_Callback>
  }
}
 801ea58:	bf00      	nop
 801ea5a:	3708      	adds	r7, #8
 801ea5c:	46bd      	mov	sp, r7
 801ea5e:	bd80      	pop	{r7, pc}
 801ea60:	40013c00 	.word	0x40013c00

0801ea64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ea64:	b580      	push	{r7, lr}
 801ea66:	b084      	sub	sp, #16
 801ea68:	af00      	add	r7, sp, #0
 801ea6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	2b00      	cmp	r3, #0
 801ea70:	d101      	bne.n	801ea76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ea72:	2301      	movs	r3, #1
 801ea74:	e11f      	b.n	801ecb6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea7c:	b2db      	uxtb	r3, r3
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d106      	bne.n	801ea90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	2200      	movs	r2, #0
 801ea86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	f7fd fec0 	bl	801c810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	2224      	movs	r2, #36	; 0x24
 801ea94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	681a      	ldr	r2, [r3, #0]
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	681b      	ldr	r3, [r3, #0]
 801eaa2:	f022 0201 	bic.w	r2, r2, #1
 801eaa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	681a      	ldr	r2, [r3, #0]
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801eab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	681a      	ldr	r2, [r3, #0]
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	681b      	ldr	r3, [r3, #0]
 801eac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801eac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801eac8:	f001 f974 	bl	801fdb4 <HAL_RCC_GetPCLK1Freq>
 801eacc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	685b      	ldr	r3, [r3, #4]
 801ead2:	4a7b      	ldr	r2, [pc, #492]	; (801ecc0 <HAL_I2C_Init+0x25c>)
 801ead4:	4293      	cmp	r3, r2
 801ead6:	d807      	bhi.n	801eae8 <HAL_I2C_Init+0x84>
 801ead8:	68fb      	ldr	r3, [r7, #12]
 801eada:	4a7a      	ldr	r2, [pc, #488]	; (801ecc4 <HAL_I2C_Init+0x260>)
 801eadc:	4293      	cmp	r3, r2
 801eade:	bf94      	ite	ls
 801eae0:	2301      	movls	r3, #1
 801eae2:	2300      	movhi	r3, #0
 801eae4:	b2db      	uxtb	r3, r3
 801eae6:	e006      	b.n	801eaf6 <HAL_I2C_Init+0x92>
 801eae8:	68fb      	ldr	r3, [r7, #12]
 801eaea:	4a77      	ldr	r2, [pc, #476]	; (801ecc8 <HAL_I2C_Init+0x264>)
 801eaec:	4293      	cmp	r3, r2
 801eaee:	bf94      	ite	ls
 801eaf0:	2301      	movls	r3, #1
 801eaf2:	2300      	movhi	r3, #0
 801eaf4:	b2db      	uxtb	r3, r3
 801eaf6:	2b00      	cmp	r3, #0
 801eaf8:	d001      	beq.n	801eafe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801eafa:	2301      	movs	r3, #1
 801eafc:	e0db      	b.n	801ecb6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	4a72      	ldr	r2, [pc, #456]	; (801eccc <HAL_I2C_Init+0x268>)
 801eb02:	fba2 2303 	umull	r2, r3, r2, r3
 801eb06:	0c9b      	lsrs	r3, r3, #18
 801eb08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	681b      	ldr	r3, [r3, #0]
 801eb0e:	685b      	ldr	r3, [r3, #4]
 801eb10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	681b      	ldr	r3, [r3, #0]
 801eb18:	68ba      	ldr	r2, [r7, #8]
 801eb1a:	430a      	orrs	r2, r1
 801eb1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	6a1b      	ldr	r3, [r3, #32]
 801eb24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	685b      	ldr	r3, [r3, #4]
 801eb2c:	4a64      	ldr	r2, [pc, #400]	; (801ecc0 <HAL_I2C_Init+0x25c>)
 801eb2e:	4293      	cmp	r3, r2
 801eb30:	d802      	bhi.n	801eb38 <HAL_I2C_Init+0xd4>
 801eb32:	68bb      	ldr	r3, [r7, #8]
 801eb34:	3301      	adds	r3, #1
 801eb36:	e009      	b.n	801eb4c <HAL_I2C_Init+0xe8>
 801eb38:	68bb      	ldr	r3, [r7, #8]
 801eb3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801eb3e:	fb02 f303 	mul.w	r3, r2, r3
 801eb42:	4a63      	ldr	r2, [pc, #396]	; (801ecd0 <HAL_I2C_Init+0x26c>)
 801eb44:	fba2 2303 	umull	r2, r3, r2, r3
 801eb48:	099b      	lsrs	r3, r3, #6
 801eb4a:	3301      	adds	r3, #1
 801eb4c:	687a      	ldr	r2, [r7, #4]
 801eb4e:	6812      	ldr	r2, [r2, #0]
 801eb50:	430b      	orrs	r3, r1
 801eb52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	69db      	ldr	r3, [r3, #28]
 801eb5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801eb5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	685b      	ldr	r3, [r3, #4]
 801eb66:	4956      	ldr	r1, [pc, #344]	; (801ecc0 <HAL_I2C_Init+0x25c>)
 801eb68:	428b      	cmp	r3, r1
 801eb6a:	d80d      	bhi.n	801eb88 <HAL_I2C_Init+0x124>
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	1e59      	subs	r1, r3, #1
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	685b      	ldr	r3, [r3, #4]
 801eb74:	005b      	lsls	r3, r3, #1
 801eb76:	fbb1 f3f3 	udiv	r3, r1, r3
 801eb7a:	3301      	adds	r3, #1
 801eb7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eb80:	2b04      	cmp	r3, #4
 801eb82:	bf38      	it	cc
 801eb84:	2304      	movcc	r3, #4
 801eb86:	e04f      	b.n	801ec28 <HAL_I2C_Init+0x1c4>
 801eb88:	687b      	ldr	r3, [r7, #4]
 801eb8a:	689b      	ldr	r3, [r3, #8]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d111      	bne.n	801ebb4 <HAL_I2C_Init+0x150>
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	1e58      	subs	r0, r3, #1
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	6859      	ldr	r1, [r3, #4]
 801eb98:	460b      	mov	r3, r1
 801eb9a:	005b      	lsls	r3, r3, #1
 801eb9c:	440b      	add	r3, r1
 801eb9e:	fbb0 f3f3 	udiv	r3, r0, r3
 801eba2:	3301      	adds	r3, #1
 801eba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	bf0c      	ite	eq
 801ebac:	2301      	moveq	r3, #1
 801ebae:	2300      	movne	r3, #0
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	e012      	b.n	801ebda <HAL_I2C_Init+0x176>
 801ebb4:	68fb      	ldr	r3, [r7, #12]
 801ebb6:	1e58      	subs	r0, r3, #1
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	6859      	ldr	r1, [r3, #4]
 801ebbc:	460b      	mov	r3, r1
 801ebbe:	009b      	lsls	r3, r3, #2
 801ebc0:	440b      	add	r3, r1
 801ebc2:	0099      	lsls	r1, r3, #2
 801ebc4:	440b      	add	r3, r1
 801ebc6:	fbb0 f3f3 	udiv	r3, r0, r3
 801ebca:	3301      	adds	r3, #1
 801ebcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	bf0c      	ite	eq
 801ebd4:	2301      	moveq	r3, #1
 801ebd6:	2300      	movne	r3, #0
 801ebd8:	b2db      	uxtb	r3, r3
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d001      	beq.n	801ebe2 <HAL_I2C_Init+0x17e>
 801ebde:	2301      	movs	r3, #1
 801ebe0:	e022      	b.n	801ec28 <HAL_I2C_Init+0x1c4>
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	689b      	ldr	r3, [r3, #8]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d10e      	bne.n	801ec08 <HAL_I2C_Init+0x1a4>
 801ebea:	68fb      	ldr	r3, [r7, #12]
 801ebec:	1e58      	subs	r0, r3, #1
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	6859      	ldr	r1, [r3, #4]
 801ebf2:	460b      	mov	r3, r1
 801ebf4:	005b      	lsls	r3, r3, #1
 801ebf6:	440b      	add	r3, r1
 801ebf8:	fbb0 f3f3 	udiv	r3, r0, r3
 801ebfc:	3301      	adds	r3, #1
 801ebfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ec02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801ec06:	e00f      	b.n	801ec28 <HAL_I2C_Init+0x1c4>
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	1e58      	subs	r0, r3, #1
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	6859      	ldr	r1, [r3, #4]
 801ec10:	460b      	mov	r3, r1
 801ec12:	009b      	lsls	r3, r3, #2
 801ec14:	440b      	add	r3, r1
 801ec16:	0099      	lsls	r1, r3, #2
 801ec18:	440b      	add	r3, r1
 801ec1a:	fbb0 f3f3 	udiv	r3, r0, r3
 801ec1e:	3301      	adds	r3, #1
 801ec20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801ec24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801ec28:	6879      	ldr	r1, [r7, #4]
 801ec2a:	6809      	ldr	r1, [r1, #0]
 801ec2c:	4313      	orrs	r3, r2
 801ec2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	681b      	ldr	r3, [r3, #0]
 801ec36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	69da      	ldr	r2, [r3, #28]
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	6a1b      	ldr	r3, [r3, #32]
 801ec42:	431a      	orrs	r2, r3
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	681b      	ldr	r3, [r3, #0]
 801ec48:	430a      	orrs	r2, r1
 801ec4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	689b      	ldr	r3, [r3, #8]
 801ec52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801ec56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801ec5a:	687a      	ldr	r2, [r7, #4]
 801ec5c:	6911      	ldr	r1, [r2, #16]
 801ec5e:	687a      	ldr	r2, [r7, #4]
 801ec60:	68d2      	ldr	r2, [r2, #12]
 801ec62:	4311      	orrs	r1, r2
 801ec64:	687a      	ldr	r2, [r7, #4]
 801ec66:	6812      	ldr	r2, [r2, #0]
 801ec68:	430b      	orrs	r3, r1
 801ec6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	681b      	ldr	r3, [r3, #0]
 801ec70:	68db      	ldr	r3, [r3, #12]
 801ec72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	695a      	ldr	r2, [r3, #20]
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	699b      	ldr	r3, [r3, #24]
 801ec7e:	431a      	orrs	r2, r3
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	681b      	ldr	r3, [r3, #0]
 801ec84:	430a      	orrs	r2, r1
 801ec86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801ec88:	687b      	ldr	r3, [r7, #4]
 801ec8a:	681b      	ldr	r3, [r3, #0]
 801ec8c:	681a      	ldr	r2, [r3, #0]
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	681b      	ldr	r3, [r3, #0]
 801ec92:	f042 0201 	orr.w	r2, r2, #1
 801ec96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	2220      	movs	r2, #32
 801eca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	2200      	movs	r2, #0
 801ecaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	2200      	movs	r2, #0
 801ecb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801ecb4:	2300      	movs	r3, #0
}
 801ecb6:	4618      	mov	r0, r3
 801ecb8:	3710      	adds	r7, #16
 801ecba:	46bd      	mov	sp, r7
 801ecbc:	bd80      	pop	{r7, pc}
 801ecbe:	bf00      	nop
 801ecc0:	000186a0 	.word	0x000186a0
 801ecc4:	001e847f 	.word	0x001e847f
 801ecc8:	003d08ff 	.word	0x003d08ff
 801eccc:	431bde83 	.word	0x431bde83
 801ecd0:	10624dd3 	.word	0x10624dd3

0801ecd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ecd4:	b580      	push	{r7, lr}
 801ecd6:	b088      	sub	sp, #32
 801ecd8:	af02      	add	r7, sp, #8
 801ecda:	60f8      	str	r0, [r7, #12]
 801ecdc:	607a      	str	r2, [r7, #4]
 801ecde:	461a      	mov	r2, r3
 801ece0:	460b      	mov	r3, r1
 801ece2:	817b      	strh	r3, [r7, #10]
 801ece4:	4613      	mov	r3, r2
 801ece6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 801ece8:	f7ff f820 	bl	801dd2c <HAL_GetTick>
 801ecec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ecee:	68fb      	ldr	r3, [r7, #12]
 801ecf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ecf4:	b2db      	uxtb	r3, r3
 801ecf6:	2b20      	cmp	r3, #32
 801ecf8:	f040 80e0 	bne.w	801eebc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801ecfc:	697b      	ldr	r3, [r7, #20]
 801ecfe:	9300      	str	r3, [sp, #0]
 801ed00:	2319      	movs	r3, #25
 801ed02:	2201      	movs	r2, #1
 801ed04:	4970      	ldr	r1, [pc, #448]	; (801eec8 <HAL_I2C_Master_Transmit+0x1f4>)
 801ed06:	68f8      	ldr	r0, [r7, #12]
 801ed08:	f000 fa92 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801ed0c:	4603      	mov	r3, r0
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d001      	beq.n	801ed16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 801ed12:	2302      	movs	r3, #2
 801ed14:	e0d3      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ed16:	68fb      	ldr	r3, [r7, #12]
 801ed18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ed1c:	2b01      	cmp	r3, #1
 801ed1e:	d101      	bne.n	801ed24 <HAL_I2C_Master_Transmit+0x50>
 801ed20:	2302      	movs	r3, #2
 801ed22:	e0cc      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	2201      	movs	r2, #1
 801ed28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ed2c:	68fb      	ldr	r3, [r7, #12]
 801ed2e:	681b      	ldr	r3, [r3, #0]
 801ed30:	681b      	ldr	r3, [r3, #0]
 801ed32:	f003 0301 	and.w	r3, r3, #1
 801ed36:	2b01      	cmp	r3, #1
 801ed38:	d007      	beq.n	801ed4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ed3a:	68fb      	ldr	r3, [r7, #12]
 801ed3c:	681b      	ldr	r3, [r3, #0]
 801ed3e:	681a      	ldr	r2, [r3, #0]
 801ed40:	68fb      	ldr	r3, [r7, #12]
 801ed42:	681b      	ldr	r3, [r3, #0]
 801ed44:	f042 0201 	orr.w	r2, r2, #1
 801ed48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ed4a:	68fb      	ldr	r3, [r7, #12]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	681a      	ldr	r2, [r3, #0]
 801ed50:	68fb      	ldr	r3, [r7, #12]
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ed58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801ed5a:	68fb      	ldr	r3, [r7, #12]
 801ed5c:	2221      	movs	r2, #33	; 0x21
 801ed5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 801ed62:	68fb      	ldr	r3, [r7, #12]
 801ed64:	2210      	movs	r2, #16
 801ed66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801ed6a:	68fb      	ldr	r3, [r7, #12]
 801ed6c:	2200      	movs	r2, #0
 801ed6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 801ed70:	68fb      	ldr	r3, [r7, #12]
 801ed72:	687a      	ldr	r2, [r7, #4]
 801ed74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 801ed76:	68fb      	ldr	r3, [r7, #12]
 801ed78:	893a      	ldrh	r2, [r7, #8]
 801ed7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 801ed7c:	68fb      	ldr	r3, [r7, #12]
 801ed7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ed80:	b29a      	uxth	r2, r3
 801ed82:	68fb      	ldr	r3, [r7, #12]
 801ed84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ed86:	68fb      	ldr	r3, [r7, #12]
 801ed88:	4a50      	ldr	r2, [pc, #320]	; (801eecc <HAL_I2C_Master_Transmit+0x1f8>)
 801ed8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801ed8c:	8979      	ldrh	r1, [r7, #10]
 801ed8e:	697b      	ldr	r3, [r7, #20]
 801ed90:	6a3a      	ldr	r2, [r7, #32]
 801ed92:	68f8      	ldr	r0, [r7, #12]
 801ed94:	f000 f9ca 	bl	801f12c <I2C_MasterRequestWrite>
 801ed98:	4603      	mov	r3, r0
 801ed9a:	2b00      	cmp	r3, #0
 801ed9c:	d001      	beq.n	801eda2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 801ed9e:	2301      	movs	r3, #1
 801eda0:	e08d      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801eda2:	2300      	movs	r3, #0
 801eda4:	613b      	str	r3, [r7, #16]
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	695b      	ldr	r3, [r3, #20]
 801edac:	613b      	str	r3, [r7, #16]
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	699b      	ldr	r3, [r3, #24]
 801edb4:	613b      	str	r3, [r7, #16]
 801edb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 801edb8:	e066      	b.n	801ee88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801edba:	697a      	ldr	r2, [r7, #20]
 801edbc:	6a39      	ldr	r1, [r7, #32]
 801edbe:	68f8      	ldr	r0, [r7, #12]
 801edc0:	f000 fb0c 	bl	801f3dc <I2C_WaitOnTXEFlagUntilTimeout>
 801edc4:	4603      	mov	r3, r0
 801edc6:	2b00      	cmp	r3, #0
 801edc8:	d00d      	beq.n	801ede6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801edca:	68fb      	ldr	r3, [r7, #12]
 801edcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801edce:	2b04      	cmp	r3, #4
 801edd0:	d107      	bne.n	801ede2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	681a      	ldr	r2, [r3, #0]
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ede0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ede2:	2301      	movs	r3, #1
 801ede4:	e06b      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edea:	781a      	ldrb	r2, [r3, #0]
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801edf6:	1c5a      	adds	r2, r3, #1
 801edf8:	68fb      	ldr	r3, [r7, #12]
 801edfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee00:	b29b      	uxth	r3, r3
 801ee02:	3b01      	subs	r3, #1
 801ee04:	b29a      	uxth	r2, r3
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801ee0a:	68fb      	ldr	r3, [r7, #12]
 801ee0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee0e:	3b01      	subs	r3, #1
 801ee10:	b29a      	uxth	r2, r3
 801ee12:	68fb      	ldr	r3, [r7, #12]
 801ee14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	681b      	ldr	r3, [r3, #0]
 801ee1a:	695b      	ldr	r3, [r3, #20]
 801ee1c:	f003 0304 	and.w	r3, r3, #4
 801ee20:	2b04      	cmp	r3, #4
 801ee22:	d11b      	bne.n	801ee5c <HAL_I2C_Master_Transmit+0x188>
 801ee24:	68fb      	ldr	r3, [r7, #12]
 801ee26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d017      	beq.n	801ee5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 801ee2c:	68fb      	ldr	r3, [r7, #12]
 801ee2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee30:	781a      	ldrb	r2, [r3, #0]
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 801ee38:	68fb      	ldr	r3, [r7, #12]
 801ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ee3c:	1c5a      	adds	r2, r3, #1
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 801ee42:	68fb      	ldr	r3, [r7, #12]
 801ee44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801ee46:	b29b      	uxth	r3, r3
 801ee48:	3b01      	subs	r3, #1
 801ee4a:	b29a      	uxth	r2, r3
 801ee4c:	68fb      	ldr	r3, [r7, #12]
 801ee4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee54:	3b01      	subs	r3, #1
 801ee56:	b29a      	uxth	r2, r3
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801ee5c:	697a      	ldr	r2, [r7, #20]
 801ee5e:	6a39      	ldr	r1, [r7, #32]
 801ee60:	68f8      	ldr	r0, [r7, #12]
 801ee62:	f000 fafc 	bl	801f45e <I2C_WaitOnBTFFlagUntilTimeout>
 801ee66:	4603      	mov	r3, r0
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d00d      	beq.n	801ee88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801ee6c:	68fb      	ldr	r3, [r7, #12]
 801ee6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee70:	2b04      	cmp	r3, #4
 801ee72:	d107      	bne.n	801ee84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ee74:	68fb      	ldr	r3, [r7, #12]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	681a      	ldr	r2, [r3, #0]
 801ee7a:	68fb      	ldr	r3, [r7, #12]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ee82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 801ee84:	2301      	movs	r3, #1
 801ee86:	e01a      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 801ee88:	68fb      	ldr	r3, [r7, #12]
 801ee8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ee8c:	2b00      	cmp	r3, #0
 801ee8e:	d194      	bne.n	801edba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801ee90:	68fb      	ldr	r3, [r7, #12]
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	681a      	ldr	r2, [r3, #0]
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ee9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	2220      	movs	r2, #32
 801eea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	2200      	movs	r2, #0
 801eeac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801eeb0:	68fb      	ldr	r3, [r7, #12]
 801eeb2:	2200      	movs	r2, #0
 801eeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 801eeb8:	2300      	movs	r3, #0
 801eeba:	e000      	b.n	801eebe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 801eebc:	2302      	movs	r3, #2
  }
}
 801eebe:	4618      	mov	r0, r3
 801eec0:	3718      	adds	r7, #24
 801eec2:	46bd      	mov	sp, r7
 801eec4:	bd80      	pop	{r7, pc}
 801eec6:	bf00      	nop
 801eec8:	00100002 	.word	0x00100002
 801eecc:	ffff0000 	.word	0xffff0000

0801eed0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 801eed0:	b580      	push	{r7, lr}
 801eed2:	b08a      	sub	sp, #40	; 0x28
 801eed4:	af02      	add	r7, sp, #8
 801eed6:	60f8      	str	r0, [r7, #12]
 801eed8:	607a      	str	r2, [r7, #4]
 801eeda:	603b      	str	r3, [r7, #0]
 801eedc:	460b      	mov	r3, r1
 801eede:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 801eee0:	f7fe ff24 	bl	801dd2c <HAL_GetTick>
 801eee4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 801eee6:	2301      	movs	r3, #1
 801eee8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 801eeea:	68fb      	ldr	r3, [r7, #12]
 801eeec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eef0:	b2db      	uxtb	r3, r3
 801eef2:	2b20      	cmp	r3, #32
 801eef4:	f040 8111 	bne.w	801f11a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801eef8:	69fb      	ldr	r3, [r7, #28]
 801eefa:	9300      	str	r3, [sp, #0]
 801eefc:	2319      	movs	r3, #25
 801eefe:	2201      	movs	r2, #1
 801ef00:	4988      	ldr	r1, [pc, #544]	; (801f124 <HAL_I2C_IsDeviceReady+0x254>)
 801ef02:	68f8      	ldr	r0, [r7, #12]
 801ef04:	f000 f994 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801ef08:	4603      	mov	r3, r0
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d001      	beq.n	801ef12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 801ef0e:	2302      	movs	r3, #2
 801ef10:	e104      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ef12:	68fb      	ldr	r3, [r7, #12]
 801ef14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ef18:	2b01      	cmp	r3, #1
 801ef1a:	d101      	bne.n	801ef20 <HAL_I2C_IsDeviceReady+0x50>
 801ef1c:	2302      	movs	r3, #2
 801ef1e:	e0fd      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
 801ef20:	68fb      	ldr	r3, [r7, #12]
 801ef22:	2201      	movs	r2, #1
 801ef24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 801ef28:	68fb      	ldr	r3, [r7, #12]
 801ef2a:	681b      	ldr	r3, [r3, #0]
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	f003 0301 	and.w	r3, r3, #1
 801ef32:	2b01      	cmp	r3, #1
 801ef34:	d007      	beq.n	801ef46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	681b      	ldr	r3, [r3, #0]
 801ef3a:	681a      	ldr	r2, [r3, #0]
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	f042 0201 	orr.w	r2, r2, #1
 801ef44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	681a      	ldr	r2, [r3, #0]
 801ef4c:	68fb      	ldr	r3, [r7, #12]
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ef54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ef56:	68fb      	ldr	r3, [r7, #12]
 801ef58:	2224      	movs	r2, #36	; 0x24
 801ef5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801ef5e:	68fb      	ldr	r3, [r7, #12]
 801ef60:	2200      	movs	r2, #0
 801ef62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	4a70      	ldr	r2, [pc, #448]	; (801f128 <HAL_I2C_IsDeviceReady+0x258>)
 801ef68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	681a      	ldr	r2, [r3, #0]
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801ef78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 801ef7a:	69fb      	ldr	r3, [r7, #28]
 801ef7c:	9300      	str	r3, [sp, #0]
 801ef7e:	683b      	ldr	r3, [r7, #0]
 801ef80:	2200      	movs	r2, #0
 801ef82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801ef86:	68f8      	ldr	r0, [r7, #12]
 801ef88:	f000 f952 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801ef8c:	4603      	mov	r3, r0
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d00d      	beq.n	801efae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801ef92:	68fb      	ldr	r3, [r7, #12]
 801ef94:	681b      	ldr	r3, [r3, #0]
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ef9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801efa0:	d103      	bne.n	801efaa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801efa2:	68fb      	ldr	r3, [r7, #12]
 801efa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801efa8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 801efaa:	2303      	movs	r3, #3
 801efac:	e0b6      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801efae:	897b      	ldrh	r3, [r7, #10]
 801efb0:	b2db      	uxtb	r3, r3
 801efb2:	461a      	mov	r2, r3
 801efb4:	68fb      	ldr	r3, [r7, #12]
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801efbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 801efbe:	f7fe feb5 	bl	801dd2c <HAL_GetTick>
 801efc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801efc4:	68fb      	ldr	r3, [r7, #12]
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	695b      	ldr	r3, [r3, #20]
 801efca:	f003 0302 	and.w	r3, r3, #2
 801efce:	2b02      	cmp	r3, #2
 801efd0:	bf0c      	ite	eq
 801efd2:	2301      	moveq	r3, #1
 801efd4:	2300      	movne	r3, #0
 801efd6:	b2db      	uxtb	r3, r3
 801efd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801efda:	68fb      	ldr	r3, [r7, #12]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	695b      	ldr	r3, [r3, #20]
 801efe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801efe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801efe8:	bf0c      	ite	eq
 801efea:	2301      	moveq	r3, #1
 801efec:	2300      	movne	r3, #0
 801efee:	b2db      	uxtb	r3, r3
 801eff0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801eff2:	e025      	b.n	801f040 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801eff4:	f7fe fe9a 	bl	801dd2c <HAL_GetTick>
 801eff8:	4602      	mov	r2, r0
 801effa:	69fb      	ldr	r3, [r7, #28]
 801effc:	1ad3      	subs	r3, r2, r3
 801effe:	683a      	ldr	r2, [r7, #0]
 801f000:	429a      	cmp	r2, r3
 801f002:	d302      	bcc.n	801f00a <HAL_I2C_IsDeviceReady+0x13a>
 801f004:	683b      	ldr	r3, [r7, #0]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d103      	bne.n	801f012 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 801f00a:	68fb      	ldr	r3, [r7, #12]
 801f00c:	22a0      	movs	r2, #160	; 0xa0
 801f00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 801f012:	68fb      	ldr	r3, [r7, #12]
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	695b      	ldr	r3, [r3, #20]
 801f018:	f003 0302 	and.w	r3, r3, #2
 801f01c:	2b02      	cmp	r3, #2
 801f01e:	bf0c      	ite	eq
 801f020:	2301      	moveq	r3, #1
 801f022:	2300      	movne	r3, #0
 801f024:	b2db      	uxtb	r3, r3
 801f026:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 801f028:	68fb      	ldr	r3, [r7, #12]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	695b      	ldr	r3, [r3, #20]
 801f02e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f036:	bf0c      	ite	eq
 801f038:	2301      	moveq	r3, #1
 801f03a:	2300      	movne	r3, #0
 801f03c:	b2db      	uxtb	r3, r3
 801f03e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 801f040:	68fb      	ldr	r3, [r7, #12]
 801f042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801f046:	b2db      	uxtb	r3, r3
 801f048:	2ba0      	cmp	r3, #160	; 0xa0
 801f04a:	d005      	beq.n	801f058 <HAL_I2C_IsDeviceReady+0x188>
 801f04c:	7dfb      	ldrb	r3, [r7, #23]
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d102      	bne.n	801f058 <HAL_I2C_IsDeviceReady+0x188>
 801f052:	7dbb      	ldrb	r3, [r7, #22]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d0cd      	beq.n	801eff4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	2220      	movs	r2, #32
 801f05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	695b      	ldr	r3, [r3, #20]
 801f066:	f003 0302 	and.w	r3, r3, #2
 801f06a:	2b02      	cmp	r3, #2
 801f06c:	d129      	bne.n	801f0c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f06e:	68fb      	ldr	r3, [r7, #12]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	681a      	ldr	r2, [r3, #0]
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	681b      	ldr	r3, [r3, #0]
 801f078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f07c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801f07e:	2300      	movs	r3, #0
 801f080:	613b      	str	r3, [r7, #16]
 801f082:	68fb      	ldr	r3, [r7, #12]
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	695b      	ldr	r3, [r3, #20]
 801f088:	613b      	str	r3, [r7, #16]
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	699b      	ldr	r3, [r3, #24]
 801f090:	613b      	str	r3, [r7, #16]
 801f092:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801f094:	69fb      	ldr	r3, [r7, #28]
 801f096:	9300      	str	r3, [sp, #0]
 801f098:	2319      	movs	r3, #25
 801f09a:	2201      	movs	r2, #1
 801f09c:	4921      	ldr	r1, [pc, #132]	; (801f124 <HAL_I2C_IsDeviceReady+0x254>)
 801f09e:	68f8      	ldr	r0, [r7, #12]
 801f0a0:	f000 f8c6 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801f0a4:	4603      	mov	r3, r0
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d001      	beq.n	801f0ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 801f0aa:	2301      	movs	r3, #1
 801f0ac:	e036      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 801f0ae:	68fb      	ldr	r3, [r7, #12]
 801f0b0:	2220      	movs	r2, #32
 801f0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f0b6:	68fb      	ldr	r3, [r7, #12]
 801f0b8:	2200      	movs	r2, #0
 801f0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 801f0be:	2300      	movs	r3, #0
 801f0c0:	e02c      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	681a      	ldr	r2, [r3, #0]
 801f0c8:	68fb      	ldr	r3, [r7, #12]
 801f0ca:	681b      	ldr	r3, [r3, #0]
 801f0cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f0d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f0d2:	68fb      	ldr	r3, [r7, #12]
 801f0d4:	681b      	ldr	r3, [r3, #0]
 801f0d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f0da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801f0dc:	69fb      	ldr	r3, [r7, #28]
 801f0de:	9300      	str	r3, [sp, #0]
 801f0e0:	2319      	movs	r3, #25
 801f0e2:	2201      	movs	r2, #1
 801f0e4:	490f      	ldr	r1, [pc, #60]	; (801f124 <HAL_I2C_IsDeviceReady+0x254>)
 801f0e6:	68f8      	ldr	r0, [r7, #12]
 801f0e8:	f000 f8a2 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801f0ec:	4603      	mov	r3, r0
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d001      	beq.n	801f0f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 801f0f2:	2301      	movs	r3, #1
 801f0f4:	e012      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 801f0f6:	69bb      	ldr	r3, [r7, #24]
 801f0f8:	3301      	adds	r3, #1
 801f0fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 801f0fc:	69ba      	ldr	r2, [r7, #24]
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	429a      	cmp	r2, r3
 801f102:	f4ff af32 	bcc.w	801ef6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 801f106:	68fb      	ldr	r3, [r7, #12]
 801f108:	2220      	movs	r2, #32
 801f10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	2200      	movs	r2, #0
 801f112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f116:	2301      	movs	r3, #1
 801f118:	e000      	b.n	801f11c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 801f11a:	2302      	movs	r3, #2
  }
}
 801f11c:	4618      	mov	r0, r3
 801f11e:	3720      	adds	r7, #32
 801f120:	46bd      	mov	sp, r7
 801f122:	bd80      	pop	{r7, pc}
 801f124:	00100002 	.word	0x00100002
 801f128:	ffff0000 	.word	0xffff0000

0801f12c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 801f12c:	b580      	push	{r7, lr}
 801f12e:	b088      	sub	sp, #32
 801f130:	af02      	add	r7, sp, #8
 801f132:	60f8      	str	r0, [r7, #12]
 801f134:	607a      	str	r2, [r7, #4]
 801f136:	603b      	str	r3, [r7, #0]
 801f138:	460b      	mov	r3, r1
 801f13a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f140:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801f142:	697b      	ldr	r3, [r7, #20]
 801f144:	2b08      	cmp	r3, #8
 801f146:	d006      	beq.n	801f156 <I2C_MasterRequestWrite+0x2a>
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	2b01      	cmp	r3, #1
 801f14c:	d003      	beq.n	801f156 <I2C_MasterRequestWrite+0x2a>
 801f14e:	697b      	ldr	r3, [r7, #20]
 801f150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801f154:	d108      	bne.n	801f168 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f156:	68fb      	ldr	r3, [r7, #12]
 801f158:	681b      	ldr	r3, [r3, #0]
 801f15a:	681a      	ldr	r2, [r3, #0]
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f164:	601a      	str	r2, [r3, #0]
 801f166:	e00b      	b.n	801f180 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 801f168:	68fb      	ldr	r3, [r7, #12]
 801f16a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f16c:	2b12      	cmp	r3, #18
 801f16e:	d107      	bne.n	801f180 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801f170:	68fb      	ldr	r3, [r7, #12]
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	681a      	ldr	r2, [r3, #0]
 801f176:	68fb      	ldr	r3, [r7, #12]
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801f17e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801f180:	683b      	ldr	r3, [r7, #0]
 801f182:	9300      	str	r3, [sp, #0]
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	2200      	movs	r2, #0
 801f188:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801f18c:	68f8      	ldr	r0, [r7, #12]
 801f18e:	f000 f84f 	bl	801f230 <I2C_WaitOnFlagUntilTimeout>
 801f192:	4603      	mov	r3, r0
 801f194:	2b00      	cmp	r3, #0
 801f196:	d00d      	beq.n	801f1b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801f198:	68fb      	ldr	r3, [r7, #12]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1a6:	d103      	bne.n	801f1b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f1ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801f1b0:	2303      	movs	r3, #3
 801f1b2:	e035      	b.n	801f220 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	691b      	ldr	r3, [r3, #16]
 801f1b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f1bc:	d108      	bne.n	801f1d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801f1be:	897b      	ldrh	r3, [r7, #10]
 801f1c0:	b2db      	uxtb	r3, r3
 801f1c2:	461a      	mov	r2, r3
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	681b      	ldr	r3, [r3, #0]
 801f1c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f1cc:	611a      	str	r2, [r3, #16]
 801f1ce:	e01b      	b.n	801f208 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801f1d0:	897b      	ldrh	r3, [r7, #10]
 801f1d2:	11db      	asrs	r3, r3, #7
 801f1d4:	b2db      	uxtb	r3, r3
 801f1d6:	f003 0306 	and.w	r3, r3, #6
 801f1da:	b2db      	uxtb	r3, r3
 801f1dc:	f063 030f 	orn	r3, r3, #15
 801f1e0:	b2da      	uxtb	r2, r3
 801f1e2:	68fb      	ldr	r3, [r7, #12]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801f1e8:	683b      	ldr	r3, [r7, #0]
 801f1ea:	687a      	ldr	r2, [r7, #4]
 801f1ec:	490e      	ldr	r1, [pc, #56]	; (801f228 <I2C_MasterRequestWrite+0xfc>)
 801f1ee:	68f8      	ldr	r0, [r7, #12]
 801f1f0:	f000 f875 	bl	801f2de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f1f4:	4603      	mov	r3, r0
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d001      	beq.n	801f1fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801f1fa:	2301      	movs	r3, #1
 801f1fc:	e010      	b.n	801f220 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801f1fe:	897b      	ldrh	r3, [r7, #10]
 801f200:	b2da      	uxtb	r2, r3
 801f202:	68fb      	ldr	r3, [r7, #12]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801f208:	683b      	ldr	r3, [r7, #0]
 801f20a:	687a      	ldr	r2, [r7, #4]
 801f20c:	4907      	ldr	r1, [pc, #28]	; (801f22c <I2C_MasterRequestWrite+0x100>)
 801f20e:	68f8      	ldr	r0, [r7, #12]
 801f210:	f000 f865 	bl	801f2de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801f214:	4603      	mov	r3, r0
 801f216:	2b00      	cmp	r3, #0
 801f218:	d001      	beq.n	801f21e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801f21a:	2301      	movs	r3, #1
 801f21c:	e000      	b.n	801f220 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 801f21e:	2300      	movs	r3, #0
}
 801f220:	4618      	mov	r0, r3
 801f222:	3718      	adds	r7, #24
 801f224:	46bd      	mov	sp, r7
 801f226:	bd80      	pop	{r7, pc}
 801f228:	00010008 	.word	0x00010008
 801f22c:	00010002 	.word	0x00010002

0801f230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 801f230:	b580      	push	{r7, lr}
 801f232:	b084      	sub	sp, #16
 801f234:	af00      	add	r7, sp, #0
 801f236:	60f8      	str	r0, [r7, #12]
 801f238:	60b9      	str	r1, [r7, #8]
 801f23a:	603b      	str	r3, [r7, #0]
 801f23c:	4613      	mov	r3, r2
 801f23e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f240:	e025      	b.n	801f28e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f242:	683b      	ldr	r3, [r7, #0]
 801f244:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f248:	d021      	beq.n	801f28e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f24a:	f7fe fd6f 	bl	801dd2c <HAL_GetTick>
 801f24e:	4602      	mov	r2, r0
 801f250:	69bb      	ldr	r3, [r7, #24]
 801f252:	1ad3      	subs	r3, r2, r3
 801f254:	683a      	ldr	r2, [r7, #0]
 801f256:	429a      	cmp	r2, r3
 801f258:	d302      	bcc.n	801f260 <I2C_WaitOnFlagUntilTimeout+0x30>
 801f25a:	683b      	ldr	r3, [r7, #0]
 801f25c:	2b00      	cmp	r3, #0
 801f25e:	d116      	bne.n	801f28e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 801f260:	68fb      	ldr	r3, [r7, #12]
 801f262:	2200      	movs	r2, #0
 801f264:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	2220      	movs	r2, #32
 801f26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	2200      	movs	r2, #0
 801f272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f27a:	f043 0220 	orr.w	r2, r3, #32
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f282:	68fb      	ldr	r3, [r7, #12]
 801f284:	2200      	movs	r2, #0
 801f286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f28a:	2301      	movs	r3, #1
 801f28c:	e023      	b.n	801f2d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801f28e:	68bb      	ldr	r3, [r7, #8]
 801f290:	0c1b      	lsrs	r3, r3, #16
 801f292:	b2db      	uxtb	r3, r3
 801f294:	2b01      	cmp	r3, #1
 801f296:	d10d      	bne.n	801f2b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	695b      	ldr	r3, [r3, #20]
 801f29e:	43da      	mvns	r2, r3
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	4013      	ands	r3, r2
 801f2a4:	b29b      	uxth	r3, r3
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	bf0c      	ite	eq
 801f2aa:	2301      	moveq	r3, #1
 801f2ac:	2300      	movne	r3, #0
 801f2ae:	b2db      	uxtb	r3, r3
 801f2b0:	461a      	mov	r2, r3
 801f2b2:	e00c      	b.n	801f2ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	681b      	ldr	r3, [r3, #0]
 801f2b8:	699b      	ldr	r3, [r3, #24]
 801f2ba:	43da      	mvns	r2, r3
 801f2bc:	68bb      	ldr	r3, [r7, #8]
 801f2be:	4013      	ands	r3, r2
 801f2c0:	b29b      	uxth	r3, r3
 801f2c2:	2b00      	cmp	r3, #0
 801f2c4:	bf0c      	ite	eq
 801f2c6:	2301      	moveq	r3, #1
 801f2c8:	2300      	movne	r3, #0
 801f2ca:	b2db      	uxtb	r3, r3
 801f2cc:	461a      	mov	r2, r3
 801f2ce:	79fb      	ldrb	r3, [r7, #7]
 801f2d0:	429a      	cmp	r2, r3
 801f2d2:	d0b6      	beq.n	801f242 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801f2d4:	2300      	movs	r3, #0
}
 801f2d6:	4618      	mov	r0, r3
 801f2d8:	3710      	adds	r7, #16
 801f2da:	46bd      	mov	sp, r7
 801f2dc:	bd80      	pop	{r7, pc}

0801f2de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801f2de:	b580      	push	{r7, lr}
 801f2e0:	b084      	sub	sp, #16
 801f2e2:	af00      	add	r7, sp, #0
 801f2e4:	60f8      	str	r0, [r7, #12]
 801f2e6:	60b9      	str	r1, [r7, #8]
 801f2e8:	607a      	str	r2, [r7, #4]
 801f2ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f2ec:	e051      	b.n	801f392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	681b      	ldr	r3, [r3, #0]
 801f2f2:	695b      	ldr	r3, [r3, #20]
 801f2f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f2f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f2fc:	d123      	bne.n	801f346 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801f2fe:	68fb      	ldr	r3, [r7, #12]
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	681a      	ldr	r2, [r3, #0]
 801f304:	68fb      	ldr	r3, [r7, #12]
 801f306:	681b      	ldr	r3, [r3, #0]
 801f308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801f30c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f316:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	2200      	movs	r2, #0
 801f31c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	2220      	movs	r2, #32
 801f322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f326:	68fb      	ldr	r3, [r7, #12]
 801f328:	2200      	movs	r2, #0
 801f32a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f32e:	68fb      	ldr	r3, [r7, #12]
 801f330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f332:	f043 0204 	orr.w	r2, r3, #4
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	2200      	movs	r2, #0
 801f33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 801f342:	2301      	movs	r3, #1
 801f344:	e046      	b.n	801f3d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f346:	687b      	ldr	r3, [r7, #4]
 801f348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f34c:	d021      	beq.n	801f392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f34e:	f7fe fced 	bl	801dd2c <HAL_GetTick>
 801f352:	4602      	mov	r2, r0
 801f354:	683b      	ldr	r3, [r7, #0]
 801f356:	1ad3      	subs	r3, r2, r3
 801f358:	687a      	ldr	r2, [r7, #4]
 801f35a:	429a      	cmp	r2, r3
 801f35c:	d302      	bcc.n	801f364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801f35e:	687b      	ldr	r3, [r7, #4]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d116      	bne.n	801f392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	2200      	movs	r2, #0
 801f368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	2220      	movs	r2, #32
 801f36e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	2200      	movs	r2, #0
 801f376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f37e:	f043 0220 	orr.w	r2, r3, #32
 801f382:	68fb      	ldr	r3, [r7, #12]
 801f384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	2200      	movs	r2, #0
 801f38a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f38e:	2301      	movs	r3, #1
 801f390:	e020      	b.n	801f3d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801f392:	68bb      	ldr	r3, [r7, #8]
 801f394:	0c1b      	lsrs	r3, r3, #16
 801f396:	b2db      	uxtb	r3, r3
 801f398:	2b01      	cmp	r3, #1
 801f39a:	d10c      	bne.n	801f3b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	695b      	ldr	r3, [r3, #20]
 801f3a2:	43da      	mvns	r2, r3
 801f3a4:	68bb      	ldr	r3, [r7, #8]
 801f3a6:	4013      	ands	r3, r2
 801f3a8:	b29b      	uxth	r3, r3
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	bf14      	ite	ne
 801f3ae:	2301      	movne	r3, #1
 801f3b0:	2300      	moveq	r3, #0
 801f3b2:	b2db      	uxtb	r3, r3
 801f3b4:	e00b      	b.n	801f3ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	699b      	ldr	r3, [r3, #24]
 801f3bc:	43da      	mvns	r2, r3
 801f3be:	68bb      	ldr	r3, [r7, #8]
 801f3c0:	4013      	ands	r3, r2
 801f3c2:	b29b      	uxth	r3, r3
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	bf14      	ite	ne
 801f3c8:	2301      	movne	r3, #1
 801f3ca:	2300      	moveq	r3, #0
 801f3cc:	b2db      	uxtb	r3, r3
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d18d      	bne.n	801f2ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 801f3d2:	2300      	movs	r3, #0
}
 801f3d4:	4618      	mov	r0, r3
 801f3d6:	3710      	adds	r7, #16
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}

0801f3dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f3dc:	b580      	push	{r7, lr}
 801f3de:	b084      	sub	sp, #16
 801f3e0:	af00      	add	r7, sp, #0
 801f3e2:	60f8      	str	r0, [r7, #12]
 801f3e4:	60b9      	str	r1, [r7, #8]
 801f3e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f3e8:	e02d      	b.n	801f446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f3ea:	68f8      	ldr	r0, [r7, #12]
 801f3ec:	f000 f878 	bl	801f4e0 <I2C_IsAcknowledgeFailed>
 801f3f0:	4603      	mov	r3, r0
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d001      	beq.n	801f3fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f3f6:	2301      	movs	r3, #1
 801f3f8:	e02d      	b.n	801f456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f3fa:	68bb      	ldr	r3, [r7, #8]
 801f3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f400:	d021      	beq.n	801f446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f402:	f7fe fc93 	bl	801dd2c <HAL_GetTick>
 801f406:	4602      	mov	r2, r0
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	1ad3      	subs	r3, r2, r3
 801f40c:	68ba      	ldr	r2, [r7, #8]
 801f40e:	429a      	cmp	r2, r3
 801f410:	d302      	bcc.n	801f418 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 801f412:	68bb      	ldr	r3, [r7, #8]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d116      	bne.n	801f446 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	2200      	movs	r2, #0
 801f41c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f41e:	68fb      	ldr	r3, [r7, #12]
 801f420:	2220      	movs	r2, #32
 801f422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	2200      	movs	r2, #0
 801f42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f42e:	68fb      	ldr	r3, [r7, #12]
 801f430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f432:	f043 0220 	orr.w	r2, r3, #32
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f43a:	68fb      	ldr	r3, [r7, #12]
 801f43c:	2200      	movs	r2, #0
 801f43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f442:	2301      	movs	r3, #1
 801f444:	e007      	b.n	801f456 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	695b      	ldr	r3, [r3, #20]
 801f44c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f450:	2b80      	cmp	r3, #128	; 0x80
 801f452:	d1ca      	bne.n	801f3ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f454:	2300      	movs	r3, #0
}
 801f456:	4618      	mov	r0, r3
 801f458:	3710      	adds	r7, #16
 801f45a:	46bd      	mov	sp, r7
 801f45c:	bd80      	pop	{r7, pc}

0801f45e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801f45e:	b580      	push	{r7, lr}
 801f460:	b084      	sub	sp, #16
 801f462:	af00      	add	r7, sp, #0
 801f464:	60f8      	str	r0, [r7, #12]
 801f466:	60b9      	str	r1, [r7, #8]
 801f468:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f46a:	e02d      	b.n	801f4c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801f46c:	68f8      	ldr	r0, [r7, #12]
 801f46e:	f000 f837 	bl	801f4e0 <I2C_IsAcknowledgeFailed>
 801f472:	4603      	mov	r3, r0
 801f474:	2b00      	cmp	r3, #0
 801f476:	d001      	beq.n	801f47c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801f478:	2301      	movs	r3, #1
 801f47a:	e02d      	b.n	801f4d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f47c:	68bb      	ldr	r3, [r7, #8]
 801f47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f482:	d021      	beq.n	801f4c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f484:	f7fe fc52 	bl	801dd2c <HAL_GetTick>
 801f488:	4602      	mov	r2, r0
 801f48a:	687b      	ldr	r3, [r7, #4]
 801f48c:	1ad3      	subs	r3, r2, r3
 801f48e:	68ba      	ldr	r2, [r7, #8]
 801f490:	429a      	cmp	r2, r3
 801f492:	d302      	bcc.n	801f49a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 801f494:	68bb      	ldr	r3, [r7, #8]
 801f496:	2b00      	cmp	r3, #0
 801f498:	d116      	bne.n	801f4c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801f49a:	68fb      	ldr	r3, [r7, #12]
 801f49c:	2200      	movs	r2, #0
 801f49e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	2220      	movs	r2, #32
 801f4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801f4b0:	68fb      	ldr	r3, [r7, #12]
 801f4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f4b4:	f043 0220 	orr.w	r2, r3, #32
 801f4b8:	68fb      	ldr	r3, [r7, #12]
 801f4ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801f4bc:	68fb      	ldr	r3, [r7, #12]
 801f4be:	2200      	movs	r2, #0
 801f4c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801f4c4:	2301      	movs	r3, #1
 801f4c6:	e007      	b.n	801f4d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	681b      	ldr	r3, [r3, #0]
 801f4cc:	695b      	ldr	r3, [r3, #20]
 801f4ce:	f003 0304 	and.w	r3, r3, #4
 801f4d2:	2b04      	cmp	r3, #4
 801f4d4:	d1ca      	bne.n	801f46c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801f4d6:	2300      	movs	r3, #0
}
 801f4d8:	4618      	mov	r0, r3
 801f4da:	3710      	adds	r7, #16
 801f4dc:	46bd      	mov	sp, r7
 801f4de:	bd80      	pop	{r7, pc}

0801f4e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 801f4e0:	b480      	push	{r7}
 801f4e2:	b083      	sub	sp, #12
 801f4e4:	af00      	add	r7, sp, #0
 801f4e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801f4e8:	687b      	ldr	r3, [r7, #4]
 801f4ea:	681b      	ldr	r3, [r3, #0]
 801f4ec:	695b      	ldr	r3, [r3, #20]
 801f4ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801f4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f4f6:	d11b      	bne.n	801f530 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 801f500:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	2200      	movs	r2, #0
 801f506:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 801f508:	687b      	ldr	r3, [r7, #4]
 801f50a:	2220      	movs	r2, #32
 801f50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	2200      	movs	r2, #0
 801f514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f51c:	f043 0204 	orr.w	r2, r3, #4
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801f524:	687b      	ldr	r3, [r7, #4]
 801f526:	2200      	movs	r2, #0
 801f528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801f52c:	2301      	movs	r3, #1
 801f52e:	e000      	b.n	801f532 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 801f530:	2300      	movs	r3, #0
}
 801f532:	4618      	mov	r0, r3
 801f534:	370c      	adds	r7, #12
 801f536:	46bd      	mov	sp, r7
 801f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f53c:	4770      	bx	lr
	...

0801f540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801f540:	b580      	push	{r7, lr}
 801f542:	b086      	sub	sp, #24
 801f544:	af00      	add	r7, sp, #0
 801f546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d101      	bne.n	801f552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801f54e:	2301      	movs	r3, #1
 801f550:	e25b      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801f552:	687b      	ldr	r3, [r7, #4]
 801f554:	681b      	ldr	r3, [r3, #0]
 801f556:	f003 0301 	and.w	r3, r3, #1
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d075      	beq.n	801f64a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f55e:	4ba3      	ldr	r3, [pc, #652]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f560:	689b      	ldr	r3, [r3, #8]
 801f562:	f003 030c 	and.w	r3, r3, #12
 801f566:	2b04      	cmp	r3, #4
 801f568:	d00c      	beq.n	801f584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f56a:	4ba0      	ldr	r3, [pc, #640]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f56c:	689b      	ldr	r3, [r3, #8]
 801f56e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801f572:	2b08      	cmp	r3, #8
 801f574:	d112      	bne.n	801f59c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801f576:	4b9d      	ldr	r3, [pc, #628]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f578:	685b      	ldr	r3, [r3, #4]
 801f57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f57e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f582:	d10b      	bne.n	801f59c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f584:	4b99      	ldr	r3, [pc, #612]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d05b      	beq.n	801f648 <HAL_RCC_OscConfig+0x108>
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	685b      	ldr	r3, [r3, #4]
 801f594:	2b00      	cmp	r3, #0
 801f596:	d157      	bne.n	801f648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801f598:	2301      	movs	r3, #1
 801f59a:	e236      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	685b      	ldr	r3, [r3, #4]
 801f5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f5a4:	d106      	bne.n	801f5b4 <HAL_RCC_OscConfig+0x74>
 801f5a6:	4b91      	ldr	r3, [pc, #580]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5a8:	681b      	ldr	r3, [r3, #0]
 801f5aa:	4a90      	ldr	r2, [pc, #576]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f5b0:	6013      	str	r3, [r2, #0]
 801f5b2:	e01d      	b.n	801f5f0 <HAL_RCC_OscConfig+0xb0>
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	685b      	ldr	r3, [r3, #4]
 801f5b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801f5bc:	d10c      	bne.n	801f5d8 <HAL_RCC_OscConfig+0x98>
 801f5be:	4b8b      	ldr	r3, [pc, #556]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	4a8a      	ldr	r2, [pc, #552]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801f5c8:	6013      	str	r3, [r2, #0]
 801f5ca:	4b88      	ldr	r3, [pc, #544]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	4a87      	ldr	r2, [pc, #540]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f5d4:	6013      	str	r3, [r2, #0]
 801f5d6:	e00b      	b.n	801f5f0 <HAL_RCC_OscConfig+0xb0>
 801f5d8:	4b84      	ldr	r3, [pc, #528]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5da:	681b      	ldr	r3, [r3, #0]
 801f5dc:	4a83      	ldr	r2, [pc, #524]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f5e2:	6013      	str	r3, [r2, #0]
 801f5e4:	4b81      	ldr	r3, [pc, #516]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5e6:	681b      	ldr	r3, [r3, #0]
 801f5e8:	4a80      	ldr	r2, [pc, #512]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f5ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801f5f0:	687b      	ldr	r3, [r7, #4]
 801f5f2:	685b      	ldr	r3, [r3, #4]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d013      	beq.n	801f620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f5f8:	f7fe fb98 	bl	801dd2c <HAL_GetTick>
 801f5fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f5fe:	e008      	b.n	801f612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f600:	f7fe fb94 	bl	801dd2c <HAL_GetTick>
 801f604:	4602      	mov	r2, r0
 801f606:	693b      	ldr	r3, [r7, #16]
 801f608:	1ad3      	subs	r3, r2, r3
 801f60a:	2b64      	cmp	r3, #100	; 0x64
 801f60c:	d901      	bls.n	801f612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801f60e:	2303      	movs	r3, #3
 801f610:	e1fb      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801f612:	4b76      	ldr	r3, [pc, #472]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d0f0      	beq.n	801f600 <HAL_RCC_OscConfig+0xc0>
 801f61e:	e014      	b.n	801f64a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f620:	f7fe fb84 	bl	801dd2c <HAL_GetTick>
 801f624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f626:	e008      	b.n	801f63a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801f628:	f7fe fb80 	bl	801dd2c <HAL_GetTick>
 801f62c:	4602      	mov	r2, r0
 801f62e:	693b      	ldr	r3, [r7, #16]
 801f630:	1ad3      	subs	r3, r2, r3
 801f632:	2b64      	cmp	r3, #100	; 0x64
 801f634:	d901      	bls.n	801f63a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801f636:	2303      	movs	r3, #3
 801f638:	e1e7      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801f63a:	4b6c      	ldr	r3, [pc, #432]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f63c:	681b      	ldr	r3, [r3, #0]
 801f63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801f642:	2b00      	cmp	r3, #0
 801f644:	d1f0      	bne.n	801f628 <HAL_RCC_OscConfig+0xe8>
 801f646:	e000      	b.n	801f64a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801f648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	681b      	ldr	r3, [r3, #0]
 801f64e:	f003 0302 	and.w	r3, r3, #2
 801f652:	2b00      	cmp	r3, #0
 801f654:	d063      	beq.n	801f71e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f656:	4b65      	ldr	r3, [pc, #404]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f658:	689b      	ldr	r3, [r3, #8]
 801f65a:	f003 030c 	and.w	r3, r3, #12
 801f65e:	2b00      	cmp	r3, #0
 801f660:	d00b      	beq.n	801f67a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f662:	4b62      	ldr	r3, [pc, #392]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f664:	689b      	ldr	r3, [r3, #8]
 801f666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801f66a:	2b08      	cmp	r3, #8
 801f66c:	d11c      	bne.n	801f6a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801f66e:	4b5f      	ldr	r3, [pc, #380]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f670:	685b      	ldr	r3, [r3, #4]
 801f672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f676:	2b00      	cmp	r3, #0
 801f678:	d116      	bne.n	801f6a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f67a:	4b5c      	ldr	r3, [pc, #368]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	f003 0302 	and.w	r3, r3, #2
 801f682:	2b00      	cmp	r3, #0
 801f684:	d005      	beq.n	801f692 <HAL_RCC_OscConfig+0x152>
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	68db      	ldr	r3, [r3, #12]
 801f68a:	2b01      	cmp	r3, #1
 801f68c:	d001      	beq.n	801f692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801f68e:	2301      	movs	r3, #1
 801f690:	e1bb      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f692:	4b56      	ldr	r3, [pc, #344]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f694:	681b      	ldr	r3, [r3, #0]
 801f696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	691b      	ldr	r3, [r3, #16]
 801f69e:	00db      	lsls	r3, r3, #3
 801f6a0:	4952      	ldr	r1, [pc, #328]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f6a2:	4313      	orrs	r3, r2
 801f6a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801f6a6:	e03a      	b.n	801f71e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801f6a8:	687b      	ldr	r3, [r7, #4]
 801f6aa:	68db      	ldr	r3, [r3, #12]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d020      	beq.n	801f6f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801f6b0:	4b4f      	ldr	r3, [pc, #316]	; (801f7f0 <HAL_RCC_OscConfig+0x2b0>)
 801f6b2:	2201      	movs	r2, #1
 801f6b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f6b6:	f7fe fb39 	bl	801dd2c <HAL_GetTick>
 801f6ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f6bc:	e008      	b.n	801f6d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f6be:	f7fe fb35 	bl	801dd2c <HAL_GetTick>
 801f6c2:	4602      	mov	r2, r0
 801f6c4:	693b      	ldr	r3, [r7, #16]
 801f6c6:	1ad3      	subs	r3, r2, r3
 801f6c8:	2b02      	cmp	r3, #2
 801f6ca:	d901      	bls.n	801f6d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801f6cc:	2303      	movs	r3, #3
 801f6ce:	e19c      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801f6d0:	4b46      	ldr	r3, [pc, #280]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	f003 0302 	and.w	r3, r3, #2
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d0f0      	beq.n	801f6be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801f6dc:	4b43      	ldr	r3, [pc, #268]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	691b      	ldr	r3, [r3, #16]
 801f6e8:	00db      	lsls	r3, r3, #3
 801f6ea:	4940      	ldr	r1, [pc, #256]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f6ec:	4313      	orrs	r3, r2
 801f6ee:	600b      	str	r3, [r1, #0]
 801f6f0:	e015      	b.n	801f71e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801f6f2:	4b3f      	ldr	r3, [pc, #252]	; (801f7f0 <HAL_RCC_OscConfig+0x2b0>)
 801f6f4:	2200      	movs	r2, #0
 801f6f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801f6f8:	f7fe fb18 	bl	801dd2c <HAL_GetTick>
 801f6fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f6fe:	e008      	b.n	801f712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801f700:	f7fe fb14 	bl	801dd2c <HAL_GetTick>
 801f704:	4602      	mov	r2, r0
 801f706:	693b      	ldr	r3, [r7, #16]
 801f708:	1ad3      	subs	r3, r2, r3
 801f70a:	2b02      	cmp	r3, #2
 801f70c:	d901      	bls.n	801f712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801f70e:	2303      	movs	r3, #3
 801f710:	e17b      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801f712:	4b36      	ldr	r3, [pc, #216]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f714:	681b      	ldr	r3, [r3, #0]
 801f716:	f003 0302 	and.w	r3, r3, #2
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d1f0      	bne.n	801f700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	681b      	ldr	r3, [r3, #0]
 801f722:	f003 0308 	and.w	r3, r3, #8
 801f726:	2b00      	cmp	r3, #0
 801f728:	d030      	beq.n	801f78c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	695b      	ldr	r3, [r3, #20]
 801f72e:	2b00      	cmp	r3, #0
 801f730:	d016      	beq.n	801f760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801f732:	4b30      	ldr	r3, [pc, #192]	; (801f7f4 <HAL_RCC_OscConfig+0x2b4>)
 801f734:	2201      	movs	r2, #1
 801f736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f738:	f7fe faf8 	bl	801dd2c <HAL_GetTick>
 801f73c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f73e:	e008      	b.n	801f752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f740:	f7fe faf4 	bl	801dd2c <HAL_GetTick>
 801f744:	4602      	mov	r2, r0
 801f746:	693b      	ldr	r3, [r7, #16]
 801f748:	1ad3      	subs	r3, r2, r3
 801f74a:	2b02      	cmp	r3, #2
 801f74c:	d901      	bls.n	801f752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801f74e:	2303      	movs	r3, #3
 801f750:	e15b      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801f752:	4b26      	ldr	r3, [pc, #152]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f756:	f003 0302 	and.w	r3, r3, #2
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d0f0      	beq.n	801f740 <HAL_RCC_OscConfig+0x200>
 801f75e:	e015      	b.n	801f78c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801f760:	4b24      	ldr	r3, [pc, #144]	; (801f7f4 <HAL_RCC_OscConfig+0x2b4>)
 801f762:	2200      	movs	r2, #0
 801f764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f766:	f7fe fae1 	bl	801dd2c <HAL_GetTick>
 801f76a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f76c:	e008      	b.n	801f780 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801f76e:	f7fe fadd 	bl	801dd2c <HAL_GetTick>
 801f772:	4602      	mov	r2, r0
 801f774:	693b      	ldr	r3, [r7, #16]
 801f776:	1ad3      	subs	r3, r2, r3
 801f778:	2b02      	cmp	r3, #2
 801f77a:	d901      	bls.n	801f780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801f77c:	2303      	movs	r3, #3
 801f77e:	e144      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801f780:	4b1a      	ldr	r3, [pc, #104]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f784:	f003 0302 	and.w	r3, r3, #2
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d1f0      	bne.n	801f76e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	f003 0304 	and.w	r3, r3, #4
 801f794:	2b00      	cmp	r3, #0
 801f796:	f000 80a0 	beq.w	801f8da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801f79a:	2300      	movs	r3, #0
 801f79c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801f79e:	4b13      	ldr	r3, [pc, #76]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d10f      	bne.n	801f7ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801f7aa:	2300      	movs	r3, #0
 801f7ac:	60bb      	str	r3, [r7, #8]
 801f7ae:	4b0f      	ldr	r3, [pc, #60]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7b2:	4a0e      	ldr	r2, [pc, #56]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f7b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801f7b8:	6413      	str	r3, [r2, #64]	; 0x40
 801f7ba:	4b0c      	ldr	r3, [pc, #48]	; (801f7ec <HAL_RCC_OscConfig+0x2ac>)
 801f7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f7be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f7c2:	60bb      	str	r3, [r7, #8]
 801f7c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801f7c6:	2301      	movs	r3, #1
 801f7c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f7ca:	4b0b      	ldr	r3, [pc, #44]	; (801f7f8 <HAL_RCC_OscConfig+0x2b8>)
 801f7cc:	681b      	ldr	r3, [r3, #0]
 801f7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d121      	bne.n	801f81a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801f7d6:	4b08      	ldr	r3, [pc, #32]	; (801f7f8 <HAL_RCC_OscConfig+0x2b8>)
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	4a07      	ldr	r2, [pc, #28]	; (801f7f8 <HAL_RCC_OscConfig+0x2b8>)
 801f7dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801f7e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801f7e2:	f7fe faa3 	bl	801dd2c <HAL_GetTick>
 801f7e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f7e8:	e011      	b.n	801f80e <HAL_RCC_OscConfig+0x2ce>
 801f7ea:	bf00      	nop
 801f7ec:	40023800 	.word	0x40023800
 801f7f0:	42470000 	.word	0x42470000
 801f7f4:	42470e80 	.word	0x42470e80
 801f7f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801f7fc:	f7fe fa96 	bl	801dd2c <HAL_GetTick>
 801f800:	4602      	mov	r2, r0
 801f802:	693b      	ldr	r3, [r7, #16]
 801f804:	1ad3      	subs	r3, r2, r3
 801f806:	2b02      	cmp	r3, #2
 801f808:	d901      	bls.n	801f80e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 801f80a:	2303      	movs	r3, #3
 801f80c:	e0fd      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801f80e:	4b81      	ldr	r3, [pc, #516]	; (801fa14 <HAL_RCC_OscConfig+0x4d4>)
 801f810:	681b      	ldr	r3, [r3, #0]
 801f812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f816:	2b00      	cmp	r3, #0
 801f818:	d0f0      	beq.n	801f7fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	689b      	ldr	r3, [r3, #8]
 801f81e:	2b01      	cmp	r3, #1
 801f820:	d106      	bne.n	801f830 <HAL_RCC_OscConfig+0x2f0>
 801f822:	4b7d      	ldr	r3, [pc, #500]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f826:	4a7c      	ldr	r2, [pc, #496]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f828:	f043 0301 	orr.w	r3, r3, #1
 801f82c:	6713      	str	r3, [r2, #112]	; 0x70
 801f82e:	e01c      	b.n	801f86a <HAL_RCC_OscConfig+0x32a>
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	689b      	ldr	r3, [r3, #8]
 801f834:	2b05      	cmp	r3, #5
 801f836:	d10c      	bne.n	801f852 <HAL_RCC_OscConfig+0x312>
 801f838:	4b77      	ldr	r3, [pc, #476]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f83a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f83c:	4a76      	ldr	r2, [pc, #472]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f83e:	f043 0304 	orr.w	r3, r3, #4
 801f842:	6713      	str	r3, [r2, #112]	; 0x70
 801f844:	4b74      	ldr	r3, [pc, #464]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f848:	4a73      	ldr	r2, [pc, #460]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f84a:	f043 0301 	orr.w	r3, r3, #1
 801f84e:	6713      	str	r3, [r2, #112]	; 0x70
 801f850:	e00b      	b.n	801f86a <HAL_RCC_OscConfig+0x32a>
 801f852:	4b71      	ldr	r3, [pc, #452]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f856:	4a70      	ldr	r2, [pc, #448]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f858:	f023 0301 	bic.w	r3, r3, #1
 801f85c:	6713      	str	r3, [r2, #112]	; 0x70
 801f85e:	4b6e      	ldr	r3, [pc, #440]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f862:	4a6d      	ldr	r2, [pc, #436]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f864:	f023 0304 	bic.w	r3, r3, #4
 801f868:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	689b      	ldr	r3, [r3, #8]
 801f86e:	2b00      	cmp	r3, #0
 801f870:	d015      	beq.n	801f89e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801f872:	f7fe fa5b 	bl	801dd2c <HAL_GetTick>
 801f876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f878:	e00a      	b.n	801f890 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f87a:	f7fe fa57 	bl	801dd2c <HAL_GetTick>
 801f87e:	4602      	mov	r2, r0
 801f880:	693b      	ldr	r3, [r7, #16]
 801f882:	1ad3      	subs	r3, r2, r3
 801f884:	f241 3288 	movw	r2, #5000	; 0x1388
 801f888:	4293      	cmp	r3, r2
 801f88a:	d901      	bls.n	801f890 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801f88c:	2303      	movs	r3, #3
 801f88e:	e0bc      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801f890:	4b61      	ldr	r3, [pc, #388]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f894:	f003 0302 	and.w	r3, r3, #2
 801f898:	2b00      	cmp	r3, #0
 801f89a:	d0ee      	beq.n	801f87a <HAL_RCC_OscConfig+0x33a>
 801f89c:	e014      	b.n	801f8c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801f89e:	f7fe fa45 	bl	801dd2c <HAL_GetTick>
 801f8a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f8a4:	e00a      	b.n	801f8bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801f8a6:	f7fe fa41 	bl	801dd2c <HAL_GetTick>
 801f8aa:	4602      	mov	r2, r0
 801f8ac:	693b      	ldr	r3, [r7, #16]
 801f8ae:	1ad3      	subs	r3, r2, r3
 801f8b0:	f241 3288 	movw	r2, #5000	; 0x1388
 801f8b4:	4293      	cmp	r3, r2
 801f8b6:	d901      	bls.n	801f8bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 801f8b8:	2303      	movs	r3, #3
 801f8ba:	e0a6      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801f8bc:	4b56      	ldr	r3, [pc, #344]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f8c0:	f003 0302 	and.w	r3, r3, #2
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d1ee      	bne.n	801f8a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801f8c8:	7dfb      	ldrb	r3, [r7, #23]
 801f8ca:	2b01      	cmp	r3, #1
 801f8cc:	d105      	bne.n	801f8da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801f8ce:	4b52      	ldr	r3, [pc, #328]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f8d2:	4a51      	ldr	r2, [pc, #324]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f8d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801f8d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	699b      	ldr	r3, [r3, #24]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	f000 8092 	beq.w	801fa08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801f8e4:	4b4c      	ldr	r3, [pc, #304]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f8e6:	689b      	ldr	r3, [r3, #8]
 801f8e8:	f003 030c 	and.w	r3, r3, #12
 801f8ec:	2b08      	cmp	r3, #8
 801f8ee:	d05c      	beq.n	801f9aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	699b      	ldr	r3, [r3, #24]
 801f8f4:	2b02      	cmp	r3, #2
 801f8f6:	d141      	bne.n	801f97c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f8f8:	4b48      	ldr	r3, [pc, #288]	; (801fa1c <HAL_RCC_OscConfig+0x4dc>)
 801f8fa:	2200      	movs	r2, #0
 801f8fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f8fe:	f7fe fa15 	bl	801dd2c <HAL_GetTick>
 801f902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f904:	e008      	b.n	801f918 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f906:	f7fe fa11 	bl	801dd2c <HAL_GetTick>
 801f90a:	4602      	mov	r2, r0
 801f90c:	693b      	ldr	r3, [r7, #16]
 801f90e:	1ad3      	subs	r3, r2, r3
 801f910:	2b02      	cmp	r3, #2
 801f912:	d901      	bls.n	801f918 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 801f914:	2303      	movs	r3, #3
 801f916:	e078      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f918:	4b3f      	ldr	r3, [pc, #252]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f920:	2b00      	cmp	r3, #0
 801f922:	d1f0      	bne.n	801f906 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	69da      	ldr	r2, [r3, #28]
 801f928:	687b      	ldr	r3, [r7, #4]
 801f92a:	6a1b      	ldr	r3, [r3, #32]
 801f92c:	431a      	orrs	r2, r3
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f932:	019b      	lsls	r3, r3, #6
 801f934:	431a      	orrs	r2, r3
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f93a:	085b      	lsrs	r3, r3, #1
 801f93c:	3b01      	subs	r3, #1
 801f93e:	041b      	lsls	r3, r3, #16
 801f940:	431a      	orrs	r2, r3
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f946:	061b      	lsls	r3, r3, #24
 801f948:	4933      	ldr	r1, [pc, #204]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f94a:	4313      	orrs	r3, r2
 801f94c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801f94e:	4b33      	ldr	r3, [pc, #204]	; (801fa1c <HAL_RCC_OscConfig+0x4dc>)
 801f950:	2201      	movs	r2, #1
 801f952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f954:	f7fe f9ea 	bl	801dd2c <HAL_GetTick>
 801f958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f95a:	e008      	b.n	801f96e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f95c:	f7fe f9e6 	bl	801dd2c <HAL_GetTick>
 801f960:	4602      	mov	r2, r0
 801f962:	693b      	ldr	r3, [r7, #16]
 801f964:	1ad3      	subs	r3, r2, r3
 801f966:	2b02      	cmp	r3, #2
 801f968:	d901      	bls.n	801f96e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801f96a:	2303      	movs	r3, #3
 801f96c:	e04d      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801f96e:	4b2a      	ldr	r3, [pc, #168]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f976:	2b00      	cmp	r3, #0
 801f978:	d0f0      	beq.n	801f95c <HAL_RCC_OscConfig+0x41c>
 801f97a:	e045      	b.n	801fa08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801f97c:	4b27      	ldr	r3, [pc, #156]	; (801fa1c <HAL_RCC_OscConfig+0x4dc>)
 801f97e:	2200      	movs	r2, #0
 801f980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801f982:	f7fe f9d3 	bl	801dd2c <HAL_GetTick>
 801f986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f988:	e008      	b.n	801f99c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801f98a:	f7fe f9cf 	bl	801dd2c <HAL_GetTick>
 801f98e:	4602      	mov	r2, r0
 801f990:	693b      	ldr	r3, [r7, #16]
 801f992:	1ad3      	subs	r3, r2, r3
 801f994:	2b02      	cmp	r3, #2
 801f996:	d901      	bls.n	801f99c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 801f998:	2303      	movs	r3, #3
 801f99a:	e036      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801f99c:	4b1e      	ldr	r3, [pc, #120]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f99e:	681b      	ldr	r3, [r3, #0]
 801f9a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d1f0      	bne.n	801f98a <HAL_RCC_OscConfig+0x44a>
 801f9a8:	e02e      	b.n	801fa08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	699b      	ldr	r3, [r3, #24]
 801f9ae:	2b01      	cmp	r3, #1
 801f9b0:	d101      	bne.n	801f9b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 801f9b2:	2301      	movs	r3, #1
 801f9b4:	e029      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801f9b6:	4b18      	ldr	r3, [pc, #96]	; (801fa18 <HAL_RCC_OscConfig+0x4d8>)
 801f9b8:	685b      	ldr	r3, [r3, #4]
 801f9ba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	69db      	ldr	r3, [r3, #28]
 801f9c6:	429a      	cmp	r2, r3
 801f9c8:	d11c      	bne.n	801fa04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801f9d4:	429a      	cmp	r2, r3
 801f9d6:	d115      	bne.n	801fa04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f9d8:	68fa      	ldr	r2, [r7, #12]
 801f9da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801f9de:	4013      	ands	r3, r2
 801f9e0:	687a      	ldr	r2, [r7, #4]
 801f9e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801f9e4:	4293      	cmp	r3, r2
 801f9e6:	d10d      	bne.n	801fa04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801f9e8:	68fb      	ldr	r3, [r7, #12]
 801f9ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 801f9f2:	429a      	cmp	r2, r3
 801f9f4:	d106      	bne.n	801fa04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 801fa00:	429a      	cmp	r2, r3
 801fa02:	d001      	beq.n	801fa08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 801fa04:	2301      	movs	r3, #1
 801fa06:	e000      	b.n	801fa0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 801fa08:	2300      	movs	r3, #0
}
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	3718      	adds	r7, #24
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	bd80      	pop	{r7, pc}
 801fa12:	bf00      	nop
 801fa14:	40007000 	.word	0x40007000
 801fa18:	40023800 	.word	0x40023800
 801fa1c:	42470060 	.word	0x42470060

0801fa20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801fa20:	b580      	push	{r7, lr}
 801fa22:	b084      	sub	sp, #16
 801fa24:	af00      	add	r7, sp, #0
 801fa26:	6078      	str	r0, [r7, #4]
 801fa28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	2b00      	cmp	r3, #0
 801fa2e:	d101      	bne.n	801fa34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801fa30:	2301      	movs	r3, #1
 801fa32:	e0cc      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 801fa34:	4b68      	ldr	r3, [pc, #416]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	f003 030f 	and.w	r3, r3, #15
 801fa3c:	683a      	ldr	r2, [r7, #0]
 801fa3e:	429a      	cmp	r2, r3
 801fa40:	d90c      	bls.n	801fa5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fa42:	4b65      	ldr	r3, [pc, #404]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa44:	683a      	ldr	r2, [r7, #0]
 801fa46:	b2d2      	uxtb	r2, r2
 801fa48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fa4a:	4b63      	ldr	r3, [pc, #396]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	f003 030f 	and.w	r3, r3, #15
 801fa52:	683a      	ldr	r2, [r7, #0]
 801fa54:	429a      	cmp	r2, r3
 801fa56:	d001      	beq.n	801fa5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801fa58:	2301      	movs	r3, #1
 801fa5a:	e0b8      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	681b      	ldr	r3, [r3, #0]
 801fa60:	f003 0302 	and.w	r3, r3, #2
 801fa64:	2b00      	cmp	r3, #0
 801fa66:	d020      	beq.n	801faaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	f003 0304 	and.w	r3, r3, #4
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d005      	beq.n	801fa80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801fa74:	4b59      	ldr	r3, [pc, #356]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fa76:	689b      	ldr	r3, [r3, #8]
 801fa78:	4a58      	ldr	r2, [pc, #352]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fa7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801fa7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fa80:	687b      	ldr	r3, [r7, #4]
 801fa82:	681b      	ldr	r3, [r3, #0]
 801fa84:	f003 0308 	and.w	r3, r3, #8
 801fa88:	2b00      	cmp	r3, #0
 801fa8a:	d005      	beq.n	801fa98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801fa8c:	4b53      	ldr	r3, [pc, #332]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fa8e:	689b      	ldr	r3, [r3, #8]
 801fa90:	4a52      	ldr	r2, [pc, #328]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fa92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801fa96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801fa98:	4b50      	ldr	r3, [pc, #320]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fa9a:	689b      	ldr	r3, [r3, #8]
 801fa9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801faa0:	687b      	ldr	r3, [r7, #4]
 801faa2:	689b      	ldr	r3, [r3, #8]
 801faa4:	494d      	ldr	r1, [pc, #308]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801faa6:	4313      	orrs	r3, r2
 801faa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801faaa:	687b      	ldr	r3, [r7, #4]
 801faac:	681b      	ldr	r3, [r3, #0]
 801faae:	f003 0301 	and.w	r3, r3, #1
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d044      	beq.n	801fb40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	685b      	ldr	r3, [r3, #4]
 801faba:	2b01      	cmp	r3, #1
 801fabc:	d107      	bne.n	801face <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801fabe:	4b47      	ldr	r3, [pc, #284]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fac6:	2b00      	cmp	r3, #0
 801fac8:	d119      	bne.n	801fafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801faca:	2301      	movs	r3, #1
 801facc:	e07f      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	685b      	ldr	r3, [r3, #4]
 801fad2:	2b02      	cmp	r3, #2
 801fad4:	d003      	beq.n	801fade <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801fad6:	687b      	ldr	r3, [r7, #4]
 801fad8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801fada:	2b03      	cmp	r3, #3
 801fadc:	d107      	bne.n	801faee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801fade:	4b3f      	ldr	r3, [pc, #252]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fae0:	681b      	ldr	r3, [r3, #0]
 801fae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d109      	bne.n	801fafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801faea:	2301      	movs	r3, #1
 801faec:	e06f      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801faee:	4b3b      	ldr	r3, [pc, #236]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	f003 0302 	and.w	r3, r3, #2
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d101      	bne.n	801fafe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801fafa:	2301      	movs	r3, #1
 801fafc:	e067      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801fafe:	4b37      	ldr	r3, [pc, #220]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb00:	689b      	ldr	r3, [r3, #8]
 801fb02:	f023 0203 	bic.w	r2, r3, #3
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	685b      	ldr	r3, [r3, #4]
 801fb0a:	4934      	ldr	r1, [pc, #208]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb0c:	4313      	orrs	r3, r2
 801fb0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801fb10:	f7fe f90c 	bl	801dd2c <HAL_GetTick>
 801fb14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fb16:	e00a      	b.n	801fb2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801fb18:	f7fe f908 	bl	801dd2c <HAL_GetTick>
 801fb1c:	4602      	mov	r2, r0
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	1ad3      	subs	r3, r2, r3
 801fb22:	f241 3288 	movw	r2, #5000	; 0x1388
 801fb26:	4293      	cmp	r3, r2
 801fb28:	d901      	bls.n	801fb2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801fb2a:	2303      	movs	r3, #3
 801fb2c:	e04f      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801fb2e:	4b2b      	ldr	r3, [pc, #172]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb30:	689b      	ldr	r3, [r3, #8]
 801fb32:	f003 020c 	and.w	r2, r3, #12
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	685b      	ldr	r3, [r3, #4]
 801fb3a:	009b      	lsls	r3, r3, #2
 801fb3c:	429a      	cmp	r2, r3
 801fb3e:	d1eb      	bne.n	801fb18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801fb40:	4b25      	ldr	r3, [pc, #148]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	f003 030f 	and.w	r3, r3, #15
 801fb48:	683a      	ldr	r2, [r7, #0]
 801fb4a:	429a      	cmp	r2, r3
 801fb4c:	d20c      	bcs.n	801fb68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801fb4e:	4b22      	ldr	r3, [pc, #136]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fb50:	683a      	ldr	r2, [r7, #0]
 801fb52:	b2d2      	uxtb	r2, r2
 801fb54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801fb56:	4b20      	ldr	r3, [pc, #128]	; (801fbd8 <HAL_RCC_ClockConfig+0x1b8>)
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	f003 030f 	and.w	r3, r3, #15
 801fb5e:	683a      	ldr	r2, [r7, #0]
 801fb60:	429a      	cmp	r2, r3
 801fb62:	d001      	beq.n	801fb68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 801fb64:	2301      	movs	r3, #1
 801fb66:	e032      	b.n	801fbce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801fb68:	687b      	ldr	r3, [r7, #4]
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	f003 0304 	and.w	r3, r3, #4
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d008      	beq.n	801fb86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801fb74:	4b19      	ldr	r3, [pc, #100]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb76:	689b      	ldr	r3, [r3, #8]
 801fb78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	68db      	ldr	r3, [r3, #12]
 801fb80:	4916      	ldr	r1, [pc, #88]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb82:	4313      	orrs	r3, r2
 801fb84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801fb86:	687b      	ldr	r3, [r7, #4]
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	f003 0308 	and.w	r3, r3, #8
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d009      	beq.n	801fba6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801fb92:	4b12      	ldr	r3, [pc, #72]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fb94:	689b      	ldr	r3, [r3, #8]
 801fb96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	691b      	ldr	r3, [r3, #16]
 801fb9e:	00db      	lsls	r3, r3, #3
 801fba0:	490e      	ldr	r1, [pc, #56]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fba2:	4313      	orrs	r3, r2
 801fba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801fba6:	f000 f821 	bl	801fbec <HAL_RCC_GetSysClockFreq>
 801fbaa:	4601      	mov	r1, r0
 801fbac:	4b0b      	ldr	r3, [pc, #44]	; (801fbdc <HAL_RCC_ClockConfig+0x1bc>)
 801fbae:	689b      	ldr	r3, [r3, #8]
 801fbb0:	091b      	lsrs	r3, r3, #4
 801fbb2:	f003 030f 	and.w	r3, r3, #15
 801fbb6:	4a0a      	ldr	r2, [pc, #40]	; (801fbe0 <HAL_RCC_ClockConfig+0x1c0>)
 801fbb8:	5cd3      	ldrb	r3, [r2, r3]
 801fbba:	fa21 f303 	lsr.w	r3, r1, r3
 801fbbe:	4a09      	ldr	r2, [pc, #36]	; (801fbe4 <HAL_RCC_ClockConfig+0x1c4>)
 801fbc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801fbc2:	4b09      	ldr	r3, [pc, #36]	; (801fbe8 <HAL_RCC_ClockConfig+0x1c8>)
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	4618      	mov	r0, r3
 801fbc8:	f7fe f86c 	bl	801dca4 <HAL_InitTick>

  return HAL_OK;
 801fbcc:	2300      	movs	r3, #0
}
 801fbce:	4618      	mov	r0, r3
 801fbd0:	3710      	adds	r7, #16
 801fbd2:	46bd      	mov	sp, r7
 801fbd4:	bd80      	pop	{r7, pc}
 801fbd6:	bf00      	nop
 801fbd8:	40023c00 	.word	0x40023c00
 801fbdc:	40023800 	.word	0x40023800
 801fbe0:	0802d08c 	.word	0x0802d08c
 801fbe4:	20000000 	.word	0x20000000
 801fbe8:	20000004 	.word	0x20000004

0801fbec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801fbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbee:	b085      	sub	sp, #20
 801fbf0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 801fbf2:	2300      	movs	r3, #0
 801fbf4:	607b      	str	r3, [r7, #4]
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	60fb      	str	r3, [r7, #12]
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 801fbfe:	2300      	movs	r3, #0
 801fc00:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801fc02:	4b63      	ldr	r3, [pc, #396]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fc04:	689b      	ldr	r3, [r3, #8]
 801fc06:	f003 030c 	and.w	r3, r3, #12
 801fc0a:	2b04      	cmp	r3, #4
 801fc0c:	d007      	beq.n	801fc1e <HAL_RCC_GetSysClockFreq+0x32>
 801fc0e:	2b08      	cmp	r3, #8
 801fc10:	d008      	beq.n	801fc24 <HAL_RCC_GetSysClockFreq+0x38>
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	f040 80b4 	bne.w	801fd80 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801fc18:	4b5e      	ldr	r3, [pc, #376]	; (801fd94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fc1a:	60bb      	str	r3, [r7, #8]
       break;
 801fc1c:	e0b3      	b.n	801fd86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801fc1e:	4b5e      	ldr	r3, [pc, #376]	; (801fd98 <HAL_RCC_GetSysClockFreq+0x1ac>)
 801fc20:	60bb      	str	r3, [r7, #8]
      break;
 801fc22:	e0b0      	b.n	801fd86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801fc24:	4b5a      	ldr	r3, [pc, #360]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fc26:	685b      	ldr	r3, [r3, #4]
 801fc28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801fc2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801fc2e:	4b58      	ldr	r3, [pc, #352]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fc30:	685b      	ldr	r3, [r3, #4]
 801fc32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	d04a      	beq.n	801fcd0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fc3a:	4b55      	ldr	r3, [pc, #340]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fc3c:	685b      	ldr	r3, [r3, #4]
 801fc3e:	099b      	lsrs	r3, r3, #6
 801fc40:	f04f 0400 	mov.w	r4, #0
 801fc44:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fc48:	f04f 0200 	mov.w	r2, #0
 801fc4c:	ea03 0501 	and.w	r5, r3, r1
 801fc50:	ea04 0602 	and.w	r6, r4, r2
 801fc54:	4629      	mov	r1, r5
 801fc56:	4632      	mov	r2, r6
 801fc58:	f04f 0300 	mov.w	r3, #0
 801fc5c:	f04f 0400 	mov.w	r4, #0
 801fc60:	0154      	lsls	r4, r2, #5
 801fc62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fc66:	014b      	lsls	r3, r1, #5
 801fc68:	4619      	mov	r1, r3
 801fc6a:	4622      	mov	r2, r4
 801fc6c:	1b49      	subs	r1, r1, r5
 801fc6e:	eb62 0206 	sbc.w	r2, r2, r6
 801fc72:	f04f 0300 	mov.w	r3, #0
 801fc76:	f04f 0400 	mov.w	r4, #0
 801fc7a:	0194      	lsls	r4, r2, #6
 801fc7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fc80:	018b      	lsls	r3, r1, #6
 801fc82:	1a5b      	subs	r3, r3, r1
 801fc84:	eb64 0402 	sbc.w	r4, r4, r2
 801fc88:	f04f 0100 	mov.w	r1, #0
 801fc8c:	f04f 0200 	mov.w	r2, #0
 801fc90:	00e2      	lsls	r2, r4, #3
 801fc92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fc96:	00d9      	lsls	r1, r3, #3
 801fc98:	460b      	mov	r3, r1
 801fc9a:	4614      	mov	r4, r2
 801fc9c:	195b      	adds	r3, r3, r5
 801fc9e:	eb44 0406 	adc.w	r4, r4, r6
 801fca2:	f04f 0100 	mov.w	r1, #0
 801fca6:	f04f 0200 	mov.w	r2, #0
 801fcaa:	0262      	lsls	r2, r4, #9
 801fcac:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 801fcb0:	0259      	lsls	r1, r3, #9
 801fcb2:	460b      	mov	r3, r1
 801fcb4:	4614      	mov	r4, r2
 801fcb6:	4618      	mov	r0, r3
 801fcb8:	4621      	mov	r1, r4
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	f04f 0400 	mov.w	r4, #0
 801fcc0:	461a      	mov	r2, r3
 801fcc2:	4623      	mov	r3, r4
 801fcc4:	f7e0 ff70 	bl	8000ba8 <__aeabi_uldivmod>
 801fcc8:	4603      	mov	r3, r0
 801fcca:	460c      	mov	r4, r1
 801fccc:	60fb      	str	r3, [r7, #12]
 801fcce:	e049      	b.n	801fd64 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801fcd0:	4b2f      	ldr	r3, [pc, #188]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fcd2:	685b      	ldr	r3, [r3, #4]
 801fcd4:	099b      	lsrs	r3, r3, #6
 801fcd6:	f04f 0400 	mov.w	r4, #0
 801fcda:	f240 11ff 	movw	r1, #511	; 0x1ff
 801fcde:	f04f 0200 	mov.w	r2, #0
 801fce2:	ea03 0501 	and.w	r5, r3, r1
 801fce6:	ea04 0602 	and.w	r6, r4, r2
 801fcea:	4629      	mov	r1, r5
 801fcec:	4632      	mov	r2, r6
 801fcee:	f04f 0300 	mov.w	r3, #0
 801fcf2:	f04f 0400 	mov.w	r4, #0
 801fcf6:	0154      	lsls	r4, r2, #5
 801fcf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 801fcfc:	014b      	lsls	r3, r1, #5
 801fcfe:	4619      	mov	r1, r3
 801fd00:	4622      	mov	r2, r4
 801fd02:	1b49      	subs	r1, r1, r5
 801fd04:	eb62 0206 	sbc.w	r2, r2, r6
 801fd08:	f04f 0300 	mov.w	r3, #0
 801fd0c:	f04f 0400 	mov.w	r4, #0
 801fd10:	0194      	lsls	r4, r2, #6
 801fd12:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 801fd16:	018b      	lsls	r3, r1, #6
 801fd18:	1a5b      	subs	r3, r3, r1
 801fd1a:	eb64 0402 	sbc.w	r4, r4, r2
 801fd1e:	f04f 0100 	mov.w	r1, #0
 801fd22:	f04f 0200 	mov.w	r2, #0
 801fd26:	00e2      	lsls	r2, r4, #3
 801fd28:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 801fd2c:	00d9      	lsls	r1, r3, #3
 801fd2e:	460b      	mov	r3, r1
 801fd30:	4614      	mov	r4, r2
 801fd32:	195b      	adds	r3, r3, r5
 801fd34:	eb44 0406 	adc.w	r4, r4, r6
 801fd38:	f04f 0100 	mov.w	r1, #0
 801fd3c:	f04f 0200 	mov.w	r2, #0
 801fd40:	02a2      	lsls	r2, r4, #10
 801fd42:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 801fd46:	0299      	lsls	r1, r3, #10
 801fd48:	460b      	mov	r3, r1
 801fd4a:	4614      	mov	r4, r2
 801fd4c:	4618      	mov	r0, r3
 801fd4e:	4621      	mov	r1, r4
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	f04f 0400 	mov.w	r4, #0
 801fd56:	461a      	mov	r2, r3
 801fd58:	4623      	mov	r3, r4
 801fd5a:	f7e0 ff25 	bl	8000ba8 <__aeabi_uldivmod>
 801fd5e:	4603      	mov	r3, r0
 801fd60:	460c      	mov	r4, r1
 801fd62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801fd64:	4b0a      	ldr	r3, [pc, #40]	; (801fd90 <HAL_RCC_GetSysClockFreq+0x1a4>)
 801fd66:	685b      	ldr	r3, [r3, #4]
 801fd68:	0c1b      	lsrs	r3, r3, #16
 801fd6a:	f003 0303 	and.w	r3, r3, #3
 801fd6e:	3301      	adds	r3, #1
 801fd70:	005b      	lsls	r3, r3, #1
 801fd72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 801fd74:	68fa      	ldr	r2, [r7, #12]
 801fd76:	683b      	ldr	r3, [r7, #0]
 801fd78:	fbb2 f3f3 	udiv	r3, r2, r3
 801fd7c:	60bb      	str	r3, [r7, #8]
      break;
 801fd7e:	e002      	b.n	801fd86 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801fd80:	4b04      	ldr	r3, [pc, #16]	; (801fd94 <HAL_RCC_GetSysClockFreq+0x1a8>)
 801fd82:	60bb      	str	r3, [r7, #8]
      break;
 801fd84:	bf00      	nop
    }
  }
  return sysclockfreq;
 801fd86:	68bb      	ldr	r3, [r7, #8]
}
 801fd88:	4618      	mov	r0, r3
 801fd8a:	3714      	adds	r7, #20
 801fd8c:	46bd      	mov	sp, r7
 801fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd90:	40023800 	.word	0x40023800
 801fd94:	00f42400 	.word	0x00f42400
 801fd98:	007a1200 	.word	0x007a1200

0801fd9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801fd9c:	b480      	push	{r7}
 801fd9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801fda0:	4b03      	ldr	r3, [pc, #12]	; (801fdb0 <HAL_RCC_GetHCLKFreq+0x14>)
 801fda2:	681b      	ldr	r3, [r3, #0]
}
 801fda4:	4618      	mov	r0, r3
 801fda6:	46bd      	mov	sp, r7
 801fda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdac:	4770      	bx	lr
 801fdae:	bf00      	nop
 801fdb0:	20000000 	.word	0x20000000

0801fdb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801fdb4:	b580      	push	{r7, lr}
 801fdb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 801fdb8:	f7ff fff0 	bl	801fd9c <HAL_RCC_GetHCLKFreq>
 801fdbc:	4601      	mov	r1, r0
 801fdbe:	4b05      	ldr	r3, [pc, #20]	; (801fdd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 801fdc0:	689b      	ldr	r3, [r3, #8]
 801fdc2:	0a9b      	lsrs	r3, r3, #10
 801fdc4:	f003 0307 	and.w	r3, r3, #7
 801fdc8:	4a03      	ldr	r2, [pc, #12]	; (801fdd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801fdca:	5cd3      	ldrb	r3, [r2, r3]
 801fdcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 801fdd0:	4618      	mov	r0, r3
 801fdd2:	bd80      	pop	{r7, pc}
 801fdd4:	40023800 	.word	0x40023800
 801fdd8:	0802d09c 	.word	0x0802d09c

0801fddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801fddc:	b580      	push	{r7, lr}
 801fdde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801fde0:	f7ff ffdc 	bl	801fd9c <HAL_RCC_GetHCLKFreq>
 801fde4:	4601      	mov	r1, r0
 801fde6:	4b05      	ldr	r3, [pc, #20]	; (801fdfc <HAL_RCC_GetPCLK2Freq+0x20>)
 801fde8:	689b      	ldr	r3, [r3, #8]
 801fdea:	0b5b      	lsrs	r3, r3, #13
 801fdec:	f003 0307 	and.w	r3, r3, #7
 801fdf0:	4a03      	ldr	r2, [pc, #12]	; (801fe00 <HAL_RCC_GetPCLK2Freq+0x24>)
 801fdf2:	5cd3      	ldrb	r3, [r2, r3]
 801fdf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	bd80      	pop	{r7, pc}
 801fdfc:	40023800 	.word	0x40023800
 801fe00:	0802d09c 	.word	0x0802d09c

0801fe04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fe04:	b580      	push	{r7, lr}
 801fe06:	b082      	sub	sp, #8
 801fe08:	af00      	add	r7, sp, #0
 801fe0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	2b00      	cmp	r3, #0
 801fe10:	d101      	bne.n	801fe16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fe12:	2301      	movs	r3, #1
 801fe14:	e01d      	b.n	801fe52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fe1c:	b2db      	uxtb	r3, r3
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	d106      	bne.n	801fe30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fe22:	687b      	ldr	r3, [r7, #4]
 801fe24:	2200      	movs	r2, #0
 801fe26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fe2a:	6878      	ldr	r0, [r7, #4]
 801fe2c:	f7fd fcec 	bl	801d808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	2202      	movs	r2, #2
 801fe34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	681a      	ldr	r2, [r3, #0]
 801fe3c:	687b      	ldr	r3, [r7, #4]
 801fe3e:	3304      	adds	r3, #4
 801fe40:	4619      	mov	r1, r3
 801fe42:	4610      	mov	r0, r2
 801fe44:	f000 fd2e 	bl	80208a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	2201      	movs	r2, #1
 801fe4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fe50:	2300      	movs	r3, #0
}
 801fe52:	4618      	mov	r0, r3
 801fe54:	3708      	adds	r7, #8
 801fe56:	46bd      	mov	sp, r7
 801fe58:	bd80      	pop	{r7, pc}

0801fe5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fe5a:	b580      	push	{r7, lr}
 801fe5c:	b082      	sub	sp, #8
 801fe5e:	af00      	add	r7, sp, #0
 801fe60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	2b00      	cmp	r3, #0
 801fe66:	d101      	bne.n	801fe6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fe68:	2301      	movs	r3, #1
 801fe6a:	e01d      	b.n	801fea8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fe72:	b2db      	uxtb	r3, r3
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d106      	bne.n	801fe86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fe78:	687b      	ldr	r3, [r7, #4]
 801fe7a:	2200      	movs	r2, #0
 801fe7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fe80:	6878      	ldr	r0, [r7, #4]
 801fe82:	f000 f815 	bl	801feb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	2202      	movs	r2, #2
 801fe8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	681a      	ldr	r2, [r3, #0]
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	3304      	adds	r3, #4
 801fe96:	4619      	mov	r1, r3
 801fe98:	4610      	mov	r0, r2
 801fe9a:	f000 fd03 	bl	80208a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	2201      	movs	r2, #1
 801fea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801fea6:	2300      	movs	r3, #0
}
 801fea8:	4618      	mov	r0, r3
 801feaa:	3708      	adds	r7, #8
 801feac:	46bd      	mov	sp, r7
 801feae:	bd80      	pop	{r7, pc}

0801feb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801feb0:	b480      	push	{r7}
 801feb2:	b083      	sub	sp, #12
 801feb4:	af00      	add	r7, sp, #0
 801feb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801feb8:	bf00      	nop
 801feba:	370c      	adds	r7, #12
 801febc:	46bd      	mov	sp, r7
 801febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fec2:	4770      	bx	lr

0801fec4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b086      	sub	sp, #24
 801fec8:	af00      	add	r7, sp, #0
 801feca:	60f8      	str	r0, [r7, #12]
 801fecc:	60b9      	str	r1, [r7, #8]
 801fece:	607a      	str	r2, [r7, #4]
 801fed0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fed8:	b2db      	uxtb	r3, r3
 801feda:	2b02      	cmp	r3, #2
 801fedc:	d101      	bne.n	801fee2 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 801fede:	2302      	movs	r3, #2
 801fee0:	e0e9      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 801fee2:	68fb      	ldr	r3, [r7, #12]
 801fee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801fee8:	b2db      	uxtb	r3, r3
 801feea:	2b01      	cmp	r3, #1
 801feec:	d10b      	bne.n	801ff06 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 801feee:	687b      	ldr	r3, [r7, #4]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d104      	bne.n	801fefe <HAL_TIM_PWM_Start_DMA+0x3a>
 801fef4:	887b      	ldrh	r3, [r7, #2]
 801fef6:	2b00      	cmp	r3, #0
 801fef8:	d001      	beq.n	801fefe <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 801fefa:	2301      	movs	r3, #1
 801fefc:	e0db      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 801fefe:	68fb      	ldr	r3, [r7, #12]
 801ff00:	2202      	movs	r2, #2
 801ff02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 801ff06:	68bb      	ldr	r3, [r7, #8]
 801ff08:	2b0c      	cmp	r3, #12
 801ff0a:	f200 80ad 	bhi.w	8020068 <HAL_TIM_PWM_Start_DMA+0x1a4>
 801ff0e:	a201      	add	r2, pc, #4	; (adr r2, 801ff14 <HAL_TIM_PWM_Start_DMA+0x50>)
 801ff10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff14:	0801ff49 	.word	0x0801ff49
 801ff18:	08020069 	.word	0x08020069
 801ff1c:	08020069 	.word	0x08020069
 801ff20:	08020069 	.word	0x08020069
 801ff24:	0801ff91 	.word	0x0801ff91
 801ff28:	08020069 	.word	0x08020069
 801ff2c:	08020069 	.word	0x08020069
 801ff30:	08020069 	.word	0x08020069
 801ff34:	0801ffd9 	.word	0x0801ffd9
 801ff38:	08020069 	.word	0x08020069
 801ff3c:	08020069 	.word	0x08020069
 801ff40:	08020069 	.word	0x08020069
 801ff44:	08020021 	.word	0x08020021
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801ff48:	68fb      	ldr	r3, [r7, #12]
 801ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff4c:	4a5c      	ldr	r2, [pc, #368]	; (80200c0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801ff4e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801ff50:	68fb      	ldr	r3, [r7, #12]
 801ff52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff54:	4a5b      	ldr	r2, [pc, #364]	; (80200c4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801ff56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ff5c:	4a5a      	ldr	r2, [pc, #360]	; (80200c8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801ff5e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 801ff60:	68fb      	ldr	r3, [r7, #12]
 801ff62:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ff64:	6879      	ldr	r1, [r7, #4]
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	681b      	ldr	r3, [r3, #0]
 801ff6a:	3334      	adds	r3, #52	; 0x34
 801ff6c:	461a      	mov	r2, r3
 801ff6e:	887b      	ldrh	r3, [r7, #2]
 801ff70:	f7fe f8ca 	bl	801e108 <HAL_DMA_Start_IT>
 801ff74:	4603      	mov	r3, r0
 801ff76:	2b00      	cmp	r3, #0
 801ff78:	d001      	beq.n	801ff7e <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 801ff7a:	2301      	movs	r3, #1
 801ff7c:	e09b      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 801ff7e:	68fb      	ldr	r3, [r7, #12]
 801ff80:	681b      	ldr	r3, [r3, #0]
 801ff82:	68da      	ldr	r2, [r3, #12]
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ff8c:	60da      	str	r2, [r3, #12]
      break;
 801ff8e:	e06c      	b.n	802006a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801ff90:	68fb      	ldr	r3, [r7, #12]
 801ff92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff94:	4a4a      	ldr	r2, [pc, #296]	; (80200c0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801ff96:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ff9c:	4a49      	ldr	r2, [pc, #292]	; (80200c4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801ff9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ffa4:	4a48      	ldr	r2, [pc, #288]	; (80200c8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801ffa6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 801ffa8:	68fb      	ldr	r3, [r7, #12]
 801ffaa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801ffac:	6879      	ldr	r1, [r7, #4]
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	3338      	adds	r3, #56	; 0x38
 801ffb4:	461a      	mov	r2, r3
 801ffb6:	887b      	ldrh	r3, [r7, #2]
 801ffb8:	f7fe f8a6 	bl	801e108 <HAL_DMA_Start_IT>
 801ffbc:	4603      	mov	r3, r0
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d001      	beq.n	801ffc6 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 801ffc2:	2301      	movs	r3, #1
 801ffc4:	e077      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801ffc6:	68fb      	ldr	r3, [r7, #12]
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	68da      	ldr	r2, [r3, #12]
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ffd4:	60da      	str	r2, [r3, #12]
      break;
 801ffd6:	e048      	b.n	802006a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801ffd8:	68fb      	ldr	r3, [r7, #12]
 801ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffdc:	4a38      	ldr	r2, [pc, #224]	; (80200c0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 801ffde:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffe4:	4a37      	ldr	r2, [pc, #220]	; (80200c4 <HAL_TIM_PWM_Start_DMA+0x200>)
 801ffe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ffec:	4a36      	ldr	r2, [pc, #216]	; (80200c8 <HAL_TIM_PWM_Start_DMA+0x204>)
 801ffee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801fff4:	6879      	ldr	r1, [r7, #4]
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	333c      	adds	r3, #60	; 0x3c
 801fffc:	461a      	mov	r2, r3
 801fffe:	887b      	ldrh	r3, [r7, #2]
 8020000:	f7fe f882 	bl	801e108 <HAL_DMA_Start_IT>
 8020004:	4603      	mov	r3, r0
 8020006:	2b00      	cmp	r3, #0
 8020008:	d001      	beq.n	802000e <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 802000a:	2301      	movs	r3, #1
 802000c:	e053      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	68da      	ldr	r2, [r3, #12]
 8020014:	68fb      	ldr	r3, [r7, #12]
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 802001c:	60da      	str	r2, [r3, #12]
      break;
 802001e:	e024      	b.n	802006a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8020020:	68fb      	ldr	r3, [r7, #12]
 8020022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020024:	4a26      	ldr	r2, [pc, #152]	; (80200c0 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8020026:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802002c:	4a25      	ldr	r2, [pc, #148]	; (80200c4 <HAL_TIM_PWM_Start_DMA+0x200>)
 802002e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8020030:	68fb      	ldr	r3, [r7, #12]
 8020032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020034:	4a24      	ldr	r2, [pc, #144]	; (80200c8 <HAL_TIM_PWM_Start_DMA+0x204>)
 8020036:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 802003c:	6879      	ldr	r1, [r7, #4]
 802003e:	68fb      	ldr	r3, [r7, #12]
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	3340      	adds	r3, #64	; 0x40
 8020044:	461a      	mov	r2, r3
 8020046:	887b      	ldrh	r3, [r7, #2]
 8020048:	f7fe f85e 	bl	801e108 <HAL_DMA_Start_IT>
 802004c:	4603      	mov	r3, r0
 802004e:	2b00      	cmp	r3, #0
 8020050:	d001      	beq.n	8020056 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8020052:	2301      	movs	r3, #1
 8020054:	e02f      	b.n	80200b6 <HAL_TIM_PWM_Start_DMA+0x1f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8020056:	68fb      	ldr	r3, [r7, #12]
 8020058:	681b      	ldr	r3, [r3, #0]
 802005a:	68da      	ldr	r2, [r3, #12]
 802005c:	68fb      	ldr	r3, [r7, #12]
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8020064:	60da      	str	r2, [r3, #12]
      break;
 8020066:	e000      	b.n	802006a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8020068:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 802006a:	68fb      	ldr	r3, [r7, #12]
 802006c:	681b      	ldr	r3, [r3, #0]
 802006e:	2201      	movs	r2, #1
 8020070:	68b9      	ldr	r1, [r7, #8]
 8020072:	4618      	mov	r0, r3
 8020074:	f000 febc 	bl	8020df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	681b      	ldr	r3, [r3, #0]
 802007c:	4a13      	ldr	r2, [pc, #76]	; (80200cc <HAL_TIM_PWM_Start_DMA+0x208>)
 802007e:	4293      	cmp	r3, r2
 8020080:	d107      	bne.n	8020092 <HAL_TIM_PWM_Start_DMA+0x1ce>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8020082:	68fb      	ldr	r3, [r7, #12]
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8020088:	68fb      	ldr	r3, [r7, #12]
 802008a:	681b      	ldr	r3, [r3, #0]
 802008c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8020090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8020092:	68fb      	ldr	r3, [r7, #12]
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	689b      	ldr	r3, [r3, #8]
 8020098:	f003 0307 	and.w	r3, r3, #7
 802009c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802009e:	697b      	ldr	r3, [r7, #20]
 80200a0:	2b06      	cmp	r3, #6
 80200a2:	d007      	beq.n	80200b4 <HAL_TIM_PWM_Start_DMA+0x1f0>
  {
    __HAL_TIM_ENABLE(htim);
 80200a4:	68fb      	ldr	r3, [r7, #12]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	681a      	ldr	r2, [r3, #0]
 80200aa:	68fb      	ldr	r3, [r7, #12]
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	f042 0201 	orr.w	r2, r2, #1
 80200b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80200b4:	2300      	movs	r3, #0
}
 80200b6:	4618      	mov	r0, r3
 80200b8:	3718      	adds	r7, #24
 80200ba:	46bd      	mov	sp, r7
 80200bc:	bd80      	pop	{r7, pc}
 80200be:	bf00      	nop
 80200c0:	080207c3 	.word	0x080207c3
 80200c4:	08020833 	.word	0x08020833
 80200c8:	0802079f 	.word	0x0802079f
 80200cc:	40010000 	.word	0x40010000

080200d0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80200d0:	b580      	push	{r7, lr}
 80200d2:	b082      	sub	sp, #8
 80200d4:	af00      	add	r7, sp, #0
 80200d6:	6078      	str	r0, [r7, #4]
 80200d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80200da:	683b      	ldr	r3, [r7, #0]
 80200dc:	2b0c      	cmp	r3, #12
 80200de:	d855      	bhi.n	802018c <HAL_TIM_PWM_Stop_DMA+0xbc>
 80200e0:	a201      	add	r2, pc, #4	; (adr r2, 80200e8 <HAL_TIM_PWM_Stop_DMA+0x18>)
 80200e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200e6:	bf00      	nop
 80200e8:	0802011d 	.word	0x0802011d
 80200ec:	0802018d 	.word	0x0802018d
 80200f0:	0802018d 	.word	0x0802018d
 80200f4:	0802018d 	.word	0x0802018d
 80200f8:	08020139 	.word	0x08020139
 80200fc:	0802018d 	.word	0x0802018d
 8020100:	0802018d 	.word	0x0802018d
 8020104:	0802018d 	.word	0x0802018d
 8020108:	08020155 	.word	0x08020155
 802010c:	0802018d 	.word	0x0802018d
 8020110:	0802018d 	.word	0x0802018d
 8020114:	0802018d 	.word	0x0802018d
 8020118:	08020171 	.word	0x08020171
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	68da      	ldr	r2, [r3, #12]
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 802012a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020130:	4618      	mov	r0, r3
 8020132:	f7fe f841 	bl	801e1b8 <HAL_DMA_Abort_IT>
      break;
 8020136:	e02a      	b.n	802018e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8020138:	687b      	ldr	r3, [r7, #4]
 802013a:	681b      	ldr	r3, [r3, #0]
 802013c:	68da      	ldr	r2, [r3, #12]
 802013e:	687b      	ldr	r3, [r7, #4]
 8020140:	681b      	ldr	r3, [r3, #0]
 8020142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020146:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8020148:	687b      	ldr	r3, [r7, #4]
 802014a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802014c:	4618      	mov	r0, r3
 802014e:	f7fe f833 	bl	801e1b8 <HAL_DMA_Abort_IT>
      break;
 8020152:	e01c      	b.n	802018e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	68da      	ldr	r2, [r3, #12]
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	681b      	ldr	r3, [r3, #0]
 802015e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8020162:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020168:	4618      	mov	r0, r3
 802016a:	f7fe f825 	bl	801e1b8 <HAL_DMA_Abort_IT>
      break;
 802016e:	e00e      	b.n	802018e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	681b      	ldr	r3, [r3, #0]
 8020174:	68da      	ldr	r2, [r3, #12]
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 802017e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020184:	4618      	mov	r0, r3
 8020186:	f7fe f817 	bl	801e1b8 <HAL_DMA_Abort_IT>
      break;
 802018a:	e000      	b.n	802018e <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 802018c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 802018e:	687b      	ldr	r3, [r7, #4]
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	2200      	movs	r2, #0
 8020194:	6839      	ldr	r1, [r7, #0]
 8020196:	4618      	mov	r0, r3
 8020198:	f000 fe2a 	bl	8020df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	681b      	ldr	r3, [r3, #0]
 80201a0:	4a1d      	ldr	r2, [pc, #116]	; (8020218 <HAL_TIM_PWM_Stop_DMA+0x148>)
 80201a2:	4293      	cmp	r3, r2
 80201a4:	d117      	bne.n	80201d6 <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80201a6:	687b      	ldr	r3, [r7, #4]
 80201a8:	681b      	ldr	r3, [r3, #0]
 80201aa:	6a1a      	ldr	r2, [r3, #32]
 80201ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80201b0:	4013      	ands	r3, r2
 80201b2:	2b00      	cmp	r3, #0
 80201b4:	d10f      	bne.n	80201d6 <HAL_TIM_PWM_Stop_DMA+0x106>
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	6a1a      	ldr	r2, [r3, #32]
 80201bc:	f240 4344 	movw	r3, #1092	; 0x444
 80201c0:	4013      	ands	r3, r2
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d107      	bne.n	80201d6 <HAL_TIM_PWM_Stop_DMA+0x106>
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80201cc:	687b      	ldr	r3, [r7, #4]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80201d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	6a1a      	ldr	r2, [r3, #32]
 80201dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80201e0:	4013      	ands	r3, r2
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	d10f      	bne.n	8020206 <HAL_TIM_PWM_Stop_DMA+0x136>
 80201e6:	687b      	ldr	r3, [r7, #4]
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	6a1a      	ldr	r2, [r3, #32]
 80201ec:	f240 4344 	movw	r3, #1092	; 0x444
 80201f0:	4013      	ands	r3, r2
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d107      	bne.n	8020206 <HAL_TIM_PWM_Stop_DMA+0x136>
 80201f6:	687b      	ldr	r3, [r7, #4]
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	681a      	ldr	r2, [r3, #0]
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	f022 0201 	bic.w	r2, r2, #1
 8020204:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020206:	687b      	ldr	r3, [r7, #4]
 8020208:	2201      	movs	r2, #1
 802020a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 802020e:	2300      	movs	r3, #0
}
 8020210:	4618      	mov	r0, r3
 8020212:	3708      	adds	r7, #8
 8020214:	46bd      	mov	sp, r7
 8020216:	bd80      	pop	{r7, pc}
 8020218:	40010000 	.word	0x40010000

0802021c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 802021c:	b580      	push	{r7, lr}
 802021e:	b082      	sub	sp, #8
 8020220:	af00      	add	r7, sp, #0
 8020222:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	691b      	ldr	r3, [r3, #16]
 802022a:	f003 0302 	and.w	r3, r3, #2
 802022e:	2b02      	cmp	r3, #2
 8020230:	d122      	bne.n	8020278 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	681b      	ldr	r3, [r3, #0]
 8020236:	68db      	ldr	r3, [r3, #12]
 8020238:	f003 0302 	and.w	r3, r3, #2
 802023c:	2b02      	cmp	r3, #2
 802023e:	d11b      	bne.n	8020278 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	681b      	ldr	r3, [r3, #0]
 8020244:	f06f 0202 	mvn.w	r2, #2
 8020248:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	2201      	movs	r2, #1
 802024e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	699b      	ldr	r3, [r3, #24]
 8020256:	f003 0303 	and.w	r3, r3, #3
 802025a:	2b00      	cmp	r3, #0
 802025c:	d003      	beq.n	8020266 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 802025e:	6878      	ldr	r0, [r7, #4]
 8020260:	f000 fa75 	bl	802074e <HAL_TIM_IC_CaptureCallback>
 8020264:	e005      	b.n	8020272 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8020266:	6878      	ldr	r0, [r7, #4]
 8020268:	f000 fa67 	bl	802073a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 802026c:	6878      	ldr	r0, [r7, #4]
 802026e:	f7fc fea7 	bl	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	2200      	movs	r2, #0
 8020276:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	681b      	ldr	r3, [r3, #0]
 802027c:	691b      	ldr	r3, [r3, #16]
 802027e:	f003 0304 	and.w	r3, r3, #4
 8020282:	2b04      	cmp	r3, #4
 8020284:	d122      	bne.n	80202cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	681b      	ldr	r3, [r3, #0]
 802028a:	68db      	ldr	r3, [r3, #12]
 802028c:	f003 0304 	and.w	r3, r3, #4
 8020290:	2b04      	cmp	r3, #4
 8020292:	d11b      	bne.n	80202cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	681b      	ldr	r3, [r3, #0]
 8020298:	f06f 0204 	mvn.w	r2, #4
 802029c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	2202      	movs	r2, #2
 80202a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80202a4:	687b      	ldr	r3, [r7, #4]
 80202a6:	681b      	ldr	r3, [r3, #0]
 80202a8:	699b      	ldr	r3, [r3, #24]
 80202aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80202ae:	2b00      	cmp	r3, #0
 80202b0:	d003      	beq.n	80202ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80202b2:	6878      	ldr	r0, [r7, #4]
 80202b4:	f000 fa4b 	bl	802074e <HAL_TIM_IC_CaptureCallback>
 80202b8:	e005      	b.n	80202c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80202ba:	6878      	ldr	r0, [r7, #4]
 80202bc:	f000 fa3d 	bl	802073a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80202c0:	6878      	ldr	r0, [r7, #4]
 80202c2:	f7fc fe7d 	bl	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	2200      	movs	r2, #0
 80202ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80202cc:	687b      	ldr	r3, [r7, #4]
 80202ce:	681b      	ldr	r3, [r3, #0]
 80202d0:	691b      	ldr	r3, [r3, #16]
 80202d2:	f003 0308 	and.w	r3, r3, #8
 80202d6:	2b08      	cmp	r3, #8
 80202d8:	d122      	bne.n	8020320 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	68db      	ldr	r3, [r3, #12]
 80202e0:	f003 0308 	and.w	r3, r3, #8
 80202e4:	2b08      	cmp	r3, #8
 80202e6:	d11b      	bne.n	8020320 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	681b      	ldr	r3, [r3, #0]
 80202ec:	f06f 0208 	mvn.w	r2, #8
 80202f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80202f2:	687b      	ldr	r3, [r7, #4]
 80202f4:	2204      	movs	r2, #4
 80202f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80202f8:	687b      	ldr	r3, [r7, #4]
 80202fa:	681b      	ldr	r3, [r3, #0]
 80202fc:	69db      	ldr	r3, [r3, #28]
 80202fe:	f003 0303 	and.w	r3, r3, #3
 8020302:	2b00      	cmp	r3, #0
 8020304:	d003      	beq.n	802030e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8020306:	6878      	ldr	r0, [r7, #4]
 8020308:	f000 fa21 	bl	802074e <HAL_TIM_IC_CaptureCallback>
 802030c:	e005      	b.n	802031a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802030e:	6878      	ldr	r0, [r7, #4]
 8020310:	f000 fa13 	bl	802073a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020314:	6878      	ldr	r0, [r7, #4]
 8020316:	f7fc fe53 	bl	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	2200      	movs	r2, #0
 802031e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	681b      	ldr	r3, [r3, #0]
 8020324:	691b      	ldr	r3, [r3, #16]
 8020326:	f003 0310 	and.w	r3, r3, #16
 802032a:	2b10      	cmp	r3, #16
 802032c:	d122      	bne.n	8020374 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	68db      	ldr	r3, [r3, #12]
 8020334:	f003 0310 	and.w	r3, r3, #16
 8020338:	2b10      	cmp	r3, #16
 802033a:	d11b      	bne.n	8020374 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	f06f 0210 	mvn.w	r2, #16
 8020344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020346:	687b      	ldr	r3, [r7, #4]
 8020348:	2208      	movs	r2, #8
 802034a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	69db      	ldr	r3, [r3, #28]
 8020352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020356:	2b00      	cmp	r3, #0
 8020358:	d003      	beq.n	8020362 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 802035a:	6878      	ldr	r0, [r7, #4]
 802035c:	f000 f9f7 	bl	802074e <HAL_TIM_IC_CaptureCallback>
 8020360:	e005      	b.n	802036e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8020362:	6878      	ldr	r0, [r7, #4]
 8020364:	f000 f9e9 	bl	802073a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8020368:	6878      	ldr	r0, [r7, #4]
 802036a:	f7fc fe29 	bl	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	2200      	movs	r2, #0
 8020372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	691b      	ldr	r3, [r3, #16]
 802037a:	f003 0301 	and.w	r3, r3, #1
 802037e:	2b01      	cmp	r3, #1
 8020380:	d10e      	bne.n	80203a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	681b      	ldr	r3, [r3, #0]
 8020386:	68db      	ldr	r3, [r3, #12]
 8020388:	f003 0301 	and.w	r3, r3, #1
 802038c:	2b01      	cmp	r3, #1
 802038e:	d107      	bne.n	80203a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	f06f 0201 	mvn.w	r2, #1
 8020398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 802039a:	6878      	ldr	r0, [r7, #4]
 802039c:	f000 f9c3 	bl	8020726 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	681b      	ldr	r3, [r3, #0]
 80203a4:	691b      	ldr	r3, [r3, #16]
 80203a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80203aa:	2b80      	cmp	r3, #128	; 0x80
 80203ac:	d10e      	bne.n	80203cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	68db      	ldr	r3, [r3, #12]
 80203b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80203b8:	2b80      	cmp	r3, #128	; 0x80
 80203ba:	d107      	bne.n	80203cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80203bc:	687b      	ldr	r3, [r7, #4]
 80203be:	681b      	ldr	r3, [r3, #0]
 80203c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80203c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80203c6:	6878      	ldr	r0, [r7, #4]
 80203c8:	f000 fdb0 	bl	8020f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	681b      	ldr	r3, [r3, #0]
 80203d0:	691b      	ldr	r3, [r3, #16]
 80203d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80203d6:	2b40      	cmp	r3, #64	; 0x40
 80203d8:	d10e      	bne.n	80203f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	681b      	ldr	r3, [r3, #0]
 80203de:	68db      	ldr	r3, [r3, #12]
 80203e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80203e4:	2b40      	cmp	r3, #64	; 0x40
 80203e6:	d107      	bne.n	80203f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	681b      	ldr	r3, [r3, #0]
 80203ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80203f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80203f2:	6878      	ldr	r0, [r7, #4]
 80203f4:	f000 f9bf 	bl	8020776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	681b      	ldr	r3, [r3, #0]
 80203fc:	691b      	ldr	r3, [r3, #16]
 80203fe:	f003 0320 	and.w	r3, r3, #32
 8020402:	2b20      	cmp	r3, #32
 8020404:	d10e      	bne.n	8020424 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	681b      	ldr	r3, [r3, #0]
 802040a:	68db      	ldr	r3, [r3, #12]
 802040c:	f003 0320 	and.w	r3, r3, #32
 8020410:	2b20      	cmp	r3, #32
 8020412:	d107      	bne.n	8020424 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	f06f 0220 	mvn.w	r2, #32
 802041c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802041e:	6878      	ldr	r0, [r7, #4]
 8020420:	f000 fd7a 	bl	8020f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8020424:	bf00      	nop
 8020426:	3708      	adds	r7, #8
 8020428:	46bd      	mov	sp, r7
 802042a:	bd80      	pop	{r7, pc}

0802042c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 802042c:	b580      	push	{r7, lr}
 802042e:	b084      	sub	sp, #16
 8020430:	af00      	add	r7, sp, #0
 8020432:	60f8      	str	r0, [r7, #12]
 8020434:	60b9      	str	r1, [r7, #8]
 8020436:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8020438:	68fb      	ldr	r3, [r7, #12]
 802043a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 802043e:	2b01      	cmp	r3, #1
 8020440:	d101      	bne.n	8020446 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8020442:	2302      	movs	r3, #2
 8020444:	e0b4      	b.n	80205b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8020446:	68fb      	ldr	r3, [r7, #12]
 8020448:	2201      	movs	r2, #1
 802044a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	2202      	movs	r2, #2
 8020452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2b0c      	cmp	r3, #12
 802045a:	f200 809f 	bhi.w	802059c <HAL_TIM_PWM_ConfigChannel+0x170>
 802045e:	a201      	add	r2, pc, #4	; (adr r2, 8020464 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8020460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020464:	08020499 	.word	0x08020499
 8020468:	0802059d 	.word	0x0802059d
 802046c:	0802059d 	.word	0x0802059d
 8020470:	0802059d 	.word	0x0802059d
 8020474:	080204d9 	.word	0x080204d9
 8020478:	0802059d 	.word	0x0802059d
 802047c:	0802059d 	.word	0x0802059d
 8020480:	0802059d 	.word	0x0802059d
 8020484:	0802051b 	.word	0x0802051b
 8020488:	0802059d 	.word	0x0802059d
 802048c:	0802059d 	.word	0x0802059d
 8020490:	0802059d 	.word	0x0802059d
 8020494:	0802055b 	.word	0x0802055b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020498:	68fb      	ldr	r3, [r7, #12]
 802049a:	681b      	ldr	r3, [r3, #0]
 802049c:	68b9      	ldr	r1, [r7, #8]
 802049e:	4618      	mov	r0, r3
 80204a0:	f000 fa80 	bl	80209a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	681b      	ldr	r3, [r3, #0]
 80204a8:	699a      	ldr	r2, [r3, #24]
 80204aa:	68fb      	ldr	r3, [r7, #12]
 80204ac:	681b      	ldr	r3, [r3, #0]
 80204ae:	f042 0208 	orr.w	r2, r2, #8
 80204b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	681b      	ldr	r3, [r3, #0]
 80204b8:	699a      	ldr	r2, [r3, #24]
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	681b      	ldr	r3, [r3, #0]
 80204be:	f022 0204 	bic.w	r2, r2, #4
 80204c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80204c4:	68fb      	ldr	r3, [r7, #12]
 80204c6:	681b      	ldr	r3, [r3, #0]
 80204c8:	6999      	ldr	r1, [r3, #24]
 80204ca:	68bb      	ldr	r3, [r7, #8]
 80204cc:	691a      	ldr	r2, [r3, #16]
 80204ce:	68fb      	ldr	r3, [r7, #12]
 80204d0:	681b      	ldr	r3, [r3, #0]
 80204d2:	430a      	orrs	r2, r1
 80204d4:	619a      	str	r2, [r3, #24]
      break;
 80204d6:	e062      	b.n	802059e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80204d8:	68fb      	ldr	r3, [r7, #12]
 80204da:	681b      	ldr	r3, [r3, #0]
 80204dc:	68b9      	ldr	r1, [r7, #8]
 80204de:	4618      	mov	r0, r3
 80204e0:	f000 fac6 	bl	8020a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	699a      	ldr	r2, [r3, #24]
 80204ea:	68fb      	ldr	r3, [r7, #12]
 80204ec:	681b      	ldr	r3, [r3, #0]
 80204ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80204f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80204f4:	68fb      	ldr	r3, [r7, #12]
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	699a      	ldr	r2, [r3, #24]
 80204fa:	68fb      	ldr	r3, [r7, #12]
 80204fc:	681b      	ldr	r3, [r3, #0]
 80204fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8020504:	68fb      	ldr	r3, [r7, #12]
 8020506:	681b      	ldr	r3, [r3, #0]
 8020508:	6999      	ldr	r1, [r3, #24]
 802050a:	68bb      	ldr	r3, [r7, #8]
 802050c:	691b      	ldr	r3, [r3, #16]
 802050e:	021a      	lsls	r2, r3, #8
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	430a      	orrs	r2, r1
 8020516:	619a      	str	r2, [r3, #24]
      break;
 8020518:	e041      	b.n	802059e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 802051a:	68fb      	ldr	r3, [r7, #12]
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	68b9      	ldr	r1, [r7, #8]
 8020520:	4618      	mov	r0, r3
 8020522:	f000 fb11 	bl	8020b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	681b      	ldr	r3, [r3, #0]
 802052a:	69da      	ldr	r2, [r3, #28]
 802052c:	68fb      	ldr	r3, [r7, #12]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	f042 0208 	orr.w	r2, r2, #8
 8020534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020536:	68fb      	ldr	r3, [r7, #12]
 8020538:	681b      	ldr	r3, [r3, #0]
 802053a:	69da      	ldr	r2, [r3, #28]
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	f022 0204 	bic.w	r2, r2, #4
 8020544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020546:	68fb      	ldr	r3, [r7, #12]
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	69d9      	ldr	r1, [r3, #28]
 802054c:	68bb      	ldr	r3, [r7, #8]
 802054e:	691a      	ldr	r2, [r3, #16]
 8020550:	68fb      	ldr	r3, [r7, #12]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	430a      	orrs	r2, r1
 8020556:	61da      	str	r2, [r3, #28]
      break;
 8020558:	e021      	b.n	802059e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 802055a:	68fb      	ldr	r3, [r7, #12]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	68b9      	ldr	r1, [r7, #8]
 8020560:	4618      	mov	r0, r3
 8020562:	f000 fb5b 	bl	8020c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	681b      	ldr	r3, [r3, #0]
 802056a:	69da      	ldr	r2, [r3, #28]
 802056c:	68fb      	ldr	r3, [r7, #12]
 802056e:	681b      	ldr	r3, [r3, #0]
 8020570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8020574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	681b      	ldr	r3, [r3, #0]
 802057a:	69da      	ldr	r2, [r3, #28]
 802057c:	68fb      	ldr	r3, [r7, #12]
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8020584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	681b      	ldr	r3, [r3, #0]
 802058a:	69d9      	ldr	r1, [r3, #28]
 802058c:	68bb      	ldr	r3, [r7, #8]
 802058e:	691b      	ldr	r3, [r3, #16]
 8020590:	021a      	lsls	r2, r3, #8
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	430a      	orrs	r2, r1
 8020598:	61da      	str	r2, [r3, #28]
      break;
 802059a:	e000      	b.n	802059e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 802059c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	2201      	movs	r2, #1
 80205a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80205a6:	68fb      	ldr	r3, [r7, #12]
 80205a8:	2200      	movs	r2, #0
 80205aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80205ae:	2300      	movs	r3, #0
}
 80205b0:	4618      	mov	r0, r3
 80205b2:	3710      	adds	r7, #16
 80205b4:	46bd      	mov	sp, r7
 80205b6:	bd80      	pop	{r7, pc}

080205b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80205b8:	b580      	push	{r7, lr}
 80205ba:	b084      	sub	sp, #16
 80205bc:	af00      	add	r7, sp, #0
 80205be:	6078      	str	r0, [r7, #4]
 80205c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80205c8:	2b01      	cmp	r3, #1
 80205ca:	d101      	bne.n	80205d0 <HAL_TIM_ConfigClockSource+0x18>
 80205cc:	2302      	movs	r3, #2
 80205ce:	e0a6      	b.n	802071e <HAL_TIM_ConfigClockSource+0x166>
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	2201      	movs	r2, #1
 80205d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	2202      	movs	r2, #2
 80205dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	681b      	ldr	r3, [r3, #0]
 80205e4:	689b      	ldr	r3, [r3, #8]
 80205e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80205ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80205f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	681b      	ldr	r3, [r3, #0]
 80205fc:	68fa      	ldr	r2, [r7, #12]
 80205fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020600:	683b      	ldr	r3, [r7, #0]
 8020602:	681b      	ldr	r3, [r3, #0]
 8020604:	2b40      	cmp	r3, #64	; 0x40
 8020606:	d067      	beq.n	80206d8 <HAL_TIM_ConfigClockSource+0x120>
 8020608:	2b40      	cmp	r3, #64	; 0x40
 802060a:	d80b      	bhi.n	8020624 <HAL_TIM_ConfigClockSource+0x6c>
 802060c:	2b10      	cmp	r3, #16
 802060e:	d073      	beq.n	80206f8 <HAL_TIM_ConfigClockSource+0x140>
 8020610:	2b10      	cmp	r3, #16
 8020612:	d802      	bhi.n	802061a <HAL_TIM_ConfigClockSource+0x62>
 8020614:	2b00      	cmp	r3, #0
 8020616:	d06f      	beq.n	80206f8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8020618:	e078      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 802061a:	2b20      	cmp	r3, #32
 802061c:	d06c      	beq.n	80206f8 <HAL_TIM_ConfigClockSource+0x140>
 802061e:	2b30      	cmp	r3, #48	; 0x30
 8020620:	d06a      	beq.n	80206f8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8020622:	e073      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8020624:	2b70      	cmp	r3, #112	; 0x70
 8020626:	d00d      	beq.n	8020644 <HAL_TIM_ConfigClockSource+0x8c>
 8020628:	2b70      	cmp	r3, #112	; 0x70
 802062a:	d804      	bhi.n	8020636 <HAL_TIM_ConfigClockSource+0x7e>
 802062c:	2b50      	cmp	r3, #80	; 0x50
 802062e:	d033      	beq.n	8020698 <HAL_TIM_ConfigClockSource+0xe0>
 8020630:	2b60      	cmp	r3, #96	; 0x60
 8020632:	d041      	beq.n	80206b8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8020634:	e06a      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8020636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 802063a:	d066      	beq.n	802070a <HAL_TIM_ConfigClockSource+0x152>
 802063c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020640:	d017      	beq.n	8020672 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8020642:	e063      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	6818      	ldr	r0, [r3, #0]
 8020648:	683b      	ldr	r3, [r7, #0]
 802064a:	6899      	ldr	r1, [r3, #8]
 802064c:	683b      	ldr	r3, [r7, #0]
 802064e:	685a      	ldr	r2, [r3, #4]
 8020650:	683b      	ldr	r3, [r7, #0]
 8020652:	68db      	ldr	r3, [r3, #12]
 8020654:	f000 fbac 	bl	8020db0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	681b      	ldr	r3, [r3, #0]
 802065c:	689b      	ldr	r3, [r3, #8]
 802065e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020660:	68fb      	ldr	r3, [r7, #12]
 8020662:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8020666:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8020668:	687b      	ldr	r3, [r7, #4]
 802066a:	681b      	ldr	r3, [r3, #0]
 802066c:	68fa      	ldr	r2, [r7, #12]
 802066e:	609a      	str	r2, [r3, #8]
      break;
 8020670:	e04c      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	6818      	ldr	r0, [r3, #0]
 8020676:	683b      	ldr	r3, [r7, #0]
 8020678:	6899      	ldr	r1, [r3, #8]
 802067a:	683b      	ldr	r3, [r7, #0]
 802067c:	685a      	ldr	r2, [r3, #4]
 802067e:	683b      	ldr	r3, [r7, #0]
 8020680:	68db      	ldr	r3, [r3, #12]
 8020682:	f000 fb95 	bl	8020db0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	689a      	ldr	r2, [r3, #8]
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	681b      	ldr	r3, [r3, #0]
 8020690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8020694:	609a      	str	r2, [r3, #8]
      break;
 8020696:	e039      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	6818      	ldr	r0, [r3, #0]
 802069c:	683b      	ldr	r3, [r7, #0]
 802069e:	6859      	ldr	r1, [r3, #4]
 80206a0:	683b      	ldr	r3, [r7, #0]
 80206a2:	68db      	ldr	r3, [r3, #12]
 80206a4:	461a      	mov	r2, r3
 80206a6:	f000 fb09 	bl	8020cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	681b      	ldr	r3, [r3, #0]
 80206ae:	2150      	movs	r1, #80	; 0x50
 80206b0:	4618      	mov	r0, r3
 80206b2:	f000 fb62 	bl	8020d7a <TIM_ITRx_SetConfig>
      break;
 80206b6:	e029      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	6818      	ldr	r0, [r3, #0]
 80206bc:	683b      	ldr	r3, [r7, #0]
 80206be:	6859      	ldr	r1, [r3, #4]
 80206c0:	683b      	ldr	r3, [r7, #0]
 80206c2:	68db      	ldr	r3, [r3, #12]
 80206c4:	461a      	mov	r2, r3
 80206c6:	f000 fb28 	bl	8020d1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	2160      	movs	r1, #96	; 0x60
 80206d0:	4618      	mov	r0, r3
 80206d2:	f000 fb52 	bl	8020d7a <TIM_ITRx_SetConfig>
      break;
 80206d6:	e019      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	6818      	ldr	r0, [r3, #0]
 80206dc:	683b      	ldr	r3, [r7, #0]
 80206de:	6859      	ldr	r1, [r3, #4]
 80206e0:	683b      	ldr	r3, [r7, #0]
 80206e2:	68db      	ldr	r3, [r3, #12]
 80206e4:	461a      	mov	r2, r3
 80206e6:	f000 fae9 	bl	8020cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	2140      	movs	r1, #64	; 0x40
 80206f0:	4618      	mov	r0, r3
 80206f2:	f000 fb42 	bl	8020d7a <TIM_ITRx_SetConfig>
      break;
 80206f6:	e009      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	681a      	ldr	r2, [r3, #0]
 80206fc:	683b      	ldr	r3, [r7, #0]
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	4619      	mov	r1, r3
 8020702:	4610      	mov	r0, r2
 8020704:	f000 fb39 	bl	8020d7a <TIM_ITRx_SetConfig>
      break;
 8020708:	e000      	b.n	802070c <HAL_TIM_ConfigClockSource+0x154>
      break;
 802070a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	2201      	movs	r2, #1
 8020710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	2200      	movs	r2, #0
 8020718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802071c:	2300      	movs	r3, #0
}
 802071e:	4618      	mov	r0, r3
 8020720:	3710      	adds	r7, #16
 8020722:	46bd      	mov	sp, r7
 8020724:	bd80      	pop	{r7, pc}

08020726 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8020726:	b480      	push	{r7}
 8020728:	b083      	sub	sp, #12
 802072a:	af00      	add	r7, sp, #0
 802072c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 802072e:	bf00      	nop
 8020730:	370c      	adds	r7, #12
 8020732:	46bd      	mov	sp, r7
 8020734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020738:	4770      	bx	lr

0802073a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 802073a:	b480      	push	{r7}
 802073c:	b083      	sub	sp, #12
 802073e:	af00      	add	r7, sp, #0
 8020740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8020742:	bf00      	nop
 8020744:	370c      	adds	r7, #12
 8020746:	46bd      	mov	sp, r7
 8020748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802074c:	4770      	bx	lr

0802074e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802074e:	b480      	push	{r7}
 8020750:	b083      	sub	sp, #12
 8020752:	af00      	add	r7, sp, #0
 8020754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8020756:	bf00      	nop
 8020758:	370c      	adds	r7, #12
 802075a:	46bd      	mov	sp, r7
 802075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020760:	4770      	bx	lr

08020762 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8020762:	b480      	push	{r7}
 8020764:	b083      	sub	sp, #12
 8020766:	af00      	add	r7, sp, #0
 8020768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 802076a:	bf00      	nop
 802076c:	370c      	adds	r7, #12
 802076e:	46bd      	mov	sp, r7
 8020770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020774:	4770      	bx	lr

08020776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8020776:	b480      	push	{r7}
 8020778:	b083      	sub	sp, #12
 802077a:	af00      	add	r7, sp, #0
 802077c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 802077e:	bf00      	nop
 8020780:	370c      	adds	r7, #12
 8020782:	46bd      	mov	sp, r7
 8020784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020788:	4770      	bx	lr

0802078a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 802078a:	b480      	push	{r7}
 802078c:	b083      	sub	sp, #12
 802078e:	af00      	add	r7, sp, #0
 8020790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8020792:	bf00      	nop
 8020794:	370c      	adds	r7, #12
 8020796:	46bd      	mov	sp, r7
 8020798:	f85d 7b04 	ldr.w	r7, [sp], #4
 802079c:	4770      	bx	lr

0802079e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 802079e:	b580      	push	{r7, lr}
 80207a0:	b084      	sub	sp, #16
 80207a2:	af00      	add	r7, sp, #0
 80207a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207aa:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80207ac:	68fb      	ldr	r3, [r7, #12]
 80207ae:	2201      	movs	r2, #1
 80207b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80207b4:	68f8      	ldr	r0, [r7, #12]
 80207b6:	f7ff ffe8 	bl	802078a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80207ba:	bf00      	nop
 80207bc:	3710      	adds	r7, #16
 80207be:	46bd      	mov	sp, r7
 80207c0:	bd80      	pop	{r7, pc}

080207c2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80207c2:	b580      	push	{r7, lr}
 80207c4:	b084      	sub	sp, #16
 80207c6:	af00      	add	r7, sp, #0
 80207c8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80207ce:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80207d0:	68fb      	ldr	r3, [r7, #12]
 80207d2:	2201      	movs	r2, #1
 80207d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80207d8:	68fb      	ldr	r3, [r7, #12]
 80207da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80207dc:	687a      	ldr	r2, [r7, #4]
 80207de:	429a      	cmp	r2, r3
 80207e0:	d103      	bne.n	80207ea <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80207e2:	68fb      	ldr	r3, [r7, #12]
 80207e4:	2201      	movs	r2, #1
 80207e6:	771a      	strb	r2, [r3, #28]
 80207e8:	e019      	b.n	802081e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80207ea:	68fb      	ldr	r3, [r7, #12]
 80207ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207ee:	687a      	ldr	r2, [r7, #4]
 80207f0:	429a      	cmp	r2, r3
 80207f2:	d103      	bne.n	80207fc <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80207f4:	68fb      	ldr	r3, [r7, #12]
 80207f6:	2202      	movs	r2, #2
 80207f8:	771a      	strb	r2, [r3, #28]
 80207fa:	e010      	b.n	802081e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80207fc:	68fb      	ldr	r3, [r7, #12]
 80207fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020800:	687a      	ldr	r2, [r7, #4]
 8020802:	429a      	cmp	r2, r3
 8020804:	d103      	bne.n	802080e <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	2204      	movs	r2, #4
 802080a:	771a      	strb	r2, [r3, #28]
 802080c:	e007      	b.n	802081e <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020812:	687a      	ldr	r2, [r7, #4]
 8020814:	429a      	cmp	r2, r3
 8020816:	d102      	bne.n	802081e <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020818:	68fb      	ldr	r3, [r7, #12]
 802081a:	2208      	movs	r2, #8
 802081c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 802081e:	68f8      	ldr	r0, [r7, #12]
 8020820:	f7fc fbce 	bl	801cfc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020824:	68fb      	ldr	r3, [r7, #12]
 8020826:	2200      	movs	r2, #0
 8020828:	771a      	strb	r2, [r3, #28]
}
 802082a:	bf00      	nop
 802082c:	3710      	adds	r7, #16
 802082e:	46bd      	mov	sp, r7
 8020830:	bd80      	pop	{r7, pc}

08020832 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8020832:	b580      	push	{r7, lr}
 8020834:	b084      	sub	sp, #16
 8020836:	af00      	add	r7, sp, #0
 8020838:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 802083a:	687b      	ldr	r3, [r7, #4]
 802083c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802083e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	2201      	movs	r2, #1
 8020844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8020848:	68fb      	ldr	r3, [r7, #12]
 802084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802084c:	687a      	ldr	r2, [r7, #4]
 802084e:	429a      	cmp	r2, r3
 8020850:	d103      	bne.n	802085a <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020852:	68fb      	ldr	r3, [r7, #12]
 8020854:	2201      	movs	r2, #1
 8020856:	771a      	strb	r2, [r3, #28]
 8020858:	e019      	b.n	802088e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 802085a:	68fb      	ldr	r3, [r7, #12]
 802085c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802085e:	687a      	ldr	r2, [r7, #4]
 8020860:	429a      	cmp	r2, r3
 8020862:	d103      	bne.n	802086c <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8020864:	68fb      	ldr	r3, [r7, #12]
 8020866:	2202      	movs	r2, #2
 8020868:	771a      	strb	r2, [r3, #28]
 802086a:	e010      	b.n	802088e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 802086c:	68fb      	ldr	r3, [r7, #12]
 802086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020870:	687a      	ldr	r2, [r7, #4]
 8020872:	429a      	cmp	r2, r3
 8020874:	d103      	bne.n	802087e <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	2204      	movs	r2, #4
 802087a:	771a      	strb	r2, [r3, #28]
 802087c:	e007      	b.n	802088e <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 802087e:	68fb      	ldr	r3, [r7, #12]
 8020880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020882:	687a      	ldr	r2, [r7, #4]
 8020884:	429a      	cmp	r2, r3
 8020886:	d102      	bne.n	802088e <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8020888:	68fb      	ldr	r3, [r7, #12]
 802088a:	2208      	movs	r2, #8
 802088c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 802088e:	68f8      	ldr	r0, [r7, #12]
 8020890:	f7ff ff67 	bl	8020762 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8020894:	68fb      	ldr	r3, [r7, #12]
 8020896:	2200      	movs	r2, #0
 8020898:	771a      	strb	r2, [r3, #28]
}
 802089a:	bf00      	nop
 802089c:	3710      	adds	r7, #16
 802089e:	46bd      	mov	sp, r7
 80208a0:	bd80      	pop	{r7, pc}
	...

080208a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80208a4:	b480      	push	{r7}
 80208a6:	b085      	sub	sp, #20
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	6078      	str	r0, [r7, #4]
 80208ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80208ae:	687b      	ldr	r3, [r7, #4]
 80208b0:	681b      	ldr	r3, [r3, #0]
 80208b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80208b4:	687b      	ldr	r3, [r7, #4]
 80208b6:	4a34      	ldr	r2, [pc, #208]	; (8020988 <TIM_Base_SetConfig+0xe4>)
 80208b8:	4293      	cmp	r3, r2
 80208ba:	d00f      	beq.n	80208dc <TIM_Base_SetConfig+0x38>
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80208c2:	d00b      	beq.n	80208dc <TIM_Base_SetConfig+0x38>
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	4a31      	ldr	r2, [pc, #196]	; (802098c <TIM_Base_SetConfig+0xe8>)
 80208c8:	4293      	cmp	r3, r2
 80208ca:	d007      	beq.n	80208dc <TIM_Base_SetConfig+0x38>
 80208cc:	687b      	ldr	r3, [r7, #4]
 80208ce:	4a30      	ldr	r2, [pc, #192]	; (8020990 <TIM_Base_SetConfig+0xec>)
 80208d0:	4293      	cmp	r3, r2
 80208d2:	d003      	beq.n	80208dc <TIM_Base_SetConfig+0x38>
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	4a2f      	ldr	r2, [pc, #188]	; (8020994 <TIM_Base_SetConfig+0xf0>)
 80208d8:	4293      	cmp	r3, r2
 80208da:	d108      	bne.n	80208ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80208e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80208e4:	683b      	ldr	r3, [r7, #0]
 80208e6:	685b      	ldr	r3, [r3, #4]
 80208e8:	68fa      	ldr	r2, [r7, #12]
 80208ea:	4313      	orrs	r3, r2
 80208ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	4a25      	ldr	r2, [pc, #148]	; (8020988 <TIM_Base_SetConfig+0xe4>)
 80208f2:	4293      	cmp	r3, r2
 80208f4:	d01b      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 80208f6:	687b      	ldr	r3, [r7, #4]
 80208f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80208fc:	d017      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 80208fe:	687b      	ldr	r3, [r7, #4]
 8020900:	4a22      	ldr	r2, [pc, #136]	; (802098c <TIM_Base_SetConfig+0xe8>)
 8020902:	4293      	cmp	r3, r2
 8020904:	d013      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	4a21      	ldr	r2, [pc, #132]	; (8020990 <TIM_Base_SetConfig+0xec>)
 802090a:	4293      	cmp	r3, r2
 802090c:	d00f      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	4a20      	ldr	r2, [pc, #128]	; (8020994 <TIM_Base_SetConfig+0xf0>)
 8020912:	4293      	cmp	r3, r2
 8020914:	d00b      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 8020916:	687b      	ldr	r3, [r7, #4]
 8020918:	4a1f      	ldr	r2, [pc, #124]	; (8020998 <TIM_Base_SetConfig+0xf4>)
 802091a:	4293      	cmp	r3, r2
 802091c:	d007      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	4a1e      	ldr	r2, [pc, #120]	; (802099c <TIM_Base_SetConfig+0xf8>)
 8020922:	4293      	cmp	r3, r2
 8020924:	d003      	beq.n	802092e <TIM_Base_SetConfig+0x8a>
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	4a1d      	ldr	r2, [pc, #116]	; (80209a0 <TIM_Base_SetConfig+0xfc>)
 802092a:	4293      	cmp	r3, r2
 802092c:	d108      	bne.n	8020940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 802092e:	68fb      	ldr	r3, [r7, #12]
 8020930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020936:	683b      	ldr	r3, [r7, #0]
 8020938:	68db      	ldr	r3, [r3, #12]
 802093a:	68fa      	ldr	r2, [r7, #12]
 802093c:	4313      	orrs	r3, r2
 802093e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020940:	68fb      	ldr	r3, [r7, #12]
 8020942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8020946:	683b      	ldr	r3, [r7, #0]
 8020948:	695b      	ldr	r3, [r3, #20]
 802094a:	4313      	orrs	r3, r2
 802094c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	68fa      	ldr	r2, [r7, #12]
 8020952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020954:	683b      	ldr	r3, [r7, #0]
 8020956:	689a      	ldr	r2, [r3, #8]
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 802095c:	683b      	ldr	r3, [r7, #0]
 802095e:	681a      	ldr	r2, [r3, #0]
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	4a08      	ldr	r2, [pc, #32]	; (8020988 <TIM_Base_SetConfig+0xe4>)
 8020968:	4293      	cmp	r3, r2
 802096a:	d103      	bne.n	8020974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 802096c:	683b      	ldr	r3, [r7, #0]
 802096e:	691a      	ldr	r2, [r3, #16]
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	2201      	movs	r2, #1
 8020978:	615a      	str	r2, [r3, #20]
}
 802097a:	bf00      	nop
 802097c:	3714      	adds	r7, #20
 802097e:	46bd      	mov	sp, r7
 8020980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020984:	4770      	bx	lr
 8020986:	bf00      	nop
 8020988:	40010000 	.word	0x40010000
 802098c:	40000400 	.word	0x40000400
 8020990:	40000800 	.word	0x40000800
 8020994:	40000c00 	.word	0x40000c00
 8020998:	40014000 	.word	0x40014000
 802099c:	40014400 	.word	0x40014400
 80209a0:	40014800 	.word	0x40014800

080209a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80209a4:	b480      	push	{r7}
 80209a6:	b087      	sub	sp, #28
 80209a8:	af00      	add	r7, sp, #0
 80209aa:	6078      	str	r0, [r7, #4]
 80209ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	6a1b      	ldr	r3, [r3, #32]
 80209b2:	f023 0201 	bic.w	r2, r3, #1
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80209ba:	687b      	ldr	r3, [r7, #4]
 80209bc:	6a1b      	ldr	r3, [r3, #32]
 80209be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80209c0:	687b      	ldr	r3, [r7, #4]
 80209c2:	685b      	ldr	r3, [r3, #4]
 80209c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	699b      	ldr	r3, [r3, #24]
 80209ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80209d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80209d4:	68fb      	ldr	r3, [r7, #12]
 80209d6:	f023 0303 	bic.w	r3, r3, #3
 80209da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80209dc:	683b      	ldr	r3, [r7, #0]
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	68fa      	ldr	r2, [r7, #12]
 80209e2:	4313      	orrs	r3, r2
 80209e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80209e6:	697b      	ldr	r3, [r7, #20]
 80209e8:	f023 0302 	bic.w	r3, r3, #2
 80209ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80209ee:	683b      	ldr	r3, [r7, #0]
 80209f0:	689b      	ldr	r3, [r3, #8]
 80209f2:	697a      	ldr	r2, [r7, #20]
 80209f4:	4313      	orrs	r3, r2
 80209f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80209f8:	687b      	ldr	r3, [r7, #4]
 80209fa:	4a1c      	ldr	r2, [pc, #112]	; (8020a6c <TIM_OC1_SetConfig+0xc8>)
 80209fc:	4293      	cmp	r3, r2
 80209fe:	d10c      	bne.n	8020a1a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020a00:	697b      	ldr	r3, [r7, #20]
 8020a02:	f023 0308 	bic.w	r3, r3, #8
 8020a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020a08:	683b      	ldr	r3, [r7, #0]
 8020a0a:	68db      	ldr	r3, [r3, #12]
 8020a0c:	697a      	ldr	r2, [r7, #20]
 8020a0e:	4313      	orrs	r3, r2
 8020a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020a12:	697b      	ldr	r3, [r7, #20]
 8020a14:	f023 0304 	bic.w	r3, r3, #4
 8020a18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	4a13      	ldr	r2, [pc, #76]	; (8020a6c <TIM_OC1_SetConfig+0xc8>)
 8020a1e:	4293      	cmp	r3, r2
 8020a20:	d111      	bne.n	8020a46 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020a22:	693b      	ldr	r3, [r7, #16]
 8020a24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8020a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020a2a:	693b      	ldr	r3, [r7, #16]
 8020a2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020a32:	683b      	ldr	r3, [r7, #0]
 8020a34:	695b      	ldr	r3, [r3, #20]
 8020a36:	693a      	ldr	r2, [r7, #16]
 8020a38:	4313      	orrs	r3, r2
 8020a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020a3c:	683b      	ldr	r3, [r7, #0]
 8020a3e:	699b      	ldr	r3, [r3, #24]
 8020a40:	693a      	ldr	r2, [r7, #16]
 8020a42:	4313      	orrs	r3, r2
 8020a44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	693a      	ldr	r2, [r7, #16]
 8020a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	68fa      	ldr	r2, [r7, #12]
 8020a50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020a52:	683b      	ldr	r3, [r7, #0]
 8020a54:	685a      	ldr	r2, [r3, #4]
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020a5a:	687b      	ldr	r3, [r7, #4]
 8020a5c:	697a      	ldr	r2, [r7, #20]
 8020a5e:	621a      	str	r2, [r3, #32]
}
 8020a60:	bf00      	nop
 8020a62:	371c      	adds	r7, #28
 8020a64:	46bd      	mov	sp, r7
 8020a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a6a:	4770      	bx	lr
 8020a6c:	40010000 	.word	0x40010000

08020a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020a70:	b480      	push	{r7}
 8020a72:	b087      	sub	sp, #28
 8020a74:	af00      	add	r7, sp, #0
 8020a76:	6078      	str	r0, [r7, #4]
 8020a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	6a1b      	ldr	r3, [r3, #32]
 8020a7e:	f023 0210 	bic.w	r2, r3, #16
 8020a82:	687b      	ldr	r3, [r7, #4]
 8020a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	6a1b      	ldr	r3, [r3, #32]
 8020a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020a8c:	687b      	ldr	r3, [r7, #4]
 8020a8e:	685b      	ldr	r3, [r3, #4]
 8020a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020a92:	687b      	ldr	r3, [r7, #4]
 8020a94:	699b      	ldr	r3, [r3, #24]
 8020a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020a98:	68fb      	ldr	r3, [r7, #12]
 8020a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020aa0:	68fb      	ldr	r3, [r7, #12]
 8020aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020aa8:	683b      	ldr	r3, [r7, #0]
 8020aaa:	681b      	ldr	r3, [r3, #0]
 8020aac:	021b      	lsls	r3, r3, #8
 8020aae:	68fa      	ldr	r2, [r7, #12]
 8020ab0:	4313      	orrs	r3, r2
 8020ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020ab4:	697b      	ldr	r3, [r7, #20]
 8020ab6:	f023 0320 	bic.w	r3, r3, #32
 8020aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020abc:	683b      	ldr	r3, [r7, #0]
 8020abe:	689b      	ldr	r3, [r3, #8]
 8020ac0:	011b      	lsls	r3, r3, #4
 8020ac2:	697a      	ldr	r2, [r7, #20]
 8020ac4:	4313      	orrs	r3, r2
 8020ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	4a1e      	ldr	r2, [pc, #120]	; (8020b44 <TIM_OC2_SetConfig+0xd4>)
 8020acc:	4293      	cmp	r3, r2
 8020ace:	d10d      	bne.n	8020aec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020ad0:	697b      	ldr	r3, [r7, #20]
 8020ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020ad8:	683b      	ldr	r3, [r7, #0]
 8020ada:	68db      	ldr	r3, [r3, #12]
 8020adc:	011b      	lsls	r3, r3, #4
 8020ade:	697a      	ldr	r2, [r7, #20]
 8020ae0:	4313      	orrs	r3, r2
 8020ae2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020ae4:	697b      	ldr	r3, [r7, #20]
 8020ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8020aea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	4a15      	ldr	r2, [pc, #84]	; (8020b44 <TIM_OC2_SetConfig+0xd4>)
 8020af0:	4293      	cmp	r3, r2
 8020af2:	d113      	bne.n	8020b1c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020af4:	693b      	ldr	r3, [r7, #16]
 8020af6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020afc:	693b      	ldr	r3, [r7, #16]
 8020afe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020b04:	683b      	ldr	r3, [r7, #0]
 8020b06:	695b      	ldr	r3, [r3, #20]
 8020b08:	009b      	lsls	r3, r3, #2
 8020b0a:	693a      	ldr	r2, [r7, #16]
 8020b0c:	4313      	orrs	r3, r2
 8020b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020b10:	683b      	ldr	r3, [r7, #0]
 8020b12:	699b      	ldr	r3, [r3, #24]
 8020b14:	009b      	lsls	r3, r3, #2
 8020b16:	693a      	ldr	r2, [r7, #16]
 8020b18:	4313      	orrs	r3, r2
 8020b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	693a      	ldr	r2, [r7, #16]
 8020b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020b22:	687b      	ldr	r3, [r7, #4]
 8020b24:	68fa      	ldr	r2, [r7, #12]
 8020b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020b28:	683b      	ldr	r3, [r7, #0]
 8020b2a:	685a      	ldr	r2, [r3, #4]
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	697a      	ldr	r2, [r7, #20]
 8020b34:	621a      	str	r2, [r3, #32]
}
 8020b36:	bf00      	nop
 8020b38:	371c      	adds	r7, #28
 8020b3a:	46bd      	mov	sp, r7
 8020b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b40:	4770      	bx	lr
 8020b42:	bf00      	nop
 8020b44:	40010000 	.word	0x40010000

08020b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020b48:	b480      	push	{r7}
 8020b4a:	b087      	sub	sp, #28
 8020b4c:	af00      	add	r7, sp, #0
 8020b4e:	6078      	str	r0, [r7, #4]
 8020b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020b52:	687b      	ldr	r3, [r7, #4]
 8020b54:	6a1b      	ldr	r3, [r3, #32]
 8020b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	6a1b      	ldr	r3, [r3, #32]
 8020b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	685b      	ldr	r3, [r3, #4]
 8020b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	69db      	ldr	r3, [r3, #28]
 8020b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020b78:	68fb      	ldr	r3, [r7, #12]
 8020b7a:	f023 0303 	bic.w	r3, r3, #3
 8020b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020b80:	683b      	ldr	r3, [r7, #0]
 8020b82:	681b      	ldr	r3, [r3, #0]
 8020b84:	68fa      	ldr	r2, [r7, #12]
 8020b86:	4313      	orrs	r3, r2
 8020b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020b8a:	697b      	ldr	r3, [r7, #20]
 8020b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8020b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020b92:	683b      	ldr	r3, [r7, #0]
 8020b94:	689b      	ldr	r3, [r3, #8]
 8020b96:	021b      	lsls	r3, r3, #8
 8020b98:	697a      	ldr	r2, [r7, #20]
 8020b9a:	4313      	orrs	r3, r2
 8020b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020b9e:	687b      	ldr	r3, [r7, #4]
 8020ba0:	4a1d      	ldr	r2, [pc, #116]	; (8020c18 <TIM_OC3_SetConfig+0xd0>)
 8020ba2:	4293      	cmp	r3, r2
 8020ba4:	d10d      	bne.n	8020bc2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020ba6:	697b      	ldr	r3, [r7, #20]
 8020ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8020bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020bae:	683b      	ldr	r3, [r7, #0]
 8020bb0:	68db      	ldr	r3, [r3, #12]
 8020bb2:	021b      	lsls	r3, r3, #8
 8020bb4:	697a      	ldr	r2, [r7, #20]
 8020bb6:	4313      	orrs	r3, r2
 8020bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8020bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020bc2:	687b      	ldr	r3, [r7, #4]
 8020bc4:	4a14      	ldr	r2, [pc, #80]	; (8020c18 <TIM_OC3_SetConfig+0xd0>)
 8020bc6:	4293      	cmp	r3, r2
 8020bc8:	d113      	bne.n	8020bf2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020bca:	693b      	ldr	r3, [r7, #16]
 8020bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020bd2:	693b      	ldr	r3, [r7, #16]
 8020bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	695b      	ldr	r3, [r3, #20]
 8020bde:	011b      	lsls	r3, r3, #4
 8020be0:	693a      	ldr	r2, [r7, #16]
 8020be2:	4313      	orrs	r3, r2
 8020be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020be6:	683b      	ldr	r3, [r7, #0]
 8020be8:	699b      	ldr	r3, [r3, #24]
 8020bea:	011b      	lsls	r3, r3, #4
 8020bec:	693a      	ldr	r2, [r7, #16]
 8020bee:	4313      	orrs	r3, r2
 8020bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020bf2:	687b      	ldr	r3, [r7, #4]
 8020bf4:	693a      	ldr	r2, [r7, #16]
 8020bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020bf8:	687b      	ldr	r3, [r7, #4]
 8020bfa:	68fa      	ldr	r2, [r7, #12]
 8020bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020bfe:	683b      	ldr	r3, [r7, #0]
 8020c00:	685a      	ldr	r2, [r3, #4]
 8020c02:	687b      	ldr	r3, [r7, #4]
 8020c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c06:	687b      	ldr	r3, [r7, #4]
 8020c08:	697a      	ldr	r2, [r7, #20]
 8020c0a:	621a      	str	r2, [r3, #32]
}
 8020c0c:	bf00      	nop
 8020c0e:	371c      	adds	r7, #28
 8020c10:	46bd      	mov	sp, r7
 8020c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c16:	4770      	bx	lr
 8020c18:	40010000 	.word	0x40010000

08020c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8020c1c:	b480      	push	{r7}
 8020c1e:	b087      	sub	sp, #28
 8020c20:	af00      	add	r7, sp, #0
 8020c22:	6078      	str	r0, [r7, #4]
 8020c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020c26:	687b      	ldr	r3, [r7, #4]
 8020c28:	6a1b      	ldr	r3, [r3, #32]
 8020c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020c2e:	687b      	ldr	r3, [r7, #4]
 8020c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	6a1b      	ldr	r3, [r3, #32]
 8020c36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	685b      	ldr	r3, [r3, #4]
 8020c3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020c3e:	687b      	ldr	r3, [r7, #4]
 8020c40:	69db      	ldr	r3, [r3, #28]
 8020c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020c44:	68fb      	ldr	r3, [r7, #12]
 8020c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8020c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020c4c:	68fb      	ldr	r3, [r7, #12]
 8020c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020c54:	683b      	ldr	r3, [r7, #0]
 8020c56:	681b      	ldr	r3, [r3, #0]
 8020c58:	021b      	lsls	r3, r3, #8
 8020c5a:	68fa      	ldr	r2, [r7, #12]
 8020c5c:	4313      	orrs	r3, r2
 8020c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020c60:	693b      	ldr	r3, [r7, #16]
 8020c62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8020c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020c68:	683b      	ldr	r3, [r7, #0]
 8020c6a:	689b      	ldr	r3, [r3, #8]
 8020c6c:	031b      	lsls	r3, r3, #12
 8020c6e:	693a      	ldr	r2, [r7, #16]
 8020c70:	4313      	orrs	r3, r2
 8020c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	4a10      	ldr	r2, [pc, #64]	; (8020cb8 <TIM_OC4_SetConfig+0x9c>)
 8020c78:	4293      	cmp	r3, r2
 8020c7a:	d109      	bne.n	8020c90 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020c7c:	697b      	ldr	r3, [r7, #20]
 8020c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8020c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020c84:	683b      	ldr	r3, [r7, #0]
 8020c86:	695b      	ldr	r3, [r3, #20]
 8020c88:	019b      	lsls	r3, r3, #6
 8020c8a:	697a      	ldr	r2, [r7, #20]
 8020c8c:	4313      	orrs	r3, r2
 8020c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c90:	687b      	ldr	r3, [r7, #4]
 8020c92:	697a      	ldr	r2, [r7, #20]
 8020c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020c96:	687b      	ldr	r3, [r7, #4]
 8020c98:	68fa      	ldr	r2, [r7, #12]
 8020c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020c9c:	683b      	ldr	r3, [r7, #0]
 8020c9e:	685a      	ldr	r2, [r3, #4]
 8020ca0:	687b      	ldr	r3, [r7, #4]
 8020ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ca4:	687b      	ldr	r3, [r7, #4]
 8020ca6:	693a      	ldr	r2, [r7, #16]
 8020ca8:	621a      	str	r2, [r3, #32]
}
 8020caa:	bf00      	nop
 8020cac:	371c      	adds	r7, #28
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cb4:	4770      	bx	lr
 8020cb6:	bf00      	nop
 8020cb8:	40010000 	.word	0x40010000

08020cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020cbc:	b480      	push	{r7}
 8020cbe:	b087      	sub	sp, #28
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	60f8      	str	r0, [r7, #12]
 8020cc4:	60b9      	str	r1, [r7, #8]
 8020cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020cc8:	68fb      	ldr	r3, [r7, #12]
 8020cca:	6a1b      	ldr	r3, [r3, #32]
 8020ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020cce:	68fb      	ldr	r3, [r7, #12]
 8020cd0:	6a1b      	ldr	r3, [r3, #32]
 8020cd2:	f023 0201 	bic.w	r2, r3, #1
 8020cd6:	68fb      	ldr	r3, [r7, #12]
 8020cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020cda:	68fb      	ldr	r3, [r7, #12]
 8020cdc:	699b      	ldr	r3, [r3, #24]
 8020cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020ce0:	693b      	ldr	r3, [r7, #16]
 8020ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020ce8:	687b      	ldr	r3, [r7, #4]
 8020cea:	011b      	lsls	r3, r3, #4
 8020cec:	693a      	ldr	r2, [r7, #16]
 8020cee:	4313      	orrs	r3, r2
 8020cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8020cf2:	697b      	ldr	r3, [r7, #20]
 8020cf4:	f023 030a 	bic.w	r3, r3, #10
 8020cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8020cfa:	697a      	ldr	r2, [r7, #20]
 8020cfc:	68bb      	ldr	r3, [r7, #8]
 8020cfe:	4313      	orrs	r3, r2
 8020d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020d02:	68fb      	ldr	r3, [r7, #12]
 8020d04:	693a      	ldr	r2, [r7, #16]
 8020d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020d08:	68fb      	ldr	r3, [r7, #12]
 8020d0a:	697a      	ldr	r2, [r7, #20]
 8020d0c:	621a      	str	r2, [r3, #32]
}
 8020d0e:	bf00      	nop
 8020d10:	371c      	adds	r7, #28
 8020d12:	46bd      	mov	sp, r7
 8020d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d18:	4770      	bx	lr

08020d1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020d1a:	b480      	push	{r7}
 8020d1c:	b087      	sub	sp, #28
 8020d1e:	af00      	add	r7, sp, #0
 8020d20:	60f8      	str	r0, [r7, #12]
 8020d22:	60b9      	str	r1, [r7, #8]
 8020d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020d26:	68fb      	ldr	r3, [r7, #12]
 8020d28:	6a1b      	ldr	r3, [r3, #32]
 8020d2a:	f023 0210 	bic.w	r2, r3, #16
 8020d2e:	68fb      	ldr	r3, [r7, #12]
 8020d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020d32:	68fb      	ldr	r3, [r7, #12]
 8020d34:	699b      	ldr	r3, [r3, #24]
 8020d36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020d38:	68fb      	ldr	r3, [r7, #12]
 8020d3a:	6a1b      	ldr	r3, [r3, #32]
 8020d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020d3e:	697b      	ldr	r3, [r7, #20]
 8020d40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020d44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020d46:	687b      	ldr	r3, [r7, #4]
 8020d48:	031b      	lsls	r3, r3, #12
 8020d4a:	697a      	ldr	r2, [r7, #20]
 8020d4c:	4313      	orrs	r3, r2
 8020d4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020d50:	693b      	ldr	r3, [r7, #16]
 8020d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020d56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020d58:	68bb      	ldr	r3, [r7, #8]
 8020d5a:	011b      	lsls	r3, r3, #4
 8020d5c:	693a      	ldr	r2, [r7, #16]
 8020d5e:	4313      	orrs	r3, r2
 8020d60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020d62:	68fb      	ldr	r3, [r7, #12]
 8020d64:	697a      	ldr	r2, [r7, #20]
 8020d66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020d68:	68fb      	ldr	r3, [r7, #12]
 8020d6a:	693a      	ldr	r2, [r7, #16]
 8020d6c:	621a      	str	r2, [r3, #32]
}
 8020d6e:	bf00      	nop
 8020d70:	371c      	adds	r7, #28
 8020d72:	46bd      	mov	sp, r7
 8020d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d78:	4770      	bx	lr

08020d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020d7a:	b480      	push	{r7}
 8020d7c:	b085      	sub	sp, #20
 8020d7e:	af00      	add	r7, sp, #0
 8020d80:	6078      	str	r0, [r7, #4]
 8020d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	689b      	ldr	r3, [r3, #8]
 8020d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020d8a:	68fb      	ldr	r3, [r7, #12]
 8020d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020d92:	683a      	ldr	r2, [r7, #0]
 8020d94:	68fb      	ldr	r3, [r7, #12]
 8020d96:	4313      	orrs	r3, r2
 8020d98:	f043 0307 	orr.w	r3, r3, #7
 8020d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020d9e:	687b      	ldr	r3, [r7, #4]
 8020da0:	68fa      	ldr	r2, [r7, #12]
 8020da2:	609a      	str	r2, [r3, #8]
}
 8020da4:	bf00      	nop
 8020da6:	3714      	adds	r7, #20
 8020da8:	46bd      	mov	sp, r7
 8020daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dae:	4770      	bx	lr

08020db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020db0:	b480      	push	{r7}
 8020db2:	b087      	sub	sp, #28
 8020db4:	af00      	add	r7, sp, #0
 8020db6:	60f8      	str	r0, [r7, #12]
 8020db8:	60b9      	str	r1, [r7, #8]
 8020dba:	607a      	str	r2, [r7, #4]
 8020dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020dbe:	68fb      	ldr	r3, [r7, #12]
 8020dc0:	689b      	ldr	r3, [r3, #8]
 8020dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020dc4:	697b      	ldr	r3, [r7, #20]
 8020dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020dcc:	683b      	ldr	r3, [r7, #0]
 8020dce:	021a      	lsls	r2, r3, #8
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	431a      	orrs	r2, r3
 8020dd4:	68bb      	ldr	r3, [r7, #8]
 8020dd6:	4313      	orrs	r3, r2
 8020dd8:	697a      	ldr	r2, [r7, #20]
 8020dda:	4313      	orrs	r3, r2
 8020ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020dde:	68fb      	ldr	r3, [r7, #12]
 8020de0:	697a      	ldr	r2, [r7, #20]
 8020de2:	609a      	str	r2, [r3, #8]
}
 8020de4:	bf00      	nop
 8020de6:	371c      	adds	r7, #28
 8020de8:	46bd      	mov	sp, r7
 8020dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dee:	4770      	bx	lr

08020df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020df0:	b480      	push	{r7}
 8020df2:	b087      	sub	sp, #28
 8020df4:	af00      	add	r7, sp, #0
 8020df6:	60f8      	str	r0, [r7, #12]
 8020df8:	60b9      	str	r1, [r7, #8]
 8020dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020dfc:	68bb      	ldr	r3, [r7, #8]
 8020dfe:	f003 031f 	and.w	r3, r3, #31
 8020e02:	2201      	movs	r2, #1
 8020e04:	fa02 f303 	lsl.w	r3, r2, r3
 8020e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020e0a:	68fb      	ldr	r3, [r7, #12]
 8020e0c:	6a1a      	ldr	r2, [r3, #32]
 8020e0e:	697b      	ldr	r3, [r7, #20]
 8020e10:	43db      	mvns	r3, r3
 8020e12:	401a      	ands	r2, r3
 8020e14:	68fb      	ldr	r3, [r7, #12]
 8020e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020e18:	68fb      	ldr	r3, [r7, #12]
 8020e1a:	6a1a      	ldr	r2, [r3, #32]
 8020e1c:	68bb      	ldr	r3, [r7, #8]
 8020e1e:	f003 031f 	and.w	r3, r3, #31
 8020e22:	6879      	ldr	r1, [r7, #4]
 8020e24:	fa01 f303 	lsl.w	r3, r1, r3
 8020e28:	431a      	orrs	r2, r3
 8020e2a:	68fb      	ldr	r3, [r7, #12]
 8020e2c:	621a      	str	r2, [r3, #32]
}
 8020e2e:	bf00      	nop
 8020e30:	371c      	adds	r7, #28
 8020e32:	46bd      	mov	sp, r7
 8020e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e38:	4770      	bx	lr
	...

08020e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020e3c:	b480      	push	{r7}
 8020e3e:	b085      	sub	sp, #20
 8020e40:	af00      	add	r7, sp, #0
 8020e42:	6078      	str	r0, [r7, #4]
 8020e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020e4c:	2b01      	cmp	r3, #1
 8020e4e:	d101      	bne.n	8020e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020e50:	2302      	movs	r3, #2
 8020e52:	e050      	b.n	8020ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	2201      	movs	r2, #1
 8020e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	2202      	movs	r2, #2
 8020e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	681b      	ldr	r3, [r3, #0]
 8020e68:	685b      	ldr	r3, [r3, #4]
 8020e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020e6c:	687b      	ldr	r3, [r7, #4]
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	689b      	ldr	r3, [r3, #8]
 8020e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020e74:	68fb      	ldr	r3, [r7, #12]
 8020e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8020e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020e7c:	683b      	ldr	r3, [r7, #0]
 8020e7e:	681b      	ldr	r3, [r3, #0]
 8020e80:	68fa      	ldr	r2, [r7, #12]
 8020e82:	4313      	orrs	r3, r2
 8020e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020e86:	687b      	ldr	r3, [r7, #4]
 8020e88:	681b      	ldr	r3, [r3, #0]
 8020e8a:	68fa      	ldr	r2, [r7, #12]
 8020e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	681b      	ldr	r3, [r3, #0]
 8020e92:	4a1c      	ldr	r2, [pc, #112]	; (8020f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8020e94:	4293      	cmp	r3, r2
 8020e96:	d018      	beq.n	8020eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020e98:	687b      	ldr	r3, [r7, #4]
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020ea0:	d013      	beq.n	8020eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	4a18      	ldr	r2, [pc, #96]	; (8020f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8020ea8:	4293      	cmp	r3, r2
 8020eaa:	d00e      	beq.n	8020eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	681b      	ldr	r3, [r3, #0]
 8020eb0:	4a16      	ldr	r2, [pc, #88]	; (8020f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8020eb2:	4293      	cmp	r3, r2
 8020eb4:	d009      	beq.n	8020eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	681b      	ldr	r3, [r3, #0]
 8020eba:	4a15      	ldr	r2, [pc, #84]	; (8020f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8020ebc:	4293      	cmp	r3, r2
 8020ebe:	d004      	beq.n	8020eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	681b      	ldr	r3, [r3, #0]
 8020ec4:	4a13      	ldr	r2, [pc, #76]	; (8020f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8020ec6:	4293      	cmp	r3, r2
 8020ec8:	d10c      	bne.n	8020ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020eca:	68bb      	ldr	r3, [r7, #8]
 8020ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020ed2:	683b      	ldr	r3, [r7, #0]
 8020ed4:	685b      	ldr	r3, [r3, #4]
 8020ed6:	68ba      	ldr	r2, [r7, #8]
 8020ed8:	4313      	orrs	r3, r2
 8020eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	681b      	ldr	r3, [r3, #0]
 8020ee0:	68ba      	ldr	r2, [r7, #8]
 8020ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	2201      	movs	r2, #1
 8020ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	2200      	movs	r2, #0
 8020ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020ef4:	2300      	movs	r3, #0
}
 8020ef6:	4618      	mov	r0, r3
 8020ef8:	3714      	adds	r7, #20
 8020efa:	46bd      	mov	sp, r7
 8020efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f00:	4770      	bx	lr
 8020f02:	bf00      	nop
 8020f04:	40010000 	.word	0x40010000
 8020f08:	40000400 	.word	0x40000400
 8020f0c:	40000800 	.word	0x40000800
 8020f10:	40000c00 	.word	0x40000c00
 8020f14:	40014000 	.word	0x40014000

08020f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020f18:	b480      	push	{r7}
 8020f1a:	b083      	sub	sp, #12
 8020f1c:	af00      	add	r7, sp, #0
 8020f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020f20:	bf00      	nop
 8020f22:	370c      	adds	r7, #12
 8020f24:	46bd      	mov	sp, r7
 8020f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f2a:	4770      	bx	lr

08020f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020f2c:	b480      	push	{r7}
 8020f2e:	b083      	sub	sp, #12
 8020f30:	af00      	add	r7, sp, #0
 8020f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020f34:	bf00      	nop
 8020f36:	370c      	adds	r7, #12
 8020f38:	46bd      	mov	sp, r7
 8020f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3e:	4770      	bx	lr

08020f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020f40:	b580      	push	{r7, lr}
 8020f42:	b082      	sub	sp, #8
 8020f44:	af00      	add	r7, sp, #0
 8020f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020f48:	687b      	ldr	r3, [r7, #4]
 8020f4a:	2b00      	cmp	r3, #0
 8020f4c:	d101      	bne.n	8020f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020f4e:	2301      	movs	r3, #1
 8020f50:	e03f      	b.n	8020fd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020f58:	b2db      	uxtb	r3, r3
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	d106      	bne.n	8020f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020f5e:	687b      	ldr	r3, [r7, #4]
 8020f60:	2200      	movs	r2, #0
 8020f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020f66:	6878      	ldr	r0, [r7, #4]
 8020f68:	f7fc fdac 	bl	801dac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020f6c:	687b      	ldr	r3, [r7, #4]
 8020f6e:	2224      	movs	r2, #36	; 0x24
 8020f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	681b      	ldr	r3, [r3, #0]
 8020f78:	68da      	ldr	r2, [r3, #12]
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	681b      	ldr	r3, [r3, #0]
 8020f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8020f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8020f84:	6878      	ldr	r0, [r7, #4]
 8020f86:	f000 fb97 	bl	80216b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	681b      	ldr	r3, [r3, #0]
 8020f8e:	691a      	ldr	r2, [r3, #16]
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	681b      	ldr	r3, [r3, #0]
 8020f94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8020f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	681b      	ldr	r3, [r3, #0]
 8020f9e:	695a      	ldr	r2, [r3, #20]
 8020fa0:	687b      	ldr	r3, [r7, #4]
 8020fa2:	681b      	ldr	r3, [r3, #0]
 8020fa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8020fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8020faa:	687b      	ldr	r3, [r7, #4]
 8020fac:	681b      	ldr	r3, [r3, #0]
 8020fae:	68da      	ldr	r2, [r3, #12]
 8020fb0:	687b      	ldr	r3, [r7, #4]
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8020fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8020fba:	687b      	ldr	r3, [r7, #4]
 8020fbc:	2200      	movs	r2, #0
 8020fbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8020fc0:	687b      	ldr	r3, [r7, #4]
 8020fc2:	2220      	movs	r2, #32
 8020fc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	2220      	movs	r2, #32
 8020fcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8020fd0:	2300      	movs	r3, #0
}
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	3708      	adds	r7, #8
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd80      	pop	{r7, pc}

08020fda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8020fda:	b580      	push	{r7, lr}
 8020fdc:	b088      	sub	sp, #32
 8020fde:	af02      	add	r7, sp, #8
 8020fe0:	60f8      	str	r0, [r7, #12]
 8020fe2:	60b9      	str	r1, [r7, #8]
 8020fe4:	603b      	str	r3, [r7, #0]
 8020fe6:	4613      	mov	r3, r2
 8020fe8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8020fea:	2300      	movs	r3, #0
 8020fec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8020ff4:	b2db      	uxtb	r3, r3
 8020ff6:	2b20      	cmp	r3, #32
 8020ff8:	f040 8083 	bne.w	8021102 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8020ffc:	68bb      	ldr	r3, [r7, #8]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	d002      	beq.n	8021008 <HAL_UART_Transmit+0x2e>
 8021002:	88fb      	ldrh	r3, [r7, #6]
 8021004:	2b00      	cmp	r3, #0
 8021006:	d101      	bne.n	802100c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8021008:	2301      	movs	r3, #1
 802100a:	e07b      	b.n	8021104 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8021012:	2b01      	cmp	r3, #1
 8021014:	d101      	bne.n	802101a <HAL_UART_Transmit+0x40>
 8021016:	2302      	movs	r3, #2
 8021018:	e074      	b.n	8021104 <HAL_UART_Transmit+0x12a>
 802101a:	68fb      	ldr	r3, [r7, #12]
 802101c:	2201      	movs	r2, #1
 802101e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	2200      	movs	r2, #0
 8021026:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8021028:	68fb      	ldr	r3, [r7, #12]
 802102a:	2221      	movs	r2, #33	; 0x21
 802102c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8021030:	f7fc fe7c 	bl	801dd2c <HAL_GetTick>
 8021034:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8021036:	68fb      	ldr	r3, [r7, #12]
 8021038:	88fa      	ldrh	r2, [r7, #6]
 802103a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 802103c:	68fb      	ldr	r3, [r7, #12]
 802103e:	88fa      	ldrh	r2, [r7, #6]
 8021040:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8021042:	68fb      	ldr	r3, [r7, #12]
 8021044:	2200      	movs	r2, #0
 8021046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 802104a:	e042      	b.n	80210d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 802104c:	68fb      	ldr	r3, [r7, #12]
 802104e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021050:	b29b      	uxth	r3, r3
 8021052:	3b01      	subs	r3, #1
 8021054:	b29a      	uxth	r2, r3
 8021056:	68fb      	ldr	r3, [r7, #12]
 8021058:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 802105a:	68fb      	ldr	r3, [r7, #12]
 802105c:	689b      	ldr	r3, [r3, #8]
 802105e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021062:	d122      	bne.n	80210aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	9300      	str	r3, [sp, #0]
 8021068:	697b      	ldr	r3, [r7, #20]
 802106a:	2200      	movs	r2, #0
 802106c:	2180      	movs	r1, #128	; 0x80
 802106e:	68f8      	ldr	r0, [r7, #12]
 8021070:	f000 f9b6 	bl	80213e0 <UART_WaitOnFlagUntilTimeout>
 8021074:	4603      	mov	r3, r0
 8021076:	2b00      	cmp	r3, #0
 8021078:	d001      	beq.n	802107e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 802107a:	2303      	movs	r3, #3
 802107c:	e042      	b.n	8021104 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 802107e:	68bb      	ldr	r3, [r7, #8]
 8021080:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8021082:	693b      	ldr	r3, [r7, #16]
 8021084:	881b      	ldrh	r3, [r3, #0]
 8021086:	461a      	mov	r2, r3
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8021090:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	691b      	ldr	r3, [r3, #16]
 8021096:	2b00      	cmp	r3, #0
 8021098:	d103      	bne.n	80210a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 802109a:	68bb      	ldr	r3, [r7, #8]
 802109c:	3302      	adds	r3, #2
 802109e:	60bb      	str	r3, [r7, #8]
 80210a0:	e017      	b.n	80210d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80210a2:	68bb      	ldr	r3, [r7, #8]
 80210a4:	3301      	adds	r3, #1
 80210a6:	60bb      	str	r3, [r7, #8]
 80210a8:	e013      	b.n	80210d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80210aa:	683b      	ldr	r3, [r7, #0]
 80210ac:	9300      	str	r3, [sp, #0]
 80210ae:	697b      	ldr	r3, [r7, #20]
 80210b0:	2200      	movs	r2, #0
 80210b2:	2180      	movs	r1, #128	; 0x80
 80210b4:	68f8      	ldr	r0, [r7, #12]
 80210b6:	f000 f993 	bl	80213e0 <UART_WaitOnFlagUntilTimeout>
 80210ba:	4603      	mov	r3, r0
 80210bc:	2b00      	cmp	r3, #0
 80210be:	d001      	beq.n	80210c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80210c0:	2303      	movs	r3, #3
 80210c2:	e01f      	b.n	8021104 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80210c4:	68bb      	ldr	r3, [r7, #8]
 80210c6:	1c5a      	adds	r2, r3, #1
 80210c8:	60ba      	str	r2, [r7, #8]
 80210ca:	781a      	ldrb	r2, [r3, #0]
 80210cc:	68fb      	ldr	r3, [r7, #12]
 80210ce:	681b      	ldr	r3, [r3, #0]
 80210d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80210d2:	68fb      	ldr	r3, [r7, #12]
 80210d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80210d6:	b29b      	uxth	r3, r3
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d1b7      	bne.n	802104c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80210dc:	683b      	ldr	r3, [r7, #0]
 80210de:	9300      	str	r3, [sp, #0]
 80210e0:	697b      	ldr	r3, [r7, #20]
 80210e2:	2200      	movs	r2, #0
 80210e4:	2140      	movs	r1, #64	; 0x40
 80210e6:	68f8      	ldr	r0, [r7, #12]
 80210e8:	f000 f97a 	bl	80213e0 <UART_WaitOnFlagUntilTimeout>
 80210ec:	4603      	mov	r3, r0
 80210ee:	2b00      	cmp	r3, #0
 80210f0:	d001      	beq.n	80210f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80210f2:	2303      	movs	r3, #3
 80210f4:	e006      	b.n	8021104 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80210f6:	68fb      	ldr	r3, [r7, #12]
 80210f8:	2220      	movs	r2, #32
 80210fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80210fe:	2300      	movs	r3, #0
 8021100:	e000      	b.n	8021104 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8021102:	2302      	movs	r3, #2
  }
}
 8021104:	4618      	mov	r0, r3
 8021106:	3718      	adds	r7, #24
 8021108:	46bd      	mov	sp, r7
 802110a:	bd80      	pop	{r7, pc}

0802110c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 802110c:	b480      	push	{r7}
 802110e:	b085      	sub	sp, #20
 8021110:	af00      	add	r7, sp, #0
 8021112:	60f8      	str	r0, [r7, #12]
 8021114:	60b9      	str	r1, [r7, #8]
 8021116:	4613      	mov	r3, r2
 8021118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 802111a:	68fb      	ldr	r3, [r7, #12]
 802111c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8021120:	b2db      	uxtb	r3, r3
 8021122:	2b20      	cmp	r3, #32
 8021124:	d140      	bne.n	80211a8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8021126:	68bb      	ldr	r3, [r7, #8]
 8021128:	2b00      	cmp	r3, #0
 802112a:	d002      	beq.n	8021132 <HAL_UART_Receive_IT+0x26>
 802112c:	88fb      	ldrh	r3, [r7, #6]
 802112e:	2b00      	cmp	r3, #0
 8021130:	d101      	bne.n	8021136 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8021132:	2301      	movs	r3, #1
 8021134:	e039      	b.n	80211aa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8021136:	68fb      	ldr	r3, [r7, #12]
 8021138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 802113c:	2b01      	cmp	r3, #1
 802113e:	d101      	bne.n	8021144 <HAL_UART_Receive_IT+0x38>
 8021140:	2302      	movs	r3, #2
 8021142:	e032      	b.n	80211aa <HAL_UART_Receive_IT+0x9e>
 8021144:	68fb      	ldr	r3, [r7, #12]
 8021146:	2201      	movs	r2, #1
 8021148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	68ba      	ldr	r2, [r7, #8]
 8021150:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8021152:	68fb      	ldr	r3, [r7, #12]
 8021154:	88fa      	ldrh	r2, [r7, #6]
 8021156:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8021158:	68fb      	ldr	r3, [r7, #12]
 802115a:	88fa      	ldrh	r2, [r7, #6]
 802115c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 802115e:	68fb      	ldr	r3, [r7, #12]
 8021160:	2200      	movs	r2, #0
 8021162:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	2222      	movs	r2, #34	; 0x22
 8021168:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	2200      	movs	r2, #0
 8021170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8021174:	68fb      	ldr	r3, [r7, #12]
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	68da      	ldr	r2, [r3, #12]
 802117a:	68fb      	ldr	r3, [r7, #12]
 802117c:	681b      	ldr	r3, [r3, #0]
 802117e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021182:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8021184:	68fb      	ldr	r3, [r7, #12]
 8021186:	681b      	ldr	r3, [r3, #0]
 8021188:	695a      	ldr	r2, [r3, #20]
 802118a:	68fb      	ldr	r3, [r7, #12]
 802118c:	681b      	ldr	r3, [r3, #0]
 802118e:	f042 0201 	orr.w	r2, r2, #1
 8021192:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8021194:	68fb      	ldr	r3, [r7, #12]
 8021196:	681b      	ldr	r3, [r3, #0]
 8021198:	68da      	ldr	r2, [r3, #12]
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	f042 0220 	orr.w	r2, r2, #32
 80211a2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80211a4:	2300      	movs	r3, #0
 80211a6:	e000      	b.n	80211aa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80211a8:	2302      	movs	r3, #2
  }
}
 80211aa:	4618      	mov	r0, r3
 80211ac:	3714      	adds	r7, #20
 80211ae:	46bd      	mov	sp, r7
 80211b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b4:	4770      	bx	lr
	...

080211b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80211b8:	b580      	push	{r7, lr}
 80211ba:	b088      	sub	sp, #32
 80211bc:	af00      	add	r7, sp, #0
 80211be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80211c0:	687b      	ldr	r3, [r7, #4]
 80211c2:	681b      	ldr	r3, [r3, #0]
 80211c4:	681b      	ldr	r3, [r3, #0]
 80211c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80211c8:	687b      	ldr	r3, [r7, #4]
 80211ca:	681b      	ldr	r3, [r3, #0]
 80211cc:	68db      	ldr	r3, [r3, #12]
 80211ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	681b      	ldr	r3, [r3, #0]
 80211d4:	695b      	ldr	r3, [r3, #20]
 80211d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80211d8:	2300      	movs	r3, #0
 80211da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80211dc:	2300      	movs	r3, #0
 80211de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80211e0:	69fb      	ldr	r3, [r7, #28]
 80211e2:	f003 030f 	and.w	r3, r3, #15
 80211e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80211e8:	693b      	ldr	r3, [r7, #16]
 80211ea:	2b00      	cmp	r3, #0
 80211ec:	d10d      	bne.n	802120a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80211ee:	69fb      	ldr	r3, [r7, #28]
 80211f0:	f003 0320 	and.w	r3, r3, #32
 80211f4:	2b00      	cmp	r3, #0
 80211f6:	d008      	beq.n	802120a <HAL_UART_IRQHandler+0x52>
 80211f8:	69bb      	ldr	r3, [r7, #24]
 80211fa:	f003 0320 	and.w	r3, r3, #32
 80211fe:	2b00      	cmp	r3, #0
 8021200:	d003      	beq.n	802120a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8021202:	6878      	ldr	r0, [r7, #4]
 8021204:	f000 f9d6 	bl	80215b4 <UART_Receive_IT>
      return;
 8021208:	e0d1      	b.n	80213ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 802120a:	693b      	ldr	r3, [r7, #16]
 802120c:	2b00      	cmp	r3, #0
 802120e:	f000 80b0 	beq.w	8021372 <HAL_UART_IRQHandler+0x1ba>
 8021212:	697b      	ldr	r3, [r7, #20]
 8021214:	f003 0301 	and.w	r3, r3, #1
 8021218:	2b00      	cmp	r3, #0
 802121a:	d105      	bne.n	8021228 <HAL_UART_IRQHandler+0x70>
 802121c:	69bb      	ldr	r3, [r7, #24]
 802121e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8021222:	2b00      	cmp	r3, #0
 8021224:	f000 80a5 	beq.w	8021372 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8021228:	69fb      	ldr	r3, [r7, #28]
 802122a:	f003 0301 	and.w	r3, r3, #1
 802122e:	2b00      	cmp	r3, #0
 8021230:	d00a      	beq.n	8021248 <HAL_UART_IRQHandler+0x90>
 8021232:	69bb      	ldr	r3, [r7, #24]
 8021234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021238:	2b00      	cmp	r3, #0
 802123a:	d005      	beq.n	8021248 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 802123c:	687b      	ldr	r3, [r7, #4]
 802123e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021240:	f043 0201 	orr.w	r2, r3, #1
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021248:	69fb      	ldr	r3, [r7, #28]
 802124a:	f003 0304 	and.w	r3, r3, #4
 802124e:	2b00      	cmp	r3, #0
 8021250:	d00a      	beq.n	8021268 <HAL_UART_IRQHandler+0xb0>
 8021252:	697b      	ldr	r3, [r7, #20]
 8021254:	f003 0301 	and.w	r3, r3, #1
 8021258:	2b00      	cmp	r3, #0
 802125a:	d005      	beq.n	8021268 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 802125c:	687b      	ldr	r3, [r7, #4]
 802125e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021260:	f043 0202 	orr.w	r2, r3, #2
 8021264:	687b      	ldr	r3, [r7, #4]
 8021266:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8021268:	69fb      	ldr	r3, [r7, #28]
 802126a:	f003 0302 	and.w	r3, r3, #2
 802126e:	2b00      	cmp	r3, #0
 8021270:	d00a      	beq.n	8021288 <HAL_UART_IRQHandler+0xd0>
 8021272:	697b      	ldr	r3, [r7, #20]
 8021274:	f003 0301 	and.w	r3, r3, #1
 8021278:	2b00      	cmp	r3, #0
 802127a:	d005      	beq.n	8021288 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 802127c:	687b      	ldr	r3, [r7, #4]
 802127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021280:	f043 0204 	orr.w	r2, r3, #4
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8021288:	69fb      	ldr	r3, [r7, #28]
 802128a:	f003 0308 	and.w	r3, r3, #8
 802128e:	2b00      	cmp	r3, #0
 8021290:	d00f      	beq.n	80212b2 <HAL_UART_IRQHandler+0xfa>
 8021292:	69bb      	ldr	r3, [r7, #24]
 8021294:	f003 0320 	and.w	r3, r3, #32
 8021298:	2b00      	cmp	r3, #0
 802129a:	d104      	bne.n	80212a6 <HAL_UART_IRQHandler+0xee>
 802129c:	697b      	ldr	r3, [r7, #20]
 802129e:	f003 0301 	and.w	r3, r3, #1
 80212a2:	2b00      	cmp	r3, #0
 80212a4:	d005      	beq.n	80212b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80212a6:	687b      	ldr	r3, [r7, #4]
 80212a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80212aa:	f043 0208 	orr.w	r2, r3, #8
 80212ae:	687b      	ldr	r3, [r7, #4]
 80212b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80212b2:	687b      	ldr	r3, [r7, #4]
 80212b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d078      	beq.n	80213ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80212ba:	69fb      	ldr	r3, [r7, #28]
 80212bc:	f003 0320 	and.w	r3, r3, #32
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	d007      	beq.n	80212d4 <HAL_UART_IRQHandler+0x11c>
 80212c4:	69bb      	ldr	r3, [r7, #24]
 80212c6:	f003 0320 	and.w	r3, r3, #32
 80212ca:	2b00      	cmp	r3, #0
 80212cc:	d002      	beq.n	80212d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80212ce:	6878      	ldr	r0, [r7, #4]
 80212d0:	f000 f970 	bl	80215b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80212d4:	687b      	ldr	r3, [r7, #4]
 80212d6:	681b      	ldr	r3, [r3, #0]
 80212d8:	695b      	ldr	r3, [r3, #20]
 80212da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80212de:	2b40      	cmp	r3, #64	; 0x40
 80212e0:	bf0c      	ite	eq
 80212e2:	2301      	moveq	r3, #1
 80212e4:	2300      	movne	r3, #0
 80212e6:	b2db      	uxtb	r3, r3
 80212e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80212ee:	f003 0308 	and.w	r3, r3, #8
 80212f2:	2b00      	cmp	r3, #0
 80212f4:	d102      	bne.n	80212fc <HAL_UART_IRQHandler+0x144>
 80212f6:	68fb      	ldr	r3, [r7, #12]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d031      	beq.n	8021360 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80212fc:	6878      	ldr	r0, [r7, #4]
 80212fe:	f000 f8b9 	bl	8021474 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	695b      	ldr	r3, [r3, #20]
 8021308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802130c:	2b40      	cmp	r3, #64	; 0x40
 802130e:	d123      	bne.n	8021358 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8021310:	687b      	ldr	r3, [r7, #4]
 8021312:	681b      	ldr	r3, [r3, #0]
 8021314:	695a      	ldr	r2, [r3, #20]
 8021316:	687b      	ldr	r3, [r7, #4]
 8021318:	681b      	ldr	r3, [r3, #0]
 802131a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802131e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021324:	2b00      	cmp	r3, #0
 8021326:	d013      	beq.n	8021350 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8021328:	687b      	ldr	r3, [r7, #4]
 802132a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802132c:	4a21      	ldr	r2, [pc, #132]	; (80213b4 <HAL_UART_IRQHandler+0x1fc>)
 802132e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021334:	4618      	mov	r0, r3
 8021336:	f7fc ff3f 	bl	801e1b8 <HAL_DMA_Abort_IT>
 802133a:	4603      	mov	r3, r0
 802133c:	2b00      	cmp	r3, #0
 802133e:	d016      	beq.n	802136e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8021340:	687b      	ldr	r3, [r7, #4]
 8021342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8021344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8021346:	687a      	ldr	r2, [r7, #4]
 8021348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802134a:	4610      	mov	r0, r2
 802134c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802134e:	e00e      	b.n	802136e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 f83b 	bl	80213cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8021356:	e00a      	b.n	802136e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8021358:	6878      	ldr	r0, [r7, #4]
 802135a:	f000 f837 	bl	80213cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802135e:	e006      	b.n	802136e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8021360:	6878      	ldr	r0, [r7, #4]
 8021362:	f000 f833 	bl	80213cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8021366:	687b      	ldr	r3, [r7, #4]
 8021368:	2200      	movs	r2, #0
 802136a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 802136c:	e01e      	b.n	80213ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 802136e:	bf00      	nop
    return;
 8021370:	e01c      	b.n	80213ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8021372:	69fb      	ldr	r3, [r7, #28]
 8021374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021378:	2b00      	cmp	r3, #0
 802137a:	d008      	beq.n	802138e <HAL_UART_IRQHandler+0x1d6>
 802137c:	69bb      	ldr	r3, [r7, #24]
 802137e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021382:	2b00      	cmp	r3, #0
 8021384:	d003      	beq.n	802138e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8021386:	6878      	ldr	r0, [r7, #4]
 8021388:	f000 f8a6 	bl	80214d8 <UART_Transmit_IT>
    return;
 802138c:	e00f      	b.n	80213ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 802138e:	69fb      	ldr	r3, [r7, #28]
 8021390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8021394:	2b00      	cmp	r3, #0
 8021396:	d00a      	beq.n	80213ae <HAL_UART_IRQHandler+0x1f6>
 8021398:	69bb      	ldr	r3, [r7, #24]
 802139a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802139e:	2b00      	cmp	r3, #0
 80213a0:	d005      	beq.n	80213ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80213a2:	6878      	ldr	r0, [r7, #4]
 80213a4:	f000 f8ee 	bl	8021584 <UART_EndTransmit_IT>
    return;
 80213a8:	bf00      	nop
 80213aa:	e000      	b.n	80213ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80213ac:	bf00      	nop
  }
}
 80213ae:	3720      	adds	r7, #32
 80213b0:	46bd      	mov	sp, r7
 80213b2:	bd80      	pop	{r7, pc}
 80213b4:	080214b1 	.word	0x080214b1

080213b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80213b8:	b480      	push	{r7}
 80213ba:	b083      	sub	sp, #12
 80213bc:	af00      	add	r7, sp, #0
 80213be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80213c0:	bf00      	nop
 80213c2:	370c      	adds	r7, #12
 80213c4:	46bd      	mov	sp, r7
 80213c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213ca:	4770      	bx	lr

080213cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80213cc:	b480      	push	{r7}
 80213ce:	b083      	sub	sp, #12
 80213d0:	af00      	add	r7, sp, #0
 80213d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80213d4:	bf00      	nop
 80213d6:	370c      	adds	r7, #12
 80213d8:	46bd      	mov	sp, r7
 80213da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213de:	4770      	bx	lr

080213e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80213e0:	b580      	push	{r7, lr}
 80213e2:	b084      	sub	sp, #16
 80213e4:	af00      	add	r7, sp, #0
 80213e6:	60f8      	str	r0, [r7, #12]
 80213e8:	60b9      	str	r1, [r7, #8]
 80213ea:	603b      	str	r3, [r7, #0]
 80213ec:	4613      	mov	r3, r2
 80213ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80213f0:	e02c      	b.n	802144c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80213f2:	69bb      	ldr	r3, [r7, #24]
 80213f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80213f8:	d028      	beq.n	802144c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80213fa:	69bb      	ldr	r3, [r7, #24]
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d007      	beq.n	8021410 <UART_WaitOnFlagUntilTimeout+0x30>
 8021400:	f7fc fc94 	bl	801dd2c <HAL_GetTick>
 8021404:	4602      	mov	r2, r0
 8021406:	683b      	ldr	r3, [r7, #0]
 8021408:	1ad3      	subs	r3, r2, r3
 802140a:	69ba      	ldr	r2, [r7, #24]
 802140c:	429a      	cmp	r2, r3
 802140e:	d21d      	bcs.n	802144c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8021410:	68fb      	ldr	r3, [r7, #12]
 8021412:	681b      	ldr	r3, [r3, #0]
 8021414:	68da      	ldr	r2, [r3, #12]
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 802141e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8021420:	68fb      	ldr	r3, [r7, #12]
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	695a      	ldr	r2, [r3, #20]
 8021426:	68fb      	ldr	r3, [r7, #12]
 8021428:	681b      	ldr	r3, [r3, #0]
 802142a:	f022 0201 	bic.w	r2, r2, #1
 802142e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8021430:	68fb      	ldr	r3, [r7, #12]
 8021432:	2220      	movs	r2, #32
 8021434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8021438:	68fb      	ldr	r3, [r7, #12]
 802143a:	2220      	movs	r2, #32
 802143c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8021440:	68fb      	ldr	r3, [r7, #12]
 8021442:	2200      	movs	r2, #0
 8021444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8021448:	2303      	movs	r3, #3
 802144a:	e00f      	b.n	802146c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802144c:	68fb      	ldr	r3, [r7, #12]
 802144e:	681b      	ldr	r3, [r3, #0]
 8021450:	681a      	ldr	r2, [r3, #0]
 8021452:	68bb      	ldr	r3, [r7, #8]
 8021454:	4013      	ands	r3, r2
 8021456:	68ba      	ldr	r2, [r7, #8]
 8021458:	429a      	cmp	r2, r3
 802145a:	bf0c      	ite	eq
 802145c:	2301      	moveq	r3, #1
 802145e:	2300      	movne	r3, #0
 8021460:	b2db      	uxtb	r3, r3
 8021462:	461a      	mov	r2, r3
 8021464:	79fb      	ldrb	r3, [r7, #7]
 8021466:	429a      	cmp	r2, r3
 8021468:	d0c3      	beq.n	80213f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802146a:	2300      	movs	r3, #0
}
 802146c:	4618      	mov	r0, r3
 802146e:	3710      	adds	r7, #16
 8021470:	46bd      	mov	sp, r7
 8021472:	bd80      	pop	{r7, pc}

08021474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8021474:	b480      	push	{r7}
 8021476:	b083      	sub	sp, #12
 8021478:	af00      	add	r7, sp, #0
 802147a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 802147c:	687b      	ldr	r3, [r7, #4]
 802147e:	681b      	ldr	r3, [r3, #0]
 8021480:	68da      	ldr	r2, [r3, #12]
 8021482:	687b      	ldr	r3, [r7, #4]
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 802148a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802148c:	687b      	ldr	r3, [r7, #4]
 802148e:	681b      	ldr	r3, [r3, #0]
 8021490:	695a      	ldr	r2, [r3, #20]
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	681b      	ldr	r3, [r3, #0]
 8021496:	f022 0201 	bic.w	r2, r2, #1
 802149a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	2220      	movs	r2, #32
 80214a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80214a4:	bf00      	nop
 80214a6:	370c      	adds	r7, #12
 80214a8:	46bd      	mov	sp, r7
 80214aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ae:	4770      	bx	lr

080214b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80214b0:	b580      	push	{r7, lr}
 80214b2:	b084      	sub	sp, #16
 80214b4:	af00      	add	r7, sp, #0
 80214b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	2200      	movs	r2, #0
 80214c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80214c4:	68fb      	ldr	r3, [r7, #12]
 80214c6:	2200      	movs	r2, #0
 80214c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80214ca:	68f8      	ldr	r0, [r7, #12]
 80214cc:	f7ff ff7e 	bl	80213cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80214d0:	bf00      	nop
 80214d2:	3710      	adds	r7, #16
 80214d4:	46bd      	mov	sp, r7
 80214d6:	bd80      	pop	{r7, pc}

080214d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80214d8:	b480      	push	{r7}
 80214da:	b085      	sub	sp, #20
 80214dc:	af00      	add	r7, sp, #0
 80214de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80214e6:	b2db      	uxtb	r3, r3
 80214e8:	2b21      	cmp	r3, #33	; 0x21
 80214ea:	d144      	bne.n	8021576 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	689b      	ldr	r3, [r3, #8]
 80214f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80214f4:	d11a      	bne.n	802152c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80214f6:	687b      	ldr	r3, [r7, #4]
 80214f8:	6a1b      	ldr	r3, [r3, #32]
 80214fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80214fc:	68fb      	ldr	r3, [r7, #12]
 80214fe:	881b      	ldrh	r3, [r3, #0]
 8021500:	461a      	mov	r2, r3
 8021502:	687b      	ldr	r3, [r7, #4]
 8021504:	681b      	ldr	r3, [r3, #0]
 8021506:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802150a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 802150c:	687b      	ldr	r3, [r7, #4]
 802150e:	691b      	ldr	r3, [r3, #16]
 8021510:	2b00      	cmp	r3, #0
 8021512:	d105      	bne.n	8021520 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	6a1b      	ldr	r3, [r3, #32]
 8021518:	1c9a      	adds	r2, r3, #2
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	621a      	str	r2, [r3, #32]
 802151e:	e00e      	b.n	802153e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8021520:	687b      	ldr	r3, [r7, #4]
 8021522:	6a1b      	ldr	r3, [r3, #32]
 8021524:	1c5a      	adds	r2, r3, #1
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	621a      	str	r2, [r3, #32]
 802152a:	e008      	b.n	802153e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	6a1b      	ldr	r3, [r3, #32]
 8021530:	1c59      	adds	r1, r3, #1
 8021532:	687a      	ldr	r2, [r7, #4]
 8021534:	6211      	str	r1, [r2, #32]
 8021536:	781a      	ldrb	r2, [r3, #0]
 8021538:	687b      	ldr	r3, [r7, #4]
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8021542:	b29b      	uxth	r3, r3
 8021544:	3b01      	subs	r3, #1
 8021546:	b29b      	uxth	r3, r3
 8021548:	687a      	ldr	r2, [r7, #4]
 802154a:	4619      	mov	r1, r3
 802154c:	84d1      	strh	r1, [r2, #38]	; 0x26
 802154e:	2b00      	cmp	r3, #0
 8021550:	d10f      	bne.n	8021572 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8021552:	687b      	ldr	r3, [r7, #4]
 8021554:	681b      	ldr	r3, [r3, #0]
 8021556:	68da      	ldr	r2, [r3, #12]
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	681b      	ldr	r3, [r3, #0]
 802155c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021560:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	68da      	ldr	r2, [r3, #12]
 8021568:	687b      	ldr	r3, [r7, #4]
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021570:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8021572:	2300      	movs	r3, #0
 8021574:	e000      	b.n	8021578 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8021576:	2302      	movs	r3, #2
  }
}
 8021578:	4618      	mov	r0, r3
 802157a:	3714      	adds	r7, #20
 802157c:	46bd      	mov	sp, r7
 802157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021582:	4770      	bx	lr

08021584 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b082      	sub	sp, #8
 8021588:	af00      	add	r7, sp, #0
 802158a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802158c:	687b      	ldr	r3, [r7, #4]
 802158e:	681b      	ldr	r3, [r3, #0]
 8021590:	68da      	ldr	r2, [r3, #12]
 8021592:	687b      	ldr	r3, [r7, #4]
 8021594:	681b      	ldr	r3, [r3, #0]
 8021596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 802159a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	2220      	movs	r2, #32
 80215a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80215a4:	6878      	ldr	r0, [r7, #4]
 80215a6:	f7ff ff07 	bl	80213b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80215aa:	2300      	movs	r3, #0
}
 80215ac:	4618      	mov	r0, r3
 80215ae:	3708      	adds	r7, #8
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}

080215b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b084      	sub	sp, #16
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80215bc:	687b      	ldr	r3, [r7, #4]
 80215be:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80215c2:	b2db      	uxtb	r3, r3
 80215c4:	2b22      	cmp	r3, #34	; 0x22
 80215c6:	d171      	bne.n	80216ac <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	689b      	ldr	r3, [r3, #8]
 80215cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80215d0:	d123      	bne.n	802161a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215d6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	691b      	ldr	r3, [r3, #16]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d10e      	bne.n	80215fe <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	685b      	ldr	r3, [r3, #4]
 80215e6:	b29b      	uxth	r3, r3
 80215e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80215ec:	b29a      	uxth	r2, r3
 80215ee:	68fb      	ldr	r3, [r7, #12]
 80215f0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80215f2:	687b      	ldr	r3, [r7, #4]
 80215f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215f6:	1c9a      	adds	r2, r3, #2
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	629a      	str	r2, [r3, #40]	; 0x28
 80215fc:	e029      	b.n	8021652 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	681b      	ldr	r3, [r3, #0]
 8021602:	685b      	ldr	r3, [r3, #4]
 8021604:	b29b      	uxth	r3, r3
 8021606:	b2db      	uxtb	r3, r3
 8021608:	b29a      	uxth	r2, r3
 802160a:	68fb      	ldr	r3, [r7, #12]
 802160c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 802160e:	687b      	ldr	r3, [r7, #4]
 8021610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021612:	1c5a      	adds	r2, r3, #1
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	629a      	str	r2, [r3, #40]	; 0x28
 8021618:	e01b      	b.n	8021652 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	691b      	ldr	r3, [r3, #16]
 802161e:	2b00      	cmp	r3, #0
 8021620:	d10a      	bne.n	8021638 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8021622:	687b      	ldr	r3, [r7, #4]
 8021624:	681b      	ldr	r3, [r3, #0]
 8021626:	6858      	ldr	r0, [r3, #4]
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802162c:	1c59      	adds	r1, r3, #1
 802162e:	687a      	ldr	r2, [r7, #4]
 8021630:	6291      	str	r1, [r2, #40]	; 0x28
 8021632:	b2c2      	uxtb	r2, r0
 8021634:	701a      	strb	r2, [r3, #0]
 8021636:	e00c      	b.n	8021652 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8021638:	687b      	ldr	r3, [r7, #4]
 802163a:	681b      	ldr	r3, [r3, #0]
 802163c:	685b      	ldr	r3, [r3, #4]
 802163e:	b2da      	uxtb	r2, r3
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021644:	1c58      	adds	r0, r3, #1
 8021646:	6879      	ldr	r1, [r7, #4]
 8021648:	6288      	str	r0, [r1, #40]	; 0x28
 802164a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 802164e:	b2d2      	uxtb	r2, r2
 8021650:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8021652:	687b      	ldr	r3, [r7, #4]
 8021654:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8021656:	b29b      	uxth	r3, r3
 8021658:	3b01      	subs	r3, #1
 802165a:	b29b      	uxth	r3, r3
 802165c:	687a      	ldr	r2, [r7, #4]
 802165e:	4619      	mov	r1, r3
 8021660:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8021662:	2b00      	cmp	r3, #0
 8021664:	d120      	bne.n	80216a8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	681b      	ldr	r3, [r3, #0]
 802166a:	68da      	ldr	r2, [r3, #12]
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	f022 0220 	bic.w	r2, r2, #32
 8021674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	681b      	ldr	r3, [r3, #0]
 802167a:	68da      	ldr	r2, [r3, #12]
 802167c:	687b      	ldr	r3, [r7, #4]
 802167e:	681b      	ldr	r3, [r3, #0]
 8021680:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8021684:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8021686:	687b      	ldr	r3, [r7, #4]
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	695a      	ldr	r2, [r3, #20]
 802168c:	687b      	ldr	r3, [r7, #4]
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	f022 0201 	bic.w	r2, r2, #1
 8021694:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8021696:	687b      	ldr	r3, [r7, #4]
 8021698:	2220      	movs	r2, #32
 802169a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 802169e:	6878      	ldr	r0, [r7, #4]
 80216a0:	f7fb fe7e 	bl	801d3a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80216a4:	2300      	movs	r3, #0
 80216a6:	e002      	b.n	80216ae <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80216a8:	2300      	movs	r3, #0
 80216aa:	e000      	b.n	80216ae <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80216ac:	2302      	movs	r3, #2
  }
}
 80216ae:	4618      	mov	r0, r3
 80216b0:	3710      	adds	r7, #16
 80216b2:	46bd      	mov	sp, r7
 80216b4:	bd80      	pop	{r7, pc}
	...

080216b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80216b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216bc:	b085      	sub	sp, #20
 80216be:	af00      	add	r7, sp, #0
 80216c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	681b      	ldr	r3, [r3, #0]
 80216c6:	691b      	ldr	r3, [r3, #16]
 80216c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	68da      	ldr	r2, [r3, #12]
 80216d0:	687b      	ldr	r3, [r7, #4]
 80216d2:	681b      	ldr	r3, [r3, #0]
 80216d4:	430a      	orrs	r2, r1
 80216d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	689a      	ldr	r2, [r3, #8]
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	691b      	ldr	r3, [r3, #16]
 80216e0:	431a      	orrs	r2, r3
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	695b      	ldr	r3, [r3, #20]
 80216e6:	431a      	orrs	r2, r3
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	69db      	ldr	r3, [r3, #28]
 80216ec:	4313      	orrs	r3, r2
 80216ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	681b      	ldr	r3, [r3, #0]
 80216f4:	68db      	ldr	r3, [r3, #12]
 80216f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80216fa:	f023 030c 	bic.w	r3, r3, #12
 80216fe:	687a      	ldr	r2, [r7, #4]
 8021700:	6812      	ldr	r2, [r2, #0]
 8021702:	68f9      	ldr	r1, [r7, #12]
 8021704:	430b      	orrs	r3, r1
 8021706:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8021708:	687b      	ldr	r3, [r7, #4]
 802170a:	681b      	ldr	r3, [r3, #0]
 802170c:	695b      	ldr	r3, [r3, #20]
 802170e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	699a      	ldr	r2, [r3, #24]
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	681b      	ldr	r3, [r3, #0]
 802171a:	430a      	orrs	r2, r1
 802171c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	69db      	ldr	r3, [r3, #28]
 8021722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8021726:	f040 818b 	bne.w	8021a40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 802172a:	687b      	ldr	r3, [r7, #4]
 802172c:	681b      	ldr	r3, [r3, #0]
 802172e:	4ac1      	ldr	r2, [pc, #772]	; (8021a34 <UART_SetConfig+0x37c>)
 8021730:	4293      	cmp	r3, r2
 8021732:	d005      	beq.n	8021740 <UART_SetConfig+0x88>
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	681b      	ldr	r3, [r3, #0]
 8021738:	4abf      	ldr	r2, [pc, #764]	; (8021a38 <UART_SetConfig+0x380>)
 802173a:	4293      	cmp	r3, r2
 802173c:	f040 80bd 	bne.w	80218ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8021740:	f7fe fb4c 	bl	801fddc <HAL_RCC_GetPCLK2Freq>
 8021744:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8021746:	68bb      	ldr	r3, [r7, #8]
 8021748:	461d      	mov	r5, r3
 802174a:	f04f 0600 	mov.w	r6, #0
 802174e:	46a8      	mov	r8, r5
 8021750:	46b1      	mov	r9, r6
 8021752:	eb18 0308 	adds.w	r3, r8, r8
 8021756:	eb49 0409 	adc.w	r4, r9, r9
 802175a:	4698      	mov	r8, r3
 802175c:	46a1      	mov	r9, r4
 802175e:	eb18 0805 	adds.w	r8, r8, r5
 8021762:	eb49 0906 	adc.w	r9, r9, r6
 8021766:	f04f 0100 	mov.w	r1, #0
 802176a:	f04f 0200 	mov.w	r2, #0
 802176e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021772:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021776:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 802177a:	4688      	mov	r8, r1
 802177c:	4691      	mov	r9, r2
 802177e:	eb18 0005 	adds.w	r0, r8, r5
 8021782:	eb49 0106 	adc.w	r1, r9, r6
 8021786:	687b      	ldr	r3, [r7, #4]
 8021788:	685b      	ldr	r3, [r3, #4]
 802178a:	461d      	mov	r5, r3
 802178c:	f04f 0600 	mov.w	r6, #0
 8021790:	196b      	adds	r3, r5, r5
 8021792:	eb46 0406 	adc.w	r4, r6, r6
 8021796:	461a      	mov	r2, r3
 8021798:	4623      	mov	r3, r4
 802179a:	f7df fa05 	bl	8000ba8 <__aeabi_uldivmod>
 802179e:	4603      	mov	r3, r0
 80217a0:	460c      	mov	r4, r1
 80217a2:	461a      	mov	r2, r3
 80217a4:	4ba5      	ldr	r3, [pc, #660]	; (8021a3c <UART_SetConfig+0x384>)
 80217a6:	fba3 2302 	umull	r2, r3, r3, r2
 80217aa:	095b      	lsrs	r3, r3, #5
 80217ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80217b0:	68bb      	ldr	r3, [r7, #8]
 80217b2:	461d      	mov	r5, r3
 80217b4:	f04f 0600 	mov.w	r6, #0
 80217b8:	46a9      	mov	r9, r5
 80217ba:	46b2      	mov	sl, r6
 80217bc:	eb19 0309 	adds.w	r3, r9, r9
 80217c0:	eb4a 040a 	adc.w	r4, sl, sl
 80217c4:	4699      	mov	r9, r3
 80217c6:	46a2      	mov	sl, r4
 80217c8:	eb19 0905 	adds.w	r9, r9, r5
 80217cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80217d0:	f04f 0100 	mov.w	r1, #0
 80217d4:	f04f 0200 	mov.w	r2, #0
 80217d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80217dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80217e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80217e4:	4689      	mov	r9, r1
 80217e6:	4692      	mov	sl, r2
 80217e8:	eb19 0005 	adds.w	r0, r9, r5
 80217ec:	eb4a 0106 	adc.w	r1, sl, r6
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	685b      	ldr	r3, [r3, #4]
 80217f4:	461d      	mov	r5, r3
 80217f6:	f04f 0600 	mov.w	r6, #0
 80217fa:	196b      	adds	r3, r5, r5
 80217fc:	eb46 0406 	adc.w	r4, r6, r6
 8021800:	461a      	mov	r2, r3
 8021802:	4623      	mov	r3, r4
 8021804:	f7df f9d0 	bl	8000ba8 <__aeabi_uldivmod>
 8021808:	4603      	mov	r3, r0
 802180a:	460c      	mov	r4, r1
 802180c:	461a      	mov	r2, r3
 802180e:	4b8b      	ldr	r3, [pc, #556]	; (8021a3c <UART_SetConfig+0x384>)
 8021810:	fba3 1302 	umull	r1, r3, r3, r2
 8021814:	095b      	lsrs	r3, r3, #5
 8021816:	2164      	movs	r1, #100	; 0x64
 8021818:	fb01 f303 	mul.w	r3, r1, r3
 802181c:	1ad3      	subs	r3, r2, r3
 802181e:	00db      	lsls	r3, r3, #3
 8021820:	3332      	adds	r3, #50	; 0x32
 8021822:	4a86      	ldr	r2, [pc, #536]	; (8021a3c <UART_SetConfig+0x384>)
 8021824:	fba2 2303 	umull	r2, r3, r2, r3
 8021828:	095b      	lsrs	r3, r3, #5
 802182a:	005b      	lsls	r3, r3, #1
 802182c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8021830:	4498      	add	r8, r3
 8021832:	68bb      	ldr	r3, [r7, #8]
 8021834:	461d      	mov	r5, r3
 8021836:	f04f 0600 	mov.w	r6, #0
 802183a:	46a9      	mov	r9, r5
 802183c:	46b2      	mov	sl, r6
 802183e:	eb19 0309 	adds.w	r3, r9, r9
 8021842:	eb4a 040a 	adc.w	r4, sl, sl
 8021846:	4699      	mov	r9, r3
 8021848:	46a2      	mov	sl, r4
 802184a:	eb19 0905 	adds.w	r9, r9, r5
 802184e:	eb4a 0a06 	adc.w	sl, sl, r6
 8021852:	f04f 0100 	mov.w	r1, #0
 8021856:	f04f 0200 	mov.w	r2, #0
 802185a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 802185e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021866:	4689      	mov	r9, r1
 8021868:	4692      	mov	sl, r2
 802186a:	eb19 0005 	adds.w	r0, r9, r5
 802186e:	eb4a 0106 	adc.w	r1, sl, r6
 8021872:	687b      	ldr	r3, [r7, #4]
 8021874:	685b      	ldr	r3, [r3, #4]
 8021876:	461d      	mov	r5, r3
 8021878:	f04f 0600 	mov.w	r6, #0
 802187c:	196b      	adds	r3, r5, r5
 802187e:	eb46 0406 	adc.w	r4, r6, r6
 8021882:	461a      	mov	r2, r3
 8021884:	4623      	mov	r3, r4
 8021886:	f7df f98f 	bl	8000ba8 <__aeabi_uldivmod>
 802188a:	4603      	mov	r3, r0
 802188c:	460c      	mov	r4, r1
 802188e:	461a      	mov	r2, r3
 8021890:	4b6a      	ldr	r3, [pc, #424]	; (8021a3c <UART_SetConfig+0x384>)
 8021892:	fba3 1302 	umull	r1, r3, r3, r2
 8021896:	095b      	lsrs	r3, r3, #5
 8021898:	2164      	movs	r1, #100	; 0x64
 802189a:	fb01 f303 	mul.w	r3, r1, r3
 802189e:	1ad3      	subs	r3, r2, r3
 80218a0:	00db      	lsls	r3, r3, #3
 80218a2:	3332      	adds	r3, #50	; 0x32
 80218a4:	4a65      	ldr	r2, [pc, #404]	; (8021a3c <UART_SetConfig+0x384>)
 80218a6:	fba2 2303 	umull	r2, r3, r2, r3
 80218aa:	095b      	lsrs	r3, r3, #5
 80218ac:	f003 0207 	and.w	r2, r3, #7
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	681b      	ldr	r3, [r3, #0]
 80218b4:	4442      	add	r2, r8
 80218b6:	609a      	str	r2, [r3, #8]
 80218b8:	e26f      	b.n	8021d9a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80218ba:	f7fe fa7b 	bl	801fdb4 <HAL_RCC_GetPCLK1Freq>
 80218be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80218c0:	68bb      	ldr	r3, [r7, #8]
 80218c2:	461d      	mov	r5, r3
 80218c4:	f04f 0600 	mov.w	r6, #0
 80218c8:	46a8      	mov	r8, r5
 80218ca:	46b1      	mov	r9, r6
 80218cc:	eb18 0308 	adds.w	r3, r8, r8
 80218d0:	eb49 0409 	adc.w	r4, r9, r9
 80218d4:	4698      	mov	r8, r3
 80218d6:	46a1      	mov	r9, r4
 80218d8:	eb18 0805 	adds.w	r8, r8, r5
 80218dc:	eb49 0906 	adc.w	r9, r9, r6
 80218e0:	f04f 0100 	mov.w	r1, #0
 80218e4:	f04f 0200 	mov.w	r2, #0
 80218e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80218ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80218f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80218f4:	4688      	mov	r8, r1
 80218f6:	4691      	mov	r9, r2
 80218f8:	eb18 0005 	adds.w	r0, r8, r5
 80218fc:	eb49 0106 	adc.w	r1, r9, r6
 8021900:	687b      	ldr	r3, [r7, #4]
 8021902:	685b      	ldr	r3, [r3, #4]
 8021904:	461d      	mov	r5, r3
 8021906:	f04f 0600 	mov.w	r6, #0
 802190a:	196b      	adds	r3, r5, r5
 802190c:	eb46 0406 	adc.w	r4, r6, r6
 8021910:	461a      	mov	r2, r3
 8021912:	4623      	mov	r3, r4
 8021914:	f7df f948 	bl	8000ba8 <__aeabi_uldivmod>
 8021918:	4603      	mov	r3, r0
 802191a:	460c      	mov	r4, r1
 802191c:	461a      	mov	r2, r3
 802191e:	4b47      	ldr	r3, [pc, #284]	; (8021a3c <UART_SetConfig+0x384>)
 8021920:	fba3 2302 	umull	r2, r3, r3, r2
 8021924:	095b      	lsrs	r3, r3, #5
 8021926:	ea4f 1803 	mov.w	r8, r3, lsl #4
 802192a:	68bb      	ldr	r3, [r7, #8]
 802192c:	461d      	mov	r5, r3
 802192e:	f04f 0600 	mov.w	r6, #0
 8021932:	46a9      	mov	r9, r5
 8021934:	46b2      	mov	sl, r6
 8021936:	eb19 0309 	adds.w	r3, r9, r9
 802193a:	eb4a 040a 	adc.w	r4, sl, sl
 802193e:	4699      	mov	r9, r3
 8021940:	46a2      	mov	sl, r4
 8021942:	eb19 0905 	adds.w	r9, r9, r5
 8021946:	eb4a 0a06 	adc.w	sl, sl, r6
 802194a:	f04f 0100 	mov.w	r1, #0
 802194e:	f04f 0200 	mov.w	r2, #0
 8021952:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021956:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 802195a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 802195e:	4689      	mov	r9, r1
 8021960:	4692      	mov	sl, r2
 8021962:	eb19 0005 	adds.w	r0, r9, r5
 8021966:	eb4a 0106 	adc.w	r1, sl, r6
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	685b      	ldr	r3, [r3, #4]
 802196e:	461d      	mov	r5, r3
 8021970:	f04f 0600 	mov.w	r6, #0
 8021974:	196b      	adds	r3, r5, r5
 8021976:	eb46 0406 	adc.w	r4, r6, r6
 802197a:	461a      	mov	r2, r3
 802197c:	4623      	mov	r3, r4
 802197e:	f7df f913 	bl	8000ba8 <__aeabi_uldivmod>
 8021982:	4603      	mov	r3, r0
 8021984:	460c      	mov	r4, r1
 8021986:	461a      	mov	r2, r3
 8021988:	4b2c      	ldr	r3, [pc, #176]	; (8021a3c <UART_SetConfig+0x384>)
 802198a:	fba3 1302 	umull	r1, r3, r3, r2
 802198e:	095b      	lsrs	r3, r3, #5
 8021990:	2164      	movs	r1, #100	; 0x64
 8021992:	fb01 f303 	mul.w	r3, r1, r3
 8021996:	1ad3      	subs	r3, r2, r3
 8021998:	00db      	lsls	r3, r3, #3
 802199a:	3332      	adds	r3, #50	; 0x32
 802199c:	4a27      	ldr	r2, [pc, #156]	; (8021a3c <UART_SetConfig+0x384>)
 802199e:	fba2 2303 	umull	r2, r3, r2, r3
 80219a2:	095b      	lsrs	r3, r3, #5
 80219a4:	005b      	lsls	r3, r3, #1
 80219a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80219aa:	4498      	add	r8, r3
 80219ac:	68bb      	ldr	r3, [r7, #8]
 80219ae:	461d      	mov	r5, r3
 80219b0:	f04f 0600 	mov.w	r6, #0
 80219b4:	46a9      	mov	r9, r5
 80219b6:	46b2      	mov	sl, r6
 80219b8:	eb19 0309 	adds.w	r3, r9, r9
 80219bc:	eb4a 040a 	adc.w	r4, sl, sl
 80219c0:	4699      	mov	r9, r3
 80219c2:	46a2      	mov	sl, r4
 80219c4:	eb19 0905 	adds.w	r9, r9, r5
 80219c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80219cc:	f04f 0100 	mov.w	r1, #0
 80219d0:	f04f 0200 	mov.w	r2, #0
 80219d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80219d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80219dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80219e0:	4689      	mov	r9, r1
 80219e2:	4692      	mov	sl, r2
 80219e4:	eb19 0005 	adds.w	r0, r9, r5
 80219e8:	eb4a 0106 	adc.w	r1, sl, r6
 80219ec:	687b      	ldr	r3, [r7, #4]
 80219ee:	685b      	ldr	r3, [r3, #4]
 80219f0:	461d      	mov	r5, r3
 80219f2:	f04f 0600 	mov.w	r6, #0
 80219f6:	196b      	adds	r3, r5, r5
 80219f8:	eb46 0406 	adc.w	r4, r6, r6
 80219fc:	461a      	mov	r2, r3
 80219fe:	4623      	mov	r3, r4
 8021a00:	f7df f8d2 	bl	8000ba8 <__aeabi_uldivmod>
 8021a04:	4603      	mov	r3, r0
 8021a06:	460c      	mov	r4, r1
 8021a08:	461a      	mov	r2, r3
 8021a0a:	4b0c      	ldr	r3, [pc, #48]	; (8021a3c <UART_SetConfig+0x384>)
 8021a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8021a10:	095b      	lsrs	r3, r3, #5
 8021a12:	2164      	movs	r1, #100	; 0x64
 8021a14:	fb01 f303 	mul.w	r3, r1, r3
 8021a18:	1ad3      	subs	r3, r2, r3
 8021a1a:	00db      	lsls	r3, r3, #3
 8021a1c:	3332      	adds	r3, #50	; 0x32
 8021a1e:	4a07      	ldr	r2, [pc, #28]	; (8021a3c <UART_SetConfig+0x384>)
 8021a20:	fba2 2303 	umull	r2, r3, r2, r3
 8021a24:	095b      	lsrs	r3, r3, #5
 8021a26:	f003 0207 	and.w	r2, r3, #7
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	681b      	ldr	r3, [r3, #0]
 8021a2e:	4442      	add	r2, r8
 8021a30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8021a32:	e1b2      	b.n	8021d9a <UART_SetConfig+0x6e2>
 8021a34:	40011000 	.word	0x40011000
 8021a38:	40011400 	.word	0x40011400
 8021a3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8021a40:	687b      	ldr	r3, [r7, #4]
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	4ad7      	ldr	r2, [pc, #860]	; (8021da4 <UART_SetConfig+0x6ec>)
 8021a46:	4293      	cmp	r3, r2
 8021a48:	d005      	beq.n	8021a56 <UART_SetConfig+0x39e>
 8021a4a:	687b      	ldr	r3, [r7, #4]
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	4ad6      	ldr	r2, [pc, #856]	; (8021da8 <UART_SetConfig+0x6f0>)
 8021a50:	4293      	cmp	r3, r2
 8021a52:	f040 80d1 	bne.w	8021bf8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8021a56:	f7fe f9c1 	bl	801fddc <HAL_RCC_GetPCLK2Freq>
 8021a5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021a5c:	68bb      	ldr	r3, [r7, #8]
 8021a5e:	469a      	mov	sl, r3
 8021a60:	f04f 0b00 	mov.w	fp, #0
 8021a64:	46d0      	mov	r8, sl
 8021a66:	46d9      	mov	r9, fp
 8021a68:	eb18 0308 	adds.w	r3, r8, r8
 8021a6c:	eb49 0409 	adc.w	r4, r9, r9
 8021a70:	4698      	mov	r8, r3
 8021a72:	46a1      	mov	r9, r4
 8021a74:	eb18 080a 	adds.w	r8, r8, sl
 8021a78:	eb49 090b 	adc.w	r9, r9, fp
 8021a7c:	f04f 0100 	mov.w	r1, #0
 8021a80:	f04f 0200 	mov.w	r2, #0
 8021a84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021a88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021a8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021a90:	4688      	mov	r8, r1
 8021a92:	4691      	mov	r9, r2
 8021a94:	eb1a 0508 	adds.w	r5, sl, r8
 8021a98:	eb4b 0609 	adc.w	r6, fp, r9
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	685b      	ldr	r3, [r3, #4]
 8021aa0:	4619      	mov	r1, r3
 8021aa2:	f04f 0200 	mov.w	r2, #0
 8021aa6:	f04f 0300 	mov.w	r3, #0
 8021aaa:	f04f 0400 	mov.w	r4, #0
 8021aae:	0094      	lsls	r4, r2, #2
 8021ab0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021ab4:	008b      	lsls	r3, r1, #2
 8021ab6:	461a      	mov	r2, r3
 8021ab8:	4623      	mov	r3, r4
 8021aba:	4628      	mov	r0, r5
 8021abc:	4631      	mov	r1, r6
 8021abe:	f7df f873 	bl	8000ba8 <__aeabi_uldivmod>
 8021ac2:	4603      	mov	r3, r0
 8021ac4:	460c      	mov	r4, r1
 8021ac6:	461a      	mov	r2, r3
 8021ac8:	4bb8      	ldr	r3, [pc, #736]	; (8021dac <UART_SetConfig+0x6f4>)
 8021aca:	fba3 2302 	umull	r2, r3, r3, r2
 8021ace:	095b      	lsrs	r3, r3, #5
 8021ad0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021ad4:	68bb      	ldr	r3, [r7, #8]
 8021ad6:	469b      	mov	fp, r3
 8021ad8:	f04f 0c00 	mov.w	ip, #0
 8021adc:	46d9      	mov	r9, fp
 8021ade:	46e2      	mov	sl, ip
 8021ae0:	eb19 0309 	adds.w	r3, r9, r9
 8021ae4:	eb4a 040a 	adc.w	r4, sl, sl
 8021ae8:	4699      	mov	r9, r3
 8021aea:	46a2      	mov	sl, r4
 8021aec:	eb19 090b 	adds.w	r9, r9, fp
 8021af0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021af4:	f04f 0100 	mov.w	r1, #0
 8021af8:	f04f 0200 	mov.w	r2, #0
 8021afc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021b04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021b08:	4689      	mov	r9, r1
 8021b0a:	4692      	mov	sl, r2
 8021b0c:	eb1b 0509 	adds.w	r5, fp, r9
 8021b10:	eb4c 060a 	adc.w	r6, ip, sl
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	685b      	ldr	r3, [r3, #4]
 8021b18:	4619      	mov	r1, r3
 8021b1a:	f04f 0200 	mov.w	r2, #0
 8021b1e:	f04f 0300 	mov.w	r3, #0
 8021b22:	f04f 0400 	mov.w	r4, #0
 8021b26:	0094      	lsls	r4, r2, #2
 8021b28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021b2c:	008b      	lsls	r3, r1, #2
 8021b2e:	461a      	mov	r2, r3
 8021b30:	4623      	mov	r3, r4
 8021b32:	4628      	mov	r0, r5
 8021b34:	4631      	mov	r1, r6
 8021b36:	f7df f837 	bl	8000ba8 <__aeabi_uldivmod>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	460c      	mov	r4, r1
 8021b3e:	461a      	mov	r2, r3
 8021b40:	4b9a      	ldr	r3, [pc, #616]	; (8021dac <UART_SetConfig+0x6f4>)
 8021b42:	fba3 1302 	umull	r1, r3, r3, r2
 8021b46:	095b      	lsrs	r3, r3, #5
 8021b48:	2164      	movs	r1, #100	; 0x64
 8021b4a:	fb01 f303 	mul.w	r3, r1, r3
 8021b4e:	1ad3      	subs	r3, r2, r3
 8021b50:	011b      	lsls	r3, r3, #4
 8021b52:	3332      	adds	r3, #50	; 0x32
 8021b54:	4a95      	ldr	r2, [pc, #596]	; (8021dac <UART_SetConfig+0x6f4>)
 8021b56:	fba2 2303 	umull	r2, r3, r2, r3
 8021b5a:	095b      	lsrs	r3, r3, #5
 8021b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021b60:	4498      	add	r8, r3
 8021b62:	68bb      	ldr	r3, [r7, #8]
 8021b64:	469b      	mov	fp, r3
 8021b66:	f04f 0c00 	mov.w	ip, #0
 8021b6a:	46d9      	mov	r9, fp
 8021b6c:	46e2      	mov	sl, ip
 8021b6e:	eb19 0309 	adds.w	r3, r9, r9
 8021b72:	eb4a 040a 	adc.w	r4, sl, sl
 8021b76:	4699      	mov	r9, r3
 8021b78:	46a2      	mov	sl, r4
 8021b7a:	eb19 090b 	adds.w	r9, r9, fp
 8021b7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021b82:	f04f 0100 	mov.w	r1, #0
 8021b86:	f04f 0200 	mov.w	r2, #0
 8021b8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021b8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021b92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021b96:	4689      	mov	r9, r1
 8021b98:	4692      	mov	sl, r2
 8021b9a:	eb1b 0509 	adds.w	r5, fp, r9
 8021b9e:	eb4c 060a 	adc.w	r6, ip, sl
 8021ba2:	687b      	ldr	r3, [r7, #4]
 8021ba4:	685b      	ldr	r3, [r3, #4]
 8021ba6:	4619      	mov	r1, r3
 8021ba8:	f04f 0200 	mov.w	r2, #0
 8021bac:	f04f 0300 	mov.w	r3, #0
 8021bb0:	f04f 0400 	mov.w	r4, #0
 8021bb4:	0094      	lsls	r4, r2, #2
 8021bb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021bba:	008b      	lsls	r3, r1, #2
 8021bbc:	461a      	mov	r2, r3
 8021bbe:	4623      	mov	r3, r4
 8021bc0:	4628      	mov	r0, r5
 8021bc2:	4631      	mov	r1, r6
 8021bc4:	f7de fff0 	bl	8000ba8 <__aeabi_uldivmod>
 8021bc8:	4603      	mov	r3, r0
 8021bca:	460c      	mov	r4, r1
 8021bcc:	461a      	mov	r2, r3
 8021bce:	4b77      	ldr	r3, [pc, #476]	; (8021dac <UART_SetConfig+0x6f4>)
 8021bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8021bd4:	095b      	lsrs	r3, r3, #5
 8021bd6:	2164      	movs	r1, #100	; 0x64
 8021bd8:	fb01 f303 	mul.w	r3, r1, r3
 8021bdc:	1ad3      	subs	r3, r2, r3
 8021bde:	011b      	lsls	r3, r3, #4
 8021be0:	3332      	adds	r3, #50	; 0x32
 8021be2:	4a72      	ldr	r2, [pc, #456]	; (8021dac <UART_SetConfig+0x6f4>)
 8021be4:	fba2 2303 	umull	r2, r3, r2, r3
 8021be8:	095b      	lsrs	r3, r3, #5
 8021bea:	f003 020f 	and.w	r2, r3, #15
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	4442      	add	r2, r8
 8021bf4:	609a      	str	r2, [r3, #8]
 8021bf6:	e0d0      	b.n	8021d9a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8021bf8:	f7fe f8dc 	bl	801fdb4 <HAL_RCC_GetPCLK1Freq>
 8021bfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8021bfe:	68bb      	ldr	r3, [r7, #8]
 8021c00:	469a      	mov	sl, r3
 8021c02:	f04f 0b00 	mov.w	fp, #0
 8021c06:	46d0      	mov	r8, sl
 8021c08:	46d9      	mov	r9, fp
 8021c0a:	eb18 0308 	adds.w	r3, r8, r8
 8021c0e:	eb49 0409 	adc.w	r4, r9, r9
 8021c12:	4698      	mov	r8, r3
 8021c14:	46a1      	mov	r9, r4
 8021c16:	eb18 080a 	adds.w	r8, r8, sl
 8021c1a:	eb49 090b 	adc.w	r9, r9, fp
 8021c1e:	f04f 0100 	mov.w	r1, #0
 8021c22:	f04f 0200 	mov.w	r2, #0
 8021c26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8021c2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8021c2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8021c32:	4688      	mov	r8, r1
 8021c34:	4691      	mov	r9, r2
 8021c36:	eb1a 0508 	adds.w	r5, sl, r8
 8021c3a:	eb4b 0609 	adc.w	r6, fp, r9
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	685b      	ldr	r3, [r3, #4]
 8021c42:	4619      	mov	r1, r3
 8021c44:	f04f 0200 	mov.w	r2, #0
 8021c48:	f04f 0300 	mov.w	r3, #0
 8021c4c:	f04f 0400 	mov.w	r4, #0
 8021c50:	0094      	lsls	r4, r2, #2
 8021c52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021c56:	008b      	lsls	r3, r1, #2
 8021c58:	461a      	mov	r2, r3
 8021c5a:	4623      	mov	r3, r4
 8021c5c:	4628      	mov	r0, r5
 8021c5e:	4631      	mov	r1, r6
 8021c60:	f7de ffa2 	bl	8000ba8 <__aeabi_uldivmod>
 8021c64:	4603      	mov	r3, r0
 8021c66:	460c      	mov	r4, r1
 8021c68:	461a      	mov	r2, r3
 8021c6a:	4b50      	ldr	r3, [pc, #320]	; (8021dac <UART_SetConfig+0x6f4>)
 8021c6c:	fba3 2302 	umull	r2, r3, r3, r2
 8021c70:	095b      	lsrs	r3, r3, #5
 8021c72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8021c76:	68bb      	ldr	r3, [r7, #8]
 8021c78:	469b      	mov	fp, r3
 8021c7a:	f04f 0c00 	mov.w	ip, #0
 8021c7e:	46d9      	mov	r9, fp
 8021c80:	46e2      	mov	sl, ip
 8021c82:	eb19 0309 	adds.w	r3, r9, r9
 8021c86:	eb4a 040a 	adc.w	r4, sl, sl
 8021c8a:	4699      	mov	r9, r3
 8021c8c:	46a2      	mov	sl, r4
 8021c8e:	eb19 090b 	adds.w	r9, r9, fp
 8021c92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021c96:	f04f 0100 	mov.w	r1, #0
 8021c9a:	f04f 0200 	mov.w	r2, #0
 8021c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021ca2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021caa:	4689      	mov	r9, r1
 8021cac:	4692      	mov	sl, r2
 8021cae:	eb1b 0509 	adds.w	r5, fp, r9
 8021cb2:	eb4c 060a 	adc.w	r6, ip, sl
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	685b      	ldr	r3, [r3, #4]
 8021cba:	4619      	mov	r1, r3
 8021cbc:	f04f 0200 	mov.w	r2, #0
 8021cc0:	f04f 0300 	mov.w	r3, #0
 8021cc4:	f04f 0400 	mov.w	r4, #0
 8021cc8:	0094      	lsls	r4, r2, #2
 8021cca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021cce:	008b      	lsls	r3, r1, #2
 8021cd0:	461a      	mov	r2, r3
 8021cd2:	4623      	mov	r3, r4
 8021cd4:	4628      	mov	r0, r5
 8021cd6:	4631      	mov	r1, r6
 8021cd8:	f7de ff66 	bl	8000ba8 <__aeabi_uldivmod>
 8021cdc:	4603      	mov	r3, r0
 8021cde:	460c      	mov	r4, r1
 8021ce0:	461a      	mov	r2, r3
 8021ce2:	4b32      	ldr	r3, [pc, #200]	; (8021dac <UART_SetConfig+0x6f4>)
 8021ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8021ce8:	095b      	lsrs	r3, r3, #5
 8021cea:	2164      	movs	r1, #100	; 0x64
 8021cec:	fb01 f303 	mul.w	r3, r1, r3
 8021cf0:	1ad3      	subs	r3, r2, r3
 8021cf2:	011b      	lsls	r3, r3, #4
 8021cf4:	3332      	adds	r3, #50	; 0x32
 8021cf6:	4a2d      	ldr	r2, [pc, #180]	; (8021dac <UART_SetConfig+0x6f4>)
 8021cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8021cfc:	095b      	lsrs	r3, r3, #5
 8021cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021d02:	4498      	add	r8, r3
 8021d04:	68bb      	ldr	r3, [r7, #8]
 8021d06:	469b      	mov	fp, r3
 8021d08:	f04f 0c00 	mov.w	ip, #0
 8021d0c:	46d9      	mov	r9, fp
 8021d0e:	46e2      	mov	sl, ip
 8021d10:	eb19 0309 	adds.w	r3, r9, r9
 8021d14:	eb4a 040a 	adc.w	r4, sl, sl
 8021d18:	4699      	mov	r9, r3
 8021d1a:	46a2      	mov	sl, r4
 8021d1c:	eb19 090b 	adds.w	r9, r9, fp
 8021d20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8021d24:	f04f 0100 	mov.w	r1, #0
 8021d28:	f04f 0200 	mov.w	r2, #0
 8021d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8021d30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8021d34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8021d38:	4689      	mov	r9, r1
 8021d3a:	4692      	mov	sl, r2
 8021d3c:	eb1b 0509 	adds.w	r5, fp, r9
 8021d40:	eb4c 060a 	adc.w	r6, ip, sl
 8021d44:	687b      	ldr	r3, [r7, #4]
 8021d46:	685b      	ldr	r3, [r3, #4]
 8021d48:	4619      	mov	r1, r3
 8021d4a:	f04f 0200 	mov.w	r2, #0
 8021d4e:	f04f 0300 	mov.w	r3, #0
 8021d52:	f04f 0400 	mov.w	r4, #0
 8021d56:	0094      	lsls	r4, r2, #2
 8021d58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8021d5c:	008b      	lsls	r3, r1, #2
 8021d5e:	461a      	mov	r2, r3
 8021d60:	4623      	mov	r3, r4
 8021d62:	4628      	mov	r0, r5
 8021d64:	4631      	mov	r1, r6
 8021d66:	f7de ff1f 	bl	8000ba8 <__aeabi_uldivmod>
 8021d6a:	4603      	mov	r3, r0
 8021d6c:	460c      	mov	r4, r1
 8021d6e:	461a      	mov	r2, r3
 8021d70:	4b0e      	ldr	r3, [pc, #56]	; (8021dac <UART_SetConfig+0x6f4>)
 8021d72:	fba3 1302 	umull	r1, r3, r3, r2
 8021d76:	095b      	lsrs	r3, r3, #5
 8021d78:	2164      	movs	r1, #100	; 0x64
 8021d7a:	fb01 f303 	mul.w	r3, r1, r3
 8021d7e:	1ad3      	subs	r3, r2, r3
 8021d80:	011b      	lsls	r3, r3, #4
 8021d82:	3332      	adds	r3, #50	; 0x32
 8021d84:	4a09      	ldr	r2, [pc, #36]	; (8021dac <UART_SetConfig+0x6f4>)
 8021d86:	fba2 2303 	umull	r2, r3, r2, r3
 8021d8a:	095b      	lsrs	r3, r3, #5
 8021d8c:	f003 020f 	and.w	r2, r3, #15
 8021d90:	687b      	ldr	r3, [r7, #4]
 8021d92:	681b      	ldr	r3, [r3, #0]
 8021d94:	4442      	add	r2, r8
 8021d96:	609a      	str	r2, [r3, #8]
}
 8021d98:	e7ff      	b.n	8021d9a <UART_SetConfig+0x6e2>
 8021d9a:	bf00      	nop
 8021d9c:	3714      	adds	r7, #20
 8021d9e:	46bd      	mov	sp, r7
 8021da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021da4:	40011000 	.word	0x40011000
 8021da8:	40011400 	.word	0x40011400
 8021dac:	51eb851f 	.word	0x51eb851f

08021db0 <__errno>:
 8021db0:	4b01      	ldr	r3, [pc, #4]	; (8021db8 <__errno+0x8>)
 8021db2:	6818      	ldr	r0, [r3, #0]
 8021db4:	4770      	bx	lr
 8021db6:	bf00      	nop
 8021db8:	2000000c 	.word	0x2000000c

08021dbc <__libc_init_array>:
 8021dbc:	b570      	push	{r4, r5, r6, lr}
 8021dbe:	4e0d      	ldr	r6, [pc, #52]	; (8021df4 <__libc_init_array+0x38>)
 8021dc0:	4c0d      	ldr	r4, [pc, #52]	; (8021df8 <__libc_init_array+0x3c>)
 8021dc2:	1ba4      	subs	r4, r4, r6
 8021dc4:	10a4      	asrs	r4, r4, #2
 8021dc6:	2500      	movs	r5, #0
 8021dc8:	42a5      	cmp	r5, r4
 8021dca:	d109      	bne.n	8021de0 <__libc_init_array+0x24>
 8021dcc:	4e0b      	ldr	r6, [pc, #44]	; (8021dfc <__libc_init_array+0x40>)
 8021dce:	4c0c      	ldr	r4, [pc, #48]	; (8021e00 <__libc_init_array+0x44>)
 8021dd0:	f001 fce4 	bl	802379c <_init>
 8021dd4:	1ba4      	subs	r4, r4, r6
 8021dd6:	10a4      	asrs	r4, r4, #2
 8021dd8:	2500      	movs	r5, #0
 8021dda:	42a5      	cmp	r5, r4
 8021ddc:	d105      	bne.n	8021dea <__libc_init_array+0x2e>
 8021dde:	bd70      	pop	{r4, r5, r6, pc}
 8021de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021de4:	4798      	blx	r3
 8021de6:	3501      	adds	r5, #1
 8021de8:	e7ee      	b.n	8021dc8 <__libc_init_array+0xc>
 8021dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021dee:	4798      	blx	r3
 8021df0:	3501      	adds	r5, #1
 8021df2:	e7f2      	b.n	8021dda <__libc_init_array+0x1e>
 8021df4:	0802d130 	.word	0x0802d130
 8021df8:	0802d130 	.word	0x0802d130
 8021dfc:	0802d130 	.word	0x0802d130
 8021e00:	0802d134 	.word	0x0802d134

08021e04 <memcpy>:
 8021e04:	b510      	push	{r4, lr}
 8021e06:	1e43      	subs	r3, r0, #1
 8021e08:	440a      	add	r2, r1
 8021e0a:	4291      	cmp	r1, r2
 8021e0c:	d100      	bne.n	8021e10 <memcpy+0xc>
 8021e0e:	bd10      	pop	{r4, pc}
 8021e10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021e14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021e18:	e7f7      	b.n	8021e0a <memcpy+0x6>

08021e1a <memset>:
 8021e1a:	4402      	add	r2, r0
 8021e1c:	4603      	mov	r3, r0
 8021e1e:	4293      	cmp	r3, r2
 8021e20:	d100      	bne.n	8021e24 <memset+0xa>
 8021e22:	4770      	bx	lr
 8021e24:	f803 1b01 	strb.w	r1, [r3], #1
 8021e28:	e7f9      	b.n	8021e1e <memset+0x4>
	...

08021e2c <rand>:
 8021e2c:	b538      	push	{r3, r4, r5, lr}
 8021e2e:	4b13      	ldr	r3, [pc, #76]	; (8021e7c <rand+0x50>)
 8021e30:	681c      	ldr	r4, [r3, #0]
 8021e32:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021e34:	b97b      	cbnz	r3, 8021e56 <rand+0x2a>
 8021e36:	2018      	movs	r0, #24
 8021e38:	f000 f874 	bl	8021f24 <malloc>
 8021e3c:	4a10      	ldr	r2, [pc, #64]	; (8021e80 <rand+0x54>)
 8021e3e:	4b11      	ldr	r3, [pc, #68]	; (8021e84 <rand+0x58>)
 8021e40:	63a0      	str	r0, [r4, #56]	; 0x38
 8021e42:	e9c0 2300 	strd	r2, r3, [r0]
 8021e46:	4b10      	ldr	r3, [pc, #64]	; (8021e88 <rand+0x5c>)
 8021e48:	6083      	str	r3, [r0, #8]
 8021e4a:	230b      	movs	r3, #11
 8021e4c:	8183      	strh	r3, [r0, #12]
 8021e4e:	2201      	movs	r2, #1
 8021e50:	2300      	movs	r3, #0
 8021e52:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021e58:	480c      	ldr	r0, [pc, #48]	; (8021e8c <rand+0x60>)
 8021e5a:	690a      	ldr	r2, [r1, #16]
 8021e5c:	694b      	ldr	r3, [r1, #20]
 8021e5e:	4c0c      	ldr	r4, [pc, #48]	; (8021e90 <rand+0x64>)
 8021e60:	4350      	muls	r0, r2
 8021e62:	fb04 0003 	mla	r0, r4, r3, r0
 8021e66:	fba2 2304 	umull	r2, r3, r2, r4
 8021e6a:	4403      	add	r3, r0
 8021e6c:	1c54      	adds	r4, r2, #1
 8021e6e:	f143 0500 	adc.w	r5, r3, #0
 8021e72:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8021e76:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8021e7a:	bd38      	pop	{r3, r4, r5, pc}
 8021e7c:	2000000c 	.word	0x2000000c
 8021e80:	abcd330e 	.word	0xabcd330e
 8021e84:	e66d1234 	.word	0xe66d1234
 8021e88:	0005deec 	.word	0x0005deec
 8021e8c:	5851f42d 	.word	0x5851f42d
 8021e90:	4c957f2d 	.word	0x4c957f2d

08021e94 <siprintf>:
 8021e94:	b40e      	push	{r1, r2, r3}
 8021e96:	b500      	push	{lr}
 8021e98:	b09c      	sub	sp, #112	; 0x70
 8021e9a:	ab1d      	add	r3, sp, #116	; 0x74
 8021e9c:	9002      	str	r0, [sp, #8]
 8021e9e:	9006      	str	r0, [sp, #24]
 8021ea0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ea4:	4809      	ldr	r0, [pc, #36]	; (8021ecc <siprintf+0x38>)
 8021ea6:	9107      	str	r1, [sp, #28]
 8021ea8:	9104      	str	r1, [sp, #16]
 8021eaa:	4909      	ldr	r1, [pc, #36]	; (8021ed0 <siprintf+0x3c>)
 8021eac:	f853 2b04 	ldr.w	r2, [r3], #4
 8021eb0:	9105      	str	r1, [sp, #20]
 8021eb2:	6800      	ldr	r0, [r0, #0]
 8021eb4:	9301      	str	r3, [sp, #4]
 8021eb6:	a902      	add	r1, sp, #8
 8021eb8:	f000 f93e 	bl	8022138 <_svfiprintf_r>
 8021ebc:	9b02      	ldr	r3, [sp, #8]
 8021ebe:	2200      	movs	r2, #0
 8021ec0:	701a      	strb	r2, [r3, #0]
 8021ec2:	b01c      	add	sp, #112	; 0x70
 8021ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8021ec8:	b003      	add	sp, #12
 8021eca:	4770      	bx	lr
 8021ecc:	2000000c 	.word	0x2000000c
 8021ed0:	ffff0208 	.word	0xffff0208

08021ed4 <strcpy>:
 8021ed4:	4603      	mov	r3, r0
 8021ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021eda:	f803 2b01 	strb.w	r2, [r3], #1
 8021ede:	2a00      	cmp	r2, #0
 8021ee0:	d1f9      	bne.n	8021ed6 <strcpy+0x2>
 8021ee2:	4770      	bx	lr

08021ee4 <_vsiprintf_r>:
 8021ee4:	b500      	push	{lr}
 8021ee6:	b09b      	sub	sp, #108	; 0x6c
 8021ee8:	9100      	str	r1, [sp, #0]
 8021eea:	9104      	str	r1, [sp, #16]
 8021eec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ef0:	9105      	str	r1, [sp, #20]
 8021ef2:	9102      	str	r1, [sp, #8]
 8021ef4:	4905      	ldr	r1, [pc, #20]	; (8021f0c <_vsiprintf_r+0x28>)
 8021ef6:	9103      	str	r1, [sp, #12]
 8021ef8:	4669      	mov	r1, sp
 8021efa:	f000 f91d 	bl	8022138 <_svfiprintf_r>
 8021efe:	9b00      	ldr	r3, [sp, #0]
 8021f00:	2200      	movs	r2, #0
 8021f02:	701a      	strb	r2, [r3, #0]
 8021f04:	b01b      	add	sp, #108	; 0x6c
 8021f06:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f0a:	bf00      	nop
 8021f0c:	ffff0208 	.word	0xffff0208

08021f10 <vsiprintf>:
 8021f10:	4613      	mov	r3, r2
 8021f12:	460a      	mov	r2, r1
 8021f14:	4601      	mov	r1, r0
 8021f16:	4802      	ldr	r0, [pc, #8]	; (8021f20 <vsiprintf+0x10>)
 8021f18:	6800      	ldr	r0, [r0, #0]
 8021f1a:	f7ff bfe3 	b.w	8021ee4 <_vsiprintf_r>
 8021f1e:	bf00      	nop
 8021f20:	2000000c 	.word	0x2000000c

08021f24 <malloc>:
 8021f24:	4b02      	ldr	r3, [pc, #8]	; (8021f30 <malloc+0xc>)
 8021f26:	4601      	mov	r1, r0
 8021f28:	6818      	ldr	r0, [r3, #0]
 8021f2a:	f000 b851 	b.w	8021fd0 <_malloc_r>
 8021f2e:	bf00      	nop
 8021f30:	2000000c 	.word	0x2000000c

08021f34 <_free_r>:
 8021f34:	b538      	push	{r3, r4, r5, lr}
 8021f36:	4605      	mov	r5, r0
 8021f38:	2900      	cmp	r1, #0
 8021f3a:	d045      	beq.n	8021fc8 <_free_r+0x94>
 8021f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021f40:	1f0c      	subs	r4, r1, #4
 8021f42:	2b00      	cmp	r3, #0
 8021f44:	bfb8      	it	lt
 8021f46:	18e4      	addlt	r4, r4, r3
 8021f48:	f000 fb9f 	bl	802268a <__malloc_lock>
 8021f4c:	4a1f      	ldr	r2, [pc, #124]	; (8021fcc <_free_r+0x98>)
 8021f4e:	6813      	ldr	r3, [r2, #0]
 8021f50:	4610      	mov	r0, r2
 8021f52:	b933      	cbnz	r3, 8021f62 <_free_r+0x2e>
 8021f54:	6063      	str	r3, [r4, #4]
 8021f56:	6014      	str	r4, [r2, #0]
 8021f58:	4628      	mov	r0, r5
 8021f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f5e:	f000 bb95 	b.w	802268c <__malloc_unlock>
 8021f62:	42a3      	cmp	r3, r4
 8021f64:	d90c      	bls.n	8021f80 <_free_r+0x4c>
 8021f66:	6821      	ldr	r1, [r4, #0]
 8021f68:	1862      	adds	r2, r4, r1
 8021f6a:	4293      	cmp	r3, r2
 8021f6c:	bf04      	itt	eq
 8021f6e:	681a      	ldreq	r2, [r3, #0]
 8021f70:	685b      	ldreq	r3, [r3, #4]
 8021f72:	6063      	str	r3, [r4, #4]
 8021f74:	bf04      	itt	eq
 8021f76:	1852      	addeq	r2, r2, r1
 8021f78:	6022      	streq	r2, [r4, #0]
 8021f7a:	6004      	str	r4, [r0, #0]
 8021f7c:	e7ec      	b.n	8021f58 <_free_r+0x24>
 8021f7e:	4613      	mov	r3, r2
 8021f80:	685a      	ldr	r2, [r3, #4]
 8021f82:	b10a      	cbz	r2, 8021f88 <_free_r+0x54>
 8021f84:	42a2      	cmp	r2, r4
 8021f86:	d9fa      	bls.n	8021f7e <_free_r+0x4a>
 8021f88:	6819      	ldr	r1, [r3, #0]
 8021f8a:	1858      	adds	r0, r3, r1
 8021f8c:	42a0      	cmp	r0, r4
 8021f8e:	d10b      	bne.n	8021fa8 <_free_r+0x74>
 8021f90:	6820      	ldr	r0, [r4, #0]
 8021f92:	4401      	add	r1, r0
 8021f94:	1858      	adds	r0, r3, r1
 8021f96:	4282      	cmp	r2, r0
 8021f98:	6019      	str	r1, [r3, #0]
 8021f9a:	d1dd      	bne.n	8021f58 <_free_r+0x24>
 8021f9c:	6810      	ldr	r0, [r2, #0]
 8021f9e:	6852      	ldr	r2, [r2, #4]
 8021fa0:	605a      	str	r2, [r3, #4]
 8021fa2:	4401      	add	r1, r0
 8021fa4:	6019      	str	r1, [r3, #0]
 8021fa6:	e7d7      	b.n	8021f58 <_free_r+0x24>
 8021fa8:	d902      	bls.n	8021fb0 <_free_r+0x7c>
 8021faa:	230c      	movs	r3, #12
 8021fac:	602b      	str	r3, [r5, #0]
 8021fae:	e7d3      	b.n	8021f58 <_free_r+0x24>
 8021fb0:	6820      	ldr	r0, [r4, #0]
 8021fb2:	1821      	adds	r1, r4, r0
 8021fb4:	428a      	cmp	r2, r1
 8021fb6:	bf04      	itt	eq
 8021fb8:	6811      	ldreq	r1, [r2, #0]
 8021fba:	6852      	ldreq	r2, [r2, #4]
 8021fbc:	6062      	str	r2, [r4, #4]
 8021fbe:	bf04      	itt	eq
 8021fc0:	1809      	addeq	r1, r1, r0
 8021fc2:	6021      	streq	r1, [r4, #0]
 8021fc4:	605c      	str	r4, [r3, #4]
 8021fc6:	e7c7      	b.n	8021f58 <_free_r+0x24>
 8021fc8:	bd38      	pop	{r3, r4, r5, pc}
 8021fca:	bf00      	nop
 8021fcc:	200000ac 	.word	0x200000ac

08021fd0 <_malloc_r>:
 8021fd0:	b570      	push	{r4, r5, r6, lr}
 8021fd2:	1ccd      	adds	r5, r1, #3
 8021fd4:	f025 0503 	bic.w	r5, r5, #3
 8021fd8:	3508      	adds	r5, #8
 8021fda:	2d0c      	cmp	r5, #12
 8021fdc:	bf38      	it	cc
 8021fde:	250c      	movcc	r5, #12
 8021fe0:	2d00      	cmp	r5, #0
 8021fe2:	4606      	mov	r6, r0
 8021fe4:	db01      	blt.n	8021fea <_malloc_r+0x1a>
 8021fe6:	42a9      	cmp	r1, r5
 8021fe8:	d903      	bls.n	8021ff2 <_malloc_r+0x22>
 8021fea:	230c      	movs	r3, #12
 8021fec:	6033      	str	r3, [r6, #0]
 8021fee:	2000      	movs	r0, #0
 8021ff0:	bd70      	pop	{r4, r5, r6, pc}
 8021ff2:	f000 fb4a 	bl	802268a <__malloc_lock>
 8021ff6:	4a21      	ldr	r2, [pc, #132]	; (802207c <_malloc_r+0xac>)
 8021ff8:	6814      	ldr	r4, [r2, #0]
 8021ffa:	4621      	mov	r1, r4
 8021ffc:	b991      	cbnz	r1, 8022024 <_malloc_r+0x54>
 8021ffe:	4c20      	ldr	r4, [pc, #128]	; (8022080 <_malloc_r+0xb0>)
 8022000:	6823      	ldr	r3, [r4, #0]
 8022002:	b91b      	cbnz	r3, 802200c <_malloc_r+0x3c>
 8022004:	4630      	mov	r0, r6
 8022006:	f000 fb17 	bl	8022638 <_sbrk_r>
 802200a:	6020      	str	r0, [r4, #0]
 802200c:	4629      	mov	r1, r5
 802200e:	4630      	mov	r0, r6
 8022010:	f000 fb12 	bl	8022638 <_sbrk_r>
 8022014:	1c43      	adds	r3, r0, #1
 8022016:	d124      	bne.n	8022062 <_malloc_r+0x92>
 8022018:	230c      	movs	r3, #12
 802201a:	6033      	str	r3, [r6, #0]
 802201c:	4630      	mov	r0, r6
 802201e:	f000 fb35 	bl	802268c <__malloc_unlock>
 8022022:	e7e4      	b.n	8021fee <_malloc_r+0x1e>
 8022024:	680b      	ldr	r3, [r1, #0]
 8022026:	1b5b      	subs	r3, r3, r5
 8022028:	d418      	bmi.n	802205c <_malloc_r+0x8c>
 802202a:	2b0b      	cmp	r3, #11
 802202c:	d90f      	bls.n	802204e <_malloc_r+0x7e>
 802202e:	600b      	str	r3, [r1, #0]
 8022030:	50cd      	str	r5, [r1, r3]
 8022032:	18cc      	adds	r4, r1, r3
 8022034:	4630      	mov	r0, r6
 8022036:	f000 fb29 	bl	802268c <__malloc_unlock>
 802203a:	f104 000b 	add.w	r0, r4, #11
 802203e:	1d23      	adds	r3, r4, #4
 8022040:	f020 0007 	bic.w	r0, r0, #7
 8022044:	1ac3      	subs	r3, r0, r3
 8022046:	d0d3      	beq.n	8021ff0 <_malloc_r+0x20>
 8022048:	425a      	negs	r2, r3
 802204a:	50e2      	str	r2, [r4, r3]
 802204c:	e7d0      	b.n	8021ff0 <_malloc_r+0x20>
 802204e:	428c      	cmp	r4, r1
 8022050:	684b      	ldr	r3, [r1, #4]
 8022052:	bf16      	itet	ne
 8022054:	6063      	strne	r3, [r4, #4]
 8022056:	6013      	streq	r3, [r2, #0]
 8022058:	460c      	movne	r4, r1
 802205a:	e7eb      	b.n	8022034 <_malloc_r+0x64>
 802205c:	460c      	mov	r4, r1
 802205e:	6849      	ldr	r1, [r1, #4]
 8022060:	e7cc      	b.n	8021ffc <_malloc_r+0x2c>
 8022062:	1cc4      	adds	r4, r0, #3
 8022064:	f024 0403 	bic.w	r4, r4, #3
 8022068:	42a0      	cmp	r0, r4
 802206a:	d005      	beq.n	8022078 <_malloc_r+0xa8>
 802206c:	1a21      	subs	r1, r4, r0
 802206e:	4630      	mov	r0, r6
 8022070:	f000 fae2 	bl	8022638 <_sbrk_r>
 8022074:	3001      	adds	r0, #1
 8022076:	d0cf      	beq.n	8022018 <_malloc_r+0x48>
 8022078:	6025      	str	r5, [r4, #0]
 802207a:	e7db      	b.n	8022034 <_malloc_r+0x64>
 802207c:	200000ac 	.word	0x200000ac
 8022080:	200000b0 	.word	0x200000b0

08022084 <__ssputs_r>:
 8022084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022088:	688e      	ldr	r6, [r1, #8]
 802208a:	429e      	cmp	r6, r3
 802208c:	4682      	mov	sl, r0
 802208e:	460c      	mov	r4, r1
 8022090:	4690      	mov	r8, r2
 8022092:	4699      	mov	r9, r3
 8022094:	d837      	bhi.n	8022106 <__ssputs_r+0x82>
 8022096:	898a      	ldrh	r2, [r1, #12]
 8022098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802209c:	d031      	beq.n	8022102 <__ssputs_r+0x7e>
 802209e:	6825      	ldr	r5, [r4, #0]
 80220a0:	6909      	ldr	r1, [r1, #16]
 80220a2:	1a6f      	subs	r7, r5, r1
 80220a4:	6965      	ldr	r5, [r4, #20]
 80220a6:	2302      	movs	r3, #2
 80220a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80220ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80220b0:	f109 0301 	add.w	r3, r9, #1
 80220b4:	443b      	add	r3, r7
 80220b6:	429d      	cmp	r5, r3
 80220b8:	bf38      	it	cc
 80220ba:	461d      	movcc	r5, r3
 80220bc:	0553      	lsls	r3, r2, #21
 80220be:	d530      	bpl.n	8022122 <__ssputs_r+0x9e>
 80220c0:	4629      	mov	r1, r5
 80220c2:	f7ff ff85 	bl	8021fd0 <_malloc_r>
 80220c6:	4606      	mov	r6, r0
 80220c8:	b950      	cbnz	r0, 80220e0 <__ssputs_r+0x5c>
 80220ca:	230c      	movs	r3, #12
 80220cc:	f8ca 3000 	str.w	r3, [sl]
 80220d0:	89a3      	ldrh	r3, [r4, #12]
 80220d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80220d6:	81a3      	strh	r3, [r4, #12]
 80220d8:	f04f 30ff 	mov.w	r0, #4294967295
 80220dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220e0:	463a      	mov	r2, r7
 80220e2:	6921      	ldr	r1, [r4, #16]
 80220e4:	f7ff fe8e 	bl	8021e04 <memcpy>
 80220e8:	89a3      	ldrh	r3, [r4, #12]
 80220ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80220ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80220f2:	81a3      	strh	r3, [r4, #12]
 80220f4:	6126      	str	r6, [r4, #16]
 80220f6:	6165      	str	r5, [r4, #20]
 80220f8:	443e      	add	r6, r7
 80220fa:	1bed      	subs	r5, r5, r7
 80220fc:	6026      	str	r6, [r4, #0]
 80220fe:	60a5      	str	r5, [r4, #8]
 8022100:	464e      	mov	r6, r9
 8022102:	454e      	cmp	r6, r9
 8022104:	d900      	bls.n	8022108 <__ssputs_r+0x84>
 8022106:	464e      	mov	r6, r9
 8022108:	4632      	mov	r2, r6
 802210a:	4641      	mov	r1, r8
 802210c:	6820      	ldr	r0, [r4, #0]
 802210e:	f000 faa3 	bl	8022658 <memmove>
 8022112:	68a3      	ldr	r3, [r4, #8]
 8022114:	1b9b      	subs	r3, r3, r6
 8022116:	60a3      	str	r3, [r4, #8]
 8022118:	6823      	ldr	r3, [r4, #0]
 802211a:	441e      	add	r6, r3
 802211c:	6026      	str	r6, [r4, #0]
 802211e:	2000      	movs	r0, #0
 8022120:	e7dc      	b.n	80220dc <__ssputs_r+0x58>
 8022122:	462a      	mov	r2, r5
 8022124:	f000 fab3 	bl	802268e <_realloc_r>
 8022128:	4606      	mov	r6, r0
 802212a:	2800      	cmp	r0, #0
 802212c:	d1e2      	bne.n	80220f4 <__ssputs_r+0x70>
 802212e:	6921      	ldr	r1, [r4, #16]
 8022130:	4650      	mov	r0, sl
 8022132:	f7ff feff 	bl	8021f34 <_free_r>
 8022136:	e7c8      	b.n	80220ca <__ssputs_r+0x46>

08022138 <_svfiprintf_r>:
 8022138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802213c:	461d      	mov	r5, r3
 802213e:	898b      	ldrh	r3, [r1, #12]
 8022140:	061f      	lsls	r7, r3, #24
 8022142:	b09d      	sub	sp, #116	; 0x74
 8022144:	4680      	mov	r8, r0
 8022146:	460c      	mov	r4, r1
 8022148:	4616      	mov	r6, r2
 802214a:	d50f      	bpl.n	802216c <_svfiprintf_r+0x34>
 802214c:	690b      	ldr	r3, [r1, #16]
 802214e:	b96b      	cbnz	r3, 802216c <_svfiprintf_r+0x34>
 8022150:	2140      	movs	r1, #64	; 0x40
 8022152:	f7ff ff3d 	bl	8021fd0 <_malloc_r>
 8022156:	6020      	str	r0, [r4, #0]
 8022158:	6120      	str	r0, [r4, #16]
 802215a:	b928      	cbnz	r0, 8022168 <_svfiprintf_r+0x30>
 802215c:	230c      	movs	r3, #12
 802215e:	f8c8 3000 	str.w	r3, [r8]
 8022162:	f04f 30ff 	mov.w	r0, #4294967295
 8022166:	e0c8      	b.n	80222fa <_svfiprintf_r+0x1c2>
 8022168:	2340      	movs	r3, #64	; 0x40
 802216a:	6163      	str	r3, [r4, #20]
 802216c:	2300      	movs	r3, #0
 802216e:	9309      	str	r3, [sp, #36]	; 0x24
 8022170:	2320      	movs	r3, #32
 8022172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022176:	2330      	movs	r3, #48	; 0x30
 8022178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802217c:	9503      	str	r5, [sp, #12]
 802217e:	f04f 0b01 	mov.w	fp, #1
 8022182:	4637      	mov	r7, r6
 8022184:	463d      	mov	r5, r7
 8022186:	f815 3b01 	ldrb.w	r3, [r5], #1
 802218a:	b10b      	cbz	r3, 8022190 <_svfiprintf_r+0x58>
 802218c:	2b25      	cmp	r3, #37	; 0x25
 802218e:	d13e      	bne.n	802220e <_svfiprintf_r+0xd6>
 8022190:	ebb7 0a06 	subs.w	sl, r7, r6
 8022194:	d00b      	beq.n	80221ae <_svfiprintf_r+0x76>
 8022196:	4653      	mov	r3, sl
 8022198:	4632      	mov	r2, r6
 802219a:	4621      	mov	r1, r4
 802219c:	4640      	mov	r0, r8
 802219e:	f7ff ff71 	bl	8022084 <__ssputs_r>
 80221a2:	3001      	adds	r0, #1
 80221a4:	f000 80a4 	beq.w	80222f0 <_svfiprintf_r+0x1b8>
 80221a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80221aa:	4453      	add	r3, sl
 80221ac:	9309      	str	r3, [sp, #36]	; 0x24
 80221ae:	783b      	ldrb	r3, [r7, #0]
 80221b0:	2b00      	cmp	r3, #0
 80221b2:	f000 809d 	beq.w	80222f0 <_svfiprintf_r+0x1b8>
 80221b6:	2300      	movs	r3, #0
 80221b8:	f04f 32ff 	mov.w	r2, #4294967295
 80221bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80221c0:	9304      	str	r3, [sp, #16]
 80221c2:	9307      	str	r3, [sp, #28]
 80221c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80221c8:	931a      	str	r3, [sp, #104]	; 0x68
 80221ca:	462f      	mov	r7, r5
 80221cc:	2205      	movs	r2, #5
 80221ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80221d2:	4850      	ldr	r0, [pc, #320]	; (8022314 <_svfiprintf_r+0x1dc>)
 80221d4:	f7de f80c 	bl	80001f0 <memchr>
 80221d8:	9b04      	ldr	r3, [sp, #16]
 80221da:	b9d0      	cbnz	r0, 8022212 <_svfiprintf_r+0xda>
 80221dc:	06d9      	lsls	r1, r3, #27
 80221de:	bf44      	itt	mi
 80221e0:	2220      	movmi	r2, #32
 80221e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80221e6:	071a      	lsls	r2, r3, #28
 80221e8:	bf44      	itt	mi
 80221ea:	222b      	movmi	r2, #43	; 0x2b
 80221ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80221f0:	782a      	ldrb	r2, [r5, #0]
 80221f2:	2a2a      	cmp	r2, #42	; 0x2a
 80221f4:	d015      	beq.n	8022222 <_svfiprintf_r+0xea>
 80221f6:	9a07      	ldr	r2, [sp, #28]
 80221f8:	462f      	mov	r7, r5
 80221fa:	2000      	movs	r0, #0
 80221fc:	250a      	movs	r5, #10
 80221fe:	4639      	mov	r1, r7
 8022200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022204:	3b30      	subs	r3, #48	; 0x30
 8022206:	2b09      	cmp	r3, #9
 8022208:	d94d      	bls.n	80222a6 <_svfiprintf_r+0x16e>
 802220a:	b1b8      	cbz	r0, 802223c <_svfiprintf_r+0x104>
 802220c:	e00f      	b.n	802222e <_svfiprintf_r+0xf6>
 802220e:	462f      	mov	r7, r5
 8022210:	e7b8      	b.n	8022184 <_svfiprintf_r+0x4c>
 8022212:	4a40      	ldr	r2, [pc, #256]	; (8022314 <_svfiprintf_r+0x1dc>)
 8022214:	1a80      	subs	r0, r0, r2
 8022216:	fa0b f000 	lsl.w	r0, fp, r0
 802221a:	4318      	orrs	r0, r3
 802221c:	9004      	str	r0, [sp, #16]
 802221e:	463d      	mov	r5, r7
 8022220:	e7d3      	b.n	80221ca <_svfiprintf_r+0x92>
 8022222:	9a03      	ldr	r2, [sp, #12]
 8022224:	1d11      	adds	r1, r2, #4
 8022226:	6812      	ldr	r2, [r2, #0]
 8022228:	9103      	str	r1, [sp, #12]
 802222a:	2a00      	cmp	r2, #0
 802222c:	db01      	blt.n	8022232 <_svfiprintf_r+0xfa>
 802222e:	9207      	str	r2, [sp, #28]
 8022230:	e004      	b.n	802223c <_svfiprintf_r+0x104>
 8022232:	4252      	negs	r2, r2
 8022234:	f043 0302 	orr.w	r3, r3, #2
 8022238:	9207      	str	r2, [sp, #28]
 802223a:	9304      	str	r3, [sp, #16]
 802223c:	783b      	ldrb	r3, [r7, #0]
 802223e:	2b2e      	cmp	r3, #46	; 0x2e
 8022240:	d10c      	bne.n	802225c <_svfiprintf_r+0x124>
 8022242:	787b      	ldrb	r3, [r7, #1]
 8022244:	2b2a      	cmp	r3, #42	; 0x2a
 8022246:	d133      	bne.n	80222b0 <_svfiprintf_r+0x178>
 8022248:	9b03      	ldr	r3, [sp, #12]
 802224a:	1d1a      	adds	r2, r3, #4
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	9203      	str	r2, [sp, #12]
 8022250:	2b00      	cmp	r3, #0
 8022252:	bfb8      	it	lt
 8022254:	f04f 33ff 	movlt.w	r3, #4294967295
 8022258:	3702      	adds	r7, #2
 802225a:	9305      	str	r3, [sp, #20]
 802225c:	4d2e      	ldr	r5, [pc, #184]	; (8022318 <_svfiprintf_r+0x1e0>)
 802225e:	7839      	ldrb	r1, [r7, #0]
 8022260:	2203      	movs	r2, #3
 8022262:	4628      	mov	r0, r5
 8022264:	f7dd ffc4 	bl	80001f0 <memchr>
 8022268:	b138      	cbz	r0, 802227a <_svfiprintf_r+0x142>
 802226a:	2340      	movs	r3, #64	; 0x40
 802226c:	1b40      	subs	r0, r0, r5
 802226e:	fa03 f000 	lsl.w	r0, r3, r0
 8022272:	9b04      	ldr	r3, [sp, #16]
 8022274:	4303      	orrs	r3, r0
 8022276:	3701      	adds	r7, #1
 8022278:	9304      	str	r3, [sp, #16]
 802227a:	7839      	ldrb	r1, [r7, #0]
 802227c:	4827      	ldr	r0, [pc, #156]	; (802231c <_svfiprintf_r+0x1e4>)
 802227e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022282:	2206      	movs	r2, #6
 8022284:	1c7e      	adds	r6, r7, #1
 8022286:	f7dd ffb3 	bl	80001f0 <memchr>
 802228a:	2800      	cmp	r0, #0
 802228c:	d038      	beq.n	8022300 <_svfiprintf_r+0x1c8>
 802228e:	4b24      	ldr	r3, [pc, #144]	; (8022320 <_svfiprintf_r+0x1e8>)
 8022290:	bb13      	cbnz	r3, 80222d8 <_svfiprintf_r+0x1a0>
 8022292:	9b03      	ldr	r3, [sp, #12]
 8022294:	3307      	adds	r3, #7
 8022296:	f023 0307 	bic.w	r3, r3, #7
 802229a:	3308      	adds	r3, #8
 802229c:	9303      	str	r3, [sp, #12]
 802229e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222a0:	444b      	add	r3, r9
 80222a2:	9309      	str	r3, [sp, #36]	; 0x24
 80222a4:	e76d      	b.n	8022182 <_svfiprintf_r+0x4a>
 80222a6:	fb05 3202 	mla	r2, r5, r2, r3
 80222aa:	2001      	movs	r0, #1
 80222ac:	460f      	mov	r7, r1
 80222ae:	e7a6      	b.n	80221fe <_svfiprintf_r+0xc6>
 80222b0:	2300      	movs	r3, #0
 80222b2:	3701      	adds	r7, #1
 80222b4:	9305      	str	r3, [sp, #20]
 80222b6:	4619      	mov	r1, r3
 80222b8:	250a      	movs	r5, #10
 80222ba:	4638      	mov	r0, r7
 80222bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80222c0:	3a30      	subs	r2, #48	; 0x30
 80222c2:	2a09      	cmp	r2, #9
 80222c4:	d903      	bls.n	80222ce <_svfiprintf_r+0x196>
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d0c8      	beq.n	802225c <_svfiprintf_r+0x124>
 80222ca:	9105      	str	r1, [sp, #20]
 80222cc:	e7c6      	b.n	802225c <_svfiprintf_r+0x124>
 80222ce:	fb05 2101 	mla	r1, r5, r1, r2
 80222d2:	2301      	movs	r3, #1
 80222d4:	4607      	mov	r7, r0
 80222d6:	e7f0      	b.n	80222ba <_svfiprintf_r+0x182>
 80222d8:	ab03      	add	r3, sp, #12
 80222da:	9300      	str	r3, [sp, #0]
 80222dc:	4622      	mov	r2, r4
 80222de:	4b11      	ldr	r3, [pc, #68]	; (8022324 <_svfiprintf_r+0x1ec>)
 80222e0:	a904      	add	r1, sp, #16
 80222e2:	4640      	mov	r0, r8
 80222e4:	f3af 8000 	nop.w
 80222e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80222ec:	4681      	mov	r9, r0
 80222ee:	d1d6      	bne.n	802229e <_svfiprintf_r+0x166>
 80222f0:	89a3      	ldrh	r3, [r4, #12]
 80222f2:	065b      	lsls	r3, r3, #25
 80222f4:	f53f af35 	bmi.w	8022162 <_svfiprintf_r+0x2a>
 80222f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222fa:	b01d      	add	sp, #116	; 0x74
 80222fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022300:	ab03      	add	r3, sp, #12
 8022302:	9300      	str	r3, [sp, #0]
 8022304:	4622      	mov	r2, r4
 8022306:	4b07      	ldr	r3, [pc, #28]	; (8022324 <_svfiprintf_r+0x1ec>)
 8022308:	a904      	add	r1, sp, #16
 802230a:	4640      	mov	r0, r8
 802230c:	f000 f882 	bl	8022414 <_printf_i>
 8022310:	e7ea      	b.n	80222e8 <_svfiprintf_r+0x1b0>
 8022312:	bf00      	nop
 8022314:	0802d0ac 	.word	0x0802d0ac
 8022318:	0802d0b2 	.word	0x0802d0b2
 802231c:	0802d0b6 	.word	0x0802d0b6
 8022320:	00000000 	.word	0x00000000
 8022324:	08022085 	.word	0x08022085

08022328 <_printf_common>:
 8022328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802232c:	4691      	mov	r9, r2
 802232e:	461f      	mov	r7, r3
 8022330:	688a      	ldr	r2, [r1, #8]
 8022332:	690b      	ldr	r3, [r1, #16]
 8022334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022338:	4293      	cmp	r3, r2
 802233a:	bfb8      	it	lt
 802233c:	4613      	movlt	r3, r2
 802233e:	f8c9 3000 	str.w	r3, [r9]
 8022342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022346:	4606      	mov	r6, r0
 8022348:	460c      	mov	r4, r1
 802234a:	b112      	cbz	r2, 8022352 <_printf_common+0x2a>
 802234c:	3301      	adds	r3, #1
 802234e:	f8c9 3000 	str.w	r3, [r9]
 8022352:	6823      	ldr	r3, [r4, #0]
 8022354:	0699      	lsls	r1, r3, #26
 8022356:	bf42      	ittt	mi
 8022358:	f8d9 3000 	ldrmi.w	r3, [r9]
 802235c:	3302      	addmi	r3, #2
 802235e:	f8c9 3000 	strmi.w	r3, [r9]
 8022362:	6825      	ldr	r5, [r4, #0]
 8022364:	f015 0506 	ands.w	r5, r5, #6
 8022368:	d107      	bne.n	802237a <_printf_common+0x52>
 802236a:	f104 0a19 	add.w	sl, r4, #25
 802236e:	68e3      	ldr	r3, [r4, #12]
 8022370:	f8d9 2000 	ldr.w	r2, [r9]
 8022374:	1a9b      	subs	r3, r3, r2
 8022376:	42ab      	cmp	r3, r5
 8022378:	dc28      	bgt.n	80223cc <_printf_common+0xa4>
 802237a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802237e:	6822      	ldr	r2, [r4, #0]
 8022380:	3300      	adds	r3, #0
 8022382:	bf18      	it	ne
 8022384:	2301      	movne	r3, #1
 8022386:	0692      	lsls	r2, r2, #26
 8022388:	d42d      	bmi.n	80223e6 <_printf_common+0xbe>
 802238a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802238e:	4639      	mov	r1, r7
 8022390:	4630      	mov	r0, r6
 8022392:	47c0      	blx	r8
 8022394:	3001      	adds	r0, #1
 8022396:	d020      	beq.n	80223da <_printf_common+0xb2>
 8022398:	6823      	ldr	r3, [r4, #0]
 802239a:	68e5      	ldr	r5, [r4, #12]
 802239c:	f8d9 2000 	ldr.w	r2, [r9]
 80223a0:	f003 0306 	and.w	r3, r3, #6
 80223a4:	2b04      	cmp	r3, #4
 80223a6:	bf08      	it	eq
 80223a8:	1aad      	subeq	r5, r5, r2
 80223aa:	68a3      	ldr	r3, [r4, #8]
 80223ac:	6922      	ldr	r2, [r4, #16]
 80223ae:	bf0c      	ite	eq
 80223b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80223b4:	2500      	movne	r5, #0
 80223b6:	4293      	cmp	r3, r2
 80223b8:	bfc4      	itt	gt
 80223ba:	1a9b      	subgt	r3, r3, r2
 80223bc:	18ed      	addgt	r5, r5, r3
 80223be:	f04f 0900 	mov.w	r9, #0
 80223c2:	341a      	adds	r4, #26
 80223c4:	454d      	cmp	r5, r9
 80223c6:	d11a      	bne.n	80223fe <_printf_common+0xd6>
 80223c8:	2000      	movs	r0, #0
 80223ca:	e008      	b.n	80223de <_printf_common+0xb6>
 80223cc:	2301      	movs	r3, #1
 80223ce:	4652      	mov	r2, sl
 80223d0:	4639      	mov	r1, r7
 80223d2:	4630      	mov	r0, r6
 80223d4:	47c0      	blx	r8
 80223d6:	3001      	adds	r0, #1
 80223d8:	d103      	bne.n	80223e2 <_printf_common+0xba>
 80223da:	f04f 30ff 	mov.w	r0, #4294967295
 80223de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80223e2:	3501      	adds	r5, #1
 80223e4:	e7c3      	b.n	802236e <_printf_common+0x46>
 80223e6:	18e1      	adds	r1, r4, r3
 80223e8:	1c5a      	adds	r2, r3, #1
 80223ea:	2030      	movs	r0, #48	; 0x30
 80223ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80223f0:	4422      	add	r2, r4
 80223f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80223f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80223fa:	3302      	adds	r3, #2
 80223fc:	e7c5      	b.n	802238a <_printf_common+0x62>
 80223fe:	2301      	movs	r3, #1
 8022400:	4622      	mov	r2, r4
 8022402:	4639      	mov	r1, r7
 8022404:	4630      	mov	r0, r6
 8022406:	47c0      	blx	r8
 8022408:	3001      	adds	r0, #1
 802240a:	d0e6      	beq.n	80223da <_printf_common+0xb2>
 802240c:	f109 0901 	add.w	r9, r9, #1
 8022410:	e7d8      	b.n	80223c4 <_printf_common+0x9c>
	...

08022414 <_printf_i>:
 8022414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022418:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 802241c:	460c      	mov	r4, r1
 802241e:	7e09      	ldrb	r1, [r1, #24]
 8022420:	b085      	sub	sp, #20
 8022422:	296e      	cmp	r1, #110	; 0x6e
 8022424:	4617      	mov	r7, r2
 8022426:	4606      	mov	r6, r0
 8022428:	4698      	mov	r8, r3
 802242a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802242c:	f000 80b3 	beq.w	8022596 <_printf_i+0x182>
 8022430:	d822      	bhi.n	8022478 <_printf_i+0x64>
 8022432:	2963      	cmp	r1, #99	; 0x63
 8022434:	d036      	beq.n	80224a4 <_printf_i+0x90>
 8022436:	d80a      	bhi.n	802244e <_printf_i+0x3a>
 8022438:	2900      	cmp	r1, #0
 802243a:	f000 80b9 	beq.w	80225b0 <_printf_i+0x19c>
 802243e:	2958      	cmp	r1, #88	; 0x58
 8022440:	f000 8083 	beq.w	802254a <_printf_i+0x136>
 8022444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022448:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 802244c:	e032      	b.n	80224b4 <_printf_i+0xa0>
 802244e:	2964      	cmp	r1, #100	; 0x64
 8022450:	d001      	beq.n	8022456 <_printf_i+0x42>
 8022452:	2969      	cmp	r1, #105	; 0x69
 8022454:	d1f6      	bne.n	8022444 <_printf_i+0x30>
 8022456:	6820      	ldr	r0, [r4, #0]
 8022458:	6813      	ldr	r3, [r2, #0]
 802245a:	0605      	lsls	r5, r0, #24
 802245c:	f103 0104 	add.w	r1, r3, #4
 8022460:	d52a      	bpl.n	80224b8 <_printf_i+0xa4>
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	6011      	str	r1, [r2, #0]
 8022466:	2b00      	cmp	r3, #0
 8022468:	da03      	bge.n	8022472 <_printf_i+0x5e>
 802246a:	222d      	movs	r2, #45	; 0x2d
 802246c:	425b      	negs	r3, r3
 802246e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022472:	486f      	ldr	r0, [pc, #444]	; (8022630 <_printf_i+0x21c>)
 8022474:	220a      	movs	r2, #10
 8022476:	e039      	b.n	80224ec <_printf_i+0xd8>
 8022478:	2973      	cmp	r1, #115	; 0x73
 802247a:	f000 809d 	beq.w	80225b8 <_printf_i+0x1a4>
 802247e:	d808      	bhi.n	8022492 <_printf_i+0x7e>
 8022480:	296f      	cmp	r1, #111	; 0x6f
 8022482:	d020      	beq.n	80224c6 <_printf_i+0xb2>
 8022484:	2970      	cmp	r1, #112	; 0x70
 8022486:	d1dd      	bne.n	8022444 <_printf_i+0x30>
 8022488:	6823      	ldr	r3, [r4, #0]
 802248a:	f043 0320 	orr.w	r3, r3, #32
 802248e:	6023      	str	r3, [r4, #0]
 8022490:	e003      	b.n	802249a <_printf_i+0x86>
 8022492:	2975      	cmp	r1, #117	; 0x75
 8022494:	d017      	beq.n	80224c6 <_printf_i+0xb2>
 8022496:	2978      	cmp	r1, #120	; 0x78
 8022498:	d1d4      	bne.n	8022444 <_printf_i+0x30>
 802249a:	2378      	movs	r3, #120	; 0x78
 802249c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80224a0:	4864      	ldr	r0, [pc, #400]	; (8022634 <_printf_i+0x220>)
 80224a2:	e055      	b.n	8022550 <_printf_i+0x13c>
 80224a4:	6813      	ldr	r3, [r2, #0]
 80224a6:	1d19      	adds	r1, r3, #4
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	6011      	str	r1, [r2, #0]
 80224ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80224b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80224b4:	2301      	movs	r3, #1
 80224b6:	e08c      	b.n	80225d2 <_printf_i+0x1be>
 80224b8:	681b      	ldr	r3, [r3, #0]
 80224ba:	6011      	str	r1, [r2, #0]
 80224bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80224c0:	bf18      	it	ne
 80224c2:	b21b      	sxthne	r3, r3
 80224c4:	e7cf      	b.n	8022466 <_printf_i+0x52>
 80224c6:	6813      	ldr	r3, [r2, #0]
 80224c8:	6825      	ldr	r5, [r4, #0]
 80224ca:	1d18      	adds	r0, r3, #4
 80224cc:	6010      	str	r0, [r2, #0]
 80224ce:	0628      	lsls	r0, r5, #24
 80224d0:	d501      	bpl.n	80224d6 <_printf_i+0xc2>
 80224d2:	681b      	ldr	r3, [r3, #0]
 80224d4:	e002      	b.n	80224dc <_printf_i+0xc8>
 80224d6:	0668      	lsls	r0, r5, #25
 80224d8:	d5fb      	bpl.n	80224d2 <_printf_i+0xbe>
 80224da:	881b      	ldrh	r3, [r3, #0]
 80224dc:	4854      	ldr	r0, [pc, #336]	; (8022630 <_printf_i+0x21c>)
 80224de:	296f      	cmp	r1, #111	; 0x6f
 80224e0:	bf14      	ite	ne
 80224e2:	220a      	movne	r2, #10
 80224e4:	2208      	moveq	r2, #8
 80224e6:	2100      	movs	r1, #0
 80224e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80224ec:	6865      	ldr	r5, [r4, #4]
 80224ee:	60a5      	str	r5, [r4, #8]
 80224f0:	2d00      	cmp	r5, #0
 80224f2:	f2c0 8095 	blt.w	8022620 <_printf_i+0x20c>
 80224f6:	6821      	ldr	r1, [r4, #0]
 80224f8:	f021 0104 	bic.w	r1, r1, #4
 80224fc:	6021      	str	r1, [r4, #0]
 80224fe:	2b00      	cmp	r3, #0
 8022500:	d13d      	bne.n	802257e <_printf_i+0x16a>
 8022502:	2d00      	cmp	r5, #0
 8022504:	f040 808e 	bne.w	8022624 <_printf_i+0x210>
 8022508:	4665      	mov	r5, ip
 802250a:	2a08      	cmp	r2, #8
 802250c:	d10b      	bne.n	8022526 <_printf_i+0x112>
 802250e:	6823      	ldr	r3, [r4, #0]
 8022510:	07db      	lsls	r3, r3, #31
 8022512:	d508      	bpl.n	8022526 <_printf_i+0x112>
 8022514:	6923      	ldr	r3, [r4, #16]
 8022516:	6862      	ldr	r2, [r4, #4]
 8022518:	429a      	cmp	r2, r3
 802251a:	bfde      	ittt	le
 802251c:	2330      	movle	r3, #48	; 0x30
 802251e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022526:	ebac 0305 	sub.w	r3, ip, r5
 802252a:	6123      	str	r3, [r4, #16]
 802252c:	f8cd 8000 	str.w	r8, [sp]
 8022530:	463b      	mov	r3, r7
 8022532:	aa03      	add	r2, sp, #12
 8022534:	4621      	mov	r1, r4
 8022536:	4630      	mov	r0, r6
 8022538:	f7ff fef6 	bl	8022328 <_printf_common>
 802253c:	3001      	adds	r0, #1
 802253e:	d14d      	bne.n	80225dc <_printf_i+0x1c8>
 8022540:	f04f 30ff 	mov.w	r0, #4294967295
 8022544:	b005      	add	sp, #20
 8022546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802254a:	4839      	ldr	r0, [pc, #228]	; (8022630 <_printf_i+0x21c>)
 802254c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022550:	6813      	ldr	r3, [r2, #0]
 8022552:	6821      	ldr	r1, [r4, #0]
 8022554:	1d1d      	adds	r5, r3, #4
 8022556:	681b      	ldr	r3, [r3, #0]
 8022558:	6015      	str	r5, [r2, #0]
 802255a:	060a      	lsls	r2, r1, #24
 802255c:	d50b      	bpl.n	8022576 <_printf_i+0x162>
 802255e:	07ca      	lsls	r2, r1, #31
 8022560:	bf44      	itt	mi
 8022562:	f041 0120 	orrmi.w	r1, r1, #32
 8022566:	6021      	strmi	r1, [r4, #0]
 8022568:	b91b      	cbnz	r3, 8022572 <_printf_i+0x15e>
 802256a:	6822      	ldr	r2, [r4, #0]
 802256c:	f022 0220 	bic.w	r2, r2, #32
 8022570:	6022      	str	r2, [r4, #0]
 8022572:	2210      	movs	r2, #16
 8022574:	e7b7      	b.n	80224e6 <_printf_i+0xd2>
 8022576:	064d      	lsls	r5, r1, #25
 8022578:	bf48      	it	mi
 802257a:	b29b      	uxthmi	r3, r3
 802257c:	e7ef      	b.n	802255e <_printf_i+0x14a>
 802257e:	4665      	mov	r5, ip
 8022580:	fbb3 f1f2 	udiv	r1, r3, r2
 8022584:	fb02 3311 	mls	r3, r2, r1, r3
 8022588:	5cc3      	ldrb	r3, [r0, r3]
 802258a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802258e:	460b      	mov	r3, r1
 8022590:	2900      	cmp	r1, #0
 8022592:	d1f5      	bne.n	8022580 <_printf_i+0x16c>
 8022594:	e7b9      	b.n	802250a <_printf_i+0xf6>
 8022596:	6813      	ldr	r3, [r2, #0]
 8022598:	6825      	ldr	r5, [r4, #0]
 802259a:	6961      	ldr	r1, [r4, #20]
 802259c:	1d18      	adds	r0, r3, #4
 802259e:	6010      	str	r0, [r2, #0]
 80225a0:	0628      	lsls	r0, r5, #24
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	d501      	bpl.n	80225aa <_printf_i+0x196>
 80225a6:	6019      	str	r1, [r3, #0]
 80225a8:	e002      	b.n	80225b0 <_printf_i+0x19c>
 80225aa:	066a      	lsls	r2, r5, #25
 80225ac:	d5fb      	bpl.n	80225a6 <_printf_i+0x192>
 80225ae:	8019      	strh	r1, [r3, #0]
 80225b0:	2300      	movs	r3, #0
 80225b2:	6123      	str	r3, [r4, #16]
 80225b4:	4665      	mov	r5, ip
 80225b6:	e7b9      	b.n	802252c <_printf_i+0x118>
 80225b8:	6813      	ldr	r3, [r2, #0]
 80225ba:	1d19      	adds	r1, r3, #4
 80225bc:	6011      	str	r1, [r2, #0]
 80225be:	681d      	ldr	r5, [r3, #0]
 80225c0:	6862      	ldr	r2, [r4, #4]
 80225c2:	2100      	movs	r1, #0
 80225c4:	4628      	mov	r0, r5
 80225c6:	f7dd fe13 	bl	80001f0 <memchr>
 80225ca:	b108      	cbz	r0, 80225d0 <_printf_i+0x1bc>
 80225cc:	1b40      	subs	r0, r0, r5
 80225ce:	6060      	str	r0, [r4, #4]
 80225d0:	6863      	ldr	r3, [r4, #4]
 80225d2:	6123      	str	r3, [r4, #16]
 80225d4:	2300      	movs	r3, #0
 80225d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80225da:	e7a7      	b.n	802252c <_printf_i+0x118>
 80225dc:	6923      	ldr	r3, [r4, #16]
 80225de:	462a      	mov	r2, r5
 80225e0:	4639      	mov	r1, r7
 80225e2:	4630      	mov	r0, r6
 80225e4:	47c0      	blx	r8
 80225e6:	3001      	adds	r0, #1
 80225e8:	d0aa      	beq.n	8022540 <_printf_i+0x12c>
 80225ea:	6823      	ldr	r3, [r4, #0]
 80225ec:	079b      	lsls	r3, r3, #30
 80225ee:	d413      	bmi.n	8022618 <_printf_i+0x204>
 80225f0:	68e0      	ldr	r0, [r4, #12]
 80225f2:	9b03      	ldr	r3, [sp, #12]
 80225f4:	4298      	cmp	r0, r3
 80225f6:	bfb8      	it	lt
 80225f8:	4618      	movlt	r0, r3
 80225fa:	e7a3      	b.n	8022544 <_printf_i+0x130>
 80225fc:	2301      	movs	r3, #1
 80225fe:	464a      	mov	r2, r9
 8022600:	4639      	mov	r1, r7
 8022602:	4630      	mov	r0, r6
 8022604:	47c0      	blx	r8
 8022606:	3001      	adds	r0, #1
 8022608:	d09a      	beq.n	8022540 <_printf_i+0x12c>
 802260a:	3501      	adds	r5, #1
 802260c:	68e3      	ldr	r3, [r4, #12]
 802260e:	9a03      	ldr	r2, [sp, #12]
 8022610:	1a9b      	subs	r3, r3, r2
 8022612:	42ab      	cmp	r3, r5
 8022614:	dcf2      	bgt.n	80225fc <_printf_i+0x1e8>
 8022616:	e7eb      	b.n	80225f0 <_printf_i+0x1dc>
 8022618:	2500      	movs	r5, #0
 802261a:	f104 0919 	add.w	r9, r4, #25
 802261e:	e7f5      	b.n	802260c <_printf_i+0x1f8>
 8022620:	2b00      	cmp	r3, #0
 8022622:	d1ac      	bne.n	802257e <_printf_i+0x16a>
 8022624:	7803      	ldrb	r3, [r0, #0]
 8022626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802262a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802262e:	e76c      	b.n	802250a <_printf_i+0xf6>
 8022630:	0802d0bd 	.word	0x0802d0bd
 8022634:	0802d0ce 	.word	0x0802d0ce

08022638 <_sbrk_r>:
 8022638:	b538      	push	{r3, r4, r5, lr}
 802263a:	4c06      	ldr	r4, [pc, #24]	; (8022654 <_sbrk_r+0x1c>)
 802263c:	2300      	movs	r3, #0
 802263e:	4605      	mov	r5, r0
 8022640:	4608      	mov	r0, r1
 8022642:	6023      	str	r3, [r4, #0]
 8022644:	f7fa ffaa 	bl	801d59c <_sbrk>
 8022648:	1c43      	adds	r3, r0, #1
 802264a:	d102      	bne.n	8022652 <_sbrk_r+0x1a>
 802264c:	6823      	ldr	r3, [r4, #0]
 802264e:	b103      	cbz	r3, 8022652 <_sbrk_r+0x1a>
 8022650:	602b      	str	r3, [r5, #0]
 8022652:	bd38      	pop	{r3, r4, r5, pc}
 8022654:	2000555c 	.word	0x2000555c

08022658 <memmove>:
 8022658:	4288      	cmp	r0, r1
 802265a:	b510      	push	{r4, lr}
 802265c:	eb01 0302 	add.w	r3, r1, r2
 8022660:	d807      	bhi.n	8022672 <memmove+0x1a>
 8022662:	1e42      	subs	r2, r0, #1
 8022664:	4299      	cmp	r1, r3
 8022666:	d00a      	beq.n	802267e <memmove+0x26>
 8022668:	f811 4b01 	ldrb.w	r4, [r1], #1
 802266c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022670:	e7f8      	b.n	8022664 <memmove+0xc>
 8022672:	4283      	cmp	r3, r0
 8022674:	d9f5      	bls.n	8022662 <memmove+0xa>
 8022676:	1881      	adds	r1, r0, r2
 8022678:	1ad2      	subs	r2, r2, r3
 802267a:	42d3      	cmn	r3, r2
 802267c:	d100      	bne.n	8022680 <memmove+0x28>
 802267e:	bd10      	pop	{r4, pc}
 8022680:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022684:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022688:	e7f7      	b.n	802267a <memmove+0x22>

0802268a <__malloc_lock>:
 802268a:	4770      	bx	lr

0802268c <__malloc_unlock>:
 802268c:	4770      	bx	lr

0802268e <_realloc_r>:
 802268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022690:	4607      	mov	r7, r0
 8022692:	4614      	mov	r4, r2
 8022694:	460e      	mov	r6, r1
 8022696:	b921      	cbnz	r1, 80226a2 <_realloc_r+0x14>
 8022698:	4611      	mov	r1, r2
 802269a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802269e:	f7ff bc97 	b.w	8021fd0 <_malloc_r>
 80226a2:	b922      	cbnz	r2, 80226ae <_realloc_r+0x20>
 80226a4:	f7ff fc46 	bl	8021f34 <_free_r>
 80226a8:	4625      	mov	r5, r4
 80226aa:	4628      	mov	r0, r5
 80226ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226ae:	f000 f814 	bl	80226da <_malloc_usable_size_r>
 80226b2:	42a0      	cmp	r0, r4
 80226b4:	d20f      	bcs.n	80226d6 <_realloc_r+0x48>
 80226b6:	4621      	mov	r1, r4
 80226b8:	4638      	mov	r0, r7
 80226ba:	f7ff fc89 	bl	8021fd0 <_malloc_r>
 80226be:	4605      	mov	r5, r0
 80226c0:	2800      	cmp	r0, #0
 80226c2:	d0f2      	beq.n	80226aa <_realloc_r+0x1c>
 80226c4:	4631      	mov	r1, r6
 80226c6:	4622      	mov	r2, r4
 80226c8:	f7ff fb9c 	bl	8021e04 <memcpy>
 80226cc:	4631      	mov	r1, r6
 80226ce:	4638      	mov	r0, r7
 80226d0:	f7ff fc30 	bl	8021f34 <_free_r>
 80226d4:	e7e9      	b.n	80226aa <_realloc_r+0x1c>
 80226d6:	4635      	mov	r5, r6
 80226d8:	e7e7      	b.n	80226aa <_realloc_r+0x1c>

080226da <_malloc_usable_size_r>:
 80226da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80226de:	1f18      	subs	r0, r3, #4
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	bfbc      	itt	lt
 80226e4:	580b      	ldrlt	r3, [r1, r0]
 80226e6:	18c0      	addlt	r0, r0, r3
 80226e8:	4770      	bx	lr
	...

080226ec <pow>:
 80226ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226f0:	ed2d 8b04 	vpush	{d8-d9}
 80226f4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80229c8 <pow+0x2dc>
 80226f8:	b08d      	sub	sp, #52	; 0x34
 80226fa:	ec57 6b10 	vmov	r6, r7, d0
 80226fe:	ec55 4b11 	vmov	r4, r5, d1
 8022702:	f000 f965 	bl	80229d0 <__ieee754_pow>
 8022706:	f999 3000 	ldrsb.w	r3, [r9]
 802270a:	9300      	str	r3, [sp, #0]
 802270c:	3301      	adds	r3, #1
 802270e:	eeb0 8a40 	vmov.f32	s16, s0
 8022712:	eef0 8a60 	vmov.f32	s17, s1
 8022716:	46c8      	mov	r8, r9
 8022718:	d05f      	beq.n	80227da <pow+0xee>
 802271a:	4622      	mov	r2, r4
 802271c:	462b      	mov	r3, r5
 802271e:	4620      	mov	r0, r4
 8022720:	4629      	mov	r1, r5
 8022722:	f7de fa0b 	bl	8000b3c <__aeabi_dcmpun>
 8022726:	4683      	mov	fp, r0
 8022728:	2800      	cmp	r0, #0
 802272a:	d156      	bne.n	80227da <pow+0xee>
 802272c:	4632      	mov	r2, r6
 802272e:	463b      	mov	r3, r7
 8022730:	4630      	mov	r0, r6
 8022732:	4639      	mov	r1, r7
 8022734:	f7de fa02 	bl	8000b3c <__aeabi_dcmpun>
 8022738:	9001      	str	r0, [sp, #4]
 802273a:	b1e8      	cbz	r0, 8022778 <pow+0x8c>
 802273c:	2200      	movs	r2, #0
 802273e:	2300      	movs	r3, #0
 8022740:	4620      	mov	r0, r4
 8022742:	4629      	mov	r1, r5
 8022744:	f7de f9c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8022748:	2800      	cmp	r0, #0
 802274a:	d046      	beq.n	80227da <pow+0xee>
 802274c:	2301      	movs	r3, #1
 802274e:	9302      	str	r3, [sp, #8]
 8022750:	4b96      	ldr	r3, [pc, #600]	; (80229ac <pow+0x2c0>)
 8022752:	9303      	str	r3, [sp, #12]
 8022754:	4b96      	ldr	r3, [pc, #600]	; (80229b0 <pow+0x2c4>)
 8022756:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802275a:	2200      	movs	r2, #0
 802275c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022760:	9b00      	ldr	r3, [sp, #0]
 8022762:	2b02      	cmp	r3, #2
 8022764:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022768:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802276c:	d033      	beq.n	80227d6 <pow+0xea>
 802276e:	a802      	add	r0, sp, #8
 8022770:	f000 fefd 	bl	802356e <matherr>
 8022774:	bb48      	cbnz	r0, 80227ca <pow+0xde>
 8022776:	e05d      	b.n	8022834 <pow+0x148>
 8022778:	f04f 0a00 	mov.w	sl, #0
 802277c:	f04f 0b00 	mov.w	fp, #0
 8022780:	4652      	mov	r2, sl
 8022782:	465b      	mov	r3, fp
 8022784:	4630      	mov	r0, r6
 8022786:	4639      	mov	r1, r7
 8022788:	f7de f9a6 	bl	8000ad8 <__aeabi_dcmpeq>
 802278c:	ec4b ab19 	vmov	d9, sl, fp
 8022790:	2800      	cmp	r0, #0
 8022792:	d054      	beq.n	802283e <pow+0x152>
 8022794:	4652      	mov	r2, sl
 8022796:	465b      	mov	r3, fp
 8022798:	4620      	mov	r0, r4
 802279a:	4629      	mov	r1, r5
 802279c:	f7de f99c 	bl	8000ad8 <__aeabi_dcmpeq>
 80227a0:	4680      	mov	r8, r0
 80227a2:	b318      	cbz	r0, 80227ec <pow+0x100>
 80227a4:	2301      	movs	r3, #1
 80227a6:	9302      	str	r3, [sp, #8]
 80227a8:	4b80      	ldr	r3, [pc, #512]	; (80229ac <pow+0x2c0>)
 80227aa:	9303      	str	r3, [sp, #12]
 80227ac:	9b01      	ldr	r3, [sp, #4]
 80227ae:	930a      	str	r3, [sp, #40]	; 0x28
 80227b0:	9b00      	ldr	r3, [sp, #0]
 80227b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80227b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80227ba:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80227be:	2b00      	cmp	r3, #0
 80227c0:	d0d5      	beq.n	802276e <pow+0x82>
 80227c2:	4b7b      	ldr	r3, [pc, #492]	; (80229b0 <pow+0x2c4>)
 80227c4:	2200      	movs	r2, #0
 80227c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80227ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227cc:	b11b      	cbz	r3, 80227d6 <pow+0xea>
 80227ce:	f7ff faef 	bl	8021db0 <__errno>
 80227d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80227d4:	6003      	str	r3, [r0, #0]
 80227d6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80227da:	eeb0 0a48 	vmov.f32	s0, s16
 80227de:	eef0 0a68 	vmov.f32	s1, s17
 80227e2:	b00d      	add	sp, #52	; 0x34
 80227e4:	ecbd 8b04 	vpop	{d8-d9}
 80227e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80227ec:	ec45 4b10 	vmov	d0, r4, r5
 80227f0:	f000 feb5 	bl	802355e <finite>
 80227f4:	2800      	cmp	r0, #0
 80227f6:	d0f0      	beq.n	80227da <pow+0xee>
 80227f8:	4652      	mov	r2, sl
 80227fa:	465b      	mov	r3, fp
 80227fc:	4620      	mov	r0, r4
 80227fe:	4629      	mov	r1, r5
 8022800:	f7de f974 	bl	8000aec <__aeabi_dcmplt>
 8022804:	2800      	cmp	r0, #0
 8022806:	d0e8      	beq.n	80227da <pow+0xee>
 8022808:	2301      	movs	r3, #1
 802280a:	9302      	str	r3, [sp, #8]
 802280c:	4b67      	ldr	r3, [pc, #412]	; (80229ac <pow+0x2c0>)
 802280e:	9303      	str	r3, [sp, #12]
 8022810:	f999 3000 	ldrsb.w	r3, [r9]
 8022814:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8022818:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802281c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022820:	b913      	cbnz	r3, 8022828 <pow+0x13c>
 8022822:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022826:	e7a2      	b.n	802276e <pow+0x82>
 8022828:	4962      	ldr	r1, [pc, #392]	; (80229b4 <pow+0x2c8>)
 802282a:	2000      	movs	r0, #0
 802282c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022830:	2b02      	cmp	r3, #2
 8022832:	d19c      	bne.n	802276e <pow+0x82>
 8022834:	f7ff fabc 	bl	8021db0 <__errno>
 8022838:	2321      	movs	r3, #33	; 0x21
 802283a:	6003      	str	r3, [r0, #0]
 802283c:	e7c5      	b.n	80227ca <pow+0xde>
 802283e:	eeb0 0a48 	vmov.f32	s0, s16
 8022842:	eef0 0a68 	vmov.f32	s1, s17
 8022846:	f000 fe8a 	bl	802355e <finite>
 802284a:	9000      	str	r0, [sp, #0]
 802284c:	2800      	cmp	r0, #0
 802284e:	f040 8081 	bne.w	8022954 <pow+0x268>
 8022852:	ec47 6b10 	vmov	d0, r6, r7
 8022856:	f000 fe82 	bl	802355e <finite>
 802285a:	2800      	cmp	r0, #0
 802285c:	d07a      	beq.n	8022954 <pow+0x268>
 802285e:	ec45 4b10 	vmov	d0, r4, r5
 8022862:	f000 fe7c 	bl	802355e <finite>
 8022866:	2800      	cmp	r0, #0
 8022868:	d074      	beq.n	8022954 <pow+0x268>
 802286a:	ec53 2b18 	vmov	r2, r3, d8
 802286e:	ee18 0a10 	vmov	r0, s16
 8022872:	4619      	mov	r1, r3
 8022874:	f7de f962 	bl	8000b3c <__aeabi_dcmpun>
 8022878:	f999 9000 	ldrsb.w	r9, [r9]
 802287c:	4b4b      	ldr	r3, [pc, #300]	; (80229ac <pow+0x2c0>)
 802287e:	b1b0      	cbz	r0, 80228ae <pow+0x1c2>
 8022880:	2201      	movs	r2, #1
 8022882:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8022886:	9b00      	ldr	r3, [sp, #0]
 8022888:	930a      	str	r3, [sp, #40]	; 0x28
 802288a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802288e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022892:	f1b9 0f00 	cmp.w	r9, #0
 8022896:	d0c4      	beq.n	8022822 <pow+0x136>
 8022898:	4652      	mov	r2, sl
 802289a:	465b      	mov	r3, fp
 802289c:	4650      	mov	r0, sl
 802289e:	4659      	mov	r1, fp
 80228a0:	f7dd ffdc 	bl	800085c <__aeabi_ddiv>
 80228a4:	f1b9 0f02 	cmp.w	r9, #2
 80228a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80228ac:	e7c1      	b.n	8022832 <pow+0x146>
 80228ae:	2203      	movs	r2, #3
 80228b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80228b4:	900a      	str	r0, [sp, #40]	; 0x28
 80228b6:	4629      	mov	r1, r5
 80228b8:	4620      	mov	r0, r4
 80228ba:	2200      	movs	r2, #0
 80228bc:	4b3e      	ldr	r3, [pc, #248]	; (80229b8 <pow+0x2cc>)
 80228be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80228c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80228c6:	f7dd fe9f 	bl	8000608 <__aeabi_dmul>
 80228ca:	4604      	mov	r4, r0
 80228cc:	460d      	mov	r5, r1
 80228ce:	f1b9 0f00 	cmp.w	r9, #0
 80228d2:	d124      	bne.n	802291e <pow+0x232>
 80228d4:	4b39      	ldr	r3, [pc, #228]	; (80229bc <pow+0x2d0>)
 80228d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80228da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80228de:	4630      	mov	r0, r6
 80228e0:	4652      	mov	r2, sl
 80228e2:	465b      	mov	r3, fp
 80228e4:	4639      	mov	r1, r7
 80228e6:	f7de f901 	bl	8000aec <__aeabi_dcmplt>
 80228ea:	2800      	cmp	r0, #0
 80228ec:	d056      	beq.n	802299c <pow+0x2b0>
 80228ee:	ec45 4b10 	vmov	d0, r4, r5
 80228f2:	f000 fe49 	bl	8023588 <rint>
 80228f6:	4622      	mov	r2, r4
 80228f8:	462b      	mov	r3, r5
 80228fa:	ec51 0b10 	vmov	r0, r1, d0
 80228fe:	f7de f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8022902:	b920      	cbnz	r0, 802290e <pow+0x222>
 8022904:	4b2e      	ldr	r3, [pc, #184]	; (80229c0 <pow+0x2d4>)
 8022906:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 802290a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802290e:	f998 3000 	ldrsb.w	r3, [r8]
 8022912:	2b02      	cmp	r3, #2
 8022914:	d142      	bne.n	802299c <pow+0x2b0>
 8022916:	f7ff fa4b 	bl	8021db0 <__errno>
 802291a:	2322      	movs	r3, #34	; 0x22
 802291c:	e78d      	b.n	802283a <pow+0x14e>
 802291e:	4b29      	ldr	r3, [pc, #164]	; (80229c4 <pow+0x2d8>)
 8022920:	2200      	movs	r2, #0
 8022922:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022926:	4630      	mov	r0, r6
 8022928:	4652      	mov	r2, sl
 802292a:	465b      	mov	r3, fp
 802292c:	4639      	mov	r1, r7
 802292e:	f7de f8dd 	bl	8000aec <__aeabi_dcmplt>
 8022932:	2800      	cmp	r0, #0
 8022934:	d0eb      	beq.n	802290e <pow+0x222>
 8022936:	ec45 4b10 	vmov	d0, r4, r5
 802293a:	f000 fe25 	bl	8023588 <rint>
 802293e:	4622      	mov	r2, r4
 8022940:	462b      	mov	r3, r5
 8022942:	ec51 0b10 	vmov	r0, r1, d0
 8022946:	f7de f8c7 	bl	8000ad8 <__aeabi_dcmpeq>
 802294a:	2800      	cmp	r0, #0
 802294c:	d1df      	bne.n	802290e <pow+0x222>
 802294e:	2200      	movs	r2, #0
 8022950:	4b18      	ldr	r3, [pc, #96]	; (80229b4 <pow+0x2c8>)
 8022952:	e7da      	b.n	802290a <pow+0x21e>
 8022954:	2200      	movs	r2, #0
 8022956:	2300      	movs	r3, #0
 8022958:	ec51 0b18 	vmov	r0, r1, d8
 802295c:	f7de f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 8022960:	2800      	cmp	r0, #0
 8022962:	f43f af3a 	beq.w	80227da <pow+0xee>
 8022966:	ec47 6b10 	vmov	d0, r6, r7
 802296a:	f000 fdf8 	bl	802355e <finite>
 802296e:	2800      	cmp	r0, #0
 8022970:	f43f af33 	beq.w	80227da <pow+0xee>
 8022974:	ec45 4b10 	vmov	d0, r4, r5
 8022978:	f000 fdf1 	bl	802355e <finite>
 802297c:	2800      	cmp	r0, #0
 802297e:	f43f af2c 	beq.w	80227da <pow+0xee>
 8022982:	2304      	movs	r3, #4
 8022984:	9302      	str	r3, [sp, #8]
 8022986:	4b09      	ldr	r3, [pc, #36]	; (80229ac <pow+0x2c0>)
 8022988:	9303      	str	r3, [sp, #12]
 802298a:	2300      	movs	r3, #0
 802298c:	930a      	str	r3, [sp, #40]	; 0x28
 802298e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022992:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022996:	ed8d 9b08 	vstr	d9, [sp, #32]
 802299a:	e7b8      	b.n	802290e <pow+0x222>
 802299c:	a802      	add	r0, sp, #8
 802299e:	f000 fde6 	bl	802356e <matherr>
 80229a2:	2800      	cmp	r0, #0
 80229a4:	f47f af11 	bne.w	80227ca <pow+0xde>
 80229a8:	e7b5      	b.n	8022916 <pow+0x22a>
 80229aa:	bf00      	nop
 80229ac:	0802d0df 	.word	0x0802d0df
 80229b0:	3ff00000 	.word	0x3ff00000
 80229b4:	fff00000 	.word	0xfff00000
 80229b8:	3fe00000 	.word	0x3fe00000
 80229bc:	47efffff 	.word	0x47efffff
 80229c0:	c7efffff 	.word	0xc7efffff
 80229c4:	7ff00000 	.word	0x7ff00000
 80229c8:	20000070 	.word	0x20000070
 80229cc:	00000000 	.word	0x00000000

080229d0 <__ieee754_pow>:
 80229d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229d4:	b091      	sub	sp, #68	; 0x44
 80229d6:	ed8d 1b00 	vstr	d1, [sp]
 80229da:	e9dd 2900 	ldrd	r2, r9, [sp]
 80229de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80229e2:	ea58 0302 	orrs.w	r3, r8, r2
 80229e6:	ec57 6b10 	vmov	r6, r7, d0
 80229ea:	f000 84be 	beq.w	802336a <__ieee754_pow+0x99a>
 80229ee:	4b7a      	ldr	r3, [pc, #488]	; (8022bd8 <__ieee754_pow+0x208>)
 80229f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80229f4:	429c      	cmp	r4, r3
 80229f6:	463d      	mov	r5, r7
 80229f8:	ee10 aa10 	vmov	sl, s0
 80229fc:	dc09      	bgt.n	8022a12 <__ieee754_pow+0x42>
 80229fe:	d103      	bne.n	8022a08 <__ieee754_pow+0x38>
 8022a00:	b93e      	cbnz	r6, 8022a12 <__ieee754_pow+0x42>
 8022a02:	45a0      	cmp	r8, r4
 8022a04:	dc0d      	bgt.n	8022a22 <__ieee754_pow+0x52>
 8022a06:	e001      	b.n	8022a0c <__ieee754_pow+0x3c>
 8022a08:	4598      	cmp	r8, r3
 8022a0a:	dc02      	bgt.n	8022a12 <__ieee754_pow+0x42>
 8022a0c:	4598      	cmp	r8, r3
 8022a0e:	d10e      	bne.n	8022a2e <__ieee754_pow+0x5e>
 8022a10:	b16a      	cbz	r2, 8022a2e <__ieee754_pow+0x5e>
 8022a12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022a16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022a1a:	ea54 030a 	orrs.w	r3, r4, sl
 8022a1e:	f000 84a4 	beq.w	802336a <__ieee754_pow+0x99a>
 8022a22:	486e      	ldr	r0, [pc, #440]	; (8022bdc <__ieee754_pow+0x20c>)
 8022a24:	b011      	add	sp, #68	; 0x44
 8022a26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a2a:	f000 bda5 	b.w	8023578 <nan>
 8022a2e:	2d00      	cmp	r5, #0
 8022a30:	da53      	bge.n	8022ada <__ieee754_pow+0x10a>
 8022a32:	4b6b      	ldr	r3, [pc, #428]	; (8022be0 <__ieee754_pow+0x210>)
 8022a34:	4598      	cmp	r8, r3
 8022a36:	dc4d      	bgt.n	8022ad4 <__ieee754_pow+0x104>
 8022a38:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8022a3c:	4598      	cmp	r8, r3
 8022a3e:	dd4c      	ble.n	8022ada <__ieee754_pow+0x10a>
 8022a40:	ea4f 5328 	mov.w	r3, r8, asr #20
 8022a44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022a48:	2b14      	cmp	r3, #20
 8022a4a:	dd26      	ble.n	8022a9a <__ieee754_pow+0xca>
 8022a4c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8022a50:	fa22 f103 	lsr.w	r1, r2, r3
 8022a54:	fa01 f303 	lsl.w	r3, r1, r3
 8022a58:	4293      	cmp	r3, r2
 8022a5a:	d13e      	bne.n	8022ada <__ieee754_pow+0x10a>
 8022a5c:	f001 0101 	and.w	r1, r1, #1
 8022a60:	f1c1 0b02 	rsb	fp, r1, #2
 8022a64:	2a00      	cmp	r2, #0
 8022a66:	d15b      	bne.n	8022b20 <__ieee754_pow+0x150>
 8022a68:	4b5b      	ldr	r3, [pc, #364]	; (8022bd8 <__ieee754_pow+0x208>)
 8022a6a:	4598      	cmp	r8, r3
 8022a6c:	d124      	bne.n	8022ab8 <__ieee754_pow+0xe8>
 8022a6e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8022a72:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8022a76:	ea53 030a 	orrs.w	r3, r3, sl
 8022a7a:	f000 8476 	beq.w	802336a <__ieee754_pow+0x99a>
 8022a7e:	4b59      	ldr	r3, [pc, #356]	; (8022be4 <__ieee754_pow+0x214>)
 8022a80:	429c      	cmp	r4, r3
 8022a82:	dd2d      	ble.n	8022ae0 <__ieee754_pow+0x110>
 8022a84:	f1b9 0f00 	cmp.w	r9, #0
 8022a88:	f280 8473 	bge.w	8023372 <__ieee754_pow+0x9a2>
 8022a8c:	2000      	movs	r0, #0
 8022a8e:	2100      	movs	r1, #0
 8022a90:	ec41 0b10 	vmov	d0, r0, r1
 8022a94:	b011      	add	sp, #68	; 0x44
 8022a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a9a:	2a00      	cmp	r2, #0
 8022a9c:	d13e      	bne.n	8022b1c <__ieee754_pow+0x14c>
 8022a9e:	f1c3 0314 	rsb	r3, r3, #20
 8022aa2:	fa48 f103 	asr.w	r1, r8, r3
 8022aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8022aaa:	4543      	cmp	r3, r8
 8022aac:	f040 8469 	bne.w	8023382 <__ieee754_pow+0x9b2>
 8022ab0:	f001 0101 	and.w	r1, r1, #1
 8022ab4:	f1c1 0b02 	rsb	fp, r1, #2
 8022ab8:	4b4b      	ldr	r3, [pc, #300]	; (8022be8 <__ieee754_pow+0x218>)
 8022aba:	4598      	cmp	r8, r3
 8022abc:	d118      	bne.n	8022af0 <__ieee754_pow+0x120>
 8022abe:	f1b9 0f00 	cmp.w	r9, #0
 8022ac2:	f280 845a 	bge.w	802337a <__ieee754_pow+0x9aa>
 8022ac6:	4948      	ldr	r1, [pc, #288]	; (8022be8 <__ieee754_pow+0x218>)
 8022ac8:	4632      	mov	r2, r6
 8022aca:	463b      	mov	r3, r7
 8022acc:	2000      	movs	r0, #0
 8022ace:	f7dd fec5 	bl	800085c <__aeabi_ddiv>
 8022ad2:	e7dd      	b.n	8022a90 <__ieee754_pow+0xc0>
 8022ad4:	f04f 0b02 	mov.w	fp, #2
 8022ad8:	e7c4      	b.n	8022a64 <__ieee754_pow+0x94>
 8022ada:	f04f 0b00 	mov.w	fp, #0
 8022ade:	e7c1      	b.n	8022a64 <__ieee754_pow+0x94>
 8022ae0:	f1b9 0f00 	cmp.w	r9, #0
 8022ae4:	dad2      	bge.n	8022a8c <__ieee754_pow+0xbc>
 8022ae6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8022aea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022aee:	e7cf      	b.n	8022a90 <__ieee754_pow+0xc0>
 8022af0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8022af4:	d106      	bne.n	8022b04 <__ieee754_pow+0x134>
 8022af6:	4632      	mov	r2, r6
 8022af8:	463b      	mov	r3, r7
 8022afa:	4610      	mov	r0, r2
 8022afc:	4619      	mov	r1, r3
 8022afe:	f7dd fd83 	bl	8000608 <__aeabi_dmul>
 8022b02:	e7c5      	b.n	8022a90 <__ieee754_pow+0xc0>
 8022b04:	4b39      	ldr	r3, [pc, #228]	; (8022bec <__ieee754_pow+0x21c>)
 8022b06:	4599      	cmp	r9, r3
 8022b08:	d10a      	bne.n	8022b20 <__ieee754_pow+0x150>
 8022b0a:	2d00      	cmp	r5, #0
 8022b0c:	db08      	blt.n	8022b20 <__ieee754_pow+0x150>
 8022b0e:	ec47 6b10 	vmov	d0, r6, r7
 8022b12:	b011      	add	sp, #68	; 0x44
 8022b14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b18:	f000 bc68 	b.w	80233ec <__ieee754_sqrt>
 8022b1c:	f04f 0b00 	mov.w	fp, #0
 8022b20:	ec47 6b10 	vmov	d0, r6, r7
 8022b24:	f000 fd12 	bl	802354c <fabs>
 8022b28:	ec51 0b10 	vmov	r0, r1, d0
 8022b2c:	f1ba 0f00 	cmp.w	sl, #0
 8022b30:	d127      	bne.n	8022b82 <__ieee754_pow+0x1b2>
 8022b32:	b124      	cbz	r4, 8022b3e <__ieee754_pow+0x16e>
 8022b34:	4b2c      	ldr	r3, [pc, #176]	; (8022be8 <__ieee754_pow+0x218>)
 8022b36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8022b3a:	429a      	cmp	r2, r3
 8022b3c:	d121      	bne.n	8022b82 <__ieee754_pow+0x1b2>
 8022b3e:	f1b9 0f00 	cmp.w	r9, #0
 8022b42:	da05      	bge.n	8022b50 <__ieee754_pow+0x180>
 8022b44:	4602      	mov	r2, r0
 8022b46:	460b      	mov	r3, r1
 8022b48:	2000      	movs	r0, #0
 8022b4a:	4927      	ldr	r1, [pc, #156]	; (8022be8 <__ieee754_pow+0x218>)
 8022b4c:	f7dd fe86 	bl	800085c <__aeabi_ddiv>
 8022b50:	2d00      	cmp	r5, #0
 8022b52:	da9d      	bge.n	8022a90 <__ieee754_pow+0xc0>
 8022b54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8022b58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8022b5c:	ea54 030b 	orrs.w	r3, r4, fp
 8022b60:	d108      	bne.n	8022b74 <__ieee754_pow+0x1a4>
 8022b62:	4602      	mov	r2, r0
 8022b64:	460b      	mov	r3, r1
 8022b66:	4610      	mov	r0, r2
 8022b68:	4619      	mov	r1, r3
 8022b6a:	f7dd fb95 	bl	8000298 <__aeabi_dsub>
 8022b6e:	4602      	mov	r2, r0
 8022b70:	460b      	mov	r3, r1
 8022b72:	e7ac      	b.n	8022ace <__ieee754_pow+0xfe>
 8022b74:	f1bb 0f01 	cmp.w	fp, #1
 8022b78:	d18a      	bne.n	8022a90 <__ieee754_pow+0xc0>
 8022b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8022b7e:	4619      	mov	r1, r3
 8022b80:	e786      	b.n	8022a90 <__ieee754_pow+0xc0>
 8022b82:	0fed      	lsrs	r5, r5, #31
 8022b84:	1e6b      	subs	r3, r5, #1
 8022b86:	930d      	str	r3, [sp, #52]	; 0x34
 8022b88:	ea5b 0303 	orrs.w	r3, fp, r3
 8022b8c:	d102      	bne.n	8022b94 <__ieee754_pow+0x1c4>
 8022b8e:	4632      	mov	r2, r6
 8022b90:	463b      	mov	r3, r7
 8022b92:	e7e8      	b.n	8022b66 <__ieee754_pow+0x196>
 8022b94:	4b16      	ldr	r3, [pc, #88]	; (8022bf0 <__ieee754_pow+0x220>)
 8022b96:	4598      	cmp	r8, r3
 8022b98:	f340 80fe 	ble.w	8022d98 <__ieee754_pow+0x3c8>
 8022b9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8022ba0:	4598      	cmp	r8, r3
 8022ba2:	dd0a      	ble.n	8022bba <__ieee754_pow+0x1ea>
 8022ba4:	4b0f      	ldr	r3, [pc, #60]	; (8022be4 <__ieee754_pow+0x214>)
 8022ba6:	429c      	cmp	r4, r3
 8022ba8:	dc0d      	bgt.n	8022bc6 <__ieee754_pow+0x1f6>
 8022baa:	f1b9 0f00 	cmp.w	r9, #0
 8022bae:	f6bf af6d 	bge.w	8022a8c <__ieee754_pow+0xbc>
 8022bb2:	a307      	add	r3, pc, #28	; (adr r3, 8022bd0 <__ieee754_pow+0x200>)
 8022bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022bb8:	e79f      	b.n	8022afa <__ieee754_pow+0x12a>
 8022bba:	4b0e      	ldr	r3, [pc, #56]	; (8022bf4 <__ieee754_pow+0x224>)
 8022bbc:	429c      	cmp	r4, r3
 8022bbe:	ddf4      	ble.n	8022baa <__ieee754_pow+0x1da>
 8022bc0:	4b09      	ldr	r3, [pc, #36]	; (8022be8 <__ieee754_pow+0x218>)
 8022bc2:	429c      	cmp	r4, r3
 8022bc4:	dd18      	ble.n	8022bf8 <__ieee754_pow+0x228>
 8022bc6:	f1b9 0f00 	cmp.w	r9, #0
 8022bca:	dcf2      	bgt.n	8022bb2 <__ieee754_pow+0x1e2>
 8022bcc:	e75e      	b.n	8022a8c <__ieee754_pow+0xbc>
 8022bce:	bf00      	nop
 8022bd0:	8800759c 	.word	0x8800759c
 8022bd4:	7e37e43c 	.word	0x7e37e43c
 8022bd8:	7ff00000 	.word	0x7ff00000
 8022bdc:	0802d0b1 	.word	0x0802d0b1
 8022be0:	433fffff 	.word	0x433fffff
 8022be4:	3fefffff 	.word	0x3fefffff
 8022be8:	3ff00000 	.word	0x3ff00000
 8022bec:	3fe00000 	.word	0x3fe00000
 8022bf0:	41e00000 	.word	0x41e00000
 8022bf4:	3feffffe 	.word	0x3feffffe
 8022bf8:	2200      	movs	r2, #0
 8022bfa:	4b63      	ldr	r3, [pc, #396]	; (8022d88 <__ieee754_pow+0x3b8>)
 8022bfc:	f7dd fb4c 	bl	8000298 <__aeabi_dsub>
 8022c00:	a355      	add	r3, pc, #340	; (adr r3, 8022d58 <__ieee754_pow+0x388>)
 8022c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c06:	4604      	mov	r4, r0
 8022c08:	460d      	mov	r5, r1
 8022c0a:	f7dd fcfd 	bl	8000608 <__aeabi_dmul>
 8022c0e:	a354      	add	r3, pc, #336	; (adr r3, 8022d60 <__ieee754_pow+0x390>)
 8022c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c14:	4606      	mov	r6, r0
 8022c16:	460f      	mov	r7, r1
 8022c18:	4620      	mov	r0, r4
 8022c1a:	4629      	mov	r1, r5
 8022c1c:	f7dd fcf4 	bl	8000608 <__aeabi_dmul>
 8022c20:	2200      	movs	r2, #0
 8022c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022c26:	4b59      	ldr	r3, [pc, #356]	; (8022d8c <__ieee754_pow+0x3bc>)
 8022c28:	4620      	mov	r0, r4
 8022c2a:	4629      	mov	r1, r5
 8022c2c:	f7dd fcec 	bl	8000608 <__aeabi_dmul>
 8022c30:	4602      	mov	r2, r0
 8022c32:	460b      	mov	r3, r1
 8022c34:	a14c      	add	r1, pc, #304	; (adr r1, 8022d68 <__ieee754_pow+0x398>)
 8022c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022c3a:	f7dd fb2d 	bl	8000298 <__aeabi_dsub>
 8022c3e:	4622      	mov	r2, r4
 8022c40:	462b      	mov	r3, r5
 8022c42:	f7dd fce1 	bl	8000608 <__aeabi_dmul>
 8022c46:	4602      	mov	r2, r0
 8022c48:	460b      	mov	r3, r1
 8022c4a:	2000      	movs	r0, #0
 8022c4c:	4950      	ldr	r1, [pc, #320]	; (8022d90 <__ieee754_pow+0x3c0>)
 8022c4e:	f7dd fb23 	bl	8000298 <__aeabi_dsub>
 8022c52:	4622      	mov	r2, r4
 8022c54:	462b      	mov	r3, r5
 8022c56:	4680      	mov	r8, r0
 8022c58:	4689      	mov	r9, r1
 8022c5a:	4620      	mov	r0, r4
 8022c5c:	4629      	mov	r1, r5
 8022c5e:	f7dd fcd3 	bl	8000608 <__aeabi_dmul>
 8022c62:	4602      	mov	r2, r0
 8022c64:	460b      	mov	r3, r1
 8022c66:	4640      	mov	r0, r8
 8022c68:	4649      	mov	r1, r9
 8022c6a:	f7dd fccd 	bl	8000608 <__aeabi_dmul>
 8022c6e:	a340      	add	r3, pc, #256	; (adr r3, 8022d70 <__ieee754_pow+0x3a0>)
 8022c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c74:	f7dd fcc8 	bl	8000608 <__aeabi_dmul>
 8022c78:	4602      	mov	r2, r0
 8022c7a:	460b      	mov	r3, r1
 8022c7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022c80:	f7dd fb0a 	bl	8000298 <__aeabi_dsub>
 8022c84:	4602      	mov	r2, r0
 8022c86:	460b      	mov	r3, r1
 8022c88:	4604      	mov	r4, r0
 8022c8a:	460d      	mov	r5, r1
 8022c8c:	4630      	mov	r0, r6
 8022c8e:	4639      	mov	r1, r7
 8022c90:	f7dd fb04 	bl	800029c <__adddf3>
 8022c94:	2000      	movs	r0, #0
 8022c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022c9a:	4632      	mov	r2, r6
 8022c9c:	463b      	mov	r3, r7
 8022c9e:	f7dd fafb 	bl	8000298 <__aeabi_dsub>
 8022ca2:	4602      	mov	r2, r0
 8022ca4:	460b      	mov	r3, r1
 8022ca6:	4620      	mov	r0, r4
 8022ca8:	4629      	mov	r1, r5
 8022caa:	f7dd faf5 	bl	8000298 <__aeabi_dsub>
 8022cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022cb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8022cb4:	4313      	orrs	r3, r2
 8022cb6:	4606      	mov	r6, r0
 8022cb8:	460f      	mov	r7, r1
 8022cba:	f040 81eb 	bne.w	8023094 <__ieee754_pow+0x6c4>
 8022cbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022d78 <__ieee754_pow+0x3a8>
 8022cc2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8022cc6:	2400      	movs	r4, #0
 8022cc8:	4622      	mov	r2, r4
 8022cca:	462b      	mov	r3, r5
 8022ccc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8022cd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8022cd4:	f7dd fae0 	bl	8000298 <__aeabi_dsub>
 8022cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022cdc:	f7dd fc94 	bl	8000608 <__aeabi_dmul>
 8022ce0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022ce4:	4680      	mov	r8, r0
 8022ce6:	4689      	mov	r9, r1
 8022ce8:	4630      	mov	r0, r6
 8022cea:	4639      	mov	r1, r7
 8022cec:	f7dd fc8c 	bl	8000608 <__aeabi_dmul>
 8022cf0:	4602      	mov	r2, r0
 8022cf2:	460b      	mov	r3, r1
 8022cf4:	4640      	mov	r0, r8
 8022cf6:	4649      	mov	r1, r9
 8022cf8:	f7dd fad0 	bl	800029c <__adddf3>
 8022cfc:	4622      	mov	r2, r4
 8022cfe:	462b      	mov	r3, r5
 8022d00:	4680      	mov	r8, r0
 8022d02:	4689      	mov	r9, r1
 8022d04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022d08:	f7dd fc7e 	bl	8000608 <__aeabi_dmul>
 8022d0c:	460b      	mov	r3, r1
 8022d0e:	4604      	mov	r4, r0
 8022d10:	460d      	mov	r5, r1
 8022d12:	4602      	mov	r2, r0
 8022d14:	4649      	mov	r1, r9
 8022d16:	4640      	mov	r0, r8
 8022d18:	e9cd 4500 	strd	r4, r5, [sp]
 8022d1c:	f7dd fabe 	bl	800029c <__adddf3>
 8022d20:	4b1c      	ldr	r3, [pc, #112]	; (8022d94 <__ieee754_pow+0x3c4>)
 8022d22:	4299      	cmp	r1, r3
 8022d24:	4606      	mov	r6, r0
 8022d26:	460f      	mov	r7, r1
 8022d28:	468b      	mov	fp, r1
 8022d2a:	f340 82f7 	ble.w	802331c <__ieee754_pow+0x94c>
 8022d2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8022d32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8022d36:	4303      	orrs	r3, r0
 8022d38:	f000 81ea 	beq.w	8023110 <__ieee754_pow+0x740>
 8022d3c:	a310      	add	r3, pc, #64	; (adr r3, 8022d80 <__ieee754_pow+0x3b0>)
 8022d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8022d46:	f7dd fc5f 	bl	8000608 <__aeabi_dmul>
 8022d4a:	a30d      	add	r3, pc, #52	; (adr r3, 8022d80 <__ieee754_pow+0x3b0>)
 8022d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d50:	e6d5      	b.n	8022afe <__ieee754_pow+0x12e>
 8022d52:	bf00      	nop
 8022d54:	f3af 8000 	nop.w
 8022d58:	60000000 	.word	0x60000000
 8022d5c:	3ff71547 	.word	0x3ff71547
 8022d60:	f85ddf44 	.word	0xf85ddf44
 8022d64:	3e54ae0b 	.word	0x3e54ae0b
 8022d68:	55555555 	.word	0x55555555
 8022d6c:	3fd55555 	.word	0x3fd55555
 8022d70:	652b82fe 	.word	0x652b82fe
 8022d74:	3ff71547 	.word	0x3ff71547
 8022d78:	00000000 	.word	0x00000000
 8022d7c:	bff00000 	.word	0xbff00000
 8022d80:	8800759c 	.word	0x8800759c
 8022d84:	7e37e43c 	.word	0x7e37e43c
 8022d88:	3ff00000 	.word	0x3ff00000
 8022d8c:	3fd00000 	.word	0x3fd00000
 8022d90:	3fe00000 	.word	0x3fe00000
 8022d94:	408fffff 	.word	0x408fffff
 8022d98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8022d9c:	f04f 0200 	mov.w	r2, #0
 8022da0:	da05      	bge.n	8022dae <__ieee754_pow+0x3de>
 8022da2:	4bd3      	ldr	r3, [pc, #844]	; (80230f0 <__ieee754_pow+0x720>)
 8022da4:	f7dd fc30 	bl	8000608 <__aeabi_dmul>
 8022da8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8022dac:	460c      	mov	r4, r1
 8022dae:	1523      	asrs	r3, r4, #20
 8022db0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8022db4:	4413      	add	r3, r2
 8022db6:	9309      	str	r3, [sp, #36]	; 0x24
 8022db8:	4bce      	ldr	r3, [pc, #824]	; (80230f4 <__ieee754_pow+0x724>)
 8022dba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8022dbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8022dc2:	429c      	cmp	r4, r3
 8022dc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8022dc8:	dd08      	ble.n	8022ddc <__ieee754_pow+0x40c>
 8022dca:	4bcb      	ldr	r3, [pc, #812]	; (80230f8 <__ieee754_pow+0x728>)
 8022dcc:	429c      	cmp	r4, r3
 8022dce:	f340 815e 	ble.w	802308e <__ieee754_pow+0x6be>
 8022dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dd4:	3301      	adds	r3, #1
 8022dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8022dd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8022ddc:	f04f 0a00 	mov.w	sl, #0
 8022de0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8022de4:	930c      	str	r3, [sp, #48]	; 0x30
 8022de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022de8:	4bc4      	ldr	r3, [pc, #784]	; (80230fc <__ieee754_pow+0x72c>)
 8022dea:	4413      	add	r3, r2
 8022dec:	ed93 7b00 	vldr	d7, [r3]
 8022df0:	4629      	mov	r1, r5
 8022df2:	ec53 2b17 	vmov	r2, r3, d7
 8022df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022dfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022dfe:	f7dd fa4b 	bl	8000298 <__aeabi_dsub>
 8022e02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022e06:	4606      	mov	r6, r0
 8022e08:	460f      	mov	r7, r1
 8022e0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022e0e:	f7dd fa45 	bl	800029c <__adddf3>
 8022e12:	4602      	mov	r2, r0
 8022e14:	460b      	mov	r3, r1
 8022e16:	2000      	movs	r0, #0
 8022e18:	49b9      	ldr	r1, [pc, #740]	; (8023100 <__ieee754_pow+0x730>)
 8022e1a:	f7dd fd1f 	bl	800085c <__aeabi_ddiv>
 8022e1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8022e22:	4602      	mov	r2, r0
 8022e24:	460b      	mov	r3, r1
 8022e26:	4630      	mov	r0, r6
 8022e28:	4639      	mov	r1, r7
 8022e2a:	f7dd fbed 	bl	8000608 <__aeabi_dmul>
 8022e2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022e32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8022e36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	9302      	str	r3, [sp, #8]
 8022e3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8022e42:	106d      	asrs	r5, r5, #1
 8022e44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8022e48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8022e4c:	2200      	movs	r2, #0
 8022e4e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8022e52:	4640      	mov	r0, r8
 8022e54:	4649      	mov	r1, r9
 8022e56:	4614      	mov	r4, r2
 8022e58:	461d      	mov	r5, r3
 8022e5a:	f7dd fbd5 	bl	8000608 <__aeabi_dmul>
 8022e5e:	4602      	mov	r2, r0
 8022e60:	460b      	mov	r3, r1
 8022e62:	4630      	mov	r0, r6
 8022e64:	4639      	mov	r1, r7
 8022e66:	f7dd fa17 	bl	8000298 <__aeabi_dsub>
 8022e6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022e6e:	4606      	mov	r6, r0
 8022e70:	460f      	mov	r7, r1
 8022e72:	4620      	mov	r0, r4
 8022e74:	4629      	mov	r1, r5
 8022e76:	f7dd fa0f 	bl	8000298 <__aeabi_dsub>
 8022e7a:	4602      	mov	r2, r0
 8022e7c:	460b      	mov	r3, r1
 8022e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8022e82:	f7dd fa09 	bl	8000298 <__aeabi_dsub>
 8022e86:	4642      	mov	r2, r8
 8022e88:	464b      	mov	r3, r9
 8022e8a:	f7dd fbbd 	bl	8000608 <__aeabi_dmul>
 8022e8e:	4602      	mov	r2, r0
 8022e90:	460b      	mov	r3, r1
 8022e92:	4630      	mov	r0, r6
 8022e94:	4639      	mov	r1, r7
 8022e96:	f7dd f9ff 	bl	8000298 <__aeabi_dsub>
 8022e9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8022e9e:	f7dd fbb3 	bl	8000608 <__aeabi_dmul>
 8022ea2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022ea6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022eaa:	4610      	mov	r0, r2
 8022eac:	4619      	mov	r1, r3
 8022eae:	f7dd fbab 	bl	8000608 <__aeabi_dmul>
 8022eb2:	a37b      	add	r3, pc, #492	; (adr r3, 80230a0 <__ieee754_pow+0x6d0>)
 8022eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eb8:	4604      	mov	r4, r0
 8022eba:	460d      	mov	r5, r1
 8022ebc:	f7dd fba4 	bl	8000608 <__aeabi_dmul>
 8022ec0:	a379      	add	r3, pc, #484	; (adr r3, 80230a8 <__ieee754_pow+0x6d8>)
 8022ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec6:	f7dd f9e9 	bl	800029c <__adddf3>
 8022eca:	4622      	mov	r2, r4
 8022ecc:	462b      	mov	r3, r5
 8022ece:	f7dd fb9b 	bl	8000608 <__aeabi_dmul>
 8022ed2:	a377      	add	r3, pc, #476	; (adr r3, 80230b0 <__ieee754_pow+0x6e0>)
 8022ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ed8:	f7dd f9e0 	bl	800029c <__adddf3>
 8022edc:	4622      	mov	r2, r4
 8022ede:	462b      	mov	r3, r5
 8022ee0:	f7dd fb92 	bl	8000608 <__aeabi_dmul>
 8022ee4:	a374      	add	r3, pc, #464	; (adr r3, 80230b8 <__ieee754_pow+0x6e8>)
 8022ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022eea:	f7dd f9d7 	bl	800029c <__adddf3>
 8022eee:	4622      	mov	r2, r4
 8022ef0:	462b      	mov	r3, r5
 8022ef2:	f7dd fb89 	bl	8000608 <__aeabi_dmul>
 8022ef6:	a372      	add	r3, pc, #456	; (adr r3, 80230c0 <__ieee754_pow+0x6f0>)
 8022ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022efc:	f7dd f9ce 	bl	800029c <__adddf3>
 8022f00:	4622      	mov	r2, r4
 8022f02:	462b      	mov	r3, r5
 8022f04:	f7dd fb80 	bl	8000608 <__aeabi_dmul>
 8022f08:	a36f      	add	r3, pc, #444	; (adr r3, 80230c8 <__ieee754_pow+0x6f8>)
 8022f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f0e:	f7dd f9c5 	bl	800029c <__adddf3>
 8022f12:	4622      	mov	r2, r4
 8022f14:	4606      	mov	r6, r0
 8022f16:	460f      	mov	r7, r1
 8022f18:	462b      	mov	r3, r5
 8022f1a:	4620      	mov	r0, r4
 8022f1c:	4629      	mov	r1, r5
 8022f1e:	f7dd fb73 	bl	8000608 <__aeabi_dmul>
 8022f22:	4602      	mov	r2, r0
 8022f24:	460b      	mov	r3, r1
 8022f26:	4630      	mov	r0, r6
 8022f28:	4639      	mov	r1, r7
 8022f2a:	f7dd fb6d 	bl	8000608 <__aeabi_dmul>
 8022f2e:	4642      	mov	r2, r8
 8022f30:	4604      	mov	r4, r0
 8022f32:	460d      	mov	r5, r1
 8022f34:	464b      	mov	r3, r9
 8022f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8022f3a:	f7dd f9af 	bl	800029c <__adddf3>
 8022f3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022f42:	f7dd fb61 	bl	8000608 <__aeabi_dmul>
 8022f46:	4622      	mov	r2, r4
 8022f48:	462b      	mov	r3, r5
 8022f4a:	f7dd f9a7 	bl	800029c <__adddf3>
 8022f4e:	4642      	mov	r2, r8
 8022f50:	4606      	mov	r6, r0
 8022f52:	460f      	mov	r7, r1
 8022f54:	464b      	mov	r3, r9
 8022f56:	4640      	mov	r0, r8
 8022f58:	4649      	mov	r1, r9
 8022f5a:	f7dd fb55 	bl	8000608 <__aeabi_dmul>
 8022f5e:	2200      	movs	r2, #0
 8022f60:	4b68      	ldr	r3, [pc, #416]	; (8023104 <__ieee754_pow+0x734>)
 8022f62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8022f66:	f7dd f999 	bl	800029c <__adddf3>
 8022f6a:	4632      	mov	r2, r6
 8022f6c:	463b      	mov	r3, r7
 8022f6e:	f7dd f995 	bl	800029c <__adddf3>
 8022f72:	9802      	ldr	r0, [sp, #8]
 8022f74:	460d      	mov	r5, r1
 8022f76:	4604      	mov	r4, r0
 8022f78:	4602      	mov	r2, r0
 8022f7a:	460b      	mov	r3, r1
 8022f7c:	4640      	mov	r0, r8
 8022f7e:	4649      	mov	r1, r9
 8022f80:	f7dd fb42 	bl	8000608 <__aeabi_dmul>
 8022f84:	2200      	movs	r2, #0
 8022f86:	4680      	mov	r8, r0
 8022f88:	4689      	mov	r9, r1
 8022f8a:	4b5e      	ldr	r3, [pc, #376]	; (8023104 <__ieee754_pow+0x734>)
 8022f8c:	4620      	mov	r0, r4
 8022f8e:	4629      	mov	r1, r5
 8022f90:	f7dd f982 	bl	8000298 <__aeabi_dsub>
 8022f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8022f98:	f7dd f97e 	bl	8000298 <__aeabi_dsub>
 8022f9c:	4602      	mov	r2, r0
 8022f9e:	460b      	mov	r3, r1
 8022fa0:	4630      	mov	r0, r6
 8022fa2:	4639      	mov	r1, r7
 8022fa4:	f7dd f978 	bl	8000298 <__aeabi_dsub>
 8022fa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8022fac:	f7dd fb2c 	bl	8000608 <__aeabi_dmul>
 8022fb0:	4622      	mov	r2, r4
 8022fb2:	4606      	mov	r6, r0
 8022fb4:	460f      	mov	r7, r1
 8022fb6:	462b      	mov	r3, r5
 8022fb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022fbc:	f7dd fb24 	bl	8000608 <__aeabi_dmul>
 8022fc0:	4602      	mov	r2, r0
 8022fc2:	460b      	mov	r3, r1
 8022fc4:	4630      	mov	r0, r6
 8022fc6:	4639      	mov	r1, r7
 8022fc8:	f7dd f968 	bl	800029c <__adddf3>
 8022fcc:	4606      	mov	r6, r0
 8022fce:	460f      	mov	r7, r1
 8022fd0:	4602      	mov	r2, r0
 8022fd2:	460b      	mov	r3, r1
 8022fd4:	4640      	mov	r0, r8
 8022fd6:	4649      	mov	r1, r9
 8022fd8:	f7dd f960 	bl	800029c <__adddf3>
 8022fdc:	9802      	ldr	r0, [sp, #8]
 8022fde:	a33c      	add	r3, pc, #240	; (adr r3, 80230d0 <__ieee754_pow+0x700>)
 8022fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fe4:	4604      	mov	r4, r0
 8022fe6:	460d      	mov	r5, r1
 8022fe8:	f7dd fb0e 	bl	8000608 <__aeabi_dmul>
 8022fec:	4642      	mov	r2, r8
 8022fee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022ff2:	464b      	mov	r3, r9
 8022ff4:	4620      	mov	r0, r4
 8022ff6:	4629      	mov	r1, r5
 8022ff8:	f7dd f94e 	bl	8000298 <__aeabi_dsub>
 8022ffc:	4602      	mov	r2, r0
 8022ffe:	460b      	mov	r3, r1
 8023000:	4630      	mov	r0, r6
 8023002:	4639      	mov	r1, r7
 8023004:	f7dd f948 	bl	8000298 <__aeabi_dsub>
 8023008:	a333      	add	r3, pc, #204	; (adr r3, 80230d8 <__ieee754_pow+0x708>)
 802300a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802300e:	f7dd fafb 	bl	8000608 <__aeabi_dmul>
 8023012:	a333      	add	r3, pc, #204	; (adr r3, 80230e0 <__ieee754_pow+0x710>)
 8023014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023018:	4606      	mov	r6, r0
 802301a:	460f      	mov	r7, r1
 802301c:	4620      	mov	r0, r4
 802301e:	4629      	mov	r1, r5
 8023020:	f7dd faf2 	bl	8000608 <__aeabi_dmul>
 8023024:	4602      	mov	r2, r0
 8023026:	460b      	mov	r3, r1
 8023028:	4630      	mov	r0, r6
 802302a:	4639      	mov	r1, r7
 802302c:	f7dd f936 	bl	800029c <__adddf3>
 8023030:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023032:	4b35      	ldr	r3, [pc, #212]	; (8023108 <__ieee754_pow+0x738>)
 8023034:	4413      	add	r3, r2
 8023036:	e9d3 2300 	ldrd	r2, r3, [r3]
 802303a:	f7dd f92f 	bl	800029c <__adddf3>
 802303e:	4604      	mov	r4, r0
 8023040:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023042:	460d      	mov	r5, r1
 8023044:	f7dd fa76 	bl	8000534 <__aeabi_i2d>
 8023048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802304a:	4b30      	ldr	r3, [pc, #192]	; (802310c <__ieee754_pow+0x73c>)
 802304c:	4413      	add	r3, r2
 802304e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023052:	4606      	mov	r6, r0
 8023054:	460f      	mov	r7, r1
 8023056:	4622      	mov	r2, r4
 8023058:	462b      	mov	r3, r5
 802305a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802305e:	f7dd f91d 	bl	800029c <__adddf3>
 8023062:	4642      	mov	r2, r8
 8023064:	464b      	mov	r3, r9
 8023066:	f7dd f919 	bl	800029c <__adddf3>
 802306a:	4632      	mov	r2, r6
 802306c:	463b      	mov	r3, r7
 802306e:	f7dd f915 	bl	800029c <__adddf3>
 8023072:	9802      	ldr	r0, [sp, #8]
 8023074:	4632      	mov	r2, r6
 8023076:	463b      	mov	r3, r7
 8023078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802307c:	f7dd f90c 	bl	8000298 <__aeabi_dsub>
 8023080:	4642      	mov	r2, r8
 8023082:	464b      	mov	r3, r9
 8023084:	f7dd f908 	bl	8000298 <__aeabi_dsub>
 8023088:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802308c:	e607      	b.n	8022c9e <__ieee754_pow+0x2ce>
 802308e:	f04f 0a01 	mov.w	sl, #1
 8023092:	e6a5      	b.n	8022de0 <__ieee754_pow+0x410>
 8023094:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80230e8 <__ieee754_pow+0x718>
 8023098:	e613      	b.n	8022cc2 <__ieee754_pow+0x2f2>
 802309a:	bf00      	nop
 802309c:	f3af 8000 	nop.w
 80230a0:	4a454eef 	.word	0x4a454eef
 80230a4:	3fca7e28 	.word	0x3fca7e28
 80230a8:	93c9db65 	.word	0x93c9db65
 80230ac:	3fcd864a 	.word	0x3fcd864a
 80230b0:	a91d4101 	.word	0xa91d4101
 80230b4:	3fd17460 	.word	0x3fd17460
 80230b8:	518f264d 	.word	0x518f264d
 80230bc:	3fd55555 	.word	0x3fd55555
 80230c0:	db6fabff 	.word	0xdb6fabff
 80230c4:	3fdb6db6 	.word	0x3fdb6db6
 80230c8:	33333303 	.word	0x33333303
 80230cc:	3fe33333 	.word	0x3fe33333
 80230d0:	e0000000 	.word	0xe0000000
 80230d4:	3feec709 	.word	0x3feec709
 80230d8:	dc3a03fd 	.word	0xdc3a03fd
 80230dc:	3feec709 	.word	0x3feec709
 80230e0:	145b01f5 	.word	0x145b01f5
 80230e4:	be3e2fe0 	.word	0xbe3e2fe0
 80230e8:	00000000 	.word	0x00000000
 80230ec:	3ff00000 	.word	0x3ff00000
 80230f0:	43400000 	.word	0x43400000
 80230f4:	0003988e 	.word	0x0003988e
 80230f8:	000bb679 	.word	0x000bb679
 80230fc:	0802d0e8 	.word	0x0802d0e8
 8023100:	3ff00000 	.word	0x3ff00000
 8023104:	40080000 	.word	0x40080000
 8023108:	0802d108 	.word	0x0802d108
 802310c:	0802d0f8 	.word	0x0802d0f8
 8023110:	a3b4      	add	r3, pc, #720	; (adr r3, 80233e4 <__ieee754_pow+0xa14>)
 8023112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023116:	4640      	mov	r0, r8
 8023118:	4649      	mov	r1, r9
 802311a:	f7dd f8bf 	bl	800029c <__adddf3>
 802311e:	4622      	mov	r2, r4
 8023120:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023124:	462b      	mov	r3, r5
 8023126:	4630      	mov	r0, r6
 8023128:	4639      	mov	r1, r7
 802312a:	f7dd f8b5 	bl	8000298 <__aeabi_dsub>
 802312e:	4602      	mov	r2, r0
 8023130:	460b      	mov	r3, r1
 8023132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023136:	f7dd fcf7 	bl	8000b28 <__aeabi_dcmpgt>
 802313a:	2800      	cmp	r0, #0
 802313c:	f47f adfe 	bne.w	8022d3c <__ieee754_pow+0x36c>
 8023140:	4aa3      	ldr	r2, [pc, #652]	; (80233d0 <__ieee754_pow+0xa00>)
 8023142:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023146:	4293      	cmp	r3, r2
 8023148:	f340 810a 	ble.w	8023360 <__ieee754_pow+0x990>
 802314c:	151b      	asrs	r3, r3, #20
 802314e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023152:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023156:	fa4a f303 	asr.w	r3, sl, r3
 802315a:	445b      	add	r3, fp
 802315c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023160:	4e9c      	ldr	r6, [pc, #624]	; (80233d4 <__ieee754_pow+0xa04>)
 8023162:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023166:	4116      	asrs	r6, r2
 8023168:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 802316c:	2000      	movs	r0, #0
 802316e:	ea23 0106 	bic.w	r1, r3, r6
 8023172:	f1c2 0214 	rsb	r2, r2, #20
 8023176:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802317a:	fa4a fa02 	asr.w	sl, sl, r2
 802317e:	f1bb 0f00 	cmp.w	fp, #0
 8023182:	4602      	mov	r2, r0
 8023184:	460b      	mov	r3, r1
 8023186:	4620      	mov	r0, r4
 8023188:	4629      	mov	r1, r5
 802318a:	bfb8      	it	lt
 802318c:	f1ca 0a00 	rsblt	sl, sl, #0
 8023190:	f7dd f882 	bl	8000298 <__aeabi_dsub>
 8023194:	e9cd 0100 	strd	r0, r1, [sp]
 8023198:	4642      	mov	r2, r8
 802319a:	464b      	mov	r3, r9
 802319c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231a0:	f7dd f87c 	bl	800029c <__adddf3>
 80231a4:	2000      	movs	r0, #0
 80231a6:	a378      	add	r3, pc, #480	; (adr r3, 8023388 <__ieee754_pow+0x9b8>)
 80231a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ac:	4604      	mov	r4, r0
 80231ae:	460d      	mov	r5, r1
 80231b0:	f7dd fa2a 	bl	8000608 <__aeabi_dmul>
 80231b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80231b8:	4606      	mov	r6, r0
 80231ba:	460f      	mov	r7, r1
 80231bc:	4620      	mov	r0, r4
 80231be:	4629      	mov	r1, r5
 80231c0:	f7dd f86a 	bl	8000298 <__aeabi_dsub>
 80231c4:	4602      	mov	r2, r0
 80231c6:	460b      	mov	r3, r1
 80231c8:	4640      	mov	r0, r8
 80231ca:	4649      	mov	r1, r9
 80231cc:	f7dd f864 	bl	8000298 <__aeabi_dsub>
 80231d0:	a36f      	add	r3, pc, #444	; (adr r3, 8023390 <__ieee754_pow+0x9c0>)
 80231d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231d6:	f7dd fa17 	bl	8000608 <__aeabi_dmul>
 80231da:	a36f      	add	r3, pc, #444	; (adr r3, 8023398 <__ieee754_pow+0x9c8>)
 80231dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e0:	4680      	mov	r8, r0
 80231e2:	4689      	mov	r9, r1
 80231e4:	4620      	mov	r0, r4
 80231e6:	4629      	mov	r1, r5
 80231e8:	f7dd fa0e 	bl	8000608 <__aeabi_dmul>
 80231ec:	4602      	mov	r2, r0
 80231ee:	460b      	mov	r3, r1
 80231f0:	4640      	mov	r0, r8
 80231f2:	4649      	mov	r1, r9
 80231f4:	f7dd f852 	bl	800029c <__adddf3>
 80231f8:	4604      	mov	r4, r0
 80231fa:	460d      	mov	r5, r1
 80231fc:	4602      	mov	r2, r0
 80231fe:	460b      	mov	r3, r1
 8023200:	4630      	mov	r0, r6
 8023202:	4639      	mov	r1, r7
 8023204:	f7dd f84a 	bl	800029c <__adddf3>
 8023208:	4632      	mov	r2, r6
 802320a:	463b      	mov	r3, r7
 802320c:	4680      	mov	r8, r0
 802320e:	4689      	mov	r9, r1
 8023210:	f7dd f842 	bl	8000298 <__aeabi_dsub>
 8023214:	4602      	mov	r2, r0
 8023216:	460b      	mov	r3, r1
 8023218:	4620      	mov	r0, r4
 802321a:	4629      	mov	r1, r5
 802321c:	f7dd f83c 	bl	8000298 <__aeabi_dsub>
 8023220:	4642      	mov	r2, r8
 8023222:	4606      	mov	r6, r0
 8023224:	460f      	mov	r7, r1
 8023226:	464b      	mov	r3, r9
 8023228:	4640      	mov	r0, r8
 802322a:	4649      	mov	r1, r9
 802322c:	f7dd f9ec 	bl	8000608 <__aeabi_dmul>
 8023230:	a35b      	add	r3, pc, #364	; (adr r3, 80233a0 <__ieee754_pow+0x9d0>)
 8023232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023236:	4604      	mov	r4, r0
 8023238:	460d      	mov	r5, r1
 802323a:	f7dd f9e5 	bl	8000608 <__aeabi_dmul>
 802323e:	a35a      	add	r3, pc, #360	; (adr r3, 80233a8 <__ieee754_pow+0x9d8>)
 8023240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023244:	f7dd f828 	bl	8000298 <__aeabi_dsub>
 8023248:	4622      	mov	r2, r4
 802324a:	462b      	mov	r3, r5
 802324c:	f7dd f9dc 	bl	8000608 <__aeabi_dmul>
 8023250:	a357      	add	r3, pc, #348	; (adr r3, 80233b0 <__ieee754_pow+0x9e0>)
 8023252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023256:	f7dd f821 	bl	800029c <__adddf3>
 802325a:	4622      	mov	r2, r4
 802325c:	462b      	mov	r3, r5
 802325e:	f7dd f9d3 	bl	8000608 <__aeabi_dmul>
 8023262:	a355      	add	r3, pc, #340	; (adr r3, 80233b8 <__ieee754_pow+0x9e8>)
 8023264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023268:	f7dd f816 	bl	8000298 <__aeabi_dsub>
 802326c:	4622      	mov	r2, r4
 802326e:	462b      	mov	r3, r5
 8023270:	f7dd f9ca 	bl	8000608 <__aeabi_dmul>
 8023274:	a352      	add	r3, pc, #328	; (adr r3, 80233c0 <__ieee754_pow+0x9f0>)
 8023276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802327a:	f7dd f80f 	bl	800029c <__adddf3>
 802327e:	4622      	mov	r2, r4
 8023280:	462b      	mov	r3, r5
 8023282:	f7dd f9c1 	bl	8000608 <__aeabi_dmul>
 8023286:	4602      	mov	r2, r0
 8023288:	460b      	mov	r3, r1
 802328a:	4640      	mov	r0, r8
 802328c:	4649      	mov	r1, r9
 802328e:	f7dd f803 	bl	8000298 <__aeabi_dsub>
 8023292:	4604      	mov	r4, r0
 8023294:	460d      	mov	r5, r1
 8023296:	4602      	mov	r2, r0
 8023298:	460b      	mov	r3, r1
 802329a:	4640      	mov	r0, r8
 802329c:	4649      	mov	r1, r9
 802329e:	f7dd f9b3 	bl	8000608 <__aeabi_dmul>
 80232a2:	2200      	movs	r2, #0
 80232a4:	e9cd 0100 	strd	r0, r1, [sp]
 80232a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80232ac:	4620      	mov	r0, r4
 80232ae:	4629      	mov	r1, r5
 80232b0:	f7dc fff2 	bl	8000298 <__aeabi_dsub>
 80232b4:	4602      	mov	r2, r0
 80232b6:	460b      	mov	r3, r1
 80232b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80232bc:	f7dd face 	bl	800085c <__aeabi_ddiv>
 80232c0:	4632      	mov	r2, r6
 80232c2:	4604      	mov	r4, r0
 80232c4:	460d      	mov	r5, r1
 80232c6:	463b      	mov	r3, r7
 80232c8:	4640      	mov	r0, r8
 80232ca:	4649      	mov	r1, r9
 80232cc:	f7dd f99c 	bl	8000608 <__aeabi_dmul>
 80232d0:	4632      	mov	r2, r6
 80232d2:	463b      	mov	r3, r7
 80232d4:	f7dc ffe2 	bl	800029c <__adddf3>
 80232d8:	4602      	mov	r2, r0
 80232da:	460b      	mov	r3, r1
 80232dc:	4620      	mov	r0, r4
 80232de:	4629      	mov	r1, r5
 80232e0:	f7dc ffda 	bl	8000298 <__aeabi_dsub>
 80232e4:	4642      	mov	r2, r8
 80232e6:	464b      	mov	r3, r9
 80232e8:	f7dc ffd6 	bl	8000298 <__aeabi_dsub>
 80232ec:	4602      	mov	r2, r0
 80232ee:	460b      	mov	r3, r1
 80232f0:	2000      	movs	r0, #0
 80232f2:	4939      	ldr	r1, [pc, #228]	; (80233d8 <__ieee754_pow+0xa08>)
 80232f4:	f7dc ffd0 	bl	8000298 <__aeabi_dsub>
 80232f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80232fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023300:	4602      	mov	r2, r0
 8023302:	460b      	mov	r3, r1
 8023304:	da2f      	bge.n	8023366 <__ieee754_pow+0x996>
 8023306:	4650      	mov	r0, sl
 8023308:	ec43 2b10 	vmov	d0, r2, r3
 802330c:	f000 f9c0 	bl	8023690 <scalbn>
 8023310:	ec51 0b10 	vmov	r0, r1, d0
 8023314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023318:	f7ff bbf1 	b.w	8022afe <__ieee754_pow+0x12e>
 802331c:	4b2f      	ldr	r3, [pc, #188]	; (80233dc <__ieee754_pow+0xa0c>)
 802331e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023322:	429e      	cmp	r6, r3
 8023324:	f77f af0c 	ble.w	8023140 <__ieee754_pow+0x770>
 8023328:	4b2d      	ldr	r3, [pc, #180]	; (80233e0 <__ieee754_pow+0xa10>)
 802332a:	440b      	add	r3, r1
 802332c:	4303      	orrs	r3, r0
 802332e:	d00b      	beq.n	8023348 <__ieee754_pow+0x978>
 8023330:	a325      	add	r3, pc, #148	; (adr r3, 80233c8 <__ieee754_pow+0x9f8>)
 8023332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802333a:	f7dd f965 	bl	8000608 <__aeabi_dmul>
 802333e:	a322      	add	r3, pc, #136	; (adr r3, 80233c8 <__ieee754_pow+0x9f8>)
 8023340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023344:	f7ff bbdb 	b.w	8022afe <__ieee754_pow+0x12e>
 8023348:	4622      	mov	r2, r4
 802334a:	462b      	mov	r3, r5
 802334c:	f7dc ffa4 	bl	8000298 <__aeabi_dsub>
 8023350:	4642      	mov	r2, r8
 8023352:	464b      	mov	r3, r9
 8023354:	f7dd fbde 	bl	8000b14 <__aeabi_dcmpge>
 8023358:	2800      	cmp	r0, #0
 802335a:	f43f aef1 	beq.w	8023140 <__ieee754_pow+0x770>
 802335e:	e7e7      	b.n	8023330 <__ieee754_pow+0x960>
 8023360:	f04f 0a00 	mov.w	sl, #0
 8023364:	e718      	b.n	8023198 <__ieee754_pow+0x7c8>
 8023366:	4621      	mov	r1, r4
 8023368:	e7d4      	b.n	8023314 <__ieee754_pow+0x944>
 802336a:	2000      	movs	r0, #0
 802336c:	491a      	ldr	r1, [pc, #104]	; (80233d8 <__ieee754_pow+0xa08>)
 802336e:	f7ff bb8f 	b.w	8022a90 <__ieee754_pow+0xc0>
 8023372:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023376:	f7ff bb8b 	b.w	8022a90 <__ieee754_pow+0xc0>
 802337a:	4630      	mov	r0, r6
 802337c:	4639      	mov	r1, r7
 802337e:	f7ff bb87 	b.w	8022a90 <__ieee754_pow+0xc0>
 8023382:	4693      	mov	fp, r2
 8023384:	f7ff bb98 	b.w	8022ab8 <__ieee754_pow+0xe8>
 8023388:	00000000 	.word	0x00000000
 802338c:	3fe62e43 	.word	0x3fe62e43
 8023390:	fefa39ef 	.word	0xfefa39ef
 8023394:	3fe62e42 	.word	0x3fe62e42
 8023398:	0ca86c39 	.word	0x0ca86c39
 802339c:	be205c61 	.word	0xbe205c61
 80233a0:	72bea4d0 	.word	0x72bea4d0
 80233a4:	3e663769 	.word	0x3e663769
 80233a8:	c5d26bf1 	.word	0xc5d26bf1
 80233ac:	3ebbbd41 	.word	0x3ebbbd41
 80233b0:	af25de2c 	.word	0xaf25de2c
 80233b4:	3f11566a 	.word	0x3f11566a
 80233b8:	16bebd93 	.word	0x16bebd93
 80233bc:	3f66c16c 	.word	0x3f66c16c
 80233c0:	5555553e 	.word	0x5555553e
 80233c4:	3fc55555 	.word	0x3fc55555
 80233c8:	c2f8f359 	.word	0xc2f8f359
 80233cc:	01a56e1f 	.word	0x01a56e1f
 80233d0:	3fe00000 	.word	0x3fe00000
 80233d4:	000fffff 	.word	0x000fffff
 80233d8:	3ff00000 	.word	0x3ff00000
 80233dc:	4090cbff 	.word	0x4090cbff
 80233e0:	3f6f3400 	.word	0x3f6f3400
 80233e4:	652b82fe 	.word	0x652b82fe
 80233e8:	3c971547 	.word	0x3c971547

080233ec <__ieee754_sqrt>:
 80233ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80233f0:	4955      	ldr	r1, [pc, #340]	; (8023548 <__ieee754_sqrt+0x15c>)
 80233f2:	ec55 4b10 	vmov	r4, r5, d0
 80233f6:	43a9      	bics	r1, r5
 80233f8:	462b      	mov	r3, r5
 80233fa:	462a      	mov	r2, r5
 80233fc:	d112      	bne.n	8023424 <__ieee754_sqrt+0x38>
 80233fe:	ee10 2a10 	vmov	r2, s0
 8023402:	ee10 0a10 	vmov	r0, s0
 8023406:	4629      	mov	r1, r5
 8023408:	f7dd f8fe 	bl	8000608 <__aeabi_dmul>
 802340c:	4602      	mov	r2, r0
 802340e:	460b      	mov	r3, r1
 8023410:	4620      	mov	r0, r4
 8023412:	4629      	mov	r1, r5
 8023414:	f7dc ff42 	bl	800029c <__adddf3>
 8023418:	4604      	mov	r4, r0
 802341a:	460d      	mov	r5, r1
 802341c:	ec45 4b10 	vmov	d0, r4, r5
 8023420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023424:	2d00      	cmp	r5, #0
 8023426:	ee10 0a10 	vmov	r0, s0
 802342a:	4621      	mov	r1, r4
 802342c:	dc0f      	bgt.n	802344e <__ieee754_sqrt+0x62>
 802342e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023432:	4330      	orrs	r0, r6
 8023434:	d0f2      	beq.n	802341c <__ieee754_sqrt+0x30>
 8023436:	b155      	cbz	r5, 802344e <__ieee754_sqrt+0x62>
 8023438:	ee10 2a10 	vmov	r2, s0
 802343c:	4620      	mov	r0, r4
 802343e:	4629      	mov	r1, r5
 8023440:	f7dc ff2a 	bl	8000298 <__aeabi_dsub>
 8023444:	4602      	mov	r2, r0
 8023446:	460b      	mov	r3, r1
 8023448:	f7dd fa08 	bl	800085c <__aeabi_ddiv>
 802344c:	e7e4      	b.n	8023418 <__ieee754_sqrt+0x2c>
 802344e:	151b      	asrs	r3, r3, #20
 8023450:	d073      	beq.n	802353a <__ieee754_sqrt+0x14e>
 8023452:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023456:	07dd      	lsls	r5, r3, #31
 8023458:	f3c2 0213 	ubfx	r2, r2, #0, #20
 802345c:	bf48      	it	mi
 802345e:	0fc8      	lsrmi	r0, r1, #31
 8023460:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8023464:	bf44      	itt	mi
 8023466:	0049      	lslmi	r1, r1, #1
 8023468:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 802346c:	2500      	movs	r5, #0
 802346e:	1058      	asrs	r0, r3, #1
 8023470:	0fcb      	lsrs	r3, r1, #31
 8023472:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8023476:	0049      	lsls	r1, r1, #1
 8023478:	2316      	movs	r3, #22
 802347a:	462c      	mov	r4, r5
 802347c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8023480:	19a7      	adds	r7, r4, r6
 8023482:	4297      	cmp	r7, r2
 8023484:	bfde      	ittt	le
 8023486:	19bc      	addle	r4, r7, r6
 8023488:	1bd2      	suble	r2, r2, r7
 802348a:	19ad      	addle	r5, r5, r6
 802348c:	0fcf      	lsrs	r7, r1, #31
 802348e:	3b01      	subs	r3, #1
 8023490:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8023494:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8023498:	ea4f 0656 	mov.w	r6, r6, lsr #1
 802349c:	d1f0      	bne.n	8023480 <__ieee754_sqrt+0x94>
 802349e:	f04f 0c20 	mov.w	ip, #32
 80234a2:	469e      	mov	lr, r3
 80234a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80234a8:	42a2      	cmp	r2, r4
 80234aa:	eb06 070e 	add.w	r7, r6, lr
 80234ae:	dc02      	bgt.n	80234b6 <__ieee754_sqrt+0xca>
 80234b0:	d112      	bne.n	80234d8 <__ieee754_sqrt+0xec>
 80234b2:	428f      	cmp	r7, r1
 80234b4:	d810      	bhi.n	80234d8 <__ieee754_sqrt+0xec>
 80234b6:	2f00      	cmp	r7, #0
 80234b8:	eb07 0e06 	add.w	lr, r7, r6
 80234bc:	da42      	bge.n	8023544 <__ieee754_sqrt+0x158>
 80234be:	f1be 0f00 	cmp.w	lr, #0
 80234c2:	db3f      	blt.n	8023544 <__ieee754_sqrt+0x158>
 80234c4:	f104 0801 	add.w	r8, r4, #1
 80234c8:	1b12      	subs	r2, r2, r4
 80234ca:	428f      	cmp	r7, r1
 80234cc:	bf88      	it	hi
 80234ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80234d2:	1bc9      	subs	r1, r1, r7
 80234d4:	4433      	add	r3, r6
 80234d6:	4644      	mov	r4, r8
 80234d8:	0052      	lsls	r2, r2, #1
 80234da:	f1bc 0c01 	subs.w	ip, ip, #1
 80234de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80234e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80234e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80234ea:	d1dd      	bne.n	80234a8 <__ieee754_sqrt+0xbc>
 80234ec:	430a      	orrs	r2, r1
 80234ee:	d006      	beq.n	80234fe <__ieee754_sqrt+0x112>
 80234f0:	1c5c      	adds	r4, r3, #1
 80234f2:	bf13      	iteet	ne
 80234f4:	3301      	addne	r3, #1
 80234f6:	3501      	addeq	r5, #1
 80234f8:	4663      	moveq	r3, ip
 80234fa:	f023 0301 	bicne.w	r3, r3, #1
 80234fe:	106a      	asrs	r2, r5, #1
 8023500:	085b      	lsrs	r3, r3, #1
 8023502:	07e9      	lsls	r1, r5, #31
 8023504:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8023508:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802350c:	bf48      	it	mi
 802350e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8023512:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8023516:	461c      	mov	r4, r3
 8023518:	e780      	b.n	802341c <__ieee754_sqrt+0x30>
 802351a:	0aca      	lsrs	r2, r1, #11
 802351c:	3815      	subs	r0, #21
 802351e:	0549      	lsls	r1, r1, #21
 8023520:	2a00      	cmp	r2, #0
 8023522:	d0fa      	beq.n	802351a <__ieee754_sqrt+0x12e>
 8023524:	02d6      	lsls	r6, r2, #11
 8023526:	d50a      	bpl.n	802353e <__ieee754_sqrt+0x152>
 8023528:	f1c3 0420 	rsb	r4, r3, #32
 802352c:	fa21 f404 	lsr.w	r4, r1, r4
 8023530:	1e5d      	subs	r5, r3, #1
 8023532:	4099      	lsls	r1, r3
 8023534:	4322      	orrs	r2, r4
 8023536:	1b43      	subs	r3, r0, r5
 8023538:	e78b      	b.n	8023452 <__ieee754_sqrt+0x66>
 802353a:	4618      	mov	r0, r3
 802353c:	e7f0      	b.n	8023520 <__ieee754_sqrt+0x134>
 802353e:	0052      	lsls	r2, r2, #1
 8023540:	3301      	adds	r3, #1
 8023542:	e7ef      	b.n	8023524 <__ieee754_sqrt+0x138>
 8023544:	46a0      	mov	r8, r4
 8023546:	e7bf      	b.n	80234c8 <__ieee754_sqrt+0xdc>
 8023548:	7ff00000 	.word	0x7ff00000

0802354c <fabs>:
 802354c:	ec51 0b10 	vmov	r0, r1, d0
 8023550:	ee10 2a10 	vmov	r2, s0
 8023554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023558:	ec43 2b10 	vmov	d0, r2, r3
 802355c:	4770      	bx	lr

0802355e <finite>:
 802355e:	ee10 3a90 	vmov	r3, s1
 8023562:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8023566:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802356a:	0fc0      	lsrs	r0, r0, #31
 802356c:	4770      	bx	lr

0802356e <matherr>:
 802356e:	2000      	movs	r0, #0
 8023570:	4770      	bx	lr
 8023572:	0000      	movs	r0, r0
 8023574:	0000      	movs	r0, r0
	...

08023578 <nan>:
 8023578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8023580 <nan+0x8>
 802357c:	4770      	bx	lr
 802357e:	bf00      	nop
 8023580:	00000000 	.word	0x00000000
 8023584:	7ff80000 	.word	0x7ff80000

08023588 <rint>:
 8023588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802358a:	ec51 0b10 	vmov	r0, r1, d0
 802358e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023592:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8023596:	2e13      	cmp	r6, #19
 8023598:	460b      	mov	r3, r1
 802359a:	ee10 4a10 	vmov	r4, s0
 802359e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80235a2:	dc56      	bgt.n	8023652 <rint+0xca>
 80235a4:	2e00      	cmp	r6, #0
 80235a6:	da2b      	bge.n	8023600 <rint+0x78>
 80235a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80235ac:	4302      	orrs	r2, r0
 80235ae:	d023      	beq.n	80235f8 <rint+0x70>
 80235b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80235b4:	4302      	orrs	r2, r0
 80235b6:	4254      	negs	r4, r2
 80235b8:	4314      	orrs	r4, r2
 80235ba:	0c4b      	lsrs	r3, r1, #17
 80235bc:	0b24      	lsrs	r4, r4, #12
 80235be:	045b      	lsls	r3, r3, #17
 80235c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80235c4:	ea44 0103 	orr.w	r1, r4, r3
 80235c8:	460b      	mov	r3, r1
 80235ca:	492f      	ldr	r1, [pc, #188]	; (8023688 <rint+0x100>)
 80235cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80235d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80235d4:	4602      	mov	r2, r0
 80235d6:	4639      	mov	r1, r7
 80235d8:	4630      	mov	r0, r6
 80235da:	f7dc fe5f 	bl	800029c <__adddf3>
 80235de:	e9cd 0100 	strd	r0, r1, [sp]
 80235e2:	463b      	mov	r3, r7
 80235e4:	4632      	mov	r2, r6
 80235e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80235ea:	f7dc fe55 	bl	8000298 <__aeabi_dsub>
 80235ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80235f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80235f6:	4639      	mov	r1, r7
 80235f8:	ec41 0b10 	vmov	d0, r0, r1
 80235fc:	b003      	add	sp, #12
 80235fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023600:	4a22      	ldr	r2, [pc, #136]	; (802368c <rint+0x104>)
 8023602:	4132      	asrs	r2, r6
 8023604:	ea01 0702 	and.w	r7, r1, r2
 8023608:	4307      	orrs	r7, r0
 802360a:	d0f5      	beq.n	80235f8 <rint+0x70>
 802360c:	0852      	lsrs	r2, r2, #1
 802360e:	4011      	ands	r1, r2
 8023610:	430c      	orrs	r4, r1
 8023612:	d00b      	beq.n	802362c <rint+0xa4>
 8023614:	ea23 0202 	bic.w	r2, r3, r2
 8023618:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 802361c:	2e13      	cmp	r6, #19
 802361e:	fa43 f306 	asr.w	r3, r3, r6
 8023622:	bf0c      	ite	eq
 8023624:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8023628:	2400      	movne	r4, #0
 802362a:	4313      	orrs	r3, r2
 802362c:	4916      	ldr	r1, [pc, #88]	; (8023688 <rint+0x100>)
 802362e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8023632:	4622      	mov	r2, r4
 8023634:	e9d5 4500 	ldrd	r4, r5, [r5]
 8023638:	4620      	mov	r0, r4
 802363a:	4629      	mov	r1, r5
 802363c:	f7dc fe2e 	bl	800029c <__adddf3>
 8023640:	e9cd 0100 	strd	r0, r1, [sp]
 8023644:	4622      	mov	r2, r4
 8023646:	462b      	mov	r3, r5
 8023648:	e9dd 0100 	ldrd	r0, r1, [sp]
 802364c:	f7dc fe24 	bl	8000298 <__aeabi_dsub>
 8023650:	e7d2      	b.n	80235f8 <rint+0x70>
 8023652:	2e33      	cmp	r6, #51	; 0x33
 8023654:	dd07      	ble.n	8023666 <rint+0xde>
 8023656:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802365a:	d1cd      	bne.n	80235f8 <rint+0x70>
 802365c:	ee10 2a10 	vmov	r2, s0
 8023660:	f7dc fe1c 	bl	800029c <__adddf3>
 8023664:	e7c8      	b.n	80235f8 <rint+0x70>
 8023666:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 802366a:	f04f 32ff 	mov.w	r2, #4294967295
 802366e:	40f2      	lsrs	r2, r6
 8023670:	4210      	tst	r0, r2
 8023672:	d0c1      	beq.n	80235f8 <rint+0x70>
 8023674:	0852      	lsrs	r2, r2, #1
 8023676:	4210      	tst	r0, r2
 8023678:	bf1f      	itttt	ne
 802367a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 802367e:	ea20 0202 	bicne.w	r2, r0, r2
 8023682:	4134      	asrne	r4, r6
 8023684:	4314      	orrne	r4, r2
 8023686:	e7d1      	b.n	802362c <rint+0xa4>
 8023688:	0802d118 	.word	0x0802d118
 802368c:	000fffff 	.word	0x000fffff

08023690 <scalbn>:
 8023690:	b570      	push	{r4, r5, r6, lr}
 8023692:	ec55 4b10 	vmov	r4, r5, d0
 8023696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802369a:	4606      	mov	r6, r0
 802369c:	462b      	mov	r3, r5
 802369e:	b9aa      	cbnz	r2, 80236cc <scalbn+0x3c>
 80236a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80236a4:	4323      	orrs	r3, r4
 80236a6:	d03b      	beq.n	8023720 <scalbn+0x90>
 80236a8:	4b31      	ldr	r3, [pc, #196]	; (8023770 <scalbn+0xe0>)
 80236aa:	4629      	mov	r1, r5
 80236ac:	2200      	movs	r2, #0
 80236ae:	ee10 0a10 	vmov	r0, s0
 80236b2:	f7dc ffa9 	bl	8000608 <__aeabi_dmul>
 80236b6:	4b2f      	ldr	r3, [pc, #188]	; (8023774 <scalbn+0xe4>)
 80236b8:	429e      	cmp	r6, r3
 80236ba:	4604      	mov	r4, r0
 80236bc:	460d      	mov	r5, r1
 80236be:	da12      	bge.n	80236e6 <scalbn+0x56>
 80236c0:	a327      	add	r3, pc, #156	; (adr r3, 8023760 <scalbn+0xd0>)
 80236c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236c6:	f7dc ff9f 	bl	8000608 <__aeabi_dmul>
 80236ca:	e009      	b.n	80236e0 <scalbn+0x50>
 80236cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80236d0:	428a      	cmp	r2, r1
 80236d2:	d10c      	bne.n	80236ee <scalbn+0x5e>
 80236d4:	ee10 2a10 	vmov	r2, s0
 80236d8:	4620      	mov	r0, r4
 80236da:	4629      	mov	r1, r5
 80236dc:	f7dc fdde 	bl	800029c <__adddf3>
 80236e0:	4604      	mov	r4, r0
 80236e2:	460d      	mov	r5, r1
 80236e4:	e01c      	b.n	8023720 <scalbn+0x90>
 80236e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80236ea:	460b      	mov	r3, r1
 80236ec:	3a36      	subs	r2, #54	; 0x36
 80236ee:	4432      	add	r2, r6
 80236f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80236f4:	428a      	cmp	r2, r1
 80236f6:	dd0b      	ble.n	8023710 <scalbn+0x80>
 80236f8:	ec45 4b11 	vmov	d1, r4, r5
 80236fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8023768 <scalbn+0xd8>
 8023700:	f000 f83c 	bl	802377c <copysign>
 8023704:	a318      	add	r3, pc, #96	; (adr r3, 8023768 <scalbn+0xd8>)
 8023706:	e9d3 2300 	ldrd	r2, r3, [r3]
 802370a:	ec51 0b10 	vmov	r0, r1, d0
 802370e:	e7da      	b.n	80236c6 <scalbn+0x36>
 8023710:	2a00      	cmp	r2, #0
 8023712:	dd08      	ble.n	8023726 <scalbn+0x96>
 8023714:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023718:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802371c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023720:	ec45 4b10 	vmov	d0, r4, r5
 8023724:	bd70      	pop	{r4, r5, r6, pc}
 8023726:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802372a:	da0d      	bge.n	8023748 <scalbn+0xb8>
 802372c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023730:	429e      	cmp	r6, r3
 8023732:	ec45 4b11 	vmov	d1, r4, r5
 8023736:	dce1      	bgt.n	80236fc <scalbn+0x6c>
 8023738:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8023760 <scalbn+0xd0>
 802373c:	f000 f81e 	bl	802377c <copysign>
 8023740:	a307      	add	r3, pc, #28	; (adr r3, 8023760 <scalbn+0xd0>)
 8023742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023746:	e7e0      	b.n	802370a <scalbn+0x7a>
 8023748:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802374c:	3236      	adds	r2, #54	; 0x36
 802374e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023752:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023756:	4620      	mov	r0, r4
 8023758:	4629      	mov	r1, r5
 802375a:	2200      	movs	r2, #0
 802375c:	4b06      	ldr	r3, [pc, #24]	; (8023778 <scalbn+0xe8>)
 802375e:	e7b2      	b.n	80236c6 <scalbn+0x36>
 8023760:	c2f8f359 	.word	0xc2f8f359
 8023764:	01a56e1f 	.word	0x01a56e1f
 8023768:	8800759c 	.word	0x8800759c
 802376c:	7e37e43c 	.word	0x7e37e43c
 8023770:	43500000 	.word	0x43500000
 8023774:	ffff3cb0 	.word	0xffff3cb0
 8023778:	3c900000 	.word	0x3c900000

0802377c <copysign>:
 802377c:	ec51 0b10 	vmov	r0, r1, d0
 8023780:	ee11 0a90 	vmov	r0, s3
 8023784:	ee10 2a10 	vmov	r2, s0
 8023788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 802378c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8023790:	ea41 0300 	orr.w	r3, r1, r0
 8023794:	ec43 2b10 	vmov	d0, r2, r3
 8023798:	4770      	bx	lr
	...

0802379c <_init>:
 802379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802379e:	bf00      	nop
 80237a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237a2:	bc08      	pop	{r3}
 80237a4:	469e      	mov	lr, r3
 80237a6:	4770      	bx	lr

080237a8 <_fini>:
 80237a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237aa:	bf00      	nop
 80237ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80237ae:	bc08      	pop	{r3}
 80237b0:	469e      	mov	lr, r3
 80237b2:	4770      	bx	lr
